llvm::MDNode *llvm::DISubrange::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _OWORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E4F143B8];
  if (a6) {
    goto LABEL_9;
  }
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 560);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v21 = 0;
  v16 = sub_1CD5B3380(v15, &v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 560) + 8 * *(unsigned int *)(v14 + 576))) {
    result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = a5;
    v19 = operator new(0x38uLL);
    *v19 = 0u;
    v19[1] = 0u;
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 2), (uint64_t)a1, 9, a6, (uint64_t)&v22, 4, 0, 0);
    *((_WORD *)v19 + 17) = 33;
    return sub_1CD5B0AB0(v20, a6, *a1 + 560);
  }
  return result;
}

unint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  unint64_t v1 = *((void *)this - *((unsigned int *)this + 2));
  if (!v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)v1;
  if (v2 == 1) {
    return *(void *)(v1 + 128) & 0xFFFFFFFFFFFFFFF9;
  }
  if ((v2 & 0xFE) == 0x18) {
    return v1 & 0xFFFFFFFFFFFFFFF9 | 2;
  }
  if (v2 == 6) {
    return v1 & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  else {
    return 0;
  }
}

uint64_t llvm::DIGenericSubrange::DIGenericSubrange(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 34, a3, a4, a5, 0, 0);
  *(_WORD *)(result + 2) = 69;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 34, a3, a4, a5, 0, 0);
  *(_WORD *)(result + 2) = 69;
  return result;
}

llvm::MDNode *llvm::DIGenericSubrange::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1136);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21 = 0;
  int v16 = sub_1CD5B398C(v15, &v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1136) + 8 * *(unsigned int *)(v14 + 1152))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    v19 = operator new(0x38uLL);
    _OWORD *v19 = 0u;
    v19[1] = 0u;
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 2), (uint64_t)a1, 34, a6, (uint64_t)&v22, 4, 0, 0);
    *((_WORD *)v19 + 17) = 69;
    return sub_1CD5B0C24(v20, a6, *a1 + 1136);
  }
  return result;
}

llvm::MDNode *llvm::DIEnumerator::getImpl(void *a1, const llvm::APInt *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a5) {
    goto LABEL_13;
  }
  uint64_t v11 = *a1;
  v12 = (uint64_t *)(*a1 + 584);
  if (*((_DWORD *)a2 + 2) > 0x40u) {
    operator new[]();
  }
  uint64_t v13 = *(void *)a2;
  unsigned int v22 = *((_DWORD *)a2 + 2);
  v20 = 0;
  uint64_t v21 = v13;
  uint64_t v23 = a4;
  char v24 = a3;
  int v14 = sub_1CD5B3EA8(v12, (llvm *)&v21, &v20);
  uint64_t v15 = 0;
  if (v14 && v20 != (uint64_t *)(*(void *)(v11 + 584) + 8 * *(unsigned int *)(v11 + 600))) {
    uint64_t v15 = *v20;
  }
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  if (!v15 && a6)
  {
LABEL_13:
    uint64_t v21 = a4;
    int v16 = operator new(0x30uLL);
    *int v16 = 0;
    v17 = (llvm::MDNode *)llvm::DIEnumerator::DIEnumerator((uint64_t)(v16 + 1), (uint64_t)a1, a5, a2, a3, (uint64_t)&v21, 1);
    return sub_1CD5B0E0C(v17, a5, *a1 + 584);
  }
  return (llvm::MDNode *)v15;
}

llvm::MDNode *llvm::DIBasicType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  __int16 v15 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a8) {
    goto LABEL_7;
  }
  uint64_t v17 = *a1;
  v18 = (uint64_t *)(*a1 + 608);
  LODWORD(v24) = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  int v27 = a5;
  int v28 = a6;
  int v29 = a7;
  uint64_t v23 = 0;
  int v19 = sub_1CD5B42F0(v18, (uint64_t)&v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v19 && v23 != (llvm::MDNode **)(*(void *)(v17 + 608) + 8 * *(unsigned int *)(v17 + 624))) {
    uint64_t result = *v23;
  }
  if (!result && a9)
  {
LABEL_7:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = a3;
    uint64_t v21 = operator new(0x50uLL);
    v21[1] = 0;
    v21[2] = 0;
    *uint64_t v21 = 0;
    unsigned int v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 3), (uint64_t)a1, 11, a8, (uint64_t)&v24, 3, 0, 0);
    *((_WORD *)v21 + 13) = v15;
    *((_DWORD *)v21 + 12) = 0;
    *((_DWORD *)v21 + 13) = a7;
    v21[7] = a4;
    v21[8] = 0;
    *((_DWORD *)v21 + 18) = a5;
    *((_DWORD *)v21 + 19) = a6;
    return sub_1CD5B0E6C(v22, a8, *a1 + 608);
  }
  return result;
}

llvm::MDNode *llvm::DIStringType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, char a11)
{
  int v11 = a8;
  uint64_t v12 = a7;
  __int16 v17 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a10) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  v20 = (uint64_t *)(*a1 + 1112);
  LODWORD(v28) = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  int v27 = 0;
  uint64_t v33 = a7;
  int v34 = a8;
  int v35 = a9;
  int v22 = sub_1CD5B47E4(v20, (uint64_t)&v28, (uint64_t **)&v27);
  uint64_t result = 0;
  if (v22 && v27 != (llvm::MDNode **)(*(void *)(v19 + 1112) + 8 * *(unsigned int *)(v19 + 1128))) {
    uint64_t result = *v27;
  }
  if (!result)
  {
    int v11 = a8;
    uint64_t v12 = a7;
    if (a11)
    {
LABEL_7:
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = a3;
      uint64_t v31 = a4;
      uint64_t v32 = a5;
      uint64_t v33 = a6;
      uint64_t v24 = operator new(0x68uLL);
      *uint64_t v24 = 0u;
      v24[1] = 0u;
      v24[2] = 0u;
      uint64_t v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v24 + 3), (uint64_t)a1, 33, a10, (uint64_t)&v28, 6, 0, 0);
      *((_WORD *)v24 + 25) = v17;
      *((void *)v24 + 9) = 0;
      *((void *)v24 + 10) = v12;
      *((void *)v24 + 11) = 0;
      *((_DWORD *)v24 + 24) = v11;
      *((_DWORD *)v24 + 25) = a9;
      return sub_1CD5B0EF8(v25, a10, *a1 + 1112);
    }
  }
  return result;
}

uint64_t llvm::DIDerivedType::getConstant(llvm::DIDerivedType *this)
{
  uint64_t v1 = ((void *)this - *((unsigned int *)this + 2))[4];
  if (v1) {
    return *(void *)(v1 + 128);
  }
  else {
    return 0;
  }
}

uint64_t llvm::DIDerivedType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v22 = a16;
  int v23 = a13;
  uint64_t v24 = a12;
  int v25 = a9;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a16) {
    goto LABEL_7;
  }
  uint64_t v26 = *a1;
  int v27 = (uint64_t *)(*a1 + 632);
  __int16 v37 = a2;
  int v38 = a5;
  LODWORD(v42) = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  LODWORD(v45) = a5;
  uint64_t v46 = a6;
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v49 = a10;
  int v50 = a9;
  uint64_t v51 = a11;
  uint64_t v52 = a12;
  int v53 = a13;
  uint64_t v54 = a14;
  uint64_t v55 = a15;
  v41[0] = 0;
  uint64_t v28 = 0;
  if (sub_1CC593B04(v27, (uint64_t)&v42, v41)
    && v41[0] != (uint64_t *)(*(void *)(v26 + 632) + 8 * *(unsigned int *)(v26 + 648)))
  {
    uint64_t v28 = (llvm::MDNode *)*v41[0];
  }
  uint64_t v24 = a12;
  LOWORD(a2) = v37;
  a5 = v38;
  int v23 = a13;
  if (!v28)
  {
    int v25 = a9;
    int v22 = 0;
    if (a17)
    {
LABEL_7:
      uint64_t v42 = a4;
      uint64_t v43 = a6;
      uint64_t v44 = a3;
      uint64_t v45 = a7;
      uint64_t v46 = a14;
      uint64_t v47 = a15;
      uint64_t v29 = v24;
      int v30 = a5;
      __int16 v31 = a2;
      int v32 = v23;
      int v33 = v25;
      int v34 = (char *)operator new(0x70uLL);
      *(_OWORD *)int v34 = 0u;
      *((_OWORD *)v34 + 1) = 0u;
      *((_OWORD *)v34 + 2) = 0u;
      uint64_t v28 = (llvm::MDNode *)(v34 + 48);
      llvm::MDNode::MDNode((uint64_t)(v34 + 48), (uint64_t)a1, 12, v22, (uint64_t)&v42, 6, 0, 0);
      *((_WORD *)v34 + 25) = v31;
      *((_DWORD *)v34 + 18) = v30;
      *((_DWORD *)v34 + 19) = v32;
      *((_DWORD *)v34 + 24) = v33;
      *((void *)v34 + 10) = a8;
      *((void *)v34 + 11) = a10;
      *(void *)(v34 + 100) = a11;
      if ((v29 & 0xFF00000000) != 0) {
        *((_DWORD *)v34 + 13) = v29;
      }
      uint64_t v35 = *a1;
      v40 = v34 + 48;
      if (v22)
      {
        if (v22 == 1) {
          llvm::MDNode::storeDistinctInContext(v28);
        }
      }
      else
      {
        sub_1CC5942D0(v35 + 632, (uint64_t *)&v40, (uint64_t)v41);
        return (uint64_t)v40;
      }
    }
  }
  return (uint64_t)v28;
}

uint64_t llvm::DICompositeType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  uint64_t v28 = a21;
  uint64_t v27 = a22;
  uint64_t v30 = a19;
  uint64_t v29 = a20;
  uint64_t v31 = a18;
  unsigned int v32 = a11;
  uint64_t v33 = a10;
  unsigned int v34 = a9;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a23) {
    goto LABEL_2;
  }
  uint64_t v46 = *a1;
  uint64_t v45 = (uint64_t *)(*a1 + 656);
  __int16 v49 = a2;
  int v50 = a5;
  LODWORD(v54) = a2;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  LODWORD(v57) = a5;
  uint64_t v47 = a6;
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v48 = a7;
  uint64_t v51 = a8;
  uint64_t v60 = a8;
  uint64_t v61 = a10;
  unint64_t v62 = __PAIR64__(a11, a9);
  uint64_t v63 = a12;
  LODWORD(v64) = a13;
  uint64_t v65 = a14;
  uint64_t v66 = a15;
  uint64_t v67 = a16;
  unint64_t v68 = a17;
  uint64_t v69 = a18;
  uint64_t v70 = a19;
  uint64_t v71 = a20;
  uint64_t v72 = a21;
  uint64_t v73 = a22;
  v53[0] = 0;
  uint64_t v42 = 0;
  if (sub_1CD5B4E44(v45, (uint64_t)&v54, v53)
    && v53[0] != (uint64_t *)(*(void *)(v46 + 656) + 8 * *(unsigned int *)(v46 + 672)))
  {
    uint64_t v42 = (llvm::MDNode *)*v53[0];
  }
  a8 = v51;
  LOWORD(a2) = v49;
  a5 = v50;
  uint64_t v33 = a10;
  unsigned int v32 = a11;
  unsigned int v34 = a9;
  a7 = v48;
  uint64_t v27 = a22;
  uint64_t v29 = a20;
  uint64_t v28 = a21;
  uint64_t v30 = a19;
  a6 = v47;
  uint64_t v31 = a18;
  if (!v42)
  {
    if (a24)
    {
LABEL_2:
      uint64_t v54 = a4;
      uint64_t v55 = a6;
      uint64_t v56 = a3;
      uint64_t v57 = a7;
      uint64_t v58 = a12;
      uint64_t v59 = a14;
      uint64_t v60 = a15;
      uint64_t v61 = a16;
      unint64_t v62 = a17;
      uint64_t v63 = v31;
      uint64_t v64 = v30;
      uint64_t v65 = v29;
      uint64_t v66 = v28;
      uint64_t v67 = v27;
      uint64_t v35 = a8;
      int v36 = a5;
      __int16 v37 = a2;
      uint64_t v38 = v33;
      unsigned int v39 = v34;
      unsigned int v40 = v32;
      v41 = operator new(0xA8uLL);
      _OWORD *v41 = 0u;
      v41[1] = 0u;
      v41[2] = 0u;
      v41[3] = 0u;
      v41[4] = 0u;
      v41[5] = 0u;
      uint64_t v42 = (llvm::MDNode *)(v41 + 7);
      v41[6] = 0u;
      llvm::MDNode::MDNode((uint64_t)(v41 + 7), (uint64_t)a1, 13, a23, (uint64_t)&v54, 14, 0, 0);
      *((_WORD *)v41 + 57) = v37;
      *((_DWORD *)v41 + 34) = v36;
      *((_DWORD *)v41 + 35) = v40;
      *((void *)v41 + 18) = v35;
      *((void *)v41 + 19) = v38;
      *((_DWORD *)v41 + 40) = v39;
      *((_DWORD *)v41 + 41) = a13;
      uint64_t v43 = *a1;
      uint64_t v52 = v41 + 7;
      if (a23)
      {
        if (a23 == 1) {
          llvm::MDNode::storeDistinctInContext(v42);
        }
      }
      else
      {
        sub_1CD5B50B4(v43 + 656, (uint64_t *)&v52, (uint64_t)v53);
        return (uint64_t)v52;
      }
    }
  }
  return (uint64_t)v42;
}

uint64_t llvm::DICompositeType::getODRType(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22 = *a1;
  if (!*(unsigned char *)(*a1 + 1184)) {
    return 0;
  }
  uint64_t v33 = a2;
  unsigned int v32 = sub_1CD467E2C(v22 + 1160, &v33);
  uint64_t result = v32[1];
  if (!result)
  {
    uint64_t result = llvm::DICompositeType::getImpl(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a2, a17, a18, a19,
               a20,
               a21,
               a22,
               1,
               1);
    v32[1] = result;
    return result;
  }
  if (*(unsigned __int16 *)(result + 2) != a3) {
    return 0;
  }
  return result;
}

uint64_t llvm::DICompositeType::getODRTypeIfExists(llvm::DICompositeType *this, llvm::LLVMContext *a2, llvm::MDString *a3)
{
  uint64_t v3 = *(void *)this;
  if (!*(unsigned char *)(*(void *)this + 1184)) {
    return 0;
  }
  uint64_t v6 = 0;
  int v5 = sub_1CD40EA84(*(void *)(v3 + 1160), *(_DWORD *)(v3 + 1176), (uint64_t)a2, &v6);
  uint64_t result = 0;
  if (v5) {
    return *(void *)(v6 + 8);
  }
  return result;
}

uint64_t llvm::DISubroutineType::DISubroutineType(uint64_t a1, uint64_t a2, char a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 14, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 21;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = a5;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 14, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 21;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = a5;
  return result;
}

void llvm::DISubroutineType::getImpl(void *a1, int a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 680);
  LODWORD(v20) = a2;
  BYTE4(v20) = a3;
  uint64_t v21 = a4;
  uint64_t v19 = 0;
  int v14 = sub_1CC594AB4(v13, (uint64_t)&v20, &v19);
  uint64_t v15 = 0;
  if (v14 && v19 != (uint64_t *)(*(void *)(v12 + 680) + 8 * *(unsigned int *)(v12 + 696))) {
    uint64_t v15 = *v19;
  }
  if (!v15 && a6)
  {
LABEL_9:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = a4;
    __int16 v17 = operator new(0x58uLL);
    _OWORD *v17 = 0u;
    v17[1] = 0u;
    v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 2), (uint64_t)a1, 14, a5, (uint64_t)&v20, 4, 0, 0);
    *((_WORD *)v17 + 17) = 21;
    *((_DWORD *)v17 + 14) = 0;
    *((_DWORD *)v17 + 15) = a2;
    *((void *)v17 + 8) = 0;
    *((void *)v17 + 9) = 0;
    *((_DWORD *)v17 + 20) = 0;
    *((unsigned char *)v17 + 84) = a3;
    sub_1CC58F1BC(v18, a5, *a1 + 680);
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1CC58F1BC(llvm::MDNode *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 == 1) {
      llvm::MDNode::storeDistinctInContext(a1);
    }
  }
  else
  {
    sub_1CC594D94(a3, (uint64_t *)&v3, (uint64_t)v4);
  }
}

__n128 llvm::DIFile::DIFile(uint64_t a1, uint64_t a2, char a3, __n128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = llvm::MDNode::MDNode(a1, a2, 15, a3, a7, a8, 0, 0);
  *(_WORD *)(v11 + 2) = 41;
  __n128 result = *a4;
  unint64_t v13 = a4[1].n128_u64[0];
  *(__n128 *)(v11 + 24) = *a4;
  *(void *)(v11 + 40) = v13;
  *(void *)(v11 + 48) = a5;
  *(void *)(v11 + 56) = a6;
  return result;
}

{
  uint64_t v11;
  __n128 result;
  unint64_t v13;

  uint64_t v11 = llvm::MDNode::MDNode(a1, a2, 15, a3, a7, a8, 0, 0);
  *(_WORD *)(v11 + 2) = 41;
  __n128 result = *a4;
  unint64_t v13 = a4[1].n128_u64[0];
  *(__n128 *)(v11 + 24) = *a4;
  *(void *)(v11 + 40) = v13;
  *(void *)(v11 + 48) = a5;
  *(void *)(v11 + 56) = a6;
  return result;
}

llvm::MDNode *llvm::DIFile::getImpl(void *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a7) {
    goto LABEL_7;
  }
  uint64_t v16 = *a1;
  __int16 v17 = (uint64_t *)(*a1 + 704);
  long long v30 = *a4;
  uint64_t v18 = *((void *)a4 + 2);
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v31 = v18;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v27 = 0;
  int v19 = sub_1CC595140(v17, (uint64_t)&v28, (uint64_t **)&v27);
  __n128 result = 0;
  if (v19 && v27 != (llvm::MDNode **)(*(void *)(v16 + 704) + 8 * *(unsigned int *)(v16 + 720))) {
    __n128 result = *v27;
  }
  if (!result && a8)
  {
LABEL_7:
    uint64_t v28 = a2;
    uint64_t v29 = a3;
    if (*((unsigned char *)a4 + 16)) {
      uint64_t v21 = *((void *)a4 + 1);
    }
    else {
      uint64_t v21 = 0;
    }
    if ((_BYTE)a6) {
      uint64_t v22 = a5;
    }
    else {
      uint64_t v22 = 0;
    }
    *(void *)&long long v30 = v21;
    *((void *)&v30 + 1) = v22;
    uint64_t v23 = operator new(0x60uLL);
    *uint64_t v23 = 0u;
    v23[1] = 0u;
    long long v25 = *a4;
    uint64_t v26 = *((void *)a4 + 2);
    uint64_t v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 2), (uint64_t)a1, 15, a7, (uint64_t)&v28, 4, 0, 0);
    *((_WORD *)v23 + 17) = 41;
    *(_OWORD *)((char *)v23 + 56) = v25;
    *((void *)v23 + 9) = v26;
    *((void *)v23 + 10) = a5;
    *((void *)v23 + 11) = a6;
    return sub_1CC58F46C(v24, a7, *a1 + 704);
  }
  return result;
}

llvm::MDNode *sub_1CC58F46C(llvm::MDNode *result, int a2, uint64_t a3)
{
  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1CC595504(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DICompileUnit::DICompileUnit(uint64_t a1, uint64_t a2, char a3, int a4, char a5, int a6, int a7, uint64_t a8, char a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 16, a3, a13, a14, 0, 0);
  *(_WORD *)(result + 2) = 17;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(void *)(result + 40) = a8;
  *(unsigned char *)(result + 48) = a9;
  *(unsigned char *)(result + 49) = a10;
  *(_DWORD *)(result + 52) = a11;
  *(unsigned char *)(result + 56) = a12;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 16, a3, a13, a14, 0, 0);
  *(_WORD *)(result + 2) = 17;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(void *)(result + 40) = a8;
  *(unsigned char *)(result + 48) = a9;
  *(unsigned char *)(result + 49) = a10;
  *(_DWORD *)(result + 52) = a11;
  *(unsigned char *)(result + 56) = a12;
  return result;
}

char *llvm::DICompileUnit::getImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, int a9, long long a10, long long a11, uint64_t a12, uint64_t a13, char a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a6;
  v26[3] = a8;
  long long v27 = a10;
  long long v28 = a11;
  uint64_t v29 = a12;
  uint64_t v30 = a18;
  uint64_t v31 = a19;
  uint64_t v23 = operator new(0x98uLL);
  *uint64_t v23 = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  v23[3] = 0u;
  v23[4] = 0u;
  *((void *)v23 + 10) = 0;
  llvm::MDNode::MDNode((uint64_t)v23 + 88, a1, 16, a20, (uint64_t)v26, 11, 0, 0);
  *((_WORD *)v23 + 45) = 17;
  *((_DWORD *)v23 + 28) = a2;
  *((unsigned char *)v23 + 116) = a5;
  *((_DWORD *)v23 + 30) = a7;
  *((_DWORD *)v23 + 31) = a9;
  *((void *)v23 + 16) = a13;
  *((unsigned char *)v23 + 136) = a14;
  *((unsigned char *)v23 + 137) = a15;
  *((_DWORD *)v23 + 35) = a16;
  *((unsigned char *)v23 + 144) = a17;
  if (a20 == 1) {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)((char *)v23 + 88));
  }
  return (char *)v23 + 88;
}

char *llvm::DICompileUnit::emissionKindString(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E6830AE0[a1];
  }
}

uint64_t llvm::DISubprogram::DISubprogram(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 17, a3, a10, a11, 0, 0);
  *(_WORD *)(result + 2) = 46;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_DWORD *)(result + 40) = a8;
  *(_DWORD *)(result + 44) = a9;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 17, a3, a10, a11, 0, 0);
  *(_WORD *)(result + 2) = 46;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_DWORD *)(result + 40) = a8;
  *(_DWORD *)(result + 44) = a9;
  return result;
}

uint64_t llvm::DILocalScope::getSubprogram(uint64_t this)
{
  while ((*(unsigned char *)this & 0xFE) == 0x12)
    this = *(void *)(this - 8 * *(unsigned int *)(this + 8) + 8);
  return this;
}

uint64_t llvm::DILocalScope::getNonLexicalBlockFileScope(uint64_t this)
{
  while (*(unsigned char *)this == 19)
    this = *(void *)(this - 8 * *(unsigned int *)(this + 8) + 8);
  return this;
}

uint64_t llvm::DISubprogram::getFlag(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(void *)a1 == 0x67616C4650534944 && *(_DWORD *)(a1 + 8) == 1869768026)
      {
        unint64_t v2 = 0x100000000;
      }
      else
      {
        if (*(void *)a1 != 0x67616C4650534944 || *(_DWORD *)(a1 + 8) != 1701999952) {
          goto LABEL_36;
        }
        unint64_t v2 = 0x100000020;
      }
      goto LABEL_74;
    case 15:
      unint64_t v2 = 0x100000001;
      if (*(void *)a1 ^ 0x67616C4650534944 | *(void *)(a1 + 7) ^ 0x6C61757472695667) {
        unint64_t v2 = 0;
      }
      goto LABEL_45;
    case 17:
      if (*(void *)a1 == 0x67616C4650534944
        && *(void *)(a1 + 8) == 0x657A696D6974704FLL
        && *(unsigned char *)(a1 + 16) == 100)
      {
        unint64_t v2 = 0x100000010;
      }
      else if (*(void *)a1 == 0x67616C4650534944 {
             && *(void *)(a1 + 8) == 0x61746E656D656C45
      }
             && *(unsigned char *)(a1 + 16) == 108)
      {
        unint64_t v2 = 0x100000040;
      }
      else if (*(void *)a1 == 0x67616C4650534944 {
             && *(void *)(a1 + 8) == 0x7669737275636552
      }
             && *(unsigned char *)(a1 + 16) == 101)
      {
        unint64_t v2 = 0x100000080;
      }
      else
      {
LABEL_36:
        unint64_t v2 = 0;
      }
      goto LABEL_74;
    case 18:
      if (*(void *)a1 == 0x67616C4650534944
        && *(void *)(a1 + 8) == 0x6974696E69666544
        && *(_WORD *)(a1 + 16) == 28271)
      {
        unint64_t v2 = 0x100000008;
        goto LABEL_74;
      }
      unint64_t v2 = 0;
LABEL_45:
      BOOL v3 = HIDWORD(v2) == 0;
LABEL_46:
      if (a2 == 15 && v3)
      {
        uint64_t v14 = *(void *)a1 ^ 0x67616C4650534944 | *(void *)(a1 + 7) ^ 0x646574656C654467;
        uint64_t v15 = 0x100000200;
        goto LABEL_53;
      }
      char v16 = !v3;
      if (a2 != 18) {
        char v16 = 1;
      }
      if ((v16 & 1) == 0)
      {
        uint64_t v14 = *(void *)a1 ^ 0x67616C4650534944 | *(void *)(a1 + 8) ^ 0x65726944436A624FLL | *(unsigned __int16 *)(a1 + 16) ^ 0x7463;
        uint64_t v15 = 0x100000800;
LABEL_53:
        if (!v14) {
          unint64_t v2 = v15;
        }
      }
LABEL_74:
      if ((v2 & 0x300000000) != 0) {
        return v2;
      }
      else {
        return 0;
      }
    case 19:
      unint64_t v2 = 0x100000002;
      if (*(void *)a1 != 0x67616C4650534944
        || *(void *)(a1 + 8) != 0x7472695665727550
        || *(void *)(a1 + 11) != 0x6C61757472695665)
      {
        unint64_t v2 = 0x100000004;
        if (*(void *)a1 ^ 0x67616C4650534944 | *(void *)(a1 + 8) ^ 0x556F546C61636F4CLL | *(void *)(a1 + 11) ^ 0x74696E556F546C61) {
          unint64_t v2 = 0;
        }
      }
      goto LABEL_74;
    case 22:
      if (*(void *)a1 ^ 0x67616C4650534944 | *(void *)(a1 + 8) ^ 0x706275536E69614DLL | *(void *)(a1 + 14) ^ 0x6D6172676F727062) {
        unint64_t v2 = 0;
      }
      else {
        unint64_t v2 = 0x100000100;
      }
      goto LABEL_74;
    default:
      goto LABEL_46;
  }
}

const char *llvm::DISubprogram::getFlagString(int a1)
{
  uint64_t result = (const char *)&unk_1CFB7A80B;
  if (a1 > 15)
  {
    if (a1 > 31)
    {
      BOOL v3 = "DISPFlagMainSubprogram";
      v4 = "DISPFlagDeleted";
      int v5 = "DISPFlagObjCDirect";
      if (a1 != 2048) {
        int v5 = (const char *)&unk_1CFB7A80B;
      }
      if (a1 != 512) {
        v4 = v5;
      }
      if (a1 != 256) {
        BOOL v3 = v4;
      }
      uint64_t v6 = "DISPFlagPure";
      v7 = "DISPFlagElemental";
      v8 = "DISPFlagRecursive";
      if (a1 != 128) {
        v8 = (const char *)&unk_1CFB7A80B;
      }
      if (a1 != 64) {
        v7 = v8;
      }
      if (a1 != 32) {
        uint64_t v6 = v7;
      }
      if (a1 <= 255) {
        return v6;
      }
      else {
        return v3;
      }
    }
    else if (a1 == 16)
    {
      return "DISPFlagOptimized";
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t result = "DISPFlagZero";
        break;
      case 1:
        uint64_t result = "DISPFlagVirtual";
        break;
      case 2:
        uint64_t result = "DISPFlagPureVirtual";
        break;
      case 4:
        uint64_t result = "DISPFlagLocalToUnit";
        break;
      case 8:
        uint64_t result = "DISPFlagDefinition";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::DISubprogram::splitFlags(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v8) = 1;
    ++*(_DWORD *)(a2 + 8);
    result &= 0xFFEu;
  }
  if ((result & 2) != 0)
  {
    int v9 = result & 2;
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v10) = v9;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v9 ^ 0xFFF) & result;
  }
  if ((result & 4) != 0)
  {
    int v6 = result & 4;
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v7) = v6;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v6 ^ 0xFFF) & result;
  }
  if ((result & 8) != 0)
  {
    int v2 = result & 8;
    unsigned int v3 = *(_DWORD *)(a2 + 8);
    if (v3 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v3) = v2;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v2 ^ 0xFFF) & result;
  }
  if ((result & 0x10) != 0)
  {
    int v4 = result & 0x10;
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v5) = v4;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v4 ^ 0xFFF) & result;
  }
  if ((result & 0x20) != 0)
  {
    int v11 = result & 0x20;
    unsigned int v12 = *(_DWORD *)(a2 + 8);
    if (v12 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v12) = v11;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v11 ^ 0xFFF) & result;
  }
  if ((result & 0x40) != 0)
  {
    int v13 = result & 0x40;
    unsigned int v14 = *(_DWORD *)(a2 + 8);
    if (v14 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v14) = v13;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v13 ^ 0xFFF) & result;
  }
  if ((result & 0x80) != 0)
  {
    int v15 = result & 0x80;
    unsigned int v16 = *(_DWORD *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v16) = v15;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v15 ^ 0xFFF) & result;
  }
  if ((result & 0x100) != 0)
  {
    int v17 = result & 0x100;
    unsigned int v18 = *(_DWORD *)(a2 + 8);
    if (v18 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v17 ^ 0xFFF) & result;
  }
  if ((result & 0x200) != 0)
  {
    int v19 = result & 0x200;
    unsigned int v20 = *(_DWORD *)(a2 + 8);
    if (v20 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v20) = v19;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v19 ^ 0xFFF) & result;
  }
  if ((result & 0x800) != 0)
  {
    int v21 = result & 0x800;
    unsigned int v22 = *(_DWORD *)(a2 + 8);
    if (v22 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v22) = v21;
    ++*(_DWORD *)(a2 + 8);
    return (v21 ^ 0xFFF) & result;
  }
  return result;
}

uint64_t llvm::DISubprogram::getImpl(void *a1, void *a2, uint64_t a3, void *a4, void *a5, int a6, void *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  int v23 = a19;
  uint64_t v24 = a16;
  uint64_t v25 = a13;
  uint64_t v26 = a9;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (a19) {
    goto LABEL_7;
  }
  uint64_t v27 = *a1;
  long long v28 = (uint64_t *)(*a1 + 728);
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v35 = a4;
  int v36 = a7;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  LODWORD(v46) = a6;
  uint64_t v47 = a7;
  LODWORD(v48) = a8;
  uint64_t v49 = a9;
  uint64_t v50 = a10;
  uint64_t v51 = a11;
  uint64_t v52 = a12;
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v55 = a15;
  uint64_t v56 = a16;
  uint64_t v57 = a17;
  uint64_t v58 = a18;
  v41[0] = 0;
  uint64_t v29 = 0;
  if (sub_1CC595B64(v28, (uint64_t)&v42, v41)
    && v41[0] != (uint64_t *)(*(void *)(v27 + 728) + 8 * *(unsigned int *)(v27 + 744)))
  {
    uint64_t v29 = *v41[0];
  }
  int v23 = 0;
  uint64_t v24 = a16;
  uint64_t v25 = a13;
  a7 = v36;
  uint64_t v26 = a9;
  a4 = v35;
  if (!v29)
  {
    if (a20)
    {
LABEL_7:
      uint64_t v42 = &v44;
      uint64_t v44 = a5;
      uint64_t v45 = a2;
      uint64_t v46 = a3;
      uint64_t v47 = a4;
      uint64_t v48 = a7;
      uint64_t v49 = a12;
      uint64_t v50 = a14;
      uint64_t v51 = a15;
      uint64_t v52 = v26;
      uint64_t v53 = v25;
      uint64_t v54 = v24;
      uint64_t v55 = a17;
      uint64_t v56 = a18;
      uint64_t v43 = 0xD0000000DLL;
      if (a18)
      {
        size_t v30 = 104;
      }
      else
      {
        LODWORD(v43) = 12;
        if (a17)
        {
          size_t v30 = 96;
        }
        else
        {
          LODWORD(v43) = 11;
          if (v24)
          {
            size_t v30 = 88;
          }
          else
          {
            LODWORD(v43) = 10;
            if (v25)
            {
              size_t v30 = 80;
            }
            else
            {
              if (v26) {
                int v31 = 9;
              }
              else {
                int v31 = 8;
              }
              LODWORD(v43) = v31;
              size_t v30 = (8 * v31);
            }
          }
        }
      }
      uint64_t v32 = operator new(v30 + 48);
      bzero(v32, v30);
      uint64_t v29 = (uint64_t)v32 + v30;
      llvm::MDNode::MDNode(v29, (uint64_t)a1, 17, v23, (uint64_t)v42, v43, 0, 0);
      *(_WORD *)(v29 + 2) = 46;
      *(_DWORD *)(v29 + 24) = a6;
      *(_DWORD *)(v29 + 28) = a8;
      *(void *)(v29 + 32) = a10;
      *(void *)(v29 + 40) = a11;
      uint64_t v33 = *a1;
      uint64_t v40 = v29;
      if (v23 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v29);
      }
      else if (!v23)
      {
        sub_1CC596170(v33 + 728, &v40, (uint64_t)v41);
        uint64_t v29 = v40;
      }
      if (v42 != &v44) {
        free(v42);
      }
    }
  }
  return v29;
}

BOOL llvm::DISubprogram::describes(llvm::DISubprogram *this, const llvm::Function *a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_9;
  }
  uint64_t v3 = ***(void ***)a2;
  int v21 = a2;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 2480);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (const llvm::Function **)(v5 + 40 * v7);
    int v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_4;
    }
    int v15 = 0;
    int v16 = 1;
    while (v9 != (const llvm::Function *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v9 == (const llvm::Function *)-8192;
      }
      if (v17) {
        int v15 = v8;
      }
      unsigned int v18 = v7 + v16++;
      unsigned int v7 = v18 & v6;
      unsigned int v8 = (const llvm::Function **)(v5 + 40 * v7);
      int v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_4;
      }
    }
    if (v15) {
      int v19 = v15;
    }
    else {
      int v19 = v8;
    }
  }
  else
  {
    int v19 = 0;
  }
  unsigned int v8 = (const llvm::Function **)sub_1CC609054(v3 + 2480, (uint64_t)&v21, (uint64_t *)&v21, v19);
  unsigned int v20 = v21;
  v8[3] = 0;
  v8[4] = 0;
  const char *v8 = v20;
  v8[1] = (const llvm::Function *)(v8 + 3);
  v8[2] = (const llvm::Function *)0x100000000;
LABEL_4:
  uint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10)
  {
LABEL_9:
    int v13 = 0;
    return v13 == this;
  }
  int v11 = (void *)((char *)v8[1] + 8);
  uint64_t v12 = 16 * v10;
  while (*((_DWORD *)v11 - 2))
  {
    int v13 = 0;
    v11 += 2;
    v12 -= 16;
    if (!v12) {
      return v13 == this;
    }
  }
  int v13 = (llvm::DISubprogram *)*v11;
  return v13 == this;
}

uint64_t llvm::DILexicalBlockBase::DILexicalBlockBase(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, a3, a4, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 11;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, a3, a4, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 11;
  return result;
}

llvm::MDNode *llvm::DILexicalBlock::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (HIWORD(a5)) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = a5;
  }
  if (a6) {
    goto LABEL_5;
  }
  uint64_t v17 = *a1;
  unsigned int v18 = (uint64_t *)(*a1 + 752);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  int v24 = a4;
  unsigned int v25 = v12;
  int v21 = 0;
  int v19 = sub_1CD5B5420(v18, (uint64_t)&v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v19 && v21 != (llvm::MDNode **)(*(void *)(v17 + 752) + 8 * *(unsigned int *)(v17 + 768))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_5:
    uint64_t v22 = a3;
    uint64_t v23 = a2;
    int v13 = operator new(0x30uLL);
    *int v13 = 0;
    v13[1] = 0;
    unsigned int v14 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v13 + 2), (uint64_t)a1, 18, a6, (uint64_t)&v22, 2, 0, 0);
    *((_WORD *)v13 + 9) = 11;
    *((_DWORD *)v13 + 10) = a4;
    *((_WORD *)v13 + 22) = v12;
    return sub_1CC59076C(v14, a6, *a1 + 752);
  }
  return result;
}

llvm::MDNode *sub_1CC59076C(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1CD5B563C(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILexicalBlockFile::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  int v13 = (uint64_t *)(*a1 + 776);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  int v22 = a4;
  int v19 = 0;
  int v14 = sub_1CC5965F8(v13, (uint64_t)&v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 776) + 8 * *(unsigned int *)(v12 + 792))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = a3;
    uint64_t v21 = a2;
    uint64_t v17 = operator new(0x30uLL);
    void *v17 = 0;
    v17[1] = 0;
    unsigned int v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 2), (uint64_t)a1, 19, a5, (uint64_t)&v20, 2, 0, 0);
    *((_WORD *)v17 + 9) = 11;
    *((_DWORD *)v17 + 10) = a4;
    return sub_1CC5908F4(v18, a5, *a1 + 776);
  }
  return result;
}

llvm::MDNode *sub_1CC5908F4(llvm::MDNode *result, int a2, uint64_t a3)
{
  int v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1CC596820(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DINamespace::DINamespace(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 20, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 57;
  *(unsigned char *)(result + 24) = *(unsigned char *)(result + 24) & 0xFE | a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 20, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 57;
  *(unsigned char *)(result + 24) = *(unsigned char *)(result + 24) & 0xFE | a4;
  return result;
}

llvm::MDNode *llvm::DINamespace::getImpl(void *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  int v13 = (uint64_t *)(*a1 + 800);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  LOBYTE(v22) = a4;
  int v19 = 0;
  int v14 = sub_1CD5B5A1C(v13, (uint64_t)&v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 800) + 8 * *(unsigned int *)(v12 + 816))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = 0;
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    uint64_t v17 = operator new(0x38uLL);
    v17[1] = 0;
    v17[2] = 0;
    void *v17 = 0;
    unsigned int v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 3), (uint64_t)a1, 20, a5, (uint64_t)&v20, 3, 0, 0);
    *((_WORD *)v17 + 13) = 57;
    *((unsigned char *)v17 + 48) = v17[6] & 0xFE | a4;
    return sub_1CD5B16DC(v18, a5, *a1 + 800);
  }
  return result;
}

uint64_t llvm::DICommonBlock::DICommonBlock(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 31, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 26;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 31, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 26;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

llvm::MDNode *llvm::DICommonBlock::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a7) {
    goto LABEL_9;
  }
  uint64_t v16 = *a1;
  uint64_t v17 = (uint64_t *)(*a1 + 1064);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  int v28 = a6;
  uint64_t v23 = 0;
  int v18 = sub_1CD5B5E7C(v17, (uint64_t)&v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(void *)(v16 + 1064) + 8 * *(unsigned int *)(v16 + 1080))) {
    uint64_t result = *v23;
  }
  if (!result && a8)
  {
LABEL_9:
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a5;
    uint64_t v21 = operator new(0x40uLL);
    *uint64_t v21 = 0u;
    v21[1] = 0u;
    uint64_t v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 2), (uint64_t)a1, 31, a7, (uint64_t)&v24, 4, 0, 0);
    *((_WORD *)v21 + 17) = 26;
    *((_DWORD *)v21 + 14) = a6;
    return sub_1CD5B173C(v22, a7, *a1 + 1064);
  }
  return result;
}

uint64_t llvm::DIModule::DIModule(uint64_t a1, uint64_t a2, char a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 21, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 30;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 21, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 30;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  return result;
}

llvm::MDNode *llvm::DIModule::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, int a10, char a11)
{
  int v11 = a8;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a10) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t *)(*a1 + 824);
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  int v33 = a8;
  char v34 = a9;
  uint64_t v26 = 0;
  int v21 = sub_1CC596D5C(v20, &v27, (uint64_t **)&v26);
  uint64_t result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(void *)(v19 + 824) + 8 * *(unsigned int *)(v19 + 840))) {
    uint64_t result = *v26;
  }
  int v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      uint64_t v30 = a5;
      uint64_t v31 = a6;
      uint64_t v32 = a7;
      uint64_t v23 = operator new(0x50uLL);
      *uint64_t v23 = 0u;
      v23[1] = 0u;
      v23[2] = 0u;
      uint64_t v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 3), (uint64_t)a1, 21, a10, (uint64_t)&v27, 6, 0, 0);
      *((_WORD *)v23 + 25) = 30;
      *((_DWORD *)v23 + 18) = v11;
      *((unsigned char *)v23 + 76) = a9;
      return sub_1CC590EF4(v24, a10, *a1 + 824);
    }
  }
  return result;
}

llvm::MDNode *sub_1CC590EF4(llvm::MDNode *result, int a2, uint64_t a3)
{
  int v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1CC596F54(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DITemplateTypeParameter::DITemplateTypeParameter(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 22, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 47;
  *(unsigned char *)(result + 24) = a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 22, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 47;
  *(unsigned char *)(result + 24) = a4;
  return result;
}

llvm::MDNode *llvm::DITemplateTypeParameter::getImpl(void *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  int v13 = (uint64_t *)(*a1 + 848);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  char v22 = a4;
  uint64_t v19 = 0;
  int v14 = sub_1CD5B65C4(v13, (uint64_t)&v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 848) + 8 * *(unsigned int *)(v12 + 864))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = a2;
    uint64_t v21 = a3;
    uint64_t v17 = operator new(0x30uLL);
    void *v17 = 0;
    v17[1] = 0;
    int v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 2), (uint64_t)a1, 22, a5, (uint64_t)&v20, 2, 0, 0);
    *((_WORD *)v17 + 9) = 47;
    *((unsigned char *)v17 + 40) = a4;
    return sub_1CD5B17A0(v18, a5, *a1 + 848);
  }
  return result;
}

llvm::MDNode *llvm::DITemplateValueParameter::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8)
{
  __int16 v13 = a2;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a7) {
    goto LABEL_9;
  }
  uint64_t v16 = *a1;
  uint64_t v17 = (uint64_t *)(*a1 + 872);
  LODWORD(v24) = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  char v27 = a5;
  uint64_t v28 = a6;
  uint64_t v23 = 0;
  int v18 = sub_1CD5B69AC(v17, (uint64_t)&v24, &v23);
  uint64_t result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(void *)(v16 + 872) + 8 * *(unsigned int *)(v16 + 888))) {
    uint64_t result = *v23;
  }
  if (!result && a8)
  {
LABEL_9:
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a6;
    uint64_t v21 = operator new(0x38uLL);
    v21[1] = 0;
    v21[2] = 0;
    *uint64_t v21 = 0;
    char v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 3), (uint64_t)a1, 23, a7, (uint64_t)&v24, 3, 0, 0);
    *((_WORD *)v21 + 13) = v13;
    *((unsigned char *)v21 + 48) = a5;
    return sub_1CD5B1800(v22, a7, *a1 + 872);
  }
  return result;
}

llvm::MDNode *llvm::DIGlobalVariable::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, char a15)
{
  uint64_t v20 = a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a14) {
    goto LABEL_7;
  }
  uint64_t v21 = *a1;
  char v22 = (uint64_t *)(*a1 + 896);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  LODWORD(v35) = a6;
  uint64_t v36 = a7;
  LOBYTE(v37) = a8;
  BYTE1(v37) = a9;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  int v40 = a12;
  uint64_t v41 = a13;
  uint64_t v30 = 0;
  int v23 = sub_1CD5B6F44(v22, (uint64_t)&v31, (uint64_t **)&v30);
  uint64_t result = 0;
  if (v23 && v30 != (llvm::MDNode **)(*(void *)(v21 + 896) + 8 * *(unsigned int *)(v21 + 912))) {
    uint64_t result = *v30;
  }
  uint64_t v20 = a1;
  if (!result)
  {
    if (a15)
    {
LABEL_7:
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      uint64_t v33 = a5;
      uint64_t v34 = a7;
      uint64_t v35 = a3;
      uint64_t v36 = a4;
      uint64_t v37 = a10;
      uint64_t v38 = a11;
      uint64_t v39 = a13;
      uint64_t v25 = operator new(0x70uLL);
      *uint64_t v25 = 0u;
      v25[1] = 0u;
      v25[2] = 0u;
      v25[3] = 0u;
      *((void *)v25 + 8) = 0;
      uint64_t v26 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v25 + 72, (uint64_t)v20, 24, a14, (uint64_t)&v31, 9, 0, 0);
      *((_WORD *)v25 + 37) = 52;
      *((_DWORD *)v25 + 24) = a6;
      *((_DWORD *)v25 + 25) = a12;
      *((unsigned char *)v25 + 104) = a8;
      *((unsigned char *)v25 + 105) = a9;
      return sub_1CD5B1860(v26, a14, *v20 + 896);
    }
  }
  return result;
}

llvm::MDNode *llvm::DILocalVariable::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, char a12)
{
  int v12 = a8;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a11) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t *)(*a1 + 920);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  LODWORD(v32) = a5;
  uint64_t v33 = a6;
  __int16 v26 = a7;
  int v34 = a7;
  int v35 = a8;
  int v36 = a9;
  uint64_t v37 = a10;
  uint64_t v28 = 0;
  int v21 = sub_1CC5975C0(v20, (uint64_t)&v29, (uint64_t **)&v28);
  uint64_t result = 0;
  if (v21 && v28 != (llvm::MDNode **)(*(void *)(v19 + 920) + 8 * *(unsigned int *)(v19 + 936))) {
    uint64_t result = *v28;
  }
  LOWORD(a7) = v26;
  int v12 = a8;
  if (!result)
  {
    if (a12)
    {
LABEL_7:
      uint64_t v29 = a2;
      uint64_t v30 = a3;
      uint64_t v31 = a4;
      uint64_t v32 = a6;
      uint64_t v33 = a10;
      __int16 v23 = a7;
      uint64_t v24 = operator new(0x50uLL);
      *uint64_t v24 = 0u;
      v24[1] = 0u;
      *((void *)v24 + 4) = 0;
      uint64_t v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v24 + 40, (uint64_t)a1, 25, a11, (uint64_t)&v29, 5, 0, 0);
      *((_WORD *)v24 + 21) = 52;
      *((_DWORD *)v24 + 16) = a5;
      *((_DWORD *)v24 + 17) = a9;
      *((_WORD *)v24 + 36) = v23;
      *((_DWORD *)v24 + 19) = v12;
      return sub_1CC59155C(v25, a11, *a1 + 920);
    }
  }
  return result;
}

llvm::MDNode *sub_1CC59155C(llvm::MDNode *result, int a2, uint64_t a3)
{
  int v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1CC597A9C(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DIVariable::DIVariable(uint64_t a1, uint64_t a2, char a3, char a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, a3, a4, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 52;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = a8;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, a3, a4, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 52;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = a8;
  return result;
}

uint64_t llvm::DILabel::DILabel(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 26, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 10;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 26, a3, a5, a6, 0, 0);
  *(_WORD *)(result + 2) = 10;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

llvm::MDNode *llvm::DILabel::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  int v15 = (uint64_t *)(*a1 + 944);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  int v25 = a5;
  int v21 = 0;
  int v16 = sub_1CD5B78D0(v15, (uint64_t)&v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 944) + 8 * *(unsigned int *)(v14 + 960))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v19 = operator new(0x38uLL);
    v19[1] = 0;
    v19[2] = 0;
    void *v19 = 0;
    uint64_t v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 3), (uint64_t)a1, 26, a6, (uint64_t)&v22, 3, 0, 0);
    *((_WORD *)v19 + 13) = 10;
    *((_DWORD *)v19 + 12) = a5;
    return sub_1CD5B192C(v20, a6, *a1 + 944);
  }
  return result;
}

llvm::MDNode *llvm::DIExpression::getImpl(void *a1, const void *a2, uint64_t a3, int a4, int a5)
{
  if (a4) {
    goto LABEL_9;
  }
  uint64_t v10 = *a1;
  int v11 = (uint64_t *)(*a1 + 488);
  v17[0] = a2;
  v17[1] = a3;
  int v18 = 0;
  int v12 = sub_1CD5B7E4C(v11, (uint64_t)v17, (uint64_t **)&v18);
  uint64_t result = 0;
  if (v12 && v18 != (llvm::MDNode **)(*(void *)(v10 + 488) + 8 * *(unsigned int *)(v10 + 504))) {
    uint64_t result = *v18;
  }
  if (!result && a5)
  {
LABEL_9:
    int v15 = (llvm::MDNode *)operator new(0x30uLL);
    int v16 = (void *)llvm::MDNode::MDNode((uint64_t)v15, (uint64_t)a1, 6, a4, 0, 0, 0, 0);
    v16[4] = 0;
    v16[5] = 0;
    v16[3] = 0;
    sub_1CBFCBA2C(v16 + 3, a2, (uint64_t)a2 + 8 * a3, (8 * a3) >> 3);
    return sub_1CD5B1990(v15, a4, *a1 + 488);
  }
  return result;
}

BOOL llvm::DIExpression::isEntryValue(llvm::DIExpression *this)
{
  uint64_t v1 = (void *)*((void *)this + 3);
  return ((*((void *)this + 4) - (void)v1) & 0x7FFFFFFF8) != 0 && *v1 == 4099;
}

uint64_t llvm::DIExpression::ExprOperand::getSize(uint64_t **this)
{
  uint64_t v1 = **this;
  if ((unint64_t)(v1 - 112) < 0x20) {
    return 2;
  }
  if (v1 <= 143)
  {
    BOOL v2 = (unint64_t)v1 > 0x23;
    uint64_t v3 = (1 << v1) & 0x800030000;
    if (!v2 && v3 != 0) {
      return 2;
    }
    return 1;
  }
  uint64_t result = 3;
  if (v1 > 147)
  {
    if ((unint64_t)(v1 - 4096) <= 5)
    {
      if (((1 << v1) & 0x2C) != 0) {
        return 2;
      }
      if (((1 << v1) & 3) != 0) {
        return result;
      }
    }
    if (v1 != 148) {
      return 1;
    }
    return 2;
  }
  if (v1 == 144) {
    return 2;
  }
  if (v1 != 146) {
    return 1;
  }
  return result;
}

BOOL llvm::DIExpression::isValid(llvm::DIExpression *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 3);
  BOOL v2 = (uint64_t *)*((void *)this + 4);
  uint64_t v14 = v1;
  if (v2 == v1) {
    return 1;
  }
  uint64_t v3 = v1;
  int v4 = v1;
  while (1)
  {
    int Size = llvm::DIExpression::ExprOperand::getSize(&v14);
    int v6 = &v4[Size];
    if (v6 > v2) {
      return 0;
    }
    unint64_t v7 = *v4;
    if ((unint64_t)(*v4 - 80) < 0x40) {
      return 1;
    }
    if (v7 <= 0x30)
    {
      if (((1 << v7) & 0x100FF7D170040) != 0) {
        goto LABEL_7;
      }
      if (v7 == 22)
      {
        if ((((char *)v2 - (char *)v1) & 0x7FFFFFFF8) == 8) {
          return 0;
        }
        goto LABEL_7;
      }
    }
    int v12 = &v4[Size];
    if (v7 - 144 > 0xF) {
      break;
    }
    int v6 = &v4[Size];
    if (((1 << (v7 + 112)) & 0x95) != 0) {
      goto LABEL_7;
    }
    if (v7 != 159) {
      break;
    }
    int v6 = &v4[Size];
    if (v12 != v2)
    {
      __int16 v13 = v3;
      int v10 = llvm::DIExpression::ExprOperand::getSize(&v13);
      int v6 = v12;
      if (v3[v10] != 4096) {
        return 0;
      }
    }
LABEL_7:
    uint64_t v14 = v6;
    uint64_t v3 = v6;
    int v4 = v6;
    if (v6 == v2) {
      return 1;
    }
  }
  unint64_t v9 = v7 - 4096;
  if (v9 > 5) {
    return 0;
  }
  int v6 = &v4[Size];
  if (((1 << v9) & 0x36) != 0) {
    goto LABEL_7;
  }
  if (v9)
  {
    if (v4 != v1) {
      return 0;
    }
    return v1[1] == 1;
  }
  else
  {
    return v12 == v2;
  }
}

BOOL llvm::DIExpression::isImplicit(llvm::DIExpression *this)
{
  BOOL result = llvm::DIExpression::isValid(this);
  if (result)
  {
    uint64_t v5 = (char *)this + 24;
    int v4 = (uint64_t *)*((void *)this + 3);
    uint64_t v3 = (uint64_t *)*((void *)v5 + 1);
    if ((((char *)v3 - (char *)v4) & 0x7FFFFFFF8) == 0) {
      return 0;
    }
    unsigned int v8 = v4;
    if (v3 == v4)
    {
      return 0;
    }
    else
    {
      int v6 = v3;
      while (*v4 != 159 && *v4 != 4098)
      {
        v4 += llvm::DIExpression::ExprOperand::getSize(&v8);
        unsigned int v8 = v4;
        if (v4 == v6) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::DIExpression::isComplex(llvm::DIExpression *this)
{
  BOOL result = llvm::DIExpression::isValid(this);
  if (result)
  {
    uint64_t v5 = (char *)this + 24;
    int v4 = (uint64_t *)*((void *)this + 3);
    uint64_t v3 = (uint64_t *)*((void *)v5 + 1);
    if ((((char *)v3 - (char *)v4) & 0x7FFFFFFF8) == 0) {
      return 0;
    }
    unint64_t v7 = v4;
    if (v3 == v4)
    {
      return 0;
    }
    else
    {
      int v6 = v3;
      while ((*v4 | 2) == 0x1002)
      {
        v4 += llvm::DIExpression::ExprOperand::getSize(&v7);
        unint64_t v7 = v4;
        if (v4 == v6) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

int8x16_t llvm::DIExpression::getFragmentInfo@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  unint64_t v7 = a1;
  if (a1 == a2)
  {
LABEL_5:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    uint64_t v5 = a1;
    while (*v5 != 4096)
    {
      v5 += llvm::DIExpression::ExprOperand::getSize(&v7);
      unint64_t v7 = v5;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
    int8x16_t result = vextq_s8(*(int8x16_t *)(v5 + 1), *(int8x16_t *)(v5 + 1), 8uLL);
    *a3 = result;
    a3[1].i8[0] = 1;
  }
  return result;
}

BOOL llvm::DIExpression::hasAllLocationOps(llvm::DIExpression *this, unsigned int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 1;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  v31[0] = v3;
  v31[1] = v3;
  int v4 = (uint64_t *)*((void *)this + 3);
  uint64_t v5 = (uint64_t *)*((void *)this + 4);
  uint64_t v28 = v4;
  if (v5 == v4)
  {
    unsigned int v9 = 1;
    if (a2) {
      goto LABEL_17;
    }
LABEL_54:
    BOOL v26 = 1;
    if (v9) {
      return v26;
    }
LABEL_55:
    MEMORY[0x1D25D9CD0](*(void *)&v31[0], 8);
    return v26;
  }
  do
  {
    if (*v4 != 4101) {
      goto LABEL_12;
    }
    uint64_t v6 = v4[1];
    uint64_t v29 = 0;
    if (sub_1CC597F54((uint64_t)&v30, v6, &v29)) {
      goto LABEL_12;
    }
    unsigned int v7 = v30 >> 1;
    if (v30) {
      unsigned int v8 = 4;
    }
    else {
      unsigned int v8 = DWORD2(v31[0]);
    }
    if (4 * v7 + 4 >= 3 * v8)
    {
      v8 *= 2;
LABEL_15:
      sub_1CC598000((uint64_t)&v30, v8);
      uint64_t v29 = 0;
      sub_1CC597F54((uint64_t)&v30, v6, &v29);
      goto LABEL_9;
    }
    if (v8 + ~v7 - HIDWORD(v30) <= v8 >> 3) {
      goto LABEL_15;
    }
LABEL_9:
    LODWORD(v30) = v30 + 2;
    if (*v29 != -1) {
      --HIDWORD(v30);
    }
    *uint64_t v29 = v6;
LABEL_12:
    v4 += llvm::DIExpression::ExprOperand::getSize(&v28);
    uint64_t v28 = v4;
  }
  while (v4 != v5);
  unsigned int v9 = v30;
  if (!a2) {
    goto LABEL_54;
  }
LABEL_17:
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (v9) {
    int v12 = v31;
  }
  else {
    int v12 = *(_OWORD **)&v31[0];
  }
  if (v9) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = DWORD2(v31[0]);
  }
  uint64_t v14 = (unint64_t *)v12 + v13;
  int v15 = (unint64_t *)(*(void *)&v31[0] + 8 * DWORD2(v31[0]));
  if (v9)
  {
    int v15 = (unint64_t *)&v32;
    int v16 = (unint64_t *)v31;
  }
  else
  {
    int v16 = *(unint64_t **)&v31[0];
  }
  do
  {
    int v17 = v9;
    unsigned int v18 = DWORD2(v31[0]);
    uint64_t v19 = v14;
    uint64_t v20 = v14;
    if (v9 >= 2)
    {
      if (v9 & 1 | DWORD2(v31[0]))
      {
        uint64_t v19 = v16;
        while (*v19 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v19 == v15)
          {
            int v17 = v9 & 1;
            unsigned int v18 = DWORD2(v31[0]);
            uint64_t v19 = v15;
            goto LABEL_34;
          }
        }
        int v17 = v9 & 1;
        unsigned int v18 = DWORD2(v31[0]);
LABEL_34:
        uint64_t v20 = v15;
      }
      else
      {
        int v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = *(unint64_t **)&v31[0];
        uint64_t v20 = *(unint64_t **)&v31[0];
      }
    }
    BOOL v21 = v17 == 0;
    if (v17) {
      uint64_t v22 = v31;
    }
    else {
      uint64_t v22 = *(_OWORD **)&v31[0];
    }
    if (!v21) {
      unsigned int v18 = 4;
    }
    uint64_t v23 = (unint64_t *)v22 + v18;
    if (v19 != v23)
    {
      while (*v19 != v10)
      {
        uint64_t v24 = v19 + 1;
        while (v24 != v20)
        {
          unint64_t v25 = *v24++;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v19 = v24 - 1;
            goto LABEL_47;
          }
        }
        uint64_t v19 = v20;
LABEL_47:
        if (v19 == v23)
        {
          BOOL v26 = 0;
          goto LABEL_51;
        }
      }
    }
    BOOL v26 = v19 != v23;
    if (v19 == v23) {
      break;
    }
    ++v10;
  }
  while (v10 != v11);
LABEL_51:
  if ((v9 & 1) == 0) {
    goto LABEL_55;
  }
  return v26;
}

llvm::MDNode *llvm::DIExpression::appendToStack(void *a1, unsigned char *a2, uint64_t a3)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)a1[3];
  unsigned int v7 = (char *)a1[4];
  int v16 = v6;
  uint64_t v8 = v7 - v6;
  if (v7 == v6)
  {
LABEL_5:
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v9 = v6;
    while (*(void *)v9 != 4096)
    {
      v9 += 8 * llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v16);
      int v16 = v9;
      if (v9 == v7) {
        goto LABEL_5;
      }
    }
    unsigned int v10 = 3;
  }
  uint64_t v11 = v8 >> 3;
  uint64_t v12 = v10;
  if (v10 >= ((unint64_t)v8 >> 3))
  {
    int v16 = v18;
    uint64_t v17 = 0x1000000000;
LABEL_11:
    sub_1CBFCBB74((unsigned int *)&v16, a2, &a2[8 * a3]);
    if (v11 != v12) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)&v6[8 * v11 + 8 * ~(unint64_t)v10];
  int v16 = v18;
  uint64_t v17 = 0x1000000000;
  if (v13 == 159) {
    goto LABEL_11;
  }
  v18[0] = 6;
  LODWORD(v17) = 1;
  sub_1CBFCBB74((unsigned int *)&v16, a2, &a2[8 * a3]);
LABEL_12:
  if (v17 >= HIDWORD(v17)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v16 + v17) = 159;
  LODWORD(v17) = v17 + 1;
LABEL_14:
  uint64_t v14 = llvm::DIExpression::append(a1, v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

llvm::DIExpression *llvm::DIExpression::constantFold(llvm::DIExpression *this, const llvm::ConstantInt *a2)
{
  BOOL v2 = this;
  v23[8] = *MEMORY[0x1E4F143B8];
  unsigned int v20 = *((_DWORD *)a2 + 8);
  if (v20 > 0x40) {
    operator new[]();
  }
  uint64_t v19 = *((void *)a2 + 3);
  BOOL v21 = v23;
  uint64_t v22 = 0x800000000;
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  unsigned int v18 = (uint64_t *)v3;
  if (v4 != v3)
  {
    char v5 = 0;
    char v6 = 1;
    while (1)
    {
      uint64_t v17 = (uint64_t *)v3;
      if (*(void *)v3 == 4097)
      {
        if (v6)
        {
          if (*(void *)(v3 + 16) == 5) {
            llvm::APInt::sextOrTrunc((uint64_t)&v19, *(_DWORD *)(v3 + 8), (uint64_t)&v15);
          }
          else {
            llvm::APInt::zextOrTrunc(&v19, *(_DWORD *)(v3 + 8), (uint64_t)&v15);
          }
          if (v20 >= 0x41 && v19) {
            MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
          }
          uint64_t v19 = v15;
          unsigned int v20 = v16;
          char v5 = 1;
          char v6 = 1;
          goto LABEL_16;
        }
      }
      else if ((v5 & 1) == 0)
      {
        break;
      }
      unsigned int Size = llvm::DIExpression::ExprOperand::getSize(&v17);
      sub_1CBFCBB74((unsigned int *)&v21, (unsigned char *)v3, (unsigned char *)(v3 + 8 * Size));
      char v6 = 0;
LABEL_16:
      v3 += 8 * llvm::DIExpression::ExprOperand::getSize(&v18);
      unsigned int v18 = (uint64_t *)v3;
      if (v3 == v4)
      {
        if (v5)
        {
          uint64_t v8 = *((void *)v2 + 2);
          unsigned int v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
          if ((v8 & 4) != 0) {
            unsigned int v9 = (void *)*v9;
          }
          Impl = llvm::DIExpression::getImpl(v9, v21, v22, 0, 1);
          uint64_t v12 = *((void *)v2 + 2);
          uint64_t v13 = (llvm::ConstantInt *)(v12 & 0xFFFFFFFFFFFFFFF8);
          if ((v12 & 4) != 0) {
            uint64_t v13 = *(llvm::ConstantInt **)v13;
          }
          llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v19, v10);
          BOOL v2 = Impl;
        }
        break;
      }
    }
  }
  if (v21 != v23) {
    free(v21);
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  return v2;
}

unint64_t llvm::DIExpression::getNumLocationOperands(llvm::DIExpression *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 3);
  BOOL v2 = (uint64_t *)*((void *)this + 4);
  char v6 = v1;
  if (v2 == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    if (*v1 == 4101)
    {
      uint64_t v5 = v1[1];
      if (v3 <= v5 + 1) {
        unint64_t v3 = v5 + 1;
      }
    }
    v1 += llvm::DIExpression::ExprOperand::getSize(&v6);
    char v6 = v1;
  }
  while (v1 != v2);
  return v3;
}

llvm::MDNode *llvm::DIGlobalVariableExpression::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a4) {
    goto LABEL_9;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t *)(*a1 + 512);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v17 = 0;
  int v12 = sub_1CD5B8254(v11, &v18, (uint64_t **)&v17);
  int8x16_t result = 0;
  if (v12 && v17 != (llvm::MDNode **)(*(void *)(v10 + 512) + 8 * *(unsigned int *)(v10 + 528))) {
    int8x16_t result = *v17;
  }
  if (!result && a5)
  {
LABEL_9:
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    uint64_t v15 = operator new(0x28uLL);
    void *v15 = 0;
    v15[1] = 0;
    unsigned int v16 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v15 + 2), (uint64_t)a1, 7, a4, (uint64_t)&v18, 2, 0, 0);
    return sub_1CD5B28F8(v16, a4, *a1 + 512);
  }
  return result;
}

uint64_t llvm::DIObjCProperty::DIObjCProperty(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 27, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 16896;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 27, a3, a6, a7, 0, 0);
  *(_WORD *)(result + 2) = 16896;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  return result;
}

unsigned int *llvm::DIObjCProperty::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a9) {
    goto LABEL_7;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = (uint64_t *)(*a1 + 968);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  LODWORD(v27) = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  int v30 = a7;
  uint64_t v31 = a8;
  uint64_t v24 = 0;
  int v20 = sub_1CD5B86E0(v19, (uint64_t)&v25, &v24);
  uint64_t result = 0;
  if (v20 && v24 != (unsigned int **)(*(void *)(v18 + 968) + 8 * *(unsigned int *)(v18 + 984))) {
    uint64_t result = *v24;
  }
  if (!result && a10)
  {
LABEL_7:
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a5;
    uint64_t v28 = a6;
    uint64_t v29 = a8;
    uint64_t v22 = operator new(0x48uLL);
    *uint64_t v22 = 0u;
    v22[1] = 0u;
    *((void *)v22 + 4) = 0;
    uint64_t v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v22 + 40, (uint64_t)a1, 27, a9, (uint64_t)&v25, 5, 0, 0);
    *((_WORD *)v22 + 21) = 16896;
    *((_DWORD *)v22 + 16) = a4;
    *((_DWORD *)v22 + 17) = a7;
    return sub_1CD5B2958(v23, a9, *a1 + 968);
  }
  return result;
}

llvm::MDNode *llvm::DIImportedEntity::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  __int16 v16 = a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a9) {
    goto LABEL_7;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = (uint64_t *)(*a1 + 992);
  LODWORD(v25) = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  LODWORD(v29) = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v24 = 0;
  int v20 = sub_1CC5982CC(v19, (uint64_t)&v25, (uint64_t **)&v24);
  uint64_t result = 0;
  if (v20 && v24 != (llvm::MDNode **)(*(void *)(v18 + 992) + 8 * *(unsigned int *)(v18 + 1008))) {
    uint64_t result = *v24;
  }
  if (!result && a10)
  {
LABEL_7:
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a7;
    uint64_t v28 = a5;
    uint64_t v29 = a8;
    uint64_t v22 = operator new(0x48uLL);
    *uint64_t v22 = 0u;
    v22[1] = 0u;
    *((void *)v22 + 4) = 0;
    uint64_t v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v22 + 40, (uint64_t)a1, 28, a9, (uint64_t)&v25, 5, 0, 0);
    *((_WORD *)v22 + 21) = v16;
    *((_DWORD *)v22 + 16) = a6;
    return sub_1CC592874(v23, a9, *a1 + 992);
  }
  return result;
}

llvm::MDNode *sub_1CC592874(llvm::MDNode *result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1CC5985B0(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *llvm::DIMacro::getImpl(void *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11 = a2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t *)(*a1 + 1016);
  unint64_t v22 = __PAIR64__(a3, a2);
  unint64_t v23 = a4;
  unint64_t v24 = a5;
  BOOL v21 = 0;
  int v16 = sub_1CD5B8F7C(v15, (uint64_t)&v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1016) + 8 * *(unsigned int *)(v14 + 1032))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    unint64_t v22 = a4;
    unint64_t v23 = a5;
    uint64_t v19 = operator new(0x30uLL);
    void *v19 = 0;
    v19[1] = 0;
    int v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 2), (uint64_t)a1, 29, a6, (uint64_t)&v22, 2, 0, 0);
    *((_WORD *)v19 + 9) = v11;
    *((_DWORD *)v19 + 10) = a3;
    return sub_1CD5B29BC(v20, a6, *a1 + 1016);
  }
  return result;
}

llvm::MDNode *llvm::DIMacroFile::getImpl(void *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11 = a2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t *)(*a1 + 1040);
  unint64_t v22 = __PAIR64__(a3, a2);
  unint64_t v23 = a4;
  unint64_t v24 = a5;
  BOOL v21 = 0;
  int v16 = sub_1CD5B8F7C(v15, (uint64_t)&v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1040) + 8 * *(unsigned int *)(v14 + 1056))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    unint64_t v22 = a4;
    unint64_t v23 = a5;
    uint64_t v19 = operator new(0x30uLL);
    void *v19 = 0;
    v19[1] = 0;
    int v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 2), (uint64_t)a1, 30, a6, (uint64_t)&v22, 2, 0, 0);
    *((_WORD *)v19 + 9) = v11;
    *((_DWORD *)v19 + 10) = a3;
    return sub_1CD5B29BC(v20, a6, *a1 + 1040);
  }
  return result;
}

llvm::MDNode *llvm::DIArgList::getImpl(void *a1, unsigned char *a2, const void *a3, int a4, int a5)
{
  if (a4) {
    goto LABEL_9;
  }
  uint64_t v10 = *a1;
  __int16 v11 = (uint64_t *)(*a1 + 1088);
  v17[0] = a2;
  v17[1] = a3;
  uint64_t v18 = 0;
  int v12 = sub_1CD5B95A0(v11, v17, (uint64_t **)&v18);
  uint64_t result = 0;
  if (v12 && v18 != (llvm::MDNode **)(*(void *)(v10 + 1088) + 8 * *(unsigned int *)(v10 + 1104))) {
    uint64_t result = *v18;
  }
  if (!result && a5)
  {
LABEL_9:
    uint64_t v15 = operator new(0x48uLL);
    int v16 = (llvm::MDNode *)sub_1CD5B2C50((uint64_t)v15, (uint64_t)a1, a4, a2, (uint64_t)a3);
    return sub_1CD5B2A20(v16, a4, *a1 + 1088);
  }
  return result;
}

uint64_t llvm::DIArgList::track(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 32);
  if (v1)
  {
    BOOL v2 = *(unsigned __int8 ***)(this + 24);
    uint64_t v3 = this | 2;
    uint64_t v4 = 8 * v1;
    do
    {
      if (*v2) {
        this = llvm::MetadataTracking::track((uint64_t)v2, *v2, v3);
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

uint64_t sub_1CC592C38(uint64_t *a1, _DWORD *a2, uint64_t **a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int v7 = a2 + 1;
    uint64_t v8 = (uint64_t *)(a2 + 2);
    unsigned int v9 = (uint64_t *)(a2 + 4);
    uint64_t v10 = (char *)(a2 + 6);
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    memset(v26, 0, sizeof(v26));
    __int16 v11 = &unk_1EBCBE000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      int v24 = __cxa_guard_acquire(&qword_1EBCBE588);
      __int16 v11 = &unk_1EBCBE000;
      if (v24)
      {
        unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v25 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v25;
        __cxa_guard_release(&qword_1EBCBE588);
        __int16 v11 = (void *)&unk_1EBCBE000;
      }
    }
    uint64_t v29 = v11[176];
    LODWORD(v26[0]) = *a2;
    int v12 = sub_1CC592E54((char *)v26, 0, (_DWORD *)v26 + 1, (char *)v27, v7, v8, v9, v10);
    uint64_t v13 = 0;
    unsigned int v14 = (v4 - 1) & v12;
    for (int i = 1; ; ++i)
    {
      int v16 = (uint64_t *)(v6 + 8 * v14);
      uint64_t v17 = *v16;
      if (*v16 == -4096) {
        break;
      }
      if (v17 != -8192)
      {
        if (*a2 == *(_DWORD *)(v17 + 4) && *v7 == *(unsigned __int16 *)(v17 + 2))
        {
          uint64_t v20 = *(unsigned int *)(v17 + 8);
          BOOL v21 = (void *)(v17 - 8 * v20);
          if (*v8 == *v21)
          {
            uint64_t v22 = v20 == 2 ? v21[1] : 0;
            if (*v9 == v22 && *v10 == *(unsigned __int8 *)(v17 + 1) >> 7)
            {
              uint64_t result = 1;
              goto LABEL_23;
            }
          }
        }
        if (v17 == -4096) {
          break;
        }
      }
      if (v13) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v17 == -8192;
      }
      if (v18) {
        uint64_t v13 = (uint64_t *)(v6 + 8 * v14);
      }
      unsigned int v19 = v14 + i;
      unsigned int v14 = v19 & (v4 - 1);
    }
    uint64_t result = 0;
    if (v13) {
      int v16 = v13;
    }
  }
  else
  {
    int v16 = 0;
    uint64_t result = 0;
  }
LABEL_23:
  *a3 = v16;
  return result;
}

unint64_t sub_1CC592E54(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, char *a8)
{
  uint64_t v21 = a2;
  uint64_t v13 = sub_1CC0AC9D0(a1, &v21, a3, (unint64_t)a4, *a5);
  uint64_t v22 = v21;
  unsigned int v14 = sub_1CC2E96A4(a1, &v22, v13, (unint64_t)a4, *a6);
  uint64_t v23 = v22;
  uint64_t v15 = sub_1CC2E96A4(a1, &v23, v14, (unint64_t)a4, *a7);
  uint64_t v24 = v23;
  int v16 = sub_1CC0AC730(a1, &v24, v15, (unint64_t)a4, *a8);
  uint64_t v17 = v24;
  if (!v24) {
    return sub_1CBAE06B8(a1, v16 - a1, *((void *)a1 + 15));
  }
  uint64_t v20 = v16;
  if (v16 != a1 && v16 != a4) {
    sub_1CBFFD1E8(a1, v16, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v20[v17 - (void)a1]);
}

unint64_t sub_1CC592F6C(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v15 = a2;
  unsigned int v9 = sub_1CC2E96A4(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  uint64_t v10 = sub_1CC0AC730(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  unsigned int v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

uint64_t sub_1CC593034(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a2;
    uint64_t v8 = *(unsigned int *)(*a2 + 8);
    int v24 = *(_DWORD *)(*a2 + 4);
    int v25 = *(unsigned __int16 *)(*a2 + 2);
    unsigned int v9 = (uint64_t *)(v7 - 8 * v8);
    uint64_t v26 = *v9;
    if (v8 == 2) {
      uint64_t v10 = v9[1];
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v27 = v10;
    v28[0] = *(unsigned char *)(v7 + 1) >> 7;
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    memset(v29, 0, sizeof(v29));
    uint64_t v11 = &unk_1EBCBE000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      int v22 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v11 = &unk_1EBCBE000;
      if (v22)
      {
        unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v23 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v23;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v11 = (void *)&unk_1EBCBE000;
      }
    }
    uint64_t v32 = v11[176];
    LODWORD(v29[0]) = v24;
    int v12 = sub_1CC592E54((char *)v29, 0, (_DWORD *)v29 + 1, (char *)v30, &v25, &v26, &v27, v28);
    int v13 = v4 - 1;
    unsigned int v14 = (v4 - 1) & v12;
    uint64_t v15 = (void *)(v6 + 8 * v14);
    uint64_t v16 = *v15;
    if (*a2 == *v15)
    {
LABEL_14:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != -4096)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -8192;
        }
        if (v19) {
          uint64_t v17 = v15;
        }
        unsigned int v20 = v14 + v18++;
        unsigned int v14 = v20 & v13;
        uint64_t v15 = (void *)(v6 + 8 * (v20 & v13));
        uint64_t v16 = *v15;
        if (*a2 == *v15) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v17) {
        uint64_t v15 = v17;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
  }
  *a3 = v15;
  return result;
}

void *sub_1CC593238(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC593304(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC593304(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = sub_1CC593034((uint64_t *)v5, a2, &v9);
      *unsigned int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1CC5933AC(uint64_t *result, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v5 = result;
  int v7 = result + 1;
  uint64_t v6 = (void *)result[1];
  if (!v6)
  {
    uint64_t v8 = result + 1;
    goto LABEL_8;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = v6;
      unint64_t v9 = v6[4];
      if (v9 <= a2)
      {
        if (v9 < a2) {
          goto LABEL_4;
        }
        unint64_t v10 = v8[5];
        if (v10 <= a3) {
          break;
        }
      }
      uint64_t v6 = (void *)*v8;
      int v7 = v8;
      if (!*v8) {
        goto LABEL_8;
      }
    }
    if (v10 >= a3) {
      return result;
    }
LABEL_4:
    uint64_t v6 = (void *)v8[1];
  }
  while (v6);
  int v7 = v8 + 1;
LABEL_8:
  uint64_t v11 = operator new(0x30uLL);
  v11[2] = *a4;
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v8;
  void *v7 = v11;
  uint64_t v12 = *(void *)*v5;
  if (v12)
  {
    *uint64_t v5 = v12;
    uint64_t v11 = (_OWORD *)*v7;
  }
  uint64_t result = sub_1CB8358B8((uint64_t *)v5[1], (uint64_t *)v11);
  ++v5[2];
  return result;
}

unint64_t sub_1CC593480(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  uint64_t v12 = sub_1CBF65470();
  return sub_1CD5B34E4((char *)v9, 0, v9, (char *)v10, a1, a2, a3, a4);
}

void *sub_1CC59353C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B38DC(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC593608(llvm *this, uint64_t *a2)
{
  BOOL v2 = a2;
  uint64_t v3 = this;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  int v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v4 = &unk_1EBCBE000;
    uint64_t v3 = this;
    BOOL v2 = a2;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v7;
      __cxa_guard_release(&qword_1EBCBE588);
      int v4 = (void *)&unk_1EBCBE000;
      uint64_t v3 = this;
      BOOL v2 = a2;
    }
  }
  uint64_t v13 = v4[176];
  return sub_1CC593700((char *)v10, 0, v10, (char *)v11, v3, v2);
}

unint64_t sub_1CC593700(char *a1, const llvm::APInt *a2, void *a3, char *a4, llvm *this, uint64_t *a6)
{
  uint64_t v17 = a2;
  unint64_t v10 = llvm::hash_value(this, a2);
  uint64_t v11 = sub_1CBFFCBA0(a1, (uint64_t *)&v17, a3, (unint64_t)a4, v10);
  int v18 = v17;
  uint64_t v12 = (char *)sub_1CC2E96A4(a1, (uint64_t *)&v18, v11, (unint64_t)a4, *a6);
  uint64_t v13 = (uint64_t)v18;
  if (!v18) {
    return sub_1CBAE06B8(a1, v12 - a1, *((void *)a1 + 15));
  }
  uint64_t v16 = v12;
  if (v12 != a1 && v12 != a4) {
    sub_1CBFFD1E8(a1, v12, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v16[v13 - (void)a1]);
}

uint64_t sub_1CC5937E0(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CD5B40B0(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = v7 & (v4 - 1);
    unint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_14:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v12 = v10;
        }
        unsigned int v16 = v9 + v13++;
        unsigned int v9 = v16 & v8;
        unint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v12) {
        unint64_t v10 = v12;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
  }
  *a3 = v10;
  return result;
}

void *sub_1CC59389C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B4248(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC593968(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t v14 = sub_1CBF65470();
  LODWORD(v11[0]) = *a1;
  return sub_1CD5B43E0((char *)v11, 0, (_OWORD *)((char *)v11 + 4), (char *)v12, a2, a3, a4, a5);
}

void *sub_1CC593A38(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B4734(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC593B04(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = v4 - 1;
    unsigned int v8 = sub_1CC593C5C(a2) & (v4 - 1);
    unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1CC593BE4(a2, *v9))
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (*v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = *v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v9;
        }
        int v13 = v11 + 1;
        unsigned int v8 = (v8 + v11) & v7;
        unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL v14 = sub_1CC593BE4(a2, *v9);
        int v11 = v13;
        if (v14) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v10) {
        unsigned int v9 = v10;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1CC593BE4(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (sub_1CC594264(*(_DWORD *)a1, *(void *)(a1 + 32), *(void *)(a1 + 8), a2)) {
    return 1;
  }

  return sub_1CC594118(a1, a2);
}

unint64_t sub_1CC593C5C(uint64_t a1)
{
  if (*(_DWORD *)a1 == 13
    && *(void *)(a1 + 8)
    && (uint64_t v2 = *(void *)(a1 + 32)) != 0
    && *(unsigned char *)v2 == 13
    && *(void *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 56))
  {
    return sub_1CC593CD8((uint64_t *)(a1 + 8), (uint64_t *)(a1 + 32));
  }
  else
  {
    return sub_1CC593DD0((_DWORD *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (int *)(a1 + 24), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 40), (int *)(a1 + 84));
  }
}

unint64_t sub_1CC593CD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  int v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v4 = &unk_1EBCBE000;
    uint64_t v3 = a1;
    uint64_t v2 = a2;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v7;
      __cxa_guard_release(&qword_1EBCBE588);
      int v4 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a1;
      uint64_t v2 = a2;
    }
  }
  uint64_t v13 = v4[176];
  return sub_1CC36B408((char *)v10, 0, v10, (char *)v11, v3, v2);
}

unint64_t sub_1CC593DD0(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4, uint64_t *a5, uint64_t *a6, int *a7)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v10 = a2;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  int v11 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v21 = a6;
    int v22 = a1;
    BOOL v19 = a5;
    int v18 = a7;
    int v13 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v11 = &unk_1EBCBE000;
    uint64_t v10 = a2;
    a7 = v18;
    unsigned int v9 = a3;
    a6 = v21;
    unsigned int v8 = a4;
    a5 = v19;
    int v14 = v13;
    a1 = v22;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v15;
      __cxa_guard_release(&qword_1EBCBE588);
      int v11 = (void *)&unk_1EBCBE000;
      a6 = v21;
      a1 = v22;
      uint64_t v10 = a2;
      a7 = v18;
      a5 = v19;
      unsigned int v9 = a3;
      unsigned int v8 = a4;
    }
  }
  uint64_t v26 = v11[176];
  LODWORD(v23[0]) = *a1;
  return sub_1CC593F14((char *)v23, 0, (_OWORD *)((char *)v23 + 4), (char *)v24, v10, v9, v8, a5, a6, a7);
}

unint64_t sub_1CC593F14(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, int *a10)
{
  uint64_t v18 = a2;
  unint64_t v15 = sub_1CC2E96A4(a1, &v18, a3, (unint64_t)a4, *a5);
  uint64_t v19 = v18;
  unsigned int v16 = sub_1CC2E96A4(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1CC593FBC(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1CC593FBC(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  uint64_t v16 = a2;
  int v13 = sub_1CC0AC9D0(a1, &v16, a3, (unint64_t)a4, *a5);
  uint64_t v17 = v16;
  int v14 = sub_1CC2E96A4(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1CC594050(a1, v17, v14, a4, a7, a8);
}

unint64_t sub_1CC594050(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6)
{
  uint64_t v15 = a2;
  unsigned int v9 = sub_1CC2E96A4(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  uint64_t v10 = (char *)sub_1CC0AC9D0(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  int v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

BOOL sub_1CC594118(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 2);
  if (*(_DWORD *)a1 != v2) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(void *)(a1 + 8) != v3[2]) {
    return 0;
  }
  uint64_t v4 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v4 = *v3;
  }
  if (*(void *)(a1 + 16) != v4
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(void *)(a1 + 32) != v3[1]
    || *(void *)(a1 + 40) != v3[3]
    || *(void *)(a1 + 48) != *(void *)(a2 + 32)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 48)
    || *(void *)(a1 + 56) != *(void *)(a2 + 40))
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 52);
  uint64_t v6 = v5 & 0xFF00000000;
  if (*(unsigned char *)(a1 + 72) && v6)
  {
    if (*(_DWORD *)(a1 + 68) != v5) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 72) == 0) == (v6 != 0))
  {
    return 0;
  }
  if (v2 != 17152)
  {
    if (!*(unsigned char *)(a1 + 80)) {
      goto LABEL_22;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 80) || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
LABEL_22:
  if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 28) || *(void *)(a1 + 88) != v3[4]) {
    return 0;
  }
  return *(void *)(a1 + 96) == v3[5];
}

BOOL sub_1CC594264(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  if (a2 && a1 == 13 && a3)
  {
    if (*(unsigned char *)a2 == 13
      && *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56)
      && *(_WORD *)(a4 + 2) == 13
      && (uint64_t v6 = a4 - 8 * *(unsigned int *)(a4 + 8), *(void *)(v6 + 16) == a3))
    {
      return *(void *)(v6 + 8) == a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC5942D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC594358((uint64_t *)a1, a2, &v10);
  unint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC594510(a1, (uint64_t)a2, a2, v10);
    unint64_t v7 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC594358(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    sub_1CC594474((uint64_t)v19, *a2);
    unsigned int v7 = v4 - 1;
    unsigned int v8 = sub_1CC593C5C((uint64_t)v19) & (v4 - 1);
    uint64_t v9 = (uint64_t *)(v6 + 8 * v8);
    uint64_t v10 = *a2;
    uint64_t v11 = *v9;
    if (*a2 == *v9)
    {
LABEL_19:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (1)
      {
        if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v16 = *(unsigned __int16 *)(v10 + 2);
          uint64_t v17 = v10 - 8 * *(unsigned int *)(v10 + 8);
          if (sub_1CC594264(v16, *(void *)(v17 + 8), *(void *)(v17 + 16), v11)) {
            goto LABEL_19;
          }
          uint64_t v11 = *v9;
        }
        if (v11 == -4096) {
          break;
        }
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          uint64_t v12 = v9;
        }
        unsigned int v15 = v8 + v13++;
        unsigned int v8 = v15 & v7;
        uint64_t v9 = (uint64_t *)(v6 + 8 * (v15 & v7));
        uint64_t v10 = *a2;
        uint64_t v11 = *v9;
        if (*a2 == *v9) {
          goto LABEL_19;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v9 = v12;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
  *a3 = v9;
  return result;
}

__n128 sub_1CC594474(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(unsigned __int16 *)(a2 + 2);
  int v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  *(void *)(a1 + 8) = v2[2];
  uint64_t v3 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v3 = *v2;
  }
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[3];
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 68) = *(void *)(a2 + 52);
  if (*(_WORD *)(a2 + 2) == 17152) {
    uint64_t v6 = *(unsigned int *)(a2 + 4) | 0x100000000;
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 76) = v6;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 28);
  __n128 result = *(__n128 *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

uint64_t *sub_1CC594510(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC5945C4(a1, v7);
  uint64_t v9 = 0;
  sub_1CC594358((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC5945C4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC594690(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC594690(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      __n128 result = sub_1CC594358((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1CC594738(uint64_t *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  uint64_t v12 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v17 = a5;
    uint64_t v21 = a6;
    unint64_t v23 = a7;
    unsigned int v20 = a8;
    int v14 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v12 = &unk_1EBCBE000;
    a8 = v20;
    a6 = v21;
    uint64_t v10 = a2;
    a7 = v23;
    a5 = v17;
    uint64_t v11 = a1;
    uint64_t v9 = a3;
    uint64_t v8 = a4;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v15;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v12 = (void *)&unk_1EBCBE000;
      a8 = v20;
      a6 = v21;
      uint64_t v10 = a2;
      a7 = v23;
      a5 = v17;
      uint64_t v11 = a1;
      uint64_t v9 = a3;
      uint64_t v8 = a4;
    }
  }
  uint64_t v27 = v12[176];
  return sub_1CC594888((char *)v24, 0, v24, (char *)v25, v11, v10, v9, v8, a5, a6, a7, a8);
}

unint64_t sub_1CC594888(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v20 = a2;
  uint64_t v17 = sub_1CC2E96A4(a1, &v20, a3, (unint64_t)a4, *a5);
  uint64_t v21 = v20;
  uint64_t v18 = sub_1CC2E96A4(a1, &v21, v17, (unint64_t)a4, *a6);
  return sub_1CC594940(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t sub_1CC594940(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v18 = a2;
  unint64_t v15 = sub_1CC0AC9D0(a1, &v18, a3, (unint64_t)a4, *a5);
  uint64_t v19 = v18;
  int v16 = sub_1CC2E96A4(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1CD5B34E4(a1, v19, v16, a4, a7, a8, a9, a10);
}

void *sub_1CC5949E8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B5370(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC594AB4(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = (unsigned __int8 *)(a2 + 4);
    unsigned int v8 = (void *)(a2 + 8);
    int v9 = sub_1CC594BB8((_DWORD *)a2, (char *)(a2 + 4), (uint64_t *)(a2 + 8));
    uint64_t v10 = 0;
    unsigned int v11 = (v4 - 1) & v9;
    for (int i = 1; ; ++i)
    {
      int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 == -4096) {
        break;
      }
      if (v14 != -8192)
      {
        if (*(_DWORD *)a2 == *(_DWORD *)(v14 + 28)
          && *v7 == *(unsigned __int8 *)(v14 + 52)
          && *v8 == *(void *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 24))
        {
          uint64_t result = 1;
          goto LABEL_11;
        }
        if (v14 == -4096) {
          break;
        }
      }
      if (v10) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v14 == -8192;
      }
      if (v16) {
        uint64_t v10 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v17 = v11 + i;
      unsigned int v11 = v17 & (v4 - 1);
    }
    uint64_t result = 0;
    if (v10) {
      int v13 = v10;
    }
  }
  else
  {
    int v13 = 0;
    uint64_t result = 0;
  }
LABEL_11:
  *a3 = v13;
  return result;
}

unint64_t sub_1CC594BB8(_DWORD *a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  int v4 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  unint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a1;
    int v7 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v5 = &unk_1EBCBE000;
    int v4 = a2;
    uint64_t v3 = a3;
    int v8 = v7;
    a1 = v12;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v9;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v5 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a3;
      a1 = v12;
      int v4 = a2;
    }
  }
  uint64_t v16 = v5[176];
  LODWORD(v13[0]) = *a1;
  return sub_1CC594CCC((char *)v13, 0, (unsigned char *)v13 + 4, (char *)v14, v4, v3);
}

unint64_t sub_1CC594CCC(char *a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, uint64_t *a6)
{
  uint64_t v15 = a2;
  unint64_t v9 = sub_1CC0AC730(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  uint64_t v10 = (char *)sub_1CC2E96A4(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  uint64_t v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

uint64_t sub_1CC594D94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC594E1C((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC594F18(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC594E1C(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a2;
    int v18 = *(_DWORD *)(*a2 + 28);
    v19[0] = *(unsigned char *)(v7 + 52);
    uint64_t v20 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 24);
    int v8 = sub_1CC594BB8(&v18, v19, &v20);
    int v9 = v4 - 1;
    unsigned int v10 = (v4 - 1) & v8;
    uint64_t v11 = (void *)(v6 + 8 * v10);
    uint64_t v12 = *v11;
    if (*a2 == *v11)
    {
      uint64_t result = 1;
    }
    else
    {
      int v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16) {
          int v13 = v11;
        }
        unsigned int v17 = v10 + v14++;
        unsigned int v10 = v17 & v9;
        uint64_t v11 = (void *)(v6 + 8 * (v17 & v9));
        uint64_t v12 = *v11;
        if (*a2 == *v11) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v11 = v13;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

void *sub_1CC594F18(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CC594FCC(a1, v7);
  int v9 = 0;
  sub_1CC594E1C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC594FCC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC595098(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC595098(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v9 = 0;
      uint64_t result = sub_1CC594E1C((uint64_t *)v5, a2, &v9);
      *int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC595140(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int v7 = sub_1CC59521C(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = v7 & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (v7 & v9));
      uint64_t v13 = *v12;
      if (*v12 != -4096 && v13 != -8192)
      {
        if (sub_1CC595440(a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_7;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v13 == -8192;
      }
      if (v15) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v7 = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v12;
  return result;
}

unint64_t sub_1CC59521C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    int v1 = *(_DWORD *)(a1 + 16);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v7 = v1;
  uint64_t v6 = v2;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = v3;
  return sub_1CC595284((void *)a1, (uint64_t *)(a1 + 8), &v7, &v6, &v5);
}

unint64_t sub_1CC595284(void *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = a4;
  int v7 = a3;
  uint64_t v8 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  int v9 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v19 = a1;
    unsigned int v17 = a5;
    int v12 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v9 = &unk_1EBCBE000;
    uint64_t v6 = a4;
    uint64_t v8 = a2;
    a5 = v17;
    int v7 = a3;
    int v13 = v12;
    a1 = v19;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v14;
      __cxa_guard_release(&qword_1EBCBE588);
      int v9 = (void *)&unk_1EBCBE000;
      int v7 = a3;
      a1 = v19;
      uint64_t v6 = a4;
      uint64_t v8 = a2;
      a5 = v17;
    }
  }
  uint64_t v10 = *a1;
  uint64_t v23 = v9[176];
  *(void *)&v20[0] = v10;
  return sub_1CC5953AC((char *)v20, 0, (void *)v20 + 1, (char *)v21, v8, v7, v6, a5);
}

unint64_t sub_1CC5953AC(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16 = a2;
  int v13 = sub_1CC2E96A4(a1, &v16, a3, (unint64_t)a4, *a5);
  uint64_t v17 = v16;
  unint64_t v14 = sub_1CC0AC9D0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1CC36B408(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1CC595440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(void *)a1 != *v2 || *(void *)(a1 + 8) != v2[1]) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v3 = 0;
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 24) || *(void *)(a1 + 24) != *(void *)(a2 + 32)) {
      return v3;
    }
    goto LABEL_14;
  }
  if ((v5 != 0) == (*(unsigned char *)(a1 + 32) == 0)) {
    return 0;
  }
LABEL_14:
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a2 + 56)) {
    return *(void *)(a1 + 40) == *(void *)(a2 + 48);
  }
  else {
    return (*(unsigned char *)(a1 + 48) == 0) ^ (*(unsigned char *)(a2 + 56) != 0);
  }
}

uint64_t sub_1CC595504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC59558C((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC595680(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC59558C(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(*a2 + 40);
    long long v9 = *(_OWORD *)(*a2 + 24);
    v20[0] = *(_OWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8));
    v20[1] = v9;
    uint64_t v21 = v8;
    long long v22 = *(_OWORD *)(v7 + 48);
    int v10 = sub_1CC59521C((uint64_t)v20);
    int v11 = v4 - 1;
    unsigned int v12 = v10 & (v4 - 1);
    int v13 = (void *)(v6 + 8 * v12);
    uint64_t v14 = *v13;
    if (*a2 == *v13)
    {
      uint64_t result = 1;
    }
    else
    {
      BOOL v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v14 == -8192;
        }
        if (v18) {
          BOOL v15 = v13;
        }
        unsigned int v19 = v12 + v16++;
        unsigned int v12 = v19 & v11;
        int v13 = (void *)(v6 + 8 * (v19 & v11));
        uint64_t v14 = *v13;
        if (*a2 == *v13) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v15) {
        int v13 = v15;
      }
    }
  }
  else
  {
    int v13 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v13;
  return result;
}

void *sub_1CC595680(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC595734(a1, v7);
  long long v9 = 0;
  sub_1CC59558C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC595734(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC595800(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC595800(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      long long v9 = 0;
      uint64_t result = sub_1CC59558C((uint64_t *)v5, a2, &v9);
      *long long v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void *sub_1CC5958A8(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    int v13 = 0;
LABEL_15:
    uint64_t v6 = sub_1CC595964(a1, (uint64_t)a2, a2, v13);
    *uint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      int v13 = v8;
    }
    else {
      int v13 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void *sub_1CC595964(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC595A98(a1, v7);
      uint64_t v17 = 0;
      sub_1CB883B0C(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC595A98(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC595A98(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB883D1C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC595B64(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = v4 - 1;
    unsigned int v8 = sub_1CC595D1C(a2) & (v4 - 1);
    int v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1CC595C44(a2, *v9))
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (*v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = *v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v9;
        }
        int v13 = v11 + 1;
        unsigned int v8 = (v8 + v11) & v7;
        int v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL v14 = sub_1CC595C44(a2, *v9);
        int v11 = v13;
        if (v14) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v9 = v10;
      }
    }
  }
  else
  {
    int v9 = 0;
    uint64_t result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1CC595C44(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (sub_1CC5960E8((*(_DWORD *)(a1 + 76) >> 3) & 1, *(void *)a1, *(void *)(a1 + 16), *(void *)(a1 + 88), a2)) {
    return 1;
  }

  return sub_1CC595F44(a1, a2);
}

BOOL sub_1CC595CC4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  int v4 = (uint64_t *)(a1 - 8 * v3);
  if (v3 >= 0xA) {
    uint64_t v5 = v4[9];
  }
  else {
    uint64_t v5 = 0;
  }
  return sub_1CC5960E8((*(_DWORD *)(a1 + 44) >> 3) & 1, v4[1], v4[3], v5, a2);
}

unint64_t sub_1CC595D1C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 76) & 8) == 0
    && (uint64_t v2 = (uint64_t *)(a1 + 16), *(void *)(a1 + 16))
    && (uint64_t v3 = *(void *)a1) != 0
    && *(unsigned char *)v3 == 13
    && *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 56))
  {
    return sub_1CC593CD8(v2, (uint64_t *)a1);
  }
  else
  {
    return sub_1CC595D88((void *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  }
}

unint64_t sub_1CC595D88(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  uint64_t v6 = a4;
  int v7 = a3;
  unsigned int v8 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  int v9 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unsigned int v19 = a1;
    uint64_t v17 = a5;
    int v12 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v9 = &unk_1EBCBE000;
    uint64_t v6 = a4;
    unsigned int v8 = a2;
    a5 = v17;
    int v7 = a3;
    int v13 = v12;
    a1 = v19;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v14;
      __cxa_guard_release(&qword_1EBCBE588);
      int v9 = (void *)&unk_1EBCBE000;
      int v7 = a3;
      a1 = v19;
      uint64_t v6 = a4;
      unsigned int v8 = a2;
      a5 = v17;
    }
  }
  uint64_t v10 = *a1;
  uint64_t v23 = v9[176];
  *(void *)&v20[0] = v10;
  return sub_1CC595EB0((char *)v20, 0, (void *)v20 + 1, (char *)v21, v8, v7, v6, a5);
}

unint64_t sub_1CC595EB0(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  uint64_t v16 = a2;
  int v13 = sub_1CC2E96A4(a1, &v16, a3, (unint64_t)a4, *a5);
  uint64_t v17 = v16;
  unint64_t v14 = sub_1CC2E96A4(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1CC594050(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1CC595F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  uint64_t v3 = (uint64_t *)(a2 - 8 * v2);
  if (*(void *)a1 != v3[1] || *(void *)(a1 + 8) != v3[2] || *(void *)(a1 + 16) != v3[3]) {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v5 = *v3;
  }
  if (*(void *)(a1 + 24) != v5
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 24)
    || *(void *)(a1 + 40) != v3[4]
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 28))
  {
    return 0;
  }
  uint64_t v6 = v2 < 9 ? 0 : v3[8];
  if (*(void *)(a1 + 56) != v6
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 36)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 40)
    || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 44)
    || *(void *)(a1 + 80) != v3[5])
  {
    return 0;
  }
  uint64_t v7 = v2 < 0xA ? 0 : v3[9];
  if (*(void *)(a1 + 88) != v7 || *(void *)(a1 + 96) != v3[6] || *(void *)(a1 + 104) != v3[7]) {
    return 0;
  }
  uint64_t v8 = v2 < 0xB ? 0 : v3[10];
  if (*(void *)(a1 + 112) != v8) {
    return 0;
  }
  uint64_t v9 = v2 < 0xC ? 0 : v3[11];
  if (*(void *)(a1 + 120) != v9) {
    return 0;
  }
  if (v2 < 0xD) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v3[12];
  }
  return *(void *)(a1 + 128) == v10;
}

BOOL sub_1CC5960E8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL result = 0;
  if (a2 && !a1 && a3)
  {
    if (*(unsigned char *)a2 == 13
      && *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56)
      && !((*(unsigned char *)(a5 + 44) & 8) >> 3)
      && (uint64_t v7 = *(unsigned int *)(a5 + 8), v8 = (void *)(a5 - 8 * v7), v8[1] == a2)
      && v8[3] == a3)
    {
      if (v7 < 0xA) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8[9];
      }
      return v9 == a4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC596170@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC5961F8((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC5963D0(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC5961F8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    sub_1CC5962EC((uint64_t)v16, *a2);
    int v7 = v4 - 1;
    unsigned int v8 = sub_1CC595D1C((uint64_t)v16) & (v4 - 1);
    uint64_t v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1CC595CC4(*a2, *v9))
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (*v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = *v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v9;
        }
        int v13 = v11 + 1;
        unsigned int v8 = (v8 + v11) & v7;
        uint64_t v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL v14 = sub_1CC595CC4(*a2, *v9);
        int v11 = v13;
        if (v14) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v9 = v10;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t sub_1CC5962EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  uint64_t v3 = (uint64_t *)(a2 - 8 * v2);
  *(_OWORD *)uint64_t result = *(_OWORD *)(v3 + 1);
  *(void *)(result + 16) = v3[3];
  uint64_t v4 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v4 = *v3;
  }
  *(void *)(result + 24) = v4;
  int v5 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 24);
  *(void *)(result + 40) = v3[4];
  *(_DWORD *)(result + 48) = v5;
  if (v2 >= 9) {
    uint64_t v6 = v3[8];
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)(result + 56) = v6;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 32);
  *(void *)(result + 80) = v3[5];
  if (v2 <= 9)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 96) = *((_OWORD *)v3 + 3);
LABEL_7:
    *(void *)(result + 112) = 0;
    int v7 = (void *)(result + 120);
LABEL_8:
    uint64_t v8 = 0;
    void *v7 = 0;
    goto LABEL_9;
  }
  *(void *)(result + 88) = v3[9];
  *(_OWORD *)(result + 96) = *((_OWORD *)v3 + 3);
  if (v2 == 10) {
    goto LABEL_7;
  }
  *(void *)(result + 112) = v3[10];
  int v7 = (void *)(result + 120);
  if (v2 <= 0xB) {
    goto LABEL_8;
  }
  void *v7 = v3[11];
  if (v2 == 12) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v3[12];
  }
LABEL_9:
  *(void *)(result + 128) = v8;
  return result;
}

uint64_t *sub_1CC5963D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC596484(a1, v7);
  uint64_t v9 = 0;
  sub_1CC5961F8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC596484(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC596550(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC596550(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = sub_1CC5961F8((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC5965F8(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = (void *)(a2 + 8);
    uint64_t v8 = (_DWORD *)(a2 + 16);
    int v9 = sub_1CC59670C((void *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 16));
    uint64_t v10 = 0;
    unsigned int v11 = (v4 - 1) & v9;
    for (int i = 1; ; ++i)
    {
      int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 == -4096) {
        break;
      }
      if (v14 != -8192)
      {
        BOOL v15 = (uint64_t *)(v14 - 8 * *(unsigned int *)(v14 + 8));
        if (*(void *)a2 == v15[1])
        {
          uint64_t v16 = *v13;
          if (*(unsigned char *)v14 != 15) {
            uint64_t v16 = *v15;
          }
          if (*v7 == v16 && *v8 == *(_DWORD *)(v14 + 24))
          {
            uint64_t result = 1;
            goto LABEL_13;
          }
        }
        if (v14 == -4096) {
          break;
        }
      }
      if (v10) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v14 == -8192;
      }
      if (v18) {
        uint64_t v10 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v19 = v11 + i;
      unsigned int v11 = v19 & (v4 - 1);
    }
    uint64_t result = 0;
    if (v10) {
      int v13 = v10;
    }
  }
  else
  {
    int v13 = 0;
    uint64_t result = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

unint64_t sub_1CC59670C(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a3;
  int v4 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  uint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v13 = a1;
    int v8 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v5 = &unk_1EBCBE000;
    int v4 = a2;
    uint64_t v3 = a3;
    int v9 = v8;
    a1 = v13;
    if (v9)
    {
      unint64_t v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v10 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v10;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v5 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a3;
      a1 = v13;
      int v4 = a2;
    }
  }
  uint64_t v6 = *a1;
  uint64_t v17 = v5[176];
  *(void *)&v14[0] = v6;
  return sub_1CC594050((char *)v14, 0, (void *)v14 + 1, (char *)v15, v4, v3);
}

uint64_t sub_1CC596820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v10 = 0;
  uint64_t result = sub_1CC5968A8((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC5969C4(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC5968A8(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CC596964(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = v7 & (v4 - 1);
    unint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      BOOL v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          BOOL v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        unint64_t v10 = (void *)(v6 + 8 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v12) {
        unint64_t v10 = v12;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
  }
  *a3 = v10;
  return result;
}

unint64_t sub_1CC596964(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  uint64_t v4 = v1[1];
  uint64_t v2 = a1;
  if (*(unsigned char *)a1 != 15) {
    uint64_t v2 = *v1;
  }
  uint64_t v5 = v2;
  int v6 = *(_DWORD *)(a1 + 24);
  return sub_1CC59670C(&v4, &v5, &v6);
}

void *sub_1CC5969C4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC596A78(a1, v7);
  unsigned int v9 = 0;
  sub_1CC5968A8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC596A78(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC596B44(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC596B44(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = sub_1CC5968A8((uint64_t *)v5, a2, &v9);
      *unsigned int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1CC596BEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  uint64_t v8 = sub_1CBF65470();
  return sub_1CD5B5B20(v5, 0, v5, (char *)v6, a1, a2);
}

void *sub_1CC596C90(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B5DCC(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC596D5C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = 0;
    int v8 = v4 - 1;
    unsigned int v9 = v8 & sub_1CC596E48(a2 + 1, a2 + 2, a2 + 3, a2 + 4);
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = (uint64_t *)(v6 + 8 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1CD5B6478((uint64_t)a2, v12))
        {
          uint64_t result = 1;
          goto LABEL_7;
        }
        uint64_t v12 = *v11;
      }
      if (v12 == -4096) {
        break;
      }
      if (v7) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v12 == -8192;
      }
      if (v14) {
        int v7 = (uint64_t *)(v6 + 8 * v9);
      }
      unsigned int v15 = v9 + i;
      unsigned int v9 = v15 & v8;
    }
    uint64_t result = 0;
    if (v7) {
      uint64_t v11 = v7;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

unint64_t sub_1CC596E48(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v4 = a4;
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  int v7 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  int v8 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v10 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v8 = &unk_1EBCBE000;
    unint64_t v5 = a3;
    int v7 = a1;
    int v4 = a4;
    uint64_t v6 = a2;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v11;
      __cxa_guard_release(&qword_1EBCBE588);
      int v8 = (void *)&unk_1EBCBE000;
      unint64_t v5 = a3;
      int v7 = a1;
      int v4 = a4;
      uint64_t v6 = a2;
    }
  }
  uint64_t v19 = v8[176];
  return sub_1CD5B34E4((char *)v16, 0, v16, (char *)v17, v7, v6, v5, v4);
}

uint64_t sub_1CC596F54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = 0;
  uint64_t result = sub_1CC596FDC((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC597120(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC596FDC(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CC5970A0(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = v7 & (v4 - 1);
    int v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v12 = v10;
        }
        unsigned int v16 = v9 + v13++;
        unsigned int v9 = v16 & v8;
        int v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v12) {
        int v10 = v12;
      }
    }
  }
  else
  {
    int v10 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

unint64_t sub_1CC5970A0(uint64_t a1)
{
  uint64_t v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  long long v2 = *(_OWORD *)(v1 + 24);
  long long v4 = *(_OWORD *)(v1 + 8);
  long long v5 = v2;
  uint64_t v6 = *(void *)(v1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 28);
  return sub_1CC596E48((uint64_t *)&v4, (uint64_t *)&v4 + 1, (uint64_t *)&v5, (uint64_t *)&v5 + 1);
}

void *sub_1CC597120(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC5971D4(a1, v7);
  unsigned int v9 = 0;
  sub_1CC596FDC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC5971D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  long long v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B651C(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC5972A0(uint64_t *a1, uint64_t *a2, char *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, sizeof(v10));
  uint64_t v6 = sub_1CBF65470();
  uint64_t v7 = *a1;
  uint64_t v11 = v6;
  uint64_t v9 = v7;
  return sub_1CC592F6C((char *)&v9, 0, v10, (char *)&v10[3] + 8, a2, a3);
}

void *sub_1CC597358(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  long long v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B68FC(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC597424(_DWORD *a1, uint64_t *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t v14 = sub_1CBF65470();
  LODWORD(v11[0]) = *a1;
  return sub_1CD5B6B3C(v11, 0, (_OWORD *)((char *)v11 + 4), (char *)v12, a2, a3, a4, a5);
}

void *sub_1CC5974F4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  long long v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B6E94(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5975C0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = 0;
    int v8 = v4 - 1;
    unsigned int v9 = v8 & sub_1CC5976B4((uint64_t *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 24), (uint64_t *)(a2 + 32), (int *)(a2 + 40), (int *)(a2 + 44), (uint64_t *)(a2 + 56));
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = (uint64_t *)(v6 + 8 * v9);
      uint64_t v12 = *v11;
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (sub_1CC5979F8(a2, v12))
        {
          uint64_t result = 1;
          goto LABEL_15;
        }
        uint64_t v12 = *v11;
      }
      if (v12 == -4096) {
        break;
      }
      if (v7) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v12 == -8192;
      }
      if (v13) {
        int v7 = (uint64_t *)(v6 + 8 * v9);
      }
      unsigned int v14 = v9 + i;
      unsigned int v9 = v14 & v8;
    }
    uint64_t result = 0;
    if (v7) {
      uint64_t v11 = v7;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_15:
  *a3 = v11;
  return result;
}

unint64_t sub_1CC5976B4(uint64_t *a1, uint64_t *a2, uint64_t *a3, int *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  uint64_t v12 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v17 = a5;
    uint64_t v21 = a6;
    uint64_t v23 = a7;
    uint64_t v20 = a8;
    int v14 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v12 = &unk_1EBCBE000;
    a8 = v20;
    a6 = v21;
    uint64_t v10 = a2;
    a7 = v23;
    a5 = v17;
    uint64_t v11 = a1;
    unsigned int v9 = a3;
    int v8 = a4;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v15;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v12 = (void *)&unk_1EBCBE000;
      a8 = v20;
      a6 = v21;
      uint64_t v10 = a2;
      a7 = v23;
      a5 = v17;
      uint64_t v11 = a1;
      unsigned int v9 = a3;
      int v8 = a4;
    }
  }
  uint64_t v27 = v12[176];
  return sub_1CC597804((char *)v24, 0, v24, (char *)v25, v11, v10, v9, v8, a5, a6, a7, a8);
}

unint64_t sub_1CC597804(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, int *a10, int *a11, uint64_t *a12)
{
  uint64_t v20 = a2;
  uint64_t v17 = sub_1CC2E96A4(a1, &v20, a3, (unint64_t)a4, *a5);
  uint64_t v21 = v20;
  uint64_t v18 = sub_1CC2E96A4(a1, &v21, v17, (unint64_t)a4, *a6);
  return sub_1CC5978BC(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t sub_1CC5978BC(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8, int *a9, uint64_t *a10)
{
  uint64_t v18 = a2;
  unint64_t v15 = sub_1CC2E96A4(a1, &v18, a3, (unint64_t)a4, *a5);
  uint64_t v19 = v18;
  unsigned int v16 = sub_1CC0AC9D0(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1CC597964(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1CC597964(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  uint64_t v16 = a2;
  BOOL v13 = sub_1CC2E96A4(a1, &v16, a3, (unint64_t)a4, *a5);
  uint64_t v17 = v16;
  int v14 = sub_1CC0AC9D0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1CC2E95DC(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1CC5979F8(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  return *(void *)a1 == *v2
      && *(void *)(a1 + 8) == v2[1]
      && *(void *)(a1 + 16) == v2[2]
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(void *)(a1 + 32) == v2[3]
      && *(_DWORD *)(a1 + 40) == *(unsigned __int16 *)(a2 + 32)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 28)
      && *(void *)(a1 + 56) == v2[4];
}

uint64_t sub_1CC597A9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC597B24((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC597C60(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC597B24(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CC597BE0(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = v7 & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
  *a3 = v10;
  return result;
}

unint64_t sub_1CC597BE0(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  long long v5 = *v1;
  uint64_t v2 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 2);
  int v3 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v8 = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 36);
  int v9 = *(unsigned __int16 *)(a1 + 32);
  v10[0] = v2;
  v10[1] = v3;
  uint64_t v11 = *((void *)v1 + 4);
  return sub_1CC5976B4((uint64_t *)&v5, (uint64_t *)&v5 + 1, &v6, &v7, &v8, &v9, v10, &v11);
}

void *sub_1CC597C60(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC597D14(a1, v7);
  int v9 = 0;
  sub_1CC597B24((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC597D14(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC597DE0(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC597DE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v9 = 0;
      uint64_t result = sub_1CC597B24((uint64_t *)v5, a2, &v9);
      *int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void *sub_1CC597E88(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B81A4(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC597F54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC598000(uint64_t a1, unsigned int a2)
{
  _OWORD v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC598178(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    unint64_t v10 = *(void *)(a1 + i);
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CC598178(a1, v14, v8);
}

uint64_t sub_1CC598178(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    size_t v9 = 32;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    size_t v9 = 8 * v7;
  }
  uint64_t result = (uint64_t)memset(v8, 255, v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC597F54((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1CC598228(uint64_t *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  uint64_t v8 = sub_1CBF65470();
  return sub_1CC36B408((char *)v5, 0, v5, (char *)v6, a1, a2);
}

uint64_t sub_1CC5982CC(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 0;
    int v8 = v4 - 1;
    unsigned int v9 = v8 & sub_1CC5983C4((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24), (int *)(a2 + 32), (uint64_t *)(a2 + 40), (uint64_t *)(a2 + 48));
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = (uint64_t *)(v6 + 8 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1CD5B8E50(a2, v12))
        {
          uint64_t result = 1;
          goto LABEL_7;
        }
        uint64_t v12 = *v11;
      }
      if (v12 == -4096) {
        break;
      }
      if (v7) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v12 == -8192;
      }
      if (v14) {
        uint64_t v7 = (uint64_t *)(v6 + 8 * v9);
      }
      unsigned int v15 = v9 + i;
      unsigned int v9 = v15 & v8;
    }
    uint64_t result = 0;
    if (v7) {
      uint64_t v11 = v7;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

unint64_t sub_1CC5983C4(_DWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5, uint64_t *a6, uint64_t *a7)
{
  int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v10 = a2;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  uint64_t v11 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v21 = a6;
    uint64_t v22 = a1;
    uint64_t v19 = a5;
    uint64_t v18 = a7;
    int v13 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v11 = &unk_1EBCBE000;
    uint64_t v10 = a2;
    a7 = v18;
    unsigned int v9 = a3;
    a6 = v21;
    int v8 = a4;
    a5 = v19;
    int v14 = v13;
    a1 = v22;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v15;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v11 = (void *)&unk_1EBCBE000;
      a6 = v21;
      a1 = v22;
      uint64_t v10 = a2;
      a7 = v18;
      a5 = v19;
      unsigned int v9 = a3;
      int v8 = a4;
    }
  }
  uint64_t v26 = v11[176];
  LODWORD(v23[0]) = *a1;
  return sub_1CC598508((char *)v23, 0, (_OWORD *)((char *)v23 + 4), (char *)v24, v10, v9, v8, a5, a6, a7);
}

unint64_t sub_1CC598508(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v18 = a2;
  unint64_t v15 = sub_1CC2E96A4(a1, &v18, a3, (unint64_t)a4, *a5);
  uint64_t v19 = v18;
  uint64_t v16 = sub_1CC2E96A4(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1CC5953AC(a1, v19, v16, a4, a7, a8, a9, a10);
}

uint64_t sub_1CC5985B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC598638((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC59876C(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CC598638(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CC5986FC(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = v7 & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v12 = v10;
        }
        unsigned int v16 = v9 + v13++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

unint64_t sub_1CC5986FC(uint64_t a1)
{
  int v5 = *(unsigned __int16 *)(a1 + 2);
  uint64_t v1 = (long long *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  long long v6 = *v1;
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  int v8 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  return sub_1CC5983C4(&v5, (uint64_t *)&v6, (uint64_t *)&v6 + 1, &v7, &v8, &v9, &v10);
}

void *sub_1CC59876C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC598820(a1, v7);
  uint64_t v9 = 0;
  sub_1CC598638((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC598820(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B8ED4(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5988EC()
{
  int v5 = 1;
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable adding flow sensitive discriminators";
  v1.n128_u64[1] = 43;
  sub_1CD49565C((llvm::cl::Option *)&llvm::EnableFSDiscriminator, "enable-fs-discriminator", &v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableFSDiscriminator, &dword_1CB82C000);
}

llvm::DebugLoc *llvm::DebugLoc::DebugLoc(llvm::DebugLoc *this, const llvm::DILocation *a2)
{
  *(void *)this = a2;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  }
  return this;
}

{
  *(void *)this = a2;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  }
  return this;
}

llvm::DebugLoc *llvm::DebugLoc::DebugLoc(llvm::DebugLoc *this, const llvm::MDNode *a2)
{
  *(void *)this = a2;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  }
  return this;
}

{
  *(void *)this = a2;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  }
  return this;
}

uint64_t llvm::DebugLoc::get(llvm::DebugLoc *this)
{
  return *(void *)this;
}

uint64_t llvm::DebugLoc::getLine(llvm::DebugLoc *this)
{
  return *(unsigned int *)(*(void *)this + 4);
}

uint64_t llvm::DebugLoc::getCol(llvm::DebugLoc *this)
{
  return *(unsigned __int16 *)(*(void *)this + 2);
}

uint64_t llvm::DebugLoc::getScope(llvm::DebugLoc *this)
{
  return *(void *)(*(void *)this - 8 * *(unsigned int *)(*(void *)this + 8));
}

uint64_t llvm::DebugLoc::getInlinedAt(llvm::DebugLoc *this)
{
  if (*(_DWORD *)(*(void *)this + 8) == 2) {
    return *(void *)(*(void *)this - 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::DebugLoc::getInlinedAtScope(llvm::DebugLoc *this)
{
  uint64_t v1 = *(void *)this;
  do
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(unsigned int *)(v1 + 8);
    if (v3 != 2) {
      break;
    }
    uint64_t v1 = *(void *)(v1 - 8);
  }
  while (v1);
  return *(void *)(v2 - 8 * v3);
}

uint64_t llvm::DebugLoc::setImplicitCode(uint64_t this, int a2)
{
  if (*(void *)this)
  {
    if (a2) {
      char v2 = 0x80;
    }
    else {
      char v2 = 0;
    }
    *(unsigned char *)(*(void *)this + 1) = v2 & 0x80 | *(unsigned char *)(*(void *)this + 1) & 0x7F;
  }
  return this;
}

unsigned __int8 *llvm::DebugLoc::get@<X0>(unsigned __int8 *this@<X0>, const llvm::MDNode *a2@<X3>, const llvm::MDNode *a3@<X4>, unsigned int a4@<W1>, uint64_t a5@<X2>, unsigned __int8 **a6@<X8>)
{
  int v6 = (int)a3;
  if (a5)
  {
    unsigned int v11 = this;
    uint64_t v12 = *(void *)(a5 + 16);
    int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0) {
      int v13 = (void *)*v13;
    }
    this = (unsigned __int8 *)llvm::DILocation::getImpl(v13, v11, a4, a5, (uint64_t)a2, v6, 0, 1);
    *a6 = this;
    if (this)
    {
      return (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a6, this, 2);
    }
  }
  else
  {
    *a6 = 0;
  }
  return this;
}

void llvm::DebugLoc::appendInlinedAt(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 **a5@<X8>)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  unsigned int v16 = v18;
  uint64_t v17 = 0x300000000;
  if (*(_DWORD *)(*(void *)a1 + 8) == 2 && (uint64_t v7 = *(void *)(*(void *)a1 - 8)) != 0)
  {
    while (1)
    {
      uint64_t v15 = v7;
      Impl = (unsigned __int8 *)sub_1CC5958A8(a4, &v15)[1];
      unsigned int v11 = v17;
      if (Impl) {
        break;
      }
      if (v17 >= HIDWORD(v17)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v16 + v17) = v7;
      unsigned int v11 = v17 + 1;
      LODWORD(v17) = v17 + 1;
      if (*(_DWORD *)(v7 + 8) == 2)
      {
        uint64_t v7 = *(void *)(v7 - 8);
        if (v7) {
          continue;
        }
      }
      Impl = a2;
      break;
    }
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      int v13 = (char *)v16 - 8;
      do
      {
        uint64_t v14 = *(void *)&v13[v12];
        Impl = (unsigned __int8 *)llvm::DILocation::getImpl(a3, *(_DWORD *)(v14 + 4), *(unsigned __int16 *)(v14 + 2), *(void *)(v14 - 8 * *(unsigned int *)(v14 + 8)), (uint64_t)Impl, 0, 1, 1);
        uint64_t v15 = v14;
        sub_1CC5958A8(a4, &v15)[1] = Impl;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    Impl = a2;
  }
  *a5 = Impl;
  if (Impl) {
    llvm::MetadataTracking::track((uint64_t)a5, Impl, 2);
  }
  if (v16 != v18) {
    free(v16);
  }
}

uint64_t sub_1CC598D3C(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *sub_1CC598DA8(void *a1)
{
  *a1 = &unk_1F2616438;
  char v2 = a1 + 19;
  uint64_t v3 = (void *)a1[22];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

uint64_t llvm::DiagnosticHandler::isAnalysisRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result = qword_1EA61EF88;
  if (qword_1EA61EF88) {
    return llvm::Regex::match(qword_1EA61EF88, a2, a3, 0, 0);
  }
  return result;
}

uint64_t llvm::DiagnosticHandler::isMissedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result = qword_1EA61EF78;
  if (qword_1EA61EF78) {
    return llvm::Regex::match(qword_1EA61EF78, a2, a3, 0, 0);
  }
  return result;
}

uint64_t llvm::DiagnosticHandler::isPassedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result = qword_1EA61EF68;
  if (qword_1EA61EF68) {
    return llvm::Regex::match(qword_1EA61EF68, a2, a3, 0, 0);
  }
  return result;
}

BOOL llvm::DiagnosticHandler::isAnyRemarkEnabled(llvm::DiagnosticHandler *this)
{
  return qword_1EA61EF68 | qword_1EA61EF78 || qword_1EA61EF88 != 0;
}

void sub_1CC598EE4()
{
}

BOOL sub_1CC598EF8(uint64_t a1, uint64_t a2)
{
  char v2 = *(void (**)(uint64_t, void))(a1 + 16);
  if (v2) {
    v2(a2, *(void *)(a1 + 8));
  }
  return v2 != 0;
}

uint64_t sub_1CC598F34(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v18 = 0;
  if (!__src)
  {
    long long __dst = 0uLL;
    int64_t v20 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_23;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = __len;
    int64_t v20 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v20) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_10:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
  unint64_t v18 = v20;
  *(_OWORD *)__p = __dst;
  if (v20 >= 0) {
    int v13 = (void *)(HIBYTE(v18) & 0x7F);
  }
  else {
    int v13 = __p[1];
  }
  if (v13)
  {
    unsigned int v16 = operator new(0x28uLL);
    v16[1] = 0;
    v16[2] = 0;
    *unsigned int v16 = &unk_1F26164A0;
    llvm::Regex::Regex();
  }
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v14 = *(void *)(a1 + 176);
  if (!v14)
  {
    sub_1CB920400();
LABEL_23:
    abort();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v14 + 48))(v14, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

uint64_t sub_1CC5991C0()
{
  return 2;
}

void sub_1CC5991C8(void *a1)
{
  *a1 = &unk_1F2616438;
  char v2 = a1 + 19;
  uint64_t v3 = (void *)a1[22];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC599290(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 144, a1);
}

llvm::raw_ostream *sub_1CC59929C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

llvm::raw_ostream *sub_1CC5992AC(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3) {
    return llvm::cl::basic_parser_impl::printOptionNoValue((llvm::raw_ostream *)((char *)result + 144), result, a2);
  }
  return result;
}

void sub_1CC5992C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 128);
  char v2 = (std::__shared_weak_count *)v1[1];
  *uint64_t v1 = 0;
  v1[1] = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t sub_1CC599350()
{
  return 0;
}

void sub_1CC59935C()
{
}

void *sub_1CC599370()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26164F8;
  return result;
}

void sub_1CC5993A8(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26164F8;
}

uint64_t sub_1CC5993D4(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, char a5, void *a6, _WORD *a7, _WORD *a8)
{
  uint64_t v10 = result;
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a3;
  *(_OWORD *)(result + 32) = *a4;
  __int16 v11 = *(_WORD *)(result + 10) & 0xFF9F | (32 * (a5 & 3));
  *(_WORD *)(result + 10) = v11;
  if (*(void *)(result + 128))
  {
    uint64_t v14 = "cl::location(x) specified more than once!";
    __int16 v15 = 259;
    size_t v12 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    uint64_t result = llvm::cl::Option::error((void *)v10, (llvm::Twine *)&v14, 0, 0, v12);
    __int16 v11 = *(_WORD *)(v10 + 10);
  }
  else
  {
    *(void *)(result + 128) = *a6;
  }
  __int16 v13 = v11 & 0xFFE7 | (8 * (*a7 & 3));
  *(_WORD *)(v10 + 10) = v13;
  *(_WORD *)(v10 + 10) = v13 & 0xFFF8 | *a8 & 7;
  return result;
}

uint64_t sub_1CC599484()
{
  __cxa_atexit((void (*)(void *))sub_1CC598D3C, &qword_1EA61EF68, &dword_1CB82C000);
  __cxa_atexit((void (*)(void *))sub_1CC598D3C, &qword_1EA61EF78, &dword_1CB82C000);
  __cxa_atexit((void (*)(void *))sub_1CC598D3C, &qword_1EA61EF88, &dword_1CB82C000);
  *(void *)&long long v5 = "Enable optimization remarks from passes whose name match the given regular expression";
  *((void *)&v5 + 1) = 85;
  int v4 = &qword_1EA61EF68;
  int v2 = 1;
  int v3 = 2;
  sub_1CB883A14((uint64_t)qword_1EBCD8518, 0, 0);
  qword_1EBCD8598 = 0;
  unk_1EBCD85A0 = &unk_1F26164D8;
  qword_1EBCD8518[0] = (uint64_t)&unk_1F2616438;
  qword_1EBCD85A8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCD85B0 = (uint64_t)&unk_1F26164F8;
  qword_1EBCD85C8 = (uint64_t)&qword_1EBCD85B0;
  llvm::cl::Option::setArgStr((uint64_t)qword_1EBCD8518, "pass-remarks", 0xCuLL);
  sub_1CC5993D4((uint64_t)qword_1EBCD8518, (uint64_t)"pattern", 7, &v5, 1, &v4, &v3, &v2);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCD8518);
  __cxa_atexit((void (*)(void *))sub_1CC598DA8, qword_1EBCD8518, &dword_1CB82C000);
  *(void *)&long long v5 = "Enable missed optimization remarks from passes whose name match the given regular expression";
  *((void *)&v5 + 1) = 92;
  int v4 = &qword_1EA61EF78;
  int v2 = 1;
  int v3 = 2;
  sub_1CB883A14((uint64_t)qword_1EBCD85D0, 0, 0);
  qword_1EBCD8650 = 0;
  unk_1EBCD8658 = &unk_1F26164D8;
  qword_1EBCD85D0[0] = (uint64_t)&unk_1F2616438;
  qword_1EBCD8660 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCD8668 = (uint64_t)&unk_1F26164F8;
  qword_1EBCD8680 = (uint64_t)&qword_1EBCD8668;
  llvm::cl::Option::setArgStr((uint64_t)qword_1EBCD85D0, "pass-remarks-missed", 0x13uLL);
  sub_1CC5993D4((uint64_t)qword_1EBCD85D0, (uint64_t)"pattern", 7, &v5, 1, &v4, &v3, &v2);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCD85D0);
  __cxa_atexit((void (*)(void *))sub_1CC598DA8, qword_1EBCD85D0, &dword_1CB82C000);
  *(void *)&long long v5 = "Enable optimization analysis remarks from passes whose name match the given regular expression";
  *((void *)&v5 + 1) = 94;
  int v4 = &qword_1EA61EF88;
  int v2 = 1;
  int v3 = 2;
  uint64_t v0 = sub_1CB883A14((uint64_t)qword_1EBCD8688, 0, 0);
  qword_1EBCD8708 = 0;
  unk_1EBCD8710 = &unk_1F26164D8;
  qword_1EBCD8688[0] = (uint64_t)&unk_1F2616438;
  qword_1EBCD8718 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCD8720 = (uint64_t)&unk_1F26164F8;
  qword_1EBCD8738 = (uint64_t)&qword_1EBCD8720;
  llvm::cl::Option::setArgStr(v0, "pass-remarks-analysis", 0x15uLL);
  sub_1CC5993D4((uint64_t)qword_1EBCD8688, (uint64_t)"pattern", 7, &v5, 1, &v4, &v3, &v2);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCD8688);

  return __cxa_atexit((void (*)(void *))sub_1CC598DA8, qword_1EBCD8688, &dword_1CB82C000);
}

uint64_t llvm::getNextAvailablePluginDiagnosticKind(llvm *this)
{
  return atomic_fetch_add(dword_1EBCBE7B8, 1u) + 1;
}

void *llvm::DiagnosticLocation::DiagnosticLocation(void *this, const llvm::DebugLoc *a2)
{
  *this = 0;
  this[1] = 0;
  if (*(void *)a2)
  {
    int v2 = this;
    uint64_t v3 = llvm::DebugLoc::get(a2);
    uint64_t v4 = *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8));
    if (*(unsigned char *)v4 != 15) {
      uint64_t v4 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    }
    *int v2 = v4;
    *((_DWORD *)v2 + 2) = *(_DWORD *)(llvm::DebugLoc::get(a2) + 4);
    uint64_t v5 = llvm::DebugLoc::get(a2);
    this = v2;
    *((_DWORD *)v2 + 3) = *(unsigned __int16 *)(v5 + 2);
  }
  return this;
}

void *llvm::DiagnosticLocation::DiagnosticLocation(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  if (a2)
  {
    uint64_t v2 = a2;
    if (*(unsigned char *)a2 != 15) {
      uint64_t v2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    }
    *uint64_t result = v2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 28);
  }
  return result;
}

{
  uint64_t v2;

  *uint64_t result = 0;
  result[1] = 0;
  if (a2)
  {
    uint64_t v2 = a2;
    if (*(unsigned char *)a2 != 15) {
      uint64_t v2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    }
    *uint64_t result = v2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 28);
  }
  return result;
}

void *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(void *__dst, void *__src, size_t __len, void *a4, size_t a5)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_20;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    uint64_t v10 = operator new(v11 + 1);
    __dst[1] = __len;
    __dst[2] = v12 | 0x8000000000000000;
    *long long __dst = v10;
    goto LABEL_8;
  }
  *((unsigned char *)__dst + 23) = __len;
  uint64_t v10 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  __int16 v13 = __dst + 3;
  if (!a4)
  {
    *__int16 v13 = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    goto LABEL_19;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_20:
  }
    abort();
  if (a5 >= 0x17)
  {
    uint64_t v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v14 = a5 | 7;
    }
    uint64_t v15 = v14 + 1;
    __int16 v13 = operator new(v14 + 1);
    __dst[4] = a5;
    __dst[5] = v15 | 0x8000000000000000;
    __dst[3] = v13;
  }
  else
  {
    *((unsigned char *)__dst + 47) = a5;
    if (!a5) {
      goto LABEL_18;
    }
  }
  memmove(v13, a4, a5);
LABEL_18:
  *((unsigned char *)v13 + a5) = 0;
LABEL_19:
  __dst[6] = 0;
  __dst[7] = 0;
  return __dst;
}

void *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(void *a1, const void *a2, size_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unsigned int v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = a3;
  unsigned int v8 = a1;
  if (a3) {
LABEL_8:
  }
    memmove(v8, a2, a3);
  *((unsigned char *)v8 + a3) = 0;
  unint64_t v11 = a4;
  if (a4 < 0)
  {
    uint64_t v14 = 0;
    unint64_t v15 = -(uint64_t)a4;
    do
    {
      *(&v19 + v14--) = (v15 % 0xA) | 0x30;
      BOOL v13 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v13);
    v18[v14 + 20] = 45;
    size_t v12 = &v18[v14 + 20];
    unsigned int v16 = (char *)(1 - v14);
  }
  else
  {
    if (a4)
    {
      size_t v12 = (char *)&v20;
      do
      {
        *--size_t v12 = (v11 % 0xA) | 0x30;
        BOOL v13 = v11 > 9;
        v11 /= 0xAuLL;
      }
      while (v13);
    }
    else
    {
      size_t v12 = &v19;
      char v19 = 48;
    }
    unsigned int v16 = (char *)((char *)&v20 - v12);
  }
  sub_1CC028D80(a1 + 3, v12, (char *)&v20, (unint64_t)v16);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned char v18[20];
  char v19;
  uint64_t v20;

  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unsigned int v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = a3;
  unsigned int v8 = a1;
  if (a3) {
LABEL_8:
  }
    memmove(v8, a2, a3);
  *((unsigned char *)v8 + a3) = 0;
  unint64_t v11 = a4;
  if (a4 < 0)
  {
    uint64_t v14 = 0;
    unint64_t v15 = -(uint64_t)a4;
    do
    {
      *(&v19 + v14--) = (v15 % 0xA) | 0x30;
      BOOL v13 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v13);
    v18[v14 + 20] = 45;
    size_t v12 = &v18[v14 + 20];
    unsigned int v16 = (char *)(1 - v14);
  }
  else
  {
    if (a4)
    {
      size_t v12 = (char *)&v20;
      do
      {
        *--size_t v12 = (v11 % 0xA) | 0x30;
        BOOL v13 = v11 > 9;
        v11 /= 0xAuLL;
      }
      while (v13);
    }
    else
    {
      size_t v12 = &v19;
      char v19 = 48;
    }
    unsigned int v16 = (char *)((char *)&v20 - v12);
  }
  sub_1CC028D80(a1 + 3, v12, (char *)&v20, (unint64_t)v16);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void *sub_1CC599C40@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = 0;
    unint64_t v7 = -(uint64_t)a1;
    do
    {
      *(&v11 + v6--) = (v7 % 0xA) | 0x30;
      BOOL v5 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v5);
    v10[v6 + 20] = 45;
    uint64_t v4 = &v10[v6 + 20];
    unsigned int v8 = (char *)(1 - v6);
  }
  else
  {
    if (a1)
    {
      uint64_t v4 = (char *)&v12;
      do
      {
        *--uint64_t v4 = (a1 % 0xA) | 0x30;
        BOOL v5 = a1 > 9;
        a1 /= 0xAuLL;
      }
      while (v5);
    }
    else
    {
      uint64_t v4 = &v11;
      char v11 = 48;
    }
    unsigned int v8 = (char *)((char *)&v12 - v4);
  }
  return sub_1CC028D80(a2, v4, (char *)&v12, (unint64_t)v8);
}

void *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(void *a1, const void *a2, size_t a3, float a4)
{
  float v11 = a4;
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v8 = a3 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v7 = operator new(v8 + 1);
    a1[1] = a3;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a3;
    unint64_t v7 = a1;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v7, a2, a3);
LABEL_9:
  *((unsigned char *)v7 + a3) = 0;
  sub_1CD5BAB04(&v11, (uint64_t)(a1 + 3));
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(void *a1, const void *a2, size_t a3, unint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = a3;
  uint64_t v8 = a1;
  if (a3) {
LABEL_8:
  }
    memmove(v8, a2, a3);
  *((unsigned char *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      BOOL v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    float v11 = &v17[v13 + 20];
    unint64_t v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      float v11 = (char *)&v19;
      do
      {
        *--float v11 = (a4 % 0xA) | 0x30;
        BOOL v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      float v11 = &v18;
      char v18 = 48;
    }
    unint64_t v15 = (char *)((char *)&v19 - v11);
  }
  sub_1CC028D80(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned char v17[20];
  char v18;
  uint64_t v19;

  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = a3;
  uint64_t v8 = a1;
  if (a3) {
LABEL_8:
  }
    memmove(v8, a2, a3);
  *((unsigned char *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      BOOL v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    float v11 = &v17[v13 + 20];
    unint64_t v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      float v11 = (char *)&v19;
      do
      {
        *--float v11 = (a4 % 0xA) | 0x30;
        BOOL v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      float v11 = &v18;
      char v18 = 48;
    }
    unint64_t v15 = (char *)((char *)&v19 - v11);
  }
  sub_1CC028D80(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned char v17[20];
  char v18;
  uint64_t v19;

  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = a3;
  uint64_t v8 = a1;
  if (a3) {
LABEL_8:
  }
    memmove(v8, a2, a3);
  *((unsigned char *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      BOOL v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    float v11 = &v17[v13 + 20];
    unint64_t v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      float v11 = (char *)&v19;
      do
      {
        *--float v11 = (a4 % 0xA) | 0x30;
        BOOL v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      float v11 = &v18;
      char v18 = 48;
    }
    unint64_t v15 = (char *)((char *)&v19 - v11);
  }
  sub_1CC028D80(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

double llvm::OptimizationRemark::OptimizationRemark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 9;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F2616570;
  return result;
}

{
  uint64_t v6;
  double result;

  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 9;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F2616570;
  return result;
}

uint64_t llvm::OptimizationRemark::OptimizationRemark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(*(void *)(a5 + 40) + 56);
  llvm::DiagnosticLocation::DiagnosticLocation(&v13, (const llvm::DebugLoc *)(a5 + 48));
  uint64_t v11 = *(void *)(a5 + 40);
  *(_DWORD *)(a1 + 8) = 9;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = v11;
  *(void *)a1 = &unk_1F2616570;
  return a1;
}

double llvm::OptimizationRemarkMissed::OptimizationRemarkMissed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 10;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F26165A8;
  return result;
}

{
  uint64_t v6;
  double result;

  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 10;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F26165A8;
  return result;
}

uint64_t llvm::OptimizationRemarkMissed::OptimizationRemarkMissed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(*(void *)(a5 + 40) + 56);
  llvm::DiagnosticLocation::DiagnosticLocation(&v13, (const llvm::DebugLoc *)(a5 + 48));
  uint64_t v11 = *(void *)(a5 + 40);
  *(_DWORD *)(a1 + 8) = 10;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = v11;
  *(void *)a1 = &unk_1F26165A8;
  return a1;
}

double llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 11;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F26165E0;
  return result;
}

{
  uint64_t v6;
  double result;

  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 11;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F26165E0;
  return result;
}

uint64_t llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(*(void *)(a5 + 40) + 56);
  llvm::DiagnosticLocation::DiagnosticLocation(&v13, (const llvm::DebugLoc *)(a5 + 48));
  uint64_t v11 = *(void *)(a5 + 40);
  *(_DWORD *)(a1 + 8) = 11;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = v11;
  *(void *)a1 = &unk_1F26165E0;
  return a1;
}

double llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a7 + 56);
  *(_DWORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *a6;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a7;
  *(void *)a1 = &unk_1F26165E0;
  return result;
}

{
  uint64_t v7;
  double result;

  uint64_t v7 = *(void *)(a7 + 56);
  *(_DWORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 12) = 2;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *a6;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a7;
  *(void *)a1 = &unk_1F26165E0;
  return result;
}

uint64_t llvm::DiagnosticInfoMIRParser::print(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 16));
}

double llvm::DiagnosticInfoOptimizationFailure::DiagnosticInfoOptimizationFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 14;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F2616618;
  return result;
}

{
  uint64_t v6;
  double result;

  uint64_t v6 = *(void *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 14;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)a1 = &unk_1F26167D0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 88) = 0x400000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(void *)(a1 + 360) = a6;
  *(void *)a1 = &unk_1F2616618;
  return result;
}

void llvm::DiagnosticInfoUnsupported::print(uint64_t a1, uint64_t a2)
{
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v37 = 0;
  int v28 = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  int v35 = v36;
  int v34 = 0;
  uint64_t v27 = &unk_1F2646F30;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  llvm::DiagnosticInfoWithLocationBase::getLocationStr((llvm::DiagnosticInfoWithLocationBase *)a1, __p);
  if (v26 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v26 >= 0) {
    size_t v5 = v26 & 0x7F;
  }
  else {
    size_t v5 = (size_t)__p[1];
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v27, (const char *)v4, v5);
  uint64_t v6 = v31;
  if (v30 - (unint64_t)v31 > 0xD)
  {
    *(void *)uint64_t v31 = *(void *)": in function ";
    *(void *)(v6 + 6) = *(void *)"unction ";
    v31 += 14;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, ": in function ", 0xEuLL);
  }
  uint64_t v7 = *(uint64_t ****)(a1 + 16);
  if ((*((unsigned char *)v7 + 23) & 0x10) == 0) {
    goto LABEL_19;
  }
  uint64_t v8 = ***v7;
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(unsigned int *)(v8 + 168);
  if (v10)
  {
    LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    BOOL v12 = (uint64_t ****)(v9 + 16 * v11);
    long long v13 = *v12;
    if (*v12 == v7) {
      goto LABEL_17;
    }
    int v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      long long v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v7)
      {
        BOOL v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_17;
      }
    }
  }
  BOOL v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_17:
  unsigned int v16 = v12[1];
  size_t v19 = (size_t)*v16;
  uint64_t v17 = (const char *)(v16 + 2);
  size_t v18 = v19;
  uint64_t v20 = v31;
  if (v19 > v30 - (unint64_t)v31)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, v17, v18);
LABEL_19:
    uint64_t v20 = v31;
    goto LABEL_22;
  }
  if (v18)
  {
    memcpy(v31, v17, v18);
    uint64_t v20 = &v31[v18];
    v31 += v18;
  }
LABEL_22:
  if ((unint64_t)v20 >= v30)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, 32);
  }
  else
  {
    uint64_t v31 = v20 + 1;
    char *v20 = 32;
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::Type::print(*(llvm::Type **)(*(void *)(a1 + 16) + 24), (llvm::raw_ostream *)&v27, 0, 0);
  if (v30 - (unint64_t)v31 > 1)
  {
    *(_WORD *)uint64_t v31 = 8250;
    v31 += 2;
  }
  else
  {
    uint64_t v21 = llvm::raw_ostream::write((llvm::raw_ostream *)&v27, ": ", 2uLL);
  }
  uint64_t v22 = llvm::Twine::printOneChild(v21, (llvm::raw_ostream *)&v27, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 72));
  llvm::Twine::printOneChild(v22, (llvm::raw_ostream *)&v27, *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 73));
  uint64_t v23 = v31;
  if ((unint64_t)v31 >= v30)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, 10);
  }
  else
  {
    ++v31;
    *uint64_t v23 = 10;
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  int64_t v24 = v31 - v29;
  if (v31 != v29)
  {
    uint64_t v31 = v29;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v27, v29);
  }
  (*(void (**)(uint64_t, void **, int64_t))(*(void *)a2 + 56))(a2, v36, v24);
  uint64_t v27 = &unk_1F2646B98;
  if (v34 == 1 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8077774924);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
}

uint64_t llvm::DiagnosticInfoOptimizationBase::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1CC59ADEC((uint64_t *)(a1 + 80), (uint64_t)v4);
}

uint64_t sub_1CC59ADEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3 >= *((_DWORD *)a1 + 3))
  {
    sub_1CD5BC154();
  }
  uint64_t v4 = *a1;
  size_t v5 = (char *)(*a1 + (v3 << 6));
  uint64_t v7 = *(const void **)a2;
  size_t v6 = *(void *)(a2 + 8);
  v5[23] = 6;
  strcpy(v5, "String");
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v8 = v5 + 24;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    v8[1] = v6;
    v8[2] = v10 | 0x8000000000000000;
    void *v8 = v11;
    uint64_t v8 = v11;
  }
  else
  {
    v5[47] = v6;
    if (!v6) {
      goto LABEL_10;
    }
  }
  memmove(v8, v7, v6);
LABEL_10:
  *((unsigned char *)v8 + v6) = 0;
  uint64_t v12 = v4 + (v3 << 6);
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  uint64_t v13 = (*((_DWORD *)a1 + 2) + 1);
  *((_DWORD *)a1 + 2) = v13;
  return *a1 + (v13 << 6) - 64;
}

double llvm::DiagnosticInfoOptimizationBase::insert(uint64_t a1, long long *a2)
{
  *(void *)&double result = sub_1CC59AF1C((unint64_t *)(a1 + 80), a2).n128_u64[0];
  return result;
}

__n128 sub_1CC59AF1C(unint64_t *a1, long long *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  unint64_t v3 = *a1;
  if (v2 >= *((_DWORD *)a1 + 3))
  {
    unint64_t v8 = v3 + (v2 << 6);
    if (v3 > (unint64_t)a2 || v8 <= (unint64_t)a2) {
      sub_1CD494E94();
    }
    sub_1CD494E94();
  }
  unint64_t v4 = v3 + ((unint64_t)*((unsigned int *)a1 + 2) << 6);
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v4 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(v4 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(v4 + 24) = v6;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  __n128 result = (__n128)a2[3];
  *(__n128 *)(v4 + 48) = result;
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t llvm::DiagnosticInfoMisExpect::DiagnosticInfoMisExpect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 56);
  llvm::DiagnosticLocation::DiagnosticLocation(&v7, (const llvm::DebugLoc *)(a2 + 48));
  *(_DWORD *)(a1 + 8) = 25;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)a1 = &unk_1F2616650;
  *(void *)(a1 + 40) = a3;
  return a1;
}

{
  uint64_t v5;
  long long v7;

  uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 56);
  llvm::DiagnosticLocation::DiagnosticLocation(&v7, (const llvm::DebugLoc *)(a2 + 48));
  *(_DWORD *)(a1 + 8) = 25;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)a1 = &unk_1F2616650;
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t llvm::diagnoseDontCall(uint64_t this, const llvm::CallInst *a2)
{
  uint64_t v2 = *(void *)(this - 32);
  if (!v2) {
    return this;
  }
  if (*(unsigned char *)(v2 + 16)) {
    return this;
  }
  uint64_t v3 = this;
  if (*(void *)(v2 + 24) != *(void *)(this + 72)) {
    return this;
  }
  char v4 = 0;
  do
  {
    char v5 = v4;
    if (v4) {
      size_t v6 = 13;
    }
    else {
      size_t v6 = 14;
    }
    if (v4) {
      long long v7 = "dontcall-warn";
    }
    else {
      long long v7 = "dontcall-error";
    }
    uint64_t v8 = *(void *)(v2 + 112);
    if (!v8) {
      goto LABEL_19;
    }
    if (!*(_DWORD *)(v8 + 8)) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v8 + 40);
    if (!v9) {
      goto LABEL_19;
    }
    int v10 = *(_DWORD *)(v9 + 40);
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)(v9 + 24);
    this = sub_1CD0B03C8(v7, (uint64_t)&v7[v6]);
    int v12 = v10 - 1;
    for (int i = 1; ; ++i)
    {
      int v14 = this & v12;
      uint64_t v15 = v11 + 24 * (this & v12);
      unsigned int v16 = *(const void **)v15;
      if (*(void *)v15 == -1)
      {
        if (v7 == (char *)-1) {
          goto LABEL_24;
        }
        goto LABEL_18;
      }
      if (v16 != (const void *)-2) {
        break;
      }
      if (v7 == (char *)-2) {
        goto LABEL_24;
      }
LABEL_18:
      if (v16 == (const void *)-1) {
        goto LABEL_19;
      }
      this = (i + v14);
    }
    if (v6 != *(void *)(v15 + 8)) {
      goto LABEL_18;
    }
    this = memcmp(v7, v16, v6);
    if (this) {
      goto LABEL_18;
    }
LABEL_24:
    uint64_t FnAttribute = llvm::Function::getFnAttribute(v2, v7, v6);
    if ((*(void *)(v3 + 48) || (*(unsigned char *)(v3 + 23) & 0x20) != 0)
      && (uint64_t MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v3, "srcloc", 6uLL)) != 0)
    {
      uint64_t v18 = *(void *)(*(void *)(MetadataImpl - 8 * *(unsigned int *)(MetadataImpl + 8)) + 128);
      size_t v19 = (void *)(v18 + 24);
      if (*(_DWORD *)(v18 + 32) >= 0x41u) {
        size_t v19 = (void *)*v19;
      }
      int v20 = *(_DWORD *)v19;
    }
    else
    {
      int v20 = 0;
    }
    Name = llvm::Value::getName((llvm::Value *)v2);
    uint64_t v23 = v22;
    uint64_t ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
    int v28 = 24;
    char v29 = v5;
    uint64_t v27 = &unk_1F26169A0;
    unint64_t v30 = Name;
    uint64_t v31 = v23;
    uint64_t v32 = ValueAsString;
    uint64_t v33 = v25;
    int v34 = v20;
    uint64_t Context = llvm::Function::getContext((llvm::Function *)v2);
    this = llvm::LLVMContext::diagnose(Context, (const llvm::DiagnosticInfo *)&v27);
LABEL_19:
    char v4 = 1;
  }
  while ((v5 & 1) == 0);
  return this;
}

void sub_1CC59B28C()
{
}

void sub_1CC59B2A0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2616800;
  uint64_t v2 = *(char **)(a1 + 80);
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      char v5 = (void **)&v2[v4];
      if (v2[v4 - 17] < 0) {
        operator delete(*(v5 - 5));
      }
      if (*((char *)v5 - 41) < 0) {
        operator delete(*(v5 - 8));
      }
      v4 -= 64;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 80);
  }
  if (v2 != (char *)(a1 + 96)) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC59B368()
{
}

void sub_1CC59B380()
{
}

BOOL llvm::BasicBlockEdge::isSingleEdge(llvm::BasicBlockEdge *this)
{
  uint64_t v1 = *(void *)(*(void *)this + 40);
  if (v1 == *(void *)this + 40)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v1) {
      uint64_t v2 = v1 - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = v2;
    }
  }
  int v4 = *(unsigned __int8 *)(v3 + 16);
  BOOL v5 = 1;
  if (v4 != 30)
  {
    unsigned int v6 = 2;
    switch(*(unsigned char *)(v3 + 16))
    {
      case 0x1E:
LABEL_46:
        __break(1u);
        goto LABEL_47;
      case 0x1F:
        unsigned int v6 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_44;
      case 0x20:
      case 0x26:
LABEL_47:
        unsigned int v6 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_44;
      case 0x21:
        goto LABEL_13;
      case 0x24:
        unsigned int v6 = *(_WORD *)(v3 + 18) & 1;
        goto LABEL_44;
      case 0x25:
        unsigned int v6 = 1;
        goto LABEL_13;
      case 0x27:
        unsigned int v6 = *(_DWORD *)(v3 + 80) + 1;
LABEL_44:
        if (!v6) {
          return v5;
        }
        goto LABEL_13;
      default:
        return v5;
    }
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 1;
  }
LABEL_13:
  int v7 = 0;
  uint64_t v8 = 0;
  BOOL v5 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = v3 - 64;
  do
  {
    if (v4 == 30)
    {
      uint64_t v11 = (uint64_t *)(v3 - 32 - 32 * v8);
    }
    else
    {
      uint64_t v11 = (uint64_t *)(v3 - 32);
      switch(v4)
      {
        case ' ':
        case '&':
          int v15 = *(_DWORD *)(v3 + 20);
          if ((v15 & 0x40000000) != 0) {
            uint64_t v16 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v16 = v3 - 32 * (v15 & 0x7FFFFFF);
          }
          uint64_t v11 = (uint64_t *)(v16 + 32 * (v8 + 1));
          break;
        case '!':
          if (v8) {
            uint64_t v17 = -64;
          }
          else {
            uint64_t v17 = -96;
          }
          uint64_t v11 = (uint64_t *)(v3 + v17);
          break;
        case '""':
        case '#':
          goto LABEL_46;
        case '$':
          if ((*(_WORD *)(v3 + 18) & 1) == 0)
          {
            uint64_t v12 = 0;
            goto LABEL_17;
          }
          uint64_t v11 = (uint64_t *)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
          break;
        case '%':
          break;
        case '\'':
          if (v8) {
            uint64_t v11 = (uint64_t *)(v10 - 32 * *(unsigned int *)(v3 + 80));
          }
          else {
            uint64_t v11 = (uint64_t *)(v3 - 64 - 32 * *(unsigned int *)(v3 + 80));
          }
          break;
        default:
          int v13 = *(_DWORD *)(v3 + 20);
          if ((v13 & 0x40000000) != 0) {
            uint64_t v14 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v14 = v3 - 32 * (v13 & 0x7FFFFFF);
          }
          uint64_t v11 = (uint64_t *)(v14 + 32 * (v7 & 0xFFFFFFFE) + 32);
          break;
      }
    }
    uint64_t v12 = *v11;
LABEL_17:
    if (v12 == *((void *)this + 1)) {
      ++v9;
    }
    if (v9 >= 2) {
      break;
    }
    BOOL v5 = ++v8 >= (unint64_t)v6;
    v7 += 2;
    v10 += 32;
  }
  while (v6 != v8);
  return v5;
}

double llvm::DomTreeNodeBase<llvm::BasicBlock>::DomTreeNodeBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    int v3 = *(_DWORD *)(a3 + 16) + 1;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  double result = NAN;
  *(void *)(a1 + 72) = -1;
  return result;
}

{
  int v3;
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    int v3 = *(_DWORD *)(a3 + 16) + 1;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  double result = NAN;
  *(void *)(a1 + 72) = -1;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::begin(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::end(uint64_t a1)
{
  return *(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

{
  return *(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::back(uint64_t a1)
{
  return *(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

{
  return *(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::children(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

{
  return *(void *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getBlock(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getIDom(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::addChild@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(result + 32);
  if (v4 >= *(_DWORD *)(result + 36)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(result + 24) + 8 * v4) = *a2;
  ++*(_DWORD *)(result + 32);
  uint64_t v5 = *a2;
  *a2 = 0;
  *a3 = v5;
  return result;
}

BOOL llvm::DomTreeNodeBase<llvm::BasicBlock>::isLeaf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 0;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getNumChildren(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::clearAllChildren(uint64_t result)
{
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != *(_DWORD *)(a2 + 32) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 1;
  }
  unsigned int v4 = v50;
  uint64_t v46 = v50;
  uint64_t v47 = v50;
  uint64_t v48 = 4;
  int v49 = 0;
  if (!v2) {
    return 0;
  }
  unsigned int v5 = 0;
  unsigned int v6 = *(uint64_t ***)(a2 + 24);
  int v7 = &v6[v2];
  unsigned int v8 = 4;
  unsigned int v9 = v50;
  do
  {
    uint64_t v10 = **v6;
    if (v9 != v4) {
      goto LABEL_15;
    }
    if (!v5)
    {
LABEL_13:
      if (v8 > v5)
      {
        HIDWORD(v48) = v5 + 1;
        *(void *)&v4[8 * v5] = v10;
        goto LABEL_35;
      }
LABEL_15:
      if (3 * v8 <= 4 * (v5 - v49))
      {
        if (v8 >= 0x40) {
          v8 *= 2;
        }
        else {
          unsigned int v8 = 128;
        }
      }
      else if (v8 - v5 >= v8 >> 3)
      {
        goto LABEL_17;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v46, v8);
      unsigned int v8 = v48;
      unsigned int v9 = v47;
LABEL_17:
      unsigned int v14 = v8 - 1;
      unsigned int v15 = (v8 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v16 = &v9[8 * v15];
      uint64_t v17 = *v16;
      if (*v16 == -1)
      {
        uint64_t v18 = 0;
LABEL_29:
        if (v18) {
          uint64_t v16 = v18;
        }
        if (*v16 != v10)
        {
          if (*v16 == -2) {
            --v49;
          }
          else {
            ++HIDWORD(v48);
          }
          *uint64_t v16 = v10;
        }
      }
      else
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v10)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            uint64_t v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          uint64_t v16 = &v9[8 * (v21 & v14)];
          uint64_t v17 = *v16;
          if (*v16 == -1) {
            goto LABEL_29;
          }
        }
      }
      goto LABEL_35;
    }
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v5;
    int v13 = v4;
    while (*v13 != v10)
    {
      if (*v13 == -2) {
        uint64_t v11 = v13;
      }
      ++v13;
      v12 -= 8;
      if (!v12)
      {
        if (!v11) {
          goto LABEL_13;
        }
        *uint64_t v11 = v10;
        --v49;
        break;
      }
    }
LABEL_35:
    unsigned int v4 = v46;
    unsigned int v9 = v47;
    unsigned int v8 = v48;
    unsigned int v5 = HIDWORD(v48);
    ++v6;
  }
  while (v6 != v7);
  uint64_t v24 = *(unsigned int *)(a1 + 32);
  if (v24)
  {
    uint64_t v25 = *(uint64_t ***)(a1 + 24);
    char v26 = &v25[v24];
    int v27 = v48 - 1;
    if (v47 == v46) {
      int v28 = HIDWORD(v48);
    }
    else {
      int v28 = v48;
    }
    char v29 = &v47[8 * v28];
    unsigned int v30 = HIDWORD(v48);
    uint64_t v31 = v47;
    do
    {
      uint64_t v32 = **v25;
      if (v31 == v46)
      {
        uint64_t v33 = &v46[8 * v30];
        if (v30)
        {
          uint64_t v34 = 0;
          while (*(void *)&v46[v34] != v32)
          {
            v34 += 8;
            if (8 * v30 == v34) {
              goto LABEL_69;
            }
          }
          uint64_t v33 = &v46[v34];
        }
LABEL_69:
        uint64_t v31 = v46;
      }
      else
      {
        unsigned int v35 = ((v32 >> 4) ^ (v32 >> 9)) & v27;
        int v36 = &v47[8 * v35];
        uint64_t v37 = *v36;
        if (*v36 == -1)
        {
          uint64_t v38 = 0;
LABEL_71:
          if (v38) {
            int v36 = v38;
          }
          uint64_t v42 = *v36;
        }
        else
        {
          uint64_t v38 = 0;
          int v39 = 1;
          while (v37 != v32)
          {
            if (v38) {
              BOOL v40 = 0;
            }
            else {
              BOOL v40 = v37 == -2;
            }
            if (v40) {
              uint64_t v38 = v36;
            }
            unsigned int v41 = v35 + v39++;
            unsigned int v35 = v41 & v27;
            int v36 = &v47[8 * (v41 & v27)];
            uint64_t v37 = *v36;
            if (*v36 == -1) {
              goto LABEL_71;
            }
          }
          uint64_t v42 = **v25;
        }
        if (v42 == v32) {
          uint64_t v33 = v36;
        }
        else {
          uint64_t v33 = v29;
        }
        unsigned int v30 = HIDWORD(v48);
        uint64_t v31 = v47;
      }
      if (v31 == v46) {
        int v43 = v30;
      }
      else {
        int v43 = v48;
      }
      uint64_t v44 = &v31[8 * v43];
      BOOL v22 = v33 == v44;
      ++v25;
    }
    while (v33 != v44 && v25 != v26);
    unsigned int v9 = v31;
  }
  else
  {
    BOOL v22 = 0;
  }
  if (v9 != v46) {
    free(v9);
  }
  return v22;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::setIDom(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(void **)(v2 + 24);
    uint64_t v6 = *(unsigned int *)(v2 + 32);
    int v7 = &v5[v6];
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      do
      {
        if (*v5 == v4) {
          goto LABEL_7;
        }
        ++v5;
        v8 -= 8;
      }
      while (v8);
      unsigned int v5 = v7;
    }
LABEL_7:
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(v2 + 32);
    }
    *(_DWORD *)(v2 + 32) = v6 - 1;
    *(void *)(v4 + 8) = a2;
    unsigned int v9 = *(_DWORD *)(a2 + 32);
    if (v9 < *(_DWORD *)(a2 + 36))
    {
      *(void *)(*(void *)(a2 + 24) + 8 * v9) = v4;
      ++*(_DWORD *)(a2 + 32);
      llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

void llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(uint64_t a1)
{
  v8[64] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(*(void *)(a1 + 8) + 16) + 1)
  {
    unsigned int v7 = 64;
    v8[0] = a1;
    unsigned int v1 = 1;
    do
    {
      uint64_t v2 = v8[--v1];
      unsigned int v6 = v1;
      *(_DWORD *)(v2 + 16) = *(_DWORD *)(*(void *)(v2 + 8) + 16) + 1;
      uint64_t v3 = *(unsigned int *)(v2 + 32);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 24);
        uint64_t v5 = 8 * v3;
        do
        {
          if (*(_DWORD *)(*(void *)v4 + 16) != *(_DWORD *)(*(void *)(*(void *)v4 + 8) + 16) + 1)
          {
            if (v1 >= v7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v8[v1] = *(void *)v4;
            unsigned int v1 = ++v6;
          }
          v4 += 8;
          v5 -= 8;
        }
        while (v5);
      }
    }
    while (v1);
  }
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getDFSNumIn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getDFSNumOut(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

BOOL llvm::DomTreeNodeBase<llvm::BasicBlock>::DominatedBy(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 72) >= *(_DWORD *)(a2 + 72) && *(_DWORD *)(a1 + 76) <= *(_DWORD *)(a2 + 76);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 2) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8uLL);
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v11 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = a2 + 24;
  *(void *)(a1 + 24) = v7;
  *(void *)uint64_t v6 = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 8) = 0;
  int v8 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = v8;
  int v9 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = v9;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v6 + 24);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(v6 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v6 + 44);
  sub_1CC0CEEC8((uint64_t *)v6);
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  return a1;
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,false>::wipe(uint64_t *a1)
{
  double result = sub_1CC0CEEC8(a1 + 3);
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, v4, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 8 * v7);
          uint64_t v8 = v12;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      int v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        unsigned int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v6 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v6 = 0;
  }
  sub_1CC33DF3C((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_1CC0CEEC8((uint64_t *)(a2 + 24));
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_begin(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_end(uint64_t a1)
{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::roots(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::isPostDominator()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::compare(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
    return 1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    return 1;
  }
  if (!sub_1CC33FBEC(*(char **)a1, (char *)(*(void *)a1 + 8 * v4), *(void **)a2)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 != *(_DWORD *)(a2 + 32)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v5)
  {
    if (v7)
    {
      uint64_t v8 = 16 * v7;
      uint64_t v9 = *(void **)(a1 + 24);
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 2;
        v8 -= 16;
        if (!v8) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 24);
    }
  }
  else
  {
LABEL_10:
    uint64_t v9 = (void *)(v6 + 16 * v7);
  }
  if (v9 != (void *)(v6 + 16 * v7))
  {
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(unsigned int *)(a2 + 40);
    if (v11)
    {
      LODWORD(v12) = ((*v9 >> 4) ^ (*v9 >> 9)) & (v11 - 1);
      int v13 = (uint64_t *)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v9 == *v13) {
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != -4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(void *)(v10 + 16 * v12);
        if (*v9 == v14)
        {
          int v13 = (uint64_t *)(v10 + 16 * v12);
          goto LABEL_20;
        }
      }
    }
    int v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_20:
    if (v13 != (uint64_t *)(v10 + 16 * v11)) {
      llvm::DomTreeNodeBase<llvm::BasicBlock>::compare();
    }
    return 1;
  }
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getRootNode(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

{
  return *(void *)(a1 + 48);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a2 != a3)
  {
    if (a2)
    {
      uint64_t v5 = a3;
      if (a3)
      {
        if (*(void *)(a3 + 8) == a2) {
          return 1;
        }
        if (*(void *)(a2 + 8) == a3) {
          return 0;
        }
        unsigned int v6 = *(_DWORD *)(a2 + 16);
        if (v6 >= *(_DWORD *)(a3 + 16)) {
          return 0;
        }
        if (*(unsigned char *)(a1 + 64))
        {
          if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72)) {
            return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
          }
          return 0;
        }
        unsigned int v7 = *(_DWORD *)(a1 + 68) + 1;
        *(_DWORD *)(a1 + 68) = v7;
        if (v7 > 0x20) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
        }
        do
        {
          uint64_t v8 = v5;
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5 && *(_DWORD *)(v5 + 16) >= v6);
        return v8 == a2;
      }
    }
  }
  return result;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    if (a3)
    {
      if (!a2) {
        return 0;
      }
      if (*(void *)(a3 + 8) == a2) {
        return 1;
      }
      if (*(void *)(a2 + 8) == a3) {
        return 0;
      }
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= *(_DWORD *)(a3 + 16)) {
        return 0;
      }
      if (*(unsigned char *)(a1 + 64))
      {
        if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72)) {
          return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
        }
        return 0;
      }
      unsigned int v7 = *(_DWORD *)(a1 + 68) + 1;
      *(_DWORD *)(a1 + 68) = v7;
      if (v7 > 0x20) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
      }
      do
      {
        uint64_t v8 = v5;
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 && *(_DWORD *)(v5 + 16) >= v6);
      return v8 == a2;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  if (a2 == a3) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (!v4) {
    goto LABEL_32;
  }
  LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
  unsigned int v7 = *v6;
  if (*v6 != a2)
  {
    uint64_t v18 = 1;
    while (v7 != -4096)
    {
      int v19 = v5 + v18++;
      uint64_t v5 = v19 & (v4 - 1);
      unsigned int v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_4;
      }
    }
LABEL_32:
    unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
  }
LABEL_4:
  uint64_t v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6[1];
  }
  if (!v4) {
    return 1;
  }
  uint64_t v10 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  uint64_t v12 = *v11;
  if (*v11 != a3)
  {
    BOOL v20 = 1;
    do
    {
      if (v12 == -4096) {
        return 1;
      }
      unsigned int v21 = v4 + v20++;
      uint64_t v4 = v21 & v10;
      uint64_t v12 = *(void *)(v3 + 16 * v4);
    }
    while (v12 != a3);
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  }
  if (v11 == v8) {
    return 1;
  }
  int v13 = v11[1];
  uint64_t v14 = v13 == v9 || v13 == 0;
  int v15 = !v14;
  if (!v14 && v9)
  {
    if (*(void *)(v13 + 8) != v9)
    {
      if (*(void *)(v9 + 8) != v13)
      {
        int v16 = *(_DWORD *)(v9 + 16);
        if (v16 < *(_DWORD *)(v13 + 16))
        {
          if (*(unsigned char *)(a1 + 64)) {
            goto LABEL_21;
          }
          BOOL v22 = *(_DWORD *)(a1 + 68) + 1;
          *(_DWORD *)(a1 + 68) = v22;
          if (v22 <= 0x20)
          {
            do
            {
              uint64_t v23 = v13;
              int v13 = *(void *)(v13 + 8);
            }
            while (v13 && *(_DWORD *)(v13 + 16) >= v16);
            return v23 == v9;
          }
          goto LABEL_50;
        }
      }
      return 0;
    }
    return 1;
  }
  if ((v15 & 1) == 0) {
    return 1;
  }
  if (!v9) {
    return 0;
  }
  if (*(void *)(v13 + 8) == v9) {
    return 1;
  }
  if (*(void *)(v9 + 8) != v13)
  {
    uint64_t v24 = *(_DWORD *)(v9 + 16);
    if (v24 < *(_DWORD *)(v13 + 16))
    {
      if (*(unsigned char *)(a1 + 64))
      {
LABEL_21:
        if (*(_DWORD *)(v13 + 72) >= *(_DWORD *)(v9 + 72)) {
          return *(_DWORD *)(v13 + 76) <= *(_DWORD *)(v9 + 76);
        }
        return 0;
      }
      uint64_t v25 = *(_DWORD *)(a1 + 68) + 1;
      *(_DWORD *)(a1 + 68) = v25;
      if (v25 <= 0x20)
      {
        do
        {
          uint64_t v23 = v13;
          int v13 = *(void *)(v13 + 8);
        }
        while (v13 && *(_DWORD *)(v13 + 16) >= v24);
        return v23 == v9;
      }
LABEL_50:
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
    }
  }
  return 0;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (!v4) {
    goto LABEL_31;
  }
  LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v17 = 1;
    while (v7 != -4096)
    {
      int v18 = v5 + v17++;
      uint64_t v5 = v18 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_4;
      }
    }
LABEL_31:
    unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
  }
LABEL_4:
  uint64_t v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6[1];
  }
  if (!v4) {
    return 1;
  }
  unsigned int v10 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  uint64_t v12 = *v11;
  if (*v11 != a3)
  {
    int v19 = 1;
    while (v12 != -4096)
    {
      int v20 = v4 + v19++;
      uint64_t v4 = v20 & v10;
      uint64_t v12 = *(void *)(v3 + 16 * v4);
      if (v12 == a3)
      {
        uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_8;
      }
    }
    return 1;
  }
LABEL_8:
  if (v11 == v8) {
    return 1;
  }
  uint64_t v13 = v11[1];
  if (v13 == v9 || v13 == 0) {
    return 1;
  }
  if (!v9) {
    return 0;
  }
  if (*(void *)(v13 + 8) == v9) {
    return 1;
  }
  if (*(void *)(v9 + 8) == v13) {
    return 0;
  }
  unsigned int v15 = *(_DWORD *)(v9 + 16);
  if (v15 >= *(_DWORD *)(v13 + 16)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(_DWORD *)(v13 + 72) >= *(_DWORD *)(v9 + 72)) {
      return *(_DWORD *)(v13 + 76) <= *(_DWORD *)(v9 + 76);
    }
    return 0;
  }
  unsigned int v21 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v21;
  if (v21 > 0x20) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
  }
  do
  {
    uint64_t v22 = v13;
    uint64_t v13 = *(void *)(v13 + 8);
  }
  while (v13 && *(_DWORD *)(v13 + 16) >= v15);
  return v22 == v9;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(uint64_t a1)
{
  v18[64] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    unsigned int v15 = v18;
    unsigned int v17 = 32;
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      v18[0] = *(void *)(a1 + 48);
      v18[1] = v3;
      int v4 = 1;
      int v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      unsigned int v5 = 1;
      do
      {
        uint64_t v6 = (char *)v15;
        uint64_t v7 = v5;
        int v8 = (char *)v15 + 16 * v5;
        uint64_t v10 = *((void *)v8 - 2);
        uint64_t v9 = (uint64_t *)*((void *)v8 - 1);
        if (v9 == (uint64_t *)(*(void *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          unsigned int v5 = v7 - 1;
          int v16 = v7 - 1;
        }
        else
        {
          uint64_t v11 = *v9;
          *((void *)v8 - 1) = v9 + 1;
          uint64_t v12 = *(void *)(v11 + 24);
          if (v7 >= v17) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v13 = &v6[16 * v7];
          *(void *)uint64_t v13 = v11;
          *((void *)v13 + 1) = v12;
          unsigned int v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      uint64_t v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(unsigned char *)(a1 + 64) = 1;
      if (v14 != v18) {
        free(v14);
      }
    }
  }
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v3 = a3;
    a3 = *(void *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getRoot(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 56) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a2 || v4 == a3) {
    return v4;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (!v7) {
    goto LABEL_36;
  }
  LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v22 = 1;
    while (v10 != -4096)
    {
      int v23 = v8 + v22++;
      uint64_t v8 = v23 & (v7 - 1);
      uint64_t v10 = *(void *)(v6 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_10;
      }
    }
LABEL_36:
    uint64_t v9 = (uint64_t *)(v6 + 16 * v7);
  }
LABEL_10:
  uint64_t v11 = (uint64_t *)(v6 + 16 * v7);
  if (v9 == v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (_DWORD *)v9[1];
  }
  if (!v7) {
    goto LABEL_35;
  }
  unsigned int v13 = v7 - 1;
  LODWORD(v7) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v14 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v15 = *v14;
  if (*v14 != a3)
  {
    int v24 = 1;
    while (v15 != -4096)
    {
      int v25 = v7 + v24++;
      uint64_t v7 = v25 & v13;
      uint64_t v15 = *(void *)(v6 + 16 * v7);
      if (v15 == a3)
      {
        uint64_t v14 = (uint64_t *)(v6 + 16 * v7);
        goto LABEL_14;
      }
    }
    goto LABEL_35;
  }
LABEL_14:
  if (v14 == v11)
  {
LABEL_35:
    int v16 = 0;
    goto LABEL_16;
  }
  int v16 = (_DWORD *)v14[1];
LABEL_16:
  if (v12 == v16)
  {
    int v16 = v12;
  }
  else
  {
    do
    {
      unsigned int v17 = v12[4];
      unsigned int v18 = v16[4];
      BOOL v19 = v17 >= v18;
      if (v17 >= v18) {
        int v20 = v12;
      }
      else {
        int v20 = v16;
      }
      if (!v19) {
        int v16 = v12;
      }
      uint64_t v12 = (_DWORD *)*((void *)v20 + 1);
    }
    while (v12 != v16);
  }
  return *(void *)v16;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  _DWORD *v24;

  uint64_t v3 = *(void *)(*(void *)(a2 + 56) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a2 || v4 == a3) {
    return v4;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_15;
    }
    uint64_t v11 = 1;
    while (v10 != -4096)
    {
      uint64_t v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(void *)(v6 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_15;
      }
    }
  }
  uint64_t v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_15:
  unsigned int v13 = (uint64_t *)(v6 + 16 * v7);
  if (v9 == v13)
  {
    uint64_t v14 = 0;
    if (!v7) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v14 = (_DWORD *)v9[1];
    if (!v7) {
      goto LABEL_36;
    }
  }
  uint64_t v15 = v7 - 1;
  LODWORD(v7) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  int v16 = (uint64_t *)(v6 + 16 * v7);
  unsigned int v17 = *v16;
  if (*v16 != a3)
  {
    unsigned int v18 = 1;
    while (v17 != -4096)
    {
      BOOL v19 = v7 + v18++;
      uint64_t v7 = v19 & v15;
      unsigned int v17 = *(void *)(v6 + 16 * v7);
      if (v17 == a3)
      {
        int v16 = (uint64_t *)(v6 + 16 * v7);
        goto LABEL_22;
      }
    }
    goto LABEL_36;
  }
LABEL_22:
  if (v16 == v13)
  {
LABEL_36:
    int v20 = 0;
    goto LABEL_24;
  }
  int v20 = (_DWORD *)v16[1];
LABEL_24:
  if (v14 == v20)
  {
    int v20 = v14;
  }
  else
  {
    do
    {
      unsigned int v21 = v14[4];
      int v22 = v20[4];
      int v23 = v21 >= v22;
      if (v21 >= v22) {
        int v24 = v14;
      }
      else {
        int v24 = v20;
      }
      if (!v23) {
        int v20 = v14;
      }
      uint64_t v14 = (_DWORD *)*((void *)v24 + 1);
    }
    while (v14 != v20);
  }
  return *(void *)v20;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::isVirtualRoot()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  sub_1CBFEBC30((uint64_t)v5, a2, a3, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v5, 0);
  if (v7 != v8) {
    free(v7);
  }
  sub_1CBFEECCC((uint64_t)&v6);
  return sub_1CBFEECCC((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  v18[8] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v12 = v14;
    uint64_t v13 = 0x300000000;
    sub_1CD3D61B4((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1CC0BE200((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[2 * a5]);
    sub_1CBFEBC30((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1CBFEBC30((uint64_t)v8, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11) {
      free(v10);
    }
    sub_1CBFEECCC((uint64_t)&v9);
    sub_1CBFEECCC((uint64_t)v8);
    if (v17 != v18) {
      free(v17);
    }
    sub_1CBFEECCC((uint64_t)&v16);
    sub_1CBFEECCC((uint64_t)v15);
    if (v12 != v14) {
      free(v12);
    }
  }
  else
  {
    sub_1CBFEBC30((uint64_t)v15, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v15, (uint64_t)v15);
    sub_1CBFEEC7C((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::DomTreeBuilder::InsertEdge<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::DomTreeBuilder::DeleteEdge<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    unsigned int v5 = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 != a3)
    {
      int v7 = 1;
      do
      {
        if (v6 == -4096) {
          break;
        }
        unsigned int v8 = v5 + v7++;
        unsigned int v5 = v8 & (v4 - 1);
        uint64_t v6 = *(void *)(v3 + 16 * v5);
      }
      while (v6 != a3);
    }
  }
  *(unsigned char *)(a1 + 64) = 0;
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::addRoot(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 64) = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a3)
  {
    uint64_t v6 = *(void **)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 32);
    unsigned int v8 = &v6[v7];
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      do
      {
        if (*v6 == a2) {
          goto LABEL_7;
        }
        ++v6;
        v9 -= 8;
      }
      while (v9);
      uint64_t v6 = v8;
    }
LABEL_7:
    if (v8 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v8 - (char *)(v6 + 1));
      LODWORD(v7) = *(_DWORD *)(v3 + 32);
    }
    *(_DWORD *)(v3 + 32) = v7 - 1;
    *(void *)(a2 + 8) = a3;
    unsigned int v10 = *(_DWORD *)(a3 + 32);
    if (v10 < *(_DWORD *)(a3 + 36))
    {
      *(void *)(*(void *)(a3 + 24) + 8 * v10) = a2;
      ++*(_DWORD *)(a3 + 32);
      llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t vars8;

  uint64_t v3 = *(void *)(result + 24);
  int v4 = *(unsigned int *)(result + 40);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_3;
    }
    uint64_t v15 = 1;
    while (v7 != -4096)
    {
      uint64_t v16 = v5 + v15++;
      unsigned int v5 = v16 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_3:
  unsigned int v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6[1];
  }
  if (v4)
  {
    unsigned int v10 = v4 - 1;
    LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
    uint64_t v12 = *v11;
    if (*v11 == a3)
    {
LABEL_7:
      if (v11 != v8)
      {
        uint64_t v13 = v11[1];
        goto LABEL_9;
      }
    }
    else
    {
      unsigned int v17 = 1;
      while (v12 != -4096)
      {
        unsigned int v18 = v4 + v17++;
        int v4 = v18 & v10;
        uint64_t v12 = *(void *)(v3 + 16 * v4);
        if (v12 == a3)
        {
          uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
          goto LABEL_7;
        }
      }
    }
  }
  uint64_t v13 = 0;
LABEL_9:
  *(unsigned char *)(result + 64) = 0;
  uint64_t v14 = *(void *)(v9 + 8);
  if (v14 != v13)
  {
    BOOL v19 = *(void **)(v14 + 24);
    int v20 = *(unsigned int *)(v14 + 32);
    unsigned int v21 = &v19[v20];
    if (v20)
    {
      int v22 = 8 * v20;
      do
      {
        if (*v19 == v9) {
          goto LABEL_26;
        }
        ++v19;
        v22 -= 8;
      }
      while (v22);
      BOOL v19 = v21;
    }
LABEL_26:
    if (v21 != v19 + 1)
    {
      memmove(v19, v19 + 1, (char *)v21 - (char *)(v19 + 1));
      LODWORD(v20) = *(_DWORD *)(v14 + 32);
    }
    *(_DWORD *)(v14 + 32) = v20 - 1;
    *(void *)(v9 + 8) = v13;
    int v23 = *(_DWORD *)(v13 + 32);
    if (v23 < *(_DWORD *)(v13 + 36))
    {
      *(void *)(*(void *)(v13 + 24) + 8 * v23) = v9;
      ++*(_DWORD *)(v13 + 32);
      llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

void sub_1CC59D634(uint64_t a1, uint64_t a2)
{
  _OWORD v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 == a2 + 40)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3) {
      uint64_t v4 = v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB) {
      uint64_t v4 = 0;
    }
  }
  if (*(unsigned char *)(v4 + 16) == 30)
  {
LABEL_10:
    unsigned int v5 = (uint64_t *)(v4 - 32);
  }
  else
  {
    switch(*(unsigned char *)(v4 + 16))
    {
      case '!':
        unsigned int v5 = (uint64_t *)(v4 - 96);
        break;
      case '""':
      case '#':
        __break(1u);
        goto LABEL_53;
      case '$':
LABEL_53:
        if ((*(_WORD *)(v4 + 18) & 1) == 0)
        {
          uint64_t v6 = 0;
          goto LABEL_12;
        }
        int v20 = *(_DWORD *)(v4 + 20);
LABEL_57:
        uint64_t v21 = v4 - 32 * (v20 & 0x7FFFFFF);
LABEL_47:
        unsigned int v5 = (uint64_t *)(v21 + 32);
        break;
      case '%':
        goto LABEL_10;
      case '\'':
        unsigned int v5 = (uint64_t *)(v4 - 32 * *(unsigned int *)(v4 + 80) - 64);
        break;
      default:
        int v20 = *(_DWORD *)(v4 + 20);
        if ((v20 & 0x40000000) == 0) {
          goto LABEL_57;
        }
        uint64_t v21 = *(void *)(v4 - 8);
        goto LABEL_47;
    }
  }
  uint64_t v6 = *v5;
LABEL_12:
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = *(void *)(i + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8) {
      BOOL v10 = v9 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10 && v9 - 29 < 0xB) {
      break;
    }
  }
  int v22 = v24;
  uint64_t v23 = 0x400000000;
  sub_1CBF846A4((uint64_t)&v22, i, 0);
  uint64_t v12 = *(void *)(v6 + 8);
  if (v12)
  {
    while (1)
    {
      uint64_t v13 = *(void *)(v12 + 24);
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
      BOOL v15 = v13 && v14 >= 0x1C;
      if (v15 && v14 - 29 <= 0xA) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      if (!v12) {
        goto LABEL_32;
      }
    }
LABEL_42:
    if (*(void *)(v13 + 40) != a2) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    while (1)
    {
      uint64_t v12 = *(void *)(v12 + 8);
      if (!v12) {
        break;
      }
      uint64_t v13 = *(void *)(v12 + 24);
      unsigned int v17 = *(unsigned __int8 *)(v13 + 16);
      if (v13) {
        BOOL v18 = v17 >= 0x1C;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18 && v17 - 29 < 0xB) {
        goto LABEL_42;
      }
    }
  }
LABEL_32:
  if (v23) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  if (v22 != v24) {
    free(v22);
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::recalculate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = a2;
  sub_1CC5A43B0(a1, 0);
}

{
  *(void *)(a1 + 56) = a2;
  llvm::DomTreeBuilder::CalculateWithUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1)
{
}

uint64_t llvm::DomTreeBuilder::CalculateWithUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  sub_1CBFEBC30((uint64_t)v9, a2, a3, 1u);
  v5[0] = 0;
  uint64_t v6 = v9;
  uint64_t v7 = 0;
  uint64_t v8 = v12;
  sub_1CC5A43B0(a1, (uint64_t)v5);
  if (v11 != v13) {
    free(v11);
  }
  sub_1CBFEECCC((uint64_t)&v10);
  return sub_1CBFEECCC((uint64_t)v9);
}

void llvm::DomTreeBuilder::Verify<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = operator new(8uLL);
  __p = v2;
  *unsigned int v2 = 0;
  unsigned int v5 = v2 + 1;
  uint64_t v6 = v2 + 1;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  __src[0] = v12;
  __src[1] = (void *)0x100000000;
  int v17 = 0;
  v12[1] = 0;
  v12[2] = 0;
  int v13 = 0;
  char v16 = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v14 = 0;
  uint64_t v15 = v3;
  sub_1CC5A43B0((uint64_t)__src, 0);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::compare();
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,false>::reset(uint64_t a1)
{
  BOOL result = sub_1CC0CEEC8((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      unsigned int v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v11 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v6 = a2 + 48;
  *(void *)(a1 + 48) = v7;
  *(void *)uint64_t v6 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 8) = 0;
  int v8 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = v8;
  int v9 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v6 + 24);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(v6 + 40);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v6 + 44);
  sub_1CC0CEEC8((uint64_t *)v6);
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  return a1;
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,true>::wipe(uint64_t *a1)
{
  BOOL result = sub_1CC0CEEC8(a1 + 6);
  a1[9] = 0;
  a1[10] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, v4, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 8 * v7);
          uint64_t v8 = v12;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      int v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        unsigned int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v6 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v6 = 0;
  }
  sub_1CC33DF3C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_1CC0CEEC8((uint64_t *)(a2 + 48));
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_begin(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_end(uint64_t a1)
{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::roots(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::isPostDominator()
{
  return 1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::compare(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80) != *(void *)(a2 + 80)) {
    return 1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    return 1;
  }
  if (!sub_1CC33FBEC(*(char **)a1, (char *)(*(void *)a1 + 8 * v4), *(void **)a2)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (v5 != *(_DWORD *)(a2 + 56)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  if (v5)
  {
    if (v7)
    {
      uint64_t v8 = 16 * v7;
      uint64_t v9 = *(void **)(a1 + 48);
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 2;
        v8 -= 16;
        if (!v8) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 48);
    }
  }
  else
  {
LABEL_10:
    uint64_t v9 = (void *)(v6 + 16 * v7);
  }
  if (v9 != (void *)(v6 + 16 * v7))
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(unsigned int *)(a2 + 64);
    if (v11)
    {
      LODWORD(v12) = ((*v9 >> 4) ^ (*v9 >> 9)) & (v11 - 1);
      int v13 = (uint64_t *)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v9 == *v13) {
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != -4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(void *)(v10 + 16 * v12);
        if (*v9 == v14)
        {
          int v13 = (uint64_t *)(v10 + 16 * v12);
          goto LABEL_20;
        }
      }
    }
    int v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_20:
    if (v13 != (uint64_t *)(v10 + 16 * v11)) {
      llvm::DomTreeNodeBase<llvm::BasicBlock>::compare();
    }
    return 1;
  }
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getRootNode(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

{
  return *(void *)(a1 + 72);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::getDescendants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[8] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (!v5)
  {
LABEL_7:
    int v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        int v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    uint64_t v11 = v7[1];
    if (v11)
    {
      int v15 = v18;
      int v17 = 8;
      v18[0] = v11;
      unsigned int v12 = 1;
      do
      {
        uint64_t v13 = *((void *)v15 + v12 - 1);
        unsigned int v16 = v12 - 1;
        unint64_t v14 = *(unsigned int *)(a3 + 8);
        if (v14 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v14) = *(void *)v13;
        ++*(_DWORD *)(a3 + 8);
        sub_1CD5BC7E8((uint64_t)&v15, *(char **)(v13 + 24), (char *)(*(void *)(v13 + 24) + 8 * *(unsigned int *)(v13 + 32)));
        unsigned int v12 = v16;
      }
      while (v16);
      if (v15 != v18) {
        free(v15);
      }
    }
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a2 != a3)
  {
    if (a2)
    {
      uint64_t v5 = a3;
      if (a3)
      {
        if (*(void *)(a3 + 8) == a2)
        {
          return 1;
        }
        else
        {
          if (*(void *)(a2 + 8) == a3) {
            return 0;
          }
          unsigned int v6 = *(_DWORD *)(a2 + 16);
          if (v6 >= *(_DWORD *)(a3 + 16)) {
            return 0;
          }
          if (*(unsigned char *)(a1 + 88))
          {
            if (*(_DWORD *)(a3 + 72) < *(_DWORD *)(a2 + 72)) {
              return 0;
            }
            return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
          }
          else
          {
            unsigned int v7 = *(_DWORD *)(a1 + 92) + 1;
            *(_DWORD *)(a1 + 92) = v7;
            if (v7 > 0x20) {
              llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
            }
            do
            {
              uint64_t v8 = v5;
              uint64_t v5 = *(void *)(v5 + 8);
            }
            while (v5 && *(_DWORD *)(v5 + 16) >= v6);
            return v8 == a2;
          }
        }
      }
    }
  }
  return result;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    if (a3)
    {
      if (!a2) {
        return 0;
      }
      if (*(void *)(a3 + 8) == a2) {
        return 1;
      }
      if (*(void *)(a2 + 8) == a3) {
        return 0;
      }
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= *(_DWORD *)(a3 + 16)) {
        return 0;
      }
      if (*(unsigned char *)(a1 + 88))
      {
        if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72)) {
          return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
        }
        return 0;
      }
      unsigned int v7 = *(_DWORD *)(a1 + 92) + 1;
      *(_DWORD *)(a1 + 92) = v7;
      if (v7 > 0x20) {
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
      }
      do
      {
        uint64_t v8 = v5;
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 && *(_DWORD *)(v5 + 16) >= v6);
      return v8 == a2;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  if (a2 == a3) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (!v4) {
    goto LABEL_36;
  }
  LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
  unsigned int v7 = *v6;
  if (*v6 != a2)
  {
    uint64_t v18 = 1;
    while (v7 != -4096)
    {
      BOOL v19 = v5 + v18++;
      uint64_t v5 = v19 & (v4 - 1);
      unsigned int v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_4;
      }
    }
LABEL_36:
    unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
  }
LABEL_4:
  uint64_t v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    int v9 = 0;
  }
  else {
    int v9 = v6[1];
  }
  if (!v4) {
    return 1;
  }
  int v10 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  unsigned int v12 = *v11;
  if (*v11 != a3)
  {
    int v20 = 1;
    do
    {
      if (v12 == -4096) {
        return 1;
      }
      uint64_t v21 = v4 + v20++;
      uint64_t v4 = v21 & v10;
      unsigned int v12 = *(void *)(v3 + 16 * v4);
    }
    while (v12 != a3);
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  }
  if (v11 == v8) {
    return 1;
  }
  uint64_t v13 = v11[1];
  unint64_t v14 = v13 == v9 || v13 == 0;
  int v15 = !v14;
  if (v14 || !v9)
  {
    if (v15)
    {
      if (!v9) {
        return 0;
      }
      if (*(void *)(v13 + 8) != v9)
      {
        if (*(void *)(v9 + 8) == v13) {
          return 0;
        }
        int v24 = *(_DWORD *)(v9 + 16);
        if (v24 >= *(_DWORD *)(v13 + 16)) {
          return 0;
        }
        if (!*(unsigned char *)(a1 + 88))
        {
          int v25 = *(_DWORD *)(a1 + 92) + 1;
          *(_DWORD *)(a1 + 92) = v25;
          if (v25 <= 0x20)
          {
            do
            {
              uint64_t v23 = v13;
              uint64_t v13 = *(void *)(v13 + 8);
            }
            while (v13 && *(_DWORD *)(v13 + 16) >= v24);
            return v23 == v9;
          }
LABEL_48:
          llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
        }
        goto LABEL_49;
      }
    }
    return 1;
  }
  if (*(void *)(v13 + 8) == v9) {
    return 1;
  }
  if (*(void *)(v9 + 8) == v13) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v9 + 16);
  if (v16 >= *(_DWORD *)(v13 + 16)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 88))
  {
    int v22 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v22;
    if (v22 <= 0x20)
    {
      do
      {
        uint64_t v23 = v13;
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 && *(_DWORD *)(v13 + 16) >= v16);
      return v23 == v9;
    }
    goto LABEL_48;
  }
LABEL_49:
  if (*(_DWORD *)(v13 + 72) >= *(_DWORD *)(v9 + 72)) {
    return *(_DWORD *)(v13 + 76) <= *(_DWORD *)(v9 + 76);
  }
  return 0;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_10;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    uint64_t v12 = 0;
    if (!v4) {
      return 1;
    }
  }
  else
  {
    uint64_t v12 = v6[1];
    if (!v4) {
      return 1;
    }
  }
  unsigned int v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  unint64_t v14 = (uint64_t *)(v3 + 16 * v4);
  uint64_t v15 = *v14;
  if (*v14 != a3)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v4 + v16++;
      uint64_t v4 = v17 & v13;
      uint64_t v15 = *(void *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        unint64_t v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11) {
    return 1;
  }
  uint64_t v18 = v14[1];
  if (v18 == v12 || v18 == 0) {
    return 1;
  }
  if (!v12) {
    return 0;
  }
  if (*(void *)(v18 + 8) == v12) {
    return 1;
  }
  if (*(void *)(v12 + 8) == v18) {
    return 0;
  }
  unsigned int v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72)) {
      return *(_DWORD *)(v18 + 76) <= *(_DWORD *)(v12 + 76);
    }
    return 0;
  }
  unsigned int v21 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v21;
  if (v21 > 0x20) {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
  }
  do
  {
    uint64_t v22 = v18;
    uint64_t v18 = *(void *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v22 == v12;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(uint64_t a1)
{
  v18[64] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    uint64_t v15 = v18;
    unsigned int v17 = 32;
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      v18[0] = *(void *)(a1 + 72);
      v18[1] = v3;
      int v4 = 1;
      int v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      unsigned int v5 = 1;
      do
      {
        uint64_t v6 = (char *)v15;
        uint64_t v7 = v5;
        int v8 = (char *)v15 + 16 * v5;
        uint64_t v10 = *((void *)v8 - 2);
        int v9 = (uint64_t *)*((void *)v8 - 1);
        if (v9 == (uint64_t *)(*(void *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          unsigned int v5 = v7 - 1;
          int v16 = v7 - 1;
        }
        else
        {
          uint64_t v11 = *v9;
          *((void *)v8 - 1) = v9 + 1;
          uint64_t v12 = *(void *)(v11 + 24);
          if (v7 >= v17) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v13 = &v6[16 * v7];
          *(void *)unsigned int v13 = v11;
          *((void *)v13 + 1) = v12;
          unsigned int v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      unint64_t v14 = v15;
      *(_DWORD *)(a1 + 92) = 0;
      *(unsigned char *)(a1 + 88) = 1;
      if (v14 != v18) {
        free(v14);
      }
    }
  }
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v3 = a3;
    a3 = *(void *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getRoot(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_3;
    }
    int v19 = 1;
    while (v7 != -4096)
    {
      int v20 = v5 + v19++;
      uint64_t v5 = v20 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_3:
  int v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    int v9 = 0;
  }
  else {
    int v9 = (_DWORD *)v6[1];
  }
  if (v4)
  {
    unsigned int v10 = v4 - 1;
    LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
    uint64_t v12 = *v11;
    if (*v11 == a3)
    {
LABEL_7:
      if (v11 != v8)
      {
        unsigned int v13 = (_DWORD *)v11[1];
        goto LABEL_9;
      }
    }
    else
    {
      int v21 = 1;
      while (v12 != -4096)
      {
        int v22 = v4 + v21++;
        uint64_t v4 = v22 & v10;
        uint64_t v12 = *(void *)(v3 + 16 * v4);
        if (v12 == a3)
        {
          uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
          goto LABEL_7;
        }
      }
    }
  }
  unsigned int v13 = 0;
LABEL_9:
  if (v9 == v13)
  {
    unsigned int v13 = v9;
  }
  else
  {
    do
    {
      unsigned int v15 = v9[4];
      unsigned int v16 = v13[4];
      BOOL v17 = v15 >= v16;
      if (v15 >= v16) {
        uint64_t v18 = v9;
      }
      else {
        uint64_t v18 = v13;
      }
      if (!v17) {
        unsigned int v13 = v9;
      }
      int v9 = (_DWORD *)*((void *)v18 + 1);
    }
    while (v9 != v13);
  }
  return *(void *)v13;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::isVirtualRoot(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  sub_1CBFEEDA8((uint64_t)v5, a2, a3, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v5, 0);
  if (v7 != v8) {
    free(v7);
  }
  sub_1CBFEF654((uint64_t)&v6);
  return sub_1CBFEF654((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::applyUpdates(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  v18[8] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v12 = v14;
    uint64_t v13 = 0x300000000;
    sub_1CD3D61B4((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1CC0BE200((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[2 * a5]);
    sub_1CBFEEDA8((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1CBFEEDA8((uint64_t)v8, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11) {
      free(v10);
    }
    sub_1CBFEF654((uint64_t)&v9);
    sub_1CBFEF654((uint64_t)v8);
    if (v17 != v18) {
      free(v17);
    }
    sub_1CBFEF654((uint64_t)v16);
    sub_1CBFEF654((uint64_t)v15);
    if (v12 != v14) {
      free(v12);
    }
  }
  else
  {
    sub_1CBFEEDA8((uint64_t)v15, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v15, (uint64_t)v15);
    if (v17 != v18) {
      free(v17);
    }
    sub_1CBFEF654((uint64_t)v16);
    sub_1CBFEF654((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::DomTreeBuilder::InsertEdge<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC5A6DD0(a1, 0, a3, a2);
}

uint64_t llvm::DomTreeBuilder::DeleteEdge<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC5A6DD0(a1, 0, a3, a2);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    unsigned int v5 = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 != a3)
    {
      int v7 = 1;
      do
      {
        if (v6 == -4096) {
          break;
        }
        unsigned int v8 = v5 + v7++;
        unsigned int v5 = v8 & (v4 - 1);
        uint64_t v6 = *(void *)(v3 + 16 * v5);
      }
      while (v6 != a3);
    }
  }
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::setNewRoot(uint64_t a1)
{
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::addRoot(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::changeImmediateDominator(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 88) = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a3)
  {
    uint64_t v6 = *(void **)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 32);
    unsigned int v8 = &v6[v7];
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      do
      {
        if (*v6 == a2) {
          goto LABEL_7;
        }
        ++v6;
        v9 -= 8;
      }
      while (v9);
      uint64_t v6 = v8;
    }
LABEL_7:
    if (v8 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v8 - (char *)(v6 + 1));
      LODWORD(v7) = *(_DWORD *)(v3 + 32);
    }
    *(_DWORD *)(v3 + 32) = v7 - 1;
    *(void *)(a2 + 8) = a3;
    unsigned int v10 = *(_DWORD *)(a3 + 32);
    if (v10 < *(_DWORD *)(a3 + 36))
    {
      *(void *)(*(void *)(a3 + 24) + 8 * v10) = a2;
      ++*(_DWORD *)(a3 + 32);
      llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t vars8;

  uint64_t v3 = *(void *)(result + 48);
  int v4 = *(unsigned int *)(result + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    unsigned int v8 = 1;
    while (v7 != -4096)
    {
      uint64_t v9 = v5 + v8++;
      unsigned int v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  unsigned int v10 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v10)
  {
    uint64_t v11 = 0;
    if (!v4) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v11 = v6[1];
    if (!v4) {
      goto LABEL_19;
    }
  }
  uint64_t v12 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v13 = (uint64_t *)(v3 + 16 * v4);
  unint64_t v14 = *v13;
  if (*v13 == a3)
  {
LABEL_17:
    if (v13 != v10)
    {
      BOOL v17 = v13[1];
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v15 = 1;
    while (v14 != -4096)
    {
      unsigned int v16 = v4 + v15++;
      int v4 = v16 & v12;
      unint64_t v14 = *(void *)(v3 + 16 * v4);
      if (v14 == a3)
      {
        uint64_t v13 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  BOOL v17 = 0;
LABEL_20:
  *(unsigned char *)(result + 88) = 0;
  uint64_t v18 = *(void *)(v11 + 8);
  if (v18 != v17)
  {
    int v19 = *(void **)(v18 + 24);
    int v20 = *(unsigned int *)(v18 + 32);
    int v21 = &v19[v20];
    if (v20)
    {
      int v22 = 8 * v20;
      do
      {
        if (*v19 == v11) {
          goto LABEL_26;
        }
        ++v19;
        v22 -= 8;
      }
      while (v22);
      int v19 = v21;
    }
LABEL_26:
    if (v21 != v19 + 1)
    {
      memmove(v19, v19 + 1, (char *)v21 - (char *)(v19 + 1));
      LODWORD(v20) = *(_DWORD *)(v18 + 32);
    }
    *(_DWORD *)(v18 + 32) = v20 - 1;
    *(void *)(v11 + 8) = v17;
    uint64_t v23 = *(_DWORD *)(v17 + 32);
    if (v23 < *(_DWORD *)(v17 + 36))
    {
      *(void *)(*(void *)(v17 + 24) + 8 * v23) = v11;
      ++*(_DWORD *)(v17 + 32);
      llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::splitBlock(uint64_t a1, uint64_t a2)
{
  v48[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a2 + 8);
  do
  {
    uint64_t v4 = *v3;
    uint64_t v5 = *(void *)(v4 + 24);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    uint64_t v3 = (uint64_t *)(v4 + 8);
    if (v5) {
      BOOL v7 = v6 >= 0x1C;
    }
    else {
      BOOL v7 = 0;
    }
  }
  while (!v7 || v6 - 29 > 0xA);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10 == a2 + 40)
  {
LABEL_46:
    unsigned int v44 = 0;
    LODWORD(v13) = 0;
    unsigned int v2 = v48;
    uint64_t v46 = v48;
  }
  else
  {
    uint64_t v11 = v10 - 24;
    if (v10) {
      uint64_t v12 = v10 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    LODWORD(v13) = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 30)
    {
      if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v44 = 2;
      }
      else {
        unsigned int v44 = 1;
      }
LABEL_18:
      unsigned int v2 = v48;
      uint64_t v46 = v48;
    }
    else
    {
      unsigned int v44 = 0;
      switch(*(unsigned char *)(v12 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_18;
        case 0x1E:
LABEL_98:
          __break(1u);
          goto LABEL_99;
        case 0x1F:
          unsigned int v44 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          unsigned int v44 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          unsigned int v44 = 2;
          goto LABEL_18;
        case 0x24:
          unsigned int v44 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_18;
        case 0x25:
          unsigned int v44 = 1;
          goto LABEL_18;
        case 0x27:
          unsigned int v44 = *(_DWORD *)(v12 + 80) + 1;
          break;
        default:
          goto LABEL_46;
      }
      uint64_t v46 = v48;
      if (v44 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v2 = v48;
    }
    LODWORD(v13) = 0;
    if (v44)
    {
      int v14 = 0;
      uint64_t v15 = 0;
      int v16 = *(unsigned __int8 *)(v10 - 8);
      uint64_t v17 = v10 - 88;
      do
      {
        if (v16 == 30)
        {
          int v19 = (uint64_t *)(v10 - 56 - 32 * v15);
        }
        else
        {
          int v19 = (uint64_t *)(v10 - 56);
          switch(v16)
          {
            case ' ':
            case '&':
              int v22 = *(_DWORD *)(v10 - 4);
              if ((v22 & 0x40000000) != 0) {
                uint64_t v23 = *(void *)(v10 - 32);
              }
              else {
                uint64_t v23 = v11 - 32 * (v22 & 0x7FFFFFF);
              }
              int v19 = (uint64_t *)(v23 + 32 * (v15 + 1));
              break;
            case '!':
              if (v15) {
                uint64_t v24 = -64;
              }
              else {
                uint64_t v24 = -96;
              }
              int v19 = (uint64_t *)(v11 + v24);
              break;
            case '""':
            case '#':
              goto LABEL_98;
            case '$':
              if ((*(_WORD *)(v10 - 6) & 1) == 0)
              {
                uint64_t v18 = 0;
                goto LABEL_25;
              }
              int v19 = (uint64_t *)(v10 + 8 - 32 * (*(_DWORD *)(v10 - 4) & 0x7FFFFFF));
              break;
            case '%':
              break;
            case '\'':
              if (v15) {
                int v19 = (uint64_t *)(v17 - 32 * *(unsigned int *)(v10 + 56));
              }
              else {
                int v19 = (uint64_t *)(v10 - 88 - 32 * *(unsigned int *)(v10 + 56));
              }
              break;
            default:
              int v20 = *(_DWORD *)(v10 - 4);
              if ((v20 & 0x40000000) != 0) {
                uint64_t v21 = *(void *)(v10 - 32);
              }
              else {
                uint64_t v21 = v11 - 32 * (v20 & 0x7FFFFFF);
              }
              int v19 = (uint64_t *)(v21 + 32 * (v14 & 0xFFFFFFFE) + 32);
              break;
          }
        }
        uint64_t v18 = *v19;
LABEL_25:
        v48[v15++] = v18;
        v17 += 32;
        v14 += 2;
      }
      while (v44 != v15);
    }
    else
    {
LABEL_99:
      unsigned int v44 = v13;
    }
  }
  int v25 = v13 + v44;
  int v47 = v13 + v44;
  uint64_t v26 = *(void *)(v9 + 40);
  if (v26 != v9 + 40)
  {
    if (v26) {
      uint64_t v27 = v26 - 24;
    }
    else {
      uint64_t v27 = 0;
    }
    int v28 = *(unsigned __int8 *)(v27 + 16);
    int v29 = v28 - 29;
    if (v28 != 30)
    {
      LODWORD(v13) = 2;
      switch(v29)
      {
        case 1:
          goto LABEL_98;
        case 2:
          LODWORD(v13) = (*(_DWORD *)(v27 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_93;
        case 3:
        case 9:
          LODWORD(v13) = (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_93;
        case 4:
          goto LABEL_56;
        case 7:
          LODWORD(v13) = *(_WORD *)(v27 + 18) & 1;
          goto LABEL_93;
        case 8:
          LODWORD(v13) = 1;
          goto LABEL_56;
        case 10:
          LODWORD(v13) = *(_DWORD *)(v27 + 80) + 1;
LABEL_93:
          if (!v13) {
            goto LABEL_85;
          }
          goto LABEL_56;
        default:
          goto LABEL_85;
      }
    }
    if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) == 3) {
      LODWORD(v13) = 2;
    }
    else {
      LODWORD(v13) = 1;
    }
LABEL_56:
    int v30 = 0;
    uint64_t v31 = 0;
    uint64_t v45 = v2;
    unsigned int v2 = (void *)(v27 - 64);
    uint64_t v32 = v13;
    do
    {
      int v33 = *(unsigned __int8 *)(v27 + 16);
      if (v33 == 30)
      {
        int v36 = (uint64_t *)(v27 - 32 - 32 * v31);
      }
      else
      {
        uint64_t v35 = (v33 - 31);
        int v36 = (uint64_t *)(v27 - 32);
        switch(v35)
        {
          case 1:
          case 7:
            int v40 = *(_DWORD *)(v27 + 20);
            if ((v40 & 0x40000000) != 0) {
              uint64_t v41 = *(void *)(v27 - 8);
            }
            else {
              uint64_t v41 = v27 - 32 * (v40 & 0x7FFFFFF);
            }
            uint64_t v39 = v41 + 32 * v31;
            goto LABEL_69;
          case 2:
            uint64_t v42 = -64;
            LODWORD(v13) = -96;
            if (!v31) {
              uint64_t v42 = -96;
            }
            int v36 = (uint64_t *)(v27 + v42);
            break;
          case 3:
          case 4:
            goto LABEL_98;
          case 5:
            if ((*(_WORD *)(v27 + 18) & 1) == 0)
            {
              uint64_t v34 = 0;
              goto LABEL_61;
            }
            uint64_t v43 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
            uint64_t v13 = v27 + 32;
            goto LABEL_84;
          case 6:
            break;
          case 8:
            if (v31)
            {
              int v36 = &v2[-4 * *(unsigned int *)(v27 + 80)];
            }
            else
            {
              uint64_t v43 = *(unsigned int *)(v27 + 80);
              uint64_t v13 = v27 - 64;
LABEL_84:
              int v36 = (uint64_t *)(v13 - 32 * v43);
            }
            break;
          default:
            int v37 = *(_DWORD *)(v27 + 20);
            if ((v37 & 0x40000000) != 0) {
              uint64_t v38 = *(void *)(v27 - 8);
            }
            else {
              uint64_t v38 = v27 - 32 * (v37 & 0x7FFFFFF);
            }
            LODWORD(v13) = v30 & 0xFFFFFFFE;
            uint64_t v39 = v38 + 32 * (v30 & 0xFFFFFFFE);
LABEL_69:
            int v36 = (uint64_t *)(v39 + 32);
            break;
        }
      }
      uint64_t v34 = *v36;
LABEL_61:
      if (v34 != a2) {
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
      }
      ++v31;
      v2 += 4;
      v30 += 2;
    }
    while (v32 != v31);
    int v25 = v47;
    unsigned int v2 = v45;
  }
LABEL_85:
  if (v25) {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry();
  }
  if (v46 != v2) {
    free(v46);
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::recalculate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = a2;
  sub_1CC5A46F8(a1, 0);
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1)
{
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 80) = a2;
  sub_1CBFEEDA8((uint64_t)v10, a3, a4, 1u);
  v6[0] = 0;
  BOOL v7 = v10;
  uint64_t v8 = 0;
  uint64_t v9 = v13;
  sub_1CC5A46F8(a1, (uint64_t)v6);
  if (v12 != v14) {
    free(v12);
  }
  sub_1CBFEF654((uint64_t)&v11);
  return sub_1CBFEF654((uint64_t)v10);
}

void llvm::DomTreeBuilder::Verify<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = operator new(8uLL);
  __p = v2;
  *unsigned int v2 = 0;
  uint64_t v5 = v2 + 1;
  unsigned int v6 = v2 + 1;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  __src[0] = v12;
  __src[1] = (void *)0x400000000;
  int v17 = 0;
  v12[4] = 0;
  v12[5] = 0;
  int v13 = 0;
  char v16 = 0;
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v14 = 0;
  uint64_t v15 = v3;
  sub_1CC5A46F8((uint64_t)__src, 0);
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::compare();
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,true>::reset(uint64_t a1)
{
  BOOL result = sub_1CC0CEEC8((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  return result;
}

void *llvm::cfg::Update<llvm::BasicBlock *>::Update(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *BOOL result = a3;
  result[1] = a4 & 0xFFFFFFFFFFFFFFFBLL | (4 * a2);
  return result;
}

{
  *BOOL result = a3;
  result[1] = a4 & 0xFFFFFFFFFFFFFFFBLL | (4 * a2);
  return result;
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::getKind(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::getFrom(uint64_t a1)
{
  return *(void *)a1;
}

unint64_t llvm::cfg::Update<llvm::BasicBlock *>::getTo(uint64_t a1)
{
  return *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
}

BOOL llvm::cfg::Update<llvm::BasicBlock *>::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void sub_1CC5A43B0(uint64_t a1, uint64_t a2)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  sub_1CC0CEEC8((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v4;
  if (!a2)
  {
    uint64_t v5 = operator new(8uLL);
    __p = v5;
    *uint64_t v5 = 0;
    int v20 = v5 + 1;
    uint64_t v21 = v5 + 1;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v29;
    int v28 = 1;
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = v6 - 24;
    if (&v26 == (void **)a1 || !v6)
    {
      if (!v6) {
        uint64_t v7 = 0;
      }
      v29[0] = v7;
      int v27 = 1;
      if (&v26 == (void **)a1) {
        goto LABEL_7;
      }
      if (*(_DWORD *)(a1 + 12))
      {
LABEL_5:
        memcpy(*(void **)a1, v29, 8uLL);
        uint64_t v8 = v26;
        *(_DWORD *)(a1 + 8) = 1;
        int v27 = 0;
        if (v8 != v29) {
          free(v8);
        }
LABEL_7:
        sub_1CC5A946C((uint64_t)&__p, **(void **)a1);
        sub_1CC5A86A0((uint64_t *)&__p, a1, 0);
        goto LABEL_8;
      }
    }
    else
    {
      v29[0] = v6 - 24;
      int v27 = 1;
      if (*(_DWORD *)(a1 + 12)) {
        goto LABEL_5;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    sub_1CD5BD36C(*(void *)(a2 + 8), v14);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v15 = a2;
  }
  else
  {
    uint64_t v15 = 0;
  }
  char v16 = operator new(8uLL);
  __p = v16;
  *char v16 = 0;
  int v20 = v16 + 1;
  uint64_t v21 = v16 + 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unsigned int v24 = 0;
  uint64_t v25 = v15;
  uint64_t v26 = v29;
  int v28 = 1;
  uint64_t v17 = *(void *)(v4 + 80);
  uint64_t v18 = v17 - 24;
  if (&v26 == (void **)a1 || !v17)
  {
    if (!v17) {
      uint64_t v18 = 0;
    }
    v29[0] = v18;
    int v27 = 1;
    if (&v26 == (void **)a1) {
      goto LABEL_31;
    }
  }
  else
  {
    v29[0] = v17 - 24;
    int v27 = 1;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    **(void **)a1 = v18;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 12))
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(*(void **)a1, v29, 8uLL);
  }
  *(_DWORD *)(a1 + 8) = 1;
  int v27 = 0;
  if (v26 != v29) {
    free(v26);
  }
LABEL_31:
  sub_1CC5A946C((uint64_t)&__p, **(void **)a1);
  sub_1CC5A86A0((uint64_t *)&__p, a1, 0);
  *(unsigned char *)a2 = 1;
LABEL_8:
  if (*(_DWORD *)(a1 + 8)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode();
  }
  uint64_t v9 = v22;
  if (v24)
  {
    uint64_t v10 = 72 * v24;
    uint64_t v11 = (void *)(v22 + 56);
    do
    {
      uint64_t v12 = *(v11 - 7);
      if (v12 != -4096 && v12 != -8192)
      {
        int v13 = (void *)*(v11 - 2);
        if (v11 != v13) {
          free(v13);
        }
      }
      v11 += 9;
      v10 -= 72;
    }
    while (v10);
  }
  MEMORY[0x1D25D9CD0](v9, 8);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1CC5A46F8(uint64_t a1, uint64_t a2)
{
  v44[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 80);
  sub_1CC0CEEC8((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v4;
  if (a2)
  {
    uint64_t v20 = *(void *)(a2 + 16);
    if (v20)
    {
      sub_1CD5BD5D0(*(void *)(a2 + 8), v20);
      uint64_t v21 = a2;
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = operator new(8uLL);
    __p = v22;
    *uint64_t v22 = 0;
    int v36 = v22 + 1;
    int v37 = v22 + 1;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    unsigned int v40 = 0;
    uint64_t v41 = v21;
    sub_1CC5AA000((uint64_t *)&__src, a1, v21);
    uint64_t v23 = __src;
    if (&__src != (void **)a1)
    {
      if (__src == v44)
      {
        uint64_t v24 = *(unsigned int *)(a1 + 8);
        if (v24 >= v43)
        {
          int v32 = v43;
          if (v43) {
            memmove(*(void **)a1, __src, 8 * v43);
          }
          *(_DWORD *)(a1 + 8) = v32;
        }
        else
        {
          int v34 = v43;
          if (*(_DWORD *)(a1 + 12) < v43)
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v24)
          {
            uint64_t v33 = *(unsigned int *)(a1 + 8);
            memmove(*(void **)a1, __src, 8 * v24);
            uint64_t v25 = v33;
          }
          else
          {
            uint64_t v25 = 0;
          }
          if (v25 != v43) {
            memcpy((void *)(*(void *)a1 + 8 * v25), (char *)__src + 8 * v25, 8 * v43 - 8 * v25);
          }
          *(_DWORD *)(a1 + 8) = v34;
        }
      }
      else
      {
        if (*(void *)a1 != a1 + 16)
        {
          free(*(void **)a1);
          uint64_t v23 = __src;
        }
        *(void *)a1 = v23;
        *(void *)(a1 + 8) = v43;
        __src = v44;
        HIDWORD(v43) = 0;
      }
      LODWORD(v43) = 0;
      uint64_t v23 = __src;
    }
    if (v23 != v44) {
      free(v23);
    }
    sub_1CC5AB698((char **)&__p);
    uint64_t v26 = *(unsigned int *)(a1 + 8);
    if (v26)
    {
      int v27 = *(uint64_t **)a1;
      uint64_t v28 = 8 * v26;
      uint64_t v29 = 1;
      do
      {
        uint64_t v30 = *v27++;
        uint64_t v29 = sub_1CC5AB840((uint64_t)&__p, v30, v29, 0);
        v28 -= 8;
      }
      while (v28);
    }
    sub_1CC5AA8DC((uint64_t *)&__p, a1, 0);
    *(unsigned char *)a2 = 1;
  }
  else
  {
    uint64_t v5 = operator new(8uLL);
    __p = v5;
    *uint64_t v5 = 0;
    int v36 = v5 + 1;
    int v37 = v5 + 1;
    uint64_t v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    unsigned int v40 = 0;
    sub_1CC5AA000((uint64_t *)&__src, a1, 0);
    uint64_t v6 = __src;
    if (&__src != (void **)a1)
    {
      if (__src == v44)
      {
        int v7 = v43;
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        if (v8 >= v43)
        {
          if (v43) {
            memmove(*(void **)a1, v44, 8 * v43);
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 12) < v43)
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v8)
          {
            uint64_t v31 = *(unsigned int *)(a1 + 8);
            memmove(*(void **)a1, v44, 8 * v8);
            uint64_t v9 = v31;
          }
          else
          {
            uint64_t v9 = 0;
          }
          if (v9 != v43) {
            memcpy((void *)(*(void *)a1 + 8 * v9), (char *)__src + 8 * v9, 8 * v43 - 8 * v9);
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
      }
      else
      {
        if (*(void *)a1 != a1 + 16)
        {
          free(*(void **)a1);
          uint64_t v6 = __src;
        }
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v43;
        __src = v44;
        HIDWORD(v43) = 0;
      }
      LODWORD(v43) = 0;
      uint64_t v6 = __src;
    }
    if (v6 != v44) {
      free(v6);
    }
    sub_1CC5AB698((char **)&__p);
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)a1;
      uint64_t v12 = 8 * v10;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = *v11++;
        uint64_t v13 = sub_1CC5AB840((uint64_t)&__p, v14, v13, 0);
        v12 -= 8;
      }
      while (v12);
    }
    sub_1CC5AA8DC((uint64_t *)&__p, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode();
  }
  uint64_t v15 = v38;
  if (v40)
  {
    uint64_t v16 = 72 * v40;
    uint64_t v17 = (void *)(v38 + 56);
    do
    {
      uint64_t v18 = *(v17 - 7);
      if (v18 != -4096 && v18 != -8192)
      {
        int v19 = (void *)*(v17 - 2);
        if (v17 != v19) {
          free(v19);
        }
      }
      v17 += 9;
      v16 -= 72;
    }
    while (v16);
  }
  MEMORY[0x1D25D9CD0](v15, 8);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1CC5A4B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v93[64] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (v5)
  {
    unsigned int v9 = v5 - 1;
    LODWORD(v10) = (v5 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 != a3)
    {
      int v67 = 1;
      do
      {
        if (v12 == -4096) {
          return;
        }
        int v68 = v10 + v67++;
        uint64_t v10 = v68 & v9;
        uint64_t v12 = *(void *)(v4 + 16 * v10);
      }
      while (v12 != a3);
      uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
    }
    uint64_t v13 = (uint64_t *)(v4 + 16 * v5);
    if (v11 != v13)
    {
      uint64_t v14 = (uint64_t *)v11[1];
      if (v14)
      {
        *(unsigned char *)(a1 + 64) = 0;
        LODWORD(v15) = v9 & ((a4 >> 4) ^ (a4 >> 9));
        uint64_t v16 = (uint64_t *)(v4 + 16 * v15);
        uint64_t v17 = *v16;
        if (*v16 != a4)
        {
          int v69 = 1;
          do
          {
            if (v17 == -4096) {
              goto LABEL_7;
            }
            int v70 = v15 + v69++;
            uint64_t v15 = v70 & v9;
            uint64_t v17 = *(void *)(v4 + 16 * v15);
          }
          while (v17 != a4);
          uint64_t v16 = (uint64_t *)(v4 + 16 * v15);
        }
        if (v16 != v13)
        {
          uint64_t v65 = v16[1];
          if (v65)
          {
            uint64_t v66 = *v14;
            sub_1CC5ADF28(a1, a2, v66, v65);
            return;
          }
        }
LABEL_7:
        uint64_t v72 = (uint64_t *)(a1 + 24);
        uint64_t v73 = v14;
        v84 = v86;
        uint64_t v85 = 0x800000000;
        uint64_t v18 = (char *)operator new(8uLL);
        int v19 = 0;
        __p = v18;
        *(void *)uint64_t v18 = 0;
        v76 = v18 + 8;
        v77 = v18 + 8;
        v78[0] = 0;
        v78[1] = 0;
        unsigned int v79 = 0;
        uint64_t v74 = a2;
        uint64_t v80 = a2;
        v83[0] = a1;
        v83[1] = &v84;
        unsigned int v20 = 1;
        unsigned int v92 = 64;
        v93[0] = a4;
        v90 = v93;
        while (1)
        {
          uint64_t v21 = (void *)*((void *)v90 + v20 - 1);
          unsigned int v91 = v20 - 1;
          v82 = v21;
          if (v79)
          {
            unsigned int v22 = (v79 - 1) & ((v21 >> 4) ^ (v21 >> 9));
            uint64_t v23 = (uint64_t *)(v78[0] + 72 * v22);
            uint64_t v24 = *v23;
            if (v21 == (void *)*v23) {
              goto LABEL_10;
            }
            uint64_t v25 = 0;
            int v26 = 1;
            while (v24 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == -8192;
              }
              if (v27) {
                uint64_t v25 = v23;
              }
              unsigned int v28 = v22 + v26++;
              unsigned int v22 = v28 & (v79 - 1);
              uint64_t v23 = (uint64_t *)(v78[0] + 72 * v22);
              uint64_t v24 = *v23;
              if (v21 == (void *)*v23) {
                goto LABEL_10;
              }
            }
            if (v25) {
              uint64_t v58 = v25;
            }
            else {
              uint64_t v58 = v23;
            }
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v23 = sub_1CC5A99B8((uint64_t)v78, (uint64_t *)&v82, v58);
          *uint64_t v23 = (uint64_t)v21;
          *(_OWORD *)(v23 + 5) = 0u;
          *(_OWORD *)(v23 + 1) = 0u;
          *(_OWORD *)(v23 + 3) = 0u;
          *(_OWORD *)(v23 + 7) = 0u;
          v23[5] = (uint64_t)(v23 + 7);
          *((_DWORD *)v23 + 13) = 2;
LABEL_10:
          if (!*((_DWORD *)v23 + 2))
          {
            *((_DWORD *)v23 + 4) = ++v19;
            *((_DWORD *)v23 + 2) = v19;
            v23[3] = (uint64_t)v21;
            uint64_t v29 = v76;
            if (v76 >= v77)
            {
              uint64_t v50 = (char *)__p;
              uint64_t v51 = (v76 - (unsigned char *)__p) >> 3;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61) {
                abort();
              }
              uint64_t v53 = v77 - (unsigned char *)__p;
              if ((v77 - (unsigned char *)__p) >> 2 > v52) {
                unint64_t v52 = v53 >> 2;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                if (v54 >> 61) {
                  sub_1CB833614();
                }
                uint64_t v55 = (char *)operator new(8 * v54);
              }
              else
              {
                uint64_t v55 = 0;
              }
              uint64_t v56 = &v55[8 * v51];
              *(void *)uint64_t v56 = v21;
              uint64_t v30 = v56 + 8;
              if (v29 != v50)
              {
                do
                {
                  uint64_t v57 = *((void *)v29 - 1);
                  v29 -= 8;
                  *((void *)v56 - 1) = v57;
                  v56 -= 8;
                }
                while (v29 != v50);
                uint64_t v29 = (char *)__p;
              }
              __p = v56;
              v77 = &v55[8 * v54];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(void *)v76 = v21;
              uint64_t v30 = v29 + 8;
            }
            v76 = v30;
            if (v80) {
              sub_1CC0B002C(*(void *)(v80 + 8), v82, (uint64_t)&v87);
            }
            else {
              sub_1CC5A9B90((uint64_t)&v87, (uint64_t)v82);
            }
            uint64_t v31 = (uint64_t *)v87;
            int v32 = (char *)v87 + 8 * v88;
            if (!v88)
            {
LABEL_54:
              if (v31 != &v89) {
                free(v31);
              }
              goto LABEL_11;
            }
            while (2)
            {
              uint64_t v33 = (void *)*v31;
              v81 = v33;
              uint64_t v34 = v78[0];
              unsigned int v35 = v79;
              int v36 = sub_1CC129FE4(v78[0], v79, (uint64_t)v33);
              if ((uint64_t *)(v34 + 72 * v35) == v36)
              {
                int v37 = v82;
              }
              else
              {
                int v37 = v82;
                if (*((_DWORD *)v36 + 2))
                {
                  if (v33 != v82)
                  {
                    uint64_t v38 = v36 + 5;
                    unsigned int v40 = v36 + 6;
                    unint64_t v39 = *((unsigned int *)v36 + 12);
                    unint64_t v41 = *((unsigned int *)v36 + 13);
                    goto LABEL_31;
                  }
                  goto LABEL_33;
                }
              }
              if (!sub_1CD5BDB48(v83, (uint64_t)v37, (uint64_t)v33)) {
                goto LABEL_33;
              }
              if (v35)
              {
                unsigned int v42 = (v35 - 1) & ((v33 >> 4) ^ (v33 >> 9));
                uint64_t v43 = (uint64_t *)(v34 + 72 * v42);
                uint64_t v44 = *v43;
                if (v33 == (void *)*v43) {
                  goto LABEL_39;
                }
                uint64_t v45 = 0;
                int v46 = 1;
                while (v44 != -4096)
                {
                  if (v45) {
                    BOOL v47 = 0;
                  }
                  else {
                    BOOL v47 = v44 == -8192;
                  }
                  if (v47) {
                    uint64_t v45 = v43;
                  }
                  unsigned int v48 = v42 + v46++;
                  unsigned int v42 = v48 & (v35 - 1);
                  uint64_t v43 = (uint64_t *)(v34 + 72 * v42);
                  uint64_t v44 = *v43;
                  if (v33 == (void *)*v43) {
                    goto LABEL_39;
                  }
                }
                if (v45) {
                  int v49 = v45;
                }
                else {
                  int v49 = v43;
                }
              }
              else
              {
                int v49 = 0;
              }
              uint64_t v43 = sub_1CC5A99B8((uint64_t)v78, (uint64_t *)&v81, v49);
              *uint64_t v43 = (uint64_t)v33;
              *(_OWORD *)(v43 + 5) = 0u;
              *(_OWORD *)(v43 + 1) = 0u;
              *(_OWORD *)(v43 + 3) = 0u;
              *(_OWORD *)(v43 + 7) = 0u;
              v43[5] = (uint64_t)(v43 + 7);
              *((_DWORD *)v43 + 13) = 2;
LABEL_39:
              if (v91 >= (unint64_t)v92) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v90 + v91++) = v33;
              unsigned int v40 = v43 + 6;
              unint64_t v39 = *((unsigned int *)v43 + 12);
              *((_DWORD *)v43 + 3) = v19;
              uint64_t v38 = v43 + 5;
              unint64_t v41 = *((unsigned int *)v43 + 13);
LABEL_31:
              if (v39 >= v41) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v38 + 8 * v39) = v37;
              ++*v40;
LABEL_33:
              if (++v31 == (uint64_t *)v32)
              {
                uint64_t v31 = (uint64_t *)v87;
                goto LABEL_54;
              }
              continue;
            }
          }
LABEL_11:
          unsigned int v20 = v91;
          if (!v91)
          {
            if (v90 != v93) {
              free(v90);
            }
            sub_1CC5A86A0((uint64_t *)&__p, a1, 0);
            sub_1CC5A9228((uint64_t)&__p, a1, *v73);
            uint64_t v59 = v78[0];
            if (v79)
            {
              uint64_t v60 = v78[0] + 56;
              uint64_t v61 = 72 * v79;
              do
              {
                uint64_t v62 = *(void *)(v60 - 56);
                if (v62 != -4096 && v62 != -8192)
                {
                  uint64_t v63 = *(void **)(v60 - 16);
                  if ((void *)v60 != v63) {
                    free(v63);
                  }
                }
                v60 += 72;
                v61 -= 72;
              }
              while (v61);
            }
            MEMORY[0x1D25D9CD0](v59, 8);
            if (__p) {
              operator delete(__p);
            }
            uint64_t v64 = (char *)v84;
            if (v85)
            {
              uint64_t v71 = (char *)v84 + 16 * v85;
              do
              {
                v90 = *(void **)v64;
                v87 = 0;
                sub_1CB915048(v72, &v90, &v87);
                sub_1CC5ADF28(a1, v74, **((void **)v87 + 1), *((void *)v64 + 1));
                v64 += 16;
              }
              while (v64 != v71);
              uint64_t v64 = (char *)v84;
            }
            if (v64 != v86) {
              free(v64);
            }
            return;
          }
        }
      }
    }
  }
}

void sub_1CC5A5238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v381[64] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (int32x2_t *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6)
  {
    unsigned int v9 = v6 - 1;
    LODWORD(v10) = (v6 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11;
    if (*v11 != a3)
    {
      int v20 = 1;
      uint64_t v21 = *v11;
      LODWORD(v22) = v9 & ((a3 >> 4) ^ (a3 >> 9));
      do
      {
        if (v21 == -4096) {
          return;
        }
        int v23 = v22 + v20++;
        uint64_t v22 = v23 & v9;
        uint64_t v21 = *(void *)(v4 + 16 * v22);
      }
      while (v21 != a3);
      uint64_t v13 = (uint64_t *)(v4 + 16 * v22);
    }
    uint64_t v14 = (uint64_t *)(v4 + 16 * v6);
    if (v13 != v14)
    {
      uint64_t v15 = (uint64_t *)v13[1];
      if (v15)
      {
        LODWORD(v16) = v9 & ((a4 >> 4) ^ (a4 >> 9));
        uint64_t v17 = (uint64_t *)(v4 + 16 * v16);
        uint64_t v18 = *v17;
        int v19 = v17;
        if (*v17 != a4)
        {
          int v34 = 1;
          uint64_t v35 = *v17;
          LODWORD(v36) = v9 & ((a4 >> 4) ^ (a4 >> 9));
          do
          {
            if (v35 == -4096) {
              return;
            }
            int v37 = v36 + v34++;
            uint64_t v36 = v37 & v9;
            uint64_t v35 = *(void *)(v4 + 16 * v36);
          }
          while (v35 != a4);
          int v19 = (uint64_t *)(v4 + 16 * v36);
        }
        if (v19 != v14)
        {
          uint64_t v24 = v19[1];
          if (v24)
          {
            uint64_t v358 = v24;
            uint64_t v25 = *(void *)(*(void *)(a3 + 56) + 80);
            if (v25) {
              uint64_t v26 = v25 - 24;
            }
            else {
              uint64_t v26 = 0;
            }
            if (v26 != a3 && v26 != a4)
            {
              if (v12 != a3)
              {
                int v127 = 1;
                do
                {
                  if (v12 == -4096) {
                    goto LABEL_186;
                  }
                  int v128 = v10 + v127++;
                  uint64_t v10 = v128 & v9;
                  uint64_t v12 = *(void *)(v4 + 16 * v10);
                }
                while (v12 != a3);
                uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
              }
              if (v11 == v14) {
LABEL_186:
              }
                unsigned int v28 = 0;
              else {
                unsigned int v28 = (uint64_t *)v11[1];
              }
              if (v18 != a4)
              {
                int v129 = 1;
                do
                {
                  if (v18 == -4096) {
                    goto LABEL_187;
                  }
                  int v130 = v16 + v129++;
                  uint64_t v16 = v130 & v9;
                  uint64_t v18 = *(void *)(v4 + 16 * v16);
                }
                while (v18 != a4);
                uint64_t v17 = (uint64_t *)(v4 + 16 * v16);
              }
              if (v17 == v14) {
LABEL_187:
              }
                uint64_t v29 = 0;
              else {
                uint64_t v29 = (uint64_t *)v17[1];
              }
              if (v28 == v29)
              {
                uint64_t v29 = v28;
              }
              else
              {
                do
                {
                  unsigned int v30 = *((_DWORD *)v28 + 4);
                  unsigned int v31 = *((_DWORD *)v29 + 4);
                  BOOL v32 = v30 >= v31;
                  if (v30 >= v31) {
                    uint64_t v33 = v28;
                  }
                  else {
                    uint64_t v33 = v29;
                  }
                  if (!v32) {
                    uint64_t v29 = v28;
                  }
                  unsigned int v28 = (uint64_t *)v33[1];
                }
                while (v28 != v29);
              }
              uint64_t v26 = *v29;
            }
            LODWORD(v38) = ((v26 >> 4) ^ (v26 >> 9)) & v9;
            unint64_t v39 = (uint64_t *)(v4 + 16 * v38);
            uint64_t v40 = *v39;
            if (v26 != *v39)
            {
              int v125 = 1;
              do
              {
                if (v40 == -4096) {
                  goto LABEL_42;
                }
                int v126 = v38 + v125++;
                uint64_t v38 = v126 & v9;
                uint64_t v40 = *(void *)(v4 + 16 * v38);
              }
              while (v26 != v40);
              unint64_t v39 = (uint64_t *)(v4 + 16 * v38);
            }
            if (v39 == v14) {
LABEL_42:
            }
              uint64_t v41 = 0;
            else {
              uint64_t v41 = v39[1];
            }
            unsigned int v42 = (uint64_t *)v358;
            if (v358 == v41) {
              return;
            }
            *(unsigned char *)(a1 + 64) = 0;
            if (v15 == *(uint64_t **)(v358 + 8))
            {
              uint64_t v43 = *(void *)v358;
              if (a2)
              {
                sub_1CC0BB774(*(void *)(a2 + 8), *(void *)v358, (char **)&__src);
                uint64_t v44 = __src;
                LODWORD(v45) = v380;
              }
              else
              {
                for (uint64_t i = *(void *)(v43 + 8); i; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v345 = *(void *)(i + 24);
                  unsigned int v346 = *(unsigned __int8 *)(v345 + 16);
                  if (v345) {
                    BOOL v347 = v346 >= 0x1C;
                  }
                  else {
                    BOOL v347 = 0;
                  }
                  if (v347 && v346 - 29 < 0xB) {
                    break;
                  }
                }
                __src = v381;
                uint64_t v380 = 0x800000000;
                sub_1CBF846A4((uint64_t)&__src, i, 0);
                uint64_t v44 = __src;
                v349 = __src;
                if (v380)
                {
                  uint64_t v350 = 8 * v380;
                  v349 = __src;
                  do
                  {
                    if (!*v349) {
                      goto LABEL_533;
                    }
                    ++v349;
                    v350 -= 8;
                  }
                  while (v350);
                  v349 = (char *)__src + 8 * v380;
                }
LABEL_533:
                uint64_t v351 = ((char *)v349 - (unsigned char *)__src) >> 3;
                v352 = v349 + 1;
                if (v351 != v380 && v352 != (void *)((char *)__src + 8 * v380))
                {
                  uint64_t v354 = 8 * v380 - 8 * v351 - 8;
                  do
                  {
                    if (*v352) {
                      *v349++ = *v352;
                    }
                    ++v352;
                    v354 -= 8;
                  }
                  while (v354);
                  uint64_t v44 = __src;
                }
                unint64_t v45 = (unint64_t)((char *)v349 - v44) >> 3;
                LODWORD(v380) = v45;
              }
              if (!v45)
              {
LABEL_48:
                v357 = v5;
                if (v44 != (unsigned char *)v381) {
                  free(v44);
                }
                v370 = v372;
                uint64_t v371 = 0x1000000000;
                unsigned int v46 = *(_DWORD *)(v358 + 16);
                BOOL v47 = (char *)operator new(8uLL);
                unsigned int v48 = 0;
                __p = v47;
                *(void *)BOOL v47 = 0;
                v362 = v47 + 8;
                v363 = v47 + 8;
                v364[0] = 0;
                v364[1] = 0;
                unsigned int v365 = 0;
                uint64_t v366 = a2;
                uint64_t v49 = *(void *)v358;
                __src = v381;
                HIDWORD(v380) = 64;
                v381[0] = v49;
                unsigned int v50 = 1;
                while (1)
                {
                  uint64_t v51 = (char *)*((void *)__src + v50 - 1);
                  LODWORD(v380) = v50 - 1;
                  v369 = v51;
                  if (v365)
                  {
                    unsigned int v52 = (v365 - 1) & ((v51 >> 4) ^ (v51 >> 9));
                    uint64_t v53 = (uint64_t *)(v364[0] + 72 * v52);
                    uint64_t v54 = *v53;
                    if (v51 == (char *)*v53) {
                      goto LABEL_53;
                    }
                    uint64_t v55 = 0;
                    int v56 = 1;
                    while (v54 != -4096)
                    {
                      if (v55) {
                        BOOL v57 = 0;
                      }
                      else {
                        BOOL v57 = v54 == -8192;
                      }
                      if (v57) {
                        uint64_t v55 = v53;
                      }
                      unsigned int v58 = v52 + v56++;
                      unsigned int v52 = v58 & (v365 - 1);
                      uint64_t v53 = (uint64_t *)(v364[0] + 72 * v52);
                      uint64_t v54 = *v53;
                      if (v51 == (char *)*v53) {
                        goto LABEL_53;
                      }
                    }
                    if (v55) {
                      v100 = v55;
                    }
                    else {
                      v100 = v53;
                    }
                  }
                  else
                  {
                    v100 = 0;
                  }
                  uint64_t v53 = sub_1CC5A99B8((uint64_t)v364, (uint64_t *)&v369, v100);
                  *uint64_t v53 = (uint64_t)v51;
                  *(_OWORD *)(v53 + 5) = 0u;
                  *(_OWORD *)(v53 + 1) = 0u;
                  *(_OWORD *)(v53 + 3) = 0u;
                  *(_OWORD *)(v53 + 7) = 0u;
                  v53[5] = (uint64_t)(v53 + 7);
                  *((_DWORD *)v53 + 13) = 2;
LABEL_53:
                  if (!*((_DWORD *)v53 + 2))
                  {
                    unsigned int v59 = v48 + 1;
                    *((_DWORD *)v53 + 4) = v59;
                    *((_DWORD *)v53 + 2) = v59;
                    v53[3] = (uint64_t)v51;
                    uint64_t v60 = v362;
                    if (v362 >= v363)
                    {
                      unsigned int v92 = (char *)__p;
                      uint64_t v93 = (v362 - (unsigned char *)__p) >> 3;
                      unint64_t v94 = v93 + 1;
                      if ((unint64_t)(v93 + 1) >> 61) {
                        goto LABEL_564;
                      }
                      uint64_t v95 = v363 - (unsigned char *)__p;
                      if ((v363 - (unsigned char *)__p) >> 2 > v94) {
                        unint64_t v94 = v95 >> 2;
                      }
                      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v96 = v94;
                      }
                      if (v96)
                      {
                        if (v96 >> 61) {
                          goto LABEL_565;
                        }
                        v97 = (char *)operator new(8 * v96);
                      }
                      else
                      {
                        v97 = 0;
                      }
                      v98 = &v97[8 * v93];
                      *(void *)v98 = v51;
                      uint64_t v61 = v98 + 8;
                      if (v60 != v92)
                      {
                        do
                        {
                          uint64_t v99 = *((void *)v60 - 1);
                          v60 -= 8;
                          *((void *)v98 - 1) = v99;
                          v98 -= 8;
                        }
                        while (v60 != v92);
                        uint64_t v60 = (char *)__p;
                      }
                      __p = v98;
                      v363 = &v97[8 * v96];
                      if (v60) {
                        operator delete(v60);
                      }
                    }
                    else
                    {
                      *(void *)v362 = v51;
                      uint64_t v61 = v60 + 8;
                    }
                    v362 = v61;
                    unsigned int v62 = v59;
                    if (v366) {
                      sub_1CC0B002C(*(void *)(v366 + 8), v369, (uint64_t)&v373);
                    }
                    else {
                      sub_1CC5A9B90((uint64_t)&v373, (uint64_t)v369);
                    }
                    uint64_t v63 = (char **)v373;
                    uint64_t v64 = (char **)((char *)v373 + 8 * v374);
                    if (!v374)
                    {
LABEL_108:
                      if (v63 != &v375) {
                        free(v63);
                      }
                      unsigned int v48 = v62;
                      goto LABEL_54;
                    }
                    while (2)
                    {
                      uint64_t v65 = *v63;
                      v368 = v65;
                      uint64_t v66 = v364[0];
                      unsigned int v67 = v365;
                      int v68 = sub_1CC129FE4(v364[0], v365, (uint64_t)v65);
                      if ((uint64_t *)(v66 + 72 * v67) != v68 && *((_DWORD *)v68 + 2))
                      {
                        if (v65 != v369)
                        {
                          int v70 = v68 + 6;
                          unint64_t v69 = *((unsigned int *)v68 + 12);
                          if (v69 >= *((unsigned int *)v68 + 13)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          uint64_t v71 = (char **)(v68[5] + 8 * v69);
                          uint64_t v65 = v369;
                          goto LABEL_82;
                        }
LABEL_83:
                        if (++v63 == v64)
                        {
                          uint64_t v63 = (char **)v373;
                          goto LABEL_108;
                        }
                        continue;
                      }
                      break;
                    }
                    uint64_t v72 = *(void *)(a1 + 24);
                    uint64_t v73 = *(unsigned int *)(a1 + 40);
                    unsigned int v74 = v65 >> 4;
                    if (v73)
                    {
                      LODWORD(v75) = (v73 - 1) & (v74 ^ (v65 >> 9));
                      v76 = (char **)(v72 + 16 * v75);
                      v77 = *v76;
                      if (*v76 != v65)
                      {
                        int v85 = 1;
                        do
                        {
                          if (v77 == (char *)-4096) {
                            goto LABEL_94;
                          }
                          int v86 = v75 + v85++;
                          uint64_t v75 = v86 & (v73 - 1);
                          v77 = *(char **)(v72 + 16 * v75);
                        }
                        while (v77 != v65);
                        v76 = (char **)(v72 + 16 * v75);
                      }
                    }
                    else
                    {
LABEL_94:
                      v76 = (char **)(v72 + 16 * v73);
                    }
                    if (*((_DWORD *)v76[1] + 4) <= v46)
                    {
                      v78 = (char *)v370;
                      if (v371)
                      {
                        uint64_t v101 = 8 * v371;
                        v78 = (char *)v370;
                        do
                        {
                          if (*(char **)v78 == v65) {
                            goto LABEL_79;
                          }
                          v78 += 8;
                          v101 -= 8;
                        }
                        while (v101);
                        v78 = (char *)v370 + 8 * v371;
                      }
LABEL_79:
                      if (v371 != (v78 - (unsigned char *)v370) >> 3) {
                        goto LABEL_83;
                      }
                      if (v371 >= HIDWORD(v371)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v71 = (char **)((char *)v370 + 8 * v371);
                      int v70 = &v371;
LABEL_82:
                      *uint64_t v71 = v65;
                      ++*(_DWORD *)v70;
                      goto LABEL_83;
                    }
                    if (v67)
                    {
                      unsigned int v79 = v74 ^ (v65 >> 9);
                      unsigned int v80 = v67 - 1;
                      unsigned int v81 = v79 & (v67 - 1);
                      v82 = (uint64_t *)(v66 + 72 * v81);
                      uint64_t v83 = *v82;
                      if (v65 == (char *)*v82)
                      {
LABEL_87:
                        if (v380 >= (unint64_t)HIDWORD(v380)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)__src + v380) = v65;
                        int v70 = v82 + 6;
                        unint64_t v84 = *((unsigned int *)v82 + 12);
                        LODWORD(v380) = v380 + 1;
                        *((_DWORD *)v82 + 3) = v62;
                        uint64_t v65 = v369;
                        if (v84 >= *((unsigned int *)v82 + 13)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        uint64_t v71 = (char **)(v82[5] + 8 * v84);
                        goto LABEL_82;
                      }
                      v87 = 0;
                      int v88 = 1;
                      while (v83 != -4096)
                      {
                        if (v87) {
                          BOOL v89 = 0;
                        }
                        else {
                          BOOL v89 = v83 == -8192;
                        }
                        if (v89) {
                          v87 = v82;
                        }
                        unsigned int v90 = v81 + v88++;
                        unsigned int v81 = v90 & v80;
                        v82 = (uint64_t *)(v66 + 72 * v81);
                        uint64_t v83 = *v82;
                        if (v65 == (char *)*v82) {
                          goto LABEL_87;
                        }
                      }
                      if (v87) {
                        unsigned int v91 = v87;
                      }
                      else {
                        unsigned int v91 = v82;
                      }
                    }
                    else
                    {
                      unsigned int v91 = 0;
                    }
                    v82 = sub_1CC5A99B8((uint64_t)v364, (uint64_t *)&v368, v91);
                    uint64_t *v82 = (uint64_t)v65;
                    *(_OWORD *)(v82 + 5) = 0u;
                    *(_OWORD *)(v82 + 1) = 0u;
                    *(_OWORD *)(v82 + 3) = 0u;
                    *(_OWORD *)(v82 + 7) = 0u;
                    v82[5] = (uint64_t)(v82 + 7);
                    *((_DWORD *)v82 + 13) = 2;
                    goto LABEL_87;
                  }
LABEL_54:
                  unsigned int v50 = v380;
                  if (!v380)
                  {
                    if (__src != v381) {
                      free(__src);
                    }
                    if (v371)
                    {
                      v223 = v370;
                      uint64_t v224 = *(void *)(a1 + 24);
                      uint64_t v225 = *(unsigned int *)(a1 + 40);
                      unsigned int v226 = v225 - 1;
                      v227 = (uint64_t *)(v224 + 16 * v225);
                      uint64_t v228 = *(void *)v358;
                      uint64_t v102 = v358;
                      do
                      {
                        v229 = (uint64_t *)(v224 + 16 * v225);
                        if (!v225) {
                          goto LABEL_328;
                        }
                        LODWORD(v230) = ((*v223 >> 4) ^ (*v223 >> 9)) & v226;
                        v229 = (uint64_t *)(v224 + 16 * v230);
                        uint64_t v231 = *v229;
                        if (*v223 == *v229) {
                          goto LABEL_328;
                        }
                        int v249 = 1;
                        while (v231 != -4096)
                        {
                          int v250 = v230 + v249++;
                          uint64_t v230 = v250 & v226;
                          uint64_t v231 = *(void *)(v224 + 16 * v230);
                          if (*v223 == v231)
                          {
                            v229 = (uint64_t *)(v224 + 16 * v230);
                            goto LABEL_328;
                          }
                        }
                        v229 = (uint64_t *)(v224 + 16 * v225);
LABEL_328:
                        v232 = (uint64_t *)v229[1];
                        uint64_t v233 = *v232;
                        uint64_t v234 = *(void *)(*(void *)(*v232 + 56) + 80);
                        if (v234) {
                          uint64_t v235 = v234 - 24;
                        }
                        else {
                          uint64_t v235 = 0;
                        }
                        if (v235 != v233 && v235 != v228)
                        {
                          LODWORD(v237) = ((v233 >> 4) ^ (v233 >> 9)) & v226;
                          v238 = (uint64_t *)(v224 + 16 * v237);
                          uint64_t v239 = *v238;
                          if (*v238 != v233)
                          {
                            int v257 = 1;
                            do
                            {
                              if (v239 == -4096) {
                                goto LABEL_547;
                              }
                              int v258 = v237 + v257++;
                              uint64_t v237 = v258 & v226;
                              uint64_t v239 = *(void *)(v224 + 16 * v237);
                            }
                            while (v239 != v233);
                            v238 = (uint64_t *)(v224 + 16 * v237);
                          }
                          if (v238 == v227) {
LABEL_547:
                          }
                            v240 = 0;
                          else {
                            v240 = (uint64_t *)v238[1];
                          }
                          LODWORD(v241) = ((v228 >> 4) ^ (v228 >> 9)) & v226;
                          v242 = (uint64_t *)(v224 + 16 * v241);
                          uint64_t v243 = *v242;
                          if (*v242 != v228)
                          {
                            int v259 = 1;
                            do
                            {
                              if (v243 == -4096) {
                                goto LABEL_548;
                              }
                              int v260 = v241 + v259++;
                              uint64_t v241 = v260 & v226;
                              uint64_t v243 = *(void *)(v224 + 16 * v241);
                            }
                            while (v243 != v228);
                            v242 = (uint64_t *)(v224 + 16 * v241);
                          }
                          if (v242 == v227) {
LABEL_548:
                          }
                            v244 = 0;
                          else {
                            v244 = (uint64_t *)v242[1];
                          }
                          if (v240 == v244)
                          {
                            v244 = v240;
                          }
                          else
                          {
                            do
                            {
                              unsigned int v245 = *((_DWORD *)v240 + 4);
                              unsigned int v246 = *((_DWORD *)v244 + 4);
                              BOOL v247 = v245 >= v246;
                              if (v245 >= v246) {
                                v248 = v240;
                              }
                              else {
                                v248 = v244;
                              }
                              if (!v247) {
                                v244 = v240;
                              }
                              v240 = (uint64_t *)v248[1];
                            }
                            while (v240 != v244);
                          }
                          uint64_t v235 = *v244;
                        }
                        if (!v225) {
                          goto LABEL_358;
                        }
                        LODWORD(v251) = ((v235 >> 4) ^ (v235 >> 9)) & v226;
                        v252 = (uint64_t *)(v224 + 16 * v251);
                        uint64_t v253 = *v252;
                        if (v235 != *v252)
                        {
                          int v255 = 1;
                          do
                          {
                            if (v253 == -4096) {
                              goto LABEL_358;
                            }
                            int v256 = v251 + v255++;
                            uint64_t v251 = v256 & v226;
                            uint64_t v253 = *(void *)(v224 + 16 * v251);
                          }
                          while (v235 != v253);
                          v252 = (uint64_t *)(v224 + 16 * v251);
                        }
                        if (v252 != v227) {
                          uint64_t v254 = v252[1];
                        }
                        else {
LABEL_358:
                        }
                          uint64_t v254 = 0;
                        if ((uint64_t *)v254 != v232 && *(_DWORD *)(v254 + 16) < *(_DWORD *)(v102 + 16)) {
                          uint64_t v102 = v254;
                        }
                        ++v223;
                      }
                      while (v223 != (void *)((char *)v370 + 8 * v371));
                    }
                    else
                    {
                      uint64_t v102 = v358;
                    }
                    if (!*(void *)(v102 + 8))
                    {
                      sub_1CC5A43B0(a1, a2);
                      goto LABEL_162;
                    }
                    if (v48)
                    {
                      uint64_t v103 = v48;
                      v104 = __p;
                      do
                      {
                        uint64_t v105 = *(unsigned int *)(a1 + 40);
                        if (!v105) {
                          goto LABEL_148;
                        }
                        uint64_t v106 = v104[v103];
                        uint64_t v107 = *(void *)(a1 + 24);
                        LODWORD(v108) = ((v106 >> 4) ^ (v106 >> 9)) & (v105 - 1);
                        v109 = (uint64_t *)(v107 + 16 * v108);
                        uint64_t v110 = *v109;
                        if (v106 != *v109)
                        {
                          int v118 = 1;
                          do
                          {
                            if (v110 == -4096) {
                              goto LABEL_148;
                            }
                            int v119 = v108 + v118++;
                            uint64_t v108 = v119 & (v105 - 1);
                            uint64_t v110 = *(void *)(v107 + 16 * v108);
                          }
                          while (v106 != v110);
                          v109 = (uint64_t *)(v107 + 16 * v108);
                        }
                        if (v109 != (uint64_t *)(v107 + 16 * v105)) {
                          uint64_t v111 = v109[1];
                        }
                        else {
LABEL_148:
                        }
                          uint64_t v111 = 0;
                        uint64_t v112 = *(void *)(v111 + 8);
                        v113 = *(uint64_t **)(v112 + 24);
                        uint64_t v114 = *(unsigned int *)(v112 + 32);
                        v115 = &v113[v114];
                        if (v114)
                        {
                          uint64_t v116 = 8 * v114;
                          do
                          {
                            if (*v113 == v111) {
                              goto LABEL_154;
                            }
                            ++v113;
                            v116 -= 8;
                          }
                          while (v116);
                          v113 = v115;
                        }
LABEL_154:
                        uint64_t v117 = *v113;
                        uint64_t *v113 = *(v115 - 1);
                        *(v115 - 1) = v117;
                        *(_DWORD *)(v112 + 32) = v114 - 1;
                        __src = *(void **)v111;
                        sub_1CB931314(v357, &__src);
                        --v103;
                      }
                      while (v103);
                    }
                    if (v102 == v358) {
                      goto LABEL_162;
                    }
                    unsigned int v131 = *(_DWORD *)(v102 + 16);
                    v359 = *(uint64_t **)(v102 + 8);
                    __src = 0;
                    sub_1CC5ADD44((char **)&__p, &__src, &v380);
                    sub_1CC5AF6F8(v364);
                    v132 = *(char **)v102;
                    v369 = v132;
                    __src = v381;
                    v381[0] = v132;
                    uint64_t v380 = 0x4000000001;
                    if (v365)
                    {
                      int v133 = v365 - 1;
                      unsigned int v134 = (v365 - 1) & ((v132 >> 4) ^ (v132 >> 9));
                      v135 = (uint64_t *)(v364[0] + 72 * v134);
                      v136 = (void *)*v135;
                      if ((char *)*v135 != v132)
                      {
                        int v137 = 1;
                        v138 = (char *)*v135;
                        unsigned int v139 = v133 & ((v132 >> 4) ^ (v132 >> 9));
                        do
                        {
                          if (v138 == (char *)-4096) {
                            goto LABEL_202;
                          }
                          unsigned int v140 = v139 + v137++;
                          unsigned int v139 = v140 & v133;
                          v138 = *(char **)(v364[0] + 72 * v139);
                        }
                        while (v138 != v132);
                        v141 = 0;
                        int v142 = 1;
                        while (v136 != (void *)-4096)
                        {
                          if (v141) {
                            BOOL v143 = 0;
                          }
                          else {
                            BOOL v143 = v136 == (void *)-8192;
                          }
                          if (v143) {
                            v141 = v135;
                          }
                          unsigned int v144 = v134 + v142++;
                          unsigned int v134 = v144 & v133;
                          v135 = (uint64_t *)(v364[0] + 72 * v134);
                          v136 = (void *)*v135;
                          if ((char *)*v135 == v132) {
                            goto LABEL_201;
                          }
                        }
                        if (v141) {
                          v355 = v141;
                        }
                        else {
                          v355 = v135;
                        }
                        v356 = sub_1CC5A99B8((uint64_t)v364, (uint64_t *)&v369, v355);
                        uint64_t *v356 = (uint64_t)v132;
                        *(_OWORD *)(v356 + 5) = 0u;
                        *(_OWORD *)(v356 + 3) = 0u;
                        *(_OWORD *)(v356 + 1) = 0u;
                        *(_OWORD *)(v356 + 7) = 0u;
                        v356[5] = (uint64_t)(v356 + 7);
                        *((_DWORD *)v356 + 13) = 2;
                        unsigned int v145 = v380;
                        if (!v380) {
                          goto LABEL_555;
                        }
                        goto LABEL_203;
                      }
LABEL_201:
                      *(_DWORD *)(v364[0] + 72 * v134 + 12) = 0;
                    }
LABEL_202:
                    unsigned int v145 = 1;
LABEL_203:
                    int v146 = 0;
                    while (1)
                    {
                      v147 = (char *)*((void *)__src + v145 - 1);
                      LODWORD(v380) = v145 - 1;
                      v368 = v147;
                      if (!v365) {
                        break;
                      }
                      unsigned int v148 = (v365 - 1) & ((v147 >> 4) ^ (v147 >> 9));
                      v149 = (uint64_t *)(v364[0] + 72 * v148);
                      uint64_t v150 = *v149;
                      if (v147 != (char *)*v149)
                      {
                        v151 = 0;
                        int v152 = 1;
                        while (v150 != -4096)
                        {
                          if (v151) {
                            BOOL v153 = 0;
                          }
                          else {
                            BOOL v153 = v150 == -8192;
                          }
                          if (v153) {
                            v151 = v149;
                          }
                          unsigned int v154 = v148 + v152++;
                          unsigned int v148 = v154 & (v365 - 1);
                          v149 = (uint64_t *)(v364[0] + 72 * v148);
                          uint64_t v150 = *v149;
                          if (v147 == (char *)*v149) {
                            goto LABEL_206;
                          }
                        }
                        if (v151) {
                          v193 = v151;
                        }
                        else {
                          v193 = v149;
                        }
                        goto LABEL_278;
                      }
LABEL_206:
                      if (*((_DWORD *)v149 + 2)) {
                        goto LABEL_207;
                      }
                      *((_DWORD *)v149 + 4) = ++v146;
                      *((_DWORD *)v149 + 2) = v146;
                      v149[3] = (uint64_t)v147;
                      v155 = v362;
                      if (v362 >= v363)
                      {
                        v185 = (char *)__p;
                        uint64_t v186 = (v362 - (unsigned char *)__p) >> 3;
                        unint64_t v187 = v186 + 1;
                        if ((unint64_t)(v186 + 1) >> 61) {
                          goto LABEL_564;
                        }
                        uint64_t v188 = v363 - (unsigned char *)__p;
                        if ((v363 - (unsigned char *)__p) >> 2 > v187) {
                          unint64_t v187 = v188 >> 2;
                        }
                        if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v189 = v187;
                        }
                        if (v189)
                        {
                          if (v189 >> 61) {
                            goto LABEL_565;
                          }
                          v190 = (char *)operator new(8 * v189);
                        }
                        else
                        {
                          v190 = 0;
                        }
                        v191 = &v190[8 * v186];
                        *(void *)v191 = v147;
                        v156 = v191 + 8;
                        if (v155 != v185)
                        {
                          do
                          {
                            uint64_t v192 = *((void *)v155 - 1);
                            v155 -= 8;
                            *((void *)v191 - 1) = v192;
                            v191 -= 8;
                          }
                          while (v155 != v185);
                          v155 = (char *)__p;
                        }
                        __p = v191;
                        v363 = &v190[8 * v189];
                        if (v155) {
                          operator delete(v155);
                        }
                      }
                      else
                      {
                        *(void *)v362 = v147;
                        v156 = v155 + 8;
                      }
                      v362 = v156;
                      if (v366) {
                        sub_1CC0B002C(*(void *)(v366 + 8), v368, (uint64_t)&v373);
                      }
                      else {
                        sub_1CC5A9B90((uint64_t)&v373, (uint64_t)v368);
                      }
                      v157 = (char **)v373;
                      v158 = (char **)((char *)v373 + 8 * v374);
                      if (!v374) {
                        goto LABEL_258;
                      }
                      do
                      {
                        v159 = *v157;
                        v367 = v159;
                        uint64_t v160 = v364[0];
                        unsigned int v161 = v365;
                        v162 = sub_1CC129FE4(v364[0], v365, (uint64_t)v159);
                        if ((uint64_t *)(v160 + 72 * v161) != v162 && *((_DWORD *)v162 + 2))
                        {
                          v163 = v368;
                          if (v159 == v368) {
                            goto LABEL_238;
                          }
                          v164 = v162 + 5;
                          v166 = v162 + 6;
                          unint64_t v165 = *((unsigned int *)v162 + 12);
                          unint64_t v167 = *((unsigned int *)v162 + 13);
                          goto LABEL_236;
                        }
                        uint64_t v168 = *(void *)(a1 + 24);
                        uint64_t v169 = *(unsigned int *)(a1 + 40);
                        unsigned int v170 = v159 >> 4;
                        if (!v169) {
                          goto LABEL_253;
                        }
                        LODWORD(v171) = (v169 - 1) & (v170 ^ (v159 >> 9));
                        v172 = (char **)(v168 + 16 * v171);
                        v173 = *v172;
                        if (*v172 != v159)
                        {
                          int v178 = 1;
                          while (v173 != (char *)-4096)
                          {
                            int v179 = v171 + v178++;
                            uint64_t v171 = v179 & (v169 - 1);
                            v173 = *(char **)(v168 + 16 * v171);
                            if (v173 == v159)
                            {
                              v172 = (char **)(v168 + 16 * v171);
                              goto LABEL_229;
                            }
                          }
LABEL_253:
                          v172 = (char **)(v168 + 16 * v169);
                        }
LABEL_229:
                        if (v172 == (char **)(v168 + 16 * v169)) {
                          goto LABEL_238;
                        }
                        v174 = v172[1];
                        if (!v174 || *((_DWORD *)v174 + 4) <= v131) {
                          goto LABEL_238;
                        }
                        if (!v161)
                        {
                          v184 = 0;
LABEL_257:
                          v176 = sub_1CC5A99B8((uint64_t)v364, (uint64_t *)&v367, v184);
                          uint64_t *v176 = (uint64_t)v159;
                          *(_OWORD *)(v176 + 5) = 0u;
                          *(_OWORD *)(v176 + 1) = 0u;
                          *(_OWORD *)(v176 + 3) = 0u;
                          *(_OWORD *)(v176 + 7) = 0u;
                          v176[5] = (uint64_t)(v176 + 7);
                          *((_DWORD *)v176 + 13) = 2;
                          goto LABEL_234;
                        }
                        unsigned int v175 = (v161 - 1) & (v170 ^ (v159 >> 9));
                        v176 = (uint64_t *)(v160 + 72 * v175);
                        uint64_t v177 = *v176;
                        if (v159 != (char *)*v176)
                        {
                          v180 = 0;
                          int v181 = 1;
                          while (v177 != -4096)
                          {
                            if (v180) {
                              BOOL v182 = 0;
                            }
                            else {
                              BOOL v182 = v177 == -8192;
                            }
                            if (v182) {
                              v180 = v176;
                            }
                            unsigned int v183 = v175 + v181++;
                            unsigned int v175 = v183 & (v161 - 1);
                            v176 = (uint64_t *)(v160 + 72 * v175);
                            uint64_t v177 = *v176;
                            if (v159 == (char *)*v176) {
                              goto LABEL_234;
                            }
                          }
                          if (v180) {
                            v184 = v180;
                          }
                          else {
                            v184 = v176;
                          }
                          goto LABEL_257;
                        }
LABEL_234:
                        if (v380 >= (unint64_t)HIDWORD(v380)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)__src + v380) = v159;
                        v166 = v176 + 6;
                        unint64_t v165 = *((unsigned int *)v176 + 12);
                        LODWORD(v380) = v380 + 1;
                        *((_DWORD *)v176 + 3) = v146;
                        v164 = v176 + 5;
                        v163 = v368;
                        unint64_t v167 = *((unsigned int *)v176 + 13);
LABEL_236:
                        if (v165 >= v167) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*v164 + 8 * v165) = v163;
                        ++*v166;
LABEL_238:
                        ++v157;
                      }
                      while (v157 != v158);
                      v157 = (char **)v373;
LABEL_258:
                      if (v157 != &v375) {
                        free(v157);
                      }
LABEL_207:
                      unsigned int v145 = v380;
                      if (!v380)
                      {
LABEL_555:
                        if (__src != v381) {
                          free(__src);
                        }
                        sub_1CC5A86A0((uint64_t *)&__p, a1, v131);
                        sub_1CC5AF354((uint64_t *)&__p, a1, *v359);
LABEL_162:
                        uint64_t v120 = v364[0];
                        if (v365)
                        {
                          uint64_t v121 = v364[0] + 56;
                          uint64_t v122 = 72 * v365;
                          do
                          {
                            uint64_t v123 = *(void *)(v121 - 56);
                            if (v123 != -4096 && v123 != -8192)
                            {
                              v124 = *(void **)(v121 - 16);
                              if ((void *)v121 != v124) {
                                free(v124);
                              }
                            }
                            v121 += 72;
                            v122 -= 72;
                          }
                          while (v122);
                        }
                        MEMORY[0x1D25D9CD0](v120, 8);
                        if (__p) {
                          operator delete(__p);
                        }
                        if (v370 != v372) {
                          free(v370);
                        }
                        return;
                      }
                    }
                    v193 = 0;
LABEL_278:
                    v149 = sub_1CC5A99B8((uint64_t)v364, (uint64_t *)&v368, v193);
                    uint64_t *v149 = (uint64_t)v147;
                    *(_OWORD *)(v149 + 5) = 0u;
                    *(_OWORD *)(v149 + 1) = 0u;
                    *(_OWORD *)(v149 + 3) = 0u;
                    *(_OWORD *)(v149 + 7) = 0u;
                    v149[5] = (uint64_t)(v149 + 7);
                    *((_DWORD *)v149 + 13) = 2;
                    goto LABEL_206;
                  }
                }
              }
              v194 = (uint64_t *)&v44[8 * v45];
              uint64_t v4 = *(void *)(a1 + 24);
              uint64_t v6 = *(unsigned int *)(a1 + 40);
              unsigned int v195 = v6 - 1;
              v196 = (uint64_t *)(v4 + 16 * v6);
              v197 = (uint64_t *)v44;
              while (1)
              {
                if (v6)
                {
                  uint64_t v198 = *v197;
                  LODWORD(v199) = ((*v197 >> 4) ^ (*v197 >> 9)) & v195;
                  v200 = (uint64_t *)(v4 + 16 * v199);
                  uint64_t v201 = *v200;
                  v202 = v200;
                  if (*v197 != *v200)
                  {
                    int v215 = 1;
                    uint64_t v216 = *v200;
                    LODWORD(v217) = ((*v197 >> 4) ^ (*v197 >> 9)) & v195;
                    do
                    {
                      if (v216 == -4096) {
                        goto LABEL_315;
                      }
                      int v218 = v217 + v215++;
                      uint64_t v217 = v218 & v195;
                      uint64_t v216 = *(void *)(v4 + 16 * v217);
                    }
                    while (v198 != v216);
                    v202 = (uint64_t *)(v4 + 16 * v217);
                  }
                  if (v202 != v196 && v202[1])
                  {
                    uint64_t v203 = *(void *)(*(void *)(v43 + 56) + 80);
                    if (v203) {
                      uint64_t v204 = v203 - 24;
                    }
                    else {
                      uint64_t v204 = 0;
                    }
                    if (v204 != v43 && v204 != v198)
                    {
                      LODWORD(v206) = v195 & ((v43 >> 4) ^ (v43 >> 9));
                      v207 = (uint64_t *)(v4 + 16 * v206);
                      uint64_t v208 = *v207;
                      if (*v207 != v43)
                      {
                        int v219 = 1;
                        do
                        {
                          if (v208 == -4096) {
                            goto LABEL_549;
                          }
                          int v220 = v206 + v219++;
                          uint64_t v206 = v220 & v195;
                          uint64_t v208 = *(void *)(v4 + 16 * v206);
                        }
                        while (v208 != v43);
                        v207 = (uint64_t *)(v4 + 16 * v206);
                      }
                      if (v207 == v196) {
LABEL_549:
                      }
                        v209 = 0;
                      else {
                        v209 = (uint64_t *)v207[1];
                      }
                      if (v198 != v201)
                      {
                        int v221 = 1;
                        do
                        {
                          if (v201 == -4096) {
                            goto LABEL_550;
                          }
                          int v222 = v199 + v221++;
                          uint64_t v199 = v222 & v195;
                          uint64_t v201 = *(void *)(v4 + 16 * v199);
                        }
                        while (v201 != v198);
                        v200 = (uint64_t *)(v4 + 16 * v199);
                      }
                      if (v200 == v196) {
LABEL_550:
                      }
                        v210 = 0;
                      else {
                        v210 = (uint64_t *)v200[1];
                      }
                      if (v209 == v210)
                      {
                        v210 = v209;
                      }
                      else
                      {
                        do
                        {
                          unsigned int v211 = *((_DWORD *)v209 + 4);
                          unsigned int v212 = *((_DWORD *)v210 + 4);
                          BOOL v213 = v211 >= v212;
                          if (v211 >= v212) {
                            v214 = v209;
                          }
                          else {
                            v214 = v210;
                          }
                          if (!v213) {
                            v210 = v209;
                          }
                          v209 = (uint64_t *)v214[1];
                        }
                        while (v209 != v210);
                      }
                      uint64_t v204 = *v210;
                    }
                    if (v204 != v43) {
                      break;
                    }
                  }
                }
LABEL_315:
                if (++v197 == v194) {
                  goto LABEL_48;
                }
              }
              if (v44 != (unsigned char *)v381)
              {
                free(v44);
                uint64_t v4 = *(void *)(a1 + 24);
                LODWORD(v6) = *(_DWORD *)(a1 + 40);
              }
              unsigned int v42 = (uint64_t *)v358;
            }
            uint64_t v261 = *v15;
            uint64_t v262 = *v42;
            uint64_t v263 = *(void *)(*(void *)(*v15 + 56) + 80);
            if (v263) {
              uint64_t v264 = v263 - 24;
            }
            else {
              uint64_t v264 = 0;
            }
            BOOL v265 = v264 == v261 || v264 == v262;
            v266 = (uint64_t *)(v4 + 16 * v6);
            if (!v265)
            {
              if (v6)
              {
                LODWORD(v267) = (v6 - 1) & ((v261 >> 4) ^ (v261 >> 9));
                v268 = (uint64_t *)(v4 + 16 * v267);
                uint64_t v269 = *v268;
                if (*v268 != v261)
                {
                  int v340 = 1;
                  do
                  {
                    if (v269 == -4096) {
                      goto LABEL_515;
                    }
                    int v341 = v267 + v340++;
                    uint64_t v267 = v341 & (v6 - 1);
                    uint64_t v269 = *(void *)(v4 + 16 * v267);
                  }
                  while (v269 != v261);
                  v268 = (uint64_t *)(v4 + 16 * v267);
                }
              }
              else
              {
LABEL_515:
                v268 = (uint64_t *)(v4 + 16 * v6);
              }
              if (v268 == v266) {
                v270 = 0;
              }
              else {
                v270 = (uint64_t *)v268[1];
              }
              if (!v6) {
                goto LABEL_514;
              }
              LODWORD(v271) = (v6 - 1) & ((v262 >> 4) ^ (v262 >> 9));
              v272 = (uint64_t *)(v4 + 16 * v271);
              uint64_t v273 = *v272;
              if (*v272 != v262)
              {
                int v342 = 1;
                do
                {
                  if (v273 == -4096) {
                    goto LABEL_514;
                  }
                  int v343 = v271 + v342++;
                  uint64_t v271 = v343 & (v6 - 1);
                  uint64_t v273 = *(void *)(v4 + 16 * v271);
                }
                while (v273 != v262);
                v272 = (uint64_t *)(v4 + 16 * v271);
              }
              if (v272 == v266) {
LABEL_514:
              }
                v274 = 0;
              else {
                v274 = (uint64_t *)v272[1];
              }
              if (v270 == v274)
              {
                v274 = v270;
              }
              else
              {
                do
                {
                  unsigned int v275 = *((_DWORD *)v270 + 4);
                  unsigned int v276 = *((_DWORD *)v274 + 4);
                  BOOL v277 = v275 >= v276;
                  if (v275 >= v276) {
                    v278 = v270;
                  }
                  else {
                    v278 = v274;
                  }
                  if (!v277) {
                    v274 = v270;
                  }
                  v270 = (uint64_t *)v278[1];
                }
                while (v270 != v274);
              }
              uint64_t v264 = *v274;
            }
            if (!v6) {
              goto LABEL_513;
            }
            unsigned int v279 = v6 - 1;
            LODWORD(v6) = ((v264 >> 4) ^ (v264 >> 9)) & (v6 - 1);
            v280 = (uint64_t *)(v4 + 16 * v6);
            uint64_t v281 = *v280;
            if (v264 != *v280)
            {
              int v338 = 1;
              do
              {
                if (v281 == -4096) {
                  goto LABEL_513;
                }
                int v339 = v6 + v338++;
                uint64_t v6 = v339 & v279;
                uint64_t v281 = *(void *)(v4 + 16 * v6);
              }
              while (v264 != v281);
              v280 = (uint64_t *)(v4 + 16 * v6);
            }
            if (v280 == v266) {
LABEL_513:
            }
              uint64_t v282 = 0;
            else {
              uint64_t v282 = v280[1];
            }
            if (!*(void *)(v282 + 8))
            {
              sub_1CC5A43B0(a1, a2);
              return;
            }
            v360 = *(uint64_t **)(v282 + 8);
            unsigned int v283 = *(_DWORD *)(v282 + 16);
            v284 = (char *)operator new(8uLL);
            int v285 = 0;
            v373 = v284;
            *(void *)v284 = 0;
            v374 = v284 + 8;
            v375 = v284 + 8;
            v376[0] = 0;
            v376[1] = 0;
            unsigned int v377 = 0;
            uint64_t v378 = a2;
            unsigned int v286 = 1;
            HIDWORD(v380) = 64;
            v381[0] = v264;
            __src = v381;
            while (1)
            {
              v287 = (void *)*((void *)__src + v286 - 1);
              LODWORD(v380) = v286 - 1;
              __p = v287;
              if (v377)
              {
                unsigned int v288 = (v377 - 1) & ((v287 >> 4) ^ (v287 >> 9));
                v289 = (uint64_t *)(v376[0] + 72 * v288);
                uint64_t v290 = *v289;
                if (v287 == (void *)*v289) {
                  goto LABEL_414;
                }
                v291 = 0;
                int v292 = 1;
                while (v290 != -4096)
                {
                  if (v291) {
                    BOOL v293 = 0;
                  }
                  else {
                    BOOL v293 = v290 == -8192;
                  }
                  if (v293) {
                    v291 = v289;
                  }
                  unsigned int v294 = v288 + v292++;
                  unsigned int v288 = v294 & (v377 - 1);
                  v289 = (uint64_t *)(v376[0] + 72 * v288);
                  uint64_t v290 = *v289;
                  if (v287 == (void *)*v289) {
                    goto LABEL_414;
                  }
                }
                if (v291) {
                  v307 = v291;
                }
                else {
                  v307 = v289;
                }
              }
              else
              {
                v307 = 0;
              }
              v289 = sub_1CC5A99B8((uint64_t)v376, (uint64_t *)&__p, v307);
              uint64_t *v289 = (uint64_t)v287;
              *(_OWORD *)(v289 + 5) = 0u;
              *(_OWORD *)(v289 + 1) = 0u;
              *(_OWORD *)(v289 + 3) = 0u;
              *(_OWORD *)(v289 + 7) = 0u;
              v289[5] = (uint64_t)(v289 + 7);
              *((_DWORD *)v289 + 13) = 2;
LABEL_414:
              if (!*((_DWORD *)v289 + 2))
              {
                *((_DWORD *)v289 + 4) = ++v285;
                *((_DWORD *)v289 + 2) = v285;
                v289[3] = (uint64_t)v287;
                v295 = v374;
                if (v374 >= v375)
                {
                  v299 = (char *)v373;
                  uint64_t v300 = (v374 - (unsigned char *)v373) >> 3;
                  unint64_t v301 = v300 + 1;
                  if ((unint64_t)(v300 + 1) >> 61) {
LABEL_564:
                  }
                    abort();
                  uint64_t v302 = v375 - (unsigned char *)v373;
                  if ((v375 - (unsigned char *)v373) >> 2 > v301) {
                    unint64_t v301 = v302 >> 2;
                  }
                  if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v303 = v301;
                  }
                  if (v303)
                  {
                    if (v303 >> 61) {
LABEL_565:
                    }
                      sub_1CB833614();
                    v304 = (char *)operator new(8 * v303);
                  }
                  else
                  {
                    v304 = 0;
                  }
                  v305 = &v304[8 * v300];
                  *(void *)v305 = v287;
                  v296 = v305 + 8;
                  if (v295 != v299)
                  {
                    do
                    {
                      uint64_t v306 = *((void *)v295 - 1);
                      v295 -= 8;
                      *((void *)v305 - 1) = v306;
                      v305 -= 8;
                    }
                    while (v295 != v299);
                    v295 = (char *)v373;
                  }
                  v373 = v305;
                  v375 = &v304[8 * v303];
                  if (v295) {
                    operator delete(v295);
                  }
                }
                else
                {
                  *(void *)v374 = v287;
                  v296 = v295 + 8;
                }
                v374 = v296;
                if (v378) {
                  sub_1CC0B002C(*(void *)(v378 + 8), __p, (uint64_t)&v370);
                }
                else {
                  sub_1CC5A9B90((uint64_t)&v370, (uint64_t)__p);
                }
                v297 = (char **)v370;
                v298 = (char **)((char *)v370 + 8 * v371);
                if (!v371)
                {
LABEL_486:
                  if (v297 != (char **)v372) {
                    free(v297);
                  }
                  goto LABEL_415;
                }
                while (2)
                {
                  v321 = *v297;
                  v369 = v321;
                  uint64_t v322 = v376[0];
                  unsigned int v323 = v377;
                  v324 = sub_1CC129FE4(v376[0], v377, (uint64_t)v321);
                  if ((uint64_t *)(v322 + 72 * v323) != v324 && *((_DWORD *)v324 + 2))
                  {
                    v325 = __p;
                    if (v321 != __p)
                    {
                      v326 = v324 + 5;
                      v328 = v324 + 6;
                      unint64_t v327 = *((unsigned int *)v324 + 12);
                      unint64_t v329 = *((unsigned int *)v324 + 13);
                      goto LABEL_482;
                    }
                    goto LABEL_484;
                  }
                  uint64_t v330 = *(void *)(a1 + 24);
                  uint64_t v331 = *(unsigned int *)(a1 + 40);
                  unsigned int v332 = v321 >> 4;
                  if (v331)
                  {
                    LODWORD(v310) = (v331 - 1) & (v332 ^ (v321 >> 9));
                    v312 = (char **)(v330 + 16 * v310);
                    v311 = *v312;
                    if (v321 != *v312)
                    {
                      int v308 = 1;
                      do
                      {
                        if (v311 == (char *)-4096) {
                          goto LABEL_466;
                        }
                        int v309 = v310 + v308++;
                        uint64_t v310 = v309 & (v331 - 1);
                        v311 = *(char **)(v330 + 16 * v310);
                      }
                      while (v321 != v311);
                      v312 = (char **)(v330 + 16 * v310);
                    }
                  }
                  else
                  {
LABEL_466:
                    v312 = (char **)(v330 + 16 * v331);
                  }
                  if (*((_DWORD *)v312[1] + 4) <= v283) {
                    goto LABEL_484;
                  }
                  if (v323)
                  {
                    unsigned int v317 = (v323 - 1) & (v332 ^ (v321 >> 9));
                    v318 = (uint64_t *)(v322 + 72 * v317);
                    uint64_t v319 = *v318;
                    if (v321 == (char *)*v318)
                    {
LABEL_480:
                      if (v380 >= (unint64_t)HIDWORD(v380)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)__src + v380) = v321;
                      v328 = v318 + 6;
                      unint64_t v327 = *((unsigned int *)v318 + 12);
                      LODWORD(v380) = v380 + 1;
                      *((_DWORD *)v318 + 3) = v285;
                      v326 = v318 + 5;
                      v325 = __p;
                      unint64_t v329 = *((unsigned int *)v318 + 13);
LABEL_482:
                      if (v327 >= v329) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*v326 + 8 * v327) = v325;
                      ++*v328;
LABEL_484:
                      if (++v297 == v298)
                      {
                        v297 = (char **)v370;
                        goto LABEL_486;
                      }
                      continue;
                    }
                    v313 = 0;
                    int v314 = 1;
                    while (v319 != -4096)
                    {
                      if (v313) {
                        BOOL v315 = 0;
                      }
                      else {
                        BOOL v315 = v319 == -8192;
                      }
                      if (v315) {
                        v313 = v318;
                      }
                      unsigned int v316 = v317 + v314++;
                      unsigned int v317 = v316 & (v323 - 1);
                      v318 = (uint64_t *)(v322 + 72 * v317);
                      uint64_t v319 = *v318;
                      if (v321 == (char *)*v318) {
                        goto LABEL_480;
                      }
                    }
                    if (v313) {
                      v320 = v313;
                    }
                    else {
                      v320 = v318;
                    }
                  }
                  else
                  {
                    v320 = 0;
                  }
                  break;
                }
                v318 = sub_1CC5A99B8((uint64_t)v376, (uint64_t *)&v369, v320);
                uint64_t *v318 = (uint64_t)v321;
                *(_OWORD *)(v318 + 5) = 0u;
                *(_OWORD *)(v318 + 1) = 0u;
                *(_OWORD *)(v318 + 3) = 0u;
                *(_OWORD *)(v318 + 7) = 0u;
                v318[5] = (uint64_t)(v318 + 7);
                *((_DWORD *)v318 + 13) = 2;
                goto LABEL_480;
              }
LABEL_415:
              unsigned int v286 = v380;
              if (!v380)
              {
                if (__src != v381) {
                  free(__src);
                }
                sub_1CC5A86A0((uint64_t *)&v373, a1, v283);
                sub_1CC5AF354((uint64_t *)&v373, a1, *v360);
                uint64_t v333 = v376[0];
                if (v377)
                {
                  uint64_t v334 = v376[0] + 56;
                  uint64_t v335 = 72 * v377;
                  do
                  {
                    uint64_t v336 = *(void *)(v334 - 56);
                    if (v336 != -4096 && v336 != -8192)
                    {
                      v337 = *(void **)(v334 - 16);
                      if ((void *)v334 != v337) {
                        free(v337);
                      }
                    }
                    v334 += 72;
                    v335 -= 72;
                  }
                  while (v335);
                }
                MEMORY[0x1D25D9CD0](v333, 8);
                if (v373) {
                  operator delete(v373);
                }
                return;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1CC5A6DD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(result + 64);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 48);
    unsigned int v6 = v4 - 1;
    LODWORD(v7) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a3)
    {
LABEL_3:
      uint64_t v10 = (uint64_t *)(v5 + 16 * v4);
      if (v8 != v10 && v8[1])
      {
        LODWORD(v11) = v6 & ((a4 >> 4) ^ (a4 >> 9));
        uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
        uint64_t v13 = *v12;
        if (*v12 == a4)
        {
LABEL_6:
          if (v12 != v10)
          {
            if (v12[1]) {
              llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator();
            }
          }
        }
        else
        {
          int v16 = 1;
          while (v13 != -4096)
          {
            int v17 = v11 + v16++;
            uint64_t v11 = v17 & v6;
            uint64_t v13 = *(void *)(v5 + 16 * v11);
            if (v13 == a4)
            {
              uint64_t v12 = (uint64_t *)(v5 + 16 * v11);
              goto LABEL_6;
            }
          }
        }
      }
    }
    else
    {
      int v14 = 1;
      while (v9 != -4096)
      {
        int v15 = v7 + v14++;
        uint64_t v7 = v15 & v6;
        uint64_t v9 = *(void *)(v5 + 16 * v7);
        if (v9 == a3)
        {
          uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

void llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 608);
  if (!v3) {
    return;
  }
  if (v3 != 1)
  {
    v18[0] = 0;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    unint64_t v21 = v3;
    unsigned int v6 = *(_DWORD *)(a1 + 32);
    if (v6 > 0x64)
    {
      if (v3 <= v6 / 0x28) {
        goto LABEL_5;
      }
    }
    else if (v3 <= v6)
    {
LABEL_5:
      BOOL v7 = 1;
LABEL_6:
      if (v3 && v7)
      {
        unint64_t v8 = 1;
        do
        {
          unint64_t v9 = sub_1CC5AF7C8(v19);
          unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 4) != 0) {
            sub_1CC5A5238(a1, (uint64_t)v18, v9, v11);
          }
          else {
            sub_1CC5A4B48(a1, (uint64_t)v18, v9, v11);
          }
        }
        while (v8++ < v21 && v18[0] == 0);
      }
      return;
    }
    sub_1CC5A43B0(a1, (uint64_t)v18);
    unint64_t v3 = v21;
    BOOL v7 = v18[0] == 0;
    goto LABEL_6;
  }
  unint64_t v15 = sub_1CC5AF7C8(a2);
  if (a3)
  {
    v18[0] = 0;
    uint64_t v19 = a3;
    uint64_t v20 = a3;
    unint64_t v21 = *(unsigned int *)(a3 + 608);
    unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0) {
      sub_1CC5A5238(a1, (uint64_t)v18, v15, v17);
    }
    else {
      sub_1CC5A4B48(a1, (uint64_t)v18, v15, v17);
    }
  }
  else
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
    {
      sub_1CC5A5238(a1, 0, v15, v16);
    }
    else
    {
      sub_1CC5A4B48(a1, 0, v15, v16);
    }
  }
}

void llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(unsigned int *)(a2 + 608);
  if (v5 != 1)
  {
    if (!v5) {
      return;
    }
    v18[0] = 0;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    unint64_t v21 = v5;
    unsigned int v6 = *(_DWORD *)(a1 + 56);
    if (v6 > 0x64)
    {
      if (v5 <= v6 / 0x28) {
        goto LABEL_5;
      }
    }
    else if (v5 <= v6)
    {
LABEL_5:
      BOOL v7 = 1;
LABEL_6:
      if (v5 && v7)
      {
        unint64_t v8 = 1;
        do
        {
          unint64_t v9 = sub_1CC5AFBC4(v19);
          unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 4) != 0) {
            sub_1CC5A6DD0(a1, (uint64_t)v18, v9, v11);
          }
          else {
            sub_1CD5BCF10(a1, (uint64_t)v18, v9, v11);
          }
        }
        while (v8++ < v21 && v18[0] == 0);
      }
      return;
    }
    sub_1CC5A46F8(a1, (uint64_t)v18);
    unint64_t v5 = v21;
    BOOL v7 = v18[0] == 0;
    goto LABEL_6;
  }
  unint64_t v15 = sub_1CC5AFBC4(a2);
  if (a3)
  {
    v18[0] = 0;
    uint64_t v19 = a3;
    uint64_t v20 = a3;
    unint64_t v21 = *(unsigned int *)(a3 + 608);
    unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0) {
      sub_1CC5A6DD0(a1, (uint64_t)v18, v15, v17);
    }
    else {
      sub_1CD5BCF10(a1, (uint64_t)v18, v15, v17);
    }
  }
  else
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
    {
      sub_1CC5A6DD0(a1, 0, v15, v16);
    }
    else
    {
      sub_1CD5BCF10(a1, 0, v15, v16);
    }
  }
}

BOOL llvm::DominatorTree::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = (void **)a3;
  v18[1] = (void **)&llvm::DominatorTreeAnalysis::Key;
  uint64_t v4 = *(void *)(a3 + 48);
  uint64_t v3 = *(void *)(a3 + 56);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 68);
    unsigned int v6 = (void **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      while (*(_UNKNOWN **)(v3 + v7) != &llvm::DominatorTreeAnalysis::Key)
      {
        v7 += 8;
        if (8 * v5 == v7) {
          goto LABEL_6;
        }
      }
      unsigned int v6 = (void **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 64);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((&llvm::DominatorTreeAnalysis::Key >> 4) ^ (&llvm::DominatorTreeAnalysis::Key >> 9));
    unsigned int v6 = (void **)(v3 + 8 * v12);
    uint64_t v13 = *v6;
    if (*v6 == (void *)-1)
    {
      uint64_t v14 = 0;
LABEL_27:
      if (v14) {
        unsigned int v6 = v14;
      }
      if (*v6 != &llvm::DominatorTreeAnalysis::Key)
      {
        LODWORD(v5) = *(_DWORD *)(a3 + 68);
        unsigned int v6 = (void **)(v3 + 8 * v10);
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != &llvm::DominatorTreeAnalysis::Key)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (void *)-2;
        }
        if (v16) {
          uint64_t v14 = v6;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        unsigned int v6 = (void **)(v3 + 8 * (v17 & v11));
        uint64_t v13 = *v6;
        if (*v6 == (void *)-1) {
          goto LABEL_27;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v3 == v4) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a3 + 64);
  }
  BOOL v19 = v6 != (void **)(v3 + 8 * v8);
  return !sub_1CBF75724(v18) && !sub_1CBF7593C((uint64_t)v18) && !sub_1CBF75B60((uint64_t)v18);
}

void llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlock *a2, const llvm::Use *a3)
{
  uint64_t v3 = *((void *)a3 + 3);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16) == 83) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
  }
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates();
}

uint64_t llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  uint64_t result = 1;
  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
  }
  return result;
}

void llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
}

void llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlockEdge *a2, const llvm::BasicBlock *a3)
{
}

uint64_t llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlockEdge *a2, const llvm::Use *a3)
{
  uint64_t v3 = *((void *)a3 + 3);
  uint64_t v4 = (const llvm::BasicBlock **)(v3 + 40);
  if (!v3 || *(unsigned char *)(v3 + 16) != 83) {
    goto LABEL_12;
  }
  int v5 = *(_DWORD *)(v3 + 20);
  if (*(void *)(v3 + 40) != *((void *)a2 + 1)
    || ((v5 & 0x40000000) != 0 ? (uint64_t v6 = *(void *)(v3 - 8)) : (uint64_t v6 = v3 - 32 * (v5 & 0x7FFFFFF)),
        *(void *)(v6 + 32 * *(unsigned int *)(v3 + 60) + 8 * (((unint64_t)a3 - v6) >> 5)) != *(void *)a2))
  {
    if ((v5 & 0x40000000) != 0) {
      uint64_t v7 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v7 = v3 - 32 * (v5 & 0x7FFFFFF);
    }
    uint64_t v4 = (const llvm::BasicBlock **)(v7
                                   + 32 * *(unsigned int *)(v3 + 60)
                                   + 8 * (((unint64_t)a3 - v7) >> 5));
LABEL_12:
    llvm::DominatorTree::dominates(this, a2, *v4);
  }
  return 1;
}

uint64_t llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Use *a3)
{
  uint64_t result = 1;
  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
  }
  return result;
}

uint64_t llvm::DominatorTree::isReachableFromEntry(llvm::DominatorTree *this, const llvm::Use *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  return 1;
}

uint64_t llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlockEdge *a2, const llvm::BasicBlock **a3)
{
  uint64_t v4 = *a3;
  if (*(const llvm::BasicBlock **)a2 != v4 || *((const llvm::BasicBlock **)a2 + 1) != a3[1]) {
    llvm::DominatorTree::dominates(this, a2, v4);
  }
  return 1;
}

void llvm::DominatorTreeAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x100000000;
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = a1;
  sub_1CC5A43B0(a2, 0);
}

void *llvm::DominatorTreePrinterPass::DominatorTreePrinterPass(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

void llvm::initializeDominatorTreeWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD8800, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC5A8478;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD8800, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC5A8478()
{
}

uint64_t llvm::DominatorTreeWrapperPass::runOnFunction(llvm::DominatorTreeWrapperPass *this, llvm::Function *a2)
{
  *((void *)this + 11) = a2;
  sub_1CC5A43B0((uint64_t)this + 32, 0);
  return 0;
}

uint64_t *sub_1CC5A8544(uint64_t a1)
{
  uint64_t result = sub_1CC0CEEC8((uint64_t *)(a1 + 56));
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  return result;
}

void sub_1CC5A857C(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2616A80;
  sub_1CBF8FF88(a1 + 7);
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void *sub_1CC5A85E4(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unsigned int v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CC48EB1C(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    unsigned int v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        unsigned int v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void sub_1CC5A86A0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  v175[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  unint64_t v5 = (unint64_t)(a1[1] - *a1) >> 3;
  uint64_t v168 = a2;
  if (v5 >= 2)
  {
    uint64_t v6 = 1;
    while (1)
    {
      v173 = 0;
      uint64_t v7 = *(void **)(v4 + 8 * v6);
      v173 = v7;
      int v8 = *((_DWORD *)a1 + 10);
      if (!v8) {
        break;
      }
      uint64_t v9 = a1[3];
      int v10 = v8 - 1;
      unsigned int v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
      unsigned int v12 = (uint64_t *)(v9 + 72 * v11);
      uint64_t v13 = *v12;
      if (v7 != (void *)*v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          unsigned int v12 = (uint64_t *)(v9 + 72 * v11);
          uint64_t v13 = *v12;
          if (v7 == (void *)*v12) {
            goto LABEL_5;
          }
        }
        if (v14) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = v12;
        }
        goto LABEL_19;
      }
LABEL_5:
      v12[4] = *(void *)(v4 + 8 * *((unsigned int *)v12 + 3));
      if (++v6 == v5) {
        goto LABEL_20;
      }
    }
    uint64_t v18 = 0;
LABEL_19:
    unsigned int v12 = sub_1CC5A99B8((uint64_t)(a1 + 3), (uint64_t *)&v173, v18);
    uint64_t *v12 = (uint64_t)v7;
    *(_OWORD *)(v12 + 5) = 0u;
    *(_OWORD *)(v12 + 3) = 0u;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 7) = 0u;
    v12[5] = (uint64_t)(v12 + 7);
    *((_DWORD *)v12 + 13) = 2;
    uint64_t v4 = *a1;
    a2 = v168;
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v169 = v5;
  v173 = v175;
  uint64_t v174 = 0x2000000000;
  uint64_t v19 = (v5 - 1);
  if (v19 < 2) {
    goto LABEL_214;
  }
  uint64_t v170 = (uint64_t)(a1 + 3);
  unsigned int v166 = v5;
  unsigned int v20 = v5;
  do
  {
    uint64_t v21 = *(void *)(*a1 + 8 * v19);
    uint64_t v171 = v21;
    int v22 = *((_DWORD *)a1 + 10);
    if (v22)
    {
      uint64_t v23 = a1[3];
      int v24 = v22 - 1;
      unsigned int v25 = ((v21 >> 4) ^ (v21 >> 9)) & v24;
      uint64_t v26 = (uint64_t *)(v23 + 72 * v25);
      uint64_t v27 = *v26;
      if (v21 == *v26) {
        goto LABEL_24;
      }
      v104 = 0;
      int v105 = 1;
      while (v27 != -4096)
      {
        if (v104) {
          BOOL v106 = 0;
        }
        else {
          BOOL v106 = v27 == -8192;
        }
        if (v106) {
          v104 = v26;
        }
        unsigned int v107 = v25 + v105++;
        unsigned int v25 = v107 & v24;
        uint64_t v26 = (uint64_t *)(v23 + 72 * v25);
        uint64_t v27 = *v26;
        if (v21 == *v26) {
          goto LABEL_24;
        }
      }
      if (v104) {
        uint64_t v108 = v104;
      }
      else {
        uint64_t v108 = v26;
      }
    }
    else
    {
      uint64_t v108 = 0;
    }
    uint64_t v26 = sub_1CC5A99B8(v170, &v171, v108);
    *uint64_t v26 = v21;
    *(_OWORD *)(v26 + 5) = 0u;
    *(_OWORD *)(v26 + 1) = 0u;
    *(_OWORD *)(v26 + 3) = 0u;
    *(_OWORD *)(v26 + 7) = 0u;
    v26[5] = (uint64_t)(v26 + 7);
    *((_DWORD *)v26 + 13) = 2;
    a2 = v168;
LABEL_24:
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 + 3);
    uint64_t v28 = *((unsigned int *)v26 + 12);
    if (v28)
    {
      uint64_t v29 = (uint64_t *)v26[5];
      unsigned int v30 = &v29[v28];
      while (1)
      {
        int v31 = *((_DWORD *)a1 + 10);
        if (v31)
        {
          uint64_t v32 = *v29;
          uint64_t v33 = a1[3];
          unsigned int v34 = (*v29 >> 4) ^ (*v29 >> 9);
          int v35 = v31 - 1;
          unsigned int v36 = v34 & v35;
          int v37 = (uint64_t *)(v33 + 72 * (v34 & v35));
          uint64_t v38 = *v37;
          if (*v29 != *v37)
          {
            int v39 = 1;
            uint64_t v40 = *v37;
            unsigned int v41 = v34 & v35;
            while (v40 != -4096)
            {
              unsigned int v42 = v41 + v39++;
              unsigned int v41 = v42 & v35;
              uint64_t v40 = *(void *)(v33 + 72 * v41);
              if (v32 == v40) {
                goto LABEL_31;
              }
            }
            goto LABEL_42;
          }
LABEL_31:
          uint64_t v43 = *(unsigned int *)(a2 + 40);
          if (!v43) {
            break;
          }
          uint64_t v44 = *(void *)(a2 + 24);
          LODWORD(v45) = (v43 - 1) & v34;
          unsigned int v46 = (uint64_t *)(v44 + 16 * v45);
          uint64_t v47 = *v46;
          if (v32 != *v46)
          {
            int v66 = 1;
            do
            {
              if (v47 == -4096) {
                goto LABEL_35;
              }
              int v67 = v45 + v66++;
              uint64_t v45 = v67 & (v43 - 1);
              uint64_t v47 = *(void *)(v44 + 16 * v45);
            }
            while (v32 != v47);
            unsigned int v46 = (uint64_t *)(v44 + 16 * v45);
          }
          if (v46 == (uint64_t *)(v44 + 16 * v43)) {
            break;
          }
          uint64_t v48 = v46[1];
          if (!v48 || *(_DWORD *)(v48 + 16) >= a3) {
            break;
          }
        }
LABEL_42:
        if (++v29 == v30) {
          goto LABEL_115;
        }
      }
LABEL_35:
      uint64_t v172 = *v29;
      if (v32 != v38)
      {
        unsigned int v58 = 0;
        int v59 = 1;
        while (v38 != -4096)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v38 == -8192;
          }
          if (v60) {
            unsigned int v58 = v37;
          }
          unsigned int v61 = v36 + v59++;
          unsigned int v36 = v61 & v35;
          int v37 = (uint64_t *)(v33 + 72 * v36);
          uint64_t v38 = *v37;
          if (*v37 == v32) {
            goto LABEL_36;
          }
        }
        if (v58) {
          int v68 = v58;
        }
        else {
          int v68 = v37;
        }
        int v37 = sub_1CC5A99B8(v170, &v172, v68);
        a2 = v168;
        *int v37 = v32;
        *(_OWORD *)(v37 + 5) = 0u;
        *(_OWORD *)(v37 + 1) = 0u;
        *(_OWORD *)(v37 + 3) = 0u;
        *(_OWORD *)(v37 + 7) = 0u;
        v37[5] = (uint64_t)(v37 + 7);
        *((_DWORD *)v37 + 13) = 2;
      }
LABEL_36:
      if (*((_DWORD *)v37 + 3) < v20)
      {
        uint64_t v49 = v37 + 3;
LABEL_38:
        uint64_t v50 = *v49;
        uint64_t v172 = *v49;
        int v51 = *((_DWORD *)a1 + 10);
        if (v51)
        {
          uint64_t v52 = a1[3];
          int v53 = v51 - 1;
          unsigned int v54 = v53 & ((v50 >> 4) ^ (v50 >> 9));
          uint64_t v55 = (uint64_t *)(v52 + 72 * v54);
          uint64_t v56 = *v55;
          if (v50 == *v55) {
            goto LABEL_40;
          }
          unsigned int v62 = 0;
          int v63 = 1;
          while (v56 != -4096)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v56 == -8192;
            }
            if (v64) {
              unsigned int v62 = v55;
            }
            unsigned int v65 = v54 + v63++;
            unsigned int v54 = v65 & v53;
            uint64_t v55 = (uint64_t *)(v52 + 72 * v54);
            uint64_t v56 = *v55;
            if (v50 == *v55) {
              goto LABEL_40;
            }
          }
          if (v62) {
            unint64_t v69 = v62;
          }
          else {
            unint64_t v69 = v55;
          }
        }
        else
        {
          unint64_t v69 = 0;
        }
        uint64_t v55 = sub_1CC5A99B8(v170, &v172, v69);
        *uint64_t v55 = v50;
        *(_OWORD *)(v55 + 5) = 0u;
        *(_OWORD *)(v55 + 1) = 0u;
        *(_OWORD *)(v55 + 3) = 0u;
        *(_OWORD *)(v55 + 7) = 0u;
        v55[5] = (uint64_t)(v55 + 7);
        *((_DWORD *)v55 + 13) = 2;
        a2 = v168;
LABEL_40:
        unsigned int v57 = *((_DWORD *)v55 + 4);
        if (v57 < *((_DWORD *)v26 + 4)) {
          *((_DWORD *)v26 + 4) = v57;
        }
        goto LABEL_42;
      }
      int v70 = v37 + 1;
      while (1)
      {
        if (v174 >= (unint64_t)HIDWORD(v174)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v173 + v174) = v70;
        LODWORD(v174) = v174 + 1;
        uint64_t v71 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v70 + 1));
        int v72 = *((_DWORD *)a1 + 10);
        if (!v72) {
          break;
        }
        uint64_t v73 = a1[3];
        int v74 = v72 - 1;
        unsigned int v75 = ((*v71 >> 4) ^ (*v71 >> 9)) & v74;
        v76 = (uint64_t *)(v73 + 72 * v75);
        uint64_t v77 = *v76;
        if (*v71 != *v76)
        {
          v78 = 0;
          int v79 = 1;
          while (v77 != -4096)
          {
            if (v78) {
              BOOL v80 = 0;
            }
            else {
              BOOL v80 = v77 == -8192;
            }
            if (v80) {
              v78 = v76;
            }
            unsigned int v81 = v75 + v79++;
            unsigned int v75 = v81 & v74;
            v76 = (uint64_t *)(v73 + 72 * v75);
            uint64_t v77 = *v76;
            if (*v71 == *v76) {
              goto LABEL_78;
            }
          }
          if (v78) {
            v82 = v78;
          }
          else {
            v82 = v76;
          }
          goto LABEL_92;
        }
LABEL_78:
        int v70 = v76 + 1;
        if (*((_DWORD *)v76 + 3) < v20)
        {
          uint64_t v83 = v76 + 3;
          int v84 = *((_DWORD *)a1 + 10);
          if (v84)
          {
            uint64_t v85 = a1[3];
            int v86 = v84 - 1;
            unsigned int v87 = ((*v83 >> 4) ^ (*v83 >> 9)) & v86;
            int v88 = (uint64_t *)(v85 + 72 * v87);
            uint64_t v89 = *v88;
            if (*v83 == *v88) {
              goto LABEL_95;
            }
            v109 = 0;
            int v110 = 1;
            while (v89 != -4096)
            {
              if (v109) {
                BOOL v111 = 0;
              }
              else {
                BOOL v111 = v89 == -8192;
              }
              if (v111) {
                v109 = v88;
              }
              unsigned int v112 = v87 + v110++;
              unsigned int v87 = v112 & v86;
              int v88 = (uint64_t *)(v85 + 72 * v87);
              uint64_t v89 = *v88;
              if (*v83 == *v88) {
                goto LABEL_95;
              }
            }
            if (v109) {
              v113 = v109;
            }
            else {
              v113 = v88;
            }
          }
          else
          {
            v113 = 0;
          }
          int v88 = sub_1CC5A99B8(v170, v83, v113);
          *int v88 = *v83;
          *(_OWORD *)(v88 + 5) = 0u;
          *(_OWORD *)(v88 + 3) = 0u;
          *(_OWORD *)(v88 + 1) = 0u;
          *(_OWORD *)(v88 + 7) = 0u;
          v88[5] = (uint64_t)(v88 + 7);
          *((_DWORD *)v88 + 13) = 2;
          a2 = v168;
LABEL_95:
          unsigned int v90 = v88 + 1;
          unsigned int v91 = v174;
          while (2)
          {
            uint64_t v92 = *((void *)v173 + v91 - 1);
            LODWORD(v174) = v91 - 1;
            *(_DWORD *)(v92 + 4) = *((_DWORD *)v70 + 1);
            uint64_t v49 = (uint64_t *)(v92 + 16);
            int v93 = *((_DWORD *)a1 + 10);
            if (v93)
            {
              uint64_t v94 = a1[3];
              int v95 = v93 - 1;
              unsigned int v96 = ((*v49 >> 4) ^ (*v49 >> 9)) & v95;
              v97 = (uint64_t *)(v94 + 72 * v96);
              uint64_t v98 = *v97;
              if (*v49 == *v97) {
                goto LABEL_98;
              }
              uint64_t v99 = 0;
              int v100 = 1;
              while (v98 != -4096)
              {
                if (v99) {
                  BOOL v101 = 0;
                }
                else {
                  BOOL v101 = v98 == -8192;
                }
                if (v101) {
                  uint64_t v99 = v97;
                }
                unsigned int v102 = v96 + v100++;
                unsigned int v96 = v102 & v95;
                v97 = (uint64_t *)(v94 + 72 * v96);
                uint64_t v98 = *v97;
                if (*v49 == *v97) {
                  goto LABEL_98;
                }
              }
              unint64_t v165 = v90;
              if (v99) {
                uint64_t v103 = v99;
              }
              else {
                uint64_t v103 = v97;
              }
            }
            else
            {
              unint64_t v165 = v90;
              uint64_t v103 = 0;
            }
            v97 = sub_1CC5A99B8(v170, (uint64_t *)(v92 + 16), v103);
            uint64_t *v97 = *v49;
            *(_OWORD *)(v97 + 5) = 0u;
            *(_OWORD *)(v97 + 3) = 0u;
            *(_OWORD *)(v97 + 1) = 0u;
            *(_OWORD *)(v97 + 7) = 0u;
            v97[5] = (uint64_t)(v97 + 7);
            *((_DWORD *)v97 + 13) = 2;
            a2 = v168;
            unsigned int v90 = v165;
LABEL_98:
            if (*((_DWORD *)v90 + 2) >= *((_DWORD *)v97 + 4)) {
              unsigned int v90 = v97 + 1;
            }
            else {
              *uint64_t v49 = v70[2];
            }
            unsigned int v91 = v174;
            int v70 = (uint64_t *)v92;
            if (!v174) {
              goto LABEL_38;
            }
            continue;
          }
        }
      }
      v82 = 0;
LABEL_92:
      v76 = sub_1CC5A99B8(v170, v71, v82);
      uint64_t *v76 = *v71;
      *(_OWORD *)(v76 + 5) = 0u;
      *(_OWORD *)(v76 + 3) = 0u;
      *(_OWORD *)(v76 + 1) = 0u;
      *(_OWORD *)(v76 + 7) = 0u;
      v76[5] = (uint64_t)(v76 + 7);
      *((_DWORD *)v76 + 13) = 2;
      a2 = v168;
      goto LABEL_78;
    }
LABEL_115:
    unsigned int v20 = v19--;
  }
  while ((v19 & 0xFFFFFFFE) != 0);
  if (v166 < 3) {
    goto LABEL_214;
  }
  uint64_t v114 = 2;
  while (2)
  {
    uint64_t v115 = *a1;
    uint64_t v116 = *(void *)(*a1 + 8 * v114);
    uint64_t v172 = v116;
    int v117 = *((_DWORD *)a1 + 10);
    if (v117)
    {
      uint64_t v118 = a1[3];
      int v119 = v117 - 1;
      unsigned int v120 = ((v116 >> 4) ^ (v116 >> 9)) & (v117 - 1);
      uint64_t v121 = (uint64_t *)(v118 + 72 * v120);
      uint64_t v122 = *v121;
      if (v116 == *v121)
      {
        uint64_t v123 = (uint64_t *)(v115 + 8 * *((unsigned int *)v121 + 4));
        uint64_t v124 = v169;
        goto LABEL_151;
      }
      v158 = 0;
      int v159 = 1;
      uint64_t v124 = v169;
      while (v122 != -4096)
      {
        if (v158) {
          BOOL v160 = 0;
        }
        else {
          BOOL v160 = v122 == -8192;
        }
        if (v160) {
          v158 = v121;
        }
        unsigned int v161 = v120 + v159++;
        unsigned int v120 = v161 & v119;
        uint64_t v121 = (uint64_t *)(v118 + 72 * v120);
        uint64_t v122 = *v121;
        if (v116 == *v121) {
          goto LABEL_200;
        }
      }
      if (v158) {
        v163 = v158;
      }
      else {
        v163 = v121;
      }
    }
    else
    {
      v163 = 0;
      uint64_t v124 = v169;
    }
    uint64_t v121 = sub_1CC5A99B8(v170, &v172, v163);
    *uint64_t v121 = v116;
    *(_OWORD *)(v121 + 5) = 0u;
    *(_OWORD *)(v121 + 3) = 0u;
    *(_OWORD *)(v121 + 7) = 0u;
    *(_OWORD *)(v121 + 1) = 0u;
    v121[5] = (uint64_t)(v121 + 7);
    *((_DWORD *)v121 + 13) = 2;
    uint64_t v115 = *a1;
    uint64_t v118 = a1[3];
    int v117 = *((_DWORD *)a1 + 10);
LABEL_200:
    uint64_t v123 = (uint64_t *)(v115 + 8 * *((unsigned int *)v121 + 4));
    if (!v117)
    {
      v162 = 0;
LABEL_205:
      int v126 = sub_1CC5A99B8(v170, v123, v162);
      *int v126 = *v123;
      *(_OWORD *)(v126 + 5) = 0u;
      *(_OWORD *)(v126 + 3) = 0u;
      *(_OWORD *)(v126 + 1) = 0u;
      *(_OWORD *)(v126 + 7) = 0u;
      v126[5] = (uint64_t)(v126 + 7);
      *((_DWORD *)v126 + 13) = 2;
      goto LABEL_152;
    }
    int v119 = v117 - 1;
LABEL_151:
    unsigned int v125 = ((*v123 >> 4) ^ (*v123 >> 9)) & v119;
    int v126 = (uint64_t *)(v118 + 72 * v125);
    uint64_t v127 = *v126;
    if (*v123 != *v126)
    {
      unsigned int v154 = 0;
      int v155 = 1;
      while (v127 != -4096)
      {
        if (v154) {
          BOOL v156 = 0;
        }
        else {
          BOOL v156 = v127 == -8192;
        }
        if (v156) {
          unsigned int v154 = v126;
        }
        unsigned int v157 = v125 + v155++;
        unsigned int v125 = v157 & v119;
        int v126 = (uint64_t *)(v118 + 72 * v125);
        uint64_t v127 = *v126;
        if (*v123 == *v126) {
          goto LABEL_152;
        }
      }
      if (v154) {
        v162 = v154;
      }
      else {
        v162 = v126;
      }
      goto LABEL_205;
    }
LABEL_152:
    unsigned int v128 = *((_DWORD *)v126 + 2);
    int v129 = v121 + 4;
    for (uint64_t i = v129; ; uint64_t i = v143 + 4)
    {
      uint64_t v131 = *i;
      uint64_t v171 = v131;
      int v132 = *((_DWORD *)a1 + 10);
      unsigned int v133 = v131 >> 4;
      if (v132)
      {
        uint64_t v134 = a1[3];
        int v135 = v132 - 1;
        unsigned int v136 = (v133 ^ (v131 >> 9)) & v135;
        int v137 = (uint64_t *)(v134 + 72 * v136);
        uint64_t v138 = *v137;
        if (v131 == *v137) {
          goto LABEL_155;
        }
        unsigned int v145 = 0;
        int v146 = 1;
        while (v138 != -4096)
        {
          if (v145) {
            BOOL v147 = 0;
          }
          else {
            BOOL v147 = v138 == -8192;
          }
          if (v147) {
            unsigned int v145 = v137;
          }
          unsigned int v148 = v136 + v146++;
          unsigned int v136 = v148 & v135;
          int v137 = (uint64_t *)(v134 + 72 * v136);
          uint64_t v138 = *v137;
          if (v131 == *v137) {
            goto LABEL_155;
          }
        }
        v149 = v145 ? v145 : v137;
      }
      else
      {
        v149 = 0;
      }
      int v137 = sub_1CC5A99B8(v170, &v171, v149);
      *int v137 = v131;
      *(_OWORD *)(v137 + 5) = 0u;
      *(_OWORD *)(v137 + 1) = 0u;
      *(_OWORD *)(v137 + 3) = 0u;
      *(_OWORD *)(v137 + 7) = 0u;
      v137[5] = (uint64_t)(v137 + 7);
      *((_DWORD *)v137 + 13) = 2;
LABEL_155:
      if (*((_DWORD *)v137 + 2) <= v128) {
        break;
      }
      int v139 = *((_DWORD *)a1 + 10);
      if (v139)
      {
        uint64_t v140 = a1[3];
        int v141 = v139 - 1;
        unsigned int v142 = v141 & (v133 ^ (v131 >> 9));
        BOOL v143 = (uint64_t *)(v140 + 72 * v142);
        uint64_t v144 = *v143;
        if (v131 == *v143) {
          continue;
        }
        uint64_t v150 = 0;
        int v151 = 1;
        while (v144 != -4096)
        {
          if (v150) {
            BOOL v152 = 0;
          }
          else {
            BOOL v152 = v144 == -8192;
          }
          if (v152) {
            uint64_t v150 = v143;
          }
          unsigned int v153 = v142 + v151++;
          unsigned int v142 = v153 & v141;
          BOOL v143 = (uint64_t *)(v140 + 72 * v142);
          uint64_t v144 = *v143;
          if (v131 == *v143) {
            goto LABEL_158;
          }
        }
        if (v150) {
          v164 = v150;
        }
        else {
          v164 = v143;
        }
      }
      else
      {
        v164 = 0;
      }
      BOOL v143 = sub_1CC5A99B8(v170, &v171, v164);
      *BOOL v143 = v131;
      *(_OWORD *)(v143 + 5) = 0u;
      *(_OWORD *)(v143 + 1) = 0u;
      *(_OWORD *)(v143 + 3) = 0u;
      *(_OWORD *)(v143 + 7) = 0u;
      v143[5] = (uint64_t)(v143 + 7);
      *((_DWORD *)v143 + 13) = 2;
LABEL_158:
      ;
    }
    *int v129 = v131;
    if (++v114 != v124) {
      continue;
    }
    break;
  }
LABEL_214:
  if (v173 != v175) {
    free(v173);
  }
}

uint64_t *sub_1CC5A9228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t result = (uint64_t *)(a1 + 24);
  uint64_t v7 = v8;
  uint64_t v9 = *(void *)a1;
  int v10 = (uint64_t *)(*(void *)a1 + 8);
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    uint64_t v14 = (uint64_t *)(v7 + 72 * v13);
    uint64_t v15 = *v14;
    if (*v10 == *v14) {
      goto LABEL_16;
    }
    BOOL v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        BOOL v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v10 == *v14) {
        goto LABEL_16;
      }
    }
    if (v16) {
      unsigned int v20 = v16;
    }
    else {
      unsigned int v20 = v14;
    }
  }
  else
  {
    unsigned int v20 = 0;
  }
  uint64_t result = sub_1CC5A99B8((uint64_t)result, (uint64_t *)(*(void *)a1 + 8), v20);
  uint64_t v14 = result;
  *uint64_t result = *v10;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[5] = (uint64_t)(result + 7);
  *((_DWORD *)result + 13) = 2;
  uint64_t v9 = *(void *)a1;
LABEL_16:
  _OWORD v14[4] = a3;
  uint64_t v21 = *(void *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    uint64_t v22 = v21 >> 3;
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v39 = 0;
      uint64_t v24 = *(void *)(*(void *)a1 + 8 * v23);
      uint64_t v39 = v24;
      int v25 = *(_DWORD *)(a2 + 40);
      if (!v25) {
        break;
      }
      uint64_t v26 = *(void *)(a2 + 24);
      int v27 = v25 - 1;
      unsigned int v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      uint64_t result = (uint64_t *)(v26 + 16 * v28);
      uint64_t v29 = *result;
      if (v24 != *result)
      {
        unsigned int v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            unsigned int v30 = result;
          }
          unsigned int v33 = v28 + v31++;
          unsigned int v28 = v33 & v27;
          uint64_t result = (uint64_t *)(v26 + 16 * v28);
          uint64_t v29 = *result;
          if (v24 == *result) {
            goto LABEL_33;
          }
        }
        if (v30) {
          unsigned int v34 = v30;
        }
        else {
          unsigned int v34 = result;
        }
        goto LABEL_32;
      }
LABEL_33:
      if (!result[1])
      {
        uint64_t v35 = *(void *)(a1 + 24);
        unsigned int v36 = *(_DWORD *)(a1 + 40);
        int v37 = sub_1CC129FE4(v35, v36, v39);
        if ((uint64_t *)(v35 + 72 * v36) == v37) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v37[4];
        }
        sub_1CC5A9EEC(a1, v38, a2);
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild();
      }
      if (++v23 == v22) {
        return result;
      }
    }
    unsigned int v34 = 0;
LABEL_32:
    uint64_t result = sub_1CC48EB1C(a2 + 24, (uint64_t)&v39, &v39, v34);
    *uint64_t result = v39;
    result[1] = 0;
    goto LABEL_33;
  }
  return result;
}

void sub_1CC5A946C(uint64_t a1, uint64_t a2)
{
  v74[64] = *MEMORY[0x1E4F143B8];
  uint64_t v68 = a2;
  int v72 = v74;
  v74[0] = a2;
  uint64_t v73 = 0x4000000001;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v65 = a1 + 24;
  int v4 = *(_DWORD *)(a1 + 40);
  if (!v4) {
    goto LABEL_15;
  }
  int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v3 + 72 * v7);
  uint64_t v9 = *v8;
  if (*v8 == a2)
  {
LABEL_14:
    *(_DWORD *)(v3 + 72 * v7 + 12) = 0;
LABEL_15:
    unsigned int v18 = 1;
LABEL_16:
    int v19 = 0;
    while (1)
    {
      unsigned int v20 = (void *)*((void *)v72 + v18 - 1);
      LODWORD(v73) = v18 - 1;
      int v67 = v20;
      int v21 = *(_DWORD *)(a1 + 40);
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 24);
        int v23 = v21 - 1;
        unsigned int v24 = v23 & ((v20 >> 4) ^ (v20 >> 9));
        int v25 = (uint64_t *)(v22 + 72 * v24);
        uint64_t v26 = *v25;
        if (v20 == (void *)*v25) {
          goto LABEL_32;
        }
        int v27 = 0;
        int v28 = 1;
        while (v26 != -4096)
        {
          if (v27) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == -8192;
          }
          if (v29) {
            int v27 = v25;
          }
          unsigned int v30 = v24 + v28++;
          unsigned int v24 = v30 & v23;
          int v25 = (uint64_t *)(v22 + 72 * v24);
          uint64_t v26 = *v25;
          if (v20 == (void *)*v25) {
            goto LABEL_32;
          }
        }
        if (v27) {
          int v31 = v27;
        }
        else {
          int v31 = v25;
        }
      }
      else
      {
        int v31 = 0;
      }
      int v25 = sub_1CC5A99B8(v65, (uint64_t *)&v67, v31);
      *int v25 = (uint64_t)v20;
      *(_OWORD *)(v25 + 5) = 0u;
      *(_OWORD *)(v25 + 1) = 0u;
      *(_OWORD *)(v25 + 3) = 0u;
      *(_OWORD *)(v25 + 7) = 0u;
      v25[5] = (uint64_t)(v25 + 7);
      *((_DWORD *)v25 + 13) = 2;
LABEL_32:
      if (!*((_DWORD *)v25 + 2))
      {
        *((_DWORD *)v25 + 4) = ++v19;
        *((_DWORD *)v25 + 2) = v19;
        _OWORD v25[3] = (uint64_t)v20;
        unsigned int v33 = *(void **)(a1 + 8);
        unint64_t v32 = *(void *)(a1 + 16);
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = *(void **)a1;
          uint64_t v36 = ((uint64_t)v33 - *(void *)a1) >> 3;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61) {
            abort();
          }
          uint64_t v38 = v32 - (void)v35;
          if (v38 >> 2 > v37) {
            unint64_t v37 = v38 >> 2;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 >> 61) {
              sub_1CB833614();
            }
            uint64_t v40 = (char *)operator new(8 * v39);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unsigned int v41 = &v40[8 * v36];
          *(void *)unsigned int v41 = v20;
          unsigned int v34 = v41 + 8;
          if (v33 != v35)
          {
            do
            {
              uint64_t v42 = *--v33;
              *((void *)v41 - 1) = v42;
              v41 -= 8;
            }
            while (v33 != v35);
            unsigned int v33 = *(void **)a1;
          }
          *(void *)a1 = v41;
          *(void *)(a1 + 8) = v34;
          *(void *)(a1 + 16) = &v40[8 * v39];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *unsigned int v33 = v20;
          unsigned int v34 = v33 + 1;
        }
        *(void *)(a1 + 8) = v34;
        uint64_t v43 = *(void *)(a1 + 48);
        if (v43) {
          sub_1CC0B002C(*(void *)(v43 + 8), v67, (uint64_t)&v69);
        }
        else {
          sub_1CC5A9B90((uint64_t)&v69, (uint64_t)v67);
        }
        uint64_t v44 = (uint64_t *)v69;
        uint64_t v45 = (char *)v69 + 8 * v70;
        if (v70)
        {
          while (1)
          {
            unsigned int v46 = (void *)*v44;
            int v66 = v46;
            uint64_t v47 = *(void *)(a1 + 24);
            unsigned int v48 = *(_DWORD *)(a1 + 40);
            uint64_t v49 = sub_1CC129FE4(v47, v48, (uint64_t)v46);
            if ((uint64_t *)(v47 + 72 * v48) == v49 || !*((_DWORD *)v49 + 2)) {
              break;
            }
            uint64_t v50 = v67;
            if (v46 != v67)
            {
              int v51 = v49 + 5;
              int v53 = v49 + 6;
              unint64_t v52 = *((unsigned int *)v49 + 12);
              unint64_t v54 = *((unsigned int *)v49 + 13);
LABEL_75:
              if (v52 >= v54) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v51 + 8 * v52) = v50;
              ++*v53;
            }
            if (++v44 == (uint64_t *)v45)
            {
              uint64_t v44 = (uint64_t *)v69;
              goto LABEL_82;
            }
          }
          if (v48)
          {
            unsigned int v55 = ((v46 >> 4) ^ (v46 >> 9)) & (v48 - 1);
            uint64_t v56 = (uint64_t *)(v47 + 72 * v55);
            uint64_t v57 = *v56;
            if (v46 != (void *)*v56)
            {
              unsigned int v58 = 0;
              int v59 = 1;
              while (v57 != -4096)
              {
                if (v58) {
                  BOOL v60 = 0;
                }
                else {
                  BOOL v60 = v57 == -8192;
                }
                if (v60) {
                  unsigned int v58 = v56;
                }
                unsigned int v61 = v55 + v59++;
                unsigned int v55 = v61 & (v48 - 1);
                uint64_t v56 = (uint64_t *)(v47 + 72 * v55);
                uint64_t v57 = *v56;
                if (v46 == (void *)*v56) {
                  goto LABEL_73;
                }
              }
              if (v58) {
                unsigned int v62 = v58;
              }
              else {
                unsigned int v62 = v56;
              }
LABEL_72:
              uint64_t v56 = sub_1CC5A99B8(v65, (uint64_t *)&v66, v62);
              *uint64_t v56 = (uint64_t)v46;
              *(_OWORD *)(v56 + 5) = 0u;
              *(_OWORD *)(v56 + 1) = 0u;
              *(_OWORD *)(v56 + 3) = 0u;
              *(_OWORD *)(v56 + 7) = 0u;
              v56[5] = (uint64_t)(v56 + 7);
              *((_DWORD *)v56 + 13) = 2;
            }
LABEL_73:
            if (v73 >= (unint64_t)HIDWORD(v73)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v72 + v73) = v46;
            int v53 = v56 + 6;
            unint64_t v52 = *((unsigned int *)v56 + 12);
            LODWORD(v73) = v73 + 1;
            *((_DWORD *)v56 + 3) = v19;
            int v51 = v56 + 5;
            uint64_t v50 = v67;
            unint64_t v54 = *((unsigned int *)v56 + 13);
            goto LABEL_75;
          }
          unsigned int v62 = 0;
          goto LABEL_72;
        }
LABEL_82:
        if (v44 != &v71) {
          free(v44);
        }
      }
      unsigned int v18 = v73;
      if (!v73) {
        goto LABEL_91;
      }
    }
  }
  int v10 = 1;
  uint64_t v11 = *v8;
  unsigned int v12 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v11 == -4096) {
      goto LABEL_15;
    }
    unsigned int v13 = v12 + v10++;
    unsigned int v12 = v13 & v6;
    uint64_t v11 = *(void *)(v3 + 72 * v12);
  }
  while (v11 != a2);
  uint64_t v14 = 0;
  int v15 = 1;
  while (v9 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v9 == -8192;
    }
    if (v16) {
      uint64_t v14 = v8;
    }
    unsigned int v17 = v7 + v15++;
    unsigned int v7 = v17 & v6;
    uint64_t v8 = (uint64_t *)(v3 + 72 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_14;
    }
  }
  if (v14) {
    int v63 = v14;
  }
  else {
    int v63 = v8;
  }
  BOOL v64 = sub_1CC5A99B8(v65, &v68, v63);
  *BOOL v64 = a2;
  *(_OWORD *)(v64 + 5) = 0u;
  *(_OWORD *)(v64 + 3) = 0u;
  *(_OWORD *)(v64 + 1) = 0u;
  *(_OWORD *)(v64 + 7) = 0u;
  v64[5] = (uint64_t)(v64 + 7);
  *((_DWORD *)v64 + 13) = 2;
  unsigned int v18 = v73;
  if (v73) {
    goto LABEL_16;
  }
LABEL_91:
  if (v72 != v74) {
    free(v72);
  }
}

uint64_t *sub_1CC5A99B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = (2 * v6 - 1) | ((unint64_t)(2 * v6 - 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 64;
    }
    *(_DWORD *)(a1 + 16) = v13;
    uint64_t v14 = (uint64_t *)operator new(72 * v13, (std::align_val_t)8uLL);
    *(void *)a1 = v14;
    if (v9)
    {
      sub_1CC387334(a1, v9, &v9[9 * v6]);
      MEMORY[0x1D25D9CD0](v9, 8);
      LODWORD(v16) = *(_DWORD *)(a1 + 16);
      uint64_t v14 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v15 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      do
      {
        v14[v15] = -4096;
        v15 += 9;
      }
      while (9 * v16 != v15);
    }
    uint64_t v7 = *a2;
    int v17 = v16 - 1;
    unsigned int v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
    a3 = &v14[9 * v18];
    uint64_t v19 = *a3;
    if (*a2 == *a3) {
      goto LABEL_5;
    }
    unsigned int v20 = 0;
    int v21 = 1;
    while (v19 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -8192;
      }
      if (v22) {
        unsigned int v20 = a3;
      }
      unsigned int v23 = v18 + v21++;
      unsigned int v18 = v23 & v17;
      a3 = &v14[9 * v18];
      uint64_t v19 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v20) {
      a3 = v20;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1CC38725C(a1, *(_DWORD *)(a1 + 16));
    unsigned int v24 = 0;
    sub_1CC387000(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
    a3 = v24;
  }
  uint64_t v7 = *a3;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC5A9B90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 == a2 + 40)
  {
LABEL_35:
    unsigned int v17 = 0;
    unsigned int v6 = (void *)(result + 16);
    *(void *)uint64_t result = result + 16;
    uint64_t v7 = (_DWORD *)(result + 8);
    *(_DWORD *)(result + 12) = 8;
  }
  else
  {
    uint64_t v4 = v3 - 24;
    if (v3) {
      uint64_t v5 = v3 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned char *)(v5 + 16) == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v17 = 2;
      }
      else {
        unsigned int v17 = 1;
      }
LABEL_10:
      unsigned int v6 = (void *)(result + 16);
      *(void *)uint64_t result = result + 16;
      *(void *)(result + 8) = 0x800000000;
      uint64_t v7 = (_DWORD *)(result + 8);
    }
    else
    {
      unsigned int v17 = 0;
      switch(*(unsigned char *)(v5 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_10;
        case 0x1E:
LABEL_42:
          __break(1u);
          goto LABEL_43;
        case 0x1F:
          unsigned int v17 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
LABEL_43:
          unsigned int v17 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          unsigned int v17 = 2;
          goto LABEL_10;
        case 0x24:
          unsigned int v17 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_10;
        case 0x25:
          unsigned int v17 = 1;
          goto LABEL_10;
        case 0x27:
          unsigned int v17 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_35;
      }
      unsigned int v6 = v2 + 2;
      *uint64_t v2 = v2 + 2;
      v2[1] = 0x800000000;
      uint64_t v7 = v2 + 1;
      if (v17 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    if (v17)
    {
      uint64_t v8 = v6;
      int v9 = *(unsigned __int8 *)(v3 - 8);
      uint64_t v10 = v3 - 32 * (v17 - 1) - 56;
      unsigned int v11 = 2 * v17 - 1;
      uint64_t v5 = (v9 - 31);
      unsigned int v12 = v17;
      do
      {
        uint64_t result = v10;
        if (v9 != 30)
        {
          uint64_t result = v3 - 56;
          switch(v9)
          {
            case ' ':
            case '&':
              int v23 = *(_DWORD *)(v3 - 4);
              if ((v23 & 0x40000000) != 0) {
                uint64_t v19 = *(void *)(v3 - 32);
              }
              else {
                uint64_t v19 = v4 - 32 * (v23 & 0x7FFFFFF);
              }
              uint64_t v20 = v12;
              goto LABEL_34;
            case '!':
              uint64_t v24 = -64;
              if (v12 == 1) {
                uint64_t v24 = -96;
              }
              uint64_t result = v4 + v24;
              break;
            case '""':
            case '#':
              goto LABEL_42;
            case '$':
              if ((*(_WORD *)(v3 - 6) & 1) == 0)
              {
                uint64_t v13 = 0;
                goto LABEL_16;
              }
              uint64_t result = v3 - 32 * (*(_DWORD *)(v3 - 4) & 0x7FFFFFF) + 8;
              break;
            case '%':
              break;
            case '\'':
              if (v12 == 1)
              {
                uint64_t result = v3 - 32 * *(unsigned int *)(v3 + 56) - 88;
              }
              else
              {
                uint64_t v20 = v12 - 2;
                uint64_t v19 = v3 - 56 - 32 * *(unsigned int *)(v3 + 56);
LABEL_34:
                uint64_t result = v19 + 32 * v20;
              }
              break;
            default:
              int v18 = *(_DWORD *)(v3 - 4);
              if ((v18 & 0x40000000) != 0) {
                uint64_t v19 = *(void *)(v3 - 32);
              }
              else {
                uint64_t v19 = v4 - 32 * (v18 & 0x7FFFFFF);
              }
              uint64_t v20 = v11;
              goto LABEL_34;
          }
        }
        uint64_t v13 = *(void *)result;
LABEL_16:
        *v8++ = v13;
        v10 += 32;
        v11 -= 2;
        --v12;
      }
      while (v12);
      unsigned int v6 = (void *)*v2;
    }
    else
    {
      unsigned int v17 = 0;
    }
  }
  uint64_t v14 = v6;
  if (v17)
  {
    uint64_t v15 = 8 * v17;
    uint64_t v14 = v6;
    while (*v14)
    {
      ++v14;
      v15 -= 8;
      if (!v15)
      {
        uint64_t v14 = &v6[v17];
        break;
      }
    }
  }
  uint64_t v16 = v14 - v6;
  if (v16 != v17)
  {
    int v21 = v14 + 1;
    if (v14 + 1 != &v6[v17])
    {
      uint64_t v22 = 8 * v17 - 8 * v16 - 8;
      do
      {
        if (*v21) {
          *v14++ = *v21;
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
      unsigned int v6 = (void *)*v2;
    }
  }
  _DWORD *v7 = (unint64_t)((char *)v14 - (char *)v6) >> 3;
  return result;
}

uint64_t sub_1CC5A9EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 40);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a3 + 24);
  LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    do
    {
      if (v9 == -4096) {
        goto LABEL_9;
      }
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v6 + 16 * v7);
    }
    while (v9 != a2);
    uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  }
  if (v8 == (uint64_t *)(v6 + 16 * v5) || (uint64_t result = v8[1]) == 0)
  {
LABEL_9:
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned int v14 = *(_DWORD *)(a1 + 40);
    uint64_t v15 = sub_1CC129FE4(v13, v14, a2);
    if ((uint64_t *)(v13 + 72 * v14) == v15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15[4];
    }
    sub_1CC5A9EEC(a1, v16, a3);
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild();
  }
  return result;
}

void sub_1CC5AA000(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v112[8] = *MEMORY[0x1E4F143B8];
  *a1 = (uint64_t)(a1 + 2);
  a1[1] = 0x400000000;
  uint64_t v6 = operator new(8uLL);
  __p = v6;
  *uint64_t v6 = 0;
  v97 = v6 + 1;
  uint64_t v98 = v6 + 1;
  uint64_t v99 = 0;
  int32x2_t v100 = 0;
  unsigned int v101 = 0;
  uint64_t v102 = a3;
  sub_1CC5AB698((char **)&__p);
  uint64_t v95 = a2;
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = v7 + 72;
  uint64_t v9 = *(void *)(v7 + 80);
  if (v9 == v7 + 72) {
    goto LABEL_16;
  }
  int v10 = 1;
  uint64_t v11 = 1;
  do
  {
    if (v9) {
      uint64_t v12 = v9 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    if (a3) {
      sub_1CC5AC514((uint64_t)&__src, *(void *)(a3 + 8), v12);
    }
    else {
      sub_1CC5AC9A8((uint64_t)&__src, v12);
    }
    unsigned int v13 = v111;
    if (__src != v112) {
      free(__src);
    }
    if (!v13)
    {
      unint64_t v14 = *((unsigned int *)a1 + 2);
      if (v14 >= *((unsigned int *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*a1 + 8 * v14) = v12;
      ++*((_DWORD *)a1 + 2);
      uint64_t v11 = sub_1CC5AB840((uint64_t)&__p, v12, v11, 1);
    }
    uint64_t v9 = *(void *)(v9 + 8);
    ++v10;
  }
  while (v9 != v8);
  if (v10 == v11) {
    goto LABEL_16;
  }
  LOBYTE(v103) = 0;
  LOBYTE(v106[0]) = 0;
  uint64_t v20 = *(void *)(v95 + 80);
  uint64_t v21 = v20 + 72;
  uint64_t v22 = *(void *)(v20 + 80);
  if (v22 != v20 + 72)
  {
    while (1)
    {
      if (v22) {
        uint64_t v23 = v22 - 24;
      }
      else {
        uint64_t v23 = 0;
      }
      if (!v101) {
        goto LABEL_40;
      }
      unsigned int v24 = ((v23 >> 4) ^ (v23 >> 9)) & (v101 - 1);
      uint64_t v25 = *(void *)(v99 + 72 * v24);
      if (v23 != v25) {
        break;
      }
LABEL_34:
      uint64_t v22 = *(void *)(v22 + 8);
      if (v22 == v21)
      {
        if (LOBYTE(v106[0])) {
          MEMORY[0x1D25D9CD0](v103, 8);
        }
        goto LABEL_106;
      }
    }
    int v26 = 1;
    while (v25 != -4096)
    {
      unsigned int v27 = v24 + v26++;
      unsigned int v24 = v27 & (v101 - 1);
      uint64_t v25 = *(void *)(v99 + 72 * v24);
      if (v23 == v25) {
        goto LABEL_34;
      }
    }
LABEL_40:
    if (LOBYTE(v106[0]))
    {
LABEL_41:
      LODWORD(v28) = sub_1CC5ABD9C((uint64_t)&__p, v23, v11, v11, (uint64_t)&v103);
      BOOL v29 = __p;
      uint64_t v30 = *((void *)__p + v28);
      unint64_t v31 = *((unsigned int *)a1 + 2);
      if (v31 >= *((unsigned int *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v28 = v28;
      *(void *)(*a1 + 8 * v31) = v30;
      ++*((_DWORD *)a1 + 2);
      if (v28 > v11)
      {
        unsigned int v32 = v101;
        unsigned int v33 = v101 - 1;
        int32x2_t v34 = v100;
        do
        {
          if (v32)
          {
            uint64_t v35 = v29[v28];
            unsigned int v36 = ((v35 >> 4) ^ (v35 >> 9)) & v33;
            unint64_t v37 = (uint64_t *)(v99 + 72 * v36);
            uint64_t v38 = *v37;
            if (*v37 == v35)
            {
LABEL_46:
              unint64_t v39 = (uint64_t *)v37[5];
              if (v39 != v37 + 7)
              {
                unsigned int v91 = v29;
                uint64_t v92 = v21;
                uint64_t v89 = v30;
                int32x2_t v94 = v34;
                free(v39);
                int32x2_t v34 = v94;
                uint64_t v30 = v89;
                BOOL v29 = v91;
                uint64_t v21 = v92;
              }
              *unint64_t v37 = -8192;
              int32x2_t v34 = vadd_s32(v34, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              int v40 = 1;
              while (v38 != -4096)
              {
                unsigned int v41 = v36 + v40++;
                unsigned int v36 = v41 & v33;
                unint64_t v37 = (uint64_t *)(v99 + 72 * v36);
                uint64_t v38 = *v37;
                if (*v37 == v35) {
                  goto LABEL_46;
                }
              }
            }
          }
          --v97;
          --v28;
        }
        while (v11 < v28);
        int32x2_t v100 = v34;
      }
      uint64_t v11 = sub_1CC5AB840((uint64_t)&__p, v30, v11, 1);
      goto LABEL_34;
    }
    uint64_t v93 = v23;
    LOBYTE(v106[0]) = 1;
    uint64_t v103 = 0;
    v104 = 0;
    LODWORD(v105) = 0;
    MEMORY[0x1D25D9CD0](0, 8);
    uint64_t v42 = *(void *)(v95 + 80);
    uint64_t v43 = v42 + 72;
    uint64_t v44 = *(void *)(v42 + 80);
    if (v44 == v42 + 72)
    {
LABEL_90:
      uint64_t v62 = v42 + 72;
      uint64_t v23 = v93;
      if (v43 != v62)
      {
        int v63 = 0;
        BOOL v64 = v103;
        int v65 = (int)v105;
        int v66 = v105 - 1;
        int v67 = (char *)v103 + 16 * v105;
        do
        {
          uint64_t v68 = v43 - 24;
          if (!v43) {
            uint64_t v68 = 0;
          }
          ++v63;
          if (v65)
          {
            LODWORD(v69) = ((v68 >> 4) ^ (v68 >> 9)) & v66;
            unsigned int v70 = (char *)&v64[2 * v69];
            uint64_t v71 = *(void *)v70;
            if (v68 == *(void *)v70)
            {
LABEL_96:
              if (v70 != v67) {
                *((_DWORD *)v70 + 2) = v63;
              }
            }
            else
            {
              int v72 = 1;
              while (v71 != -4096)
              {
                int v73 = v69 + v72++;
                uint64_t v69 = v73 & v66;
                uint64_t v71 = v64[2 * v69];
                if (v68 == v71)
                {
                  unsigned int v70 = (char *)&v64[2 * v69];
                  goto LABEL_96;
                }
              }
            }
          }
          uint64_t v43 = *(void *)(v43 + 8);
        }
        while (v43 != v62);
      }
      goto LABEL_41;
    }
LABEL_57:
    if (v44) {
      uint64_t v45 = v44 - 24;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v101)
    {
      unsigned int v46 = ((v45 >> 4) ^ (v45 >> 9)) & (v101 - 1);
      uint64_t v47 = *(void *)(v99 + 72 * v46);
      if (v45 == v47) {
        goto LABEL_88;
      }
      int v48 = 1;
      while (v47 != -4096)
      {
        unsigned int v49 = v46 + v48++;
        unsigned int v46 = v49 & (v101 - 1);
        uint64_t v47 = *(void *)(v99 + 72 * v46);
        if (v45 == v47) {
          goto LABEL_88;
        }
      }
    }
    if (v102) {
      sub_1CC5AC514((uint64_t)&__src, *(void *)(v102 + 8), v45);
    }
    else {
      sub_1CC5AC9A8((uint64_t)&__src, v45);
    }
    uint64_t v50 = (uint64_t *)__src;
    int v51 = (uint64_t *)((char *)__src + 8 * v111);
    if (!v111) {
      goto LABEL_86;
    }
    while (1)
    {
      uint64_t v109 = 0;
      uint64_t v52 = *v50;
      uint64_t v109 = *v50;
      if (!v105) {
        break;
      }
      unsigned int v53 = (v105 - 1) & ((v52 >> 4) ^ (v52 >> 9));
      unint64_t v54 = (char *)v103 + 16 * v53;
      uint64_t v55 = *v54;
      if (v52 != *v54)
      {
        uint64_t v56 = 0;
        int v57 = 1;
        while (v55 != -4096)
        {
          if (v56) {
            BOOL v58 = 0;
          }
          else {
            BOOL v58 = v55 == -8192;
          }
          if (v58) {
            uint64_t v56 = v54;
          }
          unsigned int v59 = v53 + v57++;
          unsigned int v53 = v59 & (v105 - 1);
          unint64_t v54 = (char *)v103 + 16 * v53;
          uint64_t v55 = *v54;
          if (v52 == *v54) {
            goto LABEL_71;
          }
        }
        if (v56) {
          BOOL v60 = v56;
        }
        else {
          BOOL v60 = v54;
        }
        goto LABEL_85;
      }
LABEL_71:
      if (++v50 == v51)
      {
        uint64_t v50 = (uint64_t *)__src;
LABEL_86:
        if (v50 != v112) {
          free(v50);
        }
LABEL_88:
        uint64_t v44 = *(void *)(v44 + 8);
        if (v44 == v43)
        {
          uint64_t v42 = *(void *)(v95 + 80);
          uint64_t v43 = *(void *)(v42 + 80);
          goto LABEL_90;
        }
        goto LABEL_57;
      }
    }
    BOOL v60 = 0;
LABEL_85:
    unsigned int v61 = sub_1CBFAF8D8((uint64_t)&v103, (uint64_t)&v109, &v109, v60);
    *unsigned int v61 = v109;
    *((_DWORD *)v61 + 2) = 0;
    goto LABEL_71;
  }
LABEL_106:
  int v74 = operator new(8uLL);
  uint64_t v103 = v74;
  *int v74 = 0;
  v104 = v74 + 1;
  int v105 = v74 + 1;
  v106[0] = 0;
  v106[1] = 0;
  unsigned int v107 = 0;
  uint64_t v108 = a3;
  if (*((_DWORD *)a1 + 2))
  {
    unsigned int v75 = 0;
    do
    {
      uint64_t v76 = *a1;
      if (a3) {
        sub_1CC5AC514((uint64_t)&__src, *(void *)(a3 + 8), *(void *)(*a1 + 8 * v75));
      }
      else {
        sub_1CC5AC9A8((uint64_t)&__src, *(void *)(*a1 + 8 * v75));
      }
      unsigned int v77 = v111;
      if (__src != v112) {
        free(__src);
      }
      if (v77)
      {
        __src = 0;
        sub_1CC5ADD44((char **)&v103, &__src, &v111);
        sub_1CC5ADC70(v106);
        unsigned int v78 = sub_1CC5ABD9C((uint64_t)&v103, *(void *)(v76 + 8 * v75), 0, 0, 0);
        uint64_t v79 = *((unsigned int *)a1 + 2);
        if (v78 >= 2)
        {
          uint64_t v85 = *a1 + 8 * v79;
          unsigned int v86 = 2;
          while (1)
          {
            unsigned int v87 = (void *)*a1;
            if (v79)
            {
              uint64_t v88 = 8 * v79;
              unsigned int v87 = (void *)*a1;
              while (*v87 != *((void *)v103 + v86))
              {
                ++v87;
                v88 -= 8;
                if (!v88)
                {
                  unsigned int v87 = (void *)(*a1 + 8 * v79);
                  break;
                }
              }
            }
            if (v79 != ((uint64_t)v87 - *a1) >> 3) {
              break;
            }
            if (++v86 > v78) {
              goto LABEL_114;
            }
          }
          uint64_t v90 = *(void *)(v76 + 8 * v75);
          *(void *)(v76 + 8 * v75) = *(void *)(v85 - 8);
          *(void *)(v85 - 8) = v90;
          LODWORD(v79) = v79 - 1;
          *((_DWORD *)a1 + 2) = v79;
          --v75;
        }
      }
      else
      {
        LODWORD(v79) = *((_DWORD *)a1 + 2);
      }
LABEL_114:
      ++v75;
    }
    while (v79 > v75);
    uint64_t v80 = v106[0];
    if (v107)
    {
      uint64_t v81 = 0;
      uint64_t v82 = 72 * v107;
      do
      {
        uint64_t v83 = *(void *)(v80 + v81);
        if (v83 != -4096 && v83 != -8192)
        {
          int v84 = *(void **)(v80 + v81 + 40);
          if ((void *)(v80 + v81 + 56) != v84) {
            free(v84);
          }
        }
        v81 += 72;
      }
      while (v82 != v81);
    }
  }
  else
  {
    uint64_t v80 = 0;
  }
  MEMORY[0x1D25D9CD0](v80, 8);
  if (v103) {
    operator delete(v103);
  }
LABEL_16:
  uint64_t v15 = v99;
  if (v101)
  {
    uint64_t v16 = 72 * v101;
    unsigned int v17 = (void *)(v99 + 56);
    do
    {
      uint64_t v18 = *(v17 - 7);
      if (v18 != -4096 && v18 != -8192)
      {
        uint64_t v19 = (void *)*(v17 - 2);
        if (v17 != v19) {
          free(v19);
        }
      }
      v17 += 9;
      v16 -= 72;
    }
    while (v16);
  }
  MEMORY[0x1D25D9CD0](v15, 8);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1CC5AA87C(char **a1, uint64_t a2)
{
  sub_1CC5AB698(a1);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = 8 * v4;
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = sub_1CC5AB840((uint64_t)a1, v8, v7, 0);
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_1CC5AA8DC(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  v175[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  unint64_t v5 = (unint64_t)(a1[1] - *a1) >> 3;
  if (v5 >= 2)
  {
    uint64_t v6 = 1;
    while (1)
    {
      v173 = 0;
      uint64_t v7 = *(void **)(v4 + 8 * v6);
      v173 = v7;
      int v8 = *((_DWORD *)a1 + 10);
      if (!v8) {
        break;
      }
      uint64_t v9 = a1[3];
      int v10 = v8 - 1;
      unsigned int v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
      uint64_t v12 = (uint64_t *)(v9 + 72 * v11);
      uint64_t v13 = *v12;
      if (v7 != (void *)*v12)
      {
        unint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)(v9 + 72 * v11);
          uint64_t v13 = *v12;
          if (v7 == (void *)*v12) {
            goto LABEL_5;
          }
        }
        if (v14) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = v12;
        }
        goto LABEL_19;
      }
LABEL_5:
      v12[4] = *(void *)(v4 + 8 * *((unsigned int *)v12 + 3));
      if (++v6 == v5) {
        goto LABEL_20;
      }
    }
    uint64_t v18 = 0;
LABEL_19:
    uint64_t v12 = sub_1CC5AC33C((uint64_t)(a1 + 3), (uint64_t *)&v173, v18);
    uint64_t *v12 = (uint64_t)v7;
    *(_OWORD *)(v12 + 5) = 0u;
    *(_OWORD *)(v12 + 3) = 0u;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 7) = 0u;
    v12[5] = (uint64_t)(v12 + 7);
    *((_DWORD *)v12 + 13) = 2;
    uint64_t v4 = *a1;
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v168 = v5;
  v173 = v175;
  uint64_t v174 = 0x2000000000;
  uint64_t v19 = (v5 - 1);
  if (v19 < 2) {
    goto LABEL_215;
  }
  uint64_t v169 = (uint64_t)(a1 + 3);
  unsigned int v167 = v5;
  unsigned int v20 = v5;
  do
  {
    uint64_t v21 = *(void *)(*a1 + 8 * v19);
    uint64_t v171 = v21;
    int v22 = *((_DWORD *)a1 + 10);
    if (v22)
    {
      uint64_t v23 = a1[3];
      int v24 = v22 - 1;
      unsigned int v25 = ((v21 >> 4) ^ (v21 >> 9)) & v24;
      int v26 = (uint64_t *)(v23 + 72 * v25);
      uint64_t v27 = *v26;
      if (v21 == *v26) {
        goto LABEL_24;
      }
      v97 = 0;
      int v98 = 1;
      while (v27 != -4096)
      {
        if (v97) {
          BOOL v99 = 0;
        }
        else {
          BOOL v99 = v27 == -8192;
        }
        if (v99) {
          v97 = v26;
        }
        unsigned int v100 = v25 + v98++;
        unsigned int v25 = v100 & v24;
        int v26 = (uint64_t *)(v23 + 72 * v25);
        uint64_t v27 = *v26;
        if (v21 == *v26) {
          goto LABEL_24;
        }
      }
      if (v97) {
        unsigned int v101 = v97;
      }
      else {
        unsigned int v101 = v26;
      }
    }
    else
    {
      unsigned int v101 = 0;
    }
    int v26 = sub_1CC5AC33C(v169, &v171, v101);
    *int v26 = v21;
    *(_OWORD *)(v26 + 5) = 0u;
    *(_OWORD *)(v26 + 1) = 0u;
    *(_OWORD *)(v26 + 3) = 0u;
    *(_OWORD *)(v26 + 7) = 0u;
    v26[5] = (uint64_t)(v26 + 7);
    *((_DWORD *)v26 + 13) = 2;
LABEL_24:
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 + 3);
    uint64_t v28 = *((unsigned int *)v26 + 12);
    if (v28)
    {
      BOOL v29 = (uint64_t *)v26[5];
      uint64_t v30 = &v29[v28];
      while (1)
      {
        int v31 = *((_DWORD *)a1 + 10);
        if (v31)
        {
          uint64_t v32 = *v29;
          uint64_t v33 = a1[3];
          unsigned int v34 = (*v29 >> 4) ^ (*v29 >> 9);
          int v35 = v31 - 1;
          unsigned int v36 = v34 & v35;
          unint64_t v37 = (uint64_t *)(v33 + 72 * (v34 & v35));
          uint64_t v38 = *v37;
          if (*v29 != *v37)
          {
            int v39 = 1;
            uint64_t v40 = *v37;
            unsigned int v41 = v34 & v35;
            while (v40 != -4096)
            {
              unsigned int v42 = v41 + v39++;
              unsigned int v41 = v42 & v35;
              uint64_t v40 = *(void *)(v33 + 72 * v41);
              if (v32 == v40) {
                goto LABEL_31;
              }
            }
            goto LABEL_42;
          }
LABEL_31:
          uint64_t v43 = *(unsigned int *)(a2 + 64);
          if (!v43) {
            break;
          }
          uint64_t v44 = *(void *)(a2 + 48);
          LODWORD(v45) = (v43 - 1) & v34;
          unsigned int v46 = (uint64_t *)(v44 + 16 * v45);
          uint64_t v47 = *v46;
          if (v32 != *v46)
          {
            int v66 = 1;
            do
            {
              if (v47 == -4096) {
                goto LABEL_35;
              }
              int v67 = v45 + v66++;
              uint64_t v45 = v67 & (v43 - 1);
              uint64_t v47 = *(void *)(v44 + 16 * v45);
            }
            while (v32 != v47);
            unsigned int v46 = (uint64_t *)(v44 + 16 * v45);
          }
          if (v46 == (uint64_t *)(v44 + 16 * v43)) {
            break;
          }
          uint64_t v48 = v46[1];
          if (!v48 || *(_DWORD *)(v48 + 16) >= a3) {
            break;
          }
        }
LABEL_42:
        if (++v29 == v30) {
          goto LABEL_112;
        }
      }
LABEL_35:
      uint64_t v172 = *v29;
      if (v32 != v38)
      {
        BOOL v58 = 0;
        int v59 = 1;
        while (v38 != -4096)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v38 == -8192;
          }
          if (v60) {
            BOOL v58 = v37;
          }
          unsigned int v61 = v36 + v59++;
          unsigned int v36 = v61 & v35;
          unint64_t v37 = (uint64_t *)(v33 + 72 * v36);
          uint64_t v38 = *v37;
          if (*v37 == v32) {
            goto LABEL_36;
          }
        }
        if (v58) {
          uint64_t v95 = v58;
        }
        else {
          uint64_t v95 = v37;
        }
        unint64_t v37 = sub_1CC5AC33C(v169, &v172, v95);
        *unint64_t v37 = v32;
        *(_OWORD *)(v37 + 5) = 0u;
        *(_OWORD *)(v37 + 1) = 0u;
        *(_OWORD *)(v37 + 3) = 0u;
        *(_OWORD *)(v37 + 7) = 0u;
        v37[5] = (uint64_t)(v37 + 7);
        *((_DWORD *)v37 + 13) = 2;
      }
LABEL_36:
      if (*((_DWORD *)v37 + 3) < v20)
      {
        unsigned int v49 = v37 + 3;
LABEL_38:
        uint64_t v50 = *v49;
        uint64_t v172 = *v49;
        int v51 = *((_DWORD *)a1 + 10);
        if (v51)
        {
          uint64_t v52 = a1[3];
          int v53 = v51 - 1;
          unsigned int v54 = v53 & ((v50 >> 4) ^ (v50 >> 9));
          uint64_t v55 = (uint64_t *)(v52 + 72 * v54);
          uint64_t v56 = *v55;
          if (v50 == *v55) {
            goto LABEL_40;
          }
          uint64_t v62 = 0;
          int v63 = 1;
          while (v56 != -4096)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v56 == -8192;
            }
            if (v64) {
              uint64_t v62 = v55;
            }
            unsigned int v65 = v54 + v63++;
            unsigned int v54 = v65 & v53;
            uint64_t v55 = (uint64_t *)(v52 + 72 * v54);
            uint64_t v56 = *v55;
            if (v50 == *v55) {
              goto LABEL_40;
            }
          }
          if (v62) {
            unsigned int v96 = v62;
          }
          else {
            unsigned int v96 = v55;
          }
        }
        else
        {
          unsigned int v96 = 0;
        }
        uint64_t v55 = sub_1CC5AC33C(v169, &v172, v96);
        *uint64_t v55 = v50;
        *(_OWORD *)(v55 + 5) = 0u;
        *(_OWORD *)(v55 + 1) = 0u;
        *(_OWORD *)(v55 + 3) = 0u;
        *(_OWORD *)(v55 + 7) = 0u;
        v55[5] = (uint64_t)(v55 + 7);
        *((_DWORD *)v55 + 13) = 2;
LABEL_40:
        unsigned int v57 = *((_DWORD *)v55 + 4);
        if (v57 < *((_DWORD *)v26 + 4)) {
          *((_DWORD *)v26 + 4) = v57;
        }
        goto LABEL_42;
      }
      unsigned int v75 = v37 + 1;
      while (1)
      {
        if (v174 >= (unint64_t)HIDWORD(v174)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v173 + v174) = v75;
        LODWORD(v174) = v174 + 1;
        uint64_t v68 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v75 + 1));
        int v69 = *((_DWORD *)a1 + 10);
        if (!v69) {
          break;
        }
        uint64_t v70 = a1[3];
        int v71 = v69 - 1;
        unsigned int v72 = ((*v68 >> 4) ^ (*v68 >> 9)) & v71;
        int v73 = (uint64_t *)(v70 + 72 * v72);
        uint64_t v74 = *v73;
        if (*v68 != *v73)
        {
          uint64_t v76 = 0;
          int v77 = 1;
          while (v74 != -4096)
          {
            if (v76) {
              BOOL v78 = 0;
            }
            else {
              BOOL v78 = v74 == -8192;
            }
            if (v78) {
              uint64_t v76 = v73;
            }
            unsigned int v79 = v72 + v77++;
            unsigned int v72 = v79 & v71;
            int v73 = (uint64_t *)(v70 + 72 * v72);
            uint64_t v74 = *v73;
            if (*v68 == *v73) {
              goto LABEL_69;
            }
          }
          if (v76) {
            uint64_t v80 = v76;
          }
          else {
            uint64_t v80 = v73;
          }
          goto LABEL_83;
        }
LABEL_69:
        unsigned int v75 = v73 + 1;
        if (*((_DWORD *)v73 + 3) < v20)
        {
          uint64_t v102 = v73 + 3;
          int v103 = *((_DWORD *)a1 + 10);
          if (v103)
          {
            uint64_t v104 = a1[3];
            int v105 = v103 - 1;
            unsigned int v106 = ((*v102 >> 4) ^ (*v102 >> 9)) & v105;
            unsigned int v107 = (uint64_t *)(v104 + 72 * v106);
            uint64_t v108 = *v107;
            if (*v102 == *v107) {
              goto LABEL_130;
            }
            uint64_t v109 = 0;
            int v110 = 1;
            while (v108 != -4096)
            {
              if (v109) {
                BOOL v111 = 0;
              }
              else {
                BOOL v111 = v108 == -8192;
              }
              if (v111) {
                uint64_t v109 = v107;
              }
              unsigned int v112 = v106 + v110++;
              unsigned int v106 = v112 & v105;
              unsigned int v107 = (uint64_t *)(v104 + 72 * v106);
              uint64_t v108 = *v107;
              if (*v102 == *v107) {
                goto LABEL_130;
              }
            }
            if (v109) {
              v113 = v109;
            }
            else {
              v113 = v107;
            }
          }
          else
          {
            v113 = 0;
          }
          unsigned int v107 = sub_1CC5AC33C(v169, v102, v113);
          *unsigned int v107 = *v102;
          *(_OWORD *)(v107 + 5) = 0u;
          *(_OWORD *)(v107 + 3) = 0u;
          *(_OWORD *)(v107 + 1) = 0u;
          *(_OWORD *)(v107 + 7) = 0u;
          v107[5] = (uint64_t)(v107 + 7);
          *((_DWORD *)v107 + 13) = 2;
LABEL_130:
          int32x2_t v94 = v107 + 1;
          unsigned int v88 = v174;
          while (2)
          {
            uint64_t v81 = *((void *)v173 + v88 - 1);
            LODWORD(v174) = v88 - 1;
            *(_DWORD *)(v81 + 4) = *((_DWORD *)v75 + 1);
            unsigned int v49 = (uint64_t *)(v81 + 16);
            int v82 = *((_DWORD *)a1 + 10);
            if (v82)
            {
              uint64_t v83 = a1[3];
              int v84 = v82 - 1;
              unsigned int v85 = ((*v49 >> 4) ^ (*v49 >> 9)) & v84;
              unsigned int v86 = (uint64_t *)(v83 + 72 * v85);
              uint64_t v87 = *v86;
              if (*v49 == *v86) {
                goto LABEL_86;
              }
              uint64_t v89 = 0;
              int v90 = 1;
              while (v87 != -4096)
              {
                if (v89) {
                  BOOL v91 = 0;
                }
                else {
                  BOOL v91 = v87 == -8192;
                }
                if (v91) {
                  uint64_t v89 = v86;
                }
                unsigned int v92 = v85 + v90++;
                unsigned int v85 = v92 & v84;
                unsigned int v86 = (uint64_t *)(v83 + 72 * v85);
                uint64_t v87 = *v86;
                if (*v49 == *v86) {
                  goto LABEL_86;
                }
              }
              unsigned int v166 = v94;
              if (v89) {
                uint64_t v93 = v89;
              }
              else {
                uint64_t v93 = v86;
              }
            }
            else
            {
              unsigned int v166 = v94;
              uint64_t v93 = 0;
            }
            unsigned int v86 = sub_1CC5AC33C(v169, (uint64_t *)(v81 + 16), v93);
            *unsigned int v86 = *v49;
            *(_OWORD *)(v86 + 5) = 0u;
            *(_OWORD *)(v86 + 3) = 0u;
            *(_OWORD *)(v86 + 1) = 0u;
            *(_OWORD *)(v86 + 7) = 0u;
            v86[5] = (uint64_t)(v86 + 7);
            *((_DWORD *)v86 + 13) = 2;
            int32x2_t v94 = v166;
LABEL_86:
            if (*((_DWORD *)v94 + 2) >= *((_DWORD *)v86 + 4)) {
              int32x2_t v94 = v86 + 1;
            }
            else {
              *unsigned int v49 = v75[2];
            }
            unsigned int v88 = v174;
            unsigned int v75 = (uint64_t *)v81;
            if (!v174) {
              goto LABEL_38;
            }
            continue;
          }
        }
      }
      uint64_t v80 = 0;
LABEL_83:
      int v73 = sub_1CC5AC33C(v169, v68, v80);
      *int v73 = *v68;
      *(_OWORD *)(v73 + 5) = 0u;
      *(_OWORD *)(v73 + 3) = 0u;
      *(_OWORD *)(v73 + 1) = 0u;
      *(_OWORD *)(v73 + 7) = 0u;
      v73[5] = (uint64_t)(v73 + 7);
      *((_DWORD *)v73 + 13) = 2;
      goto LABEL_69;
    }
LABEL_112:
    unsigned int v20 = v19--;
  }
  while ((v19 & 0xFFFFFFFE) != 0);
  if (v167 < 3) {
    goto LABEL_215;
  }
  uint64_t v114 = 2;
  while (2)
  {
    uint64_t v115 = *a1;
    uint64_t v116 = *(void *)(*a1 + 8 * v114);
    uint64_t v172 = v116;
    int v117 = *((_DWORD *)a1 + 10);
    if (v117)
    {
      uint64_t v118 = a1[3];
      int v119 = v117 - 1;
      unsigned int v120 = ((v116 >> 4) ^ (v116 >> 9)) & (v117 - 1);
      uint64_t v121 = (uint64_t *)(v118 + 72 * v120);
      uint64_t v122 = *v121;
      if (v116 == *v121)
      {
        uint64_t v123 = (uint64_t *)(v115 + 8 * *((unsigned int *)v121 + 4));
        uint64_t v124 = v168;
        goto LABEL_164;
      }
      unsigned int v125 = 0;
      int v126 = 1;
      uint64_t v124 = v168;
      while (v122 != -4096)
      {
        if (v125) {
          BOOL v127 = 0;
        }
        else {
          BOOL v127 = v122 == -8192;
        }
        if (v127) {
          unsigned int v125 = v121;
        }
        unsigned int v128 = v120 + v126++;
        unsigned int v120 = v128 & v119;
        uint64_t v121 = (uint64_t *)(v118 + 72 * v120);
        uint64_t v122 = *v121;
        if (v116 == *v121) {
          goto LABEL_162;
        }
      }
      if (v125) {
        int v129 = v125;
      }
      else {
        int v129 = v121;
      }
    }
    else
    {
      int v129 = 0;
      uint64_t v124 = v168;
    }
    uint64_t v121 = sub_1CC5AC33C(v169, &v172, v129);
    *uint64_t v121 = v116;
    *(_OWORD *)(v121 + 5) = 0u;
    *(_OWORD *)(v121 + 3) = 0u;
    *(_OWORD *)(v121 + 7) = 0u;
    *(_OWORD *)(v121 + 1) = 0u;
    v121[5] = (uint64_t)(v121 + 7);
    *((_DWORD *)v121 + 13) = 2;
    uint64_t v115 = *a1;
    uint64_t v118 = a1[3];
    int v117 = *((_DWORD *)a1 + 10);
LABEL_162:
    uint64_t v123 = (uint64_t *)(v115 + 8 * *((unsigned int *)v121 + 4));
    if (!v117)
    {
      unsigned int v153 = 0;
LABEL_197:
      uint64_t v131 = sub_1CC5AC33C(v169, v123, v153);
      *uint64_t v131 = *v123;
      *(_OWORD *)(v131 + 5) = 0u;
      *(_OWORD *)(v131 + 3) = 0u;
      *(_OWORD *)(v131 + 1) = 0u;
      *(_OWORD *)(v131 + 7) = 0u;
      v131[5] = (uint64_t)(v131 + 7);
      *((_DWORD *)v131 + 13) = 2;
      goto LABEL_165;
    }
    int v119 = v117 - 1;
LABEL_164:
    unsigned int v130 = ((*v123 >> 4) ^ (*v123 >> 9)) & v119;
    uint64_t v131 = (uint64_t *)(v118 + 72 * v130);
    uint64_t v132 = *v131;
    if (*v123 != *v131)
    {
      v149 = 0;
      int v150 = 1;
      while (v132 != -4096)
      {
        if (v149) {
          BOOL v151 = 0;
        }
        else {
          BOOL v151 = v132 == -8192;
        }
        if (v151) {
          v149 = v131;
        }
        unsigned int v152 = v130 + v150++;
        unsigned int v130 = v152 & v119;
        uint64_t v131 = (uint64_t *)(v118 + 72 * v130);
        uint64_t v132 = *v131;
        if (*v123 == *v131) {
          goto LABEL_165;
        }
      }
      if (v149) {
        unsigned int v153 = v149;
      }
      else {
        unsigned int v153 = v131;
      }
      goto LABEL_197;
    }
LABEL_165:
    unsigned int v133 = *((_DWORD *)v131 + 2);
    uint64_t v134 = v121 + 4;
    for (uint64_t i = v134; ; uint64_t i = v158 + 4)
    {
      uint64_t v136 = *i;
      uint64_t v171 = v136;
      int v137 = *((_DWORD *)a1 + 10);
      unsigned int v138 = v136 >> 4;
      if (v137)
      {
        uint64_t v139 = a1[3];
        int v140 = v137 - 1;
        unsigned int v141 = (v138 ^ (v136 >> 9)) & v140;
        unsigned int v142 = (uint64_t *)(v139 + 72 * v141);
        uint64_t v143 = *v142;
        if (v136 == *v142) {
          goto LABEL_168;
        }
        uint64_t v144 = 0;
        int v145 = 1;
        while (v143 != -4096)
        {
          if (v144) {
            BOOL v146 = 0;
          }
          else {
            BOOL v146 = v143 == -8192;
          }
          if (v146) {
            uint64_t v144 = v142;
          }
          unsigned int v147 = v141 + v145++;
          unsigned int v141 = v147 & v140;
          unsigned int v142 = (uint64_t *)(v139 + 72 * v141);
          uint64_t v143 = *v142;
          if (v136 == *v142) {
            goto LABEL_168;
          }
        }
        unsigned int v148 = v144 ? v144 : v142;
      }
      else
      {
        unsigned int v148 = 0;
      }
      unsigned int v142 = sub_1CC5AC33C(v169, &v171, v148);
      *unsigned int v142 = v136;
      *(_OWORD *)(v142 + 5) = 0u;
      *(_OWORD *)(v142 + 1) = 0u;
      *(_OWORD *)(v142 + 3) = 0u;
      *(_OWORD *)(v142 + 7) = 0u;
      v142[5] = (uint64_t)(v142 + 7);
      *((_DWORD *)v142 + 13) = 2;
LABEL_168:
      if (*((_DWORD *)v142 + 2) <= v133) {
        break;
      }
      int v154 = *((_DWORD *)a1 + 10);
      if (v154)
      {
        uint64_t v155 = a1[3];
        int v156 = v154 - 1;
        unsigned int v157 = v156 & (v138 ^ (v136 >> 9));
        v158 = (uint64_t *)(v155 + 72 * v157);
        uint64_t v159 = *v158;
        if (v136 == *v158) {
          continue;
        }
        BOOL v160 = 0;
        int v161 = 1;
        while (v159 != -4096)
        {
          if (v160) {
            BOOL v162 = 0;
          }
          else {
            BOOL v162 = v159 == -8192;
          }
          if (v162) {
            BOOL v160 = v158;
          }
          unsigned int v163 = v157 + v161++;
          unsigned int v157 = v163 & v156;
          v158 = (uint64_t *)(v155 + 72 * v157);
          uint64_t v159 = *v158;
          if (v136 == *v158) {
            goto LABEL_200;
          }
        }
        if (v160) {
          v164 = v160;
        }
        else {
          v164 = v158;
        }
      }
      else
      {
        v164 = 0;
      }
      v158 = sub_1CC5AC33C(v169, &v171, v164);
      uint64_t *v158 = v136;
      *(_OWORD *)(v158 + 5) = 0u;
      *(_OWORD *)(v158 + 1) = 0u;
      *(_OWORD *)(v158 + 3) = 0u;
      *(_OWORD *)(v158 + 7) = 0u;
      v158[5] = (uint64_t)(v158 + 7);
      *((_DWORD *)v158 + 13) = 2;
LABEL_200:
      ;
    }
    *uint64_t v134 = v136;
    if (++v114 != v124) {
      continue;
    }
    break;
  }
LABEL_215:
  if (v173 != v175) {
    free(v173);
  }
}

uint64_t *sub_1CC5AB454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t result = (uint64_t *)(a1 + 24);
  uint64_t v7 = v8;
  uint64_t v9 = *(void *)a1;
  int v10 = (uint64_t *)(*(void *)a1 + 8);
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    unint64_t v14 = (uint64_t *)(v7 + 72 * v13);
    uint64_t v15 = *v14;
    if (*v10 == *v14) {
      goto LABEL_16;
    }
    BOOL v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        BOOL v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      unint64_t v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v10 == *v14) {
        goto LABEL_16;
      }
    }
    if (v16) {
      unsigned int v20 = v16;
    }
    else {
      unsigned int v20 = v14;
    }
  }
  else
  {
    unsigned int v20 = 0;
  }
  uint64_t result = sub_1CC5AC33C((uint64_t)result, (uint64_t *)(*(void *)a1 + 8), v20);
  unint64_t v14 = result;
  *uint64_t result = *v10;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[5] = (uint64_t)(result + 7);
  *((_DWORD *)result + 13) = 2;
  uint64_t v9 = *(void *)a1;
LABEL_16:
  _OWORD v14[4] = a3;
  uint64_t v21 = *(void *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    uint64_t v22 = v21 >> 3;
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v39 = 0;
      uint64_t v24 = *(void *)(*(void *)a1 + 8 * v23);
      uint64_t v39 = v24;
      int v25 = *(_DWORD *)(a2 + 64);
      if (!v25) {
        break;
      }
      uint64_t v26 = *(void *)(a2 + 48);
      int v27 = v25 - 1;
      unsigned int v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      uint64_t result = (uint64_t *)(v26 + 16 * v28);
      uint64_t v29 = *result;
      if (v24 != *result)
      {
        uint64_t v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            uint64_t v30 = result;
          }
          unsigned int v33 = v28 + v31++;
          unsigned int v28 = v33 & v27;
          uint64_t result = (uint64_t *)(v26 + 16 * v28);
          uint64_t v29 = *result;
          if (v24 == *result) {
            goto LABEL_33;
          }
        }
        if (v30) {
          unsigned int v34 = v30;
        }
        else {
          unsigned int v34 = result;
        }
        goto LABEL_32;
      }
LABEL_33:
      if (!result[1])
      {
        uint64_t v35 = *(void *)(a1 + 24);
        unsigned int v36 = *(_DWORD *)(a1 + 40);
        unint64_t v37 = sub_1CC129FE4(v35, v36, v39);
        if ((uint64_t *)(v35 + 72 * v36) == v37) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v37[4];
        }
        sub_1CC5ADE14(a1, v38, a2);
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild();
      }
      if (++v23 == v22) {
        return result;
      }
    }
    unsigned int v34 = 0;
LABEL_32:
    uint64_t result = sub_1CC48EB1C(a2 + 48, (uint64_t)&v39, &v39, v34);
    *uint64_t result = v39;
    result[1] = 0;
    goto LABEL_33;
  }
  return result;
}

void sub_1CC5AB698(char **a1)
{
  uint64_t v4 = (uint64_t *)a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = v4;
  uint64_t v26 = 0;
  int v5 = *(_DWORD *)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = *v3;
    if (!*v3)
    {
      uint64_t v7 = v3;
      goto LABEL_4;
    }
    int v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = v5 - 1;
    int v22 = 1;
    uint64_t v7 = v3;
    while (v6 != -4096)
    {
      if (v20) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v6 == -8192;
      }
      if (v23) {
        unsigned int v20 = v7;
      }
      int v24 = v19 + v22++;
      int v19 = v24 & v21;
      uint64_t v7 = &v3[9 * (v24 & v21)];
      uint64_t v6 = *v7;
      if (!*v7) {
        goto LABEL_4;
      }
    }
    if (v20) {
      int v25 = v20;
    }
    else {
      int v25 = v7;
    }
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v7 = sub_1CC5AC33C(v2, &v26, v25);
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[8] = 0;
  v7[5] = (uint64_t)(v7 + 7);
  *((_DWORD *)v7 + 13) = 2;
LABEL_4:
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 2) = 1;
  v7[3] = 0;
  uint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(void *)uint64_t v9 = 0;
    int v17 = v9 + 8;
  }
  else
  {
    int v10 = *a1;
    uint64_t v11 = (v9 - *a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    BOOL v16 = &v15[8 * v11];
    *(void *)BOOL v16 = 0;
    int v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        uint64_t v18 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      uint64_t v9 = *a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  a1[1] = v17;
}

uint64_t sub_1CC5AB840(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v78[64] = *MEMORY[0x1E4F143B8];
  uint64_t v72 = a2;
  uint64_t v76 = v78;
  v78[0] = a2;
  uint64_t v77 = 0x4000000001;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v69 = a1 + 24;
  int v7 = *(_DWORD *)(a1 + 40);
  if (!v7) {
    goto LABEL_15;
  }
  int v10 = v7 - 1;
  unsigned int v11 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v12 = (uint64_t *)(v6 + 72 * v11);
  uint64_t v13 = *v12;
  if (*v12 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v11 + 12) = a4;
LABEL_15:
    unsigned int v22 = 1;
    goto LABEL_16;
  }
  int v14 = 1;
  uint64_t v15 = *v12;
  unsigned int v16 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v15 == -4096) {
      goto LABEL_15;
    }
    unsigned int v17 = v16 + v14++;
    unsigned int v16 = v17 & v10;
    uint64_t v15 = *(void *)(v6 + 72 * v16);
  }
  while (v15 != a2);
  uint64_t v18 = 0;
  int v19 = 1;
  while (v13 != -4096)
  {
    if (v18) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v13 == -8192;
    }
    if (v20) {
      uint64_t v18 = v12;
    }
    unsigned int v21 = v11 + v19++;
    unsigned int v11 = v21 & v10;
    unint64_t v12 = (uint64_t *)(v6 + 72 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_14;
    }
  }
  if (v18) {
    int v66 = v18;
  }
  else {
    int v66 = v12;
  }
  int v67 = sub_1CC5AC33C(v69, &v72, v66);
  *int v67 = a2;
  *(_OWORD *)(v67 + 5) = 0u;
  *(_OWORD *)(v67 + 3) = 0u;
  *(_OWORD *)(v67 + 7) = 0u;
  *(_OWORD *)(v67 + 1) = 0u;
  v67[5] = (uint64_t)(v67 + 7);
  *((_DWORD *)v67 + 13) = 2;
  unsigned int v22 = v77;
  *((_DWORD *)v67 + 3) = a4;
  if (v22)
  {
    do
    {
LABEL_16:
      uint64_t v23 = *((void *)v76 + v22 - 1);
      LODWORD(v77) = v22 - 1;
      uint64_t v71 = v23;
      int v24 = *(_DWORD *)(a1 + 40);
      if (v24)
      {
        uint64_t v25 = *(void *)(a1 + 24);
        int v26 = v24 - 1;
        unsigned int v27 = v26 & ((v23 >> 4) ^ (v23 >> 9));
        unsigned int v28 = (uint64_t *)(v25 + 72 * v27);
        uint64_t v29 = *v28;
        if (v23 == *v28) {
          goto LABEL_31;
        }
        uint64_t v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            uint64_t v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          unsigned int v28 = (uint64_t *)(v25 + 72 * v27);
          uint64_t v29 = *v28;
          if (v23 == *v28) {
            goto LABEL_31;
          }
        }
        if (v30) {
          unsigned int v34 = v30;
        }
        else {
          unsigned int v34 = v28;
        }
      }
      else
      {
        unsigned int v34 = 0;
      }
      unsigned int v28 = sub_1CC5AC33C(v69, &v71, v34);
      *unsigned int v28 = v23;
      *(_OWORD *)(v28 + 5) = 0u;
      *(_OWORD *)(v28 + 1) = 0u;
      *(_OWORD *)(v28 + 3) = 0u;
      *(_OWORD *)(v28 + 7) = 0u;
      v28[5] = (uint64_t)(v28 + 7);
      *((_DWORD *)v28 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v28 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v28 + 4) = a3;
        *((_DWORD *)v28 + 2) = a3;
        v28[3] = v23;
        unsigned int v36 = *(uint64_t **)(a1 + 8);
        unint64_t v35 = *(void *)(a1 + 16);
        if ((unint64_t)v36 >= v35)
        {
          uint64_t v38 = *(uint64_t **)a1;
          uint64_t v39 = ((uint64_t)v36 - *(void *)a1) >> 3;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            abort();
          }
          uint64_t v41 = v35 - (void)v38;
          if (v41 >> 2 > v40) {
            unint64_t v40 = v41 >> 2;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            if (v42 >> 61) {
              sub_1CB833614();
            }
            uint64_t v43 = (char *)operator new(8 * v42);
          }
          else
          {
            uint64_t v43 = 0;
          }
          uint64_t v44 = (uint64_t *)&v43[8 * v39];
          *uint64_t v44 = v23;
          unint64_t v37 = v44 + 1;
          if (v36 != v38)
          {
            do
            {
              uint64_t v45 = *--v36;
              *--uint64_t v44 = v45;
            }
            while (v36 != v38);
            unsigned int v36 = *(uint64_t **)a1;
          }
          *(void *)a1 = v44;
          *(void *)(a1 + 8) = v37;
          *(void *)(a1 + 16) = &v43[8 * v42];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *unsigned int v36 = v23;
          unint64_t v37 = v36 + 1;
        }
        *(void *)(a1 + 8) = v37;
        uint64_t v46 = *(void *)(a1 + 48);
        if (v46) {
          sub_1CC5ACE40(*(void *)(v46 + 8), v71, (char **)&v73);
        }
        else {
          sub_1CC5AD04C((char **)&v73, *(void *)(v71 + 8));
        }
        uint64_t v47 = (uint64_t *)v73;
        uint64_t v48 = (uint64_t *)((char *)v73 + 8 * v74);
        if (v74)
        {
          while (1)
          {
            uint64_t v49 = *v47;
            uint64_t v70 = v49;
            uint64_t v50 = *(void *)(a1 + 24);
            unsigned int v51 = *(_DWORD *)(a1 + 40);
            uint64_t v52 = sub_1CC129FE4(v50, v51, v49);
            if ((uint64_t *)(v50 + 72 * v51) == v52 || !*((_DWORD *)v52 + 2)) {
              break;
            }
            uint64_t v53 = v71;
            if (v49 != v71)
            {
              unsigned int v54 = v52 + 5;
              uint64_t v56 = v52 + 6;
              unint64_t v55 = *((unsigned int *)v52 + 12);
              unint64_t v57 = *((unsigned int *)v52 + 13);
LABEL_74:
              if (v55 >= v57) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v54 + 8 * v55) = v53;
              ++*v56;
            }
            if (++v47 == v48)
            {
              uint64_t v47 = (uint64_t *)v73;
              goto LABEL_81;
            }
          }
          if (v51)
          {
            unsigned int v58 = ((v49 >> 4) ^ (v49 >> 9)) & (v51 - 1);
            int v59 = (uint64_t *)(v50 + 72 * v58);
            uint64_t v60 = *v59;
            if (v49 != *v59)
            {
              unsigned int v61 = 0;
              int v62 = 1;
              while (v60 != -4096)
              {
                if (v61) {
                  BOOL v63 = 0;
                }
                else {
                  BOOL v63 = v60 == -8192;
                }
                if (v63) {
                  unsigned int v61 = v59;
                }
                unsigned int v64 = v58 + v62++;
                unsigned int v58 = v64 & (v51 - 1);
                int v59 = (uint64_t *)(v50 + 72 * v58);
                uint64_t v60 = *v59;
                if (v49 == *v59) {
                  goto LABEL_72;
                }
              }
              if (v61) {
                unsigned int v65 = v61;
              }
              else {
                unsigned int v65 = v59;
              }
LABEL_71:
              int v59 = sub_1CC5AC33C(v69, &v70, v65);
              *int v59 = v49;
              *(_OWORD *)(v59 + 5) = 0u;
              *(_OWORD *)(v59 + 1) = 0u;
              *(_OWORD *)(v59 + 3) = 0u;
              *(_OWORD *)(v59 + 7) = 0u;
              v59[5] = (uint64_t)(v59 + 7);
              *((_DWORD *)v59 + 13) = 2;
            }
LABEL_72:
            if (v77 >= (unint64_t)HIDWORD(v77)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v76 + v77) = v49;
            uint64_t v56 = v59 + 6;
            unint64_t v55 = *((unsigned int *)v59 + 12);
            LODWORD(v77) = v77 + 1;
            *((_DWORD *)v59 + 3) = a3;
            unsigned int v54 = v59 + 5;
            uint64_t v53 = v71;
            unint64_t v57 = *((unsigned int *)v59 + 13);
            goto LABEL_74;
          }
          unsigned int v65 = 0;
          goto LABEL_71;
        }
LABEL_81:
        if (v47 != &v75) {
          free(v47);
        }
      }
      unsigned int v22 = v77;
    }
    while (v77);
  }
  if (v76 != v78) {
    free(v76);
  }
  return a3;
}

uint64_t sub_1CC5ABD9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v81[64] = *MEMORY[0x1E4F143B8];
  uint64_t v74 = a2;
  unsigned int v79 = v81;
  v81[0] = a2;
  uint64_t v80 = 0x4000000001;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v72 = a1 + 24;
  int v8 = *(_DWORD *)(a1 + 40);
  if (!v8) {
    goto LABEL_15;
  }
  int v11 = v8 - 1;
  unsigned int v12 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (uint64_t *)(v7 + 72 * v12);
  uint64_t v14 = *v13;
  if (*v13 == a2)
  {
LABEL_14:
    *(_DWORD *)(v7 + 72 * v12 + 12) = a4;
LABEL_15:
    unsigned int v23 = 1;
    goto LABEL_16;
  }
  int v15 = 1;
  uint64_t v16 = *v13;
  unsigned int v17 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v16 == -4096) {
      goto LABEL_15;
    }
    unsigned int v18 = v17 + v15++;
    unsigned int v17 = v18 & v11;
    uint64_t v16 = *(void *)(v7 + 72 * v17);
  }
  while (v16 != a2);
  int v19 = 0;
  int v20 = 1;
  while (v14 != -4096)
  {
    if (v19) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v14 == -8192;
    }
    if (v21) {
      int v19 = v13;
    }
    unsigned int v22 = v12 + v20++;
    unsigned int v12 = v22 & v11;
    uint64_t v13 = (uint64_t *)(v7 + 72 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a2) {
      goto LABEL_14;
    }
  }
  if (v19) {
    uint64_t v68 = v19;
  }
  else {
    uint64_t v68 = v13;
  }
  uint64_t v69 = sub_1CC5AC33C(v72, &v74, v68);
  *uint64_t v69 = a2;
  *(_OWORD *)(v69 + 5) = 0u;
  *(_OWORD *)(v69 + 3) = 0u;
  *(_OWORD *)(v69 + 7) = 0u;
  *(_OWORD *)(v69 + 1) = 0u;
  v69[5] = (uint64_t)(v69 + 7);
  *((_DWORD *)v69 + 13) = 2;
  unsigned int v23 = v80;
  *((_DWORD *)v69 + 3) = a4;
  if (v23)
  {
    do
    {
LABEL_16:
      uint64_t v24 = *((void *)v79 + v23 - 1);
      LODWORD(v80) = v23 - 1;
      uint64_t v73 = v24;
      int v25 = *(_DWORD *)(a1 + 40);
      if (v25)
      {
        uint64_t v26 = *(void *)(a1 + 24);
        int v27 = v25 - 1;
        unsigned int v28 = v27 & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v29 = (uint64_t *)(v26 + 72 * v28);
        uint64_t v30 = *v29;
        if (v24 == *v29) {
          goto LABEL_31;
        }
        int v31 = 0;
        int v32 = 1;
        while (v30 != -4096)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -8192;
          }
          if (v33) {
            int v31 = v29;
          }
          unsigned int v34 = v28 + v32++;
          unsigned int v28 = v34 & v27;
          uint64_t v29 = (uint64_t *)(v26 + 72 * v28);
          uint64_t v30 = *v29;
          if (v24 == *v29) {
            goto LABEL_31;
          }
        }
        if (v31) {
          unint64_t v35 = v31;
        }
        else {
          unint64_t v35 = v29;
        }
      }
      else
      {
        unint64_t v35 = 0;
      }
      uint64_t v29 = sub_1CC5AC33C(v72, &v73, v35);
      *uint64_t v29 = v24;
      *(_OWORD *)(v29 + 5) = 0u;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 3) = 0u;
      *(_OWORD *)(v29 + 7) = 0u;
      v29[5] = (uint64_t)(v29 + 7);
      *((_DWORD *)v29 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v29 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v29 + 4) = a3;
        *((_DWORD *)v29 + 2) = a3;
        v29[3] = v24;
        unint64_t v37 = *(uint64_t **)(a1 + 8);
        unint64_t v36 = *(void *)(a1 + 16);
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = *(uint64_t **)a1;
          uint64_t v40 = ((uint64_t)v37 - *(void *)a1) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            abort();
          }
          uint64_t v42 = v36 - (void)v39;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            if (v43 >> 61) {
              sub_1CB833614();
            }
            uint64_t v44 = (char *)operator new(8 * v43);
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v45 = (uint64_t *)&v44[8 * v40];
          *uint64_t v45 = v24;
          uint64_t v38 = v45 + 1;
          if (v37 != v39)
          {
            do
            {
              uint64_t v46 = *--v37;
              *--uint64_t v45 = v46;
            }
            while (v37 != v39);
            unint64_t v37 = *(uint64_t **)a1;
          }
          *(void *)a1 = v45;
          *(void *)(a1 + 8) = v38;
          *(void *)(a1 + 16) = &v44[8 * v43];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *unint64_t v37 = v24;
          uint64_t v38 = v37 + 1;
        }
        *(void *)(a1 + 8) = v38;
        uint64_t v47 = *(void *)(a1 + 48);
        if (v47) {
          sub_1CC5AC514((uint64_t)&v76, *(void *)(v47 + 8), v73);
        }
        else {
          sub_1CC5AC9A8((uint64_t)&v76, v73);
        }
        uint64_t v48 = v77;
        if (a5 && v77 >= 2uLL)
        {
          uint64_t v75 = a5;
          sub_1CD5BD6D8((uint64_t)v76, (uint64_t *)v76 + v77, &v75, 126 - 2 * __clz(v77), 1);
          uint64_t v48 = v77;
        }
        uint64_t v49 = (uint64_t *)v76;
        uint64_t v50 = (uint64_t *)((char *)v76 + 8 * v48);
        if (v48)
        {
          while (1)
          {
            uint64_t v51 = *v49;
            uint64_t v75 = v51;
            uint64_t v52 = *(void *)(a1 + 24);
            unsigned int v53 = *(_DWORD *)(a1 + 40);
            unsigned int v54 = sub_1CC129FE4(v52, v53, v51);
            if ((uint64_t *)(v52 + 72 * v53) == v54 || !*((_DWORD *)v54 + 2)) {
              break;
            }
            uint64_t v55 = v73;
            if (v51 != v73)
            {
              uint64_t v56 = v54 + 5;
              unsigned int v58 = v54 + 6;
              unint64_t v57 = *((unsigned int *)v54 + 12);
              unint64_t v59 = *((unsigned int *)v54 + 13);
LABEL_77:
              if (v57 >= v59) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v56 + 8 * v57) = v55;
              ++*v58;
            }
            if (++v49 == v50)
            {
              uint64_t v49 = (uint64_t *)v76;
              goto LABEL_84;
            }
          }
          if (v53)
          {
            unsigned int v60 = ((v51 >> 4) ^ (v51 >> 9)) & (v53 - 1);
            unsigned int v61 = (uint64_t *)(v52 + 72 * v60);
            uint64_t v62 = *v61;
            if (v51 != *v61)
            {
              BOOL v63 = 0;
              int v64 = 1;
              while (v62 != -4096)
              {
                if (v63) {
                  BOOL v65 = 0;
                }
                else {
                  BOOL v65 = v62 == -8192;
                }
                if (v65) {
                  BOOL v63 = v61;
                }
                unsigned int v66 = v60 + v64++;
                unsigned int v60 = v66 & (v53 - 1);
                unsigned int v61 = (uint64_t *)(v52 + 72 * v60);
                uint64_t v62 = *v61;
                if (v51 == *v61) {
                  goto LABEL_75;
                }
              }
              if (v63) {
                int v67 = v63;
              }
              else {
                int v67 = v61;
              }
LABEL_74:
              unsigned int v61 = sub_1CC5AC33C(v72, &v75, v67);
              *unsigned int v61 = v51;
              *(_OWORD *)(v61 + 5) = 0u;
              *(_OWORD *)(v61 + 1) = 0u;
              *(_OWORD *)(v61 + 3) = 0u;
              *(_OWORD *)(v61 + 7) = 0u;
              v61[5] = (uint64_t)(v61 + 7);
              *((_DWORD *)v61 + 13) = 2;
            }
LABEL_75:
            if (v80 >= (unint64_t)HIDWORD(v80)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v79 + v80) = v51;
            unsigned int v58 = v61 + 6;
            unint64_t v57 = *((unsigned int *)v61 + 12);
            LODWORD(v80) = v80 + 1;
            *((_DWORD *)v61 + 3) = a3;
            uint64_t v56 = v61 + 5;
            uint64_t v55 = v73;
            unint64_t v59 = *((unsigned int *)v61 + 13);
            goto LABEL_77;
          }
          int v67 = 0;
          goto LABEL_74;
        }
LABEL_84:
        if (v49 != &v78) {
          free(v49);
        }
      }
      unsigned int v23 = v80;
    }
    while (v80);
  }
  if (v79 != v81) {
    free(v79);
  }
  return a3;
}

uint64_t *sub_1CC5AC33C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = (2 * v6 - 1) | ((unint64_t)(2 * v6 - 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 64;
    }
    *(_DWORD *)(a1 + 16) = v13;
    uint64_t v14 = (uint64_t *)operator new(72 * v13, (std::align_val_t)8uLL);
    *(void *)a1 = v14;
    if (v9)
    {
      sub_1CC2DDC90(a1, v9, &v9[9 * v6]);
      MEMORY[0x1D25D9CD0](v9, 8);
      LODWORD(v16) = *(_DWORD *)(a1 + 16);
      uint64_t v14 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v15 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      do
      {
        v14[v15] = -4096;
        v15 += 9;
      }
      while (9 * v16 != v15);
    }
    uint64_t v7 = *a2;
    int v17 = v16 - 1;
    unsigned int v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
    a3 = &v14[9 * v18];
    uint64_t v19 = *a3;
    if (*a2 == *a3) {
      goto LABEL_5;
    }
    int v20 = 0;
    int v21 = 1;
    while (v19 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -8192;
      }
      if (v22) {
        int v20 = a3;
      }
      unsigned int v23 = v18 + v21++;
      unsigned int v18 = v23 & v17;
      a3 = &v14[9 * v18];
      uint64_t v19 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v20) {
      a3 = v20;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1CC2DDBB8(a1, *(_DWORD *)(a1 + 16));
    uint64_t v24 = 0;
    sub_1CC387000(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
    a3 = v24;
  }
  uint64_t v7 = *a3;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

unsigned char *sub_1CC5AC514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  if (v5 == a3 + 40)
  {
LABEL_36:
    unsigned int v22 = 0;
    int v8 = (void *)(a1 + 16);
    *(void *)a1 = a1 + 16;
    uint64_t v9 = (_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = 8;
  }
  else
  {
    uint64_t v6 = v5 - 24;
    if (v5) {
      uint64_t v7 = v5 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned char *)(v7 + 16) == 30)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v22 = 2;
      }
      else {
        unsigned int v22 = 1;
      }
LABEL_10:
      int v8 = (void *)(a1 + 16);
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x800000000;
      uint64_t v9 = (_DWORD *)(a1 + 8);
    }
    else
    {
      unsigned int v22 = 0;
      switch(*(unsigned char *)(v7 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_10;
        case 0x1E:
LABEL_65:
          __break(1u);
          goto LABEL_66;
        case 0x1F:
          unsigned int v22 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
LABEL_66:
          unsigned int v22 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          unsigned int v22 = 2;
          goto LABEL_10;
        case 0x24:
          unsigned int v22 = *(_WORD *)(v7 + 18) & 1;
          goto LABEL_10;
        case 0x25:
          unsigned int v22 = 1;
          goto LABEL_10;
        case 0x27:
          unsigned int v22 = *(_DWORD *)(v7 + 80) + 1;
          break;
        default:
          goto LABEL_36;
      }
      int v8 = (void *)(a1 + 16);
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x800000000;
      uint64_t v9 = (_DWORD *)(a1 + 8);
      if (v22 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    if (v22)
    {
      unint64_t v10 = v8;
      int v11 = *(unsigned __int8 *)(v5 - 8);
      uint64_t v12 = v5 - 32 * (v22 - 1) - 56;
      unsigned int v13 = 2 * v22 - 1;
      uint64_t v7 = (v11 - 31);
      unsigned int v14 = v22;
      do
      {
        uint64_t v15 = (uint64_t *)v12;
        if (v11 != 30)
        {
          uint64_t v15 = (uint64_t *)(v5 - 56);
          switch(v11)
          {
            case ' ':
            case '&':
              int v44 = *(_DWORD *)(v5 - 4);
              if ((v44 & 0x40000000) != 0) {
                uint64_t v24 = *(void *)(v5 - 32);
              }
              else {
                uint64_t v24 = v6 - 32 * (v44 & 0x7FFFFFF);
              }
              uint64_t v25 = v14;
              goto LABEL_35;
            case '!':
              uint64_t v45 = -64;
              if (v14 == 1) {
                uint64_t v45 = -96;
              }
              uint64_t v15 = (uint64_t *)(v6 + v45);
              break;
            case '""':
            case '#':
              goto LABEL_65;
            case '$':
              if ((*(_WORD *)(v5 - 6) & 1) == 0)
              {
                uint64_t v16 = 0;
                goto LABEL_16;
              }
              uint64_t v15 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 - 4) & 0x7FFFFFF) + 8);
              break;
            case '%':
              break;
            case '\'':
              if (v14 == 1)
              {
                uint64_t v15 = (uint64_t *)(v5 - 32 * *(unsigned int *)(v5 + 56) - 88);
              }
              else
              {
                uint64_t v25 = v14 - 2;
                uint64_t v24 = v5 - 56 - 32 * *(unsigned int *)(v5 + 56);
LABEL_35:
                uint64_t v15 = (uint64_t *)(v24 + 32 * v25);
              }
              break;
            default:
              int v23 = *(_DWORD *)(v5 - 4);
              if ((v23 & 0x40000000) != 0) {
                uint64_t v24 = *(void *)(v5 - 32);
              }
              else {
                uint64_t v24 = v6 - 32 * (v23 & 0x7FFFFFF);
              }
              uint64_t v25 = v13;
              goto LABEL_35;
          }
        }
        uint64_t v16 = *v15;
LABEL_16:
        *v10++ = v16;
        v12 += 32;
        v13 -= 2;
        --v14;
      }
      while (v14);
      int v8 = *(void **)a1;
    }
    else
    {
      unsigned int v22 = 0;
    }
  }
  int v17 = v8;
  if (v22)
  {
    uint64_t v26 = 8 * v22;
    int v17 = v8;
    while (*v17)
    {
      ++v17;
      v26 -= 8;
      if (!v26)
      {
        int v17 = &v8[v22];
        break;
      }
    }
  }
  uint64_t v18 = v17 - v8;
  if (v18 != v22)
  {
    int v27 = v17 + 1;
    if (v17 + 1 != &v8[v22])
    {
      uint64_t v28 = 8 * v22 - 8 * v18 - 8;
      do
      {
        if (*v27) {
          *v17++ = *v27;
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
      int v8 = *(void **)a1;
    }
  }
  *uint64_t v9 = (unint64_t)((char *)v17 - (char *)v8) >> 3;
  uint64_t result = (unsigned char *)sub_1CC5ACD04(a2 + 296, a3);
  if (*(unsigned char *)(a2 + 296))
  {
    uint64_t v20 = a2 + 304;
    unsigned int v21 = 4;
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 304);
    unsigned int v21 = *(_DWORD *)(a2 + 312);
  }
  if ((unsigned char *)(v20 + 72 * v21) != result)
  {
    uint64_t v29 = *((unsigned int *)result + 4);
    uint64_t v30 = *(void **)a1;
    uint64_t v31 = *(unsigned int *)(a1 + 8);
    if (v29)
    {
      int v32 = (uint64_t *)*((void *)result + 1);
      BOOL v33 = &v32[v29];
      do
      {
        uint64_t v34 = *v32;
        uint64_t v35 = 8 * v31;
        unint64_t v36 = v30;
        unint64_t v37 = &v30[v31];
        if (v31)
        {
          uint64_t v38 = 8 * v31;
          unint64_t v36 = v30;
          while (*v36 != v34)
          {
            ++v36;
            v38 -= 8;
            if (!v38)
            {
              unint64_t v36 = &v30[v31];
              break;
            }
          }
        }
        uint64_t v39 = v36 - v30;
        if (v39 != v31)
        {
          uint64_t v40 = v36 + 1;
          if (v36 + 1 != v37)
          {
            uint64_t v41 = v35 - 8 * v39 - 8;
            do
            {
              if (*v40 != v34) {
                *v36++ = *v40;
              }
              ++v40;
              v41 -= 8;
            }
            while (v41);
            uint64_t v30 = *(void **)a1;
          }
        }
        uint64_t v31 = ((unint64_t)((char *)v36 - (char *)v30) >> 3);
        ++v32;
      }
      while (v32 != v33);
      *uint64_t v9 = v31;
    }
    uint64_t v42 = (uint64_t *)*((void *)result + 5);
    unint64_t v43 = &v42[*((unsigned int *)result + 12)];
    return sub_1CC0A3870(a1, (uint64_t)&v30[v31], v42, v43);
  }
  return result;
}

uint64_t sub_1CC5AC9A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 == a2 + 40)
  {
LABEL_35:
    unsigned int v17 = 0;
    uint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t result = result + 16;
    uint64_t v7 = (_DWORD *)(result + 8);
    *(_DWORD *)(result + 12) = 8;
  }
  else
  {
    uint64_t v4 = v3 - 24;
    if (v3) {
      uint64_t v5 = v3 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned char *)(v5 + 16) == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v17 = 2;
      }
      else {
        unsigned int v17 = 1;
      }
LABEL_10:
      uint64_t v6 = (void *)(result + 16);
      *(void *)uint64_t result = result + 16;
      *(void *)(result + 8) = 0x800000000;
      uint64_t v7 = (_DWORD *)(result + 8);
    }
    else
    {
      unsigned int v17 = 0;
      switch(*(unsigned char *)(v5 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_10;
        case 0x1E:
LABEL_42:
          __break(1u);
          goto LABEL_43;
        case 0x1F:
          unsigned int v17 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
LABEL_43:
          unsigned int v17 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          unsigned int v17 = 2;
          goto LABEL_10;
        case 0x24:
          unsigned int v17 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_10;
        case 0x25:
          unsigned int v17 = 1;
          goto LABEL_10;
        case 0x27:
          unsigned int v17 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_35;
      }
      uint64_t v6 = v2 + 2;
      *uint64_t v2 = v2 + 2;
      v2[1] = 0x800000000;
      uint64_t v7 = v2 + 1;
      if (v17 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    if (v17)
    {
      int v8 = v6;
      int v9 = *(unsigned __int8 *)(v3 - 8);
      uint64_t v10 = v3 - 32 * (v17 - 1) - 56;
      unsigned int v11 = 2 * v17 - 1;
      uint64_t v5 = (v9 - 31);
      unsigned int v12 = v17;
      do
      {
        uint64_t result = v10;
        if (v9 != 30)
        {
          uint64_t result = v3 - 56;
          switch(v9)
          {
            case ' ':
            case '&':
              int v23 = *(_DWORD *)(v3 - 4);
              if ((v23 & 0x40000000) != 0) {
                uint64_t v19 = *(void *)(v3 - 32);
              }
              else {
                uint64_t v19 = v4 - 32 * (v23 & 0x7FFFFFF);
              }
              uint64_t v20 = v12;
              goto LABEL_34;
            case '!':
              uint64_t v24 = -64;
              if (v12 == 1) {
                uint64_t v24 = -96;
              }
              uint64_t result = v4 + v24;
              break;
            case '""':
            case '#':
              goto LABEL_42;
            case '$':
              if ((*(_WORD *)(v3 - 6) & 1) == 0)
              {
                uint64_t v13 = 0;
                goto LABEL_16;
              }
              uint64_t result = v3 - 32 * (*(_DWORD *)(v3 - 4) & 0x7FFFFFF) + 8;
              break;
            case '%':
              break;
            case '\'':
              if (v12 == 1)
              {
                uint64_t result = v3 - 32 * *(unsigned int *)(v3 + 56) - 88;
              }
              else
              {
                uint64_t v20 = v12 - 2;
                uint64_t v19 = v3 - 56 - 32 * *(unsigned int *)(v3 + 56);
LABEL_34:
                uint64_t result = v19 + 32 * v20;
              }
              break;
            default:
              int v18 = *(_DWORD *)(v3 - 4);
              if ((v18 & 0x40000000) != 0) {
                uint64_t v19 = *(void *)(v3 - 32);
              }
              else {
                uint64_t v19 = v4 - 32 * (v18 & 0x7FFFFFF);
              }
              uint64_t v20 = v11;
              goto LABEL_34;
          }
        }
        uint64_t v13 = *(void *)result;
LABEL_16:
        *v8++ = v13;
        v10 += 32;
        v11 -= 2;
        --v12;
      }
      while (v12);
      uint64_t v6 = (void *)*v2;
    }
    else
    {
      unsigned int v17 = 0;
    }
  }
  unsigned int v14 = v6;
  if (v17)
  {
    uint64_t v15 = 8 * v17;
    unsigned int v14 = v6;
    while (*v14)
    {
      ++v14;
      v15 -= 8;
      if (!v15)
      {
        unsigned int v14 = &v6[v17];
        break;
      }
    }
  }
  uint64_t v16 = v14 - v6;
  if (v16 != v17)
  {
    unsigned int v21 = v14 + 1;
    if (v14 + 1 != &v6[v17])
    {
      uint64_t v22 = 8 * v17 - 8 * v16 - 8;
      do
      {
        if (*v21) {
          *v14++ = *v21;
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
      uint64_t v6 = (void *)*v2;
    }
  }
  _DWORD *v7 = (unint64_t)((char *)v14 - (char *)v6) >> 3;
  return result;
}

uint64_t sub_1CC5ACD04(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  if (sub_1CC5ACD94(a1, &v7, &v6)) {
    return v6;
  }
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    unsigned int v4 = 4;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
  }
  return v3 + 72 * v4;
}

uint64_t sub_1CC5ACD94(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 72 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 72 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

unsigned char *sub_1CC5ACE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  do
  {
    a2 = *(void *)(a2 + 8);
    if (!a2) {
      break;
    }
    uint64_t v6 = *(void *)(a2 + 24);
    unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    BOOL v8 = v6 && v7 >= 0x1C;
  }
  while (!v8 || v7 - 29 >= 0xB);
  *a3 = (char *)(a3 + 2);
  a3[1] = (char *)0x800000000;
  sub_1CBF846A4((uint64_t)a3, a2, 0);
  int v10 = *a3;
  uint64_t v11 = *((unsigned int *)a3 + 2);
  unsigned int v12 = *a3;
  if (v11)
  {
    uint64_t v13 = 8 * v11;
    unsigned int v12 = *a3;
    while (*(void *)v12)
    {
      v12 += 8;
      v13 -= 8;
      if (!v13)
      {
        unsigned int v12 = &(*a3)[8 * v11];
        break;
      }
    }
  }
  uint64_t v14 = (v12 - v10) >> 3;
  uint64_t v15 = v12 + 8;
  if (v14 != v11 && v15 != &(*a3)[8 * v11])
  {
    uint64_t v17 = 8 * v11 - 8 * v14 - 8;
    do
    {
      if (*(void *)v15)
      {
        *(void *)unsigned int v12 = *(void *)v15;
        v12 += 8;
      }
      v15 += 8;
      v17 -= 8;
    }
    while (v17);
    int v10 = *a3;
  }
  *((_DWORD *)a3 + 2) = (unint64_t)(v12 - v10) >> 3;
  uint64_t result = (unsigned char *)sub_1CC5ACD04(a1, v3);
  uint64_t v19 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    unsigned int v20 = 4;
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 8);
    unsigned int v20 = *(_DWORD *)(a1 + 16);
  }
  if ((unsigned char *)(v19 + 72 * v20) != result)
  {
    uint64_t v21 = *((unsigned int *)result + 4);
    uint64_t v22 = *((unsigned int *)a3 + 2);
    int v23 = *a3;
    if (v21)
    {
      uint64_t v24 = (uint64_t *)*((void *)result + 1);
      uint64_t v25 = &v24[v21];
      do
      {
        uint64_t v26 = *v24;
        uint64_t v27 = 8 * v22;
        uint64_t v28 = v23;
        uint64_t v29 = &v23[8 * v22];
        if (v22)
        {
          uint64_t v30 = 8 * v22;
          uint64_t v28 = v23;
          while (*(void *)v28 != v26)
          {
            v28 += 8;
            v30 -= 8;
            if (!v30)
            {
              uint64_t v28 = &v23[8 * v22];
              break;
            }
          }
        }
        uint64_t v31 = (v28 - v23) >> 3;
        if (v31 != v22)
        {
          int v32 = v28 + 8;
          if (v28 + 8 != v29)
          {
            uint64_t v33 = v27 - 8 * v31 - 8;
            do
            {
              if (*v32 != v26)
              {
                *(void *)uint64_t v28 = *v32;
                v28 += 8;
              }
              ++v32;
              v33 -= 8;
            }
            while (v33);
            int v23 = *a3;
          }
        }
        uint64_t v22 = ((unint64_t)(v28 - v23) >> 3);
        ++v24;
      }
      while (v24 != v25);
      *((_DWORD *)a3 + 2) = v22;
    }
    uint64_t v34 = (uint64_t *)*((void *)result + 5);
    uint64_t v35 = &v34[*((unsigned int *)result + 12)];
    return sub_1CC0A3870((uint64_t)a3, (uint64_t)&v23[8 * v22], v34, v35);
  }
  return result;
}

uint64_t sub_1CC5AD04C(char **a1, uint64_t a2)
{
  for (; a2; a2 = *(void *)(a2 + 8))
  {
    uint64_t v3 = *(void *)(a2 + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3) {
      BOOL v5 = v4 >= 0x1C;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5 && v4 - 29 < 0xB) {
      break;
    }
  }
  *a1 = (char *)(a1 + 2);
  a1[1] = (char *)0x800000000;
  uint64_t result = sub_1CBF846A4((uint64_t)a1, a2, 0);
  BOOL v8 = *a1;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  int v10 = *a1;
  if (v9)
  {
    uint64_t v11 = 8 * v9;
    int v10 = *a1;
    while (*(void *)v10)
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
      {
        int v10 = &(*a1)[8 * v9];
        break;
      }
    }
  }
  uint64_t v12 = (v10 - v8) >> 3;
  uint64_t v13 = v10 + 8;
  if (v12 != v9 && v13 != &(*a1)[8 * v9])
  {
    uint64_t v15 = 8 * v9 - 8 * v12 - 8;
    do
    {
      if (*(void *)v13)
      {
        *(void *)int v10 = *(void *)v13;
        v10 += 8;
      }
      v13 += 8;
      v15 -= 8;
    }
    while (v15);
    BOOL v8 = *a1;
  }
  *((_DWORD *)a1 + 2) = (unint64_t)(v10 - v8) >> 3;
  return result;
}

uint64_t *sub_1CC5AD14C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unsigned int v4 = result;
    BOOL v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0;
      BOOL v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        BOOL v8 = v5;
        uint64_t result = (uint64_t *)sub_1CD5BDAA4(a3, v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = *(uint64_t *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (uint64_t *)sub_1CD5BDAA4(a3, v11, *(uint64_t *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        BOOL v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1CC5AD214(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unsigned int v4 = result;
    for (uint64_t i = result + 1; v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      unsigned int v4 = i;
      uint64_t result = (uint64_t *)sub_1CD5BDAA4(a3, v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (uint64_t *)sub_1CD5BDAA4(a3, v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

BOOL sub_1CC5AD2B0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8 = sub_1CD5BDAA4(a4, *a2, *a1);
  BOOL result = sub_1CD5BDAA4(a4, *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = sub_1CD5BDAA4(a4, *a3, v10);
      if (result)
      {
        uint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    BOOL result = sub_1CD5BDAA4(a4, *a2, *a1);
    if (result)
    {
      uint64_t v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
    }
  }
  return result;
}

uint64_t *sub_1CC5AD398(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v4 = a2;
  uint64_t v6 = *a1;
  if (sub_1CD5BDAA4(a3, *a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (!sub_1CD5BDAA4(a3, v6, v8));
  }
  else
  {
    uint64_t v14 = a1 + 1;
    do
    {
      uint64_t v7 = v14;
      if (v14 >= v4) {
        break;
      }
      ++v14;
    }
    while (!sub_1CD5BDAA4(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v9 = *--v4;
    while (sub_1CD5BDAA4(a3, v6, v9));
  }
  while (v7 < v4)
  {
    uint64_t v10 = *v7;
    uint64_t *v7 = *v4;
    uint64_t *v4 = v10;
    do
    {
      uint64_t v11 = v7[1];
      ++v7;
    }
    while (!sub_1CD5BDAA4(a3, v6, v11));
    do
      uint64_t v12 = *--v4;
    while (sub_1CD5BDAA4(a3, v6, v12));
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1CC5AD4A8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  while (sub_1CD5BDAA4(a3, a1[++v6], v7))
    ;
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (!sub_1CD5BDAA4(a3, v12, v7));
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!sub_1CD5BDAA4(a3, v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (sub_1CD5BDAA4(a3, v16, v7));
      do
        uint64_t v17 = *--v14;
      while (!sub_1CD5BDAA4(a3, v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL sub_1CC5AD5C4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CD5BDAA4(a3, *(a2 - 1), *a1))
      {
        uint64_t v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1CC5AD2B0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC5AD790(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC5AD848(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CC5AD2B0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CD5BDAA4(a3, *v9, *v8))
    {
      uint64_t v12 = *v9;
      uint64_t v13 = v10;
      while (1)
      {
        uint64_t v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        v13 -= 8;
        if (!sub_1CD5BDAA4(a3, v12, *((void *)v14 + 1)))
        {
          uint64_t v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      uint64_t v15 = a1;
LABEL_11:
      uint64_t *v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

BOOL sub_1CC5AD790(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CC5AD2B0(a1, a2, a3, a5);
  BOOL result = sub_1CD5BDAA4(a5, *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    BOOL result = sub_1CD5BDAA4(a5, *a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL result = sub_1CD5BDAA4(a5, *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1CC5AD848(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1CC5AD790(a1, a2, a3, a4, a6);
  BOOL result = sub_1CD5BDAA4(a6, *a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    BOOL result = sub_1CD5BDAA4(a6, *a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      BOOL result = sub_1CD5BDAA4(a6, *a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        BOOL result = sub_1CD5BDAA4(a6, *a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC5AD928(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (result != a2)
  {
    BOOL v5 = a2;
    uint64_t v6 = result;
    uint64_t v7 = (char *)a2 - (char *)result;
    uint64_t v8 = a2 - result;
    if ((char *)a2 - (char *)result >= 9)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = &result[v9];
      do
      {
        BOOL result = (uint64_t *)sub_1CC5ADB44((BOOL)v6, a4, v8, v11--);
        --v10;
      }
      while (v10);
    }
    if (v5 != a3)
    {
      uint64_t v12 = v5;
      do
      {
        BOOL result = (uint64_t *)sub_1CD5BDAA4(a4, *v12, *v6);
        if (result)
        {
          uint64_t v13 = *v12;
          uint64_t *v12 = *v6;
          *uint64_t v6 = v13;
          BOOL result = (uint64_t *)sub_1CC5ADB44((BOOL)v6, a4, v8, v6);
        }
        ++v12;
      }
      while (v12 != a3);
    }
    if (v7 >= 9)
    {
      uint64_t v28 = v6;
      do
      {
        uint64_t v14 = 0;
        uint64_t v15 = *v6;
        uint64_t v16 = v8 - 2;
        if (v8 < 2) {
          uint64_t v16 = v8 - 1;
        }
        uint64_t v17 = v16 >> 1;
        int v18 = v6;
        do
        {
          uint64_t v19 = &v18[v14 + 1];
          uint64_t v20 = (2 * v14) | 1;
          uint64_t v21 = 2 * v14 + 2;
          if (v21 < v8)
          {
            BOOL result = (uint64_t *)sub_1CD5BDAA4(a4, *v19, v18[v14 + 2]);
            if (result)
            {
              ++v19;
              uint64_t v20 = v21;
            }
          }
          uint64_t *v18 = *v19;
          int v18 = v19;
          uint64_t v14 = v20;
        }
        while (v20 <= v17);
        if (v19 == --v5)
        {
          uint64_t *v19 = v15;
        }
        else
        {
          uint64_t *v19 = *v5;
          *BOOL v5 = v15;
          uint64_t v6 = v28;
          uint64_t v22 = (char *)v19 - (char *)v28 + 8;
          if (v22 < 9) {
            continue;
          }
          unint64_t v23 = (((unint64_t)v22 >> 3) - 2) >> 1;
          uint64_t v24 = &v28[v23];
          BOOL result = (uint64_t *)sub_1CD5BDAA4(a4, *v24, *v19);
          if (!result) {
            continue;
          }
          uint64_t v25 = *v19;
          do
          {
            uint64_t v26 = v24;
            uint64_t *v19 = *v24;
            if (!v23) {
              break;
            }
            unint64_t v23 = (v23 - 1) >> 1;
            uint64_t v24 = &v28[v23];
            BOOL result = (uint64_t *)sub_1CD5BDAA4(a4, *v24, v25);
            uint64_t v19 = v26;
          }
          while ((result & 1) != 0);
          *uint64_t v26 = v25;
        }
        uint64_t v6 = v28;
      }
      while (v8-- > 2);
    }
  }
  return result;
}

BOOL sub_1CC5ADB44(BOOL result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1CD5BDAA4(a2, *v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      BOOL result = sub_1CD5BDAA4(a2, *v12, *v5);
      if (!result)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          *BOOL v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (uint64_t *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3 && sub_1CD5BDAA4(a2, *v12, v12[1]))
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          BOOL result = sub_1CD5BDAA4(a2, *v12, v14);
          BOOL v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        uint64_t *v15 = v14;
      }
    }
  }
  return result;
}

void sub_1CC5ADC70(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 || a1[3])
  {
    uint64_t v2 = a1[4];
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1CD52D9DC(a1);
    }
    else
    {
      if (v2)
      {
        uint64_t v3 = 72 * v2;
        uint64_t v4 = *(void *)a1 + 56;
        do
        {
          uint64_t v5 = *(void *)(v4 - 56);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              BOOL v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                unint64_t v9 = a1;
                uint64_t v7 = v4;
                uint64_t v8 = v3;
                free(v6);
                uint64_t v4 = v7;
                uint64_t v3 = v8;
                a1 = v9;
              }
            }
            *(void *)(v4 - 56) = -4096;
          }
          v4 += 72;
          v3 -= 72;
        }
        while (v3);
      }
      *((void *)a1 + 1) = 0;
    }
  }
}

char *sub_1CC5ADD44(char **a1, unsigned char *__src, unsigned char *a3)
{
  BOOL result = a1[2];
  uint64_t v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
    }
    BOOL result = (char *)operator new(8uLL);
    uint64_t v7 = result;
    *a1 = result;
    a1[1] = result;
    unint64_t v9 = a1 + 1;
    a1[2] = result + 8;
    int64_t v10 = a3 - __src;
    if (a3 != __src) {
      BOOL result = (char *)memcpy(result, __src, a3 - __src);
    }
  }
  else
  {
    uint64_t v8 = a1[1];
    unint64_t v9 = a1 + 1;
    int64_t v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (__src != a3) {
LABEL_10:
    }
      BOOL result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *unint64_t v9 = &v7[v10];
  return result;
}

uint64_t sub_1CC5ADE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 64);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    do
    {
      if (v9 == -4096) {
        goto LABEL_9;
      }
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v6 + 16 * v7);
    }
    while (v9 != a2);
    uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  }
  if (v8 == (uint64_t *)(v6 + 16 * v5) || (uint64_t result = v8[1]) == 0)
  {
LABEL_9:
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned int v14 = *(_DWORD *)(a1 + 40);
    uint64_t v15 = sub_1CC129FE4(v13, v14, a2);
    if ((uint64_t *)(v13 + 72 * v14) == v15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15[4];
    }
    sub_1CC5ADE14(a1, v16, a3);
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild();
  }
  return result;
}

void sub_1CC5ADF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v131[8] = *MEMORY[0x1E4F143B8];
  uint64_t v114 = a4;
  if (!a3 || (uint64_t v6 = *(void *)a4) == 0)
  {
    uint64_t v8 = 0;
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 56) + 80);
  if (v7) {
    uint64_t v8 = v7 - 24;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != a3 && v8 != v6)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(unsigned int *)(a1 + 40);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a3) {
        goto LABEL_12;
      }
      int v102 = 1;
      while (v14 != -4096)
      {
        int v103 = v12 + v102++;
        uint64_t v12 = v103 & (v11 - 1);
        uint64_t v14 = *(void *)(v10 + 16 * v12);
        if (v14 == a3)
        {
          uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_12:
    uint64_t v15 = (uint64_t *)(v10 + 16 * v11);
    if (v13 == v15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = (uint64_t *)v13[1];
    }
    if (v11)
    {
      unsigned int v17 = v11 - 1;
      LODWORD(v11) = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      int v18 = (uint64_t *)(v10 + 16 * v11);
      uint64_t v19 = *v18;
      if (*v18 == v6)
      {
LABEL_16:
        if (v18 != v15)
        {
          uint64_t v20 = (uint64_t *)v18[1];
LABEL_18:
          if (v16 == v20)
          {
            uint64_t v20 = v16;
          }
          else
          {
            do
            {
              unsigned int v21 = *((_DWORD *)v16 + 4);
              unsigned int v22 = *((_DWORD *)v20 + 4);
              BOOL v23 = v21 >= v22;
              if (v21 >= v22) {
                uint64_t v24 = v16;
              }
              else {
                uint64_t v24 = v20;
              }
              if (!v23) {
                uint64_t v20 = v16;
              }
              uint64_t v16 = (uint64_t *)v24[1];
            }
            while (v16 != v20);
          }
          uint64_t v8 = *v20;
          goto LABEL_28;
        }
      }
      else
      {
        int v104 = 1;
        while (v19 != -4096)
        {
          int v105 = v11 + v104++;
          uint64_t v11 = v105 & v17;
          uint64_t v19 = *(void *)(v10 + 16 * v11);
          if (v19 == v6)
          {
            int v18 = (uint64_t *)(v10 + 16 * v11);
            goto LABEL_16;
          }
        }
      }
    }
    uint64_t v20 = 0;
    goto LABEL_18;
  }
LABEL_28:
  uint64_t v25 = *(unsigned int *)(a1 + 40);
  if (v25)
  {
    uint64_t v26 = *(void *)(a1 + 24);
    LODWORD(v27) = ((v8 >> 4) ^ (v8 >> 9)) & (v25 - 1);
    uint64_t v28 = (uint64_t *)(v26 + 16 * v27);
    uint64_t v29 = *v28;
    if (v8 == *v28)
    {
LABEL_30:
      if (v28 != (uint64_t *)(v26 + 16 * v25))
      {
        uint64_t v30 = v28[1];
        goto LABEL_32;
      }
    }
    else
    {
      int v100 = 1;
      while (v29 != -4096)
      {
        int v101 = v27 + v100++;
        uint64_t v27 = v101 & (v25 - 1);
        uint64_t v29 = *(void *)(v26 + 16 * v27);
        if (v8 == v29)
        {
          uint64_t v28 = (uint64_t *)(v26 + 16 * v27);
          goto LABEL_30;
        }
      }
    }
  }
  uint64_t v30 = 0;
LABEL_32:
  unsigned int v31 = *(_DWORD *)(v30 + 16) + 1;
  if (v31 < *(_DWORD *)(a4 + 16))
  {
    uint64_t v112 = v30;
    uint64_t v121 = v123;
    uint64_t v122 = 0x800000001;
    uint64_t v124 = 1;
    v125[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v125[1] = v125[0];
    v125[2] = v125[0];
    v125[3] = v125[0];
    int v126 = v128;
    uint64_t v127 = 0x800000000;
    int v129 = v131;
    uint64_t v130 = 0x800000000;
    uint64_t v118 = v120;
    uint64_t v119 = 0x800000000;
    v123[0] = a4;
    unsigned int v32 = 1;
    uint64_t v106 = v114;
    unsigned int v33 = ((v106 >> 4) ^ (v106 >> 9)) & 7;
    uint64_t v34 = (void *)v125 + v33;
    uint64_t v35 = *v34;
    if (v114 != *v34)
    {
      unint64_t v36 = 0;
      int v37 = 1;
      while (v35 != -4096)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == -8192;
        }
        if (v38) {
          unint64_t v36 = v34;
        }
        char v39 = v33 + v37++;
        unsigned int v33 = v39 & 7;
        uint64_t v34 = (void *)v125 + v33;
        uint64_t v35 = *v34;
        if (v114 == *v34) {
          goto LABEL_47;
        }
      }
      if (v36) {
        uint64_t v40 = v36;
      }
      else {
        uint64_t v40 = v34;
      }
      *sub_1CC5AE9F8((uint64_t)&v124, &v114, v40) = v106;
      unsigned int v32 = v122;
    }
LABEL_47:
    if (v32)
    {
      do
      {
        uint64_t v41 = v121;
        uint64_t v42 = *(void *)v121;
        uint64_t v43 = v32;
        if (v32 != 1)
        {
          uint64_t v79 = 0;
          uint64_t v80 = (char *)v121 + 8 * v32;
          int64_t v81 = ((unint64_t)v32 - 2) >> 1;
          int v82 = v121;
          do
          {
            uint64_t v83 = &v82[v79];
            uint64_t v86 = v83[1];
            int v84 = (char *)(v83 + 1);
            uint64_t v85 = v86;
            uint64_t v87 = (2 * v79) | 1;
            uint64_t v88 = 2 * v79 + 2;
            if (v88 < v43 && *(_DWORD *)(v85 + 16) < *(_DWORD *)(*((void *)v84 + 1) + 16))
            {
              uint64_t v85 = *((void *)v84 + 1);
              v84 += 8;
              uint64_t v87 = v88;
            }
            void *v82 = v85;
            int v82 = v84;
            uint64_t v79 = v87;
          }
          while (v87 <= v81);
          uint64_t v89 = v80 - 8;
          if (v84 == v89)
          {
            *(void *)int v84 = v42;
          }
          else
          {
            *(void *)int v84 = *(void *)v89;
            *(void *)uint64_t v89 = v42;
            uint64_t v90 = v84 - v41 + 8;
            if (v90 >= 9)
            {
              unint64_t v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
              unsigned int v92 = &v41[8 * v91];
              uint64_t v93 = *(void *)v92;
              uint64_t v94 = *(void *)v84;
              unsigned int v95 = *(_DWORD *)(*(void *)v84 + 16);
              if (*(_DWORD *)(*(void *)v92 + 16) < v95)
              {
                do
                {
                  unsigned int v96 = v92;
                  *(void *)int v84 = v93;
                  if (!v91) {
                    break;
                  }
                  unint64_t v91 = (v91 - 1) >> 1;
                  unsigned int v92 = &v41[8 * v91];
                  uint64_t v93 = *(void *)v92;
                  int v84 = v96;
                }
                while (*(_DWORD *)(*(void *)v92 + 16) < v95);
                *(void *)unsigned int v96 = v94;
              }
            }
          }
        }
        LODWORD(v122) = v43 - 1;
        if (v127 >= (unint64_t)HIDWORD(v127)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v126 + v127) = v42;
        LODWORD(v127) = v127 + 1;
        unsigned int v44 = *(_DWORD *)(v42 + 16);
        while (1)
        {
          uint64_t v45 = *(void **)v42;
          if (a2) {
            sub_1CC0B002C(*(void *)(a2 + 8), v45, (uint64_t)&v115);
          }
          else {
            sub_1CC5A9B90((uint64_t)&v115, (uint64_t)v45);
          }
          uint64_t v46 = (uint64_t *)v115;
          uint64_t v47 = (char *)v115 + 8 * v116;
          if (v116)
          {
            while (1)
            {
              uint64_t v48 = *(void *)(a1 + 24);
              uint64_t v49 = *(unsigned int *)(a1 + 40);
              if (v49)
              {
                LODWORD(v50) = (v49 - 1) & ((*v46 >> 4) ^ (*v46 >> 9));
                uint64_t v51 = (uint64_t *)(v48 + 16 * v50);
                uint64_t v52 = *v51;
                if (*v46 == *v51) {
                  goto LABEL_56;
                }
                int v66 = 1;
                while (v52 != -4096)
                {
                  int v67 = v50 + v66++;
                  uint64_t v50 = v67 & (v49 - 1);
                  uint64_t v52 = *(void *)(v48 + 16 * v50);
                  if (*v46 == v52)
                  {
                    uint64_t v51 = (uint64_t *)(v48 + 16 * v50);
                    goto LABEL_56;
                  }
                }
              }
              uint64_t v51 = (uint64_t *)(v48 + 16 * v49);
LABEL_56:
              uint64_t v53 = v51[1];
              uint64_t v113 = v53;
              unsigned int v54 = *(_DWORD *)(v53 + 16);
              if (v54 > v31)
              {
                if (v124)
                {
                  int v55 = 8;
                  uint64_t v56 = v125;
                }
                else
                {
                  int v55 = DWORD2(v125[0]);
                  if (!DWORD2(v125[0]))
                  {
                    BOOL v65 = 0;
LABEL_73:
                    *sub_1CC5AE9F8((uint64_t)&v124, &v113, v65) = v53;
                    if (v54 <= v44)
                    {
                      if (v122 >= (unint64_t)HIDWORD(v122)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v121 + v122) = v53;
                      uint64_t v73 = (v122 + 1);
                      LODWORD(v122) = v73;
                      if (v73 >= 2)
                      {
                        uint64_t v74 = (char *)v121;
                        uint64_t v75 = (char *)v121 + 8 * v73;
                        unint64_t v69 = (unint64_t)(v73 - 2) >> 1;
                        uint64_t v70 = (char *)v121 + 8 * v69;
                        uint64_t v71 = *(void *)v70;
                        uint64_t v77 = *((void *)v75 - 1);
                        uint64_t v72 = v75 - 8;
                        uint64_t v76 = v77;
                        unsigned int v78 = *(_DWORD *)(v77 + 16);
                        if (*(_DWORD *)(*(void *)v70 + 16) < v78)
                        {
                          do
                          {
                            uint64_t v68 = v70;
                            *(void *)uint64_t v72 = v71;
                            if (!v69) {
                              break;
                            }
                            unint64_t v69 = (v69 - 1) >> 1;
                            uint64_t v70 = &v74[8 * v69];
                            uint64_t v71 = *(void *)v70;
                            uint64_t v72 = v68;
                          }
                          while (*(_DWORD *)(*(void *)v70 + 16) < v78);
                          *(void *)uint64_t v68 = v76;
                        }
                      }
                    }
                    else
                    {
                      if (v119 >= (unint64_t)HIDWORD(v119)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v118 + v119) = v53;
                      LODWORD(v119) = v119 + 1;
                    }
                    goto LABEL_76;
                  }
                  uint64_t v56 = *(_OWORD **)&v125[0];
                }
                int v57 = v55 - 1;
                unsigned int v58 = v57 & ((v53 >> 4) ^ (v53 >> 9));
                unint64_t v59 = (void *)v56 + v58;
                uint64_t v60 = *v59;
                if (v53 != *v59)
                {
                  unsigned int v61 = 0;
                  int v62 = 1;
                  while (v60 != -4096)
                  {
                    if (v61) {
                      BOOL v63 = 0;
                    }
                    else {
                      BOOL v63 = v60 == -8192;
                    }
                    if (v63) {
                      unsigned int v61 = v59;
                    }
                    unsigned int v64 = v58 + v62++;
                    unsigned int v58 = v64 & v57;
                    unint64_t v59 = (void *)v56 + v58;
                    uint64_t v60 = *v59;
                    if (v53 == *v59) {
                      goto LABEL_76;
                    }
                  }
                  if (v61) {
                    BOOL v65 = v61;
                  }
                  else {
                    BOOL v65 = v59;
                  }
                  goto LABEL_73;
                }
              }
LABEL_76:
              if (++v46 == (uint64_t *)v47)
              {
                uint64_t v46 = (uint64_t *)v115;
                break;
              }
            }
          }
          if (v46 != &v117) {
            free(v46);
          }
          if (!v119) {
            break;
          }
          uint64_t v42 = *((void *)v118 + v119 - 1);
          LODWORD(v119) = v119 - 1;
        }
        unsigned int v32 = v122;
      }
      while (v122);
    }
    if (v127)
    {
      v97 = (char *)v126;
      do
      {
        uint64_t v98 = *(void *)v97;
        uint64_t v99 = *(void *)(*(void *)v97 + 8);
        if (v99 != v112)
        {
          unsigned int v107 = *(void **)(v99 + 24);
          uint64_t v108 = *(unsigned int *)(v99 + 32);
          uint64_t v109 = &v107[v108];
          if (v108)
          {
            uint64_t v110 = 8 * v108;
            do
            {
              if (*v107 == v98) {
                goto LABEL_146;
              }
              ++v107;
              v110 -= 8;
            }
            while (v110);
            unsigned int v107 = v109;
          }
LABEL_146:
          if (v109 != v107 + 1)
          {
            memmove(v107, v107 + 1, (char *)v109 - (char *)(v107 + 1));
            LODWORD(v108) = *(_DWORD *)(v99 + 32);
          }
          *(_DWORD *)(v99 + 32) = v108 - 1;
          *(void *)(v98 + 8) = v112;
          unint64_t v111 = *(unsigned int *)(v112 + 32);
          if (v111 < *(unsigned int *)(v112 + 36))
          {
            *(void *)(*(void *)(v112 + 24) + 8 * v111) = v98;
            ++*(_DWORD *)(v112 + 32);
            llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v97 += 8;
      }
      while (v97 != (char *)v126 + 8 * v127);
    }
    if (v118 != v120) {
      free(v118);
    }
    if (v129 != v131) {
      free(v129);
    }
    if (v126 != v128) {
      free(v126);
    }
    if ((v124 & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)&v125[0], 8);
    }
    if (v121 != v123) {
      free(v121);
    }
  }
}

void *sub_1CC5AE840(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a2 + 8;
  if (*(_DWORD *)a2)
  {
    int v7 = 8;
    uint64_t v8 = a2 + 8;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      uint64_t v20 = 0;
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(a2 + 8);
  }
  int v9 = v7 - 1;
  unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  uint64_t result = (void *)(v8 + 8 * v10);
  uint64_t v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if (*(_DWORD *)a2)
    {
      uint64_t v17 = 8;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v17 = *(unsigned int *)(a2 + 16);
    }
    char v18 = 0;
    uint64_t v19 = v6 + 8 * v17;
    goto LABEL_22;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != -4096)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 == -8192;
    }
    if (v15) {
      uint64_t v13 = result;
    }
    unsigned int v16 = v10 + v14++;
    unsigned int v10 = v16 & v9;
    uint64_t result = (void *)(v8 + 8 * v10);
    uint64_t v12 = *result;
    if (*a3 == *result) {
      goto LABEL_13;
    }
  }
  if (v13) {
    uint64_t v20 = v13;
  }
  else {
    uint64_t v20 = result;
  }
LABEL_19:
  uint64_t result = sub_1CC5AE9F8(a2, a3, v20);
  *uint64_t result = *a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v21 = 8;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v21 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v19 = v6 + 8 * v21;
  char v18 = 1;
LABEL_22:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_1CC5AE960(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      int v7 = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC5AE9F8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CB938C70(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 8;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    unsigned int v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 8 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      BOOL v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          BOOL v15 = a3;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        a3 = (void *)(v10 + 8 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CB938C70(a1, v7);
      uint64_t v19 = 0;
      sub_1CC5AE960(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

void sub_1CC5AEB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v80[64] = *MEMORY[0x1E4F143B8];
  v74[0] = a3;
  v74[1] = a4;
  uint64_t v73 = a2;
  unsigned int v78 = v80;
  v80[0] = a2;
  uint64_t v79 = 0x4000000001;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v70 = a1 + 24;
  int v6 = *(_DWORD *)(a1 + 40);
  if (!v6) {
    goto LABEL_15;
  }
  int v8 = v6 - 1;
  unsigned int v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (uint64_t *)(v5 + 72 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a2)
  {
LABEL_14:
    *(_DWORD *)(v5 + 72 * v9 + 12) = 0;
LABEL_15:
    unsigned int v20 = 1;
LABEL_16:
    int v21 = 0;
    while (1)
    {
      uint64_t v22 = *((void *)v78 + v20 - 1);
      LODWORD(v79) = v20 - 1;
      uint64_t v72 = v22;
      int v23 = *(_DWORD *)(a1 + 40);
      if (v23)
      {
        uint64_t v24 = *(void *)(a1 + 24);
        int v25 = v23 - 1;
        unsigned int v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
        uint64_t v27 = (uint64_t *)(v24 + 72 * v26);
        uint64_t v28 = *v27;
        if (v22 == *v27) {
          goto LABEL_32;
        }
        uint64_t v29 = 0;
        int v30 = 1;
        while (v28 != -4096)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -8192;
          }
          if (v31) {
            uint64_t v29 = v27;
          }
          unsigned int v32 = v26 + v30++;
          unsigned int v26 = v32 & v25;
          uint64_t v27 = (uint64_t *)(v24 + 72 * v26);
          uint64_t v28 = *v27;
          if (v22 == *v27) {
            goto LABEL_32;
          }
        }
        if (v29) {
          unsigned int v33 = v29;
        }
        else {
          unsigned int v33 = v27;
        }
      }
      else
      {
        unsigned int v33 = 0;
      }
      uint64_t v27 = sub_1CC5AC33C(v70, &v72, v33);
      *uint64_t v27 = v22;
      *(_OWORD *)(v27 + 5) = 0u;
      *(_OWORD *)(v27 + 1) = 0u;
      *(_OWORD *)(v27 + 3) = 0u;
      *(_OWORD *)(v27 + 7) = 0u;
      v27[5] = (uint64_t)(v27 + 7);
      *((_DWORD *)v27 + 13) = 2;
LABEL_32:
      if (!*((_DWORD *)v27 + 2))
      {
        *((_DWORD *)v27 + 4) = ++v21;
        *((_DWORD *)v27 + 2) = v21;
        _OWORD v27[3] = v22;
        uint64_t v35 = *(uint64_t **)(a1 + 8);
        unint64_t v34 = *(void *)(a1 + 16);
        if ((unint64_t)v35 >= v34)
        {
          int v37 = *(uint64_t **)a1;
          uint64_t v38 = ((uint64_t)v35 - *(void *)a1) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
            abort();
          }
          uint64_t v40 = v34 - (void)v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            if (v41 >> 61) {
              sub_1CB833614();
            }
            uint64_t v42 = (char *)operator new(8 * v41);
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = (uint64_t *)&v42[8 * v38];
          *uint64_t v43 = v22;
          unint64_t v36 = v43 + 1;
          if (v35 != v37)
          {
            do
            {
              uint64_t v44 = *--v35;
              *--uint64_t v43 = v44;
            }
            while (v35 != v37);
            uint64_t v35 = *(uint64_t **)a1;
          }
          *(void *)a1 = v43;
          *(void *)(a1 + 8) = v36;
          *(void *)(a1 + 16) = &v42[8 * v41];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *uint64_t v35 = v22;
          unint64_t v36 = v35 + 1;
        }
        *(void *)(a1 + 8) = v36;
        uint64_t v45 = *(void *)(a1 + 48);
        if (v45) {
          sub_1CC5ACE40(*(void *)(v45 + 8), v72, (char **)&v75);
        }
        else {
          sub_1CC5AD04C((char **)&v75, *(void *)(v72 + 8));
        }
        uint64_t v46 = (uint64_t *)v75;
        uint64_t v47 = (uint64_t *)((char *)v75 + 8 * v76);
        if (v76)
        {
          while (1)
          {
            uint64_t v48 = *v46;
            uint64_t v71 = v48;
            uint64_t v49 = *(void *)(a1 + 24);
            unsigned int v50 = *(_DWORD *)(a1 + 40);
            uint64_t v51 = sub_1CC129FE4(v49, v50, v48);
            if ((uint64_t *)(v49 + 72 * v50) == v51)
            {
              uint64_t v52 = v72;
            }
            else
            {
              uint64_t v52 = v72;
              if (*((_DWORD *)v51 + 2))
              {
                if (v48 != v72)
                {
                  uint64_t v53 = v51 + 5;
                  int v55 = v51 + 6;
                  unint64_t v54 = *((unsigned int *)v51 + 12);
                  unint64_t v56 = *((unsigned int *)v51 + 13);
                  goto LABEL_58;
                }
                goto LABEL_60;
              }
            }
            if (sub_1CD5BE174(v74, v52, v48))
            {
              int v57 = *(_DWORD *)(a1 + 40);
              if (!v57)
              {
                int v67 = 0;
                goto LABEL_78;
              }
              uint64_t v58 = *(void *)(a1 + 24);
              int v59 = v57 - 1;
              unsigned int v60 = v59 & ((v48 >> 4) ^ (v48 >> 9));
              unsigned int v61 = (uint64_t *)(v58 + 72 * v60);
              uint64_t v62 = *v61;
              if (v48 != *v61)
              {
                BOOL v63 = 0;
                int v64 = 1;
                while (v62 != -4096)
                {
                  if (v63) {
                    BOOL v65 = 0;
                  }
                  else {
                    BOOL v65 = v62 == -8192;
                  }
                  if (v65) {
                    BOOL v63 = v61;
                  }
                  unsigned int v66 = v60 + v64++;
                  unsigned int v60 = v66 & v59;
                  unsigned int v61 = (uint64_t *)(v58 + 72 * v60);
                  uint64_t v62 = *v61;
                  if (v48 == *v61) {
                    goto LABEL_79;
                  }
                }
                if (v63) {
                  int v67 = v63;
                }
                else {
                  int v67 = v61;
                }
LABEL_78:
                unsigned int v61 = sub_1CC5AC33C(v70, &v71, v67);
                *unsigned int v61 = v48;
                *(_OWORD *)(v61 + 5) = 0u;
                *(_OWORD *)(v61 + 1) = 0u;
                *(_OWORD *)(v61 + 3) = 0u;
                *(_OWORD *)(v61 + 7) = 0u;
                v61[5] = (uint64_t)(v61 + 7);
                *((_DWORD *)v61 + 13) = 2;
              }
LABEL_79:
              if (v79 >= (unint64_t)HIDWORD(v79)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v78 + v79) = v48;
              LODWORD(v79) = v79 + 1;
              int v55 = v61 + 6;
              unint64_t v54 = *((unsigned int *)v61 + 12);
              *((_DWORD *)v61 + 3) = v21;
              uint64_t v53 = v61 + 5;
              unint64_t v56 = *((unsigned int *)v61 + 13);
LABEL_58:
              if (v54 >= v56) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v53 + 8 * v54) = v52;
              ++*v55;
            }
LABEL_60:
            if (++v46 == v47)
            {
              uint64_t v46 = (uint64_t *)v75;
              break;
            }
          }
        }
        if (v46 != &v77) {
          free(v46);
        }
      }
      unsigned int v20 = v79;
      if (!v79) {
        goto LABEL_93;
      }
    }
  }
  int v12 = 1;
  uint64_t v13 = *v10;
  unsigned int v14 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v13 == -4096) {
      goto LABEL_15;
    }
    unsigned int v15 = v14 + v12++;
    unsigned int v14 = v15 & v8;
    uint64_t v13 = *(void *)(v5 + 72 * v14);
  }
  while (v13 != a2);
  int v16 = 0;
  int v17 = 1;
  while (v11 != -4096)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v11 == -8192;
    }
    if (v18) {
      int v16 = v10;
    }
    unsigned int v19 = v9 + v17++;
    unsigned int v9 = v19 & v8;
    uint64_t v10 = (uint64_t *)(v5 + 72 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_14;
    }
  }
  if (v16) {
    uint64_t v68 = v16;
  }
  else {
    uint64_t v68 = v10;
  }
  unint64_t v69 = sub_1CC5AC33C(v70, &v73, v68);
  *unint64_t v69 = a2;
  *(_OWORD *)(v69 + 5) = 0u;
  *(_OWORD *)(v69 + 3) = 0u;
  *(_OWORD *)(v69 + 1) = 0u;
  *(_OWORD *)(v69 + 7) = 0u;
  v69[5] = (uint64_t)(v69 + 7);
  *((_DWORD *)v69 + 13) = 2;
  unsigned int v20 = v79;
  if (v79) {
    goto LABEL_16;
  }
LABEL_93:
  if (v78 != v80) {
    free(v78);
  }
}

uint64_t sub_1CC5AF0DC(uint64_t result, uint64_t a2)
{
  if (a2 - result >= 9)
  {
    unint64_t v2 = (((unint64_t)(a2 - result) >> 3) - 2) >> 1;
    uint64_t v3 = (void *)(result + 8 * v2);
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)(a2 - 8);
    uint64_t v5 = (void *)(a2 - 8);
    uint64_t v6 = v7;
    unsigned int v8 = *(_DWORD *)(v7 + 16);
    if (*(_DWORD *)(*v3 + 16) < v8)
    {
      do
      {
        unsigned int v9 = v3;
        *uint64_t v5 = v4;
        if (!v2) {
          break;
        }
        unint64_t v2 = (v2 - 1) >> 1;
        uint64_t v3 = (void *)(result + 8 * v2);
        uint64_t v4 = *v3;
        uint64_t v5 = v9;
      }
      while (*(_DWORD *)(*v3 + 16) < v8);
      *unsigned int v9 = v6;
    }
  }
  return result;
}

void *sub_1CC5AF144(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *result;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = &v5[v3];
      uint64_t v9 = v6[1];
      uint64_t v7 = v6 + 1;
      uint64_t v8 = v9;
      uint64_t v10 = (2 * v3) | 1;
      uint64_t v11 = 2 * v3 + 2;
      if (v11 < a3 && *(_DWORD *)(v8 + 16) < *(_DWORD *)(v7[1] + 16))
      {
        uint64_t v8 = v7[1];
        ++v7;
        uint64_t v10 = v11;
      }
      *uint64_t v5 = v8;
      uint64_t v5 = v7;
      uint64_t v3 = v10;
    }
    while (v10 <= (uint64_t)((unint64_t)(a3 - 2) >> 1));
    int v12 = (void *)(a2 - 8);
    if (v7 == (void *)(a2 - 8))
    {
      void *v7 = v4;
    }
    else
    {
      void *v7 = *v12;
      void *v12 = v4;
      uint64_t v13 = (char *)v7 - (char *)result + 8;
      if (v13 >= 9)
      {
        unint64_t v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
        unsigned int v15 = &result[v14];
        uint64_t v16 = *v15;
        uint64_t v17 = *v7;
        unsigned int v18 = *(_DWORD *)(*v7 + 16);
        if (*(_DWORD *)(*v15 + 16) < v18)
        {
          do
          {
            unsigned int v19 = v15;
            void *v7 = v16;
            if (!v14) {
              break;
            }
            unint64_t v14 = (v14 - 1) >> 1;
            unsigned int v15 = &result[v14];
            uint64_t v16 = *v15;
            uint64_t v7 = v19;
          }
          while (*(_DWORD *)(*v15 + 16) < v18);
          void *v19 = v17;
        }
      }
    }
  }
  return result;
}

void sub_1CC5AF23C(uint64_t a1, uint64_t a2)
{
  v10[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(uint64_t **)a1;
    uint64_t v6 = 8 * v2;
    while (1)
    {
      if (a2) {
        sub_1CC5AC514((uint64_t)&v8, *(void *)(a2 + 8), *v5);
      }
      else {
        sub_1CC5AC9A8((uint64_t)&v8, *v5);
      }
      int v7 = v9;
      if (v8 != v10) {
        free(v8);
      }
      if (v7) {
        break;
      }
      ++v5;
      v6 -= 8;
      if (!v6) {
        return;
      }
    }
    sub_1CC5AA000((uint64_t *)&v8, a1, a2);
    if (!sub_1CD52E948(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v8)) {
      sub_1CC5A46F8(a1, a2);
    }
    if (v8 != v10) {
      free(v8);
    }
  }
}

uint64_t *sub_1CC5AF354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t)(a1 + 3);
  uint64_t v6 = a1[3];
  uint64_t v8 = *a1;
  int v9 = (uint64_t *)(*a1 + 8);
  int v10 = *((_DWORD *)a1 + 10);
  if (v10)
  {
    int v11 = v10 - 1;
    unsigned int v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & v11;
    uint64_t result = (uint64_t *)(v6 + 72 * v12);
    uint64_t v14 = *result;
    if (*v9 == *result) {
      goto LABEL_3;
    }
    uint64_t v52 = 0;
    int v53 = 1;
    while (v14 != -4096)
    {
      if (v52) {
        BOOL v54 = 0;
      }
      else {
        BOOL v54 = v14 == -8192;
      }
      if (v54) {
        uint64_t v52 = result;
      }
      unsigned int v55 = v12 + v53++;
      unsigned int v12 = v55 & v11;
      uint64_t result = (uint64_t *)(v6 + 72 * v12);
      uint64_t v14 = *result;
      if (*v9 == *result) {
        goto LABEL_3;
      }
    }
    if (v52) {
      unint64_t v56 = v52;
    }
    else {
      unint64_t v56 = result;
    }
  }
  else
  {
    unint64_t v56 = 0;
  }
  uint64_t result = sub_1CC5A99B8(v7, v9, v56);
  *uint64_t result = *v9;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[5] = (uint64_t)(result + 7);
  *((_DWORD *)result + 13) = 2;
  uint64_t v8 = *a1;
LABEL_3:
  result[4] = a3;
  uint64_t v15 = a1[1] - v8;
  if (v15 != 8)
  {
    uint64_t v16 = v15 >> 3;
    for (uint64_t i = 1; i != v16; ++i)
    {
      uint64_t v18 = *(void *)(*a1 + 8 * i);
      uint64_t v57 = v18;
      uint64_t v19 = *(void *)(a2 + 24);
      uint64_t v20 = *(unsigned int *)(a2 + 40);
      unsigned int v21 = v18 >> 4;
      if (v20)
      {
        LODWORD(v22) = (v21 ^ (v18 >> 9)) & (v20 - 1);
        int v23 = (uint64_t *)(v19 + 16 * v22);
        uint64_t v24 = *v23;
        if (v18 == *v23)
        {
LABEL_7:
          if (v23 != (uint64_t *)(v19 + 16 * v20))
          {
            uint64_t v25 = v23[1];
            goto LABEL_9;
          }
        }
        else
        {
          int v42 = 1;
          while (v24 != -4096)
          {
            int v43 = v22 + v42++;
            uint64_t v22 = v43 & (v20 - 1);
            uint64_t v24 = *(void *)(v19 + 16 * v22);
            if (v18 == v24)
            {
              int v23 = (uint64_t *)(v19 + 16 * v22);
              goto LABEL_7;
            }
          }
        }
      }
      uint64_t v25 = 0;
LABEL_9:
      int v26 = *((_DWORD *)a1 + 10);
      if (v26)
      {
        uint64_t v27 = a1[3];
        unsigned int v28 = v21 ^ (v18 >> 9);
        int v29 = v26 - 1;
        unsigned int v30 = (v26 - 1) & v28;
        uint64_t result = (uint64_t *)(v27 + 72 * v30);
        uint64_t v31 = *result;
        if (v18 == *result) {
          goto LABEL_11;
        }
        uint64_t v38 = 0;
        int v39 = 1;
        while (v31 != -4096)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v31 == -8192;
          }
          if (v40) {
            uint64_t v38 = result;
          }
          unsigned int v41 = v30 + v39++;
          unsigned int v30 = v41 & v29;
          uint64_t result = (uint64_t *)(v27 + 72 * v30);
          uint64_t v31 = *result;
          if (v18 == *result) {
            goto LABEL_11;
          }
        }
        if (v38) {
          uint64_t v46 = v38;
        }
        else {
          uint64_t v46 = result;
        }
      }
      else
      {
        uint64_t v46 = 0;
      }
      uint64_t result = sub_1CC5A99B8(v7, &v57, v46);
      *uint64_t result = v18;
      *(_OWORD *)(result + 5) = 0u;
      *(_OWORD *)(result + 1) = 0u;
      *(_OWORD *)(result + 3) = 0u;
      *(_OWORD *)(result + 7) = 0u;
      result[5] = (uint64_t)(result + 7);
      *((_DWORD *)result + 13) = 2;
      uint64_t v19 = *(void *)(a2 + 24);
      LODWORD(v20) = *(_DWORD *)(a2 + 40);
LABEL_11:
      if (v20)
      {
        uint64_t v32 = result[4];
        LODWORD(v33) = ((v32 >> 4) ^ (v32 >> 9)) & (v20 - 1);
        unint64_t v34 = (uint64_t *)(v19 + 16 * v33);
        uint64_t v35 = *v34;
        if (v32 == *v34)
        {
LABEL_13:
          if (v34 != (uint64_t *)(v19 + 16 * v20))
          {
            uint64_t v36 = v34[1];
            goto LABEL_15;
          }
        }
        else
        {
          int v44 = 1;
          while (v35 != -4096)
          {
            int v45 = v33 + v44++;
            uint64_t v33 = v45 & (v20 - 1);
            uint64_t v35 = *(void *)(v19 + 16 * v33);
            if (v32 == v35)
            {
              unint64_t v34 = (uint64_t *)(v19 + 16 * v33);
              goto LABEL_13;
            }
          }
        }
      }
      uint64_t v36 = 0;
LABEL_15:
      uint64_t v37 = *(void *)(v25 + 8);
      if (v37 != v36)
      {
        uint64_t v47 = *(void **)(v37 + 24);
        uint64_t v48 = *(unsigned int *)(v37 + 32);
        uint64_t v49 = &v47[v48];
        if (v48)
        {
          uint64_t v50 = 8 * v48;
          do
          {
            if (*v47 == v25) {
              goto LABEL_46;
            }
            ++v47;
            v50 -= 8;
          }
          while (v50);
          uint64_t v47 = v49;
        }
LABEL_46:
        if (v49 != v47 + 1)
        {
          memmove(v47, v47 + 1, (char *)v49 - (char *)(v47 + 1));
          LODWORD(v48) = *(_DWORD *)(v37 + 32);
        }
        *(_DWORD *)(v37 + 32) = v48 - 1;
        *(void *)(v25 + 8) = v36;
        unint64_t v51 = *(unsigned int *)(v36 + 32);
        if (v51 < *(unsigned int *)(v36 + 36))
        {
          *(void *)(*(void *)(v36 + 24) + 8 * v51) = v25;
          ++*(_DWORD *)(v36 + 32);
          llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
  }
  return result;
}

void sub_1CC5AF6F8(_DWORD *a1)
{
  int v2 = a1[2];
  if (v2 || a1[3])
  {
    uint64_t v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CD52D9DC(a1);
    }
    else
    {
      if (v3)
      {
        uint64_t v4 = 72 * v3;
        uint64_t v5 = *(void *)a1 + 56;
        do
        {
          uint64_t v6 = *(void *)(v5 - 56);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              uint64_t v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7) {
                free(v7);
              }
            }
            *(void *)(v5 - 56) = -4096;
          }
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *((void *)a1 + 1) = 0;
    }
  }
}

unint64_t sub_1CC5AF7C8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 608);
  uint64_t v3 = *(void *)(a1 + 600) + 16 * v2;
  unint64_t v4 = *(void *)(v3 - 16);
  unint64_t v5 = *(void *)(v3 - 8);
  *(_DWORD *)(a1 + 608) = v2 - 1;
  unint64_t v6 = (v5 >> 2) & 1 ^ (*(unsigned char *)(a1 + 592) == 0);
  unint64_t v60 = v4;
  uint64_t v7 = a1 + 8;
  unsigned int v8 = v4 >> 4;
  if (*(unsigned char *)a1)
  {
    int v9 = 4;
    uint64_t v10 = a1 + 8;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 16);
    if (!v9)
    {
      uint64_t v52 = 0;
LABEL_53:
      uint64_t v13 = sub_1CBFEE5DC(a1, (uint64_t)&v60, &v60, v52);
      unint64_t v53 = v60;
      *(_OWORD *)(v13 + 7) = 0u;
      *(_OWORD *)(v13 + 5) = 0u;
      *(_OWORD *)(v13 + 3) = 0u;
      *uint64_t v13 = v53;
      v13[1] = v13 + 3;
      v13[2] = 0x200000000;
      v13[5] = v13 + 7;
      *((_DWORD *)v13 + 13) = 2;
      goto LABEL_5;
    }
    uint64_t v10 = *(void *)(a1 + 8);
  }
  int v11 = v9 - 1;
  unsigned int v12 = v11 & (v8 ^ (v4 >> 9));
  uint64_t v13 = (void *)(v10 + 72 * v12);
  uint64_t v14 = *v13;
  if (*v13 != v4)
  {
    int v44 = 0;
    int v45 = 1;
    while (v14 != -4096)
    {
      if (v44) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v14 == -8192;
      }
      if (v46) {
        int v44 = v13;
      }
      unsigned int v47 = v12 + v45++;
      unsigned int v12 = v47 & v11;
      uint64_t v13 = (void *)(v10 + 72 * v12);
      uint64_t v14 = *v13;
      if (*v13 == v4) {
        goto LABEL_5;
      }
    }
    if (v44) {
      uint64_t v52 = v44;
    }
    else {
      uint64_t v52 = v13;
    }
    goto LABEL_53;
  }
LABEL_5:
  uint64_t v15 = (uint64_t)&v13[4 * v6 + 1];
  int v16 = *(_DWORD *)(v15 + 8) - 1;
  *(_DWORD *)(v15 + 8) = v16;
  if (!v16 && !LODWORD(v13[4 * (v6 ^ 1) + 2]))
  {
    if (*(unsigned char *)a1)
    {
      int v17 = 4;
    }
    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      if (!v17) {
        goto LABEL_16;
      }
      uint64_t v7 = *(void *)(a1 + 8);
    }
    int v18 = v17 - 1;
    unsigned int v19 = v18 & (v8 ^ (v4 >> 9));
    uint64_t v20 = (uint64_t *)(v7 + 72 * v19);
    uint64_t v21 = *v20;
    if (*v20 == v4)
    {
LABEL_11:
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        int v23 = (uint64_t *)v20[i + 5];
        if (&v20[i + 7] != v23) {
          free(v23);
        }
      }
      uint64_t *v20 = -8192;
      int v24 = *(_DWORD *)(a1 + 4) + 1;
      *(_DWORD *)a1 -= 2;
      *(_DWORD *)(a1 + 4) = v24;
    }
    else
    {
      int v58 = 1;
      while (v21 != -4096)
      {
        unsigned int v59 = v19 + v58++;
        unsigned int v19 = v59 & v18;
        uint64_t v20 = (uint64_t *)(v7 + 72 * v19);
        uint64_t v21 = *v20;
        if (*v20 == v4) {
          goto LABEL_11;
        }
      }
    }
  }
LABEL_16:
  unint64_t v25 = v5 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = a1 + 304;
  unsigned int v27 = (v5 & 0xFFFFFFF8) >> 4;
  if (*(unsigned char *)(a1 + 296))
  {
    int v28 = 4;
    uint64_t v29 = a1 + 304;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 312);
    if (!v28)
    {
      BOOL v54 = 0;
LABEL_57:
      uint64_t v32 = sub_1CBFEE5DC(a1 + 296, (uint64_t)&v60, &v60, v54);
      unint64_t v55 = v60;
      *(_OWORD *)(v32 + 7) = 0u;
      *(_OWORD *)(v32 + 5) = 0u;
      *(_OWORD *)(v32 + 3) = 0u;
      *uint64_t v32 = v55;
      v32[1] = v32 + 3;
      v32[2] = 0x200000000;
      v32[5] = v32 + 7;
      *((_DWORD *)v32 + 13) = 2;
      goto LABEL_20;
    }
    uint64_t v29 = *(void *)(a1 + 304);
  }
  int v30 = v28 - 1;
  unsigned int v31 = v30 & (v27 ^ (v25 >> 9));
  uint64_t v32 = (void *)(v29 + 72 * v31);
  uint64_t v33 = *v32;
  if (*v32 != v25)
  {
    uint64_t v48 = 0;
    int v49 = 1;
    while (v33 != -4096)
    {
      if (v48) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = v33 == -8192;
      }
      if (v50) {
        uint64_t v48 = v32;
      }
      unsigned int v51 = v31 + v49++;
      unsigned int v31 = v51 & v30;
      uint64_t v32 = (void *)(v29 + 72 * v31);
      uint64_t v33 = *v32;
      if (*v32 == v25) {
        goto LABEL_20;
      }
    }
    if (v48) {
      BOOL v54 = v48;
    }
    else {
      BOOL v54 = v32;
    }
    goto LABEL_57;
  }
LABEL_20:
  uint64_t v34 = (uint64_t)&v32[4 * v6 + 1];
  int v35 = *(_DWORD *)(v34 + 8) - 1;
  *(_DWORD *)(v34 + 8) = v35;
  if (!v35 && !LODWORD(v32[4 * (v6 ^ 1) + 2]))
  {
    if (*(unsigned char *)(a1 + 296))
    {
      int v36 = 4;
    }
    else
    {
      int v36 = *(_DWORD *)(a1 + 312);
      if (!v36) {
        return v4;
      }
      uint64_t v26 = *(void *)(a1 + 304);
    }
    int v37 = v36 - 1;
    unsigned int v38 = v37 & (v27 ^ (v25 >> 9));
    int v39 = (uint64_t *)(v26 + 72 * v38);
    uint64_t v40 = *v39;
    if (*v39 == v25)
    {
LABEL_26:
      for (uint64_t j = 0; j != -8; j -= 4)
      {
        int v42 = (uint64_t *)v39[j + 5];
        if (&v39[j + 7] != v42) {
          free(v42);
        }
      }
      *int v39 = -8192;
      *(_DWORD *)(a1 + 296) -= 2;
      ++*(_DWORD *)(a1 + 300);
    }
    else
    {
      int v56 = 1;
      while (v40 != -4096)
      {
        unsigned int v57 = v38 + v56++;
        unsigned int v38 = v57 & v37;
        int v39 = (uint64_t *)(v26 + 72 * v38);
        uint64_t v40 = *v39;
        if (*v39 == v25) {
          goto LABEL_26;
        }
      }
    }
  }
  return v4;
}

unint64_t sub_1CC5AFBC4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 608);
  uint64_t v3 = *(void *)(a1 + 600) + 16 * v2;
  unint64_t v4 = *(void *)(v3 - 16);
  unint64_t v5 = *(void *)(v3 - 8);
  *(_DWORD *)(a1 + 608) = v2 - 1;
  unint64_t v6 = (v5 >> 2) & 1 ^ (*(unsigned char *)(a1 + 592) == 0);
  unint64_t v15 = v4;
  uint64_t v7 = sub_1CBFEEF50((_DWORD *)a1, (uint64_t *)&v15) + 1;
  unsigned int v8 = &v7[4 * v6];
  int v9 = *((_DWORD *)v8 + 2) - 1;
  *((_DWORD *)v8 + 2) = v9;
  if (!v9 && !LODWORD(v7[4 * (v6 ^ 1) + 1]))
  {
    unint64_t v15 = v4;
    sub_1CC5AFCC4((_DWORD *)a1, &v15);
  }
  uint64_t v10 = (_DWORD *)(a1 + 296);
  unint64_t v15 = v5 & 0xFFFFFFFFFFFFFFF8;
  int v11 = sub_1CBFEEF50(v10, (uint64_t *)&v15);
  uint64_t v12 = (uint64_t)&v11[4 * v6 + 1];
  int v13 = *(_DWORD *)(v12 + 8) - 1;
  *(_DWORD *)(v12 + 8) = v13;
  if (!v13 && !LODWORD(v11[4 * (v6 ^ 1) + 2]))
  {
    unint64_t v15 = v5 & 0xFFFFFFFFFFFFFFF8;
    sub_1CC5AFCC4(v10, &v15);
  }
  return v4;
}

void sub_1CC5AFCC4(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  if (sub_1CBFEEFE0((uint64_t)a1, a2, &v7))
  {
    uint64_t v3 = 0;
    unint64_t v4 = v7;
    do
    {
      unint64_t v5 = (void *)v4[v3 + 5];
      if (&v4[v3 + 7] != v5) {
        free(v5);
      }
      v3 -= 4;
    }
    while (v3 != -8);
    void *v4 = -8192;
    int v6 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v6;
  }
}

llvm::raw_ostream *sub_1CC5AFD4C(unsigned int *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  if (a1 && *(void *)a1)
  {
    llvm::Value::printAsOperand(*(llvm::Value **)a1, v2, 0, 0);
  }
  else
  {
    uint64_t v3 = (_DWORD *)*((void *)v2 + 4);
    if (*((void *)v2 + 3) - (void)v3 > 6uLL)
    {
      *(_DWORD *)((char *)v3 + 3) = 1920233580;
      *uint64_t v3 = 1819047278;
      *((void *)v2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v2, "nullptr", 7uLL);
    }
  }
  unint64_t v4 = (_WORD *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 1uLL)
  {
    _WORD *v4 = 31520;
    *((void *)v2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v2, " {", 2uLL);
  }
  sub_1CD098D14(v2, a1[18], 0, 0, 0);
  unint64_t v5 = (_WORD *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v5 > 1uLL)
  {
    *unint64_t v5 = 8236;
    *((void *)v2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", ", 2uLL);
  }
  uint64_t result = sub_1CD098D14(v2, a1[19], 0, 0, 0);
  uint64_t v7 = (unsigned char *)*((void *)v2 + 4);
  if ((unint64_t)v7 >= *((void *)v2 + 3))
  {
    return llvm::raw_ostream::write(v2, 125);
  }
  else
  {
    *((void *)v2 + 4) = v7 + 1;
    unsigned char *v7 = 125;
  }
  return result;
}

llvm::raw_ostream *sub_1CC5AFEC8(llvm *a1, unsigned int *a2, unsigned int *a3)
{
  int v6 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0x22uLL)
  {
    qmemcpy(v7, "Incorrect DFS numbers for:\n\tParent ", 35);
    *((void *)v6 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v6, "Incorrect DFS numbers for:\n\tParent ", 0x23uLL);
  }
  unsigned int v8 = sub_1CC5AFD4C(*(unsigned int **)a1);
  int v9 = (llvm::raw_ostream *)llvm::errs(v8);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 7uLL)
  {
    *uint64_t v10 = 0x20646C696843090ALL;
    *((void *)v9 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\n\tChild ", 8uLL);
  }
  int v11 = sub_1CC5AFD4C(a2);
  if (a3)
  {
    uint64_t v12 = (llvm::raw_ostream *)llvm::errs(v11);
    int v13 = (void *)*((void *)v12 + 4);
    if (*((void *)v12 + 3) - (void)v13 > 0xEuLL)
    {
      qmemcpy(v13, "\n\tSecond child ", 15);
      *((void *)v12 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v12, "\n\tSecond child ", 0xFuLL);
    }
    int v11 = sub_1CC5AFD4C(a3);
  }
  uint64_t v14 = (llvm::raw_ostream *)llvm::errs(v11);
  unint64_t v15 = (void *)*((void *)v14 + 4);
  if (*((void *)v14 + 3) - (void)v15 > 0xEuLL)
  {
    qmemcpy(v15, "\nAll children: ", 15);
    *((void *)v14 + 4) += 15;
  }
  else
  {
    uint64_t v14 = llvm::raw_ostream::write(v14, "\nAll children: ", 0xFuLL);
  }
  uint64_t v16 = *((void *)a1 + 1);
  uint64_t v17 = *(unsigned int *)(v16 + 8);
  if (v17)
  {
    int v18 = *(unsigned int ***)v16;
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = sub_1CC5AFD4C(*v18);
      uint64_t v14 = (llvm::raw_ostream *)llvm::errs(v20);
      uint64_t v21 = (_WORD *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v21 > 1uLL)
      {
        *uint64_t v21 = 8236;
        *((void *)v14 + 4) += 2;
      }
      else
      {
        uint64_t v14 = llvm::raw_ostream::write(v14, ", ", 2uLL);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v22 = (llvm::raw_ostream *)llvm::errs(v14);
  int v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    uint64_t v22 = llvm::raw_ostream::write(v22, 10);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *int v23 = 10;
  }
  uint64_t result = (llvm::raw_ostream *)llvm::errs(v22);
  unint64_t v25 = (const char *)*((void *)result + 2);
  if (*((const char **)result + 4) != v25)
  {
    *((void *)result + 4) = v25;
    return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v25);
  }
  return result;
}

uint64_t *sub_1CC5B0114(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(_DWORD *)(v40 + 72) < *(_DWORD *)(*v10 + 72))
                {
                  *uint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3:
                uint64_t result = sub_1CC3463C4(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CC346778(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t result = sub_1CC346810(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            int v42 = v10 + 1;
            BOOL v44 = v10 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 8;
                BOOL v46 = v10;
                do
                {
                  uint64_t v48 = *v46;
                  uint64_t v47 = v46[1];
                  BOOL v46 = v42;
                  unsigned int v49 = *(_DWORD *)(v47 + 72);
                  if (v49 < *(_DWORD *)(v48 + 72))
                  {
                    uint64_t v50 = v45;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v50) = v48;
                      uint64_t v51 = v50 - 8;
                      if (v50 == 8)
                      {
                        uint64_t v52 = v10;
                        goto LABEL_83;
                      }
                      uint64_t v48 = *(uint64_t *)((char *)v10 + v50 - 16);
                      v50 -= 8;
                    }
                    while (v49 < *(_DWORD *)(v48 + 72));
                    uint64_t v52 = (uint64_t *)((char *)v10 + v51);
LABEL_83:
                    *uint64_t v52 = v47;
                  }
                  int v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v82 = *v9;
                uint64_t v81 = v9[1];
                int v9 = v42;
                unsigned int v83 = *(_DWORD *)(v81 + 72);
                if (v83 < *(_DWORD *)(v82 + 72))
                {
                  do
                  {
                    *int v42 = v82;
                    uint64_t v82 = *(v42 - 2);
                    --v42;
                  }
                  while (v83 < *(_DWORD *)(v82 + 72));
                  *int v42 = v81;
                }
                int v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v53 = (unint64_t)(v12 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  unsigned int v57 = &v10[v56];
                  uint64_t v58 = *v57;
                  if (2 * v55 + 2 < v12 && *(_DWORD *)(v58 + 72) < *(_DWORD *)(v57[1] + 72))
                  {
                    uint64_t v58 = v57[1];
                    ++v57;
                    uint64_t v56 = 2 * v55 + 2;
                  }
                  uint64_t result = &v10[v55];
                  uint64_t v59 = *result;
                  unsigned int v60 = *(_DWORD *)(*result + 72);
                  if (*(_DWORD *)(v58 + 72) >= v60)
                  {
                    do
                    {
                      unsigned int v61 = v57;
                      *uint64_t result = v58;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v62 = (2 * v56) | 1;
                      unsigned int v57 = &v10[v62];
                      uint64_t v63 = 2 * v56 + 2;
                      uint64_t v58 = *v57;
                      if (v63 < v12 && *(_DWORD *)(v58 + 72) < *(_DWORD *)(v57[1] + 72))
                      {
                        uint64_t v58 = v57[1];
                        ++v57;
                        uint64_t v62 = v63;
                      }
                      uint64_t result = v61;
                      uint64_t v56 = v62;
                    }
                    while (*(_DWORD *)(v58 + 72) >= v60);
                    *unsigned int v61 = v59;
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              do
              {
                uint64_t v64 = 0;
                uint64_t v65 = *v10;
                unsigned int v66 = v10;
                do
                {
                  int v67 = &v66[v64];
                  uint64_t v70 = v67[1];
                  uint64_t v68 = v67 + 1;
                  uint64_t v69 = v70;
                  uint64_t v71 = (2 * v64) | 1;
                  uint64_t v72 = 2 * v64 + 2;
                  if (v72 < v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v69 + 72);
                    if (result < *(_DWORD *)(v68[1] + 72))
                    {
                      uint64_t v69 = v68[1];
                      ++v68;
                      uint64_t v71 = v72;
                    }
                  }
                  *unsigned int v66 = v69;
                  unsigned int v66 = v68;
                  uint64_t v64 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v68 == --a2)
                {
                  *uint64_t v68 = v65;
                }
                else
                {
                  *uint64_t v68 = *a2;
                  *a2 = v65;
                  uint64_t v73 = (char *)v68 - (char *)v10 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                    uint64_t v75 = &v10[v74];
                    uint64_t v76 = *v75;
                    uint64_t v77 = *v68;
                    unsigned int v78 = *(_DWORD *)(*v68 + 72);
                    if (*(_DWORD *)(*v75 + 72) < v78)
                    {
                      do
                      {
                        uint64_t v79 = v75;
                        *uint64_t v68 = v76;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = &v10[v74];
                        uint64_t v76 = *v75;
                        uint64_t v68 = v79;
                      }
                      while (*(_DWORD *)(*v75 + 72) < v78);
                      *uint64_t v79 = v77;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC3463C4(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC3463C4(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC3463C4(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CC3463C4(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *int v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CC3463C4(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 72);
          if (*(_DWORD *)(*(v9 - 1) + 72) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(_DWORD *)(*v10 + 72));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v31 + 72));
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(_DWORD *)(v34 + 72));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *uint64_t v10 = v36;
              *uint64_t v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(_DWORD *)(v37 + 72));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(_DWORD *)(v38 + 72));
            }
            while (v10 < v33);
          }
          int v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v39;
          }
          a4 = 0;
          *int v39 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 72);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 72) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 72) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 72) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          unint64_t v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            *unint64_t v25 = v24;
            *uint64_t v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(_DWORD *)(v27 + 72) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(_DWORD *)(v28 + 72) >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *int v9 = *v29;
        }
        *uint64_t v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CC5B0114(v9, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v29 + 1;
      }
      BOOL v30 = sub_1CC5B0800(v9, v29);
      uint64_t v10 = v29 + 1;
      uint64_t result = (uint64_t *)sub_1CC5B0800(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC5B0800(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC3463C4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC346778(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CC346810(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CC3463C4(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      unsigned int v17 = a1;
LABEL_12:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC5B0994(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(_DWORD *)(v40 + 72) < *(_DWORD *)(*v10 + 72))
                {
                  *int v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3:
                BOOL result = sub_1CC3463C4(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = sub_1CC346778(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                BOOL result = sub_1CC346810(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            int v42 = v10 + 1;
            BOOL v44 = v10 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 8;
                BOOL v46 = v10;
                do
                {
                  uint64_t v48 = *v46;
                  uint64_t v47 = v46[1];
                  BOOL v46 = v42;
                  unsigned int v49 = *(_DWORD *)(v47 + 72);
                  if (v49 < *(_DWORD *)(v48 + 72))
                  {
                    uint64_t v50 = v45;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v50) = v48;
                      uint64_t v51 = v50 - 8;
                      if (v50 == 8)
                      {
                        uint64_t v52 = v10;
                        goto LABEL_83;
                      }
                      uint64_t v48 = *(uint64_t *)((char *)v10 + v50 - 16);
                      v50 -= 8;
                    }
                    while (v49 < *(_DWORD *)(v48 + 72));
                    uint64_t v52 = (uint64_t *)((char *)v10 + v51);
LABEL_83:
                    *uint64_t v52 = v47;
                  }
                  int v42 = v46 + 1;
                  v45 += 8;
                }
                while (v46 + 1 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v82 = *v9;
                uint64_t v81 = v9[1];
                int v9 = v42;
                unsigned int v83 = *(_DWORD *)(v81 + 72);
                if (v83 < *(_DWORD *)(v82 + 72))
                {
                  do
                  {
                    *int v42 = v82;
                    uint64_t v82 = *(v42 - 2);
                    --v42;
                  }
                  while (v83 < *(_DWORD *)(v82 + 72));
                  *int v42 = v81;
                }
                int v42 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v53 = (unint64_t)(v12 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  unsigned int v57 = &v10[v56];
                  uint64_t v58 = *v57;
                  if (2 * v55 + 2 < v12 && *(_DWORD *)(v58 + 72) < *(_DWORD *)(v57[1] + 72))
                  {
                    uint64_t v58 = v57[1];
                    ++v57;
                    uint64_t v56 = 2 * v55 + 2;
                  }
                  BOOL result = &v10[v55];
                  uint64_t v59 = *result;
                  unsigned int v60 = *(_DWORD *)(*result + 72);
                  if (*(_DWORD *)(v58 + 72) >= v60)
                  {
                    do
                    {
                      unsigned int v61 = v57;
                      *BOOL result = v58;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v62 = (2 * v56) | 1;
                      unsigned int v57 = &v10[v62];
                      uint64_t v63 = 2 * v56 + 2;
                      uint64_t v58 = *v57;
                      if (v63 < v12 && *(_DWORD *)(v58 + 72) < *(_DWORD *)(v57[1] + 72))
                      {
                        uint64_t v58 = v57[1];
                        ++v57;
                        uint64_t v62 = v63;
                      }
                      BOOL result = v61;
                      uint64_t v56 = v62;
                    }
                    while (*(_DWORD *)(v58 + 72) >= v60);
                    *unsigned int v61 = v59;
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              do
              {
                uint64_t v64 = 0;
                uint64_t v65 = *v10;
                unsigned int v66 = v10;
                do
                {
                  int v67 = &v66[v64];
                  uint64_t v70 = v67[1];
                  uint64_t v68 = v67 + 1;
                  uint64_t v69 = v70;
                  uint64_t v71 = (2 * v64) | 1;
                  uint64_t v72 = 2 * v64 + 2;
                  if (v72 < v12)
                  {
                    BOOL result = (uint64_t *)*(unsigned int *)(v69 + 72);
                    if (result < *(_DWORD *)(v68[1] + 72))
                    {
                      uint64_t v69 = v68[1];
                      ++v68;
                      uint64_t v71 = v72;
                    }
                  }
                  *unsigned int v66 = v69;
                  unsigned int v66 = v68;
                  uint64_t v64 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v68 == --a2)
                {
                  *uint64_t v68 = v65;
                }
                else
                {
                  *uint64_t v68 = *a2;
                  *a2 = v65;
                  uint64_t v73 = (char *)v68 - (char *)v10 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                    uint64_t v75 = &v10[v74];
                    uint64_t v76 = *v75;
                    uint64_t v77 = *v68;
                    unsigned int v78 = *(_DWORD *)(*v68 + 72);
                    if (*(_DWORD *)(*v75 + 72) < v78)
                    {
                      do
                      {
                        uint64_t v79 = v75;
                        *uint64_t v68 = v76;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = &v10[v74];
                        uint64_t v76 = *v75;
                        uint64_t v68 = v79;
                      }
                      while (*(_DWORD *)(*v75 + 72) < v78);
                      *uint64_t v79 = v77;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unsigned int v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC3463C4(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC3463C4(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC3463C4(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = sub_1CC3463C4(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *int v9 = *v14;
            *unsigned int v14 = v15;
          }
          else
          {
            BOOL result = sub_1CC3463C4(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 72);
          if (*(_DWORD *)(*(v9 - 1) + 72) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              int v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(_DWORD *)(*v10 + 72));
          }
          else
          {
            int v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v31 + 72));
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(_DWORD *)(v34 + 72));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *int v10 = v36;
              *uint64_t v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(_DWORD *)(v37 + 72));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(_DWORD *)(v38 + 72));
            }
            while (v10 < v33);
          }
          int v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v39;
          }
          a4 = 0;
          *int v39 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 72);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 72) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 72) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 72) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          unint64_t v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            *unint64_t v25 = v24;
            *uint64_t v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(_DWORD *)(v27 + 72) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(_DWORD *)(v28 + 72) >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *int v9 = *v29;
        }
        *uint64_t v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = (uint64_t *)sub_1CC5B0994(v9, v29, a3, a4 & 1);
        a4 = 0;
        int v10 = v29 + 1;
      }
      BOOL v30 = sub_1CC5B1080(v9, v29);
      int v10 = v29 + 1;
      BOOL result = (uint64_t *)sub_1CC5B1080(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC5B1080(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC3463C4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC346778(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CC346810(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CC3463C4(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      unsigned int v17 = a1;
LABEL_12:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC5B1214()
{
  uint64_t v3 = &llvm::VerifyDomInfo;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify dominator info (time consuming)";
  v1.n128_u64[1] = 38;
  sub_1CD4A42A8((llvm::cl::Option *)&unk_1EBCD8740, "verify-dom-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &unk_1EBCD8740, &dword_1CB82C000);
}

uint64_t llvm::getConstrainedIntrinsicID(uint64_t a1)
{
  uint64_t result = 0;
  switch(*(unsigned char *)(a1 + 16))
  {
    case 'E':
      uint64_t result = 93;
      break;
    case 'F':
      uint64_t result = 92;
      break;
    case 'G':
      uint64_t result = 118;
      break;
    case 'H':
      uint64_t result = 115;
      break;
    case 'I':
      uint64_t result = 94;
      break;
    case 'J':
      uint64_t result = 91;
      break;
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'S':
      return result;
    case 'R':
      uint64_t result = 84;
      break;
    case 'T':
      uint64_t v3 = *(void *)(a1 - 32);
      if (v3
        && !*(unsigned char *)(v3 + 16)
        && *(void *)(v3 + 24) == *(void *)(a1 + 72)
        && (*(unsigned char *)(v3 + 33) & 0x20) != 0)
      {
        uint64_t result = 0;
        int v4 = *(_DWORD *)(v3 + 36);
        if (v4 > 191)
        {
          if (v4 <= 238)
          {
            switch(v4)
            {
              case 192:
                uint64_t result = 104;
                break;
              case 193:
                uint64_t result = 105;
                break;
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
                return result;
              case 201:
                uint64_t result = 106;
                break;
              case 202:
                uint64_t result = 107;
                break;
              case 203:
                uint64_t result = 108;
                break;
              default:
                if (v4 == 238) {
                  uint64_t result = 109;
                }
                break;
            }
          }
          else if (v4 <= 259)
          {
            switch(v4)
            {
              case 239:
                uint64_t result = 110;
                break;
              case 258:
                uint64_t result = 111;
                break;
              case 259:
                uint64_t result = 112;
                break;
            }
          }
          else if (v4 > 279)
          {
            if (v4 == 280)
            {
              uint64_t result = 116;
            }
            else if (v4 == 296)
            {
              uint64_t result = 117;
            }
          }
          else if (v4 == 260)
          {
            uint64_t result = 113;
          }
          else if (v4 == 273)
          {
            uint64_t result = 114;
          }
        }
        else if (v4 > 141)
        {
          switch(v4)
          {
            case 169:
              uint64_t result = 97;
              break;
            case 170:
              uint64_t result = 98;
              break;
            case 171:
            case 172:
            case 173:
            case 174:
            case 178:
            case 179:
              return result;
            case 175:
              uint64_t result = 99;
              break;
            case 176:
              uint64_t result = 100;
              break;
            case 177:
              uint64_t result = 101;
              break;
            case 180:
              uint64_t result = 102;
              break;
            case 181:
              uint64_t result = 103;
              break;
            default:
              if (v4 == 142)
              {
                uint64_t result = 88;
              }
              else if (v4 == 143)
              {
                uint64_t result = 90;
              }
              break;
          }
        }
        else if (v4 <= 74)
        {
          if (v4 == 14)
          {
            uint64_t result = 79;
          }
          else if (v4 == 51)
          {
            uint64_t result = 80;
          }
        }
        else
        {
          switch(v4)
          {
            case 75:
              uint64_t result = 81;
              break;
            case 76:
              uint64_t result = 82;
              break;
            case 140:
              uint64_t result = 87;
              break;
          }
        }
      }
      else
      {
        uint64_t result = 0;
      }
      break;
    default:
      switch(*(unsigned char *)(a1 + 16))
      {
        case '*':
          uint64_t result = 83;
          break;
        case ',':
          uint64_t result = 96;
          break;
        case '.':
          uint64_t result = 89;
          break;
        case '1':
          uint64_t result = 86;
          break;
        case '4':
          uint64_t result = 95;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getListOwner(uint64_t a1)
{
  return a1 - 72;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getList(uint64_t a1)
{
  return a1 + 72;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getSymTab(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

int32x2_t llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(uint64_t a1, llvm::BasicBlock *this)
{
  llvm::BasicBlock::setParent(this, 0);
  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
    return result;
  }
  BOOL v5 = *(uint64_t **)(a1 + 32);
  if (!v5) {
    return result;
  }
  uint64_t v6 = ***(void ***)this;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (v8)
  {
    LODWORD(v9) = (v8 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v10 = v7 + 16 * v9;
    uint64_t v11 = *(llvm::BasicBlock **)v10;
    if (*(llvm::BasicBlock **)v10 == this) {
      goto LABEL_9;
    }
    int v12 = 1;
    while (v11 != (llvm::BasicBlock *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      uint64_t v11 = *(llvm::BasicBlock **)(v7 + 16 * v9);
      if (v11 == this)
      {
        uint64_t v10 = v7 + 16 * v9;
        goto LABEL_9;
      }
    }
  }
  uint64_t v10 = v7 + 16 * v8;
LABEL_9:
  uint64_t v14 = *((unsigned int *)v5 + 2);
  if (v14)
  {
    uint64_t v15 = *(size_t **)(v10 + 8);
    uint64_t v16 = *((unsigned int *)v5 + 5);
    unsigned int v17 = (unsigned __int8 *)v15 + v16;
    size_t v18 = *v15;
    if (*v15)
    {
      int v19 = 0;
      size_t v20 = *v15;
      uint64_t v21 = v17;
      do
      {
        int v22 = *v21++;
        int v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    else
    {
      int v19 = 0;
    }
    unsigned int v23 = v14 - 1;
    uint64_t v24 = *v5;
    uint64_t v25 = *v5 + 8 * v14 + 8;
    int v26 = 1;
    int v27 = v19;
    while (1)
    {
      uint64_t v28 = v27 & v23;
      uint64_t v29 = *(void **)(v24 + 8 * v28);
      if (v29 != (void *)-8)
      {
        if (!v29) {
          return result;
        }
        if (*(_DWORD *)(v25 + 4 * v28) == v19 && v18 == *v29 && (!v18 || !memcmp(v17, (char *)v29 + v16, v18))) {
          break;
        }
      }
      int v27 = v26 + v28;
      ++v26;
    }
    *(void *)(v24 + 8 * (int)v28) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)v5 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v5 + 12) = (uint64_t)result;
  }
  return result;
}

llvm::Argument *llvm::Argument::Argument(llvm::Argument *this, llvm::Type *a2, const char **a3, llvm::Function *a4, int a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v6 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 21;
  *((_DWORD *)this + 5) = v6;
  *((void *)this + 3) = a4;
  *((_DWORD *)this + 8) = a5;
  llvm::Value::setNameImpl(this, a3);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_18;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      int v13 = *(llvm::Argument **)v12;
      if (*(llvm::Argument **)v12 == this)
      {
LABEL_11:
        uint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        unsigned int v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == 1836477548 && v17[4] == 46)
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_19:
          *((_DWORD *)this + 9) = v21;
          return this;
        }
LABEL_18:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_19;
      }
      int v14 = 1;
      while (v13 != (llvm::Argument *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        int v13 = *(llvm::Argument **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_11;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_11;
  }
  return this;
}

{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Argument *v13;
  int v14;
  int v15;
  void *v16;
  unsigned char *v17;
  unint64_t v18;
  unint64_t v19;
  int v21;

  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v6 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 21;
  *((_DWORD *)this + 5) = v6;
  *((void *)this + 3) = a4;
  *((_DWORD *)this + 8) = a5;
  llvm::Value::setNameImpl(this, a3);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_18;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      int v13 = *(llvm::Argument **)v12;
      if (*(llvm::Argument **)v12 == this)
      {
LABEL_10:
        uint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        unsigned int v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == 1836477548 && v17[4] == 46)
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_17:
          *((_DWORD *)this + 9) = v21;
          return this;
        }
LABEL_18:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_17;
      }
      int v14 = 1;
      while (v13 != (llvm::Argument *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        int v13 = *(llvm::Argument **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_10;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_10;
  }
  return this;
}

uint64_t llvm::Argument::setParent(uint64_t this, Function *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

uint64_t llvm::Argument::hasNonNullAttr(llvm::Argument *this, char a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)this + 8);
  if (v2 != 15) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(void *)(v3 + 112);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (*((_DWORD *)this + 8) + 2);
  if (v5 >= *(_DWORD *)(v4 + 8)) {
    return 0;
  }
  uint64_t v7 = *(void *)(v4 + 40 + 8 * v5);
  if (!v7 || (int v8 = *(char *)(v7 + 16), (v8 & 0x80000000) == 0) || (a2 & 1) == 0 && (v8 & 0x10) == 0)
  {
    uint64_t v9 = *(void *)(v4 + 40 + 8 * v5);
    if (!v9 || (*(unsigned char *)(v9 + 21) & 0x10) == 0) {
      return 0;
    }
    uint64_t v10 = (void *)(v9 + 48);
    uint64_t v11 = 8 * *(unsigned int *)(v9 + 8) - 8 * *(unsigned int *)(v9 + 32);
    if (v11)
    {
      unint64_t v12 = v11 >> 3;
      do
      {
        unint64_t v13 = v12 >> 1;
        int v14 = &v10[v12 >> 1];
        uint64_t v15 = *v14;
        if (*v14) {
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        uint64_t v16 = v14 + 1;
        v12 += ~v13;
        if ((int)v15 < 76) {
          uint64_t v10 = v16;
        }
        else {
          unint64_t v12 = v13;
        }
      }
      while (v12);
    }
    if (!*(void *)(*v10 + 16)) {
      return 0;
    }
    if ((v2 & 0xFE) == 0x12) {
      unsigned int v2 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
    }
    if (v3)
    {
      if ((*(unsigned char *)(v4 + 17) & 1) == 0 && v2 <= 0xFF) {
        return 1;
      }
    }
    else if (v2 < 0x100)
    {
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::Function::hasParamAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3
    && (a2 + 2) < *(_DWORD *)(v3 + 8)
    && (uint64_t v5 = *(void *)(v3 + 8 * (a2 + 2) + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v5 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::getDereferenceableBytes(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)this + 8) + 2;
  if (v2 >= *(_DWORD *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 8 * v2 + 40);
  if (!v3 || (*(unsigned char *)(v3 + 21) & 0x10) == 0) {
    return 0;
  }
  uint64_t v5 = (void *)(v3 + 48);
  uint64_t v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[v7 >> 1];
      uint64_t v10 = *v9;
      if (*v9) {
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      }
      uint64_t v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 76) {
        uint64_t v5 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  return *(void *)(*v5 + 16);
}

BOOL llvm::NullPointerIsDefined(llvm *this, const Function *a2)
{
  return this && (uint64_t v2 = *((void *)this + 14)) != 0 && (*(unsigned char *)(v2 + 17) & 1) != 0 || a2 != 0;
}

uint64_t llvm::Argument::hasByValAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 20) >> 5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasAttribute(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 112);
  if (v2 && (unsigned int v3 = *(_DWORD *)(a1 + 32) + 2, v3 < *(_DWORD *)(v2 + 8)) && (v5 = *(void *)(v2 + 8 * v3 + 40)) != 0) {
    return (*(unsigned __int8 *)(v5 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Argument::hasByRefAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 20) >> 4) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasSwiftSelfAttr(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (v1 && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(void *)(v1 + 8 * v2 + 40)) != 0) {
    return *(unsigned char *)(v4 + 20) & 1;
  }
  else {
    return 0;
  }
}

BOOL llvm::Argument::hasSwiftErrorAttr(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (v1 && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(void *)(v1 + 8 * v2 + 40)) != 0) {
    return *(char *)(v4 + 19) < 0;
  }
  else {
    return 0;
  }
}

BOOL llvm::Argument::hasInAllocaAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return *(char *)(v4 + 20) < 0;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasPreallocatedAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return *(unsigned char *)(v4 + 21) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasPassPointeeByValueCopyAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return 0;
  }
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8)) {
    return 0;
  }
  uint64_t v4 = v1 + 40;
  uint64_t v5 = *(void *)(v4 + 8 * v2);
  if (v5 && (*(unsigned char *)(v5 + 20) & 0x20) != 0) {
    return 1;
  }
  uint64_t v6 = *(void *)(v4 + 8 * v2);
  if (v6)
  {
    if (*(char *)(v6 + 20) < 0) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(v4 + 8 * v2);
  if (!v7) {
    return 0;
  }
  return *(unsigned char *)(v7 + 21) & 1;
}

uint64_t sub_1CC5B1F28(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t result = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v2);
  if (!result)
  {
    uint64_t result = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v2);
    if (!result)
    {
      uint64_t result = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v2);
      if (!result)
      {
        uint64_t result = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v2);
        if (!result) {
          return llvm::AttributeSet::getStructRetType((llvm::AttributeSet *)&v2);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Argument::getPointeeInMemoryValueType(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (v1 && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))) {
    return sub_1CC5B1F28(*(void *)(v1 + 8 * v2 + 40));
  }
  else {
    return sub_1CC5B1F28(0);
  }
}

uint64_t llvm::Argument::getParamAlign(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (!v1) {
    goto LABEL_6;
  }
  unsigned int v2 = *((_DWORD *)this + 8) + 2;
  if (v2 >= *(_DWORD *)(v1 + 8))
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | (v1 << 8);
  }
  unsigned int v3 = *(llvm::AttributeSetNode **)(v1 + 8 * v2 + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getAlignment(v3);
    LODWORD(v1) = BYTE1(v3);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v3 | (v1 << 8);
}

uint64_t llvm::Argument::getParamByValType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamStructRetType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamStructRetType((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamInAllocaType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getDereferenceableOrNullBytes(llvm::Argument *this)
{
  return llvm::AttributeList::getParamDereferenceableOrNullBytes((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::hasNoAliasAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 14) >> 3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasNoCaptureAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 14) >> 6) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasNoFreeAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 15) >> 1) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasStructRetAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v4 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 21) >> 1) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasInRegAttr(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (v1 && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(void *)(v1 + 8 * v2 + 40)) != 0) {
    return (*(unsigned __int8 *)(v4 + 13) >> 2) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Argument::hasReturnedAttr(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (v1 && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(void *)(v1 + 8 * v2 + 40)) != 0) {
    return (*(unsigned __int8 *)(v4 + 17) >> 6) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Argument::onlyReadsMemory(llvm::Argument *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8)) {
    return 0;
  }
  uint64_t v4 = v1 + 40;
  uint64_t v5 = *(void *)(v4 + 8 * v2);
  if (v5 && (*(unsigned char *)(v5 + 17) & 0x20) != 0) {
    return 1;
  }
  uint64_t v6 = *(void *)(v4 + 8 * v2);
  if (!v6) {
    return 0;
  }
  return (*(unsigned __int8 *)(v6 + 17) >> 4) & 1;
}

uint64_t llvm::Function::getContext(llvm::Function *this)
{
  return **(void **)this;
}

uint64_t llvm::Argument::addAttr(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v2 + 112), **(uint64_t ***)v2, *(_DWORD *)(a1 + 32) + 1, a2);
  *(void *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Argument::addAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t result = llvm::AttributeList::addParamAttribute((void *)(v2 + 112), **(uint64_t ***)v2, &v4, 1, a2);
  *(void *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Argument::removeAttr(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v2 + 112), **(uint64_t ***)v2, *(_DWORD *)(a1 + 32) + 1, a2);
  *(void *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeParamAttr(uint64_t a1, int a2, int a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2 + 1, a3);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Argument::removeAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 + 112);
  uint64_t v9 = v4;
  uint64_t v5 = **(uint64_t ***)v3;
  int v6 = *(_DWORD *)(a1 + 32);
  if (v4 && (v6 + 2) < *(_DWORD *)(v4 + 8)) {
    uint64_t v7 = *(void *)(v4 + 8 * (v6 + 2) + 40);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t result = llvm::AttributeSet::removeAttributes(&v10, v5, a2);
  if (v7 != result)
  {
    uint64_t result = llvm::AttributeList::setAttributesAtIndex(&v9, v5, v6 + 1, result);
    uint64_t v4 = result;
  }
  *(void *)(*(void *)(a1 + 24) + 112) = v4;
  return result;
}

uint64_t llvm::Function::getParamAttribute(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2 + 1, a3);
}

llvm::LLVMContext **llvm::Function::addFnAttrs(llvm::LLVMContext ***this, const llvm::AttrBuilder *a2)
{
  uint64_t result = (llvm::LLVMContext **)llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(this + 14), **this, -1, a2);
  this[14] = result;
  return result;
}

void llvm::Function::eraseFromParent(llvm::Function *this)
{
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
    goto LABEL_23;
  }
  int v42 = *(uint64_t **)(v2 + 112);
  if (!v42) {
    goto LABEL_23;
  }
  uint64_t v3 = ***(void ***)this;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(unsigned int *)(v3 + 168);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v7 = v4 + 16 * v6;
    unint64_t v8 = *(llvm::Function **)v7;
    if (*(llvm::Function **)v7 == this) {
      goto LABEL_9;
    }
    int v9 = 1;
    while (v8 != (llvm::Function *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      unint64_t v8 = *(llvm::Function **)(v4 + 16 * v6);
      if (v8 == this)
      {
        uint64_t v7 = v4 + 16 * v6;
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = v4 + 16 * v5;
LABEL_9:
  uint64_t v11 = *((unsigned int *)v42 + 2);
  if (v11)
  {
    unint64_t v12 = *(size_t **)(v7 + 8);
    uint64_t v13 = *((unsigned int *)v42 + 5);
    int v14 = (unsigned __int8 *)v12 + v13;
    size_t v15 = *v12;
    if (*v12)
    {
      int v16 = 0;
      size_t v17 = *v12;
      unint64_t v18 = v14;
      do
      {
        int v19 = *v18++;
        int v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    unsigned int v20 = v11 - 1;
    uint64_t v21 = *v42;
    uint64_t v22 = *v42 + 8 * v11 + 8;
    int v23 = 1;
    int v24 = v16;
    while (1)
    {
      uint64_t v25 = v24 & v20;
      int v26 = *(void **)(v21 + 8 * v25);
      if (v26 != (void *)-8)
      {
        if (!v26) {
          goto LABEL_23;
        }
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15))) {
          break;
        }
      }
      int v24 = v23 + v25;
      ++v23;
    }
    *(void *)(v21 + 8 * (int)v25) = -8;
    *(uint64_t *)((char *)v42 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v42 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_23:
  uint64_t v27 = *((void *)this + 7);
  uint64_t v28 = (void *)*((void *)this + 8);
  *uint64_t v28 = v27;
  *(void *)(v27 + 8) = v28;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  llvm::Function::~Function((int32x2_t ****)this);
  int v29 = *((_DWORD *)this + 5);
  if ((v29 & 0x40000000) != 0)
  {
    uint64_t v37 = (char *)*((void *)this - 1);
    uint64_t v36 = (char *)this - 8;
    uint64_t v35 = v37;
    uint64_t v38 = v29 & 0x7FFFFFF;
    if (v38)
    {
      uint64_t v39 = 32 * v38;
      do
      {
        uint64_t v40 = &v35[v39];
        if (*(void *)&v35[v39 - 32])
        {
          **((void **)v40 - 2) = *((void *)v40 - 3);
          uint64_t v41 = *((void *)v40 - 3);
          if (v41) {
            *(void *)(v41 + 16) = *((void *)v40 - 2);
          }
        }
        v39 -= 32;
      }
      while (v39);
    }
    operator delete(v35);
    uint64_t v31 = v36;
  }
  else
  {
    uint64_t v30 = v29 & 0x7FFFFFF;
    uint64_t v31 = (char *)this - 32 * v30;
    if (v30)
    {
      uint64_t v32 = (void **)((char *)this - 16);
      uint64_t v33 = -32 * v30;
      do
      {
        if (*(v32 - 2))
        {
          **uint64_t v32 = *(v32 - 1);
          uint64_t v34 = (uint64_t)*(v32 - 1);
          if (v34) {
            *(void *)(v34 + 16) = *v32;
          }
        }
        v32 -= 4;
        v33 += 32;
      }
      while (v33);
    }
    if (v29 < 0) {
      uint64_t v31 = &v31[-*((void *)v31 - 1) - 8];
    }
  }

  operator delete(v31);
}

unint64_t *llvm::Function::Function(unint64_t *a1, llvm::PointerType *this, char a3, llvm::Type *a4, const char **a5, unint64_t a6)
{
  if (a4 == -1)
  {
    if (a6) {
      a4 = (llvm::Type *)*(unsigned int *)(a6 + 284);
    }
    else {
      a4 = 0;
    }
  }
  *a1 = llvm::PointerType::get(this, a4);
  a1[1] = 0;
  unsigned int v11 = *((_DWORD *)a1 + 5) & 0xC0000000;
  *((_DWORD *)a1 + 4) = 0;
  *((_DWORD *)a1 + 5) = v11;
  a1[3] = (unint64_t)this;
  int v12 = *((unsigned __int16 *)a1 + 17);
  a1[5] = 0;
  int v13 = a3 & 0xF | (v12 << 16);
  if ((a3 & 0xFu) - 7 < 2) {
    v13 |= 0x4000u;
  }
  *((_DWORD *)a1 + 8) = v13;
  *((_DWORD *)a1 + 9) = 0;
  llvm::Value::setNameImpl((llvm::Value *)a1, a5);
  if (*((unsigned char *)a1 + 16))
  {
    LOWORD(v14) = *((_WORD *)a1 + 16);
    goto LABEL_6;
  }
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
    goto LABEL_53;
  }
  uint64_t v36 = **(void **)*a1;
  uint64_t v37 = *(void *)(v36 + 152);
  uint64_t v38 = *(unsigned int *)(v36 + 168);
  if (!v38) {
    goto LABEL_54;
  }
  LODWORD(v39) = (v38 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v40 = (unint64_t **)(v37 + 16 * v39);
  uint64_t v41 = *v40;
  if (*v40 != a1)
  {
    int v42 = 1;
    while (v41 != (unint64_t *)-4096)
    {
      int v43 = v39 + v42++;
      uint64_t v39 = v43 & (v38 - 1);
      uint64_t v41 = *(unint64_t **)(v37 + 16 * v39);
      if (v41 == a1)
      {
        uint64_t v40 = (unint64_t **)(v37 + 16 * v39);
        goto LABEL_45;
      }
    }
LABEL_54:
    uint64_t v40 = (unint64_t **)(v37 + 16 * v38);
  }
LABEL_45:
  BOOL v44 = v40[1];
  unint64_t v47 = *v44;
  uint64_t v45 = v44 + 2;
  unint64_t v46 = v47;
  if (v47 < 5 || (*(_DWORD *)v45 == 1836477548 ? (BOOL v48 = v45[4] == 46) : (BOOL v48 = 0), !v48))
  {
LABEL_53:
    int v49 = 0;
    unsigned int v14 = a1[4] & 0xFFFFDFFF;
    goto LABEL_52;
  }
  unsigned int v14 = *((_DWORD *)a1 + 8) | 0x2000;
  *((_DWORD *)a1 + 8) = v14;
  int v49 = llvm::Function::lookupIntrinsicID(v45, v46);
LABEL_52:
  *((_DWORD *)a1 + 9) = v49;
LABEL_6:
  a1[6] = 0;
  a1[7] = 0;
  size_t v15 = (void ***)(a1 + 7);
  *((_DWORD *)a1 + 8) = (unsigned __int16)v14;
  a1[8] = 0;
  a1[9] = (unint64_t)(a1 + 9);
  a1[10] = (unint64_t)(a1 + 9);
  a1[11] = 0;
  a1[12] = (*((_DWORD *)this + 3) - 1);
  a1[13] = 0;
  a1[14] = 0;
  *((_DWORD *)a1 + 8) = (unsigned __int16)v14;
  if (!*(unsigned char *)(**(void **)*a1 + 2664)) {
    operator new();
  }
  if (*((_DWORD *)this + 3) != 1) {
    *((_WORD *)a1 + 9) = 1;
  }
  int v16 = *((_DWORD *)a1 + 5);
  if (a6)
  {
    size_t v17 = (void *)(a6 + 24);
    a1[5] = a6;
    if ((v16 & 0x10000000) != 0)
    {
      unint64_t v18 = *(llvm::ValueSymbolTable **)(a6 + 112);
      if (v18) {
        llvm::ValueSymbolTable::reinsertValue(v18, (llvm::Value *)a1);
      }
    }
    int v19 = (void *)*v17;
    a1[7] = *v17;
    a1[8] = (unint64_t)v17;
    v19[1] = v15;
    void *v17 = v15;
    int v16 = *((_DWORD *)a1 + 5);
  }
  if ((v16 & 0x10000000) == 0) {
    goto LABEL_37;
  }
  uint64_t v20 = **(void **)*a1;
  uint64_t v21 = *(void *)(v20 + 152);
  uint64_t v22 = *(unsigned int *)(v20 + 168);
  if (v22)
  {
    LODWORD(v23) = (v22 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int v24 = (unint64_t **)(v21 + 16 * v23);
    uint64_t v25 = *v24;
    if (*v24 == a1) {
      goto LABEL_22;
    }
    int v26 = 1;
    while (v25 != (unint64_t *)-4096)
    {
      int v27 = v23 + v26++;
      uint64_t v23 = v27 & (v22 - 1);
      uint64_t v25 = *(unint64_t **)(v21 + 16 * v23);
      if (v25 == a1)
      {
        int v24 = (unint64_t **)(v21 + 16 * v23);
        goto LABEL_22;
      }
    }
  }
  int v24 = (unint64_t **)(v21 + 16 * v22);
LABEL_22:
  uint64_t v28 = v24[1];
  if (*v28 >= 5)
  {
    int v29 = *((_DWORD *)v28 + 4);
    int v30 = *((unsigned __int8 *)v28 + 20);
    int v32 = v29 == 1836477548 && v30 == 46;
    int v33 = v32 << 13;
    goto LABEL_30;
  }
LABEL_37:
  int v33 = 0;
LABEL_30:
  uint64_t v34 = (llvm::LLVMContext *)*((unsigned int *)a1 + 9);
  *((_DWORD *)a1 + 8) = a1[4] & 0xFFFFDFFF | v33;
  if (v34) {
    a1[14] = llvm::Intrinsic::getAttributes(*(llvm::Intrinsic **)*a1, v34);
  }
  return a1;
}

uint64_t llvm::Intrinsic::getAttributes(llvm::Intrinsic *this, llvm::LLVMContext *a2)
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  uint64_t v193 = 0;
  long long v192 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v189 = 0u;
  if (a2)
  {
    uint64_t result = 0;
    switch((int)a2)
    {
      case 2:
      case 17:
      case 18:
      case 60:
      case 64:
      case 77:
      case 78:
      case 130:
      case 133:
      case 146:
      case 153:
      case 172:
      case 279:
      case 294:
      case 297:
      case 298:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 334:
      case 346:
      case 368:
      case 373:
      case 377:
      case 379:
      case 382:
      case 386:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 402:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 440:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 636:
      case 640:
      case 641:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 674:
      case 675:
      case 676:
      case 677:
      case 679:
      case 681:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 729:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 800:
      case 801:
      case 802:
      case 804:
      case 806:
      case 808:
      case 810:
      case 812:
      case 814:
      case 815:
      case 816:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 879:
      case 880:
      case 881:
      case 882:
      case 883:
      case 884:
      case 885:
      case 887:
      case 889:
      case 890:
      case 892:
      case 893:
      case 894:
      case 895:
      case 896:
      case 897:
      case 898:
      case 899:
      case 900:
      case 901:
      case 902:
      case 903:
      case 904:
      case 905:
      case 906:
      case 924:
      case 925:
      case 926:
      case 928:
      case 929:
      case 930:
      case 931:
      case 932:
      case 933:
      case 936:
      case 937:
      case 938:
      case 939:
      case 942:
      case 943:
      case 944:
      case 945:
      case 946:
      case 947:
      case 948:
      case 949:
      case 950:
      case 951:
      case 952:
      case 953:
      case 954:
      case 955:
      case 956:
      case 957:
      case 958:
      case 959:
      case 960:
      case 961:
      case 962:
      case 963:
      case 964:
      case 965:
      case 966:
      case 968:
      case 970:
      case 973:
      case 974:
      case 976:
      case 977:
      case 978:
      case 979:
      case 980:
      case 981:
      case 982:
      case 983:
      case 984:
      case 986:
      case 988:
      case 990:
      case 992:
      case 993:
      case 994:
      case 996:
      case 998:
      case 999:
      case 1000:
      case 1001:
      case 1011:
      case 1012:
      case 1013:
      case 1017:
      case 1019:
      case 1020:
      case 1022:
      case 1024:
      case 1025:
      case 1027:
      case 1029:
      case 1031:
      case 1041:
      case 1042:
      case 1043:
      case 1047:
      case 1050:
      case 1052:
      case 1054:
      case 1056:
      case 1061:
      case 1067:
      case 1068:
      case 1069:
      case 1070:
      case 1071:
      case 1072:
      case 1073:
      case 1074:
      case 1076:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1086:
      case 1087:
      case 1104:
      case 1105:
      case 1106:
      case 1107:
      case 1109:
      case 1110:
      case 1111:
      case 1112:
      case 1113:
      case 1114:
      case 1115:
      case 1116:
      case 1117:
      case 1118:
      case 1119:
      case 1120:
      case 1121:
      case 1127:
      case 1128:
      case 1129:
      case 1130:
      case 1131:
      case 1132:
      case 1133:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1148:
      case 1149:
      case 1150:
      case 1151:
      case 1152:
      case 1153:
      case 1154:
      case 1155:
      case 1156:
      case 1157:
      case 1159:
      case 1161:
      case 1163:
      case 1165:
      case 1166:
      case 1167:
      case 1169:
      case 1171:
      case 1172:
      case 1181:
      case 1182:
      case 1183:
      case 1195:
      case 1196:
      case 1197:
      case 1201:
      case 1204:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1211:
      case 1212:
      case 1213:
      case 1214:
      case 1216:
      case 1218:
      case 1222:
      case 1223:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
      case 1233:
      case 1234:
      case 1235:
      case 1236:
      case 1237:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1242:
      case 1243:
      case 1244:
      case 1245:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1265:
      case 6736:
      case 6737:
      case 6793:
      case 6794:
      case 6832:
      case 6833:
      case 6834:
      case 6835:
      case 6836:
      case 6837:
      case 6838:
      case 6839:
      case 6840:
      case 6841:
      case 6842:
      case 6843:
      case 6844:
      case 6845:
      case 6846:
      case 6847:
      case 6848:
      case 6849:
      case 6850:
      case 6998:
      case 7026:
      case 7027:
      case 7028:
      case 7161:
      case 7162:
      case 7163:
      case 7173:
      case 7174:
      case 7175:
      case 7176:
      case 7177:
      case 7178:
      case 7179:
      case 7180:
      case 7181:
      case 7182:
      case 7183:
      case 7184:
      case 7185:
      case 7267:
      case 7268:
      case 7269:
      case 7270:
      case 7271:
      case 7307:
      case 7308:
      case 7309:
      case 7310:
      case 7311:
      case 7312:
      case 7313:
      case 7314:
      case 7315:
      case 7316:
      case 7317:
      case 7318:
      case 7319:
      case 7320:
      case 7321:
      case 7322:
      case 7323:
        *(void *)&v184[16] = 0x2C00000041;
        uint64_t v28 = &xmmword_1CFAE103C;
        goto LABEL_38;
      case 3:
      case 171:
      case 345:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 849:
      case 850:
      case 851:
      case 853:
      case 854:
      case 855:
      case 856:
      case 857:
      case 858:
      case 859:
      case 860:
      case 861:
      case 862:
      case 863:
      case 864:
      case 874:
      case 875:
      case 876:
      case 878:
      case 12564:
      case 12574:
      case 12598:
      case 12636:
      case 12676:
        unint64_t v8 = &xmmword_1CFAE1004;
        goto LABEL_8;
      case 4:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 126:
      case 141:
      case 213:
      case 244:
      case 245:
      case 271:
      case 272:
      case 316:
        *(void *)&v184[16] = 0xB00000041;
        uint64_t v28 = &xmmword_1CFAE0F84;
        goto LABEL_38;
      case 5:
      case 20:
      case 34:
      case 40:
      case 41:
      case 42:
      case 46:
      case 62:
      case 63:
      case 70:
      case 73:
      case 123:
      case 247:
      case 250:
      case 266:
      case 267:
      case 422:
      case 423:
      case 424:
      case 429:
      case 430:
      case 1266:
      case 1267:
      case 1268:
      case 1269:
      case 1270:
      case 1275:
      case 1276:
      case 1277:
      case 1278:
      case 1279:
      case 1280:
      case 1281:
      case 1822:
      case 1831:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1859:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1968:
      case 1969:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2004:
      case 2005:
      case 2006:
      case 2107:
      case 2108:
      case 2109:
      case 2110:
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
      case 2132:
      case 2133:
      case 2139:
      case 2145:
      case 2146:
      case 2147:
      case 2150:
      case 2151:
      case 2152:
      case 2154:
      case 2155:
      case 2156:
      case 2167:
      case 2169:
      case 2170:
      case 2171:
      case 2172:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2305:
      case 2307:
      case 2308:
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2374:
      case 2375:
      case 2408:
      case 2409:
      case 2410:
      case 2423:
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2444:
      case 2445:
      case 2446:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2481:
      case 2482:
      case 2483:
      case 2486:
      case 2487:
      case 2491:
      case 2492:
      case 2517:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2523:
      case 2526:
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
      case 2586:
      case 2587:
      case 2628:
      case 2665:
      case 2666:
      case 2667:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2679:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2709:
      case 2732:
      case 2768:
      case 2795:
      case 2796:
      case 2811:
      case 2812:
      case 2849:
      case 3628:
      case 3629:
      case 3630:
      case 3631:
      case 3632:
      case 3633:
      case 3634:
      case 3635:
      case 3636:
      case 3637:
      case 3638:
      case 3639:
      case 3663:
      case 3664:
      case 3665:
      case 3666:
      case 3667:
      case 3668:
      case 3669:
      case 3670:
      case 3671:
      case 3672:
      case 3673:
      case 3674:
      case 3675:
      case 3676:
      case 3677:
      case 3678:
      case 3679:
      case 3680:
      case 3681:
      case 3682:
      case 3683:
      case 3684:
      case 3685:
      case 3686:
      case 3687:
      case 3688:
      case 3689:
      case 3690:
      case 3691:
      case 3692:
      case 3693:
      case 3694:
      case 3695:
      case 3696:
      case 3697:
      case 3698:
      case 3699:
      case 3700:
      case 3701:
      case 3702:
      case 3703:
      case 3704:
      case 3705:
      case 3706:
      case 3707:
      case 3708:
      case 3709:
      case 3710:
      case 3711:
      case 3712:
      case 3713:
      case 3714:
      case 3715:
      case 3716:
      case 3717:
      case 3718:
      case 3719:
      case 3720:
      case 3721:
      case 3722:
      case 3723:
      case 3724:
      case 3725:
      case 3726:
      case 3727:
      case 3728:
      case 3729:
      case 3730:
      case 3731:
      case 3732:
      case 3733:
      case 3734:
      case 3735:
      case 3736:
      case 3737:
      case 3738:
      case 3739:
      case 3740:
      case 3741:
      case 3742:
      case 3743:
      case 3744:
      case 3745:
      case 3746:
      case 3747:
      case 3748:
      case 3749:
      case 3750:
      case 3751:
      case 3752:
      case 3753:
      case 3754:
      case 3755:
      case 3756:
      case 3757:
      case 3758:
      case 3759:
      case 3760:
      case 3761:
      case 3762:
      case 3763:
      case 3764:
      case 3765:
      case 3766:
      case 3767:
      case 3768:
      case 3769:
      case 3770:
      case 3771:
      case 3772:
      case 3773:
      case 3782:
      case 3783:
      case 3784:
      case 3785:
      case 3786:
      case 3787:
      case 3788:
      case 3789:
      case 3790:
      case 3791:
      case 3792:
      case 3793:
      case 3794:
      case 3795:
      case 3796:
      case 3797:
      case 3798:
      case 3799:
      case 3800:
      case 3801:
      case 3802:
      case 3803:
      case 3804:
      case 3805:
      case 3806:
      case 3807:
      case 3808:
      case 3809:
      case 3810:
      case 3811:
      case 3812:
      case 3813:
      case 3814:
      case 3815:
      case 3816:
      case 3817:
      case 3818:
      case 3819:
      case 3820:
      case 3821:
      case 3822:
      case 3823:
      case 3824:
      case 3825:
      case 3826:
      case 3827:
      case 3828:
      case 3829:
      case 3830:
      case 3831:
      case 3832:
      case 3833:
      case 3834:
      case 3835:
      case 3836:
      case 3837:
      case 3838:
      case 3839:
      case 3840:
      case 3841:
      case 3842:
      case 3843:
      case 3844:
      case 3845:
      case 3846:
      case 3847:
      case 3856:
      case 3857:
      case 3858:
      case 3859:
      case 3860:
      case 3861:
      case 3862:
      case 3863:
      case 3864:
      case 3865:
      case 3866:
      case 3867:
      case 3868:
      case 3869:
      case 3870:
      case 3871:
      case 3872:
      case 3873:
      case 3874:
      case 3875:
      case 3876:
      case 3877:
      case 3878:
      case 3879:
      case 3880:
      case 3881:
      case 3882:
      case 3883:
      case 3884:
      case 3885:
      case 3886:
      case 3887:
      case 3888:
      case 3889:
      case 3890:
      case 3891:
      case 3892:
      case 3893:
      case 3894:
      case 3895:
      case 3896:
      case 3897:
      case 3898:
      case 3899:
      case 3900:
      case 3901:
      case 3902:
      case 3903:
      case 3904:
      case 3905:
      case 3906:
      case 3907:
      case 3908:
      case 3922:
      case 3923:
      case 3924:
      case 3925:
      case 3926:
      case 3927:
      case 3928:
      case 3929:
      case 3930:
      case 3931:
      case 3932:
      case 3933:
      case 3934:
      case 3935:
      case 3936:
      case 3937:
      case 3938:
      case 3939:
      case 3940:
      case 3941:
      case 3942:
      case 3943:
      case 3944:
      case 3945:
      case 3946:
      case 3947:
      case 3948:
      case 3949:
      case 3950:
      case 3951:
      case 3952:
      case 3953:
      case 3954:
      case 3955:
      case 3956:
      case 3957:
      case 3958:
      case 3959:
      case 3960:
      case 3961:
      case 3962:
      case 3963:
      case 3964:
      case 3965:
      case 3966:
      case 3967:
      case 3968:
      case 3969:
      case 3970:
      case 3971:
      case 3972:
      case 3973:
      case 3974:
      case 3975:
      case 3976:
      case 3977:
      case 3978:
      case 3979:
      case 3980:
      case 3981:
      case 3992:
      case 3993:
      case 3994:
      case 3995:
      case 3996:
      case 3997:
      case 3998:
      case 3999:
      case 4000:
      case 4001:
      case 4002:
      case 4003:
      case 4004:
      case 4005:
      case 4006:
      case 4007:
      case 4013:
      case 4014:
      case 4015:
      case 4016:
      case 4017:
      case 4018:
      case 4019:
      case 4020:
      case 4021:
      case 4022:
      case 4023:
      case 4024:
      case 4025:
      case 4026:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
      case 4032:
      case 4033:
      case 4034:
      case 4035:
      case 4036:
      case 4037:
      case 4038:
      case 4039:
      case 4040:
      case 4041:
      case 4042:
      case 4044:
      case 4045:
      case 4057:
      case 4058:
      case 4062:
      case 4063:
      case 4064:
      case 4065:
      case 4066:
      case 4067:
      case 4069:
      case 4070:
      case 4071:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4078:
      case 4082:
      case 4083:
      case 4084:
      case 4085:
      case 4086:
      case 4087:
      case 4091:
      case 4092:
      case 4094:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4100:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4119:
      case 4120:
      case 4121:
      case 4122:
      case 4123:
      case 4124:
      case 4125:
      case 4127:
      case 4128:
      case 4129:
      case 4130:
      case 4131:
      case 4132:
      case 4133:
      case 4134:
      case 4135:
      case 4136:
      case 4137:
      case 4138:
      case 4139:
      case 4140:
      case 4141:
      case 4143:
      case 4144:
      case 4145:
      case 4146:
      case 4147:
      case 4148:
      case 4149:
      case 4150:
      case 4151:
      case 4152:
      case 4153:
      case 4154:
      case 4155:
      case 4156:
      case 4157:
      case 4158:
      case 4159:
      case 4160:
      case 4161:
      case 4162:
      case 4163:
      case 4165:
      case 4166:
      case 4167:
      case 4168:
      case 4169:
      case 4170:
      case 4171:
      case 4172:
      case 4173:
      case 4174:
      case 4175:
      case 4176:
      case 4177:
      case 4178:
      case 4179:
      case 4182:
      case 4185:
      case 4186:
      case 4187:
      case 4188:
      case 4189:
      case 4190:
      case 4191:
      case 4192:
      case 4193:
      case 4194:
      case 4195:
      case 4196:
      case 4197:
      case 4198:
      case 4199:
      case 4200:
      case 4201:
      case 4202:
      case 4203:
      case 4204:
      case 4205:
      case 4206:
      case 4207:
      case 4208:
      case 4209:
      case 4210:
      case 4211:
      case 4212:
      case 4213:
      case 4214:
      case 4215:
      case 4216:
      case 4217:
      case 4218:
      case 4219:
      case 4220:
      case 4221:
      case 4222:
      case 4223:
      case 4224:
      case 4225:
      case 4226:
      case 4227:
      case 4228:
      case 4229:
      case 4230:
      case 4231:
      case 4232:
      case 4233:
      case 4234:
      case 4235:
      case 4236:
      case 4237:
      case 4238:
      case 4239:
      case 4240:
      case 4241:
      case 4242:
      case 4243:
      case 4244:
      case 4245:
      case 4246:
      case 4247:
      case 4248:
      case 4249:
      case 4250:
      case 4251:
      case 4252:
      case 4253:
      case 4254:
      case 4256:
      case 4257:
      case 4259:
      case 4261:
      case 4263:
      case 4265:
      case 4267:
      case 4272:
      case 4273:
      case 4274:
      case 4275:
      case 4276:
      case 4278:
      case 4282:
      case 4283:
      case 4284:
      case 4285:
      case 4287:
      case 4296:
      case 4297:
      case 4298:
      case 4299:
      case 4300:
      case 4301:
      case 4302:
      case 4303:
      case 4304:
      case 4305:
      case 4308:
      case 4310:
      case 4311:
      case 4312:
      case 4313:
      case 4314:
      case 4316:
      case 4317:
      case 4319:
      case 4322:
      case 4324:
      case 4325:
      case 4327:
      case 4328:
      case 4329:
      case 4330:
      case 4331:
      case 4335:
      case 4336:
      case 4337:
      case 4338:
      case 4339:
      case 4340:
      case 4341:
      case 4342:
      case 4343:
      case 4344:
      case 4345:
      case 4346:
      case 4347:
      case 4348:
      case 4350:
      case 4352:
      case 4354:
      case 4355:
      case 4356:
      case 4358:
      case 4359:
      case 4360:
      case 4361:
      case 4362:
      case 4363:
      case 4364:
      case 4365:
      case 4366:
      case 4367:
      case 4368:
      case 4369:
      case 4370:
      case 4371:
      case 4372:
      case 4373:
      case 4374:
      case 4375:
      case 4376:
      case 4377:
      case 4378:
      case 4379:
      case 4380:
      case 4381:
      case 4382:
      case 4383:
      case 4384:
      case 4385:
      case 4386:
      case 4387:
      case 4388:
      case 4444:
      case 4446:
      case 4447:
      case 4448:
      case 4449:
      case 4450:
      case 4451:
      case 4452:
      case 4453:
      case 4454:
      case 4455:
      case 4456:
      case 4457:
      case 4458:
      case 4459:
      case 4460:
      case 4461:
      case 4462:
      case 4463:
      case 4464:
      case 4465:
      case 4466:
      case 4467:
      case 4468:
      case 4469:
      case 4470:
      case 4471:
      case 4472:
      case 4473:
      case 4474:
      case 4475:
      case 4476:
      case 4477:
      case 4480:
      case 4481:
      case 4482:
      case 4483:
      case 4484:
      case 4485:
      case 4486:
      case 4487:
      case 4488:
      case 4489:
      case 4490:
      case 4491:
      case 4492:
      case 4493:
      case 4494:
      case 4495:
      case 4496:
      case 4497:
      case 4498:
      case 4499:
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
      case 4510:
      case 4511:
      case 4512:
      case 4513:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4518:
      case 4519:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4524:
      case 4525:
      case 4526:
      case 4527:
      case 4528:
      case 4529:
      case 4530:
      case 4531:
      case 4532:
      case 4533:
      case 4534:
      case 4535:
      case 4536:
      case 4537:
      case 4538:
      case 4539:
      case 4540:
      case 4541:
      case 4542:
      case 4543:
      case 4544:
      case 4545:
      case 4546:
      case 4547:
      case 4548:
      case 4549:
      case 4550:
      case 4551:
      case 4552:
      case 4553:
      case 4554:
      case 4555:
      case 4556:
      case 4557:
      case 4558:
      case 4559:
      case 4560:
      case 4561:
      case 4562:
      case 4563:
      case 4564:
      case 4565:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4570:
      case 4571:
      case 4572:
      case 4573:
      case 4574:
      case 4575:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4581:
      case 4582:
      case 4583:
      case 4584:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
      case 4589:
      case 4590:
      case 4591:
      case 4592:
      case 4593:
      case 4594:
      case 4595:
      case 4596:
      case 4597:
      case 4598:
      case 4599:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4604:
      case 4605:
      case 4606:
      case 4607:
      case 4608:
      case 4609:
      case 4610:
      case 4611:
      case 4612:
      case 4614:
      case 4615:
      case 4616:
      case 4617:
      case 4618:
      case 4619:
      case 4620:
      case 4621:
      case 4622:
      case 4623:
      case 4624:
      case 4625:
      case 4626:
      case 4627:
      case 4628:
      case 4629:
      case 4630:
      case 4631:
      case 4632:
      case 4633:
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
      case 4640:
      case 4641:
      case 4642:
      case 4643:
      case 4644:
      case 4645:
      case 4646:
      case 4647:
      case 4648:
      case 4649:
      case 4650:
      case 4651:
      case 4652:
      case 4653:
      case 4654:
      case 4655:
      case 4656:
      case 4657:
      case 4658:
      case 4659:
      case 4660:
      case 4661:
      case 4662:
      case 4663:
      case 4664:
      case 4665:
      case 4667:
      case 4668:
      case 4669:
      case 4670:
      case 4671:
      case 4672:
      case 4673:
      case 4674:
      case 4675:
      case 4676:
      case 4677:
      case 4678:
      case 4679:
      case 4680:
      case 4681:
      case 4682:
      case 4683:
      case 4684:
      case 4685:
      case 4686:
      case 4687:
      case 4688:
      case 4689:
      case 4690:
      case 4691:
      case 4692:
      case 4693:
      case 4694:
      case 4695:
      case 4696:
      case 4697:
      case 4698:
      case 4699:
      case 4700:
      case 4701:
      case 4702:
      case 4703:
      case 4704:
      case 4705:
      case 4706:
      case 4707:
      case 4708:
      case 4709:
      case 4710:
      case 4711:
      case 4712:
      case 4713:
      case 4714:
      case 4715:
      case 4716:
      case 4717:
      case 4718:
      case 4719:
      case 4720:
      case 4721:
      case 4722:
      case 4727:
      case 4728:
      case 4729:
      case 4730:
      case 4731:
      case 4732:
      case 4733:
      case 4734:
      case 4735:
      case 4736:
      case 4737:
      case 4738:
      case 4739:
      case 4740:
      case 4741:
      case 4742:
      case 4743:
      case 4744:
      case 4745:
      case 4746:
      case 4747:
      case 4748:
      case 4749:
      case 4750:
      case 4751:
      case 4752:
      case 4753:
      case 4754:
      case 4755:
      case 4756:
      case 4757:
      case 4758:
      case 4759:
      case 4760:
      case 4761:
      case 4762:
      case 4763:
      case 4764:
      case 4765:
      case 4766:
      case 4767:
      case 4768:
      case 4769:
      case 4770:
      case 4771:
      case 4772:
      case 4773:
      case 4774:
      case 4775:
      case 4776:
      case 4777:
      case 4778:
      case 4795:
      case 4796:
      case 4797:
      case 4798:
      case 4799:
      case 4800:
      case 4801:
      case 4802:
      case 4803:
      case 4804:
      case 4805:
      case 4806:
      case 4807:
      case 4808:
      case 4826:
      case 4827:
      case 4828:
      case 4829:
      case 4830:
      case 4831:
      case 4832:
      case 4833:
      case 4834:
      case 4835:
      case 4836:
      case 4837:
      case 4838:
      case 4839:
      case 4840:
      case 4841:
      case 4842:
      case 4843:
      case 4844:
      case 4845:
      case 4846:
      case 4847:
      case 4848:
      case 4849:
      case 4851:
      case 4852:
      case 4853:
      case 4854:
      case 4855:
      case 4856:
      case 4858:
      case 4860:
      case 4862:
      case 4864:
      case 4865:
      case 4866:
      case 4867:
      case 4868:
      case 4869:
      case 4870:
      case 4871:
      case 4872:
      case 4873:
      case 4874:
      case 4875:
      case 4876:
      case 4877:
      case 4878:
      case 4879:
      case 4894:
      case 4895:
      case 4896:
      case 4897:
      case 4898:
      case 4899:
      case 4900:
      case 4901:
      case 4902:
      case 4903:
      case 4904:
      case 4905:
      case 4906:
      case 4908:
      case 4909:
      case 4911:
      case 4912:
      case 4913:
      case 4914:
      case 4915:
      case 4932:
      case 4933:
      case 4939:
      case 4941:
      case 4943:
      case 4944:
      case 4945:
      case 4946:
      case 4947:
      case 4948:
      case 4949:
      case 4950:
      case 4951:
      case 4952:
      case 4953:
      case 4954:
      case 4955:
      case 4956:
      case 4957:
      case 4958:
      case 4960:
      case 4961:
      case 4962:
      case 4963:
      case 4964:
      case 4965:
      case 4966:
      case 4967:
      case 4968:
      case 4976:
      case 4978:
      case 4980:
      case 4983:
      case 4989:
      case 4996:
      case 4997:
      case 4998:
      case 4999:
      case 5000:
      case 5001:
      case 5004:
      case 5018:
      case 5019:
      case 5020:
      case 5021:
      case 5022:
      case 5023:
      case 5024:
      case 5025:
      case 5026:
      case 5027:
      case 5028:
      case 5029:
      case 5030:
      case 5031:
      case 5032:
      case 5033:
      case 5034:
      case 5035:
      case 5036:
      case 5037:
      case 5038:
      case 5039:
      case 5040:
      case 5041:
      case 5042:
      case 5043:
      case 5044:
      case 5045:
      case 5046:
      case 5047:
      case 5048:
      case 5049:
      case 5050:
      case 5051:
      case 5052:
      case 5053:
      case 5054:
      case 5131:
      case 5132:
      case 5133:
      case 5134:
      case 5135:
      case 5136:
      case 5137:
      case 5138:
      case 5139:
      case 5140:
      case 5141:
      case 5142:
      case 5143:
      case 5144:
      case 5145:
      case 5146:
      case 5147:
      case 5148:
      case 5149:
      case 5150:
      case 5151:
      case 5152:
      case 5153:
      case 5154:
      case 5155:
      case 5156:
      case 5157:
      case 5158:
      case 5159:
      case 5160:
      case 5161:
      case 5162:
      case 5163:
      case 5164:
      case 5165:
      case 5166:
      case 5167:
      case 5168:
      case 5169:
      case 5170:
      case 5171:
      case 5172:
      case 5173:
      case 5174:
      case 5175:
      case 5176:
      case 5177:
      case 5178:
      case 5179:
      case 5180:
      case 5181:
      case 5182:
      case 5183:
      case 5184:
      case 5185:
      case 5186:
      case 5187:
      case 5188:
      case 5189:
      case 5190:
      case 5191:
      case 5192:
      case 5193:
      case 5194:
      case 5195:
      case 5196:
      case 5197:
      case 5198:
      case 5199:
      case 5200:
      case 5201:
      case 5202:
      case 5203:
      case 5204:
      case 5205:
      case 5206:
      case 5207:
      case 5208:
      case 5209:
      case 5210:
      case 5211:
      case 5212:
      case 5213:
      case 5214:
      case 5215:
      case 5216:
      case 5217:
      case 5218:
      case 5219:
      case 5220:
      case 5221:
      case 5222:
      case 5223:
      case 5224:
      case 5225:
      case 5226:
      case 5227:
      case 5228:
      case 5229:
      case 5230:
      case 5231:
      case 5232:
      case 5233:
      case 5234:
      case 5235:
      case 5236:
      case 5237:
      case 5238:
      case 5239:
      case 5240:
      case 5241:
      case 5242:
      case 5243:
      case 5244:
      case 5247:
      case 5248:
      case 5249:
      case 5250:
      case 5251:
      case 5252:
      case 5253:
      case 5254:
      case 5255:
      case 5256:
      case 5257:
      case 5258:
      case 5259:
      case 5260:
      case 5261:
      case 5262:
      case 5263:
      case 5264:
      case 5265:
      case 5266:
      case 5267:
      case 5268:
      case 5269:
      case 5270:
      case 5271:
      case 5272:
      case 5273:
      case 5274:
      case 5275:
      case 5276:
      case 5277:
      case 5278:
      case 5279:
      case 5280:
      case 5281:
      case 5282:
      case 5283:
      case 5284:
      case 5285:
      case 5286:
      case 5287:
      case 5288:
      case 5289:
      case 5290:
      case 5291:
      case 5292:
      case 5293:
      case 5294:
      case 5295:
      case 5296:
      case 5297:
      case 5298:
      case 5299:
      case 5300:
      case 5301:
      case 5302:
      case 5303:
      case 5304:
      case 5305:
      case 5306:
      case 5307:
      case 5308:
      case 5309:
      case 5310:
      case 5311:
      case 5312:
      case 5313:
      case 5314:
      case 5315:
      case 5316:
      case 5317:
      case 5318:
      case 5319:
      case 5320:
      case 5321:
      case 5322:
      case 5323:
      case 5324:
      case 5325:
      case 5326:
      case 5327:
      case 5328:
      case 5329:
      case 5330:
      case 5331:
      case 5332:
      case 5333:
      case 5334:
      case 5335:
      case 5336:
      case 5337:
      case 5338:
      case 5339:
      case 5340:
      case 5341:
      case 5342:
      case 5343:
      case 5344:
      case 5345:
      case 5346:
      case 5347:
      case 5348:
      case 5349:
      case 5350:
      case 5351:
      case 5352:
      case 5353:
      case 5354:
      case 5355:
      case 5356:
      case 5357:
      case 5358:
      case 5359:
      case 5360:
      case 5361:
      case 5362:
      case 5363:
      case 5364:
      case 5365:
      case 5366:
      case 5367:
      case 5368:
      case 5369:
      case 5370:
      case 5371:
      case 5372:
      case 5373:
      case 5374:
      case 5375:
      case 5376:
      case 5377:
      case 5378:
      case 5379:
      case 5380:
      case 5381:
      case 5382:
      case 5383:
      case 5384:
      case 5385:
      case 5386:
      case 5387:
      case 5388:
      case 5389:
      case 5390:
      case 5391:
      case 5392:
      case 5393:
      case 5394:
      case 5395:
      case 5396:
      case 5397:
      case 5398:
      case 5399:
      case 5400:
      case 5401:
      case 5402:
      case 5403:
      case 5404:
      case 5405:
      case 5406:
      case 5407:
      case 5408:
      case 5409:
      case 5410:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
      case 5415:
      case 5416:
      case 5417:
      case 5418:
      case 5419:
      case 5420:
      case 5421:
      case 5422:
      case 5423:
      case 5424:
      case 5425:
      case 5426:
      case 5427:
      case 5428:
      case 5429:
      case 5430:
      case 5431:
      case 5432:
      case 5433:
      case 5434:
      case 5435:
      case 5436:
      case 5437:
      case 5438:
      case 5439:
      case 5440:
      case 5441:
      case 5442:
      case 5443:
      case 5444:
      case 5445:
      case 5446:
      case 5447:
      case 5448:
      case 5449:
      case 5450:
      case 5451:
      case 5452:
      case 5453:
      case 5454:
      case 5455:
      case 5456:
      case 5457:
      case 5458:
      case 5459:
      case 5460:
      case 5461:
      case 5462:
      case 5463:
      case 5464:
      case 5465:
      case 5466:
      case 5467:
      case 5468:
      case 5469:
      case 5470:
      case 5471:
      case 5472:
      case 5473:
      case 5474:
      case 5475:
      case 5476:
      case 5477:
      case 5478:
      case 5479:
      case 5480:
      case 5493:
      case 5494:
      case 5495:
      case 5496:
      case 5497:
      case 5498:
      case 5499:
      case 5500:
      case 5501:
      case 5502:
      case 5503:
      case 5504:
      case 5505:
      case 5506:
      case 5507:
      case 5508:
      case 5509:
      case 5510:
      case 5511:
      case 5512:
      case 5513:
      case 5514:
      case 5515:
      case 5516:
      case 5517:
      case 5518:
      case 5519:
      case 5520:
      case 5521:
      case 5522:
      case 5523:
      case 5524:
      case 5525:
      case 5526:
      case 5527:
      case 5528:
      case 5529:
      case 5530:
      case 5531:
      case 5532:
      case 5533:
      case 5534:
      case 5535:
      case 5536:
      case 5537:
      case 5538:
      case 5539:
      case 5540:
      case 5541:
      case 5542:
      case 5543:
      case 5544:
      case 5545:
      case 5546:
      case 5547:
      case 5548:
      case 5549:
      case 5550:
      case 5551:
      case 5552:
      case 5553:
      case 5554:
      case 5555:
      case 5556:
      case 5557:
      case 5558:
      case 5559:
      case 5560:
      case 5563:
      case 5564:
      case 5565:
      case 5566:
      case 5567:
      case 5568:
      case 5569:
      case 5570:
      case 5571:
      case 5572:
      case 5573:
      case 5574:
      case 5575:
      case 5576:
      case 5577:
      case 5578:
      case 5579:
      case 5580:
      case 5585:
      case 5586:
      case 5587:
      case 5588:
      case 5589:
      case 5590:
      case 5603:
      case 5604:
      case 5605:
      case 5606:
      case 5607:
      case 5608:
      case 5609:
      case 5610:
      case 5611:
      case 5612:
      case 5613:
      case 5614:
      case 5615:
      case 5616:
      case 5617:
      case 5618:
      case 5619:
      case 5620:
      case 5621:
      case 5622:
      case 5623:
      case 5624:
      case 5625:
      case 5626:
      case 5627:
      case 5628:
      case 5629:
      case 5630:
      case 5631:
      case 5632:
      case 5633:
      case 5634:
      case 5635:
      case 5636:
      case 5637:
      case 5638:
      case 5639:
      case 5640:
      case 5641:
      case 5642:
      case 5643:
      case 5644:
      case 5645:
      case 5646:
      case 5647:
      case 5648:
      case 5649:
      case 5650:
      case 5651:
      case 5652:
      case 5653:
      case 5654:
      case 5655:
      case 5656:
      case 5657:
      case 5658:
      case 5659:
      case 5660:
      case 5661:
      case 5662:
      case 5663:
      case 5664:
      case 5665:
      case 5666:
      case 5667:
      case 5668:
      case 5669:
      case 5670:
      case 5671:
      case 5672:
      case 5673:
      case 5674:
      case 5675:
      case 5676:
      case 5677:
      case 5678:
      case 5679:
      case 5680:
      case 5681:
      case 5682:
      case 5683:
      case 5684:
      case 5685:
      case 5686:
      case 5687:
      case 5688:
      case 5689:
      case 5690:
      case 5691:
      case 5692:
      case 5693:
      case 5694:
      case 5695:
      case 5696:
      case 5697:
      case 5698:
      case 5699:
      case 5700:
      case 5701:
      case 5702:
      case 5703:
      case 5704:
      case 5705:
      case 5706:
      case 5707:
      case 5708:
      case 5709:
      case 5710:
      case 5711:
      case 5712:
      case 5713:
      case 5714:
      case 5715:
      case 5716:
      case 5717:
      case 5718:
      case 5719:
      case 5720:
      case 5721:
      case 5722:
      case 5723:
      case 5724:
      case 5725:
      case 5726:
      case 5727:
      case 5728:
      case 5729:
      case 5730:
      case 5731:
      case 5732:
      case 5733:
      case 5734:
      case 5735:
      case 5736:
      case 5737:
      case 5738:
      case 5739:
      case 5740:
      case 5741:
      case 5742:
      case 5743:
      case 5744:
      case 5745:
      case 5746:
      case 5747:
      case 5748:
      case 5749:
      case 5750:
      case 5751:
      case 5752:
      case 5753:
      case 5754:
      case 5755:
      case 5756:
      case 5757:
      case 5758:
      case 5759:
      case 5760:
      case 5761:
      case 5762:
      case 5763:
      case 5764:
      case 5765:
      case 5766:
      case 5767:
      case 5768:
      case 5769:
      case 5770:
      case 5771:
      case 5772:
      case 5773:
      case 5774:
      case 5775:
      case 5776:
      case 5777:
      case 5778:
      case 5779:
      case 5780:
      case 5781:
      case 5782:
      case 5783:
      case 5784:
      case 5785:
      case 5786:
      case 5787:
      case 5788:
      case 5789:
      case 5790:
      case 5791:
      case 5792:
      case 5793:
      case 5794:
      case 5795:
      case 5796:
      case 5797:
      case 5798:
      case 5799:
      case 5800:
      case 5801:
      case 5802:
      case 5803:
      case 5804:
      case 5805:
      case 5806:
      case 5807:
      case 5808:
      case 5809:
      case 5810:
      case 5811:
      case 5812:
      case 5813:
      case 5814:
      case 5815:
      case 5816:
      case 5817:
      case 5818:
      case 5819:
      case 5820:
      case 5821:
      case 5822:
      case 5823:
      case 5824:
      case 5825:
      case 5826:
      case 5827:
      case 5828:
      case 5829:
      case 5830:
      case 5831:
      case 5832:
      case 5837:
      case 5838:
      case 5839:
      case 5840:
      case 5841:
      case 5842:
      case 5843:
      case 5844:
      case 5845:
      case 5846:
      case 5847:
      case 5848:
      case 5849:
      case 5850:
      case 5851:
      case 5852:
      case 5857:
      case 5858:
      case 5859:
      case 5860:
      case 5861:
      case 5862:
      case 5863:
      case 5864:
      case 5865:
      case 5866:
      case 5867:
      case 5868:
      case 5869:
      case 5870:
      case 5871:
      case 5872:
      case 5873:
      case 5874:
      case 5875:
      case 5876:
      case 5881:
      case 5882:
      case 5883:
      case 5884:
      case 5885:
      case 5886:
      case 5887:
      case 5888:
      case 5889:
      case 5890:
      case 5909:
      case 5910:
      case 5911:
      case 5912:
      case 5913:
      case 5914:
      case 5915:
      case 5916:
      case 5917:
      case 5918:
      case 5919:
      case 5920:
      case 5921:
      case 5922:
      case 5923:
      case 5924:
      case 5925:
      case 5926:
      case 5927:
      case 5928:
      case 5929:
      case 5930:
      case 5931:
      case 5932:
      case 5933:
      case 5934:
      case 5935:
      case 5936:
      case 5937:
      case 5938:
      case 5939:
      case 5940:
      case 5941:
      case 5942:
      case 5943:
      case 5944:
      case 5945:
      case 5946:
      case 5947:
      case 5948:
      case 5949:
      case 5950:
      case 5951:
      case 5952:
      case 5953:
      case 5954:
      case 5955:
      case 5956:
      case 5957:
      case 5958:
      case 5959:
      case 5960:
      case 5961:
      case 5962:
      case 5963:
      case 5964:
      case 5965:
      case 5966:
      case 5967:
      case 5968:
      case 5969:
      case 5970:
      case 5971:
      case 5972:
      case 5973:
      case 5974:
      case 5975:
      case 5976:
      case 5977:
      case 5978:
      case 5979:
      case 5980:
      case 5981:
      case 5982:
      case 5983:
      case 5984:
      case 5985:
      case 5986:
      case 5987:
      case 5988:
      case 5989:
      case 5990:
      case 5991:
      case 5992:
      case 5993:
      case 5994:
      case 5995:
      case 5996:
      case 5997:
      case 5998:
      case 5999:
      case 6000:
      case 6001:
      case 6002:
      case 6003:
      case 6004:
      case 6005:
      case 6006:
      case 6007:
      case 6008:
      case 6009:
      case 6010:
      case 6011:
      case 6012:
      case 6013:
      case 6014:
      case 6015:
      case 6016:
      case 6017:
      case 6018:
      case 6019:
      case 6020:
      case 6021:
      case 6022:
      case 6023:
      case 6024:
      case 6025:
      case 6026:
      case 6027:
      case 6028:
      case 6029:
      case 6030:
      case 6031:
      case 6032:
      case 6033:
      case 6034:
      case 6035:
      case 6036:
      case 6068:
      case 6069:
      case 6070:
      case 6071:
      case 6072:
      case 6073:
      case 6075:
      case 6076:
      case 6077:
      case 6078:
      case 6079:
      case 6080:
      case 6081:
      case 6082:
      case 6083:
      case 6084:
      case 6085:
      case 6086:
      case 6087:
      case 6088:
      case 6089:
      case 6090:
      case 6093:
      case 6095:
      case 6096:
      case 6097:
      case 6098:
      case 6099:
      case 6100:
      case 6101:
      case 6107:
      case 6110:
      case 6111:
      case 6112:
      case 6113:
      case 6114:
      case 6115:
      case 6116:
      case 6117:
      case 6118:
      case 6119:
      case 6120:
      case 6121:
      case 6122:
      case 6123:
      case 6124:
      case 6125:
      case 6126:
      case 6127:
      case 6128:
      case 6129:
      case 6130:
      case 6131:
      case 6132:
      case 6133:
      case 6135:
      case 6136:
      case 6137:
      case 6138:
      case 6143:
      case 6144:
      case 6145:
      case 6146:
      case 6151:
      case 6152:
      case 6153:
      case 6154:
      case 6159:
      case 6160:
      case 6162:
      case 6164:
      case 6165:
      case 6166:
      case 6167:
      case 6172:
      case 6173:
      case 6174:
      case 6175:
      case 6176:
      case 6178:
      case 6180:
      case 6181:
      case 6182:
      case 6183:
      case 6188:
      case 6189:
      case 6190:
      case 6191:
      case 6192:
      case 6193:
      case 6194:
      case 6195:
      case 6196:
      case 6202:
      case 6203:
      case 6204:
      case 6205:
      case 6206:
      case 6207:
      case 6208:
      case 6209:
      case 6218:
      case 6219:
      case 6220:
      case 6221:
      case 6222:
      case 6223:
      case 6224:
      case 6225:
      case 6246:
      case 6247:
      case 6248:
      case 6249:
      case 6250:
      case 6251:
      case 6252:
      case 6253:
      case 6255:
      case 6256:
      case 6257:
      case 6258:
      case 6259:
      case 6260:
      case 6261:
      case 6262:
      case 6263:
      case 6264:
      case 6265:
      case 6266:
      case 6267:
      case 6268:
      case 6269:
      case 6270:
      case 6271:
      case 6272:
      case 6273:
      case 6274:
      case 6275:
      case 6276:
      case 6281:
      case 6282:
      case 6283:
      case 6284:
      case 6289:
      case 6290:
      case 6291:
      case 6292:
      case 6293:
      case 6294:
      case 6295:
      case 6296:
      case 6297:
      case 6304:
      case 6305:
      case 6306:
      case 6307:
      case 6308:
      case 6309:
      case 6310:
      case 6311:
      case 6312:
      case 6313:
      case 6314:
      case 6315:
      case 6316:
      case 6317:
      case 6318:
      case 6319:
      case 6320:
      case 6321:
      case 6322:
      case 6323:
      case 6324:
      case 6325:
      case 6326:
      case 6327:
      case 6328:
      case 6329:
      case 6330:
      case 6331:
      case 6332:
      case 6333:
      case 6334:
      case 6335:
      case 6336:
      case 6337:
      case 6338:
      case 6339:
      case 6340:
      case 6341:
      case 6342:
      case 6343:
      case 6344:
      case 6345:
      case 6346:
      case 6347:
      case 6348:
      case 6349:
      case 6350:
      case 6351:
      case 6352:
      case 6353:
      case 6354:
      case 6355:
      case 6356:
      case 6357:
      case 6358:
      case 6359:
      case 6360:
      case 6361:
      case 6362:
      case 6363:
      case 6364:
      case 6365:
      case 6366:
      case 6367:
      case 6368:
      case 6369:
      case 6370:
      case 6371:
      case 6372:
      case 6373:
      case 6374:
      case 6375:
      case 6376:
      case 6377:
      case 6378:
      case 6379:
      case 6380:
      case 6381:
      case 6382:
      case 6383:
      case 6384:
      case 6385:
      case 6386:
      case 6387:
      case 6388:
      case 6389:
      case 6390:
      case 6391:
      case 6392:
      case 6393:
      case 6394:
      case 6395:
      case 6396:
      case 6397:
      case 6398:
      case 6399:
      case 6400:
      case 6401:
      case 6402:
      case 6403:
      case 6404:
      case 6405:
      case 6406:
      case 6407:
      case 6408:
      case 6409:
      case 6410:
      case 6411:
      case 6412:
      case 6413:
      case 6414:
      case 6415:
      case 6416:
      case 6417:
      case 6418:
      case 6419:
      case 6420:
      case 6421:
      case 6422:
      case 6423:
      case 6424:
      case 6425:
      case 6426:
      case 6427:
      case 6428:
      case 6429:
      case 6430:
      case 6431:
      case 6432:
      case 6433:
      case 6434:
      case 6435:
      case 6436:
      case 6437:
      case 6438:
      case 6439:
      case 6440:
      case 6441:
      case 6459:
      case 6461:
      case 6462:
      case 6463:
      case 6464:
      case 6465:
      case 6466:
      case 6467:
      case 6468:
      case 6469:
      case 6470:
      case 6475:
      case 6476:
      case 6477:
      case 6478:
      case 6479:
      case 6480:
      case 6481:
      case 6482:
      case 6483:
      case 6484:
      case 6485:
      case 6486:
      case 6495:
      case 6496:
      case 6497:
      case 6498:
      case 6499:
      case 6500:
      case 6501:
      case 6502:
      case 6503:
      case 6504:
      case 6505:
      case 6506:
      case 6515:
      case 6516:
      case 6517:
      case 6518:
      case 6519:
      case 6520:
      case 6521:
      case 6522:
      case 6523:
      case 6524:
      case 6525:
      case 6526:
      case 6527:
      case 6528:
      case 6529:
      case 6530:
      case 6531:
      case 6532:
      case 6533:
      case 6534:
      case 6537:
      case 6538:
      case 6548:
      case 6549:
      case 6550:
      case 6552:
      case 6553:
      case 6554:
      case 6555:
      case 6556:
      case 6557:
      case 6558:
      case 6559:
      case 6560:
      case 6561:
      case 6562:
      case 6563:
      case 6564:
      case 6565:
      case 6566:
      case 6568:
      case 6570:
      case 6571:
      case 6572:
      case 6573:
      case 6574:
      case 6575:
      case 6576:
      case 6577:
      case 6578:
      case 6579:
      case 6580:
      case 6581:
      case 6582:
      case 6585:
      case 6586:
      case 6587:
      case 6588:
      case 6589:
      case 6590:
      case 6591:
      case 6592:
      case 6593:
      case 6594:
      case 6598:
      case 6599:
      case 6603:
      case 6605:
      case 6606:
      case 6618:
      case 6623:
      case 6624:
      case 6625:
      case 6626:
      case 6627:
      case 6628:
      case 6629:
      case 6630:
      case 6631:
      case 6632:
      case 6633:
      case 6638:
      case 6639:
      case 6640:
      case 6641:
      case 6646:
      case 6647:
      case 6648:
      case 6649:
      case 6654:
      case 6655:
      case 6656:
      case 6657:
      case 6662:
      case 6663:
      case 6664:
      case 6665:
      case 6670:
      case 6671:
      case 6672:
      case 6673:
      case 6678:
      case 6679:
      case 6680:
      case 6681:
      case 6692:
      case 6693:
      case 6695:
      case 6696:
      case 6697:
      case 6698:
      case 6699:
      case 6700:
      case 6701:
      case 6702:
      case 6703:
      case 6704:
      case 6705:
      case 6706:
      case 6707:
      case 6708:
      case 6709:
      case 6710:
      case 6711:
      case 6712:
      case 6713:
      case 6714:
      case 6716:
      case 6718:
      case 6719:
      case 6720:
      case 6721:
      case 6722:
      case 6723:
      case 6724:
      case 6729:
      case 6730:
      case 6731:
      case 6732:
      case 6734:
      case 6851:
      case 6852:
      case 6853:
      case 6854:
      case 6873:
      case 6893:
      case 6894:
      case 6895:
      case 6896:
      case 6897:
      case 6898:
      case 6899:
      case 6900:
      case 7011:
      case 7012:
      case 7013:
      case 7060:
      case 7061:
      case 7062:
      case 7063:
      case 7064:
      case 7065:
      case 7066:
      case 7067:
      case 7068:
      case 7069:
      case 7070:
      case 7071:
      case 7072:
      case 7073:
      case 7074:
      case 7075:
      case 7076:
      case 7077:
      case 7078:
      case 7079:
      case 7080:
      case 7081:
      case 7082:
      case 7083:
      case 7084:
      case 7085:
      case 7086:
      case 7087:
      case 7088:
      case 7089:
      case 7090:
      case 7091:
      case 7092:
      case 7093:
      case 7094:
      case 7095:
      case 7096:
      case 7097:
      case 7098:
      case 7099:
      case 7100:
      case 7101:
      case 7102:
      case 7103:
      case 7104:
      case 7105:
      case 7106:
      case 7107:
      case 7108:
      case 7109:
      case 7110:
      case 7111:
      case 7112:
      case 7113:
      case 7114:
      case 7115:
      case 7116:
      case 7117:
      case 7118:
      case 7119:
      case 7120:
      case 7121:
      case 7122:
      case 7123:
      case 7124:
      case 7125:
      case 7126:
      case 7127:
      case 7128:
      case 7129:
      case 7130:
      case 7131:
      case 7132:
      case 7133:
      case 7134:
      case 7135:
      case 7136:
      case 7137:
      case 7138:
      case 7139:
      case 7140:
      case 7141:
      case 7260:
      case 7489:
      case 7490:
      case 7491:
      case 7492:
      case 7493:
      case 7494:
      case 7850:
      case 7851:
      case 7879:
      case 7880:
      case 7881:
      case 7882:
      case 7883:
      case 7884:
      case 7885:
      case 7886:
      case 7955:
      case 7956:
      case 7957:
      case 7958:
      case 7959:
      case 7960:
      case 7961:
      case 7962:
      case 7963:
      case 7964:
      case 7965:
      case 7966:
      case 7967:
      case 7968:
      case 7969:
      case 7970:
      case 7971:
      case 7972:
      case 7973:
      case 7974:
      case 7975:
      case 7976:
      case 7977:
      case 7978:
      case 7979:
      case 7980:
      case 7981:
      case 7982:
      case 7983:
      case 7984:
      case 7985:
      case 7986:
      case 7987:
      case 7988:
      case 7989:
      case 7990:
      case 7991:
      case 7992:
      case 7993:
      case 7994:
      case 7995:
      case 7996:
      case 7997:
      case 7998:
      case 7999:
      case 8000:
      case 8001:
      case 8002:
      case 8003:
      case 8004:
      case 8005:
      case 8006:
      case 8031:
      case 8032:
      case 8033:
      case 8034:
      case 8083:
      case 8084:
      case 8085:
      case 8086:
      case 8087:
      case 8088:
      case 8089:
      case 8090:
      case 8091:
      case 8092:
      case 8093:
      case 8094:
      case 8095:
      case 8096:
      case 8097:
      case 8098:
      case 8099:
      case 8100:
      case 8101:
      case 8102:
      case 8103:
      case 8104:
      case 8105:
      case 8106:
      case 8107:
      case 8108:
      case 8109:
      case 8110:
      case 8111:
      case 8112:
      case 8113:
      case 8114:
      case 8115:
      case 8116:
      case 8117:
      case 8118:
      case 8119:
      case 8120:
      case 8121:
      case 8122:
      case 8123:
      case 8124:
      case 8125:
      case 8126:
      case 8127:
      case 8128:
      case 8129:
      case 8130:
      case 8131:
      case 8132:
      case 8133:
      case 8134:
      case 8191:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8203:
      case 8204:
      case 8205:
      case 8206:
      case 8207:
      case 8208:
      case 8209:
      case 8210:
      case 8211:
      case 8212:
      case 8213:
      case 8214:
      case 8215:
      case 8216:
      case 8217:
      case 8218:
      case 8219:
      case 8220:
      case 8221:
      case 8222:
      case 8223:
      case 8224:
      case 8225:
      case 8226:
      case 8227:
      case 8228:
      case 8229:
      case 8230:
      case 8231:
      case 8232:
      case 8233:
      case 8234:
      case 8235:
      case 8236:
      case 8237:
      case 8238:
      case 8239:
      case 8240:
      case 8241:
      case 8242:
      case 8263:
      case 8264:
      case 8281:
      case 8282:
      case 8283:
      case 8284:
      case 8301:
      case 8302:
      case 8303:
      case 8304:
      case 8305:
      case 8306:
      case 8307:
      case 8308:
      case 8309:
      case 8310:
      case 8311:
      case 8312:
      case 8313:
      case 8314:
      case 8315:
      case 8316:
      case 8317:
      case 8318:
      case 8319:
      case 8320:
      case 8326:
      case 8327:
      case 8328:
      case 8329:
      case 8330:
      case 8331:
      case 8332:
      case 8333:
      case 8334:
      case 8335:
      case 8336:
      case 8337:
      case 8349:
      case 8350:
      case 8355:
      case 8356:
      case 8357:
      case 8358:
      case 8359:
      case 8365:
      case 8366:
      case 8367:
      case 8368:
      case 8369:
      case 8370:
      case 8371:
      case 8372:
      case 8373:
      case 8374:
      case 8375:
      case 8376:
      case 8377:
      case 8378:
      case 8379:
      case 8380:
      case 8381:
      case 8382:
      case 8383:
      case 8384:
      case 8385:
      case 8387:
      case 8389:
      case 8390:
      case 8391:
      case 8392:
      case 8393:
      case 8394:
      case 8395:
      case 8396:
      case 8397:
      case 8398:
      case 8399:
      case 8400:
      case 8401:
      case 8402:
      case 8403:
      case 8404:
      case 8405:
      case 8406:
      case 8407:
      case 8408:
      case 8409:
      case 8410:
      case 8411:
      case 8412:
      case 8413:
      case 8414:
      case 8415:
      case 8416:
      case 8417:
      case 8418:
      case 8419:
      case 8420:
      case 8421:
      case 8422:
      case 8423:
      case 8424:
      case 8425:
      case 8426:
      case 8427:
      case 8428:
      case 8429:
      case 8430:
      case 8431:
      case 8432:
      case 8433:
      case 8434:
      case 8435:
      case 8436:
      case 8437:
      case 8438:
      case 8439:
      case 8440:
      case 8441:
      case 8442:
      case 8449:
      case 8450:
      case 8451:
      case 8452:
      case 8453:
      case 8454:
      case 8455:
      case 8456:
      case 8457:
      case 8458:
      case 8459:
      case 8460:
      case 8461:
      case 8462:
      case 8463:
      case 8464:
      case 8465:
      case 8466:
      case 8467:
      case 8468:
      case 8469:
      case 8470:
      case 8471:
      case 8472:
      case 8473:
      case 8474:
      case 8475:
      case 8476:
      case 8477:
      case 8478:
      case 8479:
      case 8480:
      case 8481:
      case 8482:
      case 8484:
      case 8485:
      case 8486:
      case 8487:
      case 8489:
      case 8490:
      case 8491:
      case 8492:
      case 8493:
      case 8494:
      case 8496:
      case 8497:
      case 8498:
      case 8499:
      case 8500:
      case 8501:
      case 8502:
      case 8503:
      case 8504:
      case 8505:
      case 8506:
      case 8507:
      case 8508:
      case 8509:
      case 8510:
      case 8513:
      case 8514:
      case 8515:
      case 8516:
      case 8517:
      case 8518:
      case 8519:
      case 8520:
      case 8521:
      case 8522:
      case 8523:
      case 8524:
      case 8525:
      case 8527:
      case 8528:
      case 8529:
      case 8531:
      case 8532:
      case 8533:
      case 8534:
      case 8535:
      case 8536:
      case 8537:
      case 8538:
      case 8539:
      case 8540:
      case 8541:
      case 8542:
      case 8543:
      case 8544:
      case 8545:
      case 8546:
      case 8547:
      case 8548:
      case 8549:
      case 8550:
      case 8551:
      case 8552:
      case 8553:
      case 8554:
      case 8555:
      case 8565:
      case 8566:
      case 8567:
      case 8568:
      case 8569:
      case 8570:
      case 8571:
      case 8572:
      case 8573:
      case 8574:
      case 8575:
      case 8576:
      case 8577:
      case 8578:
      case 8579:
      case 8580:
      case 8581:
      case 8582:
      case 8583:
      case 8584:
      case 8585:
      case 8586:
      case 8588:
      case 8589:
      case 8590:
      case 8591:
      case 8592:
      case 8593:
      case 8594:
      case 8595:
      case 8596:
      case 8598:
      case 8599:
      case 8600:
      case 8601:
      case 8602:
      case 8603:
      case 8604:
      case 8605:
      case 8606:
      case 8607:
      case 8608:
      case 8609:
      case 8610:
      case 8611:
      case 8612:
      case 8613:
      case 8614:
      case 8615:
      case 8616:
      case 8617:
      case 8618:
      case 8619:
      case 8625:
      case 8626:
      case 8627:
      case 8628:
      case 8629:
      case 8630:
      case 8631:
      case 8632:
      case 8646:
      case 8648:
      case 8649:
      case 8650:
      case 8653:
      case 8654:
      case 8655:
      case 8656:
      case 8657:
      case 8658:
      case 8659:
      case 8660:
      case 8680:
      case 8681:
      case 8682:
      case 8683:
      case 8684:
      case 8686:
      case 8687:
      case 8688:
      case 8689:
      case 8690:
      case 8691:
      case 8692:
      case 8693:
      case 8694:
      case 8695:
      case 8696:
      case 8697:
      case 8698:
      case 8699:
      case 8700:
      case 8701:
      case 8702:
      case 8703:
      case 8704:
      case 8705:
      case 8706:
      case 8707:
      case 8713:
      case 8722:
      case 8723:
      case 8724:
      case 8725:
      case 8726:
      case 8727:
      case 8728:
      case 8730:
      case 8731:
      case 8732:
      case 8733:
      case 8734:
      case 8735:
      case 8736:
      case 8737:
      case 8738:
      case 8739:
      case 8740:
      case 8741:
      case 8742:
      case 8743:
      case 8744:
      case 8745:
      case 8746:
      case 8747:
      case 8748:
      case 8749:
      case 8750:
      case 8751:
      case 8752:
      case 8753:
      case 8754:
      case 8755:
      case 8756:
      case 8757:
      case 8758:
      case 8759:
      case 8760:
      case 8761:
      case 8762:
      case 8763:
      case 8764:
      case 8765:
      case 8766:
      case 8767:
      case 8768:
      case 8769:
      case 8770:
      case 8771:
      case 8772:
      case 8773:
      case 8774:
      case 8775:
      case 8776:
      case 8777:
      case 8778:
      case 8779:
      case 8780:
      case 8781:
      case 8782:
      case 8783:
      case 8784:
      case 8785:
      case 8786:
      case 8787:
      case 8788:
      case 8789:
      case 8790:
      case 8791:
      case 8792:
      case 8793:
      case 8794:
      case 8795:
      case 8796:
      case 8803:
      case 8804:
      case 8805:
      case 8806:
      case 8807:
      case 8808:
      case 8809:
      case 8810:
      case 8811:
      case 8813:
      case 8814:
      case 8819:
      case 8822:
      case 8831:
      case 8850:
      case 8855:
      case 8856:
      case 8857:
      case 8872:
      case 8873:
      case 8874:
      case 8875:
      case 8876:
      case 8877:
      case 8878:
      case 8879:
      case 8880:
      case 8881:
      case 8882:
      case 8883:
      case 8884:
      case 8885:
      case 8886:
      case 8887:
      case 8888:
      case 8889:
      case 8890:
      case 8891:
      case 8892:
      case 8893:
      case 8894:
      case 8895:
      case 8896:
      case 8897:
      case 8898:
      case 8899:
      case 8900:
      case 8901:
      case 8902:
      case 8903:
      case 8904:
      case 8905:
      case 8906:
      case 8907:
      case 8908:
      case 8909:
      case 8910:
      case 8911:
      case 8912:
      case 8913:
      case 8914:
      case 8915:
      case 8916:
      case 8917:
      case 8918:
      case 8921:
      case 8922:
      case 8923:
      case 8924:
      case 8925:
      case 8926:
      case 8927:
      case 8928:
      case 8930:
      case 8931:
      case 8932:
      case 8933:
      case 8934:
      case 8935:
      case 8936:
      case 9056:
      case 9057:
      case 9059:
      case 9065:
      case 9066:
      case 9067:
      case 9068:
      case 9070:
      case 9072:
      case 9074:
      case 9076:
      case 9078:
      case 9080:
      case 9082:
      case 9084:
      case 9086:
      case 9088:
      case 9090:
      case 9091:
      case 9096:
      case 9098:
      case 9099:
      case 9105:
      case 9107:
      case 9108:
      case 9109:
      case 9110:
      case 9112:
      case 9114:
      case 9116:
      case 9118:
      case 9120:
      case 9122:
      case 9124:
      case 9134:
      case 9136:
      case 9138:
      case 9139:
      case 9140:
      case 9141:
      case 9142:
      case 9143:
      case 9144:
      case 9145:
      case 9146:
      case 9148:
      case 9150:
      case 9152:
      case 9154:
      case 9156:
      case 9158:
      case 9160:
      case 9162:
      case 9164:
      case 9166:
      case 9168:
      case 9170:
      case 9172:
      case 9174:
      case 9176:
      case 9178:
      case 9180:
      case 9186:
      case 9192:
      case 9193:
      case 9194:
      case 9195:
      case 9196:
      case 9198:
      case 9200:
      case 9202:
      case 9287:
      case 9288:
      case 9291:
      case 9292:
      case 9293:
      case 9295:
      case 9297:
      case 9298:
      case 9299:
      case 9300:
      case 9301:
      case 9302:
      case 9303:
      case 9304:
      case 9305:
      case 9306:
      case 9307:
      case 9308:
      case 9309:
      case 9310:
      case 9311:
      case 9313:
      case 9315:
      case 9316:
      case 9317:
      case 9318:
      case 9319:
      case 9320:
      case 9321:
      case 9322:
      case 9323:
      case 9324:
      case 9325:
      case 9326:
      case 9327:
      case 9328:
      case 9329:
      case 9330:
      case 9331:
      case 9332:
      case 9333:
      case 9334:
      case 9335:
      case 9336:
      case 9337:
      case 9338:
      case 9339:
      case 9340:
      case 9341:
      case 9342:
      case 9343:
      case 9344:
      case 9345:
      case 9346:
      case 9347:
      case 9348:
      case 9350:
      case 9352:
      case 9354:
      case 9356:
      case 9357:
      case 9358:
      case 9359:
      case 9360:
      case 9361:
      case 9370:
      case 9372:
      case 9374:
      case 9376:
      case 9377:
      case 9378:
      case 9379:
      case 9380:
      case 9381:
      case 9382:
      case 9383:
      case 9384:
      case 9385:
      case 9386:
      case 9387:
      case 9388:
      case 9389:
      case 9390:
      case 9391:
      case 9392:
      case 9394:
      case 9396:
      case 9398:
      case 9400:
      case 9402:
      case 9408:
      case 9415:
      case 9417:
      case 9419:
      case 9421:
      case 9423:
      case 9425:
      case 9446:
      case 9448:
      case 9488:
      case 9506:
      case 9508:
      case 9510:
      case 9512:
      case 9522:
      case 9524:
      case 9526:
      case 9528:
      case 9529:
      case 9530:
      case 9531:
      case 9532:
      case 9534:
      case 9536:
      case 9538:
      case 9540:
      case 9542:
      case 9552:
      case 9561:
      case 9563:
      case 9564:
      case 9565:
      case 9566:
      case 9567:
      case 9568:
      case 9569:
      case 9570:
      case 9571:
      case 9572:
      case 9573:
      case 9574:
      case 9575:
      case 9576:
      case 9577:
      case 9578:
      case 9579:
      case 9580:
      case 9581:
      case 9582:
      case 9583:
      case 9585:
      case 9586:
      case 9587:
      case 9588:
      case 9589:
      case 9590:
      case 9591:
      case 9592:
      case 9593:
      case 9602:
      case 9603:
      case 9604:
      case 9605:
      case 9606:
      case 9607:
      case 9608:
      case 9609:
      case 9622:
      case 9623:
      case 9624:
      case 9625:
      case 9626:
      case 9627:
      case 9628:
      case 9629:
      case 9630:
      case 9631:
      case 9632:
      case 9633:
      case 9634:
      case 9635:
      case 9636:
      case 9637:
      case 9638:
      case 9639:
      case 9640:
      case 9641:
      case 9642:
      case 9643:
      case 9644:
      case 9645:
      case 9646:
      case 9647:
      case 9648:
      case 9649:
      case 9650:
      case 9651:
      case 9660:
      case 9661:
      case 9662:
      case 9663:
      case 9664:
      case 9665:
      case 9666:
      case 9667:
      case 9668:
      case 9669:
      case 9670:
      case 9671:
      case 9672:
      case 9673:
      case 9677:
      case 9678:
      case 9679:
      case 9680:
      case 9681:
      case 9682:
      case 9683:
      case 9684:
      case 9685:
      case 9686:
      case 9687:
      case 9688:
      case 9689:
      case 9690:
      case 9691:
      case 9692:
      case 9693:
      case 9694:
      case 9695:
      case 9696:
      case 9697:
      case 9698:
      case 9699:
      case 9700:
      case 9701:
      case 9702:
      case 9703:
      case 9704:
      case 9705:
      case 9706:
      case 9707:
      case 9708:
      case 9709:
      case 9710:
      case 9711:
      case 9712:
      case 9715:
      case 9716:
      case 9717:
      case 9718:
      case 9719:
      case 9720:
      case 9721:
      case 9722:
      case 9723:
      case 9724:
      case 9725:
      case 9726:
      case 9727:
      case 9728:
      case 9729:
      case 9730:
      case 9731:
      case 9732:
      case 9733:
      case 9734:
      case 9735:
      case 9736:
      case 9739:
      case 9740:
      case 9741:
      case 9743:
      case 9744:
      case 9759:
      case 9760:
      case 9761:
      case 9762:
      case 9763:
      case 9764:
      case 9765:
      case 9766:
      case 9767:
      case 9768:
      case 9769:
      case 9770:
      case 9771:
      case 9772:
      case 9773:
      case 9774:
      case 9775:
      case 9776:
      case 9777:
      case 9778:
      case 9779:
      case 9780:
      case 9781:
      case 9782:
      case 9783:
      case 9784:
      case 9785:
      case 9786:
      case 9787:
      case 9788:
      case 9789:
      case 9794:
      case 9795:
      case 9796:
      case 9797:
      case 9798:
      case 9799:
      case 9800:
      case 9801:
      case 9802:
      case 9803:
      case 9804:
      case 9805:
      case 9806:
      case 9807:
      case 9808:
      case 9809:
      case 9812:
      case 9815:
      case 9816:
      case 9817:
      case 9818:
      case 9819:
      case 9820:
      case 9821:
      case 9822:
      case 9823:
      case 9824:
      case 9825:
      case 9826:
      case 9827:
      case 9828:
      case 9829:
      case 9830:
      case 9831:
      case 9832:
      case 9833:
      case 9834:
      case 9835:
      case 9836:
      case 9837:
      case 9838:
      case 9839:
      case 9840:
      case 9841:
      case 9842:
      case 9843:
      case 9844:
      case 9845:
      case 9846:
      case 9847:
      case 9848:
      case 9849:
      case 9850:
      case 9851:
      case 9852:
      case 9853:
      case 9854:
      case 9855:
      case 9856:
      case 9857:
      case 9858:
      case 9859:
      case 9860:
      case 9861:
      case 9862:
      case 9863:
      case 9864:
      case 9865:
      case 9866:
      case 9867:
      case 9868:
      case 9869:
      case 9870:
      case 9871:
      case 9872:
      case 9873:
      case 9874:
      case 9875:
      case 9876:
      case 9877:
      case 9878:
      case 9879:
      case 9880:
      case 9881:
      case 9882:
      case 9883:
      case 9884:
      case 9885:
      case 9886:
      case 9887:
      case 9888:
      case 9889:
      case 9890:
      case 9891:
      case 9892:
      case 9893:
      case 9894:
      case 9895:
      case 9896:
      case 9897:
      case 9898:
      case 9899:
      case 9900:
      case 9901:
      case 9902:
      case 9903:
      case 9904:
      case 9905:
      case 9906:
      case 9907:
      case 9908:
      case 9909:
      case 9910:
      case 9911:
      case 9912:
      case 9913:
      case 9914:
      case 9915:
      case 9916:
      case 9917:
      case 9918:
      case 9919:
      case 9920:
      case 9921:
      case 9922:
      case 9923:
      case 9924:
      case 9925:
      case 9926:
      case 9927:
      case 9928:
      case 9929:
      case 9930:
      case 9931:
      case 9932:
      case 9933:
      case 9934:
      case 9935:
      case 9936:
      case 9937:
      case 9938:
      case 9939:
      case 9940:
      case 9941:
      case 9942:
      case 9943:
      case 9944:
      case 9945:
      case 9946:
      case 9947:
      case 9948:
      case 9949:
      case 9950:
      case 9951:
      case 9952:
      case 9953:
      case 9954:
      case 9955:
      case 9956:
      case 9957:
      case 9958:
      case 9959:
      case 9960:
      case 9961:
      case 9962:
      case 9963:
      case 9964:
      case 9965:
      case 9966:
      case 9967:
      case 9968:
      case 9969:
      case 9970:
      case 9971:
      case 9972:
      case 9973:
      case 9974:
      case 9975:
      case 9976:
      case 9977:
      case 9978:
      case 9979:
      case 9980:
      case 9981:
      case 9982:
      case 9983:
      case 9984:
      case 9985:
      case 9986:
      case 9987:
      case 9988:
      case 9989:
      case 9990:
      case 9991:
      case 9992:
      case 9993:
      case 9994:
      case 9995:
      case 9996:
      case 9997:
      case 9998:
      case 9999:
      case 10000:
      case 10001:
      case 10002:
      case 10003:
      case 10004:
      case 10005:
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
      case 10012:
      case 10013:
      case 10014:
      case 10015:
      case 10016:
      case 10017:
      case 10018:
      case 10019:
      case 10020:
      case 10021:
      case 10022:
      case 10023:
      case 10024:
      case 10025:
      case 10026:
      case 10027:
      case 10028:
      case 10029:
      case 10030:
      case 10031:
      case 10032:
      case 10033:
      case 10034:
      case 10035:
      case 10036:
      case 10037:
      case 10038:
      case 10039:
      case 10040:
      case 10041:
      case 10042:
      case 10043:
      case 10044:
      case 10045:
      case 10046:
      case 10047:
      case 10048:
      case 10049:
      case 10050:
      case 10051:
      case 10052:
      case 10053:
      case 10054:
      case 10055:
      case 10056:
      case 10057:
      case 10058:
      case 10059:
      case 10060:
      case 10061:
      case 10062:
      case 10063:
      case 10064:
      case 10065:
      case 10066:
      case 10067:
      case 10068:
      case 10069:
      case 10070:
      case 10071:
      case 10072:
      case 10073:
      case 10074:
      case 10075:
      case 10076:
      case 10077:
      case 10078:
      case 10079:
      case 10080:
      case 10081:
      case 10082:
      case 10083:
      case 10084:
      case 10085:
      case 10086:
      case 10087:
      case 10088:
      case 10089:
      case 10090:
      case 10091:
      case 10092:
      case 10093:
      case 10094:
      case 10095:
      case 10096:
      case 10097:
      case 10098:
      case 10099:
      case 10100:
      case 10101:
      case 10102:
      case 10103:
      case 10104:
      case 10105:
      case 10106:
      case 10107:
      case 10108:
      case 10109:
      case 10110:
      case 10111:
      case 10112:
      case 10113:
      case 10114:
      case 10115:
      case 10116:
      case 10117:
      case 10118:
      case 10119:
      case 10120:
      case 10121:
      case 10122:
      case 10123:
      case 10124:
      case 10125:
      case 10126:
      case 10127:
      case 10128:
      case 10129:
      case 10130:
      case 10131:
      case 10132:
      case 10133:
      case 10134:
      case 10135:
      case 10136:
      case 10137:
      case 10138:
      case 10139:
      case 10140:
      case 10141:
      case 10142:
      case 10143:
      case 10144:
      case 10145:
      case 10146:
      case 10147:
      case 10148:
      case 10149:
      case 10150:
      case 10151:
      case 10152:
      case 10153:
      case 10154:
      case 10155:
      case 10156:
      case 10157:
      case 10158:
      case 10159:
      case 10160:
      case 10161:
      case 10162:
      case 10163:
      case 10164:
      case 10165:
      case 10166:
      case 10167:
      case 10168:
      case 10169:
      case 10170:
      case 10171:
      case 10172:
      case 10173:
      case 10174:
      case 10175:
      case 10176:
      case 10177:
      case 10178:
      case 10179:
      case 10180:
      case 10181:
      case 10182:
      case 10183:
      case 10184:
      case 10185:
      case 10186:
      case 10187:
      case 10188:
      case 10189:
      case 10190:
      case 10191:
      case 10192:
      case 10193:
      case 10194:
      case 10195:
      case 10196:
      case 10197:
      case 10198:
      case 10199:
      case 10200:
      case 10201:
      case 10202:
      case 10204:
      case 10205:
      case 10207:
      case 10209:
      case 10210:
      case 10211:
      case 10212:
      case 10213:
      case 10214:
      case 10215:
      case 10216:
      case 10217:
      case 10218:
      case 10219:
      case 10220:
      case 10221:
      case 10222:
      case 10223:
      case 10224:
      case 10225:
      case 10226:
      case 10227:
      case 10228:
      case 10229:
      case 10230:
      case 10231:
      case 10232:
      case 10233:
      case 10234:
      case 10235:
      case 10236:
      case 10237:
      case 10238:
      case 10239:
      case 10240:
      case 10241:
      case 10242:
      case 10243:
      case 10244:
      case 10245:
      case 10246:
      case 10247:
      case 10248:
      case 10249:
      case 10250:
      case 10251:
      case 10252:
      case 10253:
      case 10254:
      case 10255:
      case 10256:
      case 10257:
      case 10258:
      case 10259:
      case 10260:
      case 10261:
      case 10262:
      case 10263:
      case 10264:
      case 10265:
      case 10266:
      case 10267:
      case 10268:
      case 10269:
      case 10270:
      case 10271:
      case 10272:
      case 10273:
      case 10274:
      case 10275:
      case 10276:
      case 10277:
      case 10278:
      case 10279:
      case 10280:
      case 10281:
      case 10282:
      case 10283:
      case 10284:
      case 10285:
      case 10286:
      case 10287:
      case 10288:
      case 10289:
      case 10290:
      case 10291:
      case 10292:
      case 10293:
      case 10294:
      case 10295:
      case 10296:
      case 10297:
      case 10298:
      case 10299:
      case 10300:
      case 10301:
      case 10302:
      case 10303:
      case 10304:
      case 10305:
      case 10306:
      case 10307:
      case 10308:
      case 10309:
      case 10310:
      case 10311:
      case 10312:
      case 10313:
      case 10314:
      case 10315:
      case 10316:
      case 10317:
      case 10318:
      case 10319:
      case 10320:
      case 10321:
      case 10322:
      case 10323:
      case 10324:
      case 10325:
      case 10326:
      case 10327:
      case 10328:
      case 10329:
      case 10330:
      case 10331:
      case 10332:
      case 10333:
      case 10334:
      case 10335:
      case 10336:
      case 10337:
      case 10338:
      case 10339:
      case 10340:
      case 10341:
      case 10342:
      case 10343:
      case 10344:
      case 10345:
      case 10346:
      case 10347:
      case 10348:
      case 10349:
      case 10350:
      case 10351:
      case 10352:
      case 10353:
      case 10354:
      case 10355:
      case 10356:
      case 10357:
      case 10358:
      case 10359:
      case 10360:
      case 10361:
      case 10362:
      case 10363:
      case 10364:
      case 10365:
      case 10366:
      case 10367:
      case 10368:
      case 10369:
      case 10370:
      case 10371:
      case 10372:
      case 10373:
      case 10374:
      case 10375:
      case 10376:
      case 10377:
      case 10378:
      case 10379:
      case 10380:
      case 10381:
      case 10382:
      case 10383:
      case 10384:
      case 10385:
      case 10386:
      case 10387:
      case 10388:
      case 10389:
      case 10390:
      case 10391:
      case 10392:
      case 10393:
      case 10394:
      case 10395:
      case 10396:
      case 10397:
      case 10398:
      case 10399:
      case 10400:
      case 10401:
      case 10402:
      case 10403:
      case 10404:
      case 10405:
      case 10406:
      case 10407:
      case 10408:
      case 10409:
      case 10410:
      case 10411:
      case 10412:
      case 10413:
      case 10414:
      case 10415:
      case 10416:
      case 10417:
      case 10418:
      case 10419:
      case 10420:
      case 10421:
      case 10422:
      case 10423:
      case 10424:
      case 10425:
      case 10426:
      case 10427:
      case 10428:
      case 10429:
      case 10430:
      case 10431:
      case 10432:
      case 10433:
      case 10434:
      case 10435:
      case 10436:
      case 10437:
      case 10438:
      case 10439:
      case 10440:
      case 10441:
      case 10442:
      case 10443:
      case 10444:
      case 10445:
      case 10446:
      case 10447:
      case 10448:
      case 10449:
      case 10450:
      case 10451:
      case 10452:
      case 10453:
      case 10454:
      case 10455:
      case 10456:
      case 10457:
      case 10458:
      case 10459:
      case 10460:
      case 10461:
      case 10462:
      case 10463:
      case 10464:
      case 10465:
      case 10466:
      case 10467:
      case 10468:
      case 10469:
      case 10470:
      case 10471:
      case 10472:
      case 10473:
      case 10474:
      case 10475:
      case 10476:
      case 10477:
      case 10478:
      case 10479:
      case 10480:
      case 10481:
      case 10482:
      case 10483:
      case 10484:
      case 10485:
      case 10486:
      case 10487:
      case 10488:
      case 10489:
      case 10490:
      case 10491:
      case 10492:
      case 10493:
      case 10494:
      case 10495:
      case 10496:
      case 10497:
      case 10498:
      case 10499:
      case 10500:
      case 10501:
      case 10502:
      case 10503:
      case 10504:
      case 10505:
      case 10506:
      case 10507:
      case 10508:
      case 10509:
      case 10510:
      case 10511:
      case 10512:
      case 10513:
      case 10514:
      case 10515:
      case 10516:
      case 10517:
      case 10518:
      case 10519:
      case 10520:
      case 10521:
      case 10522:
      case 10523:
      case 10524:
      case 10525:
      case 10526:
      case 10527:
      case 10528:
      case 10529:
      case 10530:
      case 10531:
      case 10532:
      case 10533:
      case 10534:
      case 10535:
      case 10536:
      case 10537:
      case 10538:
      case 10539:
      case 10540:
      case 10541:
      case 10542:
      case 10543:
      case 10544:
      case 10545:
      case 10546:
      case 10547:
      case 10548:
      case 10549:
      case 10550:
      case 10551:
      case 10552:
      case 10553:
      case 10554:
      case 10555:
      case 10556:
      case 10557:
      case 10558:
      case 10559:
      case 10560:
      case 10561:
      case 10562:
      case 10563:
      case 10564:
      case 10565:
      case 10566:
      case 10567:
      case 10568:
      case 10569:
      case 10570:
      case 10571:
      case 10572:
      case 10573:
      case 10574:
      case 10575:
      case 10576:
      case 10577:
      case 10578:
      case 10579:
      case 10580:
      case 10581:
      case 10582:
      case 10583:
      case 10584:
      case 10585:
      case 10586:
      case 10587:
      case 10588:
      case 10589:
      case 10590:
      case 10591:
      case 10592:
      case 10593:
      case 10594:
      case 10595:
      case 10596:
      case 10597:
      case 10598:
      case 10599:
      case 10600:
      case 10601:
      case 10602:
      case 10603:
      case 10604:
      case 10605:
      case 10606:
      case 10607:
      case 10608:
      case 10609:
      case 10610:
      case 10611:
      case 10612:
      case 10613:
      case 10614:
      case 10615:
      case 10616:
      case 10617:
      case 10618:
      case 10619:
      case 10620:
      case 10621:
      case 10622:
      case 10623:
      case 10624:
      case 10625:
      case 10626:
      case 10627:
      case 10628:
      case 10629:
      case 10630:
      case 10631:
      case 10632:
      case 10633:
      case 10634:
      case 10635:
      case 10636:
      case 10637:
      case 10638:
      case 10639:
      case 10640:
      case 10641:
      case 10642:
      case 10643:
      case 10644:
      case 10645:
      case 10646:
      case 10647:
      case 10648:
      case 10649:
      case 10650:
      case 10651:
      case 10652:
      case 10653:
      case 10654:
      case 10655:
      case 10656:
      case 10657:
      case 10658:
      case 10659:
      case 10660:
      case 10661:
      case 10662:
      case 10663:
      case 10664:
      case 10665:
      case 10666:
      case 10667:
      case 10668:
      case 10669:
      case 10670:
      case 10671:
      case 10672:
      case 10673:
      case 10674:
      case 10675:
      case 10676:
      case 10741:
      case 10742:
      case 10743:
      case 10744:
      case 10745:
      case 10746:
      case 10747:
      case 10748:
      case 10749:
      case 10750:
      case 10751:
      case 10752:
      case 10753:
      case 10754:
      case 10755:
      case 10756:
      case 10757:
      case 10758:
      case 10759:
      case 10760:
      case 10761:
      case 10762:
      case 10763:
      case 10764:
      case 10765:
      case 10766:
      case 10767:
      case 10768:
      case 10769:
      case 10770:
      case 10771:
      case 10772:
      case 10773:
      case 10774:
      case 10775:
      case 10776:
      case 10777:
      case 10778:
      case 10779:
      case 10780:
      case 10781:
      case 10782:
      case 10783:
      case 10784:
      case 10785:
      case 10786:
      case 10787:
      case 10788:
      case 10789:
      case 10790:
      case 10791:
      case 10792:
      case 10793:
      case 10794:
      case 10795:
      case 10796:
      case 10797:
      case 10798:
      case 10799:
      case 10800:
      case 10801:
      case 10802:
      case 10803:
      case 10804:
      case 10805:
      case 10806:
      case 10807:
      case 10808:
      case 10809:
      case 10810:
      case 10811:
      case 10812:
      case 10813:
      case 10814:
      case 10815:
      case 10816:
      case 10817:
      case 10818:
      case 10819:
      case 10820:
      case 10821:
      case 10822:
      case 10823:
      case 10824:
      case 10825:
      case 10826:
      case 10827:
      case 10828:
      case 10829:
      case 10830:
      case 10831:
      case 10832:
      case 10833:
      case 10834:
      case 10835:
      case 10836:
      case 10837:
      case 10838:
      case 10839:
      case 10840:
      case 10841:
      case 10842:
      case 10843:
      case 10844:
      case 10845:
      case 10846:
      case 10847:
      case 10848:
      case 10849:
      case 10850:
      case 10851:
      case 10852:
      case 10853:
      case 10854:
      case 10855:
      case 10856:
      case 10857:
      case 10858:
      case 10859:
      case 10860:
      case 10861:
      case 10862:
      case 10863:
      case 10864:
      case 10865:
      case 10866:
      case 10867:
      case 10868:
      case 10869:
      case 10870:
      case 10871:
      case 10872:
      case 10873:
      case 10874:
      case 10875:
      case 10900:
      case 10901:
      case 10902:
      case 10903:
      case 10904:
      case 10905:
      case 10906:
      case 10907:
      case 10908:
      case 10909:
      case 10910:
      case 10911:
      case 10912:
      case 10913:
      case 10914:
      case 10915:
      case 10916:
      case 10917:
      case 10918:
      case 10919:
      case 10920:
      case 10921:
      case 10922:
      case 10923:
      case 10924:
      case 10925:
      case 10926:
      case 10927:
      case 10928:
      case 10929:
      case 10930:
      case 10931:
      case 10932:
      case 10933:
      case 10934:
      case 10935:
      case 10936:
      case 10937:
      case 10938:
      case 10939:
      case 10940:
      case 10941:
      case 10942:
      case 10943:
      case 10944:
      case 10945:
      case 10946:
      case 10947:
      case 10948:
      case 10949:
      case 10950:
      case 10951:
      case 10952:
      case 10953:
      case 10954:
      case 11003:
      case 11004:
      case 11005:
      case 11006:
      case 11007:
      case 11008:
      case 11009:
      case 11010:
      case 11011:
      case 11012:
      case 11013:
      case 11014:
      case 11015:
      case 11016:
      case 11017:
      case 11018:
      case 11019:
      case 11020:
      case 11021:
      case 11022:
      case 11023:
      case 11024:
      case 11025:
      case 11026:
      case 11027:
      case 11028:
      case 11029:
      case 11030:
      case 11031:
      case 11032:
      case 11033:
      case 11034:
      case 11035:
      case 11036:
      case 11037:
      case 11038:
      case 11039:
      case 11040:
      case 11041:
      case 11042:
      case 11043:
      case 11044:
      case 11045:
      case 11046:
      case 11062:
      case 11073:
      case 11074:
      case 11099:
      case 11100:
      case 11101:
      case 11102:
      case 11103:
      case 11104:
      case 11105:
      case 11106:
      case 11107:
      case 11108:
      case 11109:
      case 11110:
      case 11111:
      case 11112:
      case 11113:
      case 11114:
      case 11115:
      case 11116:
      case 11117:
      case 11118:
      case 11119:
      case 11120:
      case 11121:
      case 11122:
      case 11123:
      case 11124:
      case 11125:
      case 11126:
      case 11135:
      case 11136:
      case 11137:
      case 11138:
      case 11139:
      case 11140:
      case 11141:
      case 11142:
      case 11143:
      case 11144:
      case 11145:
      case 11146:
      case 11147:
      case 11152:
      case 11153:
      case 11154:
      case 11155:
      case 11158:
      case 11159:
      case 11160:
      case 11161:
      case 11162:
      case 11164:
      case 11165:
      case 11166:
      case 11167:
      case 11177:
      case 11178:
      case 11179:
      case 11180:
      case 11181:
      case 11182:
      case 11183:
      case 11184:
      case 11185:
      case 11186:
      case 11189:
      case 11190:
      case 11191:
      case 11192:
      case 11193:
      case 11194:
      case 11195:
      case 11196:
      case 11197:
      case 11198:
      case 11199:
      case 11200:
      case 11201:
      case 11202:
      case 11203:
      case 11204:
      case 11205:
      case 11233:
      case 11234:
      case 11235:
      case 11236:
      case 11237:
      case 11238:
      case 11239:
      case 11240:
      case 11241:
      case 11242:
      case 11243:
      case 11244:
      case 11245:
      case 11246:
      case 11247:
      case 11248:
      case 11249:
      case 11250:
      case 11251:
      case 11252:
      case 11253:
      case 11254:
      case 11255:
      case 11256:
      case 11257:
      case 11258:
      case 11259:
      case 11260:
      case 11261:
      case 11262:
      case 11263:
      case 11264:
      case 11265:
      case 11266:
      case 11267:
      case 11268:
      case 11269:
      case 11270:
      case 11271:
      case 11272:
      case 11273:
      case 11274:
      case 11275:
      case 11276:
      case 11277:
      case 11278:
      case 11279:
      case 11280:
      case 11281:
      case 11282:
      case 11283:
      case 11284:
      case 11287:
      case 11288:
      case 11289:
      case 11290:
      case 11291:
      case 11292:
      case 11293:
      case 11294:
      case 11295:
      case 11296:
      case 11297:
      case 11298:
      case 11354:
      case 11355:
      case 11356:
      case 11357:
      case 11358:
      case 11359:
      case 11360:
      case 11361:
      case 11362:
      case 11363:
      case 11364:
      case 11365:
      case 11376:
      case 11377:
      case 11379:
      case 11381:
      case 11382:
      case 11384:
      case 11385:
      case 11387:
      case 11388:
      case 11390:
      case 11391:
      case 11394:
      case 11395:
      case 11397:
      case 11398:
      case 11400:
      case 11401:
      case 11403:
      case 11406:
      case 11408:
      case 11409:
      case 11411:
      case 11412:
      case 11414:
      case 11415:
      case 11418:
      case 11419:
      case 11421:
      case 11422:
      case 11424:
      case 11425:
      case 11427:
      case 11430:
      case 11465:
      case 11466:
      case 11468:
      case 11469:
      case 11487:
      case 11488:
      case 11489:
      case 11493:
      case 11494:
      case 11495:
      case 11499:
      case 11500:
      case 11501:
      case 11505:
      case 11509:
      case 11510:
      case 11511:
      case 11515:
      case 11519:
      case 11520:
      case 11521:
      case 11525:
      case 11526:
      case 11527:
      case 11531:
      case 11532:
      case 11533:
      case 11537:
      case 11538:
      case 11539:
      case 11543:
      case 11544:
      case 11545:
      case 11549:
      case 11550:
      case 11551:
      case 11555:
      case 11556:
      case 11557:
      case 11561:
      case 11562:
      case 11563:
      case 11567:
      case 11568:
      case 11569:
      case 11573:
      case 11574:
      case 11575:
      case 11579:
      case 11580:
      case 11581:
      case 11585:
      case 11586:
      case 11587:
      case 11615:
      case 11616:
      case 11618:
      case 11619:
      case 11669:
      case 11670:
      case 11671:
      case 11672:
      case 11673:
      case 11674:
      case 11675:
      case 11676:
      case 11677:
      case 11678:
      case 11679:
      case 11680:
      case 11681:
      case 11682:
      case 11683:
      case 11684:
      case 11685:
      case 11686:
      case 11687:
      case 11688:
      case 11689:
      case 11690:
      case 11691:
      case 11692:
      case 11693:
      case 11694:
      case 11695:
      case 11696:
      case 11697:
      case 11698:
      case 11699:
      case 11700:
      case 11701:
      case 11702:
      case 11703:
      case 11704:
      case 11705:
      case 11706:
      case 11707:
      case 11708:
      case 11709:
      case 11710:
      case 11711:
      case 11712:
      case 11713:
      case 11714:
      case 11715:
      case 11716:
      case 11717:
      case 11718:
      case 11719:
      case 11720:
      case 11721:
      case 11722:
      case 11723:
      case 11724:
      case 11725:
      case 11726:
      case 11727:
      case 11728:
      case 11729:
      case 11730:
      case 11731:
      case 11732:
      case 11733:
      case 11734:
      case 11735:
      case 11742:
      case 11743:
      case 11744:
      case 11745:
      case 11746:
      case 11747:
      case 11748:
      case 11749:
      case 11754:
      case 11755:
      case 11756:
      case 11757:
      case 11758:
      case 11759:
      case 11760:
      case 11761:
      case 11816:
      case 11817:
      case 11818:
      case 11819:
      case 11820:
      case 11821:
      case 11822:
      case 11823:
      case 11824:
      case 11825:
      case 11826:
      case 11827:
      case 11828:
      case 11829:
      case 11830:
      case 11831:
      case 11832:
      case 11833:
      case 11834:
      case 11835:
      case 11836:
      case 11837:
      case 11838:
      case 11839:
      case 11840:
      case 11841:
      case 11842:
      case 11843:
      case 11844:
      case 11845:
      case 11846:
      case 11847:
      case 11848:
      case 11849:
      case 11850:
      case 11851:
      case 11852:
      case 11853:
      case 11854:
      case 11855:
      case 11856:
      case 11857:
      case 11858:
      case 11859:
      case 11860:
      case 11861:
      case 11862:
      case 11863:
      case 11864:
      case 11865:
      case 11866:
      case 11867:
      case 11868:
      case 11869:
      case 11870:
      case 11871:
      case 11884:
      case 11885:
      case 11895:
      case 11896:
      case 11897:
      case 11898:
      case 11907:
      case 11908:
      case 11909:
      case 11910:
      case 11911:
      case 11912:
      case 11917:
      case 11918:
      case 11919:
      case 11921:
      case 11922:
      case 11924:
      case 11925:
      case 11927:
      case 11928:
      case 11930:
      case 11931:
      case 11933:
      case 11934:
      case 11936:
      case 11937:
      case 11939:
      case 11940:
      case 11942:
      case 11943:
      case 11945:
      case 11946:
      case 11948:
      case 11949:
      case 11954:
      case 11955:
      case 11957:
      case 11958:
      case 11960:
      case 11961:
      case 11963:
      case 11964:
      case 11966:
      case 11967:
      case 11969:
      case 11970:
      case 11972:
      case 11973:
      case 11974:
      case 11975:
      case 11976:
      case 11979:
      case 11980:
      case 11983:
      case 11984:
      case 11987:
      case 11988:
      case 11991:
      case 11992:
      case 11995:
      case 11996:
      case 11999:
      case 12000:
      case 12002:
      case 12003:
      case 12023:
      case 12024:
      case 12026:
      case 12027:
      case 12028:
      case 12029:
      case 12030:
      case 12031:
      case 12032:
      case 12033:
      case 12034:
      case 12035:
      case 12052:
      case 12053:
      case 12054:
      case 12055:
      case 12076:
      case 12077:
      case 12078:
      case 12079:
      case 12080:
      case 12081:
      case 12082:
      case 12083:
      case 12084:
      case 12085:
      case 12086:
      case 12088:
      case 12089:
      case 12090:
      case 12091:
      case 12092:
      case 12093:
      case 12094:
      case 12095:
      case 12096:
      case 12097:
      case 12100:
      case 12101:
      case 12102:
      case 12103:
      case 12104:
      case 12105:
      case 12106:
      case 12107:
      case 12108:
      case 12109:
      case 12110:
      case 12111:
      case 12112:
      case 12113:
      case 12114:
      case 12115:
      case 12116:
      case 12117:
      case 12118:
      case 12119:
      case 12120:
      case 12121:
      case 12122:
      case 12123:
      case 12124:
      case 12125:
      case 12126:
      case 12127:
      case 12128:
      case 12129:
      case 12130:
      case 12131:
      case 12132:
      case 12133:
      case 12134:
      case 12135:
      case 12136:
      case 12137:
      case 12138:
      case 12139:
      case 12140:
      case 12141:
      case 12142:
      case 12172:
      case 12176:
      case 12177:
      case 12178:
      case 12180:
      case 12181:
      case 12182:
      case 12186:
      case 12187:
      case 12188:
      case 12189:
      case 12190:
      case 12191:
      case 12192:
      case 12193:
      case 12194:
      case 12195:
      case 12196:
      case 12197:
      case 12198:
      case 12199:
      case 12200:
      case 12201:
      case 12203:
      case 12204:
      case 12205:
      case 12206:
      case 12207:
      case 12209:
      case 12210:
      case 12211:
      case 12212:
      case 12215:
      case 12216:
      case 12217:
      case 12218:
      case 12219:
      case 12220:
      case 12224:
      case 12225:
      case 12226:
      case 12227:
      case 12228:
      case 12229:
      case 12230:
      case 12231:
      case 12232:
      case 12233:
      case 12234:
      case 12235:
      case 12236:
      case 12237:
      case 12238:
      case 12239:
      case 12242:
      case 12243:
      case 12245:
      case 12246:
      case 12247:
      case 12248:
      case 12249:
      case 12250:
      case 12252:
      case 12253:
      case 12254:
      case 12255:
      case 12256:
      case 12257:
      case 12258:
      case 12259:
      case 12260:
      case 12261:
      case 12262:
      case 12263:
      case 12264:
      case 12265:
      case 12266:
      case 12267:
      case 12268:
      case 12269:
      case 12270:
      case 12271:
      case 12272:
      case 12273:
      case 12274:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
      case 12281:
      case 12282:
      case 12283:
      case 12284:
      case 12285:
      case 12286:
      case 12290:
      case 12291:
      case 12296:
      case 12297:
      case 12298:
      case 12299:
      case 12300:
      case 12301:
      case 12306:
      case 12307:
      case 12308:
      case 12309:
      case 12324:
      case 12326:
      case 12328:
      case 12329:
      case 12330:
      case 12331:
      case 12332:
      case 12333:
      case 12334:
      case 12335:
      case 12336:
      case 12337:
      case 12338:
      case 12339:
      case 12340:
      case 12341:
      case 12342:
      case 12343:
      case 12344:
      case 12345:
      case 12346:
      case 12347:
      case 12348:
      case 12349:
      case 12350:
      case 12351:
      case 12352:
      case 12353:
      case 12354:
      case 12357:
      case 12358:
      case 12392:
      case 12393:
      case 12394:
      case 12410:
      case 12411:
      case 12412:
      case 12413:
      case 12414:
      case 12415:
      case 12420:
      case 12421:
      case 12422:
      case 12423:
      case 12424:
      case 12425:
      case 12426:
      case 12427:
      case 12428:
      case 12429:
      case 12430:
      case 12431:
      case 12432:
      case 12433:
      case 12434:
      case 12435:
      case 12436:
      case 12437:
      case 12438:
      case 12439:
      case 12440:
      case 12441:
      case 12442:
      case 12443:
      case 12444:
      case 12445:
      case 12446:
      case 12447:
      case 12448:
      case 12449:
      case 12450:
      case 12451:
      case 12452:
      case 12453:
      case 12454:
      case 12455:
      case 12472:
      case 12478:
      case 12479:
      case 12486:
      case 12518:
      case 12524:
        uint64_t v4 = 0x2C00000025;
        goto LABEL_4;
      case 6:
      case 6733:
      case 11149:
      case 11150:
      case 11151:
      case 12540:
      case 12550:
      case 12752:
        int v41 = 9;
        goto LABEL_323;
      case 7:
        LODWORD(v187) = 36;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F84;
        uint64_t v21 = 0xB00000041;
        goto LABEL_30;
      case 8:
      case 9:
      case 13:
      case 14:
      case 19:
      case 51:
      case 53:
      case 55:
      case 56:
      case 57:
      case 58:
      case 75:
      case 76:
      case 139:
      case 140:
      case 142:
      case 143:
      case 144:
      case 145:
      case 148:
      case 149:
      case 169:
      case 170:
      case 175:
      case 176:
      case 177:
      case 180:
      case 181:
      case 192:
      case 193:
      case 201:
      case 202:
      case 203:
      case 238:
      case 239:
      case 252:
      case 253:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 273:
      case 274:
      case 275:
      case 278:
      case 280:
      case 282:
      case 283:
      case 284:
      case 290:
      case 296:
      case 299:
      case 300:
      case 301:
      case 305:
      case 306:
      case 309:
      case 310:
      case 311:
      case 312:
      case 330:
      case 331:
      case 332:
      case 333:
      case 335:
      case 336:
      case 337:
      case 338:
      case 343:
      case 344:
      case 349:
      case 351:
      case 352:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 371:
      case 375:
      case 380:
      case 6738:
      case 6739:
      case 6740:
      case 6741:
      case 6742:
      case 6743:
      case 6744:
      case 6745:
      case 6746:
      case 6747:
      case 6748:
      case 6749:
      case 6784:
      case 6785:
      case 6786:
      case 6787:
      case 6788:
      case 6789:
      case 6790:
      case 6806:
      case 6807:
      case 6808:
      case 6809:
      case 6810:
      case 6811:
      case 6812:
      case 6813:
      case 6814:
      case 6815:
      case 6816:
      case 6817:
      case 6818:
      case 6819:
      case 6820:
      case 6821:
      case 6822:
      case 6823:
      case 6824:
      case 6825:
      case 6826:
      case 6827:
      case 6828:
      case 6829:
      case 6830:
      case 6831:
      case 6855:
      case 6856:
      case 6857:
      case 6858:
      case 6859:
      case 6860:
      case 6861:
      case 6862:
      case 6863:
      case 6864:
      case 6865:
      case 6866:
      case 6867:
      case 6868:
      case 6869:
      case 6870:
      case 6871:
      case 6872:
      case 6874:
      case 6875:
      case 6876:
      case 6877:
      case 6878:
      case 6879:
      case 6880:
      case 6881:
      case 6882:
      case 6883:
      case 6884:
      case 6885:
      case 6886:
      case 6887:
      case 6888:
      case 6889:
      case 6890:
      case 6891:
      case 6892:
      case 6901:
      case 6902:
      case 6903:
      case 6904:
      case 6905:
      case 6906:
      case 6907:
      case 6908:
      case 6909:
      case 6910:
      case 6911:
      case 6912:
      case 6913:
      case 6914:
      case 6915:
      case 6916:
      case 6917:
      case 6918:
      case 6919:
      case 6920:
      case 6921:
      case 6922:
      case 6923:
      case 6924:
      case 6925:
      case 6926:
      case 6927:
      case 6928:
      case 6929:
      case 6930:
      case 6931:
      case 6932:
      case 6933:
      case 6934:
      case 6935:
      case 6936:
      case 6937:
      case 6938:
      case 6939:
      case 6940:
      case 6941:
      case 6942:
      case 6943:
      case 6944:
      case 6945:
      case 6946:
      case 6947:
      case 6948:
      case 6949:
      case 6950:
      case 6951:
      case 6952:
      case 6953:
      case 6954:
      case 6955:
      case 6956:
      case 6957:
      case 6958:
      case 6959:
      case 6960:
      case 6961:
      case 6962:
      case 6963:
      case 6964:
      case 6965:
      case 6966:
      case 6967:
      case 6968:
      case 6969:
      case 6970:
      case 6971:
      case 6972:
      case 6973:
      case 6974:
      case 6975:
      case 6976:
      case 6977:
      case 6978:
      case 6979:
      case 6980:
      case 6981:
      case 6982:
      case 6983:
      case 6984:
      case 6985:
      case 6986:
      case 6987:
      case 6988:
      case 6989:
      case 6990:
      case 6991:
      case 6992:
      case 6993:
      case 6994:
      case 6995:
      case 6996:
      case 6997:
      case 6999:
      case 7000:
      case 7001:
      case 7002:
      case 7003:
      case 7004:
      case 7005:
      case 7006:
      case 7007:
      case 7008:
      case 7009:
      case 7010:
      case 7029:
      case 7030:
      case 7031:
      case 7032:
      case 7033:
      case 7034:
      case 7035:
      case 7036:
      case 7037:
      case 7143:
      case 7144:
      case 7145:
      case 7146:
      case 7147:
      case 7148:
      case 7149:
      case 7150:
      case 7151:
      case 7152:
      case 7153:
      case 7154:
      case 7155:
      case 7156:
      case 7157:
      case 7158:
      case 7159:
      case 7160:
      case 7164:
      case 7165:
      case 7166:
      case 7167:
      case 7169:
      case 7170:
      case 7171:
      case 7172:
      case 7192:
      case 7193:
      case 7194:
      case 7195:
      case 7196:
      case 7197:
      case 7198:
      case 7199:
      case 7200:
      case 7201:
      case 7202:
      case 7203:
      case 7204:
      case 7205:
      case 7206:
      case 7207:
      case 7208:
      case 7209:
      case 7210:
      case 7211:
      case 7212:
      case 7213:
      case 7214:
      case 7215:
      case 7216:
      case 7217:
      case 7218:
      case 7219:
      case 7220:
      case 7221:
      case 7222:
      case 7223:
      case 7224:
      case 7225:
      case 7226:
      case 7227:
      case 7228:
      case 7229:
      case 7230:
      case 7235:
      case 7240:
      case 7245:
      case 7250:
      case 7251:
      case 7261:
      case 7262:
      case 7263:
      case 7264:
      case 7265:
      case 7266:
      case 7272:
      case 7273:
      case 7274:
      case 7705:
      case 7876:
      case 7877:
      case 7878:
      case 7887:
      case 7888:
      case 7889:
      case 7890:
      case 7891:
      case 7892:
      case 7893:
      case 7894:
      case 7895:
      case 7896:
      case 7897:
      case 7898:
      case 7899:
      case 7900:
      case 7901:
      case 7902:
        unint64_t v8 = &xmmword_1CFAE1084;
        goto LABEL_8;
      case 10:
      case 11:
      case 12:
      case 154:
      case 157:
      case 173:
      case 237:
      case 256:
      case 285:
      case 286:
      case 287:
      case 288:
      case 313:
      case 314:
      case 315:
      case 339:
      case 340:
      case 341:
      case 342:
      case 347:
      case 350:
      case 353:
      case 369:
      case 370:
      case 372:
      case 376:
      case 378:
      case 381:
      case 439:
      case 441:
      case 442:
      case 443:
      case 634:
      case 635:
      case 637:
      case 642:
      case 1246:
      case 1247:
      case 1248:
      case 1249:
      case 1250:
      case 1251:
      case 1252:
      case 1253:
        *(_DWORD *)&v184[16] = 65;
        unsigned int v96 = &xmmword_1CFAE1054;
        goto LABEL_403;
      case 15:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 28:
      case 32:
      case 33:
      case 37:
      case 38:
      case 39:
      case 45:
      case 48:
      case 50:
      case 59:
      case 61:
      case 65:
      case 66:
      case 68:
      case 71:
      case 72:
      case 74:
      case 151:
      case 159:
      case 160:
      case 161:
      case 162:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 255:
      case 291:
      case 383:
      case 388:
      case 445:
      case 643:
      case 644:
      case 645:
      case 1823:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1838:
      case 1848:
      case 1849:
      case 1858:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1989:
      case 1992:
      case 1993:
      case 1996:
      case 1997:
      case 2008:
      case 2086:
      case 2098:
      case 2099:
      case 2100:
      case 2101:
      case 2102:
      case 2103:
      case 2104:
      case 2106:
      case 2141:
      case 2142:
      case 2163:
      case 2164:
      case 2165:
      case 2166:
      case 2177:
      case 2178:
      case 2179:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2200:
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2232:
      case 2233:
      case 2234:
      case 2235:
      case 2236:
      case 2237:
      case 2238:
      case 2239:
      case 2240:
      case 2241:
      case 2242:
      case 2243:
      case 2244:
      case 2245:
      case 2246:
      case 2247:
      case 2248:
      case 2249:
      case 2250:
      case 2251:
      case 2252:
      case 2253:
      case 2254:
      case 2255:
      case 2256:
      case 2257:
      case 2258:
      case 2259:
      case 2260:
      case 2261:
      case 2262:
      case 2263:
      case 2264:
      case 2265:
      case 2266:
      case 2267:
      case 2268:
      case 2269:
      case 2270:
      case 2271:
      case 2272:
      case 2273:
      case 2274:
      case 2275:
      case 2276:
      case 2277:
      case 2278:
      case 2279:
      case 2280:
      case 2281:
      case 2282:
      case 2283:
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2296:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2411:
      case 2412:
      case 2413:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2419:
      case 2420:
      case 2421:
      case 2422:
      case 2424:
      case 2425:
      case 2447:
      case 2448:
      case 2451:
      case 2452:
      case 2453:
      case 2470:
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2478:
      case 2479:
      case 2480:
      case 2525:
      case 2662:
      case 2663:
      case 2680:
      case 2685:
      case 2686:
      case 2703:
      case 2704:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2726:
      case 2727:
      case 2728:
      case 2729:
      case 2730:
      case 2731:
      case 2783:
      case 2821:
      case 2836:
      case 2837:
      case 3427:
      case 3627:
      case 3640:
      case 3641:
      case 3642:
      case 3643:
      case 3644:
      case 3645:
      case 3646:
      case 3647:
      case 3648:
      case 3653:
      case 3654:
      case 4008:
      case 4009:
      case 4010:
      case 4012:
      case 4046:
      case 4047:
      case 4048:
      case 4053:
      case 4054:
      case 4055:
      case 4056:
      case 4059:
      case 4060:
      case 4061:
      case 4068:
      case 4079:
      case 4080:
      case 4081:
      case 4095:
      case 6037:
      case 6038:
      case 6039:
      case 6040:
      case 6041:
      case 6042:
      case 6043:
      case 6062:
      case 6065:
      case 6066:
      case 6067:
      case 6074:
      case 6091:
      case 6092:
      case 6094:
      case 6106:
      case 6234:
      case 6235:
      case 6236:
      case 6237:
      case 6238:
      case 6239:
      case 6240:
      case 6241:
      case 6242:
      case 6243:
      case 6244:
      case 6245:
      case 6277:
      case 6278:
      case 6279:
      case 6280:
      case 6285:
      case 6286:
      case 6287:
      case 6288:
      case 6298:
      case 6299:
      case 6300:
      case 6301:
      case 6302:
      case 6303:
      case 6471:
      case 6472:
      case 6473:
      case 6474:
      case 6535:
      case 6536:
      case 6539:
      case 6540:
      case 6541:
      case 6542:
      case 6543:
      case 6544:
      case 6545:
      case 6546:
      case 6547:
      case 6551:
      case 6595:
      case 6600:
      case 6601:
      case 6619:
      case 6620:
      case 6621:
      case 6622:
      case 6694:
      case 6715:
      case 6717:
      case 6791:
      case 6792:
      case 6799:
      case 6804:
      case 7057:
      case 7058:
      case 7059:
      case 7324:
      case 7325:
      case 7326:
      case 7327:
      case 7328:
      case 7329:
      case 7330:
      case 7331:
      case 7332:
      case 7333:
      case 7334:
      case 7335:
      case 7336:
      case 7337:
      case 7338:
      case 7339:
      case 7340:
      case 7341:
      case 7342:
      case 7343:
      case 7344:
      case 7345:
      case 7346:
      case 7347:
      case 7348:
      case 7349:
      case 7350:
      case 7351:
      case 7352:
      case 7353:
      case 7354:
      case 7355:
      case 7356:
      case 7357:
      case 7358:
      case 7359:
      case 7360:
      case 7361:
      case 7362:
      case 7363:
      case 7364:
      case 7365:
      case 7366:
      case 7367:
      case 7368:
      case 7369:
      case 7370:
      case 7371:
      case 7372:
      case 7373:
      case 7374:
      case 7375:
      case 7376:
      case 7377:
      case 7378:
      case 7379:
      case 7380:
      case 7381:
      case 7382:
      case 7383:
      case 7384:
      case 7385:
      case 7386:
      case 7387:
      case 7388:
      case 7389:
      case 7390:
      case 7391:
      case 7392:
      case 7393:
      case 7394:
      case 7395:
      case 7396:
      case 7397:
      case 7398:
      case 7399:
      case 7400:
      case 7401:
      case 7402:
      case 7403:
      case 7404:
      case 7405:
      case 7406:
      case 7407:
      case 7408:
      case 7409:
      case 7410:
      case 7411:
      case 7412:
      case 7413:
      case 7414:
      case 7415:
      case 7416:
      case 7417:
      case 7418:
      case 7419:
      case 7420:
      case 7421:
      case 7422:
      case 7423:
      case 7424:
      case 7425:
      case 7426:
      case 7427:
      case 7428:
      case 7429:
      case 7430:
      case 7431:
      case 7432:
      case 7433:
      case 7434:
      case 7435:
      case 7436:
      case 7437:
      case 7438:
      case 7439:
      case 7440:
      case 7441:
      case 7442:
      case 7443:
      case 7444:
      case 7445:
      case 7446:
      case 7447:
      case 7448:
      case 7449:
      case 7450:
      case 7451:
      case 7452:
      case 7453:
      case 7454:
      case 7455:
      case 7456:
      case 7457:
      case 7458:
      case 7459:
      case 7460:
      case 7461:
      case 7462:
      case 7463:
      case 7464:
      case 7465:
      case 7466:
      case 7467:
      case 7468:
      case 7469:
      case 7470:
      case 7471:
      case 7472:
      case 7473:
      case 7474:
      case 7475:
      case 7476:
      case 7477:
      case 7478:
      case 7479:
      case 7480:
      case 7481:
      case 7482:
      case 7483:
      case 7484:
      case 7485:
      case 7486:
      case 7487:
      case 7488:
      case 7495:
      case 7496:
      case 7497:
      case 7498:
      case 7499:
      case 7500:
      case 7501:
      case 7502:
      case 7503:
      case 7504:
      case 7505:
      case 7506:
      case 7507:
      case 7508:
      case 7509:
      case 7510:
      case 7511:
      case 7512:
      case 7513:
      case 7514:
      case 7515:
      case 7516:
      case 7517:
      case 7518:
      case 7519:
      case 7520:
      case 7521:
      case 7522:
      case 7523:
      case 7524:
      case 7525:
      case 7526:
      case 7527:
      case 7528:
      case 7529:
      case 7530:
      case 7531:
      case 7532:
      case 7533:
      case 7534:
      case 7535:
      case 7536:
      case 7537:
      case 7538:
      case 7539:
      case 7540:
      case 7541:
      case 7542:
      case 7543:
      case 7544:
      case 7545:
      case 7546:
      case 7547:
      case 7548:
      case 7549:
      case 7550:
      case 7551:
      case 7552:
      case 7553:
      case 7554:
      case 7555:
      case 7556:
      case 7557:
      case 7558:
      case 7559:
      case 7560:
      case 7561:
      case 7562:
      case 7563:
      case 7564:
      case 7565:
      case 7566:
      case 7567:
      case 7568:
      case 7569:
      case 7570:
      case 7571:
      case 7572:
      case 7573:
      case 7574:
      case 7575:
      case 7576:
      case 7577:
      case 7578:
      case 7579:
      case 7580:
      case 7581:
      case 7582:
      case 7583:
      case 7584:
      case 7585:
      case 7586:
      case 7587:
      case 7588:
      case 7589:
      case 7590:
      case 7591:
      case 7592:
      case 7593:
      case 7594:
      case 7595:
      case 7596:
      case 7597:
      case 7598:
      case 7599:
      case 7600:
      case 7601:
      case 7602:
      case 7603:
      case 7604:
      case 7605:
      case 7606:
      case 7607:
      case 7608:
      case 7609:
      case 7610:
      case 7611:
      case 7612:
      case 7613:
      case 7614:
      case 7615:
      case 7616:
      case 7617:
      case 7618:
      case 7619:
      case 7620:
      case 7621:
      case 7622:
      case 7623:
      case 7624:
      case 7625:
      case 7626:
      case 7627:
      case 7628:
      case 7629:
      case 7630:
      case 7631:
      case 7632:
      case 7633:
      case 7634:
      case 7635:
      case 7636:
      case 7637:
      case 7638:
      case 7639:
      case 7640:
      case 7641:
      case 7642:
      case 7643:
      case 7644:
      case 7645:
      case 7646:
      case 7647:
      case 7648:
      case 7649:
      case 7650:
      case 7651:
      case 7652:
      case 7653:
      case 7654:
      case 7655:
      case 7656:
      case 7657:
      case 7658:
      case 7659:
      case 7660:
      case 7661:
      case 7662:
      case 7663:
      case 7664:
      case 7665:
      case 7666:
      case 7667:
      case 7668:
      case 7669:
      case 7670:
      case 7671:
      case 7672:
      case 7673:
      case 7674:
      case 7675:
      case 7676:
      case 7677:
      case 7678:
      case 7679:
      case 7680:
      case 7681:
      case 7682:
      case 7683:
      case 7684:
      case 7685:
      case 7686:
      case 7687:
      case 7688:
      case 7689:
      case 7690:
      case 7691:
      case 7692:
      case 7693:
      case 7694:
      case 7695:
      case 7696:
      case 7697:
      case 7698:
      case 7699:
      case 7700:
      case 7701:
      case 7702:
      case 7703:
      case 7704:
      case 7706:
      case 7707:
      case 7708:
      case 7709:
      case 7710:
      case 7711:
      case 7712:
      case 7713:
      case 7714:
      case 7715:
      case 7716:
      case 7717:
      case 7718:
      case 7719:
      case 7720:
      case 7721:
      case 7722:
      case 7723:
      case 7724:
      case 7725:
      case 7726:
      case 7727:
      case 7728:
      case 7729:
      case 7730:
      case 7731:
      case 7732:
      case 7733:
      case 7734:
      case 7735:
      case 7736:
      case 7737:
      case 7738:
      case 7739:
      case 7740:
      case 7741:
      case 7742:
      case 7743:
      case 7744:
      case 7745:
      case 7746:
      case 7747:
      case 7748:
      case 7749:
      case 7750:
      case 7751:
      case 7752:
      case 7753:
      case 7754:
      case 7755:
      case 7756:
      case 7757:
      case 7758:
      case 7759:
      case 7760:
      case 7761:
      case 7762:
      case 7763:
      case 7764:
      case 7765:
      case 7766:
      case 7767:
      case 7768:
      case 7769:
      case 7770:
      case 7771:
      case 7772:
      case 7773:
      case 7774:
      case 7775:
      case 7776:
      case 7777:
      case 7778:
      case 7779:
      case 7780:
      case 7781:
      case 7782:
      case 7783:
      case 7784:
      case 7785:
      case 7786:
      case 7787:
      case 7788:
      case 7789:
      case 7790:
      case 7791:
      case 7792:
      case 7793:
      case 7794:
      case 7795:
      case 7796:
      case 7797:
      case 7798:
      case 7799:
      case 7800:
      case 7801:
      case 7802:
      case 7803:
      case 7804:
      case 7805:
      case 7806:
      case 7807:
      case 7808:
      case 7809:
      case 7810:
      case 7811:
      case 7812:
      case 7813:
      case 7814:
      case 7815:
      case 7816:
      case 7817:
      case 7818:
      case 7819:
      case 7820:
      case 7821:
      case 7822:
      case 7823:
      case 7824:
      case 7825:
      case 7826:
      case 7827:
      case 7828:
      case 7829:
      case 7830:
      case 7831:
      case 7832:
      case 7833:
      case 7834:
      case 7835:
      case 7836:
      case 7837:
      case 7838:
      case 7839:
      case 7840:
      case 7841:
      case 7842:
      case 7843:
      case 7844:
      case 7845:
      case 7846:
      case 7847:
      case 7848:
      case 7849:
      case 7852:
      case 7853:
      case 7854:
      case 7855:
      case 7856:
      case 7857:
      case 7858:
      case 7859:
      case 7860:
      case 7861:
      case 7862:
      case 7863:
      case 7864:
      case 7865:
      case 7866:
      case 7867:
      case 7868:
      case 7869:
      case 7870:
      case 7871:
      case 7872:
      case 7873:
      case 7874:
      case 7875:
      case 8340:
      case 8341:
      case 8342:
      case 8343:
      case 8344:
      case 8345:
      case 8353:
      case 8354:
      case 8511:
      case 8512:
      case 8526:
      case 8530:
      case 8556:
      case 8557:
      case 8558:
      case 8559:
      case 8560:
      case 8561:
      case 8562:
      case 8563:
      case 8564:
      case 8620:
      case 8621:
      case 8622:
      case 8623:
      case 8624:
      case 8647:
      case 8664:
      case 8669:
      case 8670:
      case 8678:
      case 8679:
      case 8685:
      case 8708:
      case 8709:
      case 8710:
      case 8711:
      case 8712:
      case 8714:
      case 8715:
      case 8716:
      case 8717:
      case 8721:
      case 8801:
      case 8815:
      case 8816:
      case 8817:
      case 8818:
      case 8820:
      case 8821:
      case 8832:
      case 8833:
      case 8834:
      case 8835:
      case 8836:
      case 8837:
      case 8839:
      case 8842:
      case 8845:
      case 8846:
      case 8847:
      case 8848:
      case 8849:
      case 8851:
      case 8852:
      case 8853:
      case 9052:
      case 9054:
      case 9061:
      case 9063:
      case 9362:
      case 9364:
      case 9404:
      case 9406:
      case 9428:
      case 9466:
      case 9468:
      case 9484:
      case 9486:
      case 9551:
      case 9555:
      case 9556:
      case 9562:
      case 9790:
      case 9791:
      case 9792:
      case 9793:
      case 10203:
      case 10206:
      case 10208:
      case 11058:
      case 11059:
      case 11066:
      case 11087:
      case 11088:
      case 11089:
      case 11090:
      case 11091:
      case 11127:
      case 11128:
      case 11129:
      case 11130:
      case 11131:
      case 11132:
      case 11133:
      case 11134:
      case 11206:
      case 11207:
      case 12036:
      case 12037:
      case 12038:
      case 12039:
      case 12040:
      case 12041:
      case 12042:
      case 12043:
      case 12044:
      case 12045:
      case 12046:
      case 12047:
      case 12048:
      case 12049:
      case 12050:
      case 12051:
      case 12056:
      case 12057:
      case 12058:
      case 12059:
      case 12060:
      case 12061:
      case 12063:
      case 12064:
      case 12065:
      case 12066:
      case 12067:
      case 12072:
      case 12073:
      case 12074:
      case 12075:
      case 12143:
      case 12144:
      case 12145:
      case 12149:
      case 12150:
      case 12151:
      case 12152:
      case 12153:
      case 12154:
      case 12155:
      case 12156:
      case 12157:
      case 12158:
      case 12159:
      case 12160:
      case 12161:
      case 12162:
      case 12163:
      case 12164:
      case 12165:
      case 12166:
      case 12167:
      case 12168:
      case 12169:
      case 12170:
      case 12171:
      case 12173:
      case 12174:
      case 12175:
      case 12183:
      case 12202:
      case 12213:
      case 12221:
      case 12240:
      case 12241:
      case 12244:
      case 12251:
      case 12288:
      case 12289:
      case 12355:
      case 12356:
      case 12362:
      case 12364:
      case 12366:
      case 12368:
      case 12370:
      case 12371:
      case 12373:
      case 12375:
      case 12376:
      case 12378:
      case 12380:
      case 12381:
      case 12382:
      case 12383:
      case 12395:
      case 12396:
      case 12397:
      case 12398:
      case 12399:
      case 12400:
      case 12401:
      case 12402:
      case 12403:
      case 12404:
      case 12405:
      case 12407:
      case 12408:
      case 12409:
      case 12456:
      case 12457:
      case 12458:
      case 12459:
      case 12460:
      case 12461:
      case 12462:
      case 12463:
      case 12464:
      case 12465:
      case 12466:
      case 12467:
      case 12468:
      case 12469:
      case 12470:
      case 12471:
      case 12473:
      case 12475:
      case 12477:
      case 12484:
      case 12485:
      case 12487:
      case 12488:
      case 12511:
      case 12515:
      case 12519:
        *(_DWORD *)v184 = 37;
        uint64_t v7 = 1;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 0xFFFFFFFF, (unsigned int *)v184, 1);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 16:
      case 12534:
      case 12544:
      case 12610:
      case 12650:
      case 12690:
      case 12726:
      case 12780:
        unint64_t v8 = &xmmword_1CFAE10D4;
        goto LABEL_8;
      case 27:
      case 49:
      case 8661:
      case 8662:
      case 8663:
      case 8812:
      case 12586:
        uint64_t v4 = 0x1C00000025;
        goto LABEL_4;
      case 29:
        int v41 = 66;
        goto LABEL_323;
      case 30:
      case 44:
      case 119:
        return result;
      case 31:
        uint64_t v42 = 0x2D00000025;
        goto LABEL_292;
      case 35:
        uint64_t v43 = 0x2D00000025;
        uint64_t v187 = 0x2D00000016;
        uint64_t v7 = 2;
        BOOL v44 = (uint64_t *)this;
        unsigned int v45 = 2;
        goto LABEL_302;
      case 36:
        LODWORD(v185) = 44;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        uint64_t v187 = 0x2D00000016;
        uint64_t v7 = 3;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 2);
        *(_DWORD *)&v184[8] = 3;
        *(void *)v184 = 0x2D00000025;
        goto LABEL_47;
      case 43:
      case 7142:
        int v46 = 22;
        goto LABEL_67;
      case 47:
      case 7017:
      case 7018:
      case 7019:
      case 7020:
      case 7021:
      case 7022:
      case 7911:
      case 7912:
      case 7913:
      case 7914:
      case 7915:
      case 7916:
      case 7917:
      case 7918:
      case 7919:
      case 7920:
      case 7921:
      case 7922:
      case 7923:
      case 7924:
      case 7925:
      case 7926:
      case 7927:
      case 7928:
      case 7929:
      case 7930:
      case 7931:
      case 7932:
      case 7933:
      case 7934:
      case 7935:
      case 7936:
      case 7937:
      case 7938:
      case 7939:
      case 7940:
      case 7941:
      case 7942:
      case 7943:
      case 7944:
      case 7945:
      case 7946:
      case 7947:
      case 7948:
      case 7949:
      case 7950:
      case 7951:
      case 7952:
      case 7953:
      case 7954:
      case 8019:
      case 8020:
      case 8021:
      case 8022:
      case 8023:
      case 8024:
      case 8025:
      case 8026:
      case 8027:
      case 8028:
      case 8029:
      case 8030:
      case 8039:
      case 8040:
      case 8041:
      case 8042:
      case 8043:
      case 8044:
      case 8045:
      case 8046:
      case 8047:
      case 8048:
      case 8049:
      case 8050:
      case 8051:
      case 8052:
      case 8053:
      case 8054:
      case 8055:
      case 8056:
      case 8057:
      case 8058:
      case 8059:
      case 8060:
      case 8061:
      case 8062:
      case 8063:
      case 8064:
      case 8065:
      case 8066:
      case 8067:
      case 8068:
      case 8069:
      case 8070:
      case 8071:
      case 8072:
      case 8073:
      case 8074:
      case 8075:
      case 8076:
      case 8077:
      case 8078:
      case 8079:
      case 8080:
      case 8081:
      case 8082:
      case 8147:
      case 8148:
      case 8149:
      case 8150:
      case 8151:
      case 8152:
      case 8153:
      case 8154:
      case 8155:
      case 8156:
      case 8157:
      case 8158:
      case 8159:
      case 8160:
      case 8161:
      case 8162:
      case 8163:
      case 8164:
      case 8165:
      case 8166:
      case 8167:
      case 8168:
      case 8169:
      case 8170:
      case 8171:
      case 8172:
      case 8173:
      case 8174:
      case 8175:
      case 8176:
      case 8177:
      case 8178:
      case 8179:
      case 8180:
      case 8181:
      case 8182:
      case 8183:
      case 8184:
      case 8185:
      case 8186:
      case 8187:
      case 8188:
      case 8189:
      case 8190:
      case 8255:
      case 8256:
      case 8257:
      case 8258:
      case 8259:
      case 8260:
      case 8261:
      case 8262:
      case 8269:
      case 8270:
      case 8271:
      case 8272:
      case 8273:
      case 8274:
      case 8275:
      case 8276:
      case 8277:
      case 8278:
      case 8279:
      case 8280:
      case 8289:
      case 8290:
      case 8291:
      case 8292:
      case 8293:
      case 8294:
      case 8295:
      case 8296:
      case 8297:
      case 8298:
      case 8299:
      case 8300:
        uint64_t v43 = 0x2D00000025;
        goto LABEL_301;
      case 67:
      case 2797:
      case 2798:
      case 2799:
      case 2800:
      case 2801:
      case 2802:
      case 2803:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
      case 4164:
      case 4183:
      case 4184:
      case 4269:
      case 4726:
      case 4981:
      case 6452:
      case 6453:
      case 6454:
      case 6455:
      case 8643:
      case 8645:
      case 8651:
        int v46 = 9;
LABEL_67:
        LODWORD(v187) = v46;
        unint64_t v47 = (uint64_t *)this;
        unsigned int v48 = 1;
        goto LABEL_68;
      case 69:
      case 12578:
      case 12590:
      case 12602:
      case 12614:
      case 12626:
      case 12640:
      case 12654:
      case 12666:
      case 12680:
      case 12694:
      case 12706:
      case 12716:
      case 12730:
      case 12744:
      case 12758:
      case 12770:
        uint64_t v4 = 0x2000000025;
        goto LABEL_4;
      case 120:
      case 121:
        uint64_t v187 = 0x2C00000016;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        *(_DWORD *)&v184[8] = 44;
        uint64_t v49 = 0x4100000025;
        goto LABEL_379;
      case 122:
      case 4332:
      case 4857:
      case 4859:
      case 4977:
      case 4979:
      case 8338:
      case 8339:
      case 9412:
      case 9652:
      case 9653:
      case 12325:
        LODWORD(v187) = 9;
        uint64_t v50 = (uint64_t *)this;
        unsigned int v51 = 2;
        goto LABEL_253;
      case 124:
      case 12766:
      case 12778:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v52 = &v183;
        int64_t v53 = (uint64_t *)this;
        unsigned int v54 = 5;
        goto LABEL_267;
      case 125:
      case 127:
      case 128:
      case 129:
      case 12558:
      case 12582:
      case 12594:
      case 12606:
      case 12618:
      case 12630:
      case 12644:
      case 12658:
      case 12670:
      case 12684:
      case 12698:
      case 12710:
      case 12720:
      case 12734:
      case 12748:
      case 12762:
      case 12774:
        int v33 = &xmmword_1CFAC8870;
        goto LABEL_43;
      case 131:
      case 243:
      case 940:
      case 971:
      case 1057:
      case 1059:
      case 1063:
      case 1065:
      case 1079:
      case 1080:
      case 1202:
      case 1205:
      case 1220:
      case 1221:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE103C;
        uint64_t v55 = 0x2C00000041;
        goto LABEL_91;
      case 132:
      case 134:
      case 135:
      case 174:
      case 264:
      case 265:
      case 303:
      case 304:
      case 431:
      case 673:
      case 697:
      case 743:
      case 817:
      case 840:
      case 891:
      case 941:
      case 972:
      case 975:
      case 995:
      case 997:
      case 1002:
      case 1028:
      case 1030:
      case 1032:
      case 1055:
      case 1058:
      case 1060:
      case 1062:
      case 1064:
      case 1066:
      case 1075:
      case 1077:
      case 1078:
      case 1081:
      case 1168:
      case 1170:
      case 1203:
      case 1206:
      case 1215:
      case 1217:
      case 1224:
      case 1255:
      case 1260:
        LODWORD(v187) = 9;
        uint64_t v36 = (uint64_t *)this;
        unsigned int v37 = 3;
        goto LABEL_53;
      case 136:
      case 348:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        int v27 = &xmmword_1CFAE1004;
        goto LABEL_35;
      case 137:
      case 374:
        LODWORD(v187) = 22;
        uint64_t v7 = 2;
        uint64_t v56 = (uint64_t *)this;
        unsigned int v57 = 2;
        uint64_t v58 = 1;
        goto LABEL_120;
      case 138:
      case 166:
        unint64_t v8 = &xmmword_1CFAE1068;
        goto LABEL_8;
      case 147:
      case 257:
      case 726:
      case 727:
      case 728:
      case 730:
      case 927:
        int v35 = 9;
        goto LABEL_52;
      case 150:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
      case 2395:
      case 2396:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2404:
      case 2405:
      case 2406:
      case 2407:
      case 3774:
      case 3775:
      case 3909:
      case 3910:
      case 3911:
      case 3912:
      case 3913:
      case 3914:
      case 3915:
      case 3916:
      case 3917:
      case 3918:
      case 3919:
      case 3920:
      case 3921:
      case 6447:
      case 6448:
      case 6449:
      case 6450:
      case 6451:
      case 6456:
      case 6457:
      case 6458:
      case 6460:
      case 8346:
      case 8347:
      case 8348:
      case 8351:
      case 8352:
      case 8718:
      case 8719:
      case 8720:
      case 8858:
      case 8859:
      case 8860:
      case 8861:
      case 8862:
      case 8863:
      case 8864:
      case 9675:
      case 9676:
      case 11169:
      case 11170:
      case 11171:
      case 11172:
      case 11224:
      case 11225:
      case 11226:
      case 11227:
        *(_DWORD *)&v184[8] = 3;
        uint64_t v9 = 0x2D00000025;
        goto LABEL_11;
      case 152:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 22;
        uint64_t v7 = 3;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        uint64_t v59 = 0x300000025;
        goto LABEL_255;
      case 155:
      case 156:
      case 8325:
      case 8840:
      case 8854:
      case 12068:
      case 12069:
      case 12070:
      case 12071:
        *(_DWORD *)v184 = 9;
        unsigned int v60 = (uint64_t *)this;
        unsigned int v61 = 3;
        goto LABEL_337;
      case 158:
      case 12568:
      case 12580:
      case 12592:
      case 12604:
      case 12616:
      case 12628:
      case 12642:
      case 12656:
      case 12668:
      case 12682:
      case 12696:
      case 12708:
      case 12718:
      case 12732:
      case 12746:
      case 12760:
      case 12772:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        LODWORD(v185) = 44;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v183 = 44;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, &v183, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F6C;
        uint64_t v62 = 0x300000041;
        goto LABEL_106;
      case 163:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 22;
        uint64_t v7 = 3;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F6C;
        *(void *)&v184[16] = 0x300000041;
        int v30 = (unsigned int *)v184;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 6;
        goto LABEL_41;
      case 164:
      case 167:
      case 168:
      case 12526:
      case 12536:
      case 12546:
      case 12556:
      case 12566:
      case 12576:
      case 12588:
      case 12600:
      case 12612:
      case 12624:
      case 12638:
      case 12652:
      case 12664:
      case 12678:
      case 12692:
      case 12704:
      case 12714:
      case 12728:
      case 12742:
      case 12756:
      case 12768:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 22;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F6C;
        uint64_t v11 = 0x300000041;
        goto LABEL_18;
      case 165:
        unint64_t v8 = &xmmword_1CFAE10A0;
        goto LABEL_8;
      case 178:
      case 179:
      case 270:
      case 289:
      case 292:
      case 293:
        *(void *)&v184[16] = 0x1800000041;
        uint64_t v28 = &xmmword_1CFAE10BC;
        goto LABEL_38;
      case 182:
      case 1089:
      case 1090:
      case 1092:
      case 1093:
      case 1094:
      case 1095:
      case 1100:
      case 1101:
      case 1103:
        unint64_t v8 = &xmmword_1CFAE0FB4;
        goto LABEL_8;
      case 183:
      case 448:
      case 852:
      case 877:
      case 1122:
      case 1123:
      case 1124:
        *(void *)&v184[16] = 0x2D00000041;
        uint64_t v28 = &xmmword_1CFAE0FEC;
        goto LABEL_38;
      case 184:
      case 1126:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0FEC;
        uint64_t v55 = 0x2D00000041;
LABEL_91:
        *(void *)&v184[16] = v55;
        uint64_t v63 = (unsigned int *)v184;
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 6;
        goto LABEL_369;
      case 185:
      case 1125:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        unsigned int v66 = &xmmword_1CFAE1004;
        goto LABEL_121;
      case 186:
      case 12554:
      case 12702:
      case 12740:
      case 12754:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F9C;
        uint64_t v21 = 0x4200000041;
        goto LABEL_30;
      case 187:
      case 12532:
      case 12662:
      case 12674:
      case 12688:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        int v27 = &xmmword_1CFAE0FB4;
        goto LABEL_35;
      case 188:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v7 = 5;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, &v182, 1);
        int v67 = &xmmword_1CFAE1004;
        goto LABEL_97;
      case 189:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 2);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v7 = 5;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, &v182, 1);
        int v67 = &xmmword_1CFAE0FB4;
LABEL_97:
        *(_OWORD *)v184 = *v67;
        *(_OWORD *)&v184[12] = *(long long *)((char *)v67 + 12);
        uint64_t v68 = (uint64_t *)this;
        uint64_t v69 = 7;
        goto LABEL_249;
      case 190:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v70 = (uint64_t *)this;
        unsigned int v71 = 5;
        goto LABEL_104;
      case 191:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAE1084;
        *(_OWORD *)&v184[12] = *(long long *)((char *)&xmmword_1CFAE1084 + 12);
        int v12 = (unsigned int *)v184;
        int v13 = (uint64_t *)this;
        uint64_t v14 = 7;
        goto LABEL_19;
      case 194:
        int v188 = 66;
        uint64_t v187 = 0x1300000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 3);
        int v186 = 45;
        uint64_t v185 = 0x1300000016;
        int v16 = (uint64_t *)this;
        uint64_t v17 = 3;
        goto LABEL_25;
      case 195:
      case 198:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        uint64_t v185 = 0x2D00000016;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 2);
        unsigned int v183 = 9;
        uint64_t v7 = 4;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unint64_t v18 = &xmmword_1CFAC8850;
        goto LABEL_26;
      case 196:
        int v188 = 66;
        uint64_t v187 = 0x1300000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 3);
        int v186 = 45;
        uint64_t v185 = 0x1300000016;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 3);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, &v182, 1);
        uint64_t v72 = &xmmword_1CFAC8840;
        goto LABEL_158;
      case 197:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        uint64_t v185 = 0x2D00000016;
        int v16 = (uint64_t *)this;
        uint64_t v17 = 2;
LABEL_25:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v16, 2u, (unsigned int *)&v185, v17);
        unsigned int v183 = 9;
        uint64_t v7 = 4;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unint64_t v18 = &xmmword_1CFAC8840;
        goto LABEL_26;
      case 199:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        int v29 = &xmmword_1CFAE0F2C;
        goto LABEL_40;
      case 200:
        uint64_t v187 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        int v29 = &xmmword_1CFAE0F40;
LABEL_40:
        *(_OWORD *)v184 = *v29;
        uint64_t v7 = 3;
        *(_DWORD *)&v184[16] = 3;
        int v30 = (unsigned int *)v184;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 5;
        goto LABEL_41;
      case 236:
      case 12530:
      case 12552:
      case 12724:
      case 12738:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v70 = (uint64_t *)this;
        unsigned int v71 = 4;
LABEL_104:
        *(void *)&long long v190 = llvm::AttributeList::get(v70, v71, &v183, 1);
        *(_OWORD *)v184 = xmmword_1CFAE1084;
        *(_OWORD *)&v184[12] = *(long long *)((char *)&xmmword_1CFAE1084 + 12);
        uint64_t v52 = (unsigned int *)v184;
        int64_t v53 = (uint64_t *)this;
        unsigned int v54 = -1;
        uint64_t v73 = 7;
        goto LABEL_203;
      case 240:
        uint64_t v187 = 0x2D00000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, &v183, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F54;
        uint64_t v62 = 0xC00000041;
LABEL_106:
        *(void *)&v184[16] = v62;
        uint64_t v52 = (unsigned int *)v184;
        int64_t v53 = (uint64_t *)this;
        unsigned int v54 = -1;
        uint64_t v73 = 6;
        goto LABEL_203;
      case 241:
      case 242:
      case 1003:
      case 1004:
      case 1005:
      case 1006:
      case 1007:
      case 1008:
      case 1009:
      case 1010:
      case 1014:
      case 1015:
      case 1016:
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1044:
      case 1045:
      case 1046:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1198:
      case 1199:
      case 1200:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unint64_t v74 = (uint64_t *)this;
        unsigned int v75 = 3;
        goto LABEL_129;
      case 246:
      case 249:
      case 251:
      case 4093:
      case 4112:
      case 4118:
      case 4142:
      case 4180:
      case 4181:
      case 4255:
      case 4258:
      case 4260:
      case 4262:
      case 4264:
      case 4266:
      case 4268:
      case 4270:
      case 4271:
      case 4277:
      case 4279:
      case 4280:
      case 4281:
      case 4286:
      case 4288:
      case 4289:
      case 4290:
      case 4291:
      case 4292:
      case 4293:
      case 4294:
      case 4295:
      case 4306:
      case 4307:
      case 4309:
      case 4315:
      case 4318:
      case 4320:
      case 4321:
      case 4323:
      case 4326:
      case 4334:
      case 4349:
      case 4351:
      case 4353:
      case 4357:
      case 4613:
      case 4725:
      case 4780:
      case 4786:
      case 4791:
      case 4793:
      case 4794:
      case 4809:
      case 4814:
      case 4815:
      case 4816:
      case 4821:
      case 4822:
      case 4823:
      case 4824:
      case 4825:
      case 4850:
      case 4880:
      case 4886:
      case 4892:
      case 4893:
      case 4910:
      case 4938:
      case 4940:
      case 4974:
      case 4975:
      case 4982:
      case 4991:
      case 5002:
      case 5003:
      case 5005:
      case 5006:
      case 5012:
      case 6102:
      case 6103:
      case 6104:
      case 6105:
      case 6108:
      case 6139:
      case 6140:
      case 6141:
      case 6142:
      case 6168:
      case 6169:
      case 6170:
      case 6171:
      case 6184:
      case 6185:
      case 6186:
      case 6187:
      case 6197:
      case 6198:
      case 6199:
      case 6200:
      case 6210:
      case 6211:
      case 6212:
      case 6213:
      case 6214:
      case 6215:
      case 6216:
      case 6217:
      case 6226:
      case 6227:
      case 6228:
      case 6229:
      case 6230:
      case 6231:
      case 6232:
      case 6233:
      case 6443:
      case 6444:
      case 6445:
      case 6446:
      case 6487:
      case 6488:
      case 6489:
      case 6490:
      case 6491:
      case 6492:
      case 6493:
      case 6494:
      case 6507:
      case 6508:
      case 6509:
      case 6510:
      case 6511:
      case 6512:
      case 6513:
      case 6514:
      case 6567:
      case 6569:
      case 6607:
      case 6608:
      case 6609:
      case 6610:
      case 6611:
      case 6612:
      case 6613:
      case 6614:
      case 6615:
      case 6616:
      case 6617:
      case 6642:
      case 6643:
      case 6644:
      case 6645:
      case 6650:
      case 6651:
      case 6652:
      case 6653:
      case 6658:
      case 6659:
      case 6660:
      case 6661:
      case 6666:
      case 6667:
      case 6668:
      case 6669:
      case 6674:
      case 6675:
      case 6676:
      case 6677:
      case 6682:
      case 6683:
      case 6684:
      case 6685:
      case 6725:
      case 6726:
      case 6727:
      case 6728:
      case 6735:
      case 8386:
      case 8388:
      case 8443:
      case 8444:
      case 8445:
      case 8446:
      case 8447:
      case 8448:
      case 8483:
      case 8843:
      case 8844:
      case 8919:
      case 8920:
      case 9553:
      case 9584:
      case 9594:
      case 9595:
      case 9596:
      case 9658:
      case 9659:
      case 11060:
      case 11148:
      case 11187:
      case 11188:
      case 11302:
      case 11303:
      case 11304:
      case 11305:
      case 11306:
      case 11307:
      case 11308:
      case 11309:
      case 11320:
      case 11321:
      case 11322:
      case 11323:
      case 11324:
      case 11325:
      case 11439:
      case 11440:
      case 11473:
      case 11474:
      case 11476:
      case 11477:
      case 11599:
      case 11600:
      case 11602:
      case 11603:
      case 11607:
      case 11608:
      case 11610:
      case 11611:
      case 11652:
      case 11653:
      case 11654:
      case 11794:
      case 11795:
      case 11796:
      case 11799:
      case 11802:
      case 11803:
      case 11804:
      case 11805:
      case 11806:
      case 11807:
      case 11808:
      case 11809:
      case 11874:
      case 11875:
      case 11876:
      case 11883:
      case 11888:
      case 11889:
      case 11899:
      case 11900:
      case 11903:
      case 11904:
      case 12006:
      case 12009:
      case 12010:
      case 12011:
      case 12012:
      case 12015:
      case 12016:
      case 12017:
      case 12018:
      case 12098:
      case 12208:
      case 12302:
      case 12303:
      case 12359:
      case 12360:
      case 12384:
      case 12385:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        uint64_t v76 = 0x2C00000025;
        goto LABEL_314;
      case 248:
        LODWORD(v187) = 9;
        uint64_t v77 = (uint64_t *)this;
        unsigned int v78 = 2;
        goto LABEL_257;
      case 254:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1298:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1350:
      case 1351:
      case 1352:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1406:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1413:
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1438:
      case 1439:
      case 1440:
      case 1441:
      case 1442:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1449:
      case 1450:
      case 1451:
      case 1452:
      case 1453:
      case 1454:
      case 1455:
      case 1456:
      case 1457:
      case 1458:
      case 1459:
      case 1460:
      case 1461:
      case 1462:
      case 1463:
      case 1464:
      case 1465:
      case 1466:
      case 1467:
      case 1468:
      case 1469:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1494:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1501:
      case 1502:
      case 1503:
      case 1504:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1509:
      case 1510:
      case 1511:
      case 1512:
      case 1513:
      case 1514:
      case 1515:
      case 1516:
      case 1517:
      case 1536:
      case 1537:
      case 1542:
      case 1543:
      case 1550:
      case 1551:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1578:
      case 1579:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1598:
      case 1599:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1642:
      case 1643:
      case 1646:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1653:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1678:
      case 1679:
      case 1994:
      case 1995:
      case 2011:
      case 2012:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2028:
      case 2030:
      case 2031:
      case 2032:
      case 2033:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2044:
      case 2046:
      case 2047:
      case 2048:
      case 2049:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2060:
      case 2062:
      case 2063:
      case 2064:
      case 2065:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2076:
      case 2078:
      case 2079:
      case 2080:
      case 2081:
      case 2083:
      case 2084:
      case 2085:
      case 2134:
      case 2135:
      case 2136:
      case 2137:
      case 2138:
      case 2140:
      case 2544:
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2574:
      case 2575:
      case 2576:
      case 2706:
      case 2707:
      case 2708:
      case 2733:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
      case 2784:
      case 2785:
      case 2786:
      case 3776:
      case 3777:
      case 3778:
      case 3779:
      case 3780:
      case 3781:
      case 4011:
      case 4088:
      case 4089:
      case 4090:
      case 4424:
      case 4427:
      case 4430:
      case 4433:
      case 4436:
      case 4439:
      case 6177:
      case 6442:
      case 6583:
      case 6584:
      case 9810:
      case 9811:
      case 10677:
      case 10678:
      case 10679:
      case 10680:
      case 10681:
      case 10682:
      case 10683:
      case 10684:
      case 10685:
      case 10686:
      case 10687:
      case 10688:
      case 10689:
      case 10690:
      case 10691:
      case 10692:
      case 10693:
      case 10694:
      case 10695:
      case 10696:
      case 10697:
      case 10698:
      case 10699:
      case 10700:
      case 10701:
      case 10702:
      case 10703:
      case 10704:
      case 10705:
      case 10706:
      case 10707:
      case 10708:
      case 10709:
      case 10710:
      case 10711:
      case 10712:
      case 10713:
      case 10714:
      case 10715:
      case 10716:
      case 10717:
      case 10718:
      case 10719:
      case 10720:
      case 10721:
      case 10722:
      case 10723:
      case 10724:
      case 10725:
      case 10726:
      case 10727:
      case 10728:
      case 10729:
      case 10730:
      case 10731:
      case 10732:
      case 10733:
      case 10734:
      case 10735:
      case 10736:
      case 10737:
      case 10738:
      case 10739:
      case 10740:
      case 11067:
      case 11092:
      case 11095:
      case 11168:
      case 12287:
      case 12523:
        uint64_t v4 = 0x2D00000025;
        goto LABEL_4;
      case 268:
      case 269:
        int v79 = 66;
        goto LABEL_219;
      case 276:
      case 277:
      case 307:
      case 308:
        LODWORD(v187) = 9;
        uint64_t v25 = (uint64_t *)this;
        unsigned int v26 = 3;
        goto LABEL_34;
      case 281:
      case 12528:
      case 12538:
      case 12548:
      case 12560:
      case 12570:
      case 12584:
      case 12596:
      case 12608:
      case 12620:
      case 12632:
      case 12646:
      case 12660:
      case 12672:
      case 12686:
      case 12700:
      case 12712:
      case 12722:
      case 12736:
      case 12750:
      case 12764:
      case 12776:
        int v35 = 46;
LABEL_52:
        LODWORD(v187) = v35;
        uint64_t v36 = (uint64_t *)this;
        unsigned int v37 = 1;
        goto LABEL_53;
      case 295:
      case 2912:
      case 12542:
      case 12562:
      case 12572:
      case 12622:
      case 12634:
      case 12648:
        *(_DWORD *)&v184[8] = 5;
        uint64_t v9 = 0x2000000025;
        goto LABEL_11;
      case 302:
      case 387:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 5;
        uint64_t v80 = 0x2000000025;
        goto LABEL_236;
      case 367:
        *(void *)&v184[16] = 0x300000041;
        uint64_t v28 = &xmmword_1CFAE0F6C;
        goto LABEL_38;
      case 384:
        *(void *)v184 = 0x2D00000016;
        uint64_t v7 = 2;
        uint64_t v81 = (uint64_t *)this;
        unsigned int v82 = 1;
        goto LABEL_116;
      case 385:
        *(void *)v184 = 0x2D00000016;
        uint64_t v7 = 2;
        uint64_t v81 = (uint64_t *)this;
        unsigned int v82 = 2;
LABEL_116:
        *(void *)&long long v189 = llvm::AttributeList::get(v81, v82, (unsigned int *)v184, 2);
        uint64_t v83 = 0x4200000025;
        goto LABEL_293;
      case 425:
      case 426:
      case 427:
      case 428:
      case 4995:
      case 5057:
      case 5058:
      case 5061:
      case 5062:
      case 5581:
      case 5582:
      case 5591:
      case 5592:
      case 5835:
      case 5836:
      case 5855:
      case 5856:
      case 5879:
      case 5880:
      case 8929:
      case 8937:
      case 9201:
      case 9598:
      case 9599:
      case 9600:
      case 9601:
      case 9713:
      case 9746:
      case 9747:
      case 9748:
      case 9749:
      case 9750:
      case 9751:
      case 9752:
      case 9753:
      case 9754:
      case 9755:
      case 9756:
      case 9757:
      case 11318:
      case 11319:
      case 11378:
      case 11380:
      case 11383:
      case 11386:
      case 11389:
      case 11392:
      case 11393:
      case 11396:
      case 11399:
      case 11402:
      case 11407:
      case 11410:
      case 11413:
      case 11416:
      case 11417:
      case 11420:
      case 11423:
      case 11426:
      case 11431:
      case 11432:
      case 11434:
      case 11435:
      case 11467:
      case 11470:
      case 11651:
      case 11655:
      case 11656:
      case 11658:
      case 11659:
      case 11736:
      case 11737:
      case 11738:
      case 11739:
      case 11740:
      case 11741:
      case 11750:
      case 11751:
      case 11762:
      case 11763:
      case 11810:
      case 11811:
      case 11812:
      case 11813:
      case 11814:
      case 11815:
      case 11886:
      case 11920:
      case 11923:
      case 11926:
      case 11929:
      case 11932:
      case 11935:
      case 11938:
      case 11941:
      case 11944:
      case 11947:
      case 11956:
      case 11959:
      case 11962:
      case 11965:
      case 11968:
      case 11971:
      case 12021:
      case 12022:
      case 12025:
      case 12416:
      case 12417:
      case 12418:
      case 12419:
        LODWORD(v187) = 9;
        unint64_t v47 = (uint64_t *)this;
        unsigned int v48 = 4;
        goto LABEL_68;
      case 432:
      case 433:
      case 444:
      case 446:
      case 447:
      case 449:
      case 450:
      case 648:
      case 649:
      case 650:
      case 651:
        *(_DWORD *)&v184[8] = 65;
        uint64_t v9 = 0x1900000025;
        goto LABEL_11;
      case 451:
      case 638:
      case 639:
      case 647:
        uint64_t v187 = 0x4200000016;
        uint64_t v7 = 2;
        uint64_t v56 = (uint64_t *)this;
        unsigned int v57 = 1;
        uint64_t v58 = 2;
LABEL_120:
        *(void *)&long long v189 = llvm::AttributeList::get(v56, v57, (unsigned int *)&v187, v58);
        unsigned int v66 = &xmmword_1CFAE0FB4;
LABEL_121:
        *(_OWORD *)v184 = *v66;
        *(_OWORD *)&v184[12] = *(long long *)((char *)v66 + 12);
        uint64_t v63 = (unsigned int *)v184;
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 7;
        goto LABEL_369;
      case 569:
      case 572:
      case 1088:
      case 1099:
        int v84 = 22;
        goto LABEL_133;
      case 570:
      case 573:
      case 574:
      case 1096:
        LODWORD(v187) = 22;
        uint64_t v85 = (uint64_t *)this;
        unsigned int v86 = 4;
        goto LABEL_134;
      case 571:
      case 575:
      case 576:
      case 1097:
        LODWORD(v187) = 22;
        uint64_t v85 = (uint64_t *)this;
        unsigned int v86 = 5;
        goto LABEL_134;
      case 577:
      case 1098:
        LODWORD(v187) = 22;
        uint64_t v85 = (uint64_t *)this;
        unsigned int v86 = 6;
        goto LABEL_134;
      case 646:
      case 1091:
      case 1102:
        *(void *)&v184[16] = 0x4200000041;
        uint64_t v28 = &xmmword_1CFAE0F9C;
        goto LABEL_38;
      case 678:
      case 680:
      case 682:
      case 698:
      case 707:
      case 752:
      case 803:
      case 805:
      case 807:
      case 809:
      case 811:
      case 813:
      case 886:
      case 888:
      case 967:
      case 985:
      case 987:
      case 989:
      case 991:
      case 1018:
      case 1021:
      case 1023:
      case 1026:
      case 1049:
      case 1051:
      case 1053:
      case 1108:
      case 1147:
      case 1158:
      case 1160:
      case 1162:
      case 1164:
      case 1219:
        LODWORD(v187) = 9;
        uint64_t v36 = (uint64_t *)this;
        unsigned int v37 = 4;
        goto LABEL_53;
      case 699:
      case 706:
      case 754:
      case 1048:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unint64_t v74 = (uint64_t *)this;
        unsigned int v75 = 5;
LABEL_129:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v74, v75, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAE103C;
        uint64_t v11 = 0x2C00000041;
        goto LABEL_18;
      case 753:
        LODWORD(v187) = 9;
        uint64_t v36 = (uint64_t *)this;
        unsigned int v37 = 5;
LABEL_53:
        *(void *)&long long v189 = llvm::AttributeList::get(v36, v37, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE103C;
        uint64_t v21 = 0x2C00000041;
        goto LABEL_30;
      case 865:
      case 866:
      case 867:
      case 868:
      case 869:
      case 870:
      case 871:
      case 872:
      case 873:
        *(void *)&v184[16] = 0xC00000041;
        uint64_t v28 = &xmmword_1CFAE0F54;
LABEL_38:
        *(_OWORD *)v184 = *v28;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 6;
        goto LABEL_5;
      case 907:
        int v84 = 9;
LABEL_133:
        LODWORD(v187) = v84;
        uint64_t v85 = (uint64_t *)this;
        unsigned int v86 = 3;
LABEL_134:
        *(void *)&long long v189 = llvm::AttributeList::get(v85, v86, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F6C;
        uint64_t v21 = 0x300000041;
        goto LABEL_30;
      case 908:
      case 910:
      case 911:
      case 912:
      case 914:
      case 915:
      case 916:
      case 918:
      case 919:
      case 920:
      case 922:
      case 923:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F54;
        uint64_t v11 = 0xC00000041;
LABEL_18:
        *(void *)&v184[16] = v11;
        int v12 = (unsigned int *)v184;
        int v13 = (uint64_t *)this;
        uint64_t v14 = 6;
        goto LABEL_19;
      case 909:
      case 913:
      case 917:
      case 921:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0F54;
        uint64_t v21 = 0xC00000041;
LABEL_30:
        *(void *)&v184[16] = v21;
        uint64_t v22 = (unsigned int *)v184;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 6;
        goto LABEL_31;
      case 934:
      case 935:
        unint64_t v8 = &xmmword_1CFAE1020;
        goto LABEL_8;
      case 969:
      case 1254:
        unint64_t v8 = &xmmword_1CFAE0FD0;
LABEL_8:
        *(_OWORD *)v184 = *v8;
        *(_OWORD *)&v184[12] = *(long long *)((char *)v8 + 12);
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 7;
        goto LABEL_5;
      case 1261:
      case 3517:
      case 3521:
      case 3526:
      case 3527:
      case 3528:
      case 3529:
      case 3530:
        LODWORD(v187) = 9;
        uint64_t v38 = (uint64_t *)this;
        unsigned int v39 = 1;
        goto LABEL_56;
      case 1262:
      case 1263:
      case 1264:
      case 2873:
      case 2874:
      case 2875:
      case 3513:
      case 3514:
      case 3515:
      case 3516:
      case 3522:
      case 3523:
      case 8944:
      case 8945:
      case 8963:
      case 8964:
        uint64_t v4 = 0x4100000025;
        goto LABEL_4;
      case 1271:
      case 1272:
      case 1273:
      case 1274:
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1836:
      case 1837:
      case 2029:
      case 2034:
      case 2045:
      case 2050:
      case 2061:
      case 2066:
      case 2077:
      case 2082:
      case 2105:
      case 2148:
      case 2149:
      case 2153:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 3982:
      case 3986:
      case 3987:
      case 3988:
      case 3989:
      case 3990:
      case 3991:
      case 5481:
      case 5482:
      case 5483:
      case 5484:
      case 5485:
      case 5486:
      case 5487:
      case 5488:
      case 5489:
      case 5490:
      case 5491:
      case 5492:
      case 6044:
      case 6045:
      case 6046:
      case 6047:
      case 6048:
      case 6049:
      case 6686:
      case 6687:
      case 6688:
      case 6689:
      case 6690:
      case 6691:
      case 8665:
      case 8666:
      case 8667:
      case 8668:
      case 8671:
      case 11173:
      case 11174:
      case 11175:
      case 11176:
      case 11228:
      case 11229:
      case 11230:
      case 11231:
      case 11490:
      case 11491:
      case 11492:
      case 11496:
      case 11497:
      case 11498:
      case 11502:
      case 11503:
      case 11504:
      case 11506:
      case 11507:
      case 11508:
      case 11512:
      case 11513:
      case 11514:
      case 11516:
      case 11517:
      case 11518:
      case 11522:
      case 11523:
      case 11524:
      case 11528:
      case 11529:
      case 11530:
      case 11534:
      case 11535:
      case 11536:
      case 11540:
      case 11541:
      case 11542:
      case 11546:
      case 11547:
      case 11548:
      case 11552:
      case 11553:
      case 11554:
      case 11558:
      case 11559:
      case 11560:
      case 11564:
      case 11565:
      case 11566:
      case 11570:
      case 11571:
      case 11572:
      case 11576:
      case 11577:
      case 11578:
      case 11582:
      case 11583:
      case 11584:
      case 11588:
      case 11589:
      case 11590:
        uint64_t v4 = 0x300000025;
        goto LABEL_4;
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1287:
      case 1288:
      case 1289:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1342:
      case 1343:
      case 1344:
      case 1345:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1377:
      case 1378:
      case 1379:
      case 1384:
      case 1385:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1422:
      case 1423:
      case 1424:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1431:
      case 1432:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1470:
      case 1471:
      case 1472:
      case 1473:
      case 1474:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1484:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1490:
      case 1491:
      case 1492:
      case 1493:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1522:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1570:
      case 1571:
      case 1572:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1594:
      case 1595:
      case 1596:
      case 1597:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1634:
      case 1635:
      case 1636:
      case 1637:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1644:
      case 1645:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1670:
      case 1671:
      case 1672:
      case 1673:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1680:
      case 1681:
      case 1884:
      case 2306:
      case 2824:
      case 2825:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
        int v10 = 45;
        goto LABEL_14;
      case 1824:
      case 1825:
      case 1826:
      case 2157:
      case 2158:
      case 6061:
      case 7186:
      case 7187:
      case 7241:
      case 7242:
      case 7243:
      case 7244:
        uint64_t v4 = 0xB00000025;
        goto LABEL_4;
      case 1827:
      case 1830:
      case 1847:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 2009:
      case 2010:
      case 2013:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2087:
      case 2088:
      case 2089:
      case 2090:
      case 2091:
      case 2092:
      case 2093:
      case 2094:
      case 2095:
      case 2096:
      case 2097:
      case 2131:
      case 2168:
      case 2442:
      case 2443:
      case 2524:
      case 2527:
      case 2578:
      case 2623:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2629:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2705:
      case 2744:
      case 2745:
      case 2749:
      case 2769:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2789:
      case 2790:
      case 2794:
      case 2804:
      case 2805:
      case 2806:
      case 2807:
      case 2808:
      case 2809:
      case 2810:
      case 2814:
      case 2815:
      case 2816:
      case 2820:
      case 2822:
      case 2823:
      case 2841:
      case 2848:
      case 7168:
      case 7188:
      case 7189:
      case 7190:
      case 7191:
      case 7231:
      case 7232:
      case 7233:
      case 7234:
      case 7236:
      case 7237:
      case 7238:
      case 7239:
      case 7246:
      case 7247:
      case 7248:
      case 7249:
      case 9031:
      case 9032:
      case 9033:
      case 9034:
      case 9046:
      case 9047:
      case 11047:
      case 11048:
      case 11049:
      case 11050:
      case 11051:
      case 11053:
      case 11054:
      case 11055:
      case 11056:
      case 11057:
      case 11061:
      case 11068:
      case 11069:
      case 11070:
      case 11071:
      case 11072:
      case 11075:
      case 11076:
      case 11077:
      case 11078:
      case 11079:
      case 11080:
      case 11081:
      case 11083:
      case 11084:
      case 11085:
      case 11086:
      case 11094:
      case 11096:
      case 11097:
      case 11098:
        *(_DWORD *)&v184[8] = 44;
        uint64_t v9 = 0x3800000025;
        goto LABEL_11;
      case 1828:
      case 1829:
      case 2780:
      case 2781:
      case 2782:
      case 2813:
      case 2817:
        int v33 = &xmmword_1CFAC8860;
        goto LABEL_43;
      case 1990:
      case 1991:
      case 2003:
      case 2007:
      case 2159:
      case 2160:
      case 2161:
      case 2162:
      case 2449:
      case 2450:
      case 2484:
      case 2485:
      case 2488:
      case 2489:
      case 2490:
      case 2493:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2514:
      case 2515:
      case 2516:
      case 2522:
      case 2579:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2606:
      case 2607:
      case 2608:
      case 2609:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2614:
      case 2615:
      case 2616:
      case 2617:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2677:
      case 2678:
      case 2746:
      case 2747:
      case 2748:
      case 7054:
        int v10 = 44;
        goto LABEL_14;
      case 2014:
      case 2738:
      case 2739:
      case 2740:
      case 2741:
      case 2742:
      case 2743:
      case 2750:
      case 2774:
      case 2775:
      case 2776:
      case 2777:
      case 2778:
      case 2779:
      case 2787:
      case 2788:
      case 2791:
      case 2793:
      case 2818:
      case 2819:
      case 2846:
      case 2847:
      case 2850:
      case 2851:
        int v15 = 6;
        goto LABEL_21;
      case 2111:
      case 2112:
      case 2113:
      case 2114:
        *(_DWORD *)&v184[8] = 3;
        goto LABEL_15;
      case 2143:
        LODWORD(v187) = 66;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        int v87 = 45;
        goto LABEL_306;
      case 2144:
      case 2792:
      case 2838:
      case 2839:
      case 2840:
      case 3850:
      case 3851:
      case 3852:
      case 3853:
      case 3854:
      case 3855:
      case 4916:
      case 4919:
      case 4922:
      case 4925:
      case 4928:
      case 5105:
      case 5106:
      case 5113:
      case 5114:
      case 5121:
      case 5122:
      case 5129:
      case 5130:
      case 5595:
      case 5596:
      case 5597:
      case 5598:
      case 5599:
      case 5600:
      case 5601:
      case 5602:
      case 5891:
      case 5892:
      case 5893:
      case 5894:
      case 5895:
      case 5896:
      case 5897:
      case 5898:
      case 5899:
      case 5900:
      case 5901:
      case 5902:
      case 5903:
      case 5904:
      case 5905:
      case 5906:
      case 5907:
      case 5908:
      case 8823:
      case 8824:
      case 8825:
      case 8826:
      case 8827:
      case 8828:
      case 8829:
      case 8830:
      case 10876:
      case 10877:
      case 10878:
      case 10879:
      case 10880:
      case 10881:
      case 10882:
      case 10883:
      case 10884:
      case 10885:
      case 10886:
      case 10887:
      case 10888:
      case 10889:
      case 10890:
      case 10891:
      case 10892:
      case 10893:
      case 10894:
      case 10895:
      case 10896:
      case 10897:
      case 10898:
      case 10899:
      case 10955:
      case 10956:
      case 10957:
      case 10958:
      case 10959:
      case 10960:
      case 10961:
      case 10962:
      case 10963:
      case 10964:
      case 10965:
      case 10966:
      case 10967:
      case 10968:
      case 10969:
      case 10970:
      case 10971:
      case 10972:
      case 10973:
      case 10974:
      case 10975:
      case 10976:
      case 10977:
      case 10978:
      case 10979:
      case 10980:
      case 10981:
      case 10982:
      case 10983:
      case 10984:
      case 10985:
      case 10986:
      case 10987:
      case 10988:
      case 10989:
      case 10990:
      case 10991:
      case 10992:
      case 10993:
      case 10994:
      case 10995:
      case 10996:
      case 10997:
      case 10998:
      case 10999:
      case 11000:
      case 11001:
      case 11002:
        uint64_t v4 = 0x4200000025;
        goto LABEL_4;
      case 2577:
      case 2622:
      case 2664:
      case 2668:
      case 3580:
      case 6774:
      case 6775:
      case 6776:
      case 6777:
      case 6778:
      case 6779:
      case 6780:
      case 6781:
      case 6782:
      case 6783:
      case 6800:
      case 6801:
      case 6802:
      case 6803:
      case 7042:
      case 7043:
      case 7044:
      case 7045:
      case 7046:
      case 7047:
      case 7048:
      case 7049:
      case 7050:
      case 7051:
      case 7055:
      case 7056:
        uint64_t v4 = 0x600000025;
        goto LABEL_4;
      case 2751:
      case 2752:
      case 2753:
      case 2756:
      case 2757:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2766:
      case 2767:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        *(_DWORD *)&v184[8] = 44;
        uint64_t v34 = 0x600000025;
        goto LABEL_46;
      case 2754:
      case 2755:
        int v15 = 44;
        goto LABEL_21;
      case 2852:
      case 2876:
      case 2877:
      case 2878:
      case 2879:
      case 2880:
      case 2881:
      case 2882:
      case 2883:
      case 2884:
      case 2885:
      case 2886:
      case 2887:
      case 2888:
      case 2890:
      case 2891:
      case 2916:
      case 2922:
      case 2923:
      case 2924:
      case 2925:
      case 2926:
      case 2927:
      case 2928:
      case 2934:
      case 3428:
      case 3429:
      case 3431:
      case 3468:
      case 3469:
      case 3470:
      case 3471:
      case 3472:
      case 3473:
      case 3474:
      case 3475:
      case 3479:
      case 3503:
      case 3504:
      case 3507:
      case 3508:
      case 3509:
      case 3510:
      case 3519:
      case 3531:
      case 3532:
      case 3533:
      case 3534:
      case 3539:
      case 3540:
      case 3547:
      case 3548:
      case 3575:
      case 3576:
      case 3583:
      case 3584:
      case 3585:
      case 3586:
      case 3587:
      case 3588:
      case 3589:
      case 3590:
      case 8938:
      case 8941:
      case 8943:
      case 8946:
      case 8947:
      case 8948:
      case 8949:
      case 8950:
      case 8951:
      case 8952:
      case 8953:
      case 8954:
      case 8955:
      case 8956:
      case 8957:
      case 8958:
      case 8959:
      case 8960:
      case 8961:
      case 8962:
      case 8977:
      case 8978:
      case 8979:
      case 8980:
      case 8981:
      case 8983:
      case 8984:
      case 8985:
      case 8986:
      case 8987:
      case 8988:
      case 8989:
      case 8990:
      case 8991:
      case 8992:
      case 8993:
      case 8994:
      case 8995:
      case 8996:
      case 8997:
      case 8998:
      case 8999:
      case 9000:
      case 9001:
      case 9002:
      case 9023:
      case 9035:
      case 9036:
      case 9037:
      case 9038:
      case 9039:
      case 9040:
      case 9041:
      case 9042:
      case 9043:
      case 9044:
      case 9045:
      case 9050:
      case 9051:
      case 9544:
      case 9545:
      case 9546:
      case 9547:
      case 9548:
      case 9549:
      case 9550:
        int v33 = &xmmword_1CFAC8800;
        goto LABEL_43;
      case 2853:
      case 2854:
      case 2896:
      case 2898:
      case 2899:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v7 = 5;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, &v182, 1);
        *(_DWORD *)&v184[8] = 3;
        goto LABEL_188;
      case 2855:
      case 2894:
      case 2908:
      case 2937:
      case 3505:
      case 3506:
      case 3538:
      case 3592:
      case 3593:
        int v33 = &xmmword_1CFAC8830;
        goto LABEL_43;
      case 2856:
      case 2857:
      case 2859:
      case 2860:
      case 2861:
      case 2862:
      case 2863:
      case 2864:
      case 2865:
      case 2866:
      case 2867:
      case 2868:
      case 3481:
      case 3482:
      case 3484:
      case 3485:
      case 3486:
      case 3487:
      case 3488:
      case 3489:
      case 3490:
      case 3491:
      case 3492:
      case 3493:
      case 3494:
      case 3495:
      case 3496:
        LODWORD(v187) = 9;
        uint64_t v38 = (uint64_t *)this;
        unsigned int v39 = 5;
        goto LABEL_56;
      case 2858:
      case 3483:
      case 3551:
      case 3552:
      case 3554:
      case 3555:
      case 3556:
      case 3557:
      case 3558:
      case 3559:
      case 3560:
      case 3561:
      case 3562:
      case 3563:
      case 3564:
      case 3565:
      case 3566:
        LODWORD(v187) = 9;
        uint64_t v38 = (uint64_t *)this;
        unsigned int v39 = 6;
        goto LABEL_56;
      case 2869:
      case 2870:
      case 3501:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v88 = (uint64_t *)this;
        unsigned int v89 = 5;
        goto LABEL_238;
      case 2871:
      case 2872:
      case 3502:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v90 = (uint64_t *)this;
        unsigned int v91 = 6;
        goto LABEL_240;
      case 2889:
      case 3415:
      case 3416:
      case 3426:
      case 3480:
        LODWORD(v185) = 74;
        uint64_t v187 = 4;
        uint64_t v92 = llvm::AttributeList::get((uint64_t *)this, 0, (unsigned int *)&v185, 1, &v187);
        goto LABEL_215;
      case 2892:
      case 8973:
      case 8974:
      case 8975:
      case 8976:
      case 9048:
      case 9049:
        LODWORD(v187) = 9;
        uint64_t v93 = (uint64_t *)this;
        unsigned int v94 = 3;
        goto LABEL_214;
      case 2893:
      case 2895:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v95 = &xmmword_1CFAC8810;
        goto LABEL_223;
      case 2897:
      case 2918:
      case 2919:
      case 2920:
      case 2921:
      case 2929:
      case 2930:
      case 2931:
      case 2932:
      case 2933:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 3;
        goto LABEL_235;
      case 2900:
      case 2902:
      case 2903:
      case 2904:
      case 2905:
        int v33 = &xmmword_1CFAC8820;
        goto LABEL_43;
      case 2901:
        *(_DWORD *)&v184[16] = 11;
        unsigned int v96 = &xmmword_1CFAE0F04;
        goto LABEL_403;
      case 2906:
      case 2907:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, &v182, 1);
        unsigned int v181 = 9;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 6u, &v181, 1);
        unsigned int v180 = 9;
        *((void *)&v191 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, &v180, 1);
        unsigned int v179 = 9;
        uint64_t v7 = 8;
        *(void *)&long long v192 = llvm::AttributeList::get((uint64_t *)this, 8u, &v179, 1);
        *(void *)v184 = 0x4100000025;
        *((void *)&v192 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xFFFFFFFF, (unsigned int *)v184, 2);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 2909:
      case 3467:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        v97 = &xmmword_1CFAC8830;
        goto LABEL_309;
      case 2910:
      case 2911:
      case 2936:
      case 3432:
      case 3511:
      case 3582:
      case 8942:
        int v79 = 6;
        goto LABEL_219;
      case 2913:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 7u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 8u, &v182, 1);
        uint64_t v72 = &xmmword_1CFAC87E0;
LABEL_158:
        *(_OWORD *)v184 = *v72;
        uint64_t v98 = (uint64_t *)this;
        uint64_t v99 = 4;
        goto LABEL_196;
      case 2914:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v7 = 5;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, &v182, 1);
        int v100 = &xmmword_1CFAC87E0;
        goto LABEL_248;
      case 2915:
      case 2935:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        int v101 = &xmmword_1CFAC8830;
        goto LABEL_216;
      case 2917:
      case 3535:
      case 3536:
      case 3537:
      case 3577:
      case 3578:
      case 3579:
        LODWORD(v187) = 9;
        uint64_t v93 = (uint64_t *)this;
        unsigned int v94 = 4;
        goto LABEL_214;
      case 2938:
      case 2946:
      case 2962:
      case 2970:
      case 2978:
      case 2986:
      case 2994:
      case 3002:
      case 3010:
      case 3018:
      case 3026:
      case 3034:
      case 3042:
      case 3050:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v102 = (uint64_t *)this;
        unsigned int v103 = 5;
        goto LABEL_167;
      case 2939:
      case 2940:
      case 2947:
      case 2948:
      case 2954:
      case 2963:
      case 2964:
      case 2971:
      case 2972:
      case 2979:
      case 2980:
      case 2987:
      case 2988:
      case 2995:
      case 2996:
      case 3003:
      case 3004:
      case 3011:
      case 3012:
      case 3019:
      case 3020:
      case 3027:
      case 3028:
      case 3035:
      case 3036:
      case 3043:
      case 3044:
      case 3051:
      case 3052:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v102 = (uint64_t *)this;
        unsigned int v103 = 6;
        goto LABEL_167;
      case 2941:
      case 2943:
      case 2944:
      case 2945:
      case 2949:
      case 2951:
      case 2952:
      case 2953:
      case 2955:
      case 2956:
      case 2965:
      case 2967:
      case 2968:
      case 2969:
      case 2973:
      case 2975:
      case 2976:
      case 2977:
      case 2981:
      case 2983:
      case 2984:
      case 2985:
      case 2989:
      case 2991:
      case 2992:
      case 2993:
      case 2997:
      case 2999:
      case 3000:
      case 3001:
      case 3005:
      case 3007:
      case 3008:
      case 3009:
      case 3013:
      case 3015:
      case 3016:
      case 3017:
      case 3021:
      case 3023:
      case 3024:
      case 3025:
      case 3029:
      case 3031:
      case 3032:
      case 3033:
      case 3037:
      case 3039:
      case 3040:
      case 3041:
      case 3045:
      case 3047:
      case 3048:
      case 3049:
      case 3053:
      case 3055:
      case 3056:
      case 3057:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v102 = (uint64_t *)this;
        unsigned int v103 = 7;
        goto LABEL_167;
      case 2942:
      case 2950:
      case 2957:
      case 2959:
      case 2960:
      case 2961:
      case 2966:
      case 2974:
      case 2982:
      case 2990:
      case 2998:
      case 3006:
      case 3014:
      case 3022:
      case 3030:
      case 3038:
      case 3046:
      case 3054:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v102 = (uint64_t *)this;
        unsigned int v103 = 8;
        goto LABEL_167;
      case 2958:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 8u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v102 = (uint64_t *)this;
        unsigned int v103 = 9;
LABEL_167:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v102, v103, (unsigned int *)&v185, 1);
        uint64_t v104 = 0x4100000025;
        goto LABEL_357;
      case 3058:
        int v79 = 45;
        goto LABEL_219;
      case 3059:
      case 3122:
      case 3162:
      case 3163:
      case 3166:
      case 3190:
      case 3292:
      case 3334:
      case 3371:
      case 3384:
      case 3385:
      case 3389:
      case 3395:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 7u, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 8;
        goto LABEL_194;
      case 3060:
      case 3061:
      case 3073:
      case 3100:
      case 3109:
      case 3115:
      case 3116:
      case 3123:
      case 3124:
      case 3125:
      case 3128:
      case 3164:
      case 3165:
      case 3167:
      case 3168:
      case 3171:
      case 3184:
      case 3191:
      case 3192:
      case 3195:
      case 3243:
      case 3280:
      case 3293:
      case 3294:
      case 3298:
      case 3304:
      case 3310:
      case 3335:
      case 3336:
      case 3340:
      case 3346:
      case 3347:
      case 3372:
      case 3373:
      case 3377:
      case 3386:
      case 3387:
      case 3388:
      case 3390:
      case 3391:
      case 3396:
      case 3397:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 8u, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 9;
        goto LABEL_194;
      case 3062:
      case 3063:
      case 3069:
      case 3070:
      case 3074:
      case 3075:
      case 3087:
      case 3093:
      case 3094:
      case 3101:
      case 3102:
      case 3103:
      case 3106:
      case 3110:
      case 3111:
      case 3112:
      case 3117:
      case 3118:
      case 3119:
      case 3126:
      case 3127:
      case 3129:
      case 3130:
      case 3169:
      case 3170:
      case 3172:
      case 3173:
      case 3177:
      case 3183:
      case 3185:
      case 3186:
      case 3193:
      case 3194:
      case 3196:
      case 3197:
      case 3200:
      case 3213:
      case 3219:
      case 3244:
      case 3245:
      case 3249:
      case 3255:
      case 3256:
      case 3281:
      case 3282:
      case 3286:
      case 3295:
      case 3296:
      case 3297:
      case 3299:
      case 3300:
      case 3305:
      case 3306:
      case 3311:
      case 3315:
      case 3328:
      case 3337:
      case 3338:
      case 3339:
      case 3341:
      case 3342:
      case 3348:
      case 3352:
      case 3365:
      case 3374:
      case 3375:
      case 3376:
      case 3378:
      case 3379:
      case 3392:
      case 3393:
      case 3394:
      case 3398:
      case 3399:
      case 3400:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 8u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 9u, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 10;
        goto LABEL_194;
      case 3064:
      case 3065:
      case 3066:
      case 3071:
      case 3072:
      case 3076:
      case 3077:
      case 3083:
      case 3084:
      case 3088:
      case 3089:
      case 3090:
      case 3095:
      case 3096:
      case 3097:
      case 3104:
      case 3105:
      case 3107:
      case 3108:
      case 3113:
      case 3114:
      case 3120:
      case 3121:
      case 3174:
      case 3175:
      case 3176:
      case 3178:
      case 3179:
      case 3187:
      case 3188:
      case 3189:
      case 3198:
      case 3199:
      case 3201:
      case 3202:
      case 3206:
      case 3212:
      case 3214:
      case 3215:
      case 3220:
      case 3224:
      case 3237:
      case 3246:
      case 3247:
      case 3248:
      case 3250:
      case 3251:
      case 3257:
      case 3261:
      case 3274:
      case 3283:
      case 3284:
      case 3285:
      case 3287:
      case 3288:
      case 3301:
      case 3302:
      case 3303:
      case 3307:
      case 3308:
      case 3309:
      case 3316:
      case 3321:
      case 3329:
      case 3343:
      case 3344:
      case 3345:
      case 3353:
      case 3358:
      case 3366:
      case 3380:
      case 3381:
      case 3382:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 9u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xAu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 11;
        goto LABEL_194;
      case 3067:
      case 3068:
      case 3078:
      case 3079:
      case 3080:
      case 3085:
      case 3086:
      case 3091:
      case 3092:
      case 3098:
      case 3099:
      case 3180:
      case 3181:
      case 3182:
      case 3203:
      case 3204:
      case 3205:
      case 3207:
      case 3208:
      case 3216:
      case 3217:
      case 3218:
      case 3225:
      case 3230:
      case 3238:
      case 3252:
      case 3253:
      case 3254:
      case 3262:
      case 3267:
      case 3275:
      case 3289:
      case 3290:
      case 3291:
      case 3312:
      case 3322:
      case 3349:
      case 3359:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xAu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xBu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 12;
        goto LABEL_194;
      case 3081:
      case 3082:
      case 3209:
      case 3210:
      case 3211:
      case 3221:
      case 3231:
      case 3258:
      case 3268:
      case 3313:
      case 3317:
      case 3327:
      case 3330:
      case 3350:
      case 3354:
      case 3364:
      case 3367:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xBu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xCu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 13;
        goto LABEL_194;
      case 3131:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 5;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 6u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, &v182, 1);
        int v107 = 44;
        goto LABEL_187;
      case 3132:
      case 3133:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 7u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v108 = (uint64_t *)this;
        unsigned int v109 = 8;
        goto LABEL_178;
      case 3134:
      case 3135:
      case 3136:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 8u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v108 = (uint64_t *)this;
        unsigned int v109 = 9;
LABEL_178:
        *((void *)&v190 + 1) = llvm::AttributeList::get(v108, v109, &v182, 1);
        int v110 = 44;
        goto LABEL_195;
      case 3137:
      case 3138:
      case 3139:
      case 3140:
      case 3141:
      case 3142:
      case 3143:
      case 3144:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 4;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        int v111 = 44;
        goto LABEL_181;
      case 3145:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 4;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        int v111 = 45;
LABEL_181:
        *(_DWORD *)&v184[8] = v111;
        *(void *)v184 = 0x4100000025;
        int v19 = (uint64_t *)this;
        uint64_t v20 = 3;
        goto LABEL_28;
      case 3146:
      case 3147:
      case 3153:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v112 = (uint64_t *)this;
        unsigned int v113 = 6;
        goto LABEL_185;
      case 3148:
      case 3150:
      case 3151:
      case 3152:
      case 3154:
      case 3155:
      case 3160:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v112 = (uint64_t *)this;
        unsigned int v113 = 7;
        goto LABEL_185;
      case 3149:
      case 3156:
      case 3157:
      case 3158:
      case 3159:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v112 = (uint64_t *)this;
        unsigned int v113 = 8;
LABEL_185:
        *(void *)&long long v190 = llvm::AttributeList::get(v112, v113, &v183, 1);
        int v114 = 45;
        goto LABEL_202;
      case 3161:
      case 3383:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 5;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 6u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, &v182, 1);
        int v107 = 45;
LABEL_187:
        *(_DWORD *)&v184[8] = v107;
LABEL_188:
        *(void *)v184 = 0x4100000025;
        uint64_t v68 = (uint64_t *)this;
        uint64_t v69 = 3;
        goto LABEL_249;
      case 3222:
      case 3226:
      case 3236:
      case 3239:
      case 3259:
      case 3263:
      case 3273:
      case 3276:
      case 3318:
      case 3320:
      case 3323:
      case 3331:
      case 3333:
      case 3355:
      case 3357:
      case 3360:
      case 3368:
      case 3370:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xCu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xDu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 14;
        goto LABEL_194;
      case 3223:
      case 3233:
      case 3235:
      case 3260:
      case 3270:
      case 3272:
      case 3319:
      case 3332:
      case 3356:
      case 3369:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xEu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xFu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 16;
        goto LABEL_194;
      case 3227:
      case 3229:
      case 3232:
      case 3240:
      case 3242:
      case 3264:
      case 3266:
      case 3269:
      case 3277:
      case 3279:
      case 3314:
      case 3324:
      case 3326:
      case 3351:
      case 3361:
      case 3363:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xDu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0xEu, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 15;
        goto LABEL_194;
      case 3228:
      case 3241:
      case 3265:
      case 3278:
      case 3325:
      case 3362:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xFu, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0x10u, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 17;
        goto LABEL_194;
      case 3234:
      case 3271:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 0x10u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 0x11u, &v183, 1);
        unsigned int v182 = 9;
        int v105 = (uint64_t *)this;
        unsigned int v106 = 18;
LABEL_194:
        *((void *)&v190 + 1) = llvm::AttributeList::get(v105, v106, &v182, 1);
        int v110 = 45;
LABEL_195:
        *(_DWORD *)&v184[8] = v110;
        *(void *)v184 = 0x4100000025;
        uint64_t v98 = (uint64_t *)this;
        uint64_t v99 = 3;
LABEL_196:
        *(void *)&long long v191 = llvm::AttributeList::get(v98, 0xFFFFFFFF, (unsigned int *)v184, v99);
        uint64_t v7 = 5;
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3401:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v115 = (uint64_t *)this;
        unsigned int v116 = 6;
        goto LABEL_201;
      case 3402:
      case 3403:
      case 3409:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v115 = (uint64_t *)this;
        unsigned int v116 = 7;
        goto LABEL_201;
      case 3404:
      case 3406:
      case 3407:
      case 3408:
      case 3410:
      case 3411:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v115 = (uint64_t *)this;
        unsigned int v116 = 8;
        goto LABEL_201;
      case 3405:
      case 3412:
      case 3413:
      case 3414:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 8u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v115 = (uint64_t *)this;
        unsigned int v116 = 9;
LABEL_201:
        *(void *)&long long v190 = llvm::AttributeList::get(v115, v116, &v183, 1);
        int v114 = 66;
LABEL_202:
        *(_DWORD *)&v184[8] = v114;
        *(void *)v184 = 0x4100000025;
        uint64_t v52 = (unsigned int *)v184;
        int64_t v53 = (uint64_t *)this;
        unsigned int v54 = -1;
        uint64_t v73 = 3;
        goto LABEL_203;
      case 3417:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x600000025;
        goto LABEL_366;
      case 3418:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        uint64_t v76 = 0x600000025;
        goto LABEL_314;
      case 3419:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, &v183, 1);
        *(_OWORD *)v184 = xmmword_1CFAC8800;
        uint64_t v7 = 4;
        goto LABEL_27;
      case 3420:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 3;
        uint64_t v117 = (uint64_t *)this;
        unsigned int v118 = 3;
        goto LABEL_210;
      case 3421:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v7 = 4;
        uint64_t v119 = (uint64_t *)this;
        unsigned int v120 = 4;
        goto LABEL_212;
      case 3422:
        LODWORD(v187) = 9;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v117 = (uint64_t *)this;
        unsigned int v118 = 4;
LABEL_210:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v117, v118, (unsigned int *)&v185, 1);
        *(_OWORD *)v184 = xmmword_1CFAC8800;
        int v30 = (unsigned int *)v184;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 4;
        goto LABEL_41;
      case 3423:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 4;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v119 = (uint64_t *)this;
        unsigned int v120 = 5;
LABEL_212:
        *(void *)&long long v190 = llvm::AttributeList::get(v119, v120, &v183, 1);
        unint64_t v18 = &xmmword_1CFAC8800;
        goto LABEL_26;
      case 3424:
      case 3425:
        LODWORD(v187) = 22;
        uint64_t v93 = (uint64_t *)this;
        unsigned int v94 = 1;
LABEL_214:
        uint64_t v92 = llvm::AttributeList::get(v93, v94, (unsigned int *)&v187, 1);
LABEL_215:
        *(void *)&long long v189 = v92;
        int v101 = &xmmword_1CFAC8800;
LABEL_216:
        *(_OWORD *)v184 = *v101;
        uint64_t v22 = (unsigned int *)v184;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 4;
        goto LABEL_31;
      case 3430:
      case 3518:
        int v33 = &xmmword_1CFAC87F0;
LABEL_43:
        *(_OWORD *)v184 = *v33;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 4;
        goto LABEL_5;
      case 3433:
      case 3434:
      case 3478:
      case 8939:
      case 8940:
      case 8965:
      case 8966:
      case 8967:
      case 8968:
      case 8969:
      case 8970:
      case 8971:
      case 8972:
        int v79 = 44;
LABEL_219:
        *(_DWORD *)&v184[8] = v79;
        uint64_t v9 = 0x4100000025;
        goto LABEL_11;
      case 3435:
      case 3436:
      case 3437:
      case 3438:
      case 3439:
      case 3440:
      case 3441:
      case 3442:
      case 3443:
      case 3444:
      case 3445:
      case 3446:
      case 3447:
      case 3448:
      case 3449:
      case 3450:
      case 3451:
      case 3452:
      case 3453:
      case 3454:
      case 3455:
      case 3456:
      case 3457:
      case 3458:
      case 3459:
      case 3460:
      case 3461:
      case 3462:
      case 3463:
      case 3464:
      case 3465:
        LODWORD(v187) = 9;
        uint64_t v7 = 4;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 6u, &v183, 1);
        unint64_t v18 = &xmmword_1CFAC8830;
LABEL_26:
        *(_OWORD *)v184 = *v18;
LABEL_27:
        int v19 = (uint64_t *)this;
        uint64_t v20 = 4;
LABEL_28:
        *((void *)&v190 + 1) = llvm::AttributeList::get(v19, 0xFFFFFFFF, (unsigned int *)v184, v20);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3466:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v7 = 5;
        uint64_t v121 = (uint64_t *)this;
        unsigned int v122 = 5;
        goto LABEL_247;
      case 3476:
      case 3477:
      case 3541:
      case 3542:
      case 3543:
      case 3544:
      case 3545:
      case 3546:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v95 = &xmmword_1CFAC8830;
LABEL_223:
        *(_OWORD *)v184 = *v95;
        int v12 = (unsigned int *)v184;
        int v13 = (uint64_t *)this;
        uint64_t v14 = 4;
        goto LABEL_19;
      case 3497:
      case 3498:
        LODWORD(v187) = 9;
        uint64_t v123 = (uint64_t *)this;
        unsigned int v124 = 4;
        goto LABEL_231;
      case 3499:
      case 3500:
        LODWORD(v187) = 9;
        unsigned int v125 = (uint64_t *)this;
        unsigned int v126 = 5;
        goto LABEL_233;
      case 3512:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        int v127 = 44;
        goto LABEL_234;
      case 3520:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        *(_OWORD *)v184 = xmmword_1CFAE0EF0;
        *(_DWORD *)&v184[16] = 11;
        uint64_t v22 = (unsigned int *)v184;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 5;
        goto LABEL_31;
      case 3524:
      case 3525:
      case 4043:
      case 6201:
      case 6254:
      case 6805:
      case 8729:
      case 8797:
      case 8798:
      case 8799:
      case 8802:
      case 8838:
      case 8841:
      case 11052:
      case 12062:
      case 12372:
      case 12374:
      case 12377:
      case 12379:
      case 12406:
        int v146 = 9;
        goto LABEL_336;
      case 3549:
      case 3550:
      case 3594:
        *(_DWORD *)&v184[16] = 44;
        unsigned int v96 = &xmmword_1CFAE0F18;
LABEL_403:
        *(_OWORD *)v184 = *v96;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 5;
        goto LABEL_5;
      case 3553:
        LODWORD(v187) = 9;
        uint64_t v38 = (uint64_t *)this;
        unsigned int v39 = 7;
LABEL_56:
        *(void *)&long long v189 = llvm::AttributeList::get(v38, v39, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x4100000025;
        goto LABEL_366;
      case 3567:
      case 3568:
        LODWORD(v187) = 9;
        uint64_t v123 = (uint64_t *)this;
        unsigned int v124 = 5;
LABEL_231:
        *(void *)&long long v189 = llvm::AttributeList::get(v123, v124, (unsigned int *)&v187, 1);
        int v127 = 45;
        goto LABEL_234;
      case 3569:
      case 3570:
        LODWORD(v187) = 9;
        unsigned int v125 = (uint64_t *)this;
        unsigned int v126 = 6;
LABEL_233:
        *(void *)&long long v189 = llvm::AttributeList::get(v125, v126, (unsigned int *)&v187, 1);
        int v127 = 66;
LABEL_234:
        *(_DWORD *)&v184[8] = v127;
LABEL_235:
        uint64_t v80 = 0x4100000025;
        goto LABEL_236;
      case 3571:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v88 = (uint64_t *)this;
        unsigned int v89 = 6;
LABEL_238:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v88, v89, (unsigned int *)&v185, 1);
        int v128 = 45;
        goto LABEL_241;
      case 3572:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v90 = (uint64_t *)this;
        unsigned int v91 = 7;
LABEL_240:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v90, v91, (unsigned int *)&v185, 1);
        int v128 = 66;
LABEL_241:
        *(_DWORD *)&v184[8] = v128;
        uint64_t v34 = 0x4100000025;
LABEL_46:
        *(void *)v184 = v34;
        uint64_t v7 = 3;
        goto LABEL_47;
      case 3573:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 6;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 7u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 8u, &v182, 1);
        unsigned int v181 = 9;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 9u, &v181, 1);
        int v129 = 45;
        goto LABEL_244;
      case 3574:
        LODWORD(v187) = 9;
        uint64_t v7 = 6;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 8u, &v183, 1);
        unsigned int v182 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 9u, &v182, 1);
        unsigned int v181 = 9;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 0xAu, &v181, 1);
        int v129 = 66;
LABEL_244:
        *(_DWORD *)&v184[8] = v129;
        *(void *)v184 = 0x4100000025;
        uint64_t v130 = (unsigned int *)v184;
        uint64_t v131 = (uint64_t *)this;
        uint64_t v132 = 3;
        goto LABEL_245;
      case 3581:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        uint64_t v7 = 5;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v121 = (uint64_t *)this;
        unsigned int v122 = 6;
LABEL_247:
        *((void *)&v190 + 1) = llvm::AttributeList::get(v121, v122, &v182, 1);
        int v100 = &xmmword_1CFAC8830;
LABEL_248:
        *(_OWORD *)v184 = *v100;
        uint64_t v68 = (uint64_t *)this;
        uint64_t v69 = 4;
LABEL_249:
        *(void *)&long long v191 = llvm::AttributeList::get(v68, 0xFFFFFFFF, (unsigned int *)v184, v69);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3591:
        *(_DWORD *)&v184[8] = 11;
        goto LABEL_269;
      case 3595:
      case 3597:
      case 3607:
      case 3609:
      case 4126:
      case 4907:
      case 9414:
        LODWORD(v187) = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v133 = (uint64_t *)this;
        unsigned int v134 = 2;
        goto LABEL_397;
      case 3596:
      case 3599:
      case 3601:
      case 3608:
      case 3610:
      case 3611:
      case 3612:
      case 3613:
      case 3615:
      case 4723:
      case 4970:
      case 4971:
      case 4972:
      case 4973:
      case 4987:
      case 4988:
      case 4992:
      case 4993:
        LODWORD(v187) = 9;
        uint64_t v50 = (uint64_t *)this;
        unsigned int v51 = 1;
LABEL_253:
        *(void *)&long long v189 = llvm::AttributeList::get(v50, v51, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 3;
        int v135 = (uint64_t *)this;
        unsigned int v136 = 3;
        goto LABEL_254;
      case 3598:
      case 3600:
      case 3603:
      case 3605:
      case 3614:
      case 3616:
      case 3617:
      case 3618:
      case 3619:
      case 3621:
        LODWORD(v187) = 9;
        uint64_t v77 = (uint64_t *)this;
        unsigned int v78 = 1;
LABEL_257:
        *(void *)&long long v189 = llvm::AttributeList::get(v77, v78, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v133 = (uint64_t *)this;
        unsigned int v134 = 4;
        goto LABEL_397;
      case 3602:
      case 3604:
      case 3620:
      case 3622:
      case 3623:
      case 3624:
        LODWORD(v187) = 9;
        int v137 = (uint64_t *)this;
        unsigned int v138 = 1;
        goto LABEL_393;
      case 3606:
        LODWORD(v187) = 9;
        uint64_t v139 = (uint64_t *)this;
        unsigned int v140 = 1;
        goto LABEL_396;
      case 3625:
      case 3626:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 5u, &v182, 1);
        unsigned int v181 = 9;
        *((void *)&v191 + 1) = llvm::AttributeList::get((uint64_t *)this, 6u, &v181, 1);
        unsigned int v180 = 37;
        *(void *)&long long v192 = llvm::AttributeList::get((uint64_t *)this, 0xFFFFFFFF, &v180, 1);
        uint64_t v7 = 7;
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3649:
      case 3650:
      case 3651:
      case 3652:
      case 4049:
      case 4050:
      case 4051:
      case 4052:
      case 8800:
      case 9413:
        int v141 = 9;
        goto LABEL_400;
      case 3655:
      case 3656:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 5u, &v183, 1);
        unsigned int v182 = 9;
        uint64_t v7 = 6;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 6u, &v182, 1);
        unsigned int v181 = 37;
        uint64_t v130 = &v181;
        uint64_t v131 = (uint64_t *)this;
        uint64_t v132 = 1;
LABEL_245:
        *((void *)&v191 + 1) = llvm::AttributeList::get(v131, 0xFFFFFFFF, v130, v132);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3657:
      case 3658:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v142 = (uint64_t *)this;
        unsigned int v143 = 5;
        goto LABEL_266;
      case 3659:
      case 3660:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        *(void *)&long long v190 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        unsigned int v183 = 9;
        *((void *)&v190 + 1) = llvm::AttributeList::get((uint64_t *)this, 4u, &v183, 1);
        unsigned int v182 = 9;
        *(void *)&long long v191 = llvm::AttributeList::get((uint64_t *)this, 5u, &v182, 1);
        unsigned int v181 = 37;
        *((void *)&v191 + 1) = llvm::AttributeList::get((uint64_t *)this, 0xFFFFFFFF, &v181, 1);
        uint64_t v7 = 6;
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3661:
      case 3662:
      case 12361:
      case 12363:
      case 12365:
      case 12367:
      case 12369:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v142 = (uint64_t *)this;
        unsigned int v143 = 3;
LABEL_266:
        *(void *)&long long v190 = llvm::AttributeList::get(v142, v143, (unsigned int *)&v185, 1);
        unsigned int v183 = 37;
        uint64_t v52 = &v183;
        int64_t v53 = (uint64_t *)this;
        unsigned int v54 = -1;
LABEL_267:
        uint64_t v73 = 1;
LABEL_203:
        *((void *)&v190 + 1) = llvm::AttributeList::get(v53, v54, v52, v73);
        uint64_t v7 = 4;
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 3848:
      case 3849:
      case 8360:
      case 8361:
      case 8362:
      case 8363:
      case 8364:
      case 8865:
      case 8866:
      case 8867:
      case 8868:
      case 8869:
      case 8870:
      case 8871:
      case 9554:
      case 9745:
      case 9758:
      case 12214:
        *(_DWORD *)&v184[8] = 3;
LABEL_269:
        uint64_t v9 = 0x4200000025;
        goto LABEL_11;
      case 3983:
      case 3984:
      case 3985:
      case 4442:
      case 4443:
      case 4931:
      case 4990:
      case 6750:
      case 6751:
      case 6752:
      case 6753:
      case 6754:
      case 6755:
      case 6756:
      case 6757:
      case 6758:
      case 6759:
      case 6760:
      case 6761:
      case 6762:
      case 6763:
      case 6764:
      case 6765:
      case 6766:
      case 6767:
      case 6768:
      case 6769:
      case 6770:
      case 6771:
      case 6772:
      case 6773:
      case 8635:
      case 8636:
      case 8637:
      case 8638:
      case 8639:
      case 8640:
      case 8641:
      case 8652:
      case 8672:
      case 8674:
      case 8676:
      case 8677:
        LODWORD(v187) = 22;
        uint64_t v144 = (uint64_t *)this;
        unsigned int v145 = 1;
        goto LABEL_288;
      case 4333:
      case 4445:
      case 4478:
      case 4479:
      case 4666:
      case 4724:
      case 4779:
      case 4781:
      case 4782:
      case 4783:
      case 4784:
      case 4785:
      case 4787:
      case 4788:
      case 4789:
      case 4790:
      case 4792:
      case 4810:
      case 4811:
      case 4812:
      case 4813:
      case 4817:
      case 4818:
      case 4819:
      case 4820:
      case 4881:
      case 4882:
      case 4883:
      case 4884:
      case 4885:
      case 4887:
      case 4888:
      case 4889:
      case 4890:
      case 4891:
      case 4942:
      case 4959:
      case 4969:
      case 4984:
      case 4985:
      case 4986:
      case 4994:
      case 5007:
      case 5008:
      case 5009:
      case 5010:
      case 5011:
      case 5013:
      case 5014:
      case 5015:
      case 5016:
      case 5017:
      case 5055:
      case 5056:
      case 5059:
      case 5060:
      case 5245:
      case 5246:
      case 5561:
      case 5562:
      case 5583:
      case 5584:
      case 5593:
      case 5594:
      case 5833:
      case 5834:
      case 5853:
      case 5854:
      case 5877:
      case 5878:
      case 6109:
      case 6134:
      case 6147:
      case 6148:
      case 6149:
      case 6150:
      case 6155:
      case 6156:
      case 6157:
      case 6158:
      case 6161:
      case 6163:
      case 6179:
      case 6596:
      case 6597:
      case 6602:
      case 6634:
      case 6635:
      case 6636:
      case 6637:
      case 8488:
      case 8495:
      case 8587:
      case 8597:
      case 8642:
      case 8644:
      case 9597:
      case 9610:
      case 9611:
      case 9612:
      case 9613:
      case 9614:
      case 9615:
      case 9616:
      case 9617:
      case 9618:
      case 9619:
      case 9620:
      case 9621:
      case 9654:
      case 9655:
      case 9656:
      case 9657:
      case 9714:
      case 9737:
      case 9738:
      case 9742:
      case 11156:
      case 11157:
      case 11163:
      case 11232:
      case 11285:
      case 11286:
      case 11299:
      case 11300:
      case 11301:
      case 11310:
      case 11311:
      case 11312:
      case 11313:
      case 11314:
      case 11315:
      case 11316:
      case 11317:
      case 11368:
      case 11369:
      case 11371:
      case 11372:
      case 11591:
      case 11592:
      case 11594:
      case 11595:
      case 11663:
      case 11664:
      case 11665:
      case 11666:
      case 11667:
      case 11668:
      case 11797:
      case 11798:
      case 11872:
      case 11873:
      case 11878:
      case 11879:
      case 12001:
      case 12004:
      case 12005:
      case 12007:
      case 12013:
      case 12014:
      case 12019:
      case 12020:
      case 12087:
      case 12099:
      case 12146:
      case 12147:
      case 12148:
      case 12179:
      case 12184:
      case 12185:
      case 12222:
      case 12223:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12304:
      case 12305:
      case 12317:
      case 12318:
      case 12319:
      case 12320:
      case 12321:
      case 12322:
      case 12323:
      case 12386:
      case 12387:
      case 12388:
      case 12389:
      case 12390:
      case 12391:
        LODWORD(v187) = 9;
        unint64_t v47 = (uint64_t *)this;
        unsigned int v48 = 3;
        goto LABEL_68;
      case 4389:
      case 4391:
      case 4392:
      case 4393:
      case 4394:
      case 4397:
      case 4398:
      case 4399:
      case 4400:
      case 4401:
      case 4402:
      case 4403:
      case 4404:
      case 4406:
      case 4407:
      case 4408:
      case 4409:
      case 4410:
      case 4411:
      case 4412:
      case 4413:
      case 4414:
      case 4415:
      case 4416:
      case 4417:
      case 4420:
      case 4421:
      case 4422:
      case 4423:
        int v147 = 44;
        goto LABEL_385;
      case 4390:
      case 4405:
        *(_DWORD *)v184 = 9;
        unsigned int v148 = (uint64_t *)this;
        unsigned int v149 = 2;
        goto LABEL_276;
      case 4395:
      case 4396:
      case 4418:
      case 4419:
        *(_DWORD *)v184 = 9;
        unsigned int v148 = (uint64_t *)this;
        unsigned int v149 = 1;
LABEL_276:
        *(void *)&long long v189 = llvm::AttributeList::get(v148, v149, (unsigned int *)v184, 1);
        int v150 = 44;
        goto LABEL_338;
      case 4425:
      case 4428:
      case 4431:
      case 4434:
      case 4437:
      case 4440:
      case 4918:
      case 4921:
      case 4924:
      case 4927:
      case 4930:
        int v151 = 22;
        goto LABEL_287;
      case 4426:
      case 4429:
      case 4432:
      case 4435:
      case 4438:
      case 4441:
        LODWORD(v187) = 22;
        uint64_t v144 = (uint64_t *)this;
        unsigned int v145 = 3;
        goto LABEL_288;
      case 4861:
      case 4863:
      case 4934:
      case 4935:
      case 4936:
      case 4937:
      case 11800:
      case 11801:
      case 12008:
      case 12327:
        LODWORD(v187) = 9;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v135 = (uint64_t *)this;
        unsigned int v136 = 4;
        goto LABEL_254;
      case 4917:
      case 4920:
      case 4923:
      case 4926:
      case 4929:
        LODWORD(v187) = 22;
        uint64_t v144 = (uint64_t *)this;
        unsigned int v145 = 5;
        goto LABEL_288;
      case 5063:
      case 5064:
      case 5065:
      case 5066:
      case 5069:
      case 5070:
      case 5071:
      case 5072:
      case 5075:
      case 5076:
      case 5077:
      case 5078:
      case 5081:
      case 5082:
      case 5083:
      case 5084:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 3;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v152 = 0x2D00000025;
        goto LABEL_284;
      case 5067:
      case 5068:
      case 5073:
      case 5074:
      case 5079:
      case 5080:
      case 5085:
      case 5086:
        int v153 = 22;
        goto LABEL_378;
      case 5087:
      case 5088:
      case 5089:
      case 5090:
      case 5093:
      case 5094:
      case 5095:
      case 5096:
      case 5099:
      case 5100:
      case 5101:
      case 5102:
      case 5107:
      case 5108:
      case 5109:
      case 5110:
      case 5115:
      case 5116:
      case 5117:
      case 5118:
      case 5123:
      case 5124:
      case 5125:
      case 5126:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        uint64_t v7 = 3;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v185, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v152 = 0x4200000025;
LABEL_284:
        *(void *)v184 = v152;
LABEL_47:
        int v30 = (unsigned int *)v184;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 3;
        goto LABEL_41;
      case 5091:
      case 5092:
      case 5097:
      case 5098:
      case 5103:
      case 5104:
      case 5111:
      case 5112:
      case 5119:
      case 5120:
      case 5127:
      case 5128:
        LODWORD(v187) = 22;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v49 = 0x4200000025;
        goto LABEL_379;
      case 6050:
      case 6051:
      case 6052:
      case 6053:
      case 6054:
      case 6055:
        int v151 = 9;
LABEL_287:
        LODWORD(v187) = v151;
        uint64_t v144 = (uint64_t *)this;
        unsigned int v145 = 4;
LABEL_288:
        *(void *)&long long v189 = llvm::AttributeList::get(v144, v145, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x300000025;
        goto LABEL_366;
      case 6056:
      case 6057:
      case 6058:
      case 6059:
      case 6060:
        int v154 = 9;
        goto LABEL_364;
      case 6063:
        *(void *)v184 = 0x4200000016;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 2);
        uint64_t v155 = 0x2D00000016;
        goto LABEL_296;
      case 6064:
        uint64_t v42 = 0x4200000025;
LABEL_292:
        *(void *)v184 = v42 - 15;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 2);
        uint64_t v83 = 0x300000025;
        goto LABEL_293;
      case 6604:
        int v156 = 9;
        goto LABEL_316;
      case 6795:
      case 6796:
      case 6797:
      case 6798:
        *(void *)v184 = 0x4200000013;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 2);
        uint64_t v155 = 0x2D00000013;
LABEL_296:
        uint64_t v187 = v155;
        *((void *)&v189 + 1) = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 2);
        uint64_t v185 = 0x300000025;
        int v12 = (unsigned int *)&v185;
        goto LABEL_358;
      case 7014:
      case 7015:
      case 7016:
      case 7023:
      case 7024:
      case 7025:
      case 8633:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v80 = 0x2D00000025;
        goto LABEL_236;
      case 7038:
      case 7039:
      case 7040:
      case 7041:
      case 7252:
      case 7253:
      case 7254:
      case 7255:
      case 7256:
      case 7257:
      case 7258:
      case 7259:
      case 7275:
      case 7276:
      case 7277:
      case 7278:
      case 7279:
      case 7280:
      case 7281:
      case 7282:
      case 7283:
      case 7284:
      case 7285:
      case 7286:
      case 7287:
      case 7288:
      case 7289:
      case 7290:
      case 7291:
      case 7292:
      case 7293:
      case 7294:
      case 7295:
      case 7296:
      case 7297:
      case 7298:
      case 7299:
      case 7300:
      case 7301:
      case 7302:
      case 7303:
      case 7304:
      case 7305:
      case 7306:
      case 7903:
      case 7904:
      case 7905:
      case 7906:
      case 7907:
      case 7908:
      case 7909:
      case 7910:
        int v10 = 11;
LABEL_14:
        *(_DWORD *)&v184[8] = v10;
LABEL_15:
        uint64_t v9 = 0x600000025;
        goto LABEL_11;
      case 7052:
      case 7053:
        uint64_t v187 = 0x4200000016;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 2);
        v97 = &xmmword_1CFAC87D0;
        goto LABEL_309;
      case 8007:
      case 8008:
      case 8009:
      case 8010:
      case 8011:
      case 8012:
      case 8013:
      case 8014:
      case 8015:
      case 8016:
      case 8017:
      case 8018:
      case 8035:
      case 8036:
      case 8037:
      case 8038:
      case 8135:
      case 8136:
      case 8137:
      case 8138:
      case 8139:
      case 8140:
      case 8141:
      case 8142:
      case 8143:
      case 8144:
      case 8145:
      case 8146:
      case 8243:
      case 8244:
      case 8245:
      case 8246:
      case 8247:
      case 8248:
      case 8249:
      case 8250:
      case 8251:
      case 8252:
      case 8253:
      case 8254:
      case 8265:
      case 8266:
      case 8267:
      case 8268:
      case 8285:
      case 8286:
      case 8287:
      case 8288:
      case 8321:
      case 8322:
      case 8323:
      case 8324:
        uint64_t v43 = 0x4200000025;
LABEL_301:
        uint64_t v187 = v43 - 15;
        uint64_t v7 = 2;
        BOOL v44 = (uint64_t *)this;
        unsigned int v45 = 1;
LABEL_302:
        *(void *)&long long v189 = llvm::AttributeList::get(v44, v45, (unsigned int *)&v187, 2);
        *(_DWORD *)&v184[8] = 3;
        *(void *)v184 = v43;
        goto LABEL_380;
      case 8634:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v80 = 0x4200000025;
LABEL_236:
        *(void *)v184 = v80;
        uint64_t v22 = (unsigned int *)v184;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 3;
        goto LABEL_31;
      case 8673:
      case 8675:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        int v87 = 9;
LABEL_306:
        LODWORD(v185) = v87;
        unsigned int v157 = (uint64_t *)this;
        unsigned int v158 = 2;
        goto LABEL_307;
      case 8982:
        LODWORD(v187) = 9;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        v97 = &xmmword_1CFAC8800;
LABEL_309:
        *(_OWORD *)v184 = *v97;
        uint64_t v63 = (unsigned int *)v184;
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 4;
        goto LABEL_369;
      case 9003:
      case 9004:
      case 9009:
      case 9010:
      case 9011:
      case 9012:
      case 9013:
      case 9014:
      case 9015:
      case 9016:
      case 9017:
      case 9018:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v157 = (uint64_t *)this;
        unsigned int v158 = 4;
        goto LABEL_307;
      case 9005:
      case 9006:
      case 9007:
      case 9008:
      case 9019:
      case 9020:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v157 = (uint64_t *)this;
        unsigned int v158 = 5;
LABEL_307:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v157, v158, (unsigned int *)&v185, 1);
        uint64_t v104 = 0x300000025;
        goto LABEL_357;
      case 9021:
      case 9204:
      case 9209:
      case 9225:
      case 9269:
        LODWORD(v187) = 22;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        uint64_t v76 = 0x2D00000025;
        goto LABEL_314;
      case 9022:
      case 9409:
      case 9410:
      case 9427:
      case 9430:
      case 9431:
      case 9450:
      case 9451:
      case 9490:
      case 9491:
        LODWORD(v187) = 22;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        uint64_t v76 = 0x4200000025;
LABEL_314:
        *(void *)v184 = v76;
        goto LABEL_367;
      case 9024:
      case 9025:
      case 9026:
      case 9027:
      case 9028:
      case 9029:
      case 9030:
      case 9208:
      case 9211:
      case 9213:
      case 9215:
      case 9217:
      case 9219:
      case 9221:
      case 9223:
      case 9227:
      case 9231:
      case 9235:
      case 9239:
      case 9243:
      case 9247:
      case 9251:
      case 9255:
      case 9257:
      case 9259:
      case 9261:
      case 9263:
      case 9265:
      case 9267:
      case 9271:
      case 9273:
      case 9275:
      case 9277:
      case 9279:
      case 9281:
      case 9283:
        int v156 = 22;
LABEL_316:
        LODWORD(v187) = v156;
        uint64_t v159 = (uint64_t *)this;
        unsigned int v160 = 1;
        goto LABEL_317;
      case 9053:
      case 9055:
      case 9062:
      case 9064:
      case 9363:
      case 9365:
      case 9405:
      case 9407:
      case 9429:
      case 9467:
      case 9469:
      case 9485:
      case 9487:
        *(_DWORD *)v184 = 9;
        unsigned int v60 = (uint64_t *)this;
        unsigned int v61 = 6;
        goto LABEL_337;
      case 9058:
      case 9060:
      case 9069:
      case 9071:
      case 9073:
      case 9089:
      case 9093:
      case 9095:
      case 9097:
      case 9100:
      case 9102:
      case 9104:
      case 9106:
      case 9127:
      case 9129:
      case 9131:
      case 9133:
      case 9135:
      case 9149:
      case 9151:
      case 9153:
      case 9155:
      case 9157:
      case 9159:
      case 9163:
      case 9165:
      case 9167:
      case 9183:
      case 9185:
      case 9187:
      case 9189:
      case 9191:
      case 9197:
      case 9199:
      case 9286:
      case 9290:
      case 9294:
      case 9296:
      case 9312:
      case 9314:
      case 9349:
      case 9351:
      case 9353:
      case 9355:
      case 9367:
      case 9369:
      case 9371:
      case 9373:
      case 9375:
      case 9393:
      case 9395:
      case 9397:
      case 9399:
      case 9401:
      case 9403:
      case 9418:
      case 9420:
      case 9422:
      case 9424:
      case 9426:
      case 9447:
      case 9449:
      case 9489:
      case 9507:
      case 9509:
      case 9511:
      case 9513:
      case 9515:
      case 9517:
      case 9519:
      case 9521:
      case 9523:
      case 9525:
      case 9527:
      case 9533:
      case 9535:
      case 9537:
      case 9539:
      case 9541:
        LODWORD(v187) = 9;
        unint64_t v47 = (uint64_t *)this;
        unsigned int v48 = 6;
        goto LABEL_68;
      case 9075:
      case 9077:
      case 9079:
      case 9081:
      case 9083:
      case 9085:
      case 9087:
      case 9092:
      case 9094:
      case 9101:
      case 9103:
      case 9111:
      case 9113:
      case 9115:
      case 9117:
      case 9119:
      case 9121:
      case 9123:
      case 9125:
      case 9126:
      case 9128:
      case 9130:
      case 9132:
      case 9137:
      case 9147:
      case 9161:
      case 9169:
      case 9171:
      case 9173:
      case 9175:
      case 9177:
      case 9179:
      case 9181:
      case 9182:
      case 9184:
      case 9188:
      case 9190:
      case 9203:
      case 9285:
      case 9289:
      case 9366:
      case 9368:
      case 9416:
      case 9514:
      case 9516:
      case 9518:
      case 9520:
      case 9543:
      case 11366:
      case 11367:
      case 11404:
      case 11405:
      case 11428:
      case 11429:
      case 11471:
      case 11472:
      case 11481:
      case 11482:
      case 11483:
      case 11484:
      case 11485:
      case 11486:
      case 11617:
      case 11620:
      case 11621:
      case 11622:
      case 11647:
      case 11648:
      case 11649:
      case 11650:
      case 11752:
      case 11753:
      case 11764:
      case 11765:
      case 11877:
      case 11882:
      case 11887:
      case 11892:
      case 11893:
      case 11894:
      case 11913:
      case 11914:
      case 11915:
      case 11916:
      case 11950:
      case 11951:
      case 11952:
      case 11953:
      case 11977:
      case 11978:
      case 11981:
      case 11982:
      case 11985:
      case 11986:
      case 11989:
      case 11990:
      case 11993:
      case 11994:
      case 11997:
      case 11998:
      case 12310:
      case 12311:
      case 12312:
      case 12313:
      case 12314:
      case 12315:
      case 12316:
        LODWORD(v187) = 9;
        unint64_t v47 = (uint64_t *)this;
        unsigned int v48 = 5;
LABEL_68:
        *(void *)&long long v189 = llvm::AttributeList::get(v47, v48, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x2C00000025;
        goto LABEL_366;
      case 9205:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 5;
        goto LABEL_356;
      case 9206:
        int v41 = 22;
LABEL_323:
        *(_DWORD *)v184 = v41;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)v184, 1);
        LODWORD(v187) = 37;
        uint64_t v63 = (unsigned int *)&v187;
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 1;
        goto LABEL_369;
      case 9207:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        goto LABEL_389;
      case 9210:
      case 9226:
      case 9270:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 6;
        goto LABEL_356;
      case 9212:
      case 9256:
      case 9272:
        LODWORD(v187) = 22;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v163 = (uint64_t *)this;
        unsigned int v164 = 7;
        goto LABEL_334;
      case 9214:
      case 9258:
      case 9274:
        LODWORD(v187) = 22;
        unint64_t v165 = (uint64_t *)this;
        unsigned int v166 = 4;
        goto LABEL_343;
      case 9216:
      case 9260:
      case 9276:
        LODWORD(v187) = 22;
        unsigned int v167 = (uint64_t *)this;
        unsigned int v168 = 5;
        goto LABEL_346;
      case 9218:
      case 9262:
      case 9278:
        LODWORD(v187) = 22;
        uint64_t v169 = (uint64_t *)this;
        unsigned int v170 = 6;
        goto LABEL_349;
      case 9220:
      case 9264:
      case 9280:
        LODWORD(v187) = 22;
        uint64_t v171 = (uint64_t *)this;
        unsigned int v172 = 7;
        goto LABEL_352;
      case 9222:
      case 9266:
      case 9282:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 8u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        goto LABEL_355;
      case 9224:
      case 9268:
      case 9284:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 9u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 13;
        goto LABEL_356;
      case 9228:
        LODWORD(v187) = 22;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v163 = (uint64_t *)this;
        unsigned int v164 = 6;
LABEL_334:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v163, v164, (unsigned int *)&v185, 1);
        uint64_t v59 = 0x2D00000025;
        goto LABEL_255;
      case 9229:
      case 9233:
      case 9237:
      case 9241:
      case 9245:
      case 9249:
      case 9253:
      case 12474:
      case 12476:
      case 12480:
      case 12481:
      case 12482:
      case 12483:
      case 12489:
      case 12490:
      case 12491:
      case 12492:
      case 12493:
      case 12494:
      case 12495:
      case 12496:
      case 12497:
      case 12498:
      case 12499:
      case 12500:
      case 12501:
      case 12502:
      case 12503:
      case 12504:
      case 12505:
      case 12506:
      case 12507:
      case 12509:
      case 12510:
      case 12512:
      case 12513:
      case 12516:
      case 12517:
      case 12520:
      case 12521:
      case 12522:
        int v146 = 22;
LABEL_336:
        *(_DWORD *)v184 = v146;
        unsigned int v60 = (uint64_t *)this;
        unsigned int v61 = 1;
        goto LABEL_337;
      case 9230:
        *(_DWORD *)v184 = 22;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        v173 = (uint64_t *)this;
        unsigned int v174 = 6;
        goto LABEL_361;
      case 9232:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 7;
        goto LABEL_356;
      case 9234:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 7;
        goto LABEL_401;
      case 9236:
        LODWORD(v187) = 22;
        unint64_t v165 = (uint64_t *)this;
        unsigned int v166 = 5;
LABEL_343:
        *(void *)&long long v189 = llvm::AttributeList::get(v165, v166, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 8;
        goto LABEL_356;
      case 9238:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 5u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 8;
        goto LABEL_401;
      case 9240:
        LODWORD(v187) = 22;
        unsigned int v167 = (uint64_t *)this;
        unsigned int v168 = 6;
LABEL_346:
        *(void *)&long long v189 = llvm::AttributeList::get(v167, v168, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 9;
        goto LABEL_356;
      case 9242:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 6u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 9;
        goto LABEL_401;
      case 9244:
        LODWORD(v187) = 22;
        uint64_t v169 = (uint64_t *)this;
        unsigned int v170 = 7;
LABEL_349:
        *(void *)&long long v189 = llvm::AttributeList::get(v169, v170, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 10;
        goto LABEL_356;
      case 9246:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 7u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 10;
        goto LABEL_401;
      case 9248:
        LODWORD(v187) = 22;
        uint64_t v171 = (uint64_t *)this;
        unsigned int v172 = 8;
LABEL_352:
        *(void *)&long long v189 = llvm::AttributeList::get(v171, v172, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v161 = (uint64_t *)this;
        unsigned int v162 = 11;
        goto LABEL_356;
      case 9250:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 8u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 11;
        goto LABEL_401;
      case 9252:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 9u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
LABEL_355:
        int v161 = (uint64_t *)this;
        unsigned int v162 = 12;
LABEL_356:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v161, v162, (unsigned int *)&v185, 1);
        uint64_t v104 = 0x2D00000025;
        goto LABEL_357;
      case 9254:
        *(_DWORD *)v184 = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 9u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 12;
        goto LABEL_401;
      case 9411:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
        uint64_t v7 = 3;
        v173 = (uint64_t *)this;
        unsigned int v174 = 3;
LABEL_361:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v173, v174, (unsigned int *)&v187, 1);
        LODWORD(v185) = 37;
        int v30 = (unsigned int *)&v185;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 1;
        goto LABEL_41;
      case 9432:
      case 9433:
      case 9452:
      case 9453:
      case 9470:
      case 9471:
      case 9492:
      case 9493:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 3;
        goto LABEL_365;
      case 9434:
      case 9435:
      case 9454:
      case 9455:
      case 9472:
      case 9473:
      case 9494:
      case 9495:
        int v154 = 22;
LABEL_364:
        LODWORD(v187) = v154;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 4;
        goto LABEL_365;
      case 9436:
      case 9437:
      case 9456:
      case 9457:
      case 9474:
      case 9475:
      case 9496:
      case 9497:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 5;
        goto LABEL_365;
      case 9438:
      case 9439:
      case 9458:
      case 9459:
      case 9476:
      case 9477:
      case 9498:
      case 9499:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 6;
        goto LABEL_365;
      case 9440:
      case 9441:
      case 9460:
      case 9461:
      case 9478:
      case 9479:
      case 9500:
      case 9501:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 7;
        goto LABEL_365;
      case 9442:
      case 9443:
      case 9462:
      case 9463:
      case 9480:
      case 9481:
      case 9502:
      case 9503:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 8;
        goto LABEL_365;
      case 9444:
      case 9445:
      case 9464:
      case 9465:
      case 9482:
      case 9483:
      case 9504:
      case 9505:
        LODWORD(v187) = 22;
        uint64_t v177 = (uint64_t *)this;
        unsigned int v178 = 9;
LABEL_365:
        *(void *)&long long v189 = llvm::AttributeList::get(v177, v178, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x4200000025;
        goto LABEL_366;
      case 9557:
        uint64_t v4 = 0x4200000020;
        goto LABEL_4;
      case 9558:
      case 9559:
      case 9560:
        int v15 = 66;
LABEL_21:
        *(_DWORD *)&v184[8] = v15;
        uint64_t v9 = 0x1800000025;
LABEL_11:
        *(void *)v184 = v9;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 3;
        goto LABEL_5;
      case 9674:
        int v153 = 9;
LABEL_378:
        LODWORD(v187) = v153;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 2u, (unsigned int *)&v187, 1);
        *(_DWORD *)&v184[8] = 3;
        uint64_t v49 = 0x2D00000025;
LABEL_379:
        *(void *)v184 = v49;
LABEL_380:
        uint64_t v63 = (unsigned int *)v184;
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 3;
        goto LABEL_369;
      case 9813:
      case 9814:
        uint64_t v4 = 0xC00000025;
LABEL_4:
        *(void *)v184 = v4;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 2;
        goto LABEL_5;
      case 11063:
        LODWORD(v187) = 22;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)&v187, 1);
        uint64_t v40 = 0xB00000025;
        goto LABEL_366;
      case 11064:
      case 11065:
        *(void *)v184 = 0x2D00000016;
        uint64_t v7 = 2;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 2);
        uint64_t v83 = 0xC00000025;
LABEL_293:
        uint64_t v187 = v83;
        uint64_t v63 = (unsigned int *)&v187;
        goto LABEL_368;
      case 11082:
        int v147 = 32;
LABEL_385:
        *(_DWORD *)v184 = v147;
        uint64_t v5 = (uint64_t *)this;
        uint64_t v6 = 1;
LABEL_5:
        *(void *)&long long v189 = llvm::AttributeList::get(v5, 0xFFFFFFFF, (unsigned int *)v184, v6);
        uint64_t v7 = 1;
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 11093:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        int v150 = 32;
        goto LABEL_338;
      case 11208:
      case 11209:
      case 11210:
      case 11211:
      case 11212:
      case 11213:
      case 11214:
      case 11215:
      case 11216:
      case 11217:
      case 11218:
      case 11219:
      case 11220:
      case 11221:
      case 11222:
      case 11223:
      case 11326:
      case 11327:
      case 11328:
      case 11329:
      case 11330:
      case 11331:
      case 11332:
      case 11333:
      case 11334:
      case 11335:
      case 11336:
      case 11337:
      case 11338:
      case 11339:
      case 11340:
      case 11341:
      case 11342:
      case 11343:
      case 11344:
      case 11345:
      case 11346:
      case 11347:
      case 11348:
      case 11349:
      case 11441:
      case 11442:
      case 11443:
      case 11444:
      case 11445:
      case 11446:
      case 11447:
      case 11448:
      case 11449:
      case 11450:
      case 11451:
      case 11452:
      case 11453:
      case 11454:
      case 11455:
      case 11456:
      case 11457:
      case 11458:
      case 11459:
      case 11460:
      case 11461:
      case 11462:
      case 11463:
      case 11464:
        LODWORD(v187) = 9;
        uint64_t v159 = (uint64_t *)this;
        unsigned int v160 = 5;
LABEL_317:
        *(void *)&long long v189 = llvm::AttributeList::get(v159, v160, (unsigned int *)&v187, 1);
        uint64_t v40 = 0x2D00000025;
LABEL_366:
        *(void *)v184 = v40;
        uint64_t v7 = 2;
LABEL_367:
        uint64_t v63 = (unsigned int *)v184;
LABEL_368:
        uint64_t v64 = (uint64_t *)this;
        uint64_t v65 = 2;
LABEL_369:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v64, 0xFFFFFFFF, v63, v65);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 11350:
      case 11351:
      case 11352:
      case 11353:
      case 11782:
      case 11783:
      case 11784:
      case 11785:
        *(_DWORD *)v184 = 9;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 4u, (unsigned int *)v184, 1);
        LODWORD(v187) = 9;
LABEL_389:
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 5;
        goto LABEL_401;
      case 11370:
      case 11373:
      case 11374:
      case 11375:
      case 11880:
      case 11881:
        LODWORD(v187) = 9;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v135 = (uint64_t *)this;
        unsigned int v136 = 5;
        goto LABEL_254;
      case 11433:
      case 11436:
      case 11437:
      case 11438:
      case 11657:
      case 11660:
      case 11661:
      case 11662:
        LODWORD(v187) = 9;
        uint64_t v139 = (uint64_t *)this;
        unsigned int v140 = 4;
        goto LABEL_396;
      case 11475:
      case 11478:
      case 11601:
      case 11604:
      case 11609:
      case 11612:
      case 11890:
      case 11901:
      case 11905:
        LODWORD(v187) = 9;
        int v137 = (uint64_t *)this;
        unsigned int v138 = 2;
LABEL_393:
        *(void *)&long long v189 = llvm::AttributeList::get(v137, v138, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v133 = (uint64_t *)this;
        unsigned int v134 = 5;
        goto LABEL_397;
      case 11479:
      case 11480:
      case 11593:
      case 11596:
      case 11891:
        LODWORD(v187) = 9;
        uint64_t v7 = 3;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 3u, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        int v135 = (uint64_t *)this;
        unsigned int v136 = 6;
LABEL_254:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v135, v136, (unsigned int *)&v185, 1);
        uint64_t v59 = 0x2C00000025;
LABEL_255:
        *(void *)v184 = v59;
        int v30 = (unsigned int *)v184;
        uint64_t v31 = (uint64_t *)this;
        uint64_t v32 = 2;
LABEL_41:
        *(void *)&long long v190 = llvm::AttributeList::get(v31, 0xFFFFFFFF, v30, v32);
        return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
      case 11597:
      case 11598:
      case 11605:
      case 11606:
      case 11613:
      case 11614:
      case 11902:
      case 11906:
        LODWORD(v187) = 9;
        uint64_t v139 = (uint64_t *)this;
        unsigned int v140 = 5;
LABEL_396:
        *(void *)&long long v189 = llvm::AttributeList::get(v139, v140, (unsigned int *)&v187, 1);
        LODWORD(v185) = 9;
        unsigned int v133 = (uint64_t *)this;
        unsigned int v134 = 6;
LABEL_397:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v133, v134, (unsigned int *)&v185, 1);
        uint64_t v104 = 0x2C00000025;
LABEL_357:
        *(void *)v184 = v104;
        int v12 = (unsigned int *)v184;
LABEL_358:
        int v13 = (uint64_t *)this;
        uint64_t v14 = 2;
        goto LABEL_19;
      case 11623:
      case 11624:
      case 11625:
      case 11626:
      case 11627:
      case 11628:
      case 11629:
      case 11630:
      case 11631:
      case 11632:
      case 11633:
      case 11634:
      case 11635:
      case 11636:
      case 11637:
      case 11638:
      case 11639:
      case 11640:
      case 11641:
      case 11642:
      case 11643:
      case 11644:
      case 11645:
      case 11646:
      case 11766:
      case 11767:
      case 11768:
      case 11769:
      case 11770:
      case 11771:
      case 11772:
      case 11773:
      case 11774:
      case 11775:
      case 11776:
      case 11777:
      case 11778:
      case 11779:
      case 11780:
      case 11781:
      case 11786:
      case 11787:
      case 11788:
      case 11789:
      case 11790:
      case 11791:
      case 11792:
      case 11793:
        *(_DWORD *)v184 = 9;
        unsigned int v60 = (uint64_t *)this;
        unsigned int v61 = 5;
LABEL_337:
        *(void *)&long long v189 = llvm::AttributeList::get(v60, v61, (unsigned int *)v184, 1);
        int v150 = 37;
LABEL_338:
        LODWORD(v187) = v150;
        uint64_t v22 = (unsigned int *)&v187;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 1;
        goto LABEL_31;
      case 12508:
      case 12514:
        int v141 = 22;
LABEL_400:
        *(_DWORD *)v184 = v141;
        *(void *)&long long v189 = llvm::AttributeList::get((uint64_t *)this, 1u, (unsigned int *)v184, 1);
        LODWORD(v187) = v141;
        unsigned int v175 = (uint64_t *)this;
        unsigned int v176 = 2;
LABEL_401:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v175, v176, (unsigned int *)&v187, 1);
        LODWORD(v185) = 37;
        int v12 = (unsigned int *)&v185;
        int v13 = (uint64_t *)this;
        uint64_t v14 = 1;
LABEL_19:
        *(void *)&long long v190 = llvm::AttributeList::get(v13, 0xFFFFFFFF, v12, v14);
        uint64_t v7 = 3;
        break;
      default:
        LODWORD(v187) = 9;
        uint64_t v25 = (uint64_t *)this;
        unsigned int v26 = 2;
LABEL_34:
        *(void *)&long long v189 = llvm::AttributeList::get(v25, v26, (unsigned int *)&v187, 1);
        int v27 = &xmmword_1CFAE1084;
LABEL_35:
        *(_OWORD *)v184 = *v27;
        *(_OWORD *)&v184[12] = *(long long *)((char *)v27 + 12);
        uint64_t v22 = (unsigned int *)v184;
        uint64_t v23 = (uint64_t *)this;
        uint64_t v24 = 7;
LABEL_31:
        *((void *)&v189 + 1) = llvm::AttributeList::get(v23, 0xFFFFFFFF, v22, v24);
        uint64_t v7 = 2;
        break;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)&v189, v7);
}

void llvm::Function::~Function(int32x2_t ****this)
{
  *((_DWORD *)this + 8) &= ~0x800000u;
  uint64_t v2 = (int32x2_t ***)(this + 9);
  uint64_t v3 = this[10];
LABEL_2:
  if (v3 != v2)
  {
    if (v3) {
      uint64_t v4 = v3 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (int32x2_t **)(v4 + 5);
    for (uint64_t i = v4[6]; ; uint64_t i = (int32x2_t **)i[1])
    {
      if (i == v5)
      {
        uint64_t v3 = (int32x2_t ***)v3[1];
        goto LABEL_2;
      }
      if (i) {
        uint64_t v7 = i - 3;
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = *((_DWORD *)v7 + 5);
      if ((v8 & 0x40000000) != 0)
      {
        int v10 = (int32x2_t **)*(v7 - 1);
        uint64_t v9 = v8 & 0x7FFFFFF;
        if (!v9) {
          continue;
        }
      }
      else
      {
        uint64_t v9 = v8 & 0x7FFFFFF;
        int v10 = &v7[-4 * v9];
        if (!v9) {
          continue;
        }
      }
      uint64_t v11 = 32 * v9;
      int v12 = (void **)(v10 + 2);
      do
      {
        if (*(v12 - 2))
        {
          *unsigned int *v12 = *(v12 - 1);
          uint64_t v13 = (uint64_t)*(v12 - 1);
          if (v13) {
            *(void *)(v13 + 16) = *v12;
          }
        }
        *(v12 - 2) = 0;
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  for (uint64_t j = (int32x2_t ***)*v2; j != v2; uint64_t j = this[9])
  {
    int v15 = this[10];
    if (v15) {
      int v16 = (llvm::BasicBlock *)(v15 - 3);
    }
    else {
      int v16 = 0;
    }
    llvm::BasicBlock::eraseFromParent(v16);
  }
  unsigned int v17 = *((_DWORD *)this + 5);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    if ((v17 & 0x40000000) != 0)
    {
      uint64_t v24 = (int32x2_t ****)*(this - 1);
    }
    else
    {
      uint64_t v18 = v18;
      uint64_t v24 = &this[-4 * v18];
    }
    uint64_t v25 = 32 * v18;
    unsigned int v26 = v24 + 2;
    do
    {
      if (*(v26 - 2))
      {
        **unsigned int v26 = *(v26 - 1);
        uint64_t v27 = (uint64_t)*(v26 - 1);
        if (v27) {
          *(void *)(v27 + 16) = *v26;
        }
      }
      *(v26 - 2) = 0;
      v26 += 4;
      v25 -= 32;
    }
    while (v25);
    unsigned int v17 = *((_DWORD *)this + 5) & 0xF8000000;
    *((_DWORD *)this + 5) = v17;
    *((_WORD *)this + 9) &= 0xFFF1u;
  }
  if ((v17 & 0x20000000) != 0)
  {
    int v19 = ***this + 310;
    uint64_t v34 = (llvm::Function *)this;
    sub_1CC6035CC(v19, &v34);
    *((_DWORD *)this + 5) &= ~0x20000000u;
  }
  if (this[11]) {
    llvm::Function::clearArguments((llvm::Function *)this);
  }
  if ((*((_WORD *)this + 9) & 0x4000) != 0)
  {
    uint64_t v28 = (uint64_t)&(***this)[330];
    uint64_t v34 = (llvm::Function *)this;
    sub_1CD5CBF50(v28, (uint64_t *)&v34);
    *((_WORD *)this + 9) &= ~0x4000u;
  }
  uint64_t v20 = this[13];
  this[13] = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 3))
    {
      uint64_t v29 = *((unsigned int *)v20 + 2);
      if (v29)
      {
        unint64_t v30 = 0;
        uint64_t v31 = 8 * v29;
        do
        {
          uint64_t v32 = (*v20)[v30 / 8];
          if (v32 != (int32x2_t *)-8 && v32 != 0) {
            MEMORY[0x1D25D9CD0]();
          }
          v30 += 8;
        }
        while (v31 != v30);
      }
    }
    free(*v20);
    MEMORY[0x1D25D9CE0](v20, 0x1080C402C9B36C6);
  }
  for (k = this[10]; v2 != k; k = (int32x2_t ***)sub_1CC5BB830((uint64_t)v2, k))
    ;
  uint64_t v22 = (uint64_t)this[6];
  if (v22) {
    llvm::Comdat::removeUser(v22, (uint64_t)this);
  }
  this[6] = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);

  llvm::Value::~Value((llvm::Value *)this, v23);
}

uint64_t llvm::Function::dropAllReferences(uint64_t this)
{
  uint64_t v1 = this;
  *(_DWORD *)(this + 32) &= ~0x800000u;
  uint64_t v2 = (void *)(this + 72);
  uint64_t v3 = *(void **)(this + 80);
LABEL_2:
  if (v3 != v2)
  {
    if (v3) {
      uint64_t v4 = v3 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + 5;
    for (uint64_t i = (void *)v4[6]; ; uint64_t i = (void *)i[1])
    {
      if (i == v5)
      {
        uint64_t v3 = (void *)v3[1];
        goto LABEL_2;
      }
      if (i) {
        uint64_t v7 = i - 3;
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = *((_DWORD *)v7 + 5);
      if ((v8 & 0x40000000) != 0)
      {
        int v10 = (void *)*(v7 - 1);
        uint64_t v9 = v8 & 0x7FFFFFF;
        if (!v9) {
          continue;
        }
      }
      else
      {
        uint64_t v9 = v8 & 0x7FFFFFF;
        int v10 = &v7[-4 * v9];
        if (!v9) {
          continue;
        }
      }
      uint64_t v11 = 32 * v9;
      int v12 = (void **)(v10 + 2);
      do
      {
        if (*(v12 - 2))
        {
          *unsigned int *v12 = *(v12 - 1);
          uint64_t v13 = (uint64_t)*(v12 - 1);
          if (v13) {
            *(void *)(v13 + 16) = *v12;
          }
        }
        *(v12 - 2) = 0;
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  for (uint64_t j = (void *)*v2; j != v2; uint64_t j = *(void **)(v1 + 72))
  {
    uint64_t v15 = *(void *)(v1 + 80);
    if (v15) {
      int v16 = (llvm::BasicBlock *)(v15 - 24);
    }
    else {
      int v16 = 0;
    }
    this = llvm::BasicBlock::eraseFromParent(v16);
  }
  unsigned int v17 = *(_DWORD *)(v1 + 20);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    if ((v17 & 0x40000000) != 0)
    {
      uint64_t v20 = *(void *)(v1 - 8);
    }
    else
    {
      uint64_t v18 = v18;
      uint64_t v20 = v1 - 32 * v18;
    }
    uint64_t v21 = 32 * v18;
    uint64_t v22 = (void **)(v20 + 16);
    do
    {
      if (*(v22 - 2))
      {
        **uint64_t v22 = *(v22 - 1);
        uint64_t v23 = (uint64_t)*(v22 - 1);
        if (v23) {
          *(void *)(v23 + 16) = *v22;
        }
      }
      *(v22 - 2) = 0;
      v22 += 4;
      v21 -= 32;
    }
    while (v21);
    unsigned int v17 = *(_DWORD *)(v1 + 20) & 0xF8000000;
    *(_DWORD *)(v1 + 20) = v17;
    *(_WORD *)(v1 + 18) &= 0xFFF1u;
  }
  if ((v17 & 0x20000000) != 0)
  {
    int v19 = (int32x2_t *)(***(void ***)v1 + 2480);
    uint64_t v24 = v1;
    this = sub_1CC6035CC(v19, &v24);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return this;
}

void llvm::Function::clearArguments(llvm::Function *this)
{
  uint64_t v3 = (llvm::Value *)*((void *)this + 11);
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v4 = (llvm::Value *)((char *)v3 + 40 * v2);
    while (1)
    {
      __int16 v20 = 257;
      llvm::Value::setNameImpl(v3, &v19);
      if (!v3 || *((unsigned char *)v3 + 16)) {
        goto LABEL_5;
      }
      if ((*((unsigned char *)v3 + 23) & 0x10) == 0)
      {
LABEL_23:
        int v18 = 0;
        *((_DWORD *)v3 + 8) &= ~0x2000u;
        goto LABEL_22;
      }
      uint64_t v6 = ***(void ***)v3;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (!v8) {
        goto LABEL_24;
      }
      LODWORD(v9) = (v8 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      int v10 = (llvm::Value **)(v7 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != v3) {
        break;
      }
LABEL_15:
      uint64_t v14 = v10[1];
      unint64_t v16 = *(void *)v14;
      uint64_t v15 = (char *)v14 + 16;
      uint64_t v5 = (llvm::Value *)v16;
      if (v16 < 5) {
        goto LABEL_23;
      }
      if (*(_DWORD *)v15 != 1836477548 || v15[4] != 46) {
        goto LABEL_23;
      }
      *((_DWORD *)v3 + 8) |= 0x2000u;
      int v18 = llvm::Function::lookupIntrinsicID(v15, (unint64_t)v5);
LABEL_22:
      *((_DWORD *)v3 + 9) = v18;
LABEL_5:
      llvm::Value::~Value(v3, v5);
      uint64_t v3 = (llvm::Value *)((char *)v3 + 40);
      if (v3 == v4)
      {
        uint64_t v3 = (llvm::Value *)*((void *)this + 11);
        goto LABEL_7;
      }
    }
    int v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      uint64_t v11 = *(llvm::Value **)(v7 + 16 * v9);
      if (v11 == v3)
      {
        int v10 = (llvm::Value **)(v7 + 16 * v9);
        goto LABEL_15;
      }
    }
LABEL_24:
    int v10 = (llvm::Value **)(v7 + 16 * v8);
    goto LABEL_15;
  }
LABEL_7:
  operator delete(v3);
  *((void *)this + 11) = 0;
}

uint64_t llvm::Function::clearGC(uint64_t this)
{
  if ((*(_WORD *)(this + 18) & 0x4000) != 0)
  {
    uint64_t v1 = this;
    uint64_t v2 = ***(void ***)this + 2640;
    uint64_t v3 = v1;
    this = sub_1CD5CBF50(v2, &v3);
    *(_WORD *)(v1 + 18) &= ~0x4000u;
  }
  return this;
}

void llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  unint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    if (v2 >= 0x666666666666667) {
      sub_1CB833614();
    }
    uint64_t v3 = *((void *)this + 3);
    *((void *)this + 11) = operator new(40 * v2);
    uint64_t v4 = v2;
    if (v2)
    {
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t v6 = v5 + 1;
        uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 16) + 8 * (v5 + 1));
        uint64_t v8 = (uint64_t ***)(*((void *)this + 11) + 40 * v5);
        __int16 v24 = 257;
        long long *v8 = v7;
        v8[1] = 0;
        LODWORD(v7) = *((_DWORD *)v8 + 5) & 0xC0000000;
        *((_DWORD *)v8 + 4) = 21;
        *((_DWORD *)v8 + 5) = v7;
        v8[3] = (uint64_t **)this;
        *((_DWORD *)v8 + 8) = v5;
        llvm::Value::setNameImpl((llvm::Value *)v8, &v23);
        if (!*((unsigned char *)v8 + 16)) {
          break;
        }
LABEL_6:
        uint64_t v5 = v6;
        if (v6 == v4) {
          goto LABEL_7;
        }
      }
      if ((*((unsigned char *)v8 + 23) & 0x10) == 0) {
        goto LABEL_23;
      }
      uint64_t v9 = ***v8;
      uint64_t v10 = *(void *)(v9 + 152);
      uint64_t v11 = *(unsigned int *)(v9 + 168);
      if (v11)
      {
        LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        int v13 = (uint64_t ****)(v10 + 16 * v12);
        uint64_t v14 = *v13;
        if (*v13 == v8)
        {
LABEL_15:
          unsigned int v17 = v13[1];
          unint64_t v20 = (unint64_t)*v17;
          int v18 = v17 + 2;
          unint64_t v19 = v20;
          if (v20 >= 5 && *(_DWORD *)v18 == 1836477548 && v18[4] == 46)
          {
            *((_DWORD *)v8 + 8) |= 0x2000u;
            int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_22:
            *((_DWORD *)v8 + 9) = v22;
            goto LABEL_6;
          }
LABEL_23:
          int v22 = 0;
          *((_DWORD *)v8 + 8) &= ~0x2000u;
          goto LABEL_22;
        }
        int v15 = 1;
        while (v14 != (uint64_t ***)-4096)
        {
          int v16 = v12 + v15++;
          uint64_t v12 = v16 & (v11 - 1);
          uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
          if (v14 == v8)
          {
            int v13 = (uint64_t ****)(v10 + 16 * v12);
            goto LABEL_15;
          }
        }
      }
      int v13 = (uint64_t ****)(v10 + 16 * v11);
      goto LABEL_15;
    }
  }
LABEL_7:
  *((_WORD *)this + 9) &= ~1u;
}

uint64_t llvm::Function::addAttributeAtIndex(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, a2, a3);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t llvm::Function::addFnAttr(uint64_t a1, signed int a2)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::addFnAttr(uint64_t ***a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, -1, a2, a3, a4, a5);
  a1[14] = (uint64_t **)result;
  return result;
}

uint64_t llvm::Function::addRetAttr(llvm::LLVMContext ***a1, uint64_t a2)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, 0, a2);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

llvm::LLVMContext **llvm::Function::addRetAttrs(llvm::LLVMContext ***this, const llvm::AttrBuilder *a2)
{
  uint64_t result = (llvm::LLVMContext **)llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(this + 14), **this, 0, a2);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::removeAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeAttributeAtIndex(uint64_t a1, int a2, void *a3, size_t a4)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3, a4);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttr(uint64_t a1, int a2)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttr(uint64_t a1, void *a2, size_t a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2, a3);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttrs(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(uint64_t ***)a1;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3 && *(_DWORD *)(v3 + 8)) {
    uint64_t v5 = *(void *)(v3 + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v8 = v5;
  uint64_t v6 = llvm::AttributeSet::removeAttributes(&v8, v2, a2);
  if (v5 == v6) {
    uint64_t result = *v4;
  }
  else {
    uint64_t result = llvm::AttributeList::setAttributesAtIndex(v4, v2, -1, v6);
  }
  uint64_t *v4 = result;
  return result;
}

uint64_t llvm::Function::removeRetAttr(uint64_t a1, int a2)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, 0, a2);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeRetAttr(uint64_t a1, void *a2, size_t a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, 0, a2, a3);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeRetAttrs(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(uint64_t ***)a1;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3 && *(_DWORD *)(v3 + 8) >= 2u) {
    uint64_t v5 = *(void *)(v3 + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v8 = v5;
  uint64_t v6 = llvm::AttributeSet::removeAttributes(&v8, v2, a2);
  if (v5 == v6) {
    uint64_t result = *v4;
  }
  else {
    uint64_t result = llvm::AttributeList::setAttributesAtIndex(v4, v2, 0, v6);
  }
  uint64_t *v4 = result;
  return result;
}

uint64_t llvm::Function::removeParamAttrs(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = **(uint64_t ***)a1;
  uint64_t v6 = (uint64_t *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5 && (a2 + 2) < *(_DWORD *)(v5 + 8)) {
    uint64_t v7 = *(void *)(v5 + 8 * (a2 + 2) + 40);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v8 = llvm::AttributeSet::removeAttributes(&v10, v4, a3);
  if (v7 == v8) {
    uint64_t result = *v6;
  }
  else {
    uint64_t result = llvm::AttributeList::setAttributesAtIndex(v6, v4, a2 + 1, v8);
  }
  *uint64_t v6 = result;
  return result;
}

llvm::LLVMContext **llvm::Function::addDereferenceableParamAttr(llvm::LLVMContext ***this, int a2, uint64_t a3)
{
  uint64_t result = (llvm::LLVMContext **)llvm::AttributeList::addDereferenceableParamAttr((llvm::AttributeList *)(this + 14), **this, a2, a3);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::hasFnAttribute(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    return (*(unsigned __int8 *)(v2 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Function::hasFnAttribute(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3) {
    return 0;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4) {
    return 0;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  int v9 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v10 = v5 - 1;
  for (int i = 1; ; ++i)
  {
    int v12 = v9 & v10;
    uint64_t v13 = v8 + 24 * (v9 & v10);
    uint64_t v14 = *(const void **)v13;
    if (*(void *)v13 == -1)
    {
      if (a2 == (void *)-1) {
        return 1;
      }
      goto LABEL_8;
    }
    if (v14 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      return 1;
    }
LABEL_8:
    if (v14 == (const void *)-1) {
      return 0;
    }
    int v9 = i + v12;
  }
  if (a3 != *(void *)(v13 + 8) || a3 && memcmp(a2, v14, a3)) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t llvm::Function::hasRetAttribute(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 && *(_DWORD *)(v2 + 8) >= 2u && (uint64_t v4 = *(void *)(v2 + 48)) != 0) {
    return (*(unsigned __int8 *)(v4 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Function::getAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2, a3);
}

uint64_t llvm::Function::getAttributeAtIndex(uint64_t a1, int a2, void *a3, size_t a4)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    if ((a2 + 1) < *(_DWORD *)(v4 + 8))
    {
      uint64_t v5 = *(void *)(v4 + 8 * (a2 + 1) + 40);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 40);
        if (v6)
        {
          uint64_t v9 = *(void *)(v5 + 24);
          int v10 = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
          unsigned int v11 = v6 - 1;
          for (int i = 1; ; ++i)
          {
            int v13 = v10 & v11;
            uint64_t v14 = v9 + 24 * (v10 & v11);
            int v15 = *(const void **)v14;
            if (*(void *)v14 == -1)
            {
              if (a3 == (void *)-1) {
                return *(void *)(v14 + 16);
              }
            }
            else if (v15 == (const void *)-2)
            {
              if (a3 == (void *)-2) {
                return *(void *)(v14 + 16);
              }
            }
            else if (a4 == *(void *)(v14 + 8) && (!a4 || !memcmp(a3, *(const void **)v14, a4)))
            {
              return *(void *)(v14 + 16);
            }
            if (v15 == (const void *)-1) {
              return 0;
            }
            int v10 = i + v13;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::Function::getFnAttribute(uint64_t a1, int a2)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), -1, a2);
}

uint64_t llvm::Function::getFnAttribute(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3) {
    return 0;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4) {
    return 0;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  int v9 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v10 = v5 - 1;
  for (int i = 1; ; ++i)
  {
    int v12 = v9 & v10;
    uint64_t v13 = v8 + 24 * (v9 & v10);
    uint64_t v14 = *(const void **)v13;
    if (*(void *)v13 == -1)
    {
      if (a2 == (void *)-1) {
        return *(void *)(v13 + 16);
      }
      goto LABEL_8;
    }
    if (v14 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      return *(void *)(v13 + 16);
    }
LABEL_8:
    if (v14 == (const void *)-1) {
      return 0;
    }
    int v9 = i + v12;
  }
  if (a3 != *(void *)(v13 + 8) || a3 && memcmp(a2, *(const void **)v13, a3)) {
    goto LABEL_8;
  }
  return *(void *)(v13 + 16);
}

llvm::LLVMContext **llvm::Function::addDereferenceableOrNullParamAttr(llvm::LLVMContext ***this, int a2, uint64_t a3)
{
  uint64_t result = (llvm::LLVMContext **)llvm::AttributeList::addDereferenceableOrNullParamAttr((llvm::AttributeList *)(this + 14), **this, a2, a3);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::setValueSubclassDataBit(uint64_t this, char a2, int a3)
{
  int v3 = *(unsigned __int16 *)(this + 18);
  int v4 = v3 & ~(1 << a2);
  int v5 = v3 | (1 << a2);
  if (!a3) {
    LOWORD(v5) = v4;
  }
  *(_WORD *)(this + 18) = v5;
  return this;
}

uint64_t llvm::Function::hasStackProtectorFnAttr(llvm::Function *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(unsigned __int8 *)(v1 + 19);
  if ((v2 & 0x14) != 0) {
    return 1;
  }
  else {
    return (v2 >> 3) & 1;
  }
}

void llvm::Function::copyAttributesFrom(llvm::Function *this, const llvm::Function *a2)
{
  llvm::GlobalObject::copyAttributesFrom(this, a2);
  __int16 v4 = *((_WORD *)this + 9);
  *((_WORD *)this + 9) = v4 & 0xC00F | *((_WORD *)a2 + 9) & 0x3FF0;
  *((void *)this + 14) = *((void *)a2 + 14);
  if ((*((unsigned char *)a2 + 19) & 0x40) != 0)
  {
    GC = (const void **)llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a2, a2);
    if (*((char *)GC + 23) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, *GC, (unint64_t)GC[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)GC;
      uint64_t v21 = GC[2];
      *(_OWORD *)__p = v14;
    }
    llvm::Function::setGC((uint64_t)this, (uint64_t)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    uint64_t v7 = ***(void ***)this + 2640;
    int v22 = this;
    sub_1CD5CBF50(v7, (uint64_t *)&v22);
    *((_WORD *)this + 9) &= ~0x4000u;
  }
  __int16 v5 = *((_WORD *)a2 + 9);
  if ((v5 & 8) != 0)
  {
    int v8 = *((_DWORD *)a2 + 5);
    if ((v8 & 0x40000000) != 0) {
      int v9 = (uint64_t *)*((void *)a2 - 1);
    }
    else {
      int v9 = (uint64_t *)((char *)a2 - 32 * (v8 & 0x7FFFFFF));
    }
    __int16 v15 = *v9 != 0;
    sub_1CD5C0280(this, *v9);
    *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFF7 | (8 * v15);
    __int16 v5 = *((_WORD *)a2 + 9);
  }
  if ((v5 & 2) != 0)
  {
    int v10 = *((_DWORD *)a2 + 5);
    if ((v10 & 0x40000000) != 0) {
      unsigned int v11 = (char *)*((void *)a2 - 1);
    }
    else {
      unsigned int v11 = (char *)a2 - 32 * (v10 & 0x7FFFFFF);
    }
    uint64_t v16 = *((void *)v11 + 4);
    __int16 v17 = v16 != 0;
    sub_1CC5BB180(this, v16);
    *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFD | (2 * v17);
    __int16 v5 = *((_WORD *)a2 + 9);
  }
  if ((v5 & 4) != 0)
  {
    int v12 = *((_DWORD *)a2 + 5);
    if ((v12 & 0x40000000) != 0) {
      uint64_t v13 = (char *)*((void *)a2 - 1);
    }
    else {
      uint64_t v13 = (char *)a2 - 32 * (v12 & 0x7FFFFFF);
    }
    uint64_t v18 = *((void *)v13 + 8);
    __int16 v19 = v18 != 0;
    sub_1CD5C0388(this, v18);
    *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFB | (4 * v19);
  }
}

void *llvm::Function::setPrefixData(llvm::Function *this, llvm::Constant *a2)
{
  uint64_t result = sub_1CC5BB180(this, (uint64_t)a2);
  __int16 v5 = *((_WORD *)this + 9);
  __int16 v6 = v5 & 0xFFFD;
  __int16 v7 = v5 | 2;
  if (!a2) {
    __int16 v7 = v6;
  }
  *((_WORD *)this + 9) = v7;
  return result;
}

uint64_t llvm::Function::getPrefixData(llvm::Function *this)
{
  int v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0) {
    unsigned int v2 = (char *)*((void *)this - 1);
  }
  else {
    unsigned int v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  }
  return *((void *)v2 + 4);
}

BOOL llvm::Function::isTargetIntrinsic(llvm::Function *this)
{
  return this > 0x181;
}

{
  return *((_DWORD *)this + 9) > 0x181u;
}

unint64_t llvm::Function::lookupIntrinsicID(unsigned char *a1, unint64_t a2)
{
  uint64_t v4 = 5;
  if (a2 < 5) {
    uint64_t v4 = a2;
  }
  __int16 v5 = &a1[v4];
  size_t v6 = a2 - v4;
  v20[0] = (uint64_t)&a1[v4];
  v20[1] = a2 - v4;
  char v21 = 46;
  unint64_t v7 = llvm::StringRef::find(v20, &v21, 1uLL, 0);
  if (v6 >= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v6;
  }
  if (v7 != -1) {
    size_t v6 = v8;
  }
  int v9 = (const void **)&off_1E68492C0;
  unint64_t v10 = 20;
  do
  {
    unsigned int v11 = &v9[4 * (v10 >> 1)];
    size_t v12 = (size_t)v11[1];
    if (v6 >= v12) {
      size_t v13 = (size_t)v11[1];
    }
    else {
      size_t v13 = v6;
    }
    if (v13 && (int v14 = memcmp(*v11, v5, v13)) != 0)
    {
      int v15 = (v14 >> 31) | 1;
    }
    else
    {
      if (v12 < v6) {
        int v15 = -1;
      }
      else {
        int v15 = 1;
      }
      if (v12 == v6) {
        int v15 = 0;
      }
    }
    if (v15 == -1) {
      v10 += ~(v10 >> 1);
    }
    else {
      v10 >>= 1;
    }
    if (v15 == -1) {
      int v9 = v11 + 4;
    }
  }
  while (v10);
  if (v9 == (const void **)&off_1E6849540 || v9[1] != (const void *)v6 || v6 && memcmp(*v9, v5, v6)) {
    int v9 = (const void **)&off_1E68492C0;
  }
  uint64_t v16 = (const char **)&off_1E6830B58[(void)v9[2] + 1];
  int v17 = llvm::Intrinsic::lookupLLVMIntrinsicByName(v16, (uint64_t)v9[3], a1, a2);
  if (v17 == -1) {
    return 0;
  }
  unint64_t v18 = v17 + ((unint64_t)((char *)v16 - (char *)off_1E6830B58) >> 3);
  if (a2 != strlen(v16[v17]) && ((byte_1CFADA6F7[v18 >> 3] >> (v18 & 7)) & 1) == 0) {
    return 0;
  }
  return v18;
}

unint64_t llvm::Function::recalculateIntrinsicID(llvm::Function *this)
{
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
LABEL_16:
    unint64_t result = 0;
    *((_DWORD *)this + 8) &= ~0x2000u;
    goto LABEL_15;
  }
  uint64_t v2 = ***(void ***)this;
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(unsigned int *)(v2 + 168);
  if (!v4) {
    goto LABEL_17;
  }
  LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v6 = v3 + 16 * v5;
  unint64_t v7 = *(llvm::Function **)v6;
  if (*(llvm::Function **)v6 != this)
  {
    int v8 = 1;
    while (v7 != (llvm::Function *)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      unint64_t v7 = *(llvm::Function **)(v3 + 16 * v5);
      if (v7 == this)
      {
        uint64_t v6 = v3 + 16 * v5;
        goto LABEL_8;
      }
    }
LABEL_17:
    uint64_t v6 = v3 + 16 * v4;
  }
LABEL_8:
  unint64_t v10 = *(void **)(v6 + 8);
  unint64_t v13 = *v10;
  unsigned int v11 = v10 + 2;
  unint64_t v12 = v13;
  if (v13 < 5) {
    goto LABEL_16;
  }
  if (*(_DWORD *)v11 != 1836477548 || v11[4] != 46) {
    goto LABEL_16;
  }
  *((_DWORD *)this + 8) |= 0x2000u;
  unint64_t result = llvm::Function::lookupIntrinsicID(v11, v12);
LABEL_15:
  *((_DWORD *)this + 9) = result;
  return result;
}

char *llvm::Intrinsic::getName(llvm::Intrinsic *this)
{
  int v1 = off_1E6830B58[this];
  if (v1) {
    strlen(off_1E6830B58[this]);
  }
  return v1;
}

double sub_1CC5B8334@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t Type@<X4>, std::string *a6@<X8>)
{
  char v31 = 0;
  unint64_t v12 = off_1E6830B58[a1];
  if (!v12)
  {
    std::string::size_type v14 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_11;
  }
  size_t v13 = strlen(off_1E6830B58[a1]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_10:
  }
    memmove(p_dst, v12, v14);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  if (a3)
  {
    uint64_t v18 = 8 * a3;
    __int16 v19 = (uint64_t *)a2;
    do
    {
      sub_1CC5BBA50(*v19, &v31, &v27);
      unint64_t v20 = std::string::insert(&v27, 0, ".");
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      uint64_t v29 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v29 >= 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      if (v29 >= 0) {
        std::string::size_type v23 = HIBYTE(v29) & 0x7F;
      }
      else {
        std::string::size_type v23 = (std::string::size_type)__p[1];
      }
      std::string::append(&__dst, (const std::string::value_type *)v22, v23);
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
  if (v31)
  {
    if (!Type) {
      Type = llvm::Intrinsic::getType(*a4, a1, a2, a3);
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v24 = &__dst;
    }
    else {
      __int16 v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = __dst.__r_.__value_.__l.__size_;
    }
    llvm::Module::getUniqueIntrinsicName((uint64_t)a4, (unsigned __int8 *)v24, size, a1, Type, (uint64_t)a6);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    double result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a6 = __dst;
  }
  return result;
}

double llvm::Intrinsic::getNameNoUnnamedTypes@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  return sub_1CC5B8334(a1, a2, a3, 0, 0, a4);
}

void llvm::Intrinsic::getIntrinsicInfoTableEntries(int a1, uint64_t a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = dword_1CFAC8880[a1 - 1];
  int v9 = v11;
  long long v10 = xmmword_1CD96EEC0;
  if ((v3 & 0x80000000) != 0)
  {
    int v6 = v3 & 0x7FFFFFFF;
    unint64_t v7 = &unk_1CFAD4C34;
    uint64_t v4 = 23235;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v4 + 1) > *((void *)&v10 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v9 + v4) = v3 & 0xF;
      uint64_t v4 = v10 + 1;
      *(void *)&long long v10 = v10 + 1;
      BOOL v5 = v3 > 0xF;
      v3 >>= 4;
    }
    while (v5);
    int v6 = 0;
    unint64_t v7 = v9;
  }
  unsigned int v8 = v6;
  do
    sub_1CC5B8690(&v8, (uint64_t)v7, v4, 0, a2);
  while (v4 != v8 && v7[v8]);
  if (v9 != v11) {
    free(v9);
  }
}

_DWORD *sub_1CC5B8690(_DWORD *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v8 = result;
  BOOL v9 = a4 == 43;
  while (2)
  {
    BOOL v10 = v9;
    uint64_t v11 = *result;
    uint64_t v12 = (v11 + 1);
    *double result = v12;
    uint64_t v13 = *(unsigned __int8 *)(a2 + v11);
    BOOL v9 = 1;
    switch(*(unsigned char *)(a2 + v11))
    {
      case 1:
        unsigned int v28 = *(_DWORD *)(a5 + 8);
        if (v28 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v28;
        uint64_t v29 = 0x10000000ALL;
        goto LABEL_115;
      case 2:
        unsigned int v30 = *(_DWORD *)(a5 + 8);
        if (v30 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v30;
        goto LABEL_114;
      case 3:
        unsigned int v31 = *(_DWORD *)(a5 + 8);
        if (v31 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v31;
        uint64_t v29 = 0x100000000ALL;
        goto LABEL_115;
      case 4:
        unsigned int v32 = *(_DWORD *)(a5 + 8);
        if (v32 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v32;
        uint64_t v29 = 0x200000000ALL;
        goto LABEL_115;
      case 5:
        unsigned int v33 = *(_DWORD *)(a5 + 8);
        if (v33 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v33;
        uint64_t v29 = 0x400000000ALL;
        goto LABEL_115;
      case 6:
        unsigned int v34 = *(_DWORD *)(a5 + 8);
        if (v34 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v34;
        uint64_t v29 = 5;
        goto LABEL_115;
      case 7:
        unsigned int v35 = *(_DWORD *)(a5 + 8);
        if (v35 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v35;
        uint64_t v29 = 7;
        goto LABEL_115;
      case 8:
        unsigned int v36 = *(_DWORD *)(a5 + 8);
        if (v36 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v36;
        uint64_t v29 = 8;
        goto LABEL_115;
      case 9:
        LODWORD(v67) = 11;
        if (v10) {
          unint64_t v14 = 0x100000002;
        }
        else {
          unint64_t v14 = 2;
        }
        goto LABEL_27;
      case 0xA:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000004;
        BOOL v16 = !v10;
        uint64_t v17 = 4;
        goto LABEL_24;
      case 0xB:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000008;
        BOOL v16 = !v10;
        uint64_t v17 = 8;
        goto LABEL_24;
      case 0xC:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000010;
        BOOL v16 = !v10;
        uint64_t v17 = 16;
        goto LABEL_24;
      case 0xD:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000020;
        BOOL v16 = !v10;
        uint64_t v17 = 32;
        goto LABEL_24;
      case 0xE:
        unint64_t v18 = *(unsigned int *)(a5 + 8);
        if (v18 >= *(unsigned int *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        LODWORD(v19) = 0;
        uint64_t v20 = *(void *)a5 + 12 * v18;
        *(void *)uint64_t v20 = 12;
        goto LABEL_29;
      case 0xF:
        if (a3 == v12)
        {
          uint64_t v37 = 14;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 14;
        goto LABEL_144;
      case 0x10:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000040;
        BOOL v16 = !v10;
        uint64_t v17 = 64;
        goto LABEL_24;
      case 0x11:
        unsigned int v38 = *(_DWORD *)(a5 + 8);
        if (v38 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v38;
        uint64_t v29 = 2;
        goto LABEL_115;
      case 0x12:
        unsigned int v39 = *(_DWORD *)(a5 + 8);
        if (v39 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v39;
        uint64_t v29 = 3;
        goto LABEL_115;
      case 0x13:
        unsigned int v40 = *(_DWORD *)(a5 + 8);
        if (v40 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v40;
        uint64_t v29 = 4;
        goto LABEL_115;
      case 0x14:
        unsigned int v41 = *(_DWORD *)(a5 + 8);
        if (v41 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v41;
        goto LABEL_110;
      case 0x15:
        uint64_t v42 = 2;
        goto LABEL_128;
      case 0x16:
        uint64_t v42 = 3;
        goto LABEL_128;
      case 0x17:
        uint64_t v42 = 4;
        goto LABEL_128;
      case 0x18:
        uint64_t v42 = 5;
        goto LABEL_128;
      case 0x19:
        if (a3 == v12)
        {
          uint64_t v37 = 15;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 15;
        goto LABEL_144;
      case 0x1A:
        if (a3 == v12)
        {
          uint64_t v37 = 16;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 16;
        goto LABEL_144;
      case 0x1B:
        *double result = v11 + 2;
        uint64_t v21 = *(unsigned __int8 *)(a2 + v12);
        unint64_t v22 = *(unsigned int *)(a5 + 8);
        if (v22 >= *(unsigned int *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        LODWORD(v19) = 0;
        uint64_t v20 = *(void *)a5 + 12 * v22;
        *(void *)uint64_t v20 = (v21 << 32) | 0xC;
        goto LABEL_29;
      case 0x1C:
        LODWORD(v68) = 11;
        if (v10) {
          unint64_t v23 = 0x100000001;
        }
        else {
          unint64_t v23 = 1;
        }
        HIDWORD(v68) = v23;
        unint64_t v24 = *(unsigned int *)(a5 + 8);
        if (v24 >= *(unsigned int *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v19 = HIDWORD(v23);
        uint64_t v20 = *(void *)a5 + 12 * v24;
        *(void *)uint64_t v20 = v68;
        goto LABEL_29;
      case 0x1D:
        unsigned int v43 = *(_DWORD *)(a5 + 8);
        if (v43 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v43;
        uint64_t v29 = 1;
        goto LABEL_115;
      case 0x1E:
        if (a3 == v12)
        {
          uint64_t v37 = 17;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 17;
        goto LABEL_144;
      case 0x1F:
        if (a3 == v12)
        {
          uint64_t v37 = 18;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 18;
        goto LABEL_144;
      case 0x20:
        if (a3 == v12)
        {
          uint64_t v37 = 19;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 19;
        goto LABEL_144;
      case 0x21:
        if (a3 == v12)
        {
          uint64_t v37 = 20;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 20;
        goto LABEL_144;
      case 0x22:
        if (a3 == v12)
        {
          unint64_t v44 = 0;
          uint64_t v45 = 21;
          goto LABEL_149;
        }
        uint64_t v63 = (v11 + 2);
        *double result = v63;
        uint64_t v64 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v65 = 21;
        goto LABEL_146;
      case 0x23:
        unsigned int v46 = *(_DWORD *)(a5 + 8);
        if (v46 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v46;
        uint64_t v29 = 0x800000000ALL;
        goto LABEL_115;
      case 0x24:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000200;
        BOOL v16 = !v10;
        uint64_t v17 = 512;
        goto LABEL_24;
      case 0x25:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000400;
        BOOL v16 = !v10;
        uint64_t v17 = 1024;
        goto LABEL_24;
      case 0x26:
        uint64_t v42 = 6;
        goto LABEL_128;
      case 0x27:
        uint64_t v42 = 7;
        goto LABEL_128;
      case 0x28:
        uint64_t v42 = 8;
        goto LABEL_128;
      case 0x29:
        unsigned int v47 = *(_DWORD *)(a5 + 8);
        if (v47 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v47;
        uint64_t v29 = 9;
        goto LABEL_115;
      case 0x2A:
        if (a3 == v12)
        {
          uint64_t v37 = 22;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 22;
        goto LABEL_144;
      case 0x2B:
        continue;
      case 0x2C:
        if (a3 == v12)
        {
          uint64_t v37 = 23;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 23;
        goto LABEL_144;
      case 0x2D:
        if (a3 == v12)
        {
          uint64_t v37 = 24;
          goto LABEL_150;
        }
        *double result = v11 + 2;
        uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v62 = 24;
        goto LABEL_144;
      case 0x2E:
        if (a3 == v12)
        {
          uint64_t v37 = 25;
        }
        else
        {
          *double result = v11 + 2;
          uint64_t v61 = *(unsigned __int8 *)(a2 + v12);
          uint64_t v62 = 25;
LABEL_144:
          uint64_t v37 = v62 | (v61 << 32);
        }
LABEL_150:
        unsigned int v66 = *(_DWORD *)(a5 + 8);
        if (v66 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v66;
        *(void *)uint64_t v27 = v37;
LABEL_152:
        *(_DWORD *)(v27 + 8) = 0;
        ++*(_DWORD *)(a5 + 8);
        return result;
      case 0x2F:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000080;
        BOOL v16 = !v10;
        uint64_t v17 = 128;
        goto LABEL_24;
      case 0x30:
        unsigned int v48 = *(_DWORD *)(a5 + 8);
        if (v48 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v48;
        uint64_t v29 = 6;
        goto LABEL_115;
      case 0x31:
        uint64_t v42 = 9;
        goto LABEL_128;
      case 0x32:
        LODWORD(v67) = 11;
        uint64_t v15 = 0x100000100;
        BOOL v16 = !v10;
        uint64_t v17 = 256;
LABEL_24:
        if (v16) {
          unint64_t v14 = v17;
        }
        else {
          unint64_t v14 = v15;
        }
        goto LABEL_27;
      case 0x33:
        unsigned int v49 = *(_DWORD *)(a5 + 8);
        if (v49 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v49;
        uint64_t v29 = 26;
        goto LABEL_115;
      case 0x34:
        unsigned int v50 = *(_DWORD *)(a5 + 8);
        if (v50 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v50;
        uint64_t v29 = 27;
        goto LABEL_115;
      case 0x35:
        LODWORD(v67) = 11;
        if (v10) {
          unint64_t v14 = 0x100000003;
        }
        else {
          unint64_t v14 = 3;
        }
LABEL_27:
        HIDWORD(v67) = v14;
        unint64_t v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v19 = HIDWORD(v14);
        uint64_t v20 = *(void *)a5 + 12 * v25;
        *(void *)uint64_t v20 = v67;
LABEL_29:
        BOOL v9 = 0;
        *(_DWORD *)(v20 + 8) = v19;
        ++*(_DWORD *)(a5 + 8);
        continue;
      case 0x36:
        unsigned int v51 = *(_DWORD *)(a5 + 8);
        if (v51 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v52 = *(void *)a5 + 12 * v51;
        *(void *)uint64_t v52 = 0xA0000000CLL;
        *(_DWORD *)(v52 + 8) = 0;
        unsigned int v53 = *(_DWORD *)(a5 + 12);
        unsigned int v54 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v54;
        if (v54 >= v53) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v54;
LABEL_110:
        uint64_t v29 = 13;
        goto LABEL_115;
      case 0x37:
        unsigned int v55 = *(_DWORD *)(a5 + 8);
        if (v55 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v56 = *(void *)a5 + 12 * v55;
        *(void *)uint64_t v56 = 0x140000000CLL;
        *(_DWORD *)(v56 + 8) = 0;
        unsigned int v57 = *(_DWORD *)(a5 + 12);
        unsigned int v58 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v58;
        if (v58 >= v57) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v58;
LABEL_114:
        uint64_t v29 = 0x80000000ALL;
LABEL_115:
        *(void *)uint64_t v27 = v29;
        goto LABEL_152;
      case 0x38:
        if (a3 == v12)
        {
          unint64_t v44 = 0;
          uint64_t v45 = 28;
        }
        else
        {
          uint64_t v63 = (v11 + 2);
          *double result = v63;
          uint64_t v64 = *(unsigned __int8 *)(a2 + v12);
          uint64_t v65 = 28;
LABEL_146:
          uint64_t v45 = v65 | (v64 << 48);
          if (a3 == v63)
          {
            unint64_t v44 = 0;
          }
          else
          {
            *double result = v11 + 3;
            unint64_t v44 = (unint64_t)*(unsigned __int8 *)(a2 + v63) << 32;
          }
        }
LABEL_149:
        uint64_t v37 = v44 | v45;
        goto LABEL_150;
      case 0x39:
        uint64_t v42 = 10;
        goto LABEL_128;
      case 0x3A:
        uint64_t v42 = 11;
        goto LABEL_128;
      case 0x3B:
        uint64_t v42 = 12;
        goto LABEL_128;
      case 0x3C:
        uint64_t v42 = 13;
        goto LABEL_128;
      case 0x3D:
        uint64_t v42 = 14;
        goto LABEL_128;
      case 0x3E:
        uint64_t v42 = 15;
        goto LABEL_128;
      case 0x3F:
        uint64_t v42 = 16;
        goto LABEL_128;
      case 0x40:
        uint64_t v42 = 17;
        goto LABEL_128;
      case 0x41:
        uint64_t v42 = 18;
        goto LABEL_128;
      case 0x42:
        uint64_t v42 = 19;
LABEL_128:
        unsigned int v59 = *(_DWORD *)(a5 + 8);
        if (v59 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v60 = *(void *)a5 + 12 * v59;
        *(void *)uint64_t v60 = (v42 << 32) | 0xD;
        *(_DWORD *)(v60 + 8) = 0;
        ++*(_DWORD *)(a5 + 8);
        do
        {
          double result = (_DWORD *)sub_1CC5B8690(v8, a2, a3, v13, a5);
          LODWORD(v42) = v42 - 1;
        }
        while (v42);
        return result;
      default:
        unsigned int v26 = *(_DWORD *)(a5 + 8);
        if (v26 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = *(void *)a5 + 12 * v26;
        *(void *)uint64_t v27 = 0;
        goto LABEL_152;
    }
  }
}

uint64_t llvm::Intrinsic::getType(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v23[12] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v22 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2, (uint64_t)&v21);
  BOOL v16 = (unsigned int *)v21;
  uint64_t v17 = v22;
  sub_1CC5B9520(&v16, a3, a4, a1);
  unsigned int v8 = v7;
  unint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  if (v17)
  {
    do
    {
      sub_1CC5B9520(&v16, a3, a4, a1);
      if (v19 >= (unint64_t)HIDWORD(v19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v18 + v19) = v9;
      uint64_t v10 = v19;
      uint64_t v11 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
    }
    while (v17);
    uint64_t v12 = v18;
    if (!v11)
    {
      uint64_t v11 = 0;
      goto LABEL_6;
    }
    if (*(unsigned char *)(*((void *)v18 + v11 - 1) + 8) != 7)
    {
LABEL_6:
      int v13 = 0;
      goto LABEL_7;
    }
    LODWORD(v19) = v10;
    int v13 = 1;
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
    int v13 = 0;
    uint64_t v12 = v20;
  }
LABEL_7:
  uint64_t v14 = llvm::FunctionType::get(v8, (uint64_t)v12, v11, v13);
  if (v18 != v20) {
    free(v18);
  }
  if (v21 != v23) {
    free(v21);
  }
  return v14;
}

double sub_1CC5B9520(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v32[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a1;
  BOOL v5 = *(llvm::LLVMContext **)(*a1 + 1);
  uint64_t v6 = (uint64_t)a1[1] - 1;
  *a1 += 3;
  a1[1] = (unsigned int *)v6;
  switch(v4)
  {
    case 10:
      uint64_t v20 = (llvm::IntegerType *)a4;
      int v13 = v5;
      goto LABEL_36;
    case 11:
      uint64_t v14 = (uint64_t **)sub_1CC5B9520(a1, a2, a3, a4);
      if ((unint64_t)v5 >> 32 == 1)
      {
        uint64_t v15 = v5;
LABEL_68:
        return llvm::ScalableVectorType::get(v14, v15);
      }
      else
      {
        uint64_t v15 = v5;
LABEL_32:
        return llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, v15);
      }
    case 12:
      BOOL v16 = (llvm::PointerType *)sub_1CC5B9520(a1, a2, a3, a4);
      uint64_t v17 = v5;
      goto LABEL_41;
    case 13:
      unsigned int v31 = 0;
      if (v5)
      {
        do
        {
          uint64_t v23 = sub_1CC5B9520(a1, a2, a3, a4);
          if (v31 >= 8uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v32[v31] = v23;
          uint64_t v24 = ++v31;
          LODWORD(v5) = v5 - 1;
        }
        while (v5);
      }
      else
      {
        uint64_t v24 = 0;
      }
      llvm::StructType::get(a4, (uint64_t)v32, v24, 0);
      return result;
    case 15:
      uint64_t v18 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v18) {
        BOOL v19 = (*(_DWORD *)(v18 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v19 = 0;
      }
      if (!v19)
      {
        int v13 = (llvm::LLVMContext *)((*(_DWORD *)(v18 + 8) >> 7) & 0x1FFFFFE);
        goto LABEL_15;
      }
      double result = sub_1CC5BC4B0(v18);
      break;
    case 16:
      uint64_t v11 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v11) {
        BOOL v12 = (*(_DWORD *)(v11 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        double result = sub_1CD5C0754((uint64_t **)v11);
      }
      else
      {
        int v13 = (llvm::LLVMContext *)(*(_DWORD *)(v11 + 8) >> 9);
LABEL_15:
        uint64_t v20 = (llvm::IntegerType *)a4;
LABEL_36:
        llvm::IntegerType::get(v20, v13);
      }
      break;
    case 17:
      uint64_t v21 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      uint64_t v14 = *(uint64_t ***)(v21 + 24);
      uint64_t v15 = (llvm::Type *)(*(_DWORD *)(v21 + 32) >> 1);
      if (*(unsigned char *)(v21 + 8) != 19) {
        goto LABEL_32;
      }
      goto LABEL_68;
    case 18:
      uint64_t v14 = (uint64_t **)sub_1CC5B9520(a1, a2, a3, a4);
      uint64_t v26 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v26) {
        BOOL v27 = (*(_DWORD *)(v26 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v27 = 0;
      }
      if (!v27) {
        return result;
      }
      uint64_t v15 = (llvm::Type *)*(unsigned int *)(v26 + 32);
      if (*(_DWORD *)(v26 + 8) != 19) {
        goto LABEL_32;
      }
      goto LABEL_68;
    case 19:
      BOOL v16 = *(llvm::PointerType **)(a2 + (v5 & 0xFFFFFFF8));
      goto LABEL_40;
    case 20:
      uint64_t v22 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if ((*(_DWORD *)(v22 + 8) & 0xFE) != 0x12) {
        uint64_t v22 = 0;
      }
      BOOL v16 = *(llvm::PointerType **)(v22 + 24);
LABEL_40:
      uint64_t v17 = 0;
LABEL_41:
      llvm::PointerType::get(v16, v17);
      return result;
    case 23:
    case 24:
      if ((*(_DWORD *)(*(void *)(a2 + (v5 & 0xFFFFFFF8)) + 8) & 0xFE) == 0x12) {
        uint64_t v28 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      }
      else {
        uint64_t v28 = 0;
      }
      if (v4 == 23) {
        int v29 = 1;
      }
      else {
        int v29 = 2;
      }
      sub_1CD5C07E0(v28, v29);
      return result;
    case 25:
      if ((*(_DWORD *)(*(void *)(a2 + (v5 & 0xFFFFFFF8)) + 8) & 0xFE) == 0x12) {
        uint64_t v30 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      }
      else {
        uint64_t v30 = 0;
      }
      return sub_1CD5A62D4(v30);
    default:
      return result;
  }
  return result;
}

uint64_t llvm::Intrinsic::isLeaf(llvm::Intrinsic *this)
{
  return ((this - 124) > 4) | (6u >> ((_BYTE)this - 124)) & 1;
}

uint64_t llvm::Intrinsic::getDeclaration(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t Type = llvm::Intrinsic::getType(*a1, a2, a3, a4);
  if (a4)
  {
    p_p = &__p;
    sub_1CC5B8334(a2, a3, a4, a1, Type, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    p_p = (std::string *)off_1E6830B58[a2];
    if (p_p) {
      std::string::size_type size = strlen(off_1E6830B58[a2]);
    }
    else {
      std::string::size_type size = 0;
    }
  }
  uint64_t v11 = (llvm::PointerType *)llvm::Intrinsic::getType(*a1, a2, a3, a4);
  llvm::Module::getOrInsertFunction((uint64_t)a1, (unsigned __int8 *)p_p, (const char *)size, v11, 0);
  uint64_t v13 = v12;
  if (a4 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v13;
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  BOOL v16 = v18;
  uint64_t v17 = 0x200000000;
  if (sub_1CC5B9EA4(**(void **)(a1 + 16), a2, a3, (unint64_t)&v16, 0))
  {
    uint64_t v11 = 1;
  }
  else
  {
    unsigned int v6 = v17;
    uint64_t v7 = 8 * *(unsigned int *)(a1 + 12) - 8;
    if (8 * *(unsigned int *)(a1 + 12) == 8)
    {
      unsigned int v10 = v17;
LABEL_7:
      if (v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = v10;
        while ((sub_1CC5B9EA4(*(void *)((char *)v16 + v13), (unsigned int **)((char *)v16 + v13 + 8), a3, (unint64_t)&v16, 1) & 1) == 0)
        {
          uint64_t v11 = 0;
          ++v14;
          v13 += 24;
          if (v15 == v14) {
            goto LABEL_9;
          }
        }
        if (v6 > v14) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = 2;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      unsigned int v8 = (uint64_t *)(*(void *)(a1 + 16) + 8);
      uint64_t v9 = 8 * (v7 >> 3);
      while ((sub_1CC5B9EA4(*v8, a2, a3, (unint64_t)&v16, 0) & 1) == 0)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
        {
          unsigned int v10 = v17;
          goto LABEL_7;
        }
      }
      uint64_t v11 = 2;
    }
  }
LABEL_9:
  if (v16 != v18) {
    free(v16);
  }
  return v11;
}

uint64_t sub_1CC5B9EA4(uint64_t a1, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  BOOL v5 = a2[1];
  if (!v5) {
    return 1;
  }
  long long v65 = *(_OWORD *)a2;
  uint64_t v8 = (uint64_t)*a2;
  uint64_t v9 = **a2;
  unint64_t v10 = (*a2)[1];
  unsigned int v11 = (*a2)[2];
  uint64_t v12 = (unsigned int *)((char *)v5 - 1);
  uint64_t v13 = *a2 + 3;
  *a2 = v13;
  a2[1] = (unsigned int *)((char *)v5 - 1);
  uint64_t result = 1;
  switch(v9)
  {
    case 1:
      return result;
    case 2:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 10;
      goto LABEL_159;
    case 3:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 12;
      goto LABEL_159;
    case 4:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 9;
      goto LABEL_159;
    case 5:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 0;
      goto LABEL_159;
    case 6:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 1;
      goto LABEL_159;
    case 7:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 2;
      goto LABEL_159;
    case 8:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 3;
      goto LABEL_159;
    case 9:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 5;
      goto LABEL_159;
    case 10:
      BOOL v22 = *(_DWORD *)(a1 + 8) == 13 && v10 == *(_DWORD *)(a1 + 8) >> 8;
      goto LABEL_159;
    case 11:
      if (!a1 || (*(_DWORD *)(a1 + 8) & 0xFE) != 0x12) {
        return result;
      }
      if (*(_DWORD *)(a1 + 32) != v10 || v11 != (*(_DWORD *)(a1 + 8) == 19)) {
        return result;
      }
      uint64_t v33 = *(void *)(a1 + 24);
      goto LABEL_123;
    case 12:
      if (!a1) {
        return result;
      }
      if (*(_DWORD *)(a1 + 8) != 15 || *(_DWORD *)(a1 + 8) >> 8 != v10) {
        return result;
      }
      if (*(void *)(a1 + 24))
      {
        if (*v13 != 13 || *(_DWORD *)(v8 + 16))
        {
          uint64_t v33 = **(void **)(a1 + 16);
          goto LABEL_123;
        }
        uint64_t result = 0;
        uint64_t v62 = (unsigned int *)((char *)v5 - 2);
        uint64_t v63 = (unsigned int *)(v8 + 24);
      }
      else
      {
        uint64_t v60 = (unsigned int *)(v8 + 24);
        while (*v13 - 11 < 2)
        {
          uint64_t v12 = (unsigned int *)((char *)v12 - 1);
          v13 += 3;
          *a2 = v60;
          a2[1] = v12;
          v60 += 3;
        }
        if (*v13 == 14)
        {
          unsigned int v61 = *(_DWORD *)(a3 + 8);
          if (v61 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v61) = a1;
          ++*(_DWORD *)(a3 + 8);
          uint64_t v13 = *a2;
          uint64_t v12 = a2[1];
        }
        uint64_t result = 0;
        uint64_t v62 = (unsigned int *)((char *)v12 - 1);
        uint64_t v63 = v13 + 3;
      }
      *a2 = v63;
      a2[1] = v62;
      return result;
    case 13:
      if (!a1 || (*(_DWORD *)(a1 + 8) & 0x6FF) != 0x410 || *(_DWORD *)(a1 + 12) != v10) {
        return result;
      }
      if (!v10) {
        goto LABEL_174;
      }
      uint64_t v48 = 0;
      uint64_t v49 = 8 * v10 - 8;
      do
      {
        uint64_t result = sub_1CC5B9EA4(*(void *)(*(void *)(a1 + 16) + v48), a2, a3, a4, a5);
        if (result) {
          break;
        }
        BOOL v19 = v49 == v48;
        v48 += 8;
      }
      while (!v19);
      return result;
    case 14:
      unint64_t v29 = v10 >> 3;
      uint64_t v30 = *(unsigned int *)(a3 + 8);
      if (v30 > (v10 >> 3))
      {
        uint64_t v31 = *(void *)(*(void *)a3 + 8 * v29);
LABEL_135:
        BOOL v22 = v31 == a1;
        goto LABEL_159;
      }
      if (v30 < v29 || (v10 & 7) == 7) {
        goto LABEL_171;
      }
      if (v30 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v30) = a1;
      ++*(_DWORD *)(a3 + 8);
      uint64_t result = 0;
      switch(v10 & 7)
      {
        case 1uLL:
          if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
            int v59 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 8);
          }
          else {
            int v59 = *(_DWORD *)(a1 + 8);
          }
          BOOL v22 = v59 == 13;
          goto LABEL_159;
        case 2uLL:
          if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
            unsigned int v64 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 8);
          }
          else {
            unsigned int v64 = *(_DWORD *)(a1 + 8);
          }
          uint64_t result = v64 > 6;
          break;
        case 3uLL:
          BOOL v22 = (*(_DWORD *)(a1 + 8) & 0xFE) == 18;
          goto LABEL_159;
        case 4uLL:
          BOOL v22 = *(unsigned char *)(a1 + 8) == 15;
          goto LABEL_159;
        default:
          return result;
      }
      return result;
    case 15:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3)) {
        goto LABEL_171;
      }
      uint64_t v23 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      unsigned int v37 = *(_DWORD *)(v23 + 8);
      if (v23) {
        BOOL v38 = (*(_DWORD *)(v23 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v38 = 0;
      }
      if (v38)
      {
        sub_1CC5BC4B0(v23);
        goto LABEL_185;
      }
      if (v23) {
        BOOL v39 = *(_DWORD *)(v23 + 8) == 13;
      }
      else {
        BOOL v39 = 0;
      }
      if (!v39) {
        goto LABEL_66;
      }
      BOOL v27 = *(uint64_t **)v23;
      uint64_t v28 = (llvm::LLVMContext *)((v37 >> 7) & 0x1FFFFFE);
      goto LABEL_184;
    case 16:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3)) {
        goto LABEL_171;
      }
      uint64_t v23 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      unsigned int v24 = *(_DWORD *)(v23 + 8);
      if (v23) {
        BOOL v25 = (*(_DWORD *)(v23 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        sub_1CD5C0754((uint64_t **)v23);
      }
      else
      {
        if (v23) {
          BOOL v26 = *(_DWORD *)(v23 + 8) == 13;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26)
        {
LABEL_66:
          unsigned int v40 = 1;
          goto LABEL_186;
        }
        BOOL v27 = *(uint64_t **)v23;
        uint64_t v28 = (llvm::LLVMContext *)(v24 >> 9);
LABEL_184:
        uint64_t v23 = llvm::IntegerType::get((llvm::IntegerType *)v27, v28);
      }
LABEL_185:
      unsigned int v40 = 0;
LABEL_186:
      if (v23 == a1) {
        return v40;
      }
      else {
        return 1;
      }
    case 17:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3)) {
        goto LABEL_171;
      }
      uint64_t v41 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      if ((*(_DWORD *)(v41 + 8) & 0xFE) != 0x12) {
        return result;
      }
      uint64_t v42 = *(uint64_t ***)(v41 + 24);
      unsigned int v43 = (llvm::Type *)(*(_DWORD *)(v41 + 32) >> 1);
      if (*(_DWORD *)(v41 + 8) == 19) {
        llvm::ScalableVectorType::get(v42, v43);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v42, v43);
      }
      goto LABEL_74;
    case 18:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3))
      {
        *a2 = (unsigned int *)(v8 + 24);
        a2[1] = (unsigned int *)((char *)v5 - 2);
LABEL_171:
        if ((a5 & 1) == 0) {
          goto LABEL_173;
        }
      }
      else
      {
        if ((*(_DWORD *)(*(void *)(*(void *)a3 + 8 * (v10 >> 3)) + 8) & 0xFE) == 0x12) {
          uint64_t v50 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        }
        else {
          uint64_t v50 = 0;
        }
        if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
          uint64_t v51 = a1;
        }
        else {
          uint64_t v51 = 0;
        }
        if ((v50 == 0) != (v51 != 0))
        {
          if (v51)
          {
            int v52 = *(_DWORD *)(v50 + 32);
            BOOL v53 = *(unsigned __int8 *)(v50 + 8) == 19;
            if (v52 != *(_DWORD *)(v51 + 32) || ((v53 ^ (*(unsigned char *)(v51 + 8) == 19)) & 1) != 0) {
              return result;
            }
            a1 = *(void *)(v51 + 24);
          }
          uint64_t v33 = a1;
LABEL_123:
          uint64_t result = sub_1CC5B9EA4(v33, a2, a3, a4, a5);
        }
      }
      break;
    case 19:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3)) {
        goto LABEL_171;
      }
      if (!a1 || *(unsigned char *)(a1 + 8) != 15) {
        return result;
      }
      uint64_t v56 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      uint64_t v57 = *(void *)(a1 + 24);
      goto LABEL_155;
    case 20:
      if (*(_DWORD *)(a3 + 8) <= (v10 >> 3)) {
        goto LABEL_171;
      }
      uint64_t v44 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      if ((*(_DWORD *)(v44 + 8) & 0xFE) != 0x12) {
        uint64_t v44 = 0;
      }
      if (*(unsigned char *)(a1 + 8) == 15) {
        uint64_t v45 = a1;
      }
      else {
        uint64_t v45 = 0;
      }
      if (!v45) {
        return result;
      }
      goto LABEL_146;
    case 21:
      uint64_t v46 = *(unsigned int *)(a3 + 8);
      if (v46 <= (unsigned __int16)v10) {
        goto LABEL_148;
      }
      if ((a5 & 1) == 0)
      {
        if (v46 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v46) = a1;
        ++*(_DWORD *)(a3 + 8);
      }
      uint64_t v44 = *(void *)(*(void *)a3 + 8 * (unsigned __int16)v10);
      if ((*(_DWORD *)(v44 + 8) & 0xFE) != 0x12) {
        uint64_t v44 = 0;
      }
      if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
        uint64_t v47 = a1;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t result = 1;
      if (!v47) {
        return result;
      }
      if (!v44) {
        return result;
      }
      if (*(_DWORD *)(v44 + 32) != *(_DWORD *)(v47 + 32)) {
        return result;
      }
      if ((*(unsigned char *)(v44 + 8) == 19) != (*(unsigned char *)(v47 + 8) == 19)) {
        return result;
      }
      uint64_t v45 = *(void *)(v47 + 24);
      if (!v45 || *(unsigned char *)(v45 + 8) != 15) {
        return result;
      }
      goto LABEL_147;
    case 22:
      if (*(_DWORD *)(a3 + 8) <= v10 >> 3) {
        goto LABEL_171;
      }
      uint64_t v54 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      if (v54) {
        BOOL v55 = (*(_DWORD *)(v54 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v55 = 0;
      }
      if (!v55) {
        return result;
      }
      uint64_t v31 = *(void *)(v54 + 24);
      goto LABEL_135;
    case 23:
    case 24:
      if (*(_DWORD *)(a3 + 8) <= v10 >> 3) {
        goto LABEL_171;
      }
      uint64_t v18 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      if (v18) {
        BOOL v19 = (*(_DWORD *)(v18 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v19 = 0;
      }
      if (!v19) {
        return result;
      }
      if (v9 == 23) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      sub_1CD5C07E0(v18, v20);
LABEL_74:
      BOOL v22 = v21 == a1;
      goto LABEL_159;
    case 25:
      if (*(_DWORD *)(a3 + 8) <= v10 >> 3) {
        goto LABEL_171;
      }
      uint64_t v34 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
      if ((*(_DWORD *)(v34 + 8) & 0xFE) != 0x12) {
        uint64_t v34 = 0;
      }
      if ((*(_DWORD *)(a1 + 8) & 0xFE) != 0x12) {
        a1 = 0;
      }
      if (!a1 || !v34) {
        return result;
      }
      sub_1CD5A62D4(v34);
      BOOL v22 = a1 == v35;
      goto LABEL_159;
    case 26:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 11;
      goto LABEL_159;
    case 27:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 6;
      goto LABEL_159;
    case 28:
      uint64_t v46 = *(unsigned int *)(a3 + 8);
      if (v46 <= (unsigned __int16)v10)
      {
LABEL_148:
        if ((a5 & 1) == 0)
        {
          if (v46 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v46) = a1;
          ++*(_DWORD *)(a3 + 8);
LABEL_173:
          sub_1CD5C0838(a4, a1, &v65);
LABEL_174:
          uint64_t result = 0;
        }
      }
      else
      {
        if ((a5 & 1) == 0)
        {
          if (v46 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v46) = a1;
          ++*(_DWORD *)(a3 + 8);
        }
        uint64_t v44 = *(void *)(*(void *)a3 + 8 * (unsigned __int16)v10);
        if ((*(_DWORD *)(v44 + 8) & 0xFE) != 0x12) {
          uint64_t v44 = 0;
        }
        if (*(unsigned char *)(a1 + 8) == 15) {
          uint64_t v45 = a1;
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t result = 1;
        if (v45)
        {
LABEL_146:
          if (v44)
          {
LABEL_147:
            uint64_t v56 = *(void *)(v44 + 24);
            uint64_t v57 = *(void *)(v45 + 24);
LABEL_155:
            if (v57) {
              BOOL v22 = v57 == v56;
            }
            else {
              BOOL v22 = 1;
            }
LABEL_159:
            uint64_t result = !v22;
          }
        }
      }
      break;
    default:
      BOOL v22 = *(unsigned char *)(a1 + 8) == 7;
      goto LABEL_159;
  }
  return result;
}

uint64_t llvm::Intrinsic::matchIntrinsicVarArg(uint64_t result, int **a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    if (v2 == (int *)1)
    {
      int v3 = **a2;
      *a2 += 3;
      a2[1] = 0;
      if (v3 == 1) {
        return result ^ 1;
      }
      else {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL llvm::Intrinsic::getIntrinsicSignature(uint64_t a1, uint64_t a2)
{
  v14[12] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 36);
  if (!v3) {
    return 0;
  }
  uint64_t v12 = v14;
  uint64_t v13 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v3, (uint64_t)&v12);
  unint64_t v10 = (unsigned int *)v12;
  uint64_t v11 = v13;
  if (llvm::Intrinsic::matchIntrinsicSignature(*(void *)(a1 + 24), &v10, a2))
  {
    BOOL v7 = 0;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 24) + 8);
    BOOL v6 = v5 > 0xFF;
    if (v11) {
      BOOL v6 = v11 != 1 || *v10 != 1 || v5 < 0x100;
    }
    BOOL v7 = !v6;
  }
  if (v12 != v14) {
    free(v12);
  }
  return v7;
}

llvm::Value *llvm::Intrinsic::remangleIntrinsicFunction(llvm::Intrinsic *this, llvm::Function *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = v32;
  uint64_t v31 = 0x400000000;
  int v3 = *((_DWORD *)this + 9);
  if (!v3) {
    goto LABEL_29;
  }
  uint64_t v33 = v35;
  uint64_t v34 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v3, (uint64_t)&v33);
  BOOL v27 = v33;
  uint64_t v28 = v34;
  if (llvm::Intrinsic::matchIntrinsicSignature(*((void *)this + 3), (unsigned int **)&v27, (uint64_t)&v30))
  {
    int v6 = 0;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(*((void *)this + 3) + 8);
    BOOL v5 = v4 > 0xFF;
    if (v28) {
      BOOL v5 = v28 != 1 || *(_DWORD *)v27 != 1 || v4 < 0x100;
    }
    int v6 = !v5;
  }
  if (v33 != v35) {
    free(v33);
  }
  if (!v6)
  {
LABEL_29:
    Declaration = 0;
    goto LABEL_25;
  }
  int v7 = *((_DWORD *)this + 9);
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    Declaration = 0;
    uint64_t v18 = &byte_1CFBCE98E;
    goto LABEL_16;
  }
  uint64_t v8 = ***(void ***)this;
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(unsigned int *)(v8 + 168);
  if (!v10) {
    goto LABEL_28;
  }
  LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v12 = v9 + 16 * v11;
  uint64_t v13 = *(llvm::Intrinsic **)v12;
  if (*(llvm::Intrinsic **)v12 != this)
  {
    int v14 = 1;
    while (v13 != (llvm::Intrinsic *)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(llvm::Intrinsic **)(v9 + 16 * v11);
      if (v13 == this)
      {
        uint64_t v12 = v9 + 16 * v11;
        goto LABEL_15;
      }
    }
LABEL_28:
    uint64_t v12 = v9 + 16 * v10;
  }
LABEL_15:
  BOOL v16 = *(void **)(v12 + 8);
  BOOL v19 = (llvm::Value *)*v16;
  uint64_t v18 = (char *)(v16 + 2);
  Declaration = v19;
LABEL_16:
  p_p = &__p;
  sub_1CC5B8334(*((_DWORD *)this + 9), (uint64_t)v30, v31, *((uint64_t ***)this + 5), *((void *)this + 3), &__p);
  char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    unint64_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (Declaration == (llvm::Value *)size)
  {
    if (!Declaration) {
      goto LABEL_23;
    }
    if (!memcmp(v18, p_p, (size_t)Declaration))
    {
      Declaration = 0;
      goto LABEL_23;
    }
  }
  uint64_t NamedValue = llvm::Module::getNamedValue(*((void *)this + 5), (unsigned __int8 *)p_p, size);
  if (NamedValue)
  {
    Declaration = (llvm::Value *)NamedValue;
    if (!*(unsigned char *)(NamedValue + 16) && *(void *)(NamedValue + 24) == *((void *)this + 3)) {
      goto LABEL_36;
    }
    sub_1CBAD7600(".renamed", (const void **)&__p.__r_.__value_.__l.__data_, &v27);
    v35[8] = 260;
    uint64_t v33 = &v27;
    llvm::Value::setName(Declaration, (const char **)&v33);
    if (v29 < 0) {
      operator delete(v27);
    }
  }
  Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), v7, (uint64_t)v30, v31);
LABEL_36:
  *((_WORD *)Declaration + 9) = *((_WORD *)Declaration + 9) & 0xC00F | *((_WORD *)this + 9) & 0x3FF0;
  char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_23:
  if (v21 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_25:
  if (v30 != v32) {
    free(v30);
  }
  return Declaration;
}

uint64_t llvm::Function::hasAddressTaken(llvm::Function *this, const llvm::User **a2, int a3, int a4, int a5, int a6)
{
  int v6 = (const llvm::Use *)*((void *)this + 1);
  if (!v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v12 = *((void *)v6 + 3);
    unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 4) {
      goto LABEL_48;
    }
    if (a3)
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v54, v6);
      if (v54) {
        BOOL v14 = v56 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = v14;
      if (v55 != &v57) {
        free(v55);
      }
      if (!v15) {
        goto LABEL_48;
      }
      unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
    }
    if (v13 < 0x1C) {
      goto LABEL_38;
    }
    if (v13 - 33 > 0x33 || ((1 << (v13 - 33)) & 0x8000000000041) == 0) {
      break;
    }
    if ((const llvm::Use *)(v12 - 32) != v6 || *(void *)(v12 + 72) != *((void *)this + 3))
    {
      if (!a6) {
        goto LABEL_86;
      }
      uint64_t v17 = *((void *)v6 + 3);
      int v18 = *(_DWORD *)(v17 + 20);
      uint64_t v19 = (v18 & 0x40000000) != 0 ? *(void *)(v17 - 8) : v17 - 32 * (v18 & 0x7FFFFFF);
      unint64_t v20 = ((unint64_t)v6 - v19) >> 5;
      if (!sub_1CD5C08CC((llvm::User *)v12, v20)
        || *(_DWORD *)(*(void *)llvm::CallBase::getBundleOpInfoForOperand((char *)v12, v20) + 8) != 6)
      {
        goto LABEL_86;
      }
    }
LABEL_48:
    int v6 = (const llvm::Use *)*((void *)v6 + 1);
    if (!v6) {
      return 0;
    }
  }
  if (a4)
  {
    if (v13 - 66 <= 0xC)
    {
      uint64_t v21 = *(void *)(v12 + 8);
      if (v21)
      {
        while (1)
        {
          uint64_t v22 = *(void *)(v21 + 24);
          if (*(unsigned char *)(v22 + 16) != 84) {
            break;
          }
          uint64_t v23 = *(void *)(v22 - 32);
          if (!v23
            || *(unsigned char *)(v23 + 16)
            || *(void *)(v23 + 24) != *(void *)(v22 + 72)
            || (*(unsigned char *)(v23 + 33) & 0x20) == 0
            || !sub_1CBFFBEB4(v22))
          {
            break;
          }
          uint64_t v21 = *(void *)(v21 + 8);
          if (!v21) {
            goto LABEL_48;
          }
        }
      }
    }
  }
LABEL_38:
  if (a5)
  {
    uint64_t v24 = *(void *)(v12 + 8);
    if (v24)
    {
      int v25 = *(unsigned __int8 *)(v12 + 16);
      if ((v25 == 77 || v25 == 5 && *(_WORD *)(v12 + 18) == 49) && !*(void *)(v24 + 8))
      {
        uint64_t v24 = *(void *)(v24 + 24);
        if (!*(void *)(v24 + 8)) {
          uint64_t v24 = v12;
        }
        goto LABEL_84;
      }
      while (1)
      {
        BOOL v26 = *(uint64_t ****)(v24 + 24);
        if (v26) {
          BOOL v27 = *((unsigned char *)v26 + 16) == 3;
        }
        else {
          BOOL v27 = 0;
        }
        if (!v27 || (*((unsigned char *)v26 + 23) & 0x10) == 0) {
          goto LABEL_86;
        }
        uint64_t v28 = ***v26;
        uint64_t v29 = *(void *)(v28 + 152);
        uint64_t v30 = *(unsigned int *)(v28 + 168);
        unsigned int v31 = v26 >> 4;
        if (!v30) {
          goto LABEL_62;
        }
        LODWORD(v32) = (v30 - 1) & (v31 ^ (v26 >> 9));
        uint64_t v33 = (uint64_t ****)(v29 + 16 * v32);
        uint64_t v34 = *v33;
        if (*v33 != v26) {
          break;
        }
LABEL_63:
        unsigned int v37 = v33[1];
        if (*v37 == (uint64_t **)18)
        {
          BOOL v38 = v37[2];
          BOOL v39 = v37[3];
          int v40 = *((unsigned __int16 *)v37 + 16);
          BOOL v41 = v38 == (uint64_t **)0x6D6F632E6D766C6CLL && v39 == (uint64_t **)0x73752E72656C6970;
          if (v41 && v40 == 25701) {
            goto LABEL_84;
          }
        }
        if (!v30) {
          goto LABEL_77;
        }
        LODWORD(v43) = (v30 - 1) & (v31 ^ (v26 >> 9));
        uint64_t v44 = (uint64_t ****)(v29 + 16 * v43);
        uint64_t v45 = *v44;
        if (*v44 != v26)
        {
          int v46 = 1;
          while (v45 != (uint64_t ***)-4096)
          {
            int v47 = v43 + v46++;
            uint64_t v43 = v47 & (v30 - 1);
            uint64_t v45 = *(uint64_t ****)(v29 + 16 * v43);
            if (v45 == v26)
            {
              uint64_t v44 = (uint64_t ****)(v29 + 16 * v43);
              goto LABEL_78;
            }
          }
LABEL_77:
          uint64_t v44 = (uint64_t ****)(v29 + 16 * v30);
        }
LABEL_78:
        uint64_t v48 = v44[1];
        if (*v48 != (uint64_t **)9) {
          goto LABEL_86;
        }
        uint64_t v49 = v48[2];
        int v50 = *((unsigned __int8 *)v48 + 24);
        if (v49 != (uint64_t **)0x6573752E6D766C6CLL || v50 != 100) {
          goto LABEL_86;
        }
LABEL_84:
        uint64_t v24 = *(void *)(v24 + 8);
        if (!v24) {
          goto LABEL_48;
        }
      }
      int v35 = 1;
      while (v34 != (uint64_t ***)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v30 - 1);
        uint64_t v34 = *(uint64_t ****)(v29 + 16 * v32);
        if (v34 == v26)
        {
          uint64_t v33 = (uint64_t ****)(v29 + 16 * v32);
          goto LABEL_63;
        }
      }
LABEL_62:
      uint64_t v33 = (uint64_t ****)(v29 + 16 * v30);
      goto LABEL_63;
    }
  }
LABEL_86:
  if (a2) {
    *a2 = (const llvm::User *)v12;
  }
  return 1;
}

BOOL llvm::Function::isDefTriviallyDead(llvm::Function *this)
{
  int v1 = *((_DWORD *)this + 8);
  if ((v1 & 0xE) != 2)
  {
    unsigned int v2 = v1 & 0xF;
    BOOL v3 = v2 > 8;
    int v4 = (1 << v2) & 0x182;
    if (v3 || v4 == 0) {
      return 0;
    }
  }
  uint64_t v7 = *((void *)this + 1);
  if (!v7) {
    return 1;
  }
  do
  {
    int v8 = *(unsigned __int8 *)(*(void *)(v7 + 24) + 16);
    BOOL result = v8 == 4;
    if (v8 != 4) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7);
  return result;
}

uint64_t llvm::Function::callsFunctionThatReturnsTwice(llvm::Function *this)
{
  int v1 = (char *)this + 72;
  for (uint64_t i = *((void *)this + 10); (char *)i != v1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = i - 24;
    if (!i) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4 != v3 + 40)
    {
      while (1)
      {
        if (v4) {
          uint64_t v5 = v4 - 24;
        }
        else {
          uint64_t v5 = 0;
        }
        unsigned int v6 = *(unsigned __int8 *)(v5 + 16) - 33;
        BOOL v7 = v6 > 0x33;
        uint64_t v8 = (1 << v6) & 0x8000000000041;
        if (!v7 && v8 != 0)
        {
          uint64_t v10 = *(void *)(v4 + 40);
          if (v10)
          {
            if (*(char *)(v10 + 17) < 0) {
              return 1;
            }
          }
          if (llvm::CallBase::hasFnAttrOnCalledFunction(v4 - 24, 47)) {
            return 1;
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
        uint64_t v11 = i - 24;
        if (!i) {
          uint64_t v11 = 0;
        }
        if (v4 == v11 + 40) {
          break;
        }
LABEL_24:
        if ((char *)i == v1) {
          return 0;
        }
      }
      while (1)
      {
        uint64_t i = *(void *)(i + 8);
        if ((char *)i == v1) {
          return 0;
        }
        uint64_t v12 = i - 24;
        if (!i) {
          uint64_t v12 = 0;
        }
        uint64_t v4 = *(void *)(v12 + 48);
        if (v4 != v12 + 40) {
          goto LABEL_24;
        }
      }
    }
  }
  return 0;
}

void *sub_1CC5BB180(void *result, uint64_t a2)
{
  unsigned int v2 = result;
  if (a2)
  {
    BOOL result = llvm::Function::allocHungoffUselist(result);
    int v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = (void *)*(v2 - 1);
    }
    else {
      uint64_t v5 = &v2[-4 * (v4 & 0x7FFFFFF)];
    }
    if (v5[4])
    {
      *(void *)v5[6] = v5[5];
      uint64_t v6 = v5[5];
      if (v6) {
        *(void *)(v6 + 16) = v5[6];
      }
    }
    _OWORD v5[4] = a2;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = (void *)(a2 + 8);
    uint64_t v7 = v9;
    v5[5] = v9;
    if (v9) {
      *(void *)(v7 + 16) = v5 + 5;
    }
    v5[6] = v8;
    void *v8 = v5 + 4;
  }
  else
  {
    int v10 = *((_DWORD *)result + 5);
    if ((v10 & 0x7FFFFFF) != 0)
    {
      if ((v10 & 0x40000000) != 0) {
        uint64_t v11 = (void *)*(result - 1);
      }
      else {
        uint64_t v11 = &result[-4 * (v10 & 0x7FFFFFF)];
      }
      uint64_t v12 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(void **)*result + 1888), 0);
      BOOL result = llvm::ConstantPointerNull::get(v12, v13);
      BOOL v14 = v11 + 4;
      if (v11[4])
      {
        *(void *)v11[6] = v11[5];
        uint64_t v15 = v11[5];
        if (v15) {
          *(void *)(v15 + 16) = v11[6];
        }
      }
      *BOOL v14 = result;
      if (result)
      {
        uint64_t v17 = result[1];
        ++result;
        uint64_t v16 = v17;
        v11[5] = v17;
        if (v17) {
          *(void *)(v16 + 16) = v11 + 5;
        }
        v11[6] = result;
        *BOOL result = v14;
      }
    }
  }
  return result;
}

void *llvm::Function::allocHungoffUselist(void *this)
{
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
  {
    int v1 = this;
    unsigned int v2 = (char *)operator new(0x60uLL);
    uint64_t v3 = 0;
    *((void *)v1 - 1) = v2;
    do
    {
      int v4 = &v2[v3];
      *(void *)int v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *((void *)v4 + 3) = v1;
      v3 += 32;
    }
    while (v3 != 96);
    v1[5] = v1[5] & 0xF8000000 | 3;
    uint64_t v5 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)v1 + 1888), 0);
    this = llvm::ConstantPointerNull::get(v5, v6);
    int v7 = v1[5];
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v8 = &v1[-8 * (v7 & 0x7FFFFFF)];
    }
    if (*(void *)v8)
    {
      **((void **)v8 + 2) = *((void *)v8 + 1);
      uint64_t v21 = *((void *)v8 + 1);
      if (v21) {
        *(void *)(v21 + 16) = *((void *)v8 + 2);
      }
    }
    *(void *)uint64_t v8 = this;
    if (this)
    {
      uint64_t v9 = this + 1;
      uint64_t v10 = this[1];
      *((void *)v8 + 1) = v10;
      if (v10) {
        *(void *)(v10 + 16) = v8 + 2;
      }
      *((void *)v8 + 2) = v9;
      *uint64_t v9 = v8;
    }
    int v11 = v1[5];
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v12 = &v1[-8 * (v11 & 0x7FFFFFF)];
    }
    unsigned int v13 = v12 + 8;
    if (*((void *)v12 + 4))
    {
      **((void **)v12 + 6) = *((void *)v12 + 5);
      uint64_t v22 = *((void *)v12 + 5);
      if (v22) {
        *(void *)(v22 + 16) = *((void *)v12 + 6);
      }
    }
    *unsigned int v13 = this;
    if (this)
    {
      BOOL v14 = this + 1;
      uint64_t v15 = this[1];
      *((void *)v12 + 5) = v15;
      if (v15) {
        *(void *)(v15 + 16) = v12 + 10;
      }
      *((void *)v12 + 6) = v14;
      *BOOL v14 = v13;
    }
    int v16 = v1[5];
    if ((v16 & 0x40000000) != 0) {
      uint64_t v17 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v17 = &v1[-8 * (v16 & 0x7FFFFFF)];
    }
    int v18 = v17 + 16;
    if (*((void *)v17 + 8))
    {
      **((void **)v17 + 10) = *((void *)v17 + 9);
      uint64_t v23 = *((void *)v17 + 9);
      if (v23) {
        *(void *)(v23 + 16) = *((void *)v17 + 10);
      }
    }
    void *v18 = this;
    if (this)
    {
      uint64_t v20 = this[1];
      ++this;
      uint64_t v19 = v20;
      *((void *)v17 + 9) = v20;
      if (v20) {
        *(void *)(v19 + 16) = v17 + 18;
      }
      *((void *)v17 + 10) = this;
      *this = v18;
    }
  }
  return this;
}

uint64_t ***llvm::Function::getEntryCount@<X0>(uint64_t ***this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_8;
  }
  uint64_t v5 = ***this;
  uint64_t v44 = this;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2480);
    int v8 = v6 - 1;
    unsigned int v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v10 = (uint64_t ***)(v7 + 40 * v9);
    int v11 = (uint64_t ***)*v10;
    if (*v10 == (uint64_t **)this) {
      goto LABEL_4;
    }
    int v16 = 0;
    int v17 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v11 == (uint64_t ***)-8192;
      }
      if (v18) {
        int v16 = v10;
      }
      unsigned int v19 = v9 + v17++;
      unsigned int v9 = v19 & v8;
      uint64_t v10 = (uint64_t ***)(v7 + 40 * (v19 & v8));
      int v11 = (uint64_t ***)*v10;
      if (*v10 == (uint64_t **)this) {
        goto LABEL_4;
      }
    }
    if (v16) {
      uint64_t v32 = v16;
    }
    else {
      uint64_t v32 = v10;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  this = (uint64_t ***)sub_1CC609054(v5 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v32);
  uint64_t v10 = this;
  uint64_t v33 = (uint64_t **)v44;
  this[3] = 0;
  this[4] = 0;
  *this = v33;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_4:
  uint64_t v12 = *((unsigned int *)v10 + 4);
  if (!v12) {
    goto LABEL_8;
  }
  unsigned int v13 = v10[1] + 1;
  uint64_t v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 2)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      goto LABEL_8;
    }
  }
  uint64_t v20 = *v13;
  if (!v20) {
    goto LABEL_8;
  }
  uint64_t v21 = (uint64_t *)(v20 - 8 * *(unsigned int *)(v20 + 8));
  uint64_t v22 = *v21;
  if (!*v21 || *(unsigned char *)v22) {
    goto LABEL_8;
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (*(void *)v23 == 20)
  {
    uint64_t v24 = *(void *)(v23 + 24);
    uint64_t v25 = *(void *)(v23 + 32);
    int v26 = *(_DWORD *)(v23 + 40);
    if (v24 == 0x6E6F6974636E7566 && v25 == 0x635F7972746E655FLL && v26 == 1953396079)
    {
      uint64_t v29 = *(void *)(v21[1] + 128);
      uint64_t v30 = (void *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u) {
        uint64_t v30 = (void *)*v30;
      }
      unsigned int v31 = (void *)*v30;
      if (v31 != (void *)-1)
      {
        *(void *)a3 = v31;
        *(_DWORD *)(a3 + 8) = 0;
        char v15 = 1;
        goto LABEL_9;
      }
    }
    goto LABEL_8;
  }
  BOOL v34 = *(void *)v23 != 30 || a2 == 0;
  if (v34
    || ((uint64_t v35 = *(void *)(v23 + 24),
         uint64_t v36 = *(void *)(v23 + 32),
         uint64_t v37 = *(void *)(v23 + 40),
         uint64_t v38 = *(void *)(v23 + 46),
         v35 == 0x69746568746E7973)
      ? (BOOL v39 = v36 == 0x6974636E75665F63)
      : (BOOL v39 = 0),
        v39 ? (BOOL v40 = v37 == 0x7972746E655F6E6FLL) : (BOOL v40 = 0),
        v40 ? (BOOL v41 = v38 == 0x746E756F635F7972) : (BOOL v41 = 0),
        !v41))
  {
LABEL_8:
    char v15 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_9;
  }
  uint64_t v42 = *(void *)(v21[1] + 128);
  uint64_t v43 = (void *)(v42 + 24);
  if (*(_DWORD *)(v42 + 32) >= 0x41u) {
    uint64_t v43 = (void *)*v43;
  }
  *(void *)a3 = *v43;
  char v15 = 1;
  *(_DWORD *)(a3 + 8) = 1;
LABEL_9:
  *(unsigned char *)(a3 + 16) = v15;
  return this;
}

uint64_t ***llvm::Function::getSectionPrefix@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_16;
  }
  uint64_t v3 = ***this;
  uint64_t v23 = this;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    uint64_t v21 = 0;
LABEL_23:
    this = (uint64_t ***)sub_1CC609054(v3 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    int v8 = this;
    uint64_t v22 = (uint64_t **)v23;
    this[3] = 0;
    this[4] = 0;
    *this = v22;
    this[1] = (uint64_t **)(this + 3);
    this[2] = (uint64_t **)0x100000000;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v3 + 2480);
  int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  int v8 = (uint64_t ***)(v5 + 40 * v7);
  unsigned int v9 = *v8;
  if (*v8 != (uint64_t **)this)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != (uint64_t **)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (uint64_t **)-8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      int v8 = (uint64_t ***)(v5 + 40 * (v13 & v6));
      unsigned int v9 = *v8;
      if (*v8 == (uint64_t **)this) {
        goto LABEL_12;
      }
    }
    if (v10) {
      uint64_t v21 = v10;
    }
    else {
      uint64_t v21 = v8;
    }
    goto LABEL_23;
  }
LABEL_12:
  uint64_t v14 = *((unsigned int *)v8 + 4);
  if (v14)
  {
    char v15 = v8[1] + 1;
    uint64_t v16 = 16 * v14;
    while (*((_DWORD *)v15 - 2) != 20)
    {
      v15 += 2;
      v16 -= 16;
      if (!v16) {
        goto LABEL_16;
      }
    }
    uint64_t v18 = *v15;
    if (v18)
    {
      unsigned int v19 = *(uint64_t **)(*(void *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 8) + 8);
      uint64_t v20 = *v19;
      *(void *)a2 = v19 + 3;
      *(void *)(a2 + 8) = v20;
      char v17 = 1;
      goto LABEL_17;
    }
  }
LABEL_16:
  char v17 = 0;
  *(unsigned char *)a2 = 0;
LABEL_17:
  *(unsigned char *)(a2 + 16) = v17;
  return this;
}

uint64_t llvm::Function::nullPointerIsDefined(llvm::Function *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (v1) {
    return *(unsigned char *)(v1 + 17) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC5BB830(uint64_t a1, void *a2)
{
  uint64_t v34 = a2[1];
  uint64_t v35 = (llvm::Type ***)(a2 - 3);
  if (!a2)
  {
    llvm::BasicBlock::setParent(0, 0);
    uint64_t v32 = MEMORY[0x18];
    uint64_t v33 = MEMORY[0x20];
    *MEMORY[0x20] = MEMORY[0x18];
    *(void *)(v32 + 8) = v33;
    MEMORY[0x20] = 0;
    MEMORY[0x18] = 0;
    return v34;
  }
  llvm::BasicBlock::setParent((llvm::BasicBlock *)(a2 - 3), 0);
  if ((*((unsigned char *)a2 - 1) & 0x10) != 0)
  {
    uint64_t v36 = *(uint64_t **)(a1 + 32);
    if (v36)
    {
      uint64_t v5 = *(void *)**v35;
      uint64_t v6 = *(void *)(v5 + 152);
      uint64_t v7 = *(unsigned int *)(v5 + 168);
      if (v7)
      {
        LODWORD(v8) = (v7 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        unsigned int v9 = (llvm::Type ****)(v6 + 16 * v8);
        uint64_t v10 = *v9;
        if (*v9 == v35) {
          goto LABEL_10;
        }
        int v11 = 1;
        while (v10 != (llvm::Type ***)-4096)
        {
          int v12 = v8 + v11++;
          uint64_t v8 = v12 & (v7 - 1);
          uint64_t v10 = *(llvm::Type ****)(v6 + 16 * v8);
          if (v10 == v35)
          {
            unsigned int v9 = (llvm::Type ****)(v6 + 16 * v8);
            goto LABEL_10;
          }
        }
      }
      unsigned int v9 = (llvm::Type ****)(v6 + 16 * v7);
LABEL_10:
      uint64_t v13 = *((unsigned int *)v36 + 2);
      if (v13)
      {
        uint64_t v14 = (size_t *)v9[1];
        uint64_t v15 = *((unsigned int *)v36 + 5);
        uint64_t v16 = (unsigned __int8 *)v14 + v15;
        size_t v17 = *v14;
        if (*v14)
        {
          int v18 = 0;
          size_t v19 = *v14;
          uint64_t v20 = v16;
          do
          {
            int v21 = *v20++;
            int v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          int v18 = 0;
        }
        unsigned int v22 = v13 - 1;
        uint64_t v23 = *v36;
        uint64_t v24 = *v36 + 8 * v13 + 8;
        int v25 = 1;
        int v26 = v18;
        while (1)
        {
          uint64_t v27 = v26 & v22;
          uint64_t v28 = *(void **)(v23 + 8 * v27);
          if (v28 != (void *)-8)
          {
            if (!v28) {
              goto LABEL_24;
            }
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v15, v17))) {
              break;
            }
          }
          int v26 = v25 + v27;
          ++v25;
        }
        *(void *)(v23 + 8 * (int)v27) = -8;
        *(uint64_t *)((char *)v36 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v36 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
LABEL_24:
  uint64_t v29 = *a2;
  uint64_t v30 = (void *)a2[1];
  *uint64_t v30 = *a2;
  *(void *)(v29 + 8) = v30;
  *a2 = 0;
  a2[1] = 0;
  llvm::BasicBlock::~BasicBlock(v35, v4);
  MEMORY[0x1D25D9CE0]();
  return v34;
}

void sub_1CC5BBA50(uint64_t a1@<X0>, unsigned char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 8);
  if (a1 && v7 == 15)
  {
    if (v6 >= 0x100)
    {
      unint64_t v13 = v6 >> 8;
      uint64_t v8 = &v72.__r_.__value_.__s.__data_[21];
      do
      {
        *--uint64_t v8 = (v13 % 0xA) | 0x30;
        BOOL v11 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      uint64_t v8 = &v72.__r_.__value_.__s.__data_[20];
      v72.__r_.__value_.__s.__data_[20] = 48;
    }
    sub_1CC028D80(&v71, v8, &v72.__r_.__value_.__s.__data_[21], (char *)&v72.__r_.__value_.__r.__words[2] + 5 - v8);
    uint64_t v14 = std::string::insert(&v71, 0, "p");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v72;
    }
    else {
      uint64_t v16 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v72.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)v16, size);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (*(void *)(a1 + 24))
    {
      sub_1CC5BBA50(&v72, **(void **)(a1 + 16), a2);
      int v18 = (v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v72
          : (std::string *)v72.__r_.__value_.__r.__words[0];
      std::string::size_type v19 = (v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F
          : v72.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v20 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_85:
        operator delete(v20);
        return;
      }
    }
    return;
  }
  if (a1 && v7 == 17)
  {
    unint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = &v72.__r_.__value_.__s.__data_[21];
      do
      {
        *--uint64_t v10 = (v9 % 0xA) | 0x30;
        BOOL v11 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      uint64_t v10 = &v72.__r_.__value_.__s.__data_[20];
      v72.__r_.__value_.__s.__data_[20] = 48;
    }
    sub_1CC028D80(&v70, v10, &v72.__r_.__value_.__s.__data_[21], (char *)&v72.__r_.__value_.__r.__words[2] + 5 - v10);
    uint64_t v29 = "a";
    goto LABEL_65;
  }
  if (a1 && v7 == 16)
  {
    if ((v6 & 0x400) != 0)
    {
      std::string::append(a3, "sl_");
      uint64_t v40 = *(unsigned int *)(a1 + 12);
      if (v40)
      {
        BOOL v41 = *(void **)(a1 + 16);
        uint64_t v42 = 8 * v40;
        do
        {
          sub_1CC5BBA50(&v72, *v41, a2);
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v43 = &v72;
          }
          else {
            uint64_t v43 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v44 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type v44 = v72.__r_.__value_.__l.__size_;
          }
          std::string::append(a3, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          ++v41;
          v42 -= 8;
        }
        while (v42);
      }
    }
    else
    {
      std::string::append(a3, "s_");
      uint64_t v12 = *(void *)(a1 + 24);
      if (v12) {
        std::string::append(a3, (const std::string::value_type *)(v12 + 16), *(void *)v12);
      }
      else {
        *a2 = 1;
      }
    }
    uint64_t v28 = "s";
LABEL_141:
    std::string::append(a3, v28);
    return;
  }
  if (a1 && v7 == 14)
  {
    sub_1CC5BBA50(&v71, **(void **)(a1 + 16), a2);
    int v21 = std::string::insert(&v71, 0, "f_");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v23 = &v72;
    }
    else {
      uint64_t v23 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type v24 = v72.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (*(_DWORD *)(a1 + 12) != 1)
    {
      unint64_t v25 = 0;
      do
      {
        sub_1CC5BBA50(&v72, *(void *)(*(void *)(a1 + 16) + 8 * v25 + 8), a2);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v26 = &v72;
        }
        else {
          int v26 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v27 = v72.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v26, v27);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        ++v25;
      }
      while (v25 < (*(_DWORD *)(a1 + 12) - 1));
    }
    if (*(_DWORD *)(a1 + 8) > 0xFFu) {
      std::string::append(a3, "vararg");
    }
    uint64_t v28 = "f";
    goto LABEL_141;
  }
  if (!a1 || (*(_DWORD *)(a1 + 8) & 0xFE) != 0x12)
  {
    if (!a1 || v7 != 21)
    {
      switch(*(_DWORD *)(a1 + 8))
      {
        case 1u:
          unsigned int v61 = "bf16";
          goto LABEL_159;
        case 2u:
          unsigned int v61 = "f32";
          goto LABEL_159;
        case 3u:
          unsigned int v61 = "f64";
          goto LABEL_159;
        case 4u:
          unsigned int v61 = "f80";
          goto LABEL_159;
        case 5u:
          unsigned int v61 = "f128";
          goto LABEL_159;
        case 6u:
          unsigned int v61 = "ppcf128";
          goto LABEL_159;
        case 7u:
          unsigned int v61 = "isVoid";
          goto LABEL_159;
        case 8u:
        case 0xCu:
          __break(1u);
          JUMPOUT(0x1CC5BC478);
        case 9u:
          unsigned int v61 = "Metadata";
          goto LABEL_159;
        case 0xAu:
          unsigned int v61 = "x86mmx";
          goto LABEL_159;
        case 0xBu:
          unsigned int v61 = "x86amx";
          goto LABEL_159;
        case 0xDu:
          if (v6 >= 0x100)
          {
            unint64_t v63 = v6 >> 8;
            uint64_t v62 = &v72.__r_.__value_.__s.__data_[21];
            do
            {
              *--uint64_t v62 = (v63 % 0xA) | 0x30;
              BOOL v11 = v63 > 9;
              v63 /= 0xAuLL;
            }
            while (v11);
          }
          else
          {
            uint64_t v62 = &v72.__r_.__value_.__s.__data_[20];
            v72.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1CC028D80(&v71, v62, &v72.__r_.__value_.__s.__data_[21], (char *)&v72.__r_.__value_.__r.__words[2] + 5 - v62);
          unsigned int v64 = std::string::insert(&v71, 0, "i");
          std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v66 = &v72;
          }
          else {
            unsigned int v66 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v67 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type v67 = v72.__r_.__value_.__l.__size_;
          }
          std::string::append(a3, (const std::string::value_type *)v66, v67);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
          uint64_t v20 = (void *)v71.__r_.__value_.__r.__words[0];
          goto LABEL_85;
        default:
          unsigned int v61 = "f16";
LABEL_159:
          std::string::append(a3, v61);
          return;
      }
    }
    std::string::append(a3, "t");
    std::string::append(a3, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    uint64_t v45 = *(unsigned int *)(a1 + 12);
    if (v45)
    {
      int v46 = *(void **)(a1 + 16);
      uint64_t v47 = 8 * v45;
      do
      {
        sub_1CC5BBA50(&v71, *v46, a2);
        uint64_t v48 = std::string::insert(&v71, 0, "_");
        std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v50 = &v72;
        }
        else {
          int v50 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v51 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v51 = v72.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v50, v51);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
    unint64_t v52 = *(unsigned int *)(a1 + 8);
    if (v52 >= 0x100)
    {
      BOOL v53 = *(unsigned int **)(a1 + 40);
      uint64_t v54 = (unsigned int *)((char *)v53 + ((v52 >> 6) & 0x3FFFFFC));
      do
      {
        unint64_t v55 = *v53;
        int v56 = &v72.__r_.__value_.__s.__data_[21];
        if (v55)
        {
          do
          {
            *--int v56 = (v55 % 0xA) | 0x30;
            BOOL v11 = v55 > 9;
            v55 /= 0xAuLL;
          }
          while (v11);
        }
        else
        {
          v72.__r_.__value_.__s.__data_[20] = 48;
          int v56 = &v72.__r_.__value_.__s.__data_[20];
        }
        sub_1CC028D80(&v71, v56, &v72.__r_.__value_.__s.__data_[21], (char *)&v72.__r_.__value_.__r.__words[2] + 5 - v56);
        uint64_t v57 = std::string::insert(&v71, 0, "_");
        std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v59 = &v72;
        }
        else {
          int v59 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v60 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v60 = v72.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v59, v60);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v53;
      }
      while (v53 != v54);
    }
    uint64_t v28 = "t";
    goto LABEL_141;
  }
  unint64_t v38 = *(unsigned int *)(a1 + 32);
  if (v7 == 19) {
    std::string::append(a3, "nx");
  }
  if (v38)
  {
    BOOL v39 = &v72.__r_.__value_.__s.__data_[21];
    do
    {
      *--BOOL v39 = (v38 % 0xA) | 0x30;
      BOOL v11 = v38 > 9;
      v38 /= 0xAuLL;
    }
    while (v11);
  }
  else
  {
    BOOL v39 = &v72.__r_.__value_.__s.__data_[20];
    v72.__r_.__value_.__s.__data_[20] = 48;
  }
  sub_1CC028D80(&v70, v39, &v72.__r_.__value_.__s.__data_[21], (char *)&v72.__r_.__value_.__r.__words[2] + 5 - v39);
  uint64_t v29 = "v";
LABEL_65:
  uint64_t v30 = std::string::insert(&v70, 0, v29);
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_1CC5BBA50(__p, *(void *)(a1 + 24), a2);
  if (v69 >= 0) {
    uint64_t v32 = __p;
  }
  else {
    uint64_t v32 = (void **)__p[0];
  }
  if (v69 >= 0) {
    std::string::size_type v33 = v69 & 0x7F;
  }
  else {
    std::string::size_type v33 = (std::string::size_type)__p[1];
  }
  uint64_t v34 = std::string::append(&v71, (const std::string::value_type *)v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v72;
  }
  else {
    uint64_t v36 = (std::string *)v72.__r_.__value_.__r.__words[0];
  }
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = *((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v37 = v72.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (v69 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v20 = (void *)v70.__r_.__value_.__r.__words[0];
    goto LABEL_85;
  }
}

double sub_1CC5BC4B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(llvm::IntegerType **)v2;
  if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = **(void **)(v2 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
  uint64_t v5 = (uint64_t **)llvm::IntegerType::get(v3, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
  unint64_t v6 = (llvm::Type *)*(unsigned int *)(a1 + 32);
  if (*(unsigned char *)(a1 + 8) == 19)
  {
    return llvm::ScalableVectorType::get(v5, v6);
  }
  else
  {
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)v5, v6);
  }
}

unint64_t sub_1CC5BC540(llvm::User *a1)
{
  if ((*((_DWORD *)a1 + 5) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor(a1);
    if ((*((_DWORD *)a1 + 5) & 0x80000000) != 0)
    {
      uint64_t v5 = llvm::User::getDescriptor(a1);
      uint64_t v2 = &v5[v6];
    }
    else
    {
      uint64_t v2 = 0;
    }
    uint64_t v1 = Descriptor;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
  }
  return (unint64_t)(v2 - v1) >> 4;
}

int32x2_t llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  a2[5] = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return result;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 88);
  if (!v2) {
    return result;
  }
  uint64_t v3 = ***a2;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(unsigned int *)(v3 + 168);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v7 = (uint64_t ****)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_9;
    }
    int v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        int v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  int v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_9:
  uint64_t v11 = *((unsigned int *)v2 + 2);
  if (v11)
  {
    uint64_t v12 = (size_t *)v7[1];
    uint64_t v13 = *((unsigned int *)v2 + 5);
    uint64_t v14 = (unsigned __int8 *)v12 + v13;
    size_t v15 = *v12;
    if (*v12)
    {
      int v16 = 0;
      size_t v17 = *v12;
      int v18 = v14;
      do
      {
        int v19 = *v18++;
        int v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    unsigned int v20 = v11 - 1;
    uint64_t v21 = *v2;
    uint64_t v22 = *v2 + 8 * v11 + 8;
    int v23 = 1;
    int v24 = v16;
    while (1)
    {
      uint64_t v25 = v24 & v20;
      int v26 = *(void **)(v21 + 8 * v25);
      if (v26 != (void *)-8)
      {
        if (!v26) {
          return result;
        }
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15))) {
          break;
        }
      }
      int v24 = v23 + v25;
      ++v23;
    }
    *(void *)(v21 + 8 * (int)v25) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)v2 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v2 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t sub_1CC5BC730()
{
  int v4 = 1;
  int v2 = 1024;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Maximum size for the name of non-global values.";
  *((void *)&v1 + 1) = 47;
  sub_1CD45A86C((uint64_t)&unk_1EBD064F8, "non-global-value-max-name-size", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD064F8, &dword_1CB82C000);
}

uint64_t llvm::Registry<llvm::GCStrategy>::add_node(uint64_t result)
{
  long long v1 = (uint64_t *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail) {
    long long v1 = (uint64_t *)&llvm::Registry<llvm::GCStrategy>::Head;
  }
  *long long v1 = result;
  llvm::Registry<llvm::GCStrategy>::Tail = result;
  return result;
}

void *llvm::Registry<llvm::GCStrategy>::begin()
{
  return llvm::Registry<llvm::GCStrategy>::Head;
}

uint64_t llvm::GCStrategy::GCStrategy(uint64_t this)
{
  *(void *)this = &unk_1F26163C8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  return this;
}

{
  *(void *)this = &unk_1F26163C8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  return this;
}

__n128 sub_1CC5BC848@<Q0>(std::string *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  char v4 = *((unsigned char *)a2 + 23);
  BOOL v5 = v4 < 0;
  std::string::size_type v6 = a2[1];
  if (v4 < 0) {
    a2 = (uint64_t *)*a2;
  }
  std::string::size_type v7 = v4 & 0x7F;
  if (v5) {
    std::string::size_type v8 = v6;
  }
  else {
    std::string::size_type v8 = v7;
  }
  int v9 = (__n128 *)std::string::append(a1, (const std::string::value_type *)a2, v8);
  __n128 result = *v9;
  *a3 = *(std::string *)v9->n128_u8;
  v9->n128_u64[0] = 0;
  v9->n128_u64[1] = 0;
  v9[1].n128_u64[0] = 0;
  return result;
}

void *sub_1CC5BC8A0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t llvm::GlobalPtrAuthInfo::tryAnalyze@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  size_t v4 = **this;
  uint64_t result = (uint64_t)llvm::Value::stripPointerCasts((llvm::Value *)this);
  if (!result || (uint64_t v6 = result, *(unsigned char *)(result + 16) != 3))
  {
    size_t v17 = "value isn't a global";
    goto LABEL_13;
  }
  if ((*(unsigned char *)(result + 34) & 0x40) == 0)
  {
LABEL_11:
    size_t v17 = "global isn't in section \"llvm.ptrauth\"";
    goto LABEL_13;
  }
  uint64_t v7 = ***(void ***)result;
  v38[0] = result;
  int v8 = *(_DWORD *)(v7 + 2520);
  if (!v8)
  {
    uint64_t v22 = 0;
LABEL_30:
    uint64_t result = (uint64_t)sub_1CC5BF31C(v7 + 2504, (uint64_t)v38, v38, v22);
    uint64_t v23 = v38[0];
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = v23;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v7 + 2504);
  int v10 = v8 - 1;
  unsigned int v11 = v10 & ((result >> 4) ^ (result >> 9));
  uint64_t result = v9 + 24 * v11;
  uint64_t v12 = *(uint64_t ***)result;
  if (*(void *)result != v6)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v12 != (uint64_t **)-4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v12 == (uint64_t **)-8192;
      }
      if (v20) {
        uint64_t v18 = result;
      }
      unsigned int v21 = v11 + v19++;
      unsigned int v11 = v21 & v10;
      uint64_t result = v9 + 24 * v11;
      uint64_t v12 = *(uint64_t ***)result;
      if (*(void *)result == v6) {
        goto LABEL_6;
      }
    }
    if (v18) {
      uint64_t v22 = (void *)v18;
    }
    else {
      uint64_t v22 = (void *)result;
    }
    goto LABEL_30;
  }
LABEL_6:
  if (*(void *)(result + 16) != 12) {
    goto LABEL_11;
  }
  uint64_t v13 = *(uint64_t **)(result + 8);
  uint64_t v14 = *v13;
  int v15 = *((_DWORD *)v13 + 2);
  if (v14 != 0x7274702E6D766C6CLL || v15 != 1752462689) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(v6 + 16))
  {
    if (*(unsigned char *)(v6 + 16) == 3 && (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
    {
LABEL_33:
      size_t v17 = "global doesn't have an initializer";
      goto LABEL_13;
    }
  }
  else if (*(void *)(v6 + 72) == v6 + 72 && (*(unsigned char *)(v6 + 34) & 0x80) == 0)
  {
    goto LABEL_33;
  }
  int v24 = *(uint64_t **)(v6 - 32);
  uint64_t v25 = *v24;
  if (!*v24 || *(unsigned char *)(v25 + 8) != 16)
  {
    size_t v17 = "global isn't a struct";
    goto LABEL_13;
  }
  uint64_t v26 = *v4 + 1984;
  uint64_t v27 = *v4 + 1960;
  v38[0] = llvm::PointerType::get((llvm::PointerType *)(*v4 + 1912), 0);
  v38[1] = v27;
  v38[2] = v26;
  v38[3] = v26;
  uint64_t v28 = (const void **)llvm::StructType::get(v4, (uint64_t)v38, 4, 0);
  uint64_t result = llvm::StructType::isLayoutIdentical((const void **)v25, v28);
  if ((result & 1) == 0)
  {
    size_t v17 = "global doesn't have type '{ i8*, i32, i64, i64 }'";
    goto LABEL_13;
  }
  int v29 = *((_DWORD *)v24 + 5);
  if ((v29 & 0x40000000) != 0)
  {
    uint64_t v30 = (uint64_t *)*(v24 - 1);
    uint64_t v33 = v30[4];
    if (!v33 || *(unsigned char *)(v33 + 16) != 16)
    {
LABEL_55:
      size_t v17 = "key isn't a constant integer";
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v30 = &v24[-4 * (v29 & 0x7FFFFFF)];
    uint64_t v31 = v30[4];
    if (v31) {
      BOOL v32 = *(unsigned char *)(v31 + 16) == 16;
    }
    else {
      BOOL v32 = 0;
    }
    if (!v32) {
      goto LABEL_55;
    }
  }
  int v34 = *(unsigned __int8 *)(v30[8] + 16);
  if (v34 != 5 && v34 != 16)
  {
    size_t v17 = "address discriminator isn't a constant integer or expr";
    goto LABEL_13;
  }
  if ((v29 & 0x40000000) != 0) {
    uint64_t v36 = (uint64_t *)*(v24 - 1);
  }
  else {
    uint64_t v36 = &v24[-4 * (v29 & 0x7FFFFFF)];
  }
  uint64_t v37 = v36[12];
  if (!v37 || *(unsigned char *)(v37 + 16) != 16)
  {
    size_t v17 = "discriminator isn't a constant integer";
LABEL_13:
    v38[0] = (uint64_t)v17;
    __int16 v39 = 259;
    llvm::inconvertibleErrorCode((llvm *)result);
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = v6;
  return result;
}

unint64_t llvm::GlobalPtrAuthInfo::analyze(uint64_t ***this, const llvm::Value *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::GlobalPtrAuthInfo::tryAnalyze(this, (uint64_t)&v6);
  if (v7)
  {
    size_t v5 = (void *)v6;
    sub_1CD4515D0(&v5);
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    uint64_t v3 = 0;
    unint64_t v2 = 0;
  }
  else
  {
    unint64_t v2 = v6 & 0xFFFFFFFFFFFFFF00;
    uint64_t v3 = v6;
  }
  return v2 | v3;
}

uint64_t llvm::GlobalPtrAuthInfo::isCompatibleWith(llvm::GlobalPtrAuthInfo *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)this;
  uint64_t v8 = *(void *)(*(void *)this - 32)
     - 32 * (*(_DWORD *)(*(void *)(*(void *)this - 32) + 20) & 0x7FFFFFF);
  if (*(const llvm::Value **)(v8 + 32) != a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 96);
  if ((const llvm::Value *)v12 != a3)
  {
    if (*((unsigned char *)a3 + 16) == 84)
    {
      uint64_t v14 = *((void *)a3 - 4);
      if (v14)
      {
        if (!*(unsigned char *)(v14 + 16)
          && *(void *)(v14 + 24) == *((void *)a3 + 9)
          && (*(unsigned char *)(v14 + 33) & 0x20) != 0
          && *(_DWORD *)(v14 + 36) == 247)
        {
          int v15 = (uint64_t *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v15[4] == v12)
          {
            if (sub_1CC5BD000(*v15, *(void *)(v8 + 64), a4, (uint64_t)a4, a5, a6, a7)) {
              return 1;
            }
            uint64_t v7 = *(void *)this;
            uint64_t v12 = *(void *)(*(void *)(*(void *)this - 32)
                            - 32 * (*(_DWORD *)(*(void *)(*(void *)this - 32) + 20) & 0x7FFFFFF)
                            + 96);
          }
        }
      }
    }
    unsigned int v16 = *(unsigned __int8 *)(v12 + 16);
    if (v12) {
      BOOL v17 = v16 == 16;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v12 + 32);
      if (v18 >= 0x41)
      {
        int v29 = 0;
        int64_t v30 = (unint64_t)(v18 + 63) >> 6;
        do
        {
          BOOL v25 = v30-- < 1;
          if (v25) {
            break;
          }
          unint64_t v31 = *(void *)(*(void *)(v12 + 24) + 8 * v30);
          v29 += __clz(v31);
        }
        while (!v31);
        int v32 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v32 = 0;
        }
        if (v29 + v32 != v18) {
          return 0;
        }
      }
      else if (*(void *)(v12 + 24))
      {
        return 0;
      }
    }
    else
    {
      if (v12) {
        BOOL v24 = v16 == 17;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        if (!sub_1CB844168(v12, 0.0)) {
          return 0;
        }
        uint64_t v7 = *(void *)this;
      }
      else
      {
        BOOL v25 = v16 > 0x14;
        int v26 = (1 << v16) & 0x1C2000;
        if (v25 || v26 == 0) {
          return 0;
        }
      }
    }
    return (sub_1CC5BD000(*(void *)(*(void *)(v7 - 32) - 32 * (*(_DWORD *)(*(void *)(v7 - 32) + 20) & 0x7FFFFFF) + 64), (uint64_t)a3, a4, (uint64_t)a4, a5, a6, a7) & 1) != 0;
  }
  uint64_t v19 = *(void *)(v8 + 64);
  unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
  if (v19) {
    BOOL v21 = v20 == 16;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21)
  {
    uint64_t v22 = *(unsigned int *)(v19 + 32);
    if (v22 > 0x40)
    {
      int v33 = 0;
      int64_t v34 = (unint64_t)(v22 + 63) >> 6;
      do
      {
        BOOL v25 = v34-- < 1;
        if (v25) {
          break;
        }
        unint64_t v35 = *(void *)(*(void *)(v19 + 24) + 8 * v34);
        v33 += __clz(v35);
      }
      while (!v35);
      int v36 = v22 | 0xFFFFFFC0;
      if ((v22 & 0x3F) == 0) {
        int v36 = 0;
      }
      return v33 + v36 == v22;
    }
    else
    {
      return *(void *)(v19 + 24) == 0;
    }
  }
  else
  {
    if (v19) {
      BOOL v28 = v20 == 17;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28)
    {
      return sub_1CB844168(v19, 0.0);
    }
    else
    {
      if (v20 >= 0x15) {
        return 0;
      }
      return (0x1C2000u >> v20) & 1;
    }
  }
}

uint64_t sub_1CC5BD000(uint64_t a1, uint64_t a2, llvm::DataLayout *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (llvm::GlobalValue *)a2;
  uint64_t v9 = (llvm::GlobalValue *)a1;
  unsigned int v10 = *(_DWORD *)(*((void *)a3 + 29) + 4);
  unsigned int v26 = v10;
  if (v10 > 0x40) {
    operator new[]();
  }
  __s1 = 0;
  unsigned int v24 = v10;
  __s2 = 0;
  int v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 == 75 || v11 == 5 && *(_WORD *)(a1 + 18) == 47)
  {
    int v12 = *(_DWORD *)(a1 + 20);
    if ((v12 & 0x40000000) != 0) {
      uint64_t v13 = *(llvm::GlobalValue ***)(a1 - 8);
    }
    else {
      uint64_t v13 = (llvm::GlobalValue **)(a1 - 32 * (v12 & 0x7FFFFFF));
    }
    uint64_t v9 = *v13;
  }
  int v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 75 || v14 == 5 && *(_WORD *)(a2 + 18) == 47)
  {
    int v15 = *(_DWORD *)(a2 + 20);
    if ((v15 & 0x40000000) != 0) {
      unsigned int v16 = *(llvm::GlobalValue ***)(a2 - 8);
    }
    else {
      unsigned int v16 = (llvm::GlobalValue **)(a2 - 32 * (v15 & 0x7FFFFFF));
    }
    uint64_t v8 = *v16;
  }
  BOOL v17 = llvm::Value::stripAndAccumulateConstantOffsets(v9, a3, (llvm::APInt *)&__s1, 1, 0, 0, a7);
  uint64_t v19 = llvm::Value::stripAndAccumulateConstantOffsets(v8, a3, (llvm::APInt *)&__s2, 1, 0, 0, v18);
  uint64_t v20 = 0;
  if (v17 == v19)
  {
    if (v26 > 0x40) {
      BOOL v21 = memcmp(__s1, __s2, (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v21 = __s1 == __s2;
    }
    uint64_t v20 = v21;
  }
  if (v24 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v26 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  return v20;
}

uint64_t llvm::GlobalValue::isMaterializable(llvm::GlobalValue *this)
{
  uint64_t result = 0;
  if (this)
  {
    if (!*((unsigned char *)this + 16)) {
      return *((unsigned __int8 *)this + 34) >> 7;
    }
  }
  return result;
}

void *llvm::GlobalValue::copyAttributesFrom(llvm::GlobalValue *this, const llvm::GlobalValue *a2)
{
  int v4 = *((_DWORD *)a2 + 8) & 0x30;
  int v5 = *((_DWORD *)this + 8);
  unsigned int v6 = v5 & 0xFFFFFFCF | v4;
  *((_DWORD *)this + 8) = v6;
  if ((v5 & 0xFu) - 7 < 2
    || v4
    && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this),
        unsigned int v6 = *((_DWORD *)this + 8),
        (hasExternalWeakLinkage & 1) == 0))
  {
    v6 |= 0x4000u;
    *((_DWORD *)this + 8) = v6;
  }
  unsigned int v7 = v6 & 0xFFFFFF3F | (((*((_DWORD *)a2 + 8) >> 6) & 3) << 6);
  *((_DWORD *)this + 8) = v7;
  unsigned int v8 = v7 & 0xFFFFE3FF | (((*((_DWORD *)a2 + 8) >> 10) & 7) << 10);
  *((_DWORD *)this + 8) = v8;
  unsigned int v9 = v8 & 0xFFFFFCFF | (((*((_DWORD *)a2 + 8) >> 8) & 3) << 8);
  *((_DWORD *)this + 8) = v9;
  *((_DWORD *)this + 8) = v9 & 0xFFFFBFFF | (((*((_DWORD *)a2 + 8) >> 14) & 1) << 14);
  uint64_t result = llvm::GlobalValue::getPartition(a2);
  int v12 = result;
  if ((*((unsigned char *)this + 33) & 0x80) != 0 || v11)
  {
    if (v11)
    {
      int v12 = llvm::UniqueStringSaver::save(***(void ***)this + 2136, result, v11);
      uint64_t v14 = v15;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v16 = ***(void ***)this + 2528;
    BOOL v17 = this;
    uint64_t result = sub_1CD4CB550(v16, (uint64_t *)&v17);
    result[1] = v12;
    result[2] = v14;
    *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFF7FFF | ((v14 != 0) << 15);
  }
  return result;
}

void *llvm::GlobalValue::setPartition(void *result, void *a2, size_t a3)
{
  if ((*((unsigned char *)result + 33) & 0x80) != 0 || a3)
  {
    uint64_t v6 = (uint64_t)result;
    unsigned int v7 = a2;
    if (a3)
    {
      unsigned int v7 = llvm::UniqueStringSaver::save(**(void **)*result + 2136, a2, a3);
      uint64_t v3 = v4;
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v5 = ***(void ***)v6 + 2528;
    uint64_t v8 = v6;
    uint64_t result = sub_1CD4CB550(v5, &v8);
    result[1] = v7;
    result[2] = v3;
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFF7FFF | ((v3 != 0) << 15);
  }
  return result;
}

const char *llvm::GlobalValue::getPartition(llvm::GlobalValue *this)
{
  if ((*((unsigned char *)this + 33) & 0x80) == 0) {
    return "";
  }
  uint64_t v2 = ***(void ***)this + 2528;
  uint64_t v3 = this;
  return (const char *)sub_1CD4CB550(v2, (uint64_t *)&v3)[1];
}

void llvm::GlobalValue::removeFromParent(llvm::GlobalValue *this)
{
  switch(*((unsigned char *)this + 16))
  {
    case 1:
      llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList();
    case 2:
      llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList();
    case 3:
      llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList();
    default:
      llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(*((void *)this + 5) + 24, (uint64_t ***)this);
      uint64_t v3 = *((void *)this + 7);
      uint64_t v2 = (void *)((char *)this + 56);
      uint64_t v4 = (void *)v2[1];
      void *v4 = v3;
      *(void *)(v3 + 8) = v4;
      *uint64_t v2 = 0;
      v2[1] = 0;
      return;
  }
}

void llvm::GlobalAlias::removeFromParent(llvm::GlobalAlias *this)
{
}

void llvm::GlobalIFunc::removeFromParent(llvm::GlobalIFunc *this)
{
}

void llvm::GlobalVariable::removeFromParent(llvm::GlobalVariable *this)
{
}

void llvm::GlobalValue::eraseFromParent(llvm::GlobalValue *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (*((unsigned char *)this + 16))
  {
    if (v1 == 3) {
      llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList();
    }
    if (v1 == 1) {
      llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList();
    }
    sub_1CD5C1338();
  }

  llvm::Function::eraseFromParent(this);
}

void llvm::GlobalIFunc::eraseFromParent(llvm::GlobalIFunc *this)
{
}

void llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
}

void llvm::GlobalObject::~GlobalObject(llvm::GlobalObject *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    llvm::Comdat::removeUser(v2, (uint64_t)this);
  }
  *((void *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);

  llvm::Value::~Value(this, v3);
}

{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    llvm::Comdat::removeUser(v2, (uint64_t)this);
  }
  *((void *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);

  llvm::Value::~Value(this, v3);
}

void *llvm::GlobalObject::setComdat(llvm::GlobalObject *this, llvm::Comdat *a2)
{
  uint64_t v2 = this;
  uint64_t result = (void *)*((void *)this + 6);
  if (result)
  {
    uint64_t v4 = a2;
    uint64_t v5 = v2;
    uint64_t result = llvm::Comdat::removeUser((uint64_t)result, (uint64_t)v2);
    a2 = v4;
    uint64_t v2 = v5;
  }
  *((void *)v2 + 6) = a2;
  if (a2)
  {
    return llvm::Comdat::addUser((uint64_t)a2, (uint64_t)v2);
  }
  return result;
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  v19[24] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16) == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v3 == 12 && *(void *)Section == 0x7274702E6D766C6CLL && *((_DWORD *)Section + 2) == 1752462689) {
      return 1;
    }
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (uint64_t result = 1, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
  {
    uint64_t result = *((void *)this + 5);
    if (result)
    {
      BOOL v17 = v19;
      uint64_t v18 = 0x800000000;
      llvm::Module::getModuleFlagsMetadata((llvm::Module *)result, (uint64_t)&v17);
      if (v18)
      {
        uint64_t v5 = (uint64_t *)((char *)v17 + 16);
        uint64_t v6 = 24 * v18;
        while (1)
        {
          unsigned int v7 = *(void **)(*(v5 - 1) + 8);
          if (*v7 == 21)
          {
            uint64_t v9 = v7[3];
            uint64_t v10 = v7[4];
            uint64_t v11 = *(void *)((char *)v7 + 37);
            BOOL v12 = *(void *)"SemanticInterposition" == v9 && *(void *)"Interposition" == v10;
            if (v12 && *(void *)"position" == v11) {
              break;
            }
          }
          v5 += 3;
          v6 -= 24;
          if (!v6) {
            goto LABEL_9;
          }
        }
        uint64_t v8 = *v5;
      }
      else
      {
LABEL_9:
        uint64_t v8 = 0;
      }
      if (v17 != v19) {
        free(v17);
      }
      if (!v8) {
        return 0;
      }
      uint64_t v15 = *(void *)(v8 + 128);
      uint64_t v16 = (void *)(v15 + 24);
      if (*(_DWORD *)(v15 + 32) >= 0x41u) {
        uint64_t v16 = (void *)*v16;
      }
      return *v16 && (*((unsigned char *)this + 33) & 0x40) == 0;
    }
  }
  return result;
}

const char *llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  if (!this || *((unsigned char *)this + 16) != 1)
  {
    if ((*((unsigned char *)this + 34) & 0x40) == 0) {
      return 0;
    }
    uint64_t v1 = ***(void ***)this;
    uint64_t v16 = this;
    int v2 = *(_DWORD *)(v1 + 2520);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 2504);
      int v4 = v2 - 1;
      unsigned int v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v6 = (llvm::GlobalValue **)(v3 + 24 * v5);
      unsigned int v7 = *v6;
      if (*v6 == this) {
        return (const char *)v6[1];
      }
      uint64_t v9 = 0;
      int v10 = 1;
      while (v7 != (llvm::GlobalValue *)-4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v7 == (llvm::GlobalValue *)-8192;
        }
        if (v11) {
          uint64_t v9 = v6;
        }
        unsigned int v12 = v5 + v10++;
        unsigned int v5 = v12 & v4;
        uint64_t v6 = (llvm::GlobalValue **)(v3 + 24 * (v12 & v4));
        unsigned int v7 = *v6;
        if (*v6 == this) {
          return (const char *)v6[1];
        }
      }
      if (v9) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = v6;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v6 = (llvm::GlobalValue **)sub_1CC5BF31C(v1 + 2504, (uint64_t)&v16, (uint64_t *)&v16, v13);
    uint64_t v14 = v16;
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = v14;
    return (const char *)v6[1];
  }
  uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject(this);
  if (AliaseeObject) {
    return (const char *)sub_1CC4A7E24(AliaseeObject);
  }
  else {
    return "";
  }
}

BOOL llvm::GlobalValue::canBenefitFromLocalAlias(llvm::GlobalValue *this)
{
  int v1 = *((_DWORD *)this + 8);
  if ((v1 & 0x3F) != 0) {
    return 0;
  }
  BOOL v2 = 0;
  switch(*((unsigned char *)this + 16))
  {
    case 0:
      if ((v1 & 0x800000) == 0 && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)) {
        return 0;
      }
      goto LABEL_9;
    case 1:
      this = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(this);
      if (!this) {
        goto LABEL_12;
      }
      goto LABEL_9;
    case 2:
      return v2;
    case 3:
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
        return 0;
      }
      goto LABEL_9;
    default:
LABEL_9:
      uint64_t v4 = *((void *)this + 6);
      if (v4) {
        BOOL v2 = *(_DWORD *)(v4 + 8) == 3;
      }
      else {
LABEL_12:
      }
        BOOL v2 = 1;
      break;
  }
  return v2;
}

BOOL llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    return (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*((unsigned char *)this + 16) || *((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72)) {
      return 0;
    }
    return (*((unsigned char *)this + 34) & 0x80) == 0;
  }
}

uint64_t llvm::GlobalValue::getComdat(uint64_t this)
{
  int v1 = *(unsigned __int8 *)(this + 16);
  if (this && v1 == 1)
  {
    this = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)this);
    if (this) {
      return *(void *)(this + 48);
    }
  }
  else
  {
    if (v1 != 2) {
      return *(void *)(this + 48);
    }
    return 0;
  }
  return this;
}

uint64_t llvm::GlobalValue::getAddressSpace(llvm::GlobalValue *this)
{
  return *(_DWORD *)(*(void *)this + 8) >> 8;
}

uint64_t llvm::GlobalObject::setAlignment(uint64_t result, __int16 a2)
{
  int v2 = (a2 << 16) + 0x10000;
  if ((a2 & 0xFF00) == 0) {
    int v2 = 0;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFC0FFFF | v2;
  return result;
}

void *llvm::GlobalObject::copyAttributesFrom(llvm::GlobalObject *this, const llvm::GlobalObject *a2)
{
  llvm::GlobalValue::copyAttributesFrom(this, a2);
  int v4 = ((((*((_WORD *)a2 + 17) & 0x3F) << 16) + 16711680) & 0xFF0000) + 0x10000;
  if ((*((_WORD *)a2 + 17) & 0x3F) == 0) {
    int v4 = 0;
  }
  *((_DWORD *)this + 8) = v4 | *((_DWORD *)this + 8) & 0xFFC0FFFF;
  uint64_t result = (void *)sub_1CC4A7E24((uint64_t)a2);
  unsigned int v7 = result;
  if ((*((unsigned char *)this + 34) & 0x40) != 0 || v6)
  {
    if (v6)
    {
      unsigned int v7 = llvm::UniqueStringSaver::save(***(void ***)this + 2136, result, v6);
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = ***(void ***)this;
    uint64_t v22 = this;
    int v11 = *(_DWORD *)(v10 + 2520);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 2504);
      int v13 = v11 - 1;
      unsigned int v14 = v13 & ((this >> 4) ^ (this >> 9));
      uint64_t result = (void *)(v12 + 24 * v14);
      uint64_t v15 = *result;
      if ((llvm::GlobalObject *)*result == this)
      {
LABEL_9:
        result[1] = v7;
        result[2] = v9;
        *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFBFFFFF | ((v9 != 0) << 22);
        return result;
      }
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = result;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        uint64_t result = (void *)(v12 + 24 * v14);
        uint64_t v15 = *result;
        if ((llvm::GlobalObject *)*result == this) {
          goto LABEL_9;
        }
      }
      if (v16) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = result;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t result = sub_1CC5BF31C(v10 + 2504, (uint64_t)&v22, (uint64_t *)&v22, v20);
    BOOL v21 = v22;
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = v21;
    goto LABEL_9;
  }
  return result;
}

void *llvm::GlobalObject::setSection(void *result, void *a2, size_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = (uint64_t)result;
  if ((*((unsigned char *)result + 34) & 0x40) != 0 || a3)
  {
    if (a3)
    {
      uint64_t v3 = llvm::UniqueStringSaver::save(**(void **)*result + 2136, a2, a3);
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = ***(void ***)v4;
    uint64_t v19 = v4;
    int v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 2504);
      int v10 = v8 - 1;
      unsigned int v11 = v10 & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t result = (void *)(v9 + 24 * v11);
      uint64_t v12 = (void **)*result;
      if (*result == v4)
      {
LABEL_7:
        result[1] = v3;
        result[2] = v6;
        *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 32) & 0xFFBFFFFF | ((v6 != 0) << 22);
        return result;
      }
      int v13 = 0;
      int v14 = 1;
      while (v12 != (void **)-4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == (void **)-8192;
        }
        if (v15) {
          int v13 = result;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        uint64_t result = (void *)(v9 + 24 * v11);
        uint64_t v12 = (void **)*result;
        if (*result == v4) {
          goto LABEL_7;
        }
      }
      if (v13) {
        int v17 = v13;
      }
      else {
        int v17 = result;
      }
    }
    else
    {
      int v17 = 0;
    }
    uint64_t result = sub_1CC5BF31C(v7 + 2504, (uint64_t)&v19, &v19, v17);
    uint64_t v18 = v19;
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = v18;
    goto LABEL_7;
  }
  return result;
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  if (!this) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*((unsigned char *)this + 16) != 3) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  Section = llvm::GlobalValue::getSection(this);
  if (v4 != 12) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*(void *)Section != 0x7274702E6D766C6CLL || *((_DWORD *)Section + 2) != 1752462689) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*((unsigned char *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 1;
    }
  }
  else if (!*((unsigned char *)this + 16) {
         && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
  }
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    return 1;
  }
  uint64_t v8 = *((void *)this - 4);
  int v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0) {
    int v10 = *(llvm::GlobalValue ***)(v8 - 8);
  }
  else {
    int v10 = (llvm::GlobalValue **)(v8 - 32 * (v9 & 0x7FFFFFF));
  }
  unsigned int v11 = *v10;
  unsigned int v16 = 64;
  uint64_t v15 = 0;
  uint64_t v12 = (llvm::DataLayout *)(*((void *)this + 5) + 272);
  uint64_t hasExternalWeakLinkage = 1;
  int v13 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets(v11, v12, (llvm::APInt *)&v15, 1, 0, 0, v3);
  if (v13) {
    BOOL v14 = v13[16] > 3u;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    uint64_t hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
  }
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  return hasExternalWeakLinkage;
}

llvm::GlobalObject *llvm::GlobalObject::getSectionImpl(llvm::GlobalObject *this)
{
  uint64_t v1 = ***(void ***)this;
  uint64_t v15 = this;
  int v2 = *(_DWORD *)(v1 + 2520);
  if (!v2)
  {
    int v13 = 0;
LABEL_16:
    uint64_t v6 = (llvm::GlobalObject **)sub_1CC5BF31C(v1 + 2504, (uint64_t)&v15, (uint64_t *)&v15, v13);
    BOOL v14 = v15;
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = v14;
    return v6[1];
  }
  uint64_t v3 = *(void *)(v1 + 2504);
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v6 = (llvm::GlobalObject **)(v3 + 24 * v5);
  uint64_t v7 = *v6;
  if (*v6 != this)
  {
    int v9 = 0;
    int v10 = 1;
    while (v7 != (llvm::GlobalObject *)-4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v7 == (llvm::GlobalObject *)-8192;
      }
      if (v11) {
        int v9 = v6;
      }
      unsigned int v12 = v5 + v10++;
      unsigned int v5 = v12 & v4;
      uint64_t v6 = (llvm::GlobalObject **)(v3 + 24 * (v12 & v4));
      uint64_t v7 = *v6;
      if (*v6 == this) {
        return v6[1];
      }
    }
    if (v9) {
      int v13 = v9;
    }
    else {
      int v13 = v6;
    }
    goto LABEL_16;
  }
  return v6[1];
}

BOOL llvm::GlobalObject::canIncreaseAlignment(llvm::GlobalObject *this)
{
  if (sub_1CC5BF2C4((uint64_t)this)) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 8);
  unsigned int v3 = (v2 & 0xF) - 2;
  if (v3 < 9 && ((0x18Fu >> v3) & 1) != 0) {
    return 0;
  }
  if ((v2 & 0x400000) != 0 && (v2 & 0x3F0000) != 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    __int16 v8 = 260;
    v7[0] = v4 + 216;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v7);
    int v5 = v11;
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v5 != 3) {
      return 1;
    }
    int v2 = *((_DWORD *)this + 8);
  }
  return (v2 & 0x4000) != 0;
}

uint64_t llvm::GlobalValue::getAliaseeObject(llvm::GlobalValue *this)
{
  v3[0] = 0;
  v3[1] = 0;
  int v4 = 0;
  uint64_t v1 = sub_1CC5BE54C((uint64_t)this, (uint64_t)v3);
  MEMORY[0x1D25D9CD0](v3[0], 8);
  return v1;
}

uint64_t sub_1CC5BE54C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 3 && v3 != 1) {
    return result;
  }
  if (v3 == 1) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v11 = v6;
  if (v6)
  {
    sub_1CD4201D0(a2, &v11, (uint64_t)v12);
    if (v12[16])
    {
      uint64_t v8 = *(void *)(v11 - 32);
      return sub_1CC5BE54C(v8, a2);
    }
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3 != 5) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v7 = *(unsigned __int16 *)(v2 + 18);
  if (v7 > 0x2E)
  {
    if (v7 - 47 >= 3) {
      return result;
    }
    goto LABEL_17;
  }
  if (v7 != 13)
  {
    if (v7 != 15)
    {
      if (v7 != 34) {
        return result;
      }
      goto LABEL_17;
    }
    if (sub_1CC5BE54C(*(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2)) {
      return 0;
    }
LABEL_17:
    uint64_t v8 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    return sub_1CC5BE54C(v8, a2);
  }
  uint64_t v9 = sub_1CC5BE54C(*(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), a2);
  uint64_t result = sub_1CC5BE54C(*(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2);
  if (result) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v9) {
    return v10;
  }
  return result;
}

BOOL llvm::GlobalValue::isAbsoluteSymbolRef(llvm::GlobalValue *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  BOOL v2 = (v1 - 2) < 2 || v1 == 0;
  if (!v2 || (*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***(void ***)this;
  uint64_t v20 = this;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 2480);
    int v6 = v4 - 1;
    unsigned int v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v8 = (llvm::GlobalValue **)(v5 + 40 * v7);
    uint64_t v9 = *v8;
    if (*v8 == this) {
      goto LABEL_9;
    }
    BOOL v14 = 0;
    int v15 = 1;
    while (v9 != (llvm::GlobalValue *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v9 == (llvm::GlobalValue *)-8192;
      }
      if (v16) {
        BOOL v14 = v8;
      }
      unsigned int v17 = v7 + v15++;
      unsigned int v7 = v17 & v6;
      uint64_t v8 = (llvm::GlobalValue **)(v5 + 40 * (v17 & v6));
      uint64_t v9 = *v8;
      if (*v8 == this) {
        goto LABEL_9;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v8;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v8 = (llvm::GlobalValue **)sub_1CC609054(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
  uint64_t v19 = v20;
  v8[3] = 0;
  v8[4] = 0;
  llvm::GlobalValue *v8 = v19;
  v8[1] = (llvm::GlobalValue *)(v8 + 3);
  v8[2] = (llvm::GlobalValue *)0x100000000;
LABEL_9:
  uint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)((char *)v8[1] + 8);
  uint64_t v12 = 16 * v10;
  while (*((_DWORD *)v11 - 2) != 21)
  {
    BOOL result = 0;
    v11 += 2;
    v12 -= 16;
    if (!v12) {
      return result;
    }
  }
  return *v11 != 0;
}

uint64_t ***llvm::GlobalValue::getAbsoluteSymbolRange@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *((unsigned __int8 *)this + 16);
  BOOL v4 = v3 > 3 || v3 == 1;
  if (v4 || (*((unsigned char *)this + 23) & 0x20) == 0)
  {
LABEL_20:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return this;
  }
  uint64_t v5 = ***this;
  BOOL v21 = this;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    uint64_t v19 = 0;
LABEL_26:
    this = (uint64_t ***)sub_1CC609054(v5 + 2480, (uint64_t)&v21, (uint64_t *)&v21, v19);
    uint64_t v10 = (uint64_t)this;
    uint64_t v20 = (uint64_t)v21;
    this[3] = 0;
    this[4] = 0;
    *this = (uint64_t **)v20;
    this[1] = (uint64_t **)(this + 3);
    this[2] = (uint64_t **)0x100000000;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v10 = v7 + 40 * v9;
  uint64_t v11 = *(void *)v10;
  if (*(uint64_t ****)v10 != this)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        uint64_t v12 = (void *)v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      uint64_t v10 = v7 + 40 * (v15 & v8);
      uint64_t v11 = *(void *)v10;
      if (*(uint64_t ****)v10 == this) {
        goto LABEL_16;
      }
    }
    if (v12) {
      uint64_t v19 = v12;
    }
    else {
      uint64_t v19 = (void *)v10;
    }
    goto LABEL_26;
  }
LABEL_16:
  uint64_t v16 = *(unsigned int *)(v10 + 16);
  if (!v16) {
    goto LABEL_20;
  }
  unsigned int v17 = (uint64_t *)(*(void *)(v10 + 8) + 8);
  uint64_t v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 21)
  {
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      goto LABEL_20;
    }
  }
  this = (uint64_t ***)*v17;
  if (!*v17) {
    goto LABEL_20;
  }
  this = (uint64_t ***)llvm::getConstantRangeFromMetadata((uint64_t)this, (uint64_t)&v21);
  *(_DWORD *)(a2 + 8) = v22;
  *(void *)a2 = v21;
  *(_DWORD *)(a2 + 24) = v24;
  *(void *)(a2 + 16) = v23;
  *(unsigned char *)(a2 + 32) = 1;
  return this;
}

BOOL llvm::GlobalValue::canBeOmittedFromSymbolTable(llvm::GlobalValue *this)
{
  int v1 = *((_DWORD *)this + 8);
  if ((v1 & 0xF) != 3) {
    return 0;
  }
  int v3 = v1 & 0xC0;
  if (v3 == 128) {
    return 1;
  }
  if (*((unsigned char *)this + 16) == 3 && (*((unsigned char *)this + 80) & 1) == 0) {
    return 0;
  }
  return v3 != 0;
}

unint64_t *llvm::GlobalVariable::GlobalVariable(unint64_t *a1, llvm::PointerType *this, char a3, char a4, unint64_t a5, const char **a6, char a7, llvm::Type *a8, char a9)
{
  BOOL v16 = a5 != 0;
  *a1 = llvm::PointerType::get(this, a8);
  a1[1] = 0;
  unsigned int v17 = *((_DWORD *)a1 + 5) & 0xC0000000 | v16;
  *((_DWORD *)a1 + 4) = 3;
  *((_DWORD *)a1 + 5) = v17;
  a1[3] = (unint64_t)this;
  int v18 = *((unsigned __int16 *)a1 + 17);
  a1[5] = 0;
  int v19 = a4 & 0xF | (v18 << 16);
  if ((a4 & 0xFu) - 7 < 2) {
    v19 |= 0x4000u;
  }
  *((_DWORD *)a1 + 8) = v19;
  *((_DWORD *)a1 + 9) = 0;
  llvm::Value::setNameImpl((llvm::Value *)a1, a6);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_28;
    }
    uint64_t v26 = **(void **)*a1;
    uint64_t v27 = *(void *)(v26 + 152);
    uint64_t v28 = *(unsigned int *)(v26 + 168);
    if (v28)
    {
      LODWORD(v29) = (v28 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      int64_t v30 = (unint64_t **)(v27 + 16 * v29);
      unint64_t v31 = *v30;
      if (*v30 == a1)
      {
LABEL_20:
        int64_t v34 = v30[1];
        unint64_t v37 = *v34;
        unint64_t v35 = v34 + 2;
        unint64_t v36 = v37;
        if (v37 >= 5 && *(_DWORD *)v35 == *(_DWORD *)"llvm." && v35[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v39 = llvm::Function::lookupIntrinsicID(v35, v36);
LABEL_27:
          *((_DWORD *)a1 + 9) = v39;
          goto LABEL_4;
        }
LABEL_28:
        int v39 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_27;
      }
      int v32 = 1;
      while (v31 != (unint64_t *)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v28 - 1);
        unint64_t v31 = *(unint64_t **)(v27 + 16 * v29);
        if (v31 == a1)
        {
          int64_t v30 = (unint64_t **)(v27 + 16 * v29);
          goto LABEL_20;
        }
      }
    }
    int64_t v30 = (unint64_t **)(v27 + 16 * v28);
    goto LABEL_20;
  }
LABEL_4:
  a1[6] = 0;
  a1[7] = 0;
  int v20 = *((_DWORD *)a1 + 8);
  a1[8] = 0;
  a1[9] = 0;
  if (a9) {
    char v21 = 2;
  }
  else {
    char v21 = 0;
  }
  *((unsigned char *)a1 + 80) = v21 | a3 | a1[10] & 0xFC;
  *((_DWORD *)a1 + 8) = v20 & 0xE3FF | ((a7 & 7) << 10);
  if (a5)
  {
    if (*(a1 - 4))
    {
      *(void *)*(a1 - 2) = *(a1 - 3);
      uint64_t v40 = *(a1 - 3);
      if (v40) {
        *(void *)(v40 + 16) = *(a1 - 2);
      }
    }
    *(a1 - 4) = a5;
    int v24 = *(void ***)(a5 + 8);
    uint64_t v23 = (void *)(a5 + 8);
    int v22 = v24;
    *(a1 - 3) = (unint64_t)v24;
    if (v24) {
      v22[2] = a1 - 3;
    }
    *(a1 - 2) = (unint64_t)v23;
    *uint64_t v23 = a1 - 4;
  }
  return a1;
}

{
  return llvm::GlobalVariable::GlobalVariable(a1, this, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t *llvm::GlobalVariable::GlobalVariable(unint64_t *a1, uint64_t a2, llvm::PointerType *this, char a4, char a5, unint64_t a6, const char **a7, uint64_t a8, char a9, llvm::Type *a10, char a11)
{
  int v19 = a10;
  BOOL v20 = a6 != 0;
  if (((unint64_t)a10 & 0xFF00000000) == 0) {
    int v19 = (llvm::Type *)*(unsigned int *)(a2 + 288);
  }
  *a1 = llvm::PointerType::get(this, v19);
  a1[1] = 0;
  unsigned int v21 = *((_DWORD *)a1 + 5) & 0xC0000000 | v20;
  *((_DWORD *)a1 + 4) = 3;
  *((_DWORD *)a1 + 5) = v21;
  a1[3] = (unint64_t)this;
  int v22 = *((unsigned __int16 *)a1 + 17);
  a1[5] = 0;
  int v23 = a5 & 0xF | (v22 << 16);
  if ((a5 & 0xFu) - 7 < 2) {
    v23 |= 0x4000u;
  }
  *((_DWORD *)a1 + 8) = v23;
  *((_DWORD *)a1 + 9) = 0;
  llvm::Value::setNameImpl((llvm::Value *)a1, a7);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_38;
    }
    uint64_t v32 = **(void **)*a1;
    uint64_t v33 = *(void *)(v32 + 152);
    uint64_t v34 = *(unsigned int *)(v32 + 168);
    if (v34)
    {
      LODWORD(v35) = (v34 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      unint64_t v36 = (unint64_t **)(v33 + 16 * v35);
      unint64_t v37 = *v36;
      if (*v36 == a1)
      {
LABEL_22:
        uint64_t v40 = v36[1];
        unint64_t v43 = *v40;
        BOOL v41 = v40 + 2;
        unint64_t v42 = v43;
        if (v43 >= 5 && *(_DWORD *)v41 == *(_DWORD *)"llvm." && v41[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v45 = llvm::Function::lookupIntrinsicID(v41, v42);
LABEL_29:
          *((_DWORD *)a1 + 9) = v45;
          goto LABEL_6;
        }
LABEL_38:
        int v45 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_29;
      }
      int v38 = 1;
      while (v37 != (unint64_t *)-4096)
      {
        int v39 = v35 + v38++;
        uint64_t v35 = v39 & (v34 - 1);
        unint64_t v37 = *(unint64_t **)(v33 + 16 * v35);
        if (v37 == a1)
        {
          unint64_t v36 = (unint64_t **)(v33 + 16 * v35);
          goto LABEL_22;
        }
      }
    }
    unint64_t v36 = (unint64_t **)(v33 + 16 * v34);
    goto LABEL_22;
  }
LABEL_6:
  a1[7] = 0;
  int v24 = (void ***)(a1 + 7);
  a1[6] = 0;
  int v25 = *((_DWORD *)a1 + 8);
  a1[8] = 0;
  a1[9] = 0;
  char v26 = a1[10] & 0xFC;
  if (a6 || (a11 & 1) != 0)
  {
    if (a11) {
      char v46 = 2;
    }
    else {
      char v46 = 0;
    }
    *((unsigned char *)a1 + 80) = v46 | a4 | v26;
    *((_DWORD *)a1 + 8) = v25 & 0xE3FF | ((a9 & 7) << 10);
    if (a6)
    {
      if (*(a1 - 4))
      {
        *(void *)*(a1 - 2) = *(a1 - 3);
        uint64_t v50 = *(a1 - 3);
        if (v50) {
          *(void *)(v50 + 16) = *(a1 - 2);
        }
      }
      *(a1 - 4) = a6;
      std::string::size_type v49 = *(void ***)(a6 + 8);
      uint64_t v48 = (void *)(a6 + 8);
      uint64_t v47 = v49;
      *(a1 - 3) = (unint64_t)v49;
      if (v49) {
        v47[2] = a1 - 3;
      }
      *(a1 - 2) = (unint64_t)v48;
      *uint64_t v48 = a1 - 4;
    }
  }
  else
  {
    *((unsigned char *)a1 + 80) = v26 | a4;
    *((_DWORD *)a1 + 8) = v25 & 0xE3FF | ((a9 & 7) << 10);
  }
  if (a8)
  {
    uint64_t v27 = *(void *)(a8 + 40) + 8;
    uint64_t v28 = (void *)(a8 + 56);
  }
  else
  {
    uint64_t v27 = a2 + 8;
    uint64_t v28 = (void *)(a2 + 8);
  }
  a1[5] = v27 - 8;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v29 = *(llvm::ValueSymbolTable **)(v27 + 104);
    if (v29) {
      llvm::ValueSymbolTable::reinsertValue(v29, (llvm::Value *)a1);
    }
  }
  int64_t v30 = (void *)*v28;
  a1[7] = *v28;
  a1[8] = (unint64_t)v28;
  v30[1] = v24;
  *uint64_t v28 = v24;
  return a1;
}

{
  return llvm::GlobalVariable::GlobalVariable(a1, a2, this, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t llvm::GlobalVariable::setInitializer(uint64_t this, llvm::Constant *a2)
{
  if (this) {
    BOOL v2 = *(unsigned char *)(this + 16) == 3;
  }
  else {
    BOOL v2 = 0;
  }
  char v3 = !v2;
  if (a2)
  {
    if (v3)
    {
      if (*(unsigned char *)(this + 16) || *(void *)(this + 72) != this + 72 || (*(unsigned char *)(this + 34) & 0x80) != 0) {
        goto LABEL_20;
      }
      int v4 = *(_DWORD *)(this + 20);
    }
    else
    {
      int v4 = *(_DWORD *)(this + 20);
      if ((v4 & 0x7FFFFFF) != 0) {
        goto LABEL_20;
      }
    }
    *(_DWORD *)(this + 20) = v4 & 0xF8000000 | 1;
LABEL_20:
    if (*(void *)(this - 32))
    {
      **(void **)(this - 16) = *(void *)(this - 24);
      uint64_t v5 = *(void *)(this - 24);
      if (v5) {
        *(void *)(v5 + 16) = *(void *)(this - 16);
      }
    }
    *(void *)(this - 32) = a2;
    uint64_t v8 = *((void *)a2 + 1);
    int v6 = (void *)((char *)a2 + 8);
    uint64_t v7 = v8;
    *(void *)(this - 24) = v8;
    if (v8) {
      *(void *)(v7 + 16) = this - 24;
    }
    *(void *)(this - 16) = v6;
    *int v6 = this - 32;
    return this;
  }
  if (v3)
  {
    if (!*(unsigned char *)(this + 16) && *(void *)(this + 72) == this + 72 && (*(unsigned char *)(this + 34) & 0x80) == 0) {
      return this;
    }
  }
  else if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 0)
  {
    return this;
  }
  if (*(void *)(this - 32))
  {
    **(void **)(this - 16) = *(void *)(this - 24);
    uint64_t v9 = *(void *)(this - 24);
    if (v9) {
      *(void *)(v9 + 16) = *(void *)(this - 16);
    }
  }
  *(void *)(this - 32) = 0;
  *(_DWORD *)(this + 20) &= 0xF8000000;
  return this;
}

void *llvm::GlobalVariable::copyAttributesFrom(llvm::GlobalVariable *this, const llvm::GlobalVariable *a2)
{
  BOOL result = llvm::GlobalObject::copyAttributesFrom(this, a2);
  *((unsigned char *)this + 80) = *((unsigned char *)this + 80) & 0xFD | *((unsigned char *)a2 + 80) & 2;
  *((void *)this + 9) = *((void *)a2 + 9);
  return result;
}

uint64_t llvm::GlobalVariable::dropAllReferences(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 20);
  if ((v2 & 0x40000000) != 0)
  {
    uint64_t v4 = *(void *)(this - 8);
    uint64_t v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    uint64_t v4 = this - 32 * v3;
  }
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    int v6 = (void **)(v4 + 16);
    do
    {
      if (*(v6 - 2))
      {
        **int v6 = *(v6 - 1);
        uint64_t v7 = (uint64_t)*(v6 - 1);
        if (v7) {
          *(void *)(v7 + 16) = *v6;
        }
      }
      *(v6 - 2) = 0;
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    int v2 = *(_DWORD *)(this + 20);
  }
  if ((v2 & 0x20000000) != 0)
  {
    uint64_t v8 = (int32x2_t *)(***(void ***)this + 2480);
    uint64_t v9 = v1;
    this = sub_1CC6035CC(v8, &v9);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return this;
}

unint64_t *sub_1CC5BF0A8(unint64_t *a1, llvm::PointerType *this, char a3, char a4, const char **a5, llvm::Type *a6)
{
  *a1 = llvm::PointerType::get(this, a6);
  a1[1] = 0;
  *((unsigned char *)a1 + 16) = a3;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 1;
  a1[3] = (unint64_t)this;
  int v11 = *((unsigned __int16 *)a1 + 17);
  a1[5] = 0;
  int v12 = a4 & 0xF | (v11 << 16);
  if ((a4 & 0xFu) - 7 < 2) {
    v12 |= 0x4000u;
  }
  *((_DWORD *)a1 + 8) = v12;
  *((_DWORD *)a1 + 9) = 0;
  llvm::Value::setNameImpl((llvm::Value *)a1, a5);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_20;
    }
    uint64_t v14 = **(void **)*a1;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      int v18 = (unint64_t **)(v15 + 16 * v17);
      int v19 = *v18;
      if (*v18 == a1)
      {
LABEL_12:
        int v22 = v18[1];
        unint64_t v25 = *v22;
        int v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_19:
          *((_DWORD *)a1 + 9) = v27;
          return a1;
        }
LABEL_20:
        int v27 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_19;
      }
      int v20 = 1;
      while (v19 != (unint64_t *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        int v19 = *(unint64_t **)(v15 + 16 * v17);
        if (v19 == a1)
        {
          int v18 = (unint64_t **)(v15 + 16 * v17);
          goto LABEL_12;
        }
      }
    }
    int v18 = (unint64_t **)(v15 + 16 * v16);
    goto LABEL_12;
  }
  return a1;
}

unint64_t *llvm::GlobalAlias::create(llvm::PointerType *a1, llvm::Type *a2, char a3, const char **a4, unint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 40);
  int v11 = (char *)operator new(0x60uLL);
  *((_DWORD *)v11 + 13) = *((_DWORD *)v11 + 13) & 0x38000000 | 1;
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = v11 + 32;
  int v12 = (unint64_t *)(v11 + 32);

  return llvm::GlobalAlias::GlobalAlias(v12, a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1CC5BF2C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if ((v1 & 0xF) == 1) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    return *(unsigned char *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0;
  }
  else
  {
    BOOL v3 = (v1 & 0x800000) == 0;
    return *(void *)(a1 + 72) == a1 + 72 && v3;
  }
}

void *sub_1CC5BF31C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC5BF454(a1, v7);
      uint64_t v17 = 0;
      sub_1CBFD6124((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC5BF454(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 24 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 24 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC5BF454(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC5BF52C(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *BOOL result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5BF52C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 24 * v3;
    do
    {
      void *v4 = -4096;
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 24 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 24 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_7;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_7:
      *(void *)uint64_t v9 = v6;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t llvm::IRBuilderBase::getCurrentFunctionReturnType(llvm::IRBuilderBase *this)
{
  return **(void **)(*(void *)(*(void *)(*((void *)this + 6) + 56) + 24) + 16);
}

llvm::Instruction *llvm::IRBuilderBase::getCastedInt8PtrValue(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  int v2 = a2;
  uint64_t v4 = (llvm::PointerType *)(**((void **)this + 8) + 1912);
  uint64_t v5 = *(llvm::PointerType **)(*(void *)a2 + 24);
  if (v5) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    unint64_t v8 = llvm::PointerType::get(v4, (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8));
    v13[16] = 257;
    if (*(void *)v2 != v8)
    {
      if (*((unsigned __int8 *)v2 + 16) <= 0x14u)
      {
        int v2 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, unint64_t))(**((void **)this + 9) + 224))(*((void *)this + 9), 49, v2, v8);
        if (v2) {
          BOOL v12 = *((unsigned __int8 *)v2 + 16) >= 0x1Cu;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12) {
          return sub_1CB844E0C((uint64_t *)this, v2, (uint64_t)v13);
        }
      }
      else
      {
        __int16 v15 = 257;
        int v2 = llvm::CastInst::Create(49, (uint64_t)v2, v8, &v14, 0);
        (*(void (**)(void, llvm::Value *, _WORD *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v2, v13, *((void *)this + 6), *((void *)this + 7));
        uint64_t v9 = *((unsigned int *)this + 2);
        if (v9)
        {
          uint64_t v10 = *(void **)this;
          uint64_t v11 = &v10[2 * v9];
          do
          {
            llvm::Instruction::setMetadata(v2, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
            v10 += 2;
          }
          while (v10 != v11);
        }
      }
    }
  }
  return v2;
}

unsigned int *llvm::IRBuilderBase::getCurrentDebugLocation@<X0>(unsigned int *this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v2 = this[2];
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 **)(*(void *)this + 8);
    uint64_t v4 = 16 * v2;
    while (*((_DWORD *)v3 - 2))
    {
      v3 += 2;
      v4 -= 16;
      if (!v4) {
        goto LABEL_2;
      }
    }
    uint64_t v5 = *v3;
    *a2 = *v3;
    if (v5) {
      return (unsigned int *)llvm::MetadataTracking::track((uint64_t)a2, v5, 2);
    }
  }
  else
  {
LABEL_2:
    *a2 = 0;
  }
  return this;
}

unsigned int *llvm::IRBuilderBase::SetInstDebugLocation(unsigned int *this, llvm::Instruction *a2)
{
  uint64_t v2 = this[2];
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 **)(*(void *)this + 8);
    uint64_t v5 = 16 * v2;
    while (*((_DWORD *)v4 - 2))
    {
      v4 += 2;
      v5 -= 16;
      if (!v5) {
        return this;
      }
    }
    BOOL v6 = *v4;
    int v18 = v6;
    if (v6) {
      this = (unsigned int *)llvm::MetadataTracking::track((uint64_t)&v18, v6, 2);
    }
    int v7 = (unsigned __int8 **)((char *)a2 + 48);
    if (&v18 != v7)
    {
      unint64_t v8 = *v7;
      if (*v7)
      {
        int v10 = *v8;
        if ((v10 - 4) > 0x1E)
        {
          if ((v10 - 3) >= 0xFFFFFFFE) {
            BOOL v13 = *v7;
          }
          else {
            BOOL v13 = 0;
          }
          if ((v10 - 3) < 0xFFFFFFFE)
          {
            if (v10 == 3) {
              *((void *)v8 + 1) = 0;
            }
            goto LABEL_10;
          }
          unint64_t v12 = (unint64_t)(v13 + 8);
        }
        else
        {
          if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
            goto LABEL_10;
          }
          uint64_t v11 = *((void *)v8 + 2);
          if ((v11 & 4) == 0) {
            goto LABEL_10;
          }
          unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
          if (!v12) {
            goto LABEL_10;
          }
        }
        int v19 = v7;
        this = (unsigned int *)sub_1CC5FA668(v12 + 16, &v19);
      }
LABEL_10:
      uint64_t v9 = v18;
      llvm::GlobalObject *v7 = v18;
      if (v9) {
        return (unsigned int *)llvm::MetadataTracking::retrack((uint64_t)&v18, v9, (uint64_t)v7);
      }
      return this;
    }
    if (!v18) {
      return this;
    }
    int v14 = *v18;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v18;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = (unint64_t)(v17 + 8);
LABEL_39:
        int v19 = &v18;
        return (unsigned int *)sub_1CC5FA668(v16 + 16, &v19);
      }
      if (v14 == 3) {
        *((void *)v18 + 1) = 0;
      }
    }
    else if ((v18[1] & 0x7F) == 2 || *((_DWORD *)v18 + 3))
    {
      uint64_t v15 = *((void *)v18 + 2);
      if ((v15 & 4) != 0)
      {
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_39;
        }
      }
    }
  }
  return this;
}

uint64_t llvm::IRBuilderBase::CreateIntrinsic(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a1[6] + 56) + 40), a2, a3, a4);
  if (Declaration) {
    int v14 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    int v14 = 0;
  }
  uint64_t result = sub_1CC233B6C(a1, v14, (uint64_t **)Declaration, a5, a6, 0, 0, a8, 0);
  if (a7) {
    *(unsigned char *)(result + 17) = *(unsigned char *)(a7 + 17) & 0xFE | *(unsigned char *)(result + 17) & 1;
  }
  return result;
}

uint64_t ***llvm::IRBuilderBase::CreateMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, __int16 a5, unsigned int a6, llvm::MDNode *a7, llvm::MDNode *a8, llvm::MDNode *a9)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v36[0] = (uint64_t)CastedInt8PtrValue;
  v36[1] = a3;
  v36[2] = (uint64_t)a4;
  uint64_t v18 = **(void **)(a1 + 64);
  uint64_t v19 = a6;
  int v20 = *(llvm::ConstantInt **)(v18 + 1888);
  unint64_t v21 = *(unsigned int *)(v18 + 1896);
  unsigned int v33 = v21 >> 8;
  if (v21 >> 8 > 0x40) {
    operator new[]();
  }
  if (v21 <= 0xFF) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
  }
  unint64_t v32 = v22 & v19;
  int v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v32, v16);
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  v36[3] = (uint64_t)v23;
  uint64_t v24 = *a4;
  v35[0] = *(void *)CastedInt8PtrValue;
  v35[1] = v24;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), 199, (uint64_t)v35, 2);
  __int16 v34 = 257;
  if (Declaration) {
    char v26 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    char v26 = 0;
  }
  uint64_t v27 = sub_1CC233B6C((uint64_t *)a1, v26, (uint64_t **)Declaration, v36, 4, 0, 0, (uint64_t)&v32, 0);
  uint64_t v28 = (uint64_t ***)v27;
  if ((a5 & 0xFF00) != 0)
  {
    unint64_t v29 = __clz((1 << a5)) ^ 0x13F;
    if ((a5 & 0xE0) != 0) {
      __int16 v30 = 0;
    }
    else {
      __int16 v30 = v29;
    }
    sub_1CC52DDDC(v27, v30);
  }
  if (a7) {
    llvm::Value::setMetadata(v28, 1, a7);
  }
  if (a8) {
    llvm::Value::setMetadata(v28, 7, a8);
  }
  if (a9) {
    llvm::Value::setMetadata(v28, 8, a9);
  }
  return v28;
}

uint64_t ***llvm::IRBuilderBase::CreateElementUnorderedAtomicMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, char a5, unsigned int a6, llvm::MDNode *a7, llvm::MDNode *a8, llvm::MDNode *a9)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v33[0] = (uint64_t)CastedInt8PtrValue;
  v33[1] = a3;
  v33[2] = (uint64_t)a4;
  uint64_t v18 = **(void **)(a1 + 64);
  uint64_t v19 = a6;
  int v20 = *(llvm::ConstantInt **)(v18 + 1960);
  unint64_t v21 = *(unsigned int *)(v18 + 1968);
  unsigned int v30 = v21 >> 8;
  if (v21 >> 8 > 0x40) {
    operator new[]();
  }
  if (v21 <= 0xFF) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
  }
  unint64_t v29 = v22 & v19;
  int v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v29, v16);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  v33[3] = (uint64_t)v23;
  uint64_t v24 = *a4;
  v32[0] = *(void *)CastedInt8PtrValue;
  v32[1] = v24;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), 200, (uint64_t)v32, 2);
  __int16 v31 = 257;
  if (Declaration) {
    char v26 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    char v26 = 0;
  }
  uint64_t v27 = (uint64_t ***)sub_1CC233B6C((uint64_t *)a1, v26, (uint64_t **)Declaration, v33, 4, 0, 0, (uint64_t)&v29, 0);
  sub_1CC27C328((uint64_t)v27, a5);
  if (a7) {
    llvm::Value::setMetadata(v27, 1, a7);
  }
  if (a8) {
    llvm::Value::setMetadata(v27, 7, a8);
  }
  if (a9) {
    llvm::Value::setMetadata(v27, 8, a9);
  }
  return v27;
}

uint64_t ***llvm::IRBuilderBase::CreateMemTransferInst(uint64_t a1, int a2, llvm::Value *a3, __int16 a4, llvm::Value *a5, __int16 a6, uint64_t *a7, unsigned int a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11, llvm::MDNode *a12)
{
  uint64_t v38[4] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a3);
  unint64_t v21 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a5);
  v38[0] = (uint64_t)CastedInt8PtrValue;
  v38[1] = (uint64_t)v21;
  v38[2] = (uint64_t)a7;
  uint64_t v22 = **(void **)(a1 + 64);
  uint64_t v23 = a8;
  uint64_t v24 = *(llvm::ConstantInt **)(v22 + 1888);
  unint64_t v25 = *(unsigned int *)(v22 + 1896);
  unsigned int v35 = v25 >> 8;
  if (v25 >> 8 > 0x40) {
    operator new[]();
  }
  if (v25 <= 0xFF) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v25) + 63);
  }
  unint64_t v34 = v26 & v23;
  uint64_t v27 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v34, v20);
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  v38[3] = (uint64_t)v27;
  v37[0] = *(void *)CastedInt8PtrValue;
  uint64_t v28 = *a7;
  v37[1] = *(void *)v21;
  v37[2] = v28;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, (uint64_t)v37, 3);
  __int16 v36 = 257;
  if (Declaration) {
    unsigned int v30 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unsigned int v30 = 0;
  }
  uint64_t v31 = sub_1CC233B6C((uint64_t *)a1, v30, (uint64_t **)Declaration, v38, 4, 0, 0, (uint64_t)&v34, 0);
  unint64_t v32 = (uint64_t ***)v31;
  if ((a4 & 0xFF00) != 0) {
    sub_1CC27C328(v31, a4);
  }
  if ((a6 & 0xFF00) != 0) {
    sub_1CC27C3B8((uint64_t)v32, a6);
  }
  if (a9) {
    llvm::Value::setMetadata(v32, 1, a9);
  }
  if (a10) {
    llvm::Value::setMetadata(v32, 5, a10);
  }
  if (a11) {
    llvm::Value::setMetadata(v32, 7, a11);
  }
  if (a12) {
    llvm::Value::setMetadata(v32, 8, a12);
  }
  return v32;
}

uint64_t llvm::IRBuilderBase::CreateElementUnorderedAtomicMemMove(uint64_t a1, llvm::Value *a2, char a3, llvm::Value *a4, char a5, uint64_t *a6, unsigned int a7, llvm::MDNode *a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11)
{
  uint64_t v38[4] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  int v20 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a4);
  v38[0] = (uint64_t)CastedInt8PtrValue;
  v38[1] = (uint64_t)v20;
  v38[2] = (uint64_t)a6;
  uint64_t v21 = **(void **)(a1 + 64);
  uint64_t v22 = a7;
  uint64_t v23 = *(llvm::ConstantInt **)(v21 + 1960);
  unint64_t v24 = *(unsigned int *)(v21 + 1968);
  unsigned int v35 = v24 >> 8;
  if (v24 >> 8 > 0x40) {
    operator new[]();
  }
  if (v24 <= 0xFF) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v24) + 63);
  }
  unint64_t v34 = v25 & v22;
  unint64_t v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v34, v19);
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  v38[3] = (uint64_t)v26;
  v37[0] = *(void *)CastedInt8PtrValue;
  uint64_t v27 = *a6;
  v37[1] = *(void *)v20;
  v37[2] = v27;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), 198, (uint64_t)v37, 3);
  __int16 v36 = 257;
  if (Declaration) {
    unint64_t v29 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unint64_t v29 = 0;
  }
  uint64_t v30 = sub_1CC233B6C((uint64_t *)a1, v29, (uint64_t **)Declaration, v38, 4, 0, 0, (uint64_t)&v34, 0);
  unint64_t v31 = llvm::Attribute::get(**(uint64_t ***)v30, 0x4Au, 1 << a3);
  LODWORD(v34) = 0;
  *(void *)(v30 + 64) = llvm::AttributeList::addParamAttribute((void *)(v30 + 64), **(uint64_t ***)v30, &v34, 1, v31);
  unint64_t v32 = llvm::Attribute::get(**(uint64_t ***)v30, 0x4Au, 1 << a5);
  LODWORD(v34) = 1;
  *(void *)(v30 + 64) = llvm::AttributeList::addParamAttribute((void *)(v30 + 64), **(uint64_t ***)v30, &v34, 1, v32);
  if (a8) {
    llvm::Value::setMetadata((uint64_t ***)v30, 1, a8);
  }
  if (a9) {
    llvm::Value::setMetadata((uint64_t ***)v30, 5, a9);
  }
  if (a10) {
    llvm::Value::setMetadata((uint64_t ***)v30, 7, a10);
  }
  if (a11) {
    llvm::Value::setMetadata((uint64_t ***)v30, 8, a11);
  }
  return v30;
}

uint64_t sub_1CC5C0444(uint64_t *a1, int a2, uint64_t *a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)(*(void *)(a1[6] + 56) + 40);
  uint64_t v10 = *a3;
  v11[0] = (uint64_t)a3;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v4, a2, (uint64_t)&v10, 1);
  __int16 v9 = 257;
  if (Declaration) {
    BOOL v6 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    BOOL v6 = 0;
  }
  return sub_1CC233B6C(a1, v6, (uint64_t **)Declaration, v11, 1, 0, 0, (uint64_t)v8, 0);
}

uint64_t llvm::IRBuilderBase::CreateLifetimeStart(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    uint64_t v10 = CastedInt8PtrValue;
    a3 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)(**((void **)this + 8) + 1984), 0xFFFFFFFFFFFFFFFFLL, 0);
    CastedInt8PtrValue = v10;
  }
  v13[0] = (uint64_t)a3;
  v13[1] = (uint64_t)CastedInt8PtrValue;
  BOOL v6 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v11[0] = *(void *)CastedInt8PtrValue;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v6, 168, (uint64_t)v11, 1);
  __int16 v12 = 257;
  if (Declaration) {
    unint64_t v8 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unint64_t v8 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v8, (uint64_t **)Declaration, v13, 2, 0, 0, (uint64_t)v11, 0);
}

uint64_t llvm::IRBuilderBase::CreateLifetimeEnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    uint64_t v10 = CastedInt8PtrValue;
    a3 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)(**((void **)this + 8) + 1984), 0xFFFFFFFFFFFFFFFFLL, 0);
    CastedInt8PtrValue = v10;
  }
  v13[0] = (uint64_t)a3;
  v13[1] = (uint64_t)CastedInt8PtrValue;
  BOOL v6 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v11[0] = *(void *)CastedInt8PtrValue;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v6, 167, (uint64_t)v11, 1);
  __int16 v12 = 257;
  if (Declaration) {
    unint64_t v8 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unint64_t v8 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v8, (uint64_t **)Declaration, v13, 2, 0, 0, (uint64_t)v11, 0);
}

uint64_t llvm::IRBuilderBase::CreateInvariantStart(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    uint64_t v7 = **((void **)this + 8);
    unint64_t v8 = *(llvm::ConstantInt **)(v7 + 1984);
    unsigned int v9 = *(_DWORD *)(v7 + 1992);
    unsigned int v15 = v9 >> 8;
    if (v9 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v9) + 63);
    if (v9 <= 0xFF) {
      unint64_t v10 = 0;
    }
    unint64_t v14 = v10;
    a3 = (llvm::ConstantInt *)llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, v5);
    if (v15 >= 0x41 && v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
  }
  v18[0] = (uint64_t)a3;
  v18[1] = (uint64_t)CastedInt8PtrValue;
  uint64_t v17 = *(void *)CastedInt8PtrValue;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40), 164, (uint64_t)&v17, 1);
  __int16 v16 = 257;
  if (Declaration) {
    __int16 v12 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    __int16 v12 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v12, (uint64_t **)Declaration, v18, 2, 0, 0, (uint64_t)&v14, 0);
}

uint64_t llvm::IRBuilderBase::CreateNoAliasScopeDeclaration(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  llvm::Intrinsic::getType(*v4, 126, 0, 0);
  uint64_t Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v4, 126, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v4, "llvm.experimental.noalias.scope.decl", (const char *)0x24, Type, 0);
  uint64_t v7 = (uint64_t **)v6;
  v11[0] = (uint64_t)a2;
  __int16 v10 = 257;
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 24);
  }
  return sub_1CC233B6C((uint64_t *)this, (uint64_t **)v6, v7, v11, 1, 0, 0, (uint64_t)v9, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCStatepointCall(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, char **a5, char *a6, uint64_t a7, long long *a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  v33[3] = *(char **)MEMORY[0x1E4F143B8];
  long long v26 = *a8;
  uint64_t v27 = *((void *)a8 + 2);
  uint64_t v17 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40);
  v33[0] = *a5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v17, 124, (uint64_t)v33, 1);
  sub_1CC5C2D38(a1, a2, a3, (uint64_t)a5, 0, a6, a7, v33);
  if (Declaration) {
    uint64_t v19 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = (uint64_t *)v33[0];
  int64_t v21 = (v33[1] - v33[0]) >> 3;
  v30[0] = 0;
  v30[16] = 0;
  long long v28 = v26;
  uint64_t v29 = v27;
  sub_1CC5C368C(v31, (uint64_t)v30, (uint64_t)&v28, a9, a10);
  uint64_t v22 = sub_1CC233B6C((uint64_t *)a1, v19, (uint64_t **)Declaration, v20, v21, v31[0], 0xAAAAAAAAAAAAAAABLL * ((v31[1] - v31[0]) >> 4), a11, 0);
  unint64_t v32 = (void **)v31;
  sub_1CC1E47CC(&v32);
  unint64_t v23 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v31[0]) = 2;
  *(void *)(v22 + 64) = llvm::AttributeList::addParamAttribute((void *)(v22 + 64), **(uint64_t ***)v22, v31, 1, v23);
  if (v20) {
    operator delete(v20);
  }
  return v22;
}

uint64_t llvm::IRBuilderBase::CreateGCStatepointCall(uint64_t a1, const llvm::APInt *a2, unsigned int a3, uint64_t a4, char **a5, uint64_t *a6, uint64_t a7, long long *a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v26 = *a8;
  uint64_t v27 = *((void *)a8 + 2);
  uint64_t v17 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40);
  unsigned int v33 = *a5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v17, 124, (uint64_t)&v33, 1);
  sub_1CC5C3DAC(&v33, a1, a2, a3, (uint64_t)a5, a6, a7);
  if (Declaration) {
    uint64_t v19 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = (uint64_t *)v33;
  uint64_t v21 = (v34 - v33) >> 3;
  v30[0] = 0;
  v30[16] = 0;
  long long v28 = v26;
  uint64_t v29 = v27;
  sub_1CC5C368C(v31, (uint64_t)v30, (uint64_t)&v28, a9, a10);
  uint64_t v22 = sub_1CC233B6C((uint64_t *)a1, v19, (uint64_t **)Declaration, v20, v21, v31[0], 0xAAAAAAAAAAAAAAABLL * ((v31[1] - v31[0]) >> 4), a11, 0);
  unint64_t v32 = (void **)v31;
  sub_1CC1E47CC(&v32);
  unint64_t v23 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v31[0]) = 2;
  *(void *)(v22 + 64) = llvm::AttributeList::addParamAttribute((void *)(v22 + 64), **(uint64_t ***)v22, v31, 1, v23);
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  return v22;
}

llvm::Instruction *llvm::IRBuilderBase::CreateGCStatepointInvoke(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, long long *a11, uint64_t *a12, uint64_t a13, uint64_t a14)
{
  void v37[3] = *(char **)MEMORY[0x1E4F143B8];
  long long v30 = *a11;
  uint64_t v31 = *((void *)a11 + 2);
  uint64_t v18 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40);
  v37[0] = *a5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v18, 124, (uint64_t)v37, 1);
  sub_1CC5C2D38(a1, a2, a3, (uint64_t)a5, 0, a9, a10, v37);
  if (Declaration) {
    uint64_t v20 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (uint64_t *)v37[0];
  int64_t v22 = (v37[1] - v37[0]) >> 3;
  v34[0] = 0;
  v34[16] = 0;
  long long v32 = v30;
  uint64_t v33 = v31;
  sub_1CC5C368C(v35, (uint64_t)v34, (uint64_t)&v32, a12, a13);
  unint64_t v24 = sub_1CD5C4DB8(a1, v20, Declaration, a6, a7, v21, v22, v23, v35[0], 0xAAAAAAAAAAAAAAABLL * ((v35[1] - v35[0]) >> 4), a14);
  __int16 v36 = (void **)v35;
  sub_1CC1E47CC(&v36);
  unint64_t v25 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v35[0]) = 2;
  *((void *)v24 + 8) = llvm::AttributeList::addParamAttribute((void *)v24 + 8, **(uint64_t ***)v24, v35, 1, v25);
  if (v21) {
    operator delete(v21);
  }
  return v24;
}

llvm::Instruction *llvm::IRBuilderBase::CreateGCStatepointInvoke(uint64_t a1, const llvm::APInt *a2, unsigned int a3, uint64_t a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, long long *a11, uint64_t *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v30 = *a11;
  uint64_t v31 = *((void *)a11 + 2);
  uint64_t v18 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40);
  unint64_t v37 = *a5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v18, 124, (uint64_t)&v37, 1);
  sub_1CC5C3DAC(&v37, a1, a2, a3, (uint64_t)a5, a9, a10);
  if (Declaration) {
    uint64_t v20 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (uint64_t *)v37;
  uint64_t v22 = (v38 - v37) >> 3;
  v34[0] = 0;
  v34[16] = 0;
  long long v32 = v30;
  uint64_t v33 = v31;
  sub_1CC5C368C(v35, (uint64_t)v34, (uint64_t)&v32, a12, a13);
  unint64_t v24 = sub_1CD5C4DB8(a1, v20, Declaration, a6, a7, v21, v22, v23, v35[0], 0xAAAAAAAAAAAAAAABLL * ((v35[1] - v35[0]) >> 4), a14);
  __int16 v36 = (void **)v35;
  sub_1CC1E47CC(&v36);
  unint64_t v25 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v35[0]) = 2;
  *((void *)v24 + 8) = llvm::AttributeList::addParamAttribute((void *)v24 + 8, **(uint64_t ***)v24, v35, 1, v25);
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  return v24;
}

uint64_t llvm::IRBuilderBase::CreateGCRelocate(llvm::IRBuilderBase *this, llvm::Instruction *a2, unsigned int a3, unsigned int a4, llvm::Type *a5, const llvm::Twine *a6)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v32[0] = a5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v11, 122, (uint64_t)v32, 1);
  v31[0] = (uint64_t)a2;
  uint64_t v14 = **((void **)this + 8);
  uint64_t v15 = a3;
  __int16 v16 = *(llvm::ConstantInt **)(v14 + 1960);
  unint64_t v17 = *(unsigned int *)(v14 + 1968);
  unsigned int v30 = v17 >> 8;
  if (v17 >> 8 > 0x40) {
    operator new[]();
  }
  if (v17 <= 0xFF) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
  }
  unint64_t v29 = v18 & v15;
  uint64_t v20 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v29, v12);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  v31[1] = (uint64_t)v20;
  uint64_t v21 = **((void **)this + 8);
  uint64_t v22 = a4;
  uint64_t v23 = *(llvm::ConstantInt **)(v21 + 1960);
  unint64_t v24 = *(unsigned int *)(v21 + 1968);
  unsigned int v30 = v24 >> 8;
  if (v24 >> 8 > 0x40) {
    operator new[]();
  }
  if (v24 <= 0xFF) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v24) + 63);
  }
  unint64_t v29 = v25 & v22;
  long long v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v29, v19);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  _OWORD v31[2] = (uint64_t)v26;
  if (Declaration) {
    uint64_t v27 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v27 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v27, (uint64_t **)Declaration, v31, 3, 0, 0, (uint64_t)a6, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCGetPointerBase(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v10[0] = *(void *)a2;
  v10[1] = v10[0];
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v6, 120, (uint64_t)v10, 2);
  v10[0] = (uint64_t)a2;
  if (Declaration) {
    unint64_t v8 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unint64_t v8 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v8, (uint64_t **)Declaration, v10, 1, 0, 0, (uint64_t)a3, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCGetPointerOffset(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v10[0] = *(void *)a2;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v6, 121, (uint64_t)v10, 1);
  v10[0] = (uint64_t)a2;
  if (Declaration) {
    unint64_t v8 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unint64_t v8 = 0;
  }
  return sub_1CC233B6C((uint64_t *)this, v8, (uint64_t **)Declaration, v10, 1, 0, 0, (uint64_t)a3, 0);
}

uint64_t llvm::IRBuilderBase::CreateUnaryIntrinsic(llvm::IRBuilderBase *this, int a2, llvm::Value *a3, llvm::Instruction *a4, const llvm::Twine *a5)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v13[0] = *(void *)a3;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v9, a2, (uint64_t)v13, 1);
  v13[0] = (uint64_t)a3;
  if (Declaration) {
    uint64_t v11 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t result = sub_1CC233B6C((uint64_t *)this, v11, (uint64_t **)Declaration, v13, 1, 0, 0, (uint64_t)a5, 0);
  if (a4) {
    *(unsigned char *)(result + 17) = *((unsigned char *)a4 + 17) & 0xFE | *(unsigned char *)(result + 17) & 1;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateBinaryIntrinsic(llvm::IRBuilderBase *this, int a2, llvm::Value *a3, llvm::Value *a4, llvm::Instruction *a5, const llvm::Twine *a6)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  v15[0] = *(void *)a3;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v11, a2, (uint64_t)v15, 1);
  v15[0] = (uint64_t)a3;
  v15[1] = (uint64_t)a4;
  if (Declaration) {
    BOOL v13 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t result = sub_1CC233B6C((uint64_t *)this, v13, (uint64_t **)Declaration, v15, 2, 0, 0, (uint64_t)a6, 0);
  if (a5) {
    *(unsigned char *)(result + 17) = *((unsigned char *)a5 + 17) & 0xFE | *(unsigned char *)(result + 17) & 1;
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateFCmpHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::MDNode *a6, int a7)
{
  unsigned int v10 = a2;
  if (*(unsigned char *)(a1 + 100))
  {
    if (a7) {
      int v26 = 85;
    }
    else {
      int v26 = 84;
    }
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCmp(a1, v26, v10, (uint64_t *)a3, a4, a5, 0);
  }
  else
  {
    if (!a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u || !a4 || *(unsigned __int8 *)(a4 + 16) > 0x14u)
    {
      BOOL v13 = (char *)operator new(0x80uLL);
      uint64_t v14 = (unsigned __int8 *)(v13 + 64);
      *((_DWORD *)v13 + 21) = *((_DWORD *)v13 + 21) & 0x38000000 | 2;
      *(void *)BOOL v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 3) = v13 + 64;
      *((void *)v13 + 4) = 0;
      *((void *)v13 + 5) = 0;
      *((void *)v13 + 6) = 0;
      *((void *)v13 + 7) = v13 + 64;
      __int16 v28 = 257;
      uint64_t v15 = *(void *)a3;
      uint64_t v16 = ***(void ***)a3 + 1888;
      if (*(void *)a3 && (*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
      {
        uint64_t v22 = (uint64_t **)(***(void ***)a3 + 1888);
        uint64_t v23 = (llvm::Type *)*(unsigned int *)(v15 + 32);
        if (*(_DWORD *)(v15 + 8) == 19) {
          llvm::ScalableVectorType::get(v22, v23);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v22, v23);
        }
        uint64_t v16 = v24;
      }
      llvm::CmpInst::CmpInst((llvm::Value *)v14, v16, 54, v10, a3, a4, &v27, 0, 0);
      int v17 = *(_DWORD *)(a1 + 96);
      if (a6 || (a6 = *(llvm::MDNode **)(a1 + 88)) != 0) {
        llvm::Value::setMetadata((uint64_t ***)v14, 3, a6);
      }
      v13[81] |= 2 * (_BYTE)v17;
      (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v18 = *(unsigned int *)(a1 + 8);
      if (v18)
      {
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = v20 + 16 * v18;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
          v20 += 16;
        }
        while (v20 != v21);
      }
      return (llvm::Instruction *)v14;
    }
    uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72)
                                                                                          + 312))(*(void *)(a1 + 72), a2, a3, a4);
    if (v14) {
      BOOL v25 = v14[16] >= 0x1Cu;
    }
    else {
      BOOL v25 = 0;
    }
    if (!v25) {
      return (llvm::Instruction *)v14;
    }
    return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v14, a5);
  }
}

llvm::Value *llvm::IRBuilderBase::CreateSelect(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, uint64_t ***a6)
{
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 9) + 56))(*((void *)this + 9));
  if (v12) {
    return (llvm::Value *)v12;
  }
  __int16 v56 = 257;
  BOOL v13 = sub_1CC199EFC((uint64_t)a2, (uint64_t *)a3, (uint64_t)a4, v55, 0, 0);
  if (a6)
  {
    int v20 = *((_DWORD *)a6 + 5);
    if (a6[6])
    {
      if ((v20 & 0x20000000) == 0) {
        goto LABEL_23;
      }
    }
    else if ((v20 & 0x20000000) == 0)
    {
      goto LABEL_3;
    }
    uint64_t v21 = ***a6;
    v55[0] = (const char *)a6;
    int v22 = *(_DWORD *)(v21 + 2496);
    if (v22)
    {
      uint64_t v23 = *(void *)(v21 + 2480);
      int v24 = v22 - 1;
      unsigned int v25 = v24 & ((a6 >> 4) ^ (a6 >> 9));
      int v26 = (llvm::Instruction **)(v23 + 40 * v25);
      uint64_t v27 = *v26;
      if (*v26 == (llvm::Instruction *)a6) {
        goto LABEL_18;
      }
      uint64_t v47 = 0;
      int v48 = 1;
      while (v27 != (llvm::Instruction *)-4096)
      {
        if (v47) {
          BOOL v49 = 0;
        }
        else {
          BOOL v49 = v27 == (llvm::Instruction *)-8192;
        }
        if (v49) {
          uint64_t v47 = v26;
        }
        unsigned int v50 = v25 + v48++;
        unsigned int v25 = v50 & v24;
        int v26 = (llvm::Instruction **)(v23 + 40 * v25);
        uint64_t v27 = *v26;
        if (*v26 == (llvm::Instruction *)a6) {
          goto LABEL_18;
        }
      }
      if (v47) {
        BOOL v53 = v47;
      }
      else {
        BOOL v53 = v26;
      }
    }
    else
    {
      BOOL v53 = 0;
    }
    int v26 = (llvm::Instruction **)sub_1CC609054(v21 + 2480, (uint64_t)v55, (uint64_t *)v55, v53);
    uint64_t v54 = v55[0];
    v26[3] = 0;
    _OWORD v26[4] = 0;
    *int v26 = (llvm::Instruction *)v54;
    v26[1] = (llvm::Instruction *)(v26 + 3);
    v26[2] = (llvm::Instruction *)0x100000000;
LABEL_18:
    uint64_t v28 = *((unsigned int *)v26 + 4);
    if (v28)
    {
      unint64_t v29 = (llvm::MDNode **)((char *)v26[1] + 8);
      uint64_t v30 = 16 * v28;
      while (*((_DWORD *)v29 - 2) != 2)
      {
        uint64_t v31 = 0;
        v29 += 2;
        v30 -= 16;
        if (!v30) {
          goto LABEL_24;
        }
      }
      uint64_t v31 = *v29;
LABEL_24:
      if ((*((unsigned char *)a6 + 23) & 0x20) == 0) {
        goto LABEL_31;
      }
      uint64_t v32 = ***a6;
      v55[0] = (const char *)a6;
      int v33 = *(_DWORD *)(v32 + 2496);
      if (v33)
      {
        uint64_t v34 = *(void *)(v32 + 2480);
        int v35 = v33 - 1;
        unsigned int v36 = v35 & ((a6 >> 4) ^ (a6 >> 9));
        unint64_t v37 = (llvm::Instruction **)(v34 + 40 * v36);
        int v38 = *v37;
        if (*v37 == (llvm::Instruction *)a6) {
          goto LABEL_27;
        }
        unint64_t v43 = 0;
        int v44 = 1;
        while (v38 != (llvm::Instruction *)-4096)
        {
          if (v43) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v38 == (llvm::Instruction *)-8192;
          }
          if (v45) {
            unint64_t v43 = v37;
          }
          unsigned int v46 = v36 + v44++;
          unsigned int v36 = v46 & v35;
          unint64_t v37 = (llvm::Instruction **)(v34 + 40 * v36);
          int v38 = *v37;
          if (*v37 == (llvm::Instruction *)a6) {
            goto LABEL_27;
          }
        }
        if (v43) {
          std::string::size_type v51 = v43;
        }
        else {
          std::string::size_type v51 = v37;
        }
      }
      else
      {
        std::string::size_type v51 = 0;
      }
      unint64_t v37 = (llvm::Instruction **)sub_1CC609054(v32 + 2480, (uint64_t)v55, (uint64_t *)v55, v51);
      unint64_t v52 = v55[0];
      void v37[3] = 0;
      v37[4] = 0;
      *unint64_t v37 = (llvm::Instruction *)v52;
      v37[1] = (llvm::Instruction *)(v37 + 3);
      v37[2] = (llvm::Instruction *)0x100000000;
LABEL_27:
      uint64_t v39 = *((unsigned int *)v37 + 4);
      if (v39)
      {
        uint64_t v40 = (llvm::MDNode **)((char *)v37[1] + 8);
        uint64_t v41 = 16 * v39;
        while (*((_DWORD *)v40 - 2) != 15)
        {
          v40 += 2;
          v41 -= 16;
          if (!v41) {
            goto LABEL_31;
          }
        }
        unint64_t v42 = *v40;
        goto LABEL_32;
      }
LABEL_31:
      unint64_t v42 = 0;
LABEL_32:
      if (v31) {
        llvm::Value::setMetadata((uint64_t ***)v13, 2, v31);
      }
      if (v42) {
        llvm::Value::setMetadata((uint64_t ***)v13, 15, v42);
      }
      goto LABEL_3;
    }
LABEL_23:
    uint64_t v31 = 0;
    goto LABEL_24;
  }
LABEL_3:
  if (sub_1CB845E74((uint64_t)v13))
  {
    int v14 = *((_DWORD *)this + 24);
    uint64_t v15 = (llvm::MDNode *)*((void *)this + 11);
    if (v15) {
      llvm::Value::setMetadata((uint64_t ***)v13, 3, v15);
    }
    *((unsigned char *)v13 + 17) |= 2 * (_BYTE)v14;
  }
  (*(void (**)(void, llvm::Value *, const llvm::Twine *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v13, a5, *((void *)this + 6), *((void *)this + 7));
  uint64_t v16 = *((unsigned int *)this + 2);
  if (v16)
  {
    uint64_t v18 = *(void **)this;
    uint64_t v19 = &v18[2 * v16];
    do
    {
      llvm::Instruction::setMetadata(v13, *(_DWORD *)v18, (llvm::MDNode *)v18[1]);
      v18 += 2;
    }
    while (v18 != v19);
  }
  return v13;
}

llvm::Instruction *llvm::IRBuilderBase::CreateVectorSplice(llvm::IRBuilderBase *this, void **a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5)
{
  int v5 = a4;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*a2) {
    BOOL v9 = *((unsigned char *)*a2 + 8) == 19;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    int v14 = *(uint64_t ***)(*(void *)(*((void *)this + 6) + 56) + 40);
    uint64_t v34 = *a2;
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(v14, 134, (uint64_t)&v34, 1);
    v32[0] = (uint64_t)a2;
    v32[1] = (uint64_t)a3;
    uint64_t v17 = **((void **)this + 8);
    uint64_t v18 = *(llvm::ConstantInt **)(v17 + 1960);
    unsigned int v19 = *(_DWORD *)(v17 + 1968);
    LODWORD(v35) = v19 >> 8;
    if (v19 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63);
    if (v19 <= 0xFF) {
      LODWORD(v20) = 0;
    }
    uint64_t v34 = (void *)(v20 & v5);
    uint64_t v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v34, v15);
    if (v35 >= 0x41 && v34) {
      MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
    }
    void v32[2] = (uint64_t)v21;
    if (Declaration) {
      int v22 = *(uint64_t ***)(Declaration + 24);
    }
    else {
      int v22 = 0;
    }
    v36[8] = 257;
    unsigned int v25 = (char *)operator new(0xD0uLL);
    uint64_t v26 = 0;
    int v24 = (llvm::Instruction *)(v25 + 128);
    *((_DWORD *)v25 + 37) = *((_DWORD *)v25 + 37) & 0x38000000 | 4;
    do
    {
      uint64_t v27 = &v25[v26];
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0;
      *((void *)v27 + 2) = 0;
      *((void *)v27 + 3) = v24;
      v26 += 32;
    }
    while (v26 != 128);
    *((void *)v25 + 16) = *v22[2];
    *((void *)v25 + 17) = 0;
    v25[144] = 84;
    v25[145] = 0;
    *((_WORD *)v25 + 73) = 0;
    *((_DWORD *)v25 + 37) = *((_DWORD *)v25 + 37) & 0xC0000000 | 4;
    *(_OWORD *)(v25 + 152) = 0u;
    *(_OWORD *)(v25 + 168) = 0u;
    *((_DWORD *)v25 + 46) = 0;
    *((void *)v25 + 24) = 0;
    llvm::CallInst::init((uint64_t ***)v25 + 16, v22, (uint64_t **)Declaration, v32, 3, 0, 0, (const char **)&v34);
    (*(void (**)(void, llvm::Instruction *, const llvm::Twine *, void, void))(**((void **)this + 10)
                                                                                             + 16))(*((void *)this + 10), v24, a5, *((void *)this + 6), *((void *)this + 7));
    uint64_t v28 = *((unsigned int *)this + 2);
    if (v28)
    {
      uint64_t v30 = *(void *)this;
      uint64_t v31 = v30 + 16 * v28;
      do
      {
        llvm::Instruction::setMetadata(v24, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
        v30 += 16;
      }
      while (v30 != v31);
    }
  }
  else
  {
    uint64_t v10 = *((unsigned int *)*a2 + 8);
    uint64_t v34 = v36;
    uint64_t v35 = 0x800000000;
    if (v10)
    {
      LODWORD(v11) = 0;
      int v12 = (v10 + a4) % v10;
      do
      {
        if (v11 >= HIDWORD(v35)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v34 + v11) = v12;
        uint64_t v11 = (llvm::Type *)(v35 + 1);
        LODWORD(v35) = v35 + 1;
        ++v12;
        LODWORD(v10) = v10 - 1;
      }
      while (v10);
      uint64_t v23 = v34;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v23 = v36;
    }
    __int16 v33 = 257;
    int v24 = sub_1CB935A74((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v23, v11, (uint64_t)v32);
    if (v34 != v36) {
      free(v34);
    }
  }
  return v24;
}

llvm::Instruction *llvm::IRBuilderBase::CreateVectorSplat(llvm::IRBuilderBase *this, unsigned int a2, llvm::Value *a3, const llvm::Twine *a4)
{
  return llvm::IRBuilderBase::CreateVectorSplat((uint64_t)this, (llvm::Type *)a2, (unsigned __int8 *)a3, (uint64_t)a4);
}

llvm::Instruction *llvm::IRBuilderBase::CreateVectorSplat(uint64_t a1, llvm::Type *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (llvm::ConstantInt *)(**(void **)(a1 + 64) + 1960);
  unint64_t v8 = *(uint64_t ***)a3;
  unint64_t v9 = a2;
  if ((unint64_t)a2 >> 32 == 1) {
    llvm::ScalableVectorType::get(v8, a2);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, a2);
  }
  int v12 = (unsigned __int8 *)llvm::PoisonValue::get(v10, v11);
  BOOL v13 = (unsigned __int8 *)llvm::ConstantInt::get(v7, 0, 0);
  int v14 = *(unsigned __int8 *)(a4 + 32);
  if (v14 == 1)
  {
    uint64_t v31 = ".splatinsert";
    __int16 v15 = 259;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    __int16 v15 = 256;
LABEL_7:
    __int16 v34 = v15;
    goto LABEL_8;
  }
  uint64_t v25 = *(void *)(a4 + 8);
  if (*(unsigned char *)(a4 + 33) == 1)
  {
    uint64_t v26 = *(void **)a4;
  }
  else
  {
    LOBYTE(v14) = 2;
    uint64_t v26 = (void *)a4;
  }
  uint64_t v31 = v26;
  uint64_t v32 = v25;
  v33[0] = ".splatinsert";
  LOBYTE(v34) = v14;
  HIBYTE(v34) = 3;
LABEL_8:
  uint64_t v16 = (llvm::PoisonValue **)sub_1CB84478C(a1, v12, a3, v13, (uint64_t)&v31);
  uint64_t v31 = v33;
  uint64_t v32 = 0x1000000000;
  sub_1CBB1173C((uint64_t)&v31, v9);
  uint64_t v18 = v31;
  unsigned int v19 = (llvm::Type *)v32;
  int v20 = *(unsigned __int8 *)(a4 + 32);
  if (v20 == 1)
  {
    v29[0] = ".splat";
    __int16 v21 = 259;
  }
  else
  {
    if (*(unsigned char *)(a4 + 32))
    {
      uint64_t v27 = *(void *)(a4 + 8);
      if (*(unsigned char *)(a4 + 33) == 1)
      {
        uint64_t v28 = *(void **)a4;
      }
      else
      {
        LOBYTE(v20) = 2;
        uint64_t v28 = (void *)a4;
      }
      v29[0] = v28;
      v29[1] = v27;
      void v29[2] = ".splat";
      LOBYTE(v30) = v20;
      HIBYTE(v30) = 3;
      goto LABEL_13;
    }
    __int16 v21 = 256;
  }
  __int16 v30 = v21;
LABEL_13:
  int v22 = llvm::PoisonValue::get(*v16, v17);
  uint64_t v23 = sub_1CB935A74(a1, (uint64_t)v16, (uint64_t)v22, v18, v19, (uint64_t)v29);
  if (v31 != v33) {
    free(v31);
  }
  return v23;
}

llvm::Instruction *llvm::IRBuilderBase::CreateExtractInteger(llvm::IRBuilderBase *this, const llvm::DataLayout *a2, llvm::Value *a3, llvm::IntegerType *a4, unint64_t a5, const llvm::Twine *a6)
{
  unint64_t v9 = a3;
  uint64_t v11 = *(llvm::IntegerType **)a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v13 = sub_1CB83544C((uint64_t)a2, *(void *)a3);
    int v15 = v14;
    unint64_t v16 = (unint64_t)(v13 + 7) >> 3;
    unint64_t v18 = (unint64_t)(sub_1CB83544C((uint64_t)a2, (uint64_t)a4) + 7) >> 3;
    if (v15 == 1) {
    a5 = v16 - (v18 + a5);
    }
  }
  if (8 * a5)
  {
    int v19 = *((unsigned __int8 *)a6 + 32);
    if (v19 == 1)
    {
      v38[0] = ".shift";
      __int16 v20 = 259;
    }
    else
    {
      if (*((unsigned char *)a6 + 32))
      {
        __int16 v21 = (const char *)*((void *)a6 + 1);
        if (*((unsigned char *)a6 + 33) == 1)
        {
          int v22 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v19) = 2;
          int v22 = (const char *)a6;
        }
        v38[0] = v22;
        v38[1] = v21;
        v38[2] = ".shift";
        LOBYTE(v39) = v19;
        HIBYTE(v39) = 3;
        goto LABEL_15;
      }
      __int16 v20 = 256;
    }
    __int16 v39 = v20;
LABEL_15:
    uint64_t v23 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, 8 * a5, 0);
    unint64_t v9 = sub_1CC2429AC((uint64_t)this, (uint64_t)v9, (uint64_t)v23, (uint64_t)v38, 0);
  }
  if (v11 == a4) {
    return v9;
  }
  int v24 = *((unsigned __int8 *)a6 + 32);
  if (v24 == 1)
  {
    v36[0] = ".trunc";
    __int16 v25 = 259;
    goto LABEL_21;
  }
  if (!*((unsigned char *)a6 + 32))
  {
    __int16 v25 = 256;
LABEL_21:
    __int16 v37 = v25;
    goto LABEL_26;
  }
  uint64_t v26 = *((void *)a6 + 1);
  if (*((unsigned char *)a6 + 33) == 1)
  {
    uint64_t v27 = *(const llvm::Twine **)a6;
  }
  else
  {
    LOBYTE(v24) = 2;
    uint64_t v27 = a6;
  }
  v36[0] = v27;
  v36[1] = v26;
  v36[2] = ".trunc";
  LOBYTE(v37) = v24;
  HIBYTE(v37) = 3;
LABEL_26:
  if (*(llvm::IntegerType **)v9 != a4)
  {
    if (*((unsigned __int8 *)v9 + 16) <= 0x14u)
    {
      unint64_t v9 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::IntegerType *))(**((void **)this + 9) + 224))(*((void *)this + 9), 38, v9, a4);
      if (v9) {
        BOOL v31 = *((unsigned __int8 *)v9 + 16) >= 0x1Cu;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v9, v36, *((void *)this + 6), *((void *)this + 7));
        uint64_t v33 = *((unsigned int *)this + 2);
        if (v33)
        {
          __int16 v34 = *(void **)this;
          uint64_t v35 = &v34[2 * v33];
          do
          {
            llvm::Instruction::setMetadata(v9, *(_DWORD *)v34, (llvm::MDNode *)v34[1]);
            v34 += 2;
          }
          while (v34 != v35);
        }
      }
    }
    else
    {
      __int16 v39 = 257;
      unint64_t v9 = llvm::CastInst::Create(38, (uint64_t)v9, (uint64_t)a4, v38, 0);
      (*(void (**)(void, llvm::Instruction *, void *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v9, v36, *((void *)this + 6), *((void *)this + 7));
      uint64_t v28 = *((unsigned int *)this + 2);
      if (v28)
      {
        unint64_t v29 = *(void **)this;
        __int16 v30 = &v29[2 * v28];
        do
        {
          llvm::Instruction::setMetadata(v9, *(_DWORD *)v29, (llvm::MDNode *)v29[1]);
          v29 += 2;
        }
        while (v29 != v30);
      }
    }
  }
  return v9;
}

void llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter(llvm::IRBuilderCallbackInserter *this)
{
  *(void *)this = &unk_1F2616B68;
  int v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

{
  uint64_t vars8;

  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC5C2658(int a1, llvm::Value *this, const char **a3, uint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    *((void *)this + 5) = a4;
    *(_WORD *)(a4 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v9 = *(void *)(a4 + 56);
      if (v9)
      {
        uint64_t v10 = *(llvm::ValueSymbolTable **)(v9 + 104);
        if (v10) {
          llvm::ValueSymbolTable::reinsertValue(v10, this);
        }
      }
    }
    uint64_t v8 = *a5;
    *((void *)this + 3) = *a5;
    *((void *)this + 4) = a5;
    *(void *)(v8 + 8) = (char *)this + 24;
    *a5 = (uint64_t)this + 24;
  }
  llvm::Value::setNameImpl(this, a3);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v11 = ***(void ***)this;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v15 = v12 + 16 * v14;
      unint64_t v16 = *(llvm::Value **)v15;
      if (*(llvm::Value **)v15 == this)
      {
LABEL_17:
        int v19 = *(void **)(v15 + 8);
        unint64_t v22 = *v19;
        __int16 v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_24:
          *((_DWORD *)this + 9) = v24;
          return;
        }
LABEL_25:
        int v24 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_24;
      }
      int v17 = 1;
      while (v16 != (llvm::Value *)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        unint64_t v16 = *(llvm::Value **)(v12 + 16 * v14);
        if (v16 == this)
        {
          uint64_t v15 = v12 + 16 * v14;
          goto LABEL_17;
        }
      }
    }
    uint64_t v15 = v12 + 16 * v13;
    goto LABEL_17;
  }
}

uint64_t sub_1CC5C27C0(uint64_t a1, llvm::Value *this, const char **a3, uint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    *((void *)this + 5) = a4;
    *(_WORD *)(a4 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v12 = *(void *)(a4 + 56);
      if (v12)
      {
        uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13) {
          llvm::ValueSymbolTable::reinsertValue(v13, this);
        }
      }
    }
    uint64_t v9 = *a5;
    *((void *)this + 3) = *a5;
    *((void *)this + 4) = a5;
    *(void *)(v9 + 8) = (char *)this + 24;
    *a5 = (uint64_t)this + 24;
  }
  llvm::Value::setNameImpl(this, a3);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v14 = ***(void ***)this;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v18 = v15 + 16 * v17;
      int v19 = *(llvm::Value **)v18;
      if (*(llvm::Value **)v18 == this)
      {
LABEL_18:
        unint64_t v22 = *(void **)(v18 + 8);
        unint64_t v25 = *v22;
        uint64_t v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_25:
          *((_DWORD *)this + 9) = v27;
          goto LABEL_6;
        }
LABEL_26:
        int v27 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v20 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        int v19 = *(llvm::Value **)(v15 + 16 * v17);
        if (v19 == this)
        {
          uint64_t v18 = v15 + 16 * v17;
          goto LABEL_18;
        }
      }
    }
    uint64_t v18 = v15 + 16 * v16;
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v33 = this;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    return (*(uint64_t (**)(uint64_t, llvm::Value **))(*(void *)v10 + 48))(v10, &v33);
  }
  sub_1CB920400();
  return sub_1CC5C296C(v28, v29, v30, v31, v32);
}

const llvm::detail::DoubleAPFloat *sub_1CC5C296C(int a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  if (a2[16] >= 0x15u) {
    int v5 = 0;
  }
  else {
    int v5 = (llvm::ConstantExpr *)a2;
  }
  if (a3[16] >= 0x15u) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (llvm::Constant *)a3;
  }
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getAdd(v5, v6, a4, a5);
  }
}

uint64_t sub_1CC5C29A4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  if (a2[16] >= 0x15u) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (llvm::ConstantExpr *)a2;
  }
  if (a3[16] >= 0x15u) {
    int v5 = 0;
  }
  else {
    int v5 = (llvm::Constant *)a3;
  }
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getAnd(v4, v5, (llvm::Constant *)a3, a4);
  }
}

const llvm::detail::DoubleAPFloat *sub_1CC5C29D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  if (a2[16] >= 0x15u) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (llvm::ConstantExpr *)a2;
  }
  if (a3[16] >= 0x15u) {
    int v5 = 0;
  }
  else {
    int v5 = (llvm::Constant *)a3;
  }
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getOr(v4, v5, (llvm::Constant *)a3, a4);
  }
}

void *sub_1CC5C2A04(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int8 *a4, BOOL a5)
{
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (uint64_t ***)a3;
  }
  if (a4[16] >= 0x15u) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (llvm::Constant *)a4;
  }
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  if (a2 <= 0xFu) {
    return (void *)llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)a2, v6, v7, 0);
  }
  return llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)a2, (llvm::Type *)v6, v7, 0, a5);
}

uint64_t sub_1CC5C2A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    if (!a5) {
      return llvm::ConstantExpr::getGetElementPtr(a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
    }
    uint64_t v6 = 8 * a5;
    for (uint64_t i = a4; *(unsigned __int8 *)(*(void *)i + 16) <= 0x14u; i += 8)
    {
      v6 -= 8;
      if (!v6) {
        return llvm::ConstantExpr::getGetElementPtr(a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
      }
    }
  }
  return 0;
}

llvm::Constant *sub_1CC5C2ABC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, llvm::Type *a5)
{
  if (a2[16] >= 0x15u) {
    int v5 = 0;
  }
  else {
    int v5 = (llvm::ConstantExpr *)a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (llvm::PoisonValue **)a3;
  }
  if (a4[16] >= 0x15u) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (llvm::Constant *)a4;
  }
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || v7 == 0) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getSelect(v5, v6, v7, 0, a5);
  }
}

const llvm::detail::DoubleAPFloat *sub_1CC5C2B00(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  return llvm::ConstantExpr::getSub(this, a3, a4, a5);
}

const llvm::detail::DoubleAPFloat *sub_1CC5C2B14(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  return llvm::ConstantExpr::getMul(this, a3, a4, a5);
}

const llvm::detail::DoubleAPFloat *sub_1CC5C2B28(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(this, a3, a4, a4);
}

uint64_t sub_1CC5C2B38(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getLShr(this, a3, a4, a4);
}

const llvm::detail::DoubleAPFloat *sub_1CC5C2B48(int a1, llvm *this, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v6 = this;
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction(this, a3, a4, a4);
  if (!result)
  {
    BOOL v8 = *(void ***)a3;
    if (*(void *)a3)
    {
      v17[0] = a3;
      v17[1] = a4;
      uint64_t v9 = **v8 + 1512;
      v10[0] = v6;
      v10[1] = 0;
      __int16 v11 = 0;
      uint64_t v12 = v17;
      uint64_t v13 = 2;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ConstantExpr *sub_1CC5C2C10(int a1, llvm::ConstantExpr *this, llvm::ConstantExpr *a3, llvm::Constant ***a4)
{
  return llvm::ConstantExpr::getCast(this, a3, a4, 0);
}

llvm::ConstantExpr *sub_1CC5C2C24(int a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getPointerCast(this, a3, a3);
}

llvm::ConstantExpr *sub_1CC5C2C30(int a1, llvm::ConstantExpr *this, llvm::Type ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getIntegerCast(this, a3, a4);
}

void *sub_1CC5C2C40(int a1, llvm *this, llvm::Constant *a3)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldExtractElementInstruction(this, a3, a3);
  if (!result)
  {
    unsigned __int8 v6 = *(void ***)this;
    uint64_t v7 = *(void *)(*(void *)this + 24);
    if (v7)
    {
      v15[0] = this;
      v15[1] = a3;
      uint64_t v8 = **v6 + 1512;
      v9[0] = 61;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (void *)sub_1CC56C20C(v8, v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm *sub_1CC5C2CFC(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getInsertElement(this, a3, a4, 0, a5);
}

void *sub_1CC5C2D10(uint64_t a1, llvm *a2, llvm *a3, int *a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getShuffleVector(a2, a3, a4, a5, 0);
}

uint64_t sub_1CC5C2D28()
{
  return 0;
}

uint64_t sub_1CC5C2D30()
{
  return 0;
}

void sub_1CC5C2D38(uint64_t a1@<X0>, uint64_t a2@<X1>, const llvm::APInt *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char *a6@<X5>, uint64_t a7@<X6>, char **a8@<X8>)
{
  unsigned int v11 = a3;
  a8[1] = 0;
  a8[2] = 0;
  long long v13 = (void **)(a8 + 1);
  uint64_t v14 = **(void **)(a1 + 64);
  long long v15 = *(llvm::ConstantInt **)(v14 + 1984);
  unint64_t v16 = *(unsigned int *)(v14 + 1992);
  unsigned int v104 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  unint64_t v103 = v17 & a2;
  uint64_t v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v103, a3);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  int v20 = operator new(8uLL);
  void *v20 = v18;
  uint64_t v21 = **(void **)(a1 + 64);
  uint64_t v22 = v11;
  uint64_t v23 = *(llvm::ConstantInt **)(v21 + 1960);
  unint64_t v24 = *(unsigned int *)(v21 + 1968);
  unsigned int v104 = v24 >> 8;
  if (v24 >> 8 > 0x40) {
    operator new[]();
  }
  if (v24 <= 0xFF) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v24) + 63);
  }
  unint64_t v103 = v25 & v22;
  uint64_t v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v103, v19);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  int v27 = operator new(0x10uLL);
  *int v27 = *v20;
  v27[1] = v26;
  operator delete(v20);
  int v28 = (char *)operator new(0x20uLL);
  *((void *)v28 + 2) = a4;
  *(_OWORD *)int v28 = *(_OWORD *)v27;
  *a8 = v28;
  a8[2] = v28 + 32;
  operator delete(v27);
  uint64_t v30 = a1;
  uint64_t v31 = **(void **)(a1 + 64);
  BOOL v32 = *(llvm::ConstantInt **)(v31 + 1960);
  unint64_t v33 = *(unsigned int *)(v31 + 1968);
  unsigned int v104 = v33 >> 8;
  if (v33 >> 8 > 0x40) {
    operator new[]();
  }
  if (v33 <= 0xFF) {
    LODWORD(v34) = 0;
  }
  else {
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v33) + 63);
  }
  unint64_t v103 = v34 & a7;
  unsigned int v36 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v103, v29);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  *((void *)v28 + 3) = v36;
  __int16 v37 = *(uint64_t **)(a1 + 64);
  *long long v13 = v28 + 32;
  uint64_t v38 = *v37;
  uint64_t v39 = a5;
  uint64_t v40 = *(llvm::ConstantInt **)(v38 + 1960);
  unint64_t v41 = *(unsigned int *)(v38 + 1968);
  unsigned int v104 = v41 >> 8;
  if (v41 >> 8 > 0x40) {
    operator new[]();
  }
  if (v41 <= 0xFF) {
    unint64_t v42 = 0;
  }
  else {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v41) + 63);
  }
  unint64_t v103 = v42 & v39;
  unint64_t v43 = llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v103, v35);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  BOOL v45 = (char *)operator new(0x40uLL);
  *((void *)v45 + 4) = v43;
  unsigned int v46 = v45 + 40;
  long long v47 = *((_OWORD *)v28 + 1);
  *(_OWORD *)BOOL v45 = *(_OWORD *)v28;
  *((_OWORD *)v45 + 1) = v47;
  int v48 = *a8;
  *a8 = v45;
  a8[2] = v45 + 64;
  if (v48)
  {
    operator delete(v48);
    BOOL v45 = *a8;
  }
  *long long v13 = v46;
  if (a7 >= 1)
  {
    uint64_t v49 = v46 - v45;
    unsigned int v50 = &v45[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
    std::string::size_type v51 = a8[2];
    if (a7 <= (v51 - v46) >> 3)
    {
      uint64_t v57 = a6;
      std::string::size_type v58 = &a6[8 * a7];
      uint64_t v59 = (v46 - v50) >> 3;
      if (v59 >= a7)
      {
        unsigned int v61 = v46;
      }
      else
      {
        std::string::size_type v60 = &a6[8 * v59];
        memmove(v46, v60, v58 - v60);
        unsigned int v61 = &v46[v58 - v60];
        *long long v13 = v61;
        if (v46 - v50 < 1) {
          goto LABEL_53;
        }
        std::string::size_type v58 = v60;
        uint64_t v57 = a6;
      }
      uint64_t v62 = &v50[8 * a7];
      unint64_t v63 = &v61[-8 * a7];
      unsigned int v64 = v61;
      if (v63 < v46)
      {
        unsigned int v64 = v61;
        do
        {
          uint64_t v65 = *(void *)v63;
          v63 += 8;
          *v64++ = v65;
        }
        while (v63 < v46);
      }
      *long long v13 = v64;
      if (v61 != v62) {
        memmove(&v61[-8 * ((v61 - v62) >> 3)], v50, v61 - v62);
      }
      int v44 = (const llvm::APInt *)(v58 - v57);
      if (v58 != v57) {
        memmove(v50, a6, (size_t)v44);
      }
    }
    else
    {
      int v100 = v13;
      uint64_t v52 = v49 >> 3;
      unint64_t v53 = (v49 >> 3) + a7;
      if (v53 >> 61) {
        goto LABEL_113;
      }
      uint64_t v54 = v51 - v45;
      if (v54 >> 2 > v53) {
        unint64_t v53 = v54 >> 2;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        if (v55 >> 61) {
          goto LABEL_114;
        }
        __int16 v56 = (char *)operator new(8 * v55);
      }
      else
      {
        __int16 v56 = 0;
      }
      unsigned int v66 = &v56[8 * v52];
      memcpy(v66, a6, 8 * a7);
      unint64_t v67 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8 * a7;
      if ((unint64_t)v49 >= 8)
      {
        uint64_t v68 = 8 * v52;
        do
        {
          *(void *)&v56[v68 - 8] = *(void *)&v45[v68 - 8];
          v68 -= 8;
        }
        while (v68);
        long long v13 = v100;
        unsigned int v46 = (char *)*v100;
        unsigned int v66 = v56;
      }
      else
      {
        long long v13 = v100;
      }
      char v69 = &v56[v67];
      std::string v70 = &v56[8 * v55];
      if (v46 != v50) {
        memmove(&v56[v67], v50, v46 - v50);
      }
      std::string v71 = *a8;
      *a8 = v66;
      a8[1] = &v69[v46 - v50];
      a8[2] = v70;
      uint64_t v30 = a1;
      if (v71) {
        operator delete(v71);
      }
    }
  }
LABEL_53:
  uint64_t v72 = **(void **)(v30 + 64);
  uint64_t v73 = *(llvm::ConstantInt **)(v72 + 1960);
  unsigned int v74 = *(_DWORD *)(v72 + 1968);
  unsigned int v104 = v74 >> 8;
  if (v74 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v103 = 0;
  uint64_t v76 = llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v103, v44);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  uint64_t v77 = a8[1];
  unsigned int v78 = a8[2];
  if (v77 >= v78)
  {
    uint64_t v80 = *a8;
    uint64_t v81 = (v77 - *a8) >> 3;
    unint64_t v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 61) {
      goto LABEL_113;
    }
    if ((v78 - v80) >> 2 > v82) {
      unint64_t v82 = (v78 - v80) >> 2;
    }
    if ((unint64_t)(v78 - v80) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v83 = v82;
    }
    if (v83)
    {
      if (v83 >> 61) {
        goto LABEL_114;
      }
      int v84 = (char *)operator new(8 * v83);
    }
    else
    {
      int v84 = 0;
    }
    uint64_t v85 = &v84[8 * v81];
    unsigned int v78 = &v84[8 * v83];
    *(void *)uint64_t v85 = v76;
    int v79 = v85 + 8;
    if (v77 != v80)
    {
      do
      {
        uint64_t v86 = *((void *)v77 - 1);
        v77 -= 8;
        *((void *)v85 - 1) = v86;
        v85 -= 8;
      }
      while (v77 != v80);
      uint64_t v77 = *a8;
    }
    *a8 = v85;
    a8[2] = v78;
    if (v77) {
      operator delete(v77);
    }
  }
  else
  {
    *(void *)uint64_t v77 = v76;
    int v79 = v77 + 8;
  }
  *long long v13 = v79;
  uint64_t v87 = **(void **)(v30 + 64);
  uint64_t v88 = *(llvm::ConstantInt **)(v87 + 1960);
  unsigned int v89 = *(_DWORD *)(v87 + 1968);
  unsigned int v104 = v89 >> 8;
  if (v89 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v103 = 0;
  uint64_t v90 = llvm::ConstantInt::get(v88, (llvm::LLVMContext *)&v103, v75);
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  if (v79 < v78)
  {
    *(void *)int v79 = v90;
    unsigned int v91 = v79 + 8;
    goto LABEL_92;
  }
  uint64_t v92 = *a8;
  uint64_t v93 = (v79 - *a8) >> 3;
  unint64_t v94 = v93 + 1;
  if ((unint64_t)(v93 + 1) >> 61) {
LABEL_113:
  }
    abort();
  if ((v78 - v92) >> 2 > v94) {
    unint64_t v94 = (v78 - v92) >> 2;
  }
  if ((unint64_t)(v78 - v92) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v95 = v94;
  }
  if (v95)
  {
    if (!(v95 >> 61))
    {
      unsigned int v96 = (char *)operator new(8 * v95);
      goto LABEL_86;
    }
LABEL_114:
    sub_1CB833614();
  }
  unsigned int v96 = 0;
LABEL_86:
  v97 = &v96[8 * v93];
  uint64_t v98 = &v96[8 * v95];
  *(void *)v97 = v90;
  unsigned int v91 = v97 + 8;
  if (v79 == v92)
  {
    *a8 = v97;
    a8[1] = v91;
    a8[2] = v98;
LABEL_91:
    operator delete(v79);
    goto LABEL_92;
  }
  do
  {
    uint64_t v99 = *((void *)v79 - 1);
    v79 -= 8;
    *((void *)v97 - 1) = v99;
    v97 -= 8;
  }
  while (v79 != v92);
  int v79 = *a8;
  *a8 = v97;
  a8[1] = v91;
  a8[2] = v98;
  if (v79) {
    goto LABEL_91;
  }
LABEL_92:
  *long long v13 = v91;
}

void sub_1CC5C368C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *__src, uint64_t a5)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4AF8((unsigned int *)&v9, (uint64_t)v11, *(uint64_t **)a3, (uint64_t *)(*(void *)a3 + 8 * *(void *)(a3 + 8)));
    sub_1CD5C498C(a1, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4AF8((unsigned int *)&v9, (uint64_t)v11, *(uint64_t **)a2, (uint64_t *)(*(void *)a2 + 8 * *(void *)(a2 + 8)));
    sub_1CD5C49FC(a1, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
  if (a5)
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4AF8((unsigned int *)&v9, (uint64_t)v11, __src, &__src[a5]);
    sub_1CD5C4A84(a1, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
}

uint64_t sub_1CC5C380C(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v18 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[48 * v3];
  std::string __p = v9;
  long long v15 = v10;
  unint64_t v17 = &v9[48 * v8];
  *(void *)uint64_t v10 = 0x74706F6564;
  v10[23] = 5;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = 0;
  sub_1CBFCBA2C((void *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  unint64_t v16 = v10 + 48;
  sub_1CD4F8218(a1, &__p);
  uint64_t v11 = a1[1];
  long long v12 = v15;
  while (v16 != v12)
  {
    v16 -= 48;
    sub_1CD4AF9B4((uint64_t)v16);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_1CC5C3964(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v18 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[48 * v3];
  std::string __p = v9;
  long long v15 = v10;
  unint64_t v17 = &v9[48 * v8];
  strcpy(v10, "gc-transition");
  v10[23] = 13;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = 0;
  sub_1CBFCBA2C((void *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  unint64_t v16 = v10 + 48;
  sub_1CD4F8218(a1, &__p);
  uint64_t v11 = a1[1];
  long long v12 = v15;
  while (v16 != v12)
  {
    v16 -= 48;
    sub_1CD4AF9B4((uint64_t)v16);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_1CC5C3AD4(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v18 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[48 * v3];
  std::string __p = v9;
  long long v15 = v10;
  unint64_t v17 = &v9[48 * v8];
  *(void *)uint64_t v10 = 0x6576696C2D6367;
  v10[23] = 7;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = 0;
  sub_1CBFCBA2C((void *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  unint64_t v16 = v10 + 48;
  sub_1CD4F8218(a1, &__p);
  uint64_t v11 = a1[1];
  long long v12 = v15;
  while (v16 != v12)
  {
    v16 -= 48;
    sub_1CD4AF9B4((uint64_t)v16);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1CC5C3C30(uint64_t *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4C58((uint64_t)&v9, (uint64_t)v11, *(char **)a3, (char *)(*(void *)a3 + 32 * *(void *)(a3 + 8)));
    sub_1CD5C498C(a5, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4C58((uint64_t)&v9, (uint64_t)v11, *(char **)a2, (char *)(*(void *)a2 + 32 * *(void *)(a2 + 8)));
    sub_1CD5C49FC(a5, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
  if (a4)
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x1000000000;
    sub_1CD5C4AF8((unsigned int *)&v9, (uint64_t)v11, __src, &__src[a4]);
    sub_1CD5C4A84(a5, v9, v10);
    if (v9 != v11) {
      free(v9);
    }
  }
}

void sub_1CC5C3DAC(char **a1, uint64_t a2, const llvm::APInt *a3, unsigned int a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v11 = a1 + 1;
  uint64_t v12 = **(void **)(a2 + 64);
  long long v13 = *(llvm::ConstantInt **)(v12 + 1984);
  unint64_t v14 = *(unsigned int *)(v12 + 1992);
  unsigned int v108 = v14 >> 8;
  if (v14 >> 8 > 0x40) {
    operator new[]();
  }
  if (v14 <= 0xFF) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
  }
  unint64_t v107 = v15 & (unint64_t)a3;
  unint64_t v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v107, a3);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  uint64_t v18 = (char *)operator new(8uLL);
  *(void *)uint64_t v18 = v16;
  *a1 = v18;
  uint64_t v19 = **(void **)(a2 + 64);
  uint64_t v20 = a4;
  uint64_t v21 = *(llvm::ConstantInt **)(v19 + 1960);
  unint64_t v22 = *(unsigned int *)(v19 + 1968);
  unsigned int v108 = v22 >> 8;
  if (v22 >> 8 > 0x40) {
    operator new[]();
  }
  if (v22 <= 0xFF) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v22) + 63);
  }
  unint64_t v107 = v23 & v20;
  unint64_t v24 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v107, v17);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  unint64_t v25 = (char *)operator new(0x10uLL);
  *(void *)unint64_t v25 = *(void *)v18;
  *((void *)v25 + 1) = v24;
  uint64_t v26 = v25 + 16;
  int v27 = *a1;
  *a1 = v25;
  a1[2] = v25 + 16;
  if (v27)
  {
    operator delete(v27);
    int v29 = a1[2];
    if (v26 < v29)
    {
      *((void *)v25 + 2) = a5;
      uint64_t v30 = v25 + 24;
      goto LABEL_31;
    }
    uint64_t v31 = *a1;
  }
  else
  {
    *uint64_t v11 = v26;
    uint64_t v31 = v25;
    int v29 = v25 + 16;
  }
  uint64_t v32 = (v26 - v31) >> 3;
  unint64_t v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 61) {
    goto LABEL_131;
  }
  uint64_t v34 = v29 - v31;
  if (v34 >> 2 > v33) {
    unint64_t v33 = v34 >> 2;
  }
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v35)
  {
    if (v35 >> 61) {
      goto LABEL_132;
    }
    unsigned int v36 = (char *)operator new(8 * v35);
  }
  else
  {
    unsigned int v36 = 0;
  }
  __int16 v37 = &v36[8 * v32];
  uint64_t v38 = &v36[8 * v35];
  *(void *)__int16 v37 = a5;
  uint64_t v30 = v37 + 8;
  if (v26 == v31)
  {
    *a1 = v37;
    a1[2] = v38;
    uint64_t v31 = v25 + 16;
    goto LABEL_30;
  }
  unint64_t v39 = (v25 - v31 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = &v36[v26 - v31 - v39 - 8];
  memcpy(v40, &v25[-v39 + 8], v39 + 8);
  *a1 = v40;
  a1[2] = v38;
  if (v31) {
LABEL_30:
  }
    operator delete(v31);
LABEL_31:
  *uint64_t v11 = v30;
  uint64_t v41 = **(void **)(a2 + 64);
  unint64_t v42 = *(llvm::ConstantInt **)(v41 + 1960);
  unint64_t v43 = *(unsigned int *)(v41 + 1968);
  unsigned int v108 = v43 >> 8;
  if (v43 >> 8 > 0x40) {
    operator new[]();
  }
  if (v43 <= 0xFF) {
    LODWORD(v44) = 0;
  }
  else {
    unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v43) + 63);
  }
  unint64_t v107 = v44 & a7;
  unsigned int v46 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v107, v28);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  unint64_t v47 = (unint64_t)a1[2];
  if ((unint64_t)v30 < v47)
  {
    *(void *)uint64_t v30 = v46;
    int v48 = v30 + 8;
    goto LABEL_53;
  }
  uint64_t v49 = *a1;
  uint64_t v50 = (v30 - *a1) >> 3;
  unint64_t v51 = v50 + 1;
  if ((unint64_t)(v50 + 1) >> 61) {
    goto LABEL_131;
  }
  uint64_t v52 = v47 - (void)v49;
  if (v52 >> 2 > v51) {
    unint64_t v51 = v52 >> 2;
  }
  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v53 = v51;
  }
  if (v53)
  {
    if (v53 >> 61) {
      goto LABEL_132;
    }
    uint64_t v54 = (char *)operator new(8 * v53);
  }
  else
  {
    uint64_t v54 = 0;
  }
  unint64_t v55 = &v54[8 * v50];
  __int16 v56 = &v54[8 * v53];
  *(void *)unint64_t v55 = v46;
  int v48 = v55 + 8;
  if (v30 == v49)
  {
    *a1 = v55;
    a1[1] = v48;
    a1[2] = v56;
LABEL_52:
    operator delete(v30);
    goto LABEL_53;
  }
  do
  {
    uint64_t v57 = *((void *)v30 - 1);
    v30 -= 8;
    *((void *)v55 - 1) = v57;
    v55 -= 8;
  }
  while (v30 != v49);
  uint64_t v30 = *a1;
  *a1 = v55;
  a1[1] = v48;
  a1[2] = v56;
  if (v30) {
    goto LABEL_52;
  }
LABEL_53:
  *uint64_t v11 = v48;
  uint64_t v58 = **(void **)(a2 + 64);
  uint64_t v59 = *(llvm::ConstantInt **)(v58 + 1960);
  unsigned int v60 = *(_DWORD *)(v58 + 1968);
  unsigned int v108 = v60 >> 8;
  if (v60 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v107 = 0;
  unsigned int v61 = llvm::ConstantInt::get(v59, (llvm::LLVMContext *)&v107, v45);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  unint64_t v62 = (unint64_t)a1[2];
  if ((unint64_t)v48 < v62)
  {
    *(void *)int v48 = v61;
    uint64_t v63 = (uint64_t)(v48 + 8);
    goto LABEL_73;
  }
  unsigned int v64 = *a1;
  uint64_t v65 = (v48 - *a1) >> 3;
  unint64_t v66 = v65 + 1;
  if ((unint64_t)(v65 + 1) >> 61) {
    goto LABEL_131;
  }
  uint64_t v67 = v62 - (void)v64;
  if (v67 >> 2 > v66) {
    unint64_t v66 = v67 >> 2;
  }
  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v68 = v66;
  }
  if (v68)
  {
    if (v68 >> 61) {
      goto LABEL_132;
    }
    char v69 = (char *)operator new(8 * v68);
  }
  else
  {
    char v69 = 0;
  }
  std::string v70 = &v69[8 * v65];
  std::string v71 = &v69[8 * v68];
  *(void *)std::string v70 = v61;
  uint64_t v63 = (uint64_t)(v70 + 8);
  if (v48 == v64)
  {
    *a1 = v70;
    a1[1] = (char *)v63;
    a1[2] = v71;
LABEL_72:
    operator delete(v48);
    goto LABEL_73;
  }
  do
  {
    uint64_t v72 = *((void *)v48 - 1);
    v48 -= 8;
    *((void *)v70 - 1) = v72;
    v70 -= 8;
  }
  while (v48 != v64);
  int v48 = *a1;
  *a1 = v70;
  a1[1] = (char *)v63;
  a1[2] = v71;
  if (v48) {
    goto LABEL_72;
  }
LABEL_73:
  a1[1] = (char *)v63;
  sub_1CC233E3C(a1, v63, a6, &a6[4 * a7], a7);
  uint64_t v74 = **(void **)(a2 + 64);
  unsigned int v75 = *(llvm::ConstantInt **)(v74 + 1960);
  unsigned int v76 = *(_DWORD *)(v74 + 1968);
  unsigned int v108 = v76 >> 8;
  if (v76 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v107 = 0;
  unsigned int v78 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v107, v73);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  uint64_t v80 = a1[1];
  unint64_t v79 = (unint64_t)a1[2];
  if ((unint64_t)v80 >= v79)
  {
    unint64_t v82 = *a1;
    uint64_t v83 = (v80 - *a1) >> 3;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 61) {
      goto LABEL_131;
    }
    uint64_t v85 = v79 - (void)v82;
    if (v85 >> 2 > v84) {
      unint64_t v84 = v85 >> 2;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      if (v86 >> 61) {
        goto LABEL_132;
      }
      uint64_t v87 = (char *)operator new(8 * v86);
    }
    else
    {
      uint64_t v87 = 0;
    }
    uint64_t v88 = &v87[8 * v83];
    *(void *)uint64_t v88 = v78;
    uint64_t v81 = v88 + 8;
    if (v80 != v82)
    {
      do
      {
        uint64_t v89 = *((void *)v80 - 1);
        v80 -= 8;
        *((void *)v88 - 1) = v89;
        v88 -= 8;
      }
      while (v80 != v82);
      uint64_t v80 = *a1;
    }
    *a1 = v88;
    a1[1] = v81;
    a1[2] = &v87[8 * v86];
    if (v80) {
      operator delete(v80);
    }
  }
  else
  {
    *(void *)uint64_t v80 = v78;
    uint64_t v81 = v80 + 8;
  }
  *uint64_t v11 = v81;
  uint64_t v90 = **(void **)(a2 + 64);
  unsigned int v91 = *(llvm::ConstantInt **)(v90 + 1960);
  unsigned int v92 = *(_DWORD *)(v90 + 1968);
  unsigned int v108 = v92 >> 8;
  if (v92 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v107 = 0;
  uint64_t v93 = llvm::ConstantInt::get(v91, (llvm::LLVMContext *)&v107, v77);
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  unint64_t v95 = a1[1];
  unint64_t v94 = (unint64_t)a1[2];
  if ((unint64_t)v95 < v94)
  {
    *(void *)unint64_t v95 = v93;
    unsigned int v96 = v95 + 8;
    goto LABEL_111;
  }
  v97 = *a1;
  uint64_t v98 = (v95 - *a1) >> 3;
  unint64_t v99 = v98 + 1;
  if ((unint64_t)(v98 + 1) >> 61) {
LABEL_131:
  }
    abort();
  uint64_t v100 = v94 - (void)v97;
  if (v100 >> 2 > v99) {
    unint64_t v99 = v100 >> 2;
  }
  if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v101 = v99;
  }
  if (!v101)
  {
    int v102 = 0;
    goto LABEL_106;
  }
  if (v101 >> 61) {
LABEL_132:
  }
    sub_1CB833614();
  int v102 = (char *)operator new(8 * v101);
LABEL_106:
  unint64_t v103 = &v102[8 * v98];
  *(void *)unint64_t v103 = v93;
  unsigned int v96 = v103 + 8;
  if (v95 != v97)
  {
    do
    {
      uint64_t v104 = *((void *)v95 - 1);
      v95 -= 8;
      *((void *)v103 - 1) = v104;
      v103 -= 8;
    }
    while (v95 != v97);
    unint64_t v95 = *a1;
  }
  *a1 = v103;
  a1[1] = v96;
  a1[2] = &v102[8 * v101];
  if (v95) {
    operator delete(v95);
  }
LABEL_111:
  *uint64_t v11 = v96;
}

llvm::PrintModulePass *llvm::PrintModulePass::PrintModulePass(llvm::PrintModulePass *this)
{
  *(void *)this = llvm::dbgs(this);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

{
  *(void *)this = llvm::dbgs(this);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

uint64_t llvm::PrintModulePass::PrintModulePass(uint64_t a1, uint64_t a2, long long *a3, char a4)
{
  *(void *)a1 = a2;
  uint64_t v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C(v6, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(v6 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(unsigned char *)(a1 + 32) = a4;
  return a1;
}

{
  uint64_t v6;
  long long v7;

  *(void *)a1 = a2;
  uint64_t v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C(v6, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(v6 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(unsigned char *)(a1 + 32) = a4;
  return a1;
}

llvm::PrintFunctionPass *llvm::PrintFunctionPass::PrintFunctionPass(llvm::PrintFunctionPass *this)
{
  *(void *)this = llvm::dbgs(this);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

{
  *(void *)this = llvm::dbgs(this);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void *llvm::PrintFunctionPass::PrintFunctionPass(void *a1, uint64_t a2, long long *a3)
{
  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C(v4, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(v4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C(v4, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(v4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_1CC5C4878()
{
}

void sub_1CC5C4918()
{
}

void sub_1CC5C49B8()
{
}

void sub_1CC5C4A30(void **this)
{
  *this = &unk_1F2617030;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC5C4A90(void **this)
{
  *this = &unk_1F2617030;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC5C4B04()
{
  return "Print Module IR";
}

void sub_1CC5C4B14(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC5C4B20(uint64_t a1, const std::string *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 0;
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  llvm::PrintModulePass::run(a1 + 32, a2, (uint64_t)&v3);
  if (v6 != v5) {
    free(v6);
  }
  if (v4 != v3) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](0, 8);
  sub_1CC5C4BBC(v9);
  sub_1CC5C4C3C((unsigned int *)v7);
  MEMORY[0x1D25D9CD0](v7[0], 8);
  return 0;
}

uint64_t *sub_1CC5C4BBC(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 32 * v2;
    uint64_t v6 = (uint64_t *)(v3 + 8);
    do
    {
      uint64_t v7 = *(v6 - 1);
      if (v7 != -4096 && v7 != -8192) {
        sub_1CBFA4F3C(v6);
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

unsigned int *sub_1CC5C4C3C(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (unsigned int **)(*(void *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t result = *v3;
        *uint64_t v3 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1CC5C4CB8()
{
}

void sub_1CC5C4D30(void **this)
{
  *this = &unk_1F26170D0;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC5C4D90(void **this)
{
  *this = &unk_1F26170D0;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC5C4E04()
{
  return "Print Function IR";
}

void sub_1CC5C4E14(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC5C4E20(uint64_t a1, const std::string **a2)
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  llvm::PrintFunctionPass::run(a2, a1 + 32, (uint64_t)&v3);
  if (v6 != v5) {
    free(v6);
  }
  if (v4 != v3) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  sub_1CBF54128((unsigned int *)v7);
  MEMORY[0x1D25D9CD0](v7[0], 8);
  return 0;
}

void llvm::GenericSSAContext<llvm::Function>::print(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = a2;
  *a2 = &unk_1F2617170;
  a2[1] = a1;
}

{
  a2[3] = a2;
  *a2 = &unk_1F2617170;
  a2[1] = a1;
}

{
  int v2;
  void *v3;

  uint64_t v2 = *(_DWORD *)(a1 + 20);
  a2[3] = a2;
  if ((v2 & 0x10000000) != 0) {
    uint64_t v3 = &unk_1F26171B8;
  }
  else {
    uint64_t v3 = &unk_1F2617200;
  }
  *a2 = v3;
  a2[1] = a1;
}

void sub_1CC5C4F44()
{
}

void *sub_1CC5C4F58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2617170;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC5C4FA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2617170;
  a2[1] = v2;
  return result;
}

void sub_1CC5C4FCC(uint64_t a1, llvm::raw_ostream *a2)
{
}

void sub_1CC5C4FDC()
{
}

void *sub_1CC5C4FF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26171B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC5C5038(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26171B8;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *sub_1CC5C5064(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  uint64_t v2 = (uint64_t ***)*((void *)result + 1);
  if ((*((unsigned char *)v2 + 23) & 0x10) == 0) {
    return result;
  }
  uint64_t v4 = ***v2;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    int v8 = (uint64_t ****)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == v2) {
      goto LABEL_9;
    }
    int v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == v2)
      {
        int v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_9;
      }
    }
  }
  int v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_9:
  uint64_t v12 = (unint64_t *)v8[1];
  unint64_t v15 = *v12;
  uint64_t v13 = v12 + 2;
  size_t v14 = v15;
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 4);
  if (v15 <= *((void *)this + 3) - (void)result)
  {
    if (v14)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v13, v14);
      *((void *)this + 4) += v14;
    }
  }
  else
  {
    return llvm::raw_ostream::write(this, (const char *)v13, v14);
  }
  return result;
}

void sub_1CC5C5154()
{
}

void *sub_1CC5C5168(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2617200;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC5C51B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2617200;
  a2[1] = v2;
  return result;
}

void sub_1CC5C51DC(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const llvm::Function **)(*(void *)(a1 + 8) + 56);
  uint64_t v5 = *((void *)v4 + 5);
  v10[0] = (const llvm::Function *)&unk_1F26160C0;
  v10[1] = 0;
  BOOL v11 = v5 != 0;
  char v12 = 0;
  uint64_t v17 = 0;
  uint64_t v13 = v5;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  unint64_t v15 = 0;
  llvm::ModuleSlotTracker::incorporateFunction(v10, v4);
  int LocalSlot = llvm::SlotTracker::getLocalSlot(v15, *(const llvm::Value **)(a1 + 8));
  unint64_t v7 = LocalSlot;
  if (LocalSlot < 0)
  {
    unint64_t v7 = -(uint64_t)LocalSlot;
    int v8 = a2;
    int v9 = 1;
  }
  else
  {
    int v8 = a2;
    int v9 = 0;
  }
  sub_1CD098D14(v8, v7, 0, 0, v9);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v10);
}

void llvm::InlineAsm::destroyConstant(void **this, llvm::Value *a2)
{
  uint64_t v3 = *(int32x2_t ***)*this;
  uint64_t v4 = *v3;
  int32x2_t v5 = (*v3)[192];
  __int32 v6 = (*v3)[194].i32[0];
  if (v6)
  {
    LODWORD(v7) = sub_1CD5C6484((uint64_t)this) & (v6 - 1);
    int v8 = (llvm::InlineAsm **)(*(void *)&v5 + 8 * v7);
    int v9 = *v8;
    if (*v8 == (llvm::InlineAsm *)this)
    {
LABEL_5:
      llvm::raw_ostream *v8 = (llvm::InlineAsm *)-8192;
      v4[193] = vadd_s32(v4[193], (int32x2_t)0x1FFFFFFFFLL);
      sub_1CD5C599C(this, a2);
      JUMPOUT(0x1D25D9CE0);
    }
    int v10 = 1;
    while (v9 != (llvm::InlineAsm *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      int v9 = *(llvm::InlineAsm **)(*(void *)&v5 + 8 * v7);
      if (v9 == (llvm::InlineAsm *)this) {
        goto LABEL_3;
      }
    }
    int32x2_t v5 = v4[192];
    uint64_t v7 = v4[194].u32[0];
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_3:
  int v8 = (llvm::InlineAsm **)(*(void *)&v5 + 8 * v7);
  goto LABEL_5;
}

uint64_t llvm::InlineAsm::ConstraintInfo::Parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    int v8 = 0;
    int v9 = a2;
    uint64_t v10 = a3;
    do
    {
      int v11 = *v9++;
      if (v11 == 124) {
        ++v8;
      }
      --v10;
    }
    while (v10);
    unint64_t v12 = (v8 + 1);
    *(unsigned char *)(a1 + 40) = v12 > 1;
    uint64_t v13 = (unsigned char *)(a1 + 40);
    if (v12 >= 2)
    {
      sub_1CD5C5754((uint64_t *)(a1 + 48), v12);
      uint64_t v14 = (char **)(*(void *)(a1 + 48) + 8);
      goto LABEL_10;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    uint64_t v13 = (unsigned char *)(a1 + 40);
  }
  uint64_t v14 = (char **)(v13 - 24);
LABEL_10:
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  int v15 = *a2;
  if (v15 == 61)
  {
    uint64_t v17 = a2 + 1;
    int v16 = 1;
    *(_DWORD *)a1 = 1;
    goto LABEL_16;
  }
  if (v15 != 126)
  {
    int v16 = 0;
    uint64_t v17 = a2;
LABEL_18:
    if (v15 == 42)
    {
      *(unsigned char *)(a1 + 13) = 1;
      ++v17;
    }
    goto LABEL_20;
  }
  int v16 = 2;
  *(_DWORD *)a1 = 2;
  uint64_t v17 = a2 + 1;
  if (a3 == 1)
  {
LABEL_16:
    int v15 = *v17;
    goto LABEL_18;
  }
  if (*v17 != 123) {
    return 1;
  }
  int v16 = 2;
LABEL_20:
  uint64_t v18 = &a2[a3];
  if (v17 != &a2[a3])
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = v16;
    while (2)
    {
      uint64_t result = 1;
      switch(*v17)
      {
        case '#':
        case '*':
          return result;
        case '%':
          if (v21 == 2) {
            return result;
          }
          unint64_t v23 = (unsigned char *)(a1 + 12);
          uint64_t v24 = v19;
          uint64_t v25 = 1;
          if (v20) {
            return result;
          }
          goto LABEL_28;
        case '&':
          if (v16 != 1) {
            return result;
          }
          unint64_t v23 = (unsigned char *)(a1 + 4);
          uint64_t v24 = 1;
          uint64_t v25 = v20;
          int v21 = 1;
          if (v19) {
            return result;
          }
LABEL_28:
          *unint64_t v23 = 1;
          ++v17;
          uint64_t v19 = v24;
          uint64_t v20 = v25;
          if (v17 == v18) {
            return result;
          }
          continue;
        default:
          if (v17 == v18) {
            return 0;
          }
          uint64_t v132 = &a2[a3];
          uint64_t v133 = 0;
          break;
      }
      break;
    }
    while (1)
    {
      uint64_t v26 = *v17;
      if (v26 == 123)
      {
        int v27 = (unsigned __int8 *)memchr(v17 + 1, 125, v18 - (v17 + 1));
        if (v27) {
          int v28 = v27;
        }
        else {
          int v28 = v18;
        }
        if (v28 == v18) {
          return 1;
        }
        int v29 = v28 + 1;
        size_t v30 = v28 + 1 - v17;
        if (v30 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_192;
        }
        if (v30 >= 0x17)
        {
          uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17) {
            uint64_t v33 = v30 | 7;
          }
          uint64_t v34 = v33 + 1;
          p_dst = (long long *)operator new(v33 + 1);
          *((void *)&__dst + 1) = v30;
          unint64_t v135 = v34 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v135) = (_BYTE)v28 + 1 - (_BYTE)v17;
          p_dst = &__dst;
          if (v29 == v17) {
            goto LABEL_55;
          }
        }
        memmove(p_dst, v17, v30);
LABEL_55:
        *((unsigned char *)p_dst + v30) = 0;
        unint64_t v35 = (unint64_t)v14[2];
        unint64_t v36 = (unint64_t)v14[1];
        if (v36 >= v35)
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)*v14) >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_192;
          }
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)*v14) >> 3);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x555555555555555) {
            unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v41 = v39;
          }
          unsigned int v140 = v14 + 2;
          if (v41)
          {
            if (v41 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_193;
            }
            unint64_t v42 = (char *)operator new(24 * v41);
          }
          else
          {
            unint64_t v42 = 0;
          }
          unint64_t v55 = &v42[24 * v38];
          *((void *)v55 + 2) = v135;
          *(_OWORD *)unint64_t v55 = __dst;
          unint64_t v135 = 0;
          long long __dst = 0uLL;
          uint64_t v57 = *v14;
          __int16 v56 = v14[1];
          if (v56 == *v14)
          {
            unsigned int v60 = v14[1];
            uint64_t v58 = &v42[24 * v38];
          }
          else
          {
            uint64_t v58 = &v42[24 * v38];
            do
            {
              long long v59 = *(_OWORD *)(v56 - 24);
              *((void *)v58 - 1) = *((void *)v56 - 1);
              *(_OWORD *)(v58 - 24) = v59;
              v58 -= 24;
              *((void *)v56 - 2) = 0;
              *((void *)v56 - 1) = 0;
              *((void *)v56 - 3) = 0;
              v56 -= 24;
            }
            while (v56 != v57);
            unsigned int v60 = *v14;
            __int16 v56 = v14[1];
          }
          __int16 v37 = v55 + 24;
          *uint64_t v14 = v58;
          unsigned int v136 = v60;
          int v137 = v60;
          v14[1] = v55 + 24;
          unsigned int v138 = v56;
          unsigned int v61 = v14[2];
          v14[2] = &v42[24 * v41];
          uint64_t v139 = v61;
          sub_1CBF4EE0C((uint64_t)&v136);
        }
        else
        {
          *(_OWORD *)unint64_t v36 = __dst;
          *(void *)(v36 + 16) = v135;
          unint64_t v135 = 0;
          long long __dst = 0uLL;
          __int16 v37 = (char *)(v36 + 24);
        }
        v14[1] = v37;
        if (SHIBYTE(v135) < 0) {
          operator delete((void *)__dst);
        }
        goto LABEL_187;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v26 + 60) & 0x400) != 0) {
        break;
      }
      if (v26 == 64)
      {
        size_t v62 = v17[1] - 48;
        if (v62 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_192;
        }
        uint64_t v63 = (char *)(v17 + 2);
        if (v62 >= 0x17)
        {
          uint64_t v101 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17) {
            uint64_t v101 = v62 | 7;
          }
          uint64_t v102 = v101 + 1;
          unsigned int v64 = (long long *)operator new(v101 + 1);
          *((void *)&__dst + 1) = v62;
          unint64_t v135 = v102 | 0x8000000000000000;
          *(void *)&long long __dst = v64;
        }
        else
        {
          HIBYTE(v135) = v62;
          unsigned int v64 = &__dst;
          if (!v62) {
            goto LABEL_149;
          }
        }
        memmove(v64, v63, v62);
LABEL_149:
        *((unsigned char *)v64 + v62) = 0;
        unint64_t v103 = (unint64_t)v14[2];
        unint64_t v104 = (unint64_t)v14[1];
        if (v104 >= v103)
        {
          unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - (void)*v14) >> 3);
          unint64_t v107 = v106 + 1;
          if (v106 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_192;
          }
          unint64_t v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (void)*v14) >> 3);
          if (2 * v108 > v107) {
            unint64_t v107 = 2 * v108;
          }
          if (v108 >= 0x555555555555555) {
            unint64_t v109 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v109 = v107;
          }
          unsigned int v140 = v14 + 2;
          if (v109)
          {
            if (v109 > 0xAAAAAAAAAAAAAAALL) {
LABEL_193:
            }
              sub_1CB833614();
            int v110 = (char *)operator new(24 * v109);
          }
          else
          {
            int v110 = 0;
          }
          uint64_t v123 = &v110[24 * v106];
          *((void *)v123 + 2) = v135;
          *(_OWORD *)uint64_t v123 = __dst;
          unint64_t v135 = 0;
          long long __dst = 0uLL;
          unsigned int v125 = *v14;
          unsigned int v124 = v14[1];
          if (v124 == *v14)
          {
            int v128 = v14[1];
            unsigned int v126 = &v110[24 * v106];
          }
          else
          {
            unsigned int v126 = &v110[24 * v106];
            do
            {
              long long v127 = *(_OWORD *)(v124 - 24);
              *((void *)v126 - 1) = *((void *)v124 - 1);
              *(_OWORD *)(v126 - 24) = v127;
              v126 -= 24;
              *((void *)v124 - 2) = 0;
              *((void *)v124 - 1) = 0;
              *((void *)v124 - 3) = 0;
              v124 -= 24;
            }
            while (v124 != v125);
            int v128 = *v14;
            unsigned int v124 = v14[1];
          }
          int v105 = v123 + 24;
          *uint64_t v14 = v126;
          unsigned int v136 = v128;
          int v137 = v128;
          v14[1] = v123 + 24;
          unsigned int v138 = v124;
          uint64_t v131 = v14[2];
          v14[2] = &v110[24 * v109];
          uint64_t v139 = v131;
          sub_1CBF4EE0C((uint64_t)&v136);
        }
        else
        {
          *(_OWORD *)unint64_t v104 = __dst;
          *(void *)(v104 + 16) = v135;
          unint64_t v135 = 0;
          long long __dst = 0uLL;
          int v105 = (char *)(v104 + 24);
        }
        v14[1] = v105;
        if (SHIBYTE(v135) < 0) {
          operator delete((void *)__dst);
        }
        int v29 = (unsigned __int8 *)&v63[v62];
        goto LABEL_187;
      }
      if (v26 == 94)
      {
        uint64_t v65 = *(unsigned __int16 *)(v17 + 1);
        unint64_t v66 = (unint64_t)v14[2];
        unint64_t v67 = (unint64_t)v14[1];
        if (v67 >= v66)
        {
          unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (void)*v14) >> 3);
          unint64_t v92 = v91 + 1;
          if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_192;
          }
          unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v14) >> 3);
          if (2 * v93 > v92) {
            unint64_t v92 = 2 * v93;
          }
          if (v93 >= 0x555555555555555) {
            unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v94 = v92;
          }
          unsigned int v140 = v14 + 2;
          if (v94)
          {
            if (v94 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_193;
            }
            unint64_t v95 = (char *)operator new(24 * v94);
          }
          else
          {
            unint64_t v95 = 0;
          }
          int v111 = &v95[24 * v91];
          *(void *)int v111 = v65;
          v111[23] = 2;
          unsigned int v113 = *v14;
          uint64_t v112 = v14[1];
          if (v112 == *v14)
          {
            unsigned int v116 = v14[1];
            int v114 = &v95[24 * v91];
          }
          else
          {
            int v114 = &v95[24 * v91];
            do
            {
              long long v115 = *(_OWORD *)(v112 - 24);
              *((void *)v114 - 1) = *((void *)v112 - 1);
              *(_OWORD *)(v114 - 24) = v115;
              v114 -= 24;
              *((void *)v112 - 2) = 0;
              *((void *)v112 - 1) = 0;
              *((void *)v112 - 3) = 0;
              v112 -= 24;
            }
            while (v112 != v113);
            unsigned int v116 = *v14;
            uint64_t v112 = v14[1];
          }
          unint64_t v68 = v111 + 24;
          *uint64_t v14 = v114;
          unsigned int v136 = v116;
          int v137 = v116;
          v14[1] = v111 + 24;
          unsigned int v138 = v112;
          int v129 = v14[2];
          v14[2] = &v95[24 * v94];
          uint64_t v139 = v129;
          sub_1CBF4EE0C((uint64_t)&v136);
        }
        else
        {
          *(void *)unint64_t v67 = v65;
          *(unsigned char *)(v67 + 23) = 2;
          unint64_t v68 = (char *)(v67 + 24);
        }
        v14[1] = v68;
        int v29 = v17 + 3;
      }
      else
      {
        if (v26 == 124)
        {
          uint64_t v32 = *(void *)(a1 + 48);
          uint64_t v133 = (v133 + 1);
          uint64_t v14 = (char **)(v32 + 32 * v133 + 8);
        }
        else
        {
          unint64_t v69 = (unint64_t)v14[2];
          unint64_t v70 = (unint64_t)v14[1];
          if (v70 >= v69)
          {
            unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (void)*v14) >> 3);
            unint64_t v97 = v96 + 1;
            if (v96 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_192;
            }
            unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (void)*v14) >> 3);
            if (2 * v98 > v97) {
              unint64_t v97 = 2 * v98;
            }
            if (v98 >= 0x555555555555555) {
              unint64_t v99 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v99 = v97;
            }
            unsigned int v140 = v14 + 2;
            if (v99)
            {
              if (v99 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_193;
              }
              uint64_t v100 = (char *)operator new(24 * v99);
            }
            else
            {
              uint64_t v100 = 0;
            }
            uint64_t v117 = &v100[24 * v96];
            *(void *)uint64_t v117 = v26;
            v117[23] = 1;
            uint64_t v119 = *v14;
            unsigned int v118 = v14[1];
            if (v118 == *v14)
            {
              unsigned int v122 = v14[1];
              unsigned int v120 = &v100[24 * v96];
            }
            else
            {
              unsigned int v120 = &v100[24 * v96];
              do
              {
                long long v121 = *(_OWORD *)(v118 - 24);
                *((void *)v120 - 1) = *((void *)v118 - 1);
                *(_OWORD *)(v120 - 24) = v121;
                v120 -= 24;
                *((void *)v118 - 2) = 0;
                *((void *)v118 - 1) = 0;
                *((void *)v118 - 3) = 0;
                v118 -= 24;
              }
              while (v118 != v119);
              unsigned int v122 = *v14;
              unsigned int v118 = v14[1];
            }
            std::string v71 = v117 + 24;
            *uint64_t v14 = v120;
            unsigned int v136 = v122;
            int v137 = v122;
            v14[1] = v117 + 24;
            unsigned int v138 = v118;
            uint64_t v130 = v14[2];
            v14[2] = &v100[24 * v99];
            uint64_t v139 = v130;
            sub_1CBF4EE0C((uint64_t)&v136);
          }
          else
          {
            *(void *)unint64_t v70 = v26;
            *(unsigned char *)(v70 + 23) = 1;
            std::string v71 = (char *)(v70 + 24);
          }
          v14[1] = v71;
        }
        int v29 = v17 + 1;
      }
LABEL_187:
      uint64_t result = 0;
      uint64_t v17 = v29;
      if (v29 == v18) {
        return result;
      }
    }
    if (v17 == v18)
    {
      int v29 = v18;
    }
    else
    {
      int v29 = v17;
      while ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v29 + 60) & 0x400) != 0)
      {
        if (++v29 == v18)
        {
          int v29 = v132;
          break;
        }
      }
    }
    unint64_t v43 = v29 - v17;
    if ((unint64_t)(v29 - v17) > 0x7FFFFFFFFFFFFFF7) {
LABEL_192:
    }
      abort();
    if (v43 >= 0x17)
    {
      uint64_t v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v45 = v43 | 7;
      }
      uint64_t v46 = v45 + 1;
      unint64_t v44 = (long long *)operator new(v45 + 1);
      *((void *)&__dst + 1) = v29 - v17;
      unint64_t v135 = v46 | 0x8000000000000000;
      *(void *)&long long __dst = v44;
    }
    else
    {
      HIBYTE(v135) = (_BYTE)v29 - (_BYTE)v17;
      unint64_t v44 = &__dst;
      if (v29 == v17) {
        goto LABEL_75;
      }
    }
    memmove(v44, v17, v29 - v17);
LABEL_75:
    *((unsigned char *)v44 + v43) = 0;
    unint64_t v47 = (unint64_t)v14[2];
    unint64_t v48 = (unint64_t)v14[1];
    if (v48 >= v47)
    {
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)*v14) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_192;
      }
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)*v14) >> 3);
      if (2 * v52 > v51) {
        unint64_t v51 = 2 * v52;
      }
      if (v52 >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v51;
      }
      unsigned int v140 = v14 + 2;
      if (v53)
      {
        if (v53 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_193;
        }
        uint64_t v54 = (char *)operator new(24 * v53);
      }
      else
      {
        uint64_t v54 = 0;
      }
      uint64_t v72 = &v54[24 * v50];
      *((void *)v72 + 2) = v135;
      *(_OWORD *)uint64_t v72 = __dst;
      unint64_t v135 = 0;
      long long __dst = 0uLL;
      uint64_t v74 = *v14;
      uint64_t v73 = v14[1];
      if (v73 == *v14)
      {
        uint64_t v77 = v14[1];
        unsigned int v75 = &v54[24 * v50];
      }
      else
      {
        unsigned int v75 = &v54[24 * v50];
        do
        {
          long long v76 = *(_OWORD *)(v73 - 24);
          *((void *)v75 - 1) = *((void *)v73 - 1);
          *(_OWORD *)(v75 - 24) = v76;
          v75 -= 24;
          *((void *)v73 - 2) = 0;
          *((void *)v73 - 1) = 0;
          *((void *)v73 - 3) = 0;
          v73 -= 24;
        }
        while (v73 != v74);
        uint64_t v77 = *v14;
        uint64_t v73 = v14[1];
      }
      uint64_t v49 = v72 + 24;
      *uint64_t v14 = v75;
      unsigned int v136 = v77;
      int v137 = v77;
      v14[1] = v72 + 24;
      unsigned int v138 = v73;
      unsigned int v78 = v14[2];
      v14[2] = &v54[24 * v53];
      uint64_t v139 = v78;
      sub_1CBF4EE0C((uint64_t)&v136);
    }
    else
    {
      *(_OWORD *)unint64_t v48 = __dst;
      *(void *)(v48 + 16) = v135;
      unint64_t v135 = 0;
      long long __dst = 0uLL;
      uint64_t v49 = (char *)(v48 + 24);
    }
    v14[1] = v49;
    if (SHIBYTE(v135) < 0) {
      operator delete((void *)__dst);
    }
    unint64_t v79 = v14[1];
    uint64_t v80 = v79 - 24;
    if (*(v79 - 1) < 0) {
      uint64_t v80 = *(const char **)v80;
    }
    unsigned int v81 = atoi(v80);
    uint64_t v82 = *a4;
    unint64_t v83 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 4);
    if (v83 <= v81 || *(_DWORD *)(v82 + 80 * v81) != 1 || *(_DWORD *)a1) {
      return 1;
    }
    if (*v13)
    {
      uint64_t v85 = (uint64_t *)(v82 + 80 * v81 + 48);
      uint64_t v84 = *v85;
      if (v133 >= (unint64_t)((v85[1] - *v85) >> 5)) {
        return 1;
      }
      unint64_t v86 = (_DWORD *)(v84 + 32 * v133);
      if (*v86 != -1) {
        return 1;
      }
    }
    else
    {
      uint64_t v87 = v82 + 80 * v81;
      uint64_t v89 = *(int *)(v87 + 8);
      unint64_t v86 = (_DWORD *)(v87 + 8);
      uint64_t v88 = v89;
      if (v89 != -1 && v83 != v88) {
        return 1;
      }
    }
    *unint64_t v86 = v83;
    goto LABEL_187;
  }
  return 1;
}

BOOL llvm::InlineAsm::Verify(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 8) > 0xFFu) {
    return 0;
  }
  llvm::InlineAsm::ParseConstraints(a2, a3, (uint64_t *)&__p);
  uint64_t v7 = (unsigned __int8 *)__p;
  int v8 = (char *)v20;
  if (__p == v20 && a3 != 0)
  {
LABEL_36:
    BOOL v3 = 0;
    goto LABEL_37;
  }
  if (__p == v20)
  {
    int v12 = 0;
    goto LABEL_33;
  }
  int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = (unsigned __int8 *)__p;
  do
  {
    int v15 = *(_DWORD *)v14;
    if (!*(_DWORD *)v14)
    {
      if (v11) {
        goto LABEL_36;
      }
      goto LABEL_19;
    }
    if (v15 == 2)
    {
      ++v11;
    }
    else
    {
      if (v15 != 1) {
        goto LABEL_22;
      }
      BOOL v3 = 0;
      if (v12 != v10 || v11) {
        goto LABEL_37;
      }
      int v11 = v14[13];
      if (v14[13])
      {
        ++v10;
LABEL_19:
        int v11 = 0;
        ++v12;
        goto LABEL_22;
      }
      ++v13;
      int v12 = v10;
    }
LABEL_22:
    v14 += 80;
  }
  while (v14 != v20);
  if (v13 == 1)
  {
    if (*(unsigned char *)(**(void **)(a1 + 16) + 8) == 16) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (!v13)
  {
LABEL_33:
    if (*(unsigned char *)(**(void **)(a1 + 16) + 8) != 7) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  uint64_t v16 = **(void **)(a1 + 16);
  if (v16) {
    BOOL v17 = *(unsigned char *)(v16 + 8) == 16;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17 || *(_DWORD *)(v16 + 12) != v13) {
    goto LABEL_36;
  }
LABEL_34:
  BOOL v3 = *(_DWORD *)(a1 + 12) - 1 == v12;
LABEL_37:
  if (__p)
  {
    uint64_t v18 = __p;
    if (v20 != __p)
    {
      do
      {
        int v21 = (void **)(v8 - 32);
        sub_1CC1E4230(&v21);
        int v21 = (void **)(v8 - 64);
        sub_1CB8338B8(&v21);
        v8 -= 80;
      }
      while (v8 != (char *)v7);
      uint64_t v18 = __p;
    }
    uint64_t v20 = v7;
    operator delete(v18);
  }
  return v3;
}

uint64_t llvm::InlineAsm::containArchDependentInlineAsm(llvm::InlineAsm *this, llvm::Module *a2)
{
  BOOL v3 = (char *)this + 88;
  char v4 = *((unsigned char *)this + 111);
  if (v4 >= 0) {
    int32x2_t v5 = (char *)this + 88;
  }
  else {
    int32x2_t v5 = (char *)*((void *)this + 11);
  }
  unint64_t v6 = *((void *)v3 + 1);
  if (v4 >= 0) {
    unint64_t v7 = v4 & 0x7F;
  }
  else {
    unint64_t v7 = v6;
  }
  if (!sub_1CC5C6258((uint64_t)v5, v7)) {
    return 1;
  }
  int v8 = (char *)this + 24;
  uint64_t v9 = *((void *)this + 4);
  if ((char *)v9 == v8) {
    return 0;
  }
  do
  {
    uint64_t v10 = v9 - 56;
    if (!v9) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 + 72;
    for (uint64_t i = *(void *)(v10 + 80); i != v11; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v13 = i - 24;
      if (!i) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v13 + 40;
      for (uint64_t j = *(void *)(v13 + 48); j != v14; uint64_t j = *(void *)(j + 8))
      {
        if (j && *(unsigned char *)(j - 8) == 84)
        {
          uint64_t v16 = *(void *)(j - 24 - 32 * (*(_DWORD *)(j - 4) & 0x7FFFFFF));
          if (v16 && *(unsigned char *)(v16 + 16) == 24)
          {
            uint64_t v20 = *(void *)(v16 + 24);
            uint64_t v18 = v16 + 24;
            uint64_t v19 = v20;
            char v21 = *(unsigned char *)(v18 + 23);
            uint64_t v22 = v21 >= 0 ? v18 : v19;
            uint64_t v23 = *(void *)(v18 + 8);
            unint64_t v24 = v21 >= 0 ? v21 & 0x7F : v23;
            if (!sub_1CC5C6258(v22, v24)) {
              return 1;
            }
          }
        }
      }
    }
    uint64_t result = 0;
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while ((char *)v9 != v8);
  return result;
}

uint64_t sub_1CC5C6258(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = a1;
  unint64_t v17 = a2;
  uint64_t v2 = 1;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  sub_1CD5A69D0(&v16, " \t\n\v\f\r", 6);
  if (v3)
  {
    while (1)
    {
      char v18 = 10;
      unint64_t v4 = llvm::StringRef::find(&v16, &v18, 1uLL, 0);
      if (v4 == -1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        uint64_t v7 = v16;
        unint64_t v8 = v17;
      }
      else
      {
        uint64_t v7 = v16;
        unint64_t v8 = v17 >= v4 ? v4 : v17;
        uint64_t v9 = v17 >= v4 + 1 ? v4 + 1 : v17;
        uint64_t v5 = v16 + v9;
        unint64_t v6 = v17 - v9;
      }
      uint64_t v14 = v7;
      unint64_t v15 = v8;
      uint64_t v16 = v5;
      unint64_t v17 = v6;
      sub_1CD5A69D0(&v14, " \t\n\v\f\r", 6);
      if (v10)
      {
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v14, " \t\n\v\f\r", 6, 0);
        if ((v15 <= first_not_of || *(unsigned char *)(v14 + first_not_of) != 46)
          && (v15 < 0x2C
           || memcmp((const void *)(v14 + v15 - 44), "marker for objc_retainAutoreleaseReturnValue", 0x2CuLL)))
        {
          break;
        }
      }
      sub_1CD5A69D0(&v16, " \t\n\v\f\r", 6);
      if (!v12) {
        return 1;
      }
    }
    return 0;
  }
  return v2;
}

void sub_1CC5C6398(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      unint64_t v4 = (void **)(v3 - 32);
      sub_1CC1E4230(&v4);
      unint64_t v4 = (void **)(v3 - 64);
      sub_1CB8338B8(&v4);
      v3 -= 80;
    }
    while (v3 != v2);
  }
  a1[1] = v2;
}

uint64_t sub_1CC5C6408(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[80 * v6];
  uint64_t v9 = sub_1CD5C66FC((uint64_t)&v7[80 * v2], a2);
  uint64_t v10 = v9 + 80;
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v12) {
      return v10;
    }
    goto LABEL_17;
  }
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = v9 + v13;
    unint64_t v15 = &v12[v13];
    uint64_t v16 = *(void *)&v12[v13 - 80];
    *(void *)(v14 - 74) = *(void *)&v12[v13 - 74];
    *(void *)(v14 - 56) = 0;
    *(void *)(v14 - 48) = 0;
    *(void *)(v14 - 64) = 0;
    *(void *)(v14 - 80) = v16;
    *(_OWORD *)(v14 - 64) = *(_OWORD *)&v12[v13 - 64];
    *(void *)(v14 - 48) = *(void *)&v12[v13 - 48];
    *((void *)v15 - 7) = 0;
    *((void *)v15 - 6) = 0;
    *((void *)v15 - 8) = 0;
    LOBYTE(v16) = v12[v13 - 40];
    *(void *)(v14 - 24) = 0;
    *(void *)(v14 - 16) = 0;
    *(void *)(v14 - 32) = 0;
    *(unsigned char *)(v14 - 40) = v16;
    *(_OWORD *)(v14 - 32) = *(_OWORD *)&v12[v13 - 32];
    *(void *)(v14 - 16) = *(void *)&v12[v13 - 16];
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 4) = 0;
    *(_DWORD *)(v14 - 8) = *(_DWORD *)&v12[v13 - 8];
    v13 -= 80;
  }
  while (&v12[v13] != v11);
  uint64_t v12 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  *a1 = v9 + v13;
  a1[1] = v10;
  for (a1[2] = (uint64_t)v8; v17 != v12; v17 -= 80)
  {
    uint64_t v19 = (void **)(v17 - 32);
    sub_1CC1E4230(&v19);
    uint64_t v19 = (void **)(v17 - 64);
    sub_1CB8338B8(&v19);
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v10;
}

void *sub_1CC5C65D0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      abort();
    }
    uint64_t v7 = result;
    unint64_t v8 = (char *)operator new(32 * a4);
    void *v7 = v8;
    v7[1] = v8;
    void v7[2] = &v8[32 * a4];
    return sub_1CD5C6788(v7, a2, a3);
  }
  return result;
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, llvm::Instruction *a6)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    uint64_t v9 = *((void *)a6 + 5);
    uint64_t v10 = (uint64_t *)((char *)a6 + 24);
    *((void *)this + 5) = v9;
    *(_WORD *)(v9 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v12 = *(void *)(v9 + 56);
      if (v12)
      {
        uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13) {
          llvm::ValueSymbolTable::reinsertValue(v13, this);
        }
      }
    }
    uint64_t v11 = *v10;
    *((void *)this + 3) = *v10;
    *((void *)this + 4) = v10;
    *(void *)(v11 + 8) = v7;
    *uint64_t v10 = (uint64_t)v7;
  }
  return this;
}

{
  char *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    uint64_t v9 = *((void *)a6 + 5);
    uint64_t v10 = (uint64_t *)((char *)a6 + 24);
    *((void *)this + 5) = v9;
    *(_WORD *)(v9 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v12 = *(void *)(v9 + 56);
      if (v12)
      {
        uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13) {
          llvm::ValueSymbolTable::reinsertValue(v13, this);
        }
      }
    }
    uint64_t v11 = *v10;
    *((void *)this + 3) = *v10;
    *((void *)this + 4) = v10;
    *(void *)(v11 + 8) = v7;
    *uint64_t v10 = (uint64_t)v7;
  }
  return this;
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, llvm::BasicBlock *a6)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  unint64_t v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v12 = *((void *)a6 + 7);
    if (v12)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
  }
  uint64_t v10 = *((void *)a6 + 5);
  uint64_t v9 = (void *)((char *)a6 + 40);
  *((void *)this + 3) = v10;
  *((void *)this + 4) = v9;
  *(void *)(v10 + 8) = v8;
  *uint64_t v9 = v8;
  return this;
}

{
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  unint64_t v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v12 = *((void *)a6 + 7);
    if (v12)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
  }
  uint64_t v10 = *((void *)a6 + 5);
  uint64_t v9 = (void *)((char *)a6 + 40);
  *((void *)this + 3) = v10;
  *((void *)this + 4) = v9;
  *(void *)(v10 + 8) = v8;
  *uint64_t v9 = v8;
  return this;
}

void llvm::Instruction::~Instruction(llvm::UndefValue **this, llvm::Type *a2)
{
  if ((*((unsigned char *)this + 23) & 8) != 0)
  {
    unint64_t v8 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v8, v9);
  }
  unint64_t v3 = this[6];
  if (v3)
  {
    int v4 = *(unsigned __int8 *)v3;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = this[6];
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v4 - 3) < 0xFFFFFFFE)
      {
        if (v4 == 3) {
          *((void *)v3 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v6 = (unint64_t)v7 + 8;
    }
    else
    {
      if ((*((unsigned char *)v3 + 1) & 0x7F) != 2 && !*((_DWORD *)v3 + 3)) {
        goto LABEL_4;
      }
      uint64_t v5 = *((void *)v3 + 2);
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v6) {
        goto LABEL_4;
      }
    }
    uint64_t v10 = (char *)(this + 6);
    sub_1CC5FA668(v6 + 16, &v10);
  }
LABEL_4:

  llvm::Value::~Value((llvm::Value *)this, a2);
}

{
  llvm::UndefValue *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  llvm::UndefValue *v7;
  llvm::UndefValue *v8;
  llvm::Value *v9;
  char *v10;
  uint64_t vars8;

  if ((*((unsigned char *)this + 23) & 8) != 0)
  {
    unint64_t v8 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v8, v9);
  }
  unint64_t v3 = this[6];
  if (v3)
  {
    int v4 = *(unsigned __int8 *)v3;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = this[6];
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v4 - 3) < 0xFFFFFFFE)
      {
        if (v4 == 3) {
          *((void *)v3 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v6 = (unint64_t)v7 + 8;
    }
    else
    {
      if ((*((unsigned char *)v3 + 1) & 0x7F) != 2 && !*((_DWORD *)v3 + 3)) {
        goto LABEL_4;
      }
      uint64_t v5 = *((void *)v3 + 2);
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v6) {
        goto LABEL_4;
      }
    }
    uint64_t v10 = (char *)(this + 6);
    sub_1CC5FA668(v6 + 16, &v10);
  }
LABEL_4:

  llvm::Value::~Value((llvm::Value *)this, a2);
}

uint64_t llvm::Instruction::setParent(uint64_t this, llvm::BasicBlock *a2)
{
  *(void *)(this + 40) = a2;
  return this;
}

uint64_t llvm::Instruction::getModule(llvm::Instruction *this)
{
  return *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
}

uint64_t llvm::Instruction::getFunction(llvm::Instruction *this)
{
  return *(void *)(*((void *)this + 5) + 56);
}

void llvm::Instruction::removeFromParent(llvm::Instruction *this)
{
}

void llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
}

void llvm::Instruction::insertBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  uint64_t v4 = *((void *)a2 + 5);
  *((void *)this + 5) = v4;
  *(_WORD *)(v4 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v8 = *(void *)(v4 + 56);
    if (v8)
    {
      uint64_t v9 = *(llvm::ValueSymbolTable **)(v8 + 104);
      if (v9) {
        llvm::ValueSymbolTable::reinsertValue(v9, this);
      }
    }
  }
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v5 = (void *)((char *)a2 + 24);
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v5;
  uint64_t v7 = (char *)this + 24;
  *(void *)(v6 + 8) = v7;
  *uint64_t v5 = v7;
}

char *llvm::Instruction::insertAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  return sub_1CC5C6C08((void *)(*((void *)a2 + 5) + 40), (uint64_t)a2 + 24, this);
}

char *sub_1CC5C6C08(void *a1, uint64_t a2, llvm::Value *a3)
{
  if ((void *)*a1 == a1) {
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList();
  }
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  *((void *)a3 + 5) = a1 - 5;
  *((_WORD *)a1 - 11) &= ~0x8000u;
  if ((*((unsigned char *)a3 + 23) & 0x10) != 0)
  {
    uint64_t v8 = a1[2];
    if (v8)
    {
      uint64_t v9 = *(llvm::ValueSymbolTable **)(v8 + 104);
      if (v9) {
        llvm::ValueSymbolTable::reinsertValue(v9, a3);
      }
    }
  }
  uint64_t v5 = *v4;
  *((void *)a3 + 3) = *v4;
  *((void *)a3 + 4) = v4;
  uint64_t v6 = (char *)a3 + 24;
  *(void *)(v5 + 8) = v6;
  uint64_t *v4 = (uint64_t)v6;
  return v6;
}

void llvm::Instruction::moveBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  unint64_t v2 = (llvm::Instruction *)((char *)a2 + 24);
  unint64_t v3 = (llvm::Instruction *)((char *)this + 24);
  uint64_t v4 = (llvm::Instruction *)*((void *)this + 4);
  if (a2 != this && v4 != (llvm::Instruction *)((char *)this + 24))
  {
    if (v4 == v2) {
      return;
    }
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *((void *)a2 + 5);
    *(_WORD *)(v6 + 18) &= ~0x8000u;
    if (v6 != v5)
    {
      uint64_t v7 = *(uint64_t **)(v6 + 56);
      if (v7) {
        uint64_t v7 = (uint64_t *)v7[13];
      }
      uint64_t v8 = *(uint64_t **)(v5 + 56);
      if (v8) {
        uint64_t v8 = (uint64_t *)v8[13];
      }
      if (v7 == v8)
      {
        if (v3 != v4)
        {
          uint64_t v9 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            uint64_t v10 = (char *)v9 - 24;
            if (!v9) {
              uint64_t v10 = 0;
            }
            *((void *)v10 + 5) = v6;
            uint64_t v9 = (llvm::Instruction *)*((void *)v9 + 1);
          }
          while (v9 != v4);
        }
      }
      else
      {
        unint64_t v36 = (llvm::ValueSymbolTable *)v7;
        unint64_t v38 = v8;
        if (v3 != v4)
        {
          uint64_t v20 = (char *)this + 24;
          uint64_t v32 = (llvm::Instruction *)((char *)a2 + 24);
          uint64_t v34 = (llvm::Instruction *)((char *)this + 24);
          uint64_t v28 = v6;
          size_t v30 = v4;
          do
          {
            if (v20) {
              char v21 = v20 - 24;
            }
            else {
              char v21 = 0;
            }
            int v22 = *((_DWORD *)v21 + 5) & 0x10000000;
            if (v38 && v22)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v21);
              llvm::ValueSymbolTable::removeValueName(v38, ValueName);
            }
            *((void *)v21 + 5) = v28;
            if (v36 && v22) {
              llvm::ValueSymbolTable::reinsertValue(v36, (llvm::Value *)v21);
            }
            uint64_t v20 = (char *)*((void *)v20 + 1);
            uint64_t v4 = v30;
            unint64_t v2 = v32;
            unint64_t v3 = v34;
          }
          while (v20 != (char *)v30);
        }
      }
    }
    goto LABEL_15;
  }
  if (a2 != this && v4 != v2)
  {
    uint64_t v14 = *((void *)this + 5);
    uint64_t v15 = *((void *)a2 + 5);
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if (v15 != v14)
    {
      uint64_t v16 = *(uint64_t **)(v15 + 56);
      if (v16) {
        uint64_t v16 = (uint64_t *)v16[13];
      }
      unint64_t v17 = *(uint64_t **)(v14 + 56);
      if (v17) {
        unint64_t v17 = (uint64_t *)v17[13];
      }
      if (v16 == v17)
      {
        if (v3 != v4)
        {
          char v18 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            uint64_t v19 = (char *)v18 - 24;
            if (!v18) {
              uint64_t v19 = 0;
            }
            *((void *)v19 + 5) = v15;
            char v18 = (llvm::Instruction *)*((void *)v18 + 1);
          }
          while (v18 != v4);
        }
      }
      else
      {
        __int16 v37 = (llvm::ValueSymbolTable *)v16;
        unint64_t v39 = v17;
        if (v3 != v4)
        {
          unint64_t v24 = (char *)this + 24;
          uint64_t v29 = v15;
          uint64_t v31 = v4;
          uint64_t v33 = (llvm::Instruction *)((char *)a2 + 24);
          unint64_t v35 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            if (v24) {
              uint64_t v25 = v24 - 24;
            }
            else {
              uint64_t v25 = 0;
            }
            int v26 = *((_DWORD *)v25 + 5) & 0x10000000;
            if (v39 && v26)
            {
              int v27 = (size_t *)llvm::Value::getValueName((llvm::Value *)v25);
              llvm::ValueSymbolTable::removeValueName(v39, v27);
            }
            *((void *)v25 + 5) = v29;
            if (v37 && v26) {
              llvm::ValueSymbolTable::reinsertValue(v37, (llvm::Value *)v25);
            }
            unint64_t v24 = (char *)*((void *)v24 + 1);
            uint64_t v4 = v31;
            unint64_t v2 = v33;
            unint64_t v3 = v35;
          }
          while (v24 != (char *)v31);
        }
      }
    }
    if (v4 != v3)
    {
LABEL_15:
      uint64_t v11 = *(void *)v4;
      uint64_t v12 = *(void *)v3;
      *(void *)(v12 + 8) = v4;
      *(void *)uint64_t v4 = v12;
      uint64_t v13 = *(void *)v2;
      *(void *)(v11 + 8) = v2;
      *(void *)unint64_t v3 = v13;
      *(void *)(v13 + 8) = v3;
      *(void *)unint64_t v2 = v11;
    }
  }
}

void llvm::Instruction::moveBefore(void *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a1 + 3;
  uint64_t v4 = (uint64_t *)a1[4];
  if (a1 + 3 != a3 && v4 != a3)
  {
    uint64_t v6 = a1[5];
    *(_WORD *)(a2 + 18) &= ~0x8000u;
    if (v6 != a2)
    {
      uint64_t v7 = *(uint64_t **)(a2 + 56);
      if (v7) {
        uint64_t v7 = (uint64_t *)v7[13];
      }
      uint64_t v8 = *(uint64_t **)(v6 + 56);
      if (v8) {
        uint64_t v8 = (uint64_t *)v8[13];
      }
      if (v7 == v8)
      {
        if (v3 != v4)
        {
          uint64_t v9 = a1 + 3;
          do
          {
            uint64_t v10 = v9 - 3;
            if (!v9) {
              uint64_t v10 = 0;
            }
            v10[5] = a2;
            uint64_t v9 = (uint64_t *)v9[1];
          }
          while (v9 != v4);
        }
      }
      else
      {
        int v22 = (llvm::ValueSymbolTable *)v7;
        uint64_t v23 = v8;
        if (v3 != v4)
        {
          uint64_t v14 = a1 + 3;
          char v21 = a1 + 3;
          char v18 = v4;
          uint64_t v19 = a3;
          do
          {
            if (v14) {
              uint64_t v15 = v14 - 3;
            }
            else {
              uint64_t v15 = 0;
            }
            int v16 = *((_DWORD *)v15 + 5) & 0x10000000;
            if (v23 && v16)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v15);
              llvm::ValueSymbolTable::removeValueName(v23, ValueName);
            }
            v15[5] = a2;
            if (v22 && v16) {
              llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)v15);
            }
            uint64_t v14 = (uint64_t *)v14[1];
            uint64_t v4 = v18;
            a3 = v19;
            unint64_t v3 = v21;
          }
          while (v14 != v18);
        }
      }
    }
    if (v4 != v3)
    {
      uint64_t v11 = *v4;
      uint64_t v12 = *v3;
      *(void *)(v12 + 8) = v4;
      uint64_t *v4 = v12;
      uint64_t v13 = *a3;
      *(void *)(v11 + 8) = a3;
      *unint64_t v3 = v13;
      *(void *)(v13 + 8) = v3;
      *a3 = v11;
    }
  }
}

void llvm::Instruction::moveAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  unint64_t v2 = (llvm::Instruction *)*((void *)a2 + 4);
  unint64_t v3 = (llvm::Instruction *)((char *)this + 24);
  uint64_t v4 = (llvm::Instruction *)*((void *)this + 4);
  if (v2 != (llvm::Instruction *)((char *)this + 24) && v4 != v2)
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v7 = *((void *)a2 + 5);
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if (v7 != v6)
    {
      uint64_t v8 = *(uint64_t **)(v7 + 56);
      if (v8) {
        uint64_t v8 = (uint64_t *)v8[13];
      }
      uint64_t v9 = *(uint64_t **)(v6 + 56);
      if (v9) {
        uint64_t v9 = (uint64_t *)v9[13];
      }
      if (v8 == v9)
      {
        if (v3 != v4)
        {
          uint64_t v10 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            uint64_t v11 = (char *)v10 - 24;
            if (!v10) {
              uint64_t v11 = 0;
            }
            *((void *)v11 + 5) = v7;
            uint64_t v10 = (llvm::Instruction *)*((void *)v10 + 1);
          }
          while (v10 != v4);
        }
      }
      else
      {
        uint64_t v23 = (llvm::ValueSymbolTable *)v8;
        unint64_t v24 = v9;
        if (v3 != v4)
        {
          uint64_t v15 = (char *)this + 24;
          char v21 = (llvm::Instruction *)((char *)this + 24);
          uint64_t v22 = v7;
          uint64_t v19 = v4;
          uint64_t v20 = v2;
          do
          {
            if (v15) {
              int v16 = v15 - 24;
            }
            else {
              int v16 = 0;
            }
            int v17 = *((_DWORD *)v16 + 5) & 0x10000000;
            if (v24 && v17)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v16);
              llvm::ValueSymbolTable::removeValueName(v24, ValueName);
            }
            *((void *)v16 + 5) = v22;
            if (v23 && v17) {
              llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)v16);
            }
            uint64_t v15 = (char *)*((void *)v15 + 1);
            uint64_t v4 = v19;
            unint64_t v2 = v20;
            unint64_t v3 = v21;
          }
          while (v15 != (char *)v19);
        }
      }
    }
    if (v4 != v3)
    {
      uint64_t v12 = *(void *)v4;
      uint64_t v13 = *(void *)v3;
      *(void *)(v13 + 8) = v4;
      *(void *)uint64_t v4 = v13;
      uint64_t v14 = *(void *)v2;
      *(void *)(v12 + 8) = v2;
      *(void *)unint64_t v3 = v14;
      *(void *)(v14 + 8) = v3;
      *(void *)unint64_t v2 = v12;
    }
  }
}

BOOL llvm::Instruction::comesBefore(llvm::Instruction *this, const llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)this + 5);
  int v3 = *(__int16 *)(v2 + 18);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(v2 + 48);
    if (v5 != v2 + 40)
    {
      int v6 = 0;
      do
      {
        uint64_t v7 = v5 - 24;
        if (!v5) {
          uint64_t v7 = 0;
        }
        *(_DWORD *)(v7 + 56) = v6++;
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v2 + 40);
    }
    *(_WORD *)(v2 + 18) = v3 | 0x8000;
  }
  return *((_DWORD *)this + 14) < *((_DWORD *)a2 + 14);
}

uint64_t llvm::Instruction::isOnlyUserOfAnyOperand(llvm::Instruction *this)
{
  int v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    int v3 = (char *)*((void *)this - 1);
    uint64_t v2 = v1 & 0x7FFFFFF;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    int v3 = (char *)this - 32 * v2;
    if (!v2) {
      return 0;
    }
  }
  uint64_t v4 = &v3[32 * v2];
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)v3 + 8);
    if (v5) {
      break;
    }
LABEL_11:
    v3 += 32;
    if (v3 == v4) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6)
  {
    while (*(void *)(v6 + 24) == *(void *)(v5 + 24))
    {
      uint64_t v5 = *(void *)(v5 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        return 1;
      }
    }
    goto LABEL_11;
  }
  return 1;
}

uint64_t llvm::Instruction::setHasNoUnsignedWrap(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoSignedWrap(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFB | v2;
  return this;
}

uint64_t llvm::Instruction::setIsExact(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::hasNoUnsignedWrap(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::hasNoSignedWrap(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 2) & 1;
}

BOOL llvm::Instruction::hasPoisonGeneratingFlags(llvm::Instruction *this)
{
  if (this && (unsigned int v2 = *((unsigned __int8 *)this + 16), v2 > 0x1B)) {
    unsigned int v3 = v2 - 28;
  }
  else {
    unsigned int v3 = *((unsigned __int16 *)this + 9);
  }
  if (v3 <= 0x22)
  {
    if (((1 << v3) & 0x202A000) != 0)
    {
      unsigned int v8 = *((unsigned __int8 *)this + 17);
      if ((v8 & 2) != 0) {
        return 1;
      }
      else {
        return (v8 >> 2) & 1;
      }
    }
    if (((1 << v3) & 0xC180000) != 0) {
      return (*((unsigned __int8 *)this + 17) >> 1) & 1;
    }
    if (v3 == 34) {
      return *((unsigned __int8 *)this + 17) > 1u;
    }
  }
  BOOL v4 = sub_1CB845E74((uint64_t)this);
  if (v4)
  {
    unsigned int v7 = *((unsigned __int8 *)this + 17);
    if ((v7 & 4) != 0) {
      int v5 = 1;
    }
    else {
      int v5 = (v7 >> 3) & 1;
    }
  }
  return v4 & v5;
}

BOOL llvm::Instruction::dropPoisonGeneratingFlags(llvm::Instruction *this)
{
  unsigned int v2 = *((unsigned __int8 *)this + 16) - 41;
  if (v2 <= 0x15 && ((0x2070D5u >> v2) & 1) != 0) {
    *((unsigned char *)this + 17) &= byte_1CFB1AD8C[(char)v2];
  }
  BOOL result = sub_1CB845E74((uint64_t)this);
  if (result) {
    *((unsigned char *)this + 17) &= 0xF3u;
  }
  return result;
}

uint64_t llvm::Instruction::setHasNoNaNs(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFB | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoInfs(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 8;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xF7 | v2;
  return this;
}

void llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  llvm::Instruction::dropUnknownNonDebugMetadata((uint64_t)a1, a2, a3);
  int v4 = *((unsigned __int8 *)a1 + 16);
  if ((v4 - 33) <= 0x33 && ((1 << (v4 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v6 = a1 + 8;
    if (a1[8])
    {
      unint64_t v7 = 0;
      v24[0] = 0;
      v24[1] = 0;
      uint64_t v23 = v24;
      long long v22 = xmmword_1CFAC7B50;
      while (1)
      {
        if (v4 == 84) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = v4 == 39
        }
             ? llvm::CallBase::getNumSubclassExtraOperandsDynamic((llvm::CallBase *)a1)
             : 2;
        int v9 = *((_DWORD *)a1 + 5);
        if (v9 < 0 && (uint64_t v21 = v9 & 0x7FFFFFF, (a1[-4 * v21 - 1] & 0xFFFFFFFF0) != 0))
        {
          uint64_t v11 = -v21;
          int v10 = *((_DWORD *)&a1[-4 * v21 - 1] - 1) - *(_DWORD *)((char *)a1 - a1[-4 * v21 - 1] + -32 * v21);
        }
        else
        {
          int v10 = 0;
          uint64_t v11 = -(uint64_t)(v9 & 0x7FFFFFF);
        }
        uint64_t v12 = *(uint64_t **)*a1;
        if (v7 >= ((-32 - 32 * v8 + 32 * (unint64_t)-v10 - 32 * v11) >> 5)) {
          break;
        }
        uint64_t v13 = *v6;
        if (*v6 && (v7 + 2) < *(_DWORD *)(v13 + 8)) {
          uint64_t v14 = *(void *)(v13 + 8 * (v7 + 2) + 40);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v25 = v14;
        uint64_t v15 = llvm::AttributeSet::removeAttributes(&v25, v12, (uint64_t)&v22);
        if (v14 == v15) {
          uint64_t v16 = *v6;
        }
        else {
          uint64_t v16 = llvm::AttributeList::setAttributesAtIndex(a1 + 8, v12, (int)v7 + 1, v15);
        }
        a1[8] = v16;
        LOBYTE(v4) = *((unsigned char *)a1 + 16);
        ++v7;
      }
      uint64_t v17 = *v6;
      if (*v6 && *(_DWORD *)(v17 + 8) >= 2u) {
        uint64_t v18 = *(void *)(v17 + 48);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v25 = v18;
      uint64_t v19 = llvm::AttributeSet::removeAttributes(&v25, v12, (uint64_t)&v22);
      if (v18 == v19) {
        uint64_t v20 = *v6;
      }
      else {
        uint64_t v20 = llvm::AttributeList::setAttributesAtIndex(v6, v12, 0, v19);
      }
      *uint64_t v6 = v20;
      sub_1CC1E4850((uint64_t)&v23, v24[0]);
    }
  }
}

uint64_t llvm::Instruction::isExact(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::setFast(uint64_t this, int a2)
{
  if (a2) {
    char v2 = -2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = v2 & 0xFE | *(unsigned char *)(this + 17) & 1;
  return this;
}

uint64_t llvm::Instruction::setHasAllowReassoc(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoSignedZeros(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 16;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xEF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasAllowReciprocal(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 32;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xDF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasAllowContract(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 64;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xBF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasApproxFunc(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 0x80;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = v2 & 0x80 | *(unsigned char *)(this + 17) & 0x7F;
  return this;
}

uint64_t llvm::Instruction::setFastMathFlags(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) |= 2 * a2;
  return result;
}

BOOL llvm::Instruction::isFast(llvm::Instruction *this)
{
  return *((unsigned __int8 *)this + 17) > 0xFDu;
}

uint64_t llvm::Instruction::hasAllowReassoc(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::hasNoNaNs(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 2) & 1;
}

uint64_t llvm::Instruction::hasNoInfs(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 3) & 1;
}

uint64_t llvm::Instruction::hasNoSignedZeros(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 4) & 1;
}

uint64_t llvm::Instruction::hasAllowReciprocal(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 5) & 1;
}

uint64_t llvm::Instruction::hasAllowContract(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 6) & 1;
}

uint64_t llvm::Instruction::hasApproxFunc(llvm::Instruction *this)
{
  return *((unsigned __int8 *)this + 17) >> 7;
}

uint64_t llvm::Instruction::getFastMathFlags(llvm::Instruction *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 17) >> 1;
  if (v1 == 127) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v1;
  }
}

uint64_t llvm::Instruction::copyFastMathFlags(uint64_t this, const llvm::Instruction *a2)
{
  *(unsigned char *)(this + 17) = *((unsigned char *)a2 + 17) & 0xFE | *(unsigned char *)(this + 17) & 1;
  return this;
}

BOOL llvm::Instruction::copyIRFlags(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    HIDWORD(v6) = *(unsigned __int8 *)(a1 + 16) - 41;
    LODWORD(v6) = HIDWORD(v6);
    unsigned int v5 = v6 >> 1;
    BOOL v7 = v5 > 6;
    int v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      unsigned int v14 = *(unsigned __int8 *)(a2 + 16);
      if (v14 >= 0x1C)
      {
        HIDWORD(v16) = v14 - 41;
        LODWORD(v16) = v14 - 41;
        unsigned int v15 = v16 >> 1;
        if (v15 >= 3 && v15 != 6) {
          goto LABEL_7;
        }
LABEL_24:
        int v18 = *(unsigned char *)(a1 + 17) & 0xFB | (4 * ((*(unsigned __int8 *)(a2 + 17) >> 2) & 1));
        *(unsigned char *)(a1 + 17) = v18;
        *(unsigned char *)(a1 + 17) = v18 & 0xFD | *(unsigned char *)(a2 + 17) & 2;
        goto LABEL_7;
      }
      if (v14 == 5)
      {
        HIDWORD(v24) = *(unsigned __int16 *)(a2 + 18) - 13;
        LODWORD(v24) = HIDWORD(v24);
        unsigned int v23 = v24 >> 1;
        BOOL v7 = v23 > 6;
        int v25 = (1 << v23) & 0x47;
        if (!v7 && v25 != 0) {
          goto LABEL_24;
        }
      }
    }
  }
LABEL_7:
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (v10 < 0x1C)
  {
    if (v10 != 5) {
      goto LABEL_13;
    }
    unsigned int v19 = *(unsigned __int16 *)(a2 + 18);
    BOOL v7 = v19 > 0x1B;
    int v20 = (1 << v19) & 0xC180000;
    if (v7 || v20 == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v7 = v10 > 0x37;
    uint64_t v11 = (1 << v10) & 0xC1800000000000;
    if (v7 || v11 == 0) {
      goto LABEL_13;
    }
  }
  int v22 = *(unsigned __int8 *)(a1 + 16);
  if ((v22 - 54) < 2 || (v22 - 47) <= 1) {
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 17) & 0xFD | *(unsigned char *)(a2 + 17) & 2;
  }
LABEL_13:
  BOOL result = sub_1CB845E74(a2);
  if (result)
  {
    BOOL result = sub_1CB845E74(a1);
    if (result) {
      *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
    }
  }
  if (*(unsigned char *)(a2 + 16) == 62 && a1 && *(unsigned char *)(a1 + 16) == 62) {
    *(unsigned char *)(a1 + 17) |= *(unsigned char *)(a2 + 17) & 2;
  }
  return result;
}

BOOL llvm::Instruction::andIRFlags(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 != 5)
    {
LABEL_18:
      if (v4 != 5) {
        goto LABEL_9;
      }
      unsigned int v11 = *(unsigned __int16 *)(a2 + 18);
LABEL_20:
      if (v11 > 0x1B || ((1 << v11) & 0xC180000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
    unsigned int v11 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v16) = v11 - 13;
    LODWORD(v16) = v11 - 13;
    unsigned int v15 = v16 >> 1;
    BOOL v7 = v15 > 6;
    int v17 = (1 << v15) & 0x47;
    if (v7 || v17 == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    HIDWORD(v6) = v4 - 41;
    LODWORD(v6) = v4 - 41;
    unsigned int v5 = v6 >> 1;
    BOOL v7 = v5 > 6;
    int v8 = (1 << v5) & 0x47;
    if (v7 || v8 == 0) {
      goto LABEL_7;
    }
  }
  HIDWORD(v20) = *(unsigned __int8 *)(a1 + 16) - 41;
  LODWORD(v20) = HIDWORD(v20);
  unsigned int v19 = v20 >> 1;
  if (v19 < 3 || v19 == 6)
  {
    char v22 = *(unsigned char *)(a1 + 17);
    if ((v22 & 4) != 0) {
      char v23 = *(unsigned char *)(a2 + 17) & 4;
    }
    else {
      char v23 = 0;
    }
    char v24 = v23 | v22 & 0xFB;
    *(unsigned char *)(a1 + 17) = v24;
    if ((v22 & 2) != 0) {
      char v25 = *(unsigned char *)(a2 + 17) & 2;
    }
    else {
      char v25 = 0;
    }
    *(unsigned char *)(a1 + 17) = v25 | v24 & 0xFD;
    unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v4 < 0x1C) {
    goto LABEL_18;
  }
LABEL_7:
  if (v4 > 0x37 || ((1 << v4) & 0xC1800000000000) == 0) {
    goto LABEL_9;
  }
LABEL_24:
  int v13 = *(unsigned __int8 *)(a1 + 16);
  if ((v13 - 54) < 2 || (v13 - 47) <= 1)
  {
    if ((*(unsigned char *)(a1 + 17) & 2) != 0) {
      char v14 = *(unsigned char *)(a2 + 17) & 2;
    }
    else {
      char v14 = 0;
    }
    *(unsigned char *)(a1 + 17) = v14 | *(unsigned char *)(a1 + 17) & 0xFD;
  }
LABEL_9:
  BOOL result = sub_1CB845E74(a2);
  if (result)
  {
    BOOL result = sub_1CB845E74(a1);
    if (result) {
      *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 17) & *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
    }
  }
  if (*(unsigned char *)(a2 + 16) == 62 && a1 && *(unsigned char *)(a1 + 16) == 62) {
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 17) & 0xFD | *(unsigned char *)(a1 + 17) & *(unsigned char *)(a2 + 17) & 2;
  }
  return result;
}

const char *llvm::Instruction::getOpcodeName(llvm::Instruction *this)
{
  if ((this - 1) > 0x42) {
    return "<Invalid operator> ";
  }
  else {
    return (&off_1E6849540)[(int)this - 1];
  }
}

uint64_t llvm::Instruction::isIdenticalTo(llvm::Instruction *this, const llvm::Instruction *a2)
{
  uint64_t result = llvm::Instruction::isIdenticalToWhenDefined(this, a2);
  if (result) {
    return (*((unsigned __int8 *)a2 + 17) ^ *((unsigned __int8 *)this + 17)) < 2;
  }
  return result;
}

uint64_t llvm::Instruction::isIdenticalToWhenDefined(llvm::Instruction *this, const llvm::Instruction *a2)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 != *((unsigned __int8 *)a2 + 16)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)a2 + 5);
  if (((v4 ^ v3) & 0x7FFFFFF) != 0 || *(void *)this != *(void *)a2) {
    return 0;
  }
  if (((v4 | v3) & 0x7FFFFFF) == 0) {
    goto LABEL_12;
  }
  if ((v3 & 0x40000000) != 0)
  {
    unint64_t v6 = (void *)*((void *)this - 1);
    uint64_t v5 = v3 & 0x7FFFFFF;
    if ((v4 & 0x40000000) == 0)
    {
LABEL_7:
      BOOL v7 = (void *)((char *)a2 - 32 * (v4 & 0x7FFFFFF));
      if (v5) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = v3 & 0x7FFFFFF;
    unint64_t v6 = (void *)((char *)this - 32 * v5);
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_7;
    }
  }
  BOOL v7 = (void *)*((void *)a2 - 1);
  if (v5)
  {
LABEL_8:
    uint64_t v8 = 32 * v5;
    while (*v6 == *v7)
    {
      v6 += 4;
      v7 += 4;
      v8 -= 32;
      if (!v8) {
        goto LABEL_11;
      }
    }
    return 0;
  }
LABEL_11:
  if (v2 != 83)
  {
LABEL_12:
    return sub_1CC5C7D24((uint64_t)this, (uint64_t)a2, 0);
  }
  if ((v3 & 0x40000000) != 0) {
    unsigned int v10 = (char *)*((void *)this - 1);
  }
  else {
    unsigned int v10 = (char *)this - 32 * v5;
  }
  unsigned int v11 = &v10[32 * *((unsigned int *)this + 15)];
  if ((v4 & 0x40000000) != 0) {
    uint64_t v12 = (char *)*((void *)a2 - 1);
  }
  else {
    uint64_t v12 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
  }
  return memcmp(v11, &v12[32 * *((unsigned int *)a2 + 15)], 8 * v5) == 0;
}

uint64_t sub_1CC5C7D24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 59)
  {
    if (*(void *)(a1 + 64) == *(void *)(a2 + 64))
    {
      if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0x3F) != 0) {
        return a3;
      }
      else {
        return 1;
      }
    }
    return 0;
  }
  if (a1 && v3 == 60)
  {
    int v5 = *(unsigned __int16 *)(a1 + 18);
    int v6 = *(unsigned __int16 *)(a2 + 18);
    if ((v5 ^ v6)) {
      return 0;
    }
    __int16 v7 = v6 ^ v5;
    unsigned int v8 = (v7 & 0x7E) != 0 ? a3 : 1;
    if ((v7 & 0x380) != 0 || v8 == 0) {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (a1 && v3 == 61)
  {
    int v10 = *(unsigned __int16 *)(a1 + 18);
    int v11 = *(unsigned __int16 *)(a2 + 18);
    if ((v10 ^ v11)) {
      return 0;
    }
    uint64_t v4 = 0;
    __int16 v22 = v11 ^ v10;
    if ((v22 & 0x7E) != 0) {
      int v23 = a3;
    }
    else {
      int v23 = 1;
    }
    if ((v22 & 0x380) == 0 && v23) {
      return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
    }
    return v4;
  }
  if (a1 && (v3 - 83) >= 0xFFFFFFFE) {
    return ((*(unsigned __int16 *)(a2 + 18) ^ *(unsigned __int16 *)(a1 + 18)) & 0x3F) == 0;
  }
  if (a1 && v3 == 84)
  {
    unsigned __int16 v13 = *(_WORD *)(a1 + 18);
    unsigned __int16 v14 = *(_WORD *)(a2 + 18);
    if ((v13 & 3u) - 1 < 2 != (v14 & 3u) - 1 < 2
      || ((v14 ^ v13) & 0xFFC) != 0
      || *(void *)(a1 + 64) != *(void *)(a2 + 64))
    {
      return 0;
    }
    int v15 = *(_DWORD *)(a1 + 20);
    if (v15 < 0) {
      uint64_t v16 = *(void *)(a1 - 32 * (v15 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v16) = 0;
    }
    int v17 = *(_DWORD *)(a2 + 20);
    if (v17 < 0) {
      uint64_t v18 = *(void *)(a2 - 32 * (v17 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v18) = 0;
    }
    if (v16 != v18) {
      return 0;
    }
    if (v15 < 0)
    {
      uint64_t v44 = a1 - 32 * (v15 & 0x7FFFFFF);
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v20 = v44 - 8;
      uint64_t v19 = v20 - v45;
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      if ((v17 & 0x80000000) == 0)
      {
LABEL_37:
        uint64_t v21 = 0;
        goto LABEL_38;
      }
    }
    uint64_t v21 = a2 - 32 * (v17 & 0x7FFFFFF) - 8 - *(void *)(a2 - 32 * (v17 & 0x7FFFFFF) - 8);
LABEL_38:
    if (v19 != v20)
    {
      while (*(void *)v19 == *(void *)v21
           && *(_DWORD *)(v19 + 8) == *(_DWORD *)(v21 + 8)
           && *(_DWORD *)(v19 + 12) == *(_DWORD *)(v21 + 12))
      {
        v19 += 16;
        v21 += 16;
        uint64_t v4 = 1;
        if (v19 == v20) {
          return v4;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 33)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0xFFC) != 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
    int v25 = *(_DWORD *)(a1 + 20);
    if (v25 < 0) {
      uint64_t v26 = *(void *)(a1 - 32 * (v25 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v26) = 0;
    }
    int v27 = *(_DWORD *)(a2 + 20);
    if (v27 < 0) {
      uint64_t v28 = *(void *)(a2 - 32 * (v27 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v28) = 0;
    }
    if (v26 != v28) {
      return 0;
    }
    if (v25 < 0)
    {
      uint64_t v46 = a1 - 32 * (v25 & 0x7FFFFFF);
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v30 = v46 - 8;
      uint64_t v29 = v30 - v47;
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      if ((v27 & 0x80000000) == 0)
      {
LABEL_65:
        uint64_t v31 = 0;
        goto LABEL_66;
      }
    }
    uint64_t v31 = a2 - 32 * (v27 & 0x7FFFFFF) - 8 - *(void *)(a2 - 32 * (v27 & 0x7FFFFFF) - 8);
LABEL_66:
    if (v29 != v30)
    {
      while (*(void *)v29 == *(void *)v31
           && *(_DWORD *)(v29 + 8) == *(_DWORD *)(v31 + 8)
           && *(_DWORD *)(v29 + 12) == *(_DWORD *)(v31 + 12))
      {
        v29 += 16;
        v31 += 16;
        uint64_t v4 = 1;
        if (v29 == v30) {
          return v4;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 39)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0xFFC) != 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
    int v32 = *(_DWORD *)(a1 + 20);
    if (v32 < 0) {
      uint64_t v33 = *(void *)(a1 - 32 * (v32 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v33) = 0;
    }
    int v34 = *(_DWORD *)(a2 + 20);
    if (v34 < 0) {
      uint64_t v35 = *(void *)(a2 - 32 * (v34 & 0x7FFFFFF) - 8) >> 4;
    }
    else {
      LODWORD(v35) = 0;
    }
    if (v33 != v35) {
      return 0;
    }
    if (v32 < 0)
    {
      uint64_t v48 = a1 - 32 * (v32 & 0x7FFFFFF);
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v37 = v48 - 8;
      uint64_t v36 = v37 - v49;
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_83:
        uint64_t v38 = 0;
        goto LABEL_84;
      }
    }
    uint64_t v38 = a2 - 32 * (v34 & 0x7FFFFFF) - 8 - *(void *)(a2 - 32 * (v34 & 0x7FFFFFF) - 8);
LABEL_84:
    if (v36 != v37)
    {
      while (*(void *)v36 == *(void *)v38
           && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v38 + 8)
           && *(_DWORD *)(v36 + 12) == *(_DWORD *)(v38 + 12))
      {
        v36 += 16;
        v38 += 16;
        uint64_t v4 = 1;
        if (v36 == v37) {
          return v4;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 93 || a1 && v3 == 92)
  {
LABEL_90:
    uint64_t v39 = *(unsigned int *)(a1 + 72);
    if (v39 != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
    return memcmp(*(const void **)(a1 + 64), *(const void **)(a2 + 64), 4 * v39) == 0;
  }
  if (a1 && v3 == 63)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 7) != 0) {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (a1 && v3 == 64)
  {
    __int16 v40 = *(_WORD *)(a1 + 18);
    __int16 v41 = *(_WORD *)(a2 + 18);
    if (((v40 ^ v41) & 1) != 0
      || ((v40 ^ v41) & 2) != 0
      || ((v41 ^ v40) & 0xFC) != 0)
    {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (!a1 || v3 != 65)
  {
    if (!a1 || v3 != 91)
    {
      uint64_t v4 = 1;
      if (a1 && v3 == 62) {
        return *(void *)(a1 + 64) == *(void *)(a2 + 64);
      }
      return v4;
    }
    goto LABEL_90;
  }
  __int16 v42 = *(_WORD *)(a1 + 18);
  __int16 v43 = *(_WORD *)(a2 + 18);
  if (((v43 ^ v42) & 0xF0) != 0) {
    return 0;
  }
  uint64_t v4 = 0;
  if (((v42 & 1) == 0) != (v43 & 1) && ((v43 ^ v42) & 0xE) == 0) {
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  return v4;
}

uint64_t llvm::Instruction::isSameOperationAs(llvm::Instruction *this, const llvm::Instruction *a2, char a3)
{
  if (*((unsigned __int8 *)this + 16) != *((unsigned __int8 *)a2 + 16)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)a2 + 5);
  if (((v4 ^ v3) & 0x7FFFFFF) != 0) {
    return 0;
  }
  uint64_t v5 = *(void *)this;
  if ((a3 & 2) != 0)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
      uint64_t v5 = **(void **)(v5 + 16);
    }
    uint64_t v6 = *(void *)a2;
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
      uint64_t v6 = **(void **)(v6 + 16);
    }
  }
  else
  {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v7 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    uint64_t v8 = 0;
    int v9 = (char *)this - 32 * v7;
    uint64_t v10 = 32 * v7;
    do
    {
      int v11 = v9;
      if ((a3 & 2) != 0)
      {
        if ((v3 & 0x40000000) != 0) {
          int v11 = (char *)*((void *)this - 1);
        }
        uint64_t v13 = **(void **)&v11[v8];
        if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
          uint64_t v13 = **(void **)(v13 + 16);
        }
        int v17 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
        if ((v4 & 0x40000000) != 0) {
          int v17 = (char *)*((void *)a2 - 1);
        }
        uint64_t v15 = **(void **)&v17[v8];
        if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12) {
          goto LABEL_15;
        }
        unsigned __int16 v14 = *(uint64_t **)(v15 + 16);
      }
      else
      {
        if ((v3 & 0x40000000) != 0) {
          int v11 = (char *)*((void *)this - 1);
        }
        uint64_t v12 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
        if ((v4 & 0x40000000) != 0) {
          uint64_t v12 = (char *)*((void *)a2 - 1);
        }
        uint64_t v13 = **(void **)&v11[v8];
        unsigned __int16 v14 = *(uint64_t **)&v12[v8];
      }
      uint64_t v15 = *v14;
LABEL_15:
      if (v13 != v15) {
        return 0;
      }
      v8 += 32;
    }
    while (v10 != v8);
  }
  return sub_1CC5C7D24((uint64_t)this, (uint64_t)a2, a3 & 1);
}

uint64_t llvm::Instruction::isUsedOutsideOfBlock(llvm::Instruction *this, const llvm::BasicBlock *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3 && *(unsigned char *)(v3 + 16) == 83)
    {
      int v4 = *(_DWORD *)(v3 + 20);
      uint64_t v5 = (v4 & 0x40000000) != 0 ? *(void *)(v3 - 8) : v3 - 32 * (v4 & 0x7FFFFFF);
      uint64_t v6 = *(const llvm::BasicBlock **)(v5
                                      + 32 * *(unsigned int *)(v3 + 60)
                                      + 8 * ((unint64_t)(v2 - v5) >> 5));
    }
    else
    {
      uint64_t v6 = *(const llvm::BasicBlock **)(v3 + 40);
    }
    if (v6 != a2) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::Instruction::mayReadFromMemory(llvm::Instruction *this)
{
  uint64_t result = 0;
  uint64_t v3 = *((unsigned __int8 *)this + 16) - 33;
  if (v3 <= 0x37)
  {
    if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x808001C8000010) == 0)
      {
        if (v3 == 28) {
          return (*((_WORD *)this + 9) & 0x301) != 0;
        }
        return result;
      }
      return 1;
    }
    uint64_t v4 = *((void *)this + 8);
    if (!v4 || (*(unsigned char *)(v4 + 20) & 4) == 0 && (*(unsigned char *)(v4 + 17) & 0x10) == 0)
    {
      __int32 v6 = 7;
      if (sub_1CC5CB59C((uint64_t)this, &v6, 1uLL))
      {
        uint64_t v5 = *((void *)this - 4);
        if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)this + 9) || *(_DWORD *)(v5 + 36) != 7) {
          return 1;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0) {
        return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) ^ 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::Instruction::mayWriteToMemory(llvm::Instruction *this)
{
  uint64_t result = 0;
  uint64_t v3 = *((unsigned __int8 *)this + 16) - 33;
  if (v3 > 0x37) {
    return result;
  }
  if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v4 = *((void *)this + 8);
    if (!v4 || (*(unsigned char *)(v4 + 17) & 0x30) == 0)
    {
      int v5 = *((_DWORD *)this + 5);
      if (v5 < 0)
      {
        __int32 v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
        uint64_t v9 = *((void *)v6 - 1);
        uint64_t v7 = v6 - 8;
        uint64_t v8 = v9;
        if (v9)
        {
          uint64_t v10 = -v8;
          do
          {
            unsigned int v11 = *(_DWORD *)(*(void *)&v7[v10] + 8);
            BOOL v12 = v11 > 7;
            int v13 = (1 << v11) & 0x83;
            if (v12 || v13 == 0) {
              return 1;
            }
            v10 += 16;
          }
          while (v10);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0) {
        return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) ^ 1;
      }
    }
    return 0;
  }
  if (v3 == 27) {
    return (*((_WORD *)this + 9) & 0x301) != 0;
  }
  if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x808001D0000010) != 0) {
    return 1;
  }
  return result;
}

BOOL llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 60 || v1 == 61) {
    return (*((_WORD *)this + 9) & 0x380) != 0;
  }
  else {
    return (v1 - 63) <= 2;
  }
}

uint64_t llvm::Instruction::hasAtomicLoad(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 16) - 60 < 6) & (0x31u >> (*((unsigned char *)this + 16) - 60));
}

uint64_t llvm::Instruction::isVolatile(llvm::Instruction *this)
{
  uint64_t result = 0;
  switch(*((unsigned char *)this + 16))
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      return *((_WORD *)this + 9) & 1;
    case '>':
    case '?':
      return result;
    default:
      if (*((unsigned char *)this + 16) != 84) {
        return result;
      }
      uint64_t v3 = *((void *)this - 4);
      if (!v3
        || *(unsigned char *)(v3 + 16)
        || *(void *)(v3 + 24) != *((void *)this + 9)
        || (*(unsigned char *)(v3 + 33) & 0x20) == 0)
      {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v4 = *(_DWORD *)(v3 + 36) - 188;
      if (v4 > 0xB) {
        return result;
      }
      if (((1 << v4) & 0xB40) == 0)
      {
        if (v4)
        {
          if (v4 != 1) {
            return result;
          }
          uint64_t v8 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
          uint64_t v9 = *(unsigned int *)(v8 + 32);
          if (v9 > 0x40)
          {
            int v10 = 0;
            int64_t v11 = (unint64_t)(v9 + 63) >> 6;
            do
            {
              BOOL v12 = v11-- < 1;
              if (v12) {
                break;
              }
              unint64_t v13 = *(void *)(*(void *)(v8 + 24) + 8 * v11);
              v10 += __clz(v13);
            }
            while (!v13);
LABEL_35:
            int v22 = v9 | 0xFFFFFFC0;
            if ((v9 & 0x3F) == 0) {
              int v22 = 0;
            }
            return v10 + v22 == v9 - 1;
          }
        }
        else
        {
          uint64_t v8 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
          uint64_t v9 = *(unsigned int *)(v8 + 32);
          if (v9 > 0x40)
          {
            int v10 = 0;
            int64_t v20 = (unint64_t)(v9 + 63) >> 6;
            do
            {
              BOOL v12 = v20-- < 1;
              if (v12) {
                break;
              }
              unint64_t v21 = *(void *)(*(void *)(v8 + 24) + 8 * v20);
              v10 += __clz(v21);
            }
            while (!v21);
            goto LABEL_35;
          }
        }
        return *(void *)(v8 + 24) == 1;
      }
      uint64_t v5 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
      uint64_t v6 = *(unsigned int *)(v5 + 32);
      if (v6 > 0x40)
      {
        int v14 = 0;
        int64_t v15 = (unint64_t)(v6 + 63) >> 6;
        do
        {
          BOOL v12 = v15-- < 1;
          if (v12) {
            break;
          }
          unint64_t v16 = *(void *)(*(void *)(v5 + 24) + 8 * v15);
          v14 += __clz(v16);
        }
        while (!v16);
        int v17 = v6 | 0xFFFFFFC0;
        if ((v6 & 0x3F) == 0) {
          int v17 = 0;
        }
        BOOL v7 = v14 + v17 == v6;
      }
      else
      {
        BOOL v7 = *(void *)(v5 + 24) == 0;
      }
      int v18 = v7;
      return v18 ^ 1u;
  }
}

uint64_t llvm::Instruction::mayThrow(llvm::Instruction *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 84)
  {
    uint64_t v4 = *((void *)this + 8);
    if (v4 && (*(unsigned char *)(v4 + 16) & 0x20) != 0) {
      return 0;
    }
    else {
      return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 37) ^ 1;
    }
  }
  else if (this && v1 == 36 || this && v1 == 38)
  {
    return (*((_WORD *)this + 9) & 1) == 0;
  }
  else
  {
    return v1 == 34;
  }
}

uint64_t llvm::Instruction::mayHaveSideEffects(llvm::Instruction *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t v3 = (v2 - 33);
  if (v3 > 0x37)
  {
LABEL_5:
    if (v2 <= 83)
    {
      if (v2 == 34 || (v2 == 36 || v2 == 38) && (*((_WORD *)this + 9) & 1) == 0) {
        return 1;
      }
    }
    else if (v2 == 84)
    {
      uint64_t v4 = *((void *)this + 8);
      if ((!v4 || (*(unsigned char *)(v4 + 16) & 0x20) == 0)
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 37))
      {
        return 1;
      }
    }
    return llvm::Instruction::willReturn(this) ^ 1;
  }
  if (((1 << (v2 - 33)) & 0x808001D0000010) == 0)
  {
    if (((1 << (v2 - 33)) & 0x8000000000041) != 0)
    {
      uint64_t v6 = *((void *)this + 8);
      if (v6 && (*(unsigned char *)(v6 + 17) & 0x30) != 0) {
        goto LABEL_22;
      }
      int v7 = *((_DWORD *)this + 5);
      if (v7 < 0)
      {
        uint64_t v8 = (char *)this - 32 * (v7 & 0x7FFFFFF);
        uint64_t v11 = *((void *)v8 - 1);
        uint64_t v9 = v8 - 8;
        uint64_t v10 = v11;
        if (v11)
        {
          uint64_t v12 = -v10;
          do
          {
            unsigned int v13 = *(_DWORD *)(*(void *)&v9[v12] + 8);
            BOOL v14 = v13 > 7;
            int v15 = (1 << v13) & 0x83;
            if (v14 || v15 == 0) {
              return 1;
            }
            v12 += 16;
          }
          while (v12);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
        || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
LABEL_22:
        int v2 = *((unsigned __int8 *)this + 16);
        goto LABEL_5;
      }
    }
    else
    {
      if (v3 != 27) {
        goto LABEL_5;
      }
      if ((*((_WORD *)this + 9) & 0x301) == 0) {
        goto LABEL_22;
      }
    }
  }
  return 1;
}

uint64_t llvm::Instruction::willReturn(llvm::Instruction *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 61) {
    return (*((_WORD *)this + 9) & 1) == 0;
  }
  unsigned int v4 = v2 - 33;
  BOOL v5 = v4 > 0x33;
  uint64_t v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0) {
    return 1;
  }
  uint64_t v8 = *((void *)this + 8);
  if (v8)
  {
    if ((*(unsigned char *)(v8 + 20) & 2) != 0) {
      return 1;
    }
  }
  if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 65)) {
    return 1;
  }
  if (*((unsigned char *)this + 16) != 84) {
    return 0;
  }
  uint64_t v9 = *((void *)this - 4);
  if (!v9 || *(unsigned char *)(v9 + 16) || *(void *)(v9 + 24) != *((void *)this + 9) || (*(unsigned char *)(v9 + 33) & 0x20) == 0) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 8);
  if (v10 && (*(unsigned char *)(v10 + 17) & 0x30) != 0) {
    return 1;
  }
  int v11 = *((_DWORD *)this + 5);
  if (v11 < 0)
  {
    uint64_t v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
    uint64_t v15 = *((void *)v12 - 1);
    unsigned int v13 = v12 - 8;
    uint64_t v14 = v15;
    if (v15)
    {
      uint64_t v16 = -v14;
      do
      {
        unsigned int v17 = *(_DWORD *)(*(void *)&v13[v16] + 8);
        BOOL v5 = v17 > 7;
        int v18 = (1 << v17) & 0x83;
        if (v5 || v18 == 0) {
          return 0;
        }
        v16 += 16;
      }
      while (v16);
    }
  }
  if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45)) {
    return 1;
  }

  return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44);
}

uint64_t llvm::Instruction::isSafeToRemove(llvm::Instruction *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    if (llvm::Instruction::mayHaveSideEffects(this)) {
      return 0;
    }
    int v1 = *((unsigned __int8 *)this + 16);
  }
  if ((v1 - 29) < 0xB) {
    return 0;
  }
  unsigned int v2 = v1 - 38;
  BOOL v3 = v2 > 0x38;
  unint64_t v4 = (0xFFF9FFFFFFFFFEuLL >> v2) & 1;
  if (v3) {
    return 1;
  }
  else {
    return v4;
  }
}

BOOL llvm::Instruction::isLifetimeStartOrEnd(llvm::Instruction *this)
{
  return *((unsigned char *)this + 16) == 84
      && (uint64_t v1 = *((void *)this - 4)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *((void *)this + 9)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 167) < 2;
}

BOOL llvm::Instruction::isLaunderOrStripInvariantGroup(llvm::Instruction *this)
{
  if (*((unsigned char *)this + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *((void *)this - 4);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *((void *)this + 9) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 36);
  return v3 == 166 || v3 == 290;
}

BOOL llvm::Instruction::isDebugOrPseudoInst(llvm::Instruction *this)
{
  if (sub_1CBF63B28((uint64_t)this)) {
    return 1;
  }

  return sub_1CC27D470((uint64_t)this);
}

uint64_t llvm::Instruction::getNextNonDebugInstruction(llvm::Instruction *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2 == *((void *)this + 5) + 40 || v2 == 0) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v2 - 24;
    if (!sub_1CBF63B28(v2 - 24) && (!a2 || !sub_1CC27D470(v2 - 24))) {
      break;
    }
    uint64_t v6 = v2 + 8;
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == *(void *)(v6 + 8) + 40 || v2 == 0) {
      return 0;
    }
  }
  return v5;
}

void *llvm::Instruction::getPrevNonDebugInstruction(llvm::Instruction *this, int a2)
{
  uint64_t v2 = (void *)((char *)this + 24);
  if (*(llvm::Instruction **)(*((void *)this + 5) + 48) == (llvm::Instruction *)((char *)this + 24)) {
    return 0;
  }
  int v3 = (void *)*v2;
  if (!*v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v3 - 3;
    if (!sub_1CBF63B28((uint64_t)(v3 - 3)) && (!a2 || !sub_1CC27D470((uint64_t)(v3 - 3)))) {
      break;
    }
    if (*(void **)(v3[2] + 48) != v3)
    {
      int v3 = (void *)*v3;
      if (v3) {
        continue;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t llvm::Instruction::isAssociative(llvm::Instruction *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t result = 1;
  switch(v2)
  {
    case ')':
    case '-':
      return result;
    case '*':
    case '.':
      unsigned int v4 = *((unsigned __int8 *)this + 17);
      if ((v4 & 2) != 0) {
        uint64_t result = (v4 >> 4) & 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case '+':
    case ',':
      goto LABEL_7;
    default:
      if ((v2 - 56) >= 3) {
LABEL_7:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Instruction::isCommutative(llvm::Instruction *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 16) - 41;
  if (v1 > 0x2B) {
    return 0;
  }
  if (((1 << (*((unsigned char *)this + 16) - 41)) & 0x38033) != 0) {
    return 1;
  }
  if (v1 != 43) {
    return 0;
  }
  uint64_t v3 = *((void *)this - 4);
  if (!v3 || *(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *((void *)this + 9) || (*(unsigned char *)(v3 + 33) & 0x20) == 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(v3 + 36);
  uint64_t result = 1;
  if ((v4 - 142) > 0x3C || ((1 << (v4 + 114)) & 0x180C000000000003) == 0)
  {
    unsigned int v6 = v4 - 262;
    if (v6 > 0x2F || ((1 << v6) & 0xF8C00001F003) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 30)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 3) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v2)
    {
      case 30:
        __break(1u);
        goto LABEL_8;
      case 31:
        uint64_t result = (*((_DWORD *)this + 5) >> 1) & 0x3FFFFFF;
        break;
      case 32:
      case 38:
        uint64_t result = (*((_DWORD *)this + 5) & 0x7FFFFFFu) - 1;
        break;
      case 33:
LABEL_8:
        uint64_t result = 2;
        break;
      case 36:
        uint64_t result = *((_WORD *)this + 9) & 1;
        break;
      case 37:
        uint64_t result = 1;
        break;
      case 39:
        uint64_t result = (*((_DWORD *)this + 20) + 1);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this, unsigned int a2)
{
  if (*((unsigned char *)this + 16) == 30)
  {
    int v2 = (char *)this - 32 * a2;
LABEL_3:
    uint64_t v3 = v2 - 32;
  }
  else
  {
    switch(*((unsigned char *)this + 16))
    {
      case ' ':
      case '&':
        int v8 = *((_DWORD *)this + 5);
        if ((v8 & 0x40000000) != 0) {
          unsigned int v6 = (char *)*((void *)this - 1);
        }
        else {
          unsigned int v6 = (char *)this - 32 * (v8 & 0x7FFFFFF);
        }
        uint64_t v7 = a2 + 1;
        goto LABEL_9;
      case '!':
        uint64_t v9 = -64;
        if (!a2) {
          uint64_t v9 = -96;
        }
        uint64_t v3 = (char *)this + v9;
        return *(void *)v3;
      case '""':
      case '#':
        __break(1u);
        goto LABEL_16;
      case '$':
LABEL_16:
        if ((*((_WORD *)this + 9) & 1) == 0) {
          return 0;
        }
        uint64_t v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF) + 32;
        return *(void *)v3;
      case '%':
        uint64_t v3 = (char *)this - 32;
        return *(void *)v3;
      case '\'':
        if (a2)
        {
          int v2 = (char *)this + 32 * a2 + -32 * *((unsigned int *)this + 20) - 32;
          goto LABEL_3;
        }
        uint64_t v3 = (char *)this - 32 * *((unsigned int *)this + 20) - 64;
        break;
      default:
        int v5 = *((_DWORD *)this + 5);
        if ((v5 & 0x40000000) != 0) {
          unsigned int v6 = (char *)*((void *)this - 1);
        }
        else {
          unsigned int v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
        }
        uint64_t v7 = (2 * a2) | 1;
LABEL_9:
        uint64_t v3 = &v6[32 * v7];
        return *(void *)v3;
    }
  }
  return *(void *)v3;
}

uint64_t llvm::Instruction::setSuccessor(uint64_t this, unsigned int a2, llvm::BasicBlock *a3)
{
  uint64_t v4 = *(unsigned __int8 *)(this + 16);
  switch(*(unsigned char *)(this + 16))
  {
    case 0x1F:
      uint64_t v4 = (2 * a2) | 1;
      int v3 = *(_DWORD *)(this + 20);
      if ((v3 & 0x40000000) == 0) {
        goto LABEL_29;
      }
      uint64_t v5 = *(void *)(this - 8);
      goto LABEL_5;
    case 0x20:
      unsigned int v17 = a2 + 1;
      goto LABEL_21;
    case 0x21:
      return sub_1CD5C6840(this, a2, (uint64_t)a3);
    case 0x22:
    case 0x23:
      __break(1u);
LABEL_29:
      uint64_t v5 = this - 32 * (v3 & 0x7FFFFFF);
LABEL_5:
      uint64_t v6 = v5 + 32 * v4;
      if (*(void *)v6)
      {
        **(void **)(v6 + 16) = *(void *)(v6 + 8);
        uint64_t v16 = *(void *)(v6 + 8);
        if (v16) {
          *(void *)(v16 + 16) = *(void *)(v6 + 16);
        }
      }
      *(void *)uint64_t v6 = a3;
      if (a3)
      {
        uint64_t v9 = *((void *)a3 + 1);
        uint64_t v7 = (void *)((char *)a3 + 8);
        uint64_t v8 = v9;
        uint64_t v10 = v5 + 32 * v4;
        *(void *)(v10 + 8) = v9;
        if (v9) {
          *(void *)(v8 + 16) = v10 + 8;
        }
        *(void *)(v10 + 16) = v7;
        void *v7 = v6;
      }
      return this;
    case 0x24:
      return sub_1CD5AAFD8(this, (uint64_t)a3);
    case 0x25:
      int v11 = (void *)(this - 32);
      if (*(void *)(this - 32))
      {
        **(void **)(this - 16) = *(void *)(this - 24);
        uint64_t v12 = *(void *)(this - 24);
        if (v12) {
          *(void *)(v12 + 16) = *(void *)(this - 16);
        }
      }
      *int v11 = a3;
      if (a3)
      {
        uint64_t v15 = *((void *)a3 + 1);
        unsigned int v13 = (void *)((char *)a3 + 8);
        uint64_t v14 = v15;
        *(void *)(this - 24) = v15;
        if (v15) {
          *(void *)(v14 + 16) = this - 24;
        }
        *(void *)(this - 16) = v13;
        *unsigned int v13 = v11;
      }
      return this;
    case 0x26:
      unsigned int v17 = a2 + 1;
LABEL_21:
      this = sub_1CD5AB76C(this, v17, (uint64_t)a3);
      break;
    case 0x27:
      if (a2) {
        this = (uint64_t)sub_1CD5C6928((unsigned int *)this, (llvm::BasicBlock *)(a2 - 1), a3);
      }
      else {
        this = sub_1CD5C68D4(this, (uint64_t)a3);
      }
      break;
    default:
      this = sub_1CC5C92A0(this, a2, (uint64_t)a3);
      break;
  }
  return this;
}

uint64_t sub_1CC5C92A0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32;
  uint64_t v4 = (void *)(result - 32 - 32 * a2);
  if (*v4)
  {
    uint64_t v5 = v3 - 32 * a2;
    uint64_t v7 = *(void **)(v5 + 16);
    uint64_t v6 = (void *)(v5 + 16);
    void *v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  void *v4 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 - 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    *uint64_t v9 = v4;
  }
  return result;
}

uint64_t llvm::Instruction::replaceSuccessorWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v10 = this;
  if (*(unsigned char *)(this + 16) != 30)
  {
    unsigned int v11 = 2;
    switch(*(unsigned char *)(this + 16))
    {
      case 0x1E:
LABEL_22:
        __break(1u);
LABEL_23:
        int v19 = *(_DWORD *)(v10 + 20);
        if ((v19 & 0x40000000) != 0) {
          uint64_t v20 = *(void *)(v10 - 8);
        }
        else {
          uint64_t v20 = v10 - 32 * (v19 & 0x7FFFFFF);
        }
        uint64_t v18 = v20 + 32 * v3;
        goto LABEL_17;
      case 0x1F:
        unsigned int v11 = (*(_DWORD *)(this + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_20;
      case 0x20:
      case 0x26:
        unsigned int v11 = (*(_DWORD *)(this + 20) & 0x7FFFFFF) - 1;
        goto LABEL_20;
      case 0x21:
        goto LABEL_5;
      case 0x24:
        unsigned int v11 = *(_WORD *)(this + 18) & 1;
        goto LABEL_20;
      case 0x25:
        unsigned int v11 = 1;
        goto LABEL_5;
      case 0x27:
        unsigned int v11 = *(_DWORD *)(this + 80) + 1;
LABEL_20:
        if (!v11) {
          return this;
        }
        goto LABEL_5;
      default:
        return this;
    }
  }
  if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 3) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = 1;
  }
LABEL_5:
  int v4 = 0;
  uint64_t v3 = 0;
  uint64_t v5 = (llvm::BasicBlock **)(this - 32);
  uint64_t v6 = this - 64;
  uint64_t v7 = v11;
  do
  {
    int v12 = *(unsigned __int8 *)(v10 + 16);
    if (v12 == 30)
    {
      unsigned int v13 = &v5[-4 * v3];
    }
    else
    {
      uint64_t v15 = (v12 - 31);
      unsigned int v13 = v5;
      switch(v15)
      {
        case 1:
        case 7:
          goto LABEL_23;
        case 2:
          uint64_t v21 = -64;
          if (!v3) {
            uint64_t v21 = -96;
          }
          unsigned int v13 = (llvm::BasicBlock **)(v10 + v21);
          goto LABEL_8;
        case 3:
        case 4:
          goto LABEL_22;
        case 5:
          if ((*(_WORD *)(v10 + 18) & 1) == 0)
          {
            uint64_t v14 = 0;
            goto LABEL_9;
          }
          uint64_t v18 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
          break;
        case 6:
          goto LABEL_8;
        case 8:
          uint64_t v22 = *(unsigned int *)(v10 + 80);
          uint64_t v23 = -v22;
          unsigned int v13 = (llvm::BasicBlock **)(v6 - 32 * v22);
          uint64_t v24 = v10 + 32 * v23 - 64;
          if (!v3) {
            unsigned int v13 = (llvm::BasicBlock **)v24;
          }
          goto LABEL_8;
        default:
          int v16 = *(_DWORD *)(v10 + 20);
          if ((v16 & 0x40000000) != 0) {
            uint64_t v17 = *(void *)(v10 - 8);
          }
          else {
            uint64_t v17 = v10 - 32 * (v16 & 0x7FFFFFF);
          }
          uint64_t v18 = v17 + 32 * (v4 & 0xFFFFFFFE);
          break;
      }
LABEL_17:
      unsigned int v13 = (llvm::BasicBlock **)(v18 + 32);
    }
LABEL_8:
    uint64_t v14 = *v13;
LABEL_9:
    if (v14 == a2) {
      this = llvm::Instruction::setSuccessor(v10, v3, a3);
    }
    ++v3;
    v6 += 32;
    v4 += 2;
  }
  while (v7 != v3);
  return this;
}

void llvm::Instruction::swapProfMetadata(llvm::Instruction *this)
{
  v28[3] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return;
  }
  uint64_t v2 = ***(void ***)this;
  v28[0] = (uint64_t)this;
  int v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2480);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((this >> 4) ^ (this >> 9));
    uint64_t v7 = (llvm::Instruction **)(v4 + 40 * v6);
    uint64_t v8 = *v7;
    if (*v7 == this) {
      goto LABEL_5;
    }
    int v12 = 0;
    int v13 = 1;
    while (v8 != (llvm::Instruction *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v8 == (llvm::Instruction *)-8192;
      }
      if (v14) {
        int v12 = v7;
      }
      unsigned int v15 = v6 + v13++;
      unsigned int v6 = v15 & v5;
      uint64_t v7 = (llvm::Instruction **)(v4 + 40 * v6);
      uint64_t v8 = *v7;
      if (*v7 == this) {
        goto LABEL_5;
      }
    }
    if (v12) {
      int v25 = v12;
    }
    else {
      int v25 = v7;
    }
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v7 = (llvm::Instruction **)sub_1CC609054(v2 + 2480, (uint64_t)v28, v28, v25);
  uint64_t v26 = v28[0];
  v7[3] = 0;
  void v7[4] = 0;
  void *v7 = (llvm::Instruction *)v26;
  v7[1] = (llvm::Instruction *)(v7 + 3);
  void v7[2] = (llvm::Instruction *)0x100000000;
LABEL_5:
  uint64_t v9 = *((unsigned int *)v7 + 4);
  if (v9)
  {
    uint64_t v10 = (void *)((char *)v7[1] + 8);
    uint64_t v11 = 16 * v9;
    while (*((_DWORD *)v10 - 2) != 2)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11) {
        return;
      }
    }
    uint64_t v16 = *v10;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 8) == 3)
      {
        uint64_t v17 = *(llvm::MDString **)(v16 - 24);
        if (!*(unsigned char *)v17)
        {
          uint64_t v27 = v16;
          String = (void *)llvm::MDString::getString(v17);
          if (v19 == 14 && *String == 0x775F68636E617262 && *(void *)((char *)String + 6) == 0x737468676965775FLL)
          {
            uint64_t v21 = (uint64_t *)(v27 - 8 * *(unsigned int *)(v27 + 8));
            v28[0] = *v21;
            v28[1] = v21[2];
            v28[2] = v21[1];
            uint64_t v22 = *(void *)(v27 + 16);
            uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
            if ((v22 & 4) != 0) {
              uint64_t v23 = (void *)*v23;
            }
            Impl = llvm::MDTuple::getImpl((uint64_t)v23, v28, 3, 0, 1);
            llvm::Instruction::setMetadata(this, 2, Impl);
          }
        }
      }
    }
  }
}

uint64_t llvm::Instruction::copyMetadata(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 48)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = (*(_DWORD *)(a2 + 20) & 0x20000000) == 0;
  }
  if (v4) {
    return result;
  }
  uint64_t v7 = (llvm::Instruction *)result;
  v39[0] = 0;
  v39[1] = 0;
  int v40 = 0;
  if (a4)
  {
    uint64_t v18 = a3;
    uint64_t v19 = &a3[a4];
    while (1)
    {
      int v20 = *v18;
      LODWORD(v42) = *v18;
      if (!v40) {
        break;
      }
      unsigned int v21 = (v40 - 1) & (37 * v20);
      uint64_t v22 = (int *)(v39[0] + 4 * v21);
      int v23 = *v22;
      if (v20 != *v22)
      {
        uint64_t v24 = 0;
        int v25 = 1;
        while (v23 != -1)
        {
          if (v24) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v23 == -2;
          }
          if (v36) {
            uint64_t v24 = v22;
          }
          unsigned int v37 = v21 + v25++;
          unsigned int v21 = v37 & (v40 - 1);
          uint64_t v22 = (int *)(v39[0] + 4 * v21);
          int v23 = *v22;
          if (v20 == *v22) {
            goto LABEL_39;
          }
        }
        if (v24) {
          uint64_t v26 = v24;
        }
        else {
          uint64_t v26 = v22;
        }
        goto LABEL_38;
      }
LABEL_39:
      if (++v18 == v19) {
        goto LABEL_8;
      }
    }
    uint64_t v26 = 0;
LABEL_38:
    uint64_t v27 = sub_1CBB29C30((uint64_t)v39, (uint64_t)&v42, &v42, v26);
    *uint64_t v27 = (int)v42;
    goto LABEL_39;
  }
LABEL_8:
  __int16 v42 = v44;
  uint64_t v43 = 0x400000000;
  llvm::Value::getAllMetadata((unsigned char *)a2, (uint64_t)&v42);
  if (v43)
  {
    int v12 = (llvm::MDNode **)v42;
    int v13 = (llvm::MDNode **)((char *)v42 + 16 * v43);
    do
    {
      if (a4)
      {
        if (!v40) {
          goto LABEL_22;
        }
        unsigned int v14 = (37 * *(_DWORD *)v12) & (v40 - 1);
        int v15 = *(_DWORD *)(v39[0] + 4 * v14);
        if (*(_DWORD *)v12 != v15)
        {
          int v16 = 1;
          while (v15 != -1)
          {
            unsigned int v17 = v14 + v16++;
            unsigned int v14 = v17 & (v40 - 1);
            int v15 = *(_DWORD *)(v39[0] + 4 * v14);
            if (*(_DWORD *)v12 == v15) {
              goto LABEL_21;
            }
          }
          goto LABEL_22;
        }
      }
LABEL_21:
      llvm::Instruction::setMetadata(v7, *(_DWORD *)v12, v12[1]);
LABEL_22:
      v12 += 2;
    }
    while (v12 != v13);
  }
  if (a4)
  {
    if (v40)
    {
      unsigned int v28 = 0;
      for (int i = 1; ; ++i)
      {
        int v30 = *(_DWORD *)(v39[0] + 4 * v28);
        if (v30 == -1) {
          break;
        }
        if (!v30) {
          goto LABEL_10;
        }
        unsigned int v31 = v28 + i;
        unsigned int v28 = v31 & (v40 - 1);
      }
    }
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v8 = *(unsigned __int8 **)(a2 + 48);
  uint64_t v38 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v38, v8, 2);
  }
  uint64_t v9 = (unsigned __int8 **)((char *)v7 + 48);
  if (&v38 == v9)
  {
    if (v38) {
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    }
    goto LABEL_16;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    int v32 = *v10;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = *v9;
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v32 - 3) < 0xFFFFFFFE)
      {
        if (v32 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v34 = (unint64_t)(v35 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_14;
      }
      uint64_t v33 = *((void *)v10 + 2);
      if ((v33 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (!v34) {
        goto LABEL_14;
      }
    }
    __int16 v41 = v9;
    sub_1CC5FA668(v34 + 16, &v41);
  }
LABEL_14:
  uint64_t v11 = v38;
  *uint64_t v9 = v38;
  if (v11)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v38, v11, (uint64_t)v9);
    uint64_t v38 = 0;
  }
LABEL_16:
  if (v42 != v44) {
    free(v42);
  }
  return MEMORY[0x1D25D9CD0](v39[0], 4);
}

void *llvm::Instruction::clone(llvm::Instruction *this)
{
  switch(*((unsigned char *)this + 16))
  {
    case 0x1E:
      uint64_t v16 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      unsigned int v17 = operator new(32 * v16 + 64);
      int v3 = &v17[4 * v16];
      *((_DWORD *)v3 + 5) = *((_DWORD *)v3 + 5) & 0x38000000 | v16;
      if (v16)
      {
        do
        {
          void *v17 = 0;
          v17[1] = 0;
          void v17[2] = 0;
          void v17[3] = v3;
          v17 += 4;
        }
        while (v17 != v3);
      }
      llvm::BranchInst::BranchInst((uint64_t)v3, this);
      goto LABEL_4;
    case 0x1F:
      unint64_t v34 = operator new(0x48uLL);
      int v3 = v34 + 2;
      v34[7] = v34[7] & 0x38000000 | 0x40000000;
      *(void *)unint64_t v34 = 0;
      llvm::SwitchInst::SwitchInst((uint64_t)(v34 + 2), (uint64_t)this);
      goto LABEL_4;
    case 0x20:
      uint64_t v2 = llvm::IndirectBrInst::cloneImpl(this);
      goto LABEL_3;
    case 0x21:
      uint64_t v2 = (void *)llvm::InvokeInst::cloneImpl(this);
      goto LABEL_3;
    case 0x22:
      uint64_t v2 = (void *)llvm::ResumeInst::cloneImpl(this);
      goto LABEL_3;
    case 0x23:
      uint64_t v35 = **(void ***)this;
      int v3 = operator new(0x40uLL);
      *int v3 = *v35 + 1576;
      v3[1] = 0;
      *((unsigned char *)v3 + 16) = 35;
      *(_OWORD *)((char *)v3 + 44) = 0u;
      *(_OWORD *)((char *)v3 + 33) = 0u;
      *(_OWORD *)((char *)v3 + 17) = 0u;
      goto LABEL_4;
    case 0x24:
      uint64_t v2 = (void *)llvm::CleanupReturnInst::cloneImpl(this);
      goto LABEL_3;
    case 0x25:
      uint64_t v2 = (void *)llvm::CatchReturnInst::cloneImpl(this);
      goto LABEL_3;
    case 0x26:
      uint64_t v2 = llvm::CatchSwitchInst::cloneImpl(this);
      goto LABEL_3;
    case 0x27:
      uint64_t v2 = (void *)llvm::CallBrInst::cloneImpl(this);
      goto LABEL_3;
    case 0x28:
      uint64_t v2 = llvm::UnaryOperator::cloneImpl(this);
      goto LABEL_3;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      uint64_t v2 = llvm::BinaryOperator::cloneImpl(this);
      goto LABEL_3;
    case 0x3B:
      uint64_t v2 = llvm::AllocaInst::cloneImpl(this);
      goto LABEL_3;
    case 0x3C:
      uint64_t v2 = llvm::LoadInst::cloneImpl(this);
      goto LABEL_3;
    case 0x3D:
      unsigned int v21 = (char *)operator new(0x80uLL);
      *((_DWORD *)v21 + 21) = *((_DWORD *)v21 + 21) & 0x38000000 | 2;
      *(void *)unsigned int v21 = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 5) = 0;
      *((void *)v21 + 6) = 0;
      *((void *)v21 + 4) = 0;
      uint64_t v22 = v21 + 32;
      uint64_t v23 = *((void *)this - 8);
      *((void *)v21 + 8) = ***(void ***)v23 + 1576;
      int v3 = v21 + 64;
      *((void *)v21 + 3) = v21 + 64;
      *((void *)v21 + 7) = v21 + 64;
      uint64_t v24 = *((void *)this - 4);
      __int16 v25 = *((_WORD *)this + 9);
      char v26 = *((unsigned char *)this + 60);
      *((void *)v21 + 9) = 0;
      v21[80] = 61;
      v21[81] = 0;
      *((_WORD *)v21 + 41) = 0;
      *((_DWORD *)v21 + 21) = 2;
      *(_OWORD *)(v21 + 88) = 0u;
      *(_OWORD *)(v21 + 104) = 0u;
      *((_DWORD *)v21 + 30) = 0;
      *(void *)unsigned int v21 = v23;
      uint64_t v29 = *(void *)(v23 + 8);
      uint64_t v27 = (void *)(v23 + 8);
      uint64_t v28 = v29;
      *((void *)v21 + 1) = v29;
      if (v29) {
        *(void *)(v28 + 16) = v21 + 8;
      }
      *((void *)v21 + 2) = v27;
      *uint64_t v27 = v21;
      if (*((void *)v21 + 4))
      {
        **((void **)v21 + 6) = *((void *)v21 + 5);
        uint64_t v36 = *((void *)v21 + 5);
        if (v36) {
          *(void *)(v36 + 16) = *((void *)v21 + 6);
        }
      }
      *uint64_t v22 = v24;
      if (v24)
      {
        uint64_t v32 = *(void *)(v24 + 8);
        int v30 = (void *)(v24 + 8);
        uint64_t v31 = v32;
        *((void *)v21 + 5) = v32;
        if (v32) {
          *(void *)(v31 + 16) = v21 + 40;
        }
        *((void *)v21 + 6) = v30;
        *int v30 = v22;
      }
      *((_WORD *)v21 + 41) = v25 & 0x3FF;
      v21[124] = v26;
      goto LABEL_4;
    case 0x3E:
      uint64_t v5 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      unsigned int v6 = operator new(32 * v5 + 80);
      int v3 = &v6[4 * v5];
      *((_DWORD *)v3 + 5) = *((_DWORD *)v3 + 5) & 0x38000000 | v5;
      if (v5)
      {
        do
        {
          *unsigned int v6 = 0;
          v6[1] = 0;
          v6[2] = 0;
          _OWORD v6[3] = v3;
          v6 += 4;
        }
        while (v6 != v3);
        unsigned int v7 = *((_DWORD *)v3 + 5) & 0xC0000000;
      }
      else
      {
        unsigned int v7 = 0;
      }
      uint64_t v8 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      *int v3 = *(void *)this;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 62;
      *((_DWORD *)v3 + 5) = v8 | v7;
      *(_OWORD *)(v3 + 3) = 0u;
      *(_OWORD *)(v3 + 5) = 0u;
      *((_DWORD *)v3 + 14) = 0;
      *((_OWORD *)v3 + 4) = *((_OWORD *)this + 4);
      sub_1CC5E4108((uint64_t)v37, (uint64_t *)this - 4 * v8, (uint64_t *)this, (uint64_t)&v3[-4 * v8]);
      *((unsigned char *)v3 + 17) = *((unsigned char *)this + 17) & 0xFE | *((unsigned char *)v3 + 17) & 1;
      goto LABEL_4;
    case 0x3F:
      llvm::FenceInst::cloneImpl(this);
      goto LABEL_3;
    case 0x40:
      uint64_t v2 = (void *)llvm::AtomicCmpXchgInst::cloneImpl(this);
      goto LABEL_3;
    case 0x41:
      uint64_t v2 = llvm::AtomicRMWInst::cloneImpl(this);
      goto LABEL_3;
    case 0x42:
      uint64_t v2 = llvm::TruncInst::cloneImpl(this);
      goto LABEL_3;
    case 0x43:
      uint64_t v2 = llvm::ZExtInst::cloneImpl(this);
      goto LABEL_3;
    case 0x44:
      uint64_t v2 = llvm::SExtInst::cloneImpl(this);
      goto LABEL_3;
    case 0x45:
      uint64_t v2 = llvm::FPToUIInst::cloneImpl(this);
      goto LABEL_3;
    case 0x46:
      uint64_t v2 = llvm::FPToSIInst::cloneImpl(this);
      goto LABEL_3;
    case 0x47:
      uint64_t v2 = llvm::UIToFPInst::cloneImpl(this);
      goto LABEL_3;
    case 0x48:
      uint64_t v2 = llvm::SIToFPInst::cloneImpl(this);
      goto LABEL_3;
    case 0x49:
      uint64_t v2 = llvm::FPTruncInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4A:
      uint64_t v2 = llvm::FPExtInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4B:
      uint64_t v2 = llvm::PtrToIntInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4C:
      uint64_t v2 = llvm::IntToPtrInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4D:
      uint64_t v2 = llvm::BitCastInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4E:
      uint64_t v2 = llvm::AddrSpaceCastInst::cloneImpl(this);
      goto LABEL_3;
    case 0x4F:
    case 0x50:
      uint64_t v2 = (void *)llvm::FuncletPadInst::cloneImpl(this);
      goto LABEL_3;
    case 0x51:
      uint64_t v2 = llvm::ICmpInst::cloneImpl(this);
      goto LABEL_3;
    case 0x52:
      uint64_t v2 = llvm::FCmpInst::cloneImpl(this);
      goto LABEL_3;
    case 0x53:
      uint64_t v9 = operator new(0x48uLL);
      int v3 = v9 + 2;
      v9[7] = v9[7] & 0x38000000 | 0x40000000;
      *(void *)uint64_t v9 = 0;
      llvm::PHINode::PHINode((llvm::PHINode *)(v9 + 2), this);
      goto LABEL_4;
    case 0x54:
      uint64_t v2 = llvm::CallInst::cloneImpl(this);
      goto LABEL_3;
    case 0x55:
      uint64_t v18 = *((void *)this - 12);
      uint64_t v19 = (uint64_t *)*((void *)this - 8);
      uint64_t v20 = *((void *)this - 4);
      __int16 v38 = 257;
      uint64_t v2 = sub_1CC199EFC(v18, v19, v20, v37, 0, 0);
      goto LABEL_3;
    case 0x56:
    case 0x57:
      __break(1u);
      goto LABEL_66;
    case 0x58:
LABEL_66:
      uint64_t v2 = llvm::VAArgInst::cloneImpl(this);
      goto LABEL_3;
    case 0x59:
      uint64_t v2 = llvm::ExtractElementInst::cloneImpl(this);
      goto LABEL_3;
    case 0x5A:
      uint64_t v10 = (llvm::Value *)*((void *)this - 12);
      uint64_t v11 = (llvm::Value *)*((void *)this - 8);
      int v12 = (llvm::Value *)*((void *)this - 4);
      __int16 v38 = 257;
      int v13 = operator new(0xA0uLL);
      uint64_t v14 = 0;
      int v3 = v13 + 24;
      v13[29] = v13[29] & 0x38000000 | 3;
      do
      {
        int v15 = &v13[v14];
        void *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        void v15[3] = v3;
        v14 += 8;
      }
      while (v14 != 24);
      llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v13 + 24), v10, v11, v12, v37, 0);
      goto LABEL_4;
    case 0x5B:
      uint64_t v2 = llvm::ShuffleVectorInst::cloneImpl(this);
      goto LABEL_3;
    case 0x5C:
      uint64_t v33 = operator new(0x80uLL);
      v33[13] = v33[13] & 0x38000000 | 1;
      int v3 = v33 + 8;
      *(void *)uint64_t v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = 0;
      *((void *)v33 + 3) = v33 + 8;
      llvm::ExtractValueInst::ExtractValueInst((uint64_t)(v33 + 8), (uint64_t)this);
      goto LABEL_4;
    case 0x5D:
      uint64_t v2 = (void *)llvm::InsertValueInst::cloneImpl(this);
      goto LABEL_3;
    case 0x5E:
      uint64_t v2 = (void *)llvm::LandingPadInst::cloneImpl(this);
      goto LABEL_3;
    case 0x5F:
      uint64_t v2 = llvm::FreezeInst::cloneImpl(this);
      goto LABEL_3;
    default:
      uint64_t v2 = (void *)llvm::ReturnInst::cloneImpl(this);
LABEL_3:
      int v3 = v2;
LABEL_4:
      *((unsigned char *)v3 + 17) = *((unsigned char *)this + 17) & 0xFE | *((unsigned char *)v3 + 17) & 1;
      llvm::Instruction::copyMetadata((uint64_t)v3, (uint64_t)this, 0, 0);
      return v3;
  }
}

uint64_t llvm::AllocaInst::getAllocationSizeInBits@<X0>(llvm::Type **this@<X0>, const llvm::DataLayout *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1CC5CA218(a2, this[8]);
  uint64_t v7 = (uint64_t)*(this - 4);
  if (v7) {
    BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v10 = *(unsigned int *)(v7 + 32);
    if (v10 > 0x40)
    {
      int v12 = 0;
      int64_t v13 = (unint64_t)(v10 + 63) >> 6;
      do
      {
        if (v13-- < 1) {
          break;
        }
        unint64_t v15 = *(void *)(*(void *)(v7 + 24) + 8 * v13);
        v12 += __clz(v15);
      }
      while (!v15);
      int v16 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0) {
        int v16 = 0;
      }
      if (v12 + v16 == v10 - 1) {
        goto LABEL_17;
      }
      uint64_t v11 = **(void **)(v7 + 24);
    }
    else
    {
      uint64_t v11 = *(void *)(v7 + 24);
      if (v11 == 1) {
        goto LABEL_17;
      }
    }
    result *= v11;
LABEL_17:
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v6;
    char v9 = 1;
    goto LABEL_18;
  }
  char v9 = 0;
  *(unsigned char *)a3 = 0;
LABEL_18:
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_1CC5CA218(llvm::DataLayout *a1, llvm::Type *a2)
{
  unint64_t v4 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)a2) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(a1, a2, 1);
  return 8 * (((1 << Alignment) + v4 - 1) & -(1 << Alignment));
}

uint64_t llvm::AllocaInst::isArrayAllocation(llvm::AllocaInst *this)
{
  uint64_t v1 = *((void *)this - 4);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 16) == 16;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = *(unsigned int *)(v1 + 32);
  if (v4 > 0x40)
  {
    int v6 = 0;
    int64_t v7 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v7-- < 1) {
        break;
      }
      unint64_t v9 = *(void *)(*(void *)(v1 + 24) + 8 * v7);
      v6 += __clz(v9);
    }
    while (!v9);
    int v10 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v10 = 0;
    }
    BOOL v5 = v6 + v10 == v4 - 1;
  }
  else
  {
    BOOL v5 = *(void *)(v1 + 24) == 1;
  }
  int v11 = v5;
  return v11 ^ 1u;
}

const char *llvm::SelectInst::areInvalidOperands(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != *a3) {
    return "both values to select must have same type";
  }
  int v5 = *(unsigned __int8 *)(v3 + 8);
  if (v5 == 12) {
    return "select values cannot have token type";
  }
  uint64_t v6 = *a1;
  if (*a1 && (*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
  {
    if (*(void *)(v6 + 24) != **(void **)v6 + 1888) {
      return "vector select condition element type must be i1";
    }
    if ((v5 & 0xFE) == 0x12)
    {
      uint64_t result = "vector select requires selected vectors to have the same vector length as select condition";
      if ((v5 == 19) == (*(_DWORD *)(v6 + 8) == 19) && *(_DWORD *)(v3 + 32) == *(_DWORD *)(v6 + 32)) {
        return 0;
      }
    }
    else
    {
      return "selected values for vector select must be vectors";
    }
  }
  else
  {
    if (v6 == **(void **)v6 + 1888) {
      return 0;
    }
    return "select condition must be i1 or <n x i1>";
  }
  return result;
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, const llvm::PHINode *a2)
{
  int v4 = *((_DWORD *)a2 + 5);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 83;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  uint64_t v5 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  uint64_t v6 = operator new(40 * v5);
  *((void *)this - 1) = v6;
  if (v5)
  {
    int64_t v7 = v6;
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v5]);
  }
  int v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    unint64_t v9 = (uint64_t *)*((void *)a2 - 1);
    uint64_t v10 = v8 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v10 = v8 & 0x7FFFFFF;
    unint64_t v9 = (uint64_t *)((char *)a2 - 32 * v10);
  }
  int v11 = &v9[4 * v10];
  int v12 = *((_DWORD *)this + 5);
  if ((v12 & 0x40000000) != 0) {
    int64_t v13 = (char *)v6;
  }
  else {
    int64_t v13 = (char *)this - 32 * (v12 & 0x7FFFFFF);
  }
  sub_1CC5E4108((uint64_t)&v23, v9, v11, (uint64_t)v13);
  int v14 = *((_DWORD *)a2 + 5);
  if ((v14 & 0x40000000) != 0)
  {
    unint64_t v15 = (char *)*((void *)a2 - 1);
    uint64_t v16 = *((unsigned int *)a2 + 15);
    unsigned int v17 = &v15[32 * v16];
    uint64_t v18 = v14 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v18 = v14 & 0x7FFFFFF;
    unint64_t v15 = (char *)a2 - 32 * v18;
    uint64_t v16 = *((unsigned int *)a2 + 15);
    unsigned int v17 = &v15[32 * v16];
  }
  uint64_t v19 = (uint64_t)&v15[32 * v16 + 8 * v18];
  int v20 = *((_DWORD *)this + 5);
  if ((v20 & 0x40000000) != 0) {
    unsigned int v21 = (char *)*((void *)this - 1);
  }
  else {
    unsigned int v21 = (char *)this - 32 * (v20 & 0x7FFFFFF);
  }
  if ((char *)v19 != v17) {
    memmove(&v21[32 * *((unsigned int *)this + 15)], v17, v19 - (void)v17);
  }
  *((unsigned char *)this + 17) = *((unsigned char *)a2 + 17) & 0xFE | *((unsigned char *)this + 17) & 1;
  return this;
}

uint64_t llvm::PHINode::removeIncomingValue(llvm::PHINode *this, unsigned int a2, int a3)
{
  int v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v6 = (char *)*((void *)this - 1);
    uint64_t v7 = a2;
    int v8 = &v6[32 * a2];
    unint64_t v9 = (uint64_t *)&v6[32 * (v5 & 0x7FFFFFF)];
  }
  else
  {
    uint64_t v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
    uint64_t v7 = a2;
    int v8 = &v6[32 * a2];
    unint64_t v9 = (uint64_t *)this;
  }
  uint64_t v10 = *(void *)v8;
  sub_1CC5E4108((uint64_t)&v25, (uint64_t *)v8 + 4, v9, (uint64_t)&v6[32 * v7]);
  int v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x40000000) != 0)
  {
    int v12 = (char *)*((void *)this - 1);
    uint64_t v13 = *((unsigned int *)this + 15);
    int v14 = &v12[32 * v13];
    uint64_t v15 = v11 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v15 = v11 & 0x7FFFFFF;
    int v12 = (char *)this - 32 * v15;
    uint64_t v13 = *((unsigned int *)this + 15);
    int v14 = &v12[32 * v13];
  }
  uint64_t v16 = &v14[8 * v15];
  unsigned int v17 = &v14[8 * v7 + 8];
  if (v16 != v17)
  {
    memmove(&v12[32 * v13 + 8 * v7], v17, v16 - v17);
    int v11 = *((_DWORD *)this + 5);
  }
  if ((v11 & 0x40000000) != 0)
  {
    uint64_t v18 = (char *)*((void *)this - 1);
    uint64_t v19 = v11 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v19 = v11 & 0x7FFFFFF;
    uint64_t v18 = (char *)this - 32 * v19;
  }
  int v20 = &v18[32 * v19];
  if (*((void *)v20 - 4))
  {
    **((void **)v20 - 2) = *((void *)v20 - 3);
    uint64_t v21 = *((void *)v20 - 3);
    if (v21) {
      *(void *)(v21 + 16) = *((void *)v20 - 2);
    }
  }
  *((void *)v20 - 4) = 0;
  int v22 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v22 & 0xF8000000 | (v22 - 1) & 0x7FFFFFF;
  if (((v22 - 1) & 0x7FFFFFF) == 0 && a3)
  {
    uint64_t v24 = llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)v17);
    llvm::Value::replaceAllUsesWith(this, v24);
    llvm::Instruction::eraseFromParent(this);
  }
  return v10;
}

void llvm::PHINode::growOperands(llvm::PHINode *this)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  unsigned int v4 = (v2 & 0x7FFFFFF) + ((v2 & 0x7FFFFFFu) >> 1);
  if (v4 <= 2) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = v4;
  }
  *((_DWORD *)this + 15) = v5;
  if ((v2 & 0x40000000) != 0) {
    uint64_t v6 = (uint64_t *)*((void *)this - 1);
  }
  else {
    uint64_t v6 = (uint64_t *)((char *)this - 32 * v3);
  }
  uint64_t v7 = operator new(40 * v5);
  *((void *)this - 1) = v7;
  int v8 = v7;
  do
  {
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = this;
    v8 += 4;
  }
  while (v8 != &v7[4 * v5]);
  int v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = (char *)v7;
  }
  else {
    uint64_t v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
  }
  sub_1CC5E4108((uint64_t)&v14, v6, &v6[4 * v3], (uint64_t)v10);
  if (v3)
  {
    memmove(&v10[32 * v5], &v6[4 * v3], 8 * v3);
    uint64_t v11 = 4 * v3;
    do
    {
      int v12 = &v6[v11];
      if (v6[v11 - 4])
      {
        *(void *)*(v12 - 2) = *(v12 - 3);
        uint64_t v13 = *(v12 - 3);
        if (v13) {
          *(void *)(v13 + 16) = *(v12 - 2);
        }
      }
      v11 -= 4;
    }
    while (v11 * 8);
  }
  operator delete(v6);
}

llvm::UndefValue *llvm::PHINode::hasConstantValue(llvm::PHINode *this, llvm::Type *a2)
{
  int v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x40000000) != 0)
  {
    uint64_t v3 = (llvm::PHINode **)*((void *)this - 1);
    unsigned int v4 = v2 & 0x7FFFFFF;
  }
  else
  {
    unsigned int v4 = v2 & 0x7FFFFFF;
    uint64_t v3 = (llvm::PHINode **)((char *)this - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v5 = *v3;
  unsigned int v6 = v4 - 1;
  if (v4 != 1)
  {
    uint64_t v7 = 32;
    do
    {
      if ((v2 & 0x40000000) != 0) {
        int v8 = *(llvm::PHINode **)(*((void *)this - 1) + v7);
      }
      else {
        int v8 = *(llvm::PHINode **)((char *)this + v7 + -32 * v4);
      }
      if (v8 != v5 && v8 != this)
      {
        if (v5 != this) {
          return 0;
        }
        if ((v2 & 0x40000000) != 0) {
          uint64_t v10 = (char *)*((void *)this - 1);
        }
        else {
          uint64_t v10 = (char *)this - 32 * v4;
        }
        uint64_t v5 = *(llvm::PHINode **)&v10[v7];
      }
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  if (v5 == this) {
    return llvm::UndefValue::get(*(llvm::UndefValue **)this, a2);
  }
  else {
    return v5;
  }
}

uint64_t llvm::PHINode::hasConstantOrUndefValue(llvm::PHINode *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t v2 = v1 & 0x7FFFFFF;
  if ((v1 & 0x7FFFFFF) != 0)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    uint64_t v5 = 32 * v2;
    unsigned int v6 = (char *)this - 32 * v2;
    do
    {
      uint64_t v7 = v6;
      if ((v1 & 0x40000000) != 0) {
        uint64_t v7 = (char *)*((void *)this - 1);
      }
      int v8 = *(unsigned __int8 **)&v7[v3];
      if (v8 == (unsigned __int8 *)this || v8[16] - 11 < 2)
      {
        int v8 = v4;
      }
      else if (v4 && v4 != v8)
      {
        return 0;
      }
      v3 += 32;
      unsigned int v4 = v8;
    }
    while (v5 != v3);
  }
  return 1;
}

void llvm::LandingPadInst::init(llvm::LandingPadInst *this, unsigned int a2, const char **a3)
{
  *((_DWORD *)this + 15) = a2;
  *((_DWORD *)this + 5) &= 0xF8000000;
  unsigned int v6 = operator new(32 * a2);
  *((void *)this - 1) = v6;
  if (a2)
  {
    uint64_t v7 = &v6[4 * a2];
    do
    {
      *unsigned int v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      _OWORD v6[3] = this;
      v6 += 4;
    }
    while (v6 != v7);
  }
  llvm::Value::setNameImpl(this, a3);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      uint64_t v13 = *(llvm::LandingPadInst **)v12;
      if (*(llvm::LandingPadInst **)v12 == this)
      {
LABEL_15:
        uint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        unsigned int v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == *(_DWORD *)"llvm." && v17[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_23:
          *((_DWORD *)this + 9) = v21;
          goto LABEL_6;
        }
LABEL_22:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_23;
      }
      int v14 = 1;
      while (v13 != (llvm::LandingPadInst *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        uint64_t v13 = *(llvm::LandingPadInst **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_15;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_15;
  }
LABEL_6:
  *((_WORD *)this + 9) &= ~1u;
}

void llvm::LandingPadInst::growOperands(llvm::LandingPadInst *this, int a2)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 & 0x7FFFFFFu) + a2)
  {
    if (v3 <= 1) {
      int v5 = 1;
    }
    else {
      int v5 = v2 & 0x7FFFFFF;
    }
    uint64_t v6 = (a2 + 2 * v5) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v6;
    if ((v2 & 0x40000000) != 0) {
      uint64_t v7 = (uint64_t *)*((void *)this - 1);
    }
    else {
      uint64_t v7 = (uint64_t *)((char *)this - 32 * v3);
    }
    uint64_t v8 = operator new(32 * ((a2 + 2 * v5) & 0xFFFFFFFE));
    *((void *)this - 1) = v8;
    if (v6)
    {
      uint64_t v9 = v8;
      do
      {
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v9[2] = 0;
        v9[3] = this;
        v9 += 4;
      }
      while (v9 != &v8[4 * v6]);
    }
    int v10 = *((_DWORD *)this + 5);
    if ((v10 & 0x40000000) != 0) {
      uint64_t v11 = (char *)v8;
    }
    else {
      uint64_t v11 = (char *)this - 32 * (v10 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v15, v7, &v7[4 * v3], (uint64_t)v11);
    if (v3)
    {
      uint64_t v12 = 4 * v3;
      do
      {
        uint64_t v13 = &v7[v12];
        if (v7[v12 - 4])
        {
          *(void *)*(v13 - 2) = *(v13 - 3);
          uint64_t v14 = *(v13 - 3);
          if (v14) {
            *(void *)(v14 + 16) = *(v13 - 2);
          }
        }
        v12 -= 4;
      }
      while (v12 * 8);
    }
    operator delete(v7);
  }
}

void llvm::LandingPadInst::addClause(llvm::LandingPadInst *this, llvm::Constant *a2)
{
  int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = v4 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) <= (v4 & 0x7FFFFFFu))
  {
    if (v5 <= 1) {
      int v6 = 1;
    }
    else {
      int v6 = v4 & 0x7FFFFFF;
    }
    uint64_t v7 = (2 * v6);
    *((_DWORD *)this + 15) = v7;
    if ((v4 & 0x40000000) != 0) {
      uint64_t v8 = (uint64_t *)*((void *)this - 1);
    }
    else {
      uint64_t v8 = (uint64_t *)((char *)this - 32 * v5);
    }
    uint64_t v9 = operator new(32 * (2 * v6));
    *((void *)this - 1) = v9;
    int v10 = v9;
    do
    {
      *int v10 = 0;
      v10[1] = 0;
      unsigned __int8 v10[2] = 0;
      uint64_t v10[3] = this;
      v10 += 4;
    }
    while (v10 != &v9[4 * v7]);
    int v11 = *((_DWORD *)this + 5);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = (char *)v9;
    }
    else {
      uint64_t v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v23, v8, &v8[4 * v5], (uint64_t)v12);
    if (v5)
    {
      uint64_t v20 = 4 * v5;
      do
      {
        int v21 = &v8[v20];
        if (v8[v20 - 4])
        {
          *(void *)*(v21 - 2) = *(v21 - 3);
          uint64_t v22 = *(v21 - 3);
          if (v22) {
            *(void *)(v22 + 16) = *(v21 - 2);
          }
        }
        v20 -= 4;
      }
      while (v20 * 8);
    }
    operator delete(v8);
    int v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | (v4 + 1) & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0) {
    uint64_t v13 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v13 = (char *)this - 32 * ((v4 + 1) & 0x7FFFFFF);
  }
  uint64_t v14 = &v13[32 * v5];
  if (*(void *)v14)
  {
    **((void **)v14 + 2) = *((void *)v14 + 1);
    uint64_t v15 = *((void *)v14 + 1);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)v14 + 2);
    }
  }
  *(void *)uint64_t v14 = a2;
  if (a2)
  {
    uint64_t v18 = *((void *)a2 + 1);
    unsigned int v17 = (char **)((char *)a2 + 8);
    uint64_t v16 = v18;
    unint64_t v19 = &v13[32 * v5];
    *((void *)v19 + 1) = v18;
    if (v18) {
      *(void *)(v16 + 16) = v19 + 8;
    }
    *((void *)v19 + 2) = v17;
    unsigned char *v17 = v14;
  }
}

uint64_t llvm::CallBase::getCaller(llvm::CallBase *this)
{
  return *(void *)(*((void *)this + 5) + 56);
}

BOOL llvm::CallBase::isIndirectCall(llvm::CallBase *this)
{
  unsigned int v1 = *(unsigned __int8 *)(*((void *)this - 4) + 16);
  return v1 > 0x14 && v1 != 24;
}

BOOL llvm::CallBase::isMustTailCall(llvm::CallBase *this)
{
  BOOL result = 0;
  if (this)
  {
    if (*((unsigned char *)this + 16) == 84) {
      return (*((_WORD *)this + 9) & 3) == 2;
    }
  }
  return result;
}

BOOL llvm::CallBase::isTailCall(llvm::CallBase *this)
{
  BOOL result = 0;
  if (this)
  {
    if (*((unsigned char *)this + 16) == 84) {
      return (*((_WORD *)this + 9) & 3u) - 1 < 2;
    }
  }
  return result;
}

uint64_t llvm::CallBase::getIntrinsicID(llvm::CallBase *this)
{
  uint64_t v1 = *((void *)this - 4);
  if (v1 && !*(unsigned char *)(v1 + 16) && *(void *)(v1 + 24) == *((void *)this + 9)) {
    return *(unsigned int *)(v1 + 36);
  }
  else {
    return 0;
  }
}

BOOL llvm::CallBase::isReturnNonNull(llvm::CallBase *this)
{
  if (sub_1CBF5BCC4((uint64_t)this, 39)) {
    return 1;
  }
  if (!llvm::AttributeList::getRetDereferenceableBytes((llvm::CallBase *)((char *)this + 64))) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(*(void *)this + 8);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  return !llvm::NullPointerIsDefined(*(llvm **)(*((void *)this + 5) + 56), (const Function *)(v3 >> 8));
}

uint64_t llvm::CallBase::getArgOperandWithAttribute(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2
    && (a2 >= 0 ? (int v3 = a2) : (int v3 = a2 + 7),
        int v4 = 1 << (a2 & 7),
        (v4 & *(unsigned char *)(v2 + (v3 >> 3) + 24)) != 0))
  {
    uint64_t v10 = *(unsigned int *)(v2 + 8);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v3 >> 3;
      uint64_t v12 = (void *)(v2 + 40);
      int v13 = -1;
      while (!*v12 || (v4 & *(unsigned char *)(*v12 + v11 + 12)) == 0)
      {
        ++v13;
        ++v12;
        if (!--v10) {
          goto LABEL_26;
        }
      }
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v13 - 1));
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 - 32);
    if (!v5) {
      return 0;
    }
    if (*(unsigned char *)(v5 + 16)) {
      return 0;
    }
    if (*(void *)(v5 + 24) != *(void *)(a1 + 72)) {
      return 0;
    }
    uint64_t v6 = *(void *)(v5 + 112);
    if (!v6) {
      return 0;
    }
    int v7 = a2 >= 0 ? a2 : a2 + 7;
    int v8 = 1 << (a2 & 7);
    if ((v8 & *(unsigned char *)(v6 + (v7 >> 3) + 24)) == 0) {
      return 0;
    }
    uint64_t v14 = *(unsigned int *)(v6 + 8);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v7 >> 3;
      uint64_t v16 = (void *)(v6 + 40);
      int v13 = -1;
      while (!*v16 || (v8 & *(unsigned char *)(*v16 + v15 + 12)) == 0)
      {
        ++v13;
        ++v16;
        if (!--v14) {
          goto LABEL_26;
        }
      }
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v13 - 1));
    }
  }
LABEL_26:
  int v13 = 0;
  return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v13 - 1));
}

uint64_t llvm::CallBase::paramHasAttr(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 + 2;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    if (v3 < *(_DWORD *)(v4 + 8))
    {
      uint64_t v8 = *(void *)(v4 + 8 * v3 + 40);
      if (v8)
      {
        if ((*(unsigned __int8 *)(v8 + a3 / 8 + 12) >> (a3 & 7))) {
          return 1;
        }
      }
    }
  }
  uint64_t v5 = *(void *)(a1 - 32);
  if (v5
    && !*(unsigned char *)(v5 + 16)
    && *(void *)(v5 + 24) == *(void *)(a1 + 72)
    && (uint64_t v6 = *(void *)(v5 + 112)) != 0
    && v3 < *(_DWORD *)(v6 + 8)
    && (uint64_t v9 = *(void *)(v6 + 8 * v3 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v9 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 - 32);
  int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2) {
    BOOL v4 = v3 == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (*(_WORD *)(v2 + 18) != 49) {
      return 0;
    }
    uint64_t v2 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    int v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v2 + 112);
  if (!v6) {
    return 0;
  }
  return (*(unsigned __int8 *)(v6 + a2 / 8 + 12) >> (a2 & 7)) & 1;
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 - 32);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5) {
    BOOL v7 = v6 == 5;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (*(_WORD *)(v5 + 18) != 49) {
      return 0;
    }
    uint64_t v5 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    int v6 = *(unsigned __int8 *)(v5 + 16);
  }
  if (v6) {
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 112);
  if (!v9) {
    return 0;
  }
  if (!*(_DWORD *)(v9 + 8)) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 40);
  if (!v10) {
    return 0;
  }
  int v11 = *(_DWORD *)(v10 + 40);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  int v13 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v14 = v11 - 1;
  for (int i = 1; ; ++i)
  {
    int v16 = v13 & v14;
    uint64_t v17 = v12 + 24 * (v13 & v14);
    uint64_t v18 = *(const void **)v17;
    if (*(void *)v17 == -1)
    {
      if (a2 == (void *)-1) {
        return 1;
      }
      goto LABEL_17;
    }
    if (v18 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      return 1;
    }
LABEL_17:
    if (v18 == (const void *)-1) {
      return 0;
    }
    int v13 = i + v16;
  }
  if (a3 != *(void *)(v17 + 8) || a3 && memcmp(a2, v18, a3)) {
    goto LABEL_17;
  }
  return 1;
}

uint64_t llvm::CallBase::getFnAttrOnCalledFunction<llvm::Attribute::AttrKind>(uint64_t a1, int a2)
{
  if (sub_1CB8F87D0(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 - 32);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4) {
    BOOL v6 = v5 == 5;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (*(_WORD *)(v4 + 18) != 49) {
      return 0;
    }
    uint64_t v4 = *(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    int v5 = *(unsigned __int8 *)(v4 + 16);
  }
  if (!v5)
  {
    uint64_t v8 = *(void *)(v4 + 112);
    return llvm::AttributeList::getAttributeAtIndex(&v8, -1, a2);
  }
  return 0;
}

uint64_t llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 - 32);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5) {
    BOOL v7 = v6 == 5;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (*(_WORD *)(v5 + 18) != 49) {
      return 0;
    }
    uint64_t v5 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    int v6 = *(unsigned __int8 *)(v5 + 16);
  }
  if (v6) {
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 112);
  if (!v9) {
    return 0;
  }
  if (!*(_DWORD *)(v9 + 8)) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 40);
  if (!v10) {
    return 0;
  }
  int v11 = *(_DWORD *)(v10 + 40);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  int v13 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v14 = v11 - 1;
  for (int i = 1; ; ++i)
  {
    int v16 = v13 & v14;
    uint64_t v17 = v12 + 24 * (v13 & v14);
    uint64_t v18 = *(const void **)v17;
    if (*(void *)v17 == -1)
    {
      if (a2 == (void *)-1) {
        return *(void *)(v17 + 16);
      }
      goto LABEL_17;
    }
    if (v18 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      return *(void *)(v17 + 16);
    }
LABEL_17:
    if (v18 == (const void *)-1) {
      return 0;
    }
    int v13 = i + v16;
  }
  if (a3 != *(void *)(v17 + 8) || a3 && memcmp(a2, *(const void **)v17, a3)) {
    goto LABEL_17;
  }
  return *(void *)(v17 + 16);
}

uint64_t llvm::CallBase::getOperandBundlesAsDefs(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 20);
  if (v2 < 0)
  {
    unint64_t v3 = *(void *)(result - 32 * (v2 & 0x7FFFFFF) - 8);
    if ((v3 & 0xFFFFFFFF0) != 0)
    {
      uint64_t v5 = (v3 >> 4);
      uint64_t v6 = result;
      do
      {
        uint64_t v13 = a2;
        uint64_t v14 = result;
        uint64_t v7 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
        uint64_t v8 = result - 32 * v7;
        uint64_t v9 = (unsigned int *)(v6 - (*(void *)(v8 - 8) + 32 * v7));
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v12 = *((void *)v9 - 1);
        v15[0] = v8 + 32 * v10;
        v15[1] = v11 - v10;
        v15[2] = v12;
        sub_1CD5C74F0(a2, (uint64_t)v15);
        a2 = v13;
        BOOL result = v14;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t llvm::CallBase::populateBundleOperandInfos(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = (_DWORD ****)a1;
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t result = a1 - 32 * (v5 & 0x7FFFFFF) + 32 * a4;
  if (a3)
  {
    uint64_t v7 = v4;
    uint64_t v8 = result;
    unsigned int v9 = a4;
    uint64_t v10 = 48 * a3;
    uint64_t v11 = a2;
    uint64_t v12 = (uint64_t **)(a2 + 32);
    do
    {
      sub_1CC5716C8((uint64_t)&v29, *(v12 - 1), *v12, v8);
      uint64_t v8 = v13;
      v12 += 6;
      v10 -= 48;
    }
    while (v10);
    uint64_t v4 = v7;
    int v5 = *((_DWORD *)v7 + 5);
    a4 = v9;
    a2 = v11;
    uint64_t result = v8;
  }
  if (v5 < 0)
  {
    uint64_t v14 = &v4[-4 * (v5 & 0x7FFFFFF)];
    uint64_t v17 = (uint64_t)*(v14 - 1);
    int v16 = v14 - 1;
    uint64_t v15 = v17;
    if (v17)
    {
      uint64_t v18 = ***v4;
      uint64_t v19 = (uint64_t)v16 - v15;
      do
      {
        char v20 = *(unsigned char *)(a2 + 23);
        BOOL v21 = v20 < 0;
        uint64_t v22 = *(unsigned __int8 **)a2;
        if (v20 >= 0) {
          uint64_t v22 = (unsigned __int8 *)a2;
        }
        size_t v23 = v20 & 0x7F;
        if (v21) {
          size_t v24 = *(void *)(a2 + 8);
        }
        else {
          size_t v24 = v23;
        }
        uint64_t v25 = result;
        uint64_t v26 = a2;
        unsigned int v27 = a4;
        inserted = llvm::LLVMContextImpl::getOrInsertBundleTag(v18, v22, v24);
        uint64_t result = v25;
        *(void *)uint64_t v19 = inserted;
        *(_DWORD *)(v19 + 8) = v27;
        a4 = v27 + ((*(void *)(v26 + 32) - *(void *)(v26 + 24)) >> 3);
        *(_DWORD *)(v19 + 12) = a4;
        a2 = v26 + 48;
        v19 += 16;
      }
      while ((_DWORD ****)v19 != v16);
    }
  }
  return result;
}

uint64_t sub_1CC5CB4FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (v1 < 0) {
    return a1 - 32 * (v1 & 0x7FFFFFF) - 8 - *(void *)(a1 - 32 * (v1 & 0x7FFFFFF) - 8);
  }
  else {
    return 0;
  }
}

BOOL llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  __int32 v4 = 7;
  BOOL result = sub_1CC5CB59C((uint64_t)this, &v4, 1uLL);
  if (result)
  {
    uint64_t v3 = *((void *)this - 4);
    return !v3 || *(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *((void *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

BOOL sub_1CC5CB59C(uint64_t a1, __int32 *a2, size_t a3)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x80000000) == 0) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 - 32 * (v3 & 0x7FFFFFF) - 8);
  if ((v5 & 0xFFFFFFFF0) == 0) {
    return 0;
  }
  uint64_t v6 = &a2[a3];
  uint64_t v7 = a1 - 8;
  uint64_t v8 = (v5 >> 4) - 1;
  uint64_t v9 = a1 - 8;
  do
  {
    uint64_t v10 = wmemchr(a2, *(_DWORD *)(*(void *)(v9- (*(void *)(v7 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))+ 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)))+ 8), a3);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v6;
    }
    uint64_t v12 = v11 - a2;
    BOOL result = v12 == a3;
    BOOL v13 = v12 == a3 || v8-- == 0;
    v9 += 16;
  }
  while (!v13);
  return result;
}

void llvm::CallInst::init(uint64_t ***a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, const char **a8)
{
  unsigned int v11 = a5;
  a1[9] = a2;
  sub_1CC5716C8((uint64_t)&v49, a4, &a4[a5], (uint64_t)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]);
  uint64_t v14 = a1 - 4;
  if (*(a1 - 4))
  {
    **(a1 - 2) = (uint64_t *)*(a1 - 3);
    uint64_t v33 = (uint64_t)*(a1 - 3);
    if (v33) {
      *(void *)(v33 + 16) = *(a1 - 2);
    }
  }
  *uint64_t v14 = a3;
  if (a3)
  {
    uint64_t v17 = a3[1];
    int v16 = a3 + 1;
    uint64_t v15 = v17;
    *(a1 - 3) = (uint64_t **)v17;
    if (v17) {
      v15[2] = (uint64_t)(a1 - 3);
    }
    *(a1 - 2) = v16;
    *int v16 = (uint64_t *)v14;
  }
  int v18 = *((_DWORD *)a1 + 5);
  if (a7)
  {
    uint64_t v34 = (uint64_t)&(&a1[4 * v11])[-4 * (v18 & 0x7FFFFFF)];
    uint64_t v35 = 48 * a7;
    uint64_t v36 = (uint64_t **)(a6 + 32);
    do
    {
      sub_1CC5716C8((uint64_t)&v50, *(v36 - 1), *v36, v34);
      uint64_t v34 = v37;
      v36 += 6;
      v35 -= 48;
    }
    while (v35);
    int v18 = *((_DWORD *)a1 + 5);
  }
  if (v18 < 0)
  {
    __int16 v38 = &a1[-4 * (v18 & 0x7FFFFFF)];
    uint64_t v41 = (uint64_t)*(v38 - 1);
    int v40 = v38 - 1;
    uint64_t v39 = v41;
    if (v41)
    {
      __int16 v42 = (_DWORD *)***a1;
      uint64_t v43 = (uint64_t)v40 - v39;
      do
      {
        char v44 = *(unsigned char *)(a6 + 23);
        BOOL v45 = v44 < 0;
        if (v44 >= 0) {
          uint64_t v46 = (unsigned __int8 *)a6;
        }
        else {
          uint64_t v46 = *(unsigned __int8 **)a6;
        }
        size_t v47 = v44 & 0x7F;
        if (v45) {
          size_t v48 = *(void *)(a6 + 8);
        }
        else {
          size_t v48 = v47;
        }
        *(void *)uint64_t v43 = llvm::LLVMContextImpl::getOrInsertBundleTag(v42, v46, v48);
        *(_DWORD *)(v43 + 8) = v11;
        v11 += (*(void *)(a6 + 32) - *(void *)(a6 + 24)) >> 3;
        *(_DWORD *)(v43 + 12) = v11;
        a6 += 48;
        v43 += 16;
      }
      while ((uint64_t ***)v43 != v40);
    }
  }
  llvm::Value::setNameImpl((llvm::Value *)a1, a8);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v19 = ***a1;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      size_t v23 = (uint64_t ****)(v20 + 16 * v22);
      size_t v24 = *v23;
      if (*v23 == a1)
      {
LABEL_16:
        unsigned int v27 = v23[1];
        unint64_t v30 = (unint64_t)*v27;
        uint64_t v28 = v27 + 2;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_23:
          *((_DWORD *)a1 + 9) = v32;
          return;
        }
LABEL_24:
        int v32 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_23;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        size_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == a1)
        {
          size_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_16;
        }
      }
    }
    size_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_16;
  }
}

llvm::CallInst *llvm::CallInst::CallInst(llvm::CallInst *this, llvm::FunctionType *a2, llvm::Value *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = **((void **)a2 + 2);
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 84;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v11 = *((void *)a5 + 5);
    uint64_t v12 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v14 = *(void *)(v11 + 56);
      if (v14)
      {
        uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15) {
          llvm::ValueSymbolTable::reinsertValue(v15, this);
        }
      }
    }
    uint64_t v13 = *v12;
    *((void *)this + 3) = *v12;
    *((void *)this + 4) = v12;
    *(void *)(v13 + 8) = v9;
    uint64_t *v12 = (uint64_t)v9;
  }
  *((void *)this + 8) = 0;
  llvm::CallInst::init(this, a2, a3, a4);
  return this;
}

llvm::CallInst *llvm::CallInst::CallInst(llvm::CallInst *this, llvm::FunctionType *a2, llvm::Value *a3, const char **a4, llvm::BasicBlock *a5)
{
  *(void *)this = **((void **)a2 + 2);
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 84;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a5;
  *((_WORD *)a5 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v14 = *((void *)a5 + 7);
    if (v14)
    {
      uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15) {
        llvm::ValueSymbolTable::reinsertValue(v15, this);
      }
    }
  }
  uint64_t v12 = *((void *)a5 + 5);
  uint64_t v11 = (void *)((char *)a5 + 40);
  *((void *)this + 3) = v12;
  *((void *)this + 4) = v11;
  *(void *)(v12 + 8) = v10;
  *uint64_t v11 = v10;
  *((void *)this + 8) = 0;
  llvm::CallInst::init(this, a2, a3, a4);
  return this;
}

uint64_t llvm::CallInst::CallInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 84;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  LOBYTE(v4) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 3;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC | v4 & 3;
  sub_1CC5E4108((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    uint64_t v12 = a2 - 32 * (v8 & 0x7FFFFFF);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v7 = (unsigned char *)(v12 - 8);
    uint64_t v6 = &v7[-v13];
  }
  int v9 = *(_DWORD *)(a1 + 20);
  if (v9 < 0) {
    uint64_t v10 = (void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8 - *(void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7 != v6) {
    memmove(v10, v6, v7 - v6);
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned char *v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 84;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  LOBYTE(v4) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 3;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC | v4 & 3;
  sub_1CC5E4108((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    uint64_t v12 = a2 - 32 * (v8 & 0x7FFFFFF);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v7 = (unsigned char *)(v12 - 8);
    uint64_t v6 = &v7[-v13];
  }
  int v9 = *(_DWORD *)(a1 + 20);
  if (v9 < 0) {
    uint64_t v10 = (void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8 - *(void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7 != v6) {
    memmove(v10, v6, v7 - v6);
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
  return a1;
}

llvm::Value *llvm::CallInst::CreateMalloc(llvm::CallInst *this, llvm::Type ***a2, llvm::Type *a3, llvm::Type *a4, llvm::Constant **a5, llvm::Value *a6, const char **a7, const llvm::Twine *a8)
{
  return sub_1CC5CBD20((uint64_t)this, 0, a2, a3, (uint64_t)a4, a5, 0, 0, (uint64_t)a6, a7);
}

{
  return sub_1CC5CBD20(0, (uint64_t)this, a2, a3, (uint64_t)a4, a5, 0, 0, (uint64_t)a6, a7);
}

llvm::Value *sub_1CC5CBD20(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::PointerType *a4, uint64_t a5, llvm::Constant **this, uint64_t a7, uint64_t a8, uint64_t a9, const char **a10)
{
  uint64_t v17 = a9;
  Mul = (const llvm::detail::DoubleAPFloat *)a5;
  if (!this)
  {
    int v25 = (llvm::ConstantExpr *)llvm::ConstantInt::get((llvm::ConstantInt *)a3, 1uLL, 0);
LABEL_27:
    int v18 = v25;
    goto LABEL_28;
  }
  int v18 = (llvm::ConstantExpr *)this;
  uint64_t v19 = *this;
  if (*this != (llvm::Constant *)a3)
  {
    if (a1)
    {
      __int16 v128 = 257;
      if ((*((_DWORD *)v19 + 2) & 0xFE) == 0x12) {
        uint64_t v19 = (llvm::Constant *)**((void **)v19 + 2);
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
      uint64_t v21 = (llvm::Type *)a3;
      if ((a3[1] & 0xFE) == 0x12) {
        uint64_t v21 = *a3[2];
      }
      unsigned int v22 = llvm::Type::getPrimitiveSizeInBits(v21);
      if (PrimitiveSizeInBits > v22) {
        int v23 = 38;
      }
      else {
        int v23 = 39;
      }
      if (PrimitiveSizeInBits == v22) {
        int v24 = 49;
      }
      else {
        int v24 = v23;
      }
      int v25 = llvm::CastInst::Create(v24, (uint64_t)v18, (uint64_t)a3, v127, a1);
    }
    else
    {
      __int16 v128 = 257;
      if ((*((_DWORD *)v19 + 2) & 0xFE) == 0x12) {
        uint64_t v19 = (llvm::Constant *)**((void **)v19 + 2);
      }
      unsigned int v26 = llvm::Type::getPrimitiveSizeInBits(v19);
      unsigned int v27 = (llvm::Type *)a3;
      if ((a3[1] & 0xFE) == 0x12) {
        unsigned int v27 = *a3[2];
      }
      unsigned int v28 = llvm::Type::getPrimitiveSizeInBits(v27);
      if (v26 > v28) {
        int v29 = 38;
      }
      else {
        int v29 = 39;
      }
      if (v26 == v28) {
        int v30 = 49;
      }
      else {
        int v30 = v29;
      }
      int v25 = llvm::CastInst::Create(v30, (uint64_t)v18, (uint64_t)a3, v127, a2);
    }
    goto LABEL_27;
  }
LABEL_28:
  unsigned int v31 = *((unsigned __int8 *)v18 + 16);
  uint64_t v126 = a2;
  if (v18 && v31 == 16)
  {
    uint64_t v32 = *((unsigned int *)v18 + 8);
    if (v32 > 0x40)
    {
      int v33 = 0;
      int64_t v34 = (unint64_t)(v32 + 63) >> 6;
      do
      {
        BOOL v35 = v34-- < 1;
        if (v35) {
          break;
        }
        unint64_t v36 = *(void *)(*((void *)v18 + 3) + 8 * v34);
        v33 += __clz(v36);
      }
      while (!v36);
      int v37 = v32 | 0xFFFFFFC0;
      if ((v32 & 0x3F) == 0) {
        int v37 = 0;
      }
      if (v33 + v37 == v32 - 1)
      {
LABEL_46:
        if (!a1) {
          goto LABEL_66;
        }
LABEL_65:
        char v55 = 0;
        __int16 v56 = *(void **)(a1 + 40);
        goto LABEL_67;
      }
    }
    else if (*((void *)v18 + 3) == 1)
    {
      goto LABEL_46;
    }
  }
  if (!a5 || *(unsigned char *)(a5 + 16) != 16) {
    goto LABEL_43;
  }
  uint64_t v38 = *(unsigned int *)(a5 + 32);
  if (v38 > 0x40)
  {
    int v51 = 0;
    int64_t v52 = (unint64_t)(v38 + 63) >> 6;
    do
    {
      BOOL v35 = v52-- < 1;
      if (v35) {
        break;
      }
      unint64_t v53 = *(void *)(*(void *)(a5 + 24) + 8 * v52);
      v51 += __clz(v53);
    }
    while (!v53);
    int v54 = v38 | 0xFFFFFFC0;
    if ((v38 & 0x3F) == 0) {
      int v54 = 0;
    }
    if (v51 + v54 == v38 - 1) {
      goto LABEL_64;
    }
LABEL_43:
    if (v18 && v31 <= 0x14)
    {
      IntegerCast = llvm::ConstantExpr::getIntegerCast(v18, a3, 0);
      Mul = llvm::ConstantExpr::getMul(IntegerCast, (llvm::Constant *)a5, 0, 0);
      goto LABEL_46;
    }
    if (!a1)
    {
      v127[0] = "mallocsize";
      __int16 v128 = 259;
      llvm::BinaryOperator::Create(17, (uint64_t *)v18, a5, v127);
    }
    uint64_t v123 = a4;
    uint64_t v124 = a7;
    uint64_t v125 = a8;
    v127[0] = "mallocsize";
    __int16 v128 = 259;
    int v40 = (char *)operator new(0x80uLL);
    *((_DWORD *)v40 + 21) = *((_DWORD *)v40 + 21) & 0x38000000 | 2;
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *(void *)int v40 = 0;
    *((void *)v40 + 5) = 0;
    *((void *)v40 + 6) = 0;
    *((void *)v40 + 4) = 0;
    *((void *)v40 + 8) = *(void *)v18;
    uint64_t v41 = (llvm::Value *)(v40 + 64);
    *((void *)v40 + 3) = v40 + 64;
    *((void *)v40 + 7) = v40 + 64;
    *((void *)v40 + 9) = 0;
    v40[80] = 45;
    v40[81] = 0;
    *((_WORD *)v40 + 41) = 0;
    *((_DWORD *)v40 + 21) = 2;
    *(_OWORD *)(v40 + 88) = 0u;
    __int16 v42 = v40 + 88;
    *(_OWORD *)(v40 + 104) = 0u;
    *((_DWORD *)v40 + 30) = 0;
    uint64_t v43 = *(void *)(a1 + 40);
    char v44 = (uint64_t *)(a1 + 24);
    *((void *)v40 + 13) = v43;
    *(_WORD *)(v43 + 18) &= ~0x8000u;
    if ((v40[87] & 0x10) != 0
      && (uint64_t v89 = *(void *)(v43 + 56)) != 0
      && (uint64_t v90 = *(llvm::ValueSymbolTable **)(v89 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v90, v41);
      uint64_t v91 = *(void *)v40;
      uint64_t v92 = *v44;
      *((void *)v40 + 11) = *v44;
      *((void *)v40 + 12) = v44;
      *(void *)(v92 + 8) = v42;
      *char v44 = (uint64_t)v42;
      if (v91)
      {
        **((void **)v40 + 2) = *((void *)v40 + 1);
        uint64_t v93 = *((void *)v40 + 1);
        if (v93) {
          *(void *)(v93 + 16) = *((void *)v40 + 2);
        }
      }
    }
    else
    {
      uint64_t v45 = *v44;
      *((void *)v40 + 11) = *v44;
      *((void *)v40 + 12) = v44;
      *(void *)(v45 + 8) = v42;
      *char v44 = (uint64_t)v42;
    }
    *(void *)int v40 = v18;
    uint64_t v48 = *((void *)v18 + 1);
    size_t v47 = (void *)((char *)v18 + 8);
    uint64_t v46 = v48;
    *((void *)v40 + 1) = v48;
    a8 = v125;
    a4 = v123;
    if (v48) {
      *(void *)(v46 + 16) = v40 + 8;
    }
    *((void *)v40 + 2) = v47;
    *size_t v47 = v40;
    if (*((void *)v40 + 4))
    {
      **((void **)v40 + 6) = *((void *)v40 + 5);
      uint64_t v122 = *((void *)v40 + 5);
      if (v122) {
        *(void *)(v122 + 16) = *((void *)v40 + 6);
      }
    }
    char v49 = (void *)(a5 + 8);
    uint64_t v50 = *(void *)(a5 + 8);
    *((void *)v40 + 5) = v50;
    *((void *)v40 + 4) = a5;
    if (v50) {
      *(void *)(v50 + 16) = v40 + 40;
    }
    *((void *)v40 + 6) = v49;
    *char v49 = v40 + 32;
    llvm::Value::setNameImpl(v41, v127);
    if (v40[80])
    {
LABEL_57:
      Mul = (const llvm::detail::DoubleAPFloat *)(v40 + 64);
      a7 = v124;
      goto LABEL_65;
    }
    if ((v40[87] & 0x10) == 0) {
      goto LABEL_140;
    }
    uint64_t v97 = ***(void ***)v41;
    uint64_t v98 = *(void *)(v97 + 152);
    uint64_t v99 = *(unsigned int *)(v97 + 168);
    if (v99)
    {
      LODWORD(v100) = (v99 - 1) & ((v41 >> 4) ^ (v41 >> 9));
      uint64_t v101 = (llvm::Value **)(v98 + 16 * v100);
      uint64_t v102 = *v101;
      if (*v101 == v41)
      {
LABEL_133:
        unsigned int v116 = v101[1];
        unint64_t v119 = *(void *)v116;
        uint64_t v117 = (char *)v116 + 16;
        unint64_t v118 = v119;
        if (v119 >= 5 && *(_DWORD *)v117 == *(_DWORD *)"llvm." && v117[4] == aLlvm_1[4])
        {
          *((_DWORD *)v40 + 24) |= 0x2000u;
          int v121 = llvm::Function::lookupIntrinsicID(v117, v118);
LABEL_141:
          *((_DWORD *)v40 + 25) = v121;
          goto LABEL_57;
        }
LABEL_140:
        int v121 = 0;
        *((_DWORD *)v40 + 24) &= ~0x2000u;
        goto LABEL_141;
      }
      int v103 = 1;
      while (v102 != (llvm::Value *)-4096)
      {
        int v104 = v100 + v103++;
        uint64_t v100 = v104 & (v99 - 1);
        uint64_t v102 = *(llvm::Value **)(v98 + 16 * v100);
        if (v102 == v41)
        {
          uint64_t v101 = (llvm::Value **)(v98 + 16 * v100);
          goto LABEL_133;
        }
      }
    }
    uint64_t v101 = (llvm::Value **)(v98 + 16 * v99);
    goto LABEL_133;
  }
  if (*(void *)(a5 + 24) != 1) {
    goto LABEL_43;
  }
LABEL_64:
  Mul = v18;
  if (a1) {
    goto LABEL_65;
  }
LABEL_66:
  char v55 = 1;
  __int16 v56 = (void *)v126;
LABEL_67:
  uint64_t v57 = *(void *)(v56[7] + 40);
  uint64_t v58 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(void **)*v56 + 1912), 0);
  if (a9)
  {
    long long v59 = *(uint64_t ***)(a9 + 24);
  }
  else
  {
    long long v59 = (uint64_t **)sub_1CD57B9C0(v57, "malloc", (const char *)6, 0, v58, (uint64_t)a3);
    uint64_t v17 = v85;
  }
  unint64_t v60 = llvm::PointerType::get(a4, 0);
  if (v55)
  {
    v127[0] = "malloccall";
    __int16 v128 = 259;
    uint64_t v61 = sub_1CC19A3E0(v59, (uint64_t **)v17, (uint64_t *)&Mul, 1, a7, a8, v127, 0);
    uint64_t v62 = v61;
    if (*(void *)v61 != v60)
    {
      uint64_t v63 = (uint64_t *)(v126 + 40);
      *(void *)(v61 + 40) = v126;
      *(_WORD *)(v126 + 18) &= ~0x8000u;
      if ((*(unsigned char *)(v61 + 23) & 0x10) != 0)
      {
        uint64_t v86 = *(void *)(v126 + 56);
        if (v86)
        {
          uint64_t v87 = *(llvm::ValueSymbolTable **)(v86 + 104);
          if (v87) {
            llvm::ValueSymbolTable::reinsertValue(v87, (llvm::Value *)v62);
          }
        }
      }
      uint64_t v64 = *v63;
      *(void *)(v62 + 32) = v63;
      *(void *)(v62 + 24) = v64;
      *(void *)(v64 + 8) = v62 + 24;
      *uint64_t v63 = v62 + 24;
      uint64_t v65 = (char *)operator new(0x60uLL);
      *((void *)v65 + 4) = v60;
      unint64_t v66 = (llvm::Value *)(v65 + 32);
      *((void *)v65 + 1) = 0;
      *((void *)v65 + 2) = 0;
      *((void *)v65 + 3) = v65 + 32;
      *((void *)v65 + 5) = 0;
      *((void *)v65 + 6) = 0x10000004DLL;
      *(_OWORD *)(v65 + 56) = 0u;
      *(_OWORD *)(v65 + 72) = 0u;
      *((_DWORD *)v65 + 22) = 0;
      *(void *)uint64_t v65 = v62;
      unint64_t v67 = (void *)(v62 + 8);
      uint64_t v68 = *(void *)(v62 + 8);
      *((void *)v65 + 1) = v68;
      if (v68) {
        *(void *)(v68 + 16) = v65 + 8;
      }
      *((void *)v65 + 2) = v67;
      *unint64_t v67 = v65;
      goto LABEL_80;
    }
LABEL_88:
    unint64_t v66 = (llvm::Value *)v62;
    goto LABEL_89;
  }
  v127[0] = "malloccall";
  __int16 v128 = 259;
  uint64_t v62 = sub_1CC19A3E0(v59, (uint64_t **)v17, (uint64_t *)&Mul, 1, a7, a8, v127, a1);
  if (*(void *)v62 == v60) {
    goto LABEL_88;
  }
  unint64_t v69 = (char *)operator new(0x60uLL);
  unint64_t v70 = v69;
  *((void *)v69 + 4) = v60;
  unint64_t v66 = (llvm::Value *)(v69 + 32);
  *(void *)unint64_t v69 = 0;
  *((void *)v69 + 1) = 0;
  *((void *)v69 + 2) = 0;
  *((void *)v69 + 3) = v69 + 32;
  *((void *)v69 + 5) = 0;
  *((void *)v69 + 6) = 0x10000004DLL;
  *(_OWORD *)(v69 + 56) = 0u;
  std::string v71 = v69 + 56;
  *(_OWORD *)(v69 + 72) = 0u;
  *((_DWORD *)v69 + 22) = 0;
  if (a1)
  {
    uint64_t v94 = *(void *)(a1 + 40);
    unint64_t v95 = (uint64_t *)(a1 + 24);
    *((void *)v69 + 9) = v94;
    *(_WORD *)(v94 + 18) &= ~0x8000u;
    if ((v69[55] & 0x10) != 0
      && (uint64_t v111 = *(void *)(v94 + 56)) != 0
      && (uint64_t v112 = *(llvm::ValueSymbolTable **)(v111 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v112, v66);
      uint64_t v113 = *(void *)v70;
      uint64_t v114 = *v95;
      *((void *)v70 + 7) = *v95;
      *((void *)v70 + 8) = v95;
      *(void *)(v114 + 8) = v71;
      *unint64_t v95 = (uint64_t)v71;
      if (v113)
      {
        **((void **)v70 + 2) = *((void *)v70 + 1);
        uint64_t v115 = *((void *)v70 + 1);
        if (v115) {
          *(void *)(v115 + 16) = *((void *)v70 + 2);
        }
      }
    }
    else
    {
      uint64_t v96 = *v95;
      *((void *)v70 + 7) = *v95;
      *((void *)v70 + 8) = v95;
      *(void *)(v96 + 8) = v71;
      *unint64_t v95 = (uint64_t)v71;
    }
  }
  *(void *)unint64_t v70 = v62;
  uint64_t v72 = (void *)(v62 + 8);
  uint64_t v73 = *(void *)(v62 + 8);
  *((void *)v70 + 1) = v73;
  if (v73) {
    *(void *)(v73 + 16) = v70 + 8;
  }
  *((void *)v70 + 2) = v72;
  *uint64_t v72 = v70;
LABEL_80:
  llvm::Value::setNameImpl(v66, a10);
  if (!*((unsigned char *)v66 + 16))
  {
    if ((*((unsigned char *)v66 + 23) & 0x10) == 0) {
      goto LABEL_125;
    }
    uint64_t v74 = ***(void ***)v66;
    uint64_t v75 = *(void *)(v74 + 152);
    uint64_t v76 = *(unsigned int *)(v74 + 168);
    if (v76)
    {
      LODWORD(v77) = (v76 - 1) & ((v66 >> 4) ^ (v66 >> 9));
      unsigned int v78 = (llvm::Value **)(v75 + 16 * v77);
      unint64_t v79 = *v78;
      if (*v78 == v66)
      {
LABEL_118:
        int v105 = v78[1];
        unint64_t v108 = *(void *)v105;
        unint64_t v106 = (char *)v105 + 16;
        unint64_t v107 = v108;
        if (v108 >= 5 && *(_DWORD *)v106 == *(_DWORD *)"llvm." && v106[4] == aLlvm_1[4])
        {
          *((_DWORD *)v66 + 8) |= 0x2000u;
          int v110 = llvm::Function::lookupIntrinsicID(v106, v107);
LABEL_126:
          *((_DWORD *)v66 + 9) = v110;
          goto LABEL_89;
        }
LABEL_125:
        int v110 = 0;
        *((_DWORD *)v66 + 8) &= ~0x2000u;
        goto LABEL_126;
      }
      int v80 = 1;
      while (v79 != (llvm::Value *)-4096)
      {
        int v81 = v77 + v80++;
        uint64_t v77 = v81 & (v76 - 1);
        unint64_t v79 = *(llvm::Value **)(v75 + 16 * v77);
        if (v79 == v66)
        {
          unsigned int v78 = (llvm::Value **)(v75 + 16 * v77);
          goto LABEL_118;
        }
      }
    }
    unsigned int v78 = (llvm::Value **)(v75 + 16 * v76);
    goto LABEL_118;
  }
LABEL_89:
  __int16 v82 = *(_WORD *)(v62 + 18) & 0xFFFC | 1;
  *(_WORD *)(v62 + 18) = v82;
  if (!*(unsigned char *)(v17 + 16))
  {
    if (v17)
    {
      uint64_t v83 = *(void *)(v17 + 112);
      *(_WORD *)(v62 + 18) = (*(_WORD *)(v17 + 18) >> 2) & 0xFFC | v82 & 0xF001;
      if (!v83 || *(_DWORD *)(v83 + 8) < 2u || (uint64_t v88 = *(void *)(v83 + 48)) == 0 || (*(unsigned char *)(v88 + 14) & 8) == 0) {
        *(void *)(v17 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v17 + 112), **(uint64_t ***)v17, 0, 19);
      }
    }
  }
  return v66;
}

llvm::Value *llvm::CallInst::CreateMalloc(uint64_t a1, llvm::Type ***a2, llvm::PointerType *a3, uint64_t a4, llvm::Constant **this, uint64_t a6, uint64_t a7, uint64_t a8, const char **a9)
{
  return sub_1CC5CBD20(a1, 0, a2, a3, a4, this, a6, a7, a8, a9);
}

{
  return sub_1CC5CBD20(0, a1, a2, a3, a4, this, a6, a7, a8, a9);
}

uint64_t llvm::CallInst::CreateFree(llvm::CallInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  return sub_1CC5CC760(this, 0, 0, (uint64_t)a2, 0);
}

uint64_t sub_1CC5CC760(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a5;
  if (a4) {
    uint64_t v10 = *(void *)(a4 + 40);
  }
  uint64_t v11 = *(uint64_t ***)(*(void *)(v10 + 56) + 40);
  uint64_t v12 = **v11;
  uint64_t v13 = (uint64_t **)(v12 + 1576);
  unint64_t v14 = llvm::PointerType::get((llvm::PointerType *)(v12 + 1912), 0);
  uint64_t v15 = sub_1CD57B9C0((uint64_t)v11, "free", (const char *)4, 0, v13, v14);
  uint64_t v17 = v16;
  uint64_t v72 = a1;
  if (a4)
  {
    if (*a1 == v14)
    {
LABEL_11:
      __int16 v71 = 257;
      unsigned int v27 = (uint64_t **)v15;
      unsigned int v28 = (uint64_t **)v17;
      uint64_t v29 = a2;
      uint64_t v30 = a3;
      uint64_t v31 = a4;
      goto LABEL_16;
    }
    int v18 = (char *)operator new(0x60uLL);
    uint64_t v19 = (llvm::Value *)(v18 + 32);
    *(void *)int v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *((void *)v18 + 3) = v18 + 32;
    __int16 v71 = 257;
    *((void *)v18 + 4) = v14;
    *((void *)v18 + 5) = 0;
    *((void *)v18 + 6) = 0x10000004DLL;
    *(_OWORD *)(v18 + 56) = 0u;
    uint64_t v20 = v18 + 56;
    *(_OWORD *)(v18 + 72) = 0u;
    *((_DWORD *)v18 + 22) = 0;
    uint64_t v21 = *(void *)(a4 + 40);
    unsigned int v22 = (uint64_t *)(a4 + 24);
    *((void *)v18 + 9) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((v18[55] & 0x10) != 0
      && (uint64_t v37 = *(void *)(v21 + 56)) != 0
      && (uint64_t v38 = *(llvm::ValueSymbolTable **)(v37 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v38, v19);
      uint64_t v39 = *(void *)v18;
      uint64_t v40 = *v22;
      *((void *)v18 + 7) = *v22;
      *((void *)v18 + 8) = v22;
      *(void *)(v40 + 8) = v20;
      *unsigned int v22 = (uint64_t)v20;
      if (v39)
      {
        **((void **)v18 + 2) = *((void *)v18 + 1);
        uint64_t v41 = *((void *)v18 + 1);
        if (v41) {
          *(void *)(v41 + 16) = *((void *)v18 + 2);
        }
      }
    }
    else
    {
      uint64_t v23 = *v22;
      *((void *)v18 + 7) = *v22;
      *((void *)v18 + 8) = v22;
      *(void *)(v23 + 8) = v20;
      *unsigned int v22 = (uint64_t)v20;
    }
    *(void *)int v18 = a1;
    uint64_t v26 = a1[1];
    int v25 = a1 + 1;
    uint64_t v24 = v26;
    *((void *)v18 + 1) = v26;
    if (v26) {
      *(void *)(v24 + 16) = v18 + 8;
    }
    *((void *)v18 + 2) = v25;
    *int v25 = v18;
    llvm::Value::setNameImpl(v19, v70);
    if (v18[48])
    {
LABEL_10:
      uint64_t v72 = v18 + 32;
      goto LABEL_11;
    }
    if ((v18[55] & 0x10) == 0) {
      goto LABEL_47;
    }
    uint64_t v42 = ***(void ***)v19;
    uint64_t v43 = *(void *)(v42 + 152);
    uint64_t v44 = *(unsigned int *)(v42 + 168);
    if (v44)
    {
      LODWORD(v45) = (v44 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      uint64_t v46 = (llvm::Value **)(v43 + 16 * v45);
      size_t v47 = *v46;
      if (*v46 == v19)
      {
LABEL_40:
        uint64_t v58 = v46[1];
        unint64_t v61 = *(void *)v58;
        long long v59 = (char *)v58 + 16;
        unint64_t v60 = v61;
        if (v61 >= 5 && *(_DWORD *)v59 == *(_DWORD *)"llvm." && v59[4] == aLlvm_1[4])
        {
          *((_DWORD *)v18 + 16) |= 0x2000u;
          int v63 = llvm::Function::lookupIntrinsicID(v59, v60);
LABEL_48:
          *((_DWORD *)v18 + 17) = v63;
          goto LABEL_10;
        }
LABEL_47:
        int v63 = 0;
        *((_DWORD *)v18 + 16) &= ~0x2000u;
        goto LABEL_48;
      }
      int v48 = 1;
      while (v47 != (llvm::Value *)-4096)
      {
        int v49 = v45 + v48++;
        uint64_t v45 = v49 & (v44 - 1);
        size_t v47 = *(llvm::Value **)(v43 + 16 * v45);
        if (v47 == v19)
        {
          uint64_t v46 = (llvm::Value **)(v43 + 16 * v45);
          goto LABEL_40;
        }
      }
    }
    uint64_t v46 = (llvm::Value **)(v43 + 16 * v44);
    goto LABEL_40;
  }
  if (*a1 != v14)
  {
    uint64_t v32 = (char *)operator new(0x60uLL);
    *((_DWORD *)v32 + 13) = *((_DWORD *)v32 + 13) & 0x38000000 | 1;
    int v33 = (uint64_t ***)(v32 + 32);
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *((void *)v32 + 3) = v32 + 32;
    __int16 v71 = 257;
    int64_t v34 = sub_1CC5CEE04((llvm::Value *)(v32 + 32), v14, 49, (uint64_t)a1, a5);
    llvm::Value::setNameImpl(v34, v70);
    if (v32[48])
    {
LABEL_14:
      uint64_t v72 = v32 + 32;
      goto LABEL_15;
    }
    if ((v32[55] & 0x10) == 0) {
      goto LABEL_57;
    }
    uint64_t v50 = ***v33;
    uint64_t v51 = *(void *)(v50 + 152);
    uint64_t v52 = *(unsigned int *)(v50 + 168);
    if (v52)
    {
      LODWORD(v53) = (v52 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      int v54 = (uint64_t ****)(v51 + 16 * v53);
      char v55 = *v54;
      if (*v54 == v33)
      {
LABEL_50:
        uint64_t v64 = v54[1];
        unint64_t v67 = (unint64_t)*v64;
        uint64_t v65 = v64 + 2;
        unint64_t v66 = v67;
        if (v67 >= 5 && *(_DWORD *)v65 == *(_DWORD *)"llvm." && v65[4] == aLlvm_1[4])
        {
          *((_DWORD *)v32 + 16) |= 0x2000u;
          int v69 = llvm::Function::lookupIntrinsicID(v65, v66);
LABEL_58:
          *((_DWORD *)v32 + 17) = v69;
          goto LABEL_14;
        }
LABEL_57:
        int v69 = 0;
        *((_DWORD *)v32 + 16) &= ~0x2000u;
        goto LABEL_58;
      }
      int v56 = 1;
      while (v55 != (uint64_t ***)-4096)
      {
        int v57 = v53 + v56++;
        uint64_t v53 = v57 & (v52 - 1);
        char v55 = *(uint64_t ****)(v51 + 16 * v53);
        if (v55 == v33)
        {
          int v54 = (uint64_t ****)(v51 + 16 * v53);
          goto LABEL_50;
        }
      }
    }
    int v54 = (uint64_t ****)(v51 + 16 * v52);
    goto LABEL_50;
  }
LABEL_15:
  __int16 v71 = 257;
  unsigned int v27 = (uint64_t **)v15;
  unsigned int v28 = (uint64_t **)v17;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = 0;
LABEL_16:
  uint64_t result = sub_1CC19A3E0(v27, v28, (uint64_t *)&v72, 1, v29, v30, v70, v31);
  __int16 v36 = *(_WORD *)(result + 18) & 0xFFFC | 1;
  *(_WORD *)(result + 18) = v36;
  if (!*(unsigned char *)(v17 + 16))
  {
    if (v17) {
      *(_WORD *)(result + 18) = (*(_WORD *)(v17 + 18) >> 2) & 0xFFC | v36 & 0xF001;
    }
  }
  return result;
}

uint64_t llvm::CallInst::CreateFree(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC5CC760(a1, a2, a3, a4, 0);
}

{
  return sub_1CC5CC760(a1, a2, a3, 0, a4);
}

uint64_t llvm::CallInst::CreateFree(llvm::CallInst *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  return sub_1CC5CC760(this, 0, 0, 0, (uint64_t)a2);
}

uint64_t llvm::ReturnInst::ReturnInst(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(void *)uint64_t result = ***(void ***)a2 + 1576;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 29;
  *(unsigned char *)(result + 17) = 0;
  *(_WORD *)(result + 18) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | v2;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 0;
  uint64_t v3 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v3)
  {
    uint64_t v4 = -v2;
    uint64_t v5 = result - 32 * v2;
    uint64_t v6 = *(void *)(a2 - 32 * v3);
    if (*(void *)v5)
    {
      **(void **)(v5 + 16) = *(void *)(v5 + 8);
      uint64_t v11 = *(void *)(v5 + 8);
      if (v11) {
        *(void *)(v11 + 16) = *(void *)(v5 + 16);
      }
    }
    *(void *)uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v7 = (void *)(v6 + 8);
      uint64_t v8 = v9;
      uint64_t v10 = result + 32 * v4;
      *(void *)(v10 + 8) = v9;
      if (v9) {
        *(void *)(v8 + 16) = v10 + 8;
      }
      *(void *)(v10 + 16) = v7;
      void *v7 = v5;
    }
  }
  *(unsigned char *)(result + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(result + 17) & 1;
  return result;
}

llvm::ReturnInst *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v6 = *((_DWORD *)this + 5) & 0xC0000000 | (a3 != 0);
  *((_DWORD *)this + 4) = 29;
  *((_DWORD *)this + 5) = v6;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a4)
  {
    uint64_t v16 = *((void *)a4 + 5);
    uint64_t v17 = (uint64_t *)((char *)a4 + 24);
    *((void *)this + 5) = v16;
    *(_WORD *)(v16 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      if (v19)
      {
        uint64_t v20 = *(llvm::ValueSymbolTable **)(v19 + 104);
        if (v20) {
          llvm::ValueSymbolTable::reinsertValue(v20, this);
        }
      }
    }
    uint64_t v18 = *v17;
    *((void *)this + 3) = *v17;
    *((void *)this + 4) = v17;
    *(void *)(v18 + 8) = v7;
    uint64_t *v17 = (uint64_t)v7;
  }
  if (a3)
  {
    uint64_t v9 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    uint64_t v10 = -v9;
    uint64_t v11 = (void *)((char *)this - 32 * v9);
    if (*v11)
    {
      uint64_t v21 = (char *)this + 32 * v10;
      uint64_t v23 = (void *)*((void *)v21 + 2);
      unsigned int v22 = v21 + 16;
      *uint64_t v23 = *(v22 - 1);
      uint64_t v24 = *(v22 - 1);
      if (v24) {
        *(void *)(v24 + 16) = *v22;
      }
    }
    *uint64_t v11 = a3;
    uint64_t v14 = *((void *)a3 + 1);
    uint64_t v13 = (void *)((char *)a3 + 8);
    uint64_t v12 = v14;
    uint64_t v15 = (char *)this + 32 * v10;
    *((void *)v15 + 1) = v14;
    if (v14) {
      *(void *)(v12 + 16) = v15 + 8;
    }
    *((void *)v15 + 2) = v13;
    *uint64_t v13 = v11;
  }
  return this;
}

llvm::ReturnInst *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 29;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v10 = *((void *)a3 + 7);
    if (v10)
    {
      uint64_t v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11) {
        llvm::ValueSymbolTable::reinsertValue(v11, this);
      }
    }
  }
  uint64_t v8 = *((void *)a3 + 5);
  uint64_t v7 = (void *)((char *)a3 + 40);
  *((void *)this + 3) = v8;
  *((void *)this + 4) = v7;
  *(void *)(v8 + 8) = v6;
  void *v7 = v6;
  return this;
}

llvm::CatchReturnInst *llvm::CatchReturnInst::CatchReturnInst(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  *(void *)this = ***(void ***)a3 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 37;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a4;
  *((_WORD *)a4 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v12 = *((void *)a4 + 7);
    if (v12)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
  }
  uint64_t v10 = *((void *)a4 + 5);
  uint64_t v9 = (void *)((char *)a4 + 40);
  *((void *)this + 3) = v10;
  *((void *)this + 4) = v9;
  *(void *)(v10 + 8) = v8;
  *uint64_t v9 = v8;
  llvm::CatchReturnInst::init((uint64_t)this, a2, a3);
  return this;
}

llvm::CatchSwitchInst *llvm::CatchSwitchInst::CatchSwitchInst(llvm::CatchSwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, const char **a5, llvm::BasicBlock *a6)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 38;
  *((_DWORD *)this + 5) = v12;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v18 = *((void *)a6 + 7);
    if (v18)
    {
      uint64_t v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
      if (v19) {
        llvm::ValueSymbolTable::reinsertValue(v19, this);
      }
    }
  }
  uint64_t v15 = *((void *)a6 + 5);
  uint64_t v14 = (void *)((char *)a6 + 40);
  *((void *)this + 3) = v15;
  *((void *)this + 4) = v14;
  *(void *)(v15 + 8) = v13;
  *uint64_t v14 = v13;
  if (a3) {
    int v16 = a4 + 1;
  }
  else {
    int v16 = a4;
  }
  llvm::CatchSwitchInst::init(this, a2, a3, v16 + 1);
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v20 = ***(void ***)this;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v24 = v21 + 16 * v23;
      int v25 = *(llvm::CatchSwitchInst **)v24;
      if (*(llvm::CatchSwitchInst **)v24 == this)
      {
LABEL_18:
        unsigned int v28 = *(void **)(v24 + 8);
        unint64_t v31 = *v28;
        uint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_26:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_25:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_26;
      }
      int v26 = 1;
      while (v25 != (llvm::CatchSwitchInst *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        int v25 = *(llvm::CatchSwitchInst **)(v21 + 16 * v23);
        if (v25 == this)
        {
          uint64_t v24 = v21 + 16 * v23;
          goto LABEL_18;
        }
      }
    }
    uint64_t v24 = v21 + 16 * v22;
    goto LABEL_18;
  }
  return this;
}

void llvm::CatchSwitchInst::growOperands(llvm::CatchSwitchInst *this, int a2)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 & 0x7FFFFFFu) + a2)
  {
    uint64_t v5 = (a2 + 2 * v3) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v5;
    if ((v2 & 0x40000000) != 0) {
      unsigned int v6 = (uint64_t *)*((void *)this - 1);
    }
    else {
      unsigned int v6 = (uint64_t *)((char *)this - 32 * v3);
    }
    uint64_t v7 = operator new(32 * ((a2 + 2 * v3) & 0xFFFFFFFE));
    *((void *)this - 1) = v7;
    if (v5)
    {
      uint64_t v8 = v7;
      do
      {
        void *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = this;
        v8 += 4;
      }
      while (v8 != &v7[4 * v5]);
    }
    int v9 = *((_DWORD *)this + 5);
    if ((v9 & 0x40000000) != 0) {
      uint64_t v10 = (char *)v7;
    }
    else {
      uint64_t v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v14, v6, &v6[4 * v3], (uint64_t)v10);
    if (v3)
    {
      uint64_t v11 = 4 * v3;
      do
      {
        unsigned int v12 = &v6[v11];
        if (v6[v11 - 4])
        {
          *(void *)*(v12 - 2) = *(v12 - 3);
          uint64_t v13 = *(v12 - 3);
          if (v13) {
            *(void *)(v13 + 16) = *(v12 - 2);
          }
        }
        v11 -= 4;
      }
      while (v11 * 8);
    }
    operator delete(v6);
  }
}

llvm::Value *llvm::FuncletPadInst::FuncletPadInst(llvm::Value *a1, char a2, void *a3, uint64_t *a4, uint64_t a5, int a6, const char **a7, uint64_t a8)
{
  *(void *)a1 = *a3;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = a2 + 28;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v13 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a8)
  {
    uint64_t v15 = *(void *)(a8 + 40);
    int v16 = (uint64_t *)(a8 + 24);
    *((void *)a1 + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v18 = *(void *)(v15 + 56);
      if (v18)
      {
        uint64_t v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19) {
          llvm::ValueSymbolTable::reinsertValue(v19, a1);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)a1 + 3) = *v16;
    *((void *)a1 + 4) = v16;
    *(void *)(v17 + 8) = v13;
    *int v16 = (uint64_t)v13;
  }
  llvm::FuncletPadInst::init(a1, (uint64_t)a3, a4, a5, a7);
  return a1;
}

{
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;

  *(void *)a1 = *a3;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = a2 + 28;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  char v14 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v18 = *(void *)(a8 + 56);
    if (v18)
    {
      uint64_t v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
      if (v19) {
        llvm::ValueSymbolTable::reinsertValue(v19, a1);
      }
    }
  }
  int v16 = *(void *)(a8 + 40);
  uint64_t v15 = (void *)(a8 + 40);
  *((void *)a1 + 3) = v16;
  *((void *)a1 + 4) = v15;
  *(void *)(v16 + 8) = v14;
  char *v15 = v14;
  llvm::FuncletPadInst::init(a1, (uint64_t)a3, a4, a5, a7);
  return a1;
}

llvm::UnreachableInst *llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::Instruction *a3)
{
  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v4 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    uint64_t v7 = *((void *)a3 + 5);
    uint64_t v8 = (uint64_t *)((char *)a3 + 24);
    *((void *)this + 5) = v7;
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v10 = *(void *)(v7 + 56);
      if (v10)
      {
        uint64_t v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
        if (v11) {
          llvm::ValueSymbolTable::reinsertValue(v11, this);
        }
      }
    }
    uint64_t v9 = *v8;
    *((void *)this + 3) = *v8;
    *((void *)this + 4) = v8;
    *(void *)(v9 + 8) = v5;
    uint64_t *v8 = (uint64_t)v5;
  }
  return this;
}

{
  unsigned int v4;
  char *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v4 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    uint64_t v7 = *((void *)a3 + 5);
    uint64_t v8 = (uint64_t *)((char *)a3 + 24);
    *((void *)this + 5) = v7;
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v10 = *(void *)(v7 + 56);
      if (v10)
      {
        uint64_t v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
        if (v11) {
          llvm::ValueSymbolTable::reinsertValue(v11, this);
        }
      }
    }
    uint64_t v9 = *v8;
    *((void *)this + 3) = *v8;
    *((void *)this + 4) = v8;
    *(void *)(v9 + 8) = v5;
    uint64_t *v8 = (uint64_t)v5;
  }
  return this;
}

llvm::UnreachableInst *llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v10 = *((void *)a3 + 7);
    if (v10)
    {
      uint64_t v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11) {
        llvm::ValueSymbolTable::reinsertValue(v11, this);
      }
    }
  }
  uint64_t v8 = *((void *)a3 + 5);
  uint64_t v7 = (void *)((char *)a3 + 40);
  *((void *)this + 3) = v8;
  *((void *)this + 4) = v7;
  *(void *)(v8 + 8) = v6;
  void *v7 = v6;
  return this;
}

{
  unsigned int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(void *)this = *(void *)a2 + 1576;
  *((void *)this + 1) = 0;
  unsigned int v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v10 = *((void *)a3 + 7);
    if (v10)
    {
      uint64_t v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11) {
        llvm::ValueSymbolTable::reinsertValue(v11, this);
      }
    }
  }
  uint64_t v8 = *((void *)a3 + 5);
  uint64_t v7 = (void *)((char *)a3 + 40);
  *((void *)this + 3) = v8;
  *((void *)this + 4) = v7;
  *(void *)(v8 + 8) = v6;
  void *v7 = v6;
  return this;
}

llvm::Instruction *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  unsigned int v4 = (char *)this - 32;
  uint64_t result = llvm::Instruction::Instruction(this, (llvm::Type *)(***(void ***)a2 + 1576), 2, (llvm::BranchInst *)((char *)this - 32), 1, a3);
  if (*((void *)result - 4))
  {
    **((void **)result - 2) = *((void *)result - 3);
    uint64_t v9 = *((void *)result - 3);
    if (v9) {
      *(void *)(v9 + 16) = *((void *)result - 2);
    }
  }
  *((void *)result - 4) = a2;
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v7 = (void *)((char *)a2 + 8);
  uint64_t v6 = v8;
  *((void *)result - 3) = v8;
  if (v8) {
    *(void *)(v6 + 16) = (char *)result - 24;
  }
  *((void *)result - 2) = v7;
  void *v7 = v4;
  return result;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  unsigned int v5 = (void *)((char *)this - 32);
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 30;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    uint64_t v11 = *((void *)a3 + 5);
    unsigned int v12 = (uint64_t *)((char *)a3 + 24);
    *((void *)this + 5) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v14 = *(void *)(v11 + 56);
      if (v14)
      {
        uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15) {
          llvm::ValueSymbolTable::reinsertValue(v15, this);
        }
      }
    }
    uint64_t v13 = *v12;
    *((void *)this + 3) = *v12;
    *((void *)this + 4) = v12;
    *(void *)(v13 + 8) = v6;
    uint64_t *v12 = (uint64_t)v6;
  }
  if (*v5)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v16 = *((void *)this - 3);
    if (v16) {
      *(void *)(v16 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v8 = (void *)((char *)a2 + 8);
  uint64_t v7 = v9;
  *((void *)this - 3) = v9;
  if (v9) {
    *(void *)(v7 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v8;
  void *v8 = v5;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  uint64_t v9 = (void *)((char *)this - 96);
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 30;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v22 = *((void *)a5 + 5);
    uint64_t v23 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v25 = *(void *)(v22 + 56);
      if (v25)
      {
        int v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26) {
          llvm::ValueSymbolTable::reinsertValue(v26, this);
        }
      }
    }
    uint64_t v24 = *v23;
    *((void *)this + 3) = *v23;
    *((void *)this + 4) = v23;
    *(void *)(v24 + 8) = v10;
    *uint64_t v23 = (uint64_t)v10;
  }
  if (*v9)
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v27 = *((void *)this - 11);
    if (v27) {
      *(void *)(v27 + 16) = *((void *)this - 10);
    }
  }
  *uint64_t v9 = a4;
  if (a4)
  {
    uint64_t v13 = *((void *)a4 + 1);
    unsigned int v12 = (void *)((char *)a4 + 8);
    uint64_t v11 = v13;
    *((void *)this - 11) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 88;
    }
    *((void *)this - 10) = v12;
    void *v12 = v9;
  }
  uint64_t v14 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v28 = *((void *)this - 7);
    if (v28) {
      *(void *)(v28 + 16) = *((void *)this - 6);
    }
  }
  *uint64_t v14 = a3;
  if (a3)
  {
    uint64_t v17 = *((void *)a3 + 1);
    uint64_t v16 = (void *)((char *)a3 + 8);
    uint64_t v15 = v17;
    *((void *)this - 7) = v17;
    if (v17) {
      *(void *)(v15 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v16;
    *uint64_t v16 = v14;
  }
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v29 = *((void *)this - 3);
    if (v29) {
      *(void *)(v29 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v20 = *((void *)a2 + 1);
  uint64_t v19 = (void *)((char *)a2 + 8);
  uint64_t v18 = v20;
  *((void *)this - 3) = v20;
  if (v20) {
    *(void *)(v18 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v19;
  void *v19 = (char *)this - 32;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 30;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v13 = *((void *)a3 + 7);
    if (v13)
    {
      uint64_t v14 = *(llvm::ValueSymbolTable **)(v13 + 104);
      if (v14) {
        llvm::ValueSymbolTable::reinsertValue(v14, this);
      }
    }
  }
  uint64_t v8 = *((void *)a3 + 5);
  uint64_t v7 = (void *)((char *)a3 + 40);
  *((void *)this + 3) = v8;
  *((void *)this + 4) = v7;
  *(void *)(v8 + 8) = v6;
  void *v7 = v6;
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v15 = *((void *)this - 3);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v10 = (void *)((char *)a2 + 8);
  uint64_t v9 = v11;
  *((void *)this - 3) = v11;
  if (v11) {
    *(void *)(v9 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v10;
  *uint64_t v10 = (char *)this - 32;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::BasicBlock *a5)
{
  uint64_t v10 = (void *)((char *)this - 96);
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 30;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v11 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a5;
  *((_WORD *)a5 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v25 = *((void *)a5 + 7);
    if (v25)
    {
      int v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
      if (v26) {
        llvm::ValueSymbolTable::reinsertValue(v26, this);
      }
    }
  }
  uint64_t v13 = *((void *)a5 + 5);
  unsigned int v12 = (void *)((char *)a5 + 40);
  *((void *)this + 3) = v13;
  *((void *)this + 4) = v12;
  *(void *)(v13 + 8) = v11;
  void *v12 = v11;
  if (*((void *)this - 12))
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v27 = *((void *)this - 11);
    if (v27) {
      *(void *)(v27 + 16) = *((void *)this - 10);
    }
  }
  *uint64_t v10 = a4;
  if (a4)
  {
    uint64_t v16 = *((void *)a4 + 1);
    uint64_t v15 = (void *)((char *)a4 + 8);
    uint64_t v14 = v16;
    *((void *)this - 11) = v16;
    if (v16) {
      *(void *)(v14 + 16) = (char *)this - 88;
    }
    *((void *)this - 10) = v15;
    void *v15 = v10;
  }
  uint64_t v17 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v28 = *((void *)this - 7);
    if (v28) {
      *(void *)(v28 + 16) = *((void *)this - 6);
    }
  }
  void *v17 = a3;
  if (a3)
  {
    uint64_t v20 = *((void *)a3 + 1);
    uint64_t v19 = (void *)((char *)a3 + 8);
    uint64_t v18 = v20;
    *((void *)this - 7) = v20;
    if (v20) {
      *(void *)(v18 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v19;
    void *v19 = v17;
  }
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v29 = *((void *)this - 3);
    if (v29) {
      *(void *)(v29 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v23 = *((void *)a2 + 1);
  uint64_t v22 = (void *)((char *)a2 + 8);
  uint64_t v21 = v23;
  *((void *)this - 3) = v23;
  if (v23) {
    *(void *)(v21 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v22;
  *uint64_t v22 = (char *)this - 32;
  return this;
}

uint64_t llvm::BranchInst::BranchInst(uint64_t this, const llvm::BranchInst *a2)
{
  int v2 = *((_DWORD *)a2 + 5);
  *(void *)this = ***(void ***)a2 + 1576;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 30;
  *(unsigned char *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xC0000000 | v2 & 0x7FFFFFF;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_DWORD *)(this + 56) = 0;
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 1)
  {
    uint64_t v3 = (void *)(this - 96);
    uint64_t v4 = *((void *)a2 - 12);
    if (*(void *)(this - 96))
    {
      **(void **)(this - 80) = *(void *)(this - 88);
      uint64_t v19 = *(void *)(this - 88);
      if (v19) {
        *(void *)(v19 + 16) = *(void *)(this - 80);
      }
    }
    *uint64_t v3 = v4;
    if (v4)
    {
      uint64_t v7 = *(void *)(v4 + 8);
      unsigned int v5 = (void *)(v4 + 8);
      uint64_t v6 = v7;
      *(void *)(this - 88) = v7;
      if (v7) {
        *(void *)(v6 + 16) = this - 88;
      }
      *(void *)(this - 80) = v5;
      *unsigned int v5 = v3;
    }
    uint64_t v8 = (void *)(this - 64);
    uint64_t v9 = *((void *)a2 - 8);
    if (*(void *)(this - 64))
    {
      **(void **)(this - 48) = *(void *)(this - 56);
      uint64_t v20 = *(void *)(this - 56);
      if (v20) {
        *(void *)(v20 + 16) = *(void *)(this - 48);
      }
    }
    void *v8 = v9;
    if (v9)
    {
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = (void *)(v9 + 8);
      uint64_t v11 = v12;
      *(void *)(this - 56) = v12;
      if (v12) {
        *(void *)(v11 + 16) = this - 56;
      }
      *(void *)(this - 48) = v10;
      *uint64_t v10 = v8;
    }
  }
  uint64_t v13 = (void *)(this - 32);
  uint64_t v14 = *((void *)a2 - 4);
  if (*(void *)(this - 32))
  {
    **(void **)(this - 16) = *(void *)(this - 24);
    uint64_t v18 = *(void *)(this - 24);
    if (v18) {
      *(void *)(v18 + 16) = *(void *)(this - 16);
    }
  }
  *uint64_t v13 = v14;
  if (v14)
  {
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v15 = (void *)(v14 + 8);
    uint64_t v16 = v17;
    *(void *)(this - 24) = v17;
    if (v17) {
      *(void *)(v16 + 16) = this - 24;
    }
    *(void *)(this - 16) = v15;
    void *v15 = v13;
  }
  *(unsigned char *)(this + 17) = *((unsigned char *)a2 + 17) & 0xFE | *(unsigned char *)(this + 17) & 1;
  return this;
}

void llvm::BranchInst::swapSuccessors(llvm::Instruction *this)
{
  uint64_t v1 = *((void *)this - 4);
  uint64_t v2 = *((void *)this - 8);
  if (v1 != v2)
  {
    uint64_t v3 = (char *)this - 56;
    uint64_t v4 = *((void *)this - 7);
    *((void *)v3 + 3) = v2;
    *((void *)this - 8) = v1;
    long long v5 = *(_OWORD *)((char *)this - 24);
    uint64_t v6 = (void *)*((void *)this - 6);
    *((void *)this - 3) = v4;
    *((void *)v3 + 5) = v6;
    *(_OWORD *)uint64_t v3 = v5;
    *uint64_t v6 = (char *)this - 32;
    uint64_t v7 = *((void *)this - 3);
    if (v7) {
      *(void *)(v7 + 16) = (char *)this - 24;
    }
    **((void **)this - 6) = (char *)this - 64;
    uint64_t v8 = *((void *)this - 7);
    if (v8) {
      *(void *)(v8 + 16) = v3;
    }
  }
  llvm::Instruction::swapProfMetadata(this);
}

llvm::AllocaInst *llvm::AllocaInst::AllocaInst(llvm::AllocaInst *this, llvm::Type *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  return llvm::AllocaInst::AllocaInst(this, a2, a3, 0, a4, a5);
}

{
  return llvm::AllocaInst::AllocaInst(this, a2, a3, 0, a4, a5);
}

llvm::AllocaInst *llvm::AllocaInst::AllocaInst(llvm::AllocaInst *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4, const char **a5, llvm::Instruction *a6)
{
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a6 + 5) + 56) + 40) + 272), a2, 0);
  unint64_t v14 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    uint64_t v15 = **(void **)a2;
    uint64_t v16 = *(llvm::ConstantInt **)(v15 + 1960);
    unsigned int v17 = *(_DWORD *)(v15 + 1968);
    unsigned int v47 = v17 >> 8;
    if (v17 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
    if (v17 <= 0xFF) {
      LOBYTE(v18) = 0;
    }
    unint64_t v46 = v18 & 1;
    a4 = (llvm::Value *)llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v46, v13);
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  uint64_t v19 = (void *)((char *)this - 32);
  *(void *)this = v14;
  *((void *)this + 1) = 0;
  unsigned int v20 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 59;
  *((_DWORD *)this + 5) = v20;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v21 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v22 = *((void *)a6 + 5);
  uint64_t v23 = (uint64_t *)((char *)a6 + 24);
  *((void *)this + 5) = v22;
  *(_WORD *)(v22 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v29 = *(void *)(v22 + 56);
    if (v29)
    {
      unint64_t v30 = *(llvm::ValueSymbolTable **)(v29 + 104);
      if (v30) {
        llvm::ValueSymbolTable::reinsertValue(v30, this);
      }
    }
  }
  uint64_t v24 = *v23;
  *((void *)this + 3) = *v23;
  *((void *)this + 4) = v23;
  *(void *)(v24 + 8) = v21;
  *uint64_t v23 = (uint64_t)v21;
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v45 = *((void *)this - 3);
    if (v45) {
      *(void *)(v45 + 16) = *((void *)this - 2);
    }
  }
  void *v19 = a4;
  if (a4)
  {
    uint64_t v27 = *((void *)a4 + 1);
    int v26 = (void *)((char *)a4 + 8);
    uint64_t v25 = v27;
    *((void *)this - 3) = v27;
    if (v27) {
      *(void *)(v25 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v26;
    *int v26 = v19;
  }
  *((void *)this + 8) = a2;
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFC0 | Alignment;
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_32;
    }
    uint64_t v31 = ***(void ***)this;
    uint64_t v32 = *(void *)(v31 + 152);
    uint64_t v33 = *(unsigned int *)(v31 + 168);
    if (v33)
    {
      LODWORD(v34) = (v33 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v35 = v32 + 16 * v34;
      __int16 v36 = *(llvm::AllocaInst **)v35;
      if (*(llvm::AllocaInst **)v35 == this)
      {
LABEL_25:
        uint64_t v39 = *(void **)(v35 + 8);
        unint64_t v42 = *v39;
        uint64_t v40 = v39 + 2;
        unint64_t v41 = v42;
        if (v42 >= 5 && *(_DWORD *)v40 == *(_DWORD *)"llvm." && v40[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v44 = llvm::Function::lookupIntrinsicID(v40, v41);
LABEL_33:
          *((_DWORD *)this + 9) = v44;
          return this;
        }
LABEL_32:
        int v44 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v37 = 1;
      while (v36 != (llvm::AllocaInst *)-4096)
      {
        int v38 = v34 + v37++;
        uint64_t v34 = v38 & (v33 - 1);
        __int16 v36 = *(llvm::AllocaInst **)(v32 + 16 * v34);
        if (v36 == this)
        {
          uint64_t v35 = v32 + 16 * v34;
          goto LABEL_25;
        }
      }
    }
    uint64_t v35 = v32 + 16 * v33;
    goto LABEL_25;
  }
  return this;
}

{
  unsigned __int8 Alignment;
  const llvm::APInt *v13;
  unint64_t v14;
  void *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::AllocaInst *v36;
  int v37;
  int v38;
  void *v39;
  unsigned char *v40;
  unint64_t v41;
  unint64_t v42;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;

  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a6 + 5) + 56) + 40) + 272), a2, 0);
  unint64_t v14 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    uint64_t v25 = **(void **)a2;
    int v26 = *(llvm::ConstantInt **)(v25 + 1960);
    uint64_t v27 = *(_DWORD *)(v25 + 1968);
    unsigned int v47 = v27 >> 8;
    if (v27 >> 8 > 0x40) {
      operator new[]();
    }
    uint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v27) + 63);
    if (v27 <= 0xFF) {
      LOBYTE(v28) = 0;
    }
    unint64_t v46 = v28 & 1;
    a4 = (llvm::Value *)llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v46, v13);
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  uint64_t v15 = (void *)((char *)this - 32);
  *(void *)this = v14;
  *((void *)this + 1) = 0;
  uint64_t v16 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 59;
  *((_DWORD *)this + 5) = v16;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v17 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  unint64_t v18 = *((void *)a6 + 5);
  uint64_t v19 = (uint64_t *)((char *)a6 + 24);
  *((void *)this + 5) = v18;
  *(_WORD *)(v18 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v29 = *(void *)(v18 + 56);
    if (v29)
    {
      unint64_t v30 = *(llvm::ValueSymbolTable **)(v29 + 104);
      if (v30) {
        llvm::ValueSymbolTable::reinsertValue(v30, this);
      }
    }
  }
  unsigned int v20 = *v19;
  *((void *)this + 3) = *v19;
  *((void *)this + 4) = v19;
  *(void *)(v20 + 8) = v17;
  void *v19 = (uint64_t)v17;
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v45 = *((void *)this - 3);
    if (v45) {
      *(void *)(v45 + 16) = *((void *)this - 2);
    }
  }
  void *v15 = a4;
  if (a4)
  {
    uint64_t v23 = *((void *)a4 + 1);
    uint64_t v22 = (void *)((char *)a4 + 8);
    uint64_t v21 = v23;
    *((void *)this - 3) = v23;
    if (v23) {
      *(void *)(v21 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v22;
    *uint64_t v22 = v15;
  }
  *((void *)this + 8) = a2;
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFC0 | Alignment;
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_34;
    }
    uint64_t v31 = ***(void ***)this;
    uint64_t v32 = *(void *)(v31 + 152);
    uint64_t v33 = *(unsigned int *)(v31 + 168);
    if (v33)
    {
      LODWORD(v34) = (v33 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v35 = v32 + 16 * v34;
      __int16 v36 = *(llvm::AllocaInst **)v35;
      if (*(llvm::AllocaInst **)v35 == this)
      {
LABEL_26:
        uint64_t v39 = *(void **)(v35 + 8);
        unint64_t v42 = *v39;
        uint64_t v40 = v39 + 2;
        unint64_t v41 = v42;
        if (v42 >= 5 && *(_DWORD *)v40 == *(_DWORD *)"llvm." && v40[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v44 = llvm::Function::lookupIntrinsicID(v40, v41);
LABEL_33:
          *((_DWORD *)this + 9) = v44;
          return this;
        }
LABEL_34:
        int v44 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v37 = 1;
      while (v36 != (llvm::AllocaInst *)-4096)
      {
        int v38 = v34 + v37++;
        uint64_t v34 = v38 & (v33 - 1);
        __int16 v36 = *(llvm::AllocaInst **)(v32 + 16 * v34);
        if (v36 == this)
        {
          uint64_t v35 = v32 + 16 * v34;
          goto LABEL_26;
        }
      }
    }
    uint64_t v35 = v32 + 16 * v33;
    goto LABEL_26;
  }
  return this;
}

llvm::Value *llvm::AllocaInst::AllocaInst(llvm::AllocaInst *this, llvm::Type *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a5 + 7) + 40) + 272), a2, 0);

  return llvm::AllocaInst::AllocaInst(this, a2, a3, 0, Alignment, a4, (uint64_t)a5);
}

{
  unsigned __int8 Alignment;
  uint64_t vars8;

  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a5 + 7) + 40) + 272), a2, 0);

  return llvm::AllocaInst::AllocaInst(this, a2, a3, 0, Alignment, a4, (uint64_t)a5);
}

llvm::Value *llvm::AllocaInst::AllocaInst(llvm::AllocaInst *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4, const char **a5, llvm::BasicBlock *a6)
{
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a6 + 7) + 40) + 272), a2, 0);

  return llvm::AllocaInst::AllocaInst(this, a2, a3, a4, Alignment, a5, (uint64_t)a6);
}

{
  unsigned __int8 Alignment;
  uint64_t vars8;

  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a6 + 7) + 40) + 272), a2, 0);

  return llvm::AllocaInst::AllocaInst(this, a2, a3, a4, Alignment, a5, (uint64_t)a6);
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType *this, llvm::Type *a3, void *a4, unsigned __int8 a5, const char **a6, llvm::Instruction *a7)
{
  uint64_t v13 = (llvm::Type *)llvm::PointerType::get(this, a3);
  if (!a4) {
    a4 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)this + 1960), 1uLL, 0);
  }
  unint64_t v14 = (void *)(a1 - 32);
  llvm::Instruction::Instruction((llvm::Instruction *)a1, v13, 31, (llvm::Use *)(a1 - 32), 1, a7);
  if (*(void *)(a1 - 32))
  {
    **(void **)(a1 - 16) = *(void *)(a1 - 24);
    uint64_t v19 = *(void *)(a1 - 24);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(a1 - 16);
    }
  }
  *unint64_t v14 = a4;
  if (a4)
  {
    uint64_t v17 = a4[1];
    uint64_t v16 = a4 + 1;
    uint64_t v15 = v17;
    *(void *)(a1 - 24) = v17;
    if (v17) {
      *(void *)(v15 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v16;
    *uint64_t v16 = v14;
  }
  *(void *)(a1 + 64) = this;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName((llvm::Value *)a1, a6);
  return a1;
}

unint64_t *llvm::AllocaInst::AllocaInst(unint64_t *a1, llvm::PointerType *this, llvm::Type *a3, void *a4, unsigned __int8 a5, const char **a6, uint64_t a7)
{
  unint64_t v14 = llvm::PointerType::get(this, a3);
  if (!a4)
  {
    uint64_t v22 = **(void **)this;
    uint64_t v23 = *(llvm::ConstantInt **)(v22 + 1960);
    unsigned int v24 = *(_DWORD *)(v22 + 1968);
    unsigned int v47 = v24 >> 8;
    if (v24 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v24) + 63);
    if (v24 <= 0xFF) {
      LOBYTE(v25) = 0;
    }
    unint64_t v46 = v25 & 1;
    a4 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v46, v13);
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  uint64_t v15 = a1 - 4;
  *a1 = v14;
  a1[1] = 0;
  unsigned int v16 = *((_DWORD *)a1 + 5) & 0xC0000000 | 1;
  *((_DWORD *)a1 + 4) = 59;
  *((_DWORD *)a1 + 5) = v16;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v17 = (void ***)(a1 + 3);
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a7)
  {
    unint64_t v26 = *(void *)(a7 + 40);
    uint64_t v27 = (void *)(a7 + 24);
    a1[5] = v26;
    *(_WORD *)(v26 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v43 = *(void *)(v26 + 56);
      if (v43)
      {
        int v44 = *(llvm::ValueSymbolTable **)(v43 + 104);
        if (v44) {
          llvm::ValueSymbolTable::reinsertValue(v44, (llvm::Value *)a1);
        }
      }
    }
    uint64_t v28 = (void *)*v27;
    a1[3] = *v27;
    a1[4] = (unint64_t)v27;
    v28[1] = v17;
    *uint64_t v27 = v17;
  }
  if (*v15)
  {
    *(void *)*(a1 - 2) = *(a1 - 3);
    uint64_t v45 = *(a1 - 3);
    if (v45) {
      *(void *)(v45 + 16) = *(a1 - 2);
    }
  }
  unint64_t *v15 = (unint64_t)a4;
  if (a4)
  {
    unsigned int v20 = (void **)a4[1];
    uint64_t v19 = (unint64_t **)(a4 + 1);
    unint64_t v18 = v20;
    *(a1 - 3) = (unint64_t)v20;
    if (v20) {
      v18[2] = a1 - 3;
    }
    *(a1 - 2) = (unint64_t)v19;
    void *v19 = v15;
  }
  a1[8] = (unint64_t)this;
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFFC0 | a5;
  llvm::Value::setNameImpl((llvm::Value *)a1, a6);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_33;
    }
    uint64_t v29 = **(void **)*a1;
    uint64_t v30 = *(void *)(v29 + 152);
    uint64_t v31 = *(unsigned int *)(v29 + 168);
    if (v31)
    {
      LODWORD(v32) = (v31 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v33 = (unint64_t **)(v30 + 16 * v32);
      uint64_t v34 = *v33;
      if (*v33 == a1)
      {
LABEL_25:
        int v37 = v33[1];
        unint64_t v40 = *v37;
        int v38 = v37 + 2;
        unint64_t v39 = v40;
        if (v40 >= 5 && *(_DWORD *)v38 == *(_DWORD *)"llvm." && v38[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v42 = llvm::Function::lookupIntrinsicID(v38, v39);
LABEL_32:
          *((_DWORD *)a1 + 9) = v42;
          return a1;
        }
LABEL_33:
        int v42 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_32;
      }
      int v35 = 1;
      while (v34 != (unint64_t *)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        uint64_t v34 = *(unint64_t **)(v30 + 16 * v32);
        if (v34 == a1)
        {
          uint64_t v33 = (unint64_t **)(v30 + 16 * v32);
          goto LABEL_25;
        }
      }
    }
    uint64_t v33 = (unint64_t **)(v30 + 16 * v31);
    goto LABEL_25;
  }
  return a1;
}

llvm::Value *llvm::AllocaInst::AllocaInst(llvm::Value *a1, llvm::PointerType *this, llvm::Type *a3, void *a4, unsigned __int8 a5, const char **a6, uint64_t a7)
{
  unint64_t v14 = llvm::PointerType::get(this, a3);
  if (!a4)
  {
    uint64_t v15 = **(void **)this;
    unsigned int v16 = *(llvm::ConstantInt **)(v15 + 1960);
    unsigned int v17 = *(_DWORD *)(v15 + 1968);
    unsigned int v36 = v17 >> 8;
    if (v17 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
    if (v17 <= 0xFF) {
      LOBYTE(v18) = 0;
    }
    unint64_t v35 = v18 & 1;
    a4 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v35, v13);
    if (v36 >= 0x41 && v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
  }
  uint64_t v19 = sub_1CC5CEE04(a1, v14, 31, (uint64_t)a4, a7);
  *((void *)a1 + 8) = this;
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFFC0 | a5;
  llvm::Value::setNameImpl(v19, a6);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v21 = ***(void ***)a1;
    uint64_t v22 = *(void *)(v21 + 152);
    uint64_t v23 = *(unsigned int *)(v21 + 168);
    if (v23)
    {
      LODWORD(v24) = (v23 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      unint64_t v25 = (llvm::Value **)(v22 + 16 * v24);
      unint64_t v26 = *v25;
      if (*v25 == a1)
      {
LABEL_17:
        uint64_t v29 = v25[1];
        unint64_t v32 = *(void *)v29;
        uint64_t v30 = (char *)v29 + 16;
        unint64_t v31 = v32;
        if (v32 >= 5 && *(_DWORD *)v30 == *(_DWORD *)"llvm." && v30[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v34 = llvm::Function::lookupIntrinsicID(v30, v31);
LABEL_25:
          *((_DWORD *)a1 + 9) = v34;
          return a1;
        }
LABEL_24:
        int v34 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v27 = 1;
      while (v26 != (llvm::Value *)-4096)
      {
        int v28 = v24 + v27++;
        uint64_t v24 = v28 & (v23 - 1);
        unint64_t v26 = *(llvm::Value **)(v22 + 16 * v24);
        if (v26 == a1)
        {
          unint64_t v25 = (llvm::Value **)(v22 + 16 * v24);
          goto LABEL_17;
        }
      }
    }
    unint64_t v25 = (llvm::Value **)(v22 + 16 * v23);
    goto LABEL_17;
  }
  return a1;
}

llvm::Value *llvm::AllocaInst::AllocaInst(llvm::Value *a1, llvm::PointerType *a2, llvm::Type *a3, void *a4, unsigned __int8 a5, const char **a6, uint64_t a7)
{
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, a4, a5, a6, a7);
}

llvm::Value *sub_1CC5CEE04(llvm::Value *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)((char *)a1 - 32);
  *(void *)a1 = a2;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = a3 + 28;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v9 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v16 = *(void *)(a5 + 56);
    if (v16)
    {
      unsigned int v17 = *(llvm::ValueSymbolTable **)(v16 + 104);
      if (v17) {
        llvm::ValueSymbolTable::reinsertValue(v17, a1);
      }
    }
  }
  uint64_t v11 = *(void *)(a5 + 40);
  uint64_t v10 = (void *)(a5 + 40);
  *((void *)a1 + 3) = v11;
  *((void *)a1 + 4) = v10;
  *(void *)(v11 + 8) = v9;
  *uint64_t v10 = v9;
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v18 = *((void *)a1 - 3);
    if (v18) {
      *(void *)(v18 + 16) = *((void *)a1 - 2);
    }
  }
  void *v8 = a4;
  if (a4)
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v13 = (void *)(a4 + 8);
    uint64_t v12 = v14;
    *((void *)a1 - 3) = v14;
    if (v14) {
      *(void *)(v12 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v13;
    *uint64_t v13 = v8;
  }
  return a1;
}

BOOL llvm::AllocaInst::isStaticAlloca(llvm::AllocaInst *this)
{
  if (*(unsigned char *)(*((void *)this - 4) + 16) == 16
    && ((uint64_t v1 = *((void *)this + 5), (v2 = *(void *)(*(void *)(v1 + 56) + 80)) != 0) ? (v3 = v2 - 24) : (v3 = 0),
        v1 == v3))
  {
    return (*((_WORD *)this + 9) & 0x40) == 0;
  }
  else
  {
    return 0;
  }
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const char **a4, llvm::Instruction *a5)
{
  return llvm::LoadInst::LoadInst(this, a2, a3, a4, 0, a5);
}

{
  return llvm::LoadInst::LoadInst(this, a2, a3, a4, 0, a5);
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const char **a4, __int16 a5, llvm::Instruction *a6)
{
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a6 + 5) + 56) + 40) + 272), a2, 1);
  uint64_t v13 = (void *)((char *)this - 32);
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v14 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v14;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v15 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v16 = *((void *)a6 + 5);
  unsigned int v17 = (uint64_t *)((char *)a6 + 24);
  *((void *)this + 5) = v16;
  *(_WORD *)(v16 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(v16 + 56);
    if (v23)
    {
      uint64_t v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, this);
      }
    }
  }
  uint64_t v18 = *v17;
  *((void *)this + 3) = *v17;
  *((void *)this + 4) = v17;
  *(void *)(v18 + 8) = v15;
  uint64_t *v17 = (uint64_t)v15;
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v39 = *((void *)this - 3);
    if (v39) {
      *(void *)(v39 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v13 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    unsigned int v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v13;
  }
  *((_WORD *)this + 9) = a5 & 0xFF81 | (2 * (Alignment & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_27;
    }
    uint64_t v25 = ***(void ***)this;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(llvm::LoadInst **)v29;
      if (*(llvm::LoadInst **)v29 == this)
      {
LABEL_20:
        uint64_t v33 = *(void **)(v29 + 8);
        unint64_t v36 = *v33;
        int v34 = v33 + 2;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_28:
          *((_DWORD *)this + 9) = v38;
          return this;
        }
LABEL_27:
        int v38 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_28;
      }
      int v31 = 1;
      while (v30 != (llvm::LoadInst *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(llvm::LoadInst **)(v26 + 16 * v28);
        if (v30 == this)
        {
          uint64_t v29 = v26 + 16 * v28;
          goto LABEL_20;
        }
      }
    }
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_20;
  }
  return this;
}

{
  char Alignment;
  void *v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::LoadInst *v30;
  int v31;
  int v32;
  void *v33;
  unsigned char *v34;
  unint64_t v35;
  unint64_t v36;
  int v38;
  uint64_t v39;

  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a6 + 5) + 56) + 40) + 272), a2, 1);
  uint64_t v13 = (void *)((char *)this - 32);
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v14 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v14;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v15 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v16 = *((void *)a6 + 5);
  unsigned int v17 = (uint64_t *)((char *)a6 + 24);
  *((void *)this + 5) = v16;
  *(_WORD *)(v16 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(v16 + 56);
    if (v23)
    {
      uint64_t v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, this);
      }
    }
  }
  uint64_t v18 = *v17;
  *((void *)this + 3) = *v17;
  *((void *)this + 4) = v17;
  *(void *)(v18 + 8) = v15;
  uint64_t *v17 = (uint64_t)v15;
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v39 = *((void *)this - 3);
    if (v39) {
      *(void *)(v39 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v13 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    unsigned int v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v13;
  }
  *((_WORD *)this + 9) = a5 & 0xFF81 | (2 * (Alignment & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_27;
    }
    uint64_t v25 = ***(void ***)this;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(llvm::LoadInst **)v29;
      if (*(llvm::LoadInst **)v29 == this)
      {
LABEL_19:
        uint64_t v33 = *(void **)(v29 + 8);
        unint64_t v36 = *v33;
        int v34 = v33 + 2;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_26:
          *((_DWORD *)this + 9) = v38;
          return this;
        }
LABEL_27:
        int v38 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_26;
      }
      int v31 = 1;
      while (v30 != (llvm::LoadInst *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(llvm::LoadInst **)(v26 + 16 * v28);
        if (v30 == this)
        {
          uint64_t v29 = v26 + 16 * v28;
          goto LABEL_19;
        }
      }
    }
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_19;
  }
  return this;
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const char **a4, llvm::BasicBlock *a5)
{
  return llvm::LoadInst::LoadInst(this, a2, a3, a4, 0, a5);
}

{
  return llvm::LoadInst::LoadInst(this, a2, a3, a4, 0, a5);
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const char **a4, __int16 a5, llvm::BasicBlock *a6)
{
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a6 + 7) + 40) + 272), a2, 1);
  uint64_t v13 = sub_1CC5CEE04(this, (uint64_t)a2, 32, (uint64_t)a3, (uint64_t)a6);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (Alignment & 0x3F));
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setNameImpl(v13, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v15 = ***(void ***)this;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v19 = v16 + 16 * v18;
      unsigned int v20 = *(llvm::LoadInst **)v19;
      if (*(llvm::LoadInst **)v19 == this)
      {
LABEL_12:
        uint64_t v23 = *(void **)(v19 + 8);
        unint64_t v26 = *v23;
        uint64_t v24 = v23 + 2;
        unint64_t v25 = v26;
        if (v26 >= 5 && *(_DWORD *)v24 == *(_DWORD *)"llvm." && v24[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v28 = llvm::Function::lookupIntrinsicID(v24, v25);
LABEL_20:
          *((_DWORD *)this + 9) = v28;
          return this;
        }
LABEL_19:
        int v28 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v21 = 1;
      while (v20 != (llvm::LoadInst *)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        unsigned int v20 = *(llvm::LoadInst **)(v16 + 16 * v18);
        if (v20 == this)
        {
          uint64_t v19 = v16 + 16 * v18;
          goto LABEL_12;
        }
      }
    }
    uint64_t v19 = v16 + 16 * v17;
    goto LABEL_12;
  }
  return this;
}

{
  char Alignment;
  llvm::Value *v13;

  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a6 + 7) + 40) + 272), a2, 1);
  uint64_t v13 = sub_1CC5CEE04(this, (uint64_t)a2, 32, (uint64_t)a3, (uint64_t)a6);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (Alignment & 0x3F));
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setName(v13, a4);
  return this;
}

llvm::Value *llvm::LoadInst::LoadInst(llvm::Value *this, uint64_t a2, uint64_t a3, const char **a4, __int16 a5, char a6, uint64_t a7)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v12;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  unsigned int v14 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a7)
  {
    uint64_t v19 = *(void *)(a7 + 40);
    unsigned int v20 = (uint64_t *)(a7 + 24);
    *((void *)this + 5) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v30 = *(void *)(v19 + 56);
      if (v30)
      {
        int v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
        if (v31) {
          llvm::ValueSymbolTable::reinsertValue(v31, this);
        }
      }
    }
    uint64_t v21 = *v20;
    *((void *)this + 3) = *v20;
    *((void *)this + 4) = v20;
    *(void *)(v21 + 8) = v13;
    uint64_t *v20 = (uint64_t)v13;
  }
  if (*v14)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v38 = *((void *)this - 3);
    if (v38) {
      *(void *)(v38 + 16) = *((void *)this - 2);
    }
  }
  *unsigned int v14 = a3;
  if (a3)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v16 = (void *)(a3 + 8);
    uint64_t v15 = v17;
    *((void *)this - 3) = v17;
    if (v17) {
      *(void *)(v15 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v16;
    *uint64_t v16 = v14;
  }
  *((_WORD *)this + 9) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v22 = ***(void ***)this;
    uint64_t v23 = *(void *)(v22 + 152);
    uint64_t v24 = *(unsigned int *)(v22 + 168);
    if (v24)
    {
      LODWORD(v25) = (v24 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v26 = v23 + 16 * v25;
      uint64_t v27 = *(llvm::Value **)v26;
      if (*(llvm::Value **)v26 == this)
      {
LABEL_22:
        int v32 = *(void **)(v26 + 8);
        unint64_t v35 = *v32;
        uint64_t v33 = v32 + 2;
        unint64_t v34 = v35;
        if (v35 >= 5 && *(_DWORD *)v33 == *(_DWORD *)"llvm." && v33[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v37 = llvm::Function::lookupIntrinsicID(v33, v34);
LABEL_30:
          *((_DWORD *)this + 9) = v37;
          return this;
        }
LABEL_29:
        int v37 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v28 = 1;
      while (v27 != (llvm::Value *)-4096)
      {
        int v29 = v25 + v28++;
        uint64_t v25 = v29 & (v24 - 1);
        uint64_t v27 = *(llvm::Value **)(v23 + 16 * v25);
        if (v27 == this)
        {
          uint64_t v26 = v23 + 16 * v25;
          goto LABEL_22;
        }
      }
    }
    uint64_t v26 = v23 + 16 * v24;
    goto LABEL_22;
  }
  return this;
}

{
  unsigned int v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  int v28;
  int v29;
  void *v30;
  unsigned char *v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  uint64_t v36;
  llvm::ValueSymbolTable *v37;
  uint64_t v38;

  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v12;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  unsigned int v14 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a7)
  {
    uint64_t v19 = *(void *)(a7 + 40);
    unsigned int v20 = (uint64_t *)(a7 + 24);
    *((void *)this + 5) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      unint64_t v36 = *(void *)(v19 + 56);
      if (v36)
      {
        int v37 = *(llvm::ValueSymbolTable **)(v36 + 104);
        if (v37) {
          llvm::ValueSymbolTable::reinsertValue(v37, this);
        }
      }
    }
    uint64_t v21 = *v20;
    *((void *)this + 3) = *v20;
    *((void *)this + 4) = v20;
    *(void *)(v21 + 8) = v13;
    uint64_t *v20 = (uint64_t)v13;
  }
  if (*v14)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v38 = *((void *)this - 3);
    if (v38) {
      *(void *)(v38 + 16) = *((void *)this - 2);
    }
  }
  *unsigned int v14 = a3;
  if (a3)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v16 = (void *)(a3 + 8);
    uint64_t v15 = v17;
    *((void *)this - 3) = v17;
    if (v17) {
      *(void *)(v15 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v16;
    *uint64_t v16 = v14;
  }
  *((_WORD *)this + 9) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v22 = ***(void ***)this;
    uint64_t v23 = *(void *)(v22 + 152);
    uint64_t v24 = *(unsigned int *)(v22 + 168);
    if (v24)
    {
      LODWORD(v25) = (v24 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v26 = v23 + 16 * v25;
      uint64_t v27 = *(llvm::Value **)v26;
      if (*(llvm::Value **)v26 == this)
      {
LABEL_18:
        uint64_t v30 = *(void **)(v26 + 8);
        uint64_t v33 = *v30;
        int v31 = v30 + 2;
        int v32 = v33;
        if (v33 >= 5 && *(_DWORD *)v31 == *(_DWORD *)"llvm." && v31[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          unint64_t v35 = llvm::Function::lookupIntrinsicID(v31, v32);
LABEL_25:
          *((_DWORD *)this + 9) = v35;
          return this;
        }
LABEL_26:
        unint64_t v35 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v28 = 1;
      while (v27 != (llvm::Value *)-4096)
      {
        int v29 = v25 + v28++;
        uint64_t v25 = v29 & (v24 - 1);
        uint64_t v27 = *(llvm::Value **)(v23 + 16 * v25);
        if (v27 == this)
        {
          uint64_t v26 = v23 + 16 * v25;
          goto LABEL_18;
        }
      }
    }
    uint64_t v26 = v23 + 16 * v24;
    goto LABEL_18;
  }
  return this;
}

llvm::Value *llvm::LoadInst::LoadInst(llvm::Value *a1, uint64_t a2, uint64_t a3, const char **a4, __int16 a5, char a6, uint64_t a7)
{
  uint64_t v11 = sub_1CC5CEE04(a1, a2, 32, a3, a7);
  *((_WORD *)v11 + 9) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *((_WORD *)v11 + 9) & 0xFC00;
  *((unsigned char *)v11 + 60) = 1;
  llvm::Value::setNameImpl(v11, a4);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = ***(void ***)a1;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v17 = (llvm::Value **)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == a1)
      {
LABEL_12:
        uint64_t v21 = v17[1];
        unint64_t v24 = *(void *)v21;
        uint64_t v22 = (char *)v21 + 16;
        unint64_t v23 = v24;
        if (v24 >= 5 && *(_DWORD *)v22 == *(_DWORD *)"llvm." && v22[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v26 = llvm::Function::lookupIntrinsicID(v22, v23);
LABEL_20:
          *((_DWORD *)a1 + 9) = v26;
          return a1;
        }
LABEL_19:
        int v26 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v19 = 1;
      while (v18 != (llvm::Value *)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(llvm::Value **)(v14 + 16 * v16);
        if (v18 == a1)
        {
          uint64_t v17 = (llvm::Value **)(v14 + 16 * v16);
          goto LABEL_12;
        }
      }
    }
    uint64_t v17 = (llvm::Value **)(v14 + 16 * v15);
    goto LABEL_12;
  }
  return a1;
}

{
  llvm::Value *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value **v17;
  llvm::Value *v18;
  int v19;
  int v20;
  llvm::Value *v21;
  unsigned char *v22;
  unint64_t v23;
  unint64_t v24;
  int v26;

  uint64_t v11 = sub_1CC5CEE04(a1, a2, 32, a3, a7);
  *((_WORD *)v11 + 9) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *((_WORD *)v11 + 9) & 0xFC00;
  *((unsigned char *)v11 + 60) = 1;
  llvm::Value::setNameImpl(v11, a4);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = ***(void ***)a1;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v17 = (llvm::Value **)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == a1)
      {
LABEL_12:
        uint64_t v21 = v17[1];
        unint64_t v24 = *(void *)v21;
        uint64_t v22 = (char *)v21 + 16;
        unint64_t v23 = v24;
        if (v24 >= 5 && *(_DWORD *)v22 == *(_DWORD *)"llvm." && v22[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v26 = llvm::Function::lookupIntrinsicID(v22, v23);
LABEL_20:
          *((_DWORD *)a1 + 9) = v26;
          return a1;
        }
LABEL_19:
        int v26 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v19 = 1;
      while (v18 != (llvm::Value *)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(llvm::Value **)(v14 + 16 * v16);
        if (v18 == a1)
        {
          uint64_t v17 = (llvm::Value **)(v14 + 16 * v16);
          goto LABEL_12;
        }
      }
    }
    uint64_t v17 = (llvm::Value **)(v14 + 16 * v15);
    goto LABEL_12;
  }
  return a1;
}

llvm::Value *llvm::LoadInst::LoadInst(llvm::Value *this, uint64_t a2, uint64_t a3, const char **a4, __int16 a5, char a6, __int16 a7, char a8, uint64_t a9)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v16 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v16;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v17 = (char *)this + 24;
  uint64_t v18 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a9)
  {
    uint64_t v23 = *(void *)(a9 + 40);
    unint64_t v24 = (uint64_t *)(a9 + 24);
    *((void *)this + 5) = v23;
    *(_WORD *)(v23 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v34 = *(void *)(v23 + 56);
      if (v34)
      {
        unint64_t v35 = *(llvm::ValueSymbolTable **)(v34 + 104);
        if (v35) {
          llvm::ValueSymbolTable::reinsertValue(v35, this);
        }
      }
    }
    uint64_t v25 = *v24;
    *((void *)this + 3) = *v24;
    *((void *)this + 4) = v24;
    *(void *)(v25 + 8) = v17;
    *unint64_t v24 = (uint64_t)v17;
  }
  if (*v18)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v42 = *((void *)this - 3);
    if (v42) {
      *(void *)(v42 + 16) = *((void *)this - 2);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v21 = *(void *)(a3 + 8);
    int v20 = (void *)(a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v18;
  }
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *((unsigned char *)this + 60) = a8;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v26 = ***(void ***)this;
    uint64_t v27 = *(void *)(v26 + 152);
    uint64_t v28 = *(unsigned int *)(v26 + 168);
    if (v28)
    {
      LODWORD(v29) = (v28 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v30 = v27 + 16 * v29;
      int v31 = *(llvm::Value **)v30;
      if (*(llvm::Value **)v30 == this)
      {
LABEL_22:
        unint64_t v36 = *(void **)(v30 + 8);
        unint64_t v39 = *v36;
        int v37 = v36 + 2;
        unint64_t v38 = v39;
        if (v39 >= 5 && *(_DWORD *)v37 == *(_DWORD *)"llvm." && v37[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v41 = llvm::Function::lookupIntrinsicID(v37, v38);
LABEL_30:
          *((_DWORD *)this + 9) = v41;
          return this;
        }
LABEL_29:
        int v41 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v32 = 1;
      while (v31 != (llvm::Value *)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v28 - 1);
        int v31 = *(llvm::Value **)(v27 + 16 * v29);
        if (v31 == this)
        {
          uint64_t v30 = v27 + 16 * v29;
          goto LABEL_22;
        }
      }
    }
    uint64_t v30 = v27 + 16 * v28;
    goto LABEL_22;
  }
  return this;
}

{
  unsigned int v16;
  char *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  int v32;
  int v33;
  void *v34;
  unsigned char *v35;
  unint64_t v36;
  unint64_t v37;
  int v39;
  uint64_t v40;
  llvm::ValueSymbolTable *v41;
  uint64_t v42;

  *(void *)this = a2;
  *((void *)this + 1) = 0;
  unsigned int v16 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 60;
  *((_DWORD *)this + 5) = v16;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v17 = (char *)this + 24;
  uint64_t v18 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a9)
  {
    uint64_t v23 = *(void *)(a9 + 40);
    unint64_t v24 = (uint64_t *)(a9 + 24);
    *((void *)this + 5) = v23;
    *(_WORD *)(v23 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      unint64_t v40 = *(void *)(v23 + 56);
      if (v40)
      {
        int v41 = *(llvm::ValueSymbolTable **)(v40 + 104);
        if (v41) {
          llvm::ValueSymbolTable::reinsertValue(v41, this);
        }
      }
    }
    uint64_t v25 = *v24;
    *((void *)this + 3) = *v24;
    *((void *)this + 4) = v24;
    *(void *)(v25 + 8) = v17;
    *unint64_t v24 = (uint64_t)v17;
  }
  if (*v18)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v42 = *((void *)this - 3);
    if (v42) {
      *(void *)(v42 + 16) = *((void *)this - 2);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v21 = *(void *)(a3 + 8);
    int v20 = (void *)(a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v18;
  }
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *((unsigned char *)this + 60) = a8;
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v26 = ***(void ***)this;
    uint64_t v27 = *(void *)(v26 + 152);
    uint64_t v28 = *(unsigned int *)(v26 + 168);
    if (v28)
    {
      LODWORD(v29) = (v28 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v30 = v27 + 16 * v29;
      int v31 = *(llvm::Value **)v30;
      if (*(llvm::Value **)v30 == this)
      {
LABEL_18:
        uint64_t v34 = *(void **)(v30 + 8);
        int v37 = *v34;
        unint64_t v35 = v34 + 2;
        unint64_t v36 = v37;
        if (v37 >= 5 && *(_DWORD *)v35 == *(_DWORD *)"llvm." && v35[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          unint64_t v39 = llvm::Function::lookupIntrinsicID(v35, v36);
LABEL_25:
          *((_DWORD *)this + 9) = v39;
          return this;
        }
LABEL_26:
        unint64_t v39 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v32 = 1;
      while (v31 != (llvm::Value *)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v28 - 1);
        int v31 = *(llvm::Value **)(v27 + 16 * v29);
        if (v31 == this)
        {
          uint64_t v30 = v27 + 16 * v29;
          goto LABEL_18;
        }
      }
    }
    uint64_t v30 = v27 + 16 * v28;
    goto LABEL_18;
  }
  return this;
}

llvm::Value *llvm::LoadInst::LoadInst(llvm::Value *a1, uint64_t a2, uint64_t a3, const char **a4, __int16 a5, char a6, __int16 a7, char a8, uint64_t a9)
{
  uint64_t v15 = sub_1CC5CEE04(a1, a2, 32, a3, a9);
  *((_WORD *)v15 + 9) = *((_WORD *)v15 + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *((unsigned char *)v15 + 60) = a8;
  llvm::Value::setNameImpl(v15, a4);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v17 = ***(void ***)a1;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 == a1)
      {
LABEL_12:
        uint64_t v25 = v21[1];
        unint64_t v28 = *(void *)v25;
        uint64_t v26 = (char *)v25 + 16;
        unint64_t v27 = v28;
        if (v28 >= 5 && *(_DWORD *)v26 == *(_DWORD *)"llvm." && v26[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v30 = llvm::Function::lookupIntrinsicID(v26, v27);
LABEL_20:
          *((_DWORD *)a1 + 9) = v30;
          return a1;
        }
LABEL_19:
        int v30 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == a1)
        {
          uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_12;
        }
      }
    }
    uint64_t v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_12;
  }
  return a1;
}

{
  llvm::Value *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value **v21;
  llvm::Value *v22;
  int v23;
  int v24;
  llvm::Value *v25;
  unsigned char *v26;
  unint64_t v27;
  unint64_t v28;
  int v30;

  uint64_t v15 = sub_1CC5CEE04(a1, a2, 32, a3, a9);
  *((_WORD *)v15 + 9) = *((_WORD *)v15 + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *((unsigned char *)v15 + 60) = a8;
  llvm::Value::setNameImpl(v15, a4);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v17 = ***(void ***)a1;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 == a1)
      {
LABEL_12:
        uint64_t v25 = v21[1];
        unint64_t v28 = *(void *)v25;
        uint64_t v26 = (char *)v25 + 16;
        unint64_t v27 = v28;
        if (v28 >= 5 && *(_DWORD *)v26 == *(_DWORD *)"llvm." && v26[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v30 = llvm::Function::lookupIntrinsicID(v26, v27);
LABEL_20:
          *((_DWORD *)a1 + 9) = v30;
          return a1;
        }
LABEL_19:
        int v30 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == a1)
        {
          uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_12;
        }
      }
    }
    uint64_t v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_12;
  }
  return a1;
}

llvm::StoreInst *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Type **a2, llvm::Value *a3, llvm::Instruction *a4)
{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

llvm::StoreInst *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Type **a2, llvm::Value *a3, __int16 a4, llvm::Instruction *a5)
{
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a5 + 5) + 56) + 40) + 272), *a2, 1);
  *(void *)this = **(void **)*a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 61;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v11 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v12 = *((void *)a5 + 5);
  uint64_t v13 = (uint64_t *)((char *)a5 + 24);
  *((void *)this + 5) = v12;
  *(_WORD *)(v12 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(v12 + 56);
    if (v23)
    {
      int v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, this);
      }
    }
  }
  uint64_t v14 = *v13;
  *((void *)this + 3) = *v13;
  *((void *)this + 4) = v13;
  *(void *)(v14 + 8) = v11;
  *uint64_t v13 = (uint64_t)v11;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v25 = *((void *)this - 7);
    if (v25) {
      *(void *)(v25 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v17 = a2[1];
  unsigned int v16 = a2 + 1;
  uint64_t v15 = v17;
  *((void *)this - 7) = v17;
  if (v17) {
    *((void *)v15 + 2) = (char *)this - 56;
  }
  *((void *)this - 6) = v16;
  *unsigned int v16 = (char *)this - 64;
  uint64_t v18 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v26 = *((void *)this - 3);
    if (v26) {
      *(void *)(v26 + 16) = *((void *)this - 2);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    uint64_t v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v18;
  }
  *((_WORD *)this + 9) = a4 & 0xFF81 | (2 * (Alignment & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  return this;
}

{
  char Alignment;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  llvm::Type *v15;
  void *v16;
  llvm::Type *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  uint64_t v26;

  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a5 + 5) + 56) + 40) + 272), *a2, 1);
  *(void *)this = **(void **)*a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 61;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v11 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v12 = *((void *)a5 + 5);
  uint64_t v13 = (uint64_t *)((char *)a5 + 24);
  *((void *)this + 5) = v12;
  *(_WORD *)(v12 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(v12 + 56);
    if (v23)
    {
      int v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, this);
      }
    }
  }
  uint64_t v14 = *v13;
  *((void *)this + 3) = *v13;
  *((void *)this + 4) = v13;
  *(void *)(v14 + 8) = v11;
  *uint64_t v13 = (uint64_t)v11;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v25 = *((void *)this - 7);
    if (v25) {
      *(void *)(v25 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v17 = a2[1];
  unsigned int v16 = a2 + 1;
  uint64_t v15 = v17;
  *((void *)this - 7) = v17;
  if (v17) {
    *((void *)v15 + 2) = (char *)this - 56;
  }
  *((void *)this - 6) = v16;
  *unsigned int v16 = (char *)this - 64;
  uint64_t v18 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v26 = *((void *)this - 3);
    if (v26) {
      *(void *)(v26 + 16) = *((void *)this - 2);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    uint64_t v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v18;
  }
  *((_WORD *)this + 9) = a4 & 0xFF81 | (2 * (Alignment & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((unsigned char *)this + 60) = 1;
  return this;
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Type **a2, llvm::Value *a3, llvm::BasicBlock *a4)
{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Type **a2, llvm::Value *a3, __int16 a4, llvm::BasicBlock *a5)
{
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a5 + 7) + 40) + 272), *a2, 1);

  return llvm::StoreInst::StoreInst(this, a2, (uint64_t)a3, a4, Alignment, 0, 1, a5);
}

{
  char Alignment;
  uint64_t vars8;

  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a5 + 7) + 40) + 272), *a2, 1);

  return llvm::StoreInst::StoreInst(this, a2, (uint64_t)a3, a4, Alignment, 0, 1, a5);
}

llvm::Value *llvm::StoreInst::StoreInst(llvm::Value *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, uint64_t a6)
{
  uint64_t v11 = (void *)((char *)a1 - 64);
  *(void *)a1 = ***(void ***)a2 + 1576;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = 61;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v12 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a6)
  {
    uint64_t v21 = *(void *)(a6 + 40);
    uint64_t v22 = (uint64_t *)(a6 + 24);
    *((void *)a1 + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v24 = *(void *)(v21 + 56);
      if (v24)
      {
        uint64_t v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25) {
          llvm::ValueSymbolTable::reinsertValue(v25, a1);
        }
      }
    }
    uint64_t v23 = *v22;
    *((void *)a1 + 3) = *v22;
    *((void *)a1 + 4) = v22;
    *(void *)(v23 + 8) = v12;
    *uint64_t v22 = (uint64_t)v12;
  }
  if (*v11)
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v26 = *((void *)a1 - 7);
    if (v26) {
      *(void *)(v26 + 16) = *((void *)a1 - 6);
    }
  }
  *((void *)a1 - 8) = a2;
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v14 = (void *)(a2 + 8);
  uint64_t v13 = v15;
  *((void *)a1 - 7) = v15;
  if (v15) {
    *(void *)(v13 + 16) = (char *)a1 - 56;
  }
  *((void *)a1 - 6) = v14;
  *uint64_t v14 = v11;
  unsigned int v16 = (void *)((char *)a1 - 32);
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v27 = *((void *)a1 - 3);
    if (v27) {
      *(void *)(v27 + 16) = *((void *)a1 - 2);
    }
  }
  *unsigned int v16 = a3;
  if (a3)
  {
    uint64_t v19 = *(void *)(a3 + 8);
    uint64_t v18 = (void *)(a3 + 8);
    uint64_t v17 = v19;
    *((void *)a1 - 3) = v19;
    if (v19) {
      *(void *)(v17 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v18;
    void *v18 = v16;
  }
  *((_WORD *)a1 + 9) = a4 & 0xFF81 | (2 * (a5 & 0x3F)) | *((_WORD *)a1 + 9) & 0xFC00;
  *((unsigned char *)a1 + 60) = 1;
  return a1;
}

{
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v11 = (void *)((char *)a1 - 64);
  *(void *)a1 = ***(void ***)a2 + 1576;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = 61;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v12 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a6)
  {
    uint64_t v21 = *(void *)(a6 + 40);
    uint64_t v22 = (uint64_t *)(a6 + 24);
    *((void *)a1 + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v24 = *(void *)(v21 + 56);
      if (v24)
      {
        uint64_t v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25) {
          llvm::ValueSymbolTable::reinsertValue(v25, a1);
        }
      }
    }
    uint64_t v23 = *v22;
    *((void *)a1 + 3) = *v22;
    *((void *)a1 + 4) = v22;
    *(void *)(v23 + 8) = v12;
    *uint64_t v22 = (uint64_t)v12;
  }
  if (*v11)
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v26 = *((void *)a1 - 7);
    if (v26) {
      *(void *)(v26 + 16) = *((void *)a1 - 6);
    }
  }
  *((void *)a1 - 8) = a2;
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v14 = (void *)(a2 + 8);
  uint64_t v13 = v15;
  *((void *)a1 - 7) = v15;
  if (v15) {
    *(void *)(v13 + 16) = (char *)a1 - 56;
  }
  *((void *)a1 - 6) = v14;
  *uint64_t v14 = v11;
  unsigned int v16 = (void *)((char *)a1 - 32);
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v27 = *((void *)a1 - 3);
    if (v27) {
      *(void *)(v27 + 16) = *((void *)a1 - 2);
    }
  }
  *unsigned int v16 = a3;
  if (a3)
  {
    uint64_t v19 = *(void *)(a3 + 8);
    uint64_t v18 = (void *)(a3 + 8);
    uint64_t v17 = v19;
    *((void *)a1 - 3) = v19;
    if (v19) {
      *(void *)(v17 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v18;
    void *v18 = v16;
  }
  *((_WORD *)a1 + 9) = a4 & 0xFF81 | (2 * (a5 & 0x3F)) | *((_WORD *)a1 + 9) & 0xFC00;
  *((unsigned char *)a1 + 60) = 1;
  return a1;
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::Instruction *a1, void *a2, uint64_t a3, __int16 a4, char a5, llvm::BasicBlock *a6)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, 0, 1, a6);
}

{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, 0, 1, a6);
}

llvm::Value *llvm::StoreInst::StoreInst(llvm::Value *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, uint64_t a8)
{
  uint64_t v15 = (void *)((char *)a1 - 64);
  *(void *)a1 = ***(void ***)a2 + 1576;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = 61;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  unsigned int v16 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a8)
  {
    uint64_t v25 = *(void *)(a8 + 40);
    uint64_t v26 = (uint64_t *)(a8 + 24);
    *((void *)a1 + 5) = v25;
    *(_WORD *)(v25 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v28 = *(void *)(v25 + 56);
      if (v28)
      {
        uint64_t v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
        if (v29) {
          llvm::ValueSymbolTable::reinsertValue(v29, a1);
        }
      }
    }
    uint64_t v27 = *v26;
    *((void *)a1 + 3) = *v26;
    *((void *)a1 + 4) = v26;
    *(void *)(v27 + 8) = v16;
    *uint64_t v26 = (uint64_t)v16;
  }
  if (*v15)
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v30 = *((void *)a1 - 7);
    if (v30) {
      *(void *)(v30 + 16) = *((void *)a1 - 6);
    }
  }
  *((void *)a1 - 8) = a2;
  uint64_t v19 = *(void *)(a2 + 8);
  uint64_t v18 = (void *)(a2 + 8);
  uint64_t v17 = v19;
  *((void *)a1 - 7) = v19;
  if (v19) {
    *(void *)(v17 + 16) = (char *)a1 - 56;
  }
  *((void *)a1 - 6) = v18;
  void *v18 = v15;
  uint64_t v20 = (void *)((char *)a1 - 32);
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v31 = *((void *)a1 - 3);
    if (v31) {
      *(void *)(v31 + 16) = *((void *)a1 - 2);
    }
  }
  void *v20 = a3;
  if (a3)
  {
    uint64_t v23 = *(void *)(a3 + 8);
    uint64_t v22 = (void *)(a3 + 8);
    uint64_t v21 = v23;
    *((void *)a1 - 3) = v23;
    if (v23) {
      *(void *)(v21 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v22;
    *uint64_t v22 = v20;
  }
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *((unsigned char *)a1 + 60) = a7;
  return a1;
}

{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::Instruction *a1, void *a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, llvm::BasicBlock *a8)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  char *v14;
  llvm::Instruction *result;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v14 = (char *)a1 - 64;
  uint64_t result = llvm::Instruction::Instruction(a1, (llvm::Type *)(**(void **)*a2 + 1576), 33, (llvm::Instruction *)((char *)a1 - 64), 2, a8);
  if (*((void *)result - 8))
  {
    **((void **)result - 6) = *((void *)result - 7);
    unsigned int v16 = *((void *)result - 7);
    if (v16) {
      *(void *)(v16 + 16) = *((void *)result - 6);
    }
  }
  *((void *)result - 8) = a2;
  uint64_t v19 = a2[1];
  uint64_t v18 = a2 + 1;
  uint64_t v17 = v19;
  *((void *)result - 7) = v19;
  if (v19) {
    *(void *)(v17 + 16) = (char *)result - 56;
  }
  *((void *)result - 6) = v18;
  void *v18 = v14;
  uint64_t v20 = (void *)((char *)result - 32);
  if (*((void *)result - 4))
  {
    **((void **)result - 2) = *((void *)result - 3);
    uint64_t v21 = *((void *)result - 3);
    if (v21) {
      *(void *)(v21 + 16) = *((void *)result - 2);
    }
  }
  void *v20 = a3;
  if (a3)
  {
    uint64_t v24 = *(void *)(a3 + 8);
    uint64_t v23 = (void *)(a3 + 8);
    uint64_t v22 = v24;
    *((void *)result - 3) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)result - 24;
    }
    *((void *)result - 2) = v23;
    *uint64_t v23 = v20;
  }
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *((unsigned char *)result + 60) = a7;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  uint64_t v8 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v21 = *(void *)(result - 88);
    if (v21) {
      *(void *)(v21 + 16) = *(void *)(result - 80);
    }
  }
  void *v8 = a2;
  if (a2)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v9 = (void *)(a2 + 8);
    uint64_t v10 = v11;
    *(void *)(result - 88) = v11;
    if (v11) {
      *(void *)(v10 + 16) = result - 88;
    }
    *(void *)(result - 80) = v9;
    *uint64_t v9 = v8;
  }
  uint64_t v12 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v22 = *(void *)(result - 56);
    if (v22) {
      *(void *)(v22 + 16) = *(void *)(result - 48);
    }
  }
  void *v12 = a3;
  if (a3)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v13 = (void *)(a3 + 8);
    uint64_t v14 = v15;
    *(void *)(result - 56) = v15;
    if (v15) {
      *(void *)(v14 + 16) = result - 56;
    }
    *(void *)(result - 48) = v13;
    *uint64_t v13 = v12;
  }
  unsigned int v16 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v23 = *(void *)(result - 24);
    if (v23) {
      *(void *)(v23 + 16) = *(void *)(result - 16);
    }
  }
  *unsigned int v16 = a4;
  if (a4)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    uint64_t v17 = (void *)(a4 + 8);
    uint64_t v18 = v19;
    *(void *)(result - 24) = v19;
    if (v19) {
      *(void *)(v18 + 16) = result - 24;
    }
    *(void *)(result - 16) = v17;
    void *v17 = v16;
  }
  __int16 v20 = *(_WORD *)(result + 18) & 0xC003;
  *(unsigned char *)(result + 60) = a8;
  *(_WORD *)(result + 18) = (4 * a6) & 0xC01F | (a5 << 8) | (32 * a7) & 0xC0FF | v20;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4, unsigned __int8 a5, __int16 a6, __int16 a7, char a8, uint64_t a9)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = **a3;
  uint64_t v18 = *v17 + 1888;
  v27[0] = *a3;
  v27[1] = v18;
  *(void *)a1 = llvm::StructType::get(v17, (uint64_t)v27, 2, 0);
  *(void *)(a1 + 8) = 0;
  unsigned int v19 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 64;
  *(_DWORD *)(a1 + 20) = v19;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v20 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a9)
  {
    uint64_t v22 = *(void *)(a9 + 40);
    uint64_t v23 = (uint64_t *)(a9 + 24);
    *(void *)(a1 + 40) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
    {
      uint64_t v25 = *(void *)(v22 + 56);
      if (v25)
      {
        uint64_t v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26) {
          llvm::ValueSymbolTable::reinsertValue(v26, (llvm::Value *)a1);
        }
      }
    }
    uint64_t v24 = *v23;
    *(void *)(a1 + 24) = *v23;
    *(void *)(a1 + 32) = v23;
    *(void *)(v24 + 8) = v20;
    *uint64_t v23 = v20;
  }
  llvm::AtomicCmpXchgInst::Init(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  return llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  void v25[3];

  v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = **a3;
  uint64_t v18 = *v17 + 1888;
  v25[0] = *a3;
  v25[1] = v18;
  *(void *)a1 = llvm::StructType::get(v17, (uint64_t)v25, 2, 0);
  *(void *)(a1 + 8) = 0;
  unsigned int v19 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 64;
  *(_DWORD *)(a1 + 20) = v19;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v20 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a9;
  *(_WORD *)(a9 + 18) &= ~0x8000u;
  if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(a9 + 56);
    if (v23)
    {
      uint64_t v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, (llvm::Value *)a1);
      }
    }
  }
  uint64_t v21 = *(void *)(a9 + 40);
  *(void *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = a9 + 40;
  *(void *)(v21 + 8) = v20;
  *(void *)(a9 + 40) = v20;
  llvm::AtomicCmpXchgInst::Init(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  return llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::AtomicRMWInst::Init(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, char a7)
{
  uint64_t v7 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v16 = *(void *)(result - 56);
    if (v16) {
      *(void *)(v16 + 16) = *(void *)(result - 48);
    }
  }
  void *v7 = a3;
  if (a3)
  {
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = v10;
    *(void *)(result - 56) = v10;
    if (v10) {
      *(void *)(v9 + 16) = result - 56;
    }
    *(void *)(result - 48) = v8;
    void *v8 = v7;
  }
  uint64_t v11 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v17 = *(void *)(result - 24);
    if (v17) {
      *(void *)(v17 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v11 = a4;
  if (a4)
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v12 = (void *)(a4 + 8);
    uint64_t v13 = v14;
    *(void *)(result - 24) = v14;
    if (v14) {
      *(void *)(v13 + 16) = result - 24;
    }
    *(void *)(result - 16) = v12;
    void *v12 = v11;
  }
  __int16 v15 = *(_WORD *)(result + 18) & 0xC001;
  *(unsigned char *)(result + 60) = a7;
  *(_WORD *)(result + 18) = ((2 * a6) | (16 * a2)) & 0xC0FF | (a5 << 8) | v15;
  return result;
}

llvm::Value *llvm::AtomicRMWInst::AtomicRMWInst(llvm::Value *a1, __int16 a2, uint64_t a3, void *a4, unsigned __int8 a5, __int16 a6, char a7, uint64_t a8)
{
  *(void *)a1 = *a4;
  *((void *)a1 + 1) = 0;
  unsigned int v15 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 65;
  *((_DWORD *)a1 + 5) = v15;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v16 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a8)
  {
    uint64_t v18 = *(void *)(a8 + 40);
    unsigned int v19 = (uint64_t *)(a8 + 24);
    *((void *)a1 + 5) = v18;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v21 = *(void *)(v18 + 56);
      if (v21)
      {
        uint64_t v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
        if (v22) {
          llvm::ValueSymbolTable::reinsertValue(v22, a1);
        }
      }
    }
    uint64_t v20 = *v19;
    *((void *)a1 + 3) = *v19;
    *((void *)a1 + 4) = v19;
    *(void *)(v20 + 8) = v16;
    uint64_t *v19 = (uint64_t)v16;
  }
  llvm::AtomicRMWInst::Init((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v15;
  char *v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(void *)a1 = *a4;
  *((void *)a1 + 1) = 0;
  unsigned int v15 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 65;
  *((_DWORD *)a1 + 5) = v15;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v16 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a8)
  {
    uint64_t v18 = *(void *)(a8 + 40);
    unsigned int v19 = (uint64_t *)(a8 + 24);
    *((void *)a1 + 5) = v18;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v21 = *(void *)(v18 + 56);
      if (v21)
      {
        uint64_t v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
        if (v22) {
          llvm::ValueSymbolTable::reinsertValue(v22, a1);
        }
      }
    }
    uint64_t v20 = *v19;
    *((void *)a1 + 3) = *v19;
    *((void *)a1 + 4) = v19;
    *(void *)(v20 + 8) = v16;
    uint64_t *v19 = (uint64_t)v16;
  }
  llvm::AtomicRMWInst::Init((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(void *)a1 = *a4;
  *((void *)a1 + 1) = 0;
  uint64_t v16 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 65;
  *((_DWORD *)a1 + 5) = v16;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v17 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v21 = *(void *)(a8 + 56);
    if (v21)
    {
      uint64_t v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
      if (v22) {
        llvm::ValueSymbolTable::reinsertValue(v22, a1);
      }
    }
  }
  unsigned int v19 = *(void *)(a8 + 40);
  uint64_t v18 = (void *)(a8 + 40);
  *((void *)a1 + 3) = v19;
  *((void *)a1 + 4) = v18;
  *(void *)(v19 + 8) = v17;
  void *v18 = v17;
  llvm::AtomicRMWInst::Init((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(void *)a1 = *a4;
  *((void *)a1 + 1) = 0;
  uint64_t v16 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 65;
  *((_DWORD *)a1 + 5) = v16;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v17 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v21 = *(void *)(a8 + 56);
    if (v21)
    {
      uint64_t v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
      if (v22) {
        llvm::ValueSymbolTable::reinsertValue(v22, a1);
      }
    }
  }
  unsigned int v19 = *(void *)(a8 + 40);
  uint64_t v18 = (void *)(a8 + 40);
  *((void *)a1 + 3) = v19;
  *((void *)a1 + 4) = v18;
  *(void *)(v19 + 8) = v17;
  void *v18 = v17;
  llvm::AtomicRMWInst::Init((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

char *llvm::AtomicRMWInst::getOperationName(int a1)
{
  return (&off_1E6849758)[a1];
}

llvm::Value *llvm::FenceInst::FenceInst(llvm::Value *a1, void *a2, __int16 a3, char a4, uint64_t a5)
{
  __int16 v8 = 0;
  *(void *)a1 = *a2 + 1576;
  *((void *)a1 + 1) = 0;
  unsigned int v9 = *((_DWORD *)a1 + 5) & 0xC0000000;
  *((_DWORD *)a1 + 4) = 63;
  *((_DWORD *)a1 + 5) = v9;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v10 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a5)
  {
    uint64_t v12 = *(void *)(a5 + 40);
    uint64_t v13 = (uint64_t *)(a5 + 24);
    *((void *)a1 + 5) = v12;
    *(_WORD *)(v12 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v15 = *(void *)(v12 + 56);
      if (v15)
      {
        uint64_t v16 = *(llvm::ValueSymbolTable **)(v15 + 104);
        if (v16) {
          llvm::ValueSymbolTable::reinsertValue(v16, a1);
        }
      }
    }
    uint64_t v14 = *v13;
    *((void *)a1 + 3) = *v13;
    *((void *)a1 + 4) = v13;
    *(void *)(v14 + 8) = v10;
    *uint64_t v13 = (uint64_t)v10;
    __int16 v8 = *((_WORD *)a1 + 9) & 0xFFF8;
  }
  *((_WORD *)a1 + 9) = v8 | a3;
  *((unsigned char *)a1 + 60) = a4;
  return a1;
}

{
  unsigned int v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(void *)a1 = *a2 + 1576;
  *((void *)a1 + 1) = 0;
  unsigned int v9 = *((_DWORD *)a1 + 5) & 0xC0000000;
  *((_DWORD *)a1 + 4) = 63;
  *((_DWORD *)a1 + 5) = v9;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v10 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v14 = *(void *)(a5 + 56);
    if (v14)
    {
      uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15) {
        llvm::ValueSymbolTable::reinsertValue(v15, a1);
      }
    }
  }
  uint64_t v12 = *(void *)(a5 + 40);
  uint64_t v11 = (void *)(a5 + 40);
  *((void *)a1 + 3) = v12;
  *((void *)a1 + 4) = v11;
  *(void *)(v12 + 8) = v10;
  *uint64_t v11 = v10;
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFFF8 | a3;
  *((unsigned char *)a1 + 60) = a4;
  return a1;
}

{
  unsigned int v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(void *)a1 = *a2 + 1576;
  *((void *)a1 + 1) = 0;
  unsigned int v9 = *((_DWORD *)a1 + 5) & 0xC0000000;
  *((_DWORD *)a1 + 4) = 63;
  *((_DWORD *)a1 + 5) = v9;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  uint64_t v10 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  *((void *)a1 + 5) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v14 = *(void *)(a5 + 56);
    if (v14)
    {
      uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15) {
        llvm::ValueSymbolTable::reinsertValue(v15, a1);
      }
    }
  }
  uint64_t v12 = *(void *)(a5 + 40);
  uint64_t v11 = (void *)(a5 + 40);
  *((void *)a1 + 3) = v12;
  *((void *)a1 + 4) = v11;
  *(void *)(v12 + 8) = v10;
  *uint64_t v11 = v10;
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFFF8 | a3;
  *((unsigned char *)a1 + 60) = a4;
  return a1;
}

void llvm::GetElementPtrInst::init(uint64_t ***a1, uint64_t **a2, uint64_t *a3, uint64_t a4, const char **a5)
{
  uint64_t v7 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  uint64_t v8 = -v7;
  unsigned int v9 = &a1[-4 * v7];
  if (*v9)
  {
    uint64_t v28 = &a1[4 * v8];
    uint64_t v30 = v28[2];
    uint64_t v29 = v28 + 2;
    *uint64_t v30 = (uint64_t *)*(v29 - 1);
    uint64_t v31 = *(v29 - 1);
    if (v31) {
      *(void *)(v31 + 16) = *v29;
    }
  }
  *unsigned int v9 = a2;
  if (a2)
  {
    uint64_t v12 = a2[1];
    uint64_t v10 = a2 + 1;
    uint64_t v11 = (void **)v12;
    uint64_t v13 = &a1[4 * v8];
    v13[1] = (uint64_t **)v12;
    if (v12) {
      uint64_t v11[2] = v13 + 1;
    }
    uint64_t v13[2] = v10;
    *uint64_t v10 = (uint64_t *)v9;
  }
  sub_1CC5716C8((uint64_t)&v32, a3, &a3[a4], (uint64_t)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4]);
  llvm::Value::setNameImpl((llvm::Value *)a1, a5);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v14 = ***a1;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
      unsigned int v19 = *v18;
      if (*v18 == a1)
      {
LABEL_14:
        uint64_t v22 = v18[1];
        unint64_t v25 = (unint64_t)*v22;
        uint64_t v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_21:
          *((_DWORD *)a1 + 9) = v27;
          return;
        }
LABEL_22:
        int v27 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_21;
      }
      int v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        unsigned int v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == a1)
        {
          uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_14;
        }
      }
    }
    uint64_t v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_14;
  }
}

llvm::GetElementPtrInst *llvm::GetElementPtrInst::GetElementPtrInst(llvm::GetElementPtrInst *this, const llvm::GetElementPtrInst *a2)
{
  uint64_t v4 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 62;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  sub_1CC5E4108((uint64_t)&v6, (uint64_t *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF), (uint64_t *)a2, (uint64_t)this - 32 * v4);
  *((unsigned char *)this + 17) = *((unsigned char *)a2 + 17) & 0xFE | *((unsigned char *)this + 17) & 1;
  return this;
}

{
  uint64_t v4;
  char v6;

  uint64_t v4 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 62;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  sub_1CC5E4108((uint64_t)&v6, (uint64_t *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF), (uint64_t *)a2, (uint64_t)this - 32 * v4);
  *((unsigned char *)this + 17) = *((unsigned char *)a2 + 17) & 0xFE | *((unsigned char *)this + 17) & 1;
  return this;
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(llvm::GetElementPtrInst *this, llvm::Type *a2, llvm::Value *a3)
{
  int v5 = *((unsigned __int8 *)this + 8);
  if (this && v5 == 16)
  {
    if (llvm::StructType::indexValid(this, a2))
    {
      return llvm::StructType::getTypeAtIndex(this, a2);
    }
    return 0;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(*(void *)a2 + 8);
  }
  if (v7 != 13) {
    return 0;
  }
  if (this && v5 == 17) {
    return *((void *)this + 3);
  }
  uint64_t result = 0;
  if (this)
  {
    if ((v5 & 0xFE) == 0x12) {
      return *((void *)this + 3);
    }
  }
  return result;
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(uint64_t a1, unint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v2 == 16)
  {
    if (*(unsigned int *)(a1 + 12) <= a2) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 16) + 8 * a2;
    return *(void *)v5;
  }
  if (a1 && v2 == 17 || (uint64_t v3 = 0, a1) && (v2 & 0xFE) == 0x12)
  {
    uint64_t v5 = a1 + 24;
    return *(void *)v5;
  }
  return v3;
}

uint64_t llvm::GetElementPtrInst::getIndexedType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = (unsigned int **)(a2 + 8);
    for (uint64_t i = 8 * a3 - 8; ; i -= 8)
    {
      if (!i) {
        return a1;
      }
      uint64_t v5 = *v3;
      int v6 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v7 = *(void *)*v3;
      int v8 = *(_DWORD *)(v7 + 8);
      int v9 = v8 & 0xFE;
      if (a1 && v6 == 16)
      {
        int v10 = *(_DWORD *)(v7 + 8);
        if (v9 == 18) {
          int v10 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
        }
        if (*(_DWORD *)(v7 + 8) == 19 || v10 != 8205) {
          return 0;
        }
        unsigned int v12 = *((unsigned __int8 *)v5 + 16);
        if (v12 > 0x14) {
          return 0;
        }
        uint64_t v13 = *v3;
        if (v9 == 18)
        {
          uint64_t v27 = i;
          uint64_t v29 = v3;
          uint64_t v23 = *v3;
          uint64_t v25 = a1;
          SplatValue = (unsigned int *)llvm::Constant::getSplatValue((llvm::Constant *)v5, 0);
          if (!SplatValue) {
            return 0;
          }
          uint64_t v13 = SplatValue;
          unsigned int v12 = *((unsigned __int8 *)SplatValue + 16);
          uint64_t v5 = v23;
          a1 = v25;
          uint64_t v3 = v29;
          uint64_t i = v27;
        }
        if (v12 != 16) {
          return 0;
        }
        uint64_t v14 = v13 + 6;
        if (v13[8] >= 0x41) {
          uint64_t v14 = (void *)*v14;
        }
        if (*v14 >= (unint64_t)*(unsigned int *)(a1 + 12)) {
          return 0;
        }
        if (*((unsigned char *)v5 + 16) != 16)
        {
          uint64_t v24 = a1;
          uint64_t v28 = v3;
          uint64_t v26 = i;
          AggregateElement = (unsigned int *)llvm::Constant::getAggregateElement((llvm::Constant *)v5, 0);
          uint64_t v3 = v28;
          uint64_t v5 = AggregateElement;
          a1 = v24;
          uint64_t i = v26;
        }
        uint64_t v17 = (unsigned int *)*((void *)v5 + 3);
        uint64_t v15 = v5 + 6;
        uint64_t v16 = v17;
        if (v15[2] >= 0x41) {
          uint64_t v15 = v16;
        }
        uint64_t v18 = (uint64_t *)(*(void *)(a1 + 16) + 8 * *v15);
      }
      else
      {
        if (v9 == 18) {
          LOBYTE(v8) = *(unsigned char *)(**(void **)(v7 + 16) + 8);
        }
        if (v8 != 13) {
          return 0;
        }
        if (!a1 || v6 != 17)
        {
          uint64_t v19 = 0;
          if (!a1 || (v6 & 0xFE) != 0x12) {
            return v19;
          }
        }
        uint64_t v18 = (uint64_t *)(a1 + 24);
      }
      a1 = *v18;
      ++v3;
      if (!*v18) {
        return 0;
      }
    }
  }
  return a1;
}

{
  unsigned int **v3;
  uint64_t i;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  unsigned int *v16;
  void *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *AggregateElement;
  unsigned int *SplatValue;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int **v29;

  if (a3)
  {
    uint64_t v3 = (unsigned int **)(a2 + 8);
    for (uint64_t i = 8 * a3 - 8; ; i -= 8)
    {
      if (!i) {
        return a1;
      }
      uint64_t v5 = *v3;
      int v6 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v7 = *(void *)*v3;
      int v8 = *(_DWORD *)(v7 + 8);
      int v9 = v8 & 0xFE;
      if (a1 && v6 == 16)
      {
        uint64_t v13 = *(_DWORD *)(v7 + 8);
        if (v9 == 18) {
          uint64_t v13 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
        }
        if (*(_DWORD *)(v7 + 8) == 19 || v13 != 8205) {
          return 0;
        }
        uint64_t v15 = *((unsigned __int8 *)v5 + 16);
        if (v15 > 0x14) {
          return 0;
        }
        uint64_t v16 = *v3;
        if (v9 == 18)
        {
          uint64_t v27 = i;
          uint64_t v29 = v3;
          uint64_t v23 = *v3;
          uint64_t v25 = a1;
          SplatValue = (unsigned int *)llvm::Constant::getSplatValue((llvm::Constant *)v5, 0);
          if (!SplatValue) {
            return 0;
          }
          uint64_t v16 = SplatValue;
          uint64_t v15 = *((unsigned __int8 *)SplatValue + 16);
          uint64_t v5 = v23;
          a1 = v25;
          uint64_t v3 = v29;
          uint64_t i = v27;
        }
        if (v15 != 16) {
          return 0;
        }
        uint64_t v17 = v16 + 6;
        if (v16[8] >= 0x41) {
          uint64_t v17 = (void *)*v17;
        }
        if (*v17 >= (unint64_t)*(unsigned int *)(a1 + 12)) {
          return 0;
        }
        if (*((unsigned char *)v5 + 16) != 16)
        {
          uint64_t v24 = a1;
          uint64_t v28 = v3;
          uint64_t v26 = i;
          AggregateElement = (unsigned int *)llvm::Constant::getAggregateElement((llvm::Constant *)v5, 0);
          uint64_t v3 = v28;
          uint64_t v5 = AggregateElement;
          a1 = v24;
          uint64_t i = v26;
        }
        int v20 = (unsigned int *)*((void *)v5 + 3);
        uint64_t v18 = v5 + 6;
        uint64_t v19 = v20;
        if (v18[2] >= 0x41) {
          uint64_t v18 = v19;
        }
        int v10 = (uint64_t *)(*(void *)(a1 + 16) + 8 * *v18);
      }
      else
      {
        if (v9 == 18) {
          LOBYTE(v8) = *(unsigned char *)(**(void **)(v7 + 16) + 8);
        }
        if (v8 != 13) {
          return 0;
        }
        if (!a1 || v6 != 17)
        {
          uint64_t v11 = 0;
          if (!a1 || (v6 & 0xFE) != 0x12) {
            return v11;
          }
        }
        int v10 = (uint64_t *)(a1 + 24);
      }
      a1 = *v10;
      ++v3;
      if (!*v10) {
        return 0;
      }
    }
  }
  return a1;
}

{
  void *v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t *v7;

  if (a3)
  {
    uint64_t v3 = (void *)(a2 + 8);
    for (uint64_t i = 8 * a3 - 8; i; i -= 8)
    {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
      if (a1 && v5 == 16)
      {
        if (*v3 >= (unint64_t)*(unsigned int *)(a1 + 12)) {
          return 0;
        }
        uint64_t v7 = (uint64_t *)(*(void *)(a1 + 16) + 8 * *v3);
      }
      else
      {
        if (!a1 || v5 != 17)
        {
          int v6 = 0;
          if (!a1 || (v5 & 0xFE) != 0x12) {
            return v6;
          }
        }
        uint64_t v7 = (uint64_t *)(a1 + 24);
      }
      int v6 = 0;
      a1 = *v7;
      ++v3;
      if (!*v7) {
        return v6;
      }
    }
  }
  return a1;
}

uint64_t llvm::GetElementPtrInst::hasAllZeroIndices(llvm::GetElementPtrInst *this)
{
  uint64_t v1 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (v1 == 1) {
    return 1;
  }
  unsigned int v2 = 1;
  while (1)
  {
    uint64_t v3 = *((void *)this + 4 * v2 + -4 * v1);
    if (!v3 || *(unsigned char *)(v3 + 16) != 16) {
      break;
    }
    uint64_t v5 = *(unsigned int *)(v3 + 32);
    if (v5 > 0x40)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v5 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)(v3 + 24) + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v5 | 0xFFFFFFC0;
      if ((v5 & 0x3F) == 0) {
        int v10 = 0;
      }
      if (v6 + v10 != v5) {
        return 0;
      }
    }
    else if (*(void *)(v3 + 24))
    {
      return 0;
    }
    if (++v2 == v1) {
      return 1;
    }
  }
  return 0;
}

BOOL llvm::GetElementPtrInst::hasAllConstantIndices(llvm::GetElementPtrInst *this)
{
  uint64_t v1 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (v1 == 1) {
    return 1;
  }
  unsigned int v2 = (char *)this - 32 * v1;
  int v3 = 2;
  do
  {
    int v4 = *(unsigned __int8 *)(*(void *)&v2[32 * (v3 - 1)] + 16);
    BOOL result = v4 == 16;
    if (v1 == v3) {
      break;
    }
    ++v3;
  }
  while (v4 == 16);
  return result;
}

uint64_t llvm::GetElementPtrInst::setIsInBounds(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 17) = *(unsigned char *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::GetElementPtrInst::isInBounds(llvm::GetElementPtrInst *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::GetElementPtrInst::accumulateConstantOffset(llvm::GetElementPtrInst *this, const llvm::DataLayout *a2, llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[6] = *(llvm::Constant **)MEMORY[0x1E4F143B8];
  int v7 = *((_DWORD *)this + 5);
  if ((v7 & 0x40000000) != 0)
  {
    unint64_t v9 = (char *)*((void *)this - 1);
    uint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    unint64_t v9 = (char *)this - 32 * v8;
  }
  unint64_t v10 = 32 * v8 - 32;
  if (v10 >= 0xC1) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v8 != 1)
  {
    uint64_t v11 = (llvm::Constant **)(v9 + 32);
    unsigned int v12 = v18;
    uint64_t v13 = 32 * v8 - 32;
    do
    {
      uint64_t v14 = *v11;
      v11 += 4;
      *v12++ = v14;
      v13 -= 32;
    }
    while (v13);
  }
  BOOL v15 = *((unsigned char *)this + 16) != 62 || this == 0;
  uint64_t v16 = 64;
  if (v15) {
    uint64_t v16 = 24;
  }
  return llvm::GEPOperator::accumulateConstantOffset(*(void *)((char *)this + v16), v18, (v10 >> 5), a2, a3, 0, a7);
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const char **a4, llvm::Instruction *a5)
{
  unint64_t v9 = (char *)this - 64;
  if (*((void *)llvm::Instruction::Instruction(this, *(llvm::Type **)(*(void *)a2 + 24), 61, (llvm::ExtractElementInst *)((char *)this - 64), 2, a5)- 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v18 = *((void *)this - 7);
    if (v18) {
      *(void *)(v18 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v12 = *((void *)a2 + 1);
  uint64_t v11 = (void *)((char *)a2 + 8);
  uint64_t v10 = v12;
  *((void *)this - 7) = v12;
  if (v12) {
    *(void *)(v10 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v11;
  *uint64_t v11 = v9;
  uint64_t v13 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v19 = *((void *)this - 3);
    if (v19) {
      *(void *)(v19 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v13 = a3;
  if (a3)
  {
    uint64_t v16 = *((void *)a3 + 1);
    BOOL v15 = (void *)((char *)a3 + 8);
    uint64_t v14 = v16;
    *((void *)this - 3) = v16;
    if (v16) {
      *(void *)(v14 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v15;
    void *v15 = v13;
  }
  llvm::Value::setName(this, a4);
  return this;
}

{
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ExtractElementInst *v27;
  int v28;
  int v29;
  void *v30;
  unsigned char *v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  uint64_t v36;
  llvm::ValueSymbolTable *v37;
  uint64_t v38;
  uint64_t v39;

  unint64_t v9 = (void *)((char *)this - 64);
  *(void *)this = *(void *)(*(void *)a2 + 24);
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 89;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v19 = *((void *)a5 + 5);
    int v20 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      unint64_t v36 = *(void *)(v19 + 56);
      if (v36)
      {
        int v37 = *(llvm::ValueSymbolTable **)(v36 + 104);
        if (v37) {
          llvm::ValueSymbolTable::reinsertValue(v37, this);
        }
      }
    }
    int v21 = *v20;
    *((void *)this + 3) = *v20;
    *((void *)this + 4) = v20;
    *(void *)(v21 + 8) = v10;
    void *v20 = (uint64_t)v10;
  }
  if (*v9)
  {
    **((void **)this - 6) = *((void *)this - 7);
    unint64_t v38 = *((void *)this - 7);
    if (v38) {
      *(void *)(v38 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v12 = (void *)((char *)a2 + 8);
  uint64_t v11 = v13;
  *((void *)this - 7) = v13;
  if (v13) {
    *(void *)(v11 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v12;
  uint64_t *v12 = v9;
  uint64_t v14 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    unint64_t v39 = *((void *)this - 3);
    if (v39) {
      *(void *)(v39 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v14 = a3;
  if (a3)
  {
    uint64_t v17 = *((void *)a3 + 1);
    uint64_t v16 = (void *)((char *)a3 + 8);
    BOOL v15 = v17;
    *((void *)this - 3) = v17;
    if (v17) {
      *(void *)(v15 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v16;
    *uint64_t v16 = v14;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v22 = ***(void ***)this;
    uint64_t v23 = *(void *)(v22 + 152);
    uint64_t v24 = *(unsigned int *)(v22 + 168);
    if (v24)
    {
      LODWORD(v25) = (v24 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v26 = v23 + 16 * v25;
      uint64_t v27 = *(llvm::ExtractElementInst **)v26;
      if (*(llvm::ExtractElementInst **)v26 == this)
      {
LABEL_21:
        uint64_t v30 = *(void **)(v26 + 8);
        int v33 = *v30;
        uint64_t v31 = v30 + 2;
        char v32 = v33;
        if (v33 >= 5 && *(_DWORD *)v31 == *(_DWORD *)"llvm." && v31[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          unint64_t v35 = llvm::Function::lookupIntrinsicID(v31, v32);
LABEL_28:
          *((_DWORD *)this + 9) = v35;
          return this;
        }
LABEL_29:
        unint64_t v35 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_28;
      }
      uint64_t v28 = 1;
      while (v27 != (llvm::ExtractElementInst *)-4096)
      {
        uint64_t v29 = v25 + v28++;
        uint64_t v25 = v29 & (v24 - 1);
        uint64_t v27 = *(llvm::ExtractElementInst **)(v23 + 16 * v25);
        if (v27 == this)
        {
          uint64_t v26 = v23 + 16 * v25;
          goto LABEL_21;
        }
      }
    }
    uint64_t v26 = v23 + 16 * v24;
    goto LABEL_21;
  }
  return this;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const char **a4, llvm::BasicBlock *a5)
{
  *(void *)this = *(void *)(*(void *)a2 + 24);
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 89;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a5;
  *((_WORD *)a5 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v23 = *((void *)a5 + 7);
    if (v23)
    {
      uint64_t v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, this);
      }
    }
  }
  uint64_t v12 = *((void *)a5 + 5);
  uint64_t v11 = (void *)((char *)a5 + 40);
  *((void *)this + 3) = v12;
  *((void *)this + 4) = v11;
  *(void *)(v12 + 8) = v10;
  *uint64_t v11 = v10;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v13 = *((void *)this - 7);
    if (v13) {
      *(void *)(v13 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v16 = *((void *)a2 + 1);
  BOOL v15 = (void *)((char *)a2 + 8);
  uint64_t v14 = v16;
  *((void *)this - 7) = v16;
  if (v16) {
    *(void *)(v14 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v15;
  void *v15 = (char *)this - 64;
  uint64_t v17 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v18 = *((void *)this - 3);
    if (v18) {
      *(void *)(v18 + 16) = *((void *)this - 2);
    }
  }
  void *v17 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    int v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    void *v20 = v17;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_34;
    }
    uint64_t v25 = ***(void ***)this;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(llvm::ExtractElementInst **)v29;
      if (*(llvm::ExtractElementInst **)v29 == this)
      {
LABEL_27:
        int v33 = *(void **)(v29 + 8);
        unint64_t v36 = *v33;
        uint64_t v34 = v33 + 2;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_35:
          *((_DWORD *)this + 9) = v38;
          return this;
        }
LABEL_34:
        int v38 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_35;
      }
      int v31 = 1;
      while (v30 != (llvm::ExtractElementInst *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(llvm::ExtractElementInst **)(v26 + 16 * v28);
        if (v30 == this)
        {
          uint64_t v29 = v26 + 16 * v28;
          goto LABEL_27;
        }
      }
    }
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_27;
  }
  return this;
}

BOOL llvm::ExtractElementInst::isValidOperands(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12 && *(unsigned char *)(*(void *)a2 + 8) == 13;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::Instruction *a6)
{
  uint64_t v11 = (void *)((char *)this - 96);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *((_DWORD *)this + 4) = 90;
  *((_DWORD *)this + 5) = v12;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    uint64_t v26 = *((void *)a6 + 5);
    uint64_t v27 = (uint64_t *)((char *)a6 + 24);
    *((void *)this + 5) = v26;
    *(_WORD *)(v26 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v43 = *(void *)(v26 + 56);
      if (v43)
      {
        int v44 = *(llvm::ValueSymbolTable **)(v43 + 104);
        if (v44) {
          llvm::ValueSymbolTable::reinsertValue(v44, this);
        }
      }
    }
    uint64_t v28 = *v27;
    *((void *)this + 3) = *v27;
    *((void *)this + 4) = v27;
    *(void *)(v28 + 8) = v13;
    *uint64_t v27 = (uint64_t)v13;
  }
  if (*v11)
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v45 = *((void *)this - 11);
    if (v45) {
      *(void *)(v45 + 16) = *((void *)this - 10);
    }
  }
  *((void *)this - 12) = a2;
  uint64_t v16 = *((void *)a2 + 1);
  BOOL v15 = (void *)((char *)a2 + 8);
  uint64_t v14 = v16;
  *((void *)this - 11) = v16;
  if (v16) {
    *(void *)(v14 + 16) = (char *)this - 88;
  }
  *((void *)this - 10) = v15;
  void *v15 = v11;
  uint64_t v17 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v46 = *((void *)this - 7);
    if (v46) {
      *(void *)(v46 + 16) = *((void *)this - 6);
    }
  }
  void *v17 = a3;
  if (a3)
  {
    uint64_t v20 = *((void *)a3 + 1);
    uint64_t v19 = (void *)((char *)a3 + 8);
    uint64_t v18 = v20;
    *((void *)this - 7) = v20;
    if (v20) {
      *(void *)(v18 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v19;
    void *v19 = v17;
  }
  uint64_t v21 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v47 = *((void *)this - 3);
    if (v47) {
      *(void *)(v47 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v21 = a4;
  if (a4)
  {
    uint64_t v24 = *((void *)a4 + 1);
    uint64_t v23 = (void *)((char *)a4 + 8);
    uint64_t v22 = v24;
    *((void *)this - 3) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v23;
    *uint64_t v23 = v21;
  }
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_34;
    }
    uint64_t v29 = ***(void ***)this;
    uint64_t v30 = *(void *)(v29 + 152);
    uint64_t v31 = *(unsigned int *)(v29 + 168);
    if (v31)
    {
      LODWORD(v32) = (v31 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v33 = v30 + 16 * v32;
      uint64_t v34 = *(llvm::InsertElementInst **)v33;
      if (*(llvm::InsertElementInst **)v33 == this)
      {
LABEL_26:
        int v37 = *(void **)(v33 + 8);
        unint64_t v40 = *v37;
        int v38 = v37 + 2;
        unint64_t v39 = v40;
        if (v40 >= 5 && *(_DWORD *)v38 == *(_DWORD *)"llvm." && v38[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v42 = llvm::Function::lookupIntrinsicID(v38, v39);
LABEL_33:
          *((_DWORD *)this + 9) = v42;
          return this;
        }
LABEL_34:
        int v42 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v35 = 1;
      while (v34 != (llvm::InsertElementInst *)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        uint64_t v34 = *(llvm::InsertElementInst **)(v30 + 16 * v32);
        if (v34 == this)
        {
          uint64_t v33 = v30 + 16 * v32;
          goto LABEL_26;
        }
      }
    }
    uint64_t v33 = v30 + 16 * v31;
    goto LABEL_26;
  }
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::BasicBlock *a6)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *((_DWORD *)this + 4) = 90;
  *((_DWORD *)this + 5) = v12;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v31 = *((void *)a6 + 7);
    if (v31)
    {
      uint64_t v32 = *(llvm::ValueSymbolTable **)(v31 + 104);
      if (v32) {
        llvm::ValueSymbolTable::reinsertValue(v32, this);
      }
    }
  }
  uint64_t v15 = *((void *)a6 + 5);
  uint64_t v14 = (void *)((char *)a6 + 40);
  *((void *)this + 3) = v15;
  *((void *)this + 4) = v14;
  *(void *)(v15 + 8) = v13;
  *uint64_t v14 = v13;
  if (*((void *)this - 12))
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v16 = *((void *)this - 11);
    if (v16) {
      *(void *)(v16 + 16) = *((void *)this - 10);
    }
  }
  *((void *)this - 12) = a2;
  uint64_t v19 = *((void *)a2 + 1);
  uint64_t v18 = (void *)((char *)a2 + 8);
  uint64_t v17 = v19;
  *((void *)this - 11) = v19;
  if (v19) {
    *(void *)(v17 + 16) = (char *)this - 88;
  }
  *((void *)this - 10) = v18;
  void *v18 = (char *)this - 96;
  uint64_t v20 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v21 = *((void *)this - 7);
    if (v21) {
      *(void *)(v21 + 16) = *((void *)this - 6);
    }
  }
  void *v20 = a3;
  if (a3)
  {
    uint64_t v24 = *((void *)a3 + 1);
    uint64_t v23 = (void *)((char *)a3 + 8);
    uint64_t v22 = v24;
    *((void *)this - 7) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v23;
    *uint64_t v23 = v20;
  }
  uint64_t v25 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v26 = *((void *)this - 3);
    if (v26) {
      *(void *)(v26 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v25 = a4;
  if (a4)
  {
    uint64_t v29 = *((void *)a4 + 1);
    uint64_t v28 = (void *)((char *)a4 + 8);
    uint64_t v27 = v29;
    *((void *)this - 3) = v29;
    if (v29) {
      *(void *)(v27 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v28;
    *uint64_t v28 = v25;
  }
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_41;
    }
    uint64_t v33 = ***(void ***)this;
    uint64_t v34 = *(void *)(v33 + 152);
    uint64_t v35 = *(unsigned int *)(v33 + 168);
    if (v35)
    {
      LODWORD(v36) = (v35 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v37 = v34 + 16 * v36;
      int v38 = *(llvm::InsertElementInst **)v37;
      if (*(llvm::InsertElementInst **)v37 == this)
      {
LABEL_34:
        int v41 = *(void **)(v37 + 8);
        unint64_t v44 = *v41;
        int v42 = v41 + 2;
        unint64_t v43 = v44;
        if (v44 >= 5 && *(_DWORD *)v42 == *(_DWORD *)"llvm." && v42[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v46 = llvm::Function::lookupIntrinsicID(v42, v43);
LABEL_42:
          *((_DWORD *)this + 9) = v46;
          return this;
        }
LABEL_41:
        int v46 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_42;
      }
      int v39 = 1;
      while (v38 != (llvm::InsertElementInst *)-4096)
      {
        int v40 = v36 + v39++;
        uint64_t v36 = v40 & (v35 - 1);
        int v38 = *(llvm::InsertElementInst **)(v34 + 16 * v36);
        if (v38 == this)
        {
          uint64_t v37 = v34 + 16 * v36;
          goto LABEL_34;
        }
      }
    }
    uint64_t v37 = v34 + 16 * v35;
    goto LABEL_34;
  }
  return this;
}

BOOL llvm::InsertElementInst::isValidOperands(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12
      && *a2 == *(void *)(*(void *)a1 + 24)
      && *(unsigned char *)(*(void *)a3 + 8) == 13;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::PoisonValue **a2, llvm::Value *a3, const char **a4, llvm::Instruction *a5)
{
  uint64_t v10 = (llvm::Value *)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(this, (llvm::Value *)a2, v10, a3, a4, a5);
}

{
  llvm::Value *v10;
  uint64_t vars8;

  uint64_t v10 = (llvm::Value *)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(this, (llvm::Value *)a2, v10, a3, a4, a5);
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::Instruction *a6)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *(uint64_t ***)(*(void *)a2 + 24);
  uint64_t v13 = (llvm::Type *)*(unsigned int *)(*(void *)a4 + 32);
  if (*(unsigned char *)(*(void *)a4 + 8) == 19) {
    llvm::ScalableVectorType::get(v12, v13);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v13);
  }
  *(void *)this = v14;
  *((void *)this + 1) = 0;
  unsigned int v15 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 91;
  *((_DWORD *)this + 5) = v15;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v16 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    uint64_t v28 = *((void *)a6 + 5);
    uint64_t v29 = (uint64_t *)((char *)a6 + 24);
    *((void *)this + 5) = v28;
    *(_WORD *)(v28 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v45 = *(void *)(v28 + 56);
      if (v45)
      {
        int v46 = *(llvm::ValueSymbolTable **)(v45 + 104);
        if (v46) {
          llvm::ValueSymbolTable::reinsertValue(v46, this);
        }
      }
    }
    uint64_t v30 = *v29;
    *((void *)this + 3) = *v29;
    *((void *)this + 4) = v29;
    *(void *)(v30 + 8) = v16;
    *uint64_t v29 = (uint64_t)v16;
  }
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x400000000;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v47 = *((void *)this - 7);
    if (v47) {
      *(void *)(v47 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v19 = *((void *)a2 + 1);
  uint64_t v18 = (void *)((char *)a2 + 8);
  uint64_t v17 = v19;
  *((void *)this - 7) = v19;
  if (v19) {
    *(void *)(v17 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v18;
  void *v18 = (char *)this - 64;
  uint64_t v20 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v48 = *((void *)this - 3);
    if (v48) {
      *(void *)(v48 + 16) = *((void *)this - 2);
    }
  }
  void *v20 = a3;
  if (a3)
  {
    uint64_t v23 = *((void *)a3 + 1);
    uint64_t v22 = (void *)((char *)a3 + 8);
    uint64_t v21 = v23;
    *((void *)this - 3) = v23;
    if (v23) {
      *(void *)(v21 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v22;
    *uint64_t v22 = v20;
  }
  __src = v51;
  uint64_t v50 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&__src);
  uint64_t v24 = __src;
  uint64_t v25 = v50;
  *((_DWORD *)this + 18) = 0;
  if (v25 > *((_DWORD *)this + 19)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v25)
  {
    memcpy(*((void **)this + 8), v24, 4 * v25);
    int v26 = *((_DWORD *)this + 18);
  }
  else
  {
    int v26 = 0;
  }
  *((_DWORD *)this + 18) = v26 + v25;
  *((void *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v24, v25, *(unsigned char **)this);
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_36;
    }
    uint64_t v31 = ***(void ***)this;
    uint64_t v32 = *(void *)(v31 + 152);
    uint64_t v33 = *(unsigned int *)(v31 + 168);
    if (v33)
    {
      LODWORD(v34) = (v33 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v35 = v32 + 16 * v34;
      uint64_t v36 = *(llvm::ShuffleVectorInst **)v35;
      if (*(llvm::ShuffleVectorInst **)v35 == this)
      {
LABEL_28:
        int v39 = *(void **)(v35 + 8);
        unint64_t v42 = *v39;
        int v40 = v39 + 2;
        unint64_t v41 = v42;
        if (v42 >= 5 && *(_DWORD *)v40 == *(_DWORD *)"llvm." && v40[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v44 = llvm::Function::lookupIntrinsicID(v40, v41);
LABEL_35:
          *((_DWORD *)this + 9) = v44;
          goto LABEL_16;
        }
LABEL_36:
        int v44 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_35;
      }
      int v37 = 1;
      while (v36 != (llvm::ShuffleVectorInst *)-4096)
      {
        int v38 = v34 + v37++;
        uint64_t v34 = v38 & (v33 - 1);
        uint64_t v36 = *(llvm::ShuffleVectorInst **)(v32 + 16 * v34);
        if (v36 == this)
        {
          uint64_t v35 = v32 + 16 * v34;
          goto LABEL_28;
        }
      }
    }
    uint64_t v35 = v32 + 16 * v33;
    goto LABEL_28;
  }
LABEL_16:
  if (__src != v51) {
    free(__src);
  }
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::PoisonValue **a2, llvm::Value *a3, const char **a4, llvm::BasicBlock *a5)
{
  uint64_t v10 = (llvm::Value *)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(this, (llvm::Value *)a2, v10, a3, a4, a5);
}

{
  llvm::Value *v10;
  uint64_t vars8;

  uint64_t v10 = (llvm::Value *)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(this, (llvm::Value *)a2, v10, a3, a4, a5);
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::BasicBlock *a6)
{
  v50[8] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *(uint64_t ***)(*(void *)a2 + 24);
  uint64_t v13 = (llvm::Type *)*(unsigned int *)(*(void *)a4 + 32);
  if (*(unsigned char *)(*(void *)a4 + 8) == 19) {
    llvm::ScalableVectorType::get(v12, v13);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v13);
  }
  *(void *)this = v14;
  *((void *)this + 1) = 0;
  unsigned int v15 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 91;
  *((_DWORD *)this + 5) = v15;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v16 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v32 = *((void *)a6 + 7);
    if (v32)
    {
      uint64_t v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
      if (v33) {
        llvm::ValueSymbolTable::reinsertValue(v33, this);
      }
    }
  }
  uint64_t v18 = *((void *)a6 + 5);
  uint64_t v17 = (void *)((char *)a6 + 40);
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 3) = v18;
  *((void *)this + 4) = v17;
  *(void *)(v18 + 8) = v16;
  void *v17 = v16;
  *((void *)this + 9) = 0x400000000;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v19 = *((void *)this - 7);
    if (v19) {
      *(void *)(v19 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v22 = *((void *)a2 + 1);
  uint64_t v21 = (void *)((char *)a2 + 8);
  uint64_t v20 = v22;
  *((void *)this - 7) = v22;
  if (v22) {
    *(void *)(v20 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v21;
  *uint64_t v21 = (char *)this - 64;
  uint64_t v23 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v24 = *((void *)this - 3);
    if (v24) {
      *(void *)(v24 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v23 = a3;
  if (a3)
  {
    uint64_t v27 = *((void *)a3 + 1);
    int v26 = (void *)((char *)a3 + 8);
    uint64_t v25 = v27;
    *((void *)this - 3) = v27;
    if (v27) {
      *(void *)(v25 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v26;
    *int v26 = v23;
  }
  __src = v50;
  uint64_t v49 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&__src);
  uint64_t v28 = __src;
  uint64_t v29 = v49;
  *((_DWORD *)this + 18) = 0;
  if (v29 > *((_DWORD *)this + 19)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v29)
  {
    memcpy(*((void **)this + 8), v28, 4 * v29);
    int v30 = *((_DWORD *)this + 18);
  }
  else
  {
    int v30 = 0;
  }
  *((_DWORD *)this + 18) = v30 + v29;
  *((void *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v28, v29, *(unsigned char **)this);
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_41;
    }
    uint64_t v34 = ***(void ***)this;
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(unsigned int *)(v34 + 168);
    if (v36)
    {
      LODWORD(v37) = (v36 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v38 = v35 + 16 * v37;
      int v39 = *(llvm::ShuffleVectorInst **)v38;
      if (*(llvm::ShuffleVectorInst **)v38 == this)
      {
LABEL_34:
        unint64_t v42 = *(void **)(v38 + 8);
        unint64_t v45 = *v42;
        unint64_t v43 = v42 + 2;
        unint64_t v44 = v45;
        if (v45 >= 5 && *(_DWORD *)v43 == *(_DWORD *)"llvm." && v43[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v47 = llvm::Function::lookupIntrinsicID(v43, v44);
LABEL_42:
          *((_DWORD *)this + 9) = v47;
          goto LABEL_20;
        }
LABEL_41:
        int v47 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_42;
      }
      int v40 = 1;
      while (v39 != (llvm::ShuffleVectorInst *)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        int v39 = *(llvm::ShuffleVectorInst **)(v35 + 16 * v37);
        if (v39 == this)
        {
          uint64_t v38 = v35 + 16 * v37;
          goto LABEL_34;
        }
      }
    }
    uint64_t v38 = v35 + 16 * v36;
    goto LABEL_34;
  }
LABEL_20:
  if (__src != v50) {
    free(__src);
  }
  return this;
}

uint64_t ***llvm::ShuffleVectorInst::ShuffleVectorInst(uint64_t ***a1, llvm::PoisonValue **a2, void *a3, llvm::Type *a4, const char **a5, uint64_t a6)
{
  unsigned int v12 = (uint64_t **)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, (uint64_t **)a2, v12, a3, a4, a5, a6);
}

{
  uint64_t **v12;
  uint64_t vars8;

  unsigned int v12 = (uint64_t **)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, (uint64_t **)a2, v12, a3, a4, a5, a6);
}

{
  uint64_t **v12;
  uint64_t vars8;

  unsigned int v12 = (uint64_t **)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, (uint64_t **)a2, v12, a3, a4, a5, a6);
}

{
  uint64_t **v12;
  uint64_t vars8;

  unsigned int v12 = (uint64_t **)llvm::PoisonValue::get(*a2, (llvm::Type *)a2);

  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, (uint64_t **)a2, v12, a3, a4, a5, a6);
}

uint64_t ***llvm::ShuffleVectorInst::ShuffleVectorInst(uint64_t ***a1, uint64_t **a2, uint64_t **a3, void *a4, llvm::Type *a5, const char **a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t **)(*a2)[3];
  if (*((unsigned char *)*a2 + 8) == 19) {
    llvm::ScalableVectorType::get(v14, a5);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, a5);
  }
  *a1 = v15;
  a1[1] = 0;
  unsigned int v16 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v16;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v17 = (uint64_t *)(a1 + 3);
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a7)
  {
    uint64_t v27 = *(void *)(a7 + 40);
    uint64_t v28 = (uint64_t **)(a7 + 24);
    a1[5] = (uint64_t **)v27;
    *(_WORD *)(v27 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v44 = *(void *)(v27 + 56);
      if (v44)
      {
        unint64_t v45 = *(llvm::ValueSymbolTable **)(v44 + 104);
        if (v45) {
          llvm::ValueSymbolTable::reinsertValue(v45, (llvm::Value *)a1);
        }
      }
    }
    uint64_t v29 = *v28;
    a1[3] = (uint64_t **)*v28;
    a1[4] = v28;
    v29[1] = (uint64_t)v17;
    *uint64_t v28 = v17;
  }
  a1[8] = (uint64_t **)(a1 + 10);
  a1[9] = (uint64_t **)0x400000000;
  if (*(a1 - 8))
  {
    **(a1 - 6) = (uint64_t *)*(a1 - 7);
    uint64_t v46 = (uint64_t)*(a1 - 7);
    if (v46) {
      *(void *)(v46 + 16) = *(a1 - 6);
    }
  }
  *(a1 - 8) = a2;
  uint64_t v20 = a2[1];
  uint64_t v19 = a2 + 1;
  uint64_t v18 = v20;
  *(a1 - 7) = (uint64_t **)v20;
  if (v20) {
    v18[2] = (uint64_t)(a1 - 7);
  }
  *(a1 - 6) = v19;
  void *v19 = (uint64_t *)(a1 - 8);
  uint64_t v21 = a1 - 4;
  if (*(a1 - 4))
  {
    **(a1 - 2) = (uint64_t *)*(a1 - 3);
    uint64_t v47 = (uint64_t)*(a1 - 3);
    if (v47) {
      *(void *)(v47 + 16) = *(a1 - 2);
    }
  }
  *uint64_t v21 = a3;
  if (a3)
  {
    uint64_t v24 = a3[1];
    uint64_t v23 = a3 + 1;
    uint64_t v22 = v24;
    *(a1 - 3) = (uint64_t **)v24;
    if (v24) {
      v22[2] = (uint64_t)(a1 - 3);
    }
    *(a1 - 2) = v23;
    *uint64_t v23 = (uint64_t *)v21;
  }
  int v25 = 0;
  *((_DWORD *)a1 + 18) = 0;
  if ((unint64_t)(4 * (void)a5) >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a5)
  {
    memcpy(a1[8], a4, 4 * (void)a5);
    int v25 = *((_DWORD *)a1 + 18);
  }
  *((_DWORD *)a1 + 18) = v25 + ((unint64_t)(4 * (void)a5) >> 2);
  a1[12] = (uint64_t **)llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, (uint64_t)a5, *a1);
  llvm::Value::setNameImpl((llvm::Value *)a1, a6);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_34;
    }
    uint64_t v30 = ***a1;
    uint64_t v31 = *(void *)(v30 + 152);
    uint64_t v32 = *(unsigned int *)(v30 + 168);
    if (v32)
    {
      LODWORD(v33) = (v32 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
      uint64_t v35 = *v34;
      if (*v34 == a1)
      {
LABEL_26:
        uint64_t v38 = v34[1];
        unint64_t v41 = (unint64_t)*v38;
        int v39 = v38 + 2;
        unint64_t v40 = v41;
        if (v41 >= 5 && *(_DWORD *)v39 == *(_DWORD *)"llvm." && v39[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v43 = llvm::Function::lookupIntrinsicID(v39, v40);
LABEL_33:
          *((_DWORD *)a1 + 9) = v43;
          return a1;
        }
LABEL_34:
        int v43 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v36 = 1;
      while (v35 != (uint64_t ***)-4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & (v32 - 1);
        uint64_t v35 = *(uint64_t ****)(v31 + 16 * v33);
        if (v35 == a1)
        {
          uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
          goto LABEL_26;
        }
      }
    }
    uint64_t v34 = (uint64_t ****)(v31 + 16 * v32);
    goto LABEL_26;
  }
  return a1;
}

{
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t ***v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t *v28;
  int v29;
  uint64_t v31;
  llvm::ValueSymbolTable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ****v37;
  uint64_t ***v38;
  int v39;
  int v40;
  uint64_t ***v41;
  unsigned char *v42;
  unint64_t v43;
  unint64_t v44;
  int v46;

  uint64_t v14 = (uint64_t **)(*a2)[3];
  if (*((unsigned char *)*a2 + 8) == 19) {
    llvm::ScalableVectorType::get(v14, a5);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, a5);
  }
  *a1 = v15;
  a1[1] = 0;
  unsigned int v16 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v16;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v17 = (uint64_t *)(a1 + 3);
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  a1[5] = (uint64_t **)a7;
  *(_WORD *)(a7 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v31 = *(void *)(a7 + 56);
    if (v31)
    {
      uint64_t v32 = *(llvm::ValueSymbolTable **)(v31 + 104);
      if (v32) {
        llvm::ValueSymbolTable::reinsertValue(v32, (llvm::Value *)a1);
      }
    }
  }
  uint64_t v19 = *(void *)(a7 + 40);
  uint64_t v18 = (uint64_t **)(a7 + 40);
  a1[8] = (uint64_t **)(a1 + 10);
  a1[3] = (uint64_t **)v19;
  a1[4] = v18;
  *(void *)(v19 + 8) = v17;
  uint64_t *v18 = v17;
  a1[9] = (uint64_t **)0x400000000;
  if (*(a1 - 8))
  {
    **(a1 - 6) = (uint64_t *)*(a1 - 7);
    uint64_t v20 = (uint64_t)*(a1 - 7);
    if (v20) {
      *(void *)(v20 + 16) = *(a1 - 6);
    }
  }
  *(a1 - 8) = a2;
  uint64_t v23 = a2[1];
  uint64_t v22 = a2 + 1;
  uint64_t v21 = v23;
  *(a1 - 7) = (uint64_t **)v23;
  if (v23) {
    v21[2] = (uint64_t)(a1 - 7);
  }
  *(a1 - 6) = v22;
  *uint64_t v22 = (uint64_t *)(a1 - 8);
  uint64_t v24 = a1 - 4;
  if (*(a1 - 4))
  {
    **(a1 - 2) = (uint64_t *)*(a1 - 3);
    int v25 = (uint64_t)*(a1 - 3);
    if (v25) {
      *(void *)(v25 + 16) = *(a1 - 2);
    }
  }
  *uint64_t v24 = a3;
  if (a3)
  {
    uint64_t v28 = a3[1];
    uint64_t v27 = a3 + 1;
    int v26 = v28;
    *(a1 - 3) = (uint64_t **)v28;
    if (v28) {
      v26[2] = (uint64_t)(a1 - 3);
    }
    *(a1 - 2) = v27;
    *uint64_t v27 = (uint64_t *)v24;
  }
  uint64_t v29 = 0;
  *((_DWORD *)a1 + 18) = 0;
  if ((unint64_t)(4 * (void)a5) >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a5)
  {
    memcpy(a1[8], a4, 4 * (void)a5);
    uint64_t v29 = *((_DWORD *)a1 + 18);
  }
  *((_DWORD *)a1 + 18) = v29 + ((unint64_t)(4 * (void)a5) >> 2);
  a1[12] = (uint64_t **)llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, (uint64_t)a5, *a1);
  llvm::Value::setNameImpl((llvm::Value *)a1, a6);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_39;
    }
    uint64_t v33 = ***a1;
    uint64_t v34 = *(void *)(v33 + 152);
    uint64_t v35 = *(unsigned int *)(v33 + 168);
    if (v35)
    {
      LODWORD(v36) = (v35 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      int v37 = (uint64_t ****)(v34 + 16 * v36);
      uint64_t v38 = *v37;
      if (*v37 == a1)
      {
LABEL_32:
        unint64_t v41 = v37[1];
        uint64_t v44 = (unint64_t)*v41;
        unint64_t v42 = v41 + 2;
        int v43 = v44;
        if (v44 >= 5 && *(_DWORD *)v42 == *(_DWORD *)"llvm." && v42[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          uint64_t v46 = llvm::Function::lookupIntrinsicID(v42, v43);
LABEL_40:
          *((_DWORD *)a1 + 9) = v46;
          return a1;
        }
LABEL_39:
        uint64_t v46 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_40;
      }
      int v39 = 1;
      while (v38 != (uint64_t ***)-4096)
      {
        unint64_t v40 = v36 + v39++;
        int v36 = v40 & (v35 - 1);
        uint64_t v38 = *(uint64_t ****)(v34 + 16 * v36);
        if (v38 == a1)
        {
          int v37 = (uint64_t ****)(v34 + 16 * v36);
          goto LABEL_32;
        }
      }
    }
    int v37 = (uint64_t ****)(v34 + 16 * v35);
    goto LABEL_32;
  }
  return a1;
}

void llvm::ShuffleVectorInst::getShuffleMask(llvm::Constant *this, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(*(void *)this + 32);
  int v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 13)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 8);
    if (v3 != v9 && v3 >= v9) {
      goto LABEL_12;
    }
    if (v3 == v9) {
      return;
    }
    if (v3 >= v9)
    {
LABEL_12:
      if (v3 > *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero((void *)(*(void *)a2 + 4 * *(unsigned int *)(a2 + 8)), 4 * (v3 - v9));
      LODWORD(v3) = v3 - v9 + *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v3;
    return;
  }
  if (*(_DWORD *)(a2 + 12) < v3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (*(unsigned char *)(*(void *)this + 8) == 19)
  {
    if ((v4 - 11) >= 2) {
      int v15 = 0;
    }
    else {
      int v15 = -1;
    }
    if (v3)
    {
      unsigned int v16 = *(_DWORD *)(a2 + 8);
      do
      {
        if (v16 >= *(_DWORD *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v16) = v15;
        unsigned int v16 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v16;
        LODWORD(v3) = v3 - 1;
      }
      while (v3);
    }
  }
  else if ((v4 & 0xFE) == 0xE)
  {
    if (v3)
    {
      unsigned int v6 = 0;
      do
      {
        int ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(this, v6);
        unint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v8 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v8) = ElementAsInteger;
        ++*(_DWORD *)(a2 + 8);
        ++v6;
      }
      while (v3 != v6);
    }
  }
  else if (v3)
  {
    uint64_t v10 = 0;
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement(this, v10);
      if (*((unsigned __int8 *)AggregateElement + 16) - 11 < 2)
      {
        LODWORD(v13) = -1;
      }
      else
      {
        unsigned int v12 = AggregateElement + 3;
        if (*((_DWORD *)AggregateElement + 8) >= 0x41u) {
          unsigned int v12 = (void *)*v12;
        }
        uint64_t v13 = (void *)*v12;
      }
      unint64_t v14 = *(unsigned int *)(a2 + 8);
      if (v14 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v14) = v13;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v10 = (llvm::Type *)(v10 + 1);
    }
    while (v3 != v10);
  }
}

uint64_t llvm::ShuffleVectorInst::setShuffleMask(uint64_t a1, void *__src, uint64_t a3)
{
  int v6 = 0;
  *(_DWORD *)(a1 + 72) = 0;
  if ((4 * a3) >> 2 > (unint64_t)*(unsigned int *)(a1 + 76)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3)
  {
    memcpy(*(void **)(a1 + 64), __src, 4 * a3);
    int v6 = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v6 + ((unint64_t)(4 * a3) >> 2);
  uint64_t result = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)__src, a3, *(unsigned char **)a1);
  *(void *)(a1 + 96) = result;
  return result;
}

void llvm::ShuffleVectorInst::commute(llvm::ShuffleVectorInst *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v2 = (char *)this - 64;
  int v3 = *(_DWORD *)(**((void **)this - 8) + 32);
  uint64_t v4 = *((unsigned int *)this + 18);
  if (v4 >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v4)
  {
    bzero(v24, 4 * (int)v4);
    uint64_t v5 = v24;
    unsigned int v23 = v4;
    int v6 = (int *)*((void *)v2 + 16);
    do
    {
      int v8 = *v6++;
      int v7 = v8;
      if (v8 >= v3) {
        int v9 = -v3;
      }
      else {
        int v9 = v3;
      }
      int v10 = v9 + v7;
      if (v7 == -1) {
        int v11 = -1;
      }
      else {
        int v11 = v10;
      }
      *v5++ = v11;
      --v4;
    }
    while (v4);
    uint64_t v12 = v23;
    *((_DWORD *)this + 18) = 0;
    if (v23 > *((_DWORD *)this + 19)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(*((void **)this + 8), v24, 4 * v23);
    int v13 = *((_DWORD *)this + 18);
    unsigned int v14 = v23;
  }
  else
  {
    uint64_t v12 = 0;
    unsigned int v14 = 0;
    int v13 = 0;
  }
  *((_DWORD *)this + 18) = v13 + v14;
  uint64_t v15 = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v24, v12, *(unsigned char **)this);
  uint64_t v16 = *((void *)this - 4);
  *((void *)this + 12) = v15;
  uint64_t v17 = *((void *)this - 8);
  if (v17 != v16)
  {
    uint64_t v18 = *((void *)this - 3);
    *((void *)this - 8) = v16;
    *((void *)this - 4) = v17;
    long long v19 = *(_OWORD *)((char *)this - 56);
    uint64_t v20 = (void *)*((void *)this - 2);
    *((void *)this - 7) = v18;
    *((void *)this - 6) = v20;
    *(_OWORD *)((char *)this - 24) = v19;
    void *v20 = v2;
    uint64_t v21 = *((void *)this - 7);
    if (v21) {
      *(void *)(v21 + 16) = (char *)this - 56;
    }
    **((void **)this - 2) = (char *)this - 32;
    uint64_t v22 = *((void *)this - 3);
    if (v22) {
      *(void *)(v22 + 16) = (char *)this - 24;
    }
  }
}

uint64_t llvm::ShuffleVectorInst::isValidOperands(uint64_t *a1, void *a2, int *__s2, uint64_t a4)
{
  uint64_t v4 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12 && v4 == *a2)
  {
    if (a4)
    {
      int v5 = 2 * *(_DWORD *)(v4 + 32);
      uint64_t v6 = 4 * a4;
      int v7 = __s2;
      while (*v7 == -1 || *v7 < v5)
      {
        ++v7;
        v6 -= 4;
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      if (*(_DWORD *)(*a1 + 8) != 19
        || (*__s2 + 1) <= 1 && a4 && (a4 == 1 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4)))
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t llvm::ShuffleVectorInst::isValidOperands(llvm::ShuffleVectorInst *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::Value *a4)
{
  uint64_t v4 = *(void *)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12 || v4 != *(void *)a2) {
    return 0;
  }
  uint64_t v6 = *(void *)a3;
  BOOL v7 = *(void *)a3 && (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 18;
  if (!v7
    || *(_DWORD *)(*(void *)(v6 + 24) + 8) != 8205
    || (*(_DWORD *)(*(void *)this + 8) == 19) != (*(_DWORD *)(*(void *)a3 + 8) == 19))
  {
    return 0;
  }
  int v9 = *((unsigned __int8 *)a3 + 16);
  if ((v9 - 11) < 3) {
    return 1;
  }
  if (v9 == 10)
  {
    int v10 = *((_DWORD *)a3 + 5);
    if ((v10 & 0x40000000) != 0)
    {
      uint64_t v12 = (char *)*((void *)a3 - 1);
      uint64_t v11 = v10 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v11 = v10 & 0x7FFFFFF;
      uint64_t v12 = (char *)a3 - 32 * v11;
    }
    if (v11)
    {
      int v19 = *(_DWORD *)(v4 + 32);
      uint64_t v20 = &v12[32 * v11];
      unint64_t v21 = (2 * v19);
      uint64_t result = 1;
      while (1)
      {
        uint64_t v22 = *(void *)v12;
        int v23 = *(unsigned __int8 *)(*(void *)v12 + 16);
        if (*(void *)v12) {
          BOOL v24 = v23 == 16;
        }
        else {
          BOOL v24 = 0;
        }
        if (v24)
        {
          uint64_t v25 = (unint64_t *)(v22 + 24);
          uint64_t v26 = *(unsigned int *)(v22 + 32);
          if (v26 >= 0x41)
          {
            int v27 = 0;
            int64_t v28 = (unint64_t)(v26 + 63) >> 6;
            do
            {
              if (v28-- < 1) {
                break;
              }
              unint64_t v30 = *(void *)(*v25 + 8 * v28);
              v27 += __clz(v30);
            }
            while (!v30);
            int v31 = v26 | 0xFFFFFFC0;
            if ((v26 & 0x3F) == 0) {
              int v31 = 0;
            }
            if ((v26 - v27 - v31) > 0x40) {
              return 0;
            }
            uint64_t v25 = (unint64_t *)*v25;
          }
          if (*v25 >= v21) {
            return 0;
          }
        }
        else if ((v23 - 11) > 1)
        {
          return 0;
        }
        v12 += 32;
        if (v12 == v20) {
          return result;
        }
      }
    }
    return 1;
  }
  int v13 = v9 & 0xFE;
  if (v13 == 14)
  {
    int v14 = *(_DWORD *)(v6 + 32);
    if (v14)
    {
      unsigned int v15 = 0;
      unint64_t v16 = (2 * *(_DWORD *)(v4 + 32));
      int v17 = v14 - 1;
      do
      {
        unint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(a3, v15);
        LOBYTE(v9) = ElementAsInteger < v16;
        if (ElementAsInteger >= v16) {
          break;
        }
        BOOL v7 = v17 == v15++;
      }
      while (!v7);
    }
    else
    {
      LOBYTE(v9) = 1;
    }
  }
  return (v13 == 14) & v9;
}

uint64_t llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(int *a1, uint64_t a2, unsigned char *a3)
{
  v15[16] = *(llvm::FixedVectorType ***)MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::UndefValue *)(**(void **)a3 + 1960);
  if (a3[8] == 19)
  {
    llvm::VectorType::get((llvm::FixedVectorType *)(**(void **)a3 + 1960), (llvm::Type *)(a2 | 0x100000000));
    if (*a1)
    {
      return llvm::UndefValue::get(v12, v13);
    }
    else
    {
      return llvm::Constant::getNullValue(v12, v13);
    }
  }
  else
  {
    unsigned int v14 = 0;
    if (a2)
    {
      uint64_t v5 = 4 * a2;
      do
      {
        unint64_t v6 = *a1;
        if (v6 == -1) {
          BOOL v7 = (llvm::FixedVectorType **)llvm::UndefValue::get(v4, (llvm::Type *)v6);
        }
        else {
          BOOL v7 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v4, v6, 0);
        }
        if (v14 >= 0x10uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v15[v14] = v7;
        uint64_t v8 = ++v14;
        ++a1;
        v5 -= 4;
      }
      while (v5);
    }
    else
    {
      uint64_t v8 = 0;
    }
    Impl = llvm::ConstantVector::getImpl(v15, (llvm::Type *)v8);
    if (!Impl)
    {
      llvm::FixedVectorType::get(*v15[0], (llvm::Type *)v8);
      return sub_1CC56A4DC(**v10 + 1288, (uint64_t)v10, v15, v8);
    }
    return (uint64_t)Impl;
  }
}

uint64_t llvm::ShuffleVectorInst::isSingleSourceMask(int *a1, uint64_t a2)
{
  if (a2)
  {
    char v2 = 0;
    char v3 = 0;
    uint64_t v4 = 4 * a2;
    while (1)
    {
      int v5 = *a1;
      if (*a1 != -1)
      {
        v2 |= v5 < (int)a2;
        v3 |= v5 >= (int)a2;
        if (v2 & 1) != 0 && (v3) {
          break;
        }
      }
      ++a1;
      v4 -= 4;
      if (!v4) {
        goto LABEL_7;
      }
    }
    char v6 = 0;
  }
  else
  {
    char v3 = 0;
    char v2 = 0;
LABEL_7:
    char v6 = v2 | v3;
  }
  return v6 & 1;
}

uint64_t llvm::ShuffleVectorInst::isIdentityMask(int *a1, uint64_t a2)
{
  return sub_1CC5D47FC(a1, a2, a2);
}

uint64_t sub_1CC5D47FC(int *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    char v3 = 0;
    char v4 = 0;
    uint64_t v5 = 4 * a2;
    char v6 = a1;
    while (1)
    {
      int v7 = *v6;
      if (*v6 != -1)
      {
        v3 |= v7 < a3;
        v4 |= v7 >= a3;
        if (v3 & 1) != 0 && (v4) {
          return 0;
        }
      }
      ++v6;
      v5 -= 4;
      if (!v5)
      {
        if ((v3 & 1) == 0) {
          goto LABEL_10;
        }
        goto LABEL_12;
      }
    }
  }
  char v4 = 0;
LABEL_10:
  if ((v4 & 1) == 0) {
    return 0;
  }
LABEL_12:
  if ((int)a2 < 1) {
    return 1;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = a1[v9];
    BOOL v8 = v10 == -1 || v9 == v10 || a3 + v9 == v10;
  }
  while (v8 && a2 - 1 != v9++);
  return v8;
}

uint64_t llvm::ShuffleVectorInst::isReverseMask(int *a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = 0;
    int v3 = 0;
    uint64_t v4 = 4 * a2;
    uint64_t v5 = a1;
    while (1)
    {
      int v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if (v2 & 1) != 0 && (v3) {
          break;
        }
      }
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        if (((v2 | v3) & 1) == 0) {
          return 0;
        }
        int v7 = a2 - 1;
        if ((int)a2 < 1) {
          return 1;
        }
        uint64_t v8 = a2;
        for (int i = 2 * a2 - 1; ; --i)
        {
          int v11 = *a1++;
          int v10 = v11;
          BOOL v12 = v11 == -1 || v7 == v10;
          if (!v12 && i != v10) {
            break;
          }
          --v7;
          if (!--v8) {
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t llvm::ShuffleVectorInst::isZeroEltSplatMask(int *a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = 0;
    int v3 = 0;
    uint64_t v4 = 4 * a2;
    uint64_t v5 = a1;
    while (1)
    {
      int v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if (v2 & 1) != 0 && (v3) {
          break;
        }
      }
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        if (((v2 | v3) & 1) == 0) {
          return 0;
        }
        if ((int)a2 < 1) {
          return 1;
        }
        uint64_t v7 = a2;
        while (1)
        {
          int v9 = *a1++;
          int v8 = v9;
          if ((v9 + 1) >= 2 && v8 != a2) {
            break;
          }
          if (!--v7) {
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t llvm::ShuffleVectorInst::isSelectMask(int *a1, uint64_t a2)
{
  if (a2)
  {
    char v2 = 0;
    char v3 = 0;
    uint64_t v4 = 4 * a2;
    uint64_t v5 = a1;
    while (1)
    {
      int v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if (v2 & 1) != 0 && (v3) {
          break;
        }
      }
      ++v5;
      v4 -= 4;
      if (!v4) {
        goto LABEL_9;
      }
    }
LABEL_11:
    if ((int)a2 < 1) {
      return 1;
    }
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a1[v8];
      BOOL v7 = v9 == -1 || v8 == v9 || a2 + v8 == v9;
    }
    while (v7 && a2 - 1 != v8++);
    return v7;
  }
  char v3 = 0;
  char v2 = 0;
LABEL_9:
  BOOL v7 = 0;
  if ((v2 & 1) == 0 && (v3 & 1) == 0) {
    goto LABEL_11;
  }
  return v7;
}

uint64_t llvm::ShuffleVectorInst::isTransposeMask(_DWORD *a1, unsigned int a2)
{
  uint64_t result = 0;
  if ((int)a2 >= 2)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.i32[0] <= 1u)
    {
      if (*a1 > 1u || a1[1] - *a1 != a2) {
        return 0;
      }
      if (a2 >= 3)
      {
        uint64_t v5 = a1 + 2;
        uint64_t v6 = a2 - 2;
        uint64_t result = 1;
        while (*v5 != -1 && *v5 - *(v5 - 2) == 2)
        {
          ++v5;
          if (!--v6) {
            return result;
          }
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::ShuffleVectorInst::isExtractSubvectorMask(int *a1, uint64_t a2, int a3, int *a4)
{
  if (a2)
  {
    char v4 = 0;
    char v5 = 0;
    uint64_t v6 = 4 * a2;
    BOOL v7 = a1;
    while (1)
    {
      int v8 = *v7;
      if (*v7 != -1)
      {
        v4 |= v8 < a3;
        v5 |= v8 >= a3;
        if (v4 & 1) != 0 && (v5) {
          return 0;
        }
      }
      ++v7;
      v6 -= 4;
      if (!v6)
      {
        if ((v4 & 1) == 0) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
    }
  }
  char v5 = 0;
LABEL_10:
  if ((v5 & 1) == 0) {
    return 0;
  }
LABEL_13:
  uint64_t v9 = 0;
  if ((int)a2 < a3 && a2)
  {
    uint64_t v11 = 0;
    int v12 = -1;
    do
    {
      int v14 = *a1++;
      int v13 = v14;
      if ((v14 & 0x80000000) == 0)
      {
        int v15 = v11 + v13 % a3;
        if ((v12 & 0x80000000) == 0 && v15 != v12) {
          return 0;
        }
        int v12 = v15;
      }
      --v11;
    }
    while (-(uint64_t)a2 != v11);
    uint64_t v9 = 0;
    if ((v12 & 0x80000000) == 0 && v12 + (int)a2 <= a3)
    {
      *a4 = v12;
      return 1;
    }
  }
  return v9;
}

uint64_t llvm::ShuffleVectorInst::isInsertSubvectorMask(int *a1, uint64_t a2, int a3, _DWORD *a4, signed int *a5)
{
  int v5 = a2;
  if ((int)a2 < a3) {
    return 0;
  }
  if (a2)
  {
    char v8 = 0;
    char v9 = 0;
    uint64_t v10 = 4 * a2;
    uint64_t v11 = a1;
    while (1)
    {
      int v12 = *v11;
      if (*v11 != -1)
      {
        v8 |= v12 < a3;
        v9 |= v12 >= a3;
        if (v8 & 1) != 0 && (v9) {
          break;
        }
      }
      ++v11;
      v10 -= 4;
      if (!v10) {
        goto LABEL_8;
      }
    }
LABEL_10:
    int v32 = a2;
    if (a2 >= 0x41) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v31);
    }
    uint64_t v31 = 0;
    unint64_t v30 = 0;
    unint64_t v29 = 0;
    if (a2)
    {
      uint64_t v14 = 0;
      char v15 = 1;
      char v16 = 1;
      do
      {
        uint64_t v17 = a1[v14];
        if ((v17 & 0x80000000) != 0)
        {
          v31 |= 1 << v14;
        }
        else
        {
          uint64_t v18 = 1 << v14;
          if ((int)v17 >= a3)
          {
            v29 |= v18;
            v16 &= a3 + v14 == v17;
          }
          else
          {
            v30 |= v18;
            v15 &= v14 == v17;
          }
        }
        ++v14;
      }
      while (a2 != v14);
    }
    else
    {
      char v15 = 1;
      char v16 = 1;
    }
    unsigned int v19 = __clz(__rbit64(v30));
    if (a2 < v19) {
      unsigned int v19 = a2;
    }
    signed int v26 = v19;
    unsigned int v20 = __clz(__rbit64(v29));
    if (a2 >= v20) {
      signed int v21 = v20;
    }
    else {
      signed int v21 = a2;
    }
    int v22 = a2 + __clz(v30) - 64;
    int v23 = a2 + __clz(v29) - 64;
    if ((v15 & 1) == 0 || (int v24 = a2 - v21 - v23, (sub_1CC5D47FC(&a1[v21], v24, a3) & 1) == 0))
    {
      if ((v16 & 1) == 0) {
        return 0;
      }
      signed int v21 = v26;
      int v24 = v5 - v26 - v22;
      if (!sub_1CC5D47FC(&a1[v26], v24, a3)) {
        return 0;
      }
    }
    *a4 = v24;
    *a5 = v21;
    return 1;
  }
  char v9 = 0;
  char v8 = 0;
LABEL_8:
  uint64_t v13 = 0;
  if ((v8 & 1) == 0 && (v9 & 1) == 0) {
    goto LABEL_10;
  }
  return v13;
}

uint64_t llvm::ShuffleVectorInst::isIdentityWithPadding(llvm::ShuffleVectorInst *this)
{
  uint64_t v1 = *(void *)this;
  if (*(unsigned __int8 *)(*(void *)this + 16) - 11 < 2) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 8) == 19) {
    return 0;
  }
  uint64_t v2 = *(int *)(**((void **)this - 8) + 32);
  int v3 = *(_DWORD *)(v1 + 32);
  if (v3 <= (int)v2) {
    return 0;
  }
  char v4 = (int *)*((void *)this + 8);
  uint64_t result = sub_1CC5D47FC(v4, *((unsigned int *)this + 18), v2);
  if (result)
  {
    int v6 = ~v2 + v3;
    BOOL v7 = &v4[v2];
    do
    {
      int v9 = *v7++;
      int v8 = v9;
      BOOL v11 = v6-- != 0;
      uint64_t result = v8 == -1;
    }
    while (v8 == -1 && v11);
  }
  return result;
}

uint64_t llvm::ShuffleVectorInst::isIdentityWithExtract(llvm::ShuffleVectorInst *this)
{
  uint64_t v1 = *(void *)this;
  if (*(unsigned __int8 *)(*(void *)this + 16) - 11 < 2) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 8) == 19) {
    return 0;
  }
  int v2 = *(_DWORD *)(**((void **)this - 8) + 32);
  if (*(_DWORD *)(v1 + 32) >= v2) {
    return 0;
  }
  else {
    return sub_1CC5D47FC(*((int **)this + 8), *((unsigned int *)this + 18), v2);
  }
}

uint64_t llvm::ShuffleVectorInst::isReplicationMask(_DWORD *a1, unint64_t a2, int *a3, _DWORD *a4)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    uint64_t v5 = 4 * a2;
    int v6 = a1;
    while (*v6 != -1)
    {
      ++v6;
      v5 -= 4;
      if (!v5)
      {
        BOOL v7 = (char *)a1;
        while (!*(_DWORD *)v7)
        {
          v7 += 4;
          v4 -= 4;
          if (!v4)
          {
            BOOL v7 = (char *)&a1[a2];
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
    }
    int v11 = -1;
    int v12 = a1;
    while (1)
    {
      if (*v12 != -1)
      {
        BOOL v13 = *v12 < v11;
        int v11 = *v12;
        if (v13) {
          return 0;
        }
      }
      ++v12;
      v4 -= 4;
      if (!v4)
      {
        uint64_t v8 = a2;
        if (a2)
        {
          while (1)
          {
            unint64_t v14 = a2 / (int)v8;
            if (!(a2 % (int)v8))
            {
              if (!(v14 << 32))
              {
LABEL_35:
                *a3 = v8;
                *a4 = v14;
                return 1;
              }
              uint64_t v15 = 0;
              char v16 = a1;
              unint64_t v17 = a2;
              while (1)
              {
                unint64_t v18 = v17 - (int)v8;
                unint64_t v19 = v17 >= (int)v8 ? (int)v8 : v17;
                if (v19) {
                  break;
                }
LABEL_34:
                ++v15;
                v16 += (int)v8;
                unint64_t v17 = v18;
                if (v15 == (int)v14) {
                  goto LABEL_35;
                }
              }
              unint64_t v20 = 0;
              uint64_t v21 = 4 * v19;
              while (1)
              {
                int v22 = v16[v20 / 4];
                if (v22 != -1 && v22 != v15) {
                  break;
                }
                v20 += 4;
                if (v21 == v20) {
                  goto LABEL_34;
                }
              }
            }
            if (!--v8) {
              return v8;
            }
          }
        }
        return v8;
      }
    }
  }
  BOOL v7 = (char *)a1;
LABEL_10:
  uint64_t v8 = (unint64_t)(v7 - (char *)a1) >> 2;
  *a3 = v8;
  if (v8)
  {
    uint64_t v9 = (int)v8;
    unint64_t v10 = a2 / (int)v8;
    if (a2 == v10 * v9)
    {
      *a4 = v10;
      if (!(v10 << 32)) {
        return 1;
      }
      uint64_t v24 = 0;
      uint64_t v25 = (int)v10;
      unint64_t v26 = *a3;
      while (1)
      {
        unint64_t v27 = a2 >= v26 ? *a3 : a2;
        if (v27) {
          break;
        }
LABEL_49:
        ++v24;
        a1 += v26;
        uint64_t v8 = 1;
        a2 -= v26;
        if (v24 == v25) {
          return v8;
        }
      }
      unint64_t v28 = 0;
      uint64_t v29 = 4 * v27;
      while (1)
      {
        int v30 = a1[v28 / 4];
        if (v30 != -1 && v30 != v24) {
          break;
        }
        v28 += 4;
        if (v29 == v28) {
          goto LABEL_49;
        }
      }
    }
    return 0;
  }
  return v8;
}

uint64_t llvm::ShuffleVectorInst::isReplicationMask(llvm::ShuffleVectorInst *this, int *a2, int *a3)
{
  if (*(unsigned char *)(*(void *)this + 8) == 19) {
    return 0;
  }
  int v3 = *(_DWORD *)(**((void **)this - 8) + 32);
  *a3 = v3;
  unint64_t v4 = *((unsigned int *)this + 18);
  unint64_t v5 = v4 / v3;
  if (v4 % v3) {
    return 0;
  }
  *a2 = v5;
  uint64_t v7 = *a3;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *((unsigned int *)this + 18);
    unint64_t v10 = (_DWORD *)*((void *)this + 8);
    uint64_t result = 1;
    while (1)
    {
      unint64_t v11 = v9 - (int)v5;
      if (v9 >= (int)v5) {
        unint64_t v9 = (int)v5;
      }
      if (v9) {
        break;
      }
LABEL_16:
      v10 += (int)v5;
      ++v8;
      unint64_t v9 = v11;
      if (v8 == v7) {
        return result;
      }
    }
    int v12 = &v10[v9];
    BOOL v13 = v10;
    while (*v13 == -1 || *v13 == v8)
    {
      if (++v13 == v12) {
        goto LABEL_16;
      }
    }
    return 0;
  }
  return 1;
}

void llvm::InsertValueInst::init(llvm::Value *this, uint64_t a2, uint64_t a3, void *__src, uint64_t a5, const char **a6)
{
  uint64_t v8 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v32 = *((void *)this - 7);
    if (v32) {
      *(void *)(v32 + 16) = *((void *)this - 6);
    }
  }
  void *v8 = a2;
  if (a2)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    unint64_t v9 = (void *)(a2 + 8);
    uint64_t v10 = v11;
    *((void *)this - 7) = v11;
    if (v11) {
      *(void *)(v10 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v9;
    *unint64_t v9 = v8;
  }
  int v12 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v33 = *((void *)this - 3);
    if (v33) {
      *(void *)(v33 + 16) = *((void *)this - 2);
    }
  }
  void *v12 = a3;
  if (a3)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    BOOL v13 = (void *)(a3 + 8);
    uint64_t v14 = v15;
    *((void *)this - 3) = v15;
    if (v15) {
      *(void *)(v14 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v13;
    *BOOL v13 = v12;
  }
  unint64_t v16 = 4 * a5;
  uint64_t v17 = *((unsigned int *)this + 18);
  if (v17 + ((4 * a5) >> 2) > (unint64_t)*((unsigned int *)this + 19)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a5)
  {
    memcpy((void *)(*((void *)this + 8) + 4 * v17), __src, 4 * a5);
    LODWORD(v17) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v17 + (v16 >> 2);
  llvm::Value::setNameImpl(this, a6);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      int v23 = *(llvm::Value **)v22;
      if (*(llvm::Value **)v22 == this)
      {
LABEL_22:
        unint64_t v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        unint64_t v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_29:
          *((_DWORD *)this + 9) = v31;
          return;
        }
LABEL_30:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_29;
      }
      int v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        int v23 = *(llvm::Value **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
}

uint64_t llvm::InsertValueInst::InsertValueInst(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(a1 - 64);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 93;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  unsigned int v6 = *(_DWORD *)(a2 + 72);
  if (v6 && a1 != a2)
  {
    if (v6 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a1 + 80), *(const void **)(a2 + 64), 4 * *(unsigned int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) = v6;
  }
  uint64_t v7 = *(void *)(a2 - 64);
  if (*v4)
  {
    **(void **)(a1 - 48) = *(void *)(a1 - 56);
    uint64_t v17 = *(void *)(a1 - 56);
    if (v17) {
      *(void *)(v17 + 16) = *(void *)(a1 - 48);
    }
  }
  void *v4 = v7;
  if (v7)
  {
    uint64_t v10 = *(void *)(v7 + 8);
    uint64_t v8 = (void *)(v7 + 8);
    uint64_t v9 = v10;
    *(void *)(a1 - 56) = v10;
    if (v10) {
      *(void *)(v9 + 16) = a1 - 56;
    }
    *(void *)(a1 - 48) = v8;
    void *v8 = v4;
  }
  uint64_t v11 = *(void *)(a2 - 32);
  int v12 = (void *)(a1 - 32);
  if (*(void *)(a1 - 32))
  {
    **(void **)(a1 - 16) = *(void *)(a1 - 24);
    uint64_t v18 = *(void *)(a1 - 24);
    if (v18) {
      *(void *)(v18 + 16) = *(void *)(a1 - 16);
    }
  }
  void *v12 = v11;
  if (v11)
  {
    uint64_t v15 = *(void *)(v11 + 8);
    BOOL v13 = (void *)(v11 + 8);
    uint64_t v14 = v15;
    *(void *)(a1 - 24) = v15;
    if (v15) {
      *(void *)(v14 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v13;
    *BOOL v13 = v12;
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
  return a1;
}

void llvm::ExtractValueInst::init(llvm::Value *this, void *__src, uint64_t a3, const char **a4)
{
  size_t v6 = 4 * a3;
  uint64_t v7 = *((unsigned int *)this + 18);
  if (v7 + ((4 * a3) >> 2) > (unint64_t)*((unsigned int *)this + 19)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3)
  {
    memcpy((void *)(*((void *)this + 8) + 4 * v7), __src, v6);
    LODWORD(v7) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v7 + (v6 >> 2);
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_20;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      BOOL v13 = *(llvm::Value **)v12;
      if (*(llvm::Value **)v12 == this)
      {
LABEL_12:
        unint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        uint64_t v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == *(_DWORD *)"llvm." && v17[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_19:
          *((_DWORD *)this + 9) = v21;
          return;
        }
LABEL_20:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_19;
      }
      int v14 = 1;
      while (v13 != (llvm::Value *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        BOOL v13 = *(llvm::Value **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_12;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_12;
  }
}

uint64_t llvm::ExtractValueInst::ExtractValueInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 32);
  unsigned int v5 = (void *)(a1 - 32);
  uint64_t v6 = *(void *)(a1 - 32);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 92;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (v6)
  {
    **(void **)(a1 - 16) = *(void *)(a1 - 24);
    uint64_t v12 = *(void *)(a1 - 24);
    if (v12) {
      *(void *)(v12 + 16) = *(void *)(a1 - 16);
    }
  }
  *unsigned int v5 = v4;
  if (v4)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    uint64_t v7 = (void *)(v4 + 8);
    uint64_t v8 = v9;
    *(void *)(a1 - 24) = v9;
    if (v9) {
      *(void *)(v8 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v7;
    void *v7 = v5;
  }
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  unsigned int v10 = *(_DWORD *)(a2 + 72);
  if (v10 && a1 != a2)
  {
    if (v10 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a1 + 80), *(const void **)(a2 + 64), 4 * *(unsigned int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) = v10;
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
  return a1;
}

uint64_t llvm::ExtractValueInst::getIndexedType(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 4 * a3;
    while (1)
    {
      unint64_t v4 = *a2;
      int v5 = *(unsigned __int8 *)(a1 + 8);
      if (a1 && v5 == 17)
      {
        if (*(void *)(a1 + 32) <= v4) {
          return 0;
        }
        uint64_t v7 = (uint64_t *)(a1 + 24);
      }
      else
      {
        uint64_t v6 = 0;
        if (!a1 || v5 != 16) {
          return v6;
        }
        if (v4 >= *(_DWORD *)(a1 + 12)) {
          return 0;
        }
        uint64_t v7 = (uint64_t *)(*(void *)(a1 + 16) + 8 * v4);
      }
      a1 = *v7;
      ++a2;
      uint64_t v6 = *v7;
      v3 -= 4;
      if (!v3) {
        return v6;
      }
    }
  }
  return a1;
}

llvm::Value *llvm::UnaryOperator::UnaryOperator(llvm::Value *this, char a2, uint64_t a3, uint64_t a4, const char **a5, uint64_t a6)
{
  uint64_t v9 = (void *)((char *)this - 32);
  *(void *)this = a4;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a2 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    uint64_t v17 = *(void *)(a6 + 40);
    unint64_t v18 = (uint64_t *)(a6 + 24);
    *((void *)this + 5) = v17;
    *(_WORD *)(v17 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v34 = *(void *)(v17 + 56);
      if (v34)
      {
        uint64_t v35 = *(llvm::ValueSymbolTable **)(v34 + 104);
        if (v35) {
          llvm::ValueSymbolTable::reinsertValue(v35, this);
        }
      }
    }
    uint64_t v19 = *v18;
    *((void *)this + 3) = *v18;
    *((void *)this + 4) = v18;
    *(void *)(v19 + 8) = v10;
    uint64_t *v18 = (uint64_t)v10;
  }
  if (*v9)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v36 = *((void *)this - 3);
    if (v36) {
      *(void *)(v36 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v9 = a3;
  if (a3)
  {
    uint64_t v11 = (void *)(a3 + 8);
    uint64_t v12 = *(void *)(a3 + 8);
    *((void *)this - 3) = v12;
    BOOL v13 = (void *)((char *)this - 24);
    if (v12) {
      *(void *)(v12 + 16) = v13;
    }
    *((void *)this - 2) = v11;
    *uint64_t v11 = v9;
    if (*((void *)this - 4))
    {
      **((void **)this - 2) = *((void *)this - 3);
      uint64_t v14 = *((void *)this - 3);
      if (v14) {
        *(void *)(v14 + 16) = *((void *)this - 2);
      }
    }
    *uint64_t v9 = a3;
    uint64_t v15 = *(void *)(a3 + 8);
    *BOOL v13 = v15;
    if (v15) {
      *(void *)(v15 + 16) = v13;
    }
    *((void *)this - 2) = v11;
    *uint64_t v11 = v9;
  }
  else
  {
    *uint64_t v9 = 0;
  }
  llvm::Value::setNameImpl(this, a5);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_31;
    }
    uint64_t v20 = ***(void ***)this;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v24 = v21 + 16 * v23;
      int v25 = *(llvm::Value **)v24;
      if (*(llvm::Value **)v24 == this)
      {
LABEL_23:
        unint64_t v28 = *(void **)(v24 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_31:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v26 = 1;
      while (v25 != (llvm::Value *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        int v25 = *(llvm::Value **)(v21 + 16 * v23);
        if (v25 == this)
        {
          uint64_t v24 = v21 + 16 * v23;
          goto LABEL_23;
        }
      }
    }
    uint64_t v24 = v21 + 16 * v22;
    goto LABEL_23;
  }
  return this;
}

llvm::Value *llvm::UnaryOperator::UnaryOperator(llvm::Value *a1, char a2, uint64_t a3, uint64_t a4, const char **a5, uint64_t a6)
{
  uint64_t v9 = (uint64_t *)((char *)sub_1CC5CEE04(a1, a4, a2, a3, a6) - 32);
  if (*v9)
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v10 = *((void *)a1 - 3);
    if (v10) {
      *(void *)(v10 + 16) = *((void *)a1 - 2);
    }
  }
  *uint64_t v9 = a3;
  if (a3)
  {
    BOOL v13 = *(void ***)(a3 + 8);
    uint64_t v12 = (uint64_t **)(a3 + 8);
    uint64_t v11 = v13;
    *((void *)a1 - 3) = v13;
    if (v13) {
      uint64_t v11[2] = (void *)((char *)a1 - 24);
    }
    *((void *)a1 - 2) = v12;
    void *v12 = v9;
  }
  llvm::Value::setNameImpl(a1, a5);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v15 = ***(void ***)a1;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v19 = (llvm::Value **)(v16 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 == a1)
      {
LABEL_18:
        uint64_t v23 = v19[1];
        unint64_t v26 = *(void *)v23;
        uint64_t v24 = (char *)v23 + 16;
        unint64_t v25 = v26;
        if (v26 >= 5 && *(_DWORD *)v24 == *(_DWORD *)"llvm." && v24[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v28 = llvm::Function::lookupIntrinsicID(v24, v25);
LABEL_26:
          *((_DWORD *)a1 + 9) = v28;
          return a1;
        }
LABEL_25:
        int v28 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_26;
      }
      int v21 = 1;
      while (v20 != (llvm::Value *)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        uint64_t v20 = *(llvm::Value **)(v16 + 16 * v18);
        if (v20 == a1)
        {
          uint64_t v19 = (llvm::Value **)(v16 + 16 * v18);
          goto LABEL_18;
        }
      }
    }
    uint64_t v19 = (llvm::Value **)(v16 + 16 * v17);
    goto LABEL_18;
  }
  return a1;
}

llvm::Value *llvm::UnaryOperator::Create(char a1, uint64_t *a2, const char **a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x60uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 8;
  uint64_t v9 = *a2;
  uint64_t v10 = (llvm::Value *)(v8 + 8);

  return llvm::UnaryOperator::UnaryOperator(v10, a1, (uint64_t)a2, v9, a3, a4);
}

{
  _DWORD *v8;
  llvm::Value *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  uint64_t v8 = operator new(0x60uLL);
  uint64_t v9 = (llvm::Value *)(v8 + 8);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 8;
  llvm::UnaryOperator::UnaryOperator((llvm::Value *)(v8 + 8), a1, (uint64_t)a2, *a2, a3, 0);
  *((void *)v8 + 9) = a4;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  if ((*((unsigned char *)v8 + 55) & 0x10) != 0)
  {
    uint64_t v14 = *(void *)(a4 + 56);
    if (v14)
    {
      uint64_t v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15) {
        llvm::ValueSymbolTable::reinsertValue(v15, v9);
      }
    }
  }
  uint64_t v11 = *(void *)(a4 + 40);
  uint64_t v10 = (void *)(a4 + 40);
  *((void *)v8 + 7) = v11;
  *((void *)v8 + 8) = v10;
  uint64_t v12 = (char *)(v8 + 14);
  *(void *)(v11 + 8) = v12;
  *uint64_t v10 = v12;
  return v9;
}

llvm::Value *llvm::BinaryOperator::BinaryOperator(llvm::Value *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, const char **a6, uint64_t a7)
{
  uint64_t v11 = (void *)((char *)this - 64);
  *(void *)this = a5;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a2 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v12 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a7)
  {
    uint64_t v21 = *(void *)(a7 + 40);
    int v22 = (uint64_t *)(a7 + 24);
    *((void *)this + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v38 = *(void *)(v21 + 56);
      if (v38)
      {
        int v39 = *(llvm::ValueSymbolTable **)(v38 + 104);
        if (v39) {
          llvm::ValueSymbolTable::reinsertValue(v39, this);
        }
      }
    }
    uint64_t v23 = *v22;
    *((void *)this + 3) = *v22;
    *((void *)this + 4) = v22;
    *(void *)(v23 + 8) = v12;
    *int v22 = (uint64_t)v12;
  }
  if (*v11)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v40 = *((void *)this - 7);
    if (v40) {
      *(void *)(v40 + 16) = *((void *)this - 6);
    }
  }
  *uint64_t v11 = a3;
  if (a3)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v14 = (void *)(a3 + 8);
    uint64_t v13 = v15;
    *((void *)this - 7) = v15;
    if (v15) {
      *(void *)(v13 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v14;
    *uint64_t v14 = v11;
  }
  uint64_t v16 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v41 = *((void *)this - 3);
    if (v41) {
      *(void *)(v41 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v16 = a4;
  if (a4)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    uint64_t v18 = (void *)(a4 + 8);
    uint64_t v17 = v19;
    *((void *)this - 3) = v19;
    if (v19) {
      *(void *)(v17 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v18;
    void *v18 = v16;
  }
  llvm::Value::setNameImpl(this, a6);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_31;
    }
    uint64_t v24 = ***(void ***)this;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v28 = v25 + 16 * v27;
      unint64_t v29 = *(llvm::Value **)v28;
      if (*(llvm::Value **)v28 == this)
      {
LABEL_23:
        uint64_t v32 = *(void **)(v28 + 8);
        unint64_t v35 = *v32;
        int v33 = v32 + 2;
        unint64_t v34 = v35;
        if (v35 >= 5 && *(_DWORD *)v33 == *(_DWORD *)"llvm." && v33[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v37 = llvm::Function::lookupIntrinsicID(v33, v34);
LABEL_30:
          *((_DWORD *)this + 9) = v37;
          return this;
        }
LABEL_31:
        int v37 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
        if (v29 == this)
        {
          uint64_t v28 = v25 + 16 * v27;
          goto LABEL_23;
        }
      }
    }
    uint64_t v28 = v25 + 16 * v26;
    goto LABEL_23;
  }
  return this;
}

{
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *v29;
  int v30;
  int v31;
  uint64_t v32;
  llvm::ValueSymbolTable *v33;
  void *v34;
  unsigned char *v35;
  unint64_t v36;
  unint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v11 = (void *)((char *)this - 64);
  *(void *)this = a5;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a2 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v12 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a7)
  {
    uint64_t v21 = *(void *)(a7 + 40);
    int v22 = (uint64_t *)(a7 + 24);
    *((void *)this + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v21 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v23 = *v22;
    *((void *)this + 3) = *v22;
    *((void *)this + 4) = v22;
    *(void *)(v23 + 8) = v12;
    *int v22 = (uint64_t)v12;
  }
  if (*v11)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v40 = *((void *)this - 7);
    if (v40) {
      *(void *)(v40 + 16) = *((void *)this - 6);
    }
  }
  *uint64_t v11 = a3;
  if (a3)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v14 = (void *)(a3 + 8);
    uint64_t v13 = v15;
    *((void *)this - 7) = v15;
    if (v15) {
      *(void *)(v13 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v14;
    *uint64_t v14 = v11;
  }
  uint64_t v16 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v41 = *((void *)this - 3);
    if (v41) {
      *(void *)(v41 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v16 = a4;
  if (a4)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    uint64_t v18 = (void *)(a4 + 8);
    uint64_t v17 = v19;
    *((void *)this - 3) = v19;
    if (v19) {
      *(void *)(v17 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v18;
    void *v18 = v16;
  }
  llvm::Value::setNameImpl(this, a6);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_34;
    }
    uint64_t v24 = ***(void ***)this;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v28 = v25 + 16 * v27;
      unint64_t v29 = *(llvm::Value **)v28;
      if (*(llvm::Value **)v28 == this)
      {
LABEL_27:
        unint64_t v34 = *(void **)(v28 + 8);
        int v37 = *v34;
        unint64_t v35 = v34 + 2;
        uint64_t v36 = v37;
        if (v37 >= 5 && *(_DWORD *)v35 == *(_DWORD *)"llvm." && v35[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v39 = llvm::Function::lookupIntrinsicID(v35, v36);
LABEL_35:
          *((_DWORD *)this + 9) = v39;
          return this;
        }
LABEL_34:
        int v39 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_35;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
        if (v29 == this)
        {
          uint64_t v28 = v25 + 16 * v27;
          goto LABEL_27;
        }
      }
    }
    uint64_t v28 = v25 + 16 * v26;
    goto LABEL_27;
  }
  return this;
}

{
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  int v34;
  int v35;
  void *v36;
  unsigned char *v37;
  unint64_t v38;
  unint64_t v39;
  int v41;

  uint64_t v12 = (void *)((char *)this - 64);
  *(void *)this = a5;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a2 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v13 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a7;
  *(_WORD *)(a7 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v26 = *(void *)(a7 + 56);
    if (v26)
    {
      uint64_t v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
      if (v27) {
        llvm::ValueSymbolTable::reinsertValue(v27, this);
      }
    }
  }
  uint64_t v15 = *(void *)(a7 + 40);
  uint64_t v14 = (void *)(a7 + 40);
  *((void *)this + 3) = v15;
  *((void *)this + 4) = v14;
  *(void *)(v15 + 8) = v13;
  *uint64_t v14 = v13;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v16 = *((void *)this - 7);
    if (v16) {
      *(void *)(v16 + 16) = *((void *)this - 6);
    }
  }
  char *v12 = a3;
  if (a3)
  {
    uint64_t v19 = *(void *)(a3 + 8);
    uint64_t v18 = (void *)(a3 + 8);
    uint64_t v17 = v19;
    *((void *)this - 7) = v19;
    if (v19) {
      *(void *)(v17 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v18;
    void *v18 = v12;
  }
  uint64_t v20 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v21 = *((void *)this - 3);
    if (v21) {
      *(void *)(v21 + 16) = *((void *)this - 2);
    }
  }
  llvm::Value *v20 = a4;
  if (a4)
  {
    uint64_t v24 = *(void *)(a4 + 8);
    uint64_t v23 = (void *)(a4 + 8);
    int v22 = v24;
    *((void *)this - 3) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v23;
    *uint64_t v23 = v20;
  }
  llvm::Value::setNameImpl(this, a6);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_36;
    }
    uint64_t v28 = ***(void ***)this;
    unint64_t v29 = *(void *)(v28 + 152);
    int v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v32 = v29 + 16 * v31;
      int v33 = *(llvm::Value **)v32;
      if (*(llvm::Value **)v32 == this)
      {
LABEL_29:
        uint64_t v36 = *(void **)(v32 + 8);
        int v39 = *v36;
        int v37 = v36 + 2;
        uint64_t v38 = v39;
        if (v39 >= 5 && *(_DWORD *)v37 == *(_DWORD *)"llvm." && v37[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          uint64_t v41 = llvm::Function::lookupIntrinsicID(v37, v38);
LABEL_37:
          *((_DWORD *)this + 9) = v41;
          return this;
        }
LABEL_36:
        uint64_t v41 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_37;
      }
      unint64_t v34 = 1;
      while (v33 != (llvm::Value *)-4096)
      {
        unint64_t v35 = v31 + v34++;
        int v31 = v35 & (v30 - 1);
        int v33 = *(llvm::Value **)(v29 + 16 * v31);
        if (v33 == this)
        {
          uint64_t v32 = v29 + 16 * v31;
          goto LABEL_29;
        }
      }
    }
    uint64_t v32 = v29 + 16 * v30;
    goto LABEL_29;
  }
  return this;
}

llvm::Value *llvm::BinaryOperator::Create(char a1, void *a2, uint64_t a3, const char **a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x80uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 8) = *a2;
  uint64_t v12 = (llvm::Value *)(v10 + 64);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 64;
  *((void *)v10 + 4) = 0;
  uint64_t v13 = v10 + 32;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 64;
  *((void *)v10 + 9) = 0;
  v10[80] = a1 + 28;
  v10[81] = 0;
  *((_WORD *)v10 + 41) = 0;
  *((_DWORD *)v10 + 21) = 2;
  *(_OWORD *)(v10 + 88) = 0u;
  uint64_t v14 = v10 + 88;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  if (a5)
  {
    uint64_t v22 = *(void *)(a5 + 40);
    uint64_t v23 = (uint64_t *)(a5 + 24);
    *((void *)v10 + 13) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((v10[87] & 0x10) != 0
      && (uint64_t v39 = *(void *)(v22 + 56)) != 0
      && (uint64_t v40 = *(llvm::ValueSymbolTable **)(v39 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v40, v12);
      uint64_t v41 = *(void *)v11;
      uint64_t v42 = *v23;
      *((void *)v11 + 11) = *v23;
      *((void *)v11 + 12) = v23;
      *(void *)(v42 + 8) = v14;
      *uint64_t v23 = (uint64_t)v14;
      if (v41)
      {
        **((void **)v11 + 2) = *((void *)v11 + 1);
        uint64_t v43 = *((void *)v11 + 1);
        if (v43) {
          *(void *)(v43 + 16) = *((void *)v11 + 2);
        }
      }
    }
    else
    {
      uint64_t v24 = *v23;
      *((void *)v11 + 11) = *v23;
      *((void *)v11 + 12) = v23;
      *(void *)(v24 + 8) = v14;
      *uint64_t v23 = (uint64_t)v14;
    }
  }
  *(void *)uint64_t v11 = a2;
  uint64_t v17 = a2[1];
  uint64_t v16 = a2 + 1;
  uint64_t v15 = v17;
  *((void *)v11 + 1) = v17;
  if (v17) {
    *(void *)(v15 + 16) = v11 + 8;
  }
  *((void *)v11 + 2) = v16;
  *uint64_t v16 = v11;
  if (*((void *)v11 + 4))
  {
    **((void **)v11 + 6) = *((void *)v11 + 5);
    uint64_t v44 = *((void *)v11 + 5);
    if (v44) {
      *(void *)(v44 + 16) = *((void *)v11 + 6);
    }
  }
  *uint64_t v13 = a3;
  if (a3)
  {
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v19 = (void *)(a3 + 8);
    uint64_t v18 = v20;
    *((void *)v11 + 5) = v20;
    if (v20) {
      *(void *)(v18 + 16) = v11 + 40;
    }
    *((void *)v11 + 6) = v19;
    void *v19 = v13;
  }
  llvm::Value::setNameImpl(v12, a4);
  if (!v11[80])
  {
    if ((v11[87] & 0x10) == 0) {
      goto LABEL_28;
    }
    uint64_t v25 = ***(void ***)v12;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      unint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
      int v30 = *v29;
      if (*v29 == v12)
      {
LABEL_20:
        int v33 = v29[1];
        unint64_t v36 = *(void *)v33;
        unint64_t v34 = (char *)v33 + 16;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)v11 + 24) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_27:
          *((_DWORD *)v11 + 25) = v38;
          return v12;
        }
LABEL_28:
        int v38 = 0;
        *((_DWORD *)v11 + 24) &= ~0x2000u;
        goto LABEL_27;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        int v30 = *(llvm::Value **)(v26 + 16 * v28);
        if (v30 == v12)
        {
          unint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
          goto LABEL_20;
        }
      }
    }
    unint64_t v29 = (llvm::Value **)(v26 + 16 * v27);
    goto LABEL_20;
  }
  return v12;
}

llvm::Value *llvm::BinaryOperator::CreateNeg(llvm::BinaryOperator *this, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  uint64_t v7 = *(void *)this;
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
    unsigned int v8 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  if (v8 <= 6) {
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v7, (llvm::Type *)1, a3);
  }
  else {
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v7, a2, a3);
  }
  uint64_t v10 = Zero;
  uint64_t v11 = (char *)operator new(0x80uLL);
  uint64_t v12 = v11;
  *((void *)v11 + 8) = *(void *)this;
  uint64_t v13 = (llvm::Value *)(v11 + 64);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = v11 + 64;
  *((void *)v11 + 4) = 0;
  uint64_t v14 = v11 + 32;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 7) = v11 + 64;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 10) = 0x20000002BLL;
  *(_OWORD *)(v11 + 88) = 0u;
  uint64_t v15 = v11 + 88;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_DWORD *)v11 + 30) = 0;
  if (a3)
  {
    uint64_t v22 = *((void *)a3 + 5);
    uint64_t v23 = (uint64_t *)((char *)a3 + 24);
    *((void *)v11 + 13) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((v11[87] & 0x10) != 0
      && (uint64_t v39 = *(void *)(v22 + 56)) != 0
      && (uint64_t v40 = *(llvm::ValueSymbolTable **)(v39 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v40, v13);
      uint64_t v41 = *(void *)v12;
      uint64_t v42 = *v23;
      *((void *)v12 + 11) = *v23;
      *((void *)v12 + 12) = v23;
      *(void *)(v42 + 8) = v15;
      *uint64_t v23 = (uint64_t)v15;
      if (v41)
      {
        **((void **)v12 + 2) = *((void *)v12 + 1);
        uint64_t v43 = *((void *)v12 + 1);
        if (v43) {
          *(void *)(v43 + 16) = *((void *)v12 + 2);
        }
      }
    }
    else
    {
      uint64_t v24 = *v23;
      *((void *)v12 + 11) = *v23;
      *((void *)v12 + 12) = v23;
      *(void *)(v24 + 8) = v15;
      *uint64_t v23 = (uint64_t)v15;
    }
  }
  *(void *)uint64_t v12 = v10;
  if (v10)
  {
    uint64_t v18 = *((void *)v10 + 1);
    uint64_t v17 = (void *)((char *)v10 + 8);
    uint64_t v16 = v18;
    *((void *)v12 + 1) = v18;
    if (v18) {
      *(void *)(v16 + 16) = v12 + 8;
    }
    *((void *)v12 + 2) = v17;
    void *v17 = v12;
  }
  if (*v14)
  {
    **((void **)v12 + 6) = *((void *)v12 + 5);
    uint64_t v44 = *((void *)v12 + 5);
    if (v44) {
      *(void *)(v44 + 16) = *((void *)v12 + 6);
    }
  }
  uint64_t v19 = (void *)((char *)this + 8);
  uint64_t v20 = *((void *)this + 1);
  *((void *)v12 + 5) = v20;
  *((void *)v12 + 4) = this;
  if (v20) {
    *(void *)(v20 + 16) = v12 + 40;
  }
  *((void *)v12 + 6) = v19;
  void *v19 = v14;
  llvm::Value::setNameImpl(v13, (const char **)a2);
  if (!v12[80])
  {
    if ((v12[87] & 0x10) == 0) {
      goto LABEL_32;
    }
    uint64_t v25 = ***(void ***)v13;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      unint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
      int v30 = *v29;
      if (*v29 == v13)
      {
LABEL_24:
        int v33 = v29[1];
        unint64_t v36 = *(void *)v33;
        unint64_t v34 = (char *)v33 + 16;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)v12 + 24) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_31:
          *((_DWORD *)v12 + 25) = v38;
          return v13;
        }
LABEL_32:
        int v38 = 0;
        *((_DWORD *)v12 + 24) &= ~0x2000u;
        goto LABEL_31;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        int v30 = *(llvm::Value **)(v26 + 16 * v28);
        if (v30 == v13)
        {
          unint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
          goto LABEL_24;
        }
      }
    }
    unint64_t v29 = (llvm::Value **)(v26 + 16 * v27);
    goto LABEL_24;
  }
  return v13;
}

llvm::Value *llvm::BinaryOperator::CreateNeg(llvm::ConstantFP **this, llvm::Value *a2, const llvm::Twine *a3, llvm::BasicBlock *a4)
{
  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*this, a2, a3);
  unsigned int v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 16;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = v8 + 16;
  uint64_t v9 = *this;
  uint64_t v10 = (llvm::Value *)(v8 + 16);

  return llvm::BinaryOperator::BinaryOperator(v10, 15, (uint64_t)ZeroValueForNegation, (uint64_t)this, (uint64_t)v9, (const char **)a2, (uint64_t)a3);
}

void llvm::BinaryOperator::CreateNSWNeg(llvm::ConstantFP **this, llvm::Value *a2, const llvm::Twine *a3, llvm::BasicBlock *a4)
{
  ZeroValueForNegation = (uint64_t *)llvm::ConstantFP::getZeroValueForNegation(*this, a2, a3);
  llvm::BinaryOperator::Create(15, ZeroValueForNegation, (uint64_t)this, (const char **)a2);
}

llvm::Value *llvm::BinaryOperator::CreateNUWNeg(llvm::ConstantFP **this, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*this, a2, a3);
  unsigned int v8 = (char *)operator new(0x80uLL);
  uint64_t v9 = v8;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 4) = 0;
  uint64_t v10 = v8 + 32;
  *((void *)v8 + 8) = *(void *)ZeroValueForNegation;
  uint64_t v11 = (llvm::Value *)(v8 + 64);
  *((void *)v8 + 3) = v8 + 64;
  *((void *)v8 + 7) = v8 + 64;
  *((void *)v8 + 9) = 0;
  v8[80] = 43;
  v8[81] = 0;
  *((_WORD *)v8 + 41) = 0;
  *((_DWORD *)v8 + 21) = 2;
  *(_OWORD *)(v8 + 88) = 0u;
  uint64_t v12 = v8 + 88;
  *((_DWORD *)v8 + 30) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  if (a3)
  {
    uint64_t v19 = *((void *)a3 + 5);
    uint64_t v20 = (uint64_t *)((char *)a3 + 24);
    *((void *)v8 + 13) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((v8[87] & 0x10) != 0
      && (uint64_t v30 = *(void *)(v19 + 56)) != 0
      && (int v31 = *(llvm::ValueSymbolTable **)(v30 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v31, v11);
      uint64_t v32 = *(void *)v9;
      uint64_t v33 = *v20;
      *((void *)v9 + 11) = *v20;
      *((void *)v9 + 12) = v20;
      *(void *)(v33 + 8) = v12;
      uint64_t *v20 = (uint64_t)v12;
      if (v32)
      {
        **((void **)v9 + 2) = *((void *)v9 + 1);
        uint64_t v34 = *((void *)v9 + 1);
        if (v34) {
          *(void *)(v34 + 16) = *((void *)v9 + 2);
        }
      }
    }
    else
    {
      uint64_t v21 = *v20;
      *((void *)v9 + 11) = *v20;
      *((void *)v9 + 12) = v20;
      *(void *)(v21 + 8) = v12;
      uint64_t *v20 = (uint64_t)v12;
    }
  }
  *(void *)uint64_t v9 = ZeroValueForNegation;
  uint64_t v15 = *((void *)ZeroValueForNegation + 1);
  uint64_t v14 = (void *)((char *)ZeroValueForNegation + 8);
  uint64_t v13 = v15;
  *((void *)v9 + 1) = v15;
  if (v15) {
    *(void *)(v13 + 16) = v9 + 8;
  }
  *((void *)v9 + 2) = v14;
  *uint64_t v14 = v9;
  if (*((void *)v9 + 4))
  {
    **((void **)v9 + 6) = *((void *)v9 + 5);
    uint64_t v41 = *((void *)v9 + 5);
    if (v41) {
      *(void *)(v41 + 16) = *((void *)v9 + 6);
    }
  }
  uint64_t v16 = this + 1;
  uint64_t v17 = this[1];
  *((void *)v9 + 5) = v17;
  *((void *)v9 + 4) = this;
  if (v17) {
    *((void *)v17 + 2) = v9 + 40;
  }
  *((void *)v9 + 6) = v16;
  *uint64_t v16 = v10;
  llvm::Value::setNameImpl(v11, (const char **)a2);
  if (!v9[80])
  {
    if ((v9[87] & 0x10) == 0) {
      goto LABEL_31;
    }
    uint64_t v22 = ***(void ***)v11;
    uint64_t v23 = *(void *)(v22 + 152);
    uint64_t v24 = *(unsigned int *)(v22 + 168);
    if (v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v26 = (llvm::Value **)(v23 + 16 * v25);
      uint64_t v27 = *v26;
      if (*v26 == v11)
      {
LABEL_24:
        unint64_t v35 = v26[1];
        unint64_t v38 = *(void *)v35;
        unint64_t v36 = (char *)v35 + 16;
        unint64_t v37 = v38;
        if (v38 >= 5 && *(_DWORD *)v36 == *(_DWORD *)"llvm." && v36[4] == aLlvm_1[4])
        {
          *((_DWORD *)v9 + 24) |= 0x2000u;
          int v40 = llvm::Function::lookupIntrinsicID(v36, v37);
LABEL_32:
          *((_DWORD *)v9 + 25) = v40;
          goto LABEL_8;
        }
LABEL_31:
        int v40 = 0;
        *((_DWORD *)v9 + 24) &= ~0x2000u;
        goto LABEL_32;
      }
      int v28 = 1;
      while (v27 != (llvm::Value *)-4096)
      {
        int v29 = v25 + v28++;
        uint64_t v25 = v29 & (v24 - 1);
        uint64_t v27 = *(llvm::Value **)(v23 + 16 * v25);
        if (v27 == v11)
        {
          uint64_t v26 = (llvm::Value **)(v23 + 16 * v25);
          goto LABEL_24;
        }
      }
    }
    uint64_t v26 = (llvm::Value **)(v23 + 16 * v24);
    goto LABEL_24;
  }
LABEL_8:
  v9[81] |= 2u;
  return v11;
}

void llvm::BinaryOperator::CreateNUWNeg(llvm::ConstantFP **this, llvm::Value *a2, const llvm::Twine *a3, llvm::BasicBlock *a4)
{
  ZeroValueForNegation = (uint64_t *)llvm::ConstantFP::getZeroValueForNegation(*this, a2, a3);
  llvm::BinaryOperator::Create(15, ZeroValueForNegation, (uint64_t)this, (const char **)a2);
}

llvm::Value *llvm::BinaryOperator::CreateNot(llvm::Constant **this, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  AllOnesValue = llvm::Constant::getAllOnesValue(*this, a2, a3);
  unsigned int v8 = (char *)operator new(0x80uLL);
  uint64_t v9 = v8;
  *((void *)v8 + 8) = *this;
  uint64_t v10 = (llvm::Value *)(v8 + 64);
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 64;
  *((void *)v8 + 4) = 0;
  uint64_t v11 = v8 + 32;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = v8 + 64;
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = 0x20000003ALL;
  *(_OWORD *)(v8 + 88) = 0u;
  uint64_t v12 = v8 + 88;
  *(_OWORD *)(v8 + 104) = 0u;
  *((_DWORD *)v8 + 30) = 0;
  if (a3)
  {
    uint64_t v20 = *((void *)a3 + 5);
    uint64_t v21 = (uint64_t *)((char *)a3 + 24);
    *((void *)v8 + 13) = v20;
    *(_WORD *)(v20 + 18) &= ~0x8000u;
    if ((v8[87] & 0x10) != 0
      && (uint64_t v37 = *(void *)(v20 + 56)) != 0
      && (unint64_t v38 = *(llvm::ValueSymbolTable **)(v37 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v38, v10);
      uint64_t v39 = *(void *)v9;
      uint64_t v40 = *v21;
      *((void *)v9 + 11) = *v21;
      *((void *)v9 + 12) = v21;
      *(void *)(v40 + 8) = v12;
      *uint64_t v21 = (uint64_t)v12;
      if (v39)
      {
        **((void **)v9 + 2) = *((void *)v9 + 1);
        uint64_t v41 = *((void *)v9 + 1);
        if (v41) {
          *(void *)(v41 + 16) = *((void *)v9 + 2);
        }
      }
    }
    else
    {
      uint64_t v22 = *v21;
      *((void *)v9 + 11) = *v21;
      *((void *)v9 + 12) = v21;
      *(void *)(v22 + 8) = v12;
      *uint64_t v21 = (uint64_t)v12;
    }
  }
  *(void *)uint64_t v9 = this;
  uint64_t v15 = this[1];
  uint64_t v14 = this + 1;
  uint64_t v13 = v15;
  *((void *)v9 + 1) = v15;
  if (v15) {
    *((void *)v13 + 2) = v9 + 8;
  }
  *((void *)v9 + 2) = v14;
  *uint64_t v14 = v9;
  if (*((void *)v9 + 4))
  {
    **((void **)v9 + 6) = *((void *)v9 + 5);
    uint64_t v42 = *((void *)v9 + 5);
    if (v42) {
      *(void *)(v42 + 16) = *((void *)v9 + 6);
    }
  }
  *uint64_t v11 = AllOnesValue;
  if (AllOnesValue)
  {
    uint64_t v18 = AllOnesValue[1];
    uint64_t v17 = AllOnesValue + 1;
    uint64_t v16 = v18;
    *((void *)v9 + 5) = v18;
    if (v18) {
      *(void *)(v16 + 16) = v9 + 40;
    }
    *((void *)v9 + 6) = v17;
    void *v17 = v11;
  }
  llvm::Value::setNameImpl(v10, (const char **)a2);
  if (!v9[80])
  {
    if ((v9[87] & 0x10) == 0) {
      goto LABEL_28;
    }
    uint64_t v23 = ***(void ***)v10;
    uint64_t v24 = *(void *)(v23 + 152);
    uint64_t v25 = *(unsigned int *)(v23 + 168);
    if (v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v27 = (llvm::Value **)(v24 + 16 * v26);
      int v28 = *v27;
      if (*v27 == v10)
      {
LABEL_20:
        int v31 = v27[1];
        unint64_t v34 = *(void *)v31;
        uint64_t v32 = (char *)v31 + 16;
        unint64_t v33 = v34;
        if (v34 >= 5 && *(_DWORD *)v32 == *(_DWORD *)"llvm." && v32[4] == aLlvm_1[4])
        {
          *((_DWORD *)v9 + 24) |= 0x2000u;
          int v36 = llvm::Function::lookupIntrinsicID(v32, v33);
LABEL_27:
          *((_DWORD *)v9 + 25) = v36;
          return v10;
        }
LABEL_28:
        int v36 = 0;
        *((_DWORD *)v9 + 24) &= ~0x2000u;
        goto LABEL_27;
      }
      int v29 = 1;
      while (v28 != (llvm::Value *)-4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & (v25 - 1);
        int v28 = *(llvm::Value **)(v24 + 16 * v26);
        if (v28 == v10)
        {
          uint64_t v27 = (llvm::Value **)(v24 + 16 * v26);
          goto LABEL_20;
        }
      }
    }
    uint64_t v27 = (llvm::Value **)(v24 + 16 * v25);
    goto LABEL_20;
  }
  return v10;
}

llvm::Value *llvm::BinaryOperator::CreateNot(llvm::Constant **this, llvm::Value *a2, const llvm::Twine *a3, llvm::BasicBlock *a4)
{
  AllOnesValue = llvm::Constant::getAllOnesValue(*this, a2, a3);
  unsigned int v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 16;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = v8 + 16;
  uint64_t v9 = *this;
  uint64_t v10 = (llvm::Value *)(v8 + 16);

  return llvm::BinaryOperator::BinaryOperator(v10, 30, (uint64_t)this, (uint64_t)AllOnesValue, (uint64_t)v9, (const char **)a2, (uint64_t)a3);
}

uint64_t llvm::BinaryOperator::swapOperands(llvm::BinaryOperator *this)
{
  int isCommutative = llvm::Instruction::isCommutative(this);
  if (isCommutative)
  {
    uint64_t v3 = *((void *)this - 8);
    uint64_t v4 = *((void *)this - 4);
    if (v3 != v4)
    {
      uint64_t v5 = *((void *)this - 3);
      *((void *)this - 8) = v4;
      *((void *)this - 4) = v3;
      long long v6 = *(_OWORD *)((char *)this - 56);
      uint64_t v7 = (void *)*((void *)this - 2);
      *((void *)this - 7) = v5;
      *((void *)this - 6) = v7;
      *(_OWORD *)((char *)this - 24) = v6;
      void *v7 = (char *)this - 64;
      uint64_t v8 = *((void *)this - 7);
      if (v8) {
        *(void *)(v8 + 16) = (char *)this - 56;
      }
      **((void **)this - 2) = (char *)this - 32;
      uint64_t v9 = *((void *)this - 3);
      if (v9) {
        *(void *)(v9 + 16) = (char *)this - 24;
      }
    }
  }
  return isCommutative ^ 1u;
}

float llvm::FPMathOperator::getFPAccuracy(llvm::FPMathOperator *this)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0.0;
  }
  uint64_t v1 = ***(void ***)this;
  uint64_t v20 = this;
  int v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    uint64_t v18 = 0;
LABEL_24:
    long long v6 = (llvm::FPMathOperator **)sub_1CC609054(v1 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
    uint64_t v19 = v20;
    _OWORD v6[3] = 0;
    v6[4] = 0;
    *long long v6 = v19;
    v6[1] = (llvm::FPMathOperator *)(v6 + 3);
    v6[2] = (llvm::FPMathOperator *)0x100000000;
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v1 + 2480);
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  long long v6 = (llvm::FPMathOperator **)(v3 + 40 * v5);
  uint64_t v7 = *v6;
  if (*v6 != this)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != (llvm::FPMathOperator *)-4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == (llvm::FPMathOperator *)-8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      long long v6 = (llvm::FPMathOperator **)(v3 + 40 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*v6 == this) {
        goto LABEL_12;
      }
    }
    if (v8) {
      uint64_t v18 = v8;
    }
    else {
      uint64_t v18 = v6;
    }
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v12 = *((unsigned int *)v6 + 4);
  if (!v12) {
    return 0.0;
  }
  uint64_t v13 = (void *)((char *)v6[1] + 8);
  uint64_t v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 3)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      return 0.0;
    }
  }
  uint64_t v16 = *v13;
  if (!v16) {
    return 0.0;
  }
  uint64_t v17 = (llvm::APFloat *)(*(void *)(*(void *)(v16 - 8 * *(unsigned int *)(v16 + 8)) + 128) + 24);

  return llvm::APFloat::convertToFloat(v17);
}

BOOL llvm::CastInst::isNoopCast(int a1, llvm::Type *a2, llvm::Type *a3, llvm::DataLayout *this)
{
  uint64_t v4 = (a1 - 38);
  unsigned int v5 = a3;
  long long v6 = a2;
  BOOL result = 0;
  switch(v4)
  {
    case 9:
      llvm::DataLayout::getIntPtrType(this, a2);
      if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
        uint64_t v8 = **(void **)(v8 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
      if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
        unsigned int v5 = (llvm::Type *)**((void **)v5 + 2);
      }
      BOOL v10 = PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v5);
      goto LABEL_7;
    case 10:
      llvm::DataLayout::getIntPtrType(this, a3);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
        uint64_t v11 = **(void **)(v11 + 16);
      }
      int v12 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
      if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12) {
        long long v6 = (llvm::Type *)**((void **)v6 + 2);
      }
      BOOL v10 = v12 == llvm::Type::getPrimitiveSizeInBits(v6);
LABEL_7:
      BOOL result = v10;
      break;
    case 11:
      BOOL result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL llvm::CastInst::isNoopCast(llvm::CastInst *this, const llvm::DataLayout *a2)
{
  uint64_t v2 = **((void **)this - 4);
  uint64_t v3 = *(unsigned int **)this;
  uint64_t v4 = *((unsigned __int8 *)this + 16) - 66;
  BOOL result = 0;
  switch(v4)
  {
    case 9:
      unsigned int v6 = *(_DWORD *)(v2 + 8);
      if ((v6 & 0xFE) == 0x12) {
        unsigned int v6 = *(_DWORD *)(**(void **)(v2 + 16) + 8);
      }
      if (v6 < 0x100) {
        goto LABEL_13;
      }
      unsigned int v7 = v6 >> 8;
      uint64_t v8 = *((unsigned int *)a2 + 60);
      uint64_t v9 = *((void *)a2 + 29);
      if (v8)
      {
        uint64_t v9 = *((void *)a2 + 29);
        unint64_t v10 = *((unsigned int *)a2 + 60);
        do
        {
          unint64_t v11 = v10 >> 1;
          uint64_t v12 = v9 + 16 * (v10 >> 1);
          unsigned int v13 = *(_DWORD *)(v12 + 8);
          uint64_t v14 = v12 + 16;
          v10 += ~(v10 >> 1);
          if (v13 < v7) {
            uint64_t v9 = v14;
          }
          else {
            unint64_t v10 = v11;
          }
        }
        while (v10);
      }
      if (v9 == *((void *)a2 + 29) + 16 * v8 || *(_DWORD *)(v9 + 8) != v7) {
LABEL_13:
      }
        uint64_t v9 = *((void *)a2 + 29);
      uint64_t v15 = llvm::IntegerType::get(*(llvm::IntegerType **)v2, (llvm::LLVMContext *)*(unsigned int *)(v9 + 4));
      if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12) {
        llvm::VectorType::get((llvm::FixedVectorType *)v15, (llvm::Type *)(*(unsigned int *)(v2 + 32) | ((unint64_t)(*(_DWORD *)(v2 + 8) == 19) << 32)));
      }
      if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12) {
        uint64_t v15 = **(void **)(v15 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
      if ((v3[2] & 0xFE) == 0x12) {
        uint64_t v3 = (unsigned int *)**((void **)v3 + 2);
      }
      BOOL v17 = PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
      goto LABEL_21;
    case 10:
      unsigned int v18 = v3[2];
      if ((v18 & 0xFE) == 0x12) {
        unsigned int v18 = *(_DWORD *)(**((void **)v3 + 2) + 8);
      }
      if (v18 < 0x100) {
        goto LABEL_36;
      }
      unsigned int v19 = v18 >> 8;
      uint64_t v20 = *((unsigned int *)a2 + 60);
      uint64_t v21 = *((void *)a2 + 29);
      if (v20)
      {
        uint64_t v21 = *((void *)a2 + 29);
        unint64_t v22 = *((unsigned int *)a2 + 60);
        do
        {
          unint64_t v23 = v22 >> 1;
          uint64_t v24 = v21 + 16 * (v22 >> 1);
          unsigned int v25 = *(_DWORD *)(v24 + 8);
          uint64_t v26 = v24 + 16;
          v22 += ~(v22 >> 1);
          if (v25 < v19) {
            uint64_t v21 = v26;
          }
          else {
            unint64_t v22 = v23;
          }
        }
        while (v22);
      }
      if (v21 == *((void *)a2 + 29) + 16 * v20 || *(_DWORD *)(v21 + 8) != v19) {
LABEL_36:
      }
        uint64_t v21 = *((void *)a2 + 29);
      uint64_t v27 = llvm::IntegerType::get(*(llvm::IntegerType **)v3, (llvm::LLVMContext *)*(unsigned int *)(v21 + 4));
      if ((v3[2] & 0xFE) == 0x12) {
        llvm::VectorType::get((llvm::FixedVectorType *)v27, (llvm::Type *)(v3[8] | ((unint64_t)(v3[2] == 19) << 32)));
      }
      if ((*(_DWORD *)(v27 + 8) & 0xFE) == 0x12) {
        uint64_t v27 = **(void **)(v27 + 16);
      }
      int v28 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v27);
      if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12) {
        uint64_t v2 = **(void **)(v2 + 16);
      }
      BOOL v17 = v28 == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
LABEL_21:
      BOOL result = v17;
      break;
    case 11:
      BOOL result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::CastInst::isEliminableCastPair(uint64_t a1, uint64_t a2, llvm::Type ***this, llvm::Type *a4, uint64_t a5, uint64_t a6, llvm::Type *a7, uint64_t a8)
{
  uint64_t v10 = a5;
  unint64_t v11 = (llvm::Type *)this;
  unsigned int v12 = a2;
  LODWORD(v15) = a1 == 49 && a2 == 49;
  if (this != (llvm::Type ***)a5 || !a7)
  {
    if (a1 == 49)
    {
LABEL_78:
      if (((this[1] & 0xFE) == 18) != ((*((_DWORD *)a4 + 2) & 0xFE) == 18))
      {
        if (!v15) {
          return 0;
        }
LABEL_30:
        uint64_t v15 = (char *)&unk_1CFB1ADA8 + 13 * (int)a1 + (int)a2 - 532;
        uint64_t result = *v15;
        switch(*v15)
        {
          case 1:
          case 0xD:
          case 0xF:
            return a1;
          case 2:
          case 0x10:
            return a2;
          case 3:
            goto LABEL_32;
          case 4:
            goto LABEL_42;
          case 5:
            goto LABEL_38;
          case 6:
            goto LABEL_35;
          case 7:
            goto LABEL_45;
          case 8:
            int v25 = *((_DWORD *)this + 2);
            uint64_t v26 = (llvm::Type *)this;
            if ((v25 & 0xFE) == 0x12) {
              uint64_t v26 = *this[2];
            }
            unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v26);
            int v28 = (llvm::Type *)v10;
            if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
              int v28 = **(llvm::Type ***)(v10 + 16);
            }
            unsigned int v29 = llvm::Type::getPrimitiveSizeInBits(v28);
            if (PrimitiveSizeInBits == v29)
            {
              uint64_t result = 49;
              if (v25 <= 6u)
              {
                if (v11 == (llvm::Type *)v10) {
                  uint64_t result = 49;
                }
                else {
                  uint64_t result = 0;
                }
              }
            }
            else if (PrimitiveSizeInBits >= v29)
            {
              uint64_t result = v12;
            }
            else
            {
              uint64_t result = a1;
            }
            break;
          case 9:
            return 39;
          case 0xA:
            goto LABEL_77;
          case 0xB:
            if (a7) {
              goto LABEL_93;
            }
            return 0;
          case 0xC:
            goto LABEL_70;
          case 0xE:
            goto LABEL_61;
          case 0x11:
            goto LABEL_68;
          default:
            return result;
        }
        return result;
      }
    }
    if (a2 == 49
      && !(v15 & 1 | ((*((_DWORD *)a4 + 2) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18)))
    {
      return 0;
    }
    goto LABEL_30;
  }
  if (a1 == 49 && ((this[1] & 0xFE) == 18) != ((*((_DWORD *)a4 + 2) & 0xFE) == 18))
  {
    if (v15) {
      goto LABEL_11;
    }
    return 0;
  }
  if (a2 == 49
    && !(v15 & 1 | ((*((_DWORD *)a4 + 2) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18)))
  {
    return 0;
  }
LABEL_11:
  uint64_t v15 = (char *)&unk_1CFB1ADA8 + 13 * (int)a1 + (int)a2 - 532;
  uint64_t result = *v15;
  switch(*v15)
  {
    case 1:
    case 0xD:
    case 0xF:
      return a1;
    case 2:
    case 0x10:
      return a2;
    case 3:
LABEL_32:
      if ((this[1] & 0xFE) == 0x12) {
        return 0;
      }
      uint64_t result = a1;
      if (*(unsigned char *)(a5 + 8) != 13) {
        return 0;
      }
      return result;
    case 4:
LABEL_42:
      if (*(unsigned __int8 *)(a5 + 8) >= 7u) {
        return 0;
      }
      else {
        return a1;
      }
    case 5:
LABEL_38:
      if (*((unsigned char *)this + 8) == 13) {
        return a2;
      }
      else {
        return 0;
      }
    case 6:
LABEL_35:
      if (*((unsigned __int8 *)this + 8) >= 7u) {
        return 0;
      }
      else {
        return a2;
      }
    case 7:
LABEL_45:
      if (byte_1EBCD8898) {
        return 0;
      }
      unsigned int v20 = *((_DWORD *)this + 2);
      if ((v20 & 0xFE) == 0x12) {
        unsigned int v20 = *((_DWORD *)*this[2] + 2);
      }
      int v21 = *(_DWORD *)(a5 + 8);
      if ((v21 & 0xFE) == 0x12) {
        int v21 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
      }
      if ((v21 ^ v20) > 0xFF) {
        return 0;
      }
      if ((*((_DWORD *)a4 + 2) & 0xFE) == 0x12) {
        a4 = (llvm::Type *)**((void **)a4 + 2);
      }
      unsigned int v22 = llvm::Type::getPrimitiveSizeInBits(a4);
      if (v22 == 64) {
        goto LABEL_101;
      }
      uint64_t result = 0;
      if (a6 && a8 == a6)
      {
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          a6 = **(void **)(a6 + 16);
        }
        if (v22 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a6)) {
          uint64_t result = 49;
        }
        else {
          uint64_t result = 0;
        }
      }
      break;
    case 8:
      if ((this[1] & 0xFE) == 0x12) {
        unint64_t v11 = *this[2];
      }
      unsigned int v17 = llvm::Type::getPrimitiveSizeInBits(v11);
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        uint64_t v10 = **(void **)(v10 + 16);
      }
      unsigned int v18 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
      if (v17 >= v18) {
        unsigned int v19 = v12;
      }
      else {
        unsigned int v19 = a1;
      }
      if (v17 == v18) {
        return 49;
      }
      else {
        return v19;
      }
    case 9:
      return 39;
    case 0xA:
LABEL_77:
      __break(1u);
      goto LABEL_78;
    case 0xB:
LABEL_93:
      if ((*((_DWORD *)a7 + 2) & 0xFE) == 0x12) {
        a7 = (llvm::Type *)**((void **)a7 + 2);
      }
      unsigned int v30 = llvm::Type::getPrimitiveSizeInBits(a7);
      if ((*((_DWORD *)v11 + 2) & 0xFE) == 0x12) {
        unint64_t v11 = (llvm::Type *)**((void **)v11 + 2);
      }
      unsigned int v31 = llvm::Type::getPrimitiveSizeInBits(v11);
      if (v31 > v30) {
        return 0;
      }
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        uint64_t v10 = **(void **)(v10 + 16);
      }
      if (v31 != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10)) {
        return 0;
      }
LABEL_101:
      uint64_t result = 49;
      break;
    case 0xC:
LABEL_70:
      unsigned int v23 = *((_DWORD *)this + 2);
      if ((v23 & 0xFE) == 0x12) {
        unsigned int v23 = *((_DWORD *)*this[2] + 2);
      }
      int v24 = *(_DWORD *)(a5 + 8);
      if ((v24 & 0xFE) == 0x12) {
        int v24 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
      }
      if ((v24 ^ v23) < 0x100) {
        uint64_t result = 49;
      }
      else {
        uint64_t result = 50;
      }
      break;
    case 0xE:
LABEL_61:
      if ((this[1] & 0xFE) == 0x12) {
        unint64_t v11 = *this[2];
      }
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
        uint64_t v10 = **(void **)(a5 + 16);
      }
      if (*((void *)v11 + 3) == *(void *)(v10 + 24)) {
        uint64_t result = 50;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 0x11:
LABEL_68:
      uint64_t result = 43;
      break;
    default:
      return result;
  }
  return result;
}

llvm::Value *llvm::CastInst::Create(int a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  switch(a1)
  {
    case '\'':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 67;
      goto LABEL_3;
    case '(':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 68;
      goto LABEL_3;
    case ')':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 69;
      goto LABEL_3;
    case '*':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 70;
      goto LABEL_3;
    case '+':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 71;
      goto LABEL_3;
    case ',':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 72;
      goto LABEL_3;
    case '-':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 73;
      goto LABEL_3;
    case '.':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 74;
      goto LABEL_3;
    case '/':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 75;
      goto LABEL_3;
    case '0':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 76;
      goto LABEL_3;
    case '1':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 77;
      goto LABEL_3;
    case '2':
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      *((void *)v9 + 5) = 0;
      *((void *)v9 + 6) = 0x10000004ELL;
      *(_OWORD *)(v9 + 56) = 0u;
      unsigned int v12 = v9 + 56;
      *(_OWORD *)(v9 + 72) = 0u;
      *((_DWORD *)v9 + 22) = 0;
      if (!a5) {
        goto LABEL_4;
      }
      uint64_t v40 = *(void *)(a5 + 40);
      unsigned int v18 = (uint64_t *)(a5 + 24);
      *((void *)v9 + 9) = v40;
      *(_WORD *)(v40 + 18) &= ~0x8000u;
      uint64_t v42 = v9;
      if ((v9[55] & 0x10) != 0)
      {
        uint64_t v41 = *(void *)(v40 + 56);
        if (v41)
        {
          int v36 = *(llvm::ValueSymbolTable **)(v41 + 104);
          if (v36) {
            goto LABEL_43;
          }
        }
      }
      uint64_t v19 = *v18;
      uint64_t v9 = v42;
      goto LABEL_18;
    default:
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((void *)v9 + 4) = a3;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = 66;
LABEL_3:
      *((void *)v9 + 5) = 0;
      *((void *)v9 + 6) = v11 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
      *(_OWORD *)(v9 + 56) = 0u;
      unsigned int v12 = v9 + 56;
      *(_OWORD *)(v9 + 72) = 0u;
      *((_DWORD *)v9 + 22) = 0;
      if (!a5) {
        goto LABEL_4;
      }
      uint64_t v17 = *(void *)(a5 + 40);
      unsigned int v18 = (uint64_t *)(a5 + 24);
      *((void *)v9 + 9) = v17;
      *(_WORD *)(v17 + 18) &= ~0x8000u;
      if ((v9[55] & 0x10) != 0
        && (uint64_t v34 = *(void *)(v17 + 56)) != 0
        && (unint64_t v35 = *(llvm::ValueSymbolTable **)(v34 + 104)) != 0)
      {
        uint64_t v42 = v9;
        int v36 = v35;
LABEL_43:
        llvm::ValueSymbolTable::reinsertValue(v36, v10);
        uint64_t v9 = v42;
        uint64_t v37 = *(void *)v42;
        uint64_t v38 = *v18;
        *((void *)v42 + 7) = *v18;
        *((void *)v42 + 8) = v18;
        *(void *)(v38 + 8) = v12;
        uint64_t *v18 = (uint64_t)v12;
        if (v37)
        {
          **((void **)v42 + 2) = *((void *)v42 + 1);
          uint64_t v39 = *((void *)v42 + 1);
          if (v39) {
            *(void *)(v39 + 16) = *((void *)v42 + 2);
          }
        }
      }
      else
      {
        uint64_t v19 = *v18;
LABEL_18:
        *((void *)v9 + 7) = v19;
        *((void *)v9 + 8) = v18;
        *(void *)(v19 + 8) = v12;
        uint64_t *v18 = (uint64_t)v12;
      }
LABEL_4:
      *(void *)uint64_t v9 = a2;
      if (a2)
      {
        uint64_t v15 = *(void *)(a2 + 8);
        uint64_t v14 = (void *)(a2 + 8);
        uint64_t v13 = v15;
        *((void *)v9 + 1) = v15;
        if (v15) {
          *(void *)(v13 + 16) = v9 + 8;
        }
        *((void *)v9 + 2) = v14;
        *uint64_t v14 = v9;
      }
      llvm::Value::setNameImpl(v10, a4);
      if (*((unsigned char *)v10 + 16)) {
        return v10;
      }
      if ((*((unsigned char *)v10 + 23) & 0x10) == 0) {
        goto LABEL_39;
      }
      uint64_t v20 = ***(void ***)v10;
      uint64_t v21 = *(void *)(v20 + 152);
      uint64_t v22 = *(unsigned int *)(v20 + 168);
      if (!v22) {
        goto LABEL_46;
      }
      LODWORD(v23) = (v22 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v24 = (llvm::Value **)(v21 + 16 * v23);
      int v25 = *v24;
      if (*v24 == v10) {
        goto LABEL_30;
      }
      int v26 = 1;
      break;
  }
  while (v25 != (llvm::Value *)-4096)
  {
    int v27 = v23 + v26++;
    uint64_t v23 = v27 & (v22 - 1);
    int v25 = *(llvm::Value **)(v21 + 16 * v23);
    if (v25 == v10)
    {
      int v24 = (llvm::Value **)(v21 + 16 * v23);
      goto LABEL_30;
    }
  }
LABEL_46:
  int v24 = (llvm::Value **)(v21 + 16 * v22);
LABEL_30:
  int v28 = v24[1];
  unint64_t v31 = *(void *)v28;
  unsigned int v29 = (char *)v28 + 16;
  unint64_t v30 = v31;
  if (v31 >= 5 && (*(_DWORD *)v29 == *(_DWORD *)"llvm." ? (BOOL v32 = v29[4] == aLlvm_1[4]) : (BOOL v32 = 0), v32))
  {
    *((_DWORD *)v10 + 8) |= 0x2000u;
    int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
  }
  else
  {
LABEL_39:
    int v33 = 0;
    *((_DWORD *)v10 + 8) &= ~0x2000u;
  }
  *((_DWORD *)v10 + 9) = v33;
  return v10;
}

{
  char *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  uint64_t v12;
  char v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value **v31;
  llvm::Value *v32;
  int v33;
  int v34;
  llvm::Value *v35;
  unsigned char *v36;
  unint64_t v37;
  unint64_t v38;
  int v40;

  switch(a1)
  {
    case '\'':
      uint64_t v14 = (char *)operator new(0x60uLL);
      *((_DWORD *)v14 + 13) = *((_DWORD *)v14 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v14 + 32);
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = v14 + 32;
      uint64_t v11 = (llvm::Value *)(v14 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 39;
      break;
    case '(':
      uint64_t v15 = (char *)operator new(0x60uLL);
      *((_DWORD *)v15 + 13) = *((_DWORD *)v15 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v15 + 32);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = v15 + 32;
      uint64_t v11 = (llvm::Value *)(v15 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 40;
      break;
    case ')':
      uint64_t v16 = (char *)operator new(0x60uLL);
      *((_DWORD *)v16 + 13) = *((_DWORD *)v16 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v16 + 32);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = v16 + 32;
      uint64_t v11 = (llvm::Value *)(v16 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 41;
      break;
    case '*':
      uint64_t v17 = (char *)operator new(0x60uLL);
      *((_DWORD *)v17 + 13) = *((_DWORD *)v17 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v17 + 32);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = v17 + 32;
      uint64_t v11 = (llvm::Value *)(v17 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 42;
      break;
    case '+':
      unsigned int v18 = (char *)operator new(0x60uLL);
      *((_DWORD *)v18 + 13) = *((_DWORD *)v18 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v18 + 32);
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = v18 + 32;
      uint64_t v11 = (llvm::Value *)(v18 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 43;
      break;
    case ',':
      uint64_t v19 = (char *)operator new(0x60uLL);
      *((_DWORD *)v19 + 13) = *((_DWORD *)v19 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v19 + 32);
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = v19 + 32;
      uint64_t v11 = (llvm::Value *)(v19 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 44;
      break;
    case '-':
      uint64_t v20 = (char *)operator new(0x60uLL);
      *((_DWORD *)v20 + 13) = *((_DWORD *)v20 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v20 + 32);
      *(void *)uint64_t v20 = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = v20 + 32;
      uint64_t v11 = (llvm::Value *)(v20 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 45;
      break;
    case '.':
      uint64_t v21 = (char *)operator new(0x60uLL);
      *((_DWORD *)v21 + 13) = *((_DWORD *)v21 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v21 + 32);
      *(void *)uint64_t v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 3) = v21 + 32;
      uint64_t v11 = (llvm::Value *)(v21 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 46;
      break;
    case '/':
      uint64_t v22 = (char *)operator new(0x60uLL);
      *((_DWORD *)v22 + 13) = *((_DWORD *)v22 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v22 + 32);
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = v22 + 32;
      uint64_t v11 = (llvm::Value *)(v22 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 47;
      break;
    case '0':
      uint64_t v23 = (char *)operator new(0x60uLL);
      *((_DWORD *)v23 + 13) = *((_DWORD *)v23 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v23 + 32);
      *(void *)uint64_t v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      *((void *)v23 + 3) = v23 + 32;
      uint64_t v11 = (llvm::Value *)(v23 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 48;
      break;
    case '1':
      int v24 = (char *)operator new(0x60uLL);
      *((_DWORD *)v24 + 13) = *((_DWORD *)v24 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v24 + 32);
      *(void *)int v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *((void *)v24 + 3) = v24 + 32;
      uint64_t v11 = (llvm::Value *)(v24 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 49;
      break;
    case '2':
      int v25 = (char *)operator new(0x60uLL);
      *((_DWORD *)v25 + 13) = *((_DWORD *)v25 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v25 + 32);
      *(void *)int v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 3) = v25 + 32;
      uint64_t v11 = (llvm::Value *)(v25 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 50;
      break;
    default:
      uint64_t v9 = (char *)operator new(0x60uLL);
      *((_DWORD *)v9 + 13) = *((_DWORD *)v9 + 13) & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v9 + 32);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 32;
      uint64_t v11 = (llvm::Value *)(v9 + 32);
      unsigned int v12 = a3;
      uint64_t v13 = 38;
      break;
  }
  sub_1CC5CEE04(v11, v12, v13, a2, a5);
  llvm::Value::setNameImpl(v10, a4);
  if (!*((unsigned char *)v10 + 16))
  {
    if ((*((unsigned char *)v10 + 23) & 0x10) == 0) {
      goto LABEL_32;
    }
    int v27 = ***(void ***)v10;
    int v28 = *(void *)(v27 + 152);
    unsigned int v29 = *(unsigned int *)(v27 + 168);
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      unint64_t v31 = (llvm::Value **)(v28 + 16 * v30);
      BOOL v32 = *v31;
      if (*v31 == v10)
      {
LABEL_25:
        unint64_t v35 = v31[1];
        uint64_t v38 = *(void *)v35;
        int v36 = (char *)v35 + 16;
        uint64_t v37 = v38;
        if (v38 >= 5 && *(_DWORD *)v36 == *(_DWORD *)"llvm." && v36[4] == aLlvm_1[4])
        {
          *((_DWORD *)v10 + 8) |= 0x2000u;
          uint64_t v40 = llvm::Function::lookupIntrinsicID(v36, v37);
LABEL_33:
          *((_DWORD *)v10 + 9) = v40;
          return v10;
        }
LABEL_32:
        uint64_t v40 = 0;
        *((_DWORD *)v10 + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v33 = 1;
      while (v32 != (llvm::Value *)-4096)
      {
        uint64_t v34 = v30 + v33++;
        unint64_t v30 = v34 & (v29 - 1);
        BOOL v32 = *(llvm::Value **)(v28 + 16 * v30);
        if (v32 == v10)
        {
          unint64_t v31 = (llvm::Value **)(v28 + 16 * v30);
          goto LABEL_25;
        }
      }
    }
    unint64_t v31 = (llvm::Value **)(v28 + 16 * v29);
    goto LABEL_25;
  }
  return v10;
}

llvm::TruncInst *llvm::TruncInst::TruncInst(llvm::TruncInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 66;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::TruncInst **)v22;
      if (*(llvm::TruncInst **)v22 == this)
      {
LABEL_18:
        int v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::TruncInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::TruncInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::TruncInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 66;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      int v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::TruncInst **)v22;
      if (*(llvm::TruncInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::TruncInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::TruncInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::ZExtInst *llvm::ZExtInst::ZExtInst(llvm::ZExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 67;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::ZExtInst **)v22;
      if (*(llvm::ZExtInst **)v22 == this)
      {
LABEL_18:
        int v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::ZExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::ZExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ZExtInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 67;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      int v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::ZExtInst **)v22;
      if (*(llvm::ZExtInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::ZExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::ZExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::SExtInst *llvm::SExtInst::SExtInst(llvm::SExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 68;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::SExtInst **)v22;
      if (*(llvm::SExtInst **)v22 == this)
      {
LABEL_18:
        int v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::SExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::SExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::SExtInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 68;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      int v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::SExtInst **)v22;
      if (*(llvm::SExtInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::SExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::SExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::FPExtInst *llvm::FPExtInst::FPExtInst(llvm::FPExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 74;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPExtInst **)v22;
      if (*(llvm::FPExtInst **)v22 == this)
      {
LABEL_18:
        int v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::FPExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::FPExtInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 74;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      int v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPExtInst **)v22;
      if (*(llvm::FPExtInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPExtInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPExtInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::UIToFPInst *llvm::UIToFPInst::UIToFPInst(llvm::UIToFPInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 71;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::UIToFPInst **)v22;
      if (*(llvm::UIToFPInst **)v22 == this)
      {
LABEL_18:
        int v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::UIToFPInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::UIToFPInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::UIToFPInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 71;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      int v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::UIToFPInst **)v22;
      if (*(llvm::UIToFPInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::UIToFPInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::UIToFPInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::FPToUIInst *llvm::FPToUIInst::FPToUIInst(llvm::FPToUIInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 69;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPToUIInst **)v22;
      if (*(llvm::FPToUIInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPToUIInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPToUIInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::FPToUIInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 69;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPToUIInst **)v22;
      if (*(llvm::FPToUIInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPToUIInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPToUIInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::FPToSIInst *llvm::FPToSIInst::FPToSIInst(llvm::FPToSIInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 70;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPToSIInst **)v22;
      if (*(llvm::FPToSIInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPToSIInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPToSIInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::FPToSIInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 70;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::FPToSIInst **)v22;
      if (*(llvm::FPToSIInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPToSIInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::FPToSIInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::PtrToIntInst *llvm::PtrToIntInst::PtrToIntInst(llvm::PtrToIntInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 75;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::PtrToIntInst **)v22;
      if (*(llvm::PtrToIntInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::PtrToIntInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::PtrToIntInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::PtrToIntInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 75;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::PtrToIntInst **)v22;
      if (*(llvm::PtrToIntInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::PtrToIntInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::PtrToIntInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::IntToPtrInst *llvm::IntToPtrInst::IntToPtrInst(llvm::IntToPtrInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 76;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::IntToPtrInst **)v22;
      if (*(llvm::IntToPtrInst **)v22 == this)
      {
LABEL_18:
        uint64_t v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::IntToPtrInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::IntToPtrInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::IntToPtrInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 76;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::IntToPtrInst **)v22;
      if (*(llvm::IntToPtrInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::IntToPtrInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::IntToPtrInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::BitCastInst *llvm::BitCastInst::BitCastInst(llvm::BitCastInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 77;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::BitCastInst **)v22;
      if (*(llvm::BitCastInst **)v22 == this)
      {
LABEL_18:
        uint64_t v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::BitCastInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::BitCastInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::BitCastInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 77;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::BitCastInst **)v22;
      if (*(llvm::BitCastInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::BitCastInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::BitCastInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::AddrSpaceCastInst *llvm::AddrSpaceCastInst::AddrSpaceCastInst(llvm::AddrSpaceCastInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 78;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(v15 + 56);
      if (v32)
      {
        int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33) {
          llvm::ValueSymbolTable::reinsertValue(v33, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_26;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::AddrSpaceCastInst **)v22;
      if (*(llvm::AddrSpaceCastInst **)v22 == this)
      {
LABEL_18:
        uint64_t v26 = *(void **)(v22 + 8);
        unint64_t v29 = *v26;
        int v27 = v26 + 2;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_25:
          *((_DWORD *)this + 9) = v31;
          return this;
        }
LABEL_26:
        int v31 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      int v24 = 1;
      while (v23 != (llvm::AddrSpaceCastInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::AddrSpaceCastInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_18;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_18;
  }
  return this;
}

{
  unsigned int v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::AddrSpaceCastInst *v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  void *v28;
  unsigned char *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;

  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 78;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    uint64_t v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        int v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *uint64_t v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    unsigned int v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      uint64_t v23 = *(llvm::AddrSpaceCastInst **)v22;
      if (*(llvm::AddrSpaceCastInst **)v22 == this)
      {
LABEL_22:
        unint64_t v28 = *(void **)(v22 + 8);
        int v31 = *v28;
        unint64_t v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::AddrSpaceCastInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::AddrSpaceCastInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

llvm::TruncInst *llvm::TruncInst::TruncInst(llvm::TruncInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 38, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::TruncInst **)v13;
      if (*(llvm::TruncInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::TruncInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::TruncInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::TruncInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 38, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::TruncInst **)v13;
      if (*(llvm::TruncInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::TruncInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::TruncInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::SExtInst *llvm::SExtInst::SExtInst(llvm::SExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 40, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::SExtInst **)v13;
      if (*(llvm::SExtInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::SExtInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::SExtInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::SExtInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 40, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::SExtInst **)v13;
      if (*(llvm::SExtInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::SExtInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::SExtInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::FPTruncInst *llvm::FPTruncInst::FPTruncInst(llvm::FPTruncInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 45, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPTruncInst **)v13;
      if (*(llvm::FPTruncInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPTruncInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPTruncInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::FPTruncInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 45, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPTruncInst **)v13;
      if (*(llvm::FPTruncInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPTruncInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPTruncInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::FPExtInst *llvm::FPExtInst::FPExtInst(llvm::FPExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 46, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPExtInst **)v13;
      if (*(llvm::FPExtInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPExtInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPExtInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::FPExtInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 46, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPExtInst **)v13;
      if (*(llvm::FPExtInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPExtInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPExtInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::UIToFPInst *llvm::UIToFPInst::UIToFPInst(llvm::UIToFPInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 43, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::UIToFPInst **)v13;
      if (*(llvm::UIToFPInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::UIToFPInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::UIToFPInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::UIToFPInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 43, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::UIToFPInst **)v13;
      if (*(llvm::UIToFPInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::UIToFPInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::UIToFPInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::SIToFPInst *llvm::SIToFPInst::SIToFPInst(llvm::SIToFPInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 44, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::SIToFPInst **)v13;
      if (*(llvm::SIToFPInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::SIToFPInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::SIToFPInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::SIToFPInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 44, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::SIToFPInst **)v13;
      if (*(llvm::SIToFPInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::SIToFPInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::SIToFPInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::FPToUIInst *llvm::FPToUIInst::FPToUIInst(llvm::FPToUIInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 41, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPToUIInst **)v13;
      if (*(llvm::FPToUIInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPToUIInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPToUIInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::FPToUIInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 41, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPToUIInst **)v13;
      if (*(llvm::FPToUIInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPToUIInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPToUIInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::FPToSIInst *llvm::FPToSIInst::FPToSIInst(llvm::FPToSIInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 42, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPToSIInst **)v13;
      if (*(llvm::FPToSIInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPToSIInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPToSIInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::FPToSIInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 42, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::FPToSIInst **)v13;
      if (*(llvm::FPToSIInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::FPToSIInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::FPToSIInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::PtrToIntInst *llvm::PtrToIntInst::PtrToIntInst(llvm::PtrToIntInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 47, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::PtrToIntInst **)v13;
      if (*(llvm::PtrToIntInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::PtrToIntInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::PtrToIntInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::PtrToIntInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 47, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::PtrToIntInst **)v13;
      if (*(llvm::PtrToIntInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::PtrToIntInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::PtrToIntInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::IntToPtrInst *llvm::IntToPtrInst::IntToPtrInst(llvm::IntToPtrInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 48, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::IntToPtrInst **)v13;
      if (*(llvm::IntToPtrInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::IntToPtrInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::IntToPtrInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::IntToPtrInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 48, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::IntToPtrInst **)v13;
      if (*(llvm::IntToPtrInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::IntToPtrInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::IntToPtrInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::BitCastInst *llvm::BitCastInst::BitCastInst(llvm::BitCastInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 49, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::BitCastInst **)v13;
      if (*(llvm::BitCastInst **)v13 == this)
      {
LABEL_11:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_18:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_18;
      }
      int v15 = 1;
      while (v14 != (llvm::BitCastInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::BitCastInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_11;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_11;
  }
  return this;
}

{
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::BitCastInst *v14;
  int v15;
  int v16;
  void *v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;

  unsigned int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 49, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::BitCastInst **)v13;
      if (*(llvm::BitCastInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::BitCastInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::BitCastInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

llvm::Value *llvm::CastInst::CreateZExtOrBitCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  uint64_t v13 = (char *)operator new(0x60uLL);
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  uint64_t v14 = (llvm::Value *)(v13 + 32);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 32;
  if (PrimitiveSizeInBits == v12)
  {
    uint64_t v43 = sub_1CC19DDB4((llvm::Value *)(v13 + 32), (uint64_t)a2, 49, (uint64_t)this, (uint64_t)a4);
    llvm::Value::setName(v43, a3);
    return v14;
  }
  int v15 = v13;
  *(_OWORD *)(v13 + 56) = 0u;
  int v16 = v13 + 56;
  *((void *)v13 + 4) = a2;
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0x100000043;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_DWORD *)v13 + 22) = 0;
  if (a4)
  {
    uint64_t v21 = *((void *)a4 + 5);
    int v22 = (uint64_t *)((char *)a4 + 24);
    *((void *)v13 + 9) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((v13[55] & 0x10) != 0
      && (uint64_t v38 = *(void *)(v21 + 56)) != 0
      && (uint64_t v39 = *(llvm::ValueSymbolTable **)(v38 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v39, v14);
      uint64_t v40 = *(void *)v15;
      uint64_t v41 = *v22;
      *((void *)v15 + 7) = *v22;
      *((void *)v15 + 8) = v22;
      *(void *)(v41 + 8) = v16;
      *int v22 = (uint64_t)v16;
      if (v40)
      {
        **((void **)v15 + 2) = *((void *)v15 + 1);
        uint64_t v42 = *((void *)v15 + 1);
        if (v42) {
          *(void *)(v42 + 16) = *((void *)v15 + 2);
        }
      }
    }
    else
    {
      uint64_t v23 = *v22;
      *((void *)v15 + 7) = *v22;
      *((void *)v15 + 8) = v22;
      *(void *)(v23 + 8) = v16;
      *int v22 = (uint64_t)v16;
    }
  }
  *(void *)int v15 = this;
  uint64_t v19 = *((void *)this + 1);
  uint64_t v18 = (void *)((char *)this + 8);
  uint64_t v17 = v19;
  *((void *)v15 + 1) = v19;
  if (v19) {
    *(void *)(v17 + 16) = v15 + 8;
  }
  *((void *)v15 + 2) = v18;
  void *v18 = v15;
  llvm::Value::setNameImpl(v14, a3);
  if (!v15[48])
  {
    if ((v15[55] & 0x10) == 0) {
      goto LABEL_28;
    }
    uint64_t v24 = ***(void ***)v14;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
      unint64_t v29 = *v28;
      if (*v28 == v14)
      {
LABEL_20:
        uint64_t v32 = v28[1];
        unint64_t v35 = *(void *)v32;
        int v33 = (char *)v32 + 16;
        unint64_t v34 = v35;
        if (v35 >= 5 && *(_DWORD *)v33 == *(_DWORD *)"llvm." && v33[4] == aLlvm_1[4])
        {
          *((_DWORD *)v15 + 16) |= 0x2000u;
          int v37 = llvm::Function::lookupIntrinsicID(v33, v34);
LABEL_27:
          *((_DWORD *)v15 + 17) = v37;
          return v14;
        }
LABEL_28:
        int v37 = 0;
        *((_DWORD *)v15 + 16) &= ~0x2000u;
        goto LABEL_27;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
        if (v29 == v14)
        {
          unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
          goto LABEL_20;
        }
      }
    }
    unint64_t v28 = (llvm::Value **)(v25 + 16 * v26);
    goto LABEL_20;
  }
  return v14;
}

uint64_t ***llvm::CastInst::CreateZExtOrBitCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  uint64_t v13 = (char *)operator new(0x60uLL);
  uint64_t v14 = v13;
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  int v15 = (uint64_t ***)(v13 + 32);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 32;
  if (PrimitiveSizeInBits == v12) {
    char v16 = 49;
  }
  else {
    char v16 = 39;
  }
  uint64_t v17 = sub_1CC5CEE04((llvm::Value *)(v13 + 32), (uint64_t)a2, v16, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setNameImpl(v17, a3);
  if (!v14[48])
  {
    if ((v14[55] & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v19 = ***v15;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 == v15)
      {
LABEL_18:
        uint64_t v27 = v23[1];
        unint64_t v30 = (unint64_t)*v27;
        unint64_t v28 = v27 + 2;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)v14 + 16) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_26:
          *((_DWORD *)v14 + 17) = v32;
          return v15;
        }
LABEL_25:
        int v32 = 0;
        *((_DWORD *)v14 + 16) &= ~0x2000u;
        goto LABEL_26;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v15)
        {
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_18;
  }
  return v15;
}

uint64_t ***llvm::CastInst::CreateSExtOrBitCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  uint64_t v13 = (char *)operator new(0x60uLL);
  uint64_t v14 = v13;
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  int v15 = (uint64_t ***)(v13 + 32);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 32;
  if (PrimitiveSizeInBits == v12) {
    char v16 = 49;
  }
  else {
    char v16 = 40;
  }
  uint64_t v17 = sub_1CC5CEE04((llvm::Value *)(v13 + 32), (uint64_t)a2, v16, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setNameImpl(v17, a3);
  if (!v14[48])
  {
    if ((v14[55] & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v19 = ***v15;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 == v15)
      {
LABEL_18:
        uint64_t v27 = v23[1];
        unint64_t v30 = (unint64_t)*v27;
        unint64_t v28 = v27 + 2;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)v14 + 16) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_26:
          *((_DWORD *)v14 + 17) = v32;
          return v15;
        }
LABEL_25:
        int v32 = 0;
        *((_DWORD *)v14 + 16) &= ~0x2000u;
        goto LABEL_26;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v15)
        {
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_18;
  }
  return v15;
}

llvm::Value *llvm::CastInst::CreateTruncOrBitCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  uint64_t v13 = (char *)operator new(0x60uLL);
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  uint64_t v14 = (llvm::Value *)(v13 + 32);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 32;
  if (PrimitiveSizeInBits == v12)
  {
    uint64_t v43 = sub_1CC19DDB4((llvm::Value *)(v13 + 32), (uint64_t)a2, 49, (uint64_t)this, (uint64_t)a4);
    llvm::Value::setName(v43, a3);
    return v14;
  }
  int v15 = v13;
  *(_OWORD *)(v13 + 56) = 0u;
  char v16 = v13 + 56;
  *((void *)v13 + 4) = a2;
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0x100000042;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_DWORD *)v13 + 22) = 0;
  if (a4)
  {
    uint64_t v21 = *((void *)a4 + 5);
    uint64_t v22 = (uint64_t *)((char *)a4 + 24);
    *((void *)v13 + 9) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((v13[55] & 0x10) != 0
      && (uint64_t v38 = *(void *)(v21 + 56)) != 0
      && (uint64_t v39 = *(llvm::ValueSymbolTable **)(v38 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v39, v14);
      uint64_t v40 = *(void *)v15;
      uint64_t v41 = *v22;
      *((void *)v15 + 7) = *v22;
      *((void *)v15 + 8) = v22;
      *(void *)(v41 + 8) = v16;
      *uint64_t v22 = (uint64_t)v16;
      if (v40)
      {
        **((void **)v15 + 2) = *((void *)v15 + 1);
        uint64_t v42 = *((void *)v15 + 1);
        if (v42) {
          *(void *)(v42 + 16) = *((void *)v15 + 2);
        }
      }
    }
    else
    {
      uint64_t v23 = *v22;
      *((void *)v15 + 7) = *v22;
      *((void *)v15 + 8) = v22;
      *(void *)(v23 + 8) = v16;
      *uint64_t v22 = (uint64_t)v16;
    }
  }
  *(void *)int v15 = this;
  uint64_t v19 = *((void *)this + 1);
  uint64_t v18 = (void *)((char *)this + 8);
  uint64_t v17 = v19;
  *((void *)v15 + 1) = v19;
  if (v19) {
    *(void *)(v17 + 16) = v15 + 8;
  }
  *((void *)v15 + 2) = v18;
  void *v18 = v15;
  llvm::Value::setNameImpl(v14, a3);
  if (!v15[48])
  {
    if ((v15[55] & 0x10) == 0) {
      goto LABEL_28;
    }
    uint64_t v24 = ***(void ***)v14;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
      unint64_t v29 = *v28;
      if (*v28 == v14)
      {
LABEL_20:
        int v32 = v28[1];
        unint64_t v35 = *(void *)v32;
        int v33 = (char *)v32 + 16;
        unint64_t v34 = v35;
        if (v35 >= 5 && *(_DWORD *)v33 == *(_DWORD *)"llvm." && v33[4] == aLlvm_1[4])
        {
          *((_DWORD *)v15 + 16) |= 0x2000u;
          int v37 = llvm::Function::lookupIntrinsicID(v33, v34);
LABEL_27:
          *((_DWORD *)v15 + 17) = v37;
          return v14;
        }
LABEL_28:
        int v37 = 0;
        *((_DWORD *)v15 + 16) &= ~0x2000u;
        goto LABEL_27;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
        if (v29 == v14)
        {
          unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
          goto LABEL_20;
        }
      }
    }
    unint64_t v28 = (llvm::Value **)(v25 + 16 * v26);
    goto LABEL_20;
  }
  return v14;
}

uint64_t ***llvm::CastInst::CreateTruncOrBitCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  uint64_t v13 = (char *)operator new(0x60uLL);
  uint64_t v14 = v13;
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  int v15 = (uint64_t ***)(v13 + 32);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 32;
  if (PrimitiveSizeInBits == v12) {
    char v16 = 49;
  }
  else {
    char v16 = 38;
  }
  uint64_t v17 = sub_1CC5CEE04((llvm::Value *)(v13 + 32), (uint64_t)a2, v16, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setNameImpl(v17, a3);
  if (!v14[48])
  {
    if ((v14[55] & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v19 = ***v15;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 == v15)
      {
LABEL_18:
        uint64_t v27 = v23[1];
        unint64_t v30 = (unint64_t)*v27;
        unint64_t v28 = v27 + 2;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)v14 + 16) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_26:
          *((_DWORD *)v14 + 17) = v32;
          return v15;
        }
LABEL_25:
        int v32 = 0;
        *((_DWORD *)v14 + 16) &= ~0x2000u;
        goto LABEL_26;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v15)
        {
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_18;
  }
  return v15;
}

char *llvm::CastInst::CreatePointerCast(llvm::CastInst *this, llvm::Value *a2, const char **a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8);
  }
  else {
    int v9 = *((_DWORD *)a2 + 2);
  }
  if (v9 == 13)
  {
    uint64_t v10 = (char *)operator new(0x60uLL);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
    uint64_t v11 = (uint64_t ***)(v10 + 32);
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = v10 + 32;
    int v12 = sub_1CC5CEE04((llvm::Value *)(v10 + 32), (uint64_t)a2, 47, (uint64_t)this, (uint64_t)a4);
    llvm::Value::setNameImpl(v12, a3);
    if (v10[48]) {
      return v10 + 32;
    }
    if ((v10[55] & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v14 = ***v11;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
      uint64_t v19 = *v18;
      if (*v18 == v11)
      {
LABEL_18:
        uint64_t v22 = v18[1];
        unint64_t v25 = (unint64_t)*v22;
        uint64_t v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)v10 + 16) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_26:
          *((_DWORD *)v10 + 17) = v27;
          return v10 + 32;
        }
LABEL_25:
        int v27 = 0;
        *((_DWORD *)v10 + 16) &= ~0x2000u;
        goto LABEL_26;
      }
      int v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v11)
        {
          uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_18;
        }
      }
    }
    uint64_t v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_18;
  }

  return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(this, a2, a3, a4, a5);
}

llvm::Value *llvm::CastInst::CreatePointerCast(llvm::CastInst *this, llvm::Value *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
    int v5 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8);
  }
  else {
    int v5 = *((_DWORD *)a2 + 2);
  }
  if (v5 == 13)
  {
    uint64_t v11 = operator new(0x60uLL);
    v11[13] = v11[13] & 0x38000000 | 1;
    int v12 = (char *)(v11 + 8);
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = v11 + 8;
    uint64_t v13 = sub_1CC19DDB4((llvm::Value *)(v11 + 8), (uint64_t)a2, 47, (uint64_t)this, (uint64_t)a4);
    llvm::Value::setName(v13, a3);
    return (llvm::Value *)v12;
  }
  else
  {
    return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(this, a2, a3, a4, a5);
  }
}

llvm::Value *llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(llvm::CastInst *this, llvm::Value *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v9 = *(_DWORD *)(*(void *)this + 8);
  if ((v9 & 0xFE) == 0x12) {
    int v9 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  int v10 = *((_DWORD *)a2 + 2);
  if ((v10 & 0xFE) == 0x12) {
    int v10 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  unsigned int v11 = v10 ^ v9;
  int v12 = (char *)operator new(0x60uLL);
  uint64_t v13 = v12;
  *((void *)v12 + 4) = a2;
  uint64_t v14 = (llvm::Value *)(v12 + 32);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 32;
  *((void *)v12 + 5) = 0;
  uint64_t v15 = v12 + 56;
  if (v11 >= 0x100) {
    uint64_t v16 = 78;
  }
  else {
    uint64_t v16 = 77;
  }
  *((void *)v12 + 6) = v16 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
  _OWORD *v15 = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *((_DWORD *)v12 + 22) = 0;
  if (a4)
  {
    uint64_t v21 = *((void *)a4 + 5);
    uint64_t v22 = (uint64_t *)((char *)a4 + 24);
    *((void *)v12 + 9) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((v12[55] & 0x10) != 0
      && (uint64_t v38 = *(void *)(v21 + 56)) != 0
      && (uint64_t v39 = *(llvm::ValueSymbolTable **)(v38 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v39, v14);
      uint64_t v40 = *(void *)v13;
      uint64_t v41 = *v22;
      *((void *)v13 + 7) = *v22;
      *((void *)v13 + 8) = v22;
      *(void *)(v41 + 8) = v15;
      *uint64_t v22 = (uint64_t)v15;
      if (v40)
      {
        **((void **)v13 + 2) = *((void *)v13 + 1);
        uint64_t v42 = *((void *)v13 + 1);
        if (v42) {
          *(void *)(v42 + 16) = *((void *)v13 + 2);
        }
      }
    }
    else
    {
      uint64_t v23 = *v22;
      *((void *)v13 + 7) = *v22;
      *((void *)v13 + 8) = v22;
      *(void *)(v23 + 8) = v15;
      *uint64_t v22 = (uint64_t)v15;
    }
  }
  *(void *)uint64_t v13 = this;
  uint64_t v19 = *((void *)this + 1);
  uint64_t v18 = (void *)((char *)this + 8);
  uint64_t v17 = v19;
  *((void *)v13 + 1) = v19;
  if (v19) {
    *(void *)(v17 + 16) = v13 + 8;
  }
  *((void *)v13 + 2) = v18;
  void *v18 = v13;
  llvm::Value::setNameImpl(v14, a3);
  if (!v13[48])
  {
    if ((v13[55] & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v24 = ***(void ***)v14;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
      unint64_t v29 = *v28;
      if (*v28 == v14)
      {
LABEL_21:
        int v32 = v28[1];
        unint64_t v35 = *(void *)v32;
        int v33 = (char *)v32 + 16;
        unint64_t v34 = v35;
        if (v35 >= 5 && *(_DWORD *)v33 == *(_DWORD *)"llvm." && v33[4] == aLlvm_1[4])
        {
          *((_DWORD *)v13 + 16) |= 0x2000u;
          int v37 = llvm::Function::lookupIntrinsicID(v33, v34);
LABEL_28:
          *((_DWORD *)v13 + 17) = v37;
          return v14;
        }
LABEL_29:
        int v37 = 0;
        *((_DWORD *)v13 + 16) &= ~0x2000u;
        goto LABEL_28;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
        if (v29 == v14)
        {
          unint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
          goto LABEL_21;
        }
      }
    }
    unint64_t v28 = (llvm::Value **)(v25 + 16 * v26);
    goto LABEL_21;
  }
  return v14;
}

llvm::Value *llvm::CastInst::CreateIntegerCast(llvm::CastInst *this, llvm::Type ***a2, llvm::Type *a3, const char **a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  int v8 = (int)a3;
  uint64_t v11 = *(void *)this;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
    uint64_t v11 = **(void **)(v11 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
  uint64_t v13 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v13 = *a2[2];
  }
  unsigned int v14 = llvm::Type::getPrimitiveSizeInBits(v13);
  if (v8) {
    int v15 = 40;
  }
  else {
    int v15 = 39;
  }
  if (PrimitiveSizeInBits > v14) {
    int v15 = 38;
  }
  if (PrimitiveSizeInBits == v14) {
    int v16 = 49;
  }
  else {
    int v16 = v15;
  }

  return llvm::CastInst::Create(v16, (uint64_t)this, (uint64_t)a2, a4, (uint64_t)a5);
}

llvm::Value *llvm::CastInst::CreateIntegerCast(llvm::CastInst *this, llvm::Type ***a2, llvm::Type *a3, const char **a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  int v8 = (int)a3;
  uint64_t v11 = *(void *)this;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
    uint64_t v11 = **(void **)(v11 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
  uint64_t v13 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v13 = *a2[2];
  }
  unsigned int v14 = llvm::Type::getPrimitiveSizeInBits(v13);
  if (v8) {
    int v15 = 40;
  }
  else {
    int v15 = 39;
  }
  if (PrimitiveSizeInBits > v14) {
    int v15 = 38;
  }
  if (PrimitiveSizeInBits == v14) {
    int v16 = 49;
  }
  else {
    int v16 = v15;
  }

  return llvm::CastInst::Create(v16, (uint64_t)this, (uint64_t)a2, a4, (uint64_t)a5);
}

llvm::Value *llvm::CastInst::CreateFPCast(llvm::CastInst *this, llvm::Type ***a2, const char **a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  uint64_t v11 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v11 = *a2[2];
  }
  unsigned int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  if (PrimitiveSizeInBits > v12) {
    int v13 = 45;
  }
  else {
    int v13 = 46;
  }
  if (PrimitiveSizeInBits == v12) {
    int v14 = 49;
  }
  else {
    int v14 = v13;
  }

  return llvm::CastInst::Create(v14, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)a4);
}

BOOL llvm::CastInst::isBitCastable(llvm::CastInst **this, llvm::CastInst **a2, llvm::Type *a3)
{
  int v3 = *((unsigned __int8 *)this + 8);
  if (v3 == 7 || v3 == 14) {
    return 0;
  }
  int v5 = (llvm::Type *)a2;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 7 || v6 == 14) {
    return 0;
  }
  uint64_t v9 = (llvm::CastInst *)this;
  if (this == a2) {
    return 1;
  }
  if ((v3 & 0xFE) == 0x12
    && (v6 & 0xFE) == 18
    && (v3 != 19) != (v6 == 19)
    && *((_DWORD *)this + 8) == *((_DWORD *)a2 + 8))
  {
    uint64_t v9 = this[3];
    int v5 = a2[3];
    unsigned int v6 = *((_DWORD *)v5 + 2);
  }
  int v12 = v6;
  if (v6 == 15 && *((_DWORD *)v9 + 2) == 15 && v9) {
    return (*((_DWORD *)v9 + 2) ^ v6) < 0x100;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  int v15 = v14;
  unint64_t v17 = llvm::Type::getPrimitiveSizeInBits(v5);
  BOOL result = 0;
  if (PrimitiveSizeInBits)
  {
    if (v17)
    {
      BOOL result = 0;
      if (v12 != 10 && PrimitiveSizeInBits == v17 && v15 == v16) {
        return *((unsigned __int8 *)v9 + 8) != 10;
      }
    }
  }
  return result;
}

BOOL llvm::CastInst::isBitOrNoopPointerCastable(llvm::CastInst *this, llvm::Type *a2, llvm::Type *a3, const llvm::DataLayout *a4)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  unsigned int v5 = *((_DWORD *)a2 + 2);
  if (this && v4 == 15)
  {
    if (v5 == 13)
    {
      unsigned int v6 = *((_DWORD *)this + 2);
      if ((v4 & 0xFE) == 0x12) {
        unsigned int v6 = *(_DWORD *)(**((void **)this + 2) + 8);
      }
      unsigned int v7 = v5 >> 8;
      if (v6 < 0x100) {
        goto LABEL_15;
      }
      unsigned int v8 = v6 >> 8;
      uint64_t v9 = *((unsigned int *)a3 + 60);
      uint64_t v10 = *((void *)a3 + 29);
      if (v9)
      {
        uint64_t v10 = *((void *)a3 + 29);
        unint64_t v11 = *((unsigned int *)a3 + 60);
        do
        {
          unint64_t v12 = v11 >> 1;
          uint64_t v13 = v10 + 16 * (v11 >> 1);
          unsigned int v14 = *(_DWORD *)(v13 + 8);
          uint64_t v15 = v13 + 16;
          v11 += ~(v11 >> 1);
          if (v14 < v8) {
            uint64_t v10 = v15;
          }
          else {
            unint64_t v11 = v12;
          }
        }
        while (v11);
      }
      if (v10 == *((void *)a3 + 29) + 16 * v9 || *(_DWORD *)(v10 + 8) != v8) {
LABEL_15:
      }
        uint64_t v10 = *((void *)a3 + 29);
      if (v7 == *(_DWORD *)(v10 + 4))
      {
        __int32 v16 = v4 >> 8;
LABEL_38:
        unint64_t v28 = (__int32 *)*((void *)a3 + 48);
        size_t v29 = *((unsigned int *)a3 + 98);
        int v30 = wmemchr(v28, v16, v29);
        if (v30) {
          int v31 = v30;
        }
        else {
          int v31 = &v28[v29];
        }
        return v29 == v31 - v28;
      }
      return 0;
    }
  }
  else if (this)
  {
    if (v4 == 13 && v5 == 15)
    {
      unsigned int v18 = *((_DWORD *)a2 + 2);
      if ((v5 & 0xFE) == 0x12) {
        unsigned int v18 = *(_DWORD *)(**((void **)a2 + 2) + 8);
      }
      unsigned int v19 = v4 >> 8;
      if (v18 < 0x100) {
        goto LABEL_35;
      }
      unsigned int v20 = v18 >> 8;
      uint64_t v21 = *((unsigned int *)a3 + 60);
      uint64_t v22 = *((void *)a3 + 29);
      if (v21)
      {
        uint64_t v22 = *((void *)a3 + 29);
        unint64_t v23 = *((unsigned int *)a3 + 60);
        do
        {
          unint64_t v24 = v23 >> 1;
          uint64_t v25 = v22 + 16 * (v23 >> 1);
          unsigned int v26 = *(_DWORD *)(v25 + 8);
          uint64_t v27 = v25 + 16;
          v23 += ~(v23 >> 1);
          if (v26 < v20) {
            uint64_t v22 = v27;
          }
          else {
            unint64_t v23 = v24;
          }
        }
        while (v23);
      }
      if (v22 == *((void *)a3 + 29) + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_35:
      }
        uint64_t v22 = *((void *)a3 + 29);
      if (v19 == *(_DWORD *)(v22 + 4))
      {
        __int32 v16 = v5 >> 8;
        goto LABEL_38;
      }
      return 0;
    }
  }

  return llvm::CastInst::isBitCastable((llvm::CastInst **)this, (llvm::CastInst **)a2, a3);
}

uint64_t llvm::CastInst::getCastOpcode(llvm::CastInst *this, const llvm::Value *a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)this == a3) {
    return 49;
  }
  int v5 = (int)a4;
  unsigned int v6 = (llvm::Type *)a3;
  int v7 = (int)a2;
  if (v4) {
    BOOL v8 = (*(_DWORD *)(v4 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8
    && a3
    && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
    && (*(_DWORD *)(v4 + 8) != 19) != (*(_DWORD *)(a3 + 8) == 19)
    && *(_DWORD *)(v4 + 32) == *(_DWORD *)(a3 + 32))
  {
    uint64_t v4 = *(void *)(v4 + 24);
    unsigned int v6 = *(llvm::Type **)(a3 + 24);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if (v9 == 1) {
  unsigned int v12 = llvm::Type::getPrimitiveSizeInBits(v6);
  }
  if (v11 == 1)
  {
    unsigned int v25 = v12;
    unsigned int v12 = v25;
  }
  unsigned int v13 = *((_DWORD *)v6 + 2);
  if (v13 != 13)
  {
    if (v13 <= 6u)
    {
      unsigned int v21 = *(unsigned __int8 *)(v4 + 8);
      if (v21 != 13)
      {
        uint64_t result = 49;
        if (v21 > 6) {
          return result;
        }
        unsigned int v15 = 45;
        BOOL v17 = v12 >= PrimitiveSizeInBits;
        if (v12 <= PrimitiveSizeInBits) {
          unsigned int v18 = 49;
        }
        else {
          unsigned int v18 = 46;
        }
        goto LABEL_18;
      }
      BOOL v22 = v7 == 0;
      unsigned int v23 = 43;
      goto LABEL_34;
    }
    if ((v13 & 0xFE) != 0x12 && v13 == 15)
    {
      int v24 = *(_DWORD *)(v4 + 8);
      if (v24 != 15) {
        return 48;
      }
      if ((v24 & 0xFE) == 0x12) {
        int v24 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
      }
      if ((v24 ^ v13) < 0x100) {
        return 49;
      }
      else {
        return 50;
      }
    }
    return 49;
  }
  unsigned int v14 = *(unsigned __int8 *)(v4 + 8);
  if (v14 == 13)
  {
    unsigned int v15 = 38;
    if (v7) {
      int v16 = 40;
    }
    else {
      int v16 = 39;
    }
    BOOL v17 = v12 >= PrimitiveSizeInBits;
    if (v12 <= PrimitiveSizeInBits) {
      unsigned int v18 = 49;
    }
    else {
      unsigned int v18 = v16;
    }
LABEL_18:
    if (v17) {
      return v18;
    }
    else {
      return v15;
    }
  }
  if (v14 <= 6)
  {
    BOOL v22 = v5 == 0;
    unsigned int v23 = 41;
LABEL_34:
    if (v22) {
      return v23;
    }
    else {
      return v23 + 1;
    }
  }
  if ((v14 & 0xFE) == 0x12) {
    return 49;
  }
  else {
    return 47;
  }
}

BOOL llvm::CastInst::castIsValid(int a1, llvm::Type *this, uint64_t a3)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  unsigned int v4 = v3;
  if (v3 == 7 || v3 == 14) {
    return 0;
  }
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 == 7 || v7 == 14) {
    return 0;
  }
  int v9 = v3 & 0xFE;
  if (v9 == 16) {
    return 0;
  }
  int v10 = v7 & 0xFE;
  if (v10 == 16) {
    return 0;
  }
  unsigned int v14 = this;
  if (v9 == 18) {
    unsigned int v14 = (llvm::Type *)**((void **)this + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v14);
  int v16 = (llvm::Type *)a3;
  if (v10 == 18) {
    int v16 = **(llvm::Type ***)(a3 + 16);
  }
  unsigned int v17 = llvm::Type::getPrimitiveSizeInBits(v16);
  if (v9 == 18) {
    unint64_t v18 = *((unsigned int *)this + 8) | ((unint64_t)(v3 == 19) << 32);
  }
  else {
    unint64_t v18 = 0;
  }
  if (v10 == 18) {
    unint64_t v19 = *(unsigned int *)(a3 + 32) | ((unint64_t)(v7 == 19) << 32);
  }
  else {
    unint64_t v19 = 0;
  }
  switch(a1)
  {
    case '&':
      if (v9 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**((void **)this + 2) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 13) {
        return 0;
      }
      return v18 == v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits > v17;
    case '\'':
    case '(':
      if (v9 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**((void **)this + 2) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 13) {
        return 0;
      }
      return v18 == v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits < v17;
    case ')':
    case '*':
      if (v9 == 18) {
        unsigned int v4 = *(unsigned __int8 *)(**((void **)this + 2) + 8);
      }
      if (v4 > 6) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 13) {
        return 0;
      }
      goto LABEL_119;
    case '+':
    case ',':
      if (v9 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**((void **)this + 2) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 > 6u) {
        return 0;
      }
      goto LABEL_119;
    case '-':
      if (v9 == 18) {
        unsigned int v4 = *(unsigned __int8 *)(**((void **)this + 2) + 8);
      }
      if (v4 > 6) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 > 6u) {
        return 0;
      }
      return v18 == v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits > v17;
    case '.':
      if (v9 == 18) {
        unsigned int v4 = *(unsigned __int8 *)(**((void **)this + 2) + 8);
      }
      if (v4 > 6) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 > 6u) {
        return 0;
      }
      return v18 == v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits < v17;
    case '/':
      BOOL result = 0;
      if (v18 != v19) {
        return result;
      }
      if (v9 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**((void **)this + 2) + 8);
      }
      if (v3 != 15) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      BOOL v24 = v7 == 13;
      goto LABEL_122;
    case '0':
      BOOL result = 0;
      if (v18 != v19) {
        return result;
      }
      if (v9 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**((void **)this + 2) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v10 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      BOOL v24 = v7 == 15;
      goto LABEL_122;
    case '1':
      unsigned int v25 = this;
      if (v9 == 18)
      {
        unsigned int v25 = (llvm::Type *)**((void **)this + 2);
        unsigned int v4 = *((unsigned __int8 *)v25 + 8);
      }
      if (v4 != 15) {
        unsigned int v25 = 0;
      }
      uint64_t v26 = a3;
      if (v10 == 18)
      {
        uint64_t v26 = **(void **)(a3 + 16);
        LOBYTE(v7) = *(unsigned char *)(v26 + 8);
      }
      if (v7 != 15) {
        uint64_t v26 = 0;
      }
      if ((v25 == 0) == (v26 != 0)) {
        return 0;
      }
      if (v25)
      {
        if ((*(_DWORD *)(v26 + 8) ^ *((_DWORD *)v25 + 2)) > 0xFF) {
          return 0;
        }
        if (v9 == 18 && v10 == 18)
        {
LABEL_119:
          BOOL v24 = v18 == v19 && HIDWORD(v18) == HIDWORD(v19);
        }
        else if (v9 == 18)
        {
          BOOL v24 = v18 == 1 && HIDWORD(v18) == 0;
        }
        else
        {
          if (v10 != 18) {
            return 1;
          }
          BOOL v24 = v19 == 1 && HIDWORD(v19) == 0;
        }
      }
      else
      {
        unint64_t v27 = llvm::Type::getPrimitiveSizeInBits(this);
        int v29 = v28;
        BOOL v24 = v27 == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3) && v29 == v30;
      }
LABEL_122:
      BOOL result = v24;
      break;
    case '2':
      if (v9 == 18) {
        unsigned int v3 = *(_DWORD *)(**((void **)this + 2) + 8);
      }
      if (v3 != 15) {
        return 0;
      }
      if (v10 == 18) {
        int v7 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      BOOL result = 0;
      if ((v7 ^ v3) >= 0x100 && v7 == 15) {
        goto LABEL_119;
      }
      return result;
    default:
      return 0;
  }
  return result;
}

llvm::ZExtInst *llvm::ZExtInst::ZExtInst(llvm::ZExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 39, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      unsigned int v14 = *(llvm::ZExtInst **)v13;
      if (*(llvm::ZExtInst **)v13 == this)
      {
LABEL_12:
        unsigned int v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        unint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::ZExtInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        unsigned int v14 = *(llvm::ZExtInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;

  int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 39, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, a4);
  return this;
}

llvm::FPTruncInst *llvm::FPTruncInst::FPTruncInst(llvm::FPTruncInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 73;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    int v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        unint64_t v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *int v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    uint64_t v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      unsigned int v23 = *(llvm::FPTruncInst **)v22;
      if (*(llvm::FPTruncInst **)v22 == this)
      {
LABEL_22:
        int v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        int v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::FPTruncInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        unsigned int v23 = *(llvm::FPTruncInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

{
  llvm::Value *v7;

  int v7 = sub_1CC19DDB4(this, (uint64_t)a3, 45, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, a4);
  return this;
}

llvm::SIToFPInst *llvm::SIToFPInst::SIToFPInst(llvm::SIToFPInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 72;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  uint64_t v10 = (void *)((char *)this - 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v15 = *((void *)a5 + 5);
    int v16 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v26 = *(void *)(v15 + 56);
      if (v26)
      {
        unint64_t v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27) {
          llvm::ValueSymbolTable::reinsertValue(v27, this);
        }
      }
    }
    uint64_t v17 = *v16;
    *((void *)this + 3) = *v16;
    *((void *)this + 4) = v16;
    *(void *)(v17 + 8) = v9;
    *int v16 = (uint64_t)v9;
  }
  if (*v10)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v34 = *((void *)this - 3);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    uint64_t v12 = (void *)((char *)a2 + 8);
    uint64_t v11 = v13;
    *((void *)this - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v12;
    void *v12 = v10;
  }
  llvm::Value::setNameImpl(this, a4);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_29;
    }
    uint64_t v18 = ***(void ***)this;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v22 = v19 + 16 * v21;
      unsigned int v23 = *(llvm::SIToFPInst **)v22;
      if (*(llvm::SIToFPInst **)v22 == this)
      {
LABEL_22:
        int v28 = *(void **)(v22 + 8);
        unint64_t v31 = *v28;
        int v29 = v28 + 2;
        unint64_t v30 = v31;
        if (v31 >= 5 && *(_DWORD *)v29 == *(_DWORD *)"llvm." && v29[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v33 = llvm::Function::lookupIntrinsicID(v29, v30);
LABEL_30:
          *((_DWORD *)this + 9) = v33;
          return this;
        }
LABEL_29:
        int v33 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_30;
      }
      int v24 = 1;
      while (v23 != (llvm::SIToFPInst *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        unsigned int v23 = *(llvm::SIToFPInst **)(v19 + 16 * v21);
        if (v23 == this)
        {
          uint64_t v22 = v19 + 16 * v21;
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = v19 + 16 * v20;
    goto LABEL_22;
  }
  return this;
}

{
  llvm::Value *v7;

  int v7 = sub_1CC19DDB4(this, (uint64_t)a3, 44, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, a4);
  return this;
}

llvm::AddrSpaceCastInst *llvm::AddrSpaceCastInst::AddrSpaceCastInst(llvm::AddrSpaceCastInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::BasicBlock *a5)
{
  int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 50, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setNameImpl(v7, a4);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v9 = ***(void ***)this;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v13 = v10 + 16 * v12;
      unsigned int v14 = *(llvm::AddrSpaceCastInst **)v13;
      if (*(llvm::AddrSpaceCastInst **)v13 == this)
      {
LABEL_12:
        uint64_t v17 = *(void **)(v13 + 8);
        unint64_t v20 = *v17;
        uint64_t v18 = v17 + 2;
        unint64_t v19 = v20;
        if (v20 >= 5 && *(_DWORD *)v18 == *(_DWORD *)"llvm." && v18[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v22 = llvm::Function::lookupIntrinsicID(v18, v19);
LABEL_20:
          *((_DWORD *)this + 9) = v22;
          return this;
        }
LABEL_19:
        int v22 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != (llvm::AddrSpaceCastInst *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        unsigned int v14 = *(llvm::AddrSpaceCastInst **)(v10 + 16 * v12);
        if (v14 == this)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v7;

  int v7 = sub_1CC5CEE04(this, (uint64_t)a3, 50, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, a4);
  return this;
}

llvm::Value *llvm::CmpInst::CmpInst(llvm::Value *this, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const char **a7, uint64_t a8, uint64_t a9)
{
  unsigned int v14 = (void *)((char *)this - 64);
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v15 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a8)
  {
    uint64_t v24 = *(void *)(a8 + 40);
    int v25 = (uint64_t *)(a8 + 24);
    *((void *)this + 5) = v24;
    *(_WORD *)(v24 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v41 = *(void *)(v24 + 56);
      if (v41)
      {
        uint64_t v42 = *(llvm::ValueSymbolTable **)(v41 + 104);
        if (v42) {
          llvm::ValueSymbolTable::reinsertValue(v42, this);
        }
      }
    }
    uint64_t v26 = *v25;
    *((void *)this + 3) = *v25;
    *((void *)this + 4) = v25;
    *(void *)(v26 + 8) = v15;
    *int v25 = (uint64_t)v15;
  }
  if (*v14)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v43 = *((void *)this - 7);
    if (v43) {
      *(void *)(v43 + 16) = *((void *)this - 6);
    }
  }
  *unsigned int v14 = a5;
  if (a5)
  {
    uint64_t v18 = *(void *)(a5 + 8);
    uint64_t v17 = (void *)(a5 + 8);
    uint64_t v16 = v18;
    *((void *)this - 7) = v18;
    if (v18) {
      *(void *)(v16 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v17;
    void *v17 = v14;
  }
  unint64_t v19 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v44 = *((void *)this - 3);
    if (v44) {
      *(void *)(v44 + 16) = *((void *)this - 2);
    }
  }
  void *v19 = a6;
  if (a6)
  {
    uint64_t v22 = *(void *)(a6 + 8);
    uint64_t v21 = (void *)(a6 + 8);
    uint64_t v20 = v22;
    *((void *)this - 3) = v22;
    if (v22) {
      *(void *)(v20 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v21;
    *uint64_t v21 = v19;
  }
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFC0 | a4;
  llvm::Value::setNameImpl(this, a7);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_33;
    }
    uint64_t v27 = ***(void ***)this;
    uint64_t v28 = *(void *)(v27 + 152);
    uint64_t v29 = *(unsigned int *)(v27 + 168);
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v31 = v28 + 16 * v30;
      int v32 = *(llvm::Value **)v31;
      if (*(llvm::Value **)v31 == this)
      {
LABEL_25:
        unint64_t v35 = *(void **)(v31 + 8);
        unint64_t v38 = *v35;
        int v36 = v35 + 2;
        unint64_t v37 = v38;
        if (v38 >= 5 && *(_DWORD *)v36 == *(_DWORD *)"llvm." && v36[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v40 = llvm::Function::lookupIntrinsicID(v36, v37);
LABEL_32:
          *((_DWORD *)this + 9) = v40;
          goto LABEL_13;
        }
LABEL_33:
        int v40 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_32;
      }
      int v33 = 1;
      while (v32 != (llvm::Value *)-4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        int v32 = *(llvm::Value **)(v28 + 16 * v30);
        if (v32 == this)
        {
          uint64_t v31 = v28 + 16 * v30;
          goto LABEL_25;
        }
      }
    }
    uint64_t v31 = v28 + 16 * v29;
    goto LABEL_25;
  }
LABEL_13:
  if (a9) {
    llvm::Instruction::copyIRFlags((uint64_t)this, a9, 1);
  }
  return this;
}

{
  void *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  int v33;
  int v34;
  uint64_t v35;
  llvm::ValueSymbolTable *v36;
  void *v37;
  unsigned char *v38;
  unint64_t v39;
  unint64_t v40;
  int v42;
  uint64_t v43;
  uint64_t v44;

  unsigned int v14 = (void *)((char *)this - 64);
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v15 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a8)
  {
    uint64_t v24 = *(void *)(a8 + 40);
    int v25 = (uint64_t *)(a8 + 24);
    *((void *)this + 5) = v24;
    *(_WORD *)(v24 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      unint64_t v35 = *(void *)(v24 + 56);
      if (v35)
      {
        int v36 = *(llvm::ValueSymbolTable **)(v35 + 104);
        if (v36) {
          llvm::ValueSymbolTable::reinsertValue(v36, this);
        }
      }
    }
    uint64_t v26 = *v25;
    *((void *)this + 3) = *v25;
    *((void *)this + 4) = v25;
    *(void *)(v26 + 8) = v15;
    *int v25 = (uint64_t)v15;
  }
  if (*v14)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v43 = *((void *)this - 7);
    if (v43) {
      *(void *)(v43 + 16) = *((void *)this - 6);
    }
  }
  *unsigned int v14 = a5;
  if (a5)
  {
    uint64_t v18 = *(void *)(a5 + 8);
    uint64_t v17 = (void *)(a5 + 8);
    uint64_t v16 = v18;
    *((void *)this - 7) = v18;
    if (v18) {
      *(void *)(v16 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v17;
    void *v17 = v14;
  }
  unint64_t v19 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v44 = *((void *)this - 3);
    if (v44) {
      *(void *)(v44 + 16) = *((void *)this - 2);
    }
  }
  void *v19 = a6;
  if (a6)
  {
    uint64_t v22 = *(void *)(a6 + 8);
    uint64_t v21 = (void *)(a6 + 8);
    uint64_t v20 = v22;
    *((void *)this - 3) = v22;
    if (v22) {
      *(void *)(v20 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v21;
    *uint64_t v21 = v19;
  }
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFC0 | a4;
  llvm::Value::setNameImpl(this, a7);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_35;
    }
    uint64_t v27 = ***(void ***)this;
    uint64_t v28 = *(void *)(v27 + 152);
    uint64_t v29 = *(unsigned int *)(v27 + 168);
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v31 = v28 + 16 * v30;
      int v32 = *(llvm::Value **)v31;
      if (*(llvm::Value **)v31 == this)
      {
LABEL_28:
        unint64_t v37 = *(void **)(v31 + 8);
        int v40 = *v37;
        unint64_t v38 = v37 + 2;
        uint64_t v39 = v40;
        if (v40 >= 5 && *(_DWORD *)v38 == *(_DWORD *)"llvm." && v38[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          uint64_t v42 = llvm::Function::lookupIntrinsicID(v38, v39);
          goto LABEL_36;
        }
LABEL_35:
        uint64_t v42 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
LABEL_36:
        *((_DWORD *)this + 9) = v42;
        if (!a9) {
          return this;
        }
LABEL_37:
        llvm::Instruction::copyIRFlags((uint64_t)this, a9, 1);
        return this;
      }
      int v33 = 1;
      while (v32 != (llvm::Value *)-4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        int v32 = *(llvm::Value **)(v28 + 16 * v30);
        if (v32 == this)
        {
          uint64_t v31 = v28 + 16 * v30;
          goto LABEL_28;
        }
      }
    }
    uint64_t v31 = v28 + 16 * v29;
    goto LABEL_28;
  }
  if (a9) {
    goto LABEL_37;
  }
  return this;
}

llvm::Value *llvm::CmpInst::CmpInst(llvm::Value *this, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const char **a7, uint64_t a8)
{
  unsigned int v14 = (void *)((char *)this - 64);
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v15 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v26 = *(void *)(a8 + 56);
    if (v26)
    {
      uint64_t v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
      if (v27) {
        llvm::ValueSymbolTable::reinsertValue(v27, this);
      }
    }
  }
  uint64_t v17 = *(void *)(a8 + 40);
  uint64_t v16 = (void *)(a8 + 40);
  *((void *)this + 3) = v17;
  *((void *)this + 4) = v16;
  *(void *)(v17 + 8) = v15;
  *uint64_t v16 = v15;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v42 = *((void *)this - 7);
    if (v42) {
      *(void *)(v42 + 16) = *((void *)this - 6);
    }
  }
  *unsigned int v14 = a5;
  if (a5)
  {
    uint64_t v20 = *(void *)(a5 + 8);
    unint64_t v19 = (void *)(a5 + 8);
    uint64_t v18 = v20;
    *((void *)this - 7) = v20;
    if (v20) {
      *(void *)(v18 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v19;
    void *v19 = v14;
  }
  uint64_t v21 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v43 = *((void *)this - 3);
    if (v43) {
      *(void *)(v43 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v21 = a6;
  if (a6)
  {
    uint64_t v24 = *(void *)(a6 + 8);
    unsigned int v23 = (void *)(a6 + 8);
    uint64_t v22 = v24;
    *((void *)this - 3) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v23;
    *unsigned int v23 = v21;
  }
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFC0 | a4;
  llvm::Value::setNameImpl(this, a7);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_32;
    }
    uint64_t v28 = ***(void ***)this;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v32 = v29 + 16 * v31;
      int v33 = *(llvm::Value **)v32;
      if (*(llvm::Value **)v32 == this)
      {
LABEL_24:
        int v36 = *(void **)(v32 + 8);
        unint64_t v39 = *v36;
        unint64_t v37 = v36 + 2;
        unint64_t v38 = v39;
        if (v39 >= 5 && *(_DWORD *)v37 == *(_DWORD *)"llvm." && v37[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v41 = llvm::Function::lookupIntrinsicID(v37, v38);
LABEL_31:
          *((_DWORD *)this + 9) = v41;
          return this;
        }
LABEL_32:
        int v41 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_31;
      }
      int v34 = 1;
      while (v33 != (llvm::Value *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        int v33 = *(llvm::Value **)(v29 + 16 * v31);
        if (v33 == this)
        {
          uint64_t v32 = v29 + 16 * v31;
          goto LABEL_24;
        }
      }
    }
    uint64_t v32 = v29 + 16 * v30;
    goto LABEL_24;
  }
  return this;
}

char *llvm::CmpInst::Create(int a1, __int16 a2, void *a3, uint64_t a4, const char **a5, uint64_t a6)
{
  uint64_t v12 = (char *)operator new(0x80uLL);
  uint64_t v13 = (llvm::Value *)(v12 + 64);
  *((_DWORD *)v12 + 21) = *((_DWORD *)v12 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 64;
  *((void *)v12 + 4) = 0;
  unsigned int v14 = v12 + 32;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = v12 + 64;
  int v15 = (unsigned int *)*a3;
  int v16 = *(_DWORD *)(*a3 + 8);
  if (*a3) {
    BOOL v17 = (*(_DWORD *)(*a3 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  unint64_t v19 = (uint64_t **)(**(void **)v15 + 1888);
  if (a1 != 53)
  {
    if (a6)
    {
      if ((v18 & 1) == 0)
      {
        int v54 = (llvm::Type *)v15[8];
        if (v16 == 19) {
          llvm::ScalableVectorType::get(v19, v54);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v54);
        }
      }
      long long v20 = 0uLL;
      *(_OWORD *)(v12 + 88) = 0u;
      uint64_t v21 = v12 + 88;
      *((void *)v12 + 8) = v19;
      *((void *)v12 + 9) = 0;
      int v22 = 82;
      goto LABEL_11;
    }
    if ((v18 & 1) == 0)
    {
      char v55 = (llvm::Type *)v15[8];
      if (v16 == 19) {
        llvm::ScalableVectorType::get(v19, v55);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v55);
      }
    }
    *((void *)v12 + 8) = v19;
    *((void *)v12 + 9) = 0;
    int v34 = 82;
LABEL_25:
    unsigned int v35 = *((_DWORD *)v12 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v12 + 20) = v34;
    *((_DWORD *)v12 + 21) = v35;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *((_DWORD *)v12 + 30) = 0;
    goto LABEL_13;
  }
  if (!a6)
  {
    if ((v18 & 1) == 0)
    {
      uint64_t v53 = (llvm::Type *)v15[8];
      if (v16 == 19) {
        llvm::ScalableVectorType::get(v19, v53);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v53);
      }
    }
    *((void *)v12 + 8) = v19;
    *((void *)v12 + 9) = 0;
    int v34 = 81;
    goto LABEL_25;
  }
  if ((v18 & 1) == 0)
  {
    uint64_t v52 = (llvm::Type *)v15[8];
    if (v16 == 19) {
      llvm::ScalableVectorType::get(v19, v52);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v52);
    }
  }
  long long v20 = 0uLL;
  *(_OWORD *)(v12 + 88) = 0u;
  uint64_t v21 = v12 + 88;
  *((void *)v12 + 8) = v19;
  *((void *)v12 + 9) = 0;
  int v22 = 81;
LABEL_11:
  unsigned int v23 = *((_DWORD *)v21 - 1) & 0xC0000000 | 2;
  *((_DWORD *)v21 - 2) = v22;
  *((_DWORD *)v21 - 1) = v23;
  *((_OWORD *)v21 + 1) = v20;
  *((_DWORD *)v21 + 8) = 0;
  uint64_t v24 = *(void *)(a6 + 40);
  int v25 = (uint64_t *)(a6 + 24);
  *((void *)v21 + 2) = v24;
  *(_WORD *)(v24 + 18) &= ~0x8000u;
  if ((*(v21 - 1) & 0x10) != 0)
  {
    uint64_t v36 = *(void *)(v24 + 56);
    if (v36)
    {
      unint64_t v37 = *(llvm::ValueSymbolTable **)(v36 + 104);
      if (v37) {
        llvm::ValueSymbolTable::reinsertValue(v37, v13);
      }
    }
  }
  uint64_t v26 = *v25;
  *((void *)v12 + 11) = *v25;
  *((void *)v12 + 12) = v25;
  *(void *)(v26 + 8) = v21;
  *int v25 = (uint64_t)v21;
LABEL_13:
  if (*(void *)v12)
  {
    **((void **)v12 + 2) = *((void *)v12 + 1);
    uint64_t v56 = *((void *)v12 + 1);
    if (v56) {
      *(void *)(v56 + 16) = *((void *)v12 + 2);
    }
  }
  *(void *)uint64_t v12 = a3;
  uint64_t v29 = a3[1];
  uint64_t v28 = a3 + 1;
  uint64_t v27 = v29;
  *((void *)v12 + 1) = v29;
  if (v29) {
    *(void *)(v27 + 16) = v12 + 8;
  }
  *((void *)v12 + 2) = v28;
  *uint64_t v28 = v12;
  if (*((void *)v12 + 4))
  {
    **((void **)v12 + 6) = *((void *)v12 + 5);
    uint64_t v57 = *((void *)v12 + 5);
    if (v57) {
      *(void *)(v57 + 16) = *((void *)v12 + 6);
    }
  }
  *unsigned int v14 = a4;
  if (a4)
  {
    uint64_t v32 = *(void *)(a4 + 8);
    uint64_t v31 = (void *)(a4 + 8);
    uint64_t v30 = v32;
    *((void *)v12 + 5) = v32;
    if (v32) {
      *(void *)(v30 + 16) = v12 + 40;
    }
    *((void *)v12 + 6) = v31;
    *uint64_t v31 = v14;
  }
  *((_WORD *)v12 + 41) = *((_WORD *)v12 + 41) & 0xFFC0 | a2;
  llvm::Value::setNameImpl(v13, a5);
  if (!v12[80])
  {
    if ((v12[87] & 0x10) == 0) {
      goto LABEL_51;
    }
    uint64_t v38 = ***(void ***)v13;
    uint64_t v39 = *(void *)(v38 + 152);
    uint64_t v40 = *(unsigned int *)(v38 + 168);
    if (v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      uint64_t v42 = (llvm::Value **)(v39 + 16 * v41);
      uint64_t v43 = *v42;
      if (*v42 == v13)
      {
LABEL_41:
        uint64_t v46 = v42[1];
        unint64_t v49 = *(void *)v46;
        uint64_t v47 = (char *)v46 + 16;
        unint64_t v48 = v49;
        if (v49 >= 5 && *(_DWORD *)v47 == *(_DWORD *)"llvm." && v47[4] == aLlvm_1[4])
        {
          *((_DWORD *)v12 + 24) |= 0x2000u;
          int v51 = llvm::Function::lookupIntrinsicID(v47, v48);
LABEL_48:
          *((_DWORD *)v12 + 25) = v51;
          return v12 + 64;
        }
LABEL_51:
        int v51 = 0;
        *((_DWORD *)v12 + 24) &= ~0x2000u;
        goto LABEL_48;
      }
      int v44 = 1;
      while (v43 != (llvm::Value *)-4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v40 - 1);
        uint64_t v43 = *(llvm::Value **)(v39 + 16 * v41);
        if (v43 == v13)
        {
          uint64_t v42 = (llvm::Value **)(v39 + 16 * v41);
          goto LABEL_41;
        }
      }
    }
    uint64_t v42 = (llvm::Value **)(v39 + 16 * v40);
    goto LABEL_41;
  }
  return v12 + 64;
}

uint64_t llvm::CmpInst::swapOperands(uint64_t this)
{
  __int16 v1 = *(_WORD *)(this + 18);
  __int16 v2 = v1 & 0x3F;
  if (this && *(unsigned char *)(this + 16) == 81)
  {
    switch(v1 & 0x3F)
    {
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_15;
      case 4:
        goto LABEL_8;
      case 5:
        goto LABEL_18;
      case 0xA:
        goto LABEL_14;
      case 0xB:
        goto LABEL_19;
      case 0xC:
        goto LABEL_12;
      case 0xD:
        goto LABEL_20;
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        goto LABEL_27;
      case 0x22:
        goto LABEL_6;
      case 0x23:
        goto LABEL_13;
      case 0x24:
        goto LABEL_5;
      case 0x25:
        goto LABEL_10;
      case 0x26:
        goto LABEL_11;
      case 0x27:
        goto LABEL_16;
      case 0x28:
        goto LABEL_7;
      case 0x29:
        goto LABEL_17;
      default:
        goto LABEL_21;
    }
  }
  switch(v1 & 0x3F)
  {
    case 2:
LABEL_9:
      __int16 v2 = 4;
      break;
    case 3:
LABEL_15:
      __int16 v2 = 5;
      break;
    case 4:
LABEL_8:
      __int16 v2 = 2;
      break;
    case 5:
LABEL_18:
      __int16 v2 = 3;
      break;
    case 0xA:
LABEL_14:
      __int16 v2 = 12;
      break;
    case 0xB:
LABEL_19:
      __int16 v2 = 13;
      break;
    case 0xC:
LABEL_12:
      __int16 v2 = 10;
      break;
    case 0xD:
LABEL_20:
      __int16 v2 = 11;
      break;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
LABEL_27:
      __break(1u);
      JUMPOUT(0x1CC5DF7CCLL);
    case 0x22:
LABEL_6:
      __int16 v2 = 36;
      break;
    case 0x23:
LABEL_13:
      __int16 v2 = 37;
      break;
    case 0x24:
LABEL_5:
      __int16 v2 = 34;
      break;
    case 0x25:
LABEL_10:
      __int16 v2 = 35;
      break;
    case 0x26:
LABEL_11:
      __int16 v2 = 40;
      break;
    case 0x27:
LABEL_16:
      __int16 v2 = 41;
      break;
    case 0x28:
LABEL_7:
      __int16 v2 = 38;
      break;
    case 0x29:
LABEL_17:
      __int16 v2 = 39;
      break;
    default:
      break;
  }
LABEL_21:
  uint64_t v3 = *(void *)(this - 64);
  *(_WORD *)(this + 18) = v2 | v1 & 0xFFC0;
  uint64_t v4 = *(void *)(this - 32);
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(this - 24);
    *(void *)(this - 64) = v4;
    *(void *)(this - 32) = v3;
    long long v6 = *(_OWORD *)(this - 56);
    int v7 = *(void **)(this - 16);
    *(void *)(this - 56) = v5;
    *(void *)(this - 48) = v7;
    *(_OWORD *)(this - 24) = v6;
    void *v7 = this - 64;
    uint64_t v8 = *(void *)(this - 56);
    if (v8) {
      *(void *)(v8 + 16) = this - 56;
    }
    **(void **)(this - 16) = this - 32;
    uint64_t v9 = *(void *)(this - 24);
    if (v9) {
      *(void *)(v9 + 16) = this - 24;
    }
  }
  return this;
}

uint64_t llvm::CmpInst::isEquality(int a1)
{
  unsigned int v1 = (0x4242u >> a1) & 1;
  if (a1 == 15) {
    unsigned int v1 = 0;
  }
  if ((a1 - 32) <= 9) {
    return (a1 & 0xFFFFFFFE) == 32;
  }
  else {
    return v1;
  }
}

uint64_t llvm::CmpInst::getInversePredicate(int a1)
{
  return dword_1CFB1B1B0[a1];
}

const char *llvm::CmpInst::getPredicateName(unsigned int a1)
{
  if (a1 > 0x29) {
    return "unknown";
  }
  else {
    return (&off_1E68497C8)[a1];
  }
}

uint64_t llvm::ICmpInst::getSignedPredicate(int a1)
{
  return dword_1CFB1B018[a1 - 32];
}

uint64_t llvm::ICmpInst::getUnsignedPredicate(int a1)
{
  return dword_1CFB1B040[a1 - 32];
}

uint64_t llvm::CmpInst::getSwappedPredicate(int a1)
{
  return dword_1CFB1B068[a1];
}

uint64_t llvm::CmpInst::isNonStrictPredicate(int a1)
{
  HIDWORD(v1) = a1 - 3;
  LODWORD(v1) = a1 - 3;
  return ((v1 >> 1) < 0x14) & (0xF0033u >> (v1 >> 1));
}

uint64_t llvm::CmpInst::isStrictPredicate(int a1)
{
  HIDWORD(v1) = a1;
  LODWORD(v1) = a1 - 2;
  return ((v1 >> 1) < 0x14) & (0xF0033u >> (v1 >> 1));
}

uint64_t llvm::CmpInst::getStrictPredicate(uint64_t result)
{
  HIDWORD(v2) = result - 3;
  LODWORD(v2) = result - 3;
  unsigned int v1 = v2 >> 1;
  if (v1 <= 0x13 && ((0xF0033u >> v1) & 1) != 0) {
    return dword_1CFB1B110[v1];
  }
  return result;
}

uint64_t llvm::CmpInst::getNonStrictPredicate(uint64_t result)
{
  HIDWORD(v2) = result;
  LODWORD(v2) = result - 2;
  unsigned int v1 = v2 >> 1;
  if (v1 <= 0x13 && ((0xF0033u >> v1) & 1) != 0) {
    return dword_1CFB1B160[v1];
  }
  return result;
}

uint64_t llvm::CmpInst::getFlippedStrictnessPredicate(uint64_t a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 2;
  unsigned int v1 = v2 >> 1;
  if (v1 < 0x14 && ((0xF0033u >> v1) & 1) != 0) {
    return dword_1CFB1B160[v1];
  }
  else {
    return llvm::CmpInst::getStrictPredicate(a1);
  }
}

uint64_t llvm::CmpInst::getSignedPredicate(int a1)
{
  return (a1 + 4);
}

BOOL llvm::CmpInst::isUnsigned(int a1)
{
  return (a1 - 34) < 4;
}

BOOL llvm::CmpInst::isSigned(int a1)
{
  return (a1 - 38) < 4;
}

uint64_t llvm::ICmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case '!':
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 > 0x40) {
        BOOL v11 = memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v11 = *(void *)a1 == *(void *)a2;
      }
      char v12 = v11;
      LOBYTE(v5) = v12 ^ 1;
      return v5 & 1;
    case '""':
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14 <= 0x40)
      {
        BOOL v15 = *(void *)a1 > *(void *)a2;
        goto LABEL_23;
      }
      unint64_t v43 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v43) {
          goto LABEL_92;
        }
        unint64_t v44 = *(void *)(*(void *)a1 - 8 + v43);
        unint64_t v45 = *(void *)(*(void *)a2 - 8 + v43);
        v43 -= 8;
        BOOL v15 = v44 > v45;
      }
      while (v44 == v45);
      goto LABEL_23;
    case '#':
      uint64_t v30 = *(unsigned int *)(a1 + 8);
      if (v30 <= 0x40)
      {
        LOBYTE(v5) = *(void *)a1 >= *(void *)a2;
        return v5 & 1;
      }
      unint64_t v66 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v66)
        {
          LOBYTE(v5) = 1;
          return v5 & 1;
        }
        unint64_t v67 = *(void *)(*(void *)a1 - 8 + v66);
        unint64_t v68 = *(void *)(*(void *)a2 - 8 + v66);
        v66 -= 8;
        BOOL v15 = v67 > v68;
      }
      while (v67 == v68);
LABEL_23:
      LOBYTE(v5) = v15;
      return v5 & 1;
    case '$':
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13 <= 0x40)
      {
        LOBYTE(v5) = *(void *)a1 < *(void *)a2;
        return v5 & 1;
      }
      unint64_t v35 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
      while (v35)
      {
        unint64_t v36 = *(void *)(*(void *)a1 - 8 + v35);
        unint64_t v37 = *(void *)(*(void *)a2 - 8 + v35);
        v35 -= 8;
        BOOL v38 = v36 > v37;
        if (v36 != v37) {
          goto LABEL_63;
        }
      }
      goto LABEL_92;
    case '%':
      uint64_t v20 = *(unsigned int *)(a1 + 8);
      if (v20 <= 0x40)
      {
        int v21 = *(void *)a1 > *(void *)a2;
        if (*(void *)a1 < *(void *)a2) {
          int v21 = -1;
        }
        goto LABEL_36;
      }
      unint64_t v59 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v59) {
          goto LABEL_110;
        }
        unint64_t v60 = *(void *)(*(void *)a1 - 8 + v59);
        unint64_t v61 = *(void *)(*(void *)a2 - 8 + v59);
        v59 -= 8;
        BOOL v62 = v60 > v61;
      }
      while (v60 == v61);
      goto LABEL_103;
    case '&':
      uint64_t v23 = *(unsigned int *)(a1 + 8);
      if (v23 > 0x40)
      {
        uint64_t v39 = *(void *)(*(void *)a1 + 8 * ((v23 - 1) >> 6)) & (1 << (v23 - 1));
        unsigned int v40 = *(_DWORD *)(a2 + 8);
        unsigned int v41 = v40 - 1;
        if (v40 >= 0x41) {
          uint64_t v42 = (void *)(*(void *)a2 + 8 * (v41 >> 6));
        }
        else {
          uint64_t v42 = (void *)a2;
        }
        if ((v39 != 0) == ((*v42 >> v41) & 1))
        {
          unint64_t v52 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v52)
            {
              LODWORD(v5) = 0;
              goto LABEL_44;
            }
            unint64_t v53 = *(void *)(*(void *)a1 - 8 + v52);
            unint64_t v54 = *(void *)(*(void *)a2 - 8 + v52);
            v52 -= 8;
          }
          while (v53 == v54);
          if (v53 > v54) {
            LODWORD(v5) = 1;
          }
          else {
            LODWORD(v5) = -1;
          }
        }
        else if (v39)
        {
          LODWORD(v5) = -1;
        }
        else
        {
          LODWORD(v5) = 1;
        }
      }
      else
      {
        uint64_t v24 = -v23;
        uint64_t v25 = (uint64_t)(*(void *)a1 << v24) >> v24;
        uint64_t v5 = (uint64_t)(*(void *)a2 << v24) >> v24;
        BOOL v15 = v25 < v5;
        LODWORD(v5) = v25 > v5;
        if (v15) {
          LODWORD(v5) = -1;
        }
      }
LABEL_44:
      LOBYTE(v5) = (int)v5 > 0;
      return v5 & 1;
    case '\'':
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 > 0x40)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 8 * ((v7 - 1) >> 6)) & (1 << (v7 - 1));
        unsigned int v17 = *(_DWORD *)(a2 + 8);
        unsigned int v18 = v17 - 1;
        if (v17 >= 0x41) {
          unint64_t v19 = (void *)(*(void *)a2 + 8 * (v18 >> 6));
        }
        else {
          unint64_t v19 = (void *)a2;
        }
        if ((v16 != 0) == ((*v19 >> v18) & 1))
        {
          unint64_t v27 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v27)
            {
              LODWORD(v5) = 0;
              goto LABEL_12;
            }
            unint64_t v28 = *(void *)(*(void *)a1 - 8 + v27);
            unint64_t v29 = *(void *)(*(void *)a2 - 8 + v27);
            v27 -= 8;
          }
          while (v28 == v29);
          if (v28 > v29) {
            LODWORD(v5) = 1;
          }
          else {
            LODWORD(v5) = -1;
          }
        }
        else if (v16)
        {
          LODWORD(v5) = -1;
        }
        else
        {
          LODWORD(v5) = 1;
        }
      }
      else
      {
        uint64_t v8 = -v7;
        uint64_t v9 = (uint64_t)(*(void *)a1 << v8) >> v8;
        uint64_t v5 = (uint64_t)(*(void *)a2 << v8) >> v8;
        BOOL v15 = v9 < v5;
        LODWORD(v5) = v9 > v5;
        if (v15) {
          LODWORD(v5) = -1;
        }
      }
LABEL_12:
      LOBYTE(v5) = (int)v5 >= 0;
      return v5 & 1;
    case '(':
      uint64_t v26 = *(unsigned int *)(a1 + 8);
      if (v26 <= 0x40)
      {
        BOOL v22 = (uint64_t)(*(void *)a1 << -(char)v26) >> -(char)v26 < (uint64_t)(*(void *)a2 << -(char)v26) >> -(char)v26;
        goto LABEL_37;
      }
      uint64_t v5 = *(void *)(*(void *)a1 + 8 * ((v26 - 1) >> 6)) >> (v26 - 1);
      unsigned int v46 = *(_DWORD *)(a2 + 8);
      unsigned int v47 = v46 - 1;
      if (v46 >= 0x41) {
        unint64_t v48 = (void *)(*(void *)a2 + 8 * (v47 >> 6));
      }
      else {
        unint64_t v48 = (void *)a2;
      }
      if ((v5 ^ (*v48 >> v47))) {
        return v5 & 1;
      }
      unint64_t v49 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
      break;
    case ')':
      uint64_t v31 = *(unsigned int *)(a1 + 8);
      if (v31 > 0x40)
      {
        uint64_t v55 = *(void *)(*(void *)a1 + 8 * ((v31 - 1) >> 6)) & (1 << (v31 - 1));
        unsigned int v56 = *(_DWORD *)(a2 + 8);
        unsigned int v57 = v56 - 1;
        if (v56 >= 0x41) {
          uint64_t v58 = (void *)(*(void *)a2 + 8 * (v57 >> 6));
        }
        else {
          uint64_t v58 = (void *)a2;
        }
        if ((v55 != 0) == ((*v58 >> v57) & 1))
        {
          unint64_t v63 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v63)
            {
LABEL_110:
              int v21 = 0;
              goto LABEL_36;
            }
            unint64_t v64 = *(void *)(*(void *)a1 - 8 + v63);
            unint64_t v65 = *(void *)(*(void *)a2 - 8 + v63);
            v63 -= 8;
            BOOL v62 = v64 > v65;
          }
          while (v64 == v65);
LABEL_103:
          if (v62) {
            int v21 = 1;
          }
          else {
            int v21 = -1;
          }
        }
        else if (v55)
        {
          int v21 = -1;
        }
        else
        {
          int v21 = 1;
        }
      }
      else
      {
        uint64_t v32 = -v31;
        uint64_t v33 = (uint64_t)(*(void *)a1 << v32) >> v32;
        uint64_t v34 = (uint64_t)(*(void *)a2 << v32) >> v32;
        BOOL v15 = v33 < v34;
        int v21 = v33 > v34;
        if (v15) {
          int v21 = -1;
        }
      }
LABEL_36:
      BOOL v22 = v21 < 1;
LABEL_37:
      LOBYTE(v5) = v22;
      return v5 & 1;
    default:
      uint64_t v3 = *(unsigned int *)(a1 + 8);
      if (v3 > 0x40) {
        BOOL v4 = memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v4 = *(void *)a1 == *(void *)a2;
      }
      LOBYTE(v5) = v4;
      return v5 & 1;
  }
  do
  {
    if (!v49)
    {
LABEL_92:
      LOBYTE(v5) = 0;
      return v5 & 1;
    }
    unint64_t v50 = *(void *)(*(void *)a1 - 8 + v49);
    unint64_t v51 = *(void *)(*(void *)a2 - 8 + v49);
    v49 -= 8;
    BOOL v38 = v50 > v51;
  }
  while (v50 == v51);
LABEL_63:
  LOBYTE(v5) = !v38;
  return v5 & 1;
}

uint64_t llvm::FCmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void **)(a1 + 8);
  long long v6 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v8 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v7 == &unk_1CFB2E344)
  {
    unsigned int v11 = llvm::detail::DoubleAPFloat::compare(v6, v8);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 28);
    unsigned int v10 = *(unsigned __int8 *)(a2 + 28);
    unsigned int v11 = 3;
    switch(4 * (v9 & 7) + (v10 & 7))
    {
      case 1u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xDu:
        break;
      case 2u:
      case 3u:
      case 0xBu:
        unsigned int v11 = ~(v9 >> 2) & 2;
        break;
      case 8u:
      case 0xCu:
      case 0xEu:
        unsigned int v11 = (v10 >> 2) & 2;
        break;
      case 0xAu:
        int v14 = (v9 >> 3) & 1;
        if (v14 == ((v10 >> 3) & 1))
        {
          unsigned int v15 = llvm::detail::IEEEFloat::compareAbsoluteValue(v6, v8);
          if (v15 == 2) {
            int v16 = 0;
          }
          else {
            int v16 = v15;
          }
          if (v15) {
            int v17 = v16;
          }
          else {
            int v17 = 2;
          }
          if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
            unsigned int v11 = v17;
          }
          else {
            unsigned int v11 = v15;
          }
        }
        else
        {
          unsigned int v11 = (2 * v14) ^ 2;
        }
        break;
      case 0xFu:
        unsigned int v11 = 1;
        break;
      default:
        int v19 = (v9 >> 3) & 1;
        BOOL v13 = v19 == ((v10 >> 3) & 1);
        unsigned int v11 = (2 * v19) ^ 2;
        if (v13) {
          unsigned int v11 = 1;
        }
        break;
    }
  }
  uint64_t result = 0;
  switch(a3)
  {
    case 1:
      return v11 == 1;
    case 2:
      return v11 == 2;
    case 3:
      return --v11 < 2;
    case 4:
      return v11 == 0;
    case 5:
      return v11 < 2;
    case 6:
      return (v11 & 0xFFFFFFFD) == 0;
    case 7:
      BOOL v18 = v11 == 3;
      goto LABEL_17;
    case 8:
      return v11 == 3;
    case 9:
      v11 &= ~2u;
      return v11 == 1;
    case 10:
      v11 &= ~1u;
      return v11 == 2;
    case 11:
      BOOL v18 = v11 == 0;
      goto LABEL_17;
    case 12:
      return v11 == 3 || v11 == 0;
    case 13:
      BOOL v18 = v11 == 2;
      goto LABEL_17;
    case 14:
      BOOL v18 = v11 == 1;
LABEL_17:
      uint64_t result = !v18;
      break;
    case 15:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::CmpInst::getFlippedSignednessPredicate(int a1)
{
  if ((a1 - 38) >= 4) {
    int v1 = -34;
  }
  else {
    int v1 = -38;
  }
  if ((a1 - 38) >= 4) {
    int v2 = 38;
  }
  else {
    int v2 = 34;
  }
  return (v1 + a1 + v2);
}

BOOL llvm::CmpInst::isOrdered(int a1)
{
  return (a1 - 1) < 7;
}

BOOL llvm::CmpInst::isUnordered(int a1)
{
  return (a1 - 8) < 7;
}

uint64_t llvm::CmpInst::isTrueWhenEqual(unsigned int a1)
{
  return (a1 < 0x2A) & (0x2A90000AA00uLL >> a1);
}

uint64_t llvm::CmpInst::isFalseWhenEqual(unsigned int a1)
{
  return (a1 < 0x29) & (0x15600000055uLL >> a1);
}

uint64_t llvm::CmpInst::isImpliedTrueByMatchingCmp(int a1, int a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  switch(a1)
  {
    case ' ':
      BOOL v4 = ((a2 - 35) & 0xFFFFFFF9) == 0;
      goto LABEL_5;
    case '""':
      unsigned int v5 = a2 & 0xFFFFFFFD;
      goto LABEL_9;
    case '$':
      unsigned int v5 = a2 & 0xFFFFFFFB;
      goto LABEL_9;
    case '&':
      BOOL v4 = a2 == 33 || a2 == 39;
      goto LABEL_5;
    case '(':
      unsigned int v5 = a2 & 0xFFFFFFF7;
LABEL_9:
      BOOL v4 = v5 == 33;
LABEL_5:
      uint64_t result = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::CmpInst::isImpliedFalseByMatchingCmp(int a1, int a2)
{
  return llvm::CmpInst::isImpliedTrueByMatchingCmp(a1, dword_1CFB1B1B0[a2]);
}

void *llvm::SwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 60) = a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 2;
  uint64_t result = operator new(32 * a4);
  *(void *)(a1 - 8) = result;
  if (a4)
  {
    unsigned int v9 = result;
    do
    {
      *unsigned int v9 = 0;
      v9[1] = 0;
      uint64_t v9[2] = 0;
      v9[3] = a1;
      v9 += 4;
    }
    while (v9 != &result[4 * a4]);
  }
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0) {
    unsigned int v11 = result;
  }
  else {
    unsigned int v11 = (void *)(a1 - 32 * (v10 & 0x7FFFFFF));
  }
  if (*v11)
  {
    *(void *)uint64_t v11[2] = v11[1];
    uint64_t v21 = v11[1];
    if (v21) {
      *(void *)(v21 + 16) = v11[2];
    }
  }
  *unsigned int v11 = a2;
  if (a2)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    BOOL v13 = (void *)(a2 + 8);
    uint64_t v12 = v14;
    v11[1] = v14;
    if (v14) {
      *(void *)(v12 + 16) = v11 + 1;
    }
    uint64_t v11[2] = v13;
    *BOOL v13 = v11;
  }
  int v15 = *(_DWORD *)(a1 + 20);
  if ((v15 & 0x40000000) != 0) {
    uint64_t v16 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v16 = a1 - 32 * (v15 & 0x7FFFFFF);
  }
  int v17 = (void *)(v16 + 32);
  if (*(void *)(v16 + 32))
  {
    **(void **)(v16 + 48) = *(void *)(v16 + 40);
    uint64_t v22 = *(void *)(v16 + 40);
    if (v22) {
      *(void *)(v22 + 16) = *(void *)(v16 + 48);
    }
  }
  void *v17 = a3;
  if (a3)
  {
    uint64_t v20 = *(void *)(a3 + 8);
    int v19 = (void *)(a3 + 8);
    uint64_t v18 = v20;
    *(void *)(v16 + 40) = v20;
    if (v20) {
      *(void *)(v18 + 16) = v16 + 40;
    }
    *(void *)(v16 + 48) = v19;
    void *v19 = v17;
  }
  return result;
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::Instruction *a5)
{
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 31;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) &= 0xC0000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v9 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    uint64_t v11 = *((void *)a5 + 5);
    uint64_t v12 = (uint64_t *)((char *)a5 + 24);
    *((void *)this + 5) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v14 = *(void *)(v11 + 56);
      if (v14)
      {
        int v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15) {
          llvm::ValueSymbolTable::reinsertValue(v15, this);
        }
      }
    }
    uint64_t v13 = *v12;
    *((void *)this + 3) = *v12;
    *((void *)this + 4) = v12;
    *(void *)(v13 + 8) = v9;
    uint64_t *v12 = (uint64_t)v9;
  }
  llvm::SwitchInst::init((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 2 * a4 + 2);
  return this;
}

uint64_t llvm::SwitchInst::SwitchInst(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 31;
  *(_DWORD *)(a1 + 20) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    long long v6 = *(uint64_t **)(a2 - 8);
    unsigned int v7 = v5 & 0x7FFFFFF;
  }
  else
  {
    unsigned int v7 = v5 & 0x7FFFFFF;
    long long v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
  }
  llvm::SwitchInst::init(a1, *v6, v6[4], v7);
  uint64_t v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  int v9 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = v9 & 0xF8000000 | v8;
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v10 = a1 - 32 * v8;
  }
  int v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
  {
    uint64_t v12 = *(void *)(a2 - 8);
    LODWORD(v13) = v11 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v13 = v11 & 0x7FFFFFF;
    uint64_t v12 = a2 - 32 * v13;
  }
  if (v13 != 2)
  {
    unsigned int v14 = 2;
    do
    {
      uint64_t v15 = v14;
      uint64_t v16 = 32 * v14;
      uint64_t v17 = v10 + v16;
      uint64_t v18 = *(void *)(v12 + v16);
      if (*(void *)v17)
      {
        **(void **)(v17 + 16) = *(void *)(v17 + 8);
        uint64_t v32 = *(void *)(v17 + 8);
        if (v32) {
          *(void *)(v32 + 16) = *(void *)(v17 + 16);
        }
      }
      *(void *)uint64_t v17 = v18;
      if (v18)
      {
        uint64_t v21 = *(void *)(v18 + 8);
        int v19 = (uint64_t *)(v18 + 8);
        uint64_t v20 = v21;
        uint64_t v22 = v10 + 32 * v15;
        *(void *)(v22 + 8) = v21;
        uint64_t v23 = v22 + 8;
        if (v21) {
          *(void *)(v20 + 16) = v23;
        }
        *(void *)(v10 + 32 * v15 + 16) = v19;
        uint64_t *v19 = v17;
      }
      uint64_t v24 = (v15 + 1);
      uint64_t v25 = v10 + 32 * v24;
      uint64_t v26 = *(void *)(v12 + 32 * v24);
      if (*(void *)v25)
      {
        **(void **)(v25 + 16) = *(void *)(v25 + 8);
        uint64_t v33 = *(void *)(v25 + 8);
        if (v33) {
          *(void *)(v33 + 16) = *(void *)(v25 + 16);
        }
      }
      *(void *)uint64_t v25 = v26;
      if (v26)
      {
        uint64_t v29 = *(void *)(v26 + 8);
        unint64_t v27 = (uint64_t *)(v26 + 8);
        uint64_t v28 = v29;
        uint64_t v30 = v10 + 32 * v24;
        *(void *)(v30 + 8) = v29;
        if (v29) {
          *(void *)(v28 + 16) = v30 + 8;
        }
        *(void *)(v30 + 16) = v27;
        *unint64_t v27 = v25;
      }
      unsigned int v14 = v15 + 2;
    }
    while (v13 != v15 + 2);
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
  return a1;
}

_DWORD *llvm::SwitchInst::addCase(_DWORD *this, llvm::ConstantInt *a2, llvm::BasicBlock *a3)
{
  int v3 = this[5];
  int v4 = v3 & 0x7FFFFFF;
  unsigned int v5 = (v3 & 0x7FFFFFF) + 2;
  int v6 = v3;
  if (v5 > this[15])
  {
    int v28 = this[5];
    uint64_t v29 = this;
    this[15] = 3 * v4;
    uint64_t v26 = a3;
    unint64_t v27 = a2;
    int v25 = (v3 & 0x7FFFFFF) + 2;
    llvm::User::growHungoffUses((llvm::User *)this, 3 * v4, 0);
    unsigned int v5 = v25;
    a3 = v26;
    int v3 = v28;
    this = v29;
    a2 = v27;
    int v6 = v29[5];
  }
  uint64_t v7 = v3 & 0x7FFFFFE;
  uint64_t v8 = v5 & 0x7FFFFFF;
  this[5] = v6 & 0xF8000000 | v8;
  if ((v6 & 0x40000000) != 0) {
    int v9 = (_DWORD *)*((void *)this - 1);
  }
  else {
    int v9 = &this[-8 * v8];
  }
  uint64_t v10 = &v9[8 * v7];
  if (*(void *)v10)
  {
    **((void **)v10 + 2) = *((void *)v10 + 1);
    uint64_t v23 = *((void *)v10 + 1);
    if (v23) {
      *(void *)(v23 + 16) = *((void *)v10 + 2);
    }
  }
  *(void *)uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    int v11 = (void *)((char *)a2 + 8);
    uint64_t v12 = v13;
    unsigned int v14 = &v9[8 * v7];
    *((void *)v14 + 1) = v13;
    if (v13) {
      *(void *)(v12 + 16) = v14 + 2;
    }
    *((void *)v14 + 2) = v11;
    *int v11 = v10;
  }
  uint64_t v15 = v7 | 1;
  int v16 = this[5];
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = (_DWORD *)*((void *)this - 1);
  }
  else {
    uint64_t v17 = &this[-8 * (v16 & 0x7FFFFFF)];
  }
  uint64_t v18 = &v17[8 * v15];
  if (*(void *)v18)
  {
    **((void **)v18 + 2) = *((void *)v18 + 1);
    uint64_t v24 = *((void *)v18 + 1);
    if (v24) {
      *(void *)(v24 + 16) = *((void *)v18 + 2);
    }
  }
  *(void *)uint64_t v18 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    int v19 = (void *)((char *)a3 + 8);
    uint64_t v20 = v21;
    uint64_t v22 = &v17[8 * v15];
    *((void *)v22 + 1) = v21;
    if (v21) {
      *(void *)(v20 + 16) = v22 + 2;
    }
    *((void *)v22 + 2) = v19;
    void *v19 = v18;
  }
  return this;
}

void llvm::SwitchInst::growOperands(llvm::SwitchInst *this)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  uint64_t v4 = 3 * (v2 & 0x7FFFFFFu);
  *((_DWORD *)this + 15) = v4;
  if ((v2 & 0x40000000) != 0) {
    unsigned int v5 = (uint64_t *)*((void *)this - 1);
  }
  else {
    unsigned int v5 = (uint64_t *)((char *)this - 32 * v3);
  }
  int v6 = operator new(96 * (v2 & 0x7FFFFFF));
  *((void *)this - 1) = v6;
  if (v3)
  {
    uint64_t v7 = v6;
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v4]);
  }
  int v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0) {
    int v9 = (char *)v6;
  }
  else {
    int v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
  }
  sub_1CC5E4108((uint64_t)&v13, v5, &v5[4 * v3], (uint64_t)v9);
  if (v3)
  {
    uint64_t v10 = 4 * v3;
    do
    {
      int v11 = &v5[v10];
      if (v5[v10 - 4])
      {
        *(void *)*(v11 - 2) = *(v11 - 3);
        uint64_t v12 = *(v11 - 3);
        if (v12) {
          *(void *)(v12 + 16) = *(v11 - 2);
        }
      }
      v10 -= 4;
    }
    while (v10 * 8);
  }
  operator delete(v5);
}

uint64_t llvm::SwitchInst::removeCase(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(result - 8);
  }
  else {
    uint64_t v5 = result - 32 * v4;
  }
  int v6 = 2 * a3;
  uint64_t v7 = (v4 - 2);
  if (2 * a3 + 4 != v4)
  {
    uint64_t v8 = (v6 + 2);
    uint64_t v9 = v5 + 32 * v8;
    uint64_t v10 = *(void *)(v5 + 32 * v7);
    if (*(void *)v9)
    {
      **(void **)(v9 + 16) = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11) {
        *(void *)(v11 + 16) = *(void *)(v9 + 16);
      }
    }
    *(void *)uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v14 = *(void *)(v10 + 8);
      uint64_t v12 = (void *)(v10 + 8);
      uint64_t v13 = v14;
      uint64_t v15 = v5 + 32 * v8;
      *(void *)(v15 + 8) = v14;
      if (v14) {
        *(void *)(v13 + 16) = v15 + 8;
      }
      *(void *)(v15 + 16) = v12;
      void *v12 = v9;
    }
    uint64_t v16 = (v6 + 3);
    uint64_t v17 = v5 + 32 * v16;
    uint64_t v18 = *(void *)(v5 + 32 * (v4 - 1));
    if (*(void *)v17)
    {
      **(void **)(v17 + 16) = *(void *)(v17 + 8);
      uint64_t v19 = *(void *)(v17 + 8);
      if (v19) {
        *(void *)(v19 + 16) = *(void *)(v17 + 16);
      }
    }
    *(void *)uint64_t v17 = v18;
    if (v18)
    {
      uint64_t v22 = *(void *)(v18 + 8);
      uint64_t v20 = (void *)(v18 + 8);
      uint64_t v21 = v22;
      uint64_t v23 = v5 + 32 * v16;
      *(void *)(v23 + 8) = v22;
      if (v22) {
        *(void *)(v21 + 16) = v23 + 8;
      }
      *(void *)(v23 + 16) = v20;
      void *v20 = v17;
    }
  }
  uint64_t v24 = v5 + 32 * v7;
  if (*(void *)v24)
  {
    **(void **)(v24 + 16) = *(void *)(v24 + 8);
    uint64_t v25 = *(void *)(v24 + 8);
    if (v25) {
      *(void *)(v25 + 16) = *(void *)(v24 + 16);
    }
  }
  *(void *)uint64_t v24 = 0;
  uint64_t v26 = v5 + 32 * (v4 - 1);
  if (*(void *)v26)
  {
    **(void **)(v26 + 16) = *(void *)(v26 + 8);
    uint64_t v27 = *(void *)(v26 + 8);
    if (v27) {
      *(void *)(v27 + 16) = *(void *)(v26 + 16);
    }
  }
  *(void *)uint64_t v26 = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | v7 & 0x7FFFFFF;
  return result;
}

uint64_t llvm::SwitchInstProfUpdateWrapper::getProfBranchWeightsMD(llvm::SwitchInstProfUpdateWrapper *this, const llvm::SwitchInst *a2)
{
  if (!*((void *)this + 6) && (*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t result = llvm::Instruction::getMetadataImpl(this, 2);
  uint64_t v9 = result;
  if (result)
  {
    int v3 = *(llvm::MDString **)(result - 8 * *(unsigned int *)(result + 8));
    if (*(unsigned char *)v3) {
      return 0;
    }
    String = (uint64_t *)llvm::MDString::getString(v3);
    uint64_t result = v9;
    if (v5 != 14) {
      return 0;
    }
    uint64_t v6 = *String;
    uint64_t v7 = *(uint64_t *)((char *)String + 6);
    if (v6 != 0x775F68636E617262 || v7 != 0x737468676965775FLL) {
      return 0;
    }
  }
  return result;
}

void llvm::SwitchInstProfUpdateWrapper::init(llvm::SwitchInstProfUpdateWrapper **this, const llvm::SwitchInst *a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t ProfBranchWeightsMD = llvm::SwitchInstProfUpdateWrapper::getProfBranchWeightsMD(*this, a2);
  if (ProfBranchWeightsMD)
  {
    unsigned int v6 = *(_DWORD *)(ProfBranchWeightsMD + 8);
    uint64_t v4 = (unsigned int *)(ProfBranchWeightsMD + 8);
    uint64_t v5 = v6;
    int v7 = (*((_DWORD *)*this + 5) >> 1) & 0x3FFFFFF;
    uint64_t v13 = v15;
    uint64_t v14 = 0x800000000;
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = v5 - 1;
      uint64_t v10 = v4;
      do
      {
        uint64_t v11 = *(void *)(*(void *)&v10[-2 * *v4] + 128);
        uint64_t v12 = (void *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u) {
          uint64_t v12 = (void *)*v12;
        }
        if (v8 >= HIDWORD(v14)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v13 + v8) = *(_DWORD *)v12;
        unsigned int v8 = v14 + 1;
        LODWORD(v14) = v14 + 1;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    sub_1CD5CAC7C((uint64_t)(this + 1), (uint64_t)&v13);
    if (v13 != v15) {
      free(v13);
    }
  }
}

uint64_t llvm::SwitchInstProfUpdateWrapper::removeCase(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 56))
  {
    *(unsigned char *)(a1 + 64) = 1;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * (a3 + 1)) = *(_DWORD *)(*(void *)(a1 + 8)
                                                                                + 4
                                                                                * (*(_DWORD *)(a1 + 16))--
                                                                                - 4);
  }
  return llvm::SwitchInst::removeCase(*(void *)a1, a2, a3);
}

void llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0xFF00000000) != 0)
  {
    int v3 = a3;
    unsigned int v6 = a1 + 1;
    if (!a3 || *((unsigned char *)a1 + 56))
    {
      if (!*((unsigned char *)a1 + 56)) {
        return;
      }
      goto LABEL_5;
    }
    unint64_t v8 = ((unint64_t)*(unsigned int *)(*a1 + 20) >> 1) & 0x3FFFFFF;
    uint64_t v9 = v12;
    int v11 = 8;
    if (v8 >= 9)
    {
      int v10 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v8) {
      bzero(v12, 4 * v8);
    }
    int v10 = v8;
    sub_1CD5CAC7C((uint64_t)v6, (uint64_t)&v9);
    if (v9 != v12) {
      free(v9);
    }
    if (*((unsigned char *)a1 + 56))
    {
LABEL_5:
      uint64_t v7 = *v6;
      if (*(_DWORD *)(*v6 + 4 * a2) != v3)
      {
        *((unsigned char *)a1 + 64) = 1;
        *(_DWORD *)(v7 + 4 * a2) = v3;
      }
    }
  }
}

void llvm::IndirectBrInst::growOperands(llvm::IndirectBrInst *this)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = 2 * (v2 & 0x7FFFFFF);
  *((_DWORD *)this + 15) = v3;
  uint64_t v4 = v2 & 0x7FFFFFF;
  if ((v2 & 0x40000000) != 0) {
    uint64_t v5 = (uint64_t *)*((void *)this - 1);
  }
  else {
    uint64_t v5 = (uint64_t *)((char *)this - 32 * v4);
  }
  unsigned int v6 = operator new((unint64_t)(v2 & 0x7FFFFFF) << 6);
  *((void *)this - 1) = v6;
  if (v3)
  {
    uint64_t v7 = v6;
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v3]);
  }
  int v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0) {
    uint64_t v9 = (char *)v6;
  }
  else {
    uint64_t v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
  }
  sub_1CC5E4108((uint64_t)&v13, v5, &v5[4 * v4], (uint64_t)v9);
  if (v4)
  {
    uint64_t v10 = 4 * v4;
    do
    {
      int v11 = &v5[v10];
      if (v5[v10 - 4])
      {
        *(void *)*(v11 - 2) = *(v11 - 3);
        uint64_t v12 = *(v11 - 3);
        if (v12) {
          *(void *)(v12 + 16) = *(v11 - 2);
        }
      }
      v10 -= 4;
    }
    while (v10 * 8);
  }
  operator delete(v5);
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::BasicBlock *a4)
{
  *(void *)this = ***(void ***)a2 + 1576;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 32;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) &= 0xC0000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 5) = a4;
  *((_WORD *)a4 + 9) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v12 = *((void *)a4 + 7);
    if (v12)
    {
      char v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
  }
  uint64_t v10 = *((void *)a4 + 5);
  uint64_t v9 = (void *)((char *)a4 + 40);
  *((void *)this + 3) = v10;
  *((void *)this + 4) = v9;
  *(void *)(v10 + 8) = v8;
  *uint64_t v9 = v8;
  llvm::IndirectBrInst::init(this, a2, a3);
  return this;
}

llvm::FreezeInst *llvm::FreezeInst::FreezeInst(llvm::FreezeInst *this, llvm::Value *a2, const char **a3, llvm::Instruction *a4)
{
  uint64_t v7 = (void *)((char *)this - 32);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 95;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a4)
  {
    uint64_t v14 = *((void *)a4 + 5);
    uint64_t v15 = (uint64_t *)((char *)a4 + 24);
    *((void *)this + 5) = v14;
    *(_WORD *)(v14 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v25 = *(void *)(v14 + 56);
      if (v25)
      {
        uint64_t v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26) {
          llvm::ValueSymbolTable::reinsertValue(v26, this);
        }
      }
    }
    uint64_t v16 = *v15;
    *((void *)this + 3) = *v15;
    *((void *)this + 4) = v15;
    *(void *)(v16 + 8) = v9;
    uint64_t *v15 = (uint64_t)v9;
  }
  if (*v7)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v33 = *((void *)this - 3);
    if (v33) {
      *(void *)(v33 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v12 = *((void *)a2 + 1);
  int v11 = (void *)((char *)a2 + 8);
  uint64_t v10 = v12;
  *((void *)this - 3) = v12;
  if (v12) {
    *(void *)(v10 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v11;
  *int v11 = v7;
  llvm::Value::setNameImpl(this, a3);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_27;
    }
    uint64_t v17 = ***(void ***)this;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v21 = v18 + 16 * v20;
      uint64_t v22 = *(llvm::FreezeInst **)v21;
      if (*(llvm::FreezeInst **)v21 == this)
      {
LABEL_20:
        uint64_t v27 = *(void **)(v21 + 8);
        unint64_t v30 = *v27;
        int v28 = v27 + 2;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_28:
          *((_DWORD *)this + 9) = v32;
          return this;
        }
LABEL_27:
        int v32 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_28;
      }
      int v23 = 1;
      while (v22 != (llvm::FreezeInst *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(llvm::FreezeInst **)(v18 + 16 * v20);
        if (v22 == this)
        {
          uint64_t v21 = v18 + 16 * v20;
          goto LABEL_20;
        }
      }
    }
    uint64_t v21 = v18 + 16 * v19;
    goto LABEL_20;
  }
  return this;
}

{
  void *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::FreezeInst *v22;
  int v23;
  int v24;
  void *v25;
  unsigned char *v26;
  unint64_t v27;
  unint64_t v28;
  int v30;
  uint64_t v31;
  llvm::ValueSymbolTable *v32;
  uint64_t v33;

  uint64_t v7 = (void *)((char *)this - 32);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v8 = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *((_DWORD *)this + 4) = 95;
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a4)
  {
    uint64_t v14 = *((void *)a4 + 5);
    uint64_t v15 = (uint64_t *)((char *)a4 + 24);
    *((void *)this + 5) = v14;
    *(_WORD *)(v14 + 18) &= ~0x8000u;
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v31 = *(void *)(v14 + 56);
      if (v31)
      {
        int v32 = *(llvm::ValueSymbolTable **)(v31 + 104);
        if (v32) {
          llvm::ValueSymbolTable::reinsertValue(v32, this);
        }
      }
    }
    uint64_t v16 = *v15;
    *((void *)this + 3) = *v15;
    *((void *)this + 4) = v15;
    *(void *)(v16 + 8) = v9;
    uint64_t *v15 = (uint64_t)v9;
  }
  if (*v7)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v33 = *((void *)this - 3);
    if (v33) {
      *(void *)(v33 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v12 = *((void *)a2 + 1);
  int v11 = (void *)((char *)a2 + 8);
  uint64_t v10 = v12;
  *((void *)this - 3) = v12;
  if (v12) {
    *(void *)(v10 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v11;
  *int v11 = v7;
  llvm::Value::setNameImpl(this, a3);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v17 = ***(void ***)this;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v21 = v18 + 16 * v20;
      uint64_t v22 = *(llvm::FreezeInst **)v21;
      if (*(llvm::FreezeInst **)v21 == this)
      {
LABEL_16:
        uint64_t v25 = *(void **)(v21 + 8);
        int v28 = *v25;
        uint64_t v26 = v25 + 2;
        uint64_t v27 = v28;
        if (v28 >= 5 && *(_DWORD *)v26 == *(_DWORD *)"llvm." && v26[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          unint64_t v30 = llvm::Function::lookupIntrinsicID(v26, v27);
LABEL_23:
          *((_DWORD *)this + 9) = v30;
          return this;
        }
LABEL_24:
        unint64_t v30 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_23;
      }
      int v23 = 1;
      while (v22 != (llvm::FreezeInst *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(llvm::FreezeInst **)(v18 + 16 * v20);
        if (v22 == this)
        {
          uint64_t v21 = v18 + 16 * v20;
          goto LABEL_16;
        }
      }
    }
    uint64_t v21 = v18 + 16 * v19;
    goto LABEL_16;
  }
  return this;
}

llvm::FreezeInst *llvm::FreezeInst::FreezeInst(llvm::FreezeInst *this, llvm::Value *a2, const char **a3, llvm::BasicBlock *a4)
{
  unsigned int v6 = sub_1CC5CEE04(this, *(void *)a2, 67, (uint64_t)a2, (uint64_t)a4);
  llvm::Value::setNameImpl(v6, a3);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      char v13 = *(llvm::FreezeInst **)v12;
      if (*(llvm::FreezeInst **)v12 == this)
      {
LABEL_12:
        uint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        uint64_t v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == *(_DWORD *)"llvm." && v17[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_20:
          *((_DWORD *)this + 9) = v21;
          return this;
        }
LABEL_19:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v14 = 1;
      while (v13 != (llvm::FreezeInst *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        char v13 = *(llvm::FreezeInst **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_12;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_12;
  }
  return this;
}

{
  llvm::Value *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::FreezeInst *v13;
  int v14;
  int v15;
  void *v16;
  unsigned char *v17;
  unint64_t v18;
  unint64_t v19;
  int v21;

  unsigned int v6 = sub_1CC5CEE04(this, *(void *)a2, 67, (uint64_t)a2, (uint64_t)a4);
  llvm::Value::setNameImpl(v6, a3);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v8 = ***(void ***)this;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v12 = v9 + 16 * v11;
      char v13 = *(llvm::FreezeInst **)v12;
      if (*(llvm::FreezeInst **)v12 == this)
      {
LABEL_12:
        uint64_t v16 = *(void **)(v12 + 8);
        unint64_t v19 = *v16;
        uint64_t v17 = v16 + 2;
        unint64_t v18 = v19;
        if (v19 >= 5 && *(_DWORD *)v17 == *(_DWORD *)"llvm." && v17[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v21 = llvm::Function::lookupIntrinsicID(v17, v18);
LABEL_20:
          *((_DWORD *)this + 9) = v21;
          return this;
        }
LABEL_19:
        int v21 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v14 = 1;
      while (v13 != (llvm::FreezeInst *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        char v13 = *(llvm::FreezeInst **)(v9 + 16 * v11);
        if (v13 == this)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_12;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_12;
  }
  return this;
}

void *llvm::GetElementPtrInst::cloneImpl(llvm::GetElementPtrInst *this)
{
  uint64_t v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  uint64_t v3 = operator new(32 * v2 + 80);
  uint64_t v4 = &v3[4 * v2];
  *((_DWORD *)v4 + 5) = *((_DWORD *)v4 + 5) & 0x38000000 | v2;
  if (v2)
  {
    do
    {
      *uint64_t v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != v4);
    unsigned int v5 = *((_DWORD *)v4 + 5) & 0xC0000000;
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v6 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  void *v4 = *(void *)this;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 62;
  *((_DWORD *)v4 + 5) = v5 | v6;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *((_OWORD *)v4 + 4) = *((_OWORD *)this + 4);
  sub_1CC5E4108((uint64_t)&v8, (uint64_t *)this - 4 * v6, (uint64_t *)this, (uint64_t)&v4[-4 * v6]);
  *((unsigned char *)v4 + 17) = *((unsigned char *)this + 17) & 0xFE | *((unsigned char *)v4 + 17) & 1;
  return v4;
}

llvm::Value *llvm::UnaryOperator::cloneImpl(llvm::UnaryOperator *this)
{
  char v1 = *((unsigned char *)this + 16);
  uint64_t v2 = (uint64_t *)*((void *)this - 4);
  __int16 v6 = 257;
  uint64_t v3 = operator new(0x60uLL);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 8;
  return llvm::UnaryOperator::UnaryOperator((llvm::Value *)(v3 + 8), v1 - 28, (uint64_t)v2, *v2, &v5, 0);
}

uint64_t ***llvm::BinaryOperator::cloneImpl(llvm::BinaryOperator *this)
{
  char v1 = *((unsigned char *)this + 16);
  uint64_t v2 = (void *)*((void *)this - 8);
  uint64_t v3 = *((void *)this - 4);
  __int16 v29 = 257;
  uint64_t v4 = (char *)operator new(0x80uLL);
  unsigned int v5 = v4;
  *((void *)v4 + 5) = 0;
  __int16 v6 = v4 + 40;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 8) = *v2;
  uint64_t v7 = (uint64_t ***)(v4 + 64);
  *((void *)v4 + 3) = v4 + 64;
  *((void *)v4 + 7) = v4 + 64;
  *((void *)v4 + 9) = 0;
  v4[80] = v1;
  v4[81] = 0;
  *((_WORD *)v4 + 41) = 0;
  *((_DWORD *)v4 + 21) = 2;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_DWORD *)v4 + 30) = 0;
  char v8 = v2 + 1;
  uint64_t v9 = v2[1];
  *(void *)uint64_t v4 = v2;
  *((void *)v4 + 1) = v9;
  if (v9) {
    *(void *)(v9 + 16) = v4 + 8;
  }
  *((void *)v4 + 2) = v8;
  void *v8 = v4;
  *((void *)v4 + 4) = v3;
  if (v3)
  {
    uint64_t v12 = *(void *)(v3 + 8);
    uint64_t v11 = (void *)(v3 + 8);
    uint64_t v10 = v12;
    *__int16 v6 = v12;
    if (v12) {
      *(void *)(v10 + 16) = v6;
    }
    *((void *)v4 + 6) = v11;
    *uint64_t v11 = v4 + 32;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v4 + 64), &v28);
  if (!v5[80])
  {
    if ((v5[87] & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v14 = ***v7;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      unint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
      unint64_t v19 = *v18;
      if (*v18 == v7)
      {
LABEL_16:
        uint64_t v22 = v18[1];
        unint64_t v25 = (unint64_t)*v22;
        int v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)v5 + 24) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_23:
          *((_DWORD *)v5 + 25) = v27;
          return v7;
        }
LABEL_24:
        int v27 = 0;
        *((_DWORD *)v5 + 24) &= ~0x2000u;
        goto LABEL_23;
      }
      int v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        unint64_t v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v7)
        {
          unint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_16;
        }
      }
    }
    unint64_t v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_16;
  }
  return v7;
}

char *llvm::FCmpInst::cloneImpl(llvm::FCmpInst *this)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  uint64_t v3 = (llvm::Value *)(v2 + 64);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 64;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = v2 + 32;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = v2 + 64;
  __int16 v5 = *((_WORD *)this + 9);
  __int16 v6 = (void *)*((void *)this - 8);
  uint64_t v7 = *((void *)this - 4);
  __int16 v36 = 257;
  char v8 = (void **)*v6;
  uint64_t v9 = (uint64_t **)(**(void **)*v6 + 1888);
  if (*v6 && (v8[1] & 0xFE) == 0x12)
  {
    int v32 = (llvm::Type *)*((unsigned int *)v8 + 8);
    if (*((_DWORD *)v8 + 2) == 19) {
      llvm::ScalableVectorType::get(v9, v32);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v32);
    }
  }
  *((void *)v2 + 8) = v9;
  *((void *)v2 + 9) = 0;
  unsigned int v10 = *((_DWORD *)v2 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v2 + 20) = 82;
  *((_DWORD *)v2 + 21) = v10;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  if (*(void *)v2)
  {
    **((void **)v2 + 2) = *((void *)v2 + 1);
    uint64_t v33 = *((void *)v2 + 1);
    if (v33) {
      *(void *)(v33 + 16) = *((void *)v2 + 2);
    }
  }
  *(void *)uint64_t v2 = v6;
  uint64_t v13 = v6[1];
  uint64_t v12 = v6 + 1;
  uint64_t v11 = v13;
  *((void *)v2 + 1) = v13;
  if (v13) {
    *(void *)(v11 + 16) = v2 + 8;
  }
  *((void *)v2 + 2) = v12;
  void *v12 = v2;
  if (*((void *)v2 + 4))
  {
    **((void **)v2 + 6) = *((void *)v2 + 5);
    uint64_t v34 = *((void *)v2 + 5);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)v2 + 6);
    }
  }
  void *v4 = v7;
  if (v7)
  {
    uint64_t v16 = *(void *)(v7 + 8);
    uint64_t v15 = (void *)(v7 + 8);
    uint64_t v14 = v16;
    *((void *)v2 + 5) = v16;
    if (v16) {
      *(void *)(v14 + 16) = v2 + 40;
    }
    *((void *)v2 + 6) = v15;
    void *v15 = v4;
  }
  *((_WORD *)v2 + 41) = v5 & 0x3F;
  llvm::Value::setNameImpl(v3, &v35);
  if (!v2[80])
  {
    if ((v2[87] & 0x10) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = ***(void ***)v3;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
      int v23 = *v22;
      if (*v22 == v3)
      {
LABEL_20:
        uint64_t v26 = v22[1];
        unint64_t v29 = *(void *)v26;
        int v27 = (char *)v26 + 16;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)v2 + 24) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_27:
          *((_DWORD *)v2 + 25) = v31;
          return v2 + 64;
        }
LABEL_30:
        int v31 = 0;
        *((_DWORD *)v2 + 24) &= ~0x2000u;
        goto LABEL_27;
      }
      int v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        int v23 = *(llvm::Value **)(v19 + 16 * v21);
        if (v23 == v3)
        {
          uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
          goto LABEL_20;
        }
      }
    }
    uint64_t v22 = (llvm::Value **)(v19 + 16 * v20);
    goto LABEL_20;
  }
  return v2 + 64;
}

char *llvm::ICmpInst::cloneImpl(llvm::ICmpInst *this)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  uint64_t v3 = (llvm::Value *)(v2 + 64);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 64;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = v2 + 32;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = v2 + 64;
  __int16 v5 = *((_WORD *)this + 9);
  __int16 v6 = (void *)*((void *)this - 8);
  uint64_t v7 = *((void *)this - 4);
  __int16 v36 = 257;
  char v8 = (void **)*v6;
  uint64_t v9 = (uint64_t **)(**(void **)*v6 + 1888);
  if (*v6 && (v8[1] & 0xFE) == 0x12)
  {
    int v32 = (llvm::Type *)*((unsigned int *)v8 + 8);
    if (*((_DWORD *)v8 + 2) == 19) {
      llvm::ScalableVectorType::get(v9, v32);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v32);
    }
  }
  *((void *)v2 + 8) = v9;
  *((void *)v2 + 9) = 0;
  unsigned int v10 = *((_DWORD *)v2 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v2 + 20) = 81;
  *((_DWORD *)v2 + 21) = v10;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  if (*(void *)v2)
  {
    **((void **)v2 + 2) = *((void *)v2 + 1);
    uint64_t v33 = *((void *)v2 + 1);
    if (v33) {
      *(void *)(v33 + 16) = *((void *)v2 + 2);
    }
  }
  *(void *)uint64_t v2 = v6;
  uint64_t v13 = v6[1];
  uint64_t v12 = v6 + 1;
  uint64_t v11 = v13;
  *((void *)v2 + 1) = v13;
  if (v13) {
    *(void *)(v11 + 16) = v2 + 8;
  }
  *((void *)v2 + 2) = v12;
  void *v12 = v2;
  if (*((void *)v2 + 4))
  {
    **((void **)v2 + 6) = *((void *)v2 + 5);
    uint64_t v34 = *((void *)v2 + 5);
    if (v34) {
      *(void *)(v34 + 16) = *((void *)v2 + 6);
    }
  }
  void *v4 = v7;
  if (v7)
  {
    uint64_t v16 = *(void *)(v7 + 8);
    uint64_t v15 = (void *)(v7 + 8);
    uint64_t v14 = v16;
    *((void *)v2 + 5) = v16;
    if (v16) {
      *(void *)(v14 + 16) = v2 + 40;
    }
    *((void *)v2 + 6) = v15;
    void *v15 = v4;
  }
  *((_WORD *)v2 + 41) = v5 & 0x3F;
  llvm::Value::setNameImpl(v3, &v35);
  if (!v2[80])
  {
    if ((v2[87] & 0x10) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = ***(void ***)v3;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
      int v23 = *v22;
      if (*v22 == v3)
      {
LABEL_20:
        uint64_t v26 = v22[1];
        unint64_t v29 = *(void *)v26;
        int v27 = (char *)v26 + 16;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)v2 + 24) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_27:
          *((_DWORD *)v2 + 25) = v31;
          return v2 + 64;
        }
LABEL_30:
        int v31 = 0;
        *((_DWORD *)v2 + 24) &= ~0x2000u;
        goto LABEL_27;
      }
      int v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        int v23 = *(llvm::Value **)(v19 + 16 * v21);
        if (v23 == v3)
        {
          uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
          goto LABEL_20;
        }
      }
    }
    uint64_t v22 = (llvm::Value **)(v19 + 16 * v20);
    goto LABEL_20;
  }
  return v2 + 64;
}

uint64_t llvm::ExtractValueInst::cloneImpl(llvm::ExtractValueInst *this)
{
  uint64_t v2 = operator new(0x80uLL);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 8;
  uint64_t v3 = (uint64_t)(v2 + 8);

  return llvm::ExtractValueInst::ExtractValueInst(v3, (uint64_t)this);
}

uint64_t llvm::InsertValueInst::cloneImpl(llvm::InsertValueInst *this)
{
  uint64_t v2 = operator new(0xA0uLL);
  v2[21] = v2[21] & 0x38000000 | 2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 16;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = v2 + 16;
  uint64_t v3 = (uint64_t)(v2 + 16);

  return llvm::InsertValueInst::InsertValueInst(v3, (uint64_t)this);
}

char *llvm::AllocaInst::cloneImpl(llvm::AllocaInst *this)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  uint64_t v3 = (llvm::Value *)(v2 + 32);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v4 = (llvm::PointerType *)*((void *)this + 8);
  __int16 v5 = (llvm::Type *)(*(_DWORD *)(*(void *)this + 8) >> 8);
  __int16 v6 = (void *)*((void *)this - 4);
  __int16 v7 = *((_WORD *)this + 9);
  __int16 v34 = 257;
  unint64_t v9 = llvm::PointerType::get(v4, v5);
  if (!v6)
  {
    uint64_t v14 = **(void **)v4;
    uint64_t v15 = *(llvm::ConstantInt **)(v14 + 1960);
    unsigned int v16 = *(_DWORD *)(v14 + 1968);
    unsigned int v36 = v16 >> 8;
    if (v16 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
    if (v16 <= 0xFF) {
      LOBYTE(v17) = 0;
    }
    unint64_t v35 = v17 & 1;
    __int16 v6 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v35, v8);
    if (v36 >= 0x41 && v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
  }
  *((void *)v2 + 4) = v9;
  *((void *)v2 + 5) = 0;
  *((_WORD *)v2 + 24) = 59;
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0xC0000000 | 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  if (*(void *)v2)
  {
    **((void **)v2 + 2) = *((void *)v2 + 1);
    uint64_t v32 = *((void *)v2 + 1);
    if (v32) {
      *(void *)(v32 + 16) = *((void *)v2 + 2);
    }
  }
  *(void *)uint64_t v2 = v6;
  if (v6)
  {
    uint64_t v12 = v6[1];
    uint64_t v11 = v6 + 1;
    uint64_t v10 = v12;
    *((void *)v2 + 1) = v12;
    if (v12) {
      *(void *)(v10 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v11;
    *uint64_t v11 = v2;
  }
  *((void *)v2 + 12) = v4;
  *((_WORD *)v2 + 25) = v7 & 0x3F;
  llvm::Value::setNameImpl(v3, &v33);
  if (!v2[48])
  {
    if ((v2[55] & 0x10) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = ***(void ***)v3;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
      int v23 = *v22;
      if (*v22 == v3)
      {
LABEL_22:
        uint64_t v26 = v22[1];
        unint64_t v29 = *(void *)v26;
        int v27 = (char *)v26 + 16;
        unint64_t v28 = v29;
        if (v29 >= 5 && *(_DWORD *)v27 == *(_DWORD *)"llvm." && v27[4] == aLlvm_1[4])
        {
          *((_DWORD *)v2 + 16) |= 0x2000u;
          int v31 = llvm::Function::lookupIntrinsicID(v27, v28);
LABEL_29:
          *((_DWORD *)v2 + 17) = v31;
          goto LABEL_8;
        }
LABEL_30:
        int v31 = 0;
        *((_DWORD *)v2 + 16) &= ~0x2000u;
        goto LABEL_29;
      }
      int v24 = 1;
      while (v23 != (llvm::Value *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        int v23 = *(llvm::Value **)(v19 + 16 * v21);
        if (v23 == v3)
        {
          uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
          goto LABEL_22;
        }
      }
    }
    uint64_t v22 = (llvm::Value **)(v19 + 16 * v20);
    goto LABEL_22;
  }
LABEL_8:
  *((_WORD *)v2 + 25) = *((_WORD *)v2 + 25) & 0xFF3F | *((_WORD *)this + 9) & 0xC0;
  return v2 + 32;
}

uint64_t ***llvm::LoadInst::cloneImpl(llvm::LoadInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this - 4);
  __int16 v28 = 257;
  unint64_t v7 = *((unsigned __int16 *)this + 9);
  char v8 = *((unsigned char *)this + 60);
  *((void *)v2 + 4) = v5;
  *((void *)v2 + 5) = 0;
  *((_WORD *)v2 + 24) = 60;
  *((_DWORD *)v2 + 13) = 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v6;
  *((void *)v2 + 1) = 0;
  if (v6)
  {
    uint64_t v11 = *(void *)(v6 + 8);
    unint64_t v9 = (void *)(v6 + 8);
    uint64_t v10 = v11;
    *((void *)v2 + 1) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v9;
    *unint64_t v9 = v2;
  }
  *((_WORD *)v2 + 25) = v7 & 0x381 | (2 * __clz(1 << (v7 >> 1))) ^ 0x7E;
  v2[92] = v8;
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v27);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v13 = ***v4;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      unint64_t v17 = (uint64_t ****)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v4)
      {
LABEL_14:
        uint64_t v21 = v17[1];
        unint64_t v24 = (unint64_t)*v21;
        uint64_t v22 = v21 + 2;
        unint64_t v23 = v24;
        if (v24 >= 5 && *(_DWORD *)v22 == *(_DWORD *)"llvm." && v22[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v26 = llvm::Function::lookupIntrinsicID(v22, v23);
LABEL_21:
          *((_DWORD *)v3 + 17) = v26;
          return v4;
        }
LABEL_22:
        int v26 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == v4)
        {
          unint64_t v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_14;
        }
      }
    }
    unint64_t v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_14;
  }
  return v4;
}

char *llvm::StoreInst::cloneImpl(llvm::StoreInst *this)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v3 = v2 + 32;
  uint64_t v4 = *((void *)this - 8);
  *((void *)v2 + 8) = ***(void ***)v4 + 1576;
  *((void *)v2 + 3) = v2 + 64;
  *((void *)v2 + 7) = v2 + 64;
  uint64_t v5 = *((void *)this - 4);
  __int16 v6 = *((_WORD *)this + 9);
  char v7 = *((unsigned char *)this + 60);
  *((void *)v2 + 9) = 0;
  v2[80] = 61;
  v2[81] = 0;
  *((_WORD *)v2 + 41) = 0;
  *((_DWORD *)v2 + 21) = 2;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  *(void *)uint64_t v2 = v4;
  uint64_t v10 = *(void *)(v4 + 8);
  char v8 = (void *)(v4 + 8);
  uint64_t v9 = v10;
  *((void *)v2 + 1) = v10;
  if (v10) {
    *(void *)(v9 + 16) = v2 + 8;
  }
  *((void *)v2 + 2) = v8;
  void *v8 = v2;
  if (*((void *)v2 + 4))
  {
    **((void **)v2 + 6) = *((void *)v2 + 5);
    uint64_t v15 = *((void *)v2 + 5);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)v2 + 6);
    }
  }
  *uint64_t v3 = v5;
  if (v5)
  {
    uint64_t v13 = *(void *)(v5 + 8);
    uint64_t v11 = (void *)(v5 + 8);
    uint64_t v12 = v13;
    *((void *)v2 + 5) = v13;
    if (v13) {
      *(void *)(v12 + 16) = v2 + 40;
    }
    *((void *)v2 + 6) = v11;
    *uint64_t v11 = v3;
  }
  *((_WORD *)v2 + 41) = v6 & 0x3FF;
  v2[124] = v7;
  return v2 + 64;
}

uint64_t llvm::AtomicCmpXchgInst::cloneImpl(llvm::AtomicCmpXchgInst *this)
{
  uint64_t v2 = operator new(0xA0uLL);
  uint64_t v3 = 0;
  uint64_t v4 = (uint64_t)(v2 + 24);
  v2[29] = v2[29] & 0x38000000 | 3;
  do
  {
    uint64_t v5 = &v2[v3];
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    v3 += 8;
  }
  while (v3 != 24);
  uint64_t result = llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v4, *((void *)this - 12), *((uint64_t ****)this - 8), *((void *)this - 4), HIBYTE(*((_WORD *)this + 9)) & 0x3F, (*((_WORD *)this + 9) >> 2) & 7, *((_WORD *)this + 9) >> 5, *((unsigned char *)this + 60), 0);
  *((_WORD *)v2 + 57) = *((_WORD *)v2 + 57) & 0xFFFC | *((_WORD *)this + 9) & 3;
  return result;
}

char *llvm::AtomicRMWInst::cloneImpl(llvm::AtomicRMWInst *this)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v3 = (uint64_t *)*((void *)this - 4);
  uint64_t v4 = *v3;
  *((_DWORD *)v2 + 21) = 2;
  *((void *)v2 + 8) = v4;
  uint64_t v5 = v2 + 64;
  *((void *)v2 + 3) = v2 + 64;
  *((void *)v2 + 7) = v2 + 64;
  LODWORD(v4) = *((unsigned __int16 *)this + 9);
  uint64_t v6 = *((void *)this - 8);
  char v7 = *((unsigned char *)this + 60);
  *((void *)v2 + 9) = 0;
  *((_DWORD *)v2 + 20) = 65;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  llvm::AtomicRMWInst::Init((uint64_t)(v2 + 64), v4 >> 4, v6, (uint64_t)v3, (v4 >> 8) & 0x3F, (v4 >> 1) & 7, v7);
  *((_WORD *)v5 + 9) = *((_WORD *)v5 + 9) & 0xFFFE | *((_WORD *)this + 9) & 1;
  return v5;
}

uint64_t ***llvm::TruncInst::cloneImpl(llvm::TruncInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000042;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::ZExtInst::cloneImpl(llvm::ZExtInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000043;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::SExtInst::cloneImpl(llvm::SExtInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000044;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::FPTruncInst::cloneImpl(llvm::FPTruncInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000049;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::FPExtInst::cloneImpl(llvm::FPExtInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x10000004ALL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::UIToFPInst::cloneImpl(llvm::UIToFPInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000047;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::SIToFPInst::cloneImpl(llvm::SIToFPInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000048;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::FPToUIInst::cloneImpl(llvm::FPToUIInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000045;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::FPToSIInst::cloneImpl(llvm::FPToSIInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x100000046;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::PtrToIntInst::cloneImpl(llvm::PtrToIntInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x10000004BLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::IntToPtrInst::cloneImpl(llvm::IntToPtrInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x10000004CLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::BitCastInst::cloneImpl(llvm::BitCastInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x10000004DLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

uint64_t ***llvm::AddrSpaceCastInst::cloneImpl(llvm::AddrSpaceCastInst *this)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t ***)(v2 + 32);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = *(void *)this;
  __int16 v26 = 257;
  *((void *)v2 + 4) = v6;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0x10000004ELL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    char v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    *((void *)v2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v2 + 8;
    }
    *((void *)v2 + 2) = v7;
    void *v7 = v2;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 32), &v25);
  if (!v3[48])
  {
    if ((v3[55] & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v11 = ***v4;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v4)
      {
LABEL_14:
        int v19 = v15[1];
        unint64_t v22 = (unint64_t)*v19;
        int v20 = v19 + 2;
        unint64_t v21 = v22;
        if (v22 >= 5 && *(_DWORD *)v20 == *(_DWORD *)"llvm." && v20[4] == aLlvm_1[4])
        {
          *((_DWORD *)v3 + 16) |= 0x2000u;
          int v24 = llvm::Function::lookupIntrinsicID(v20, v21);
LABEL_21:
          *((_DWORD *)v3 + 17) = v24;
          return v4;
        }
LABEL_22:
        int v24 = 0;
        *((_DWORD *)v3 + 16) &= ~0x2000u;
        goto LABEL_21;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v4)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_14;
  }
  return v4;
}

char *llvm::CallInst::cloneImpl(llvm::CallInst *this)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if (v2 < 0 && (*((void *)this - 4 * v3 - 1) & 0xFFFFFFFF0) != 0)
  {
    uint64_t v5 = llvm::User::operator new((llvm::User *)0x50, v3, *((_DWORD *)this - 8 * v3 - 2) & 0xFFFFFFF0);
  }
  else
  {
    uint64_t v4 = (char *)operator new(32 * v3 + 80);
    uint64_t v5 = &v4[32 * v3];
    *((_DWORD *)v5 + 5) = *((_DWORD *)v5 + 5) & 0x38000000 | v3;
    if (v3)
    {
      do
      {
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = v5;
        v4 += 32;
      }
      while (v4 != v5);
    }
  }
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  *(void *)uint64_t v5 = *(void *)this;
  *((void *)v5 + 1) = 0;
  v5[16] = 84;
  v5[17] = 0;
  *((_WORD *)v5 + 9) = 0;
  *((_DWORD *)v5 + 5) = *((_DWORD *)v5 + 5) & 0xC0000000 | v7;
  *((_DWORD *)v5 + 14) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *((void *)v5 + 8) = *((void *)this + 8);
  *((void *)v5 + 9) = v6;
  LOBYTE(v6) = *((_WORD *)this + 9);
  *((_WORD *)v5 + 9) = *((_WORD *)this + 9) & 3;
  *((_WORD *)v5 + 9) = *((_WORD *)this + 9) & 0xFFC | v6 & 3;
  sub_1CC5E4108((uint64_t)&v16, (uint64_t *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF), (uint64_t *)this, (uint64_t)&v5[-32 * v7]);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = *((_DWORD *)this + 5);
  if (v10 < 0)
  {
    uint64_t v14 = (char *)this - 32 * (v10 & 0x7FFFFFF);
    uint64_t v15 = *((void *)v14 - 1);
    uint64_t v9 = v14 - 8;
    uint64_t v8 = &v9[-v15];
  }
  int v11 = *((_DWORD *)v5 + 5);
  if (v11 < 0) {
    uint64_t v12 = &v5[-*(void *)&v5[-32 * (v11 & 0x7FFFFFF) - 8] - 8 + -32 * (v11 & 0x7FFFFFF)];
  }
  else {
    uint64_t v12 = 0;
  }
  if (v9 != v8) {
    memmove(v12, v8, v9 - v8);
  }
  v5[17] = *((unsigned char *)this + 17) & 0xFE | v5[17] & 1;
  return v5;
}

llvm::Value *llvm::SelectInst::cloneImpl(llvm::SelectInst *this)
{
  uint64_t v1 = *((void *)this - 12);
  int v2 = (uint64_t *)*((void *)this - 8);
  uint64_t v3 = *((void *)this - 4);
  __int16 v6 = 257;
  return sub_1CC199EFC(v1, v2, v3, &v5, 0, 0);
}

uint64_t ***llvm::ExtractElementInst::cloneImpl(llvm::ExtractElementInst *this)
{
  uint64_t v1 = (void *)*((void *)this - 8);
  uint64_t v2 = *((void *)this - 4);
  __int16 v27 = 257;
  uint64_t v3 = (char *)operator new(0x80uLL);
  uint64_t v4 = v3;
  *((_DWORD *)v3 + 21) = *((_DWORD *)v3 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = 0;
  *((void *)v3 + 8) = *(void *)(*v1 + 24);
  uint64_t v5 = (uint64_t ***)(v3 + 64);
  *((void *)v3 + 3) = v3 + 64;
  *((void *)v3 + 7) = v3 + 64;
  *((void *)v3 + 9) = 0;
  v3[80] = 89;
  v3[81] = 0;
  *((_WORD *)v3 + 41) = 0;
  *((_DWORD *)v3 + 21) = 2;
  *((_DWORD *)v3 + 30) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  __int16 v6 = v1 + 1;
  uint64_t v7 = v1[1];
  *(void *)uint64_t v3 = v1;
  *((void *)v3 + 1) = v7;
  if (v7) {
    *(void *)(v7 + 16) = v3 + 8;
  }
  *((void *)v3 + 2) = v6;
  *__int16 v6 = v3;
  *((void *)v3 + 4) = v2;
  if (v2)
  {
    uint64_t v10 = *(void *)(v2 + 8);
    uint64_t v9 = (void *)(v2 + 8);
    uint64_t v8 = v10;
    *((void *)v3 + 5) = v10;
    if (v10) {
      *(void *)(v8 + 16) = v3 + 40;
    }
    *((void *)v3 + 6) = v9;
    *uint64_t v9 = v3 + 32;
  }
  llvm::Value::setNameImpl((llvm::Value *)(v3 + 64), &v26);
  if (!v4[80])
  {
    if ((v4[87] & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v12 = ***v5;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      char v16 = (uint64_t ****)(v13 + 16 * v15);
      int v17 = *v16;
      if (*v16 == v5)
      {
LABEL_16:
        int v20 = v16[1];
        unint64_t v23 = (unint64_t)*v20;
        unint64_t v21 = v20 + 2;
        unint64_t v22 = v23;
        if (v23 >= 5 && *(_DWORD *)v21 == *(_DWORD *)"llvm." && v21[4] == aLlvm_1[4])
        {
          *((_DWORD *)v4 + 24) |= 0x2000u;
          int v25 = llvm::Function::lookupIntrinsicID(v21, v22);
LABEL_23:
          *((_DWORD *)v4 + 25) = v25;
          return v5;
        }
LABEL_24:
        int v25 = 0;
        *((_DWORD *)v4 + 24) &= ~0x2000u;
        goto LABEL_23;
      }
      int v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        int v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v5)
        {
          char v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_16;
        }
      }
    }
    char v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_16;
  }
  return v5;
}

llvm::InsertElementInst *llvm::InsertElementInst::cloneImpl(llvm::InsertElementInst *this)
{
  uint64_t v1 = (llvm::Value *)*((void *)this - 12);
  uint64_t v2 = (llvm::Value *)*((void *)this - 8);
  uint64_t v3 = (llvm::Value *)*((void *)this - 4);
  __int16 v10 = 257;
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t v5 = 0;
  __int16 v6 = (llvm::InsertElementInst *)(v4 + 24);
  v4[29] = v4[29] & 0x38000000 | 3;
  do
  {
    uint64_t v7 = &v4[v5];
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    v7[3] = v6;
    v5 += 8;
  }
  while (v5 != 24);
  return llvm::InsertElementInst::InsertElementInst(v6, v1, v2, v3, &v9, 0);
}

uint64_t ***llvm::ShuffleVectorInst::cloneImpl(llvm::ShuffleVectorInst *this)
{
  uint64_t v2 = (char *)operator new(0xA8uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 64;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = v2 + 64;
  uint64_t v3 = (uint64_t **)*((void *)this - 8);
  uint64_t v4 = (uint64_t **)*((void *)this - 4);
  uint64_t v5 = (void *)*((void *)this + 8);
  __int16 v6 = (llvm::Type *)*((unsigned int *)this + 18);
  __int16 v9 = 257;
  return llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v2 + 8, v3, v4, v5, v6, &v8, 0);
}

llvm::PHINode *llvm::PHINode::cloneImpl(llvm::PHINode *this)
{
  uint64_t v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v2 = 0;
  uint64_t v3 = (llvm::PHINode *)(v2 + 2);

  return llvm::PHINode::PHINode(v3, this);
}

uint64_t llvm::ReturnInst::cloneImpl(llvm::ReturnInst *this)
{
  uint64_t v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  uint64_t v3 = operator new(32 * v2 + 64);
  uint64_t v4 = (uint64_t)&v3[4 * v2];
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v4 + 20) & 0x38000000 | v2;
  if (v2)
  {
    do
    {
      *uint64_t v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != (void *)v4);
  }

  return llvm::ReturnInst::ReturnInst(v4, (uint64_t)this);
}

uint64_t llvm::BranchInst::cloneImpl(llvm::BranchInst *this)
{
  uint64_t v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  uint64_t v3 = operator new(32 * v2 + 64);
  uint64_t v4 = (uint64_t)&v3[4 * v2];
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v4 + 20) & 0x38000000 | v2;
  if (v2)
  {
    do
    {
      *uint64_t v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != (void *)v4);
  }

  return llvm::BranchInst::BranchInst(v4, this);
}

uint64_t llvm::SwitchInst::cloneImpl(llvm::SwitchInst *this)
{
  uint64_t v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v2 = 0;
  uint64_t v3 = (uint64_t)(v2 + 2);

  return llvm::SwitchInst::SwitchInst(v3, (uint64_t)this);
}

double llvm::UnreachableInst::cloneImpl(llvm::UnreachableInst *this)
{
  uint64_t v1 = **(void ***)this;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = *v1 + 1576;
  *((void *)v2 + 1) = 0;
  v2[16] = 35;
  double result = 0.0;
  *(_OWORD *)(v2 + 17) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  return result;
}

uint64_t *sub_1CC5E4108(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  double result = a3;
  uint64_t v5 = (void **)(a4 + 8);
  do
  {
    __int16 v6 = v5 - 1;
    uint64_t v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5) {
        (*v5)[2] = v5[1];
      }
    }
    *__int16 v6 = v7;
    if (v7)
    {
      __int16 v10 = *(void **)(v7 + 8);
      uint64_t v8 = (void *)(v7 + 8);
      __int16 v9 = v10;
      *uint64_t v5 = v10;
      if (v10) {
        uint64_t v9[2] = v5;
      }
      v5[1] = v8;
      void *v8 = v6;
    }
    a2 += 4;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

uint64_t sub_1CC5E4184()
{
  char v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Disables inttoptr/ptrtoint roundtrip optimization";
  *((void *)&v1 + 1) = 49;
  sub_1CD4540A0((uint64_t)&unk_1EBCD8818, "disable-i2p-p2i-opt", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD8818, &dword_1CB82C000);
}

uint64_t llvm::DbgVariableIntrinsic::location_ops@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  unint64_t v2 = *(void *)(*(void *)(this - 32 * (*(_DWORD *)(this + 20) & 0x7FFFFFF)) + 24);
  int v3 = *(unsigned __int8 *)v2;
  if ((v3 - 3) < 0xFFFFFFFE)
  {
    if (v3 == 32)
    {
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v5 = (v4 + 8 * *(unsigned int *)(v2 + 32)) | 4;
      *a2 = v4 | 4;
      a2[1] = v5;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
  }
  else
  {
    *a2 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    a2[1] = (v2 + 136) & 0xFFFFFFFFFFFFFFFBLL;
  }
  return this;
}

uint64_t llvm::DbgVariableIntrinsic::getVariableLocationOp(llvm::DbgVariableIntrinsic *this, unsigned int a2)
{
  uint64_t result = 0;
  uint64_t v4 = *(unsigned __int8 **)(*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
  int v5 = *v4;
  if ((v5 - 4) >= 0x1C && (v5 - 33) >= 2)
  {
    if (v5 == 32) {
      uint64_t v4 = *(unsigned __int8 **)(*((void *)v4 + 3) + 8 * a2);
    }
    return *((void *)v4 + 16);
  }
  return result;
}

void llvm::DbgVariableIntrinsic::replaceVariableLocationOp(uint64_t **this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  int v5 = this[-4 * v4];
  unint64_t v6 = v5[3];
  int v7 = *(unsigned __int8 *)v6;
  if ((v7 - 3) < 0xFFFFFFFE)
  {
    if (v7 == 32)
    {
      uint64_t v23 = *(void *)(v6 + 24);
      unint64_t v8 = v23 | 4;
      unint64_t v9 = (v23 + 8 * *(unsigned int *)(v6 + 32)) | 4;
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFBLL;
    unint64_t v9 = (v6 + 136) & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v10 = v8;
  if (v8 != v9)
  {
    unint64_t v10 = v8;
    do
    {
      int v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0) {
        unint64_t v12 = *v11;
      }
      if (*(llvm::Value **)(v12 + 128) == a2) {
        break;
      }
      uint64_t v24 = (unint64_t)(v11 + 1) | 4;
      int v25 = v11 + 17;
      unint64_t v10 = (v10 & 4) != 0 ? v24 : (unint64_t)v25;
    }
    while (v10 != v9);
  }
  if (v7 == 32)
  {
    unsigned int v37 = 0;
    if (*((unsigned char *)a3 + 16) == 23)
    {
      if (**((unsigned __int8 **)a3 + 3) - 1 >= 2) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *((void *)a3 + 3);
      }
    }
    else
    {
      uint64_t v26 = llvm::ValueAsMetadata::get(a3, a2);
    }
    if (v8 == v9)
    {
      unsigned int v32 = 0;
    }
    else
    {
      do
      {
        __int16 v27 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v28 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0) {
          unint64_t v28 = *v27;
        }
        unint64_t v29 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0) {
          unint64_t v29 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8);
        }
        uint64_t v30 = *(void *)(v28 + 128);
        uint64_t v31 = v26;
        if (v30 != *(void *)(v29 + 128))
        {
          if (*(unsigned char *)(v30 + 16) == 23)
          {
            if (**(unsigned __int8 **)(v30 + 24) - 1 >= 2) {
              uint64_t v31 = 0;
            }
            else {
              uint64_t v31 = *(void *)(v30 + 24);
            }
          }
          else
          {
            uint64_t v31 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v30, a2);
          }
        }
        if (v37 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v38[v37] = v31;
        unsigned int v32 = ++v37;
        uint64_t v33 = (unint64_t)(v27 + 1) | 4;
        if ((v8 & 4) == 0) {
          uint64_t v33 = (uint64_t)(v27 + 17);
        }
        unint64_t v8 = v33;
      }
      while (v33 != v9);
    }
    __int16 v34 = (void *)**this;
    Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(v34, v38, (const void *)v32, 0, 1);
    uint64_t v36 = llvm::MetadataAsValue::get((uint64_t)v34, Impl);
    LLVMSetArgOperand_0((uint64_t)this, 0, v36);
  }
  else
  {
    if (*((unsigned char *)a3 + 16) == 23)
    {
      uint64_t v16 = -v4;
    }
    else
    {
      uint64_t v13 = **this;
      uint64_t v14 = (unsigned __int8 *)llvm::ValueAsMetadata::get(a3, a2);
      a3 = (llvm::Value *)llvm::MetadataAsValue::get(v13, v14);
      uint64_t v15 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      uint64_t v16 = -v15;
      int v5 = this[-4 * v15];
    }
    int v17 = &this[4 * v16];
    if (v5)
    {
      *void v17[2] = (uint64_t)v17[1];
      int v18 = v17[1];
      if (v18) {
        v18[2] = (uint64_t)v17[2];
      }
    }
    unsigned char *v17 = (uint64_t *)a3;
    if (a3)
    {
      unint64_t v21 = (uint64_t *)*((void *)a3 + 1);
      int v19 = (uint64_t *)((char *)a3 + 8);
      int v20 = v21;
      unint64_t v22 = &this[4 * v16];
      v22[1] = v21;
      if (v21) {
        uint64_t v20[2] = (uint64_t)(v22 + 1);
      }
      v22[2] = v19;
      uint64_t *v19 = (uint64_t)v17;
    }
  }
}

{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 *Impl;
  uint64_t v17;
  unsigned int v18;
  void v19[5];
  uint64_t vars8;

  char v19[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)][3] == 32)
  {
    uint64_t v4 = a2;
    int v18 = 0;
    if (*((unsigned char *)a3 + 16) == 23)
    {
      if (**((unsigned __int8 **)a3 + 3) - 1 >= 2) {
        int v5 = 0;
      }
      else {
        int v5 = *((void *)a3 + 3);
      }
    }
    else
    {
      int v5 = llvm::ValueAsMetadata::get(a3, a2);
    }
    unint64_t v8 = 0;
    unint64_t v9 = v4;
    while (1)
    {
      unint64_t v10 = (unsigned __int8 *)this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)][3];
      int v11 = *v10;
      if (v11 == 32) {
        unint64_t v12 = *((unsigned int *)v10 + 8);
      }
      else {
        unint64_t v12 = 1;
      }
      if (v8 >= v12)
      {
        uint64_t v15 = (void *)**this;
        Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(v15, v19, (const void *)v18, 0, 1);
        int v17 = llvm::MetadataAsValue::get((uint64_t)v15, Impl);
        LLVMSetArgOperand_0((uint64_t)this, 0, v17);
        return;
      }
      uint64_t v13 = v5;
      if (v9 != v8) {
        break;
      }
LABEL_18:
      if (v18 >= 4uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v19[v18++] = v13;
      ++v8;
    }
    if (v11 == 32)
    {
      unint64_t v10 = *(unsigned __int8 **)(*((void *)v10 + 3) + 8 * v8);
    }
    else if (sub_1CB8F0DA8((unsigned char *)this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)][3]))
    {
      uint64_t v14 = 0;
LABEL_23:
      if (*(unsigned char *)(v14 + 16) == 23)
      {
        if (**(unsigned __int8 **)(v14 + 24) - 1 >= 2) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *(void *)(v14 + 24);
        }
      }
      else
      {
        uint64_t v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v14, a2);
      }
      goto LABEL_18;
    }
    uint64_t v14 = *((void *)v10 + 16);
    goto LABEL_23;
  }
  if (*((unsigned char *)a3 + 16) != 23)
  {
    unint64_t v6 = **this;
    int v7 = (unsigned __int8 *)llvm::ValueAsMetadata::get(a3, a2);
    a3 = (llvm::Value *)llvm::MetadataAsValue::get(v6, v7);
  }

  LLVMSetArgOperand_0((uint64_t)this, 0, (uint64_t)a3);
}

uint64_t llvm::Intrinsic::lookupLLVMIntrinsicByName(const char **a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  size_t v4 = a4;
  int v5 = a3;
  unint64_t v6 = a1;
  int v7 = &a1[a2];
  uint64_t v31 = v7;
  if (a4 < 5)
  {
    unint64_t v35 = a1;
    goto LABEL_33;
  }
  unint64_t v8 = 8 * a2;
  unint64_t v35 = a1;
  if (8 * a2 < 1) {
    goto LABEL_33;
  }
  uint64_t v9 = 4;
  unint64_t v10 = &a1[a2];
  unint64_t v6 = a1;
  do
  {
    if (v4 <= v9 + 1 || (int v11 = memchr(&v5[v9 + 1], 46, v4 - (v9 + 1))) == 0 || (v12 = v11 - v5, v11 - v5 == -1)) {
      size_t v12 = v4;
    }
    unint64_t v13 = v8 >> 3;
    uint64_t v14 = &v5[v9];
    size_t v15 = v12 - v9;
    unint64_t v35 = v6;
    while (1)
    {
      unint64_t v16 = v13 >> 1;
      int v17 = &v6[v13 >> 1];
      int v18 = &(*v17)[v9];
      if (strncmp(v18, v14, v12 - v9) < 0)
      {
        unint64_t v6 = v17 + 1;
        unint64_t v16 = v13 + ~v16;
        goto LABEL_12;
      }
      if ((strncmp(v14, v18, v12 - v9) & 0x80000000) == 0) {
        break;
      }
      unint64_t v10 = &v6[v13 >> 1];
LABEL_12:
      unint64_t v13 = v16;
      int v7 = v6;
      if (!v16) {
        goto LABEL_28;
      }
    }
    if (v13 >= 2)
    {
      do
      {
        int v19 = &v6[v16 >> 1];
        unint64_t v21 = *v19;
        int v20 = v19 + 1;
        int v22 = strncmp(&v21[v9], v14, v15);
        if (v22 >= 0) {
          v16 >>= 1;
        }
        else {
          v16 += ~(v16 >> 1);
        }
        if (v22 < 0) {
          unint64_t v6 = v20;
        }
      }
      while (v16);
    }
    int v7 = v17 + 1;
    if (v10 == v17 + 1)
    {
      int v7 = v10;
    }
    else
    {
      unint64_t v23 = v10 - (v17 + 1);
      do
      {
        uint64_t v24 = &v7[v23 >> 1];
        uint64_t v26 = *v24;
        int v25 = v24 + 1;
        if (strncmp(v14, &v26[v9], v15) < 0)
        {
          v23 >>= 1;
        }
        else
        {
          int v7 = v25;
          v23 += ~(v23 >> 1);
        }
      }
      while (v23);
    }
LABEL_28:
    size_t v4 = a4;
    if (v12 >= a4)
    {
      int v5 = a3;
      break;
    }
    unint64_t v8 = (char *)v7 - (char *)v6;
    unint64_t v10 = v7;
    uint64_t v9 = v12;
    int v5 = a3;
  }
  while ((char *)v7 - (char *)v6 > 0);
LABEL_33:
  if ((char *)v7 - (char *)v6 <= 0) {
    __int16 v27 = v35;
  }
  else {
    __int16 v27 = v6;
  }
  if (v27 != v31)
  {
    unint64_t v28 = *v27;
    if (!*v27)
    {
      if (!v4) {
        return (unint64_t)((char *)v27 - (char *)a1) >> 3;
      }
      size_t v29 = 0;
      goto LABEL_45;
    }
    size_t v29 = strlen(*v27);
    if (v4 == v29 && (!v4 || !memcmp(v5, v28, v4))) {
      return (unint64_t)((char *)v27 - (char *)a1) >> 3;
    }
    if (v4 >= v29 && (!v29 || !memcmp(v5, v28, v29)))
    {
LABEL_45:
      if (v5[v29] == 46) {
        return (unint64_t)((char *)v27 - (char *)a1) >> 3;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::ConstrainedFPIntrinsic::getRoundingMode(llvm::ConstrainedFPIntrinsic *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    uint64_t v2 = 0;
  }
  else if (v1 == 39)
  {
    uint64_t v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v2 = 2;
  }
  int v3 = 0;
  int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = -(uint64_t)(v4 & 0x7FFFFFF);
  if (v4 < 0)
  {
    size_t v12 = (char *)this - 32 * (v4 & 0x7FFFFFF);
    uint64_t v13 = *((void *)v12 - 1);
    if ((v13 & 0xFFFFFFFF0) != 0) {
      int v3 = *((_DWORD *)v12 - 3) - *(_DWORD *)&v12[-v13];
    }
    else {
      int v3 = 0;
    }
  }
  int v6 = 0;
  LOBYTE(v7) = 0;
  uint64_t v8 = *((void *)this
       + 4 * v5
       + 4 * ((-32 * v2 + 32 * (unint64_t)-v3 - 32 * v5 - 32) >> 5)
       - 8);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 16) == 23;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v7 = *(void *)(v8 + 24);
    if (v7)
    {
      if (*(unsigned char *)v7)
      {
        int v6 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        __int16 v11 = llvm::convertStrToRoundingMode((uint64_t *)(*(void *)(v7 + 8) + 24), **(void **)(v7 + 8));
        LOBYTE(v7) = v11;
        int v6 = HIBYTE(v11);
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  return v7 | (v6 << 8);
}

uint64_t llvm::ConstrainedFPIntrinsic::getExceptionBehavior(llvm::ConstrainedFPIntrinsic *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    uint64_t v2 = 0;
  }
  else if (v1 == 39)
  {
    uint64_t v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v2 = 2;
  }
  int v3 = 0;
  int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = -(uint64_t)(v4 & 0x7FFFFFF);
  if (v4 < 0)
  {
    size_t v12 = (char *)this - 32 * (v4 & 0x7FFFFFF);
    uint64_t v13 = *((void *)v12 - 1);
    if ((v13 & 0xFFFFFFFF0) != 0) {
      int v3 = *((_DWORD *)v12 - 3) - *(_DWORD *)&v12[-v13];
    }
    else {
      int v3 = 0;
    }
  }
  int v6 = 0;
  LOBYTE(v7) = 0;
  uint64_t v8 = *((void *)this
       + 4 * v5
       + 4 * ((-32 * v2 + 32 * (unint64_t)-v3 - 32 * v5 - 32) >> 5)
       - 4);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 16) == 23;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v7 = *(void *)(v8 + 24);
    if (v7)
    {
      if (*(unsigned char *)v7)
      {
        int v6 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        __int16 v11 = llvm::convertStrToExceptionBehavior((void *)(*(void *)(v7 + 8) + 24), **(void **)(v7 + 8));
        LOBYTE(v7) = v11;
        int v6 = HIBYTE(v11);
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  return v7 | (v6 << 8);
}

uint64_t sub_1CC5E4A64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 16;
  }
  if (*(unsigned char *)v1) {
    return 16;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)v2 != 3) {
    return 16;
  }
  if (*(_WORD *)(v2 + 24) == 25967 && *(unsigned char *)(v2 + 26) == 113) {
    return 1;
  }
  if (*(_WORD *)(v2 + 24) == 26479 && *(unsigned char *)(v2 + 26) == 116) {
    return 2;
  }
  if (*(_WORD *)(v2 + 24) == 26479 && *(unsigned char *)(v2 + 26) == 101) {
    return 3;
  }
  if (*(_WORD *)(v2 + 24) == 27759 && *(unsigned char *)(v2 + 26) == 116) {
    return 4;
  }
  if (*(_WORD *)(v2 + 24) == 27759 && *(unsigned char *)(v2 + 26) == 101) {
    return 5;
  }
  if (*(_WORD *)(v2 + 24) == 28271 && *(unsigned char *)(v2 + 26) == 101) {
    return 6;
  }
  if (*(_WORD *)(v2 + 24) == 29295 && *(unsigned char *)(v2 + 26) == 100) {
    return 7;
  }
  if (*(_WORD *)(v2 + 24) == 28277 && *(unsigned char *)(v2 + 26) == 111) {
    return 8;
  }
  if (*(_WORD *)(v2 + 24) == 25973 && *(unsigned char *)(v2 + 26) == 113) {
    return 9;
  }
  if (*(_WORD *)(v2 + 24) == 26485 && *(unsigned char *)(v2 + 26) == 116) {
    return 10;
  }
  if (*(_WORD *)(v2 + 24) == 26485 && *(unsigned char *)(v2 + 26) == 101) {
    return 11;
  }
  if (*(_WORD *)(v2 + 24) == 27765 && *(unsigned char *)(v2 + 26) == 116) {
    return 12;
  }
  if (*(_WORD *)(v2 + 24) == 27765 && *(unsigned char *)(v2 + 26) == 101) {
    return 13;
  }
  int v16 = *(unsigned __int16 *)(v2 + 24);
  int v17 = *(unsigned __int8 *)(v2 + 26);
  if (v16 != 28277 || v17 != 101) {
    return 16;
  }
  return 14;
}

BOOL llvm::ConstrainedFPIntrinsic::classof(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 - 32) + 36) - 79) < 0x28;
}

uint64_t llvm::VPIntrinsic::getMemoryPointerParamPos(llvm::VPIntrinsic *this)
{
  uint64_t v1 = 0x100000000;
  uint64_t v2 = 1;
  if ((int)this > 347)
  {
    if (this != 374 && this != 367)
    {
      if (this != 348) {
LABEL_9:
      }
        uint64_t v1 = 0;
LABEL_10:
      uint64_t v2 = 0;
    }
  }
  else
  {
    if (this == 136) {
      goto LABEL_10;
    }
    if (this != 137)
    {
      if (this != 345) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  return v2 | v1;
}

uint64_t llvm::VPIntrinsic::getMemoryPointerParam(llvm::VPIntrinsic *this)
{
  uint64_t v1 = 0;
  int v2 = *(_DWORD *)(*((void *)this - 4) + 36);
  uint64_t v3 = 1;
  if (v2 <= 347)
  {
    if (v2 != 136)
    {
      if (v2 == 137) {
        return *((void *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      if (v2 != 345) {
        return v1;
      }
    }
LABEL_9:
    uint64_t v3 = 0;
    return *((void *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  if (v2 == 374 || v2 == 367) {
    return *((void *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  if (v2 == 348) {
    goto LABEL_9;
  }
  return v1;
}

uint64_t llvm::VPIntrinsic::getMemoryDataParam(llvm::VPIntrinsic *this)
{
  int v1 = *(_DWORD *)(*((void *)this - 4) + 36);
  if (v1 == 137 || v1 == 374 || v1 == 367) {
    return *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  else {
    return 0;
  }
}

uint64_t llvm::VPIntrinsic::getMemoryDataParamPos(llvm::VPIntrinsic *this)
{
  int v1 = (int)this;
  uint64_t result = 0x100000000;
  if (v1 <= 347)
  {
    if (v1 == 137) {
      return result;
    }
    return 0;
  }
  if (v1 != 374 && v1 != 367) {
    return 0;
  }
  return result;
}

uint64_t llvm::VPIntrinsic::getForOpcode(llvm::VPIntrinsic *this)
{
  if ((this - 12) > 0x2D) {
    return 0;
  }
  else {
    return dword_1CFB1B598[(int)this - 12];
  }
}

uint64_t llvm::VPIntrinsic::getDeclarationForParams(uint64_t **a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2 > 338)
  {
    switch(a2)
    {
      case 339:
      case 340:
      case 341:
      case 342:
      case 347:
      case 353:
      case 370:
      case 372:
      case 376:
      case 378:
        goto LABEL_3;
      case 343:
      case 344:
      case 346:
      case 349:
      case 351:
      case 352:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 368:
      case 371:
      case 373:
      case 375:
      case 377:
        goto LABEL_10;
      case 345:
        uint64_t v10 = a3;
        uint64_t v11 = **a4;
        a2 = 345;
        goto LABEL_4;
      case 348:
        uint64_t v10 = a3;
        uint64_t v11 = **a4;
        a2 = 348;
        goto LABEL_4;
      case 350:
      case 369:
        goto LABEL_11;
      case 367:
        uint64_t v8 = a4[1];
        uint64_t v10 = **a4;
        uint64_t v11 = *v8;
        a2 = 367;
        goto LABEL_4;
      case 374:
        BOOL v9 = a4[1];
        uint64_t v10 = **a4;
        uint64_t v11 = *v9;
        a2 = 374;
        goto LABEL_4;
      default:
        if (a2 != 381) {
          goto LABEL_10;
        }
LABEL_3:
        uint64_t v10 = a3;
        uint64_t v11 = **a4;
LABEL_4:
        uint64_t v4 = 2;
        break;
    }
    return llvm::Intrinsic::getDeclaration(a1, a2, (uint64_t)&v10, v4);
  }
  if (a2 == 136)
  {
    uint64_t v10 = a3;
    uint64_t v11 = **a4;
    uint64_t v7 = a4[1];
    goto LABEL_18;
  }
  if (a2 == 137)
  {
    int v6 = a4[1];
    uint64_t v10 = **a4;
    uint64_t v11 = *v6;
    uint64_t v7 = a4[2];
LABEL_18:
    uint64_t v12 = *v7;
    uint64_t v4 = 3;
    return llvm::Intrinsic::getDeclaration(a1, a2, (uint64_t)&v10, v4);
  }
LABEL_10:
  uint64_t v10 = **a4;
  if ((a2 - 354) <= 0xC) {
LABEL_11:
  }
    uint64_t v10 = *a4[1];
  uint64_t v4 = 1;
  return llvm::Intrinsic::getDeclaration(a1, a2, (uint64_t)&v10, v4);
}

unint64_t llvm::VPReductionIntrinsic::getVectorParamPos(llvm::VPReductionIntrinsic *this)
{
  return ((this - 354) < 0xD) | ((unint64_t)((this - 354) < 0xD) << 32);
}

uint64_t llvm::VPCmpIntrinsic::getPredicate(llvm::VPCmpIntrinsic *this)
{
  int v1 = *(_DWORD *)(*((void *)this - 4) + 36);
  if (v1 == 346)
  {
    uint64_t v4 = *(void *)(((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8] + 24);
    if (v4 && !*(unsigned char *)v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (*(void *)v5 == 3)
      {
        BOOL v6 = *(_WORD *)(v5 + 24) == 26485 && *(unsigned char *)(v5 + 26) == 116;
        if (v6) {
          return 34;
        }
        if (*(_WORD *)(v5 + 24) == 26485 && *(unsigned char *)(v5 + 26) == 101) {
          return 35;
        }
        if (*(_WORD *)(v5 + 24) == 27765 && *(unsigned char *)(v5 + 26) == 116) {
          return 36;
        }
        if (*(_WORD *)(v5 + 24) == 27765 && *(unsigned char *)(v5 + 26) == 101) {
          return 37;
        }
        if (*(_WORD *)(v5 + 24) == 26483 && *(unsigned char *)(v5 + 26) == 116) {
          return 38;
        }
        if (*(_WORD *)(v5 + 24) == 26483 && *(unsigned char *)(v5 + 26) == 101) {
          return 39;
        }
        if (*(_WORD *)(v5 + 24) == 27763 && *(unsigned char *)(v5 + 26) == 116) {
          return 40;
        }
        int v13 = *(unsigned __int16 *)(v5 + 24);
        int v14 = *(unsigned __int8 *)(v5 + 26);
        if (v13 == 27763 && v14 == 101) {
          return 41;
        }
      }
      else if (*(void *)v5 == 2)
      {
        if (*(_WORD *)(v5 + 24) == 29029) {
          return 32;
        }
        if (*(_WORD *)(v5 + 24) == 25966) {
          return 33;
        }
      }
    }
    return 42;
  }
  BOOL v6 = v1 == 334;
  uint64_t v2 = 2;
  if (!v6) {
    uint64_t v2 = 0;
  }
  return sub_1CC5E4A64(*((void *)this + 4 * v2 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
}