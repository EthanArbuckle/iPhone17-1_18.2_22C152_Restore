llvm::raw_ostream *sub_1CC642868(llvm::raw_ostream *a1, llvm::Value *a2)
{
  llvm::raw_ostream *result;
  const char *v5;
  __int16 v6;

  v5 = "User-defined operators should not live outside of a pass!";
  v6 = 259;
  result = sub_1CD5DBE68(a1, (llvm::Twine *)&v5);
  if (*(void *)a1) {
    return sub_1CD5DBED0((llvm::raw_ostream **)a1, a2);
  }
  return result;
}

void sub_1CC6428C8(llvm::raw_ostream *a1, uint64_t a2)
{
  v3 = *(llvm::Value **)(a2 + 40);
  v4 = (void *)*((void *)v3 + 5);
  if (v4 == (void *)((char *)v3 + 40)
    || (v4 ? (v5 = v4 - 3) : (v5 = 0),
        v5 == (void *)a2 ? (BOOL v6 = *((unsigned __int8 *)v5 + 16) - 29 >= 0xB) : (BOOL v6 = 1),
        v6))
  {
    v7 = "Terminator found in the middle of a basic block!";
    __int16 v8 = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v7);
    if (*(void *)a1) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, v3);
    }
  }
  else
  {
    sub_1CC642980((uint64_t)a1, (uint64_t ***)a2);
  }
}

void sub_1CC642980(uint64_t a1, uint64_t ***a2)
{
  uint64_t v407 = *MEMORY[0x1E4F143B8];
  v4 = a2[5];
  if (!v4)
  {
    v7 = "Instruction not embedded in basic block!";
    goto LABEL_699;
  }
  if (*((unsigned char *)a2 + 16) != 83)
  {
    for (i = a2[1]; i; i = (uint64_t **)i[1])
    {
      if (i[3] == (uint64_t *)a2) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
      }
    }
  }
  int v6 = *((unsigned __int8 *)*a2 + 8);
  switch(v6)
  {
    case 7:
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
      {
        v7 = "Instruction has a name, but provides a void value!";
        goto LABEL_699;
      }
      break;
    case 9:
      int v8 = *((unsigned __int8 *)a2 + 16);
      if (v8 != 33 && v8 != 84)
      {
        v7 = "Invalid use of metadata!";
        goto LABEL_699;
      }
      break;
    case 14:
      v7 = "Instruction returns a non-scalar type!";
      goto LABEL_699;
  }
  v9 = a2[1];
  if (v9)
  {
    while (1)
    {
      uint64_t v10 = (uint64_t)v9[3];
      if (*(unsigned __int8 *)(v10 + 16) <= 0x1Bu) {
        uint64_t v10 = 0;
      }
      v398.i64[0] = v10;
      if (!v10) {
        break;
      }
      if (!*(void *)(v10 + 40))
      {
        __s1 = "Instruction referencing instruction not embedded in a basic block!";
        __int16 v406 = 259;
        v394 = (llvm::Value *)a2;
        sub_1CD5DBC00((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, &v394, (llvm::Value **)&v398);
        return;
      }
      v9 = (uint64_t **)v9[1];
      if (!v9) {
        goto LABEL_21;
      }
    }
    __s1 = "Use of instruction is not an instruction!";
    __int16 v406 = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
    if (!*(void *)a1) {
      return;
    }
    v147 = (llvm::Value *)*v9;
    if (!*v9) {
      return;
    }
    v148 = (llvm::raw_ostream **)a1;
LABEL_702:
    sub_1CD5DBED0(v148, v147);
    return;
  }
LABEL_21:
  unsigned int v11 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v12 = v11 > 0x33;
  uint64_t v13 = (1 << v11) & 0x8000000000041;
  BOOL v14 = v12 || v13 == 0;
  v15 = (llvm::Instruction *)a2;
  if (v14) {
    v15 = 0;
  }
  int v16 = *((_DWORD *)a2 + 5);
  uint64_t v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x7FFFFFF) != 0)
  {
    uint64_t v18 = 0;
    v19 = (llvm::Instruction *)((char *)v15 - 32);
    v20 = (llvm::Metadata *)(a1 + 292);
    v21 = (llvm::Metadata *)(a1 + 288);
    v22 = (llvm::DominatorTree *)(a1 + 200);
    v23 = "Instruction does not dominate all uses!";
    while (1)
    {
      int v24 = *((_DWORD *)a2 + 5);
      if ((v24 & 0x40000000) != 0) {
        v25 = (uint64_t ***)*(a2 - 1);
      }
      else {
        v25 = &a2[-4 * (v24 & 0x7FFFFFF)];
      }
      v26 = v25[4 * v18];
      if (!v26)
      {
        v7 = "Instruction has null operand!";
        goto LABEL_699;
      }
      int v27 = *((unsigned __int8 *)*v26 + 8);
      if (v27 == 14 || v27 == 7)
      {
        v7 = "Instruction operands must be first-class values!";
        goto LABEL_699;
      }
      if ((v24 & 0x40000000) != 0) {
        v29 = (uint64_t ***)*(a2 - 1);
      }
      else {
        v29 = &a2[-4 * (v24 & 0x7FFFFFF)];
      }
      v30 = v29[4 * v18];
      if (*((unsigned char *)v30 + 16)) {
        v31 = 0;
      }
      else {
        v31 = v30;
      }
      v401 = (llvm::Value *)v31;
      if (v31)
      {
        if ((*((unsigned char *)v31 + 33) & 0x20) == 0) {
          goto LABEL_45;
        }
        if (!v15) {
          goto LABEL_187;
        }
        v42 = (v24 & 0x40000000) != 0
            ? (llvm::Instruction *)*(a2 - 1)
            : (llvm::Instruction *)&a2[-4 * (v24 & 0x7FFFFFF)];
        if (v19 != (llvm::Instruction *)((char *)v42 + 32 * v18))
        {
          int v59 = *((_DWORD *)v15 + 5);
          if ((v59 & 0x80000000) == 0) {
            goto LABEL_187;
          }
          v60 = (char *)v15 - 32 * (v59 & 0x7FFFFFF);
          uint64_t v61 = *((void *)v60 - 1);
          if ((v61 & 0xFFFFFFFF0) == 0
            || *(_DWORD *)&v60[-v61] > v18
            || *((_DWORD *)v60 - 3) <= v18
            || (v390 = v20,
                v62 = v21,
                v63 = v22,
                BundleOpInfoForOperand = llvm::CallBase::getBundleOpInfoForOperand((char *)v15, v18),
                v23 = "Instruction does not dominate all uses!",
                v21 = v62,
                v20 = v390,
                *(_DWORD *)(*(void *)BundleOpInfoForOperand + 8) != 6))
          {
LABEL_187:
            v7 = "Cannot take the address of an intrinsic!";
            goto LABEL_699;
          }
          v22 = v63;
          if ((v31[4] & 0x2000) == 0) {
            goto LABEL_45;
          }
        }
        if (*((unsigned char *)a2 + 16) == 84) {
          goto LABEL_45;
        }
        int v44 = *((_DWORD *)v31 + 9);
        if (v44 > 265)
        {
          if ((v44 - 266) >= 4 && v44 != 11082) {
            goto LABEL_91;
          }
        }
        else
        {
          if (v44 <= 0x3C && ((1 << v44) & 0x1000100040000000) != 0) {
            goto LABEL_45;
          }
          unsigned int v46 = v44 - 124;
          BOOL v12 = v46 > 4;
          int v47 = (1 << v46) & 0x19;
          if (!v12 && v47 != 0) {
            goto LABEL_45;
          }
LABEL_91:
          int v50 = *((_DWORD *)v15 + 5);
          if ((v50 & 0x80000000) == 0) {
            goto LABEL_305;
          }
          v51 = (char *)v15 - 32 * (v50 & 0x7FFFFFF);
          uint64_t v52 = *((void *)v51 - 1);
          if ((v52 & 0xFFFFFFFF0) == 0) {
            goto LABEL_305;
          }
          if (*(_DWORD *)&v51[-v52] > v18) {
            goto LABEL_305;
          }
          if (*((_DWORD *)v51 - 3) <= v18) {
            goto LABEL_305;
          }
          v389 = v20;
          v53 = v21;
          v54 = v22;
          v55 = llvm::CallBase::getBundleOpInfoForOperand((char *)v15, v18);
          v23 = "Instruction does not dominate all uses!";
          v22 = v54;
          v21 = v53;
          v20 = v389;
          if (*(_DWORD *)(*(void *)v55 + 8) != 6)
          {
LABEL_305:
            v7 = "Cannot invoke an intrinsic other than donothing, patchpoint, statepoint, coro_resume, coro_destroy or c"
                 "lang.arc.attachedcall";
            goto LABEL_699;
          }
        }
LABEL_45:
        v32 = (llvm::Value *)v31[5];
        v33 = *(llvm::Value **)(a1 + 8);
        if (v32 != v33)
        {
          __s1 = "Referencing function in another module!";
          __int16 v406 = 259;
          v398.i64[0] = (uint64_t)a2;
          v393 = v32;
          v394 = v33;
          sub_1CD5DBC7C((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, (llvm::Value **)&v398, (uint64_t *)&v394, &v401, (uint64_t *)&v393);
          return;
        }
        goto LABEL_102;
      }
      if ((v24 & 0x40000000) != 0)
      {
        v36 = (llvm::Value *)(*(a2 - 1))[4 * v18];
        unsigned int v43 = *((unsigned __int8 *)v36 + 16);
        if (v36 && v43 == 22) {
          goto LABEL_67;
        }
        if (v43 == 21)
        {
LABEL_85:
          if (*((uint64_t **)v36 + 3) != v4[7])
          {
            v7 = "Referring to an argument in another function!";
            goto LABEL_699;
          }
          goto LABEL_102;
        }
        if (v43 >= 4) {
          v56 = 0;
        }
        else {
          v56 = (llvm::Value *)(*(a2 - 1))[4 * v18];
        }
        v393 = v56;
        if (v56)
        {
LABEL_101:
          uint64_t v57 = *((void *)v36 + 5);
          v58 = *(llvm::Value **)(a1 + 8);
          if ((llvm::Value *)v57 != v58)
          {
            __s1 = "Referencing global in another module!";
            __int16 v406 = 259;
            v398.i64[0] = (uint64_t)a2;
            v394 = v58;
            uint64_t v392 = v57;
            sub_1CD5DBC7C((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, (llvm::Value **)&v398, (uint64_t *)&v394, &v393, &v392);
            return;
          }
          goto LABEL_102;
        }
        v34 = (uint64_t ***)*(a2 - 1);
        v40 = (unsigned __int8 *)v34[4 * v18];
        unsigned int v41 = v40[16];
        if (v41 >= 0x1C) {
          goto LABEL_112;
        }
      }
      else
      {
        v34 = &a2[-4 * (v24 & 0x7FFFFFF)];
        v35 = (llvm::Value **)&v34[4 * v18];
        v36 = *v35;
        unsigned int v37 = *((unsigned __int8 *)*v35 + 16);
        if (*v35) {
          BOOL v38 = v37 == 22;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38)
        {
LABEL_67:
          if (*((uint64_t **)v36 + 7) != v4[7])
          {
            v7 = "Referring to a basic block in another function!";
            goto LABEL_699;
          }
          goto LABEL_102;
        }
        if (v37 == 21) {
          goto LABEL_85;
        }
        if (v37 >= 4) {
          v39 = 0;
        }
        else {
          v39 = *v35;
        }
        v393 = v39;
        if (v39) {
          goto LABEL_101;
        }
        v40 = (unsigned __int8 *)*v35;
        unsigned int v41 = *((unsigned __int8 *)*v35 + 16);
        if (v41 > 0x1B)
        {
LABEL_112:
          v398.i64[0] = (uint64_t)v40;
          if (v41 == 33 && *((void *)v40 - 12) == *((void *)v40 - 8)) {
            goto LABEL_102;
          }
          if (*((unsigned char *)a2 + 16) != 83)
          {
            uint64_t v66 = *(void *)(a1 + 272);
            uint64_t v65 = *(void *)(a1 + 280);
            if (v65 == v66)
            {
              uint64_t v67 = *(unsigned int *)v20;
              v68 = (unsigned __int8 **)(v65 + 8 * v67);
              if (v67)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 8 * v67;
                while (*(unsigned __int8 **)(v65 + v69) != v40)
                {
                  v69 += 8;
                  if (v70 == v69) {
                    goto LABEL_139;
                  }
                }
                v68 = (unsigned __int8 **)(v65 + v69);
              }
LABEL_139:
              uint64_t v66 = *(void *)(a1 + 280);
            }
            else
            {
              v72 = v23;
              uint64_t v73 = *(unsigned int *)v21;
              int v74 = v73 - 1;
              unsigned int v75 = (v73 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              v68 = (unsigned __int8 **)(v65 + 8 * v75);
              v76 = *v68;
              if (*v68 == (unsigned __int8 *)-1)
              {
                v77 = 0;
LABEL_141:
                if (v77) {
                  v68 = v77;
                }
                if (*v68 != v40) {
                  v68 = (unsigned __int8 **)(v65 + 8 * v73);
                }
              }
              else
              {
                v77 = 0;
                int v78 = 1;
                while (v76 != v40)
                {
                  if (v77) {
                    BOOL v79 = 0;
                  }
                  else {
                    BOOL v79 = v76 == (unsigned __int8 *)-2;
                  }
                  if (v79) {
                    v77 = v68;
                  }
                  unsigned int v80 = v75 + v78++;
                  unsigned int v75 = v80 & v74;
                  v68 = (unsigned __int8 **)(v65 + 8 * (v80 & v74));
                  v76 = *v68;
                  if (*v68 == (unsigned __int8 *)-1) {
                    goto LABEL_141;
                  }
                }
              }
              v23 = v72;
            }
            v84 = (unsigned int *)(v65 == v66 ? v20 : v21);
            if (v68 != (unsigned __int8 **)(v65 + 8 * *v84)) {
              goto LABEL_102;
            }
          }
          v82 = v21;
          v81 = v20;
          v85 = (v24 & 0x40000000) != 0
              ? (llvm::Instruction *)*(a2 - 1)
              : (llvm::Instruction *)&a2[-4 * (v24 & 0x7FFFFFF)];
          v83 = v22;
          char v86 = llvm::DominatorTree::dominates(v22, (const llvm::Value *)v40, (llvm::Instruction *)((char *)v85 + 32 * v18));
          v22 = v83;
          v20 = v81;
          v21 = v82;
          v23 = "Instruction does not dominate all uses!";
          if (v86) {
            goto LABEL_102;
          }
          __s1 = "Instruction does not dominate all uses!";
          __int16 v406 = 259;
          v394 = (llvm::Value *)a2;
          sub_1CD5DBC00((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, (llvm::Value **)&v398, &v394);
          goto LABEL_155;
        }
      }
      if (v41 == 24)
      {
        if (!v15 || v19 != (llvm::Instruction *)&v34[4 * v18])
        {
          v7 = "Cannot take the address of an inline asm!";
          goto LABEL_699;
        }
        goto LABEL_102;
      }
      if (v41 == 5)
      {
        int v71 = (*(_DWORD *)(*(void *)v40 + 8) & 0xFE) == 0x12
            ? *(unsigned __int8 *)(**(void **)(*(void *)v40 + 16) + 8)
            : *(_DWORD *)(*(void *)v40 + 8);
        if (v71 == 15)
        {
          v81 = v20;
          v82 = v21;
          v83 = v22;
          sub_1CC6450AC(a1, (llvm::Value *)v40);
LABEL_155:
          v23 = "Instruction does not dominate all uses!";
          v22 = v83;
          v21 = v82;
          v20 = v81;
        }
      }
LABEL_102:
      if (++v18 == v17)
      {
        int v16 = *((_DWORD *)a2 + 5);
        break;
      }
    }
  }
  unsigned int v87 = a2 >> 4;
  if ((v16 & 0x20000000) != 0)
  {
    uint64_t v88 = ***a2;
    __s1 = a2;
    int v89 = *(_DWORD *)(v88 + 2496);
    if (v89)
    {
      uint64_t v90 = *(void *)(v88 + 2480);
      int v91 = v89 - 1;
      unsigned int v92 = v91 & (v87 ^ (a2 >> 9));
      v93 = (llvm::Instruction **)(v90 + 40 * v92);
      v94 = *v93;
      if (*v93 == (llvm::Instruction *)a2) {
        goto LABEL_167;
      }
      v95 = 0;
      int v96 = 1;
      while (v94 != (llvm::Instruction *)-4096)
      {
        if (v95) {
          BOOL v97 = 0;
        }
        else {
          BOOL v97 = v94 == (llvm::Instruction *)-8192;
        }
        if (v97) {
          v95 = v93;
        }
        unsigned int v98 = v92 + v96++;
        unsigned int v92 = v98 & v91;
        v93 = (llvm::Instruction **)(v90 + 40 * v92);
        v94 = *v93;
        if (*v93 == (llvm::Instruction *)a2) {
          goto LABEL_167;
        }
      }
      if (v95) {
        v153 = v95;
      }
      else {
        v153 = v93;
      }
    }
    else
    {
      v153 = 0;
    }
    v93 = (llvm::Instruction **)sub_1CC609054(v88 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v153);
    v154 = (llvm::Instruction *)__s1;
    v93[3] = 0;
    v93[4] = 0;
    *v93 = v154;
    v93[1] = (llvm::Instruction *)(v93 + 3);
    v93[2] = (llvm::Instruction *)0x100000000;
LABEL_167:
    uint64_t v99 = *((unsigned int *)v93 + 4);
    if (v99)
    {
      v100 = (void *)((char *)v93[1] + 8);
      uint64_t v101 = 16 * v99;
      while (*((_DWORD *)v100 - 2) != 3)
      {
        v100 += 2;
        v101 -= 16;
        if (!v101) {
          goto LABEL_171;
        }
      }
      uint64_t v116 = *v100;
      if (v116)
      {
        if (((*a2)[1] & 0xFE) == 0x12) {
          unsigned int v117 = *(unsigned __int8 *)(*(*a2)[2] + 8);
        }
        else {
          unsigned int v117 = *((_DWORD *)*a2 + 2);
        }
        if (v117 >= 7)
        {
          v7 = "fpmath requires a floating point result!";
          goto LABEL_699;
        }
        if (*(_DWORD *)(v116 + 8) != 1)
        {
          v7 = "fpmath takes one operand!";
          goto LABEL_699;
        }
        uint64_t v149 = *(void *)(v116 - 8);
        if (!v149 || *(unsigned char *)v149 != 1 || (uint64_t v150 = *(void *)(v149 + 128), *(unsigned char *)(v150 + 16) != 17))
        {
          v7 = "invalid fpmath accuracy!";
          goto LABEL_699;
        }
        if (*(_UNKNOWN **)(v150 + 32) != &unk_1CFB2E308)
        {
          v7 = "fpmath accuracy must have float type";
          goto LABEL_699;
        }
        char v151 = *(unsigned char *)(v150 + 52);
        BOOL v152 = (v151 & 7u) > 3 || (v151 & 7) == 2;
        if (!v152 || (v151 & 8) != 0)
        {
          v7 = "fpmath accuracy not a positive number!";
          goto LABEL_699;
        }
      }
    }
  }
LABEL_171:
  if ((*((_DWORD *)a2 + 5) & 0x20000000) == 0) {
    goto LABEL_341;
  }
  uint64_t v102 = ***a2;
  __s1 = a2;
  int v103 = *(_DWORD *)(v102 + 2496);
  if (!v103)
  {
    v155 = 0;
LABEL_297:
    v107 = (llvm::Instruction **)sub_1CC609054(v102 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v155);
    v156 = (llvm::Instruction *)__s1;
    v107[3] = 0;
    v107[4] = 0;
    *v107 = v156;
    v107[1] = (llvm::Instruction *)(v107 + 3);
    v107[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_182;
  }
  uint64_t v104 = *(void *)(v102 + 2480);
  int v105 = v103 - 1;
  unsigned int v106 = v105 & (v87 ^ (a2 >> 9));
  v107 = (llvm::Instruction **)(v104 + 40 * v106);
  v108 = *v107;
  if (*v107 != (llvm::Instruction *)a2)
  {
    v109 = 0;
    int v110 = 1;
    while (v108 != (llvm::Instruction *)-4096)
    {
      if (v109) {
        BOOL v111 = 0;
      }
      else {
        BOOL v111 = v108 == (llvm::Instruction *)-8192;
      }
      if (v111) {
        v109 = v107;
      }
      unsigned int v112 = v106 + v110++;
      unsigned int v106 = v112 & v105;
      v107 = (llvm::Instruction **)(v104 + 40 * v106);
      v108 = *v107;
      if (*v107 == (llvm::Instruction *)a2) {
        goto LABEL_182;
      }
    }
    if (v109) {
      v155 = v109;
    }
    else {
      v155 = v107;
    }
    goto LABEL_297;
  }
LABEL_182:
  uint64_t v113 = *((unsigned int *)v107 + 4);
  if (!v113) {
    goto LABEL_341;
  }
  v114 = (unsigned int **)((char *)v107[1] + 8);
  uint64_t v115 = 16 * v113;
  while (*((_DWORD *)v114 - 2) != 4)
  {
    v114 += 2;
    v115 -= 16;
    if (!v115) {
      goto LABEL_341;
    }
  }
  v118 = *v114;
  if (!*v114) {
    goto LABEL_341;
  }
  unsigned int v119 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v12 = v119 > 0x33;
  uint64_t v120 = (1 << v119) & 0x8000008000001;
  if (v12 || v120 == 0)
  {
    v7 = "Ranges are only for loads, calls and invokes!";
    goto LABEL_699;
  }
  unint64_t v122 = v118[2];
  if (v122)
  {
    v169 = "Unfinished range!";
    goto LABEL_334;
  }
  if (v122 <= 1)
  {
    v169 = "It should have at least one range!";
LABEL_334:
    __s1 = v169;
    __int16 v406 = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
    if (*(void *)a1) {
      sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v118);
    }
    goto LABEL_341;
  }
  unsigned int v386 = v118[2];
  uint64_t v123 = 0;
  unint64_t v387 = v122 >> 1;
  v388 = *a2;
  v398.i32[2] = 1;
  v398.i64[0] = 1;
  unsigned int v400 = 1;
  uint64_t v399 = 1;
  v391 = v118;
  do
  {
    v124 = &v118[-2 * v118[2]];
    uint64_t v125 = *(void *)&v124[4 * v123];
    if (*(unsigned char *)v125 != 1 || (uint64_t v126 = *(void *)(v125 + 128), *(unsigned char *)(v126 + 16) != 16))
    {
      v170 = "The lower limit must be an integer!";
LABEL_338:
      __s1 = v170;
      __int16 v406 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
      goto LABEL_339;
    }
    uint64_t v127 = *(void *)((char *)v124 + ((16 * v123) | 8));
    if (*(unsigned char *)v127 != 1 || (uint64_t v128 = *(void *)(v127 + 128), *(unsigned char *)(v128 + 16) != 16))
    {
      v170 = "The upper limit must be an integer!";
      goto LABEL_338;
    }
    if (*(uint64_t ***)v128 != v388 || *(void *)v128 != *(void *)v126)
    {
      __s1 = "Range types must match instruction type!";
      __int16 v406 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
      if (*(void *)a1) {
        sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a2);
      }
      goto LABEL_339;
    }
    unsigned int v130 = *(_DWORD *)(v128 + 32);
    if (v130 > 0x40) {
      operator new[]();
    }
    uint64_t v131 = *(void *)(v128 + 24);
    unsigned __int32 v132 = *(_DWORD *)(v126 + 32);
    if (v132 > 0x40) {
      operator new[]();
    }
    v133 = *(llvm::Value **)(v126 + 24);
    uint64_t v134 = (uint64_t)v133;
    unsigned int v395 = v132;
    v394 = v133;
    unsigned int v397 = v130;
    uint64_t v396 = v131;
    if (!(v131 | (unint64_t)v133)
      || v133 == (llvm::Value *)v131
      && (v132 ? (BOOL v142 = v133 == (llvm::Value *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v132)) : (BOOL v142 = 1), v142))
    {
      v140 = "Range must not be empty!";
      goto LABEL_231;
    }
    if (v123)
    {
      llvm::ConstantRange::intersectWith((uint64_t)&v394, (llvm::ConstantRange *)&v398, 0, (uint64_t)&__s1);
      uint64_t v135 = v403;
      if (v403 <= 0x40)
      {
        v136 = __s2;
        BOOL v137 = ((unint64_t)__s2 | (unint64_t)__s1) == 0;
        goto LABEL_219;
      }
      v136 = __s2;
      v385 = __s1;
      if (!memcmp(__s1, __s2, (((unint64_t)v403 + 63) >> 3) & 0x3FFFFFF8))
      {
        int v143 = 0;
        int64_t v144 = (unint64_t)(v135 + 63) >> 6;
        do
        {
          BOOL v12 = v144-- < 1;
          if (v12) {
            break;
          }
          unint64_t v145 = v385[v144];
          v143 += __clz(v145);
        }
        while (!v145);
        int v146 = v135 | 0xFFFFFFC0;
        if ((v135 & 0x3F) == 0) {
          int v146 = 0;
        }
        BOOL v137 = v143 + v146 == v135;
LABEL_219:
        char v138 = v137;
      }
      else
      {
        char v138 = 0;
      }
      if (v405 >= 0x41 && v136 != 0)
      {
        MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
        LODWORD(v135) = v403;
      }
      if (v135 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      if ((v138 & 1) == 0)
      {
        v140 = "Intervals are overlapping";
        goto LABEL_231;
      }
      if (v134 << -(char)v132 >> -(char)v132 <= v398.i64[0] << -(char)v132 >> -(char)v132)
      {
        v140 = "Intervals are not in order";
LABEL_231:
        __s1 = v140;
        __int16 v406 = 259;
        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
        if (*(void *)a1) {
          sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v391);
        }
        char v141 = 0;
        goto LABEL_245;
      }
      if (sub_1CC64567C((uint64_t)&v394, (const void **)&v398))
      {
        v140 = "Intervals are contiguous";
        goto LABEL_231;
      }
    }
    if (v398.i32[2] >= 0x41u && v398.i64[0]) {
      MEMORY[0x1D25D9CB0](v398.i64[0], 0x1000C8000313F17);
    }
    v398.i64[0] = v134;
    v398.i32[2] = v132;
    if (v400 >= 0x41 && v399) {
      MEMORY[0x1D25D9CB0](v399, 0x1000C8000313F17);
    }
    uint64_t v399 = v131;
    unsigned int v400 = v130;
    char v141 = 1;
LABEL_245:
    if (v397 >= 0x41 && v396) {
      MEMORY[0x1D25D9CB0](v396, 0x1000C8000313F17);
    }
    if (v395 >= 0x41 && v394) {
      MEMORY[0x1D25D9CB0](v394, 0x1000C8000313F17);
    }
    v118 = v391;
    if ((v141 & 1) == 0) {
      goto LABEL_339;
    }
    ++v123;
  }
  while (v123 != v387);
  if (v386 < 6) {
    goto LABEL_339;
  }
  uint64_t v157 = v391[2];
  if (*(unsigned char *)(*(void *)(*(void *)&v391[-2 * v157] + 128) + 16) == 16) {
    uint64_t v158 = *(void *)(*(void *)&v391[-2 * v157] + 128);
  }
  else {
    uint64_t v158 = 0;
  }
  if (*(_DWORD *)(v158 + 32) > 0x40u) {
    operator new[]();
  }
  v159 = *(llvm::Value **)(v158 + 24);
  uint64_t v160 = *(void *)(*(void *)&v391[-2 * v157 + 2] + 128);
  if (*(unsigned char *)(v160 + 16) == 16) {
    uint64_t v161 = v160;
  }
  else {
    uint64_t v161 = 0;
  }
  unsigned int v162 = *(_DWORD *)(v161 + 32);
  if (v162 > 0x40) {
    operator new[]();
  }
  uint64_t v163 = *(void *)(v161 + 24);
  unsigned int v395 = *(_DWORD *)(v158 + 32);
  v394 = v159;
  unsigned int v397 = v162;
  uint64_t v396 = v163;
  llvm::ConstantRange::intersectWith((uint64_t)&v394, (llvm::ConstantRange *)&v398, 0, (uint64_t)&__s1);
  uint64_t v164 = v403;
  if (v403 <= 0x40)
  {
    v165 = __s2;
    BOOL v166 = ((unint64_t)__s2 | (unint64_t)__s1) == 0;
    goto LABEL_316;
  }
  v380 = __s1;
  v165 = __s2;
  if (!memcmp(__s1, __s2, (((unint64_t)v403 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v381 = 0;
    int64_t v382 = (unint64_t)(v164 + 63) >> 6;
    do
    {
      BOOL v12 = v382-- < 1;
      if (v12) {
        break;
      }
      unint64_t v383 = v380[v382];
      v381 += __clz(v383);
    }
    while (!v383);
    int v384 = v164 | 0xFFFFFFC0;
    if ((v164 & 0x3F) == 0) {
      int v384 = 0;
    }
    BOOL v166 = v381 + v384 == v164;
LABEL_316:
    char v167 = v166;
  }
  else
  {
    char v167 = 0;
  }
  if (v405 >= 0x41 && v165 != 0)
  {
    MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
    LODWORD(v164) = v403;
  }
  if (v164 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  if (v167)
  {
    if (!sub_1CC64567C((uint64_t)&v394, (const void **)&v398)) {
      goto LABEL_327;
    }
    v378 = "Intervals are contiguous";
  }
  else
  {
    v378 = "Intervals are overlapping";
  }
  __s1 = v378;
  __int16 v406 = 259;
  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
  if (*(void *)a1) {
    sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v391);
  }
LABEL_327:
  if (v397 >= 0x41 && v396) {
    MEMORY[0x1D25D9CB0](v396, 0x1000C8000313F17);
  }
  if (v395 >= 0x41 && v394) {
    MEMORY[0x1D25D9CB0](v394, 0x1000C8000313F17);
  }
LABEL_339:
  if (v400 >= 0x41 && v399) {
    MEMORY[0x1D25D9CB0](v399, 0x1000C8000313F17);
  }
  unsigned int v87 = a2 >> 4;
  if (v398.i32[2] >= 0x41u && v398.i64[0]) {
    MEMORY[0x1D25D9CB0](v398.i64[0], 0x1000C8000313F17);
  }
LABEL_341:
  if ((*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v171 = ***a2;
    __s1 = a2;
    int v172 = *(_DWORD *)(v171 + 2496);
    if (!v172)
    {
      v350 = 0;
      goto LABEL_609;
    }
    uint64_t v173 = *(void *)(v171 + 2480);
    int v174 = v172 - 1;
    unsigned int v175 = v174 & (v87 ^ (a2 >> 9));
    v176 = (llvm::Instruction **)(v173 + 40 * v175);
    v177 = *v176;
    if (*v176 != (llvm::Instruction *)a2)
    {
      v178 = 0;
      int v179 = 1;
      while (v177 != (llvm::Instruction *)-4096)
      {
        if (v178) {
          BOOL v180 = 0;
        }
        else {
          BOOL v180 = v177 == (llvm::Instruction *)-8192;
        }
        if (v180) {
          v178 = v176;
        }
        unsigned int v181 = v175 + v179++;
        unsigned int v175 = v181 & v174;
        v176 = (llvm::Instruction **)(v173 + 40 * v175);
        v177 = *v176;
        if (*v176 == (llvm::Instruction *)a2) {
          goto LABEL_352;
        }
      }
      if (v178) {
        v350 = v178;
      }
      else {
        v350 = v176;
      }
LABEL_609:
      v176 = (llvm::Instruction **)sub_1CC609054(v171 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v350);
      v351 = (llvm::Instruction *)__s1;
      v176[3] = 0;
      v176[4] = 0;
      *v176 = v351;
      v176[1] = (llvm::Instruction *)(v176 + 3);
      v176[2] = (llvm::Instruction *)0x100000000;
    }
LABEL_352:
    uint64_t v182 = *((unsigned int *)v176 + 4);
    if (v182)
    {
      v183 = (void *)((char *)v176[1] + 8);
      uint64_t v184 = 16 * v182;
      while (*((_DWORD *)v183 - 2) != 16)
      {
        v183 += 2;
        v184 -= 16;
        if (!v184) {
          goto LABEL_359;
        }
      }
      if (*v183 && ((_BYTE)a2[2] & 0xFE) != 0x3C)
      {
        v7 = "invariant.group metadata is only for loads and stores";
        goto LABEL_699;
      }
    }
  }
LABEL_359:
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_378;
  }
  uint64_t v185 = ***a2;
  __s1 = a2;
  int v186 = *(_DWORD *)(v185 + 2496);
  if (!v186)
  {
    v352 = 0;
    goto LABEL_613;
  }
  uint64_t v187 = *(void *)(v185 + 2480);
  int v188 = v186 - 1;
  unsigned int v189 = v188 & (v87 ^ (a2 >> 9));
  v190 = (llvm::Instruction **)(v187 + 40 * v189);
  v191 = *v190;
  if (*v190 != (llvm::Instruction *)a2)
  {
    v192 = 0;
    int v193 = 1;
    while (v191 != (llvm::Instruction *)-4096)
    {
      if (v192) {
        BOOL v194 = 0;
      }
      else {
        BOOL v194 = v191 == (llvm::Instruction *)-8192;
      }
      if (v194) {
        v192 = v190;
      }
      unsigned int v195 = v189 + v193++;
      unsigned int v189 = v195 & v188;
      v190 = (llvm::Instruction **)(v187 + 40 * v189);
      v191 = *v190;
      if (*v190 == (llvm::Instruction *)a2) {
        goto LABEL_370;
      }
    }
    if (v192) {
      v352 = v192;
    }
    else {
      v352 = v190;
    }
LABEL_613:
    v190 = (llvm::Instruction **)sub_1CC609054(v185 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v352);
    v353 = (llvm::Instruction *)__s1;
    v190[3] = 0;
    v190[4] = 0;
    *v190 = v353;
    v190[1] = (llvm::Instruction *)(v190 + 3);
    v190[2] = (llvm::Instruction *)0x100000000;
  }
LABEL_370:
  uint64_t v196 = *((unsigned int *)v190 + 4);
  if (!v196) {
    goto LABEL_378;
  }
  v197 = (void *)((char *)v190[1] + 8);
  uint64_t v198 = 16 * v196;
  while (*((_DWORD *)v197 - 2) != 11)
  {
    v197 += 2;
    v198 -= 16;
    if (!v198) {
      goto LABEL_378;
    }
  }
  if (!*v197)
  {
LABEL_378:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_396;
    }
    uint64_t v199 = ***a2;
    __s1 = a2;
    int v200 = *(_DWORD *)(v199 + 2496);
    if (v200)
    {
      uint64_t v201 = *(void *)(v199 + 2480);
      int v202 = v200 - 1;
      unsigned int v203 = v202 & (v87 ^ (a2 >> 9));
      v204 = (llvm::Instruction **)(v201 + 40 * v203);
      v205 = *v204;
      if (*v204 == (llvm::Instruction *)a2) {
        goto LABEL_389;
      }
      v206 = 0;
      int v207 = 1;
      while (v205 != (llvm::Instruction *)-4096)
      {
        if (v206) {
          BOOL v208 = 0;
        }
        else {
          BOOL v208 = v205 == (llvm::Instruction *)-8192;
        }
        if (v208) {
          v206 = v204;
        }
        unsigned int v209 = v203 + v207++;
        unsigned int v203 = v209 & v202;
        v204 = (llvm::Instruction **)(v201 + 40 * v203);
        v205 = *v204;
        if (*v204 == (llvm::Instruction *)a2) {
          goto LABEL_389;
        }
      }
      if (v206) {
        v354 = v206;
      }
      else {
        v354 = v204;
      }
    }
    else
    {
      v354 = 0;
    }
    v204 = (llvm::Instruction **)sub_1CC609054(v199 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v354);
    v355 = (llvm::Instruction *)__s1;
    v204[3] = 0;
    v204[4] = 0;
    *v204 = v355;
    v204[1] = (llvm::Instruction *)(v204 + 3);
    v204[2] = (llvm::Instruction *)0x100000000;
LABEL_389:
    uint64_t v210 = *((unsigned int *)v204 + 4);
    if (v210)
    {
      v211 = (uint64_t *)((char *)v204[1] + 8);
      uint64_t v212 = 16 * v210;
      while (*((_DWORD *)v211 - 2) != 12)
      {
        v211 += 2;
        v212 -= 16;
        if (!v212) {
          goto LABEL_396;
        }
      }
      if (*v211) {
        sub_1CC645590((llvm::raw_ostream *)a1, (unsigned __int8 *)a2, *v211);
      }
    }
LABEL_396:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_414;
    }
    uint64_t v213 = ***a2;
    __s1 = a2;
    int v214 = *(_DWORD *)(v213 + 2496);
    if (v214)
    {
      uint64_t v215 = *(void *)(v213 + 2480);
      int v216 = v214 - 1;
      unsigned int v217 = v216 & (v87 ^ (a2 >> 9));
      v218 = (llvm::Instruction **)(v215 + 40 * v217);
      v219 = *v218;
      if (*v218 == (llvm::Instruction *)a2) {
        goto LABEL_407;
      }
      v220 = 0;
      int v221 = 1;
      while (v219 != (llvm::Instruction *)-4096)
      {
        if (v220) {
          BOOL v222 = 0;
        }
        else {
          BOOL v222 = v219 == (llvm::Instruction *)-8192;
        }
        if (v222) {
          v220 = v218;
        }
        unsigned int v223 = v217 + v221++;
        unsigned int v217 = v223 & v216;
        v218 = (llvm::Instruction **)(v215 + 40 * v217);
        v219 = *v218;
        if (*v218 == (llvm::Instruction *)a2) {
          goto LABEL_407;
        }
      }
      if (v220) {
        v356 = v220;
      }
      else {
        v356 = v218;
      }
    }
    else
    {
      v356 = 0;
    }
    v218 = (llvm::Instruction **)sub_1CC609054(v213 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v356);
    v357 = (llvm::Instruction *)__s1;
    v218[3] = 0;
    v218[4] = 0;
    *v218 = v357;
    v218[1] = (llvm::Instruction *)(v218 + 3);
    v218[2] = (llvm::Instruction *)0x100000000;
LABEL_407:
    uint64_t v224 = *((unsigned int *)v218 + 4);
    if (v224)
    {
      v225 = (uint64_t *)((char *)v218[1] + 8);
      uint64_t v226 = 16 * v224;
      while (*((_DWORD *)v225 - 2) != 13)
      {
        v225 += 2;
        v226 -= 16;
        if (!v226) {
          goto LABEL_414;
        }
      }
      if (*v225) {
        sub_1CC645590((llvm::raw_ostream *)a1, (unsigned __int8 *)a2, *v225);
      }
    }
LABEL_414:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_432;
    }
    uint64_t v227 = ***a2;
    __s1 = a2;
    int v228 = *(_DWORD *)(v227 + 2496);
    if (v228)
    {
      uint64_t v229 = *(void *)(v227 + 2480);
      int v230 = v228 - 1;
      unsigned int v231 = v230 & (v87 ^ (a2 >> 9));
      v232 = (llvm::Instruction **)(v229 + 40 * v231);
      v233 = *v232;
      if (*v232 == (llvm::Instruction *)a2) {
        goto LABEL_425;
      }
      v234 = 0;
      int v235 = 1;
      while (v233 != (llvm::Instruction *)-4096)
      {
        if (v234) {
          BOOL v236 = 0;
        }
        else {
          BOOL v236 = v233 == (llvm::Instruction *)-8192;
        }
        if (v236) {
          v234 = v232;
        }
        unsigned int v237 = v231 + v235++;
        unsigned int v231 = v237 & v230;
        v232 = (llvm::Instruction **)(v229 + 40 * v231);
        v233 = *v232;
        if (*v232 == (llvm::Instruction *)a2) {
          goto LABEL_425;
        }
      }
      if (v234) {
        v358 = v234;
      }
      else {
        v358 = v232;
      }
    }
    else
    {
      v358 = 0;
    }
    v232 = (llvm::Instruction **)sub_1CC609054(v227 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v358);
    v359 = (llvm::Instruction *)__s1;
    v232[3] = 0;
    v232[4] = 0;
    *v232 = v359;
    v232[1] = (llvm::Instruction *)(v232 + 3);
    v232[2] = (llvm::Instruction *)0x100000000;
LABEL_425:
    uint64_t v238 = *((unsigned int *)v232 + 4);
    if (v238)
    {
      v239 = (const llvm::MDNode **)((char *)v232[1] + 8);
      uint64_t v240 = 16 * v238;
      while (*((_DWORD *)v239 - 2) != 1)
      {
        v239 += 2;
        v240 -= 16;
        if (!v240) {
          goto LABEL_432;
        }
      }
      if (*v239) {
        llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream **)(a1 + 1960), (llvm::Instruction *)a2, *v239);
      }
    }
LABEL_432:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_447;
    }
    uint64_t v241 = ***a2;
    __s1 = a2;
    int v242 = *(_DWORD *)(v241 + 2496);
    if (v242)
    {
      uint64_t v243 = *(void *)(v241 + 2480);
      int v244 = v242 - 1;
      unsigned int v245 = v244 & (v87 ^ (a2 >> 9));
      v246 = (llvm::Instruction **)(v243 + 40 * v245);
      v247 = *v246;
      if (*v246 == (llvm::Instruction *)a2) {
        goto LABEL_443;
      }
      v248 = 0;
      int v249 = 1;
      while (v247 != (llvm::Instruction *)-4096)
      {
        if (v248) {
          BOOL v250 = 0;
        }
        else {
          BOOL v250 = v247 == (llvm::Instruction *)-8192;
        }
        if (v250) {
          v248 = v246;
        }
        unsigned int v251 = v245 + v249++;
        unsigned int v245 = v251 & v244;
        v246 = (llvm::Instruction **)(v243 + 40 * v245);
        v247 = *v246;
        if (*v246 == (llvm::Instruction *)a2) {
          goto LABEL_443;
        }
      }
      if (v248) {
        v360 = v248;
      }
      else {
        v360 = v246;
      }
    }
    else
    {
      v360 = 0;
    }
    v246 = (llvm::Instruction **)sub_1CC609054(v241 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v360);
    v361 = (llvm::Instruction *)__s1;
    v246[3] = 0;
    v246[4] = 0;
    *v246 = v361;
    v246[1] = (llvm::Instruction *)(v246 + 3);
    v246[2] = (llvm::Instruction *)0x100000000;
LABEL_443:
    uint64_t v252 = *((unsigned int *)v246 + 4);
    if (v252)
    {
      v253 = (unsigned int **)((char *)v246[1] + 8);
      uint64_t v254 = 16 * v252;
      while (*((_DWORD *)v253 - 2) != 25)
      {
        v253 += 2;
        v254 -= 16;
        if (!v254) {
          goto LABEL_447;
        }
      }
      v297 = *v253;
      if (*v253)
      {
        uint64_t v298 = v297[2];
        if (v298)
        {
          uint64_t v299 = -2 * v298;
          while (1)
          {
            v300 = *(unsigned __int8 **)&v297[v299];
            if (*v300 - 4 >= 0x1F)
            {
              v349 = "Access scope list must consist of MDNodes";
              goto LABEL_603;
            }
            if (*((_DWORD *)v300 + 2) || (v300[1] & 0x7F) != 1) {
              break;
            }
            v299 += 2;
            if (!(v299 * 4)) {
              goto LABEL_447;
            }
          }
          v349 = "Access scope list contains invalid access scope";
LABEL_603:
          __s1 = v349;
          __int16 v406 = 259;
          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
          if (*(void *)a1) {
            sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v297);
          }
        }
      }
    }
LABEL_447:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_462;
    }
    uint64_t v255 = ***a2;
    __s1 = a2;
    int v256 = *(_DWORD *)(v255 + 2496);
    if (v256)
    {
      uint64_t v257 = *(void *)(v255 + 2480);
      int v258 = v256 - 1;
      unsigned int v259 = v258 & (v87 ^ (a2 >> 9));
      v260 = (llvm::Instruction **)(v257 + 40 * v259);
      v261 = *v260;
      if (*v260 == (llvm::Instruction *)a2)
      {
LABEL_458:
        uint64_t v266 = *((unsigned int *)v260 + 4);
        if (v266)
        {
          v267 = (void *)((char *)v260[1] + 8);
          uint64_t v268 = 16 * v266;
          while (*((_DWORD *)v267 - 2) != 17)
          {
            v267 += 2;
            v268 -= 16;
            if (!v268) {
              goto LABEL_462;
            }
          }
          uint64_t v301 = *v267;
          if (v301)
          {
            if (*((unsigned char *)*a2 + 8) != 15)
            {
              v7 = "align applies only to pointer types";
              goto LABEL_699;
            }
            if (*((unsigned char *)a2 + 16) != 60)
            {
              v7 = "align applies only to load instructions, use attributes for calls or invokes";
              goto LABEL_699;
            }
            if (*(_DWORD *)(v301 + 8) != 1)
            {
              v7 = "align takes one operand!";
              goto LABEL_699;
            }
            uint64_t v302 = *(void *)(v301 - 8);
            if (*(unsigned char *)v302 != 1
              || (v303 = *(int8x8_t **)(v302 + 128), v303[2].i8[0] != 16)
              || *(_DWORD *)(*(void *)v303 + 8) != 16397)
            {
              v7 = "align metadata value must be an i64!";
              goto LABEL_699;
            }
            v304 = v303 + 3;
            if (v303[4].i32[0] >= 0x41u) {
              v304 = (int8x8_t *)*v304;
            }
            uint8x8_t v305 = (uint8x8_t)vcnt_s8(*v304);
            v305.i16[0] = vaddlv_u8(v305);
            if (v305.u32[0] != 1)
            {
              v7 = "align metadata value must be a power of 2!";
              goto LABEL_699;
            }
            if (*(void *)v304 >= 0x100000001uLL)
            {
              v7 = "alignment is larger that implementation defined limit";
              goto LABEL_699;
            }
          }
        }
LABEL_462:
        if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
          goto LABEL_477;
        }
        uint64_t v269 = ***a2;
        __s1 = a2;
        int v270 = *(_DWORD *)(v269 + 2496);
        if (v270)
        {
          uint64_t v271 = *(void *)(v269 + 2480);
          int v272 = v270 - 1;
          unsigned int v273 = v272 & (v87 ^ (a2 >> 9));
          v274 = (llvm::Instruction **)(v271 + 40 * v273);
          v275 = *v274;
          if (*v274 == (llvm::Instruction *)a2)
          {
LABEL_473:
            uint64_t v280 = *((unsigned int *)v274 + 4);
            if (v280)
            {
              v281 = (unsigned int **)((char *)v274[1] + 8);
              uint64_t v282 = 16 * v280;
              while (*((_DWORD *)v281 - 2) != 2)
              {
                v281 += 2;
                v282 -= 16;
                if (!v282) {
                  goto LABEL_477;
                }
              }
              v306 = *v281;
              if (*v281)
              {
                uint64_t v307 = v306[2];
                if (v307 <= 1)
                {
                  v368 = "!prof annotations should have no less than 2 operands";
                }
                else
                {
                  uint64_t v308 = *(void *)&v306[-2 * v307];
                  if (v308)
                  {
                    if (*(unsigned char *)v308)
                    {
                      v368 = "expected string with name of the !prof annotation";
                    }
                    else
                    {
                      v309 = *(void **)(v308 + 8);
                      if (*v309 != 14) {
                        goto LABEL_477;
                      }
                      uint64_t v310 = v309[3];
                      uint64_t v311 = *(void *)((char *)v309 + 30);
                      if (v310 != 0x775F68636E617262 || v311 != 0x737468676965775FLL) {
                        goto LABEL_477;
                      }
                      int v313 = *((unsigned __int8 *)a2 + 16);
                      switch(*((unsigned char *)a2 + 16))
                      {
                        case 0x1E:
                          if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3) {
                            int v314 = 2;
                          }
                          else {
                            int v314 = 1;
                          }
                          goto LABEL_683;
                        case 0x1F:
                          int v314 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
                          goto LABEL_683;
                        case 0x20:
                          int v314 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
                          goto LABEL_683;
                        case 0x21:
                          if ((v307 & 0xFFFFFFFE) == 2)
                          {
                            uint64_t v374 = -v307;
                            goto LABEL_686;
                          }
                          v368 = "Wrong number of InvokeInst branch_weights operands";
                          break;
                        default:
                          if (v313 == 84)
                          {
                            int v314 = 1;
                          }
                          else if (v313 == 85)
                          {
                            int v314 = 2;
                          }
                          else
                          {
                            __s1 = "!prof branch_weights are not allowed for this instruction";
                            __int16 v406 = 259;
                            sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
                            if (*(void *)a1) {
                              sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v306);
                            }
                            int v314 = 0;
                            LODWORD(v307) = v306[2];
                          }
LABEL_683:
                          if (v307 == v314 + 1)
                          {
                            if (v307 < 2) {
                              goto LABEL_477;
                            }
                            uint64_t v374 = -(uint64_t)v307;
                            uint64_t v307 = v307;
LABEL_686:
                            uint64_t v375 = 8 * v374 + 8;
                            uint64_t v376 = v307 - 1;
                            while (1)
                            {
                              uint64_t v377 = *(void *)((char *)v306 + v375);
                              if (!v377) {
                                break;
                              }
                              if (*(unsigned char *)v377 != 1 || *(unsigned char *)(*(void *)(v377 + 128) + 16) != 16)
                              {
                                __s1 = "!prof brunch_weights operand is not a const int";
                                __int16 v406 = 259;
                                sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
                                goto LABEL_477;
                              }
                              v375 += 8;
                              if (!--v376) {
                                goto LABEL_477;
                              }
                            }
                            v368 = "second operand should not be null";
                          }
                          else
                          {
                            v368 = "Wrong number of operands";
                          }
                          break;
                      }
                    }
                  }
                  else
                  {
                    v368 = "first operand should not be null";
                  }
                }
                __s1 = v368;
                __int16 v406 = 259;
                sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
                if (*(void *)a1) {
                  sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v306);
                }
              }
            }
LABEL_477:
            if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
              goto LABEL_533;
            }
            uint64_t v283 = ***a2;
            __s1 = a2;
            int v284 = *(_DWORD *)(v283 + 2496);
            if (v284)
            {
              uint64_t v285 = *(void *)(v283 + 2480);
              int v286 = v284 - 1;
              unsigned int v287 = v286 & (v87 ^ (a2 >> 9));
              v288 = (llvm::Instruction **)(v285 + 40 * v287);
              v289 = *v288;
              if (*v288 == (llvm::Instruction *)a2) {
                goto LABEL_488;
              }
              v290 = 0;
              int v291 = 1;
              while (v289 != (llvm::Instruction *)-4096)
              {
                if (v290) {
                  BOOL v292 = 0;
                }
                else {
                  BOOL v292 = v289 == (llvm::Instruction *)-8192;
                }
                if (v292) {
                  v290 = v288;
                }
                unsigned int v293 = v287 + v291++;
                unsigned int v287 = v293 & v286;
                v288 = (llvm::Instruction **)(v285 + 40 * v287);
                v289 = *v288;
                if (*v288 == (llvm::Instruction *)a2) {
                  goto LABEL_488;
                }
              }
              if (v290) {
                v366 = v290;
              }
              else {
                v366 = v288;
              }
            }
            else
            {
              v366 = 0;
            }
            v288 = (llvm::Instruction **)sub_1CC609054(v283 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v366);
            v367 = (llvm::Instruction *)__s1;
            v288[3] = 0;
            v288[4] = 0;
            *v288 = v367;
            v288[1] = (llvm::Instruction *)(v288 + 3);
            v288[2] = (llvm::Instruction *)0x100000000;
LABEL_488:
            uint64_t v294 = *((unsigned int *)v288 + 4);
            if (v294)
            {
              v295 = (void *)((char *)v288[1] + 8);
              uint64_t v296 = 16 * v294;
              while (*((_DWORD *)v295 - 2) != 30)
              {
                v295 += 2;
                v296 -= 16;
                if (!v296) {
                  goto LABEL_533;
                }
              }
              uint64_t v315 = *v295;
              if (v315)
              {
                if (*(unsigned char *)v315 == 4)
                {
                  uint64_t v316 = *(unsigned int *)(v315 + 8);
                  if (v316)
                  {
                    uint64_t v317 = -8 * v316;
                    while (!**(unsigned char **)(v315 + v317))
                    {
                      v317 += 8;
                      if (!v317) {
                        goto LABEL_533;
                      }
                    }
                    v369 = "operands must be strings";
                  }
                  else
                  {
                    v369 = "annotation must have at least one operand";
                  }
                }
                else
                {
                  v369 = "annotation must be a tuple";
                }
                __s1 = v369;
                __int16 v406 = 259;
                sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
              }
            }
LABEL_533:
            v318 = a2[6];
            v398.i64[0] = (uint64_t)v318;
            if (v318)
            {
              if (*(unsigned char *)v318 != 5)
              {
                __s1 = "invalid !dbg metadata attachment";
                __int16 v406 = 259;
                v394 = (llvm::Value *)a2;
                sub_1CD5DBD80((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, &v394, (llvm::Metadata **)&v398);
                return;
              }
              sub_1CC639E3C(a1, (uint64_t)v318, 1);
            }
            if (!sub_1CC5817B4((uint64_t)a2))
            {
LABEL_556:
              __s1 = &__s2;
              uint64_t v403 = 0x400000000;
              v329 = a2[6];
              if (v329)
              {
                __s2 = 0;
                v405 = v329;
                LODWORD(v403) = 1;
              }
              else if ((*((unsigned char *)a2 + 23) & 0x20) == 0)
              {
                goto LABEL_568;
              }
              llvm::Value::getAllMetadata(a2, (uint64_t)&__s1);
              if (v403)
              {
                v330 = (char *)__s1;
                v331 = (char *)__s1 + 16 * v403;
                do
                {
                  if (*(_DWORD *)v330) {
                    BOOL v332 = *(_DWORD *)v330 == 18;
                  }
                  else {
                    BOOL v332 = 1;
                  }
                  int v333 = v332;
                  sub_1CC639E3C(a1, *((void *)v330 + 1), v333);
                  v330 += 16;
                }
                while (v330 != v331);
              }
LABEL_568:
              uint64_t v334 = *(void *)(a1 + 280);
              uint64_t v335 = *(unsigned int *)(a1 + 292);
              if (v334 == *(void *)(a1 + 272))
              {
                if (v335)
                {
                  v336 = 0;
                  uint64_t v337 = 8 * v335;
                  v338 = *(uint64_t *****)(a1 + 280);
                  while (*v338 != a2)
                  {
                    if (*v338 == (uint64_t ***)-2) {
                      v336 = v338;
                    }
                    ++v338;
                    v337 -= 8;
                    if (!v337)
                    {
                      if (!v336) {
                        goto LABEL_576;
                      }
                      *v336 = a2;
                      --*(_DWORD *)(a1 + 296);
                      goto LABEL_600;
                    }
                  }
                  goto LABEL_600;
                }
LABEL_576:
                unsigned int v339 = *(_DWORD *)(a1 + 288);
                if (v335 < v339)
                {
                  *(_DWORD *)(a1 + 292) = v335 + 1;
                  *(void *)(v334 + 8 * v335) = a2;
LABEL_600:
                  if (__s1 != &__s2) {
                    free(__s1);
                  }
                  return;
                }
              }
              else
              {
                unsigned int v339 = *(_DWORD *)(a1 + 288);
              }
              if (3 * v339 <= 4 * ((int)v335 - *(_DWORD *)(a1 + 296)))
              {
                if (v339 >= 0x40) {
                  v339 *= 2;
                }
                else {
                  unsigned int v339 = 128;
                }
              }
              else if (v339 - v335 >= v339 >> 3)
              {
                goto LABEL_581;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 272), v339);
              unsigned int v339 = *(_DWORD *)(a1 + 288);
              uint64_t v334 = *(void *)(a1 + 280);
LABEL_581:
              unsigned int v340 = v339 - 1;
              unsigned int v341 = (v339 - 1) & (v87 ^ (a2 >> 9));
              v342 = (llvm::Instruction **)(v334 + 8 * v341);
              v343 = *v342;
              if (*v342 == (llvm::Instruction *)-1)
              {
                v344 = 0;
LABEL_593:
                if (v344) {
                  v348 = v344;
                }
                else {
                  v348 = v342;
                }
                if (*v348 != (llvm::Instruction *)a2)
                {
                  if (*v348 == (llvm::Instruction *)-2) {
                    --*(_DWORD *)(a1 + 296);
                  }
                  else {
                    ++*(_DWORD *)(a1 + 292);
                  }
                  *v348 = (llvm::Instruction *)a2;
                }
              }
              else
              {
                v344 = 0;
                int v345 = 1;
                while (v343 != (llvm::Instruction *)a2)
                {
                  if (v344) {
                    BOOL v346 = 0;
                  }
                  else {
                    BOOL v346 = v343 == (llvm::Instruction *)-2;
                  }
                  if (v346) {
                    v344 = v342;
                  }
                  unsigned int v347 = v341 + v345++;
                  unsigned int v341 = v347 & v340;
                  v342 = (llvm::Instruction **)(v334 + 8 * (v347 & v340));
                  v343 = *v342;
                  if (*v342 == (llvm::Instruction *)-1) {
                    goto LABEL_593;
                  }
                }
              }
              goto LABEL_600;
            }
            uint64_t v319 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
            uint64_t v320 = -v319;
            v321 = &a2[-4 * v319];
            v322 = v321[4][3];
            if (v322)
            {
              if (*(unsigned char *)v322 == 25) {
                v323 = (llvm::DIVariable *)v321[4][3];
              }
              else {
                v323 = 0;
              }
            }
            else
            {
              v323 = 0;
            }
            v324 = (uint64_t **)v321[8][3];
            if (!v324
              || ((int v325 = *(unsigned __int8 *)v324, v325 != 6) ? (v326 = 0) : (v326 = v324),
                  !v323
               || v325 != 6
               || !llvm::DIExpression::isValid((llvm::DIExpression *)v326)
               || (llvm::DIExpression::getFragmentInfo(v326[3], v326[4], &v398), !(_BYTE)v399)
               || (*((unsigned char *)v323 + 36) & 0x40) != 0))
            {
LABEL_551:
              v327 = (llvm::DIExpression *)a2[4 * v320 + 8][3];
              if (v327)
              {
                if (*(unsigned char *)v327 == 6 && llvm::DIExpression::isValid(v327))
                {
                  v328 = (void *)*((void *)v327 + 3);
                  if (((*((void *)v327 + 4) - (void)v328) & 0x7FFFFFFF8) != 0 && *v328 == 4099)
                  {
                    __s1 = "Entry values are only allowed in MIR";
                    __int16 v406 = 259;
                    sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
                    if (*(void *)a1) {
                      sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a2);
                    }
                  }
                }
              }
              goto LABEL_556;
            }
            __int32 v370 = v398.i32[0];
            __int32 v371 = v398.i32[2];
            v394 = (llvm::Value *)a2;
            unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(v323);
            if (v373)
            {
              if ((v371 + v370) > SizeInBits)
              {
                v379 = "fragment is larger than or outside of variable";
              }
              else
              {
                if (SizeInBits != v370) {
                  goto LABEL_674;
                }
                v379 = "fragment covers entire variable";
              }
              v401 = v323;
              __s1 = v379;
              __int16 v406 = 259;
              sub_1CD5DBD80((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1, &v394, &v401);
            }
LABEL_674:
            uint64_t v320 = -(uint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF);
            goto LABEL_551;
          }
          v276 = 0;
          int v277 = 1;
          while (v275 != (llvm::Instruction *)-4096)
          {
            if (v276) {
              BOOL v278 = 0;
            }
            else {
              BOOL v278 = v275 == (llvm::Instruction *)-8192;
            }
            if (v278) {
              v276 = v274;
            }
            unsigned int v279 = v273 + v277++;
            unsigned int v273 = v279 & v272;
            v274 = (llvm::Instruction **)(v271 + 40 * v273);
            v275 = *v274;
            if (*v274 == (llvm::Instruction *)a2) {
              goto LABEL_473;
            }
          }
          if (v276) {
            v364 = v276;
          }
          else {
            v364 = v274;
          }
        }
        else
        {
          v364 = 0;
        }
        v274 = (llvm::Instruction **)sub_1CC609054(v269 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v364);
        v365 = (llvm::Instruction *)__s1;
        v274[3] = 0;
        v274[4] = 0;
        *v274 = v365;
        v274[1] = (llvm::Instruction *)(v274 + 3);
        v274[2] = (llvm::Instruction *)0x100000000;
        goto LABEL_473;
      }
      v262 = 0;
      int v263 = 1;
      while (v261 != (llvm::Instruction *)-4096)
      {
        if (v262) {
          BOOL v264 = 0;
        }
        else {
          BOOL v264 = v261 == (llvm::Instruction *)-8192;
        }
        if (v264) {
          v262 = v260;
        }
        unsigned int v265 = v259 + v263++;
        unsigned int v259 = v265 & v258;
        v260 = (llvm::Instruction **)(v257 + 40 * v259);
        v261 = *v260;
        if (*v260 == (llvm::Instruction *)a2) {
          goto LABEL_458;
        }
      }
      if (v262) {
        v362 = v262;
      }
      else {
        v362 = v260;
      }
    }
    else
    {
      v362 = 0;
    }
    v260 = (llvm::Instruction **)sub_1CC609054(v255 + 2480, (uint64_t)&__s1, (uint64_t *)&__s1, v362);
    v363 = (llvm::Instruction *)__s1;
    v260[3] = 0;
    v260[4] = 0;
    *v260 = v363;
    v260[1] = (llvm::Instruction *)(v260 + 3);
    v260[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_458;
  }
  if (*((unsigned char *)*a2 + 8) == 15)
  {
    if (*((unsigned char *)a2 + 16) == 60) {
      goto LABEL_378;
    }
    v7 = "nonnull applies only to load instructions, use attributes for calls or invokes";
  }
  else
  {
    v7 = "nonnull applies only to pointer types";
  }
LABEL_699:
  __s1 = v7;
  __int16 v406 = 259;
  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&__s1);
  if (*(void *)a1)
  {
    v148 = (llvm::raw_ostream **)a1;
    v147 = (llvm::Value *)a2;
    goto LABEL_702;
  }
}

void sub_1CC6450AC(uint64_t a1, llvm::Value *a2)
{
  v56[16] = *MEMORY[0x1E4F143B8];
  int v50 = a2;
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 904);
  uint64_t v5 = *(void *)(a1 + 912);
  uint64_t v6 = *(unsigned int *)(a1 + 924);
  if (v5 == *(void *)(a1 + 904))
  {
    if (v6)
    {
      v7 = 0;
      uint64_t v8 = 8 * v6;
      v9 = *(llvm::Value ***)(a1 + 912);
      do
      {
        if (*v9 == a2) {
          return;
        }
        if (*v9 == (llvm::Value *)-2) {
          v7 = v9;
        }
        ++v9;
        v8 -= 8;
      }
      while (v8);
      if (v7)
      {
        char *v7 = a2;
        --*(_DWORD *)(a1 + 928);
        goto LABEL_33;
      }
    }
    unsigned int v10 = *(_DWORD *)(a1 + 920);
    if (v6 < v10)
    {
      *(_DWORD *)(a1 + 924) = v6 + 1;
      *(void *)(v5 + 8 * v6) = a2;
LABEL_33:
      v53 = v56;
      unsigned int v55 = 16;
      v56[0] = a2;
      unsigned int v20 = 1;
      while (1)
      {
        uint64_t v21 = *((void *)v53 + v20 - 1);
        unsigned int v54 = v20 - 1;
        if (v21) {
          BOOL v22 = *(unsigned char *)(v21 + 16) == 5;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22
          && *(_WORD *)(v21 + 18) == 49
          && !llvm::CastInst::castIsValid(49, **(llvm::Type ***)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)), *(void *)v21))
        {
          v51[0] = "Invalid bitcast";
          __int16 v52 = 259;
          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v51);
          if (*(void *)a1) {
            sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)v21);
          }
        }
        if (*(unsigned __int8 *)(v21 + 16) >= 4u) {
          v23 = 0;
        }
        else {
          v23 = (llvm::Value *)v21;
        }
        v49 = v23;
        if (v23)
        {
          uint64_t v24 = *((void *)v23 + 5);
          uint64_t v25 = *(void *)(a1 + 8);
          if (v24 != v25)
          {
            v51[0] = "Referencing global in another module!";
            __int16 v52 = 259;
            uint64_t v47 = v24;
            uint64_t v48 = v25;
            sub_1CD5DBC7C((llvm::raw_ostream *)a1, (llvm::Twine *)v51, &v50, &v48, &v49, &v47);
LABEL_103:
            if (v53 != v56) {
              free(v53);
            }
            return;
          }
        }
        else
        {
          int v26 = *(_DWORD *)(v21 + 20);
          if ((v26 & 0x40000000) != 0)
          {
            v28 = *(uint64_t **)(v21 - 8);
            uint64_t v27 = v26 & 0x7FFFFFF;
            if (!v27) {
              goto LABEL_46;
            }
LABEL_52:
            v29 = &v28[4 * v27];
            while (2)
            {
              uint64_t v30 = *v28;
              if (*v28) {
                BOOL v31 = *(unsigned __int8 *)(*v28 + 16) > 0x14u;
              }
              else {
                BOOL v31 = 1;
              }
              if (v31) {
                goto LABEL_91;
              }
              uint64_t v32 = *(void *)(a1 + 912);
              uint64_t v33 = *(unsigned int *)(a1 + 924);
              if (v32 == *(void *)(a1 + 904))
              {
                if (v33)
                {
                  v34 = 0;
                  uint64_t v35 = 8 * v33;
                  v36 = *(void **)(a1 + 912);
                  while (*v36 != v30)
                  {
                    if (*v36 == -2) {
                      v34 = v36;
                    }
                    ++v36;
                    v35 -= 8;
                    if (!v35)
                    {
                      if (!v34) {
                        goto LABEL_65;
                      }
                      void *v34 = v30;
                      --*(_DWORD *)(a1 + 928);
                      goto LABEL_89;
                    }
                  }
                  goto LABEL_91;
                }
LABEL_65:
                unsigned int v37 = *(_DWORD *)(a1 + 920);
                if (v33 < v37)
                {
                  *(_DWORD *)(a1 + 924) = v33 + 1;
                  *(void *)(v32 + 8 * v33) = v30;
                  goto LABEL_89;
                }
              }
              else
              {
                unsigned int v37 = *(_DWORD *)(a1 + 920);
              }
              if (3 * v37 <= 4 * ((int)v33 - *(_DWORD *)(a1 + 928)))
              {
                if (v37 >= 0x40) {
                  v37 *= 2;
                }
                else {
                  unsigned int v37 = 128;
                }
              }
              else if (v37 - v33 >= v37 >> 3)
              {
LABEL_70:
                unsigned int v38 = v37 - 1;
                unsigned int v39 = (v37 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                v40 = (void *)(v32 + 8 * v39);
                uint64_t v41 = *v40;
                if (*v40 != -1)
                {
                  v42 = 0;
                  int v43 = 1;
                  while (v41 != v30)
                  {
                    if (v42) {
                      BOOL v44 = 0;
                    }
                    else {
                      BOOL v44 = v41 == -2;
                    }
                    if (v44) {
                      v42 = v40;
                    }
                    unsigned int v45 = v39 + v43++;
                    unsigned int v39 = v45 & v38;
                    v40 = (void *)(v32 + 8 * (v45 & v38));
                    uint64_t v41 = *v40;
                    if (*v40 == -1) {
                      goto LABEL_82;
                    }
                  }
                  goto LABEL_91;
                }
                v42 = 0;
LABEL_82:
                if (v42) {
                  unsigned int v46 = v42;
                }
                else {
                  unsigned int v46 = v40;
                }
                if (*v46 != v30)
                {
                  if (*v46 == -2) {
                    --*(_DWORD *)(a1 + 928);
                  }
                  else {
                    ++*(_DWORD *)(a1 + 924);
                  }
                  *unsigned int v46 = v30;
LABEL_89:
                  if (v54 >= (unint64_t)v55) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v53 + v54++) = v30;
                }
LABEL_91:
                v28 += 4;
                if (v28 == v29) {
                  goto LABEL_46;
                }
                continue;
              }
              break;
            }
            llvm::SmallPtrSetImplBase::Grow(v4, v37);
            unsigned int v37 = *(_DWORD *)(a1 + 920);
            uint64_t v32 = *(void *)(a1 + 912);
            goto LABEL_70;
          }
          uint64_t v27 = v26 & 0x7FFFFFF;
          v28 = (uint64_t *)(v21 - 32 * v27);
          if (v27) {
            goto LABEL_52;
          }
        }
LABEL_46:
        unsigned int v20 = v54;
        if (!v54) {
          goto LABEL_103;
        }
      }
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 920);
  }
  if (3 * v10 <= 4 * ((int)v6 - *(_DWORD *)(a1 + 928)))
  {
    if (v10 >= 0x40) {
      v10 *= 2;
    }
    else {
      unsigned int v10 = 128;
    }
  }
  else if (v10 - v6 >= v10 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 904), v10);
  unsigned int v10 = *(_DWORD *)(a1 + 920);
  uint64_t v5 = *(void *)(a1 + 912);
LABEL_14:
  unsigned int v11 = v10 - 1;
  unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (llvm::Value **)(v5 + 8 * v12);
  BOOL v14 = *v13;
  if (*v13 == (llvm::Value *)-1)
  {
    v15 = 0;
LABEL_26:
    if (v15) {
      v19 = v15;
    }
    else {
      v19 = v13;
    }
    if (*v19 != a2)
    {
      if (*v19 == (llvm::Value *)-2) {
        --*(_DWORD *)(a1 + 928);
      }
      else {
        ++*(_DWORD *)(a1 + 924);
      }
      llvm::Instruction *v19 = a2;
      goto LABEL_33;
    }
  }
  else
  {
    v15 = 0;
    int v16 = 1;
    while (v14 != a2)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (llvm::Value *)-2;
      }
      if (v17) {
        v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (llvm::Value **)(v5 + 8 * (v18 & v11));
      BOOL v14 = *v13;
      if (*v13 == (llvm::Value *)-1) {
        goto LABEL_26;
      }
    }
  }
}

llvm::raw_ostream *sub_1CC645590(llvm::raw_ostream *result, unsigned __int8 *a2, uint64_t a3)
{
  v4 = (llvm::raw_ostream **)result;
  if (*(unsigned char *)(*(void *)a2 + 8) != 15)
  {
    uint64_t v8 = "dereferenceable, dereferenceable_or_null apply only to pointer types";
    goto LABEL_12;
  }
  int v5 = a2[16];
  if (v5 != 60 && v5 != 76)
  {
    uint64_t v8 = "dereferenceable, dereferenceable_or_null apply only to load and inttoptr instructions, use attributes for calls or invokes";
LABEL_12:
    v9 = v8;
    __int16 v10 = 259;
    result = sub_1CD5DBE68(result, (llvm::Twine *)&v9);
    if (*v4) {
      return sub_1CD5DBED0(v4, (llvm::Value *)a2);
    }
    return result;
  }
  if (*(_DWORD *)(a3 + 8) != 1)
  {
    uint64_t v8 = "dereferenceable, dereferenceable_or_null take one operand!";
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a3 - 8);
  if (*(unsigned char *)v6 != 1 || (v7 = *(unsigned char **)(v6 + 128), v7[16] != 16) || *(_DWORD *)(*(void *)v7 + 8) != 16397)
  {
    uint64_t v8 = "dereferenceable, dereferenceable_or_null metadata value must be an i64!";
    goto LABEL_12;
  }
  return result;
}

BOOL sub_1CC64567C(uint64_t a1, const void **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 > 0x40)
  {
    if (!memcmp(*(const void **)(a1 + 16), *a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)) {
      return 1;
    }
  }
  else if (*(const void **)(a1 + 16) == *a2)
  {
    return 1;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 > 0x40) {
    return memcmp(*(const void **)a1, a2[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    return *(void *)a1 == (void)a2[2];
  }
}

void sub_1CC64571C(llvm::raw_ostream *a1, uint64_t a2)
{
  v3 = (llvm::raw_ostream **)a1;
  uint64_t v4 = (llvm::Value **)(a2 - 32);
  uint64_t v5 = **(void **)(a2 - 32);
  if (*(unsigned char *)(v5 + 8) != 15)
  {
    uint64_t v127 = "Called function must be a pointer!";
    goto LABEL_243;
  }
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(v5 + 24);
  if (v7) {
    BOOL v8 = v7 == v6;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v127 = "Called function is not the same type as the call!";
    goto LABEL_243;
  }
  int v9 = *(unsigned __int8 *)(a2 + 16);
  if (*(_DWORD *)(v6 + 8) < 0x100u)
  {
    if (v9 == 84)
    {
      uint64_t v15 = 0;
    }
    else if (v9 == 39)
    {
      uint64_t v15 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v15 = 2;
    }
    int v11 = *(_DWORD *)(a2 + 20);
    if (v11 < 0 && (uint64_t v145 = a2 - 32 * (v11 & 0x7FFFFFF), v146 = *(void *)(v145 - 8), (v146 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
      int v16 = *(_DWORD *)(v145 - 12) - *(_DWORD *)(v145 - v146);
    }
    else
    {
      int v16 = 0;
      uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
    }
    unint64_t v10 = (-32 * v15 + 32 * (unint64_t)-v16 - 32 * v13 - 32) >> 5;
    if (*(_DWORD *)(v6 + 12) - 1 != v10)
    {
      uint64_t v127 = "Incorrect number of arguments passed to called function!";
      goto LABEL_243;
    }
  }
  else
  {
    if (v9 == 84)
    {
      unint64_t v10 = 0;
    }
    else if (v9 == 39)
    {
      unint64_t v10 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      unint64_t v10 = 2;
    }
    int v11 = *(_DWORD *)(a2 + 20);
    if (v11 < 0 && (uint64_t v143 = a2 - 32 * (v11 & 0x7FFFFFF), v144 = *(void *)(v143 - 8), (v144 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
      int v12 = *(_DWORD *)(v143 - 12) - *(_DWORD *)(v143 - v144);
    }
    else
    {
      int v12 = 0;
      uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
    }
    unint64_t v14 = (-32 * v10 + 32 * -v12 - 32 * v13 - 32) >> 5;
    LODWORD(v10) = *(_DWORD *)(v6 + 12) - 1;
    if (v10 > v14)
    {
      uint64_t v127 = "Called function requires more parameters than were provided!";
      goto LABEL_243;
    }
  }
  unsigned int v17 = 0;
  uint64_t v18 = a2 + 32 * v13;
  while (v10 != v17)
  {
    v19 = *(llvm::Value **)(v18 + 32 * v17++);
    unsigned int v20 = *(llvm::Type **)(*(void *)(v6 + 16) + 8 * v17);
    if (*(llvm::Type **)v19 != v20)
    {
      v194[0] = (uint64_t)"Call parameter type does not match function signature!";
      __int16 v195 = 259;
      v193[0] = v20;
      sub_1CD5DBE68(a1, (llvm::Twine *)v194);
      if (*v3) {
        sub_1CD5DCB88(v3, v19, v193, (llvm::Value *)a2);
      }
      return;
    }
  }
  uint64_t v21 = *(void *)(a2 + 64);
  if (v9 == 84)
  {
    uint64_t v22 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v22 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v22 = 2;
  }
  if (v11 < 0
    && (uint64_t v137 = a2 - 32 * (v11 & 0x7FFFFFF),
        uint64_t v140 = *(void *)(v137 - 8),
        uint64_t v138 = v137 - 8,
        uint64_t v139 = v140,
        (v140 & 0xFFFFFFFF0) != 0))
  {
    int v23 = *(_DWORD *)(a2 - 32 * (v11 & 0x7FFFFFF) - 12) - *(_DWORD *)(v138 - v139 + 8);
    if (!v21) {
      goto LABEL_29;
    }
  }
  else
  {
    int v23 = 0;
    if (!v21) {
      goto LABEL_29;
    }
  }
  if (*(_DWORD *)(v21 + 8) > ((-32 * v22
                                            + 32 * -v23
                                            - 32 * (unint64_t)-(v11 & 0x7FFFFFF)
                                            - 32) >> 5)
                            + 2)
  {
    uint64_t v127 = "Attribute after last parameter!";
    goto LABEL_243;
  }
LABEL_29:
  v193[0] = a1;
  v193[1] = (llvm::Type *)a2;
  uint64_t v24 = **(llvm::Type ***)(v6 + 16);
  v194[0] = (uint64_t)"return type";
  __int16 v195 = 259;
  sub_1CC646B94((llvm::raw_ostream *)v193, v24, v194);
  if (*(_DWORD *)(v6 + 12) != 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 8 * (*(_DWORD *)(v6 + 12) - 1);
    do
    {
      uint64_t v27 = *(llvm::Type **)(*(void *)(v6 + 16) + v25 + 8);
      v194[0] = (uint64_t)"argument passed";
      __int16 v195 = 259;
      sub_1CC646B94((llvm::raw_ostream *)v193, v27, v194);
      v25 += 8;
    }
    while (v26 != v25);
  }
  v28 = llvm::Value::stripPointerCasts(*v4);
  if (*((unsigned char *)v28 + 16)) {
    v29 = 0;
  }
  else {
    v29 = v28;
  }
  if (v29)
  {
    unsigned int v30 = *((_DWORD *)v29 + 8);
    if ((v30 & 0x2000) != 0 && *((void *)v29 + 3) != v6)
    {
      uint64_t v131 = "Intrinsic called with incompatible signature";
      goto LABEL_253;
    }
    int v31 = (v30 >> 13) & 1;
    v3 = (llvm::raw_ostream **)a1;
    if (v21)
    {
      if (*(unsigned char *)(v21 + 19))
      {
        uint64_t v32 = *((void *)v29 + 14);
        if (!v32 || (*(unsigned char *)(v32 + 19) & 1) == 0) {
          goto LABEL_203;
        }
      }
      goto LABEL_46;
    }
LABEL_50:
    uint64_t v33 = *v4;
    goto LABEL_51;
  }
  if (!v21)
  {
    LOBYTE(v31) = 0;
    v3 = (llvm::raw_ostream **)a1;
    goto LABEL_50;
  }
  v3 = (llvm::raw_ostream **)a1;
  if (*(unsigned char *)(v21 + 19))
  {
LABEL_203:
    uint64_t v127 = "speculatable attribute may not apply to call sites";
    goto LABEL_243;
  }
  LOBYTE(v31) = 0;
LABEL_46:
  uint64_t v33 = *v4;
  if ((*(unsigned char *)(v21 + 21) & 1) == 0)
  {
LABEL_51:
    int v34 = *((unsigned __int8 *)v33 + 16);
    goto LABEL_52;
  }
  if (*((_DWORD *)v33 + 9) != 10)
  {
    uint64_t v128 = "preallocated as a call site attribute can only be on llvm.call.preallocated.arg";
    goto LABEL_236;
  }
  int v34 = 0;
LABEL_52:
  sub_1CC638F10((unint64_t)v3, v6, v21, (llvm::Value *)a2, v31, v34 == 24);
  int v35 = *(unsigned __int8 *)(a2 + 16);
  if (v35 == 84)
  {
    uint64_t v36 = 0;
  }
  else
  {
    if (v35 == 39) {
      uint64_t v36 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v36 = 2;
    }
    v3 = (llvm::raw_ostream **)a1;
  }
  uint64_t v37 = 0;
  int v38 = *(_DWORD *)(a2 + 20);
  if (v38 < 0)
  {
    uint64_t v141 = a2 - 32 * (v38 & 0x7FFFFFF);
    uint64_t v142 = *(void *)(v141 - 8);
    if ((v142 & 0xFFFFFFFF0) != 0) {
      uint64_t v37 = (*(_DWORD *)(v141 - 12) - *(_DWORD *)(v141 - v142));
    }
    else {
      uint64_t v37 = 0;
    }
    v3 = (llvm::raw_ostream **)a1;
  }
  uint64_t v39 = a2 - 32 * v36 - 32 * v37 - 32;
  uint64_t v40 = a2 - 32 * (v38 & 0x7FFFFFF);
  if (v39 == v40) {
    goto LABEL_65;
  }
  if (v35 == 84)
  {
    uint64_t v41 = 0;
    if ((v38 & 0x80000000) == 0)
    {
LABEL_58:
      int v42 = 0;
      goto LABEL_59;
    }
  }
  else
  {
    if (v35 == 39) {
      uint64_t v41 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v41 = 2;
    }
    v3 = (llvm::raw_ostream **)a1;
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  uint64_t v182 = *(void *)(v40 - 8);
  if ((v182 & 0xFFFFFFFF0) != 0) {
    int v42 = *(_DWORD *)(v40 - 12) - *(_DWORD *)(v40 - v182);
  }
  else {
    int v42 = 0;
  }
  v3 = (llvm::raw_ostream **)a1;
LABEL_59:
  if (llvm::CallBase::paramHasAttr(a2, ((a2 - 32 * v41 + 32 * (unint64_t)-v42 - v40 - 32) >> 5) - 1, 71))
  {
    uint64_t v43 = llvm::Value::stripInBoundsOffsets(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * (*(_DWORD *)(v6 + 12) - 2)), (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)v194);
    BOOL v44 = *(unsigned char *)(v43 + 16) == 59 ? (llvm::Value *)v43 : 0;
    v192 = v44;
    if (v44)
    {
      if ((*((_WORD *)v44 + 9) & 0x40) == 0)
      {
        v194[0] = (uint64_t)"inalloca argument for call has mismatched alloca";
        __int16 v195 = 259;
        sub_1CD5DC498((llvm::raw_ostream *)v3, (llvm::Twine *)v194, &v192, (llvm::Value *)a2);
        return;
      }
    }
  }
LABEL_65:
  char v187 = v31;
  int v45 = *(_DWORD *)(v6 + 12);
  uint64_t v46 = (v45 - 1);
  if (v45 != 1)
  {
    uint64_t v47 = 0;
    do
    {
      if (llvm::CallBase::paramHasAttr(a2, v47, 63))
      {
        uint64_t v48 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v47);
        v192 = v48;
        uint64_t v49 = llvm::Value::stripInBoundsOffsets((uint64_t)v48, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)v194);
        if (*(unsigned char *)(v49 + 16) == 59) {
          int v50 = (llvm::Value *)v49;
        }
        else {
          int v50 = 0;
        }
        v191 = v50;
        if (v50)
        {
          if ((*((_WORD *)v50 + 9) & 0x80) != 0)
          {
            int v51 = 30;
LABEL_82:
            if (v51 != 30) {
              return;
            }
            uint64_t v55 = v47 + 1;
            goto LABEL_97;
          }
          v194[0] = (uint64_t)"swifterror argument for call has mismatched alloca";
          __int16 v195 = 259;
          sub_1CD5DC498(a1, (llvm::Twine *)v194, &v191, (llvm::Value *)a2);
LABEL_81:
          int v51 = 1;
          goto LABEL_82;
        }
        if (*((unsigned char *)v48 + 16) == 21) {
          __int16 v52 = v48;
        }
        else {
          __int16 v52 = 0;
        }
        v191 = v52;
        if (!v52)
        {
          v194[0] = (uint64_t)"swifterror argument should come from an alloca or parameter";
          __int16 v195 = 259;
          sub_1CD5DC498(a1, (llvm::Twine *)v194, &v192, (llvm::Value *)a2);
          goto LABEL_81;
        }
        uint64_t v53 = *(void *)(*((void *)v52 + 3) + 112);
        if (!v53
          || (unsigned int v54 = *((_DWORD *)v52 + 8) + 2, v54 >= *(_DWORD *)(v53 + 8))
          || (uint64_t v56 = *(void *)(v53 + 8 * v54 + 40)) == 0
          || (*(char *)(v56 + 19) & 0x80000000) == 0)
        {
          v194[0] = (uint64_t)"swifterror argument for call has mismatched parameter";
          __int16 v195 = 259;
          sub_1CD5DC498(a1, (llvm::Twine *)v194, &v191, (llvm::Value *)a2);
          goto LABEL_81;
        }
      }
      uint64_t v55 = v47 + 1;
      if (v21)
      {
        if ((v47 + 2) < *(_DWORD *)(v21 + 8))
        {
          uint64_t v58 = *(void *)(v21 + 40 + 8 * (v47 + 2));
          if (v58)
          {
            if ((*(unsigned char *)(v58 + 13) & 2) != 0
              && (!v29
               || (uint64_t v59 = *((void *)v29 + 14)) == 0
               || (v47 + 2) >= *(_DWORD *)(v59 + 8)
               || (uint64_t v60 = *(void *)(v59 + 8 * (v47 + 2) + 40)) == 0
               || (*(unsigned char *)(v60 + 13) & 2) == 0))
            {
              v194[0] = (uint64_t)"immarg may not apply only to call sites";
              __int16 v195 = 259;
              v192 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v47);
LABEL_107:
              sub_1CD5DC498(a1, (llvm::Twine *)v194, &v192, (llvm::Value *)a2);
              return;
            }
          }
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v47, 9))
      {
        v192 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v47);
        if ((*((unsigned char *)v192 + 16) & 0xFE) != 0x10)
        {
          unsigned __int32 v132 = "immarg operand has non-immediate parameter";
LABEL_241:
          v194[0] = (uint64_t)v132;
          __int16 v195 = 259;
          goto LABEL_107;
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v47, 72))
      {
        v192 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v47);
        int v57 = sub_1CC646CF4(a2, 4);
        if (*(unsigned char *)(a2 + 16) == 84)
        {
          if ((v57 == 0) != ((*(_WORD *)(a2 + 18) & 3) == 2)) {
            goto LABEL_240;
          }
        }
        else if (!v57)
        {
LABEL_240:
          unsigned __int32 v132 = "preallocated operand either requires a preallocated bundle or the call to be musttail (but not both)";
          goto LABEL_241;
        }
      }
LABEL_97:
      uint64_t v47 = v55;
    }
    while (v55 != v46);
  }
  if (*(_DWORD *)(v6 + 8) >= 0x100u)
  {
    uint64_t v61 = (*(_DWORD *)(v6 + 12) - 1);
    if (*(_DWORD *)(v6 + 12) == 1)
    {
      int v62 = 0;
      char v63 = 0;
    }
    else
    {
      uint64_t v108 = 0;
      char v63 = 0;
      int v62 = 0;
      uint64_t v109 = v21 + 40;
      do
      {
        if (v21 && (v108 + 2) < *(_DWORD *)(v21 + 8))
        {
          uint64_t v111 = *(void *)(v109 + 8 * (v108 + 2));
          if (v111) {
            LODWORD(v111) = (*(unsigned __int8 *)(v111 + 14) >> 2) & 1;
          }
          v62 |= v111;
          uint64_t v110 = *(void *)(v109 + 8 * (v108 + 2));
          if (v110) {
            LODWORD(v110) = (*(unsigned __int8 *)(v110 + 17) >> 6) & 1;
          }
        }
        else
        {
          LOBYTE(v110) = 0;
        }
        ++v108;
        v63 |= v110;
      }
      while (v61 != v108);
    }
    unint64_t v64 = v61;
    uint64_t v185 = a2 - 8;
    for (uint64_t i = a2 + 32 * v61; ; i += 32)
    {
      int v66 = *(unsigned __int8 *)(a2 + 16);
      if (v66 == 84)
      {
        uint64_t v67 = 0;
      }
      else if (v66 == 39)
      {
        uint64_t v67 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        uint64_t v67 = 2;
      }
      int v68 = *(_DWORD *)(a2 + 20);
      if (v68 < 0 && (uint64_t v81 = v68 & 0x7FFFFFF, (*(void *)(v185 - 32 * v81) & 0xFFFFFFFF0) != 0))
      {
        uint64_t v70 = -v81;
        int v69 = *(_DWORD *)(a2 - 32 * v81 - 12) - *(_DWORD *)(a2 - 32 * v81 - *(void *)(a2 - 32 * v81 - 8));
      }
      else
      {
        int v69 = 0;
        uint64_t v70 = -(uint64_t)(v68 & 0x7FFFFFF);
      }
      if (v64 >= (((unint64_t)&v4[4 * -v69] + -a2 + -32 * v67 + -32 * v70) >> 5)) {
        goto LABEL_153;
      }
      int v71 = **(llvm::Type ***)(i + 32 * v70);
      if (!v21 || (v64 + 2) >= *(_DWORD *)(v21 + 8)) {
        break;
      }
      v72 = *(unsigned char **)(v21 + 40 + 8 * (v64 + 2));
      sub_1CC63C29C(a1, (uint64_t)v72, (uint64_t)v71, (llvm::Value *)a2);
      if (!v72) {
        goto LABEL_120;
      }
      unsigned int v80 = v72[14] & 4;
      if ((v62 & (v80 >> 2)) == 1)
      {
        uint64_t v131 = "More than one parameter has attribute nest!";
        goto LABEL_253;
      }
      v62 |= v80 >> 2;
      if ((v72[17] & 0x40) != 0)
      {
        if (v63)
        {
          uint64_t v131 = "More than one parameter has attribute returned!";
          goto LABEL_253;
        }
        if (!llvm::Type::canLosslesslyBitCastTo(v71, **(llvm::Type ***)(v6 + 16)))
        {
          uint64_t v131 = "Incompatible argument and return types for 'returned' attribute";
LABEL_253:
          v194[0] = (uint64_t)v131;
          __int16 v195 = 259;
          v3 = (llvm::raw_ostream **)a1;
LABEL_244:
          sub_1CD5DBE68((llvm::raw_ostream *)v3, (llvm::Twine *)v194);
          if (*v3)
          {
            v133 = v3;
            goto LABEL_247;
          }
          return;
        }
        char v73 = 0;
        char v63 = 1;
      }
      else
      {
        char v73 = 0;
      }
LABEL_121:
      int v74 = *v4;
      if (*v4 && !*((unsigned char *)v74 + 16) && *((void *)v74 + 3) == *(void *)(a2 + 72) && *((_DWORD *)v74 + 9) == 124)
      {
        if (v73) {
          goto LABEL_135;
        }
      }
      else
      {
        if (v73) {
          goto LABEL_135;
        }
        if ((v72[21] & 2) != 0)
        {
          uint64_t v131 = "Attribute 'sret' cannot be used for vararg call arguments!";
          goto LABEL_253;
        }
      }
      if ((char)v72[20] < 0)
      {
        int v75 = *(unsigned __int8 *)(a2 + 16);
        if (v75 == 84) {
          uint64_t v76 = 0;
        }
        else {
          uint64_t v76 = v75 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
        }
        int v77 = *(_DWORD *)(a2 + 20);
        if (v77 < 0 && (uint64_t v82 = v77 & 0x7FFFFFF, (*(void *)(v185 - 32 * v82) & 0xFFFFFFFF0) != 0))
        {
          uint64_t v79 = -v82;
          int v78 = *(_DWORD *)(a2 - 32 * v82 - 12) - *(_DWORD *)(a2 - 32 * v82 - *(void *)(a2 - 32 * v82 - 8));
        }
        else
        {
          int v78 = 0;
          uint64_t v79 = -(uint64_t)(v77 & 0x7FFFFFF);
        }
        if (v64 != (((unint64_t)&v4[4 * -v78] + -a2 + -32 * v76 + -32 * v79) >> 5)
                  - 1)
        {
          uint64_t v131 = "inalloca isn't on the last argument!";
          goto LABEL_253;
        }
      }
LABEL_135:
      ++v64;
    }
    sub_1CC63C29C(a1, 0, (uint64_t)v71, (llvm::Value *)a2);
    v72 = 0;
LABEL_120:
    char v73 = 1;
    goto LABEL_121;
  }
LABEL_153:
  v3 = (llvm::raw_ostream **)a1;
  if ((v187 & 1) == 0 && 8 * *(unsigned int *)(v6 + 12) != 8)
  {
    uint64_t v83 = *(void *)(v6 + 16) + 8;
    uint64_t v84 = 8 * ((8 * *(unsigned int *)(v6 + 12) - 8) >> 3);
    while (1)
    {
      int v85 = *(unsigned __int8 *)(*(void *)v83 + 8);
      if (v85 == 12)
      {
        uint64_t v127 = "Function has token parameter but isn't an intrinsic";
        goto LABEL_243;
      }
      if (v85 == 9) {
        break;
      }
      v83 += 8;
      v84 -= 8;
      if (!v84) {
        goto LABEL_159;
      }
    }
    uint64_t v127 = "Function has metadata parameter but isn't an intrinsic";
    goto LABEL_243;
  }
LABEL_159:
  char v86 = *v4;
  if (*v4 && !*((unsigned char *)v86 + 16) && *((void *)v86 + 3) == *(void *)(a2 + 72)) {
    goto LABEL_167;
  }
  int v87 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  if (v87 == 11)
  {
    uint64_t v128 = "Return type cannot be x86_amx for indirect call!";
    goto LABEL_236;
  }
  if (v87 == 12)
  {
    uint64_t v128 = "Return type cannot be token for indirect call!";
LABEL_236:
    v194[0] = (uint64_t)v128;
    __int16 v195 = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)v3, (llvm::Twine *)v194);
    return;
  }
  if (v86 && !*((unsigned char *)v86 + 16) && *((void *)v86 + 3) == *(void *)(a2 + 72))
  {
LABEL_167:
    int v88 = *((_DWORD *)v86 + 9);
    if (v88) {
      sub_1CC646D40((uint64_t)a1, v88, a2);
    }
  }
  int v89 = *(_DWORD *)(a2 + 20);
  if ((v89 & 0x80000000) == 0)
  {
    char v90 = 0;
LABEL_171:
    int v91 = *v4;
    if (*v4 && !*((unsigned char *)v91 + 16) && ((*((void *)v91 + 3) == *(void *)(a2 + 72)) & v90) == 1)
    {
      uint64_t v127 = "Direct call cannot have a ptrauth bundle";
LABEL_243:
      v194[0] = (uint64_t)v127;
      __int16 v195 = 259;
      goto LABEL_244;
    }
    unsigned int v92 = *(uint64_t ****)(*(void *)(a2 + 40) + 56);
    if ((*((unsigned char *)v92 + 23) & 0x20) == 0) {
      goto LABEL_189;
    }
    uint64_t v93 = ***v92;
    v194[0] = *(void *)(*(void *)(a2 + 40) + 56);
    int v94 = *(_DWORD *)(v93 + 2496);
    if (v94)
    {
      uint64_t v95 = *(void *)(v93 + 2480);
      int v96 = v94 - 1;
      unsigned int v97 = v96 & ((v92 >> 4) ^ (v92 >> 9));
      unsigned int v98 = (uint64_t ****)(v95 + 40 * v97);
      uint64_t v99 = *v98;
      if (*v98 == v92)
      {
LABEL_185:
        uint64_t v104 = *((unsigned int *)v98 + 4);
        if (!v104) {
          goto LABEL_189;
        }
        int v105 = v98[1] + 1;
        uint64_t v106 = 16 * v104;
        while (*((_DWORD *)v105 - 2))
        {
          v105 += 2;
          v106 -= 16;
          if (!v106) {
            goto LABEL_189;
          }
        }
        uint64_t v112 = *v105;
        v107 = *v4;
        if (!v112 || *((unsigned char *)v107 + 16) || *((void *)v107 + 3) != *(void *)(a2 + 72)) {
          goto LABEL_190;
        }
        if ((*((unsigned char *)v107 + 23) & 0x20) == 0)
        {
LABEL_189:
          v107 = *v4;
LABEL_190:
          if (*((unsigned char *)v107 + 16) == 24) {
            sub_1CC64AF78((llvm::raw_ostream *)v3, (_DWORD *)a2);
          }
          sub_1CC642980((uint64_t)v3, (uint64_t ***)a2);
          return;
        }
        uint64_t v113 = ***(void ***)v107;
        v194[0] = (uint64_t)*v4;
        int v114 = *(_DWORD *)(v113 + 2496);
        if (v114)
        {
          uint64_t v115 = *(void *)(v113 + 2480);
          int v116 = v114 - 1;
          unsigned int v117 = v116 & ((v107 >> 4) ^ (v107 >> 9));
          v118 = (llvm::Value **)(v115 + 40 * v117);
          unsigned int v119 = *v118;
          if (*v118 == v107)
          {
LABEL_218:
            uint64_t v124 = *((unsigned int *)v118 + 4);
            if (v124)
            {
              uint64_t v125 = (void *)((char *)v118[1] + 8);
              uint64_t v126 = 16 * v124;
              while (*((_DWORD *)v125 - 2))
              {
                v125 += 2;
                v126 -= 16;
                if (!v126) {
                  goto LABEL_189;
                }
              }
              if (*v125 && *(void *)(a2 + 48) == 0)
              {
                v194[0] = (uint64_t)"inlinable function call in a function with debug info must have a !dbg location";
                __int16 v195 = 259;
                sub_1CD5DC588((llvm::raw_ostream *)v3, (llvm::Twine *)v194);
                goto LABEL_260;
              }
            }
            goto LABEL_189;
          }
          uint64_t v120 = 0;
          int v121 = 1;
          while (v119 != (llvm::Value *)-4096)
          {
            if (v120) {
              BOOL v122 = 0;
            }
            else {
              BOOL v122 = v119 == (llvm::Value *)-8192;
            }
            if (v122) {
              uint64_t v120 = v118;
            }
            unsigned int v123 = v117 + v121++;
            unsigned int v117 = v123 & v116;
            v118 = (llvm::Value **)(v115 + 40 * v117);
            unsigned int v119 = *v118;
            if (*v118 == v107) {
              goto LABEL_218;
            }
          }
          if (v120) {
            uint64_t v135 = v120;
          }
          else {
            uint64_t v135 = v118;
          }
        }
        else
        {
          uint64_t v135 = 0;
        }
        v118 = (llvm::Value **)sub_1CC609054(v113 + 2480, (uint64_t)v194, v194, v135);
        uint64_t v136 = v194[0];
        v118[3] = 0;
        v118[4] = 0;
        unsigned int *v118 = (llvm::Value *)v136;
        v118[1] = (llvm::Value *)(v118 + 3);
        v118[2] = (llvm::Value *)0x100000000;
        goto LABEL_218;
      }
      v100 = 0;
      int v101 = 1;
      while (v99 != (uint64_t ***)-4096)
      {
        if (v100) {
          BOOL v102 = 0;
        }
        else {
          BOOL v102 = v99 == (uint64_t ***)-8192;
        }
        if (v102) {
          v100 = v98;
        }
        unsigned int v103 = v97 + v101++;
        unsigned int v97 = v103 & v96;
        unsigned int v98 = (uint64_t ****)(v95 + 40 * v97);
        uint64_t v99 = *v98;
        if (*v98 == v92) {
          goto LABEL_185;
        }
      }
      if (v100) {
        v129 = v100;
      }
      else {
        v129 = v98;
      }
    }
    else
    {
      v129 = 0;
    }
    unsigned int v98 = (uint64_t ****)sub_1CC609054(v93 + 2480, (uint64_t)v194, v194, v129);
    uint64_t v130 = v194[0];
    v98[3] = 0;
    v98[4] = 0;
    *unsigned int v98 = (uint64_t ***)v130;
    v98[1] = (uint64_t ***)(v98 + 3);
    v98[2] = (uint64_t ***)0x100000000;
    goto LABEL_185;
  }
  unint64_t v147 = *(void *)(a2 - 32 * (v89 & 0x7FFFFFF) - 8);
  if ((v147 & 0xFFFFFFFF0) == 0)
  {
    char v90 = 0;
    v3 = (llvm::raw_ostream **)a1;
    goto LABEL_171;
  }
  uint64_t v148 = 0;
  char v149 = 0;
  char v90 = 0;
  char v188 = 0;
  char v189 = 0;
  char v150 = 0;
  uint64_t v184 = 0;
  char v186 = 0;
  uint64_t v151 = (v147 >> 4);
  while (2)
  {
    uint64_t v152 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v153 = (unsigned int *)(a2 - 8 - 32 * v152 - *(void *)(a2 - 8 - 32 * v152) + 16 * v148);
    uint64_t v154 = *(unsigned int *)(a2 - 32 * v152 - *(void *)(a2 - 8 - 32 * v152) + 16 * v148);
    v155 = (void **)(a2 - 32 * v152 + 32 * v154);
    uint64_t v156 = v153[3] - v154;
    switch(*(_DWORD *)(*(void *)v153 + 8))
    {
      case 0:
        if ((v186 & 1) == 0)
        {
          char v186 = 1;
          goto LABEL_358;
        }
        v183 = "Multiple deopt operand bundles";
        goto LABEL_387;
      case 1:
        if (v184)
        {
          v183 = "Multiple funclet operand bundles";
          goto LABEL_387;
        }
        if (v156 != 1)
        {
          v183 = "Expected exactly one funclet bundle operand";
          goto LABEL_387;
        }
        unsigned int v157 = *((unsigned __int8 *)*v155 + 16);
        if (v157 < 0x1C || v157 - 79 >= 2)
        {
          v183 = "Funclet bundle operands should correspond to a FuncletPadInst";
          goto LABEL_387;
        }
        LOBYTE(v184) = 1;
        goto LABEL_358;
      case 2:
        if (v188)
        {
          v183 = "Multiple gc-transition operand bundles";
          goto LABEL_387;
        }
        char v188 = 1;
        goto LABEL_358;
      case 3:
        if ((v184 & 0x100000000) != 0)
        {
          v183 = "Multiple CFGuardTarget operand bundles";
          goto LABEL_387;
        }
        if (v156 != 1)
        {
          v183 = "Expected exactly one cfguardtarget bundle operand";
          goto LABEL_387;
        }
        BYTE4(v184) = 1;
        goto LABEL_358;
      case 4:
        if (v150)
        {
          v183 = "Multiple preallocated operand bundles";
          goto LABEL_387;
        }
        if (v156 != 1)
        {
          v183 = "Expected exactly one preallocated bundle operand";
          goto LABEL_387;
        }
        v159 = *v155;
        if (*((unsigned char *)*v155 + 16) != 84
          || (uint64_t v160 = *((void *)v159 - 4)) == 0
          || *(unsigned char *)(v160 + 16)
          || *(void *)(v160 + 24) != *((void *)v159 + 9)
          || (*(_DWORD *)(v160 + 32) & 0x2000) == 0
          || *(_DWORD *)(v160 + 36) != 11)
        {
          v183 = "\"preallocated\" argument must be a token from llvm.call.preallocated.setup";
          goto LABEL_387;
        }
        char v150 = 1;
        goto LABEL_358;
      case 5:
        if (v189)
        {
          v183 = "Multiple gc-live operand bundles";
          goto LABEL_387;
        }
        char v189 = 1;
        goto LABEL_358;
      case 6:
        if (v149)
        {
          v183 = "Multiple \"clang.arc.attachedcall\" operand bundles";
          goto LABEL_387;
        }
        uint64_t v161 = *(void *)(a2 + 72);
        int v162 = *(unsigned __int8 *)(**(void **)(v161 + 16) + 8);
        if (v162 == 15) {
          goto LABEL_323;
        }
        uint64_t v163 = *(void *)(a2 + 64);
        if (v163 && (*(unsigned char *)(v163 + 16) & 1) != 0) {
          goto LABEL_322;
        }
        if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 32)) {
          goto LABEL_345;
        }
        int v162 = *(unsigned __int8 *)(**(void **)(v161 + 16) + 8);
LABEL_322:
        if (v162 != 7)
        {
LABEL_345:
          unsigned int v175 = "a call with operand bundle \"clang.arc.attachedcall\" must call a function returning a pointer or a non"
                 "-returning function that has a void return type";
          goto LABEL_355;
        }
LABEL_323:
        if (v156 != 1 || (uint64_t v164 = *v155, *((unsigned char *)*v155 + 16)))
        {
          unsigned int v175 = "operand bundle \"clang.arc.attachedcall\" requires one function as an argument";
          goto LABEL_355;
        }
        int v165 = *((_DWORD *)v164 + 9);
        if ((v165 - 212) <= 0x17 && ((1 << (v165 + 44)) & 0x804001) != 0) {
          goto LABEL_357;
        }
        if (v165 || (v164[23] & 0x10) == 0) {
          goto LABEL_354;
        }
        uint64_t v167 = ***(void ***)v164;
        uint64_t v168 = *(void *)(v167 + 152);
        uint64_t v169 = *(unsigned int *)(v167 + 168);
        if (!v169) {
          goto LABEL_346;
        }
        LODWORD(v170) = (v169 - 1) & ((v164 >> 4) ^ (v164 >> 9));
        uint64_t v171 = (void *)(v168 + 16 * v170);
        int v172 = (unsigned char *)*v171;
        if ((unsigned char *)*v171 != v164)
        {
          int v173 = 1;
          while (v172 != (unsigned char *)-4096)
          {
            int v174 = v170 + v173++;
            uint64_t v170 = v174 & (v169 - 1);
            int v172 = *(unsigned char **)(v168 + 16 * v170);
            if (v172 == v164)
            {
              uint64_t v171 = (void *)(v168 + 16 * v170);
              goto LABEL_347;
            }
          }
LABEL_346:
          uint64_t v171 = (void *)(v168 + 16 * v169);
        }
LABEL_347:
        v176 = (uint64_t *)v171[1];
        uint64_t v179 = *v176;
        v177 = v176 + 2;
        uint64_t v178 = v179;
        if (v179 == 33)
        {
          BOOL v180 = "objc_claimAutoreleasedReturnValue";
          size_t v181 = 33;
        }
        else if (v178 == 39)
        {
          BOOL v180 = "objc_unsafeClaimAutoreleasedReturnValue";
          size_t v181 = 39;
        }
        else
        {
          if (v178 != 34) {
            goto LABEL_354;
          }
          BOOL v180 = "objc_retainAutoreleasedReturnValue";
          size_t v181 = 34;
        }
        if (!memcmp(v177, v180, v181)) {
          goto LABEL_357;
        }
LABEL_354:
        unsigned int v175 = "invalid function argument";
LABEL_355:
        v194[0] = (uint64_t)v175;
        __int16 v195 = 259;
        sub_1CD5DBE68(a1, (llvm::Twine *)v194);
        if (*(void *)a1) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a2);
        }
LABEL_357:
        char v149 = 1;
        goto LABEL_358;
      case 7:
        if (v90)
        {
          v183 = "Multiple ptrauth operand bundles";
          goto LABEL_387;
        }
        if (v156 != 2)
        {
          v183 = "Expected exactly two ptrauth bundle operands";
          goto LABEL_387;
        }
        if (*((unsigned char *)*v155 + 16) != 16 || *(_DWORD *)(**v155 + 8) != 8205)
        {
          v183 = "Ptrauth bundle key operand must be an i32 constant";
          goto LABEL_387;
        }
        if (*(_DWORD *)(*v155[4] + 8) == 16397)
        {
          char v90 = 1;
LABEL_358:
          ++v148;
          v3 = (llvm::raw_ostream **)a1;
          if (v148 == v151) {
            goto LABEL_171;
          }
          continue;
        }
        v183 = "Ptrauth bundle discriminator operand must be an i64";
LABEL_387:
        v194[0] = (uint64_t)v183;
        __int16 v195 = 259;
        v3 = (llvm::raw_ostream **)a1;
        sub_1CD5DBE68(a1, (llvm::Twine *)v194);
LABEL_260:
        if (*v3)
        {
          v133 = (llvm::raw_ostream **)a1;
LABEL_247:
          sub_1CD5DBED0(v133, (llvm::Value *)a2);
        }
        return;
      default:
        goto LABEL_358;
    }
  }
}

llvm::raw_ostream *sub_1CC646B94(llvm::raw_ostream *result, llvm::Type *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(llvm::DataLayout ***)result;
  unsigned int v7 = *((unsigned __int8 *)a2 + 8);
  if (v7 > 0x11) {
    goto LABEL_6;
  }
  if (((1 << v7) & 0xAC7F) == 0)
  {
    if (((1 << v7) & 0x30000) != 0)
    {
LABEL_11:
      result = (llvm::raw_ostream *)llvm::Type::isSizedDerivedType((uint64_t)a2, 0);
      if (!result) {
        return result;
      }
      goto LABEL_3;
    }
LABEL_6:
    if ((v7 & 0xFE) != 0x12 && v7 != 21) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_3:
  result = (llvm::raw_ostream *)llvm::DataLayout::getAlignment(v6[22], a2, 1);
  if (result >= 0xFu)
  {
    int v9 = *((unsigned __int8 *)a3 + 32);
    if (*((unsigned char *)a3 + 32))
    {
      if (v9 == 1)
      {
        unint64_t v10 = "Incorrect alignment of ";
        v16[0] = "Incorrect alignment of ";
        __int16 v17 = 259;
        char v11 = 3;
      }
      else
      {
        uint64_t v13 = (uint64_t *)*a3;
        uint64_t v14 = a3[1];
        char v11 = 2;
        if (*((unsigned char *)a3 + 33) != 1)
        {
          LOBYTE(v9) = 2;
          uint64_t v13 = a3;
        }
        v16[0] = "Incorrect alignment of ";
        v16[2] = v13;
        v16[3] = v14;
        LOBYTE(v17) = 3;
        HIBYTE(v17) = v9;
        unint64_t v10 = (const char *)v16;
      }
      v18[0] = v10;
      v18[2] = " to called function!";
      char v12 = 3;
    }
    else
    {
      char v11 = 0;
      __int16 v17 = 256;
      char v12 = 1;
    }
    char v19 = v11;
    char v20 = v12;
    uint64_t v15 = (llvm::Value *)*((void *)v5 + 1);
    result = sub_1CD5DBE68((llvm::raw_ostream *)v6, (llvm::Twine *)v18);
    if (*v6) {
      return sub_1CD5DBED0(v6, v15);
    }
  }
  return result;
}

uint64_t sub_1CC646CF4(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v4 = a1 - 32 * (v2 & 0x7FFFFFF);
  unint64_t v7 = *(void *)(v4 - 8);
  uint64_t v5 = v4 - 8;
  unint64_t v6 = v7;
  if ((v7 & 0xFFFFFFFF0) == 0) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v8 = (v6 >> 4);
  int v9 = (uint64_t *)(v5 - v6);
  do
  {
    uint64_t v10 = *v9;
    v9 += 2;
    if (*(_DWORD *)(v10 + 8) == a2) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    --v8;
  }
  while (v8);
  return result;
}

void sub_1CC646D40(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v512 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(uint64_t ****)(a3 - 32);
  if (v6 && !*((unsigned char *)v6 + 16) && v6[3] == *(uint64_t ***)(a3 + 72))
  {
    char v7 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    char v7 = 1;
    if (MEMORY[0x10]) {
      goto LABEL_28;
    }
  }
  if (v6[9] == (uint64_t **)(v6 + 9) && (*((unsigned char *)v6 + 34) & 0x80) == 0)
  {
    uint64_t v8 = (llvm::Metadata *)v6[3];
    unsigned int v9 = *((_DWORD *)v8 + 2);
    uint64_t v10 = (unsigned int *)v511;
    v509 = (unsigned int *)v511;
    uint64_t v510 = 0x800000000;
    llvm::Intrinsic::getIntrinsicInfoTableEntries(a2, (uint64_t)&v509);
    v489 = v509;
    uint64_t v490 = v510;
    v506 = v508;
    uint64_t v507 = 0x400000000;
    int matched = llvm::Intrinsic::matchIntrinsicSignature((uint64_t)v8, &v489, (uint64_t)&v506);
    if (matched == 2)
    {
      char v12 = "Intrinsic has incorrect argument type!";
    }
    else
    {
      if (matched != 1)
      {
        if (v9 < 0x100)
        {
          if (v490)
          {
            if (v490 == 1)
            {
              v489 += 3;
              uint64_t v490 = 0;
            }
            char v12 = "Callsite was not defined with variable arguments!";
            goto LABEL_12;
          }
        }
        else if (v490 != 1 || (int v436 = *v489, v489 += 3, v490 = 0, v436 != 1))
        {
          char v12 = "Intrinsic was not defined with variable arguments!";
          goto LABEL_12;
        }
        uint64_t v13 = (uint64_t)&v488;
        sub_1CC5B8334(a2, (uint64_t)v506, v507, v6[5], (uint64_t)v8, &v488);
        if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v14 = &v488;
        }
        else {
          uint64_t v14 = (std::string *)v488.__r_.__value_.__r.__words[0];
        }
        if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v488.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v488.__r_.__value_.__l.__size_;
        }
        if ((*((unsigned char *)v6 + 23) & 0x10) == 0)
        {
          uint64_t v26 = 0;
          uint64_t v25 = &byte_1CFBCE98E;
          goto LABEL_34;
        }
        uint64_t v16 = ***v6;
        uint64_t v17 = *(void *)(v16 + 152);
        uint64_t v18 = *(unsigned int *)(v16 + 168);
        if (v18)
        {
          LODWORD(v19) = (v18 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          char v20 = (uint64_t ****)(v17 + 16 * v19);
          uint64_t v21 = *v20;
          if (*v20 == v6)
          {
LABEL_33:
            uint64_t v24 = v20[1];
            uint64_t v27 = *v24;
            uint64_t v25 = (char *)(v24 + 2);
            uint64_t v26 = v27;
LABEL_34:
            if ((uint64_t **)size != v26 || size && memcmp(v14, v25, size))
            {
              std::operator+<char>();
              __int16 v505 = 260;
              v503[0] = (uint64_t)&__p;
              sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
              if (*(void *)a1) {
                sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)v6);
              }
              if (SHIBYTE(v499) < 0) {
                operator delete(__p);
              }
              goto LABEL_941;
            }
            int v28 = *(_DWORD *)(a3 + 20);
            uint64_t v29 = a3 - 32 * (v28 & 0x7FFFFFF);
            int v30 = *(unsigned __int8 *)(a3 + 16);
            if (v30 == 84)
            {
              uint64_t v31 = 0;
            }
            else if (v30 == 39)
            {
              uint64_t v31 = (*(_DWORD *)(a3 + 80) + 1);
            }
            else
            {
              uint64_t v31 = 2;
            }
            if (v28 < 0 && (uint64_t v437 = *(void *)(v29 - 8), (v437 & 0xFFFFFFFF0) != 0)) {
              uint64_t v32 = (*(_DWORD *)(v29 - 12) - *(_DWORD *)(v29 - v437));
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v33 = a3 - 32 * v31 - 32 * v32 - 32;
            while (v29 != v33)
            {
              uint64_t v34 = *(void *)v29;
              if (*(void *)v29) {
                BOOL v35 = *(unsigned char *)(*(void *)v29 + 16) == 23;
              }
              else {
                BOOL v35 = 0;
              }
              if (!v35) {
                goto LABEL_49;
              }
              uint64_t v8 = *(llvm::Metadata **)(v34 + 24);
              int v36 = *(unsigned __int8 *)v8;
              if ((v36 - 4) <= 0x1E)
              {
                sub_1CC639E3C(a1, *(void *)(v34 + 24), 0);
                goto LABEL_49;
              }
              uint64_t v13 = *(void *)(*(void *)(a3 + 40) + 56);
              uint64_t v38 = *(void *)(a1 + 440);
              uint64_t v39 = *(unsigned int *)(a1 + 452);
              if (v38 == *(void *)(a1 + 432))
              {
                if (v39)
                {
                  uint64_t v40 = 0;
                  uint64_t v41 = 8 * v39;
                  int v42 = *(llvm::Metadata ***)(a1 + 440);
                  while (*v42 != v8)
                  {
                    if (*v42 == (llvm::Metadata *)-2) {
                      uint64_t v40 = v42;
                    }
                    ++v42;
                    v41 -= 8;
                    if (!v41)
                    {
                      if (!v40) {
                        goto LABEL_64;
                      }
                      void *v40 = v8;
                      --*(_DWORD *)(a1 + 456);
                      goto LABEL_88;
                    }
                  }
                  goto LABEL_49;
                }
LABEL_64:
                unsigned int v43 = *(_DWORD *)(a1 + 448);
                if (v39 < v43)
                {
                  *(_DWORD *)(a1 + 452) = v39 + 1;
                  *(void *)(v38 + 8 * v39) = v8;
                  goto LABEL_88;
                }
              }
              else
              {
                unsigned int v43 = *(_DWORD *)(a1 + 448);
              }
              if (3 * v43 <= 4 * ((int)v39 - *(_DWORD *)(a1 + 456)))
              {
                if (v43 >= 0x40) {
                  v43 *= 2;
                }
                else {
                  unsigned int v43 = 128;
                }
              }
              else if (v43 - v39 >= v43 >> 3)
              {
                goto LABEL_69;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 432), v43);
              unsigned int v43 = *(_DWORD *)(a1 + 448);
              uint64_t v38 = *(void *)(a1 + 440);
LABEL_69:
              unsigned int v44 = v43 - 1;
              unsigned int v45 = (v43 - 1) & ((v8 >> 4) ^ (v8 >> 9));
              uint64_t v46 = (llvm::Metadata **)(v38 + 8 * v45);
              uint64_t v47 = *v46;
              if (*v46 == (llvm::Metadata *)-1)
              {
                uint64_t v48 = 0;
LABEL_81:
                if (v48) {
                  __int16 v52 = v48;
                }
                else {
                  __int16 v52 = v46;
                }
                if (*v52 != v8)
                {
                  if (*v52 == (llvm::Metadata *)-2) {
                    --*(_DWORD *)(a1 + 456);
                  }
                  else {
                    ++*(_DWORD *)(a1 + 452);
                  }
                  *__int16 v52 = v8;
                  int v36 = *(unsigned __int8 *)v8;
LABEL_88:
                  if ((v36 - 3) >= 0xFFFFFFFE) {
                    sub_1CC63E1E8((llvm::raw_ostream *)a1, v8, v13);
                  }
                }
              }
              else
              {
                uint64_t v48 = 0;
                int v49 = 1;
                while (v47 != v8)
                {
                  if (v48) {
                    BOOL v50 = 0;
                  }
                  else {
                    BOOL v50 = v47 == (llvm::Metadata *)-2;
                  }
                  if (v50) {
                    uint64_t v48 = v46;
                  }
                  unsigned int v51 = v45 + v49++;
                  unsigned int v45 = v51 & v44;
                  uint64_t v46 = (llvm::Metadata **)(v38 + 8 * (v51 & v44));
                  uint64_t v47 = *v46;
                  if (*v46 == (llvm::Metadata *)-1) {
                    goto LABEL_81;
                  }
                }
              }
LABEL_49:
              if (v34) {
                BOOL v37 = *(unsigned __int8 *)(v34 + 16) > 0x14u;
              }
              else {
                BOOL v37 = 1;
              }
              if (!v37 && *(unsigned char *)(*(void *)v34 + 8) == 11)
              {
                v503[0] = (uint64_t)"const x86_amx is not allowed in argument!";
                __int16 v505 = 259;
                sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
LABEL_291:
                uint64_t v10 = (unsigned int *)v511;
                goto LABEL_941;
              }
              v29 += 32;
            }
            uint64_t v10 = (unsigned int *)v511;
            if (a2 <= 446)
            {
              switch(a2)
              {
                case 7:
                  int v227 = *(_DWORD *)(a3 + 20);
                  if ((v227 & 0x80000000) == 0) {
                    goto LABEL_941;
                  }
                  uint64_t v228 = a3 - 32 * (v227 & 0x7FFFFFF);
                  uint64_t v229 = *(void *)(v228 - 8);
                  if (!v229) {
                    goto LABEL_941;
                  }
                  uint64_t v230 = -v229;
                  while (2)
                  {
                    uint64_t v231 = *(void *)(v228 + v230 - 8);
                    v232 = (unsigned __int16 *)(v231 + 16);
                    if (*(void *)v231 == 6
                      && (*(_DWORD *)v232 == 1869506409
                        ? (BOOL v233 = *(unsigned __int16 *)(v231 + 20) == 25970)
                        : (BOOL v233 = 0),
                          v233))
                    {
                      uint64_t v234 = 6;
                    }
                    else
                    {
                      if (!llvm::Attribute::isExistingAttribute(v232, *(void *)v231))
                      {
                        v454 = "tags must be valid attribute names";
                        break;
                      }
                      uint64_t v231 = *(void *)(v228 + v230 - 8);
                      uint64_t v234 = *(void *)v231;
                    }
                    int AttrKindFromName = llvm::Attribute::getAttrKindFromName(v231 + 16, v234);
                    uint64_t v236 = *(unsigned int *)(v228 + v230);
                    int v237 = *(_DWORD *)(v228 + v230 + 4);
                    unsigned int v238 = v237 - v236;
                    if (AttrKindFromName == 74)
                    {
                      if ((v238 & 0xFFFFFFFE) == 2)
                      {
                        uint64_t v440 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                        if (*(unsigned char *)(**(void **)(v440 + 32 * v236) + 8) == 15)
                        {
                          if (*(unsigned char *)(**(void **)(v440 + 32 * (v236 + 1)) + 8) == 13)
                          {
                            if (v238 != 3
                              || *(unsigned char *)(**(void **)(v440 + 32 * (v236 + 2)) + 8) == 13)
                            {
                              goto LABEL_941;
                            }
                            v454 = "third argument should be an integer if present";
                          }
                          else
                          {
                            v454 = "second argument should be an integer";
                          }
                        }
                        else
                        {
                          v454 = "first argument should be a pointer";
                        }
                      }
                      else
                      {
                        v454 = "alignment assumptions should have 2 or 3 arguments";
                      }
                      break;
                    }
                    if (v238 >= 3)
                    {
                      v454 = "too many arguments";
                    }
                    else
                    {
                      if (!AttrKindFromName) {
                        goto LABEL_941;
                      }
                      if ((AttrKindFromName - 74) > 6)
                      {
                        if ((byte_1CFAC7B70[AttrKindFromName - 1] & 2) != 0)
                        {
                          if (v238 == 1) {
                            goto LABEL_546;
                          }
                          v454 = "this attribute should have one argument";
                        }
                        else
                        {
                          if ((byte_1CFAC7B70[AttrKindFromName - 1] & 1) == 0 || v237 == v236) {
                            goto LABEL_546;
                          }
                          v454 = "this attribute has no argument";
                        }
                      }
                      else
                      {
                        if (v238 == 2)
                        {
                          if (*(unsigned char *)(*(void *)(a3
                                                    - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                                                    + 32 * (v236 + 1))
                                        + 16) != 16)
                          {
                            v454 = "the second argument should be a constant integral value";
                            break;
                          }
LABEL_546:
                          v230 += 16;
                          if (!v230) {
                            goto LABEL_941;
                          }
                          continue;
                        }
                        v454 = "this attribute should have 2 arguments";
                      }
                    }
                    break;
                  }
                  v503[0] = (uint64_t)v454;
                  __int16 v505 = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                  if (*(void *)a1) {
                    sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a3);
                  }
                  goto LABEL_941;
                case 9:
                  uint64_t v226 = *(llvm::Type **)a3;
                  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
                    uint64_t v226 = (llvm::Type *)**((void **)v226 + 2);
                  }
                  if ((llvm::Type::getPrimitiveSizeInBits(v226) & 0xF) == 0) {
                    goto LABEL_941;
                  }
                  uint64_t v59 = "bswap must be an even number of bytes";
                  goto LABEL_940;
                case 10:
                  uint64_t v220 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  unsigned int v221 = *(unsigned __int8 *)(v220 + 16);
                  if (v221 < 0x1C
                    || ((v222 = v221 - 33, BOOL v37 = v222 > 0x33, v223 = (1 << v222) & 0x8000000000041, !v37)
                      ? (BOOL v224 = v223 == 0)
                      : (BOOL v224 = 1),
                        v224 || *(_DWORD *)(*(void *)(v220 - 32) + 36) != 11))
                  {
                    unsigned int v123 = "llvm.call.preallocated.arg token argument must be a llvm.call.preallocated.setup";
                    goto LABEL_904;
                  }
                  uint64_t v225 = *(void *)(a3 + 64);
                  if ((!v225 || (*(unsigned char *)(v225 + 21) & 1) == 0)
                    && (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 72) & 1) == 0)
                  {
                    unsigned int v123 = "llvm.call.preallocated.arg must be called with a \"preallocated\" call site attribute";
                    goto LABEL_904;
                  }
                  goto LABEL_941;
                case 11:
                  uint64_t v192 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  v487 = (llvm::SmallPtrSetImplBase *)v192;
                  if (v192) {
                    BOOL v193 = *(unsigned char *)(v192 + 16) == 16;
                  }
                  else {
                    BOOL v193 = 0;
                  }
                  if (!v193)
                  {
                    unsigned int v123 = "llvm.call.preallocated.setup argument must be a constant";
                    goto LABEL_904;
                  }
                  uint64_t v194 = *(void *)(a3 + 8);
                  if (!v194) {
                    goto LABEL_941;
                  }
                  char v195 = 0;
                  uint64_t v196 = (void *)(v192 + 24);
                  while (2)
                  {
                    v197 = v10;
                    uint64_t v198 = *(void *)(v194 + 24);
                    unsigned int v199 = *(unsigned __int8 *)(v198 + 16);
                    if (v199 >= 0x1C
                      && v199 - 33 <= 0x33
                      && ((1 << (v199 - 33)) & 0x8000000000041) != 0)
                    {
                      uint64_t v201 = *(void *)(v198 - 32);
                      if (!v201 || *(unsigned char *)(v201 + 16) || *(void *)(v201 + 24) != *(void *)(v198 + 72))
                      {
LABEL_467:
                        if (v195)
                        {
                          v431 = "Can have at most one call corresponding to a llvm.call.preallocated.setup";
                        }
                        else
                        {
                          unsigned int v202 = 0;
                          uint64_t v203 = 0;
                          while (1)
                          {
                            if (v199 == 84) {
                              uint64_t v204 = 0;
                            }
                            else {
                              uint64_t v204 = v199 == 39 ? (*(_DWORD *)(v198 + 80) + 1) : 2;
                            }
                            int v205 = *(_DWORD *)(v198 + 20);
                            if (v205 < 0
                              && (uint64_t v208 = v205 & 0x7FFFFFF, (*(void *)(v198 - 8 - 32 * v208) & 0xFFFFFFFF0) != 0))
                            {
                              uint64_t v207 = -v208;
                              int v206 = *(_DWORD *)(v198 - 32 * v208 - 12)
                                   - *(_DWORD *)(v198 - 32 * v208 - *(void *)(v198 - 32 * v208 - 8));
                            }
                            else
                            {
                              int v206 = 0;
                              uint64_t v207 = -(uint64_t)(v205 & 0x7FFFFFF);
                            }
                            if (v202 >= ((-32
                                                       - 32 * v204
                                                       + 32 * (unint64_t)-v206
                                                       - 32 * v207) >> 5))
                              break;
                            v203 += llvm::CallBase::paramHasAttr(v198, v202++, 72);
                            unsigned int v199 = *(unsigned __int8 *)(v198 + 16);
                          }
                          if (v203)
                          {
                            uint64_t v209 = *((unsigned int *)v487 + 8);
                            uint64_t v210 = (void *)((char *)v487 + 24);
                            if (v209 >= 0x41)
                            {
                              int v211 = 0;
                              int64_t v212 = (unint64_t)(v209 + 63) >> 6;
                              do
                              {
                                BOOL v37 = v212-- < 1;
                                if (v37) {
                                  break;
                                }
                                unint64_t v213 = *(void *)(*v196 + 8 * v212);
                                v211 += __clz(v213);
                              }
                              while (!v213);
                              int v214 = v209 | 0xFFFFFFC0;
                              if ((v209 & 0x3F) == 0) {
                                int v214 = 0;
                              }
                              if ((v209 - v211 - v214) > 0x40) {
                                goto LABEL_873;
                              }
                              uint64_t v210 = (void *)*v196;
                            }
                            if (*v210 == v203)
                            {
                              if (sub_1CC646CF4(v198, 4) > 1) {
                                goto LABEL_941;
                              }
                              sub_1CC233A58((char *)v198, 4, (uint64_t *)&__p);
                              if ((_BYTE)v500)
                              {
                                if (*(void *)__p == a3)
                                {
                                  char v195 = 1;
                                  goto LABEL_494;
                                }
                                unsigned int v123 = "preallocated bundle must have token from corresponding llvm.call.preallocated.setup";
                              }
                              else
                              {
                                unsigned int v123 = "Use of llvm.call.preallocated.setup outside intrinsics must be in \"preallocated\" operand bundle";
                              }
LABEL_904:
                              v503[0] = (uint64_t)v123;
                              __int16 v505 = 259;
                              sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                              goto LABEL_941;
                            }
LABEL_873:
                            v503[0] = (uint64_t)"llvm.call.preallocated.setup arg size must be equal to number of prealloc"
                                               "ated arguments at call site";
                            __int16 v505 = 259;
                            sub_1CD5DCBE8((llvm::raw_ostream *)a1, (llvm::Twine *)v503, (llvm::Value *)a3, (llvm::Value *)v198);
                            goto LABEL_941;
                          }
                          v431 = "cannot use preallocated intrinsics on a call without preallocated arguments";
                        }
                        goto LABEL_900;
                      }
                      int v215 = *(_DWORD *)(v201 + 36);
                      if (v215 != 12)
                      {
                        if (v215 != 10) {
                          goto LABEL_467;
                        }
                        uint64_t v216 = *(void *)(v198 - 32 * (*(_DWORD *)(v198 + 20) & 0x7FFFFFF) + 32);
                        if (v216) {
                          BOOL v217 = *(unsigned char *)(v216 + 16) == 16;
                        }
                        else {
                          BOOL v217 = 0;
                        }
                        if (!v217)
                        {
                          v431 = "llvm.call.preallocated.alloc arg index must be a constant";
LABEL_900:
                          v503[0] = (uint64_t)v431;
                          __int16 v505 = 259;
                          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
LABEL_901:
                          uint64_t v10 = v197;
                          goto LABEL_941;
                        }
                        unsigned int v218 = *(_DWORD *)(v216 + 32);
                        LODWORD(v498) = v218;
                        if (v218 >= 0x41) {
                          operator new[]();
                        }
                        v219 = *(void **)(v216 + 24);
                        __p = v219;
                        uint64_t v10 = v197;
                        if ((uint64_t)((void)v219 << -(char)v218) >> -(char)v218 < 0
                          || (uint64_t)((void)v219 << -(char)v218) >> -(char)v218 >= (uint64_t)(*v196 << -(char)v218) >> -(char)v218)
                        {
                          v503[0] = (uint64_t)"llvm.call.preallocated.alloc arg index must be between 0 and corresponding "
                                             "llvm.call.preallocated.setup's argument count";
                          __int16 v505 = 259;
                          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                          goto LABEL_941;
                        }
                      }
LABEL_494:
                      uint64_t v194 = *(void *)(v194 + 8);
                      if (!v194) {
                        goto LABEL_941;
                      }
                      continue;
                    }
                    break;
                  }
                  v431 = "Uses of llvm.call.preallocated.setup must be calls";
                  goto LABEL_900;
                case 12:
                  uint64_t v187 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  unsigned int v188 = *(unsigned __int8 *)(v187 + 16);
                  if (v188 >= 0x1C)
                  {
                    unsigned int v189 = v188 - 33;
                    BOOL v37 = v189 > 0x33;
                    uint64_t v190 = (1 << v189) & 0x8000000000041;
                    BOOL v191 = v37 || v190 == 0;
                    if (!v191 && *(_DWORD *)(*(void *)(v187 - 32) + 36) == 11) {
                      goto LABEL_941;
                    }
                  }
                  unsigned int v123 = "llvm.call.preallocated.teardown token argument must be a llvm.call.preallocated.setup";
                  goto LABEL_904;
                case 36:
                  v239 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3
                                                                        - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                                                                        + 96));
                  int v240 = *((unsigned __int8 *)v239 + 16);
                  if (v240 == 19) {
                    goto LABEL_941;
                  }
                  if (v240 == 3
                    && (uint64_t v241 = v239, (*((unsigned char *)v239 + 80) & 1) != 0)
                    && (*((_DWORD *)v239 + 5) & 0x7FFFFFF) != 0
                    && (llvm::GlobalValue::isInterposable(v239) & 1) == 0
                    && (*((unsigned char *)v241 + 80) & 2) == 0)
                  {
                    if ((*(unsigned char *)(*((void *)v241 - 4) + 16) & 0xFE) == 8) {
                      goto LABEL_941;
                    }
                    unsigned int v123 = "info argument of llvm.coro.id must refer to either a struct or an array";
                  }
                  else
                  {
                    unsigned int v123 = "info argument of llvm.coro.id must refer to an initialized constant";
                  }
                  goto LABEL_904;
                case 55:
                  uint64_t v184 = "addr";
                  uint64_t v185 = a1;
                  uint64_t v186 = 4;
                  goto LABEL_569;
                case 56:
                  if (*(unsigned char *)(*(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)) + 16) != 23)
                  {
                    uint64_t v59 = "invalid llvm.dbg.declare intrinsic call 1";
                    goto LABEL_940;
                  }
                  uint64_t v184 = "declare";
                  uint64_t v185 = a1;
                  uint64_t v186 = 7;
LABEL_569:
                  sub_1CC64B118(v185, (uint64_t)v184, v186, a3);
                  goto LABEL_941;
                case 57:
                  v253 = *(unsigned int **)(*(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)) + 24);
                  if (*(unsigned char *)v253 != 26)
                  {
                    __int16 v501 = 1283;
                    v496 = (llvm::Value *)v253;
                    __p = "invalid llvm.dbg.";
                    v499 = "label";
                    uint64_t v500 = 5;
                    v502 = (llvm::Value *)a3;
                    v503[0] = (uint64_t)&__p;
                    v504 = " intrinsic variable";
                    __int16 v505 = 770;
                    sub_1CD5DBD80((llvm::raw_ostream *)a1, (llvm::Twine *)v503, &v502, &v496);
                    goto LABEL_941;
                  }
                  uint64_t v254 = *(unsigned int **)(a3 + 48);
                  if (v254 && *(unsigned char *)v254 != 5) {
                    goto LABEL_941;
                  }
                  uint64_t v255 = *(llvm::Value **)(a3 + 40);
                  v502 = v255;
                  if (v255) {
                    uint64_t v255 = (llvm::Value *)*((void *)v255 + 7);
                  }
                  v495 = (llvm::Metadata *)v253;
                  v496 = v255;
                  v494 = (llvm::Metadata *)v254;
                  if (!v254)
                  {
                    __int16 v501 = 1283;
                    __p = "llvm.dbg.";
                    v499 = "label";
                    uint64_t v500 = 5;
                    v503[0] = (uint64_t)&__p;
                    v504 = " intrinsic requires a !dbg attachment";
                    __int16 v505 = 770;
                    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                    if (*(void *)a1) {
                      sub_1CD5DCB08((llvm::raw_ostream *)a1, (llvm::Value *)a3, &v502, &v496);
                    }
                    goto LABEL_941;
                  }
                  int v256 = *(unsigned int **)&v253[-2 * v253[2]];
                  if (!v256) {
                    goto LABEL_728;
                  }
                  uint64_t v257 = (unsigned __int8 *)v256;
                  while (2)
                  {
                    int v258 = *v257;
                    if (v258 != 17)
                    {
                      if ((v258 & 0xFE) == 0x12)
                      {
                        uint64_t v257 = *(unsigned __int8 **)&v257[-8 * *((unsigned int *)v257 + 2) + 8];
                        if (!v257) {
                          break;
                        }
                        continue;
                      }
LABEL_728:
                      uint64_t v257 = 0;
                    }
                    break;
                  }
                  v348 = *(unsigned int **)&v254[-2 * v254[2]];
                  if (!v348) {
                    goto LABEL_941;
                  }
                  v349 = (unsigned __int8 *)v348;
                  while (1)
                  {
                    int v350 = *v349;
                    if (v350 == 17) {
                      break;
                    }
                    if ((v350 & 0xFE) == 0x12)
                    {
                      v349 = *(unsigned __int8 **)&v349[-8 * *((unsigned int *)v349 + 2) + 8];
                      if (v349) {
                        continue;
                      }
                    }
                    goto LABEL_941;
                  }
                  if (v257 && v257 != v349)
                  {
                    __int16 v501 = 1283;
                    __p = "mismatched subprogram between llvm.dbg.";
                    v499 = "label";
                    uint64_t v500 = 5;
                    v503[0] = (uint64_t)&__p;
                    v504 = " label and !dbg attachment";
                    __int16 v505 = 770;
                    v493 = (llvm::Value *)a3;
                    while ((*(unsigned char *)v256 & 0xFE) == 0x12)
                      int v256 = *(unsigned int **)&v256[-2 * v256[2] + 2];
                    v492 = (llvm::Metadata *)v256;
                    while ((*(unsigned char *)v348 & 0xFE) == 0x12)
                      v348 = *(unsigned int **)&v348[-2 * v348[2] + 2];
                    v491 = (llvm::Metadata *)v348;
                    sub_1CD5DCCCC((llvm::raw_ostream *)a1, (llvm::Twine *)v503, &v493, &v502, &v496, &v495, &v492, &v494, &v491);
                  }
                  goto LABEL_941;
                case 58:
                  uint64_t v184 = "value";
                  uint64_t v185 = a1;
                  uint64_t v186 = 5;
                  goto LABEL_569;
                case 62:
                case 63:
                  if (*(unsigned char *)(*(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)) + 16) == 80) {
                    goto LABEL_941;
                  }
                  uint64_t v59 = "eh.exceptionpointer argument must be a catchpad";
                  goto LABEL_940;
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                  LODWORD(v13) = *(_DWORD *)(*(void *)(a3 - 32) + 36);
                  LODWORD(v8) = 1;
                  int v60 = 2;
                  unsigned int v58 = 2;
                  switch((int)v13)
                  {
                    case 'P':
                    case 'Q':
                    case 'R':
                    case '^':
                    case 'a':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'l':
                    case 'o':
                    case 'r':
                    case 's':
                    case 't':
                    case 'v':
                      int v60 = 1;
                      break;
                    case 'S':
                    case 'V':
                    case 'Y':
                    case '_':
                    case 'm':
                    case 'n':
                      break;
                    case 'T':
                    case 'U':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                      LODWORD(v8) = 0;
                      goto LABEL_147;
                    case 'X':
                    case 'Z':
                      int v60 = 3;
                      break;
                    default:
                      LODWORD(v8) = 0;
                      int v60 = 1;
LABEL_147:
                      unsigned int v58 = 1;
                      break;
                  }
                  if ((v13 & 0xFFFFFFFE) == 0x54) {
                    int v53 = v60 + 1;
                  }
                  else {
                    int v53 = v60;
                  }
                  unsigned int v57 = *(unsigned __int8 *)(a3 + 16);
                  if (v57 == 84)
                  {
                    uint64_t v69 = 0;
                  }
                  else
                  {
LABEL_990:
                    if (v57 == 39) {
                      uint64_t v69 = (*(_DWORD *)(a3 + 80) + 1);
                    }
                    else {
                      uint64_t v69 = 2;
                    }
                  }
                  unsigned int v70 = v53 + v58;
                  int v71 = *(_DWORD *)(a3 + 20);
                  if (v71 < 0
                    && (uint64_t v438 = a3 - 32 * (v71 & 0x7FFFFFF), v439 = *(void *)(v438 - 8), (v439 & 0xFFFFFFFF0) != 0))
                  {
                    uint64_t v73 = -(uint64_t)(v71 & 0x7FFFFFF);
                    int v72 = *(_DWORD *)(v438 - 12) - *(_DWORD *)(v438 - v439);
                  }
                  else
                  {
                    int v72 = 0;
                    uint64_t v73 = -(uint64_t)(v71 & 0x7FFFFFF);
                  }
                  uint64_t v74 = a3 - 32 * v69 + 32 * -v72;
                  int v75 = (uint64_t **)(a3 + 32 * v73);
                  if (v70 != ((unint64_t)(v74 - (void)v75 - 32) >> 5))
                  {
                    uint64_t v59 = "invalid arguments for constrained FP intrinsic";
                    goto LABEL_940;
                  }
                  switch((int)v13)
                  {
                    case 'T':
                    case 'U':
                      if (sub_1CC5E4A64((uint64_t)v75[8]) < 0x10) {
                        goto LABEL_335;
                      }
                      uint64_t v59 = "invalid predicate for constrained FP comparison intrinsic";
                      goto LABEL_940;
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '_':
                    case 'c':
                    case 'd':
                    case 'e':
                      goto LABEL_335;
                    case '[':
                    case '^':
                      uint64_t v83 = **v75;
                      int v84 = *(_DWORD *)(v83 + 8) & 0xFE;
                      if (v84 == 18) {
                        unsigned int v85 = *(unsigned __int8 *)(**(void **)(v83 + 16) + 8);
                      }
                      else {
                        unsigned int v85 = *(_DWORD *)(v83 + 8);
                      }
                      if (v85 >= 7)
                      {
                        uint64_t v59 = "Intrinsic first argument must be FP or FP vector";
                      }
                      else
                      {
                        uint64_t v131 = *(llvm::Type **)a3;
                        int v132 = *(_DWORD *)(*(void *)a3 + 8) & 0xFE;
                        if (v132 == 18) {
                          unsigned int v133 = *(unsigned __int8 *)(**((void **)v131 + 2) + 8);
                        }
                        else {
                          unsigned int v133 = *(_DWORD *)(*(void *)a3 + 8);
                        }
                        if (v133 >= 7)
                        {
                          uint64_t v59 = "Intrinsic result must be FP or FP vector";
                        }
                        else
                        {
                          if ((v84 == 18) != (v132 == 18)) {
                            goto LABEL_631;
                          }
                          if (v84 == 18)
                          {
                            if (*(_DWORD *)(v83 + 32) != *((_DWORD *)v131 + 8)) {
                              goto LABEL_333;
                            }
                            uint64_t v83 = **(void **)(v83 + 16);
                          }
                          Primitiveunint64_t SizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v83);
                          if (v132 == 18) {
                            uint64_t v131 = (llvm::Type *)**((void **)v131 + 2);
                          }
                          unsigned int v135 = llvm::Type::getPrimitiveSizeInBits(v131);
                          if (v13 == 94)
                          {
                            if (PrimitiveSizeInBits > v135) {
                              goto LABEL_335;
                            }
                            uint64_t v59 = "Intrinsic first argument's type must be larger than result type";
                          }
                          else
                          {
                            if (PrimitiveSizeInBits < v135) {
                              goto LABEL_335;
                            }
                            uint64_t v59 = "Intrinsic first argument's type must be smaller than result type";
                          }
                        }
                      }
                      goto LABEL_940;
                    case '\\':
                    case ']':
                      uint64_t v81 = **v75;
                      if ((*(_DWORD *)(v81 + 8) & 0xFE) == 0x12)
                      {
                        if (*(unsigned __int8 *)(**(void **)(v81 + 16) + 8) < 7u)
                        {
                          int v77 = *(_DWORD *)(v81 + 32);
                          int v78 = *(llvm::Type **)a3;
                          int v82 = *(_DWORD *)(*(void *)a3 + 8);
                          int v80 = v82 & 0xFE;
                          if ((v77 == 0) == (v80 == 18)) {
                            goto LABEL_631;
                          }
                          if (v80 == 18)
                          {
                            if (*(unsigned char *)(**((void **)v78 + 2) + 8) == 13) {
                              goto LABEL_332;
                            }
LABEL_311:
                            uint64_t v59 = "Intrinsic result must be an integer";
                            goto LABEL_940;
                          }
LABEL_310:
                          if (v82 == 13) {
                            goto LABEL_331;
                          }
                          goto LABEL_311;
                        }
                      }
                      else if (*(_DWORD *)(v81 + 8) < 7u)
                      {
                        int v78 = *(llvm::Type **)a3;
                        int v82 = *(_DWORD *)(*(void *)a3 + 8);
                        int v80 = v82 & 0xFE;
                        if (v80 == 18) {
                          goto LABEL_631;
                        }
                        int v77 = 0;
                        goto LABEL_310;
                      }
                      uint64_t v59 = "Intrinsic first argument must be floating point";
                      goto LABEL_940;
                    case 'a':
                    case 'b':
                    case 'f':
                    case 'g':
                      if ((*(_DWORD *)(**v75 + 8) & 0xFE) == 0x12 || (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
                        goto LABEL_237;
                      }
                      goto LABEL_335;
                    default:
                      if (v13 != 115 && v13 != 118) {
                        goto LABEL_335;
                      }
                      uint64_t v76 = **v75;
                      if ((*(_DWORD *)(v76 + 8) & 0xFE) == 0x12)
                      {
                        if (*(unsigned char *)(**(void **)(v76 + 16) + 8) == 13)
                        {
                          int v77 = *(_DWORD *)(v76 + 32);
                          int v78 = *(llvm::Type **)a3;
                          int v79 = *(_DWORD *)(*(void *)a3 + 8);
                          int v80 = v79 & 0xFE;
                          if ((v77 == 0) != (v80 == 18))
                          {
                            if (v80 == 18)
                            {
                              if (*(unsigned __int8 *)(**((void **)v78 + 2) + 8) >= 7u) {
                                goto LABEL_739;
                              }
                              goto LABEL_332;
                            }
LABEL_330:
                            if (v79 >= 7u)
                            {
LABEL_739:
                              uint64_t v59 = "Intrinsic result must be a floating point";
                              goto LABEL_940;
                            }
LABEL_331:
                            if (v80 != 18)
                            {
LABEL_335:
                              if ((unsigned __int16)llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)a3) <= 0xFFu)
                              {
                                uint64_t v59 = "invalid exception behavior argument";
                                goto LABEL_940;
                              }
                              if (v8
                                && (unsigned __int16)llvm::ConstrainedFPIntrinsic::getRoundingMode((llvm::ConstrainedFPIntrinsic *)a3) <= 0xFFu)
                              {
                                uint64_t v59 = "invalid rounding mode argument";
                                goto LABEL_940;
                              }
                              goto LABEL_941;
                            }
LABEL_332:
                            if (v77 != *((_DWORD *)v78 + 8))
                            {
LABEL_333:
                              uint64_t v59 = "Intrinsic first argument and result vector lengths must be equal";
                              goto LABEL_940;
                            }
                            goto LABEL_335;
                          }
                          goto LABEL_631;
                        }
                      }
                      else if (*(_DWORD *)(v76 + 8) == 13)
                      {
                        int v78 = *(llvm::Type **)a3;
                        int v79 = *(_DWORD *)(*(void *)a3 + 8);
                        int v80 = v79 & 0xFE;
                        if (v80 != 18)
                        {
                          int v77 = 0;
                          goto LABEL_330;
                        }
LABEL_631:
                        uint64_t v59 = "Intrinsic first argument and result disagree on vector use";
                        goto LABEL_940;
                      }
                      uint64_t v59 = "Intrinsic first argument must be integer";
                      goto LABEL_940;
                  }
                case 119:
                  if (*(unsigned char *)(a3 + 16) != 84)
                  {
                    uint64_t v59 = "experimental_deoptimize cannot be invoked";
                    goto LABEL_940;
                  }
                  if (sub_1CC646CF4(a3, 0) != 1)
                  {
                    unsigned int v123 = "experimental_deoptimize must have exactly one \"deopt\" operand bundle";
                    goto LABEL_904;
                  }
                  uint64_t v176 = *(void *)(a3 + 40);
                  if (*(void *)a3 != **(void **)(*(void *)(*(void *)(v176 + 56) + 24) + 16))
                  {
                    unsigned int v123 = "experimental_deoptimize return type must match caller return type";
                    goto LABEL_904;
                  }
                  if (*(unsigned char *)(a3 + 16) != 84) {
                    goto LABEL_941;
                  }
                  uint64_t v177 = *(void *)(a3 + 32);
                  uint64_t v178 = v177 - 24;
                  BOOL v180 = v177 == v176 + 40 || v177 == 0;
                  if (v180) {
                    uint64_t v181 = 0;
                  }
                  else {
                    uint64_t v181 = v178;
                  }
                  int v182 = *(unsigned __int8 *)(v181 + 16);
                  if (v182 != 29) {
                    uint64_t v181 = 0;
                  }
                  if (v180 || v182 != 29)
                  {
                    unsigned int v123 = "calls to experimental_deoptimize must be followed by a return";
                    goto LABEL_904;
                  }
                  if (*(unsigned char *)(*(void *)a3 + 8) != 7)
                  {
                    uint64_t v183 = *(_DWORD *)(v181 + 20) & 0x7FFFFFF;
                    if (!v183 || *(void *)(v181 - 32 * v183) != a3)
                    {
                      unsigned int v123 = "calls to experimental_deoptimize must be followed by a return of the value computed by expe"
                             "rimental_deoptimize";
                      goto LABEL_904;
                    }
                  }
                  goto LABEL_941;
                case 122:
                  int v376 = *(unsigned __int8 *)(a3 + 16);
                  if (v376 == 84)
                  {
                    uint64_t v377 = 0;
                  }
                  else if (v376 == 39)
                  {
                    uint64_t v377 = (*(_DWORD *)(a3 + 80) + 1);
                  }
                  else
                  {
                    uint64_t v377 = 2;
                  }
                  int v378 = *(_DWORD *)(a3 + 20);
                  if (v378 < 0
                    && (uint64_t v441 = a3 - 32 * (v378 & 0x7FFFFFF), v442 = *(void *)(v441 - 8), (v442 & 0xFFFFFFFF0) != 0))
                  {
                    uint64_t v380 = -(uint64_t)(v378 & 0x7FFFFFF);
                    int v379 = *(_DWORD *)(v441 - 12) - *(_DWORD *)(v441 - v442);
                  }
                  else
                  {
                    int v379 = 0;
                    uint64_t v380 = -(uint64_t)(v378 & 0x7FFFFFF);
                  }
                  uint64_t v381 = a3 - 32 * v377 + 32 * -v379;
                  int64_t v382 = (void **)(a3 + 32 * v380);
                  if (((v381 - (void)v382 - 32) & 0x1FFFFFFFE0) != 0x60)
                  {
                    uint64_t v59 = "wrong number of arguments";
                    goto LABEL_940;
                  }
                  v197 = (unsigned int *)v511;
                  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
                    int v383 = *(unsigned __int8 *)(**(void **)(*(void *)a3 + 16) + 8);
                  }
                  else {
                    int v383 = *(_DWORD *)(*(void *)a3 + 8);
                  }
                  if (v383 == 15)
                  {
                    unsigned int v400 = *v382;
                    if (*v382 && *((unsigned char *)v400 + 16) == 94)
                    {
                      v401 = (llvm::BasicBlock *)*((void *)v400 + 5);
                      uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v401);
                      if (!UniquePredecessor)
                      {
                        v503[0] = (uint64_t)"safepoints should have unique landingpads";
                        __int16 v505 = 259;
                        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                        if (v401) {
                          BOOL v403 = *(void *)a1 == 0;
                        }
                        else {
                          BOOL v403 = 1;
                        }
                        if (v403) {
                          goto LABEL_901;
                        }
                        v404 = (llvm::raw_ostream **)a1;
                        v405 = v401;
                        goto LABEL_897;
                      }
                      v427 = (llvm::Value *)UniquePredecessor;
                      uint64_t v428 = *(void *)(UniquePredecessor + 40);
                      if (v428 == UniquePredecessor + 40
                        || (v428 ? (uint64_t v429 = v428 - 24) : (uint64_t v429 = 0),
                            *(unsigned __int8 *)(v429 + 16) - 29 >= 0xB))
                      {
                        v430 = "safepoint block should be well formed";
                        goto LABEL_959;
                      }
                      if (!sub_1CC27FA84(v429))
                      {
                        v430 = "gc relocate should be linked to a statepoint";
LABEL_959:
                        v503[0] = (uint64_t)v430;
                        __int16 v505 = 259;
                        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                        if (!*(void *)a1) {
                          goto LABEL_901;
                        }
                        v404 = (llvm::raw_ostream **)a1;
                        v405 = v427;
LABEL_897:
                        sub_1CD5DBED0(v404, v405);
                        goto LABEL_901;
                      }
                    }
                    else
                    {
                      __p = *v382;
                      if (!sub_1CC27FA84((uint64_t)v400))
                      {
                        v503[0] = (uint64_t)"gc relocate is incorrectly tied to the statepoint";
                        __int16 v505 = 259;
                        sub_1CD5DCC58((llvm::raw_ostream *)a1, (llvm::Twine *)v503, (llvm::Value *)a3, (llvm::Value **)&__p);
                        goto LABEL_901;
                      }
                    }
                    Statepoint = (char *)llvm::GCProjectionInst::getStatepoint((llvm::GCProjectionInst *)a3);
                    uint64_t v418 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                    uint64_t v419 = *(void *)(v418 + 32);
                    if (*(unsigned char *)(v419 + 16) == 16)
                    {
                      uint64_t v420 = *(void *)(v418 + 64);
                      if (*(unsigned char *)(v420 + 16) == 16)
                      {
                        v421 = (void *)(v419 + 24);
                        if (*(_DWORD *)(v419 + 32) >= 0x41u) {
                          v421 = (void *)*v421;
                        }
                        v422 = (void *)(v420 + 24);
                        if (*(_DWORD *)(v420 + 32) >= 0x41u) {
                          v422 = (void *)*v422;
                        }
                        v423 = (void *)*v421;
                        v424 = (void *)*v422;
                        sub_1CC233A58(Statepoint, 5, (uint64_t *)&__p);
                        if (!(_BYTE)v500)
                        {
LABEL_932:
                          uint64_t DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a3);
                          if ((*(_DWORD *)(*(void *)DerivedPtr + 8) & 0xFE) == 0x12) {
                            int v426 = *(unsigned __int8 *)(**(void **)(*(void *)DerivedPtr + 16) + 8);
                          }
                          else {
                            int v426 = *(_DWORD *)(*(void *)DerivedPtr + 8);
                          }
                          if (v426 == 15)
                          {
                            v432 = *(llvm::Type **)a3;
                            uint64_t v433 = *(void *)llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a3);
                            unsigned int v434 = *((_DWORD *)v432 + 2);
                            int v435 = *(_DWORD *)(v433 + 8);
                            if (((v434 & 0xFE) == 18) == ((v435 & 0xFE) == 18))
                            {
                              if ((v434 & 0xFE) == 0x12) {
                                unsigned int v434 = *(_DWORD *)(**((void **)v432 + 2) + 8);
                              }
                              if ((v435 & 0xFE) == 0x12) {
                                int v435 = *(_DWORD *)(**(void **)(v433 + 16) + 8);
                              }
                              if ((v435 ^ v434) < 0x100) {
                                goto LABEL_941;
                              }
                              __int16 v406 = "gc.relocate: relocating a pointer shouldn't change its address space";
                            }
                            else
                            {
                              __int16 v406 = "gc.relocate: vector relocates to vector and pointer to pointer";
                            }
                          }
                          else
                          {
                            __int16 v406 = "gc.relocate: relocated value must be a gc pointer";
                          }
                          goto LABEL_895;
                        }
                        if ((unint64_t)v423 >= v498)
                        {
                          __int16 v406 = "gc.relocate: statepoint base index out of bounds";
                        }
                        else
                        {
                          if ((unint64_t)v424 < v498) {
                            goto LABEL_932;
                          }
                          __int16 v406 = "gc.relocate: statepoint derived index out of bounds";
                        }
                      }
                      else
                      {
                        __int16 v406 = "gc.relocate operand #3 must be integer offset";
                      }
                    }
                    else
                    {
                      __int16 v406 = "gc.relocate operand #2 must be integer offset";
                    }
                  }
                  else
                  {
                    __int16 v406 = "gc.relocate must return a pointer or a vector of pointers";
                  }
LABEL_895:
                  v503[0] = (uint64_t)v406;
                  __int16 v505 = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                  if (!*(void *)a1) {
                    goto LABEL_901;
                  }
                  v404 = (llvm::raw_ostream **)a1;
                  v405 = (llvm::Value *)a3;
                  goto LABEL_897;
                case 123:
                  if ((*(_WORD *)(*(void *)(*(void *)(a3 + 40) + 56) + 18) & 0x4000) == 0) {
                    goto LABEL_305;
                  }
                  uint64_t v384 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  unsigned int v385 = *(unsigned __int8 *)(v384 + 16);
                  if (v385 < 0x1C
                    || ((v386 = v385 - 33, BOOL v37 = v386 > 0x33, v387 = (1 << v386) & 0x8000000000041, !v37)
                      ? (BOOL v388 = v387 == 0)
                      : (BOOL v388 = 1),
                        v388
                     || (uint64_t v389 = *(void *)(v384 - 32)) == 0
                     || *(unsigned char *)(v389 + 16)
                     || *(void *)(v389 + 24) != *(void *)(v384 + 72)
                     || *(void *)(v389 + 72) != v389 + 72
                     || (*(unsigned char *)(v389 + 34) & 0x80) != 0
                     || *(_DWORD *)(v389 + 36) != 124))
                  {
                    v503[0] = (uint64_t)"gc.result operand #1 must be from a statepoint";
                    __int16 v505 = 259;
                    __p = (void *)v384;
                    sub_1CD5DCC58((llvm::raw_ostream *)a1, (llvm::Twine *)v503, (llvm::Value *)a3, (llvm::Value **)&__p);
                    goto LABEL_941;
                  }
                  if (*(void *)a3 == **(void **)(llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v384 + 64), 2)+ 16))goto LABEL_941; {
                  uint64_t v59 = "gc.result result type does not match wrapped callee";
                  }
                  goto LABEL_940;
                case 124:
                  if (*(unsigned char *)(a3 + 16) == 84 && *(unsigned char *)(*(void *)(a3 - 32) + 16) == 24)
                  {
                    uint64_t v59 = "gc.statepoint support for inline assembly unimplemented";
                    goto LABEL_940;
                  }
                  if ((*(_WORD *)(*(void *)(*(void *)(a3 + 40) + 56) + 18) & 0x4000) == 0)
                  {
                    uint64_t v392 = "Enclosing function does not use GC.";
                    goto LABEL_870;
                  }
                  unsigned int v395 = (uint64_t *)(a3 + 64);
                  uint64_t v394 = *(void *)(a3 + 64);
                  if (v394 && (*(unsigned char *)(v394 + 17) & 0x10) != 0) {
                    goto LABEL_869;
                  }
                  LODWORD(v503[0]) = 7;
                  if ((!sub_1CC5CB59C(a3, (__int32 *)v503, 1uLL)
                     || (uint64_t v443 = *(void *)(a3 - 32)) != 0
                     && !*(unsigned char *)(v443 + 16)
                     && *(void *)(v443 + 24) == *(void *)(a3 + 72)
                     && *(_DWORD *)(v443 + 36) == 7)
                    && (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) & 1) != 0)
                  {
                    goto LABEL_869;
                  }
                  uint64_t v396 = *v395;
                  if (*v395)
                  {
                    if ((*(unsigned char *)(v396 + 17) & 0x30) != 0) {
                      goto LABEL_869;
                    }
                  }
                  int v397 = *(_DWORD *)(a3 + 20);
                  if ((v397 & 0x80000000) == 0) {
                    goto LABEL_862;
                  }
                  uint64_t v447 = a3 - 32 * (v397 & 0x7FFFFFF);
                  uint64_t v450 = *(void *)(v447 - 8);
                  uint64_t v448 = v447 - 8;
                  uint64_t v449 = v450;
                  if (!v450) {
                    goto LABEL_862;
                  }
                  uint64_t v451 = -v449;
                  do
                  {
                    unsigned int v452 = *(_DWORD *)(*(void *)(v448 + v451) + 8);
                    if (v452 >= 2 && v452 != 7) {
                      goto LABEL_865;
                    }
                    v451 += 16;
                  }
                  while (v451);
LABEL_862:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 45) & 1) != 0
                    || (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) & 1) != 0)
                  {
                    goto LABEL_869;
                  }
                  uint64_t v396 = *v395;
LABEL_865:
                  if (v396 && (*(unsigned char *)(v396 + 12) & 8) != 0
                    || ((LODWORD(v503[0]) = 7, !sub_1CC5CB59C(a3, (__int32 *)v503, 1uLL))
                     || (uint64_t v455 = *(void *)(a3 - 32)) != 0
                     && !*(unsigned char *)(v455 + 16)
                     && *(void *)(v455 + 24) == *(void *)(a3 + 72)
                     && *(_DWORD *)(v455 + 36) == 7)
                    && llvm::CallBase::hasFnAttrOnCalledFunction(a3, 3))
                  {
LABEL_869:
                    uint64_t v392 = "gc.statepoint must read and write all memory to preserve reordering restrictions required by "
                           "safepoint semantics";
                    goto LABEL_870;
                  }
                  int v456 = *(_DWORD *)(a3 + 20);
                  v457 = (void *)(a3 - 32 * (v456 & 0x7FFFFFF));
                  uint64_t v458 = v457[4];
                  unsigned int v459 = *(_DWORD *)(v458 + 32);
                  if (v459 > 0x40) {
                    uint64_t v460 = **(void **)(v458 + 24);
                  }
                  else {
                    uint64_t v460 = (uint64_t)(*(void *)(v458 + 24) << -(char)v459) >> -(char)v459;
                  }
                  if (v460 < 0)
                  {
                    uint64_t v392 = "gc.statepoint number of patchable bytes must be positive";
                    goto LABEL_870;
                  }
                  uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a3 + 64), 2);
                  if (!ParamElementType)
                  {
                    uint64_t v392 = "gc.statepoint callee argument must have elementtype attribute";
                    goto LABEL_870;
                  }
                  unsigned int v462 = *(_DWORD *)(ParamElementType + 8);
                  if (v462 != 14)
                  {
                    uint64_t v392 = "gc.statepoint callee elementtype must be function type";
                    goto LABEL_870;
                  }
                  uint64_t v463 = v457[12];
                  v464 = (void *)(v463 + 24);
                  if (*(_DWORD *)(v463 + 32) >= 0x41u) {
                    v464 = (void *)*v464;
                  }
                  v465 = (void *)*v464;
                  if ((v465 & 0x80000000) != 0)
                  {
                    uint64_t v392 = "gc.statepoint number of arguments to underlying call must be positive";
                    goto LABEL_870;
                  }
                  uint64_t v466 = (*(_DWORD *)(ParamElementType + 12) - 1);
                  if (v462 < 0x100)
                  {
                    if (v466 != v465)
                    {
                      uint64_t v392 = "gc.statepoint mismatch in number of call args";
                      goto LABEL_870;
                    }
                  }
                  else
                  {
                    if ((int)v466 > (int)v465)
                    {
                      uint64_t v392 = "gc.statepoint mismatch in number of vararg call args";
                      goto LABEL_870;
                    }
                    if (*(unsigned char *)(**(void **)(ParamElementType + 16) + 8) != 7)
                    {
                      uint64_t v392 = "gc.statepoint doesn't support wrapping non-void vararg functions yet";
                      goto LABEL_870;
                    }
                  }
                  uint64_t v467 = v457[16];
                  v468 = (void *)(v467 + 24);
                  if (*(_DWORD *)(v467 + 32) >= 0x41u) {
                    v468 = (void *)*v468;
                  }
                  if (*v468 >= 4uLL)
                  {
                    uint64_t v392 = "unknown flag used in gc.statepoint flags argument";
                    goto LABEL_870;
                  }
                  if ((int)v466 < 1)
                  {
LABEL_1067:
                    uint64_t v473 = v457[4 * (v465 + 5)];
                    if (*(unsigned char *)(v473 + 16) != 16)
                    {
                      uint64_t v392 = "gc.statepoint number of transition arguments must be constant integer";
                      goto LABEL_870;
                    }
                    v474 = (void *)(v473 + 24);
                    if (*(_DWORD *)(v473 + 32) >= 0x41u) {
                      v474 = (void *)*v474;
                    }
                    if (*(_DWORD *)v474)
                    {
                      uint64_t v392 = "gc.statepoint w/inline transition bundle is deprecated";
                      goto LABEL_870;
                    }
                    uint64_t v475 = v457[4 * (v465 + 6)];
                    if (*(unsigned char *)(v475 + 16) != 16)
                    {
                      uint64_t v392 = "gc.statepoint number of deoptimization arguments must be constant integer";
                      goto LABEL_870;
                    }
                    v476 = (void *)(v475 + 24);
                    if (*(_DWORD *)(v475 + 32) >= 0x41u) {
                      v476 = (void *)*v476;
                    }
                    if (*(_DWORD *)v476)
                    {
                      uint64_t v392 = "gc.statepoint w/inline deopt operands is deprecated";
                      goto LABEL_870;
                    }
                    int v477 = *(unsigned __int8 *)(a3 + 16);
                    if (v477 == 84)
                    {
                      uint64_t v478 = 0;
                    }
                    else if (v477 == 39)
                    {
                      uint64_t v478 = (*(_DWORD *)(a3 + 80) + 1);
                    }
                    else
                    {
                      uint64_t v478 = 2;
                    }
                    int v479 = v465 + 7;
                    if (v456 < 0 && (uint64_t v486 = *(v457 - 1), (v486 & 0xFFFFFFFF0) != 0)) {
                      int v480 = *((_DWORD *)v457 - 3) - *(_DWORD *)((char *)v457 - v486);
                    }
                    else {
                      int v480 = 0;
                    }
                    if (v479 != ((-32 * v478
                                               + 32 * -v480
                                               - -32 * (unint64_t)(v456 & 0x7FFFFFF)
                                               - 32) >> 5))
                    {
                      uint64_t v392 = "gc.statepoint too many arguments";
                      goto LABEL_870;
                    }
                    uint64_t v481 = *(void *)(a3 + 8);
                    if (v481)
                    {
                      while (1)
                      {
                        v482 = *(unsigned char **)(v481 + 24);
                        __p = v482;
                        if (v482[16] == 84) {
                          v483 = (llvm::Value *)v482;
                        }
                        else {
                          v483 = 0;
                        }
                        v502 = v483;
                        if (!v483)
                        {
                          v484 = "illegal use of statepoint token";
                          goto LABEL_1108;
                        }
                        if (!sub_1CC070820((uint64_t)v483) && !sub_1CC64B564((uint64_t)v483)) {
                          break;
                        }
                        if (sub_1CC64B564((uint64_t)v483))
                        {
                          if (*((void *)v483 - 4 * (*((_DWORD *)v483 + 5) & 0x7FFFFFF)) != a3)
                          {
                            v485 = "gc.result connected to wrong gc.statepoint";
                            goto LABEL_1110;
                          }
                        }
                        else if (sub_1CC070820(a3) && *((void *)v483 - 4 * (*((_DWORD *)v483 + 5) & 0x7FFFFFF)) != a3)
                        {
                          v485 = "gc.relocate connected to wrong gc.statepoint";
LABEL_1110:
                          v503[0] = (uint64_t)v485;
                          __int16 v505 = 259;
                          sub_1CD5DCC58((llvm::raw_ostream *)a1, (llvm::Twine *)v503, (llvm::Value *)a3, &v502);
LABEL_872:
                          uint64_t v10 = (unsigned int *)v511;
                          goto LABEL_941;
                        }
                        uint64_t v481 = *(void *)(v481 + 8);
                        uint64_t v10 = (unsigned int *)v511;
                        if (!v481) {
                          goto LABEL_941;
                        }
                      }
                      v484 = "gc.result or gc.relocate are the only value uses of a gc.statepoint";
LABEL_1108:
                      v503[0] = (uint64_t)v484;
                      __int16 v505 = 259;
                      sub_1CD5DCC58((llvm::raw_ostream *)a1, (llvm::Twine *)v503, (llvm::Value *)a3, (llvm::Value **)&__p);
                      goto LABEL_872;
                    }
                    goto LABEL_941;
                  }
                  uint64_t v469 = 0;
                  uint64_t v470 = *v395;
                  uint64_t v471 = 160 - 32 * (v456 & 0x7FFFFFF);
                  while (1)
                  {
                    if (**(void **)(a3 + v471) != *(void *)(*(void *)(ParamElementType + 16) + 8 + 8 * v469))
                    {
                      uint64_t v392 = "gc.statepoint call argument does not match wrapped function type";
                      goto LABEL_870;
                    }
                    if (v462 >= 0x100)
                    {
                      if (v470)
                      {
                        if ((v469 + 7) < *(_DWORD *)(v470 + 8))
                        {
                          uint64_t v472 = *(void *)(*v395 + 96 + 8 * v469);
                          if (v472)
                          {
                            if ((*(unsigned char *)(v472 + 21) & 2) != 0) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    ++v469;
                    v471 += 32;
                    if (v466 == v469) {
                      goto LABEL_1067;
                    }
                  }
                  uint64_t v392 = "Attribute 'sret' cannot be used for vararg call arguments!";
LABEL_870:
                  v503[0] = (uint64_t)v392;
                  __int16 v505 = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                  if (*(void *)a1) {
                    sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a3);
                  }
                  goto LABEL_872;
                case 125:
                  if (*(unsigned char *)(a3 + 16) != 84)
                  {
                    uint64_t v59 = "experimental_guard cannot be invoked";
                    goto LABEL_940;
                  }
                  if (sub_1CC646CF4(a3, 0) == 1) {
                    goto LABEL_941;
                  }
                  unsigned int v123 = "experimental_guard must have exactly one \"deopt\" operand bundle";
                  goto LABEL_904;
                case 126:
                  unsigned int v262 = *(_DWORD *)(a1 + 2024);
                  if (v262 >= *(_DWORD *)(a1 + 2028)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(a1 + 2016) + 8 * v262) = a3;
                  ++*(_DWORD *)(a1 + 2024);
                  goto LABEL_941;
                case 130:
                  int v263 = *(llvm::Type **)a3;
                  if (*(void *)a3)
                  {
                    if ((*((_DWORD *)v263 + 2) & 0xFE) == 0x12)
                    {
                      BOOL v264 = (llvm::Type *)**((void **)v263 + 2);
                      if (*((unsigned char *)v264 + 8) == 13 && (llvm::Type::getPrimitiveSizeInBits(v264) & 0xFFFFFFF8) != 0) {
                        goto LABEL_941;
                      }
                    }
                  }
                  uint64_t v59 = "experimental_stepvector only supported for vectors of integers with a bitwidth of at least 8.";
                  goto LABEL_940;
                case 131:
                  uint64_t v242 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                  uint64_t v243 = *(uint64_t **)v242;
                  uint64_t v244 = *(void *)(v242 + 32);
                  unsigned int v245 = (void *)(v244 + 24);
                  if (*(_DWORD *)(v244 + 32) >= 0x41u) {
                    unsigned int v245 = (void *)*v245;
                  }
                  v246 = *(llvm::Type **)a3;
                  uint64_t v247 = *v243;
                  if (*(void *)(*(void *)a3 + 24) != *(void *)(v247 + 24))
                  {
                    uint64_t v59 = "experimental_vector_extract result must have the same element type as the input vector.";
                    goto LABEL_940;
                  }
                  unsigned int v248 = *(_DWORD *)v245;
                  unsigned int v249 = *((_DWORD *)v246 + 8);
                  if (v248 % v249)
                  {
                    unsigned int v123 = "experimental_vector_extract index must be a constant multiple of the result type's known mini"
                           "mum vector length.";
                    goto LABEL_904;
                  }
                  if ((*(unsigned char *)(v247 + 8) == 19) == (*((unsigned char *)v246 + 8) == 19))
                  {
                    unsigned int v250 = *(_DWORD *)(v247 + 32);
                    unsigned int v251 = v249 + v248;
                    if (v250 <= v248 || v251 > v250)
                    {
                      unsigned int v123 = "experimental_vector_extract would overrun.";
                      goto LABEL_904;
                    }
                  }
                  goto LABEL_941;
                case 132:
                  uint64_t v269 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                  int v270 = *(uint64_t **)v269;
                  uint64_t v271 = *(uint64_t **)(v269 + 32);
                  uint64_t v272 = *(void *)(v269 + 64);
                  unsigned int v273 = (void *)(v272 + 24);
                  if (*(_DWORD *)(v272 + 32) >= 0x41u) {
                    unsigned int v273 = (void *)*v273;
                  }
                  uint64_t v274 = *v270;
                  uint64_t v275 = *v271;
                  if (*(void *)(v274 + 24) != *(void *)(*v271 + 24))
                  {
                    uint64_t v59 = "experimental_vector_insert parameters must have the same element type.";
                    goto LABEL_940;
                  }
                  unsigned int v276 = *(_DWORD *)v273;
                  unsigned int v277 = *(_DWORD *)(v275 + 32);
                  if (v276 % v277)
                  {
                    unsigned int v123 = "experimental_vector_insert index must be a constant multiple of the subvector's known minimum vector length.";
                    goto LABEL_904;
                  }
                  if ((*(unsigned char *)(v274 + 8) == 19) == (*(unsigned char *)(v275 + 8) == 19))
                  {
                    unsigned int v278 = *(_DWORD *)(v274 + 32);
                    unsigned int v279 = v277 + v276;
                    if (v278 <= v276 || v279 > v278)
                    {
                      unsigned int v123 = "subvector operand of experimental_vector_insert would overrun the vector being inserted into.";
                      goto LABEL_904;
                    }
                  }
                  goto LABEL_941;
                case 134:
                  uint64_t v259 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
                  unsigned int v260 = *(_DWORD *)(v259 + 32);
                  if (v260 > 0x40) {
                    uint64_t v261 = **(void **)(v259 + 24);
                  }
                  else {
                    uint64_t v261 = (uint64_t)(*(void *)(v259 + 24) << -(char)v260) >> -(char)v260;
                  }
                  int64_t v296 = *(unsigned int *)(*(void *)a3 + 32);
                  uint64_t v297 = *(void *)(a3 + 40);
                  if (v297)
                  {
                    uint64_t v298 = *(void *)(v297 + 56);
                    if (v298)
                    {
                      uint64_t v299 = *(void *)(v298 + 112);
                      if (v299)
                      {
                        if (*(unsigned char *)(v299 + 22))
                        {
                          if (*(_DWORD *)(v299 + 8) && (v300 = *(llvm::AttributeSetNode **)(v299 + 40)) != 0) {
                            unsigned int VScaleRangeMin = llvm::AttributeSetNode::getVScaleRangeMin(v300);
                          }
                          else {
                            unsigned int VScaleRangeMin = 1;
                          }
                          int64_t v296 = VScaleRangeMin * (unint64_t)v296;
                        }
                      }
                    }
                  }
                  if (v261 >= 0) {
                    int64_t v302 = v261;
                  }
                  else {
                    int64_t v302 = -v261;
                  }
                  BOOL v303 = v302 <= v296;
                  if (v261 >= 0) {
                    BOOL v303 = v261 < v296;
                  }
                  if (v303) {
                    goto LABEL_941;
                  }
                  uint64_t v59 = "The splice index exceeds the range [-VL, VL-1] where VL is the known minimum number of elements "
                        "in the vector. For scalable vectors the minimum number of elements is determined from vscale_range.";
                  goto LABEL_940;
                case 135:
                case 136:
                case 137:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                  int v53 = *(_DWORD *)(*(void *)(a3 - 32) + 36);
                  if ((v53 - 339) > 0x2A || ((1 << (v53 - 83)) & 0x4A28000410FLL) == 0)
                  {
                    if (v53 == 334)
                    {
                      if (llvm::VPCmpIntrinsic::getPredicate((llvm::VPCmpIntrinsic *)a3) > 0xF)
                      {
                        uint64_t v59 = "invalid predicate for VP FP comparison intrinsic";
                        goto LABEL_940;
                      }
                      int v53 = *(_DWORD *)(*(void *)(a3 - 32) + 36);
                    }
                    if (v53 == 346
                      && llvm::VPCmpIntrinsic::getPredicate((llvm::VPCmpIntrinsic *)a3) - 32 >= 0xA)
                    {
                      uint64_t v59 = "invalid predicate for VP integer comparison intrinsic";
                      goto LABEL_940;
                    }
                  }
                  else
                  {
                    uint64_t v55 = *(llvm::Type **)a3;
                    uint64_t v56 = **(void **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                    unsigned int v57 = *(unsigned __int8 *)(*(void *)a3 + 8);
                    unsigned int v58 = *(unsigned __int8 *)(v56 + 8);
                    if (*(_DWORD *)(*(void *)a3 + 32) != *(_DWORD *)(v56 + 32) || (v57 != 19) == (v58 == 19))
                    {
                      uint64_t v59 = "VP cast intrinsic first argument and result vector lengths must be equal";
                      goto LABEL_940;
                    }
                    switch(v53)
                    {
                      case 339:
                        int v89 = v57 & 0xFE;
                        if (v89 == 18) {
                          unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                        }
                        if (v57 > 6) {
                          goto LABEL_674;
                        }
                        int v90 = v58 & 0xFE;
                        if (v90 == 18) {
                          unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                        }
                        if (v58 >= 7)
                        {
LABEL_674:
                          uint64_t v59 = "llvm.vp.fpext intrinsic first argument and result element type must be floating-point";
                          goto LABEL_940;
                        }
                        if (v89 == 18) {
                          uint64_t v55 = (llvm::Type *)**((void **)v55 + 2);
                        }
                        unsigned int v91 = llvm::Type::getPrimitiveSizeInBits(v55);
                        if (v90 == 18) {
                          uint64_t v56 = **(void **)(v56 + 16);
                        }
                        if (v91 <= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v56))
                        {
                          uint64_t v59 = "llvm.vp.fpext intrinsic the bit size of first argument must be smaller than the bit size"
                                " of the return type";
                          goto LABEL_940;
                        }
                        goto LABEL_941;
                      case 340:
                      case 341:
                        if ((v57 & 0xFE) == 0x12) {
                          unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                        }
                        if (v57 == 13)
                        {
                          if ((v58 & 0xFE) == 0x12) {
                            unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                          }
                          if (v58 < 7) {
                            goto LABEL_941;
                          }
                        }
                        uint64_t v59 = "llvm.vp.fptoui or llvm.vp.fptosi intrinsic first argument element type must be floating-po"
                              "int and result element type must be integer";
                        goto LABEL_940;
                      case 342:
                        int v92 = v57 & 0xFE;
                        if (v92 == 18) {
                          unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                        }
                        if (v57 > 6) {
                          goto LABEL_675;
                        }
                        int v93 = v58 & 0xFE;
                        if (v93 == 18) {
                          unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                        }
                        if (v58 >= 7)
                        {
LABEL_675:
                          uint64_t v59 = "llvm.vp.fptrunc intrinsic first argument and result element type must be floating-point";
                          goto LABEL_940;
                        }
                        if (v92 == 18) {
                          uint64_t v55 = (llvm::Type *)**((void **)v55 + 2);
                        }
                        unsigned int v94 = llvm::Type::getPrimitiveSizeInBits(v55);
                        if (v93 == 18) {
                          uint64_t v56 = **(void **)(v56 + 16);
                        }
                        if (v94 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v56))
                        {
                          uint64_t v59 = "llvm.vp.fptrunc intrinsic the bit size of first argument must be larger than the bit siz"
                                "e of the return type";
                          goto LABEL_940;
                        }
                        break;
                      case 343:
                      case 344:
                      case 345:
                      case 346:
                      case 348:
                      case 349:
                      case 350:
                      case 351:
                      case 352:
LABEL_989:
                        __break(1u);
                        goto LABEL_990;
                      case 347:
                        if ((v57 & 0xFE) == 0x12) {
                          unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                        }
                        if (v57 == 15)
                        {
                          if ((v58 & 0xFE) == 0x12) {
                            unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                          }
                          if (v58 == 13) {
                            goto LABEL_941;
                          }
                        }
                        uint64_t v59 = "llvm.vp.inttoptr intrinsic first argument element type must be integer and result element "
                              "type must be pointer";
                        goto LABEL_940;
                      case 353:
                        if ((v57 & 0xFE) == 0x12) {
                          unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                        }
                        if (v57 == 13)
                        {
                          if ((v58 & 0xFE) == 0x12) {
                            unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                          }
                          if (v58 == 15) {
                            goto LABEL_941;
                          }
                        }
                        uint64_t v59 = "llvm.vp.ptrtoint intrinsic first argument element type must be pointer and result element "
                              "type must be integer";
                        goto LABEL_940;
                      default:
                        switch(v53)
                        {
                          case 371:
                          case 373:
                          case 374:
                          case 375:
                          case 377:
                          case 379:
                          case 380:
                            goto LABEL_989;
                          case 372:
                          case 378:
                            if ((v57 & 0xFE) == 0x12) {
                              unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                            }
                            if (v57 <= 6)
                            {
                              if ((v58 & 0xFE) == 0x12) {
                                unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                              }
                              if (v58 == 13) {
                                goto LABEL_941;
                              }
                            }
                            uint64_t v59 = "llvm.vp.uitofp or llvm.vp.sitofp intrinsic first argument element type must be integer"
                                  " and result element type must be floating-point";
                            goto LABEL_940;
                          case 376:
                            int v86 = v57 & 0xFE;
                            if (v86 == 18) {
                              unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                            }
                            if (v57 != 13) {
                              goto LABEL_673;
                            }
                            int v87 = v58 & 0xFE;
                            if (v87 == 18) {
                              unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                            }
                            if (v58 != 13)
                            {
LABEL_673:
                              uint64_t v59 = "llvm.vp.trunc intrinsic first argument and result element type must be integer";
                              goto LABEL_940;
                            }
                            if (v86 == 18) {
                              uint64_t v55 = (llvm::Type *)**((void **)v55 + 2);
                            }
                            unsigned int v88 = llvm::Type::getPrimitiveSizeInBits(v55);
                            if (v87 == 18) {
                              uint64_t v56 = **(void **)(v56 + 16);
                            }
                            if (v88 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v56))
                            {
                              uint64_t v59 = "llvm.vp.trunc intrinsic the bit size of first argument must be larger than the bit s"
                                    "ize of the return type";
                              goto LABEL_940;
                            }
                            goto LABEL_941;
                          default:
                            int v61 = v57 & 0xFE;
                            if (v61 == 18) {
                              unsigned int v57 = *(unsigned __int8 *)(**((void **)v55 + 2) + 8);
                            }
                            if (v57 != 13) {
                              goto LABEL_630;
                            }
                            int v62 = v58 & 0xFE;
                            if (v62 == 18) {
                              unsigned int v58 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
                            }
                            if (v58 != 13)
                            {
LABEL_630:
                              uint64_t v59 = "llvm.vp.zext or llvm.vp.sext intrinsic first argument and result element type must be integer";
                              goto LABEL_940;
                            }
                            if (v61 == 18) {
                              uint64_t v55 = (llvm::Type *)**((void **)v55 + 2);
                            }
                            unsigned int v63 = llvm::Type::getPrimitiveSizeInBits(v55);
                            if (v62 == 18) {
                              uint64_t v56 = **(void **)(v56 + 16);
                            }
                            if (v63 <= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v56))
                            {
                              uint64_t v59 = "llvm.vp.zext or llvm.vp.sext intrinsic the bit size of first argument must be smalle"
                                    "r than the bit size of the return type";
                              goto LABEL_940;
                            }
                            break;
                        }
                        goto LABEL_941;
                    }
                  }
                  goto LABEL_941;
                case 146:
                  uint64_t v373 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
                  if (v373) {
                    BOOL v374 = *(unsigned char *)(v373 + 16) == 23;
                  }
                  else {
                    BOOL v374 = 0;
                  }
                  if (!v374 || (uint64_t v375 = *(uint64_t ***)(v373 + 24)) == 0)
                  {
                    uint64_t v59 = "missing rounding mode argument";
                    goto LABEL_940;
                  }
                  if (*(unsigned char *)v375)
                  {
                    v503[0] = (uint64_t)"invalid value for llvm.fptrunc.round metadata operand (the operand should be a string)";
                    __int16 v505 = 259;
                    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                    if (*(void *)a1) {
                      sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)v375);
                    }
                  }
                  else
                  {
                    unsigned __int16 v398 = llvm::convertStrToRoundingMode(v375[1] + 3, *v375[1]);
                    if (v398 >= 0x100u && v398 != 7) {
                      goto LABEL_941;
                    }
                    v503[0] = (uint64_t)"unsupported rounding mode argument";
                    __int16 v505 = 259;
                    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                    if (*(void *)a1) {
                      sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a3);
                    }
                  }
                  goto LABEL_291;
                case 150:
                case 151:
                case 152:
                  if (a2 != 151) {
                    goto LABEL_304;
                  }
                  uint64_t v128 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
                  if (!v128 || *((unsigned char *)v128 + 16) != 59)
                  {
                    uint64_t v59 = "llvm.gcroot parameter #1 must be an alloca.";
                    goto LABEL_940;
                  }
                  unsigned int v129 = *(unsigned __int8 *)(*(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32) + 16);
                  if (v129 >= 0x15)
                  {
                    uint64_t v59 = "llvm.gcroot parameter #2 must be a constant.";
                    goto LABEL_940;
                  }
                  if (v129 == 19 && *(unsigned char *)(*((void *)v128 + 8) + 8) != 15)
                  {
                    uint64_t v59 = "llvm.gcroot parameter #1 must either be a pointer alloca, or argument #2 must be a non-null constant.";
                    goto LABEL_940;
                  }
LABEL_304:
                  if ((*(_WORD *)(*(void *)(*(void *)(a3 + 40) + 56) + 18) & 0x4000) == 0)
                  {
LABEL_305:
                    uint64_t v59 = "Enclosing function does not use GC.";
                    goto LABEL_940;
                  }
                  goto LABEL_941;
                case 153:
                  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
                  {
                    if (*(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8) == 269) {
                      goto LABEL_941;
                    }
                    uint64_t v59 = "get_active_lane_mask: element type is not i1";
                  }
                  else
                  {
                    uint64_t v59 = "get_active_lane_mask: must return a vector";
                  }
                  goto LABEL_940;
                case 158:
                  if (!*((unsigned char *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a3
                                                                                  - 32
                                                                                  * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                                                                                  + 32))
                        + 16))
                    goto LABEL_941;
                  uint64_t v59 = "llvm.init_trampoline parameter #2 must resolve to a function.";
                  goto LABEL_940;
                case 164:
                  uint64_t v168 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  if (v168) {
                    BOOL v169 = *(unsigned char *)(v168 + 16) == 16;
                  }
                  else {
                    BOOL v169 = 0;
                  }
                  if (!v169) {
                    goto LABEL_748;
                  }
                  uint64_t v170 = (llvm::APInt *)(v168 + 24);
                  unsigned int v171 = *(_DWORD *)(v168 + 32);
                  unsigned int v172 = v171 - 1;
                  int v173 = v170;
                  if (v171 >= 0x41) {
                    int v173 = (llvm::APInt *)(*(void *)v170 + 8 * (v172 >> 6));
                  }
                  uint64_t v174 = *(void *)v173 & (1 << v172);
                  if (v171) {
                    BOOL v175 = v174 == 0;
                  }
                  else {
                    BOOL v175 = 1;
                  }
                  if (v175) {
                    goto LABEL_941;
                  }
                  if (v171 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v170) == v171) {
                      goto LABEL_941;
                    }
                  }
                  else if (*(void *)v170 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v171)
                  {
                    goto LABEL_941;
                  }
LABEL_748:
                  uint64_t v59 = "invariant_start parameter must be -1, 0 or a positive number";
                  goto LABEL_940;
                case 169:
                case 170:
                case 180:
                case 181:
                  if ((*(_DWORD *)(**(void **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)) + 8) & 0xFE) != 0x12
                    && (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) != 0x12)
                  {
                    goto LABEL_941;
                  }
LABEL_237:
                  uint64_t v59 = "Intrinsic does not support vectors";
                  goto LABEL_940;
                case 173:
                  uint64_t v353 = *(void *)(a3 + 40);
                  uint64_t v354 = *(void *)(*(void *)(v353 + 56) + 80);
                  if (v354) {
                    uint64_t v355 = v354 - 24;
                  }
                  else {
                    uint64_t v355 = 0;
                  }
                  if (v353 != v355)
                  {
                    uint64_t v59 = "llvm.localescape used outside of entry block";
                    goto LABEL_940;
                  }
                  if (*(unsigned char *)(a1 + 800))
                  {
                    uint64_t v59 = "multiple calls to llvm.localescape in one function";
                    goto LABEL_940;
                  }
                  int v356 = *(_DWORD *)(a3 + 20);
                  uint64_t v357 = v356 & 0x7FFFFFF;
                  int v358 = *(unsigned __int8 *)(a3 + 16);
                  if (v358 == 84)
                  {
                    uint64_t v359 = 0;
                  }
                  else if (v358 == 39)
                  {
                    uint64_t v359 = (*(_DWORD *)(a3 + 80) + 1);
                  }
                  else
                  {
                    uint64_t v359 = 2;
                  }
                  uint64_t v360 = a3 - 32 * v357;
                  if (v356 < 0 && (uint64_t v444 = *(void *)(v360 - 8), (v444 & 0xFFFFFFFF0) != 0)) {
                    uint64_t v361 = (*(_DWORD *)(v360 - 12) - *(_DWORD *)(v360 - v444));
                  }
                  else {
                    uint64_t v361 = 0;
                  }
                  if (v360 == a3 - 32 * v359 - 32 * v361 - 32) {
                    goto LABEL_787;
                  }
                  unint64_t v362 = (32 * v359 + 32 * v361) ^ 0xFFFFFFFFFFFFFFE0;
                  uint64_t v363 = -32 * v357;
                  do
                  {
                    v364 = *(llvm::Value **)(a3 + v363);
                    if (*((unsigned char *)v364 + 16) != 19)
                    {
                      if ((v365 = llvm::Value::stripPointerCasts(v364)) == 0
                        || *((unsigned char *)v365 + 16) != 59
                        || *(unsigned char *)(*((void *)v365 - 4) + 16) != 16
                        || ((uint64_t v366 = *((void *)v365 + 5), (v367 = *(void *)(*(void *)(v366 + 56) + 80)) != 0)
                          ? (uint64_t v368 = v367 - 24)
                          : (uint64_t v368 = 0),
                            v366 != v368 || (*((_WORD *)v365 + 9) & 0x40) != 0))
                      {
                        uint64_t v59 = "llvm.localescape only accepts static allocas";
                        goto LABEL_940;
                      }
                    }
                    v363 += 32;
                  }
                  while (v362 != v363);
                  int v358 = *(unsigned __int8 *)(a3 + 16);
LABEL_787:
                  if (v358 == 84)
                  {
                    uint64_t v369 = 0;
                  }
                  else if (v358 == 39)
                  {
                    uint64_t v369 = (*(_DWORD *)(a3 + 80) + 1);
                  }
                  else
                  {
                    uint64_t v369 = 2;
                  }
                  int v370 = 0;
                  int v371 = *(_DWORD *)(a3 + 20);
                  uint64_t v372 = -(uint64_t)(v371 & 0x7FFFFFF);
                  if (v371 < 0)
                  {
                    uint64_t v445 = a3 - 32 * (v371 & 0x7FFFFFF);
                    uint64_t v446 = *(void *)(v445 - 8);
                    if ((v446 & 0xFFFFFFFF0) != 0) {
                      int v370 = *(_DWORD *)(v445 - 12) - *(_DWORD *)(v445 - v446);
                    }
                    else {
                      int v370 = 0;
                    }
                  }
                  v503[0] = *(void *)(v353 + 56);
                  *((_DWORD *)sub_1CD467E2C(a1 + 832, v503) + 2) = (-32 * v369
                                                                  + 32 * (unint64_t)-v370
                                                                  - 32 * v372
                                                                  - 32) >> 5;
                  *(unsigned char *)(a1 + 800) = 1;
                  goto LABEL_941;
                case 174:
                  v390 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
                  if (*((unsigned char *)v390 + 16)) {
                    v391 = 0;
                  }
                  else {
                    v391 = v390;
                  }
                  __p = v391;
                  if (!v391) {
                    goto LABEL_826;
                  }
                  if (*((unsigned char *)v391 + 16))
                  {
                    if (*((unsigned char *)v391 + 16) != 3 || (*((_DWORD *)v391 + 5) & 0x7FFFFFF) != 0) {
                      goto LABEL_907;
                    }
                  }
                  else if (*((llvm::Value **)v391 + 9) != (llvm::Value *)((char *)v391 + 72) {
                         || (*((unsigned char *)v391 + 34) & 0x80) != 0)
                  }
                  {
LABEL_907:
                    uint64_t v407 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
                    v408 = sub_1CD467E2C(a1 + 832, (uint64_t *)&__p);
                    unint64_t v409 = *((unsigned int *)v408 + 3);
                    uint64_t v410 = *(unsigned int *)(v407 + 32);
                    if (v410 >= 0x41)
                    {
                      int v412 = 0;
                      int64_t v413 = (unint64_t)(v410 + 63) >> 6;
                      do
                      {
                        BOOL v37 = v413-- < 1;
                        if (v37) {
                          break;
                        }
                        unint64_t v414 = *(void *)(*(void *)(v407 + 24) + 8 * v413);
                        v412 += __clz(v414);
                      }
                      while (!v414);
                      int v415 = v410 | 0xFFFFFFC0;
                      if ((v410 & 0x3F) == 0) {
                        int v415 = 0;
                      }
                      if ((v410 - v412 - v415) > 0x40) {
                        goto LABEL_917;
                      }
                      unint64_t v411 = **(void **)(v407 + 24);
                    }
                    else
                    {
                      unint64_t v411 = *(void *)(v407 + 24);
                    }
                    if (!HIDWORD(v411))
                    {
                      unint64_t v416 = v411 + 1;
                      goto LABEL_919;
                    }
LABEL_917:
                    unint64_t v416 = 0x100000000;
LABEL_919:
                    if (v416 > v409) {
                      LODWORD(v409) = v416;
                    }
                    *((_DWORD *)v408 + 3) = v409;
                    goto LABEL_941;
                  }
LABEL_826:
                  uint64_t v59 = "llvm.localrecover first argument must be function defined in this module";
                  goto LABEL_940;
                case 184:
                  uint64_t v267 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
                  uint64_t v268 = *(unsigned int *)(v267 + 32);
                  if (v268 > 0x40)
                  {
                    int v313 = 0;
                    unint64_t v314 = (unint64_t)(v268 + 63) >> 6;
                    uint64_t v315 = v314;
                    do
                    {
                      BOOL v37 = v315-- < 1;
                      if (v37) {
                        break;
                      }
                      unint64_t v316 = *(void *)(*(void *)(v267 + 24) + 8 * v315);
                      v313 += __clz(v316);
                    }
                    while (!v316);
                    int v317 = v268 | 0xFFFFFFC0;
                    if ((v268 & 0x3F) == 0) {
                      int v317 = 0;
                    }
                    if (v313 + v317 == v268) {
                      goto LABEL_941;
                    }
                    int v318 = 0;
                    uint64_t v319 = *(int8x8_t **)(v267 + 24);
                    do
                    {
                      int8x8_t v320 = *v319++;
                      uint8x8_t v321 = (uint8x8_t)vcnt_s8(v320);
                      v321.i16[0] = vaddlv_u8(v321);
                      v318 += v321.i32[0];
                      --v314;
                    }
                    while (v314);
                    if (v318 == 1) {
                      goto LABEL_941;
                    }
                  }
                  else if ((*(void *)(v267 + 24) & (*(void *)(v267 + 24) - 1)) == 0)
                  {
                    goto LABEL_941;
                  }
                  uint64_t v59 = "masked_gather: alignment must be 0 or a power of 2";
                  goto LABEL_940;
                case 185:
                  v288 = *(llvm::Type **)a3;
                  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
                  {
                    uint64_t v289 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                    uint64_t v290 = **(void **)(v289 + 64);
                    if ((*(_DWORD *)(v290 + 8) & 0xFE) == 0x12)
                    {
                      uint64_t v291 = *(void *)v289;
                      BOOL v292 = *(llvm::Type ***)(v289 + 96);
                      unsigned int v293 = *(int8x8_t **)(v289 + 32);
                      uint64_t v294 = v293[4].u32[0];
                      if (v294 > 0x40)
                      {
                        int v330 = 0;
                        unint64_t v331 = (unint64_t)(v294 + 63) >> 6;
                        BOOL v332 = (int8x8_t *)v293[3];
                        do
                        {
                          int8x8_t v333 = *v332++;
                          uint8x8_t v334 = (uint8x8_t)vcnt_s8(v333);
                          v334.i16[0] = vaddlv_u8(v334);
                          v330 += v334.i32[0];
                          --v331;
                        }
                        while (v331);
                        if (v330 != 1) {
                          goto LABEL_621;
                        }
                      }
                      else
                      {
                        uint8x8_t v295 = (uint8x8_t)vcnt_s8(v293[3]);
                        v295.i16[0] = vaddlv_u8(v295);
                        if (v295.u32[0] != 1)
                        {
LABEL_621:
                          uint64_t v59 = "masked_load: alignment must be a power of 2";
                          goto LABEL_940;
                        }
                      }
                      uint64_t v335 = *(llvm::Type **)(*(void *)v291 + 24);
                      if (v335) {
                        BOOL v336 = v335 == v288;
                      }
                      else {
                        BOOL v336 = 1;
                      }
                      if (v336)
                      {
                        if (*v292 == v288)
                        {
                          if ((*(_DWORD *)(*(void *)a3 + 8) == 19) != (*(_DWORD *)(v290 + 8) != 19)
                            && *(_DWORD *)(v290 + 32) == *((_DWORD *)v288 + 8))
                          {
                            goto LABEL_941;
                          }
                          uint64_t v59 = "masked_load: vector mask must be same length as return";
                        }
                        else
                        {
                          uint64_t v59 = "masked_load: pass through and return type must match";
                        }
                      }
                      else
                      {
                        uint64_t v59 = "masked_load: return must match pointer type";
                      }
                      goto LABEL_940;
                    }
                    uint64_t v59 = "masked_load: mask must be vector";
                  }
                  else
                  {
                    uint64_t v59 = "masked_load: must return a vector";
                  }
                  goto LABEL_940;
                case 186:
                  uint64_t v265 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
                  uint64_t v266 = *(unsigned int *)(v265 + 32);
                  if (v266 > 0x40)
                  {
                    int v304 = 0;
                    unint64_t v305 = (unint64_t)(v266 + 63) >> 6;
                    uint64_t v306 = v305;
                    do
                    {
                      BOOL v37 = v306-- < 1;
                      if (v37) {
                        break;
                      }
                      unint64_t v307 = *(void *)(*(void *)(v265 + 24) + 8 * v306);
                      v304 += __clz(v307);
                    }
                    while (!v307);
                    int v308 = v266 | 0xFFFFFFC0;
                    if ((v266 & 0x3F) == 0) {
                      int v308 = 0;
                    }
                    if (v304 + v308 == v266) {
                      goto LABEL_941;
                    }
                    int v309 = 0;
                    uint64_t v310 = *(int8x8_t **)(v265 + 24);
                    do
                    {
                      int8x8_t v311 = *v310++;
                      uint8x8_t v312 = (uint8x8_t)vcnt_s8(v311);
                      v312.i16[0] = vaddlv_u8(v312);
                      v309 += v312.i32[0];
                      --v305;
                    }
                    while (v305);
                    if (v309 == 1) {
                      goto LABEL_941;
                    }
                  }
                  else if ((*(void *)(v265 + 24) & (*(void *)(v265 + 24) - 1)) == 0)
                  {
                    goto LABEL_941;
                  }
                  uint64_t v59 = "masked_scatter: alignment must be 0 or a power of 2";
                  goto LABEL_940;
                case 187:
                  uint64_t v281 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                  uint64_t v282 = **(void **)(v281 + 96);
                  if ((*(_DWORD *)(v282 + 8) & 0xFE) != 0x12)
                  {
                    uint64_t v59 = "masked_store: mask must be vector";
LABEL_940:
                    v503[0] = (uint64_t)v59;
                    __int16 v505 = 259;
                    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                    if (*(void *)a1)
                    {
                      v351 = (llvm::raw_ostream **)a1;
                      v352 = (llvm::Value *)a3;
LABEL_949:
                      sub_1CD5DBED0(v351, v352);
                    }
LABEL_941:
                    if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v488.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_943;
                  }
                  uint64_t v283 = *(uint64_t **)v281;
                  uint64_t v284 = *(void *)(v281 + 32);
                  uint64_t v285 = *(int8x8_t **)(v281 + 64);
                  uint64_t v286 = v285[4].u32[0];
                  if (v286 > 0x40)
                  {
                    int v322 = 0;
                    unint64_t v323 = (unint64_t)(v286 + 63) >> 6;
                    v324 = (int8x8_t *)v285[3];
                    do
                    {
                      int8x8_t v325 = *v324++;
                      uint8x8_t v326 = (uint8x8_t)vcnt_s8(v325);
                      v326.i16[0] = vaddlv_u8(v326);
                      v322 += v326.i32[0];
                      --v323;
                    }
                    while (v323);
                    if (v322 != 1) {
                      goto LABEL_616;
                    }
                  }
                  else
                  {
                    uint8x8_t v287 = (uint8x8_t)vcnt_s8(v285[3]);
                    v287.i16[0] = vaddlv_u8(v287);
                    if (v287.u32[0] != 1)
                    {
LABEL_616:
                      uint64_t v59 = "masked_store: alignment must be a power of 2";
                      goto LABEL_940;
                    }
                  }
                  uint64_t v327 = *v283;
                  uint64_t v328 = *(void *)(*(void *)v284 + 24);
                  if (v328) {
                    BOOL v329 = v328 == v327;
                  }
                  else {
                    BOOL v329 = 1;
                  }
                  if (v329)
                  {
                    if (*(_DWORD *)(v282 + 32) == *(_DWORD *)(v327 + 32)
                      && (*(_DWORD *)(v282 + 8) != 19) != (*(unsigned char *)(v327 + 8) == 19))
                    {
                      goto LABEL_941;
                    }
                    uint64_t v59 = "masked_store: vector mask must be same length as value";
                  }
                  else
                  {
                    uint64_t v59 = "masked_store: storee must match pointer type";
                  }
                  goto LABEL_940;
                case 188:
                case 189:
                case 190:
                case 191:
                  uint64_t v95 = *(void *)(a3 - 32);
                  if (!v95 || *(unsigned char *)(v95 + 16) || *(void *)(v95 + 24) != *(void *)(a3 + 72)) {
                    uint64_t v95 = 0;
                  }
                  switch(a2)
                  {
                    case 189:
                      uint64_t v161 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                      uint64_t v97 = *(void *)(v161 + 64);
                      if (*(unsigned char *)(v97 + 16) != 16) {
                        uint64_t v97 = 0;
                      }
                      uint64_t v98 = *(void *)(v161 + 128);
                      uint64_t v99 = *(void *)(v161 + 160);
                      v100 = **(llvm::Type ***)v161;
                      uint64_t v103 = *((void *)v100 + 3);
                      uint64_t v162 = **(void **)(v161 + 32);
                      if (*(void *)(v162 + 24)) {
                        uint64_t v102 = **(void **)(v162 + 16);
                      }
                      else {
                        uint64_t v102 = 0;
                      }
                      break;
                    case 190:
                      uint64_t v97 = 0;
                      uint64_t v159 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                      uint64_t v98 = *(void *)(v159 + 64);
                      uint64_t v99 = *(void *)(v159 + 128);
                      v100 = *(llvm::Type **)a3;
                      uint64_t v103 = *(void *)(**(void **)v159 + 24);
                      uint64_t v102 = *(void *)(**(void **)(v159 + 32) + 24);
                      break;
                    case 191:
                      uint64_t v97 = 0;
                      uint64_t v102 = 0;
                      uint64_t v160 = (void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                      uint64_t v98 = v160[4];
                      uint64_t v99 = v160[8];
                      v100 = *(llvm::Type **)a3;
                      uint64_t v103 = *(void *)(*(void *)*v160 + 24);
                      break;
                    default:
                      uint64_t v96 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                      uint64_t v97 = *(void *)(v96 + 32);
                      if (*(unsigned char *)(v97 + 16) != 16) {
                        uint64_t v97 = 0;
                      }
                      uint64_t v98 = *(void *)(v96 + 96);
                      uint64_t v99 = *(void *)(v96 + 128);
                      v100 = *(llvm::Type **)a3;
                      uint64_t v101 = **(void **)v96;
                      uint64_t v102 = *(void *)(v101 + 24);
                      if (v102)
                      {
                        uint64_t v102 = 0;
                        uint64_t v103 = **(void **)(v101 + 16);
                      }
                      else
                      {
                        uint64_t v103 = 0;
                      }
                      break;
                  }
                  uint64_t v337 = *((void *)v100 + 3);
                  unsigned int v338 = *(unsigned __int8 *)(v337 + 8);
                  if (v338 < 7 || v338 == 13)
                  {
                    if (v103) {
                      BOOL v340 = v337 == v103;
                    }
                    else {
                      BOOL v340 = 1;
                    }
                    if (v340)
                    {
                      if (v102 && v337 != v102)
                      {
                        v393 = "Vector element type mismatch of the result and second operand vector!";
                      }
                      else
                      {
                        uint64_t v341 = *((unsigned int *)v100 + 8);
                        v342 = (uint64_t *)(v98 + 24);
                        unsigned int v343 = *(_DWORD *)(v98 + 32);
                        v344 = v342;
                        if (v343 >= 0x41) {
                          v344 = (uint64_t *)*v342;
                        }
                        uint64_t v345 = *v344;
                        BOOL v346 = (void *)(v99 + 24);
                        if (*(_DWORD *)(v99 + 32) >= 0x41u) {
                          BOOL v346 = (void *)*v346;
                        }
                        if (*v346 * v345 != v341)
                        {
                          unsigned int v123 = "Result of a matrix operation does not fit in the returned vector!";
                          goto LABEL_904;
                        }
                        if (!v97) {
                          goto LABEL_941;
                        }
                        unsigned int v347 = (void *)(v97 + 24);
                        if (*(_DWORD *)(v97 + 32) >= 0x41u) {
                          unsigned int v347 = (void *)*v347;
                        }
                        if (v343 >= 0x41) {
                          v342 = (uint64_t *)*v342;
                        }
                        if (*v347 >= (unint64_t)*v342) {
                          goto LABEL_941;
                        }
                        v393 = "Stride must be greater or equal than the number of rows!";
                      }
                    }
                    else
                    {
                      v393 = "Vector element type mismatch of the result and first operand vector!";
                    }
                  }
                  else
                  {
                    v393 = "Result type must be an integer or floating-point type!";
                  }
                  v503[0] = (uint64_t)v393;
                  __int16 v505 = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
                  if (v95 && *(void *)a1)
                  {
                    v351 = (llvm::raw_ostream **)a1;
                    v352 = (llvm::Value *)v95;
                    goto LABEL_949;
                  }
                  goto LABEL_941;
                case 194:
                case 196:
                case 197:
                case 199:
                  uint64_t v104 = *(void *)(a3 + 64);
                  if (v104)
                  {
                    if (*(_DWORD *)(v104 + 8) >= 3u)
                    {
                      int v105 = *(llvm::AttributeSetNode **)(v104 + 56);
                      if (v105)
                      {
                        unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v105);
                        uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)(1 << Alignment));
                        v107.i16[0] = vaddlv_u8(v107);
                        BOOL v108 = Alignment < 0x100u || Alignment > 0x1Fu;
                        if (!v108 && v107.i32[0] >= 2u)
                        {
                          uint64_t v59 = "alignment of arg 0 of memory intrinsic must be 0 or a power of 2";
                          goto LABEL_940;
                        }
                      }
                    }
                  }
                  unsigned int v110 = *(_DWORD *)(*(void *)(a3 - 32) + 36) - 194;
                  if (v110 <= 3 && v110 != 1 && v104 != 0 && *(_DWORD *)(v104 + 8) >= 4u)
                  {
                    uint64_t v113 = *(llvm::AttributeSetNode **)(v104 + 64);
                    if (v113)
                    {
                      unsigned __int16 v114 = llvm::AttributeSetNode::getAlignment(v113);
                      uint8x8_t v115 = (uint8x8_t)vcnt_s8((int8x8_t)(1 << v114));
                      v115.i16[0] = vaddlv_u8(v115);
                      BOOL v116 = v114 < 0x100u || v114 > 0x1Fu;
                      if (!v116 && v115.i32[0] >= 2u)
                      {
                        uint64_t v59 = "alignment of arg 1 of memory intrinsic must be 0 or a power of 2";
                        goto LABEL_940;
                      }
                    }
                  }
                  goto LABEL_941;
                case 195:
                case 198:
                case 200:
                  uint64_t v124 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 96);
                  uint64_t v125 = *(unsigned int *)(v124 + 32);
                  if (v125 > 0x40)
                  {
                    unint64_t v138 = 0;
                    int v139 = 0;
                    uint64_t v126 = *(unint64_t **)(v124 + 24);
                    do
                    {
                      uint8x8_t v140 = (uint8x8_t)vcnt_s8((int8x8_t)v126[v138 / 8]);
                      v140.i16[0] = vaddlv_u8(v140);
                      v139 += v140.i32[0];
                      v138 += 8;
                    }
                    while ((((unint64_t)(v125 + 63) >> 3) & 0x3FFFFFF8) != v138);
                    if (v139 != 1) {
                      goto LABEL_294;
                    }
                  }
                  else
                  {
                    uint64_t v126 = *(unint64_t **)(v124 + 24);
                    uint8x8_t v127 = (uint8x8_t)vcnt_s8((int8x8_t)v126);
                    v127.i16[0] = vaddlv_u8(v127);
                    if (v127.u32[0] != 1)
                    {
LABEL_294:
                      uint64_t v59 = "element size of the element-wise atomic memory intrinsic must be a power of 2";
                      goto LABEL_940;
                    }
                  }
                  uint64_t v141 = *(void *)(a3 + 64);
                  if (!v141) {
                    goto LABEL_385;
                  }
                  if (*(_DWORD *)(v141 + 8) < 3u) {
                    goto LABEL_385;
                  }
                  uint64_t v142 = *(llvm::AttributeSetNode **)(v141 + 56);
                  if (!v142) {
                    goto LABEL_385;
                  }
                  unsigned __int16 v143 = llvm::AttributeSetNode::getAlignment(v142);
                  if (v143 < 0x100u || (v143 & 0xE0) != 0) {
                    goto LABEL_385;
                  }
                  unint64_t v145 = (unint64_t)v126;
                  if (v125 < 0x41) {
                    goto LABEL_368;
                  }
                  int v146 = 0;
                  int64_t v147 = (unint64_t)(v125 + 63) >> 6;
                  do
                  {
                    BOOL v37 = v147-- < 1;
                    if (v37) {
                      break;
                    }
                    unint64_t v148 = v126[v147];
                    v146 += __clz(v148);
                  }
                  while (!v148);
                  int v149 = v125 | 0xFFFFFFC0;
                  if ((v125 & 0x3F) == 0) {
                    int v149 = 0;
                  }
                  if ((v125 - v146 - v149) > 0x40) {
                    goto LABEL_385;
                  }
                  unint64_t v145 = *v126;
LABEL_368:
                  if (v145 > (1 << v143))
                  {
LABEL_385:
                    uint64_t v59 = "incorrect alignment of the destination argument";
                    goto LABEL_940;
                  }
                  int v150 = *(_DWORD *)(*(void *)(a3 - 32) + 36);
                  if (v150 != 198 && v150 != 195) {
                    goto LABEL_941;
                  }
                  if (*(_DWORD *)(v141 + 8) < 4u) {
                    goto LABEL_384;
                  }
                  uint64_t v151 = *(llvm::AttributeSetNode **)(v141 + 64);
                  if (!v151) {
                    goto LABEL_384;
                  }
                  unsigned __int16 v152 = llvm::AttributeSetNode::getAlignment(v151);
                  if (v152 < 0x100u || (v152 & 0xE0) != 0) {
                    goto LABEL_384;
                  }
                  if (v125 < 0x41) {
                    goto LABEL_383;
                  }
                  int v153 = 0;
                  int64_t v154 = (unint64_t)(v125 + 63) >> 6;
                  do
                  {
                    BOOL v37 = v154-- < 1;
                    if (v37) {
                      break;
                    }
                    unint64_t v155 = v126[v154];
                    v153 += __clz(v155);
                  }
                  while (!v155);
                  int v156 = v125 | 0xFFFFFFC0;
                  if ((v125 & 0x3F) == 0) {
                    int v156 = 0;
                  }
                  if ((v125 - v153 - v156) <= 0x40)
                  {
                    uint64_t v126 = (unint64_t *)*v126;
LABEL_383:
                    if ((unint64_t)v126 <= (1 << v152)) {
                      goto LABEL_941;
                    }
                  }
LABEL_384:
                  uint64_t v59 = "incorrect alignment of the source argument";
                  goto LABEL_940;
                case 240:
                  uint64_t v163 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                  uint64_t v164 = *(void *)(v163 + 32);
                  int v165 = (void *)(v164 + 24);
                  if (*(_DWORD *)(v164 + 32) >= 0x41u) {
                    int v165 = (void *)*v165;
                  }
                  if (*v165 <= 1uLL)
                  {
                    uint64_t v166 = *(void *)(v163 + 64);
                    uint64_t v167 = (void *)(v166 + 24);
                    if (*(_DWORD *)(v166 + 32) >= 0x41u) {
                      uint64_t v167 = (void *)*v167;
                    }
                    if (*v167 < 4uLL) {
                      goto LABEL_941;
                    }
                  }
                  uint64_t v59 = "invalid arguments to llvm.prefetch";
                  goto LABEL_940;
                case 241:
                case 242:
                  goto LABEL_671;
                case 264:
                case 265:
                case 276:
                case 277:
                case 303:
                case 304:
                case 307:
                case 308:
                  uint64_t v65 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
                  uint64_t v66 = **(void **)v65;
                  int v67 = *(_DWORD *)(v66 + 8) & 0xFE;
                  if (v67 == 18) {
                    int v68 = *(unsigned __int8 *)(**(void **)(v66 + 16) + 8);
                  }
                  else {
                    int v68 = *(_DWORD *)(v66 + 8);
                  }
                  if (v68 != 13)
                  {
                    unsigned int v123 = "first operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
                    goto LABEL_904;
                  }
                  uint64_t v118 = **(void **)(v65 + 32);
                  if ((*(_DWORD *)(v118 + 8) & 0xFE) == 0x12) {
                    int v119 = *(unsigned __int8 *)(**(void **)(v118 + 16) + 8);
                  }
                  else {
                    int v119 = *(_DWORD *)(v118 + 8);
                  }
                  if (v119 != 13)
                  {
                    unsigned int v123 = "second operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
                    goto LABEL_904;
                  }
                  uint64_t v120 = *(unint64_t **)(v65 + 64);
                  if (*(_DWORD *)(*v120 + 8) >> 8 >= 0x21u)
                  {
                    unsigned int v123 = "third argument of [us][mul|div]_fix[_sat] must fit within 32 bits";
                    goto LABEL_904;
                  }
                  if ((a2 - 264) <= 0xD && ((1 << (a2 - 8)) & 0x3003) != 0)
                  {
                    int v121 = v120 + 3;
                    if (*((_DWORD *)v120 + 8) >= 0x41u) {
                      int v121 = (unint64_t *)*v121;
                    }
                    if (v67 == 18) {
                      uint64_t v66 = **(void **)(v66 + 16);
                    }
                    unint64_t v122 = *v121;
                    if (v122 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v66))
                    {
                      unsigned int v123 = "the scale of s[mul|div]_fix[_sat] must be less than the width of the operands";
                      goto LABEL_904;
                    }
                  }
                  else
                  {
                    unsigned int v157 = v120 + 3;
                    if (*((_DWORD *)v120 + 8) >= 0x41u) {
                      unsigned int v157 = (unint64_t *)*v157;
                    }
                    if (v67 == 18) {
                      uint64_t v66 = **(void **)(v66 + 16);
                    }
                    unint64_t v158 = *v157;
                    if (v158 > llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v66))
                    {
                      unsigned int v123 = "the scale of u[mul|div]_fix[_sat] must be less than or equal to the width of the operands";
                      goto LABEL_904;
                    }
                  }
                  goto LABEL_941;
                case 286:
                  if (*((unsigned char *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a3
                                                                                 - 32
                                                                                 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                                                                                 + 32))
                       + 16) == 59)
                    goto LABEL_941;
                  uint64_t v59 = "llvm.stackprotector parameter #2 must resolve to an alloca.";
                  goto LABEL_940;
                case 317:
                case 318:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                  uint64_t v64 = **(void **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  if ((*(_DWORD *)(v64 + 8) & 0xFE) != 0x12 || *(unsigned char *)(**(void **)(v64 + 16) + 8) != 13) {
                    goto LABEL_346;
                  }
                  goto LABEL_941;
                case 319:
                case 322:
                  uint64_t v136 = *(uint64_t **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
                  goto LABEL_344;
                case 320:
                case 321:
                  uint64_t v136 = *(uint64_t **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
LABEL_344:
                  uint64_t v137 = *v136;
                  if ((*(_DWORD *)(v137 + 8) & 0xFE) == 0x12
                    && *(unsigned __int8 *)(**(void **)(v137 + 16) + 8) < 7u)
                  {
                    goto LABEL_941;
                  }
LABEL_346:
                  unsigned int v123 = "Intrinsic has incorrect argument type!";
                  goto LABEL_904;
                default:
                  goto LABEL_941;
              }
            }
            if (a2 > 3646)
            {
              if (a2 <= 4052)
              {
                if (a2 != 3647 && a2 != 3653) {
                  goto LABEL_941;
                }
LABEL_671:
                if (llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a3 + 64), 0)) {
                  goto LABEL_941;
                }
                uint64_t v59 = "Intrinsic requires elementtype attribute on first argument.";
                goto LABEL_940;
              }
              if (a2 != 4053 && a2 != 4055) {
                goto LABEL_941;
              }
            }
            else
            {
              if (a2 <= 648)
              {
                if (a2 != 447 && a2 != 450) {
                  goto LABEL_941;
                }
                goto LABEL_671;
              }
              if (a2 != 649 && a2 != 651) {
                goto LABEL_941;
              }
            }
            v503[0] = *(void *)(a3 + 64);
            if (llvm::AttributeList::getParamElementType((llvm::AttributeList *)v503, 1)) {
              goto LABEL_941;
            }
            uint64_t v59 = "Intrinsic requires elementtype attribute on second argument.";
            goto LABEL_940;
          }
          int v22 = 1;
          while (v21 != (uint64_t ***)-4096)
          {
            int v23 = v19 + v22++;
            uint64_t v19 = v23 & (v18 - 1);
            uint64_t v21 = *(uint64_t ****)(v17 + 16 * v19);
            if (v21 == v6)
            {
              char v20 = (uint64_t ****)(v17 + 16 * v19);
              goto LABEL_33;
            }
          }
        }
        char v20 = (uint64_t ****)(v17 + 16 * v18);
        goto LABEL_33;
      }
      char v12 = "Intrinsic has incorrect return type!";
    }
LABEL_12:
    v503[0] = (uint64_t)v12;
    __int16 v505 = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v503);
    if (*(void *)a1) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)v6);
    }
LABEL_943:
    if (v506 != v508) {
      free(v506);
    }
    if (v509 != v10) {
      free(v509);
    }
    return;
  }
LABEL_28:
  v509 = (unsigned int *)"Intrinsic functions should never be defined!";
  v511[8] = 259;
  sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v509);
  if ((v7 & 1) == 0 && *(void *)a1) {
    sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)v6);
  }
}

void sub_1CC64AF78(llvm::raw_ostream *a1, _DWORD *a2)
{
  uint64_t v4 = *((void *)a2 - 4);
  char v7 = *(char **)(v4 + 48);
  uint64_t v5 = v4 + 48;
  unint64_t v6 = v7;
  char v8 = *(unsigned char *)(v5 + 23);
  if (v8 >= 0) {
    unsigned int v9 = (char *)v5;
  }
  else {
    unsigned int v9 = v6;
  }
  uint64_t v10 = *(void *)(v5 + 8);
  if (v8 >= 0) {
    uint64_t v11 = v8 & 0x7F;
  }
  else {
    uint64_t v11 = v10;
  }
  llvm::InlineAsm::ParseConstraints(v9, v11, (uint64_t *)&__p);
  char v12 = (char *)__p;
  uint64_t v13 = v21;
  if (__p == v21) {
    goto LABEL_26;
  }
  unsigned int v14 = 0;
  while (1)
  {
    if (*(_DWORD *)v12)
    {
      if (*(_DWORD *)v12 != 1 || !v12[13]) {
        goto LABEL_16;
      }
LABEL_18:
      if (*(unsigned char *)(**(void **)&a2[8 * v14 + -8 * (a2[5] & 0x7FFFFFF)] + 8) != 15)
      {
        uint64_t v15 = "Operand for indirect constraint must have pointer type";
        goto LABEL_23;
      }
      if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a2 + 16), v14))
      {
        uint64_t v15 = "Operand for indirect constraint must have elementtype attribute";
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v12[13]) {
      goto LABEL_18;
    }
    if (llvm::CallBase::paramHasAttr((uint64_t)a2, v14, 70)) {
      break;
    }
LABEL_15:
    ++v14;
LABEL_16:
    v12 += 80;
    if (v12 == v13) {
      goto LABEL_25;
    }
  }
  uint64_t v15 = "Elementtype attribute can only be applied for indirect constraints";
LABEL_23:
  v18[0] = (void **)v15;
  __int16 v19 = 259;
  sub_1CD5DBE68(a1, (llvm::Twine *)v18);
  if (*(void *)a1) {
    sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a2);
  }
LABEL_25:
  char v12 = (char *)__p;
LABEL_26:
  if (v12)
  {
    uint64_t v16 = v21;
    uint64_t v17 = v12;
    if (v21 != v12)
    {
      do
      {
        v18[0] = (void **)(v16 - 32);
        sub_1CC1E4230(v18);
        v18[0] = (void **)(v16 - 64);
        sub_1CB8338B8(v18);
        v16 -= 80;
      }
      while (v16 != v12);
      uint64_t v17 = __p;
    }
    uint64_t v21 = v12;
    operator delete(v17);
  }
}

void sub_1CC64B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = (void *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF));
  char v7 = *(unsigned __int8 **)(*v6 + 24);
  uint64_t v40 = v7;
  unsigned int v8 = *v7;
  if (v8 > 0x22 || ((1 << v8) & 0x100000006) == 0 && (((1 << v8) & 0x6FFFFFFF0) == 0 || *((_DWORD *)v7 + 2)))
  {
    __int16 v39 = 1283;
    v36[0] = (llvm::Metadata *)"invalid llvm.dbg.";
    uint64_t v37 = a2;
    uint64_t v38 = a3;
    v41[0] = v36;
    int v42 = " intrinsic address/value";
    __int16 v43 = 770;
    unsigned int v44 = (llvm::Value *)a4;
    uint64_t v21 = (llvm::Metadata **)&v40;
LABEL_46:
    sub_1CD5DBD80((llvm::raw_ostream *)a1, (llvm::Twine *)v41, &v44, v21);
    return;
  }
  uint64_t v9 = *(void *)(v6[4] + 24);
  if (*(unsigned char *)v9 != 25)
  {
    __int16 v39 = 1283;
    BOOL v35 = (llvm::Value *)v9;
    v36[0] = (llvm::Metadata *)"invalid llvm.dbg.";
    uint64_t v37 = a2;
    uint64_t v38 = a3;
    v41[0] = v36;
    int v42 = " intrinsic variable";
    __int16 v43 = 770;
LABEL_45:
    unsigned int v44 = (llvm::Value *)a4;
    uint64_t v21 = &v35;
    goto LABEL_46;
  }
  uint64_t v10 = *(llvm::Value **)(v6[8] + 24);
  if (*(unsigned char *)v10 != 6)
  {
    __int16 v39 = 1283;
    BOOL v35 = v10;
    v36[0] = (llvm::Metadata *)"invalid llvm.dbg.";
    uint64_t v37 = a2;
    uint64_t v38 = a3;
    v41[0] = v36;
    int v42 = " intrinsic expression";
    __int16 v43 = 770;
    goto LABEL_45;
  }
  uint64_t v11 = *(unsigned int **)(a4 + 48);
  if (!v11 || *(unsigned char *)v11 == 5)
  {
    char v12 = *(llvm::Value **)(a4 + 40);
    BOOL v35 = v12;
    if (v12) {
      char v12 = (llvm::Value *)*((void *)v12 + 7);
    }
    uint64_t v33 = (llvm::Metadata *)v9;
    uint64_t v34 = v12;
    uint64_t v32 = (llvm::Metadata *)v11;
    if (v11)
    {
      uint64_t v13 = (unsigned int **)(v9 - 8 * *(unsigned int *)(v9 + 8));
      unsigned int v14 = *v13;
      if (*v13)
      {
        uint64_t v15 = (unsigned __int8 *)*v13;
        do
        {
          int v16 = *v15;
          if (v16 == 17) {
            break;
          }
          if ((v16 & 0xFE) != 0x12) {
            goto LABEL_16;
          }
          uint64_t v15 = *(unsigned __int8 **)&v15[-8 * *((unsigned int *)v15 + 2) + 8];
        }
        while (v15);
      }
      else
      {
LABEL_16:
        uint64_t v15 = 0;
      }
      uint64_t v17 = v11[2];
      uint64_t v18 = *(unsigned int **)&v11[-2 * v17];
      if (v18)
      {
        __int16 v19 = *(unsigned __int8 **)&v11[-2 * v17];
        while (1)
        {
          int v20 = *v19;
          if (v20 == 17) {
            break;
          }
          if ((v20 & 0xFE) == 0x12)
          {
            __int16 v19 = *(unsigned __int8 **)&v19[-8 * *((unsigned int *)v19 + 2) + 8];
            if (v19) {
              continue;
            }
          }
          return;
        }
        if (v15)
        {
          if (v15 == v19)
          {
            int v22 = (llvm::Metadata *)v13[3];
            if (v22 && (int v23 = *(unsigned __int8 *)v22, (v23 - 11) >= 4) && v23 != 33)
            {
              v41[0] = "invalid type ref";
              __int16 v43 = 259;
              v36[0] = v22;
              sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v41, &v33, v36);
            }
            else if (*(unsigned char *)(a1 + 801) && (v17 != 2 || !*((void *)v11 - 1)))
            {
              v36[0] = (llvm::Metadata *)v9;
              unint64_t v24 = *(unsigned __int16 *)(v9 + 32);
              if (*(_WORD *)(v9 + 32))
              {
                uint64_t v25 = (uint64_t *)(a1 + 1816);
                unint64_t v26 = *(unsigned int *)(a1 + 1824);
                if (v24 > v26) {
                  sub_1CD5DCE6C(a1 + 1816, v24 - v26);
                }
                uint64_t v27 = *v25;
                unsigned int v44 = *(llvm::Value **)(*v25 + 8 * (v24 - 1));
                int v28 = v44;
                *(void *)(v27 + 8 * (v24 - 1)) = v9;
                if (v28) {
                  BOOL v29 = v28 == (llvm::Value *)v9;
                }
                else {
                  BOOL v29 = 1;
                }
                if (!v29)
                {
                  v41[0] = "conflicting debug info for argument";
                  __int16 v43 = 259;
                  sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v41);
                  if (*(void *)a1) {
                    sub_1CD5DC92C((llvm::raw_ostream **)a1, (llvm::Value *)a4, &v44, v36);
                  }
                }
              }
            }
          }
          else
          {
            __int16 v39 = 1283;
            v36[0] = (llvm::Metadata *)"mismatched subprogram between llvm.dbg.";
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            v41[0] = v36;
            int v42 = " variable and !dbg attachment";
            __int16 v43 = 770;
            unsigned int v44 = (llvm::Value *)a4;
            while ((*(unsigned char *)v14 & 0xFE) == 0x12)
              unsigned int v14 = *(unsigned int **)&v14[-2 * v14[2] + 2];
            uint64_t v31 = (llvm::Metadata *)v14;
            while ((*(unsigned char *)v18 & 0xFE) == 0x12)
              uint64_t v18 = *(unsigned int **)&v18[-2 * v18[2] + 2];
            int v30 = (llvm::Metadata *)v18;
            sub_1CD5DCCCC((llvm::raw_ostream *)a1, (llvm::Twine *)v41, &v44, &v35, &v34, &v33, &v31, &v32, &v30);
          }
        }
      }
    }
    else
    {
      __int16 v39 = 1283;
      v36[0] = (llvm::Metadata *)"llvm.dbg.";
      uint64_t v37 = a2;
      uint64_t v38 = a3;
      v41[0] = v36;
      int v42 = " intrinsic requires a !dbg attachment";
      __int16 v43 = 770;
      sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v41);
      if (*(void *)a1) {
        sub_1CD5DCB08((llvm::raw_ostream *)a1, (llvm::Value *)a4, &v35, &v34);
      }
    }
  }
}

BOOL sub_1CC64B564(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 123;
}

void sub_1CC64B5B0(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(llvm::BasicBlock **)(a2 + 40);
  uint64_t v5 = *(void *)(*((void *)v4 + 7) + 80);
  if (v5) {
    unint64_t v6 = (llvm::BasicBlock *)(v5 - 24);
  }
  else {
    unint64_t v6 = 0;
  }
  if (v4 == v6)
  {
    int v78 = "EH pad cannot be in entry block.";
    goto LABEL_186;
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 94) {
    unsigned int v8 = (llvm::Value *)a2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v7 == 94)
  {
    uint64_t v9 = *((void *)v4 + 1);
    if (!v9) {
      return;
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
      BOOL v12 = v10 && v11 >= 0x1C;
      if (v12 && v11 - 29 <= 0xA) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if (!v9) {
        return;
      }
    }
LABEL_55:
    uint64_t v26 = *(void *)(v10 + 40);
    uint64_t v27 = *(void *)(v26 + 40);
    if (v27 != v26 + 40)
    {
      uint64_t v20 = v27 - 24;
      if (!v27) {
        uint64_t v20 = 0;
      }
      unsigned int v21 = *(unsigned __int8 *)(v20 + 16) - 40;
      if (v21 < 0xFFFFFFF5) {
        uint64_t v20 = 0;
      }
      if (v27)
      {
        BOOL v22 = *(unsigned char *)(v20 + 16) == 33 && v21 >= 0xFFFFFFF5;
        if (v22 && *(llvm::BasicBlock **)(v20 - 64) == v4 && *(llvm::BasicBlock **)(v20 - 96) != v4)
        {
          while (1)
          {
            uint64_t v9 = *(void *)(v9 + 8);
            if (!v9) {
              return;
            }
            uint64_t v10 = *(void *)(v9 + 24);
            unsigned int v23 = *(unsigned __int8 *)(v10 + 16);
            if (v10) {
              BOOL v24 = v23 >= 0x1C;
            }
            else {
              BOOL v24 = 0;
            }
            if (v24 && v23 - 29 <= 0xA) {
              goto LABEL_55;
            }
          }
        }
      }
    }
    uint64_t v81 = "Block containing LandingPadInst must be jumped to only by the unwind edge of an invoke.";
    v85[0] = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v81);
    if (!*(void *)a1) {
      return;
    }
    int v28 = (llvm::raw_ostream **)a1;
    BOOL v29 = v8;
LABEL_188:
    sub_1CD5DBED0(v28, v29);
    return;
  }
  if (v7 == 80) {
    unsigned int v14 = (llvm::Value *)a2;
  }
  else {
    unsigned int v14 = 0;
  }
  v79[0] = v14;
  if (v7 == 80)
  {
    uint64_t v15 = *((void *)v4 + 1);
    if (!v15) {
      goto LABEL_64;
    }
    while (1)
    {
      uint64_t v16 = *(void *)(v15 + 24);
      unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
      BOOL v18 = v16 && v17 >= 0x1C;
      if (v18 && v17 - 29 <= 0xA) {
        break;
      }
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        goto LABEL_64;
      }
    }
    if (llvm::BasicBlock::getUniquePredecessor(v4) == *(void *)(*((void *)v14 - 4) + 40))
    {
LABEL_64:
      uint64_t v32 = *((void *)v14 - 4);
      if (*(_WORD *)(v32 + 18))
      {
        int v34 = *(_DWORD *)(v32 + 20);
        if ((v34 & 0x40000000) != 0) {
          uint64_t v35 = *(void *)(v32 - 8);
        }
        else {
          uint64_t v35 = v32 - 32 * (v34 & 0x7FFFFFF);
        }
        uint64_t v33 = *(llvm::BasicBlock **)(v35 + 32);
      }
      else
      {
        uint64_t v33 = 0;
      }
      if (v4 == v33)
      {
        uint64_t v81 = "Catchswitch cannot unwind to one of its catchpads";
        v85[0] = 259;
        v88[0] = (llvm::Value *)v32;
        sub_1CD5DBC00(a1, (llvm::Twine *)&v81, v88, v79);
      }
      return;
    }
    int v78 = "Block containg CatchPadInst must be jumped to only by its catchswitch.";
    goto LABEL_186;
  }
  v88[0] = (llvm::Value *)a2;
  if (v7 < 0x1C || v7 - 81 < 0xFFFFFFFE)
  {
    int v31 = *(_DWORD *)(a2 + 20);
    if ((v31 & 0x40000000) != 0) {
      int v30 = *(llvm::Value ***)(a2 - 8);
    }
    else {
      int v30 = (llvm::Value **)(a2 - 32 * (v31 & 0x7FFFFFF));
    }
  }
  else
  {
    int v30 = (llvm::Value **)(a2 - 32);
  }
  uint64_t v36 = *((void *)v4 + 1);
  if (!v36) {
    return;
  }
  uint64_t v37 = *v30;
  while (1)
  {
    uint64_t v38 = *(void *)(v36 + 24);
    unsigned int v39 = *(unsigned __int8 *)(v38 + 16);
    BOOL v40 = v38 && v39 >= 0x1C;
    if (v40 && v39 - 29 < 0xB) {
      break;
    }
    uint64_t v36 = *(void *)(v36 + 8);
    if (!v36) {
      return;
    }
  }
LABEL_81:
  uint64_t v42 = *(void *)(v38 + 40);
  uint64_t v43 = *(void *)(v42 + 40);
  if (v43 == v42 + 40)
  {
    uint64_t v2 = 0;
  }
  else
  {
    if (v43) {
      uint64_t v44 = v43 - 24;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = v44;
    }
  }
  int v87 = (llvm::Value *)v2;
  int v45 = *(unsigned __int8 *)(v2 + 16);
  if (v45 == 33) {
    uint64_t v46 = (llvm::Value *)v2;
  }
  else {
    uint64_t v46 = 0;
  }
  v79[0] = v46;
  if (v46)
  {
    if (*((llvm::BasicBlock **)v46 - 8) != v4 || *((llvm::BasicBlock **)v46 - 12) == v4)
    {
      uint64_t v81 = "EH pad must be jumped to via an unwind edge";
      v85[0] = 259;
      sub_1CD5DBC00(a1, (llvm::Twine *)&v81, v88, v79);
      return;
    }
    sub_1CC233A58((char *)v46, 1, (uint64_t *)&v81);
    if ((_BYTE)v84) {
      uint64_t v48 = *(llvm::Value **)v81;
    }
    else {
      uint64_t v48 = (llvm::Value *)llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v46, v47);
    }
    int v86 = v48;
    goto LABEL_103;
  }
  if (v45 != 38)
  {
    if (v45 != 36)
    {
      uint64_t v81 = "EH pad must be jumped to via an unwind edge";
      v85[0] = 259;
      sub_1CD5DBC00(a1, (llvm::Twine *)&v81, v88, &v87);
      return;
    }
    uint64_t v48 = *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    int v86 = v48;
    if (v48 != v37) {
      goto LABEL_103;
    }
    int v78 = "A cleanupret must exit its cleanup";
LABEL_186:
    uint64_t v81 = v78;
    v85[0] = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v81);
    if (!*(void *)a1) {
      return;
    }
    int v28 = (llvm::raw_ostream **)a1;
    BOOL v29 = (llvm::Value *)v2;
    goto LABEL_188;
  }
  int v86 = (llvm::Value *)v2;
  uint64_t v48 = (llvm::Value *)v2;
LABEL_103:
  uint64_t v81 = (const char *)v85;
  int v82 = (char *)v85;
  uint64_t v83 = 8;
  int v84 = 0;
  int v49 = v88[0];
  if (v48 == v88[0])
  {
LABEL_176:
    v79[0] = (llvm::Value *)"EH pad cannot handle exceptions raised within it";
    __int16 v80 = 259;
    sub_1CD5DBC00(a1, (llvm::Twine *)v79, &v86, &v87);
    goto LABEL_162;
  }
  unsigned int v50 = 0;
  unsigned int v51 = 8;
  __int16 v52 = (const char *)v85;
  int v53 = (const char *)v85;
  while (1)
  {
    if (v48 == v37)
    {
      int v72 = 1;
      goto LABEL_163;
    }
    unsigned int v54 = *((unsigned __int8 *)v48 + 16);
    if (v54 == 20)
    {
      int v77 = "A single unwind edge may only enter one EH pad";
LABEL_182:
      v79[0] = (llvm::Value *)v77;
      __int16 v80 = 259;
      sub_1CD5DBE68(a1, (llvm::Twine *)v79);
      if (!v2 || !*(void *)a1) {
        goto LABEL_162;
      }
      uint64_t v76 = (llvm::raw_ostream **)a1;
      int v71 = (llvm::Value *)v2;
LABEL_179:
      sub_1CD5DBED0(v76, v71);
      goto LABEL_162;
    }
    if (v52 != v53) {
      goto LABEL_118;
    }
    if (v50) {
      break;
    }
LABEL_115:
    if (v51 > v50)
    {
      HIDWORD(v83) = v50 + 1;
      *(void *)&v52[8 * v50] = v48;
LABEL_117:
      __int16 v52 = v82;
      unsigned int v51 = v83;
      unsigned int v50 = HIDWORD(v83);
      goto LABEL_139;
    }
LABEL_118:
    if (3 * v51 <= 4 * (v50 - v84))
    {
      if (v51 >= 0x40) {
        v51 *= 2;
      }
      else {
        unsigned int v51 = 128;
      }
LABEL_159:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v81, v51);
      unsigned int v51 = v83;
      __int16 v52 = v82;
      goto LABEL_120;
    }
    if (v51 - v50 < v51 >> 3) {
      goto LABEL_159;
    }
LABEL_120:
    unsigned int v58 = v51 - 1;
    unsigned int v59 = (v51 - 1) & ((v48 >> 4) ^ (v48 >> 9));
    int v60 = (char *)&v52[8 * v59];
    int v61 = *(llvm::Value **)v60;
    if (*(void *)v60 != -1)
    {
      int v62 = 0;
      int v63 = 1;
      while (v61 != v48)
      {
        if (v62) {
          BOOL v64 = 0;
        }
        else {
          BOOL v64 = v61 == (llvm::Value *)-2;
        }
        if (v64) {
          int v62 = (llvm::Value **)v60;
        }
        unsigned int v65 = v59 + v63++;
        unsigned int v59 = v65 & v58;
        int v60 = (char *)&v52[8 * (v65 & v58)];
        int v61 = *(llvm::Value **)v60;
        if (*(void *)v60 == -1) {
          goto LABEL_132;
        }
      }
      goto LABEL_160;
    }
    int v62 = 0;
LABEL_132:
    if (v62) {
      uint64_t v66 = v62;
    }
    else {
      uint64_t v66 = (llvm::Value **)v60;
    }
    if (*v66 == v48) {
      goto LABEL_160;
    }
    if (*v66 == (llvm::Value *)-2) {
      --v84;
    }
    else {
      ++HIDWORD(v83);
    }
    *uint64_t v66 = v48;
    __int16 v52 = v82;
    unsigned int v51 = v83;
    unsigned int v50 = HIDWORD(v83);
    uint64_t v48 = v86;
    unsigned int v54 = *((unsigned __int8 *)v86 + 16);
LABEL_139:
    int v53 = v81;
    BOOL v68 = v54 > 0x1B && v54 - 79 < 2;
    if (v54 != 38 && !v68)
    {
      int v77 = "Parent pad must be catchpad/cleanuppad/catchswitch";
      goto LABEL_182;
    }
    if (v54 - 81 >= 0xFFFFFFFE)
    {
      unsigned int v70 = (llvm::Value **)((char *)v48 - 32);
    }
    else
    {
      int v69 = *((_DWORD *)v48 + 5);
      if ((v69 & 0x40000000) != 0) {
        unsigned int v70 = (llvm::Value **)*((void *)v48 - 1);
      }
      else {
        unsigned int v70 = (llvm::Value **)((char *)v48 - 32 * (v69 & 0x7FFFFFF));
      }
    }
    int v86 = *v70;
    uint64_t v48 = v86;
    if (v86 == v49) {
      goto LABEL_176;
    }
  }
  uint64_t v55 = 0;
  uint64_t v56 = 8 * v50;
  unsigned int v57 = (llvm::Value **)v52;
  while (*v57 != v48)
  {
    if (*v57 == (llvm::Value *)-2) {
      uint64_t v55 = v57;
    }
    ++v57;
    v56 -= 8;
    if (!v56)
    {
      if (!v55) {
        goto LABEL_115;
      }
      llvm::Type *v55 = v48;
      --v84;
      goto LABEL_117;
    }
  }
LABEL_160:
  v79[0] = (llvm::Value *)"EH pad jumps through a cycle of pads";
  __int16 v80 = 259;
  sub_1CD5DBE68(a1, (llvm::Twine *)v79);
  if (*(void *)a1)
  {
    int v71 = v86;
    if (v86)
    {
      uint64_t v76 = (llvm::raw_ostream **)a1;
      goto LABEL_179;
    }
  }
LABEL_162:
  int v72 = 0;
LABEL_163:
  if (v82 != v81) {
    free(v82);
  }
  if (v72)
  {
    while (1)
    {
      uint64_t v36 = *(void *)(v36 + 8);
      if (!v36) {
        break;
      }
      uint64_t v38 = *(void *)(v36 + 24);
      unsigned int v73 = *(unsigned __int8 *)(v38 + 16);
      if (v38) {
        BOOL v74 = v73 >= 0x1C;
      }
      else {
        BOOL v74 = 0;
      }
      if (v74 && v73 - 29 < 0xB) {
        goto LABEL_81;
      }
    }
  }
}

void sub_1CC64BCC0(llvm::raw_ostream *a1, llvm::Instruction *a2)
{
  uint64_t v4 = (void *)**((void **)a2 - 8);
  if (v4 == **((void ***)a2 - 4))
  {
    switch(*((unsigned char *)a2 + 16))
    {
      case '*':
      case ',':
      case '.':
      case '1':
      case '4':
        unsigned int v7 = *(void **)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          unsigned int v8 = *(unsigned __int8 *)(*(void *)v7[2] + 8);
        }
        else {
          unsigned int v8 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v8 >= 7)
        {
          uint64_t v9 = "Floating-point arithmetic operators only work with floating-point types!";
        }
        else
        {
          if (v7 == v4) {
            goto LABEL_26;
          }
          uint64_t v9 = "Floating-point arithmetic operators must have same type for operands and result!";
        }
        goto LABEL_35;
      case '5':
      case '6':
      case '7':
        uint64_t v10 = *(void **)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v11 = *(unsigned __int8 *)(*(void *)v10[2] + 8);
        }
        else {
          int v11 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v11 == 13)
        {
          if (v10 == v4) {
            goto LABEL_26;
          }
          uint64_t v9 = "Shift return type must be same as operands!";
        }
        else
        {
          uint64_t v9 = "Shifts only work with integral types!";
        }
        goto LABEL_35;
      case '8':
      case '9':
      case ':':
        BOOL v12 = *(void **)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v13 = *(unsigned __int8 *)(*(void *)v12[2] + 8);
        }
        else {
          int v13 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v13 == 13)
        {
          if (v12 == v4) {
            goto LABEL_26;
          }
          uint64_t v9 = "Logical operators must have same type for operands and result!";
        }
        else
        {
          uint64_t v9 = "Logical operators only work with integral types!";
        }
        goto LABEL_35;
      default:
        uint64_t v5 = *(void **)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v6 = *(unsigned __int8 *)(*(void *)v5[2] + 8);
        }
        else {
          int v6 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v6 != 13)
        {
          uint64_t v9 = "Integer arithmetic operators only work with integral types!";
          goto LABEL_35;
        }
        if (v5 != v4)
        {
          uint64_t v9 = "Integer arithmetic operators must have same type for operands and result!";
          goto LABEL_35;
        }
LABEL_26:
        sub_1CC642980((uint64_t)a1, (uint64_t ***)a2);
        break;
    }
  }
  else
  {
    uint64_t v9 = "Both operands to a binary operator are not of the same type!";
LABEL_35:
    unsigned int v14 = v9;
    __int16 v15 = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v14);
    if (*(void *)a1) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, a2);
    }
  }
}

llvm::raw_ostream *sub_1CC64BF14(uint64_t *a1, llvm::Type *a2, llvm::Value *a3)
{
  uint64_t v10 = a3;
  int v11 = a2;
  uint64_t result = (llvm::raw_ostream *)sub_1CB83544C(a1[22], (uint64_t)a2);
  if (v5 == 1)
  {
    unsigned int v7 = result;
    uint64_t result = v7;
  }
  if (result <= 7)
  {
    int v6 = "atomic memory access' size must be byte-sized";
LABEL_8:
    unsigned int v8 = v6;
    __int16 v9 = 259;
    return sub_1CD5DCEDC((llvm::raw_ostream *)a1, (llvm::Twine *)&v8, &v11, &v10);
  }
  if ((result & (result - 1)) != 0)
  {
    int v6 = "atomic memory access' operand must have a power-of-two size";
    goto LABEL_8;
  }
  return result;
}

void sub_1CC64BFB8(llvm::raw_ostream *a1, llvm::Instruction *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  v80[8] = *MEMORY[0x1E4F143B8];
  uint64_t v76 = 0;
  int v77 = v80;
  unsigned int v79 = 8;
  v80[0] = a2;
  int v71 = v75;
  int v72 = v75;
  uint64_t v66 = (uint64_t)a1 + 856;
  unsigned int v73 = (llvm::LLVMContext *)8;
  int v74 = 0;
  LODWORD(v5) = 1;
  while (1)
  {
    int v6 = (llvm::Instruction *)*((void *)v77 + v5 - 1);
    unsigned int v78 = v5 - 1;
    unsigned int v7 = v72;
    uint64_t v8 = HIDWORD(v73);
    if (v72 == v71)
    {
      if (HIDWORD(v73))
      {
        __int16 v9 = 0;
        uint64_t v10 = 8 * HIDWORD(v73);
        int v11 = v72;
        do
        {
          if (*(llvm::Instruction **)v11 == v6) {
            goto LABEL_146;
          }
          if (*(void *)v11 == -2) {
            __int16 v9 = v11;
          }
          v11 += 8;
          v10 -= 8;
        }
        while (v10);
        if (v9)
        {
          void *v9 = v6;
          --v74;
          goto LABEL_34;
        }
      }
      a2 = (llvm::Instruction *)v73;
      if (HIDWORD(v73) < v73)
      {
        ++HIDWORD(v73);
        *(void *)&v72[8 * v8] = v6;
        goto LABEL_34;
      }
    }
    else
    {
      a2 = (llvm::Instruction *)v73;
    }
    if (3 * (int)a2 <= (4 * (HIDWORD(v73) - v74)))
    {
      LODWORD(a2) = a2 >= 0x40 ? 2 * a2 : 128;
    }
    else if ((int)a2 - HIDWORD(v73) >= a2 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v71, a2);
    a2 = (llvm::Instruction *)v73;
    unsigned int v7 = v72;
LABEL_15:
    int v12 = a2 - 1;
    unsigned int v13 = (a2 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    unsigned int v14 = &v7[8 * v13];
    __int16 v15 = *(llvm::Instruction **)v14;
    if (*(void *)v14 != -1) {
      break;
    }
    uint64_t v16 = 0;
LABEL_27:
    if (v16) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = v14;
    }
    if (*(llvm::Instruction **)v20 == v6) {
      goto LABEL_146;
    }
    if (*(void *)v20 == -2) {
      --v74;
    }
    else {
      ++HIDWORD(v73);
    }
    *(void *)uint64_t v20 = v6;
LABEL_34:
    uint64_t v21 = *((void *)v6 + 1);
    if (v21)
    {
      BOOL v22 = 0;
      while (1)
      {
        uint64_t v23 = *(void *)(v21 + 24);
        BOOL v68 = (llvm::Value *)v23;
        int v24 = *(unsigned __int8 *)(v23 + 16);
        if (v23)
        {
          if (v24 == 36) {
            break;
          }
        }
        if (v23 && v24 == 38)
        {
          if ((*(_WORD *)(v23 + 18) & 1) == 0) {
            goto LABEL_104;
          }
          int v25 = *(_DWORD *)(v23 + 20);
          if ((v25 & 0x40000000) != 0)
          {
            uint64_t v26 = *(void *)(v23 - 8);
            goto LABEL_41;
          }
LABEL_40:
          uint64_t v26 = v23 - 32 * (v25 & 0x7FFFFFF);
LABEL_41:
          uint64_t v27 = (uint64_t *)(v26 + 32);
          goto LABEL_42;
        }
        if (v24 != 33)
        {
          if (v24 != 84)
          {
            if (v23 && v24 == 79)
            {
              if (v78 >= (unint64_t)v79) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v77 + v78++) = v23;
            }
            else if (v24 != 37)
            {
              v69[0] = (uint64_t)"Bogus funclet pad use";
              __int16 v70 = 259;
              sub_1CD5DBE68(a1, (llvm::Twine *)v69);
              if (*(void *)a1)
              {
                uint64_t v56 = (llvm::raw_ostream **)a1;
                unsigned int v57 = (llvm::Value *)v23;
                goto LABEL_149;
              }
              goto LABEL_171;
            }
          }
          goto LABEL_104;
        }
        uint64_t v27 = (uint64_t *)(v23 - 64);
LABEL_42:
        uint64_t v28 = *v27;
        if (v28)
        {
          for (uint64_t i = *(void *)(v28 + 48); ; uint64_t i = *(void *)(i + 8))
          {
            int v30 = (void *)(i - 24);
            uint64_t v31 = i ? i - 24 : 0;
            if (*(unsigned char *)(v31 + 16) != 83) {
              break;
            }
          }
          int v32 = *(unsigned __int8 *)(i - 8);
          if ((v32 - 38) > 0x38 || ((1 << (v32 - 38)) & 0x100060000000001) == 0) {
            goto LABEL_104;
          }
          if ((v32 - 81) >= 0xFFFFFFFE)
          {
            uint64_t v35 = (llvm::Instruction **)(i - 56);
          }
          else
          {
            int v34 = *(_DWORD *)(i - 4);
            uint64_t v35 = (v34 & 0x40000000) != 0
                ? *(llvm::Instruction ***)(i - 32)
                : (llvm::Instruction **)&v30[-4 * (v34 & 0x7FFFFFF)];
          }
          uint64_t v36 = *v35;
          if (v36 == v6) {
            goto LABEL_104;
          }
          uint64_t v37 = v6;
          while (v37 != v2)
          {
            if (v37
              && ((unsigned int v38 = *((unsigned __int8 *)v37 + 16), v38 >= 0x1C) ? (v39 = v38 - 81 >= 0xFFFFFFFE) : (v39 = 0), v39))
            {
              BOOL v40 = (llvm::Instruction **)((char *)v37 - 32);
            }
            else
            {
              int v41 = *((_DWORD *)v37 + 5);
              if ((v41 & 0x40000000) != 0) {
                BOOL v40 = (llvm::Instruction **)*((void *)v37 - 1);
              }
              else {
                BOOL v40 = (llvm::Instruction **)((char *)v37 - 32 * (v41 & 0x7FFFFFF));
              }
            }
            uint64_t v37 = *v40;
            if (v37 == v36) {
              goto LABEL_103;
            }
            if (*((unsigned char *)v37 + 16) == 20)
            {
              uint64_t v36 = v22;
              goto LABEL_103;
            }
          }
          goto LABEL_87;
        }
LABEL_86:
        int v30 = llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v2, a2);
LABEL_87:
        if (v3)
        {
          uint64_t v36 = v2;
          if (v30 != v4)
          {
            v69[0] = (uint64_t)"Unwind edges out of a funclet pad must have the same unwind dest";
            __int16 v70 = 259;
            sub_1CD5DBE68(a1, (llvm::Twine *)v69);
            if (*(void *)a1) {
              sub_1CD5DCB08(a1, v2, &v68, &v76);
            }
            goto LABEL_171;
          }
        }
        else
        {
          uint64_t v76 = (llvm::Value *)v23;
          if (*((unsigned char *)v2 + 16) == 79)
          {
            unsigned int v42 = *((unsigned __int8 *)v30 + 16);
            if (v42 != 20)
            {
              if (v42 < 0x1C || v42 - 81 < 0xFFFFFFFE)
              {
                int v44 = *((_DWORD *)v30 + 5);
                uint64_t v43 = (v44 & 0x40000000) != 0 ? (void *)*(v30 - 1) : &v30[-4 * (v44 & 0x7FFFFFF)];
              }
              else
              {
                uint64_t v43 = v30 - 4;
              }
              if (*v43 == *((void *)v2 - 4))
              {
                v69[0] = (uint64_t)v2;
                *(void *)sub_1CD48CC08(v66, v69) = v23;
              }
            }
          }
          uint64_t v3 = v23;
          uint64_t v36 = v2;
          uint64_t v4 = v30;
        }
LABEL_103:
        BOOL v22 = v36;
        if (v6 != v2)
        {
LABEL_107:
          uint64_t v5 = v78;
          if (!v22 || v6 == v22) {
            goto LABEL_138;
          }
          if (v78)
          {
            do
            {
              uint64_t v45 = *((void *)v77 + v5 - 1);
              unsigned int v46 = *(unsigned __int8 *)(v45 + 16);
              if (v45) {
                BOOL v47 = v46 >= 0x1C;
              }
              else {
                BOOL v47 = 0;
              }
              if (v47 && v46 - 81 >= 0xFFFFFFFE)
              {
                unsigned int v50 = (uint64_t *)(v45 - 32);
              }
              else
              {
                int v49 = *(_DWORD *)(v45 + 20);
                if ((v49 & 0x40000000) != 0) {
                  unsigned int v50 = *(uint64_t **)(v45 - 8);
                }
                else {
                  unsigned int v50 = (uint64_t *)(v45 - 32 * (v49 & 0x7FFFFFF));
                }
              }
              unsigned int v51 = (llvm::Instruction *)*v50;
              while (v6 != v51)
              {
                if (v6
                  && ((unsigned int v52 = *((unsigned __int8 *)v6 + 16), v52 >= 0x1C) ? (v53 = v52 - 81 >= 0xFFFFFFFE) : (v53 = 0),
                      v53))
                {
                  unsigned int v54 = (llvm::Instruction **)((char *)v6 - 32);
                }
                else
                {
                  int v55 = *((_DWORD *)v6 + 5);
                  if ((v55 & 0x40000000) != 0) {
                    unsigned int v54 = (llvm::Instruction **)*((void *)v6 - 1);
                  }
                  else {
                    unsigned int v54 = (llvm::Instruction **)((char *)v6 - 32 * (v55 & 0x7FFFFFF));
                  }
                }
                int v6 = *v54;
                if (*v54 == v22) {
                  goto LABEL_138;
                }
              }
              int v6 = v51;
              unsigned int v78 = --v5;
            }
            while (v5);
          }
          goto LABEL_150;
        }
LABEL_104:
        uint64_t v21 = *(void *)(v21 + 8);
        if (!v21) {
          goto LABEL_107;
        }
      }
      if ((*(_WORD *)(v23 + 18) & 1) == 0) {
        goto LABEL_86;
      }
      int v25 = *(_DWORD *)(v23 + 20);
      goto LABEL_40;
    }
    LODWORD(v5) = v78;
LABEL_138:
    if (!v5)
    {
      if (!v4) {
        goto LABEL_170;
      }
      uint64_t v58 = *((void *)v2 - 4);
      if (*(unsigned char *)(v58 + 16) != 38) {
        uint64_t v58 = 0;
      }
      BOOL v68 = (llvm::Value *)v58;
      if (!v58) {
        goto LABEL_170;
      }
LABEL_150:
      if ((*(_WORD *)(v58 + 18) & 1) != 0
        && ((int v59 = *(_DWORD *)(v58 + 20), (v59 & 0x40000000) != 0)
          ? (uint64_t v60 = *(void *)(v58 - 8))
          : (uint64_t v60 = v58 - 32 * (v59 & 0x7FFFFFF)),
            (uint64_t v61 = *(void *)(v60 + 32)) != 0))
      {
        uint64_t v62 = v61 + 40;
        for (uint64_t j = *(void *)(v61 + 48); j != v62; uint64_t j = *(void *)(j + 8))
        {
          BOOL v64 = (void *)(j - 24);
          if (j) {
            uint64_t v65 = j - 24;
          }
          else {
            uint64_t v65 = 0;
          }
          if (*(unsigned char *)(v65 + 16) != 83) {
            goto LABEL_169;
          }
        }
        BOOL v64 = 0;
      }
      else
      {
        BOOL v64 = llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v2, a2);
      }
LABEL_169:
      if (v64 != v4)
      {
        v69[0] = (uint64_t)"Unwind edges out of a catch must have the same unwind dest as the parent catchswitch";
        __int16 v70 = 259;
        sub_1CD5DBE68(a1, (llvm::Twine *)v69);
        if (*(void *)a1) {
          sub_1CD5DCB08(a1, v2, &v76, &v68);
        }
      }
      else
      {
LABEL_170:
        sub_1CC642980((uint64_t)a1, (uint64_t ***)v2);
      }
      goto LABEL_171;
    }
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v6)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15 == (llvm::Instruction *)-2;
    }
    if (v18) {
      uint64_t v16 = v14;
    }
    unsigned int v19 = v13 + v17++;
    unsigned int v13 = v19 & v12;
    unsigned int v14 = &v7[8 * (v19 & v12)];
    __int16 v15 = *(llvm::Instruction **)v14;
    if (*(void *)v14 == -1) {
      goto LABEL_27;
    }
  }
LABEL_146:
  v69[0] = (uint64_t)"FuncletPadInst must not be nested within itself";
  __int16 v70 = 259;
  sub_1CD5DBE68(a1, (llvm::Twine *)v69);
  if (v6 && *(void *)a1)
  {
    uint64_t v56 = (llvm::raw_ostream **)a1;
    unsigned int v57 = v6;
LABEL_149:
    sub_1CD5DBED0(v56, v57);
  }
LABEL_171:
  if (v72 != v71) {
    free(v72);
  }
  if (v77 != v80) {
    free(v77);
  }
}

void sub_1CC64C6F8(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  sub_1CC64571C(a1, a2);
  unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
  if ((v4 & 3) != 2) {
    return;
  }
  uint64_t v5 = *(void *)(a2 - 32);
  if (*(unsigned char *)(v5 + 16) == 24)
  {
    BOOL v47 = "cannot use musttail call with inline asm";
    goto LABEL_89;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(a2 + 72);
  if (*(_DWORD *)(v8 + 8) > 0xFFu != *(_DWORD *)(v9 + 8) > 0xFFu)
  {
    BOOL v47 = "cannot guarantee tail call due to mismatched varargs";
    goto LABEL_89;
  }
  uint64_t v10 = *(uint64_t **)(v8 + 16);
  uint64_t v11 = *v10;
  int v12 = *(uint64_t **)(v9 + 16);
  uint64_t v13 = *v12;
  if (*v10 != *v12)
  {
    if (*(unsigned char *)(v11 + 8) != 15) {
      uint64_t v11 = 0;
    }
    if (*(unsigned char *)(v13 + 8) != 15) {
      uint64_t v13 = 0;
    }
    BOOL v14 = !v11 || v13 == 0;
    if (v14 || (*(_DWORD *)(v13 + 8) ^ *(_DWORD *)(v11 + 8)) >= 0x100)
    {
      BOOL v47 = "cannot guarantee tail call due to mismatched return types";
      goto LABEL_89;
    }
  }
  if ((((*(unsigned __int16 *)(v7 + 18) >> 4) ^ (v4 >> 2)) & 0x3FF) != 0)
  {
    BOOL v47 = "cannot guarantee tail call due to mismatched calling conv";
    goto LABEL_89;
  }
  uint64_t v15 = *(void *)(a2 + 32);
  if (v15 == v6 + 40 || !v15) {
    goto LABEL_84;
  }
  uint64_t v16 = v15 - 24;
  if (*(unsigned char *)(v15 - 8) == 77)
  {
    if (*(void *)(v15 - 56) != a2)
    {
      uint64_t v48 = "bitcast following musttail call must use the call";
LABEL_101:
      uint64_t v65 = (void **)v48;
      __int16 v69 = 259;
      sub_1CD5DBE68(a1, (llvm::Twine *)&v65);
      if (!*(void *)a1) {
        return;
      }
      int v49 = (llvm::raw_ostream **)a1;
      unsigned int v50 = (llvm::Value *)v16;
LABEL_97:
      sub_1CD5DBED0(v49, v50);
      return;
    }
    uint64_t v18 = v15 + 8;
    uint64_t v17 = *(void *)(v15 + 8);
    if (v17 == *(void *)(v18 + 8) + 40 || !v17) {
      goto LABEL_84;
    }
    uint64_t v19 = v16;
    uint64_t v16 = v17 - 24;
  }
  else
  {
    uint64_t v19 = a2;
  }
  if (*(unsigned char *)(v16 + 16) != 29)
  {
LABEL_84:
    BOOL v47 = "musttail call must precede a ret with an optional bitcast";
LABEL_89:
    uint64_t v65 = (void **)v47;
    __int16 v69 = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v65);
    if (!*(void *)a1) {
      return;
    }
    int v49 = (llvm::raw_ostream **)a1;
    unsigned int v50 = (llvm::Value *)a2;
    goto LABEL_97;
  }
  uint64_t v20 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
  if (v20)
  {
    uint64_t v21 = *(void *)(v16 - 32 * v20);
    BOOL v22 = !v21 || v21 == v19;
    if (!v22 && *(unsigned __int8 *)(v21 + 16) - 11 >= 2)
    {
      uint64_t v48 = "musttail call result must be returned";
      goto LABEL_101;
    }
  }
  uint64_t v23 = *(void *)(v7 + 112);
  uint64_t v24 = *(void *)(a2 + 64);
  int v25 = (v4 >> 2) & 0x3FF;
  if (v25 == 20 || v25 == 18)
  {
    if ((v4 & 0xFFC) == 0x48) {
      uint64_t v26 = "tailcc";
    }
    else {
      uint64_t v26 = "swifttailcc";
    }
    uint64_t v52 = *(void *)(a2 + 64);
    BOOL v53 = v26;
    if ((v4 & 0xFFC) == 0x48) {
      uint64_t v27 = 6;
    }
    else {
      uint64_t v27 = 11;
    }
    int v28 = *(_DWORD *)(v8 + 12);
    int v29 = v28 - 1;
    if (v28 != 1)
    {
      int v30 = 0;
      do
      {
        sub_1CC64CD48((uint64_t)&v65, **(void **)v7, v30, v23);
        uint64_t v56 = v53;
        uint64_t v57 = v27;
        uint64_t v58 = " musttail caller";
        uint64_t v59 = 16;
        uint64_t v61 = &v63;
        *(_OWORD *)uint64_t v62 = xmmword_1CDC7F9D0;
        sub_1CD5DCF50(&v61, (uint64_t)&v56, 2);
        sub_1CC64CE64(a1, (uint64_t)&v65, (uint64_t)v61, (uint64_t)v62[0]);
        if (v61 != &v63) {
          free(v61);
        }
        if (v66 != &v68) {
          free(v66);
        }
        ++v30;
      }
      while (v29 != v30);
    }
    int v31 = *(_DWORD *)(v9 + 12);
    int v32 = v31 - 1;
    if (v31 != 1)
    {
      int v33 = 0;
      do
      {
        sub_1CC64CD48((uint64_t)&v65, **(void **)v7, v33, v52);
        uint64_t v56 = v53;
        uint64_t v57 = v27;
        uint64_t v58 = " musttail callee";
        uint64_t v59 = 16;
        uint64_t v61 = &v63;
        *(_OWORD *)uint64_t v62 = xmmword_1CDC7F9D0;
        sub_1CD5DCF50(&v61, (uint64_t)&v56, 2);
        sub_1CC64CE64(a1, (uint64_t)&v65, (uint64_t)v61, (uint64_t)v62[0]);
        if (v61 != &v63) {
          free(v61);
        }
        if (v66 != &v68) {
          free(v66);
        }
        ++v33;
      }
      while (v32 != v33);
    }
    if (*(_DWORD *)(v8 + 8) > 0xFFu)
    {
      uint64_t v61 = "cannot guarantee ";
      v62[1] = (void *)v53;
      uint64_t v63 = v27;
      __int16 v64 = 1283;
      uint64_t v65 = &v61;
      int v67 = " tail call for varargs function";
      __int16 v69 = 770;
      sub_1CD5DBE68(a1, (llvm::Twine *)&v65);
    }
    return;
  }
  if (!*(unsigned char *)(v5 + 16) && *(void *)(v5 + 24) == v9 && (*(unsigned char *)(v5 + 33) & 0x20) != 0)
  {
    int v51 = *(_DWORD *)(v8 + 12);
    LODWORD(v35) = v51 - 1;
    if (v51 == 1) {
      return;
    }
    goto LABEL_72;
  }
  int v34 = *(_DWORD *)(v8 + 12);
  if (v34 != *(_DWORD *)(v9 + 12))
  {
    BOOL v47 = "cannot guarantee tail call due to mismatched parameter counts";
    goto LABEL_89;
  }
  uint64_t v35 = (v34 - 1);
  if (v34 == 1) {
    return;
  }
  uint64_t v36 = v12 + 1;
  uint64_t v37 = v10 + 1;
  uint64_t v38 = v35;
  do
  {
    uint64_t v39 = *v37;
    uint64_t v40 = *v36;
    if (*v37 != *v36)
    {
      if (*(unsigned char *)(v39 + 8) != 15) {
        uint64_t v39 = 0;
      }
      if (*(unsigned char *)(v40 + 8) != 15) {
        uint64_t v40 = 0;
      }
      BOOL v41 = !v39 || v40 == 0;
      if (v41 || (*(_DWORD *)(v40 + 8) ^ *(_DWORD *)(v39 + 8)) >= 0x100)
      {
        BOOL v47 = "cannot guarantee tail call due to mismatched parameter types";
        goto LABEL_89;
      }
    }
    ++v36;
    ++v37;
    --v38;
  }
  while (v38);
  if (!v35) {
    return;
  }
LABEL_72:
  unsigned int v42 = 0;
  while (1)
  {
    sub_1CC64CD48((uint64_t)&v65, **(void **)v7, v42, v23);
    sub_1CC64CD48((uint64_t)&v61, **(void **)v7, v42, v24);
    if (v67 != LODWORD(v62[1])) {
      break;
    }
    uint64_t v43 = (uint64_t *)v66;
    if (v67)
    {
      uint64_t v44 = 8 * v67;
      uint64_t v45 = v62[0];
      unsigned int v46 = v66;
      while (*v46 == *v45)
      {
        ++v46;
        ++v45;
        v44 -= 8;
        if (!v44) {
          goto LABEL_78;
        }
      }
      break;
    }
LABEL_78:
    if (v62[0] != &v63)
    {
      free(v62[0]);
      uint64_t v43 = (uint64_t *)v66;
    }
    if (v43 != &v68) {
      free(v43);
    }
    if (++v42 == v35) {
      return;
    }
  }
  int v55 = (llvm::Value *)a2;
  uint64_t v56 = "cannot guarantee tail call due to mismatched ABI impacting function attributes";
  __int16 v60 = 259;
  unsigned int v54 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v42);
  sub_1CD5DBC00(a1, (llvm::Twine *)&v56, &v55, &v54);
  if (v62[0] != &v63) {
    free(v62[0]);
  }
  if (v66 != &v68) {
    free(v66);
  }
}

uint64_t sub_1CC64CD48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = result + 24;
  *(void *)(result + 16) = 0x800000000;
  uint64_t v6 = (a3 + 2);
  uint64_t v7 = a4 + 40;
  uint64_t v8 = &dword_1CFB1B768;
  do
  {
    while (!a4)
    {
      if (++v8 == (int *)qword_1CFB1B790) {
        return result;
      }
    }
    if (v6 < *(_DWORD *)(a4 + 8))
    {
      uint64_t result = *(void *)(v7 + 8 * v6);
      if (result)
      {
        uint64_t result = llvm::AttributeSetNode::findEnumAttribute(result, *v8);
        if (v9 && result != 0) {
          uint64_t result = llvm::AttrBuilder::addAttribute(v5, result);
        }
      }
    }
    ++v8;
  }
  while (v8 != (int *)qword_1CFB1B790);
  if (v6 < *(_DWORD *)(a4 + 8))
  {
    uint64_t result = *(void *)(v7 + 8 * v6);
    if (result)
    {
      if ((*(unsigned char *)(result + 21) & 4) != 0 && (*(unsigned char *)(result + 20) & 0x30) != 0)
      {
        __int16 Alignment = llvm::AttributeSetNode::getAlignment((llvm::AttributeSetNode *)result);
        return llvm::AttrBuilder::addAlignmentAttr(v5, Alignment);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC64CE64(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (llvm::AttrBuilder::getAttribute(a2, 71))
  {
    char v9 = "inalloca attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 10))
  {
    char v9 = "inreg attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 63))
  {
    char v9 = "swifterror attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 72))
  {
    char v9 = "preallocated attribute not allowed in ";
  }
  else
  {
    uint64_t result = (llvm::raw_ostream *)llvm::AttrBuilder::getAttribute(a2, 68);
    if (!result) {
      return result;
    }
    char v9 = "byref attribute not allowed in ";
  }
  v10[0] = v9;
  v10[2] = a3;
  v10[3] = a4;
  __int16 v11 = 1283;
  return sub_1CD5DBE68(a1, (llvm::Twine *)v10);
}

uint64_t sub_1CC64CF44(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 33)
  {
    uint64_t v2 = (uint64_t *)(a1 - 64);
LABEL_14:
    uint64_t v6 = *v2;
    goto LABEL_15;
  }
  __int16 v3 = *(_WORD *)(a1 + 18);
  if (a1 && v1 == 38)
  {
    if (v3)
    {
      int v4 = *(_DWORD *)(a1 + 20);
      if ((v4 & 0x40000000) != 0)
      {
        uint64_t v5 = *(void *)(a1 - 8);
LABEL_13:
        uint64_t v2 = (uint64_t *)(v5 + 32);
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v5 = a1 - 32 * (v4 & 0x7FFFFFF);
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 20);
    goto LABEL_12;
  }
  uint64_t v6 = 0;
LABEL_15:
  uint64_t v7 = v6 + 40;
  for (uint64_t i = *(void *)(v6 + 48); i != v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t result = i - 24;
    if (i) {
      uint64_t v10 = i - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 83) {
      return result;
    }
  }
  return 0;
}

unint64_t sub_1CC64CFDC(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  char v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          char v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v60 = *(a2 - 1);
                uint64_t v61 = *v10;
                uint64_t v62 = *(void *)(*(void *)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF)) + 24);
                uint64_t v63 = *(void *)(*(void *)(*v10 - 32 * (*(_DWORD *)(*v10 + 20) & 0x7FFFFFF)) + 24);
                if (v62 - 8 * (unint64_t)*(unsigned int *)(v62 + 8) < v63
                                                                            - 8
                                                                            * (unint64_t)*(unsigned int *)(v63 + 8))
                {
                  *uint64_t v10 = v60;
                  *(a2 - 1) = v61;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CC64DC24(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CC64DF80(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t result = (unint64_t)sub_1CC64DAA0(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            __int16 v64 = v10 + 1;
            BOOL v66 = v10 == a2 || v64 == a2;
            if (a4)
            {
              if (!v66)
              {
                uint64_t v67 = 8;
                uint64_t v68 = v10;
                do
                {
                  uint64_t v70 = *v68;
                  uint64_t v69 = v68[1];
                  uint64_t v68 = v64;
                  uint64_t v71 = *(void *)(*(void *)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF)) + 24);
                  uint64_t v72 = *(void *)(*(void *)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF)) + 24);
                  if (v71 - 8 * (unint64_t)*(unsigned int *)(v71 + 8) < v72
                                                                              - 8
                                                                              * (unint64_t)*(unsigned int *)(v72 + 8))
                  {
                    uint64_t v73 = v67;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v73) = v70;
                      uint64_t v74 = v73 - 8;
                      if (v73 == 8)
                      {
                        unsigned int v79 = v10;
                        goto LABEL_84;
                      }
                      uint64_t v70 = *(uint64_t *)((char *)v10 + v73 - 16);
                      uint64_t v75 = *(void *)(*(void *)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v76 = v75 - 8 * *(unsigned int *)(v75 + 8);
                      uint64_t v77 = *(void *)(*(void *)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v78 = v77 - 8 * *(unsigned int *)(v77 + 8);
                      uint64_t v73 = v74;
                    }
                    while (v76 < v78);
                    unsigned int v79 = (uint64_t *)((char *)v10 + v74);
LABEL_84:
                    *unsigned int v79 = v69;
                  }
                  __int16 v64 = v68 + 1;
                  v67 += 8;
                }
                while (v68 + 1 != a2);
              }
            }
            else if (!v66)
            {
              do
              {
                uint64_t v125 = *v9;
                uint64_t v124 = v9[1];
                char v9 = v64;
                uint64_t v126 = *(void *)(*(void *)(v124 - 32 * (*(_DWORD *)(v124 + 20) & 0x7FFFFFF)) + 24);
                uint64_t v127 = *(void *)(*(void *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF)) + 24);
                if (v126 - 8 * (unint64_t)*(unsigned int *)(v126 + 8) < v127
                                                                              - 8
                                                                              * (unint64_t)*(unsigned int *)(v127 + 8))
                {
                  uint64_t v128 = v64;
                  do
                  {
                    *uint64_t v128 = v125;
                    uint64_t v125 = *(v128 - 2);
                    uint64_t v129 = *(void *)(*(void *)(v124 - 32 * (*(_DWORD *)(v124 + 20) & 0x7FFFFFF)) + 24);
                    uint64_t v130 = *(void *)(*(void *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF)) + 24);
                    --v128;
                  }
                  while (v129 - 8 * (unint64_t)*(unsigned int *)(v129 + 8) < v130
                                                                                   - 8
                                                                                   * (unint64_t)*(unsigned int *)(v130 + 8));
                  *uint64_t v128 = v124;
                }
                __int16 v64 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v80 = (unint64_t)(v12 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  int v84 = &v10[v83];
                  uint64_t v85 = *v84;
                  if (2 * v82 + 2 < v12)
                  {
                    uint64_t v86 = *(void *)(*(void *)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF)) + 24);
                    uint64_t v87 = *(void *)(*(void *)(v84[1] - 32 * (*(_DWORD *)(v84[1] + 20) & 0x7FFFFFF)) + 24);
                    if (v86 - 8 * (unint64_t)*(unsigned int *)(v86 + 8) < v87
                                                                                - 8
                                                                                * (unint64_t)*(unsigned int *)(v87 + 8))
                    {
                      uint64_t v85 = v84[1];
                      ++v84;
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  unsigned int v88 = &v10[v82];
                  uint64_t v89 = *v88;
                  uint64_t v90 = *(void *)(*(void *)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF)) + 24);
                  uint64_t v91 = *(void *)(*(void *)(*v88 - 32 * (*(_DWORD *)(*v88 + 20) & 0x7FFFFFF)) + 24);
                  uint64_t result = *(unsigned int *)(v91 + 8);
                  if (v90 - 8 * (unint64_t)*(unsigned int *)(v90 + 8) >= v91 - 8 * result)
                  {
                    do
                    {
                      int v92 = v84;
                      *unsigned int v88 = v85;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v93 = (2 * v83) | 1;
                      int v84 = &v10[v93];
                      uint64_t v94 = 2 * v83 + 2;
                      uint64_t v85 = *v84;
                      if (v94 < v12)
                      {
                        uint64_t v95 = *(void *)(*(void *)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF)) + 24);
                        uint64_t v96 = *(void *)(*(void *)(v84[1] - 32 * (*(_DWORD *)(v84[1] + 20) & 0x7FFFFFF)) + 24);
                        if (v95 - 8 * (unint64_t)*(unsigned int *)(v95 + 8) < v96
                                                                                    - 8
                                                                                    * (unint64_t)*(unsigned int *)(v96 + 8))
                        {
                          uint64_t v85 = v84[1];
                          ++v84;
                          uint64_t v93 = v94;
                        }
                      }
                      uint64_t v97 = *(void *)(*(void *)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF)) + 24);
                      uint64_t result = v97 - 8 * *(unsigned int *)(v97 + 8);
                      uint64_t v98 = *(void *)(*(void *)(v89 - 32 * (*(_DWORD *)(v89 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v99 = v98 - 8 * *(unsigned int *)(v98 + 8);
                      unsigned int v88 = v92;
                      uint64_t v83 = v93;
                    }
                    while (result >= v99);
                    *int v92 = v89;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              do
              {
                uint64_t v100 = 0;
                uint64_t v101 = *v10;
                uint64_t v102 = v10;
                do
                {
                  uint64_t v103 = &v102[v100];
                  uint64_t v106 = v103[1];
                  uint64_t v104 = v103 + 1;
                  uint64_t v105 = v106;
                  uint64_t v107 = (2 * v100) | 1;
                  uint64_t v108 = 2 * v100 + 2;
                  if (v108 < v12)
                  {
                    uint64_t v109 = *(void *)(*(void *)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF)) + 24);
                    uint64_t result = v109 - 8 * *(unsigned int *)(v109 + 8);
                    uint64_t v110 = *(void *)(*(void *)(v104[1] - 32 * (*(_DWORD *)(v104[1] + 20) & 0x7FFFFFF)) + 24);
                    if (result < v110 - 8 * (unint64_t)*(unsigned int *)(v110 + 8))
                    {
                      uint64_t v105 = v104[1];
                      ++v104;
                      uint64_t v107 = v108;
                    }
                  }
                  *uint64_t v102 = v105;
                  uint64_t v102 = v104;
                  uint64_t v100 = v107;
                }
                while (v107 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v104 == --a2)
                {
                  *uint64_t v104 = v101;
                }
                else
                {
                  *uint64_t v104 = *a2;
                  *a2 = v101;
                  uint64_t v111 = (char *)v104 - (char *)v10 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    uint64_t v113 = &v10[v112];
                    uint64_t v114 = *v113;
                    uint64_t v115 = *v104;
                    uint64_t v116 = *(void *)(*(void *)(*v113 - 32 * (*(_DWORD *)(*v113 + 20) & 0x7FFFFFF)) + 24);
                    uint64_t v117 = *(void *)(*(void *)(*v104 - 32 * (*(_DWORD *)(*v104 + 20) & 0x7FFFFFF)) + 24);
                    if (v116 - 8 * (unint64_t)*(unsigned int *)(v116 + 8) < v117
                                                                                  - 8
                                                                                  * (unint64_t)*(unsigned int *)(v117 + 8))
                    {
                      do
                      {
                        uint64_t v118 = v113;
                        *uint64_t v104 = v114;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        uint64_t v113 = &v10[v112];
                        uint64_t v114 = *v113;
                        uint64_t v119 = *(void *)(*(void *)(*v113 - 32 * (*(_DWORD *)(*v113 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v120 = v119 - 8 * *(unsigned int *)(v119 + 8);
                        uint64_t v121 = *(void *)(*(void *)(v115 - 32 * (*(_DWORD *)(v115 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v122 = v121 - 8 * *(unsigned int *)(v121 + 8);
                        uint64_t v104 = v118;
                      }
                      while (v120 < v122);
                      uint64_t *v118 = v115;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          BOOL v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC64DC24(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC64DC24(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC64DC24(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (unint64_t)sub_1CC64DC24(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *v14;
            *BOOL v14 = v15;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CC64DC24(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          uint64_t v19 = *(void *)(*(void *)(*(v9 - 1) - 32 * (*(_DWORD *)(*(v9 - 1) + 20) & 0x7FFFFFF)) + 24);
          unint64_t v20 = v19 - 8 * *(unsigned int *)(v19 + 8);
          uint64_t v17 = *(void *)(*(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
          uint64_t v21 = *(unsigned int *)(v17 + 8);
          unint64_t v22 = v17 - 8 * v21;
          if (v20 < v22)
          {
            uint64_t v18 = -v21;
            goto LABEL_14;
          }
          uint64_t v43 = *(void *)(*(void *)(*(a2 - 1) - 32 * (*(_DWORD *)(*(a2 - 1) + 20) & 0x7FFFFFF)) + 24);
          if (v22 >= v43 - 8 * (unint64_t)*(unsigned int *)(v43 + 8))
          {
            unsigned int v46 = v9 + 1;
            do
            {
              uint64_t v10 = v46;
              if (v46 >= a2) {
                break;
              }
              ++v46;
              uint64_t v47 = *(void *)(*(void *)(*v10 - 32 * (*(_DWORD *)(*v10 + 20) & 0x7FFFFFF)) + 24);
            }
            while (v22 >= v47 - 8 * (unint64_t)*(unsigned int *)(v47 + 8));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v44 = v10[1];
              ++v10;
              uint64_t v45 = *(void *)(*(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24);
            }
            while (v22 >= v45 - 8 * (unint64_t)*(unsigned int *)(v45 + 8));
          }
          uint64_t v48 = a2;
          if (v10 < a2)
          {
            uint64_t v48 = a2;
            do
            {
              uint64_t v49 = *--v48;
              uint64_t v50 = *(void *)(*(void *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF)) + 24);
            }
            while (v22 < v50 - 8 * (unint64_t)*(unsigned int *)(v50 + 8));
          }
          if (v10 < v48)
          {
            uint64_t v51 = *v10;
            uint64_t v52 = *v48;
            do
            {
              *uint64_t v10 = v52;
              *uint64_t v48 = v51;
              uint64_t v53 = *(void *)(*(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v54 = v53 - 8 * *(unsigned int *)(v53 + 8);
              do
              {
                uint64_t v55 = v10[1];
                ++v10;
                uint64_t v51 = v55;
                uint64_t v56 = *(void *)(*(void *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF)) + 24);
              }
              while (v54 >= v56 - 8 * (unint64_t)*(unsigned int *)(v56 + 8));
              do
              {
                uint64_t v57 = *--v48;
                uint64_t v52 = v57;
                uint64_t v58 = *(void *)(*(void *)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF)) + 24);
              }
              while (v54 < v58 - 8 * (unint64_t)*(unsigned int *)(v58 + 8));
            }
            while (v10 < v48);
          }
          uint64_t v59 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            uint64_t *v9 = *v59;
          }
          a4 = 0;
          *uint64_t v59 = v16;
        }
        uint64_t v17 = *(void *)(*(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
        uint64_t v18 = -(uint64_t)*(unsigned int *)(v17 + 8);
LABEL_14:
        uint64_t v23 = 0;
        unint64_t v24 = v17 + 8 * v18;
        do
        {
          uint64_t v25 = v9[v23 + 1];
          uint64_t v26 = *(void *)(*(void *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF)) + 24);
          ++v23;
        }
        while (v26 - 8 * (unint64_t)*(unsigned int *)(v26 + 8) < v24);
        uint64_t v27 = &v9[v23];
        int v28 = a2;
        if (v23 == 1)
        {
          int v28 = a2;
          do
          {
            if (v27 >= v28) {
              break;
            }
            uint64_t v31 = *--v28;
            uint64_t v32 = *(void *)(*(void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24);
          }
          while (v32 - 8 * (unint64_t)*(unsigned int *)(v32 + 8) >= v24);
        }
        else
        {
          do
          {
            uint64_t v29 = *--v28;
            uint64_t v30 = *(void *)(*(void *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) + 24);
          }
          while (v30 - 8 * (unint64_t)*(unsigned int *)(v30 + 8) >= v24);
        }
        if (v27 >= v28)
        {
          uint64_t v10 = v27;
        }
        else
        {
          uint64_t v33 = *v28;
          uint64_t v10 = v27;
          int v34 = v28;
          do
          {
            *uint64_t v10 = v33;
            uint64_t *v34 = v25;
            uint64_t v35 = *(void *)(*(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
            unint64_t v36 = v35 - 8 * *(unsigned int *)(v35 + 8);
            do
            {
              uint64_t v37 = v10[1];
              ++v10;
              uint64_t v25 = v37;
              uint64_t v38 = *(void *)(*(void *)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF)) + 24);
            }
            while (v38 - 8 * (unint64_t)*(unsigned int *)(v38 + 8) < v36);
            do
            {
              uint64_t v39 = *--v34;
              uint64_t v33 = v39;
              uint64_t v40 = *(void *)(*(void *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF)) + 24);
            }
            while (v40 - 8 * (unint64_t)*(unsigned int *)(v40 + 8) >= v36);
          }
          while (v10 < v34);
        }
        BOOL v41 = v10 - 1;
        if (v10 - 1 != v9) {
          uint64_t *v9 = *v41;
        }
        *BOOL v41 = v16;
        if (v27 >= v28) {
          break;
        }
LABEL_35:
        uint64_t result = sub_1CC64CFDC(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v42 = sub_1CC64DD58(v9, v10 - 1);
      uint64_t result = sub_1CC64DD58(v10, a2);
      if (result) {
        break;
      }
      if (!v42) {
        goto LABEL_35;
      }
    }
    a2 = v10 - 1;
    if (!v42) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC64DAA0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1CC64DF80(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  uint64_t v12 = *(void *)(*(void *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24);
  uint64_t v13 = *(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  if (v12 - 8 * (unint64_t)*(unsigned int *)(v12 + 8) < v13 - 8 * (unint64_t)*(unsigned int *)(v13 + 8))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v14 = *a3;
    uint64_t v15 = *(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
    uint64_t v16 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
    if (v15 - 8 * (unint64_t)*(unsigned int *)(v15 + 8) < v16 - 8 * (unint64_t)*(unsigned int *)(v16 + 8))
    {
      *a3 = *a4;
      *a4 = v14;
      uint64_t v17 = *a2;
      uint64_t v18 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v19 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
      if (v18 - 8 * (unint64_t)*(unsigned int *)(v18 + 8) < v19
                                                                  - 8 * (unint64_t)*(unsigned int *)(v19 + 8))
      {
        *a2 = *a3;
        *a3 = v17;
        uint64_t v20 = *a1;
        uint64_t v21 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
        uint64_t v22 = *(void *)(*(void *)(*a1 - 32 * (*(_DWORD *)(*a1 + 20) & 0x7FFFFFF)) + 24);
        if (v21 - 8 * (unint64_t)*(unsigned int *)(v21 + 8) < v22
                                                                    - 8 * (unint64_t)*(unsigned int *)(v22 + 8))
        {
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC64DC24(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v5 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v6 = v5 - 8 * *(unsigned int *)(v5 + 8);
  uint64_t v7 = *(void *)(*(void *)(*result - 32 * (*(_DWORD *)(*result + 20) & 0x7FFFFFF)) + 24);
  unint64_t v8 = v7 - 8 * *(unsigned int *)(v7 + 8);
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v11 = v10 - 8 * *(unsigned int *)(v10 + 8);
  if (v6 >= v8)
  {
    if (v11 < v6)
    {
      *a2 = v9;
      *a3 = v3;
      uint64_t v12 = *result;
      uint64_t v13 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v14 = *(void *)(*(void *)(*result - 32 * (*(_DWORD *)(*result + 20) & 0x7FFFFFF)) + 24);
      if (v13 - 8 * (unint64_t)*(unsigned int *)(v13 + 8) < v14
                                                                  - 8 * (unint64_t)*(unsigned int *)(v14 + 8))
      {
        *uint64_t result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 >= v6)
    {
      *uint64_t result = v3;
      *a2 = v4;
      uint64_t v15 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v16 = *(void *)(*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
      if (v15 - 8 * (unint64_t)*(unsigned int *)(v15 + 8) >= v16
                                                                   - 8 * (unint64_t)*(unsigned int *)(v16 + 8))
        return result;
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v9;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CC64DD58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = *(void *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v9 = *(void *)(*(void *)(*a1 - 32 * (*(_DWORD *)(*a1 + 20) & 0x7FFFFFF)) + 24);
      if (v8 - 8 * (unint64_t)*(unsigned int *)(v8 + 8) < v9 - 8 * (unint64_t)*(unsigned int *)(v9 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC64DC24(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC64DF80(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CC64DAA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1CC64DC24(a1, a1 + 1, a1 + 2);
      unint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = 24;
      break;
  }
  while (1)
  {
    uint64_t v14 = *v11;
    uint64_t v15 = *v10;
    uint64_t v16 = *(void *)(*(void *)(*v11 - 32 * (*(_DWORD *)(*v11 + 20) & 0x7FFFFFF)) + 24);
    uint64_t v17 = *(void *)(*(void *)(*v10 - 32 * (*(_DWORD *)(*v10 + 20) & 0x7FFFFFF)) + 24);
    if (v16 - 8 * (unint64_t)*(unsigned int *)(v16 + 8) < v17 - 8 * (unint64_t)*(unsigned int *)(v17 + 8))
    {
      uint64_t v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v15;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v15 = *(uint64_t *)((char *)a1 + v18 - 16);
        uint64_t v20 = *(void *)(*(void *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v21 = v20 - 8 * *(unsigned int *)(v20 + 8);
        uint64_t v22 = *(void *)(*(void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v23 = v22 - 8 * *(unsigned int *)(v22 + 8);
        uint64_t v18 = v19;
        if (v21 >= v23)
        {
          unint64_t v24 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      unint64_t v24 = a1;
LABEL_12:
      *unint64_t v24 = v14;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v13 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC64DF80(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC64DC24(a1, a2, a3);
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  uint64_t v11 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  if (v10 - 8 * (unint64_t)*(unsigned int *)(v10 + 8) < v11 - 8 * (unint64_t)*(unsigned int *)(v11 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v12 = *a2;
    uint64_t v13 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
    uint64_t v14 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
    if (v13 - 8 * (unint64_t)*(unsigned int *)(v13 + 8) < v14 - 8 * (unint64_t)*(unsigned int *)(v14 + 8))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v15 = *a1;
      uint64_t v16 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v17 = *(void *)(*(void *)(*a1 - 32 * (*(_DWORD *)(*a1 + 20) & 0x7FFFFFF)) + 24);
      if (v16 - 8 * (unint64_t)*(unsigned int *)(v16 + 8) < v17
                                                                  - 8 * (unint64_t)*(unsigned int *)(v17 + 8))
      {
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

void sub_1CC64E0A8(llvm::raw_ostream *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
  if (v8 > 3) {
    goto LABEL_2;
  }
  int v12 = *(_DWORD *)(a4 + 32);
  if ((v12 & 0xF) == 1) {
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a4 + 16))
  {
    if ((v12 & 0x800000) != 0 || *(void *)(a4 + 72) != a4 + 72) {
      return;
    }
    goto LABEL_30;
  }
  if (v8 == 3)
  {
    if ((*(_DWORD *)(a4 + 20) & 0x7FFFFFF) != 0) {
      return;
    }
LABEL_30:
    uint64_t v18 = "Alias must point to a definition";
    goto LABEL_71;
  }
  if (v8 == 1) {
    uint64_t v19 = (llvm::GlobalValue *)a4;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v8 != 1) {
    return;
  }
  uint64_t v20 = *(void *)(a2 + 8);
  uint64_t v21 = *(unsigned int *)(a2 + 20);
  if (v20 == *(void *)a2)
  {
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 8 * v21;
      unint64_t v24 = *(llvm::GlobalValue ***)(a2 + 8);
      do
      {
        if (*v24 == v19) {
          goto LABEL_69;
        }
        if (*v24 == (llvm::GlobalValue *)-2) {
          uint64_t v22 = v24;
        }
        ++v24;
        v23 -= 8;
      }
      while (v23);
      if (v22)
      {
        llvm::Instruction *v22 = v19;
        --*(_DWORD *)(a2 + 24);
        goto LABEL_67;
      }
    }
    unsigned int v25 = *(_DWORD *)(a2 + 16);
    if (v21 < v25)
    {
      *(_DWORD *)(a2 + 20) = v21 + 1;
      *(void *)(v20 + 8 * v21) = v19;
      goto LABEL_67;
    }
  }
  else
  {
    unsigned int v25 = *(_DWORD *)(a2 + 16);
  }
  if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(a2 + 24)))
  {
    if (v25 >= 0x40) {
      v25 *= 2;
    }
    else {
      unsigned int v25 = 128;
    }
    goto LABEL_78;
  }
  if (v25 - v21 < v25 >> 3)
  {
LABEL_78:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v25);
    unsigned int v25 = *(_DWORD *)(a2 + 16);
    uint64_t v20 = *(void *)(a2 + 8);
  }
  unsigned int v26 = v25 - 1;
  unsigned int v27 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
  int v28 = (llvm::GlobalValue **)(v20 + 8 * v27);
  uint64_t v29 = *v28;
  if (*v28 != (llvm::GlobalValue *)-1)
  {
    uint64_t v30 = 0;
    int v31 = 1;
    while (v29 != v19)
    {
      if (v30) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v29 == (llvm::GlobalValue *)-2;
      }
      if (v32) {
        uint64_t v30 = v28;
      }
      unsigned int v33 = v27 + v31++;
      unsigned int v27 = v33 & v26;
      int v28 = (llvm::GlobalValue **)(v20 + 8 * (v33 & v26));
      uint64_t v29 = *v28;
      if (*v28 == (llvm::GlobalValue *)-1) {
        goto LABEL_60;
      }
    }
LABEL_69:
    uint64_t v18 = "Aliases cannot form a cycle";
    goto LABEL_71;
  }
  uint64_t v30 = 0;
LABEL_60:
  if (v30) {
    int v34 = v30;
  }
  else {
    int v34 = v28;
  }
  if (*v34 == v19) {
    goto LABEL_69;
  }
  if (*v34 == (llvm::GlobalValue *)-2) {
    --*(_DWORD *)(a2 + 24);
  }
  else {
    ++*(_DWORD *)(a2 + 20);
  }
  uint64_t *v34 = v19;
LABEL_67:
  if (llvm::GlobalValue::isInterposable(v19))
  {
    uint64_t v18 = "Alias cannot point to an interposable alias";
LABEL_71:
    uint64_t v35 = v18;
    __int16 v36 = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v35);
    if (*(void *)a1) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, a3);
    }
    return;
  }
  unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
LABEL_2:
  if (v8 == 5) {
    sub_1CC6450AC((uint64_t)a1, (llvm::Value *)a4);
  }
  int v9 = *(_DWORD *)(a4 + 20);
  if ((v9 & 0x40000000) == 0)
  {
    uint64_t v10 = v9 & 0x7FFFFFF;
    uint64_t v11 = (uint64_t *)(a4 - 32 * v10);
    if (!v10) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v11 = *(uint64_t **)(a4 - 8);
  uint64_t v10 = v9 & 0x7FFFFFF;
  if (v10)
  {
LABEL_13:
    for (uint64_t i = 32 * v10; i; i -= 32)
    {
      uint64_t v14 = *v11;
      unsigned int v15 = *(unsigned __int8 *)(*v11 + 16);
      if (*v11) {
        BOOL v16 = v15 == 1;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        uint64_t v14 = *(void *)(v14 - 32);
      }
      else
      {
        if (v14) {
          BOOL v17 = v15 > 0x14;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17) {
          goto LABEL_26;
        }
      }
      sub_1CC64E0A8(a1, a2, a3, v14);
LABEL_26:
      v11 += 4;
    }
  }
}

uint64_t sub_1CC64E380(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC64E414(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5DD168(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC64E4E0()
{
}

void sub_1CC64E5B4(llvm::Pass *this)
{
  *(void *)this = &unk_1F2618100;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CC634578(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10F2C406720EBC5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC64E628(llvm::Pass *this)
{
  *(void *)this = &unk_1F2618100;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CC634578(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10F2C406720EBC5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC64E6B0(llvm *a1)
{
}

uint64_t sub_1CC64E738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 24;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4 != a2 + 24)
  {
    int v5 = 0;
    while (1)
    {
      uint64_t v6 = v4 ? v4 - 56 : 0;
      if (!v4 || *(unsigned char *)(v6 + 16) != 3) {
        break;
      }
      if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_9;
      }
LABEL_13:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        goto LABEL_16;
      }
    }
    if (*(unsigned char *)(v6 + 16) || *(void *)(v6 + 72) != v6 + 72 || (*(unsigned char *)(v6 + 34) & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_9:
    v5 |= !sub_1CC632100(*(void *)(a1 + 32), (uint64_t ***)v6);
    goto LABEL_13;
  }
  LOBYTE(v5) = 0;
LABEL_16:
  BOOL v7 = sub_1CC6347C0(*(void *)(a1 + 32));
  if (*(unsigned char *)(a1 + 40) && (v5 & 1 | !v7 || *(unsigned char *)(*(void *)(a1 + 32) + 193))) {
    llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const llvm::Twine *)1);
  }
  return 0;
}

void sub_1CC64E818(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC64E824(uint64_t a1, uint64_t ***a2)
{
  BOOL v4 = sub_1CC632100(*(void *)(a1 + 32), a2);
  if (!v4 && *(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs((llvm *)v4);
    BOOL v7 = sub_1CB8E509C(v6, "in function ");
    Name = llvm::Value::getName((llvm::Value *)a2);
    uint64_t v10 = sub_1CD5D5C70(v7, Name, v9);
    sub_1CD4B4374(v10, 10);
    llvm::report_fatal_error((llvm *)"Broken function found, compilation aborted!", (const llvm::Twine *)1);
  }
  return 0;
}

void *sub_1CC64E8AC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  BOOL v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC64E978(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC64E978(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      BOOL result = sub_1CC22052C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CC64EA28(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC64EAF4(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC64EAF4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      BOOL result = sub_1CC22052C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((unsigned char *)v10 + 8) = *(unsigned char *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CC64EBA4()
{
  int v2 = 1;
  char v1 = 0;
  uint64_t v4 = (int *)&v1;
  v3.n128_u64[0] = (unint64_t)"Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating";
  v3.n128_u64[1] = 88;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD8EC8, "verify-noalias-scope-decl-dom", &v2, (unsigned char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD8EC8, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Check that tail calls from swifttailcc functions to swifttailcc functions are marked musttail.";
  v3.n128_u64[1] = 94;
  uint64_t v4 = &v2;
  sub_1CD5DD218((char **)&v4, (long long *)&v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCD8F88, &dword_1CB82C000);
}

uint64_t llvm::coverage::CounterExpressionBuilder::extractTerms(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = (void *)result;
  while (1)
  {
    unint64_t v8 = HIDWORD(a2);
    if (a2 != 2) {
      break;
    }
    uint64_t v9 = *v7 + 20 * HIDWORD(a2);
    BOOL result = llvm::coverage::CounterExpressionBuilder::extractTerms(v7, *(void *)(v9 + 4), a3, a4);
    a2 = *(void *)(v9 + 12);
    if (*(_DWORD *)v9) {
      a3 = a3;
    }
    else {
      a3 = -(int)a3;
    }
  }
  if (a2 == 1)
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      return sub_1CD42D360(a4, v8, a3);
    }
    else
    {
      uint64_t v11 = (_DWORD *)(*(void *)a4 + 8 * v10);
      *uint64_t v11 = v8;
      v11[1] = a3;
      *(_DWORD *)(a4 + 8) = v10 + 1;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::coverage::CounterMappingContext::dump(llvm::raw_ostream *result, int *a2, llvm::raw_ostream *a3)
{
  uint64_t v5 = result;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v6 = *a2;
  if (*a2 == 2)
  {
    unint64_t v9 = a2[1];
    if (*((void *)result + 1) <= v9) {
      return result;
    }
    uint64_t v10 = *(void *)result;
    uint64_t v11 = (_DWORD *)(*(void *)result + 20 * v9);
    BOOL v12 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v12 >= *((void *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 40);
    }
    else
    {
      *((void *)a3 + 4) = v12 + 1;
      *BOOL v12 = 40;
    }
    llvm::coverage::CounterMappingContext::dump(v5, v10 + 20 * v9 + 4, a3);
    if (*v11) {
      unsigned int v13 = " + ";
    }
    else {
      unsigned int v13 = " - ";
    }
    uint64_t v14 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v14) > 2)
    {
      *(_WORD *)uint64_t v14 = *(_WORD *)v13;
      *(unsigned char *)(v14 + 2) = v13[2];
      *((void *)a3 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a3, v13, 3uLL);
    }
    BOOL result = (llvm::raw_ostream *)llvm::coverage::CounterMappingContext::dump(v5, v10 + 20 * v9 + 12, a3);
    unsigned int v15 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v15 >= *((void *)a3 + 3))
    {
      BOOL result = llvm::raw_ostream::write(a3, 41);
    }
    else
    {
      *((void *)a3 + 4) = v15 + 1;
      unsigned char *v15 = 41;
    }
  }
  else if (v6 == 1)
  {
    unint64_t v8 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v8 >= *((void *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 35);
    }
    else
    {
      *((void *)a3 + 4) = v8 + 1;
      *unint64_t v8 = 35;
    }
    BOOL result = sub_1CD098D14(a3, a2[1], 0, 0, 0);
  }
  else if (!v6)
  {
    int v7 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v7 >= *((void *)a3 + 3))
    {
      return llvm::raw_ostream::write(a3, 48);
    }
    else
    {
      *((void *)a3 + 4) = v7 + 1;
      unsigned char *v7 = 48;
    }
    return result;
  }
  if (!*((void *)v5 + 3)) {
    return result;
  }
  llvm::coverage::CounterMappingContext::evaluate(v5, a2, (uint64_t)&v22);
  char v16 = v23;
  if (v23)
  {
    BOOL v17 = v22;
    uint64_t v22 = 0;
    if (v17)
    {
      uint64_t v21 = v17;
      BOOL result = (llvm::raw_ostream *)sub_1CD4515D0(&v21);
      uint64_t v19 = v21;
      if (!v21) {
        return result;
      }
      return (llvm::raw_ostream *)(*(uint64_t (**)(void *))(*v19 + 8))(v19);
    }
  }
  uint64_t v18 = (unsigned char *)*((void *)a3 + 4);
  if ((unint64_t)v18 >= *((void *)a3 + 3))
  {
    llvm::raw_ostream::write(a3, 91);
  }
  else
  {
    *((void *)a3 + 4) = v18 + 1;
    *uint64_t v18 = 91;
  }
  uint64_t v19 = v22;
  BOOL result = llvm::raw_ostream::operator<<(a3, (unint64_t)v22);
  uint64_t v20 = (unsigned char *)*((void *)a3 + 4);
  if ((unint64_t)v20 >= *((void *)a3 + 3))
  {
    BOOL result = llvm::raw_ostream::write(a3, 93);
  }
  else
  {
    *((void *)a3 + 4) = v20 + 1;
    unsigned char *v20 = 93;
  }
  if ((v16 & 1) != 0 && v19) {
    return (llvm::raw_ostream *)(*(uint64_t (**)(void *))(*v19 + 8))(v19);
  }
  return result;
}

uint64_t llvm::coverage::CounterMappingContext::getMaxCounterID(void *a1, unsigned int *a2)
{
  uint64_t result = *a2;
  if (result)
  {
    if (result == 2)
    {
      unint64_t v4 = a2[1];
      if (a1[1] <= v4)
      {
        return 0;
      }
      else
      {
        uint64_t v5 = *a1 + 20 * v4;
        unsigned int MaxCounterID = llvm::coverage::CounterMappingContext::getMaxCounterID(a1, v5 + 4);
        LODWORD(result) = llvm::coverage::CounterMappingContext::getMaxCounterID(a1, v5 + 12);
        if (MaxCounterID <= result) {
          return result;
        }
        else {
          return MaxCounterID;
        }
      }
    }
    else
    {
      return a2[1];
    }
  }
  return result;
}

double llvm::coverage::FunctionRecordIterator::skipOtherFiles(llvm::coverage::FunctionRecordIterator *this)
{
  uint64_t v2 = *(void *)this + 104 * *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v3 == v2)
  {
LABEL_12:
    *((void *)this + 4) = 0;
    double result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    size_t v4 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = (const void *)*((void *)this + 3);
      while (1)
      {
        uint64_t v6 = *(void *)(v3 + 24);
        char v7 = *(unsigned char *)(v6 + 23);
        int v8 = v7;
        uint64_t v9 = v7 & 0x7F;
        if (v8 < 0) {
          uint64_t v9 = *(void *)(v6 + 8);
        }
        if (v4 == v9)
        {
          uint64_t v10 = v8 >= 0 ? *(const void **)(v3 + 24) : *(const void **)v6;
          if (!memcmp(v5, v10, v4)) {
            break;
          }
        }
        v3 += 104;
        *((void *)this + 2) = v3;
        if (v3 == v2) {
          goto LABEL_12;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::coverage::CoverageMapping::getImpreciseRecordIndicesForFilename(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  uint64_t v5 = *(void *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    unsigned int v7 = (v6 - 1) & (37 * v4);
    int v8 = (uint64_t *)(v5 + 24 * v7);
    uint64_t v9 = *v8;
    if (v4 == *v8) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -1)
    {
      unsigned int v11 = v7 + v10++;
      unsigned int v7 = v11 & (v6 - 1);
      int v8 = (uint64_t *)(v5 + 24 * v7);
      uint64_t v9 = *v8;
      if (v4 == *v8) {
        goto LABEL_8;
      }
    }
  }
  int v8 = (uint64_t *)(v5 + 24 * v6);
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 24 * v6)) {
    return 0;
  }
  else {
    return v8[1];
  }
}

void llvm::coverage::CoverageMapping::loadFunctionRecord(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v275[0] = *MEMORY[0x1E4F143B8];
  size_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    operator new();
  }
  uint64_t v6 = a2;
  if (*(void *)(a2 + 32))
  {
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(char **)v8;
    size_t v10 = *(void *)(v8 + 8);
  }
  else
  {
    uint64_t v9 = "<unknown>";
    size_t v10 = 9;
  }
  __src = llvm::getFuncNameWithoutPrefix(*(char **)a2, v4, v9, v10);
  size_t v12 = v11;
  long long v262 = *(_OWORD *)(v6 + 40);
  int v263 = 0;
  int64_t v264 = 0;
  uint64_t v259 = 0;
  unsigned int v260 = 0;
  uint64_t v261 = 0;
  llvm::IndexedInstrProfReader::getFunctionCounts(a3, *(void *)(v6 + 16), (char **)&v259, &v266);
  uint64_t v242 = v6;
  if (!v266) {
    goto LABEL_7;
  }
  int v258 = v266;
  uint64_t v266 = 0;
  int v151 = sub_1CD5DD9F0(&v258);
  if (v258) {
    (*(void (**)(void *))(*v258 + 8))(v258);
  }
  if (v151 != 13)
  {
    if (v151 != 15) {
      operator new();
    }
    size_t v152 = *(void *)(v6 + 8);
    if (v152 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_292;
    }
    int v153 = *(const void **)v6;
    if (v152 >= 0x17)
    {
      uint64_t v172 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v152 | 7) != 0x17) {
        uint64_t v172 = v152 | 7;
      }
      uint64_t v173 = v172 + 1;
      int64_t v154 = (long long *)operator new(v172 + 1);
      *((void *)&v268 + 1) = v152;
      unint64_t v269 = v173 | 0x8000000000000000;
      *(void *)&long long v268 = v154;
    }
    else
    {
      HIBYTE(v269) = v152;
      int64_t v154 = &v268;
      if (!v152)
      {
LABEL_215:
        *((unsigned char *)v154 + v152) = 0;
        unint64_t v174 = a1[11];
        unint64_t v175 = a1[10];
        if (v175 >= v174)
        {
          uint64_t v178 = a1[9];
          uint64_t v179 = (uint64_t)(v175 - v178) >> 5;
          unint64_t v180 = v179 + 1;
          uint64_t v177 = a4;
          if ((unint64_t)(v179 + 1) >> 59) {
            goto LABEL_292;
          }
          if ((uint64_t)(v174 - v178) >> 4 > v180) {
            unint64_t v180 = (uint64_t)(v174 - v178) >> 4;
          }
          if (v174 - v178 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v181 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v181 = v180;
          }
          *((void *)&v253 + 1) = a1 + 11;
          if (v181 >> 59) {
            goto LABEL_293;
          }
          int v182 = (char *)operator new(32 * v181);
          uint64_t v183 = &v182[32 * v179];
          *(_OWORD *)uint64_t v183 = v268;
          uint64_t v184 = *(void *)(v242 + 16);
          *((void *)v183 + 2) = v269;
          *((void *)v183 + 3) = v184;
          if (v175 == v178)
          {
            int64x2_t v187 = vdupq_n_s64(v175);
            uint64_t v185 = &v182[32 * v179];
          }
          else
          {
            uint64_t v185 = &v182[32 * v179];
            do
            {
              long long v186 = *(_OWORD *)(v175 - 32);
              *((void *)v185 - 2) = *(void *)(v175 - 16);
              *((_OWORD *)v185 - 2) = v186;
              *(void *)(v175 - 24) = 0;
              *(void *)(v175 - 16) = 0;
              *(void *)(v175 - 32) = 0;
              *((void *)v185 - 1) = *(void *)(v175 - 8);
              v185 -= 32;
              v175 -= 32;
            }
            while (v175 != v178);
            int64x2_t v187 = *(int64x2_t *)(a1 + 9);
            unint64_t v174 = a1[11];
          }
          unint64_t v176 = (unint64_t)(v183 + 32);
          a1[9] = v185;
          a1[10] = v183 + 32;
          *(int64x2_t *)&__dst[8] = v187;
          a1[11] = &v182[32 * v181];
          *(void *)&long long v253 = v174;
          *(void *)__dst = v187.i64[0];
          sub_1CD573B00((uint64_t)__dst);
        }
        else
        {
          *(_OWORD *)unint64_t v175 = v268;
          *(void *)(v175 + 16) = v269;
          *(void *)(v175 + 24) = *(void *)(v242 + 16);
          unint64_t v176 = v175 + 32;
          uint64_t v177 = a4;
        }
        a1[10] = v176;
        void *v177 = 0;
        if (v266) {
          (*(void (**)(void *))(*v266 + 8))(v266);
        }
        goto LABEL_201;
      }
    }
    memmove(v154, v153, v152);
    goto LABEL_215;
  }
  uint64_t v167 = *(void *)(v6 + 64);
  if (v167)
  {
    unsigned int v168 = 0;
    BOOL v169 = *(unsigned int **)(v6 + 56);
    uint64_t v170 = 44 * v167;
    do
    {
      unsigned int MaxCounterID = llvm::coverage::CounterMappingContext::getMaxCounterID(&v262, v169);
      if (v168 <= MaxCounterID) {
        unsigned int v168 = MaxCounterID;
      }
      v169 += 11;
      v170 -= 44;
    }
    while (v170);
  }
  else
  {
    unsigned int v168 = 0;
  }
  unint64_t v188 = v168 + 1;
  uint64_t v189 = (uint64_t)v261;
  uint64_t v190 = (char *)v259;
  if (v188 <= (v261 - (unsigned char *)v259) >> 3)
  {
    char v195 = (char *)v260;
    int64_t v196 = (unsigned char *)v260 - (unsigned char *)v259;
    unint64_t v197 = ((unsigned char *)v260 - (unsigned char *)v259) >> 3;
    if (v197 >= v188) {
      int64_t v198 = v188;
    }
    else {
      int64_t v198 = ((unsigned char *)v260 - (unsigned char *)v259) >> 3;
    }
    if (v198) {
      bzero(v259, 8 * v198);
    }
    BOOL v199 = v188 >= v197;
    unint64_t v200 = v188 - v197;
    if (v200 != 0 && v199)
    {
      bzero(v195, 8 * v188 - (v196 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v194 = &v195[8 * v200];
    }
    else
    {
      uint64_t v194 = &v190[8 * v188];
    }
  }
  else
  {
    if (v259)
    {
      unsigned int v260 = v259;
      operator delete(v259);
      uint64_t v189 = 0;
      uint64_t v259 = 0;
      unsigned int v260 = 0;
      uint64_t v261 = 0;
    }
    uint64_t v191 = v189 >> 2;
    if (v189 >> 2 <= v188) {
      uint64_t v191 = v188;
    }
    if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v192 = v191;
    }
    if (v192 >> 61) {
      goto LABEL_292;
    }
    BOOL v193 = (char *)operator new(8 * v192);
    uint64_t v259 = v193;
    uint64_t v261 = &v193[8 * v192];
    bzero(v193, 8 * v188);
    uint64_t v194 = &v193[8 * v188];
  }
  unsigned int v260 = v194;
  if (v266) {
    (*(void (**)(void *))(*v266 + 8))(v266);
  }
LABEL_7:
  int v263 = v259;
  int64_t v264 = ((unsigned char *)v260 - (unsigned char *)v259) >> 3;
  if (*(void *)(v6 + 64) == 1 && !**(_DWORD **)(v6 + 56) && *(void *)v259)
  {
    *a4 = 0;
    goto LABEL_201;
  }
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_292;
  }
  uint64_t v13 = *(void *)(v6 + 24);
  uint64_t v14 = *(void *)(v6 + 32);
  int v237 = a1;
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    unsigned int v15 = operator new(v16 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v17 | 0x8000000000000000;
    *(void *)__dst = v15;
    goto LABEL_16;
  }
  __dst[23] = v12;
  unsigned int v15 = __dst;
  if (v12) {
LABEL_16:
  }
    memmove(v15, __src, v12);
  v15[v12] = 0;
  long long v253 = 0uLL;
  uint64_t v254 = 0;
  if (16 * v14)
  {
    if (16 * v14 < 0) {
      goto LABEL_292;
    }
    uint64_t v18 = (16 * v14) >> 4;
    uint64_t v19 = 3 * v18;
    uint64_t v20 = operator new(24 * v18);
    *(void *)&long long v253 = v20;
    uint64_t v254 = (char *)&v20[v19];
    if (v14)
    {
      uint64_t v21 = v13 + 16 * v14;
      do
      {
        size_t v22 = *(void *)(v13 + 8);
        if (v22 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_292;
        }
        char v23 = *(const void **)v13;
        if (v22 >= 0x17)
        {
          uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v25 = v22 | 7;
          }
          uint64_t v26 = v25 + 1;
          uint64_t v24 = operator new(v25 + 1);
          v20[1] = v22;
          v20[2] = v26 | 0x8000000000000000;
          void *v20 = v24;
        }
        else
        {
          *((unsigned char *)v20 + 23) = v22;
          uint64_t v24 = v20;
          if (!v22) {
            goto LABEL_29;
          }
        }
        memmove(v24, v23, v22);
LABEL_29:
        *((unsigned char *)v24 + v22) = 0;
        v20 += 3;
        v13 += 16;
      }
      while (v13 != v21);
    }
    *((void *)&v253 + 1) = v20;
  }
  uint64_t v257 = 0;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)uint64_t v255 = 0u;
  uint64_t v27 = *(void *)(v6 + 64);
  size_t v236 = v12;
  if (!v27)
  {
LABEL_92:
    uint64_t v70 = *(void ***)(v6 + 24);
    uint64_t v69 = *(void *)(v6 + 32);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v233 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v233 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v233;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    unint64_t v71 = qword_1EBCBE580;
    uint64_t v72 = v237;
    if (v69)
    {
      unint64_t v73 = 0;
      uint64_t v74 = &v70[2 * v69];
      uint64_t v75 = 16 * v69;
      while (1)
      {
        unint64_t v76 = sub_1CD0B03C8(*v70, (uint64_t)v70[1] + (void)*v70);
        if (v73 > 0x38) {
          break;
        }
        unint64_t v77 = v73 + 8;
        *(void *)((char *)&v268 + v73) = v76;
        v70 += 2;
        v73 += 8;
        v75 -= 16;
        if (!v75) {
          goto LABEL_99;
        }
      }
      unint64_t v79 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v71 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v71 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      uint64_t v80 = __ROR8__(v71 ^ 0xB492B66FBE98F273, 49);
      unint64_t v81 = v71 ^ (v71 >> 47);
      unint64_t v82 = v71 ^ (((0x9DDFEA08EB382D69 * (v81 ^ (0xB492B66FBE98F273 * v71))) ^ v71) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                 * (v81 ^ (0xB492B66FBE98F273 * v71)));
      unint64_t v83 = v80 + v71 + *((void *)&v268 + 1);
      unint64_t v84 = v272 + v80 - 0x4B6D499041670D8DLL * __ROR8__(v273 + v71 - 0x4B6D499041670D8DLL * v71, 42);
      uint64_t v85 = v268 - 0x6D8ED9027DD26057 * v71;
      uint64_t v86 = v81 + v85;
      uint64_t v87 = v85 + *((void *)&v268 + 1) + v269;
      uint64_t v88 = __ROR8__(v87, 44) + v85;
      unint64_t v89 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v82) ^ ((0x9DDFEA08EB382D69 * v82) >> 47));
      unint64_t v90 = (0xB492B66FBE98F273 * __ROR8__(v83, 37)) ^ v89;
      uint64_t v91 = v88 + __ROR8__(v90 + v86 + v270, 21);
      uint64_t v92 = __ROR8__(v81 - 0x622015F714C7D297 * (v79 ^ (v79 >> 47)), 33);
      unint64_t v93 = 0xB492B66FBE98F273 * v92;
      uint64_t v94 = v87 + v270;
      uint64_t v95 = v89 + v271 - 0x4B6D499041670D8DLL * v92;
      uint64_t v96 = v272 + v273 + v95;
      uint64_t v97 = __ROR8__(v96, 44) + v95 + __ROR8__(v84 + v269 + v274 + v95, 21);
      uint64_t v98 = v96 + v274;
      unint64_t v99 = 64;
      if (v75)
      {
        unint64_t v100 = v90;
        do
        {
          unint64_t v245 = v100;
          uint64_t v247 = v97;
          uint64_t v249 = v91;
          unint64_t v101 = 0;
          do
          {
            unint64_t v102 = sub_1CD0B03C8(*v70, (uint64_t)v70[1] + (void)*v70);
            if (v101 > 0x38)
            {
              uint64_t v103 = 64;
              goto LABEL_109;
            }
            uint64_t v103 = v101 + 8;
            *(void *)((char *)&v268 + v101) = v102;
            v70 += 2;
            v101 += 8;
          }
          while (v70 != v74);
          if ((v103 & 0x7FFFFFFFFFFFFFB8) != 0) {
            sub_1CBFFD29C(&v268, (unsigned char *)&v268 + v103, v275);
          }
          uint64_t v70 = v74;
LABEL_109:
          unint64_t v104 = v84 + v93 + v94 + *((void *)&v268 + 1);
          unint64_t v84 = v272 + v94 - 0x4B6D499041670D8DLL * __ROR8__(v249 + v84 + v273, 42);
          uint64_t v105 = v268 - 0x4B6D499041670D8DLL * v249;
          uint64_t v106 = v105 + *((void *)&v268 + 1) + v269;
          unint64_t v90 = (0xB492B66FBE98F273 * __ROR8__(v104, 37)) ^ v247;
          uint64_t v91 = __ROR8__(v106, 44) + v105 + __ROR8__(v90 + v98 + v105 + v270, 21);
          unint64_t v93 = 0xB492B66FBE98F273 * __ROR8__(v98 + v245, 33);
          uint64_t v94 = v106 + v270;
          unint64_t v107 = v93 + v247 + v271;
          unint64_t v108 = v272 + v273 + v107;
          uint64_t v97 = __ROR8__(v108, 44) + v107 + __ROR8__(v84 + v269 + v107 + v274, 21);
          uint64_t v98 = v108 + v274;
          v99 += v103;
          unint64_t v100 = v90;
        }
        while (v70 != v74);
      }
      unint64_t v109 = 0x9DDFEA08EB382D69
           * (v98 ^ ((0x9DDFEA08EB382D69 * (v94 ^ v98)) >> 47) ^ (0x9DDFEA08EB382D69 * (v94 ^ v98)));
      uint64_t v110 = v90 - 0x4B6D499041670D8DLL * (v84 ^ (v84 >> 47)) - 0x622015F714C7D297 * (v109 ^ (v109 >> 47));
      unint64_t v111 = 0x9DDFEA08EB382D69
           * (v97 ^ ((0x9DDFEA08EB382D69 * (v91 ^ v97)) >> 47) ^ (0x9DDFEA08EB382D69 * (v91 ^ v97)));
      uint64_t v112 = v93 - 0x4B6D499041670D8DLL * (v99 ^ (v99 >> 47)) - 0x622015F714C7D297 * (v111 ^ (v111 >> 47));
      unint64_t v78 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v112 ^ ((0x9DDFEA08EB382D69 * (v110 ^ v112)) >> 47) ^ (0x9DDFEA08EB382D69 * (v110 ^ v112)))) ^ ((0x9DDFEA08EB382D69 * (v112 ^ ((0x9DDFEA08EB382D69 * (v110 ^ v112)) >> 47) ^ (0x9DDFEA08EB382D69 * (v110 ^ v112)))) >> 47));
      uint64_t v72 = v237;
    }
    else
    {
      unint64_t v77 = 0;
LABEL_99:
      unint64_t v78 = sub_1CBAE06B8(&v268, v77, v71);
    }
    unsigned int v113 = *((_DWORD *)v72 + 4);
    uint64_t v114 = v242;
    size_t v115 = v236;
    if (v113)
    {
      uint64_t v116 = (v113 - 1) & (37 * v78);
      uint64_t v117 = *v72 + 32 * v116;
      unint64_t v118 = *(void *)v117;
      if (v78 == *(void *)v117) {
        goto LABEL_129;
      }
      uint64_t v119 = 0;
      int v120 = 1;
      while (v118 != -1)
      {
        if (v119) {
          BOOL v121 = 0;
        }
        else {
          BOOL v121 = v118 == -2;
        }
        if (v121) {
          uint64_t v119 = v117;
        }
        int v122 = v116 + v120++;
        uint64_t v116 = v122 & (v113 - 1);
        uint64_t v117 = *v72 + 32 * v116;
        unint64_t v118 = *(void *)v117;
        if (v78 == *(void *)v117) {
          goto LABEL_129;
        }
      }
      if (v119) {
        uint64_t v117 = v119;
      }
    }
    else
    {
      uint64_t v117 = 0;
    }
    int v123 = *((_DWORD *)v72 + 2);
    if (4 * v123 + 4 >= 3 * v113)
    {
      sub_1CC658FB4(v72, 2 * v113);
      int v205 = *((_DWORD *)v72 + 4) - 1;
      uint64_t v206 = v205 & (37 * v78);
      uint64_t v117 = *v72 + 32 * v206;
      unint64_t v207 = *(void *)v117;
      if (v78 == *(void *)v117) {
        goto LABEL_289;
      }
      uint64_t v208 = 0;
      int v209 = 1;
      while (v207 != -1)
      {
        if (v208) {
          BOOL v210 = 0;
        }
        else {
          BOOL v210 = v207 == -2;
        }
        if (v210) {
          uint64_t v208 = v117;
        }
        int v211 = v206 + v209++;
        uint64_t v206 = v211 & v205;
        uint64_t v117 = *v72 + 32 * v206;
        unint64_t v207 = *(void *)v117;
        if (v78 == *(void *)v117)
        {
LABEL_302:
          unint64_t v124 = v78;
          uint64_t v72 = v237;
          uint64_t v114 = v242;
          size_t v115 = v236;
          goto LABEL_126;
        }
      }
    }
    else
    {
      if (v113 + ~v123 - *((_DWORD *)v72 + 3) > v113 >> 3)
      {
LABEL_125:
        unint64_t v124 = *(void *)v117;
LABEL_126:
        ++*((_DWORD *)v72 + 2);
        if (v124 != -1) {
          --*((_DWORD *)v72 + 3);
        }
        *(void *)uint64_t v117 = v78;
        *(void *)(v117 + 8) = 0;
        *(void *)(v117 + 16) = 0;
        *(void *)(v117 + 24) = 0;
LABEL_129:
        unint64_t v125 = sub_1CD0B03C8(__src, (uint64_t)&__src[v115]);
        uint64_t v126 = v117 + 8;
        uint64_t v127 = *(void *)(v117 + 8);
        unsigned int v128 = *(_DWORD *)(v117 + 24);
        if (v128)
        {
          unsigned int v129 = (v128 - 1) & (37 * v125);
          uint64_t v130 = (unint64_t *)(v127 + 8 * v129);
          unint64_t v131 = *v130;
          if (v125 == *v130)
          {
LABEL_131:
            *a4 = 0;
            goto LABEL_195;
          }
          uint64_t v201 = 0;
          int v202 = 1;
          while (v131 != -1)
          {
            if (v201) {
              BOOL v203 = 0;
            }
            else {
              BOOL v203 = v131 == -2;
            }
            if (v203) {
              uint64_t v201 = v130;
            }
            unsigned int v204 = v129 + v202++;
            unsigned int v129 = v204 & (v128 - 1);
            uint64_t v130 = (unint64_t *)(v127 + 8 * v129);
            unint64_t v131 = *v130;
            if (v125 == *v130) {
              goto LABEL_131;
            }
          }
          if (v201) {
            int v132 = v201;
          }
          else {
            int v132 = v130;
          }
        }
        else
        {
          int v132 = 0;
        }
        int v133 = *(_DWORD *)(v117 + 16);
        if (4 * v133 + 4 >= 3 * v128)
        {
          sub_1CC659194(v126, 2 * v128);
          uint64_t v212 = *(void *)(v117 + 8);
          int v213 = *(_DWORD *)(v117 + 24) - 1;
          unsigned int v214 = v213 & (37 * v125);
          int v132 = (unint64_t *)(v212 + 8 * v214);
          unint64_t v215 = *v132;
          if (v125 == *v132) {
            goto LABEL_291;
          }
          uint64_t v216 = 0;
          int v217 = 1;
          while (v215 != -1)
          {
            if (v216) {
              BOOL v218 = 0;
            }
            else {
              BOOL v218 = v215 == -2;
            }
            if (v218) {
              uint64_t v216 = v132;
            }
            unsigned int v219 = v214 + v217++;
            unsigned int v214 = v219 & v213;
            int v132 = (unint64_t *)(v212 + 8 * (v219 & v213));
            unint64_t v215 = *v132;
            if (v125 == *v132)
            {
LABEL_314:
              unint64_t v134 = v125;
              uint64_t v72 = v237;
              uint64_t v114 = v242;
              goto LABEL_136;
            }
          }
        }
        else
        {
          if (v128 + ~v133 - *(_DWORD *)(v117 + 20) > v128 >> 3)
          {
LABEL_135:
            unint64_t v134 = *v132;
            goto LABEL_136;
          }
          sub_1CC659194(v126, v128);
          uint64_t v223 = *(void *)(v117 + 8);
          int v224 = *(_DWORD *)(v117 + 24) - 1;
          unsigned int v225 = v224 & (37 * v125);
          int v132 = (unint64_t *)(v223 + 8 * v225);
          unint64_t v226 = *v132;
          if (v125 == *v132)
          {
LABEL_291:
            unint64_t v134 = v125;
LABEL_136:
            ++*(_DWORD *)(v117 + 16);
            if (v134 != -1) {
              --*(_DWORD *)(v117 + 20);
            }
            *int v132 = v125;
            unint64_t v136 = v72[4];
            unint64_t v135 = v72[5];
            if (v136 < v135)
            {
              long long v137 = *(_OWORD *)__dst;
              *(void *)(v136 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v136 = v137;
              memset(__dst, 0, sizeof(__dst));
              *(_OWORD *)(v136 + 24) = v253;
              *(void *)(v136 + 40) = v254;
              long long v253 = 0uLL;
              uint64_t v254 = 0;
              *(_OWORD *)(v136 + 48) = *(_OWORD *)v255;
              *(void **)(v136 + 64) = __p[0];
              v255[0] = 0;
              v255[1] = 0;
              __p[0] = 0;
              *(_OWORD *)(v136 + 72) = *(_OWORD *)&__p[1];
              *(void **)(v136 + 88) = __p[3];
              memset(&__p[1], 0, 24);
              *(void *)(v136 + 96) = v257;
              unint64_t v138 = (char *)(v136 + 104);
LABEL_173:
              v72[4] = v138;
              uint64_t v155 = *(void *)(v114 + 32);
              if (!v155) {
                goto LABEL_194;
              }
              int v156 = -991146299 * ((unint64_t)&v138[-v72[3]] >> 3) - 1;
              uint64_t v157 = *(void *)(v114 + 24);
              uint64_t v158 = v157 + 16 * v155;
              while (1)
              {
                unint64_t v159 = sub_1CD0B03C8(*(void **)v157, *(void *)v157 + *(void *)(v157 + 8));
                *(void *)&long long v268 = 0;
                char v160 = sub_1CC658F1C(v72[6], *((_DWORD *)v72 + 16), v159, &v268);
                uint64_t v161 = v268;
                if ((v160 & 1) == 0) {
                  break;
                }
                uint64_t v163 = (_DWORD *)(v268 + 16);
                unint64_t v162 = *(unsigned int *)(v268 + 16);
                uint64_t v164 = (void *)(v268 + 8);
                if (!v162)
                {
                  unint64_t v162 = 0;
LABEL_185:
                  if (v162 >= *(unsigned int *)(v161 + 20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(_DWORD *)(*v164 + 4 * v162) = v156;
                  ++*v163;
                  goto LABEL_187;
                }
                if (*(_DWORD *)(*v164 + 4 * v162 - 4) != v156) {
                  goto LABEL_185;
                }
LABEL_187:
                v157 += 16;
                if (v157 == v158) {
                  goto LABEL_194;
                }
              }
              int v165 = *((_DWORD *)v72 + 14);
              unsigned int v166 = *((_DWORD *)v72 + 16);
              if (4 * v165 + 4 >= 3 * v166)
              {
                v166 *= 2;
              }
              else if (v166 + ~v165 - *((_DWORD *)v72 + 15) > v166 >> 3)
              {
LABEL_181:
                ++*((_DWORD *)v72 + 14);
                if (*(void *)v161 != -1) {
                  --*((_DWORD *)v72 + 15);
                }
                unint64_t v162 = 0;
                *(void *)uint64_t v161 = v159;
                *(void *)(v161 + 8) = v161 + 24;
                uint64_t v164 = (void *)(v161 + 8);
                *(_DWORD *)(v161 + 16) = 0;
                uint64_t v163 = (_DWORD *)(v161 + 16);
                *(_DWORD *)(v161 + 20) = 0;
                goto LABEL_185;
              }
              sub_1CC6593BC((uint64_t)(v72 + 6), v166);
              *(void *)&long long v268 = 0;
              sub_1CC658F1C(v72[6], *((_DWORD *)v72 + 16), v159, &v268);
              uint64_t v161 = v268;
              goto LABEL_181;
            }
            uint64_t v139 = v72[3];
            unint64_t v140 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v136 - v139) >> 3) + 1;
            if (v140 <= 0x276276276276276)
            {
              unint64_t v141 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v135 - v139) >> 3);
              if (2 * v141 > v140) {
                unint64_t v140 = 2 * v141;
              }
              if (v141 >= 0x13B13B13B13B13BLL) {
                unint64_t v142 = 0x276276276276276;
              }
              else {
                unint64_t v142 = v140;
              }
              if (v142 <= 0x276276276276276)
              {
                uint64_t v143 = 104 * v142;
                uint64_t v144 = (char *)operator new(104 * v142);
                unint64_t v145 = &v144[8 * ((uint64_t)(v136 - v139) >> 3)];
                *(_OWORD *)unint64_t v145 = *(_OWORD *)__dst;
                int v146 = &v144[v143];
                *((void *)v145 + 2) = *(void *)&__dst[16];
                memset(__dst, 0, sizeof(__dst));
                *(_OWORD *)(v145 + 24) = v253;
                *((void *)v145 + 5) = v254;
                uint64_t v254 = 0;
                long long v253 = 0uLL;
                *((void *)v145 + 8) = 0;
                *((_OWORD *)v145 + 3) = *(_OWORD *)v255;
                *((void **)v145 + 8) = __p[0];
                v255[0] = 0;
                v255[1] = 0;
                __p[0] = 0;
                *((void *)v145 + 10) = 0;
                *((void *)v145 + 11) = 0;
                *(_OWORD *)(v145 + 72) = *(_OWORD *)&__p[1];
                memset(&__p[1], 0, 24);
                uint64_t v147 = v257;
                unint64_t v138 = v145 + 104;
                *((void **)v145 + 11) = __p[3];
                *((void *)v145 + 12) = v147;
                if (v136 == v139)
                {
                  v72[3] = v145;
                  v72[4] = v138;
                  v72[5] = v146;
                }
                else
                {
                  do
                  {
                    v136 -= 104;
                    sub_1CC65933C((uint64_t)(v145 - 104), (long long *)v136);
                  }
                  while (v136 != v139);
                  unint64_t v136 = v72[3];
                  uint64_t v148 = v72[4];
                  v72[3] = v145;
                  v72[4] = v138;
                  v72[5] = v146;
                  if (v148 != v136)
                  {
                    uint64_t v114 = v242;
                    do
                    {
                      int v149 = *(void **)(v148 - 32);
                      if (v149)
                      {
                        *(void *)(v148 - 24) = v149;
                        operator delete(v149);
                      }
                      int v150 = *(void **)(v148 - 56);
                      if (v150)
                      {
                        *(void *)(v148 - 48) = v150;
                        operator delete(v150);
                      }
                      *(void *)&long long v268 = v148 - 80;
                      sub_1CB8338B8((void ***)&v268);
                      if (*(char *)(v148 - 81) < 0) {
                        operator delete(*(void **)(v148 - 104));
                      }
                      v148 -= 104;
                    }
                    while (v148 != v136);
                    goto LABEL_171;
                  }
                }
                uint64_t v114 = v242;
LABEL_171:
                if (v136) {
                  operator delete((void *)v136);
                }
                goto LABEL_173;
              }
LABEL_293:
              sub_1CB833614();
            }
LABEL_292:
            abort();
          }
          uint64_t v216 = 0;
          int v230 = 1;
          while (v226 != -1)
          {
            if (v216) {
              BOOL v231 = 0;
            }
            else {
              BOOL v231 = v226 == -2;
            }
            if (v231) {
              uint64_t v216 = v132;
            }
            unsigned int v232 = v225 + v230++;
            unsigned int v225 = v232 & v224;
            int v132 = (unint64_t *)(v223 + 8 * (v232 & v224));
            unint64_t v226 = *v132;
            if (v125 == *v132) {
              goto LABEL_314;
            }
          }
        }
        if (v216) {
          int v132 = v216;
        }
        uint64_t v72 = v237;
        uint64_t v114 = v242;
        goto LABEL_135;
      }
      sub_1CC658FB4(v72, v113);
      int v220 = *((_DWORD *)v72 + 4) - 1;
      uint64_t v221 = v220 & (37 * v78);
      uint64_t v117 = *v72 + 32 * v221;
      unint64_t v222 = *(void *)v117;
      if (v78 == *(void *)v117)
      {
LABEL_289:
        unint64_t v124 = v78;
        goto LABEL_126;
      }
      uint64_t v208 = 0;
      int v227 = 1;
      while (v222 != -1)
      {
        if (v208) {
          BOOL v228 = 0;
        }
        else {
          BOOL v228 = v222 == -2;
        }
        if (v228) {
          uint64_t v208 = v117;
        }
        int v229 = v221 + v227++;
        uint64_t v221 = v229 & v220;
        uint64_t v117 = *v72 + 32 * v221;
        unint64_t v222 = *(void *)v117;
        if (v78 == *(void *)v117) {
          goto LABEL_302;
        }
      }
    }
    if (v208) {
      uint64_t v117 = v208;
    }
    uint64_t v72 = v237;
    uint64_t v114 = v242;
    size_t v115 = v236;
    goto LABEL_125;
  }
  int v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = *(int **)(v6 + 56);
  v246 = &v30[11 * v27];
  while (1)
  {
    llvm::coverage::CounterMappingContext::evaluate(&v262, v30, (uint64_t)&v268);
    char v31 = BYTE8(v268);
    if (BYTE8(v268))
    {
      BOOL v32 = (void *)v268;
      *(void *)&long long v268 = 0;
      if (v32) {
        break;
      }
    }
    llvm::coverage::CounterMappingContext::evaluate(&v262, v30 + 2, (uint64_t)&v266);
    char v33 = v267;
    char v248 = v31;
    if (v267)
    {
      if (v266)
      {
        unsigned int v250 = v266;
        sub_1CD4515D0(&v250);
        if (v250) {
          (*(void (**)(void *))(*v250 + 8))(v250);
        }
        char v68 = 0;
        *a4 = 0;
        if ((v31 & 1) == 0) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
      int v34 = 0;
    }
    else
    {
      int v34 = v266;
    }
    int v35 = *v30;
    int v36 = v30[1];
    int v37 = v30[2];
    v265[0] = *(_OWORD *)(v30 + 3);
    *(_OWORD *)((char *)v265 + 12) = *(_OWORD *)(v30 + 6);
    int v38 = v30[10];
    uint64_t v39 = v268;
    if (v38 == 4)
    {
      uint64_t v40 = (char *)__p[2];
      if (__p[2] >= __p[3])
      {
        uint64_t v44 = (char *)__p[1];
        unint64_t v45 = 0x8E38E38E38E38E39 * (((char *)__p[2] - (char *)__p[1]) >> 3);
        unint64_t v46 = v45 + 1;
        if (v45 + 1 > 0x38E38E38E38E38ELL) {
          goto LABEL_292;
        }
        int v239 = v37;
        char v243 = v267;
        if (0x1C71C71C71C71C72 * (((char *)__p[3] - (char *)__p[1]) >> 3) > v46) {
          unint64_t v46 = 0x1C71C71C71C71C72 * (((char *)__p[3] - (char *)__p[1]) >> 3);
        }
        if (0x8E38E38E38E38E39 * (((char *)__p[3] - (char *)__p[1]) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v47 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47 > 0x38E38E38E38E38ELL) {
          goto LABEL_293;
        }
        int v48 = v35;
        uint64_t v234 = 9 * v47;
        uint64_t v49 = (char *)operator new(72 * v47);
        uint64_t v50 = &v49[72 * v45];
        int v35 = v48;
        *(_DWORD *)uint64_t v50 = v48;
        *((_DWORD *)v50 + 1) = v36;
        int v37 = v239;
        *((_DWORD *)v50 + 2) = v239;
        *(_OWORD *)(v50 + 12) = v265[0];
        *(_OWORD *)(v50 + 24) = *(_OWORD *)((char *)v265 + 12);
        *((_DWORD *)v50 + 10) = 4;
        *((void *)v50 + 6) = v39;
        *((void *)v50 + 7) = v34;
        v50[64] = 0;
        if (v40 == v44)
        {
          uint64_t v55 = &v49[72 * v45];
          char v42 = v248;
        }
        else
        {
          uint64_t v51 = &v49[72 * v45];
          char v42 = v248;
          do
          {
            *(_OWORD *)(v51 - 72) = *(_OWORD *)(v40 - 72);
            long long v52 = *(_OWORD *)(v40 - 56);
            long long v53 = *(_OWORD *)(v40 - 40);
            long long v54 = *(_OWORD *)(v40 - 24);
            uint64_t v55 = v51 - 72;
            *(v51 - 8) = *(v40 - 8);
            *(_OWORD *)(v51 - 24) = v54;
            *(_OWORD *)(v51 - 40) = v53;
            *(_OWORD *)(v51 - 56) = v52;
            v40 -= 72;
            v51 -= 72;
          }
          while (v40 != v44);
        }
        BOOL v41 = v50 + 72;
        __p[1] = v55;
        __p[3] = &v49[8 * v234];
        if (v44)
        {
          operator delete(v44);
          int v35 = v48;
          int v37 = v239;
        }
        uint64_t v6 = v242;
        char v33 = v243;
      }
      else
      {
        *(_DWORD *)__p[2] = v35;
        *((_DWORD *)v40 + 1) = v36;
        *((_DWORD *)v40 + 2) = v37;
        *(_OWORD *)(v40 + 12) = v265[0];
        *(_OWORD *)(v40 + 24) = *(_OWORD *)((char *)v265 + 12);
        *((_DWORD *)v40 + 10) = 4;
        *((void *)v40 + 6) = v39;
        *((void *)v40 + 7) = v34;
        BOOL v41 = v40 + 72;
        v40[64] = 0;
        uint64_t v6 = v242;
        char v42 = v248;
      }
      __p[2] = v41;
      if (!(v35 | v37)) {
        *(v41 - 8) = 1;
      }
    }
    else
    {
      if (v29 == v28) {
        uint64_t v257 = v268;
      }
      if (v28 >= __p[0])
      {
        int v240 = v34;
        unint64_t v56 = 0x8E38E38E38E38E39 * ((v28 - v29) >> 3) + 1;
        if (v56 > 0x38E38E38E38E38ELL) {
          goto LABEL_292;
        }
        char v244 = v267;
        if (0x1C71C71C71C71C72 * (((char *)__p[0] - (char *)v29) >> 3) > v56) {
          unint64_t v56 = 0x1C71C71C71C71C72 * (((char *)__p[0] - (char *)v29) >> 3);
        }
        if (0x8E38E38E38E38E39 * (((char *)__p[0] - (char *)v29) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v57 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57 > 0x38E38E38E38E38ELL) {
          goto LABEL_293;
        }
        uint64_t v58 = v268;
        int v59 = v35;
        int v60 = v37;
        uint64_t v235 = 9 * v57;
        uint64_t v61 = (char *)operator new(72 * v57);
        uint64_t v62 = &v61[8 * ((v28 - v29) >> 3)];
        *(_DWORD *)uint64_t v62 = v59;
        *((_DWORD *)v62 + 1) = v36;
        *((_DWORD *)v62 + 2) = v60;
        *(_OWORD *)(v62 + 12) = v265[0];
        *(_OWORD *)(v62 + 24) = *(_OWORD *)((char *)v265 + 12);
        *((_DWORD *)v62 + 10) = v38;
        int v34 = v240;
        *((void *)v62 + 6) = v58;
        *((void *)v62 + 7) = v240;
        v62[64] = 0;
        if (v29 == v28)
        {
          uint64_t v67 = &v61[8 * ((v28 - v29) >> 3)];
          uint64_t v6 = v242;
          char v42 = v248;
        }
        else
        {
          uint64_t v63 = &v61[8 * ((v28 - v29) >> 3)];
          uint64_t v6 = v242;
          char v42 = v248;
          do
          {
            *(_OWORD *)(v63 - 72) = *(_OWORD *)(v28 - 72);
            long long v64 = *(_OWORD *)(v28 - 56);
            long long v65 = *(_OWORD *)(v28 - 40);
            long long v66 = *(_OWORD *)(v28 - 24);
            uint64_t v67 = v63 - 72;
            *(v63 - 8) = *(v28 - 8);
            *(_OWORD *)(v63 - 24) = v66;
            *(_OWORD *)(v63 - 40) = v65;
            *(_OWORD *)(v63 - 56) = v64;
            v28 -= 72;
            v63 -= 72;
          }
          while (v28 != v29);
        }
        int v28 = v62 + 72;
        v255[0] = v67;
        v255[1] = v62 + 72;
        __p[0] = &v61[8 * v235];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v67;
        char v33 = v244;
      }
      else
      {
        *(_DWORD *)int v28 = v35;
        *((_DWORD *)v28 + 1) = v36;
        *((_DWORD *)v28 + 2) = v37;
        long long v43 = v265[0];
        *(_OWORD *)(v28 + 24) = *(_OWORD *)((char *)v265 + 12);
        *(_OWORD *)(v28 + 12) = v43;
        *((_DWORD *)v28 + 10) = v38;
        *((void *)v28 + 6) = v39;
        *((void *)v28 + 7) = v34;
        v28[64] = 0;
        v28 += 72;
        uint64_t v6 = v242;
        char v42 = v248;
      }
      v255[1] = v28;
    }
    char v68 = 1;
    if ((v33 & 1) != 0 && v34) {
      (*(void (**)(void *))(*v34 + 8))(v34);
    }
    if ((v42 & 1) == 0) {
      goto LABEL_85;
    }
LABEL_83:
    if ((void)v268) {
      (*(void (**)(void))(*(void *)v268 + 8))(v268);
    }
LABEL_85:
    if ((v68 & 1) == 0) {
      goto LABEL_195;
    }
    v30 += 11;
    if (v30 == v246) {
      goto LABEL_92;
    }
  }
  unsigned int v251 = v32;
  sub_1CD4515D0(&v251);
  if (v251) {
    (*(void (**)(void *))(*v251 + 8))(v251);
  }
LABEL_194:
  *a4 = 0;
LABEL_195:
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  if (v255[0])
  {
    v255[1] = v255[0];
    operator delete(v255[0]);
  }
  *(void *)&long long v268 = &v253;
  sub_1CB8338B8((void ***)&v268);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
LABEL_201:
  if (v259)
  {
    unsigned int v260 = v259;
    operator delete(v259);
  }
}

void llvm::coverage::CoverageMapping::loadFromReaders(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = &a1[a2];
    long long v10 = 0uLL;
    do
    {
      uint64_t v11 = *v8;
      v12[0] = 0;
      v12[1] = 0;
      long long v13 = v10;
      long long v14 = v10;
      long long v15 = v10;
      int v16 = 0;
      while (1)
      {
        llvm::coverage::CoverageMappingIterator::increment((char *)&v11);
        if (!v11) {
          break;
        }
        if (v16) {
          operator new();
        }
        *a5 = 0;
        llvm::coverage::CoverageMapping::loadFunctionRecord(a4, (uint64_t)v12, a3, a5);
        if (*a5) {
          return;
        }
      }
      ++v8;
      long long v10 = 0uLL;
    }
    while (v8 != v9);
  }
  *a5 = 0;
}

void llvm::coverage::CoverageMapping::load()
{
}

uint64_t llvm::coverage::CoverageMapping::load@<X0>(llvm::Twine *a1@<X4>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  __int16 v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  __int16 v10 = 257;
  llvm::IndexedInstrProfReader::create((llvm::IndexedInstrProfReader *)v11, a1, (llvm::vfs::FileSystem *)&v9, (uint64_t)&v13);
  uint64_t v7 = v13;
  if ((v14 & 1) == 0 || (uint64_t v13 = 0, !v7))
  {
    uint64_t v13 = 0;
    operator new();
  }
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v7;
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (v14)
  {
    if (!result) {
      return result;
    }
  }
  else if (!result)
  {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

const void **llvm::coverage::CoverageMapping::getUniqueSourceFiles@<X0>(llvm::coverage::CoverageMapping *this@<X0>, long long **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 4) - v3) >> 3);
  *(void *)&long long v55 = v3;
  *((void *)&v55 + 1) = v4;
  *(void *)&long long v56 = v3;
  *((void *)&v56 + 1) = "";
  uint64_t v57 = 0;
  llvm::coverage::FunctionRecordIterator::skipOtherFiles((llvm::coverage::FunctionRecordIterator *)&v55);
  uint64_t v54 = v57;
  long long v52 = v55;
  long long v53 = v56;
  uint64_t v5 = v56;
  if (!(void)v56)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if (!v57) {
      goto LABEL_57;
    }
  }
  uint64_t v8 = 0;
  do
  {
    __int16 v10 = *(uint64_t **)(v5 + 24);
    uint64_t v9 = *(uint64_t **)(v5 + 32);
    if ((char *)v9 - (char *)v10 >= 1)
    {
      uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v9 - v10);
      __int16 v12 = *a2;
      uint64_t v13 = v8 - (char *)*a2;
      char v14 = (char *)*a2 + (v13 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v15 = a2[2];
      if (v11 <= ((char *)v15 - v8) >> 4)
      {
        uint64_t v20 = (v8 - v14) >> 4;
        if (v20 >= v11)
        {
          uint64_t v21 = &v10[v9 - v10];
          size_t v22 = (long long *)v8;
        }
        else
        {
          uint64_t v21 = &v10[3 * v20];
          size_t v22 = (long long *)v8;
          if (v21 != v9)
          {
            char v23 = v21;
            uint64_t v24 = v8;
            do
            {
              if (*((char *)v23 + 23) >= 0) {
                uint64_t v25 = v23;
              }
              else {
                uint64_t v25 = (uint64_t *)*v23;
              }
              *(void *)uint64_t v24 = v25;
              char v26 = *((unsigned char *)v23 + 23);
              int v27 = v26;
              uint64_t v28 = v26 & 0x7F;
              if (v27 < 0) {
                uint64_t v28 = v23[1];
              }
              *((void *)v24 + 1) = v28;
              v23 += 3;
              ++v22;
              v24 += 16;
            }
            while (v23 != v9);
          }
          a2[1] = v22;
          if (v8 - v14 < 1)
          {
            uint64_t v8 = (char *)v22;
            goto LABEL_54;
          }
        }
        uint64_t v29 = (char *)&v22[0x555555555555555 * (v9 - v10)];
        uint64_t v30 = v22;
        while (v29 < v8)
        {
          long long v31 = *(_OWORD *)v29;
          v29 += 16;
          *v30++ = v31;
        }
        BOOL v32 = &v14[16 * v11];
        a2[1] = v30;
        if (v22 != (long long *)v32) {
          memmove(&v22[-(((char *)v22 - v32) >> 4)], v14, (char *)v22 - v32);
        }
        for (; v10 != v21; v10 += 3)
        {
          char v33 = *((unsigned char *)v10 + 23);
          BOOL v34 = v33 < 0;
          int v35 = (uint64_t *)*v10;
          if (v33 >= 0) {
            int v35 = v10;
          }
          uint64_t v36 = v33 & 0x7F;
          if (v34) {
            uint64_t v36 = v10[1];
          }
          *(void *)char v14 = v35;
          *((void *)v14 + 1) = v36;
          v14 += 16;
        }
        uint64_t v8 = (char *)v30;
      }
      else
      {
        uint64_t v16 = v13 >> 4;
        unint64_t v17 = (v13 >> 4) - 0x5555555555555555 * (v9 - v10);
        if (v17 >> 60) {
          abort();
        }
        uint64_t v18 = (char *)v15 - (char *)v12;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        unint64_t v51 = v17;
        if (v17)
        {
          if (v17 >> 60) {
            sub_1CB833614();
          }
          uint64_t v19 = (char *)operator new(16 * v17);
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v37 = &v19[16 * v16];
        int v38 = &v37[16 * v11];
        uint64_t v39 = v37;
        do
        {
          char v40 = *((unsigned char *)v10 + 23);
          BOOL v41 = v40 < 0;
          if (v40 >= 0) {
            char v42 = v10;
          }
          else {
            char v42 = (uint64_t *)*v10;
          }
          *(void *)uint64_t v39 = v42;
          uint64_t v43 = v40 & 0x7F;
          if (v41) {
            uint64_t v43 = v10[1];
          }
          *((void *)v39 + 1) = v43;
          v10 += 3;
          v39 += 16;
        }
        while (v39 != v38);
        if (v12 != (long long *)v8)
        {
          uint64_t v44 = v16;
          do
          {
            *(_OWORD *)&v19[v44 * 16 - 16] = v12[v44 - 1];
            --v44;
          }
          while (v44 * 16);
          int v37 = v19;
        }
        unint64_t v45 = (char *)a2[1];
        int64_t v46 = v45 - v14;
        if (v45 != v14) {
          memmove(v38, v14, v45 - v14);
        }
        unint64_t v47 = *a2;
        uint64_t v8 = &v38[v46];
        *a2 = (long long *)v37;
        a2[1] = (long long *)v8;
        a2[2] = (long long *)&v19[16 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
    }
LABEL_54:
    *(void *)&long long v53 = v5 + 104;
    llvm::coverage::FunctionRecordIterator::skipOtherFiles((llvm::coverage::FunctionRecordIterator *)&v52);
    uint64_t v5 = v53;
  }
  while ((void)v53 || v54);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
LABEL_57:
  unint64_t v48 = 126 - 2 * __clz(v6 - v7);
  if (v6 == v7) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = v48;
  }
  sub_1CD493DB8(v7, v6, (uint64_t)&v55, v49, 1);
  uint64_t result = sub_1CC017A1C((const void **)v7, (const void **)v6);
  if (v6 != (long long *)result) {
    a2[1] = (long long *)result;
  }
  return result;
}

void LLVMCreateCoverageSourceFileRange(llvm::coverage::CoverageMapping *a1)
{
  llvm::coverage::CoverageMapping::getUniqueSourceFiles(a1, (long long **)&v1);
  operator new();
}

uint64_t LLVMDisposeCoverageSourceFileRange(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetNextCoverageSourceFile(unsigned int *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  if (v1 < (*((void *)a1 + 2) - v2) >> 4 && (*a1 = v1 + 1, v2)) {
    return *(void *)(v2 + 16 * v1);
  }
  else {
    return 0;
  }
}

void llvm::coverage::CoverageMapping::getCoverageForFile(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_114:
  }
    abort();
  size_t v5 = a3;
  if (a3 >= 0x17)
  {
    uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v8 = a3 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    unint64_t v10 = v9 | 0x8000000000000000;
    uint64_t v4 = a4;
    a4[1] = v5;
    a4[2] = v10;
    *a4 = v7;
    goto LABEL_8;
  }
  *((unsigned char *)a4 + 23) = a3;
  uint64_t v7 = a4;
  if (a3) {
LABEL_8:
  }
    memmove(v7, a2, v5);
  *((unsigned char *)v7 + v5) = 0;
  *(_OWORD *)(v4 + 3) = 0u;
  v4[11] = 0;
  *(_OWORD *)(v4 + 7) = 0u;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  ImpreciseRecordIndicesForFilename = (unsigned int *)llvm::coverage::CoverageMapping::getImpreciseRecordIndicesForFilename(a1, a2, v5);
  if (v12)
  {
    char v14 = 0;
    uint64_t v15 = 0;
    unint64_t v89 = 0;
    unint64_t v83 = (void **)(v4 + 3);
    unint64_t v84 = &ImpreciseRecordIndicesForFilename[v12];
    uint64_t v86 = a2;
    size_t v87 = v5;
    do
    {
      uint64_t v88 = ImpreciseRecordIndicesForFilename;
      uint64_t v90 = *(void *)(a1 + 24);
      unsigned int v91 = *ImpreciseRecordIndicesForFilename;
      unint64_t v93 = (void *)(v90 + 104 * *ImpreciseRecordIndicesForFilename);
      uint64_t v94 = sub_1CC652080(a2, v5, v93);
      uint64_t v16 = (const void **)v93[3];
      uint64_t v17 = (uint64_t)(v93[4] - (void)v16) >> 3;
      int v18 = -1431655765 * v17;
      if ((-1431655765 * v17) > 0x39) {
        operator new();
      }
      unint64_t v19 = (0xAC00000000000000 * v17) | 1;
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          char v21 = *((unsigned char *)v16 + 23);
          BOOL v22 = v21 < 0;
          if (v21 >= 0) {
            char v23 = v16;
          }
          else {
            char v23 = *v16;
          }
          uint64_t v24 = (const void *)(v21 & 0x7F);
          if (v22) {
            uint64_t v24 = v16[1];
          }
          if ((const void *)v87 == v24 && (!v87 || !memcmp(v86, v23, v87)))
          {
            if (v19) {
              unint64_t v19 = v19 & 0xFC00000000000000 | (2
            }
                                                * (((v19 >> 1) & ~(-1 << (v19 >> 58)) | (1 << i)) & ~(-1 << (v19 >> 58)))) | 1;
            else {
              *(void *)(*(void *)v19 + 8 * (i >> 6)) |= 1 << i;
            }
          }
          v16 += 3;
        }
      }
      uint64_t v25 = v90 + 104 * v91;
      uint64_t v27 = *(void *)(v25 + 48);
      uint64_t v26 = *(void *)(v25 + 56);
      if (v27 == v26)
      {
        uint64_t v29 = v89;
      }
      else
      {
        uint64_t v28 = (v19 >> 1) & ~(-1 << (v19 >> 58));
        uint64_t v29 = v89;
        uint64_t v92 = *(void *)(v25 + 56);
        do
        {
          unint64_t v30 = *(unsigned int *)(v27 + 16);
          if (v19)
          {
            unint64_t v32 = v28;
          }
          else
          {
            uint64_t v31 = (v30 >> 3) & 0x1FFFFFF8;
            LOBYTE(v30) = v30 & 0x3F;
            unint64_t v32 = *(void *)(*(void *)v19 + v31);
          }
          if ((v32 >> v30))
          {
            if (v15 >= v29)
            {
              unint64_t v35 = 0x8E38E38E38E38E39 * ((v15 - v14) >> 3) + 1;
              if (v35 > 0x38E38E38E38E38ELL) {
                goto LABEL_114;
              }
              if (0x1C71C71C71C71C72 * ((v29 - v14) >> 3) > v35) {
                unint64_t v35 = 0x1C71C71C71C71C72 * ((v29 - v14) >> 3);
              }
              unint64_t v36 = 0x8E38E38E38E38E39 * ((v29 - v14) >> 3) >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v35;
              if (v36)
              {
                if (v36 > 0x38E38E38E38E38ELL) {
                  goto LABEL_115;
                }
                int v37 = (char *)operator new(72 * v36);
              }
              else
              {
                int v37 = 0;
              }
              int v38 = &v37[8 * ((v15 - v14) >> 3)];
              *(_OWORD *)int v38 = *(_OWORD *)v27;
              __n128 v13 = *(__n128 *)(v27 + 16);
              long long v39 = *(_OWORD *)(v27 + 32);
              long long v40 = *(_OWORD *)(v27 + 48);
              *((void *)v38 + 8) = *(void *)(v27 + 64);
              *((_OWORD *)v38 + 2) = v39;
              *((_OWORD *)v38 + 3) = v40;
              *((__n128 *)v38 + 1) = v13;
              if (v15 == v14)
              {
                uint64_t v44 = &v37[8 * ((v15 - v14) >> 3)];
                uint64_t v4 = a4;
              }
              else
              {
                BOOL v41 = &v37[8 * ((v15 - v14) >> 3)];
                uint64_t v4 = a4;
                do
                {
                  *(_OWORD *)(v41 - 72) = *(_OWORD *)(v15 - 72);
                  __n128 v13 = *(__n128 *)(v15 - 56);
                  long long v42 = *(_OWORD *)(v15 - 40);
                  long long v43 = *(_OWORD *)(v15 - 24);
                  uint64_t v44 = v41 - 72;
                  *(v41 - 8) = *(v15 - 8);
                  *(_OWORD *)(v41 - 24) = v43;
                  *(_OWORD *)(v41 - 40) = v42;
                  *(__n128 *)(v41 - 56) = v13;
                  v15 -= 72;
                  v41 -= 72;
                }
                while (v15 != v14);
              }
              uint64_t v29 = &v37[72 * v36];
              uint64_t v15 = v38 + 72;
              if (v14) {
                operator delete(v14);
              }
              char v14 = v44;
            }
            else
            {
              *(_OWORD *)uint64_t v15 = *(_OWORD *)v27;
              __n128 v13 = *(__n128 *)(v27 + 16);
              long long v33 = *(_OWORD *)(v27 + 32);
              long long v34 = *(_OWORD *)(v27 + 48);
              *((void *)v15 + 8) = *(void *)(v27 + 64);
              *((_OWORD *)v15 + 2) = v33;
              *((_OWORD *)v15 + 3) = v34;
              *((__n128 *)v15 + 1) = v13;
              v15 += 72;
            }
            if ((v94 & 0xFF00000000) != 0 && *(_DWORD *)(v27 + 40) == 1 && *(_DWORD *)(v27 + 16) == v94)
            {
              uint64_t v45 = v28;
              int64_t v46 = v29;
              unint64_t v48 = (char *)v4[7];
              unint64_t v47 = v4[8];
              if ((unint64_t)v48 >= v47)
              {
                uint64_t v50 = (char *)v4[6];
                unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v50) >> 3) + 1;
                if (v51 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_114;
                }
                unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v50) >> 3);
                if (2 * v52 > v51) {
                  unint64_t v51 = 2 * v52;
                }
                if (v52 >= 0x555555555555555) {
                  unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53 > 0xAAAAAAAAAAAAAAALL) {
LABEL_115:
                }
                  sub_1CB833614();
                uint64_t v54 = 3 * v53;
                long long v55 = (char *)operator new(24 * v53);
                long long v56 = &v55[8 * ((v48 - v50) >> 3)];
                *(_DWORD *)long long v56 = *(_DWORD *)(v27 + 20);
                *((void *)v56 + 1) = v27;
                *((void *)v56 + 2) = v93;
                if (v48 == v50)
                {
                  uint64_t v58 = &v55[8 * ((v48 - v50) >> 3)];
                }
                else
                {
                  uint64_t v57 = &v55[8 * ((v48 - v50) >> 3)];
                  do
                  {
                    uint64_t v58 = v57 - 24;
                    __n128 v13 = *(__n128 *)(v48 - 24);
                    *((void *)v57 - 1) = *((void *)v48 - 1);
                    *(__n128 *)(v57 - 24) = v13;
                    v48 -= 24;
                    v57 -= 24;
                  }
                  while (v48 != v50);
                }
                int v59 = &v55[8 * v54];
                uint64_t v49 = v56 + 24;
                uint64_t v4 = a4;
                a4[6] = v58;
                a4[8] = v59;
                if (v50) {
                  operator delete(v50);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v48 = *(_DWORD *)(v27 + 20);
                *((void *)v48 + 1) = v27;
                *((void *)v48 + 2) = v93;
                uint64_t v49 = v48 + 24;
              }
              uint64_t v29 = v46;
              v4[7] = v49;
              uint64_t v28 = v45;
              uint64_t v26 = v92;
            }
          }
          v27 += 72;
        }
        while (v27 != v26);
      }
      unint64_t v89 = v29;
      uint64_t v60 = v90 + 104 * v91;
      uint64_t v61 = *(__n128 **)(v60 + 72);
      for (j = *(__n128 **)(v60 + 80); v61 != j; uint64_t v61 = (__n128 *)((char *)v61 + 72))
      {
        unint64_t v63 = v61[1].n128_u32[0];
        int v64 = v61[1].n128_i32[0];
        unint64_t v65 = (v19 >> 1) & ~(-1 << (v19 >> 58));
        if ((v19 & 1) == 0)
        {
          LOBYTE(v64) = v63 & 0x3F;
          unint64_t v65 = *(void *)(*(void *)v19 + ((v63 >> 3) & 0x1FFFFFF8));
        }
        if (((v65 >> v64) & 1) != 0 && v63 == v61[1].n128_u32[1])
        {
          uint64_t v67 = (char *)v4[10];
          unint64_t v66 = v4[11];
          if ((unint64_t)v67 >= v66)
          {
            unint64_t v71 = (char *)v4[9];
            unint64_t v72 = 0x8E38E38E38E38E39 * ((v67 - v71) >> 3) + 1;
            if (v72 > 0x38E38E38E38E38ELL) {
              goto LABEL_114;
            }
            unint64_t v73 = 0x8E38E38E38E38E39 * ((uint64_t)(v66 - (void)v71) >> 3);
            if (2 * v73 > v72) {
              unint64_t v72 = 2 * v73;
            }
            if (v73 >= 0x1C71C71C71C71C7) {
              unint64_t v74 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              if (v74 > 0x38E38E38E38E38ELL) {
                goto LABEL_115;
              }
              uint64_t v75 = (char *)operator new(72 * v74);
            }
            else
            {
              uint64_t v75 = 0;
            }
            unint64_t v76 = (__n128 *)&v75[8 * ((v67 - v71) >> 3)];
            __n128 *v76 = *v61;
            __n128 v13 = v61[1];
            __n128 v77 = v61[2];
            __n128 v78 = v61[3];
            v76[4].n128_u64[0] = v61[4].n128_u64[0];
            v76[2] = v77;
            v76[3] = v78;
            v76[1] = v13;
            unint64_t v79 = v76;
            if (v67 == v71)
            {
              uint64_t v4 = a4;
            }
            else
            {
              do
              {
                *(__n128 *)((char *)v79 - 72) = *(__n128 *)(v67 - 72);
                __n128 v13 = *(__n128 *)(v67 - 56);
                __n128 v80 = *(__n128 *)(v67 - 40);
                __n128 v81 = *(__n128 *)(v67 - 24);
                v79[-1].n128_u8[8] = *(v67 - 8);
                *(__n128 *)((char *)v79 - 24) = v81;
                *(__n128 *)((char *)v79 - 40) = v80;
                *(__n128 *)((char *)v79 - 56) = v13;
                unint64_t v79 = (__n128 *)((char *)v79 - 72);
                v67 -= 72;
              }
              while (v67 != v71);
              uint64_t v4 = a4;
              uint64_t v67 = (char *)a4[9];
            }
            uint64_t v70 = &v76[4].n128_i8[8];
            v4[9] = v79;
            v4[11] = &v75[72 * v74];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *(__n128 *)uint64_t v67 = *v61;
            __n128 v13 = v61[1];
            __n128 v68 = v61[2];
            __n128 v69 = v61[3];
            *((void *)v67 + 8) = v61[4].n128_u64[0];
            *((__n128 *)v67 + 2) = v68;
            *((__n128 *)v67 + 3) = v69;
            *((__n128 *)v67 + 1) = v13;
            uint64_t v70 = v67 + 72;
          }
          v4[10] = v70;
        }
      }
      a2 = v86;
      size_t v5 = v87;
      if ((v19 & 1) == 0)
      {
        if (*(void *)v19 != v19 + 16) {
          free(*(void **)v19);
        }
        MEMORY[0x1D25D9CE0](v19, 0x1080C40EF38A13ELL);
      }
      ImpreciseRecordIndicesForFilename = v88 + 1;
    }
    while (v88 + 1 != v84);
    unint64_t v82 = *v83;
  }
  else
  {
    unint64_t v82 = 0;
    uint64_t v15 = 0;
    char v14 = 0;
  }
  sub_1CC652128((uint64_t)&v96, (unint64_t)v14, 0x8E38E38E38E38E39 * ((v15 - v14) >> 3), v13);
  if (v82) {
    operator delete(v82);
  }
  *(_OWORD *)(v4 + 3) = v96;
  v4[5] = v97;
  if (v14) {
    operator delete(v14);
  }
}

uint64_t sub_1CC652080(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1CC652F8C(a3);
  if ((v6 & 0x100000000) != 0
    && ((v7 = v6, uint64_t v8 = a3[3] + 24 * v6, v9 = *(unsigned char *)(v8 + 23), v9 >= 0)
      ? (unint64_t v10 = (const void *)(a3[3] + 24 * v6))
      : (unint64_t v10 = *(const void **)v8),
        v9 >= 0 ? (size_t v11 = v9 & 0x7F) : (size_t v11 = *(void *)(v8 + 8)),
        a2 == v11 && (!v11 || !memcmp(a1, v10, v11))))
  {
    uint64_t v13 = v7 & 0x100000000;
    uint64_t v14 = v7 & 0xFFFFFF00;
    uint64_t v12 = v7;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  return v13 | v12 | v14;
}

void sub_1CC652128(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  v54[8] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v51 = (void **)a1;
  unint64_t v52 = v54;
  a4.n128_u64[0] = 0x800000000;
  uint64_t v53 = 0x800000000;
  unint64_t v6 = a2 + 72 * a3;
  unint64_t v7 = 126 - 2 * __clz(a3);
  if (a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1CC654D0C(a2, v6, v8, 1, a4);
  if (a3)
  {
    char v9 = (_OWORD *)a2;
    if (a3 != 1)
    {
      uint64_t v10 = 0;
      size_t v11 = (_OWORD *)a2;
      do
      {
        uint64_t v12 = a2 + v10;
        BOOL v13 = *((_DWORD *)v11 + 6) == *(_DWORD *)(a2 + v10 + 96) && *((_DWORD *)v11 + 7) == *(_DWORD *)(a2 + v10 + 100);
        if (v13
          && (*((_DWORD *)v11 + 8) == *(_DWORD *)(v12 + 104)
            ? (BOOL v14 = *((_DWORD *)v11 + 9) == *(_DWORD *)(v12 + 108))
            : (BOOL v14 = 0),
              v14))
        {
          if (*(_DWORD *)(a2 + v10 + 112) == *((_DWORD *)v11 + 10)) {
            *((void *)v11 + 6) += *(void *)(a2 + v10 + 120);
          }
          char v9 = v11;
        }
        else
        {
          char v9 = (_OWORD *)((char *)v11 + 72);
          if ((_OWORD *)v12 != v11)
          {
            _OWORD *v9 = *(_OWORD *)(v12 + 72);
            long long v15 = *(_OWORD *)(v12 + 88);
            long long v16 = *(_OWORD *)(v12 + 104);
            long long v17 = *(_OWORD *)(v12 + 120);
            *((unsigned char *)v11 + 136) = *(unsigned char *)(v12 + 136);
            *(_OWORD *)((char *)v11 + 104) = v16;
            *(_OWORD *)((char *)v11 + 120) = v17;
            *(_OWORD *)((char *)v11 + 88) = v15;
          }
        }
        v10 += 72;
        size_t v11 = v9;
      }
      while (72 * a3 - 72 != v10);
    }
    unint64_t v18 = a3 + 0x71C71C71C71C71C7 * ((uint64_t)(v6 - (void)v9 - 72) >> 3);
    if (v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = a2;
      do
      {
        unint64_t v21 = *(void *)(v20 + 24);
        unint64_t v49 = v21;
        uint64_t v50 = (unsigned int *)&v49;
        BOOL v22 = (char *)v52;
        if (v53)
        {
          uint64_t v23 = 8 * v53 - 8;
          uint64_t v24 = (int8x16_t *)v52;
          while (1)
          {
            unsigned int v25 = *(_DWORD *)(v24->i64[0] + 32);
            if (v25 <= v21)
            {
              BOOL v26 = v25 >= v21 && *(_DWORD *)(v24->i64[0] + 36) > HIDWORD(v21);
              if (!v26) {
                break;
              }
            }
            uint64_t v24 = (int8x16_t *)((char *)v24 + 8);
            v23 -= 8;
            if (v24 == (int8x16_t *)((char *)v52 + 8 * v53))
            {
              BOOL v22 = (char *)v52 + 8 * v53;
              goto LABEL_52;
            }
          }
          uint64_t v27 = (unint64_t *)((char *)v52 + 8 * v53 - 8);
          do
          {
            if (!v23)
            {
              BOOL v22 = (char *)v24;
              goto LABEL_52;
            }
            uint64_t v28 = v23;
            uint64_t v29 = v27;
            unsigned int v30 = *(_DWORD *)(*v27 + 32);
            if (v30 > v21) {
              break;
            }
            unsigned int v31 = *(_DWORD *)(*v27 + 36);
            v23 -= 8;
            --v27;
          }
          while (v30 < v21 || v31 <= HIDWORD(v21));
          uint64_t v33 = (v28 >> 3) + 1;
          if (v28 < 17)
          {
LABEL_47:
            unint64_t v36 = 0;
            unint64_t v34 = 0;
          }
          else
          {
            if (v33 >= 0xFFFFFFFFFFFFFFFLL) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = (v28 >> 3) + 1;
            }
            while (1)
            {
              unint64_t v35 = (uint64_t *)operator new(8 * v34, MEMORY[0x1E4FBA2D0]);
              if (v35) {
                break;
              }
              BOOL v26 = v34 > 1;
              v34 >>= 1;
              if (!v26) {
                goto LABEL_47;
              }
            }
            unint64_t v36 = v35;
          }
          BOOL v22 = (char *)sub_1CC65753C(v24, v29, &v50, v33, v36, v34);
          if (v36) {
            operator delete(v36);
          }
        }
LABEL_52:
        if (v22 != (char *)v52 + 8 * v53)
        {
          unint64_t v47 = v49;
          char v48 = 1;
          sub_1CC657138((uint64_t)&v51, (uint64_t)&v47, (unint64_t)(v22 - (unsigned char *)v52) >> 3);
          char v48 = 0;
        }
        int v37 = *(_DWORD *)(v20 + 40);
        ++v19;
        if (v49 == *(void *)(v20 + 32))
        {
          BOOL v39 = v19 == v18 || v37 == 2;
          unint64_t v40 = v20;
          if (v53) {
            unint64_t v40 = *((void *)v52 + v53 - 1);
          }
          sub_1CC657354(v51, *(_DWORD *)(v40 + 40), *(void *)(v40 + 48), v49, v37 != 3, v39);
          if (v39 && v53)
          {
            uint64_t v41 = *((void *)v52 + v53 - 1);
            sub_1CC657354(v51, *(_DWORD *)(v41 + 40), *(void *)(v41 + 48), v49, 0, 0);
          }
        }
        else
        {
          if (v19 == v18
            || ((v42 = a2 + 72 * v19, v44 = *(_DWORD *)(v42 + 24), int v43 = *(_DWORD *)(v42 + 28), v49 == v44)
              ? (BOOL v45 = HIDWORD(v49) == v43)
              : (BOOL v45 = 0),
                !v45))
          {
            sub_1CC657354(v51, v37, *(void *)(v20 + 48), v49, v37 != 3, 0);
          }
          if (v53 >= (unint64_t)HIDWORD(v53)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v52 + v53) = v20;
          LODWORD(v53) = v53 + 1;
        }
        v20 += 72;
      }
      while (v20 != a2 + 72 * v18);
    }
  }
  if (v53)
  {
    v46[0] = 0;
    v46[8] = 0;
    sub_1CC657138((uint64_t)&v51, (uint64_t)v46, 0);
  }
  if (v52 != v54) {
    free(v52);
  }
}

void llvm::coverage::CoverageMapping::getInstantiationGroups(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  size_t v5 = &v65;
  int v64 = &v65;
  uint64_t ImpreciseRecordIndicesForFilename = llvm::coverage::CoverageMapping::getImpreciseRecordIndicesForFilename(a1, a2, a3);
  if (v7)
  {
    uint64_t v8 = (unsigned int *)ImpreciseRecordIndicesForFilename;
    char v9 = (unsigned int *)(ImpreciseRecordIndicesForFilename + 4 * v7);
    do
    {
      unsigned int v10 = *v8;
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = (void *)(v11 + 104 * *v8);
      uint64_t v13 = sub_1CC652080(a2, a3, v12);
      if ((v13 & 0xFF00000000) != 0)
      {
        uint64_t v14 = v11 + 104 * v10;
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = *(void *)(v14 + 56);
        if (v15 != v16)
        {
          while (*(_DWORD *)(v15 + 16) != v13)
          {
            v15 += 72;
            if (v15 == v16)
            {
              uint64_t v15 = v16;
              break;
            }
          }
        }
        long long v17 = *(uint64_t **)(v15 + 24);
        unint64_t v18 = v65;
        uint64_t v19 = &v65;
        unint64_t v20 = &v65;
        if (v65)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v20 = (uint64_t **)v18;
              unsigned int v21 = *((_DWORD *)v18 + 8);
              if (v21 <= v17) {
                break;
              }
LABEL_12:
              unint64_t v18 = *v20;
              uint64_t v19 = v20;
              if (!*v20) {
                goto LABEL_17;
              }
            }
            if (v21 >= v17)
            {
              unsigned int v22 = *((_DWORD *)v20 + 9);
              if (v22 > HIDWORD(v17)) {
                goto LABEL_12;
              }
              if (v22 >= HIDWORD(v17)) {
                goto LABEL_20;
              }
            }
            unint64_t v18 = v20[1];
            if (!v18)
            {
              uint64_t v19 = v20 + 1;
              break;
            }
          }
        }
LABEL_17:
        uint64_t v23 = (uint64_t *)v20;
        unint64_t v20 = (uint64_t **)operator new(0x40uLL);
        v20[4] = v17;
        v20[5] = 0;
        v20[6] = 0;
        v20[7] = 0;
        void *v20 = 0;
        v20[1] = 0;
        v20[2] = v23;
        char *v19 = (uint64_t *)v20;
        uint64_t v24 = (uint64_t *)v20;
        if (*v64)
        {
          int v64 = (uint64_t **)*v64;
          uint64_t v24 = *v19;
        }
        sub_1CB8358B8(v65, v24);
        ++v66;
LABEL_20:
        BOOL v26 = v20[6];
        unsigned int v25 = v20[7];
        if (v26 >= v25)
        {
          uint64_t v28 = v20[5];
          uint64_t v29 = v26 - v28;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
LABEL_69:
          }
            abort();
          uint64_t v31 = (char *)v25 - (char *)v28;
          if (v31 >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            if (v32 >> 61) {
LABEL_70:
            }
              sub_1CB833614();
            uint64_t v33 = (char *)operator new(8 * v32);
          }
          else
          {
            uint64_t v33 = 0;
          }
          unint64_t v34 = (uint64_t *)&v33[8 * v29];
          uint64_t *v34 = (uint64_t)v12;
          uint64_t v27 = v34 + 1;
          if (v26 != v28)
          {
            do
            {
              uint64_t v35 = *--v26;
              *--unint64_t v34 = v35;
            }
            while (v26 != v28);
            BOOL v26 = v20[5];
          }
          v20[5] = v34;
          v20[6] = v27;
          v20[7] = (uint64_t *)&v33[8 * v32];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *BOOL v26 = (uint64_t)v12;
          uint64_t v27 = v26 + 1;
        }
        v20[6] = v27;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  unint64_t v36 = a4;
  int v37 = v64;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v64 != &v65)
  {
    while (1)
    {
      BOOL v39 = v37[6];
      int v38 = v37[7];
      unint64_t v40 = v37[4];
      uint64_t v41 = v37[5];
      v37[6] = 0;
      v37[7] = 0;
      v37[5] = 0;
      int v43 = (uint64_t **)v36[1];
      unint64_t v42 = (unint64_t)v36[2];
      if ((unint64_t)v43 >= v42) {
        break;
      }
      *int v43 = v40;
      v43[1] = v41;
      int v44 = (char *)(v43 + 4);
      v43[2] = v39;
      v43[3] = v38;
LABEL_59:
      v36[1] = v44;
      uint64_t v58 = v37[1];
      if (v58)
      {
        do
        {
          int v59 = (uint64_t **)v58;
          uint64_t v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          int v59 = (uint64_t **)v37[2];
          BOOL v60 = *v59 == (uint64_t *)v37;
          int v37 = v59;
        }
        while (!v60);
      }
      int v37 = v59;
      if (v59 == v5) {
        goto LABEL_68;
      }
    }
    BOOL v45 = (uint64_t **)*v36;
    uint64_t v46 = ((char *)v43 - *v36) >> 5;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 59) {
      goto LABEL_69;
    }
    char v48 = v5;
    uint64_t v49 = v42 - (void)v45;
    if (v49 >> 4 > v47) {
      unint64_t v47 = v49 >> 4;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v47;
    }
    if (v50 >> 59) {
      goto LABEL_70;
    }
    unint64_t v51 = (char *)operator new(32 * v50);
    unint64_t v52 = &v51[32 * v46];
    *(void *)unint64_t v52 = v40;
    *((void *)v52 + 1) = v41;
    uint64_t v53 = &v51[32 * v50];
    *((void *)v52 + 2) = v39;
    *((void *)v52 + 3) = v38;
    int v44 = v52 + 32;
    if (v43 == v45)
    {
      *a4 = v52;
      a4[2] = v53;
      size_t v5 = v48;
      if (!v45) {
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v54 = 0;
      size_t v5 = v48;
      do
      {
        long long v55 = &v52[v54 * 8];
        long long v56 = &v43[v54];
        *((void *)v55 - 4) = v43[v54 - 4];
        *((void *)v55 - 3) = 0;
        *((void *)v55 - 2) = 0;
        *((void *)v55 - 1) = 0;
        *(_OWORD *)(v55 - 24) = *(_OWORD *)&v43[v54 - 3];
        *((void *)v55 - 1) = v43[v54 - 1];
        *(v56 - 3) = 0;
        *(v56 - 2) = 0;
        *(v56 - 1) = 0;
        v54 -= 4;
      }
      while (&v43[v54] != v45);
      *a4 = &v52[v54 * 8];
      a4[1] = v44;
      a4[2] = v53;
      do
      {
        uint64_t v57 = *(v43 - 3);
        if (v57)
        {
          *(v43 - 2) = v57;
          operator delete(v57);
        }
        v43 -= 4;
      }
      while (v43 != v45);
      if (!v45) {
        goto LABEL_58;
      }
    }
    operator delete(v45);
LABEL_58:
    unint64_t v36 = a4;
    goto LABEL_59;
  }
LABEL_68:
  sub_1CC42D5E4(v65);
}

void llvm::coverage::CoverageMapping::getCoverageForFunction(void *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_1CC652F8C(a1);
  if (!HIDWORD(v4))
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  int v5 = v4;
  uint64_t v6 = a1[3] + 24 * v4;
  char v7 = *(unsigned char *)(v6 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const void *)(a1[3] + 24 * v4);
  }
  else {
    uint64_t v8 = *(const void **)v6;
  }
  if (v7 >= 0) {
    size_t v9 = v7 & 0x7F;
  }
  else {
    size_t v9 = *(void *)(v6 + 8);
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_89:
  }
    abort();
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    unsigned int v10 = operator new(v11 + 1);
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v12 | 0x8000000000000000;
    *(void *)a2 = v10;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v9;
    unsigned int v10 = (void *)a2;
    if (!v9) {
      goto LABEL_17;
    }
  }
  memmove(v10, v8, v9);
LABEL_17:
  *((unsigned char *)v10 + v9) = 0;
  __n128 v13 = 0uLL;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v15 = a1[6];
  uint64_t v14 = a1[7];
  unint64_t v65 = a1;
  unint64_t v63 = (void **)(a2 + 24);
  if (v15 == v14)
  {
    long long v17 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    long long v17 = 0;
    unint64_t v18 = 0;
    uint64_t v64 = a1[7];
    do
    {
      if (*(_DWORD *)(v15 + 16) == v5)
      {
        if (v17 >= v18)
        {
          unint64_t v21 = 0x8E38E38E38E38E39 * ((v17 - v16) >> 3) + 1;
          if (v21 > 0x38E38E38E38E38ELL) {
            goto LABEL_89;
          }
          if (0x1C71C71C71C71C72 * ((v18 - v16) >> 3) > v21) {
            unint64_t v21 = 0x1C71C71C71C71C72 * ((v18 - v16) >> 3);
          }
          unint64_t v22 = 0x8E38E38E38E38E39 * ((v18 - v16) >> 3) >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v21;
          if (v22)
          {
            if (v22 > 0x38E38E38E38E38ELL) {
              goto LABEL_90;
            }
            uint64_t v23 = (char *)operator new(72 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v24 = &v23[8 * ((v17 - v16) >> 3)];
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v15;
          __n128 v13 = *(__n128 *)(v15 + 16);
          long long v25 = *(_OWORD *)(v15 + 32);
          long long v26 = *(_OWORD *)(v15 + 48);
          *((void *)v24 + 8) = *(void *)(v15 + 64);
          *((_OWORD *)v24 + 2) = v25;
          *((_OWORD *)v24 + 3) = v26;
          *((__n128 *)v24 + 1) = v13;
          if (v17 == v16)
          {
            unint64_t v30 = &v23[8 * ((v17 - v16) >> 3)];
          }
          else
          {
            uint64_t v27 = &v23[8 * ((v17 - v16) >> 3)];
            do
            {
              *(_OWORD *)(v27 - 72) = *(_OWORD *)(v17 - 72);
              __n128 v13 = *(__n128 *)(v17 - 56);
              long long v28 = *(_OWORD *)(v17 - 40);
              long long v29 = *(_OWORD *)(v17 - 24);
              unint64_t v30 = v27 - 72;
              *(v27 - 8) = *(v17 - 8);
              *(_OWORD *)(v27 - 24) = v29;
              *(_OWORD *)(v27 - 40) = v28;
              *(__n128 *)(v27 - 56) = v13;
              v17 -= 72;
              v27 -= 72;
            }
            while (v17 != v16);
          }
          unint64_t v18 = &v23[72 * v22];
          long long v17 = v24 + 72;
          if (v16) {
            operator delete(v16);
          }
          uint64_t v16 = v30;
        }
        else
        {
          *(_OWORD *)long long v17 = *(_OWORD *)v15;
          __n128 v13 = *(__n128 *)(v15 + 16);
          long long v19 = *(_OWORD *)(v15 + 32);
          long long v20 = *(_OWORD *)(v15 + 48);
          *((void *)v17 + 8) = *(void *)(v15 + 64);
          *((_OWORD *)v17 + 2) = v19;
          *((_OWORD *)v17 + 3) = v20;
          *((__n128 *)v17 + 1) = v13;
          v17 += 72;
        }
        if (*(_DWORD *)(v15 + 40) == 1 && *(_DWORD *)(v15 + 16) == v5)
        {
          unint64_t v32 = *(char **)(a2 + 56);
          unint64_t v31 = *(void *)(a2 + 64);
          if ((unint64_t)v32 >= v31)
          {
            unint64_t v34 = v18;
            uint64_t v35 = *(char **)(a2 + 48);
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v35) >> 3) + 1;
            if (v36 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_89;
            }
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v35) >> 3);
            if (2 * v37 > v36) {
              unint64_t v36 = 2 * v37;
            }
            if (v37 >= 0x555555555555555) {
              unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38 > 0xAAAAAAAAAAAAAAALL) {
LABEL_90:
            }
              sub_1CB833614();
            uint64_t v39 = 3 * v38;
            unint64_t v40 = (char *)operator new(24 * v38);
            uint64_t v41 = &v40[8 * ((v32 - v35) >> 3)];
            *(_DWORD *)uint64_t v41 = *(_DWORD *)(v15 + 20);
            *((void *)v41 + 1) = v15;
            *((void *)v41 + 2) = v65;
            if (v32 == v35)
            {
              int v43 = &v40[8 * ((v32 - v35) >> 3)];
            }
            else
            {
              unint64_t v42 = &v40[8 * ((v32 - v35) >> 3)];
              do
              {
                int v43 = v42 - 24;
                __n128 v13 = *(__n128 *)(v32 - 24);
                *((void *)v42 - 1) = *((void *)v32 - 1);
                *(__n128 *)(v42 - 24) = v13;
                v32 -= 24;
                v42 -= 24;
              }
              while (v32 != v35);
            }
            int v44 = &v40[8 * v39];
            uint64_t v33 = v41 + 24;
            *(void *)(a2 + 48) = v43;
            *(void *)(a2 + 64) = v44;
            if (v35) {
              operator delete(v35);
            }
            uint64_t v14 = v64;
            unint64_t v18 = v34;
          }
          else
          {
            *(_DWORD *)unint64_t v32 = *(_DWORD *)(v15 + 20);
            *((void *)v32 + 1) = v15;
            *((void *)v32 + 2) = v65;
            uint64_t v33 = v32 + 24;
            uint64_t v14 = v64;
          }
          *(void *)(a2 + 56) = v33;
        }
      }
      v15 += 72;
    }
    while (v15 != v14);
  }
  BOOL v45 = (__n128 *)v65[9];
  for (i = (__n128 *)v65[10]; v45 != i; BOOL v45 = (__n128 *)((char *)v45 + 72))
  {
    if (v45[1].n128_u32[0] == v5)
    {
      char v48 = *(char **)(a2 + 80);
      unint64_t v47 = *(void *)(a2 + 88);
      if ((unint64_t)v48 >= v47)
      {
        unint64_t v52 = *(char **)(a2 + 72);
        unint64_t v53 = 0x8E38E38E38E38E39 * ((v48 - v52) >> 3) + 1;
        if (v53 > 0x38E38E38E38E38ELL) {
          goto LABEL_89;
        }
        unint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v47 - (void)v52) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x1C71C71C71C71C7) {
          unint64_t v55 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          if (v55 > 0x38E38E38E38E38ELL) {
            goto LABEL_90;
          }
          long long v56 = (char *)operator new(72 * v55);
        }
        else
        {
          long long v56 = 0;
        }
        uint64_t v57 = (__n128 *)&v56[8 * ((v48 - v52) >> 3)];
        *uint64_t v57 = *v45;
        __n128 v13 = v45[1];
        __n128 v58 = v45[2];
        __n128 v59 = v45[3];
        v57[4].n128_u64[0] = v45[4].n128_u64[0];
        v57[2] = v58;
        v57[3] = v59;
        v57[1] = v13;
        BOOL v60 = v57;
        if (v48 != v52)
        {
          do
          {
            *(__n128 *)((char *)v60 - 72) = *(__n128 *)(v48 - 72);
            __n128 v13 = *(__n128 *)(v48 - 56);
            __n128 v61 = *(__n128 *)(v48 - 40);
            __n128 v62 = *(__n128 *)(v48 - 24);
            v60[-1].n128_u8[8] = *(v48 - 8);
            *(__n128 *)((char *)v60 - 24) = v62;
            *(__n128 *)((char *)v60 - 40) = v61;
            *(__n128 *)((char *)v60 - 56) = v13;
            BOOL v60 = (__n128 *)((char *)v60 - 72);
            v48 -= 72;
          }
          while (v48 != v52);
          char v48 = *(char **)(a2 + 72);
        }
        unint64_t v51 = &v57[4].n128_i8[8];
        *(void *)(a2 + 72) = v60;
        *(void *)(a2 + 88) = &v56[72 * v55];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(__n128 *)char v48 = *v45;
        __n128 v13 = v45[1];
        __n128 v49 = v45[2];
        __n128 v50 = v45[3];
        *((void *)v48 + 8) = v45[4].n128_u64[0];
        *((__n128 *)v48 + 2) = v49;
        *((__n128 *)v48 + 3) = v50;
        *((__n128 *)v48 + 1) = v13;
        unint64_t v51 = v48 + 72;
      }
      *(void *)(a2 + 80) = v51;
    }
  }
  sub_1CC652128((uint64_t)&v66, (unint64_t)v16, 0x8E38E38E38E38E39 * ((v17 - v16) >> 3), v13);
  if (*v63) {
    operator delete(*v63);
  }
  *(_OWORD *)(a2 + 24) = v66;
  *(void *)(a2 + 40) = v67;
  if (v16) {
    operator delete(v16);
  }
}

uint64_t sub_1CC652F8C(void *a1)
{
  uint64_t v1 = (uint64_t)(a1[4] - a1[3]) >> 3;
  if ((-1431655765 * v1) > 0x39) {
    operator new();
  }
  unint64_t v2 = (0xAC00000000000000 * v1) | (2 * ~(-1 << (-85 * v1))) | 1;
  uint64_t v3 = a1[6];
  for (uint64_t i = a1[7]; v3 != i; v3 += 72)
  {
    if (*(_DWORD *)(v3 + 40) == 1)
    {
      unsigned int v5 = *(_DWORD *)(v3 + 20);
      if (v2) {
        unint64_t v2 = ((2 * ~((1 << v5) | (-1 << (v2 >> 58)))) | 0xFC00000000000000) & v2 | 1;
      }
      else {
        *(void *)(*(void *)v2 + 8 * (v5 >> 6)) &= ~(1 << v5);
      }
    }
  }
  if (v2)
  {
    BOOL v18 = (~(-1 << (v2 >> 58)) & (v2 >> 1)) == 0;
    unsigned int v19 = __clz(__rbit64(~(-1 << (v2 >> 58)) & (v2 >> 1)));
    if ((~(-1 << (v2 >> 58)) & (v2 >> 1)) != 0) {
      unsigned int v17 = v19;
    }
    else {
      unsigned int v17 = -1;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(v2 + 64);
    if (v6)
    {
      uint64_t v7 = 0;
      int v8 = -v6;
      int v9 = v6 - 1;
      unsigned int v10 = *(uint64_t **)v2;
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> v8;
      uint64_t v12 = v9 & 0xFFFFFFC0;
      while (1)
      {
        uint64_t v14 = *v10++;
        uint64_t v13 = v14;
        unint64_t v15 = v12 == v7 ? v11 : -1;
        unint64_t v16 = v15 & v13;
        if (v16) {
          break;
        }
        v7 += 64;
        if (v12 + 64 == v7)
        {
          unsigned int v17 = -1;
          goto LABEL_21;
        }
      }
      unsigned int v17 = __clz(__rbit64(v16)) + v7;
LABEL_21:
      BOOL v18 = v17 == -1;
    }
    else
    {
      unsigned int v17 = -1;
      BOOL v18 = 1;
    }
    if (*(void *)v2 != v2 + 16) {
      free(*(void **)v2);
    }
    MEMORY[0x1D25D9CE0](v2, 0x1080C40EF38A13ELL);
  }
  if (v18) {
    return 0;
  }
  else {
    return v17 | 0x100000000;
  }
}

void llvm::coverage::CoverageMapping::getCoverageForExpansion(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)a1 + 2) + 24) + 24 * *a1;
  char v4 = *(unsigned char *)(v3 + 23);
  if (v4 >= 0) {
    unsigned int v5 = (const void *)(*(void *)(*((void *)a1 + 2) + 24) + 24 * *a1);
  }
  else {
    unsigned int v5 = *(const void **)v3;
  }
  if (v4 >= 0) {
    size_t v6 = v4 & 0x7F;
  }
  else {
    size_t v6 = *(void *)(v3 + 8);
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_87:
  }
    abort();
  uint64_t v7 = a1;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v10 | 0x8000000000000000;
    *(void *)a2 = v8;
    goto LABEL_14;
  }
  *(unsigned char *)(a2 + 23) = v6;
  int v8 = (void *)a2;
  if (v6) {
LABEL_14:
  }
    memmove(v8, v5, v6);
  *((unsigned char *)v8 + v6) = 0;
  __n128 v11 = 0uLL;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  __n128 v62 = (void **)(a2 + 24);
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v12 = (void *)*((void *)v7 + 2);
  uint64_t v13 = v12[6];
  uint64_t v14 = v12[7];
  if (v13 == v14)
  {
    unint64_t v16 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    unint64_t v63 = v7;
    do
    {
      if (*(_DWORD *)(v13 + 16) == *v7)
      {
        if (v16 >= v17)
        {
          unint64_t v20 = 0x8E38E38E38E38E39 * ((v16 - v15) >> 3) + 1;
          if (v20 > 0x38E38E38E38E38ELL) {
            goto LABEL_87;
          }
          if (0x1C71C71C71C71C72 * ((v17 - v15) >> 3) > v20) {
            unint64_t v20 = 0x1C71C71C71C71C72 * ((v17 - v15) >> 3);
          }
          unint64_t v21 = 0x8E38E38E38E38E39 * ((v17 - v15) >> 3) >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v20;
          if (v21)
          {
            if (v21 > 0x38E38E38E38E38ELL) {
              goto LABEL_88;
            }
            unint64_t v22 = (char *)operator new(72 * v21);
          }
          else
          {
            unint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * ((v16 - v15) >> 3)];
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v13;
          __n128 v11 = *(__n128 *)(v13 + 16);
          long long v24 = *(_OWORD *)(v13 + 32);
          long long v25 = *(_OWORD *)(v13 + 48);
          *((void *)v23 + 8) = *(void *)(v13 + 64);
          *((_OWORD *)v23 + 2) = v24;
          *((_OWORD *)v23 + 3) = v25;
          *((__n128 *)v23 + 1) = v11;
          if (v16 == v15)
          {
            long long v29 = &v22[8 * ((v16 - v15) >> 3)];
          }
          else
          {
            long long v26 = &v22[8 * ((v16 - v15) >> 3)];
            do
            {
              *(_OWORD *)(v26 - 72) = *(_OWORD *)(v16 - 72);
              __n128 v11 = *(__n128 *)(v16 - 56);
              long long v27 = *(_OWORD *)(v16 - 40);
              long long v28 = *(_OWORD *)(v16 - 24);
              long long v29 = v26 - 72;
              *(v26 - 8) = *(v16 - 8);
              *(_OWORD *)(v26 - 24) = v28;
              *(_OWORD *)(v26 - 40) = v27;
              *(__n128 *)(v26 - 56) = v11;
              v16 -= 72;
              v26 -= 72;
            }
            while (v16 != v15);
          }
          unsigned int v17 = &v22[72 * v21];
          unint64_t v16 = v23 + 72;
          if (v15) {
            operator delete(v15);
          }
          unint64_t v15 = v29;
        }
        else
        {
          *(_OWORD *)unint64_t v16 = *(_OWORD *)v13;
          __n128 v11 = *(__n128 *)(v13 + 16);
          long long v18 = *(_OWORD *)(v13 + 32);
          long long v19 = *(_OWORD *)(v13 + 48);
          *((void *)v16 + 8) = *(void *)(v13 + 64);
          *((_OWORD *)v16 + 2) = v18;
          *((_OWORD *)v16 + 3) = v19;
          *((__n128 *)v16 + 1) = v11;
          v16 += 72;
        }
        if (*(_DWORD *)(v13 + 40) == 1 && *(_DWORD *)(v13 + 16) == *v7)
        {
          uint64_t v30 = *((void *)v7 + 2);
          unint64_t v32 = *(char **)(a2 + 56);
          unint64_t v31 = *(void *)(a2 + 64);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v64 = v17;
            unint64_t v34 = *(char **)(a2 + 48);
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v34) >> 3) + 1;
            if (v35 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_87;
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 3);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x555555555555555) {
              unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37 > 0xAAAAAAAAAAAAAAALL) {
LABEL_88:
            }
              sub_1CB833614();
            uint64_t v38 = v14;
            uint64_t v39 = 3 * v37;
            unint64_t v40 = (char *)operator new(24 * v37);
            uint64_t v41 = &v40[8 * ((v32 - v34) >> 3)];
            *(_DWORD *)uint64_t v41 = *(_DWORD *)(v13 + 20);
            *((void *)v41 + 1) = v13;
            *((void *)v41 + 2) = v30;
            if (v32 == v34)
            {
              int v43 = &v40[8 * ((v32 - v34) >> 3)];
            }
            else
            {
              unint64_t v42 = &v40[8 * ((v32 - v34) >> 3)];
              do
              {
                int v43 = v42 - 24;
                __n128 v11 = *(__n128 *)(v32 - 24);
                *((void *)v42 - 1) = *((void *)v32 - 1);
                *(__n128 *)(v42 - 24) = v11;
                v32 -= 24;
                v42 -= 24;
              }
              while (v32 != v34);
            }
            uint64_t v33 = v41 + 24;
            *(void *)(a2 + 48) = v43;
            *(void *)(a2 + 64) = &v40[8 * v39];
            if (v34) {
              operator delete(v34);
            }
            uint64_t v14 = v38;
            uint64_t v7 = v63;
            unsigned int v17 = v64;
          }
          else
          {
            *(_DWORD *)unint64_t v32 = *(_DWORD *)(v13 + 20);
            *((void *)v32 + 1) = v13;
            *((void *)v32 + 2) = v30;
            uint64_t v33 = v32 + 24;
          }
          *(void *)(a2 + 56) = v33;
        }
      }
      v13 += 72;
    }
    while (v13 != v14);
    uint64_t v12 = (void *)*((void *)v7 + 2);
  }
  int v44 = (__n128 *)v12[9];
  for (i = (__n128 *)v12[10]; v44 != i; int v44 = (__n128 *)((char *)v44 + 72))
  {
    if (v44[1].n128_u32[0] == *v7)
    {
      unint64_t v47 = *(char **)(a2 + 80);
      unint64_t v46 = *(void *)(a2 + 88);
      if ((unint64_t)v47 >= v46)
      {
        unint64_t v51 = *(char **)(a2 + 72);
        unint64_t v52 = 0x8E38E38E38E38E39 * ((v47 - v51) >> 3) + 1;
        if (v52 > 0x38E38E38E38E38ELL) {
          goto LABEL_87;
        }
        unint64_t v53 = 0x8E38E38E38E38E39 * ((uint64_t)(v46 - (void)v51) >> 3);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x1C71C71C71C71C7) {
          unint64_t v54 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          if (v54 > 0x38E38E38E38E38ELL) {
            goto LABEL_88;
          }
          unint64_t v55 = (char *)operator new(72 * v54);
        }
        else
        {
          unint64_t v55 = 0;
        }
        long long v56 = (__n128 *)&v55[8 * ((v47 - v51) >> 3)];
        __n128 *v56 = *v44;
        __n128 v11 = v44[1];
        __n128 v57 = v44[2];
        __n128 v58 = v44[3];
        v56[4].n128_u64[0] = v44[4].n128_u64[0];
        v56[2] = v57;
        v56[3] = v58;
        v56[1] = v11;
        __n128 v59 = v56;
        if (v47 != v51)
        {
          do
          {
            *(__n128 *)((char *)v59 - 72) = *(__n128 *)(v47 - 72);
            __n128 v11 = *(__n128 *)(v47 - 56);
            __n128 v60 = *(__n128 *)(v47 - 40);
            __n128 v61 = *(__n128 *)(v47 - 24);
            v59[-1].n128_u8[8] = *(v47 - 8);
            *(__n128 *)((char *)v59 - 24) = v61;
            *(__n128 *)((char *)v59 - 40) = v60;
            *(__n128 *)((char *)v59 - 56) = v11;
            __n128 v59 = (__n128 *)((char *)v59 - 72);
            v47 -= 72;
          }
          while (v47 != v51);
          unint64_t v47 = *(char **)(a2 + 72);
        }
        __n128 v50 = &v56[4].n128_i8[8];
        *(void *)(a2 + 72) = v59;
        *(void *)(a2 + 88) = &v55[72 * v54];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(__n128 *)unint64_t v47 = *v44;
        __n128 v11 = v44[1];
        __n128 v48 = v44[2];
        __n128 v49 = v44[3];
        *((void *)v47 + 8) = v44[4].n128_u64[0];
        *((__n128 *)v47 + 2) = v48;
        *((__n128 *)v47 + 3) = v49;
        *((__n128 *)v47 + 1) = v11;
        __n128 v50 = v47 + 72;
      }
      *(void *)(a2 + 80) = v50;
    }
  }
  sub_1CC652128((uint64_t)&v65, (unint64_t)v15, 0x8E38E38E38E38E39 * ((v16 - v15) >> 3), v11);
  if (*v62) {
    operator delete(*v62);
  }
  *(_OWORD *)(a2 + 24) = v65;
  *(void *)(a2 + 40) = v66;
  if (v15) {
    operator delete(v15);
  }
}

char *LLVMCreateCoverageMappingForArch(char *a1, const char *a2, char *a3)
{
  v5[1] = *(char **)MEMORY[0x1E4F143B8];
  char v4 = a3;
  v5[0] = a1;
  return LLVMCreateCoverageMappingAggregate(v5, 1, a2, &v4, 0, 0);
}

char *LLVMCreateCoverageMappingAggregateForArch(char **a1, uint64_t a2, const char *a3, char **a4)
{
  return LLVMCreateCoverageMappingAggregate(a1, a2, a3, a4, 0, 0);
}

char *LLVMCreateCoverageMappingAggregate(char **a1, uint64_t a2, const char *a3, char **a4, char **a5, int *a6)
{
  uint64_t v9 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  memset(v29, 0, sizeof(v29));
  memset(__p, 0, sizeof(__p));
  if (a2)
  {
    uint64_t v12 = a4;
    do
    {
      sub_1CC653BA8((char **)v29, *a1);
      if (a4) {
        sub_1CC653BA8((char **)__p, *v12);
      }
      ++v12;
      ++a1;
      --v9;
    }
    while (v9);
  }
  llvm::vfs::getRealFileSystem(&v27);
  if (a3) {
    size_t v13 = strlen(a3);
  }
  else {
    size_t v13 = 0;
  }
  llvm::coverage::CoverageMapping::load((llvm::Twine *)v27, (uint64_t)a3, v13, (uint64_t)&v32, (uint64_t)"", 0);
  if ((v33 & 1) != 0 && (uint64_t v14 = v32, v32 = 0, v14))
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v14 + 48))(v14, &llvm::ErrorList::ID))
    {
      long long v18 = (char **)*((void *)v14 + 1);
      long long v19 = (char **)*((void *)v14 + 2);
      if (v18 == v19)
      {
        BOOL v20 = 0;
        unint64_t v21 = 0;
      }
      else
      {
        unint64_t v21 = 0;
        BOOL v20 = 0;
        do
        {
          unint64_t v31 = v21;
          unint64_t v22 = *v18;
          *long long v18 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(void *)v22 + 48))(v22, &llvm::coverage::CoverageMapError::ID))
          {
            BOOL v20 = *((_DWORD *)v22 + 2) == 2;
          }
          uint64_t v30 = v22;
          sub_1CD451630(&v31, &v30, &v26.__r_.__value_.__l.__data_);
          unint64_t v21 = (char *)v26.__r_.__value_.__r.__words[0];
          v26.__r_.__value_.__r.__words[0] = 0;
          if (v30) {
            (*(void (**)(char *))(*(void *)v30 + 8))(v30);
          }
          if (v31) {
            (*(void (**)(char *))(*(void *)v31 + 8))(v31);
          }
          ++v18;
        }
        while (v18 != v19);
      }
      (*(void (**)(char *))(*(void *)v14 + 8))(v14);
      uint64_t v14 = v21;
    }
    else if ((*(unsigned int (**)(char *, void *))(*(void *)v14 + 48))(v14, &llvm::coverage::CoverageMapError::ID))
    {
      BOOL v20 = *((_DWORD *)v14 + 2) == 2;
    }
    else
    {
      BOOL v20 = 0;
    }
    long long v25 = v14;
    sub_1CD4FB504((uint64_t *)&v25, &v26);
    if (v25) {
      (*(void (**)(char *))(*(void *)v25 + 8))(v25);
    }
    if (a5)
    {
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v26;
      }
      else {
        uint64_t v23 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      *a5 = strdup((const char *)v23);
    }
    if (a6)
    {
      if (v20) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      *a6 = v24;
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    unint64_t v15 = 0;
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    if (a6) {
      *a6 = 0;
    }
    unint64_t v15 = v32;
  }
  unint64_t v16 = v27;
  if (v27 && atomic_fetch_add(v27 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v29[0]) {
    operator delete(v29[0]);
  }
  return v15;
}

void sub_1CC653BA8(char **a1, char *__s)
{
  unsigned int v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[16 * v8];
    *(void *)uint64_t v14 = __s;
    if (__s) {
      size_t v15 = strlen(__s);
    }
    else {
      size_t v15 = 0;
    }
    *((void *)v14 + 1) = v15;
    size_t v13 = v14 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
        v14 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      unsigned int v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v13;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unsigned int v5 = __s;
    if (__s) {
      size_t v6 = strlen(__s);
    }
    else {
      size_t v6 = 0;
    }
    *((void *)v5 + 1) = v6;
    size_t v13 = v5 + 16;
  }
  a1[1] = v13;
}

uint64_t LLVMDisposeCoverageMapping(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = (void **)(result + 72);
    sub_1CC658304(&v2);
    sub_1CC658390((uint64_t *)(v1 + 48));
    unint64_t v2 = (void **)(v1 + 24);
    sub_1CC658408(&v2);
    sub_1CC6584B0(v1);
    MEMORY[0x1D25D9CD0](*(void *)v1, 8);
    return MEMORY[0x1D25D9CE0](v1, 0x1020C40EA482D60);
  }
  return result;
}

void LLVMCreateCoverageFunctionRange()
{
}

void LLVMCreateCoverageFunctionRangeForFile()
{
}

unint64_t LLVMDisposeCoverageFunctionRange(unint64_t result)
{
  if (result >= 8 && (result & 0xFFFFFFFFFFFFFFF8) != 0) {
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetNextCoverageFunction(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (llvm::coverage::FunctionRecordIterator *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 4) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 32) - v5) >> 3);
    v8[0] = v5;
    v8[1] = v6;
    v8[2] = v5;
    v8[3] = "";
    v8[4] = 0;
    llvm::coverage::FunctionRecordIterator::skipOtherFiles((llvm::coverage::FunctionRecordIterator *)v8);
    uint64_t v4 = *((void *)v2 + 2);
    if (v4 || *((void *)v2 + 4))
    {
      *((void *)v2 + 2) = v4 + 104;
      llvm::coverage::FunctionRecordIterator::skipOtherFiles(v2);
      return v4;
    }
    return 0;
  }
  unint64_t v3 = *(unsigned int *)v2;
  if (*((void *)v2 + 2) <= v3) {
    return 0;
  }
  *(_DWORD *)unint64_t v2 = v3 + 1;
  return *(void *)(*((void *)v2 + 1) + 8 * v3);
}

char *LLVMGetCoverageFunctionName(char *result)
{
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t LLVMGetCoverageFunctionExecutionCount(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

void LLVMCreateCoverageDataForFile()
{
}

void LLVMCreateCoverageDataForFunction()
{
}

uint64_t LLVMDisposeCoverageData(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *(void **)(result + 72);
    if (v2)
    {
      *(void *)(v1 + 80) = v2;
      operator delete(v2);
    }
    unint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(void *)(v1 + 56) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(v1 + 24);
    if (v4)
    {
      *(void *)(v1 + 32) = v4;
      operator delete(v4);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void LLVMCreateCoverageIterator()
{
}

uint64_t LLVMDisposeCoverageIterator(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *(void **)(result + 32);
    if (v2 != (void *)(v1 + 48)) {
      free(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetCoverageIteratorIsMapped(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t LLVMGetCoverageIteratorLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t LLVMGetCoverageIteratorExecutionCount(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t LLVMGetCoverageIteratorWrappedSegment(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t LLVMGetCoverageIteratorLineSegments(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 96);
  *a2 = *(void *)(a1 + 104);
  return result;
}

BOOL LLVMAdvanceCoverageIterator(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v13 = *(_OWORD *)a1;
  long long v14 = v2;
  v15[0] = v16;
  v15[1] = (void *)0x400000000;
  if (*(_DWORD *)(a1 + 40)) {
    sub_1CBB10328((uint64_t)v15, a1 + 32);
  }
  long long v3 = *(_OWORD *)(a1 + 96);
  v16[2] = *(_OWORD *)(a1 + 80);
  v16[3] = v3;
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  *(void *)&long long v14 = v5;
  BYTE8(v14) = 1;
  if (v4 == (void)v13 && *(void *)(a1 + 16) == v5 && *(unsigned char *)(a1 + 24))
  {
    BOOL v7 = 0;
  }
  else
  {
    llvm::coverage::LineCoverageIterator::operator++(a1);
    long long v9 = *(_OWORD *)a1;
    v10[0] = v11;
    v10[1] = (void *)0x400000000;
    if (*(_DWORD *)(a1 + 40)) {
      sub_1CBB10328((uint64_t)v10, a1 + 32);
    }
    long long v6 = *(_OWORD *)(a1 + 96);
    v11[2] = *(_OWORD *)(a1 + 80);
    v11[3] = v6;
    uint64_t v12 = *(void *)(a1 + 112);
    BOOL v7 = 1;
    if (*(void *)a1 == (void)v9 && *(void *)(a1 + 16) == *(void *)(*(void *)a1 + 32)) {
      BOOL v7 = *(unsigned char *)(a1 + 24) == 0;
    }
    if (v10[0] != v11) {
      free(v10[0]);
    }
  }
  if (v15[0] != v16) {
    free(v15[0]);
  }
  return v7;
}

uint64_t llvm::coverage::LineCoverageIterator::operator++(uint64_t a1)
{
  long long v2 = *(_DWORD **)(a1 + 16);
  if (v2 == *(_DWORD **)(*(void *)a1 + 32))
  {
    *(void *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    if (v3) {
      *(void *)(a1 + 8) = *(void *)(*(void *)(a1 + 32) + 8 * v3 - 8);
    }
    unsigned int v4 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    while (1)
    {
      int v5 = *(_DWORD *)(a1 + 28);
      if (*v2 != v5) {
        break;
      }
      *(void *)(a1 + 16) = v2 + 6;
      if (v4 >= *(_DWORD *)(a1 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 32) + 8 * v4) = v2;
      unsigned int v4 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v4;
      long long v2 = *(_DWORD **)(a1 + 16);
      if (v2 == *(_DWORD **)(*(void *)a1 + 32))
      {
        int v5 = *(_DWORD *)(a1 + 28);
        break;
      }
    }
    llvm::coverage::LineCoverageStats::LineCoverageStats((uint64_t)v8, *(uint64_t **)(a1 + 32), v4, *(void *)(a1 + 8), v5);
    long long v6 = v8[1];
    *(_OWORD *)(a1 + 80) = v8[0];
    *(_OWORD *)(a1 + 96) = v6;
    *(void *)(a1 + 112) = v9;
    ++*(_DWORD *)(a1 + 28);
  }
  return a1;
}

uint64_t LLVMGetFirstCoverageSegment(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 32)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

uint64_t LLVMGetNextCoverageSegment(uint64_t a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a2 + 24 - *(void *)(a1 + 24)) >> 3) >= 0xAAAAAAAAAAAAAAABLL
                                                                       * ((uint64_t)(*(void *)(a1 + 32)
                                                                                  - *(void *)(a1 + 24)) >> 3))
    return 0;
  else {
    return a2 + 24;
  }
}

uint64_t LLVMGetCoverageSegmentLine(unsigned int *a1)
{
  return *a1;
}

uint64_t LLVMGetCoverageSegmentColumn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t LLVMGetCoverageSegmentCount(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t LLVMGetCoverageSegmentHasCount(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t LLVMGetCoverageSegmentIsRegionEntry(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t LLVMGetCoverageSegmentIsGapRegion(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

void LLVMCreateCoverageInstantiationGroupRangeForFile()
{
}

uint64_t LLVMDisposeCoverageInstantiationGroupRange(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)(result + 8);
    sub_1CC4CDFC0(&v1);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetNextCoverageInstantiationGroup(unsigned int *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  if (v1 >= (*((void *)a1 + 2) - v2) >> 5) {
    return 0;
  }
  *a1 = v1 + 1;
  return v2 + 32 * v1;
}

uint64_t LLVMGetCoverageInstantiationGroupSize(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
}

unsigned __int8 *LLVMGetCoverageInstantiationGroupName(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 ***)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16) - (void)v1;
  uint64_t v3 = *v1;
  unsigned __int8 v4 = (*v1)[23];
  if ((v2 & 0x7FFFFFFF0) != 0)
  {
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = v4 & 0x7F;
    }
    else {
      uint64_t v5 = *((void *)v3 + 1);
    }
    uint64_t v6 = (v2 >> 3);
    uint64_t v7 = 1;
    while (1)
    {
      uint64_t v8 = v1[v7];
      signed __int8 v9 = v8[23];
      uint64_t v10 = v9 & 0x7F;
      uint64_t v11 = v9 >= 0 ? v9 & 0x7F : *((void *)v8 + 1);
      if (v11 != v5) {
        return 0;
      }
      uint64_t v12 = *(unsigned __int8 **)v3;
      if ((v4 & 0x80u) == 0) {
        long long v13 = v3;
      }
      else {
        long long v13 = *(unsigned __int8 **)v3;
      }
      if ((v8[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)v8, v13, *((void *)v8 + 1))) {
          return 0;
        }
      }
      else if ((v9 & 0x7F) != 0)
      {
        while (*v8 == *v13)
        {
          ++v8;
          ++v13;
          if (!--v10) {
            goto LABEL_19;
          }
        }
        return 0;
      }
LABEL_19:
      if (++v7 == v6) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v12 = *(unsigned __int8 **)v3;
LABEL_23:
    if ((v4 & 0x80u) == 0) {
      return v3;
    }
    else {
      return v12;
    }
  }
}

uint64_t LLVMGetCoverageInstantiationGroupLine(unsigned int *a1)
{
  return *a1;
}

uint64_t LLVMGetCoverageInstantiationGroupColumn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t LLVMGetCoverageInstantiationGroupTotalExecutionCount(uint64_t a1)
{
  unint64_t v1 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v4 = *v1++;
    result += *(void *)(v4 + 96);
  }
  while (v1 != v2);
  return result;
}

void LLVMCreateCoverageFunctionRangeForInstantiationGroup()
{
}

uint64_t llvm::coverage::LineCoverageStats::LineCoverageStats(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4, int a5)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 12) = a5;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  if (!a3)
  {
    unsigned int v6 = 0;
LABEL_13:
    *(unsigned char *)(result + 8) = v6 > 1;
    goto LABEL_14;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 1;
  do
  {
    uint64_t v8 = (unsigned char *)a2[v5];
    int v9 = !v8[18] && v8[16] && v8[17] != 0;
    v6 += v9;
    if (a3 <= v7) {
      break;
    }
    uint64_t v5 = v7++;
  }
  while (v6 < 2);
  if (*(unsigned char *)(*a2 + 16)) {
    goto LABEL_13;
  }
  int v10 = *(unsigned __int8 *)(*a2 + 17);
  *(unsigned char *)(result + 8) = v6 > 1;
  if (v10)
  {
    *(unsigned char *)(result + 9) = 0;
    return result;
  }
LABEL_14:
  if (a4)
  {
    if (!*(unsigned char *)(a4 + 16))
    {
      *(unsigned char *)(result + 9) = v6 != 0;
      if (!v6) {
        return result;
      }
      unint64_t v11 = *(void *)(a4 + 8);
      *(void *)uint64_t result = v11;
      if (!a3) {
        return result;
      }
      goto LABEL_21;
    }
    *(unsigned char *)(result + 9) = 1;
    unint64_t v11 = *(void *)(a4 + 8);
    *(void *)uint64_t result = v11;
    if (!v6) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)(result + 9) = v6 != 0;
    if (!v6) {
      return result;
    }
    unint64_t v11 = 0;
  }
  if (!a3) {
    return result;
  }
LABEL_21:
  uint64_t v12 = 8 * a3;
  do
  {
    uint64_t v13 = *a2;
    if (!*(unsigned char *)(*a2 + 18) && *(unsigned char *)(v13 + 16) && *(unsigned char *)(v13 + 17))
    {
      unint64_t v14 = *(void *)(v13 + 8);
      if (v11 <= v14) {
        unint64_t v11 = v14;
      }
      *(void *)uint64_t result = v11;
    }
    ++a2;
    v12 -= 8;
  }
  while (v12);
  return result;
}

double sub_1CC654970(uint64_t a1, int a2, __n128 a3)
{
  switch(a2)
  {
    case 1:
      *(unsigned char *)(a1 + 23) = 11;
      strcpy((char *)a1, "End of File");
      break;
    case 2:
      a3.n128_u64[0] = *(void *)"No coverage data found";
      strcpy((char *)a1, "No coverage data found");
      *(unsigned char *)(a1 + 23) = 22;
      break;
    case 3:
      uint64_t v4 = (char *)operator new(0x28uLL);
      *(void *)a1 = v4;
      *(_OWORD *)(a1 + 8) = xmmword_1CFAC7AC0;
      a3.n128_u64[0] = *(void *)"Unsupported coverage format version";
      strcpy(v4, "Unsupported coverage format version");
      break;
    case 4:
      uint64_t v5 = (char *)operator new(0x19uLL);
      *(void *)a1 = v5;
      long long v6 = xmmword_1CD91A420;
      unsigned int v7 = "Truncated coverage data";
      goto LABEL_8;
    case 5:
      uint64_t v5 = (char *)operator new(0x19uLL);
      *(void *)a1 = v5;
      long long v6 = xmmword_1CD91A420;
      unsigned int v7 = "Malformed coverage data";
LABEL_8:
      *(_OWORD *)(a1 + 8) = v6;
      a3 = *(__n128 *)v7;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v7;
      *(void *)(v5 + 15) = *(void *)(v7 + 15);
      v5[23] = 0;
      break;
    case 6:
      uint64_t v8 = (char *)operator new(0x30uLL);
      *(void *)a1 = v8;
      *(_OWORD *)(a1 + 8) = xmmword_1CFB1B7C0;
      strcpy(v8, "Failed to decompress coverage data (zlib)");
      a3.n128_u64[0] = *(void *)"rage data (zlib)";
      break;
    case 7:
      int v9 = (char *)operator new(0x40uLL);
      *(void *)a1 = v9;
      *(_OWORD *)(a1 + 8) = xmmword_1CFB1B7B0;
      a3.n128_u64[0] = *(void *)"universal binary";
      break;
    default:
      *(unsigned char *)(a1 + 23) = 7;
      strcpy((char *)a1, "Success");
      break;
  }
  return a3.n128_f64[0];
}

uint64_t llvm::coverage::coveragemap_category(llvm::coverage *this)
{
  if (!atomic_load_explicit(&qword_1EA61BF28, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF28, (void *(*)(void))sub_1CC659778, (void (*)(void *))sub_1CC6597C0);
  }
  return qword_1EA61BF28;
}

void *sub_1CC654BAC(void **a1, _DWORD **a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  sub_1CD5DDB9C(&v3, a2, &v4);
  uint64_t result = v3;
  if (v3) {
    return (void *)(*(uint64_t (**)(void *))(*v3 + 8))(v3);
  }
  return result;
}

uint64_t sub_1CC654C0C(void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::coverage::CoverageMapError::ID);
  uint64_t v5 = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (v5[2] != 2) {
      operator new();
    }
    *a1 = 0;
    long long v6 = *(uint64_t (**)(_DWORD *))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    *a1 = v5;
  }
  return result;
}

__n128 sub_1CC654D0C(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
__n128 sub_1CC656414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  unsigned int v3 = *(_DWORD *)(a2 + 28);
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  if (v4 != v5 || v3 != v6)
  {
    if (v4 < v5) {
      goto LABEL_21;
    }
    if (v5 >= v4 && v3 < v6) {
      goto LABEL_21;
    }
LABEL_38:
    unsigned int v27 = *(_DWORD *)(a3 + 24);
    unsigned int v26 = *(_DWORD *)(a3 + 28);
    if (v27 == v4 && v26 == v3)
    {
      unsigned int v42 = *(_DWORD *)(a3 + 32);
      unsigned int v41 = *(_DWORD *)(a3 + 36);
      unsigned int v44 = *(_DWORD *)(a2 + 32);
      unsigned int v43 = *(_DWORD *)(a2 + 36);
      if (v42 == v44 && v41 == v43)
      {
        if (*(_DWORD *)(a3 + 40) >= *(_DWORD *)(a2 + 40)) {
          return result;
        }
      }
      else if (v44 >= v42 && (v42 < v44 || v43 >= v41))
      {
        return result;
      }
    }
    else if (v27 >= v4 && (v4 < v27 || v26 >= v3))
    {
      return result;
    }
    long long v72 = *(_OWORD *)(a2 + 32);
    long long v76 = *(_OWORD *)(a2 + 48);
    uint64_t v80 = *(void *)(a2 + 64);
    __n128 v64 = *(__n128 *)a2;
    long long v68 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v46 = *(_OWORD *)(a3 + 32);
    long long v45 = *(_OWORD *)(a3 + 48);
    long long v47 = *(_OWORD *)(a3 + 16);
    *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
    *(_OWORD *)(a2 + 32) = v46;
    *(_OWORD *)(a2 + 48) = v45;
    *(_OWORD *)(a2 + 16) = v47;
    *(unsigned char *)(a3 + 64) = v80;
    *(_OWORD *)(a3 + 32) = v72;
    *(_OWORD *)(a3 + 48) = v76;
    __n128 result = v64;
    *(__n128 *)a3 = v64;
    *(_OWORD *)(a3 + 16) = v68;
    unsigned int v49 = *(_DWORD *)(a2 + 24);
    unsigned int v48 = *(_DWORD *)(a2 + 28);
    unsigned int v51 = *(_DWORD *)(a1 + 24);
    unsigned int v50 = *(_DWORD *)(a1 + 28);
    if (v49 == v51 && v48 == v50)
    {
      unsigned int v53 = *(_DWORD *)(a2 + 32);
      unsigned int v52 = *(_DWORD *)(a2 + 36);
      unsigned int v55 = *(_DWORD *)(a1 + 32);
      unsigned int v54 = *(_DWORD *)(a1 + 36);
      if (v53 == v55 && v52 == v54)
      {
        if (*(_DWORD *)(a2 + 40) >= *(_DWORD *)(a1 + 40)) {
          return result;
        }
      }
      else if (v55 >= v53 && (v53 < v55 || v54 >= v52))
      {
        return result;
      }
    }
    else if (v49 >= v51 && (v51 < v49 || v48 >= v50))
    {
      return result;
    }
    long long v73 = *(_OWORD *)(a1 + 32);
    long long v77 = *(_OWORD *)(a1 + 48);
    uint64_t v81 = *(void *)(a1 + 64);
    __n128 v65 = *(__n128 *)a1;
    long long v69 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v60 = *(_OWORD *)(a2 + 32);
    long long v59 = *(_OWORD *)(a2 + 48);
    long long v61 = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v60;
    *(_OWORD *)(a1 + 48) = v59;
    *(_OWORD *)(a1 + 16) = v61;
    *(unsigned char *)(a2 + 64) = v81;
    *(_OWORD *)(a2 + 32) = v73;
    *(_OWORD *)(a2 + 48) = v77;
    __n128 result = v65;
    *(__n128 *)a2 = v65;
    *(_OWORD *)(a2 + 16) = v69;
    return result;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  unsigned int v12 = *(_DWORD *)(a1 + 36);
  if (v9 == v11 && v10 == v12)
  {
    if (*(_DWORD *)(a2 + 40) < *(_DWORD *)(a1 + 40)) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
  if (v11 >= v9 && (v9 < v11 || v12 >= v10)) {
    goto LABEL_38;
  }
LABEL_21:
  unsigned int v16 = *(_DWORD *)(a3 + 24);
  unsigned int v15 = *(_DWORD *)(a3 + 28);
  if (v16 != v4 || v15 != v3)
  {
    if (v16 >= v4 && (v4 < v16 || v15 >= v3)) {
      goto LABEL_47;
    }
LABEL_36:
    long long v70 = *(_OWORD *)(a1 + 32);
    long long v74 = *(_OWORD *)(a1 + 48);
    uint64_t v78 = *(void *)(a1 + 64);
    __n128 v62 = *(__n128 *)a1;
    long long v66 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v23 = *(_OWORD *)(a3 + 48);
    long long v25 = *(_OWORD *)(a3 + 16);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a3 + 64);
    *(_OWORD *)(a1 + 32) = v24;
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 16) = v25;
LABEL_78:
    *(unsigned char *)(a3 + 64) = v78;
    *(_OWORD *)(a3 + 32) = v70;
    *(_OWORD *)(a3 + 48) = v74;
    __n128 result = v62;
    *(__n128 *)a3 = v62;
    *(_OWORD *)(a3 + 16) = v66;
    return result;
  }
  unsigned int v19 = *(_DWORD *)(a3 + 32);
  unsigned int v18 = *(_DWORD *)(a3 + 36);
  unsigned int v21 = *(_DWORD *)(a2 + 32);
  unsigned int v20 = *(_DWORD *)(a2 + 36);
  if (v19 == v21 && v18 == v20)
  {
    if (*(_DWORD *)(a3 + 40) >= *(_DWORD *)(a2 + 40)) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  if (v21 < v19 || v19 >= v21 && v20 < v18) {
    goto LABEL_36;
  }
LABEL_47:
  long long v71 = *(_OWORD *)(a1 + 32);
  long long v75 = *(_OWORD *)(a1 + 48);
  uint64_t v79 = *(void *)(a1 + 64);
  __n128 v63 = *(__n128 *)a1;
  long long v67 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v30 = *(_OWORD *)(a2 + 32);
  long long v29 = *(_OWORD *)(a2 + 48);
  long long v31 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v30;
  *(_OWORD *)(a1 + 48) = v29;
  *(_OWORD *)(a1 + 16) = v31;
  *(unsigned char *)(a2 + 64) = v79;
  *(_OWORD *)(a2 + 32) = v71;
  *(_OWORD *)(a2 + 48) = v75;
  __n128 result = v63;
  *(__n128 *)a2 = v63;
  *(_OWORD *)(a2 + 16) = v67;
  unsigned int v34 = *(_DWORD *)(a3 + 24);
  unsigned int v33 = *(_DWORD *)(a3 + 28);
  unsigned int v36 = *(_DWORD *)(a2 + 24);
  unsigned int v35 = *(_DWORD *)(a2 + 28);
  if (v34 == v36 && v33 == v35)
  {
    unsigned int v38 = *(_DWORD *)(a3 + 32);
    unsigned int v37 = *(_DWORD *)(a3 + 36);
    unsigned int v40 = *(_DWORD *)(a2 + 32);
    unsigned int v39 = *(_DWORD *)(a2 + 36);
    if (v38 == v40 && v37 == v39)
    {
      if (*(_DWORD *)(a3 + 40) >= *(_DWORD *)(a2 + 40)) {
        return result;
      }
      goto LABEL_77;
    }
    if (v40 < v38 || v38 >= v40 && v39 < v37)
    {
LABEL_77:
      long long v70 = *(_OWORD *)(a2 + 32);
      long long v74 = *(_OWORD *)(a2 + 48);
      uint64_t v78 = *(void *)(a2 + 64);
      __n128 v62 = *(__n128 *)a2;
      long long v66 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v57 = *(_OWORD *)(a3 + 32);
      long long v56 = *(_OWORD *)(a3 + 48);
      long long v58 = *(_OWORD *)(a3 + 16);
      *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
      *(_OWORD *)(a2 + 32) = v57;
      *(_OWORD *)(a2 + 48) = v56;
      *(_OWORD *)(a2 + 16) = v58;
      goto LABEL_78;
    }
  }
  else if (v34 < v36 || v36 >= v34 && v33 < v35)
  {
    goto LABEL_77;
  }
  return result;
}

BOOL sub_1CC6567CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v7 = *(_DWORD *)(a2 - 48);
      unsigned int v6 = *(_DWORD *)(a2 - 44);
      unsigned int v9 = *(_DWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)(a1 + 28);
      if (v7 != v9 || v6 != v8)
      {
        if (v7 >= v9 && (v9 < v7 || v6 >= v8)) {
          return result;
        }
        goto LABEL_92;
      }
      unsigned int v54 = *(_DWORD *)(a2 - 40);
      unsigned int v53 = *(_DWORD *)(a2 - 36);
      unsigned int v56 = *(_DWORD *)(a1 + 32);
      unsigned int v55 = *(_DWORD *)(a1 + 36);
      if (v54 == v56 && v53 == v55)
      {
        if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(a1 + 40)) {
          return result;
        }
        goto LABEL_92;
      }
      if (v56 < v54 || v54 >= v56 && v55 < v53)
      {
LABEL_92:
        uint64_t v62 = a2 - 72;
        long long v113 = *(_OWORD *)(a1 + 32);
        long long v118 = *(_OWORD *)(a1 + 48);
        uint64_t v123 = *(void *)(a1 + 64);
        long long v103 = *(_OWORD *)a1;
        long long v108 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        long long v64 = *(_OWORD *)(a2 - 40);
        long long v63 = *(_OWORD *)(a2 - 24);
        long long v65 = *(_OWORD *)(a2 - 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 - 8);
        *(_OWORD *)(a1 + 32) = v64;
        *(_OWORD *)(a1 + 48) = v63;
        *(_OWORD *)(a1 + 16) = v65;
        *(unsigned char *)(v62 + 64) = v123;
        *(_OWORD *)(v62 + 32) = v113;
        *(_OWORD *)(v62 + 48) = v118;
        *(_OWORD *)uint64_t v62 = v103;
        *(_OWORD *)(v62 + 16) = v108;
        return result;
      }
      return result;
    case 3uLL:
      sub_1CC656414(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_1CC656EAC(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      long long v45 = (long long *)(a1 + 72);
      long long v46 = (long long *)(a1 + 144);
      long long v47 = (long long *)(a1 + 216);
      sub_1CC656EAC(a1, a1 + 72, a1 + 144, a1 + 216);
      unsigned int v49 = *(_DWORD *)(a2 - 48);
      unsigned int v48 = *(_DWORD *)(a2 - 44);
      unsigned int v51 = *(_DWORD *)(a1 + 240);
      unsigned int v50 = *(_DWORD *)(a1 + 244);
      if (v49 != v51 || v48 != v50)
      {
        if (v49 >= v51)
        {
          BOOL result = 1;
          if (v51 < v49 || v48 >= v50) {
            return result;
          }
        }
LABEL_96:
        uint64_t v66 = a2 - 72;
        long long v114 = *(_OWORD *)(a1 + 248);
        long long v119 = *(_OWORD *)(a1 + 264);
        uint64_t v124 = *(void *)(a1 + 280);
        long long v104 = *v47;
        long long v109 = *(_OWORD *)(a1 + 232);
        *long long v47 = *(_OWORD *)(a2 - 72);
        long long v68 = *(_OWORD *)(a2 - 40);
        long long v67 = *(_OWORD *)(a2 - 24);
        long long v69 = *(_OWORD *)(a2 - 56);
        *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 - 8);
        *(_OWORD *)(a1 + 248) = v68;
        *(_OWORD *)(a1 + 264) = v67;
        *(_OWORD *)(a1 + 232) = v69;
        *(unsigned char *)(v66 + 64) = v124;
        *(_OWORD *)(v66 + 32) = v114;
        *(_OWORD *)(v66 + 48) = v119;
        *(_OWORD *)uint64_t v66 = v104;
        *(_OWORD *)(v66 + 16) = v109;
        unsigned int v71 = *(_DWORD *)(a1 + 240);
        unsigned int v70 = *(_DWORD *)(a1 + 244);
        unsigned int v73 = *(_DWORD *)(a1 + 168);
        unsigned int v72 = *(_DWORD *)(a1 + 172);
        if (v71 == v73 && v70 == v72)
        {
          unsigned int v75 = *(_DWORD *)(a1 + 248);
          unsigned int v74 = *(_DWORD *)(a1 + 252);
          unsigned int v77 = *(_DWORD *)(a1 + 176);
          unsigned int v76 = *(_DWORD *)(a1 + 180);
          if (v75 == v77 && v74 == v76)
          {
            if (*(_DWORD *)(a1 + 256) >= *(_DWORD *)(a1 + 184)) {
              return 1;
            }
          }
          else if (v77 >= v75)
          {
            BOOL result = 1;
            if (v75 < v77 || v76 >= v74) {
              return result;
            }
          }
        }
        else if (v71 >= v73)
        {
          BOOL result = 1;
          if (v73 < v71 || v70 >= v72) {
            return result;
          }
        }
        long long v115 = *(_OWORD *)(a1 + 176);
        long long v120 = *(_OWORD *)(a1 + 192);
        uint64_t v125 = *(void *)(a1 + 208);
        long long v105 = *v46;
        long long v110 = *(_OWORD *)(a1 + 160);
        long long v78 = *(_OWORD *)(a1 + 264);
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 248);
        *(_OWORD *)(a1 + 192) = v78;
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a1 + 280);
        long long v79 = *(_OWORD *)(a1 + 232);
        *long long v46 = *v47;
        *(_OWORD *)(a1 + 160) = v79;
        *(unsigned char *)(a1 + 280) = v125;
        *(_OWORD *)(a1 + 248) = v115;
        *(_OWORD *)(a1 + 264) = v120;
        *long long v47 = v105;
        *(_OWORD *)(a1 + 232) = v110;
        unsigned int v81 = *(_DWORD *)(a1 + 168);
        unsigned int v80 = *(_DWORD *)(a1 + 172);
        unsigned int v83 = *(_DWORD *)(a1 + 96);
        unsigned int v82 = *(_DWORD *)(a1 + 100);
        if (v81 == v83 && v80 == v82)
        {
          unsigned int v85 = *(_DWORD *)(a1 + 176);
          unsigned int v84 = *(_DWORD *)(a1 + 180);
          unsigned int v87 = *(_DWORD *)(a1 + 104);
          unsigned int v86 = *(_DWORD *)(a1 + 108);
          if (v85 == v87 && v84 == v86)
          {
            if (*(_DWORD *)(a1 + 184) >= *(_DWORD *)(a1 + 112)) {
              return 1;
            }
          }
          else if (v87 >= v85)
          {
            BOOL result = 1;
            if (v85 < v87 || v86 >= v84) {
              return result;
            }
          }
        }
        else if (v81 >= v83)
        {
          BOOL result = 1;
          if (v83 < v81 || v80 >= v82) {
            return result;
          }
        }
        long long v116 = *(_OWORD *)(a1 + 104);
        long long v121 = *(_OWORD *)(a1 + 120);
        uint64_t v126 = *(void *)(a1 + 136);
        long long v106 = *v45;
        long long v111 = *(_OWORD *)(a1 + 88);
        long long v88 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 176);
        *(_OWORD *)(a1 + 120) = v88;
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a1 + 208);
        long long v89 = *(_OWORD *)(a1 + 160);
        *long long v45 = *v46;
        *(_OWORD *)(a1 + 88) = v89;
        *(unsigned char *)(a1 + 208) = v126;
        *(_OWORD *)(a1 + 176) = v116;
        *(_OWORD *)(a1 + 192) = v121;
        *long long v46 = v106;
        *(_OWORD *)(a1 + 160) = v111;
        unsigned int v91 = *(_DWORD *)(a1 + 96);
        unsigned int v90 = *(_DWORD *)(a1 + 100);
        unsigned int v93 = *(_DWORD *)(a1 + 24);
        unsigned int v92 = *(_DWORD *)(a1 + 28);
        if (v91 == v93 && v90 == v92)
        {
          unsigned int v95 = *(_DWORD *)(a1 + 104);
          unsigned int v94 = *(_DWORD *)(a1 + 108);
          unsigned int v97 = *(_DWORD *)(a1 + 32);
          unsigned int v96 = *(_DWORD *)(a1 + 36);
          if (v95 == v97 && v94 == v96)
          {
            if (*(_DWORD *)(a1 + 112) >= *(_DWORD *)(a1 + 40)) {
              return 1;
            }
          }
          else if (v97 >= v95)
          {
            BOOL result = 1;
            if (v95 < v97 || v96 >= v94) {
              return result;
            }
          }
        }
        else if (v91 >= v93)
        {
          BOOL result = 1;
          if (v93 < v91 || v90 >= v92) {
            return result;
          }
        }
        long long v117 = *(_OWORD *)(a1 + 32);
        long long v122 = *(_OWORD *)(a1 + 48);
        uint64_t v127 = *(void *)(a1 + 64);
        long long v107 = *(_OWORD *)a1;
        long long v112 = *(_OWORD *)(a1 + 16);
        long long v98 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(a1 + 48) = v98;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 136);
        long long v99 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)a1 = *v45;
        *(_OWORD *)(a1 + 16) = v99;
        *(unsigned char *)(a1 + 136) = v127;
        *(_OWORD *)(a1 + 104) = v117;
        *(_OWORD *)(a1 + 120) = v122;
        BOOL result = 1;
        *long long v45 = v107;
        *(_OWORD *)(a1 + 88) = v112;
        return result;
      }
      unsigned int v59 = *(_DWORD *)(a2 - 40);
      unsigned int v58 = *(_DWORD *)(a2 - 36);
      unsigned int v61 = *(_DWORD *)(a1 + 248);
      unsigned int v60 = *(_DWORD *)(a1 + 252);
      if (v59 == v61 && v58 == v60)
      {
        if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(a1 + 256)) {
          return 1;
        }
        goto LABEL_96;
      }
      if (v61 < v59) {
        goto LABEL_96;
      }
      BOOL result = 1;
      if (v59 >= v61 && v60 < v58) {
        goto LABEL_96;
      }
      return result;
    default:
      uint64_t v11 = a1 + 144;
      sub_1CC656414(a1, a1 + 72, a1 + 144);
      uint64_t v12 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
LABEL_12:
  *(void *)&long long v15 = *(void *)(v12 + 24);
  unsigned int v16 = *(_DWORD *)(v11 + 24);
  unsigned int v17 = *(_DWORD *)(v11 + 28);
  if (v15 == v16 && DWORD1(v15) == v17)
  {
    unsigned int v20 = *(_DWORD *)(v12 + 32);
    unsigned int v21 = *(_DWORD *)(v12 + 36);
    unsigned int v22 = *(_DWORD *)(v11 + 32);
    unsigned int v23 = *(_DWORD *)(v11 + 36);
    if (v20 == v22 && v21 == v23)
    {
      if (*(_DWORD *)(v12 + 40) >= *(_DWORD *)(v11 + 40)) {
        goto LABEL_64;
      }
    }
    else if (v22 >= v20 && (v20 < v22 || v23 >= v21))
    {
      goto LABEL_64;
    }
  }
  else if (v15 >= v16 && (v16 < v15 || DWORD1(v15) >= v17))
  {
    goto LABEL_64;
  }
  uint64_t v101 = *(void *)(v12 + 16);
  long long v100 = *(_OWORD *)v12;
  uint64_t v26 = *(void *)(v12 + 32);
  int v27 = *(_DWORD *)(v12 + 40);
  *(_OWORD *)&v102[12] = *(_OWORD *)(v12 + 56);
  *(_OWORD *)unsigned int v102 = *(_OWORD *)(v12 + 44);
  long long v28 = *(_OWORD *)(v11 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v11 + 32);
  *(_OWORD *)(v12 + 48) = v28;
  *(unsigned char *)(v12 + 64) = *(unsigned char *)(v11 + 64);
  long long v29 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
  *(_OWORD *)(v12 + 16) = v29;
  uint64_t v30 = a1;
  if (v11 == a1) {
    goto LABEL_63;
  }
  uint64_t v31 = v13;
  while (1)
  {
    uint64_t v32 = a1 + v31;
    unsigned int v33 = *(_DWORD *)(a1 + v31 + 96);
    unsigned int v34 = *(_DWORD *)(a1 + v31 + 100);
    if (v15 == v33 && DWORD1(v15) == v34)
    {
      unsigned int v37 = *(_DWORD *)(v32 + 104);
      unsigned int v38 = *(_DWORD *)(v32 + 108);
      if (v26 == v37 && HIDWORD(v26) == v38)
      {
        if (v27 >= *(_DWORD *)(a1 + v31 + 112)) {
          goto LABEL_62;
        }
      }
      else if (v37 >= v26 && (v26 < v37 || v38 >= HIDWORD(v26)))
      {
        uint64_t v30 = a1 + v31 + 144;
        goto LABEL_63;
      }
    }
    else if (v15 >= v33 && (v33 < v15 || DWORD1(v15) >= v34))
    {
LABEL_62:
      uint64_t v30 = v11;
LABEL_63:
      *(void *)(v30 + 16) = v101;
      *(_OWORD *)uint64_t v30 = v100;
      *((void *)&v15 + 1) = v26;
      *(_OWORD *)(v30 + 24) = v15;
      *(_DWORD *)(v30 + 40) = v27;
      *(_OWORD *)(v30 + 44) = *(_OWORD *)v102;
      *(void *)(v30 + 57) = *(void *)&v102[13];
      if (++v14 == 8) {
        return v12 + 72 == a2;
      }
LABEL_64:
      uint64_t v11 = v12;
      v13 += 72;
      v12 += 72;
      if (v12 == a2) {
        return 1;
      }
      goto LABEL_12;
    }
    uint64_t v41 = v32 + 144;
    v11 -= 72;
    uint64_t v42 = v32 + 72;
    long long v43 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 48) = v43;
    *(unsigned char *)(v41 + 64) = *(unsigned char *)(v42 + 64);
    long long v44 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v44;
    v31 -= 72;
    if (v31 == -144)
    {
      uint64_t v30 = a1;
      goto LABEL_63;
    }
  }
}

__n128 sub_1CC656EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = sub_1CC656414(a1, a2, a3).n128_u64[0];
  unsigned int v9 = *(_DWORD *)(a4 + 24);
  unsigned int v10 = *(_DWORD *)(a4 + 28);
  unsigned int v11 = *(_DWORD *)(a3 + 24);
  unsigned int v12 = *(_DWORD *)(a3 + 28);
  if (v9 == v11 && v10 == v12)
  {
    unsigned int v16 = *(_DWORD *)(a4 + 32);
    unsigned int v15 = *(_DWORD *)(a4 + 36);
    unsigned int v18 = *(_DWORD *)(a3 + 32);
    unsigned int v17 = *(_DWORD *)(a3 + 36);
    if (v16 == v18 && v15 == v17)
    {
      if (*(_DWORD *)(a4 + 40) >= *(_DWORD *)(a3 + 40)) {
        return result;
      }
    }
    else if (v18 >= v16 && (v16 < v18 || v17 >= v15))
    {
      return result;
    }
  }
  else if (v9 >= v11 && (v11 < v9 || v10 >= v12))
  {
    return result;
  }
  long long v51 = *(_OWORD *)(a3 + 32);
  long long v54 = *(_OWORD *)(a3 + 48);
  uint64_t v57 = *(void *)(a3 + 64);
  __n128 v45 = *(__n128 *)a3;
  long long v48 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  long long v21 = *(_OWORD *)(a4 + 32);
  long long v20 = *(_OWORD *)(a4 + 48);
  long long v22 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(a3 + 64) = *(unsigned char *)(a4 + 64);
  *(_OWORD *)(a3 + 32) = v21;
  *(_OWORD *)(a3 + 48) = v20;
  *(_OWORD *)(a3 + 16) = v22;
  *(unsigned char *)(a4 + 64) = v57;
  *(_OWORD *)(a4 + 32) = v51;
  *(_OWORD *)(a4 + 48) = v54;
  __n128 result = v45;
  *(__n128 *)a4 = v45;
  *(_OWORD *)(a4 + 16) = v48;
  unsigned int v24 = *(_DWORD *)(a3 + 24);
  unsigned int v23 = *(_DWORD *)(a3 + 28);
  unsigned int v26 = *(_DWORD *)(a2 + 24);
  unsigned int v25 = *(_DWORD *)(a2 + 28);
  if (v24 == v26 && v23 == v25)
  {
    unsigned int v28 = *(_DWORD *)(a3 + 32);
    unsigned int v27 = *(_DWORD *)(a3 + 36);
    unsigned int v30 = *(_DWORD *)(a2 + 32);
    unsigned int v29 = *(_DWORD *)(a2 + 36);
    if (v28 == v30 && v27 == v29)
    {
      if (*(_DWORD *)(a3 + 40) >= *(_DWORD *)(a2 + 40)) {
        return result;
      }
    }
    else if (v30 >= v28 && (v28 < v30 || v29 >= v27))
    {
      return result;
    }
  }
  else if (v24 >= v26 && (v26 < v24 || v23 >= v25))
  {
    return result;
  }
  long long v52 = *(_OWORD *)(a2 + 32);
  long long v55 = *(_OWORD *)(a2 + 48);
  uint64_t v58 = *(void *)(a2 + 64);
  __n128 v46 = *(__n128 *)a2;
  long long v49 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v32 = *(_OWORD *)(a3 + 32);
  long long v31 = *(_OWORD *)(a3 + 48);
  long long v33 = *(_OWORD *)(a3 + 16);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v32;
  *(_OWORD *)(a2 + 48) = v31;
  *(_OWORD *)(a2 + 16) = v33;
  *(unsigned char *)(a3 + 64) = v58;
  *(_OWORD *)(a3 + 32) = v52;
  *(_OWORD *)(a3 + 48) = v55;
  __n128 result = v46;
  *(__n128 *)a3 = v46;
  *(_OWORD *)(a3 + 16) = v49;
  unsigned int v35 = *(_DWORD *)(a2 + 24);
  unsigned int v34 = *(_DWORD *)(a2 + 28);
  unsigned int v37 = *(_DWORD *)(a1 + 24);
  unsigned int v36 = *(_DWORD *)(a1 + 28);
  if (v35 == v37 && v34 == v36)
  {
    unsigned int v39 = *(_DWORD *)(a2 + 32);
    unsigned int v38 = *(_DWORD *)(a2 + 36);
    unsigned int v41 = *(_DWORD *)(a1 + 32);
    unsigned int v40 = *(_DWORD *)(a1 + 36);
    if (v39 == v41 && v38 == v40)
    {
      if (*(_DWORD *)(a2 + 40) >= *(_DWORD *)(a1 + 40)) {
        return result;
      }
LABEL_47:
      long long v53 = *(_OWORD *)(a1 + 32);
      long long v56 = *(_OWORD *)(a1 + 48);
      uint64_t v59 = *(void *)(a1 + 64);
      __n128 v47 = *(__n128 *)a1;
      long long v50 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v43 = *(_OWORD *)(a2 + 32);
      long long v42 = *(_OWORD *)(a2 + 48);
      long long v44 = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v43;
      *(_OWORD *)(a1 + 48) = v42;
      *(_OWORD *)(a1 + 16) = v44;
      *(unsigned char *)(a2 + 64) = v59;
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 48) = v56;
      __n128 result = v47;
      *(__n128 *)a2 = v47;
      *(_OWORD *)(a2 + 16) = v50;
      return result;
    }
    if (v41 < v39 || v39 >= v41 && v40 < v38) {
      goto LABEL_47;
    }
  }
  else if (v35 < v37 || v37 >= v35 && v34 < v36)
  {
    goto LABEL_47;
  }
  return result;
}

void sub_1CC657138(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v7 = (char *)(v6 + 8 * a3);
  unsigned int v8 = (char *)(v6 + 8 * *(unsigned int *)(a1 + 16));
  if (v8 - v7 < 1025)
  {
LABEL_5:
    sub_1CC657880(v7, v8, (v8 - v7) >> 3, 0, 0);
  }
  else
  {
    unsigned int v9 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v10 = (v8 - v7) >> 3;
    while (1)
    {
      unsigned int v11 = (uint64_t *)operator new(8 * v10, v9);
      if (v11) {
        break;
      }
      BOOL v12 = v10 > 1;
      v10 >>= 1;
      if (!v12) {
        goto LABEL_5;
      }
    }
    uint64_t v13 = v11;
    sub_1CC657880(v7, v8, (v8 - v7) >> 3, v11, v10);
    operator delete(v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 16);
  uint64_t v15 = a3 + 1;
  if (v15 < v14)
  {
    unint64_t v16 = a3 + 2;
    unsigned int v17 = a3;
    do
    {
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = *(void *)(v18 + 8 * v15);
      uint64_t v20 = *(void *)(v18 + 8 * v17);
      uint64_t v21 = *(unsigned int *)(v20 + 32);
      uint64_t v22 = *(unsigned int *)(v20 + 36);
      if (*(unsigned char *)(a2 + 8))
      {
        if (v21 == *(_DWORD *)a2 && v22 == *(_DWORD *)(a2 + 4)) {
          break;
        }
      }
      if (v21 != *(_DWORD *)(v19 + 32) || v22 != *(_DWORD *)(v19 + 36))
      {
        unsigned int v25 = v17 + 2;
        unint64_t v26 = v16;
        if (v25 < v14)
        {
          do
          {
            uint64_t v27 = *(void *)(v18 + 8 * v26);
            if (*(_DWORD *)(v19 + 36) == *(_DWORD *)(v27 + 36) && *(_DWORD *)(v19 + 32) == *(_DWORD *)(v27 + 32)) {
              uint64_t v19 = *(void *)(v18 + 8 * v26);
            }
            ++v26;
          }
          while (v26 < v14);
        }
        sub_1CC657354(*(void ***)a1, *(_DWORD *)(v19 + 40), *(void *)(v19 + 48), (v22 << 32) | v21, 0, 0);
      }
      unsigned int v17 = v15;
      ++v16;
      ++v15;
    }
    while (v14 != v15);
    LODWORD(v14) = *(_DWORD *)(a1 + 16);
  }
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void *)(v29 + 8 * v14 - 8);
  if (a3)
  {
    uint64_t v32 = *(unsigned int *)(v30 + 32);
    uint64_t v31 = *(unsigned int *)(v30 + 36);
    if (v32 != *(_DWORD *)a2 || v31 != *(_DWORD *)(a2 + 4))
    {
      unint64_t v34 = v32 | (v31 << 32);
      uint64_t v35 = *(void *)(v29 + 8 * (a3 - 1));
      sub_1CC657354(*(void ***)a1, *(_DWORD *)(v35 + 40), *(void *)(v35 + 48), v34, 0, 0);
    }
  }
  else if (!*(unsigned char *)(a2 + 8) {
         || (*(_DWORD *)a2 == *(_DWORD *)(v30 + 32) ? (BOOL v36 = *(_DWORD *)(a2 + 4) == *(_DWORD *)(v30 + 36)) : (BOOL v36 = 0),
  }
             !v36))
  {
    sub_1CC6581B4(*(void *)a1, *(_DWORD *)(v30 + 32), *(_DWORD *)(v30 + 36), 0);
  }
  *(_DWORD *)(a1 + 16) = (unint64_t)&v7[-*(void *)(a1 + 8)] >> 3;
}

void sub_1CC657354(void **a1, int a2, uint64_t a3, unint64_t a4, char a5, int a6)
{
  int v7 = a4;
  int v10 = (a2 != 2) & ~a6;
  unsigned int v11 = (char *)*a1;
  BOOL v12 = (char *)a1[1];
  if (*a1 == v12
    || (a5 & 1) != 0
    || (a6 & 1) != 0
    || *(v12 - 8) != v10
    || (*((void *)v12 - 2) == a3 ? (BOOL v13 = *(v12 - 7) == 0) : (BOOL v13 = 0), !v13))
  {
    unint64_t v14 = HIDWORD(a4);
    if (v10)
    {
      BOOL v15 = a2 == 3;
      unint64_t v16 = (char *)a1[2];
      if (v12 >= v16)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v18 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v11) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        uint64_t v21 = 3 * v20;
        uint64_t v22 = (char *)operator new(24 * v20);
        unsigned int v23 = &v22[8 * ((v12 - v11) >> 3)];
        *(_DWORD *)unsigned int v23 = v7;
        *((_DWORD *)v23 + 1) = v14;
        *((void *)v23 + 1) = a3;
        v23[16] = 1;
        v23[17] = a5;
        v23[18] = v15;
        unsigned int v17 = v23 + 24;
        if (v11 == v12)
        {
          unsigned int v25 = &v22[8 * ((v12 - v11) >> 3)];
        }
        else
        {
          do
          {
            long long v24 = *(_OWORD *)(v12 - 24);
            unsigned int v25 = v23 - 24;
            *(_DWORD *)(v23 - 9) = *(_DWORD *)(v12 - 9);
            *(_OWORD *)(v23 - 24) = v24;
            v12 -= 24;
            v23 -= 24;
          }
          while (v12 != v11);
        }
        *a1 = v25;
        a1[1] = v17;
        a1[2] = &v22[8 * v21];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)BOOL v12 = a4;
        *((void *)v12 + 1) = a3;
        v12[16] = 1;
        v12[17] = a5;
        unsigned int v17 = v12 + 24;
        v12[18] = v15;
      }
      a1[1] = v17;
    }
    else
    {
      sub_1CC6581B4((uint64_t)a1, a4, SHIDWORD(a4), a5);
    }
  }
}

uint64_t *sub_1CC65753C(int8x16_t *a1, unint64_t *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int v7 = a2;
  unsigned int v8 = (uint64_t *)a1;
  if (a4 == 3)
  {
    uint64_t v11 = a1->i64[1];
    unsigned int v12 = *(_DWORD *)(v11 + 32);
    unsigned int v13 = **a3;
    if (v13 >= v12 && (v12 < v13 || (*a3)[1] >= *(_DWORD *)(v11 + 36)))
    {
      a1->i64[1] = *a2;
      *a2 = v11;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return &a1->i64[1];
    }
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = v11;
    a1->i64[1] = v10;
    a1->i64[1] = *a2;
    goto LABEL_8;
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_8:
    *a2 = v10;
    return (uint64_t *)v7;
  }
  if (a6 >= a4)
  {
    unint64_t v26 = &a1->i64[1];
    *a5 = a1->i64[0];
    uint64_t v27 = a5 + 1;
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        uint64_t v28 = *v26;
        unsigned int v29 = *(_DWORD *)(*v26 + 32);
        unsigned int v30 = **a3;
        if (v30 >= v29 && (v29 < v30 || (*a3)[1] >= *(_DWORD *)(v28 + 36))) {
          *v27++ = v28;
        }
        else {
          *v8++ = v28;
        }
        ++v26;
      }
      while (v26 != (uint64_t *)a2);
      *unsigned int v8 = *a2;
      int v7 = (unint64_t *)(v8 + 1);
      if (v27 <= a5) {
        return (uint64_t *)v7;
      }
    }
    uint64_t v33 = 0;
    do
    {
      v7[v33] = a5[v33];
      ++v33;
    }
    while (&a5[v33] < v27);
    return (uint64_t *)v7;
  }
  if (a4 >= 0) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = a4 + 1;
  }
  uint64_t v18 = v17 >> 1;
  unint64_t v19 = &a1->i8[8 * (v17 >> 1)];
  unint64_t v20 = *a3;
  unsigned int v21 = **a3;
  uint64_t v22 = v19 - 8;
  uint64_t v23 = *((void *)v19 - 1);
  unsigned int v24 = *(_DWORD *)(v23 + 32);
  if (v21 >= v24)
  {
    uint64_t v31 = 8 * v18 - 8;
    uint64_t v32 = v18;
    while (v24 < v21 || v20[1] >= *(_DWORD *)(v23 + 36))
    {
      if (!v31) {
        goto LABEL_38;
      }
      uint64_t v25 = v32 - 1;
      uint64_t v23 = a1[-1].i64[v32];
      unsigned int v24 = *(_DWORD *)(v23 + 32);
      v31 -= 8;
      --v32;
      if (v21 < v24)
      {
        uint64_t v22 = &a1->i8[v31];
        goto LABEL_37;
      }
    }
    uint64_t v22 = &a1->i8[v31];
    uint64_t v25 = v32;
  }
  else
  {
    uint64_t v25 = v18;
  }
LABEL_37:
  unsigned int v8 = (uint64_t *)sub_1CC65753C(a1, v22, a3, v25, a5, a6);
  unint64_t v20 = *a3;
  unsigned int v21 = **a3;
LABEL_38:
  unint64_t v34 = (char *)(v7 + 1);
  uint64_t v35 = a4 - v18;
  BOOL v36 = v19;
  while (1)
  {
    unsigned int v37 = *(_DWORD *)(*(void *)v36 + 32);
    if (v21 >= v37 && (v37 < v21 || v20[1] >= *(_DWORD *)(*(void *)v36 + 36))) {
      break;
    }
    v36 += 8;
    if (v36 == (char *)v7) {
      goto LABEL_45;
    }
    --v35;
  }
  unint64_t v34 = (char *)sub_1CC65753C(v36, v7, a3, v35, a5, a6);
LABEL_45:
  if (v8 == (uint64_t *)v19) {
    return (uint64_t *)v34;
  }
  if (v19 == v34) {
    return v8;
  }
  if (v8 + 1 == (uint64_t *)v19)
  {
    uint64_t v38 = *v8;
    int64_t v39 = v34 - v19;
    memmove(v8, v19, v34 - v19);
    int v7 = (unint64_t *)((char *)v8 + v39);
    unint64_t *v7 = v38;
    return (uint64_t *)v7;
  }
  if (v19 + 8 == v34)
  {
    uint64_t v40 = *((void *)v34 - 1);
    int v7 = (unint64_t *)(v8 + 1);
    size_t v41 = v34 - 8 - (char *)v8;
    if (v41) {
      memmove(v8 + 1, v8, v41);
    }
    *unsigned int v8 = v40;
    return (uint64_t *)v7;
  }

  return sub_1CC057214(v8, v19, v34);
}

char *sub_1CC657880(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      unsigned int v9 = *(_DWORD *)(v7 + 32);
      unsigned int v10 = *(_DWORD *)(*(void *)result + 32);
      if (v9 < v10 || (v10 >= v9 ? (BOOL v11 = *(_DWORD *)(v7 + 36) >= *(_DWORD *)(v8 + 36)) : (BOOL v11 = 1), !v11))
      {
        *(void *)__n128 result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v28 = (char *)a4;
      unint64_t v29 = a3 >> 1;
      uint64_t v30 = (uint64_t)&result[8 * (a3 >> 1)];
      unint64_t v31 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CC657B14((uint64_t)result, v30, v31, a4);
        uint64_t v32 = (uint64_t *)&v28[8 * v29];
        __n128 result = (char *)sub_1CC657B14((uint64_t)&v6[8 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v32);
        uint64_t v33 = &v28[8 * a3];
        unint64_t v34 = v32;
        while (v34 != (uint64_t *)v33)
        {
          uint64_t v35 = *v34;
          uint64_t v36 = *(void *)v28;
          unsigned int v37 = *(_DWORD *)(*v34 + 32);
          unsigned int v38 = *(_DWORD *)(*(void *)v28 + 32);
          if (v37 >= v38 && (v38 >= v37 ? (BOOL v39 = *(_DWORD *)(v35 + 36) >= *(_DWORD *)(v36 + 36)) : (BOOL v39 = 1), v39))
          {
            *(void *)uint64_t v6 = v36;
            v28 += 8;
          }
          else
          {
            *(void *)uint64_t v6 = v35;
            ++v34;
          }
          v6 += 8;
          if (v28 == (char *)v32)
          {
            if (v34 != (uint64_t *)v33)
            {
              uint64_t v40 = 0;
              do
              {
                *(void *)&v6[v40 * 8] = v34[v40];
                ++v40;
              }
              while (&v34[v40] != (uint64_t *)v33);
            }
            return result;
          }
        }
        if (v28 != (char *)v32)
        {
          uint64_t v41 = 0;
          do
          {
            *(void *)&v6[v41] = *(void *)&v28[v41];
            v41 += 8;
          }
          while (&v28[v41] != (char *)v32);
        }
      }
      else
      {
        sub_1CC657880(result, v30, v31, a4, a5);
        sub_1CC657880(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28, a5);
        return sub_1CC657D6C(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v28, a5);
      }
    }
    else if (result != a2)
    {
      unsigned int v13 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v14 = 0;
        BOOL v15 = result;
        do
        {
          unint64_t v16 = v13;
          uint64_t v18 = *(void *)v15;
          uint64_t v17 = *((void *)v15 + 1);
          unsigned int v19 = *(_DWORD *)(v17 + 32);
          unsigned int v20 = *(_DWORD *)(*(void *)v15 + 32);
          if (v19 < v20 || (v20 >= v19 ? (BOOL v21 = *(_DWORD *)(v17 + 36) >= *(_DWORD *)(v18 + 36)) : (BOOL v21 = 1), !v21))
          {
            *((void *)v15 + 1) = v18;
            uint64_t v22 = result;
            if (v15 != result)
            {
              uint64_t v23 = v14;
              while (1)
              {
                uint64_t v24 = *(void *)&result[v23 - 8];
                unsigned int v25 = *(_DWORD *)(v24 + 32);
                if (v19 >= v25 && (v25 < v19 || *(_DWORD *)(v17 + 36) >= *(_DWORD *)(v24 + 36))) {
                  break;
                }
                *(void *)&result[v23] = v24;
                v23 -= 8;
                if (!v23)
                {
                  uint64_t v22 = result;
                  goto LABEL_28;
                }
              }
              uint64_t v22 = &result[v23];
            }
LABEL_28:
            *(void *)uint64_t v22 = v17;
          }
          unsigned int v13 = v16 + 8;
          v14 += 8;
          BOOL v15 = v16;
        }
        while (v16 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CC657B14(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      uint64_t *v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      unsigned int v10 = *(_DWORD *)(*(void *)result + 32);
      if (v9 >= v10 && (v10 < v9 || *(_DWORD *)(v8 + 36) >= *(_DWORD *)(*(void *)result + 36)))
      {
        uint64_t v8 = *(void *)result;
        uint64_t v6 = a2 - 8;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = result + 8 * (a3 >> 1);
      sub_1CC657880(result, v27, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_1CC657880(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)v6;
        unsigned int v31 = *(_DWORD *)(*(void *)v28 + 32);
        unsigned int v32 = *(_DWORD *)(*(void *)v6 + 32);
        if (v31 >= v32 && (v32 >= v31 ? (BOOL v33 = *(_DWORD *)(v29 + 36) >= *(_DWORD *)(v30 + 36)) : (BOOL v33 = 1), v33))
        {
          uint64_t *v4 = v30;
          v6 += 8;
        }
        else
        {
          uint64_t *v4 = v29;
          v28 += 8;
        }
        ++v4;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            uint64_t v34 = 0;
            do
            {
              v4[v34] = *(void *)(v28 + v34 * 8);
              ++v34;
            }
            while (v28 + v34 * 8 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        uint64_t v35 = 0;
        do
        {
          v4[v35] = *(void *)(v6 + v35 * 8);
          ++v35;
        }
        while (v6 + v35 * 8 != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v12 = 0;
        unsigned int v13 = a4;
        uint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          uint64_t v17 = *(void *)v11;
          unsigned int v18 = *(_DWORD *)(*(void *)v11 + 32);
          unsigned int v19 = *(_DWORD *)(v16 + 32);
          if (v18 >= v19 && (v19 >= v18 ? (BOOL v20 = *(_DWORD *)(v17 + 36) >= *(_DWORD *)(v15 + 36)) : (BOOL v20 = 1), v20))
          {
            *uint64_t v14 = v17;
          }
          else
          {
            v13[1] = v15;
            BOOL v21 = a4;
            if (v13 != a4)
            {
              uint64_t v22 = v12;
              while (1)
              {
                uint64_t v23 = *(uint64_t *)((char *)a4 + v22 - 8);
                unsigned int v24 = *(_DWORD *)(*(void *)v11 + 32);
                unsigned int v25 = *(_DWORD *)(v23 + 32);
                if (v24 >= v25 && (v25 < v24 || *(_DWORD *)(*(void *)v11 + 36) >= *(_DWORD *)(v23 + 36))) {
                  break;
                }
                *(uint64_t *)((char *)a4 + v22) = v23;
                v22 -= 8;
                if (!v22)
                {
                  BOOL v21 = a4;
                  goto LABEL_31;
                }
              }
              BOOL v21 = (uint64_t *)((char *)a4 + v22);
            }
LABEL_31:
            uint64_t *v21 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          unsigned int v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1CC657D6C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  uint64_t v11 = result;
  uint64_t v58 = a6;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v12 = *(void *)a2;
    unsigned int v13 = *(_DWORD *)(*(void *)a2 + 32);
    while (1)
    {
      uint64_t v14 = *(void *)v11;
      unsigned int v15 = *(_DWORD *)(*(void *)v11 + 32);
      if (v13 < v15) {
        break;
      }
      if (v15 >= v13 && *(_DWORD *)(v12 + 36) < *(_DWORD *)(v14 + 36)) {
        break;
      }
      v11 += 8;
      if (!--a4) {
        return result;
      }
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *(void *)uint64_t v11 = v12;
        *(void *)a2 = v14;
        return result;
      }
      if (a4 >= 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = a4 + 1;
      }
      uint64_t v27 = v28 >> 1;
      unsigned int v19 = &v11[8 * (v28 >> 1)];
      uint64_t v18 = 0;
      if (a3 == a2)
      {
        unsigned int v37 = a3;
LABEL_52:
        BOOL v39 = v19;
        goto LABEL_56;
      }
      unint64_t v29 = (a3 - a2) >> 3;
      unsigned int v30 = *(_DWORD *)(*(void *)v19 + 32);
      do
      {
        unint64_t v31 = v29 >> 1;
        unint64_t v32 = v18 + (v29 >> 1);
        uint64_t v33 = *(void *)&a2[8 * v32];
        unsigned int v34 = *(_DWORD *)(v33 + 32);
        if (v34 < v30
          || ((unsigned int v35 = *(_DWORD *)(v33 + 36), v30 >= v34) ? (v36 = v35 >= *(_DWORD *)(*(void *)v19 + 36)) : (v36 = 1),
              !v36))
        {
          uint64_t v18 = v32 + 1;
          unint64_t v31 = v29 + ~v31;
        }
        unint64_t v29 = v31;
      }
      while (v31);
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = v8 + 1;
      }
      uint64_t v18 = v17 >> 1;
      unsigned int v19 = a2;
      if (v11 != a2)
      {
        unint64_t v20 = (a2 - v11) >> 3;
        uint64_t v21 = *(void *)&a2[8 * v18];
        unsigned int v22 = *(_DWORD *)(v21 + 32);
        unsigned int v19 = v11;
        do
        {
          unint64_t v23 = v20 >> 1;
          unsigned int v24 = &v19[8 * (v20 >> 1)];
          unsigned int v25 = *(_DWORD *)(*(void *)v24 + 32);
          if (v22 >= v25 && (v25 < v22 || *(_DWORD *)(v21 + 36) >= *(_DWORD *)(*(void *)v24 + 36)))
          {
            unsigned int v19 = v24 + 8;
            unint64_t v23 = v20 + ~v23;
          }
          unint64_t v20 = v23;
        }
        while (v23);
      }
      uint64_t v27 = (v19 - v11) >> 3;
    }
    unsigned int v37 = &a2[8 * v18];
    v8 -= v18;
    if (v19 != a2)
    {
      if (v18)
      {
        if (v19 + 8 == a2)
        {
          uint64_t v57 = *(void *)v19;
          memmove(v19, a2, 8 * v18);
          a6 = v58;
          BOOL v39 = &v19[8 * v18];
          *(void *)BOOL v39 = v57;
        }
        else
        {
          if (v18 == 1)
          {
            uint64_t v38 = *((void *)v37 - 1);
            BOOL v39 = v19 + 8;
            if (v37 - 8 != v19) {
              memmove(v19 + 8, v19, v37 - 8 - v19);
            }
            *(void *)unsigned int v19 = v38;
            uint64_t v18 = 1;
          }
          else
          {
            BOOL v39 = (char *)sub_1CC057214(v19, a2, &a2[8 * v18]);
          }
          a6 = v58;
        }
        goto LABEL_56;
      }
      goto LABEL_52;
    }
    unsigned int v19 = a2;
    BOOL v39 = &a2[8 * v18];
LABEL_56:
    a4 -= v27;
    if (v18 + v27 >= a4 + v8)
    {
      __n128 result = (char *)sub_1CC657D6C(v39, v37, a3, a4, v8, a6, a7);
      unsigned int v37 = v19;
      uint64_t v8 = v18;
      a4 = v27;
      a3 = v39;
    }
    else
    {
      __n128 result = (char *)sub_1CC657D6C(v11, v19, v39, v27, v18, a6, a7);
      uint64_t v11 = v39;
    }
    a2 = v37;
    a6 = v58;
    if (!v8) {
      return result;
    }
  }
  if (a4 <= v8)
  {
    if (v11 != a2)
    {
      uint64_t v49 = 0;
      do
      {
        *(void *)&a6[v49] = *(void *)&v11[v49];
        v49 += 8;
      }
      while (&v11[v49] != a2);
      if (v49)
      {
        long long v50 = a6;
        while (a2 != a3)
        {
          uint64_t v51 = *(void *)a2;
          uint64_t v52 = *(void *)v50;
          unsigned int v53 = *(_DWORD *)(*(void *)a2 + 32);
          unsigned int v54 = *(_DWORD *)(*(void *)v50 + 32);
          if (v53 >= v54 && (v54 >= v53 ? (BOOL v55 = *(_DWORD *)(v51 + 36) >= *(_DWORD *)(v52 + 36)) : (BOOL v55 = 1), v55))
          {
            *(void *)uint64_t v11 = v52;
            v50 += 8;
          }
          else
          {
            *(void *)uint64_t v11 = v51;
            a2 += 8;
          }
          v11 += 8;
          if (&a6[v49] == v50) {
            return result;
          }
        }
        return (char *)memmove(v11, v50, a6 - v50 + v49);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v40 = 0;
    do
    {
      *(void *)&a6[v40] = *(void *)&a2[v40];
      v40 += 8;
    }
    while (&a2[v40] != a3);
    if (v40)
    {
      uint64_t v41 = &a6[v40];
      long long v42 = a3 - 8;
      while (a2 != v11)
      {
        long long v43 = a2 - 8;
        uint64_t v44 = *((void *)a2 - 1);
        uint64_t v45 = *((void *)v41 - 1);
        unsigned int v46 = *(_DWORD *)(v45 + 32);
        unsigned int v47 = *(_DWORD *)(v44 + 32);
        if (v46 >= v47)
        {
          BOOL v48 = v47 < v46 || *(_DWORD *)(v45 + 36) >= *(_DWORD *)(v44 + 36);
          if (v48) {
            uint64_t v44 = *((void *)v41 - 1);
          }
          if (v48) {
            long long v43 = a2;
          }
          if (v48) {
            v41 -= 8;
          }
        }
        *(void *)long long v42 = v44;
        v42 -= 8;
        a2 = v43;
        if (v41 == a6) {
          return result;
        }
      }
      if (v41 != a6)
      {
        uint64_t v56 = 0;
        do
        {
          *(void *)&v42[v56] = *(void *)&v41[v56 - 8];
          v56 -= 8;
        }
        while (&v41[v56] != a6);
      }
    }
  }
  return result;
}

void sub_1CC6581B4(uint64_t a1, int a2, int a3, char a4)
{
  unsigned int v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(_DWORD **)a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v16 = 3 * v15;
    uint64_t v17 = (char *)operator new(24 * v15);
    uint64_t v18 = &v17[24 * v12];
    *(_DWORD *)uint64_t v18 = a2;
    *((_DWORD *)v18 + 1) = a3;
    *((void *)v18 + 1) = 0;
    v18[16] = 0;
    v18[17] = a4;
    v18[18] = 0;
    unsigned int v10 = v18 + 24;
    if (v9 == v11)
    {
      unint64_t v20 = &v17[24 * v12];
    }
    else
    {
      do
      {
        long long v19 = *(_OWORD *)(v9 - 6);
        unint64_t v20 = v18 - 24;
        *(_DWORD *)(v18 - 9) = *(_DWORD *)((char *)v9 - 9);
        *(_OWORD *)(v18 - 24) = v19;
        v9 -= 6;
        v18 -= 24;
      }
      while (v9 != v11);
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = &v17[8 * v16];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    _DWORD *v9 = a2;
    v9[1] = a3;
    *((void *)v9 + 1) = 0;
    *((unsigned char *)v9 + 16) = 0;
    *((unsigned char *)v9 + 17) = a4;
    unsigned int v10 = (char *)(v9 + 6);
    *((unsigned char *)v9 + 18) = 0;
  }
  *(void *)(a1 + 8) = v10;
}

void sub_1CC658304(void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1CC658390(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 24 * v2;
    unsigned int v5 = (void *)(v3 + 24);
    do
    {
      if (*(v5 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v6 = (void *)*(v5 - 2);
        if (v5 != v6) {
          free(v6);
        }
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void sub_1CC658408(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v7 = (void *)*((void *)v4 - 7);
        if (v7)
        {
          *((void *)v4 - 6) = v7;
          operator delete(v7);
        }
        unint64_t v8 = (void **)(v4 - 80);
        sub_1CB8338B8(&v8);
        if (*(v4 - 81) < 0) {
          operator delete(*((void **)v4 - 13));
        }
        v4 -= 104;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC6584B0(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)result + 8);
    do
    {
      if (*(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        __n128 result = MEMORY[0x1D25D9CD0](*v3, 8);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_1CC658504(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v9 = result;
  while (2)
  {
    unint64_t v10 = (unint64_t)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = (uint64_t *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*((_DWORD *)a2 - 2) < *(_DWORD *)v10)
                {
                  uint64_t v38 = *(void *)v10;
                  *(void *)unint64_t v10 = *(a2 - 1);
                  *(a2 - 1) = v38;
                }
                break;
              case 3:
                __n128 result = sub_1CC658BE8((uint64_t *)v10, (unsigned int *)(v10 + 8), (unsigned int *)a2 - 2);
                break;
              case 4:
                __n128 result = sub_1CC658E84((uint64_t *)v10, (unsigned int *)(v10 + 8), (unsigned int *)(v10 + 16), a2 - 1);
                break;
              case 5:
                BOOL v39 = (uint64_t *)(v10 + 16);
                uint64_t v40 = (uint64_t *)(v10 + 24);
                __n128 result = sub_1CC658E84((uint64_t *)v10, (unsigned int *)(v10 + 8), (unsigned int *)(v10 + 16), (void *)(v10 + 24));
                if (*((_DWORD *)a2 - 2) < *(_DWORD *)(v10 + 24))
                {
                  uint64_t v41 = *v40;
                  uint64_t *v40 = *(a2 - 1);
                  *(a2 - 1) = v41;
                  if (*(_DWORD *)v40 < *(_DWORD *)v39)
                  {
                    uint64_t v42 = *v39;
                    uint64_t v43 = *v40;
                    uint64_t *v39 = *v40;
                    uint64_t *v40 = v42;
                    if (*(_DWORD *)(v10 + 8) > v43)
                    {
                      uint64_t v44 = *(void *)(v10 + 8);
                      *(void *)(v10 + 8) = v43;
                      *(void *)(v10 + 16) = v44;
                      if (*(_DWORD *)v10 > v43)
                      {
                        uint64_t v45 = *(void *)v10;
                        *(void *)unint64_t v10 = v43;
                        *(void *)(v10 + 8) = v45;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v46 = (uint64_t *)(v10 + 8);
            BOOL v48 = (uint64_t *)v10 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                long long v50 = (_DWORD *)v10;
                do
                {
                  unsigned int v51 = v50[2];
                  unsigned int v52 = *v50;
                  long long v50 = v46;
                  if (v51 < v52)
                  {
                    uint64_t v53 = *v46;
                    uint64_t v54 = v49;
                    while (1)
                    {
                      *(void *)(v10 + v54 + 8) = *(void *)(v10 + v54);
                      if (!v54) {
                        break;
                      }
                      unsigned int v55 = *(_DWORD *)(v10 + v54 - 8);
                      v54 -= 8;
                      if (v55 <= v53)
                      {
                        uint64_t v56 = (void *)(v10 + v54 + 8);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v56 = (void *)v10;
LABEL_81:
                    void *v56 = v53;
                  }
                  unsigned int v46 = (uint64_t *)(v50 + 2);
                  v49 += 8;
                }
                while (v50 + 2 != (_DWORD *)a2);
              }
            }
            else if (!v48)
            {
              do
              {
                unsigned int v83 = *((_DWORD *)v9 + 2);
                unsigned int v84 = *(_DWORD *)v9;
                unsigned int v9 = v46;
                if (v83 < v84)
                {
                  uint64_t v85 = *v46;
                  do
                  {
                    unsigned int v86 = v46;
                    uint64_t v87 = *--v46;
                    *unsigned int v86 = v87;
                  }
                  while (*((_DWORD *)v86 - 4) > v85);
                  *unsigned int v46 = v85;
                }
                unsigned int v46 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((uint64_t *)v10 != a2)
            {
              int64_t v57 = (unint64_t)(v12 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  unsigned int v61 = (unsigned int *)(v10 + 8 * v60);
                  if (2 * v59 + 2 < v12)
                  {
                    unsigned int v63 = *v61;
                    unsigned int v62 = v61[2];
                    if (*v61 <= v62) {
                      unsigned int v63 = v61[2];
                    }
                    if (*v61 < v62)
                    {
                      v61 += 2;
                      uint64_t v60 = 2 * v59 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v63 = *v61;
                  }
                  long long v64 = (unsigned int *)(v10 + 8 * v59);
                  if (v63 >= *v64)
                  {
                    uint64_t v65 = *(void *)v64;
                    do
                    {
                      uint64_t v66 = v64;
                      long long v64 = v61;
                      *(void *)uint64_t v66 = *(void *)v61;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v67 = (2 * v60) | 1;
                      unsigned int v61 = (unsigned int *)(v10 + 8 * v67);
                      uint64_t v60 = 2 * v60 + 2;
                      if (v60 < v12)
                      {
                        unsigned int v68 = *v61;
                        __n128 result = (uint64_t *)v61[2];
                        if (*v61 <= result) {
                          unsigned int v68 = v61[2];
                        }
                        if (*v61 >= result) {
                          uint64_t v60 = v67;
                        }
                        else {
                          v61 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v68 = *v61;
                        uint64_t v60 = v67;
                      }
                    }
                    while (v68 >= v65);
                    *(void *)long long v64 = v65;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              do
              {
                uint64_t v69 = 0;
                uint64_t v70 = *(void *)v10;
                unsigned int v71 = (void *)v10;
                do
                {
                  unsigned int v72 = &v71[v69 + 1];
                  uint64_t v73 = (2 * v69) | 1;
                  uint64_t v74 = 2 * v69 + 2;
                  if (v74 < v12)
                  {
                    unsigned int v75 = *(_DWORD *)v72;
                    unsigned int v76 = *((_DWORD *)v72 + 2);
                    if (*(_DWORD *)v72 < v76) {
                      ++v72;
                    }
                    if (v75 < v76) {
                      uint64_t v73 = v74;
                    }
                  }
                  *unsigned int v71 = *v72;
                  unsigned int v71 = v72;
                  uint64_t v69 = v73;
                }
                while (v73 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v72 == --a2)
                {
                  uint64_t *v72 = v70;
                }
                else
                {
                  uint64_t *v72 = *a2;
                  *a2 = v70;
                  uint64_t v77 = (uint64_t)v72 - v10 + 8;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                    long long v79 = (uint64_t *)(v10 + 8 * v78);
                    if (*(_DWORD *)v79 < *(_DWORD *)v72)
                    {
                      uint64_t v80 = *v72;
                      do
                      {
                        unsigned int v81 = v72;
                        unsigned int v72 = v79;
                        uint64_t *v81 = *v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        long long v79 = (uint64_t *)(v10 + 8 * v78);
                      }
                      while (*(_DWORD *)v79 < v80);
                      uint64_t *v72 = v80;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = (unsigned int *)(v10 + 8 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC658BE8(v9, (unsigned int *)&v9[(unint64_t)v12 >> 1], (unsigned int *)a2 - 2);
            sub_1CC658BE8(v9 + 1, v14 - 2, (unsigned int *)a2 - 4);
            sub_1CC658BE8(v9 + 2, (unsigned int *)&v9[v13 + 1], (unsigned int *)a2 - 6);
            __n128 result = sub_1CC658BE8((uint64_t *)v14 - 1, v14, (unsigned int *)&v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *(void *)v14;
            *(void *)unint64_t v14 = v15;
          }
          else
          {
            __n128 result = sub_1CC658BE8(&v9[(unint64_t)v12 >> 1], (unsigned int *)v9, (unsigned int *)a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *((_DWORD *)v9 - 2) < *(_DWORD *)v9) {
            break;
          }
          uint64_t v29 = *v9;
          if (*((_DWORD *)a2 - 2) <= *v9)
          {
            unint64_t v31 = v9 + 1;
            do
            {
              unint64_t v10 = (unint64_t)v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (*(_DWORD *)v10 <= v29);
          }
          else
          {
            unint64_t v10 = (unint64_t)v9;
            do
            {
              unsigned int v30 = *(_DWORD *)(v10 + 8);
              v10 += 8;
            }
            while (v30 <= v29);
          }
          unint64_t v32 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v32 = a2;
            do
              unsigned int v33 = *((_DWORD *)v32-- - 2);
            while (v33 > v29);
          }
          while (v10 < (unint64_t)v32)
          {
            uint64_t v34 = *(void *)v10;
            *(void *)unint64_t v10 = *v32;
            uint64_t *v32 = v34;
            do
            {
              unsigned int v35 = *(_DWORD *)(v10 + 8);
              v10 += 8;
            }
            while (v35 <= v29);
            do
              unsigned int v36 = *((_DWORD *)v32-- - 2);
            while (v36 > v29);
          }
          unsigned int v37 = (uint64_t *)(v10 - 8);
          BOOL v4 = v10 - 8 >= (unint64_t)v9;
          BOOL v5 = v10 - 8 == (void)v9;
          if ((uint64_t *)(v10 - 8) != v9) {
            uint64_t *v9 = *v37;
          }
          a4 = 0;
          *unsigned int v37 = v29;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *v9;
        do
          unsigned int v18 = v9[++v16];
        while (v18 < v17);
        long long v19 = &v9[v16];
        unint64_t v20 = a2;
        if (v16 == 1)
        {
          unint64_t v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            unsigned int v22 = *((_DWORD *)v20-- - 2);
          }
          while (v22 >= v17);
        }
        else
        {
          do
            unsigned int v21 = *((_DWORD *)v20-- - 2);
          while (v21 >= v17);
        }
        unint64_t v10 = (unint64_t)&v9[v16];
        if (v19 < v20)
        {
          unint64_t v23 = v20;
          do
          {
            uint64_t v24 = *(void *)v10;
            *(void *)unint64_t v10 = *v23;
            uint64_t *v23 = v24;
            do
            {
              unsigned int v25 = *(_DWORD *)(v10 + 8);
              v10 += 8;
            }
            while (v25 < v17);
            do
              unsigned int v26 = *((_DWORD *)v23-- - 2);
            while (v26 >= v17);
          }
          while (v10 < (unint64_t)v23);
        }
        uint64_t v27 = (uint64_t *)(v10 - 8);
        if ((uint64_t *)(v10 - 8) != v9) {
          uint64_t *v9 = *v27;
        }
        *uint64_t v27 = v17;
        if (v19 >= v20) {
          break;
        }
LABEL_31:
        __n128 result = (uint64_t *)sub_1CC658504(v9, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = sub_1CC658C78((uint64_t)v9, (void *)(v10 - 8));
      __n128 result = (uint64_t *)sub_1CC658C78(v10, a2);
      if (result) {
        break;
      }
      if (!v28) {
        goto LABEL_31;
      }
    }
    a2 = (uint64_t *)(v10 - 8);
    if (!v28) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC658BE8(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v4 < v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v7 = *result;
        *__n128 result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *result;
    if (v4 >= v3)
    {
      *__n128 result = *(void *)a2;
      *(void *)a2 = v5;
      if (*a3 >= v5) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *__n128 result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

BOOL sub_1CC658C78(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      sub_1CC658BE8((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)a2 - 2);
      return 1;
    case 4:
      sub_1CC658E84((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      uint64_t v15 = (uint64_t *)(a1 + 16);
      uint64_t v16 = (uint64_t *)(a1 + 24);
      sub_1CC658E84((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), (void *)(a1 + 24));
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
      {
        uint64_t v17 = *v16;
        *uint64_t v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (*(_DWORD *)v16 < *(_DWORD *)v15)
        {
          uint64_t v18 = *v15;
          uint64_t v19 = *v16;
          uint64_t *v15 = *v16;
          *uint64_t v16 = v18;
          if (*(_DWORD *)(a1 + 8) > v19)
          {
            uint64_t v20 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v19;
            *(void *)(a1 + 16) = v20;
            if (*(_DWORD *)a1 > v19)
            {
              uint64_t v21 = *(void *)a1;
              *(void *)a1 = v19;
              *(void *)(a1 + 8) = v21;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = (_DWORD *)(a1 + 16);
      sub_1CC658BE8((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      unint64_t v8 = (void *)(a1 + 24);
      if ((void *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v8 < *v7)
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        *(void *)(a1 + v12 + 24) = *(void *)(a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        unsigned int v13 = *(_DWORD *)(a1 + v12 + 8);
        v12 -= 8;
        if (v13 <= v11)
        {
          unint64_t v14 = (void *)(a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      unint64_t v14 = (void *)a1;
LABEL_13:
      *unint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC658E84(uint64_t *a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  BOOL result = sub_1CC658BE8(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *(_DWORD *)a1)
      {
        uint64_t v11 = *a1;
        *a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CC658F1C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC658FB4(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  BOOL result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *BOOL result = -1;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      BOOL v12 = v4;
      unsigned int v13 = &v4[4 * v3];
      do
      {
        uint64_t v14 = *v12;
        if ((unint64_t)*v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          uint64_t v16 = v15 & (37 * v14);
          uint64_t v17 = *a1 + 32 * v16;
          uint64_t v18 = *(void *)v17;
          if (v14 != *(void *)v17)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v18 != -1)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v18 == -2;
              }
              if (v23) {
                uint64_t v21 = v17;
              }
              int v24 = v16 + v22++;
              uint64_t v16 = v24 & v15;
              uint64_t v17 = *a1 + 32 * v16;
              uint64_t v18 = *(void *)v17;
              if (v14 == *(void *)v17) {
                goto LABEL_12;
              }
            }
            if (v21) {
              uint64_t v17 = v21;
            }
          }
LABEL_12:
          *(void *)(v17 + 8) = 0;
          *(void *)(v17 + 16) = 0;
          *(void *)uint64_t v17 = v14;
          *(_DWORD *)(v17 + 24) = 0;
          *(void *)(v17 + 8) = v12[1];
          v12[1] = 0;
          *(_DWORD *)(v17 + 16) = *((_DWORD *)v12 + 4);
          *((_DWORD *)v12 + 4) = 0;
          int v19 = *(_DWORD *)(v17 + 20);
          *(_DWORD *)(v17 + 20) = *((_DWORD *)v12 + 5);
          *((_DWORD *)v12 + 5) = v19;
          int v20 = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v17 + 24) = *((_DWORD *)v12 + 6);
          *((_DWORD *)v12 + 6) = v20;
          ++*((_DWORD *)a1 + 2);
          MEMORY[0x1D25D9CD0](0, 8);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v25 = *((unsigned int *)a1 + 4);
  if (v25)
  {
    uint64_t v26 = 32 * v25;
    do
    {
      *BOOL result = -1;
      result += 4;
      v26 -= 32;
    }
    while (v26);
  }
  return result;
}

char *sub_1CC659194(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = (char *)operator new(8 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11) {
      memset(result, 255, 8 * v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v11 - 1;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *v14;
        if ((unint64_t)*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v16 = (37 * v15) & v13;
          uint64_t v17 = &v10[8 * v16];
          uint64_t v18 = *(void *)v17;
          if (v15 != *(void *)v17)
          {
            int v19 = 0;
            int v20 = 1;
            while (v18 != -1)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -2;
              }
              if (v21) {
                int v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v13;
              uint64_t v17 = &v10[8 * (v22 & v13)];
              uint64_t v18 = *(void *)v17;
              if (v15 == *(void *)v17) {
                goto LABEL_11;
              }
            }
            if (v19) {
              uint64_t v17 = v19;
            }
          }
LABEL_11:
          *(void *)uint64_t v17 = v15;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        ++v14;
      }
      while (v14 != &v4[v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v23 = *(unsigned int *)(a1 + 16);
  if (v23)
  {
    return (char *)memset(result, 255, 8 * v23);
  }
  return result;
}

__n128 sub_1CC65933C(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  uint64_t v4 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *(void *)(a1 + 96) = v4;
  return result;
}

void *sub_1CC6593BC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *__n128 result = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          BOOL v21 = 0;
          sub_1CC658F1C(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          uint64_t v15 = v21;
          void *v21 = *(void *)v13;
          v15[1] = v15 + 3;
          v15[2] = 0;
          unsigned int v16 = *(void **)(v13 + 8);
          if ((void *)v13 != v15)
          {
            int v17 = *(_DWORD *)(v13 + 16);
            if (v17)
            {
              if ((void *)(v13 + 24) == v16) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v15[1] = v16;
              int v18 = *(_DWORD *)(v13 + 20);
              *((_DWORD *)v15 + 4) = v17;
              *((_DWORD *)v15 + 5) = v18;
              *(void *)(v13 + 8) = v13 + 24;
              *(_DWORD *)(v13 + 20) = 0;
              unsigned int v16 = (void *)(v13 + 24);
              *(_DWORD *)(v13 + 16) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          if ((void *)(v13 + 24) != v16) {
            free(v16);
          }
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 24 * v19;
    do
    {
      *__n128 result = -1;
      result += 3;
      v20 -= 24;
    }
    while (v20);
  }
  return result;
}

void sub_1CC6595B0(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC659658(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unsigned int v8 = *(uint64_t **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 8 * v9;
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = *v8;
      *v8++ = 0;
      *v12++ = v13;
      v11 -= 8;
    }
    while (v11);
    uint64_t v14 = *(void *)a1 - 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + v10);
      *(void *)(v14 + v10) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      v10 -= 8;
    }
    while (v10);
    unsigned int v8 = *(uint64_t **)a1;
  }
  if (v8 != (uint64_t *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC659778()
{
}

uint64_t sub_1CC6597C0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1CC6597F0(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC659828()
{
  return "llvm.coveragemap";
}

double sub_1CC659834@<D0>(int a1@<W1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_1CC654970(a2, a1, a3);
}

void *llvm::coverage::CoverageFilenamesSectionWriter::CoverageFilenamesSectionWriter(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

{
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

uint64_t sub_1CC659844(unint64_t a1, llvm::raw_ostream *this, unsigned int a3)
{
  unsigned int v6 = 1;
  do
  {
    unsigned int v7 = v6;
    BOOL v8 = v6 < a3 || a1 > 0x7F;
    if (v8) {
      char v9 = 0x80;
    }
    else {
      char v9 = 0;
    }
    char v10 = v9 & 0x80 | a1 & 0x7F;
    uint64_t v11 = (char *)*((void *)this + 4);
    if ((unint64_t)v11 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, v10);
    }
    else
    {
      *((void *)this + 4) = v11 + 1;
      *uint64_t v11 = v10;
    }
    unsigned int v6 = v7 + 1;
    BOOL v8 = a1 > 0x7F;
    a1 >>= 7;
  }
  while (v8);
  uint64_t v12 = v7;
  if (v7 < a3)
  {
    unsigned int v13 = a3 - 1;
    if (v7 < a3 - 1)
    {
      unsigned int v14 = a3 - v6;
      do
      {
        uint64_t v15 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v15 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 128);
        }
        else
        {
          *((void *)this + 4) = v15 + 1;
          unsigned char *v15 = 0x80;
        }
        --v14;
      }
      while (v14);
      LODWORD(v12) = v13;
    }
    unsigned int v16 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v16 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 0);
    }
    else
    {
      *((void *)this + 4) = v16 + 1;
      *unsigned int v16 = 0;
    }
    return (v12 + 1);
  }
  return v12;
}

uint64_t *sub_1CC659970(uint64_t *result, unint64_t a2)
{
  if (a2 == 2)
  {
    long long v2 = result;
    uint64_t v3 = *result;
    do
    {
      *(_DWORD *)(v2[44] + 4 * HIDWORD(a2)) = 1;
      uint64_t v4 = 5 * HIDWORD(a2);
      __n128 result = (uint64_t *)sub_1CC659970(v2, *(void *)(v3 + 20 * HIDWORD(a2) + 4));
      uint64_t v3 = *v2;
      a2 = *(void *)(*v2 + 4 * v4 + 12);
    }
    while (a2 == 2);
  }
  return result;
}

uint64_t sub_1CC6599E4(uint64_t result, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 16;
    do
    {
      uint64_t v4 = *(void *)(v2 + 352);
      if (!*(_DWORD *)(v4 + 4 * HIDWORD(a2))) {
        break;
      }
      *(_DWORD *)(v4 + 4 * HIDWORD(a2)) = *(_DWORD *)(v2 + 24);
      unint64_t v5 = *(void *)v2 + 20 * HIDWORD(a2);
      unint64_t v6 = sub_1CD5DEBA8(v3, v5);
      uint64_t v7 = *(void *)(v2 + 16) + 20 * *(unsigned int *)(v2 + 24);
      long long v8 = *(_OWORD *)v6;
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      ++*(_DWORD *)(v2 + 24);
      __n128 result = sub_1CC6599E4(v2, *(void *)(v5 + 4));
      a2 = *(void *)(v5 + 12);
    }
    while (a2 == 2);
  }
  return result;
}

__n128 sub_1CC659A8C(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v7 = a1;
  if (a3 == 2)
  {
    unsigned __int32 v8 = a2[-2].n128_u32[1];
    unsigned __int32 v9 = a1[1].n128_u32[0];
    BOOL v10 = v8 >= v9;
    if (v8 == v9)
    {
      unsigned __int32 v12 = a2[-2].n128_u32[3];
      unsigned __int32 v11 = a2[-1].n128_u32[0];
      unsigned __int32 v14 = a1[1].n128_u32[2];
      unsigned __int32 v13 = a1[1].n128_u32[3];
      if (v12 == v14 && v11 == v13)
      {
        if ((signed __int32)a2[-1].n128_u32[3] >= (signed __int32)a1[2].n128_u32[2]) {
          return result;
        }
        goto LABEL_58;
      }
      if (v12 < v14)
      {
LABEL_58:
        unsigned int v47 = (__n128 *)((char *)a2 - 44);
        __n128 v48 = *a1;
        *(__n128 *)unsigned int v72 = a1[1];
        *(__n128 *)&v72[12] = *(__n128 *)((char *)a1 + 28);
        __n128 v49 = a2[-1];
        __n128 v50 = *(__n128 *)((char *)a2 - 28);
        *a1 = *(__n128 *)((char *)a2 - 44);
        a1[1] = v50;
        *(__n128 *)((char *)a1 + 28) = v49;
        *(__n128 *)((char *)v47 + 28) = *(__n128 *)&v72[12];
        __n128 result = *(__n128 *)v72;
        *unsigned int v47 = v48;
        v47[1] = *(__n128 *)v72;
        return result;
      }
      if (v14 < v12) {
        return result;
      }
      BOOL v10 = v11 >= v13;
    }
    if (v10) {
      return result;
    }
    goto LABEL_58;
  }
  if ((uint64_t)a3 > 128)
  {
    uint64_t v43 = a4;
    unint64_t v44 = a3 >> 1;
    uint64_t v45 = (__n128 *)((char *)a1 + 44 * (a3 >> 1));
    unint64_t v46 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1CC659A8C(a1, v45, v46, a4, a5);
      sub_1CC659A8C((char *)v7 + 44 * (a3 >> 1), a2, a3 - (a3 >> 1), v43, a5);
      sub_1CC65A20C((char *)v7, (char *)v7 + 44 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v43, a5);
      return result;
    }
    __n128 v51 = sub_1CC659E80(a1, v45, v46, a4, result);
    uint64_t v52 = v43 + 44 * v44;
    result.n128_u64[0] = sub_1CC659E80((__n128 *)((char *)v7 + 44 * (a3 >> 1)), a2, a3 - (a3 >> 1), v52, v51).n128_u64[0];
    uint64_t v53 = (__n128 *)(v43 + 44 * a3);
    uint64_t v54 = (__n128 *)v52;
    while (1)
    {
      if (v54 == v53)
      {
        if (v43 != v52)
        {
          uint64_t v68 = 0;
          do
          {
            uint64_t v69 = (char *)v7 + v68;
            __n128 result = *(__n128 *)(v43 + v68);
            long long v70 = *(_OWORD *)(v43 + v68 + 16);
            *(_OWORD *)(v69 + 28) = *(_OWORD *)(v43 + v68 + 28);
            *(__n128 *)uint64_t v69 = result;
            *((_OWORD *)v69 + 1) = v70;
            v68 += 44;
          }
          while (v43 + v68 != v52);
        }
        return result;
      }
      unsigned __int32 v55 = v54[1].n128_u32[0];
      unsigned __int32 v56 = *(_DWORD *)(v43 + 16);
      BOOL v57 = v55 >= v56;
      if (v55 != v56) {
        goto LABEL_70;
      }
      unsigned __int32 v59 = v54[1].n128_u32[2];
      unsigned __int32 v58 = v54[1].n128_u32[3];
      unsigned __int32 v61 = *(_DWORD *)(v43 + 24);
      unsigned __int32 v60 = *(_DWORD *)(v43 + 28);
      if (v59 != v61 || v58 != v60) {
        break;
      }
      if ((signed __int32)v54[2].n128_u32[2] >= *(_DWORD *)(v43 + 40))
      {
LABEL_73:
        __n128 result = *(__n128 *)v43;
        __n128 v64 = *(__n128 *)(v43 + 16);
        *(__n128 *)((char *)v7 + 28) = *(__n128 *)(v43 + 28);
        __n128 *v7 = result;
        v7[1] = v64;
        v43 += 44;
        goto LABEL_74;
      }
LABEL_71:
      __n128 result = *v54;
      __n128 v63 = v54[1];
      *(__n128 *)((char *)v7 + 28) = *(__n128 *)((char *)v54 + 28);
      __n128 *v7 = result;
      v7[1] = v63;
      uint64_t v54 = (__n128 *)((char *)v54 + 44);
LABEL_74:
      uint64_t v7 = (__n128 *)((char *)v7 + 44);
      if (v43 == v52)
      {
        if (v54 != v53)
        {
          uint64_t v65 = 0;
          do
          {
            uint64_t v66 = (char *)v7 + v65;
            __n128 result = *(__n128 *)((char *)v54 + v65);
            long long v67 = *(long long *)((char *)&v54[1] + v65);
            *(__n128 *)(v66 + 28) = *(__n128 *)((char *)v54 + v65 + 28);
            *(__n128 *)uint64_t v66 = result;
            *((_OWORD *)v66 + 1) = v67;
            v65 += 44;
          }
          while ((__n128 *)((char *)v54 + v65) != v53);
        }
        return result;
      }
    }
    if (v59 < v61) {
      goto LABEL_71;
    }
    if (v61 < v59) {
      goto LABEL_73;
    }
    BOOL v57 = v58 >= v60;
LABEL_70:
    if (v57) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  if (a1 == a2) {
    return result;
  }
  int v17 = (__n128 *)((char *)a1 + 44);
  if ((__n128 *)((char *)&a1[2].n128_f64[1] + 4) == a2) {
    return result;
  }
  uint64_t v18 = 0;
  uint64_t v19 = a1;
  do
  {
    uint64_t v20 = v19;
    uint64_t v19 = v17;
    unsigned __int32 v21 = v20[3].n128_u32[3];
    unsigned __int32 v22 = v20[1].n128_u32[0];
    if (v21 == v22)
    {
      unsigned __int32 v23 = v20[4].n128_u32[1];
      unsigned __int32 v24 = v20[4].n128_u32[2];
      unsigned __int32 v25 = v20[1].n128_u32[2];
      unsigned __int32 v26 = v20[1].n128_u32[3];
      if (v23 == v25 && v24 == v26)
      {
        if ((signed __int32)v20[5].n128_u32[1] >= (signed __int32)v20[2].n128_u32[2]) {
          goto LABEL_51;
        }
      }
      else if (v23 >= v25 && (v25 < v23 || v24 >= v26))
      {
        goto LABEL_51;
      }
    }
    else
    {
      if (v21 >= v22) {
        goto LABEL_51;
      }
      unsigned __int32 v23 = v20[4].n128_u32[1];
      unsigned __int32 v24 = v20[4].n128_u32[2];
    }
    __n128 v71 = *v19;
    unsigned __int32 v29 = v20[4].n128_u32[0];
    unint64_t v30 = *(unint64_t *)((char *)&v20[4].n128_u64[1] + 4);
    signed __int32 v31 = v20[5].n128_i32[1];
    *(__n128 *)((char *)v19 + 28) = *(__n128 *)((char *)v20 + 28);
    __n128 v32 = v20[1];
    __n128 *v19 = *v20;
    v19[1] = v32;
    unsigned int v33 = v7;
    if (v20 == v7) {
      goto LABEL_50;
    }
    uint64_t v34 = v18;
    do
    {
      unsigned int v35 = (_OWORD *)((char *)v7->n128_u64 + v34);
      unsigned __int32 v36 = *(_DWORD *)((char *)&v7[-1] + v34 - 12);
      BOOL v37 = v21 >= v36;
      if (v21 == v36)
      {
        unsigned __int32 v38 = *((_DWORD *)v35 - 5);
        unsigned __int32 v39 = *((_DWORD *)v35 - 4);
        if (v23 == v38 && v24 == v39)
        {
          unsigned int v33 = (__n128 *)((char *)v7 + v34);
          if (v31 >= *(signed __int32 *)((char *)&v7->n128_u32[-1] + v34)) {
            goto LABEL_50;
          }
          goto LABEL_48;
        }
        if (v23 < v38) {
          goto LABEL_48;
        }
        BOOL v37 = v38 < v23 || v24 >= v39;
      }
      if (v37)
      {
        unsigned int v33 = v20;
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v20 = (__n128 *)((char *)v20 - 44);
      long long v41 = *(_OWORD *)((char *)v35 - 28);
      *unsigned int v35 = *(_OWORD *)((char *)v35 - 44);
      v35[1] = v41;
      *(_OWORD *)((char *)v35 + 28) = *(v35 - 1);
      v34 -= 44;
    }
    while (v34);
    unsigned int v33 = v7;
LABEL_50:
    __n128 result = v71;
    __n128 *v33 = v71;
    v33[1].n128_u32[0] = v21;
    v33[1].n128_u32[1] = v29;
    v33[1].n128_u32[2] = v23;
    v33[1].n128_u32[3] = v24;
    v33[2].n128_u64[0] = v30;
    v33[2].n128_u32[2] = v31;
LABEL_51:
    int v17 = (__n128 *)((char *)v19 + 44);
    v18 += 44;
  }
  while ((__n128 *)((char *)&v19[2].n128_f64[1] + 4) != a2);
  return result;
}

__n128 sub_1CC659E80(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (!a3) {
    return result;
  }
  uint64_t v5 = a4;
  unsigned __int32 v8 = a1;
  if (a3 == 2)
  {
    BOOL v10 = (__n128 *)((char *)a2 - 44);
    unsigned __int32 v11 = a2[-2].n128_u32[1];
    unsigned __int32 v12 = a1[1].n128_u32[0];
    BOOL v13 = v11 >= v12;
    if (v11 == v12)
    {
      unsigned __int32 v15 = a2[-2].n128_u32[3];
      unsigned __int32 v14 = a2[-1].n128_u32[0];
      unsigned __int32 v17 = a1[1].n128_u32[2];
      unsigned __int32 v16 = a1[1].n128_u32[3];
      if (v15 == v17 && v14 == v16)
      {
        if ((signed __int32)a2[-1].n128_u32[3] < (signed __int32)a1[2].n128_u32[2]) {
          goto LABEL_14;
        }
        goto LABEL_71;
      }
      if (v15 < v17)
      {
LABEL_14:
        __n128 v19 = *v10;
        long long v20 = *(long long *)((char *)&a2[-2] + 4);
        *(__n128 *)(a4 + 28) = a2[-1];
        *(__n128 *)a4 = v19;
        *(_OWORD *)(a4 + 16) = v20;
        __n128 result = *a1;
        __n128 v21 = a1[1];
        __n128 v22 = *(__n128 *)((char *)a1 + 28);
LABEL_72:
        *(__n128 *)(a4 + 72) = v22;
        *(__n128 *)(a4 + 60) = v21;
        *(__n128 *)(a4 + 44) = result;
        return result;
      }
      if (v17 < v15)
      {
LABEL_71:
        __n128 v67 = *a1;
        __n128 v68 = a1[1];
        *(__n128 *)(a4 + 28) = *(__n128 *)((char *)a1 + 28);
        *(__n128 *)a4 = v67;
        *(__n128 *)(a4 + 16) = v68;
        __n128 result = *v10;
        __n128 v21 = *(__n128 *)((char *)a2 - 28);
        __n128 v22 = a2[-1];
        goto LABEL_72;
      }
      BOOL v13 = v14 >= v16;
    }
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_71;
  }
  if (a3 == 1)
  {
    __n128 result = *a1;
    __n128 v9 = a1[1];
    *(__n128 *)(a4 + 28) = *(__n128 *)((char *)a1 + 28);
    *(__n128 *)a4 = result;
    *(__n128 *)(a4 + 16) = v9;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    uint64_t v51 = 44 * (a3 >> 1);
    uint64_t v52 = (__n128 *)((char *)a1 + v51);
    sub_1CC659A8C(a1, (char *)a1 + v51, a3 >> 1, a4, a3 >> 1);
    sub_1CC659A8C((char *)v8 + v51, a2, a3 - (a3 >> 1), v5 + v51, a3 - (a3 >> 1));
    uint64_t v53 = (__n128 *)((char *)v8 + v51);
    while (1)
    {
      if (v53 == a2)
      {
        if (v8 != v52)
        {
          uint64_t v69 = 0;
          do
          {
            uint64_t v70 = v5 + v69;
            __n128 result = *(__n128 *)((char *)v8 + v69);
            long long v71 = *(long long *)((char *)&v8[1] + v69);
            *(__n128 *)(v70 + 28) = *(__n128 *)((char *)v8 + v69 + 28);
            *(__n128 *)uint64_t v70 = result;
            *(_OWORD *)(v70 + 16) = v71;
            v69 += 44;
          }
          while ((__n128 *)((char *)v8 + v69) != v52);
        }
        return result;
      }
      unsigned __int32 v54 = v53[1].n128_u32[0];
      unsigned __int32 v55 = v8[1].n128_u32[0];
      BOOL v56 = v54 >= v55;
      if (v54 != v55) {
        goto LABEL_61;
      }
      unsigned __int32 v58 = v53[1].n128_u32[2];
      unsigned __int32 v57 = v53[1].n128_u32[3];
      unsigned __int32 v60 = v8[1].n128_u32[2];
      unsigned __int32 v59 = v8[1].n128_u32[3];
      if (v58 != v60 || v57 != v59) {
        break;
      }
      if ((signed __int32)v53[2].n128_u32[2] >= (signed __int32)v8[2].n128_u32[2])
      {
LABEL_64:
        __n128 result = *v8;
        __n128 v63 = v8[1];
        *(__n128 *)(v5 + 28) = *(__n128 *)((char *)v8 + 28);
        *(__n128 *)uint64_t v5 = result;
        *(__n128 *)(v5 + 16) = v63;
        unsigned __int32 v8 = (__n128 *)((char *)v8 + 44);
        goto LABEL_65;
      }
LABEL_62:
      __n128 result = *v53;
      __n128 v62 = v53[1];
      *(__n128 *)(v5 + 28) = *(__n128 *)((char *)v53 + 28);
      *(__n128 *)uint64_t v5 = result;
      *(__n128 *)(v5 + 16) = v62;
      uint64_t v53 = (__n128 *)((char *)v53 + 44);
LABEL_65:
      v5 += 44;
      if (v8 == v52)
      {
        if (v53 != a2)
        {
          uint64_t v64 = 0;
          do
          {
            uint64_t v65 = v5 + v64;
            __n128 result = *(__n128 *)((char *)v53 + v64);
            long long v66 = *(long long *)((char *)&v53[1] + v64);
            *(__n128 *)(v65 + 28) = *(__n128 *)((char *)v53 + v64 + 28);
            *(__n128 *)uint64_t v65 = result;
            *(_OWORD *)(v65 + 16) = v66;
            v64 += 44;
          }
          while ((__n128 *)((char *)v53 + v64) != a2);
        }
        return result;
      }
    }
    if (v58 < v60) {
      goto LABEL_62;
    }
    if (v60 < v58) {
      goto LABEL_64;
    }
    BOOL v56 = v57 >= v59;
LABEL_61:
    if (v56) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (a1 != a2)
  {
    __n128 result = *a1;
    __n128 v23 = a1[1];
    *(__n128 *)(a4 + 28) = *(__n128 *)((char *)a1 + 28);
    *(__n128 *)a4 = result;
    *(__n128 *)(a4 + 16) = v23;
    unsigned __int32 v24 = (__n128 *)((char *)a1 + 44);
    if ((__n128 *)((char *)&a1[2].n128_f64[1] + 4) != a2)
    {
      uint64_t v25 = 0;
      unsigned __int32 v26 = (_OWORD *)a4;
      do
      {
        uint64_t v27 = v8;
        BOOL v28 = v26;
        unsigned __int32 v8 = v24;
        unsigned __int32 v26 = (_OWORD *)((char *)v26 + 44);
        unsigned __int32 v29 = v27[3].n128_u32[3];
        unsigned __int32 v30 = *((_DWORD *)v28 + 4);
        BOOL v31 = v29 >= v30;
        if (v29 == v30)
        {
          unsigned __int32 v32 = v27[4].n128_u32[1];
          unsigned __int32 v33 = v27[4].n128_u32[2];
          unsigned __int32 v34 = *((_DWORD *)v28 + 6);
          unsigned __int32 v35 = *((_DWORD *)v28 + 7);
          if (v32 == v34 && v33 == v35)
          {
            BOOL v37 = v26;
            if ((signed __int32)v27[5].n128_u32[1] >= *((_DWORD *)v28 + 10)) {
              goto LABEL_49;
            }
LABEL_32:
            long long v38 = v28[1];
            *unsigned __int32 v26 = *v28;
            v26[1] = v38;
            *(_OWORD *)((char *)v26 + 28) = *(_OWORD *)((char *)v28 + 28);
            BOOL v37 = (_OWORD *)a4;
            if (v28 == (_OWORD *)a4) {
              goto LABEL_49;
            }
            uint64_t v39 = v25;
            while (2)
            {
              uint64_t v40 = (_OWORD *)(a4 + v39);
              unsigned __int32 v41 = v27[3].n128_u32[3];
              unsigned __int32 v42 = *(_DWORD *)(a4 + v39 - 28);
              BOOL v43 = v41 >= v42;
              if (v41 == v42)
              {
                unsigned __int32 v44 = v27[4].n128_u32[1];
                unsigned __int32 v45 = v27[4].n128_u32[2];
                unsigned __int32 v46 = *((_DWORD *)v40 - 5);
                unsigned __int32 v47 = *((_DWORD *)v40 - 4);
                if (v44 == v46 && v45 == v47)
                {
                  BOOL v37 = (_OWORD *)(a4 + v39);
                  if ((signed __int32)v27[5].n128_u32[1] >= *(_DWORD *)(a4 + v39 - 4)) {
                    goto LABEL_49;
                  }
                }
                else if (v44 >= v46)
                {
                  BOOL v43 = v46 < v44 || v45 >= v47;
                  goto LABEL_43;
                }
              }
              else
              {
LABEL_43:
                if (v43)
                {
                  BOOL v37 = v28;
                  goto LABEL_49;
                }
              }
              BOOL v28 = (_OWORD *)((char *)v28 - 44);
              long long v49 = *(_OWORD *)((char *)v40 - 28);
              _OWORD *v40 = *(_OWORD *)((char *)v40 - 44);
              v40[1] = v49;
              *(_OWORD *)((char *)v40 + 28) = *(v40 - 1);
              v39 -= 44;
              if (!v39)
              {
                BOOL v37 = (_OWORD *)a4;
                goto LABEL_49;
              }
              continue;
            }
          }
          if (v32 < v34) {
            goto LABEL_32;
          }
          BOOL v31 = v34 < v32 || v33 >= v35;
        }
        BOOL v37 = v26;
        if (!v31) {
          goto LABEL_32;
        }
LABEL_49:
        __n128 result = *v8;
        __n128 v50 = v8[1];
        *(__n128 *)((char *)v37 + 28) = *(__n128 *)((char *)&v8[1] + 12);
        *BOOL v37 = result;
        v37[1] = v50;
        unsigned __int32 v24 = (__n128 *)((char *)v8 + 44);
        v25 += 44;
      }
      while ((__n128 *)((char *)&v8[2].n128_f64[1] + 4) != a2);
    }
  }
  return result;
}

char *sub_1CC65A20C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v11 = 0;
    unsigned int v12 = *((_DWORD *)a2 + 4);
    uint64_t v13 = -a4;
    while (1)
    {
      unsigned __int32 v14 = &result[v11];
      unsigned int v15 = *(_DWORD *)&result[v11 + 16];
      BOOL v16 = v12 >= v15;
      if (v12 != v15) {
        goto LABEL_16;
      }
      unsigned int v17 = *((_DWORD *)a2 + 6);
      unsigned int v18 = *((_DWORD *)a2 + 7);
      unsigned int v19 = *((_DWORD *)v14 + 6);
      unsigned int v20 = *((_DWORD *)v14 + 7);
      BOOL v21 = v17 == v19 && v18 == v20;
      if (!v21)
      {
        if (v17 < v19) {
          break;
        }
        BOOL v16 = v19 < v17 || v18 >= v20;
LABEL_16:
        if (!v16) {
          break;
        }
        goto LABEL_19;
      }
      if (*((_DWORD *)a2 + 10) < *(_DWORD *)&result[v11 + 40]) {
        break;
      }
LABEL_19:
      v11 += 44;
      BOOL v16 = __CFADD__(v13++, 1);
      if (v16) {
        return result;
      }
    }
    uint64_t v22 = -v13;
    __n128 v23 = &result[v11];
    if (-v13 >= v7)
    {
      if (v13 == -1)
      {
        unsigned int v130 = (long long *)&result[v11];
        *(_OWORD *)&v151[12] = *(long long *)((char *)v130 + 28);
        long long v146 = *v130;
        *(_OWORD *)unint64_t v151 = v130[1];
        long long v131 = *(_OWORD *)a2;
        long long v132 = *((_OWORD *)a2 + 1);
        *(long long *)((char *)v130 + 28) = *(_OWORD *)(a2 + 28);
        *unsigned int v130 = v131;
        v130[1] = v132;
        *(_OWORD *)(a2 + 28) = *(_OWORD *)&v151[12];
        *(_OWORD *)a2 = v146;
        *((_OWORD *)a2 + 1) = *(_OWORD *)v151;
        return result;
      }
      if (v13 > 0) {
        uint64_t v22 = 1 - v13;
      }
      uint64_t v43 = v22 >> 1;
      unsigned __int32 v26 = &result[44 * (v22 >> 1) + v11];
      uint64_t v25 = 0;
      if (a3 == a2)
      {
        unsigned __int32 v57 = a3;
LABEL_74:
        a2 = v26;
        goto LABEL_90;
      }
      unint64_t v44 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 2);
      unsigned __int32 v45 = &result[44 * v43 + v11];
      unsigned int v46 = *((_DWORD *)v45 + 4);
      unsigned __int32 v47 = a2;
      while (2)
      {
        unint64_t v48 = v44 >> 1;
        unsigned int v49 = *(_DWORD *)&v47[44 * (v44 >> 1) + 16];
        BOOL v50 = v49 >= v46;
        if (v49 == v46)
        {
          uint64_t v51 = &v47[44 * v48];
          unsigned int v52 = *((_DWORD *)v51 + 6);
          unsigned int v53 = *((_DWORD *)v51 + 7);
          unsigned int v54 = *((_DWORD *)v45 + 6);
          unsigned int v55 = *((_DWORD *)v45 + 7);
          if (v52 == v54 && v53 == v55)
          {
            if (*(_DWORD *)&v47[44 * v48 + 40] < *((_DWORD *)v45 + 10)) {
              goto LABEL_59;
            }
          }
          else
          {
            if (v52 >= v54)
            {
              BOOL v50 = v54 < v52 || v53 >= v55;
              goto LABEL_58;
            }
LABEL_59:
            v25 += v48 + 1;
            unint64_t v48 = v44 + ~v48;
          }
        }
        else
        {
LABEL_58:
          if (!v50) {
            goto LABEL_59;
          }
        }
        unsigned __int32 v47 = &a2[44 * v25];
        unint64_t v44 = v48;
        if (!v48) {
          goto LABEL_65;
        }
        continue;
      }
    }
    if (v7 >= 0) {
      uint64_t v24 = v7;
    }
    else {
      uint64_t v24 = v7 + 1;
    }
    uint64_t v25 = v24 >> 1;
    unsigned __int32 v26 = a2;
    if (v23 != a2)
    {
      unint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((a2 - result - v11) >> 2);
      BOOL v28 = &a2[44 * v25];
      unsigned int v29 = *((_DWORD *)v28 + 4);
      unsigned __int32 v30 = (unsigned int *)(v28 + 24);
      BOOL v31 = (unsigned int *)(v28 + 28);
      unsigned __int32 v32 = v28 + 40;
      unsigned __int32 v26 = &result[v11];
      while (1)
      {
        unint64_t v33 = v27 >> 1;
        unsigned __int32 v34 = &v26[44 * (v27 >> 1)];
        unsigned int v35 = *((_DWORD *)v34 + 4);
        BOOL v36 = v29 >= v35;
        if (v29 != v35) {
          goto LABEL_37;
        }
        unsigned int v37 = *v30;
        unsigned int v38 = *v31;
        uint64_t v39 = &v26[44 * v33];
        unsigned int v40 = *((_DWORD *)v39 + 6);
        unsigned int v41 = *((_DWORD *)v39 + 7);
        if (*v30 == v40 && v38 == v41) {
          break;
        }
        if (v37 >= v40)
        {
          BOOL v36 = v40 < v37 || v38 >= v41;
LABEL_37:
          if (!v36) {
            goto LABEL_40;
          }
LABEL_39:
          unsigned __int32 v26 = v34 + 44;
          unint64_t v33 = v27 + ~v33;
        }
LABEL_40:
        unint64_t v27 = v33;
        if (!v33) {
          goto LABEL_64;
        }
      }
      if (*v32 < *(_DWORD *)&v26[44 * v33 + 40]) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_64:
    uint64_t v43 = 0x2E8BA2E8BA2E8BA3 * ((v26 - result - v11) >> 2);
LABEL_65:
    unsigned __int32 v57 = &a2[44 * v25];
    v7 -= v25;
    if (v26 != a2)
    {
      if (v25)
      {
        if (v26 + 44 == a2)
        {
          *(_OWORD *)&v148[12] = *(_OWORD *)(v26 + 28);
          long long v143 = *(_OWORD *)v26;
          *(_OWORD *)unsigned int v148 = *((_OWORD *)v26 + 1);
          unsigned __int32 v61 = a2;
          unsigned int v137 = a6;
          uint64_t v139 = v43;
          __n128 v62 = a3;
          uint64_t v141 = a7;
          uint64_t v63 = v7;
          memmove(v26, v61, 44 * v25);
          uint64_t v7 = v63;
          uint64_t v43 = v139;
          a7 = v141;
          a3 = v62;
          a6 = v137;
          a2 = &v26[44 * v25];
          *(_OWORD *)a2 = v143;
          *((_OWORD *)a2 + 1) = *(_OWORD *)v148;
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v148[12];
        }
        else if (v25 == 1)
        {
          a2 = v26 + 44;
          *(_OWORD *)&v147[12] = *((_OWORD *)v57 - 1);
          long long v142 = *(_OWORD *)(v57 - 44);
          *(_OWORD *)unsigned int v147 = *(_OWORD *)(v57 - 28);
          if (v57 - 44 != v26)
          {
            unsigned __int32 v58 = a6;
            unsigned __int32 v59 = a3;
            uint64_t v138 = v43;
            uint64_t v140 = a7;
            uint64_t v60 = v7;
            memmove(v26 + 44, v26, v57 - 44 - v26);
            uint64_t v7 = v60;
            uint64_t v43 = v138;
            a7 = v140;
            a3 = v59;
            a6 = v58;
          }
          *(_OWORD *)(v26 + 28) = *(_OWORD *)&v147[12];
          *(_OWORD *)unsigned __int32 v26 = v142;
          *((_OWORD *)v26 + 1) = *(_OWORD *)v147;
          uint64_t v25 = 1;
        }
        else
        {
          uint64_t v64 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v26) >> 2);
          uint64_t v65 = v25;
          uint64_t v66 = v64;
          if (v64 == v25)
          {
            uint64_t v67 = 0;
            do
            {
              __n128 v68 = &a2[v67];
              uint64_t v69 = &v26[v67];
              *(_OWORD *)&v149[12] = *(_OWORD *)&v26[v67 + 28];
              long long v144 = *(_OWORD *)&v26[v67];
              *(_OWORD *)unsigned int v149 = *(_OWORD *)&v26[v67 + 16];
              long long v70 = *(_OWORD *)&a2[v67];
              long long v71 = *(_OWORD *)&a2[v67 + 16];
              *(_OWORD *)(v69 + 28) = *(_OWORD *)&a2[v67 + 28];
              *(_OWORD *)uint64_t v69 = v70;
              *((_OWORD *)v69 + 1) = v71;
              *(_OWORD *)(v68 + 28) = *(_OWORD *)&v149[12];
              *(_OWORD *)__n128 v68 = v144;
              *((_OWORD *)v68 + 1) = *(_OWORD *)v149;
              if (&v26[v67 + 44] == a2) {
                break;
              }
              BOOL v21 = 44 * v25 - 44 == v67;
              v67 += 44;
            }
            while (!v21);
          }
          else
          {
            do
            {
              uint64_t v72 = v66;
              uint64_t v66 = v65;
              uint64_t v65 = v72 % v65;
            }
            while (v65);
            uint64_t v73 = &v26[44 * v66];
            do
            {
              long long v74 = *(_OWORD *)(v73 - 44);
              long long v75 = *(_OWORD *)(v73 - 28);
              long long v76 = *((_OWORD *)v73 - 1);
              v73 -= 44;
              *(_OWORD *)&v150[12] = v76;
              long long v145 = v74;
              *(_OWORD *)int v150 = v75;
              uint64_t v77 = &v73[4 * ((a2 - v26) >> 2)];
              unint64_t v78 = v73;
              do
              {
                long long v79 = v78;
                unint64_t v78 = v77;
                long long v80 = *(_OWORD *)v77;
                long long v81 = *((_OWORD *)v77 + 1);
                *(_OWORD *)((char *)v79 + 28) = *(_OWORD *)(v77 + 28);
                *long long v79 = v80;
                v79[1] = v81;
                uint64_t v82 = 0x2E8BA2E8BA2E8BA3 * ((v57 - v77) >> 2);
                BOOL v83 = __OFSUB__(v64, v82);
                uint64_t v85 = v64 - v82;
                char v84 = (v85 < 0) ^ v83;
                uint64_t v77 = &v26[44 * v85];
                if (v84) {
                  uint64_t v77 = (char *)v78 + 4 * ((a2 - v26) >> 2);
                }
              }
              while (v77 != v73);
              *(_OWORD *)((char *)v78 + 28) = *(_OWORD *)&v150[12];
              *unint64_t v78 = v145;
              v78[1] = *(_OWORD *)v150;
            }
            while (v73 != v26);
            a2 = &v26[44 * v25];
          }
        }
        goto LABEL_90;
      }
      goto LABEL_74;
    }
    unsigned __int32 v26 = a2;
    a2 += 44 * v25;
LABEL_90:
    a4 = -(v43 + v13);
    if (v25 + v43 >= v7 - v43 - v13)
    {
      unsigned int v93 = a3;
      uint64_t v94 = -(v43 + v13);
      unsigned int v95 = v23;
      unsigned int v90 = a6;
      uint64_t v91 = a7;
      sub_1CC65A20C(a2, v57, v93, v94, v7);
      __n128 result = v95;
      unsigned __int32 v57 = v26;
      uint64_t v7 = v25;
      a4 = v43;
      a3 = a2;
    }
    else
    {
      unsigned int v86 = v23;
      uint64_t v87 = v26;
      long long v88 = a3;
      uint64_t v89 = v43;
      unsigned int v90 = a6;
      uint64_t v91 = a7;
      uint64_t v92 = v7;
      sub_1CC65A20C(v86, v87, a2, v89, v25);
      uint64_t v7 = v92;
      a3 = v88;
      __n128 result = a2;
    }
    a2 = v57;
    a6 = v90;
    a7 = v91;
    if (!v7) {
      return result;
    }
  }
  if (a4 > v7)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v96 = 0;
    do
    {
      unsigned int v97 = &a6[v96];
      long long v98 = *(_OWORD *)&a2[v96];
      long long v99 = *(_OWORD *)&a2[v96 + 16];
      *(_OWORD *)(v97 + 28) = *(_OWORD *)&a2[v96 + 28];
      *(_OWORD *)unsigned int v97 = v98;
      *((_OWORD *)v97 + 1) = v99;
      v96 += 44;
    }
    while (&a2[v96] != a3);
    if (!v96) {
      return result;
    }
    long long v100 = &a6[v96];
    for (uint64_t i = a3 - 44; ; i -= 44)
    {
      if (a2 == result)
      {
        if (v100 != a6)
        {
          uint64_t v133 = 0;
          do
          {
            long long v134 = &i[v133];
            long long v135 = *(_OWORD *)&v100[v133 - 44];
            long long v136 = *(_OWORD *)&v100[v133 - 28];
            *(_OWORD *)(v134 + 28) = *(_OWORD *)&v100[v133 - 16];
            *(_OWORD *)long long v134 = v135;
            *((_OWORD *)v134 + 1) = v136;
            v133 -= 44;
          }
          while (&v100[v133] != a6);
        }
        return result;
      }
      unsigned int v102 = a2 - 44;
      unsigned int v103 = *((_DWORD *)v100 - 7);
      unsigned int v104 = *((_DWORD *)a2 - 7);
      BOOL v105 = v103 >= v104;
      if (v103 != v104) {
        goto LABEL_110;
      }
      unsigned int v107 = *((_DWORD *)v100 - 5);
      unsigned int v106 = *((_DWORD *)v100 - 4);
      unsigned int v109 = *((_DWORD *)a2 - 5);
      unsigned int v108 = *((_DWORD *)a2 - 4);
      if (v107 != v109 || v106 != v108) {
        break;
      }
      if (*((_DWORD *)v100 - 1) >= *((_DWORD *)a2 - 1))
      {
LABEL_113:
        unsigned int v102 = v100 - 44;
        v100 -= 44;
        goto LABEL_114;
      }
LABEL_111:
      a2 -= 44;
LABEL_114:
      long long v111 = *(_OWORD *)v102;
      long long v112 = *((_OWORD *)v102 + 1);
      *(_OWORD *)(i + 28) = *(_OWORD *)(v102 + 28);
      *(_OWORD *)uint64_t i = v111;
      *((_OWORD *)i + 1) = v112;
      if (v100 == a6) {
        return result;
      }
    }
    if (v107 < v109) {
      goto LABEL_111;
    }
    if (v109 < v107) {
      goto LABEL_113;
    }
    BOOL v105 = v106 >= v108;
LABEL_110:
    if (v105) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (result == a2) {
    return result;
  }
  uint64_t v113 = 0;
  do
  {
    long long v114 = &a6[v113];
    long long v115 = *(_OWORD *)&result[v113];
    long long v116 = *(_OWORD *)&result[v113 + 16];
    *(_OWORD *)(v114 + 28) = *(_OWORD *)&result[v113 + 28];
    *(_OWORD *)long long v114 = v115;
    *((_OWORD *)v114 + 1) = v116;
    v113 += 44;
  }
  while (&result[v113] != a2);
  if (!v113) {
    return result;
  }
  long long v117 = a6;
  while (a2 != a3)
  {
    unsigned int v118 = *((_DWORD *)a2 + 4);
    unsigned int v119 = *((_DWORD *)v117 + 4);
    BOOL v120 = v118 >= v119;
    if (v118 != v119) {
      goto LABEL_130;
    }
    unsigned int v122 = *((_DWORD *)a2 + 6);
    unsigned int v121 = *((_DWORD *)a2 + 7);
    unsigned int v124 = *((_DWORD *)v117 + 6);
    unsigned int v123 = *((_DWORD *)v117 + 7);
    if (v122 != v124 || v121 != v123)
    {
      if (v122 < v124) {
        goto LABEL_131;
      }
      if (v124 < v122) {
        goto LABEL_133;
      }
      BOOL v120 = v121 >= v123;
LABEL_130:
      if (v120) {
        goto LABEL_133;
      }
      goto LABEL_131;
    }
    if (*((_DWORD *)a2 + 10) >= *((_DWORD *)v117 + 10))
    {
LABEL_133:
      long long v128 = *(_OWORD *)v117;
      long long v129 = *((_OWORD *)v117 + 1);
      *(_OWORD *)(result + 28) = *(_OWORD *)(v117 + 28);
      *(_OWORD *)__n128 result = v128;
      *((_OWORD *)result + 1) = v129;
      v117 += 44;
      goto LABEL_134;
    }
LABEL_131:
    long long v126 = *(_OWORD *)a2;
    long long v127 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(result + 28) = *(_OWORD *)(a2 + 28);
    *(_OWORD *)__n128 result = v126;
    *((_OWORD *)result + 1) = v127;
    a2 += 44;
LABEL_134:
    result += 44;
    if (&a6[v113] == v117) {
      return result;
    }
  }

  return (char *)memmove(result, v117, a6 - v117 + v113);
}

char *llvm::coverage::CoverageMappingIterator::increment(char *this)
{
  if (!*((_DWORD *)this + 20))
  {
    uint64_t v1 = this;
    this = (char *)(*(void *(**)(char **__return_ptr))(**(void **)this + 16))(&v9);
    uint64_t v2 = v9;
    if (v9)
    {
      unsigned __int32 v8 = v1;
      __n128 v9 = 0;
      if ((*(unsigned int (**)(char *, void *))(*(void *)v2 + 48))(v2, &llvm::ErrorList::ID))
      {
        uint64_t v3 = (uint64_t *)*((void *)v2 + 1);
        uint64_t v4 = (uint64_t *)*((void *)v2 + 2);
        if (v3 == v4)
        {
          uint64_t v5 = 0;
        }
        else
        {
          uint64_t v5 = 0;
          do
          {
            uint64_t v13 = v5;
            uint64_t v6 = *v3;
            uint64_t *v3 = 0;
            uint64_t v11 = v6;
            sub_1CC65EA90(&v12, &v11, (uint64_t *)&v8);
            sub_1CD451630(&v13, &v12, &v14);
            uint64_t v5 = v14;
            unsigned __int32 v14 = 0;
            if (v12) {
              (*(void (**)(char *))(*(void *)v12 + 8))(v12);
            }
            uint64_t v7 = v11;
            uint64_t v11 = 0;
            if (v7) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
            if (v13) {
              (*(void (**)(char *))(*(void *)v13 + 8))(v13);
            }
            ++v3;
          }
          while (v3 != v4);
        }
        BOOL v10 = v5;
      }
      else
      {
        unsigned __int32 v14 = v2;
        sub_1CC65EA90(&v10, &v14, (uint64_t *)&v8);
        uint64_t v2 = v14;
        if (!v14) {
          goto LABEL_20;
        }
      }
      (*(void (**)(char *))(*(void *)v2 + 8))(v2);
LABEL_20:
      this = v9;
      if (v9) {
        return (char *)(*(uint64_t (**)(char *))(*(void *)v9 + 8))(v9);
      }
    }
  }
  return this;
}

char **llvm::coverage::RawCoverageReader::readString@<X0>(char **this@<X0>, llvm::StringRef *a2@<X1>, void *a3@<X8>)
{
  unint64_t v10 = 0;
  __n128 result = llvm::coverage::RawCoverageReader::readSize(this, &v10, a3);
  if (!*a3)
  {
    unint64_t v7 = v10;
    unint64_t v8 = (unint64_t)this[1];
    if (v8 >= v10) {
      unint64_t v8 = v10;
    }
    *(void *)a2 = *this;
    *((void *)a2 + 1) = v8;
    __n128 v9 = this[1];
    if ((unint64_t)v9 < v7) {
      unint64_t v7 = (unint64_t)this[1];
    }
    *this += v7;
    this[1] = &v9[-v7];
    *a3 = 0;
  }
  return result;
}

void llvm::coverage::RawCoverageFilenamesReader::read(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t v10 = 0;
  llvm::coverage::RawCoverageReader::readSize(a1, &v10, a3);
  if (!*a3)
  {
    unint64_t v6 = v10;
    if (!v10) {
      operator new();
    }
    if (a2 > 2)
    {
      llvm::coverage::RawCoverageReader::readULEB128(a1, &v9, a3);
      if (!*a3)
      {
        unint64_t v8 = 0;
        llvm::coverage::RawCoverageReader::readSize(a1, &v8, a3);
        if (!*a3)
        {
          if (v8) {
            operator new();
          }
          llvm::coverage::RawCoverageFilenamesReader::readUncompressed(a1, a2, v6, a3);
        }
      }
    }
    else
    {
      unint64_t v7 = v10;
      llvm::coverage::RawCoverageFilenamesReader::readUncompressed(a1, a2, v7, a3);
    }
  }
}

void llvm::coverage::RawCoverageFilenamesReader::readUncompressed(char **this@<X0>, int a2@<W1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v4 = a3;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (a2 <= 4)
  {
    if (a3)
    {
      uint64_t v7 = 0;
      while (1)
      {
        __len[0] = 0;
        __len[1] = 0;
        llvm::coverage::RawCoverageReader::readString(this, (llvm::StringRef *)__len, a4);
        if (*a4) {
          return;
        }
        unint64_t v8 = this[2];
        unint64_t v9 = (const void *)__len[0];
        if (__len[0]) {
          break;
        }
        long long __dst = 0uLL;
        unint64_t v115 = 0;
LABEL_16:
        unint64_t v15 = *((void *)v8 + 2);
        unint64_t v16 = *((void *)v8 + 1);
        if (v16 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)v8) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_142;
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)v8) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          unsigned int v122 = v8 + 16;
          if (v20)
          {
            if (v20 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_143;
            }
            BOOL v21 = (char *)operator new(24 * v20);
          }
          else
          {
            BOOL v21 = 0;
          }
          uint64_t v22 = &v21[24 * v17];
          *((void *)v22 + 2) = v115;
          *(_OWORD *)uint64_t v22 = __dst;
          unint64_t v115 = 0;
          long long __dst = 0uLL;
          uint64_t v24 = *(void **)v8;
          uint64_t v23 = *((void *)v8 + 1);
          if (v23 == *(void *)v8)
          {
            char v28 = 0;
            unint64_t v27 = (void *)*((void *)v8 + 1);
            uint64_t v25 = v22;
          }
          else
          {
            uint64_t v25 = &v21[24 * v17];
            do
            {
              long long v26 = *(_OWORD *)(v23 - 24);
              *((void *)v25 - 1) = *(void *)(v23 - 8);
              *(_OWORD *)(v25 - 24) = v26;
              v25 -= 24;
              *(void *)(v23 - 16) = 0;
              *(void *)(v23 - 8) = 0;
              *(void *)(v23 - 24) = 0;
              v23 -= 24;
            }
            while ((void *)v23 != v24);
            unint64_t v27 = *(void **)v8;
            uint64_t v23 = *((void *)v8 + 1);
            char v28 = HIBYTE(v115);
          }
          unsigned int v29 = v22 + 24;
          *(void *)unint64_t v8 = v25;
          unsigned int v118 = v27;
          size_t v119 = (size_t)v27;
          *((void *)v8 + 1) = v22 + 24;
          uint64_t v120 = v23;
          uint64_t v30 = *((void *)v8 + 2);
          *((void *)v8 + 2) = &v21[24 * v20];
          uint64_t v121 = v30;
          sub_1CBF4EE0C((uint64_t)&v118);
          *((void *)v8 + 1) = v29;
          if (v28 < 0) {
            operator delete((void *)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v16 = __dst;
          *(void *)(v16 + 16) = v115;
          *((void *)v8 + 1) = v16 + 24;
        }
        if (++v7 == v4) {
          goto LABEL_140;
        }
      }
      size_t v10 = __len[1];
      if (__len[1] > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
      if (__len[1] >= 0x17)
      {
        size_t v12 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[1] | 7) != 0x17) {
          size_t v12 = __len[1] | 7;
        }
        size_t v13 = v12 + 1;
        p_dst = (long long *)operator new(v12 + 1);
        unint64_t v14 = v13 | 0x8000000000000000;
        unint64_t v4 = a3;
        *((void *)&__dst + 1) = v10;
        unint64_t v115 = v14;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v115) = __len[1];
        p_dst = &__dst;
        if (!__len[1]) {
          goto LABEL_15;
        }
      }
      memmove(p_dst, v9, v10);
LABEL_15:
      *((unsigned char *)p_dst + v10) = 0;
      goto LABEL_16;
    }
    goto LABEL_140;
  }
  __src = 0;
  size_t v113 = 0;
  llvm::coverage::RawCoverageReader::readString(this, (llvm::StringRef *)&__src, a4);
  if (*a4) {
    return;
  }
  BOOL v31 = this[2];
  unsigned __int32 v32 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v115 = 0;
    goto LABEL_49;
  }
  size_t v33 = v113;
  if (v113 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_142;
  }
  if (v113 >= 0x17)
  {
    size_t v35 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17) {
      size_t v35 = v113 | 7;
    }
    size_t v36 = v35 + 1;
    unsigned __int32 v34 = (long long *)operator new(v35 + 1);
    unint64_t v37 = v36 | 0x8000000000000000;
    unint64_t v4 = a3;
    *((void *)&__dst + 1) = v33;
    unint64_t v115 = v37;
    *(void *)&long long __dst = v34;
  }
  else
  {
    HIBYTE(v115) = v113;
    unsigned __int32 v34 = &__dst;
    if (!v113) {
      goto LABEL_48;
    }
  }
  memmove(v34, v32, v33);
LABEL_48:
  *((unsigned char *)v34 + v33) = 0;
LABEL_49:
  unint64_t v38 = *((void *)v31 + 2);
  unint64_t v39 = *((void *)v31 + 1);
  if (v39 < v38)
  {
    *(_OWORD *)unint64_t v39 = __dst;
    *(void *)(v39 + 16) = v115;
    unsigned int v40 = (char *)(v39 + 24);
    goto LABEL_67;
  }
  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(void *)v31) >> 3);
  unint64_t v42 = v41 + 1;
  if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_142:
  }
    abort();
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(void *)v31) >> 3);
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x555555555555555) {
    unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v44 = v42;
  }
  unsigned int v122 = v31 + 16;
  if (v44)
  {
    if (v44 > 0xAAAAAAAAAAAAAAALL) {
LABEL_143:
    }
      sub_1CB833614();
    unsigned __int32 v45 = (char *)operator new(24 * v44);
  }
  else
  {
    unsigned __int32 v45 = 0;
  }
  unsigned int v46 = &v45[24 * v41];
  *(_OWORD *)unsigned int v46 = __dst;
  *((void *)v46 + 2) = v115;
  unint64_t v48 = *(void **)v31;
  uint64_t v47 = *((void *)v31 + 1);
  if (v47 == *(void *)v31)
  {
    uint64_t v51 = (void *)*((void *)v31 + 1);
    unsigned int v49 = &v45[24 * v41];
  }
  else
  {
    unsigned int v49 = &v45[24 * v41];
    do
    {
      long long v50 = *(_OWORD *)(v47 - 24);
      *((void *)v49 - 1) = *(void *)(v47 - 8);
      *(_OWORD *)(v49 - 24) = v50;
      v49 -= 24;
      *(void *)(v47 - 16) = 0;
      *(void *)(v47 - 8) = 0;
      *(void *)(v47 - 24) = 0;
      v47 -= 24;
    }
    while ((void *)v47 != v48);
    uint64_t v51 = *(void **)v31;
    uint64_t v47 = *((void *)v31 + 1);
  }
  unsigned int v40 = v46 + 24;
  *(void *)BOOL v31 = v49;
  unsigned int v118 = v51;
  size_t v119 = (size_t)v51;
  *((void *)v31 + 1) = v46 + 24;
  uint64_t v120 = v47;
  uint64_t v52 = *((void *)v31 + 2);
  *((void *)v31 + 2) = &v45[24 * v44];
  uint64_t v121 = v52;
  sub_1CBF4EE0C((uint64_t)&v118);
LABEL_67:
  *((void *)v31 + 1) = v40;
  if (v4 >= 2)
  {
    uint64_t v53 = 1;
    while (1)
    {
      long long v110 = 0;
      size_t v111 = 0;
      llvm::coverage::RawCoverageReader::readString(this, (llvm::StringRef *)&v110, a4);
      if (*a4) {
        return;
      }
      LOWORD(v122) = 261;
      unsigned int v55 = v110;
      size_t v54 = v111;
      unsigned int v118 = v110;
      size_t v119 = v111;
      if (llvm::sys::path::is_absolute((const char **)&v118, 0))
      {
        BOOL v56 = this[2];
        if (v55)
        {
          if (v54 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_142;
          }
          if (v54 >= 0x17)
          {
            uint64_t v75 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v54 | 7) != 0x17) {
              uint64_t v75 = v54 | 7;
            }
            uint64_t v76 = v75 + 1;
            unsigned __int32 v57 = (long long *)operator new(v75 + 1);
            *((void *)&__dst + 1) = v54;
            unint64_t v115 = v76 | 0x8000000000000000;
            *(void *)&long long __dst = v57;
          }
          else
          {
            HIBYTE(v115) = v54;
            unsigned __int32 v57 = &__dst;
            if (!v54)
            {
LABEL_107:
              *((unsigned char *)v57 + v54) = 0;
              unint64_t v4 = a3;
LABEL_108:
              unint64_t v77 = *((void *)v56 + 2);
              unint64_t v78 = *((void *)v56 + 1);
              if (v78 >= v77)
              {
                unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *(void *)v56) >> 3);
                unint64_t v80 = v79 + 1;
                if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_142;
                }
                unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *(void *)v56) >> 3);
                if (2 * v81 > v80) {
                  unint64_t v80 = 2 * v81;
                }
                if (v81 >= 0x555555555555555) {
                  unint64_t v82 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v82 = v80;
                }
                unsigned int v122 = v56 + 16;
                if (v82)
                {
                  if (v82 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_143;
                  }
                  BOOL v83 = (char *)operator new(24 * v82);
                }
                else
                {
                  BOOL v83 = 0;
                }
                char v84 = &v83[24 * v79];
                *((void *)v84 + 2) = v115;
                *(_OWORD *)char v84 = __dst;
                unint64_t v115 = 0;
                long long __dst = 0uLL;
                unsigned int v86 = *(void **)v56;
                uint64_t v85 = *((void *)v56 + 1);
                if (v85 == *(void *)v56)
                {
                  char v90 = 0;
                  uint64_t v89 = (void *)*((void *)v56 + 1);
                  uint64_t v87 = v84;
                }
                else
                {
                  uint64_t v87 = &v83[24 * v79];
                  do
                  {
                    long long v88 = *(_OWORD *)(v85 - 24);
                    *((void *)v87 - 1) = *(void *)(v85 - 8);
                    *(_OWORD *)(v87 - 24) = v88;
                    v87 -= 24;
                    *(void *)(v85 - 16) = 0;
                    *(void *)(v85 - 8) = 0;
                    *(void *)(v85 - 24) = 0;
                    v85 -= 24;
                  }
                  while ((void *)v85 != v86);
                  uint64_t v89 = *(void **)v56;
                  uint64_t v85 = *((void *)v56 + 1);
                  char v90 = HIBYTE(v115);
                }
                long long v98 = v84 + 24;
                *(void *)BOOL v56 = v87;
                unsigned int v118 = v89;
                size_t v119 = (size_t)v89;
                *((void *)v56 + 1) = v84 + 24;
                uint64_t v120 = v85;
                uint64_t v99 = *((void *)v56 + 2);
                *((void *)v56 + 2) = &v83[24 * v82];
                uint64_t v121 = v99;
                sub_1CBF4EE0C((uint64_t)&v118);
                *((void *)v56 + 1) = v98;
                unint64_t v4 = a3;
                if (v90 < 0) {
                  operator delete((void *)__dst);
                }
              }
              else
              {
                *(_OWORD *)unint64_t v78 = __dst;
                *(void *)(v78 + 16) = v115;
                *((void *)v56 + 1) = v78 + 24;
              }
              goto LABEL_137;
            }
          }
          memmove(v57, v55, v54);
          goto LABEL_107;
        }
        long long __dst = 0uLL;
        unint64_t v115 = 0;
        goto LABEL_108;
      }
      unsigned int v118 = &v121;
      uint64_t v120 = 256;
      size_t v58 = (size_t)this[4];
      if (v58) {
        break;
      }
      size_t v61 = 0;
      unsigned __int32 v59 = (char *)__src;
      size_t v58 = v113;
      size_t v119 = 0;
      if (v113 >= 0x101) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v113)
      {
        uint64_t v60 = (uint64_t *)v118;
LABEL_83:
        memcpy(v60, v59, v58);
        size_t v61 = v119;
      }
      size_t v119 = v61 + v58;
      LOWORD(v117) = 261;
      *(void *)&long long __dst = v55;
      *((void *)&__dst + 1) = v54;
      __int16 v109 = 257;
      __int16 v106 = 257;
      __int16 v104 = 257;
      llvm::sys::path::append(&v118, 0, (const char **)&__dst, (void **)__len, (uint64_t)v105, (uint64_t)v103);
      size_t v62 = v119;
      if (v119 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
      uint64_t v63 = this[2];
      uint64_t v64 = v118;
      if (v119 >= 0x17)
      {
        size_t v66 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17) {
          size_t v66 = v119 | 7;
        }
        size_t v67 = v66 + 1;
        uint64_t v65 = operator new(v66 + 1);
        __len[1] = v62;
        unint64_t v108 = v67 | 0x8000000000000000;
        __len[0] = (size_t)v65;
      }
      else
      {
        HIBYTE(v108) = v119;
        uint64_t v65 = __len;
        if (!v119) {
          goto LABEL_92;
        }
      }
      memmove(v65, v64, v62);
LABEL_92:
      *((unsigned char *)v65 + v62) = 0;
      unint64_t v68 = *((void *)v63 + 2);
      unint64_t v69 = *((void *)v63 + 1);
      if (v69 >= v68)
      {
        unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *(void *)v63) >> 3);
        unint64_t v71 = v70 + 1;
        if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_142;
        }
        unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *(void *)v63) >> 3);
        if (2 * v72 > v71) {
          unint64_t v71 = 2 * v72;
        }
        if (v72 >= 0x555555555555555) {
          unint64_t v73 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v73 = v71;
        }
        long long v117 = v63 + 16;
        if (v73)
        {
          if (v73 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_143;
          }
          long long v74 = (char *)operator new(24 * v73);
        }
        else
        {
          long long v74 = 0;
        }
        uint64_t v91 = &v74[24 * v70];
        *((void *)v91 + 2) = v108;
        *(_OWORD *)uint64_t v91 = *(_OWORD *)__len;
        __len[1] = 0;
        unint64_t v108 = 0;
        __len[0] = 0;
        uint64_t v93 = *(void *)v63;
        unint64_t v92 = *((void *)v63 + 1);
        if (v92 == *(void *)v63)
        {
          char v97 = 0;
          uint64_t v96 = *((void *)v63 + 1);
          uint64_t v94 = v91;
        }
        else
        {
          uint64_t v94 = &v74[24 * v70];
          do
          {
            long long v95 = *(_OWORD *)(v92 - 24);
            *((void *)v94 - 1) = *(void *)(v92 - 8);
            *(_OWORD *)(v94 - 24) = v95;
            v94 -= 24;
            *(void *)(v92 - 16) = 0;
            *(void *)(v92 - 8) = 0;
            *(void *)(v92 - 24) = 0;
            v92 -= 24;
          }
          while (v92 != v93);
          uint64_t v96 = *(void *)v63;
          unint64_t v92 = *((void *)v63 + 1);
          char v97 = HIBYTE(v108);
        }
        long long v100 = v91 + 24;
        *(void *)uint64_t v63 = v94;
        *(void *)&long long __dst = v96;
        *((void *)&__dst + 1) = v96;
        *((void *)v63 + 1) = v91 + 24;
        unint64_t v115 = v92;
        uint64_t v101 = *((void *)v63 + 2);
        *((void *)v63 + 2) = &v74[24 * v73];
        uint64_t v116 = v101;
        sub_1CBF4EE0C((uint64_t)&__dst);
        *((void *)v63 + 1) = v100;
        unint64_t v4 = a3;
        if (v97 < 0) {
          operator delete((void *)__len[0]);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v69 = *(_OWORD *)__len;
        *(void *)(v69 + 16) = v108;
        *((void *)v63 + 1) = v69 + 24;
        unint64_t v4 = a3;
      }
      if (v118 != &v121) {
        free(v118);
      }
LABEL_137:
      if (++v53 == v4) {
        goto LABEL_140;
      }
    }
    unsigned __int32 v59 = this[3];
    size_t v119 = 0;
    uint64_t v60 = &v121;
    if (v58 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    goto LABEL_83;
  }
LABEL_140:
  *a4 = 0;
}

void llvm::coverage::RawCoverageMappingReader::readMappingRegionsSubArray(char **a1@<X0>, char **a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v52 = 0;
  llvm::coverage::RawCoverageReader::readSize(a1, &v52, a5);
  if (!*a5)
  {
    unint64_t v10 = v52;
    if (v52)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 0;
      while (1)
      {
        unint64_t v50 = 0;
        unint64_t v51 = 0;
        unint64_t v49 = 0;
        llvm::coverage::RawCoverageReader::readIntMax(a1, &v49, 0xFFFFFFFFuLL, a5);
        if (*a5) {
          break;
        }
        if ((v49 & 3) != 0)
        {
          llvm::coverage::RawCoverageMappingReader::decodeCounter((uint64_t)a1, v49, &v51, a5);
          if (*a5) {
            return;
          }
          uint64_t v44 = v12;
          int v14 = 0;
          LODWORD(v13) = 0;
        }
        else
        {
          unint64_t v13 = v49 >> 3;
          if ((v49 & 4) != 0)
          {
            if (v13 >= a4) {
              goto LABEL_57;
            }
            uint64_t v44 = v12;
            int v14 = 1;
          }
          else if (v13)
          {
            if (v13 == 4)
            {
              llvm::coverage::RawCoverageMappingReader::readCounter(a1, &v51, a5);
              if (*a5) {
                return;
              }
              llvm::coverage::RawCoverageMappingReader::readCounter(a1, &v50, a5);
              if (*a5) {
                return;
              }
              uint64_t v44 = v12;
              LODWORD(v13) = 0;
              int v14 = 4;
            }
            else
            {
              if (v13 != 2) {
                goto LABEL_57;
              }
              uint64_t v44 = v12;
              LODWORD(v13) = 0;
              int v14 = 2;
            }
          }
          else
          {
            uint64_t v44 = v12;
            int v14 = 0;
          }
        }
        unint64_t v47 = 0;
        unint64_t v48 = 0;
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        llvm::coverage::RawCoverageReader::readIntMax(a1, &v48, 0xFFFFFFFFuLL, a5);
        if (*a5) {
          break;
        }
        llvm::coverage::RawCoverageReader::readULEB128(a1, &v47, a5);
        if (*a5) {
          break;
        }
        unint64_t v15 = v47;
        if (HIDWORD(v47)) {
          goto LABEL_57;
        }
        llvm::coverage::RawCoverageReader::readIntMax(a1, &v46, 0xFFFFFFFFuLL, a5);
        if (*a5) {
          break;
        }
        llvm::coverage::RawCoverageReader::readIntMax(a1, &v45, 0xFFFFFFFFuLL, a5);
        if (*a5) {
          break;
        }
        if ((v45 & 0x80000000) != 0) {
          unint64_t v16 = v45 & 0x7FFFFFFF;
        }
        else {
          unint64_t v16 = v45;
        }
        if ((v45 & 0x80000000) != 0) {
          int v17 = 3;
        }
        else {
          int v17 = v14;
        }
        if (!(v16 | v15))
        {
          unint64_t v47 = 1;
          LODWORD(v16) = -1;
          LODWORD(v15) = 1;
        }
        unsigned int v18 = v11 + v48;
        unsigned int v19 = v18 + v46;
        if (__CFADD__(v18, v46) || (unint64_t v20 = v50, v21 = v51, v15 > v16) && v18 >= v19) {
LABEL_57:
        }
          operator new();
        uint64_t v23 = a2[1];
        unint64_t v22 = (unint64_t)a2[2];
        unsigned int v43 = v18;
        if ((unint64_t)v23 >= v22)
        {
          long long v26 = *a2;
          uint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((v23 - *a2) >> 2);
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) > 0x5D1745D1745D174) {
            abort();
          }
          unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22 - (void)v26) >> 2);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x2E8BA2E8BA2E8BALL) {
            unint64_t v30 = 0x5D1745D1745D174;
          }
          else {
            unint64_t v30 = v28;
          }
          unint64_t v42 = v30;
          if (v30)
          {
            uint64_t v36 = 0x2E8BA2E8BA2E8BA3 * ((v23 - *a2) >> 2);
            unint64_t v37 = v51;
            unint64_t v38 = v50;
            unsigned int v39 = v19;
            int v40 = v16;
            int v41 = v17;
            if (v30 > 0x5D1745D1745D174) {
              sub_1CB833614();
            }
            BOOL v31 = (char *)operator new(44 * v30);
            int v17 = v41;
            LODWORD(v16) = v40;
            unsigned int v19 = v39;
            unint64_t v21 = v37;
            unint64_t v20 = v38;
            uint64_t v27 = v36;
          }
          else
          {
            BOOL v31 = 0;
          }
          unsigned __int32 v32 = &v31[44 * v27];
          *(void *)unsigned __int32 v32 = v21;
          *((void *)v32 + 1) = v20;
          *((_DWORD *)v32 + 4) = a3;
          *((_DWORD *)v32 + 5) = v13;
          *((_DWORD *)v32 + 6) = v43;
          *((_DWORD *)v32 + 7) = v15;
          *((_DWORD *)v32 + 8) = v19;
          *((_DWORD *)v32 + 9) = v16;
          *((_DWORD *)v32 + 10) = v17;
          size_t v33 = v32;
          if (v23 == v26)
          {
            uint64_t v25 = v44;
          }
          else
          {
            uint64_t v25 = v44;
            do
            {
              long long v34 = *(_OWORD *)(v23 - 44);
              long long v35 = *(_OWORD *)(v23 - 28);
              *((_OWORD *)v33 - 1) = *((_OWORD *)v23 - 1);
              *(_OWORD *)(v33 - 28) = v35;
              *(_OWORD *)(v33 - 44) = v34;
              v33 -= 44;
              v23 -= 44;
            }
            while (v23 != v26);
            uint64_t v23 = *a2;
          }
          uint64_t v24 = v32 + 44;
          *a2 = v33;
          a2[1] = v32 + 44;
          a2[2] = &v31[44 * v42];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)uint64_t v23 = v51;
          *((void *)v23 + 1) = v20;
          *((_DWORD *)v23 + 4) = a3;
          *((_DWORD *)v23 + 5) = v13;
          *((_DWORD *)v23 + 6) = v18;
          *((_DWORD *)v23 + 7) = v15;
          *((_DWORD *)v23 + 8) = v19;
          *((_DWORD *)v23 + 9) = v16;
          uint64_t v24 = v23 + 44;
          *((_DWORD *)v23 + 10) = v17;
          uint64_t v25 = v44;
        }
        a2[1] = v24;
        uint64_t v12 = v25 + 1;
        unsigned int v11 = v43;
        if (v12 == v10) {
          goto LABEL_56;
        }
      }
    }
    else
    {
LABEL_56:
      *a5 = 0;
    }
  }
}

char **llvm::coverage::RawCoverageMappingDummyChecker::isDummy@<X0>(char **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v12 = 0;
  __n128 result = llvm::coverage::RawCoverageReader::readSize(this, &v12, &v11);
  unint64_t v5 = v11;
  if (v11) {
    goto LABEL_2;
  }
  if (v12 != 1) {
    goto LABEL_4;
  }
  unint64_t v11 = 0;
  __n128 result = llvm::coverage::RawCoverageReader::readIntMax(this, &v11, 0xFFFFFFFFuLL, &v10);
  unint64_t v5 = v10;
  if (v10 || (unint64_t v10 = 0, result = llvm::coverage::RawCoverageReader::readSize(this, &v10, &v9), (v5 = v9) != 0))
  {
LABEL_2:
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v5;
    return result;
  }
  if (!v10)
  {
    unint64_t v9 = 0;
    __n128 result = llvm::coverage::RawCoverageReader::readSize(this, &v9, &v8);
    unint64_t v5 = v8;
    if (v8) {
      goto LABEL_2;
    }
    if (v9 == 1)
    {
      unint64_t v8 = 0;
      __n128 result = llvm::coverage::RawCoverageReader::readIntMax(this, &v8, 0xFFFFFFFFuLL, &v7);
      unint64_t v5 = v7;
      if (!v7)
      {
        BOOL v6 = (v8 & 3) == 0;
        *(unsigned char *)(a2 + 8) &= ~1u;
        *(unsigned char *)a2 = v6;
        return result;
      }
      goto LABEL_2;
    }
  }
LABEL_4:
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(unsigned char *)a2 = 0;
  return result;
}

uint64_t llvm::InstrProfSymtab::create@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr))(*(void *)a2[1] + 168))(v11);
  uint64_t v7 = v11[0];
  if ((v12 & 1) == 0)
  {
    uint64_t v8 = v11[1];
    *a1 = v11[0];
    a1[1] = v8;
    a1[2] = (*(uint64_t (**)(void, void))(*(void *)a2[1] + 144))(a2[1], *a2);
    uint64_t result = a2[1];
    if (*(_DWORD *)(result + 8) == 9
      && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 424))(result), (result & 1) == 0))
    {
      uint64_t v7 = 0;
      uint64_t v10 = *a1;
      uint64_t v9 = a1[1];
      if (v9) {
        ++v10;
      }
      *a1 = v10;
      a1[1] = v9 - (v9 != 0);
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  *a3 = v7;
  return result;
}

unint64_t llvm::InstrProfSymtab::getFuncName(llvm::InstrProfSymtab *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *((void *)this + 2);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (!v4) {
    return 0;
  }
  unint64_t v6 = *((void *)this + 1);
  if (v5 + a3 > v6) {
    return 0;
  }
  if (v6 < v5) {
    unint64_t v5 = *((void *)this + 1);
  }
  return *(void *)this + v5;
}

void llvm::coverage::BinaryCoverageReader::createCoverageReaderFromBuffer()
{
}

void llvm::coverage::BinaryCoverageReader::create(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  int64x2_t v145 = 0uLL;
  v146[0] = 0;
  unint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = v11 - 16;
  if (v11 >= 0x10)
  {
    uint64_t v13 = *(void **)a1;
    if (**(void **)a1 == 0x6D766F636D766C6CLL && *(void *)(*(void *)a1 + 8) == 0x6174616474736574)
    {
      if (v11 < 0x11) {
        goto LABEL_16;
      }
      unint64_t v25 = 0;
      unsigned int v26 = 0;
      uint64_t v27 = v13 + 2;
      unint64_t v28 = (char *)(v13 + 2);
      while (1)
      {
        char v29 = *v28;
        uint64_t v30 = *v28 & 0x7F;
        if (v26 >= 0x40 && (*v28 & 0x7F) != 0) {
          break;
        }
        if ((unint64_t)(v30 << v26) >> v26 != v30) {
          break;
        }
        v25 += v30 << v26;
        v26 += 7;
        ++v28;
        if ((v29 & 0x80) == 0) {
          goto LABEL_49;
        }
      }
      unint64_t v25 = 0;
LABEL_49:
      unint64_t v43 = (v28 - v27);
      unint64_t v44 = v12 - v43;
      if (v12 >= v43)
      {
        if (v12 == v43) {
LABEL_16:
        }
          operator new();
        unint64_t v45 = 0;
        unsigned int v46 = 0;
        unint64_t v47 = (char *)v27 + v43;
        unint64_t v48 = v47;
        while (1)
        {
          char v49 = *v48;
          uint64_t v50 = *v48 & 0x7F;
          if (v46 >= 0x40 && (*v48 & 0x7F) != 0) {
            break;
          }
          if ((unint64_t)(v50 << v46) >> v46 != v50) {
            break;
          }
          v45 += v50 << v46;
          v46 += 7;
          ++v48;
          if ((v49 & 0x80) == 0) {
            goto LABEL_104;
          }
        }
        unint64_t v45 = 0;
LABEL_104:
        unint64_t v68 = (v48 - v47);
        BOOL v69 = v44 >= v68;
        unint64_t v70 = v44 - v68;
        if (v69)
        {
          BOOL v69 = v70 >= v25;
          unint64_t v71 = v70 - v25;
          if (v69)
          {
            *(void *)&__p[32] = 0;
            *(void *)&__p[40] = 0x800000000;
            *(_OWORD *)&v172[8] = 0u;
            long long v173 = 0u;
            long long v174 = 0u;
            memset(v175, 0, sizeof(v175));
            *(void *)__p = &v47[v68];
            *(void *)&__p[8] = v25;
            *(_OWORD *)&__p[16] = v45;
            unint64_t v72 = &v47[v68 + v25];
            unint64_t v73 = ((unint64_t)(v72 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v72;
            unint64_t v74 = v71 - v73;
            if (v71 < v73 || v74 < 0x10) {
              operator new();
            }
            unint64_t v91 = (unint64_t)(v72 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (*(int *)(v91 + 12) > 2)
            {
              if (v74 >= (*(_DWORD *)(v91 + 4) + 16)) {
                unint64_t v95 = (*(_DWORD *)(v91 + 4) + 16);
              }
              else {
                unint64_t v95 = v71 - v73;
              }
              if (!v95) {
                operator new();
              }
              if (v74 - v95 < ((v91 + v95 + 7) & 0xFFFFFFFFFFFFFFF8) - (v91 + v95)) {
                operator new();
              }
              unint64_t v104 = (v91 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
              LOWORD(v169) = 261;
              __len[0] = (size_t)"";
              __len[1] = 0;
              *(void *)&long long v163 = __len;
              BOOL v105 = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v163);
              *BOOL v105 = &unk_1F2644E70;
              v105[1] = v104;
              v105[2] = (char *)v13 + v11;
              *(void *)&long long v163 = v105;
              if ((void *)((char *)v13 + v11) == (void *)v104) {
                operator new();
              }
            }
            else
            {
              LOWORD(v169) = 261;
              __len[0] = (size_t)"";
              __len[1] = 0;
              *(void *)&long long v163 = __len;
              unint64_t v92 = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v163);
              *unint64_t v92 = &unk_1F2644E70;
              v92[1] = "";
              v92[2] = "";
              *(void *)&long long v163 = v92;
            }
            llvm::coverage::BinaryCoverageReader::createCoverageReaderFromBuffer();
          }
        }
      }
      operator new();
    }
  }
  long long v16 = *(_OWORD *)(a1 + 16);
  v144[0] = *(_OWORD *)a1;
  v144[1] = v16;
  llvm::object::createBinary((uint64_t)v144, 0, 1, (uint64_t)&v161);
  uint64_t v17 = v161;
  uint64_t v161 = 0;
  if (v162)
  {
    *(unsigned char *)(a7 + 24) |= 1u;
    *(void *)a7 = v17;
    goto LABEL_212;
  }
  int v18 = *(_DWORD *)(v17 + 8);
  if (v17 && v18 == 1)
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__len, v17, 0);
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__p, 0, 0);
    uint64_t v57 = *(void *)__p;
    long long v163 = *(_OWORD *)__len;
    long long v164 = v168;
    long long v165 = v169;
    long long v166 = v170;
    if (__len[0] == *(void *)__p && DWORD2(v163) == *(_DWORD *)&__p[8]) {
LABEL_83:
    }
      operator new();
    int v139 = *(_DWORD *)&__p[8];
    while (1)
    {
      sub_1CD5DF348((unsigned int *)&v163, (std::string *)__p);
      int v58 = __p[23];
      unsigned __int32 v59 = *(void **)__p;
      uint64_t v60 = __p[23] & 0x7F;
      if (__p[23] < 0) {
        uint64_t v60 = *(void *)&__p[8];
      }
      BOOL v61 = a3 == v60;
      if (a3 && a3 == v60)
      {
        if (__p[23] >= 0) {
          size_t v62 = __p;
        }
        else {
          size_t v62 = *(unsigned char **)__p;
        }
        BOOL v61 = memcmp(a2, v62, a3) == 0;
      }
      if (v58 < 0) {
        operator delete(v59);
      }
      if (v61) {
        break;
      }
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__p, v163, DWORD2(v163) + 1);
      long long v163 = *(_OWORD *)__p;
      long long v164 = *(_OWORD *)&__p[16];
      long long v165 = *(_OWORD *)&__p[32];
      long long v166 = *(_OWORD *)v172;
      if (*(void *)__p == v57 && DWORD2(v163) == v139) {
        goto LABEL_83;
      }
    }
    int v18 = *(_DWORD *)(v17 + 8);
  }
  if (v18 == 1)
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__len, v17, 0);
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__p, 0, 0);
    uint64_t v63 = *(void *)__p;
    long long v163 = *(_OWORD *)__len;
    long long v164 = v168;
    long long v165 = v169;
    long long v166 = v170;
    if (__len[0] != *(void *)__p || DWORD2(v163) != *(_DWORD *)&__p[8])
    {
      int v141 = *(_DWORD *)&__p[8];
      do
      {
        sub_1CD5DF348((unsigned int *)&v163, (std::string *)__p);
        char v64 = __p[23];
        if (__p[23] >= 0) {
          uint64_t v65 = __p;
        }
        else {
          uint64_t v65 = *(unsigned char **)__p;
        }
        uint64_t v66 = __p[23] & 0x7F;
        if (__p[23] < 0) {
          uint64_t v66 = *(void *)&__p[8];
        }
        if (a3 == v66 && (!a3 || !memcmp(a2, v65, a3))) {
          llvm::object::MachOUniversalBinary::ObjectForArch::getAsArchive((llvm::object::MachOUniversalBinary::ObjectForArch *)&v163);
        }
        if (v64 < 0) {
          operator delete(*(void **)__p);
        }
        llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__p, v163, DWORD2(v163) + 1);
        long long v163 = *(_OWORD *)__p;
        long long v164 = *(_OWORD *)&__p[16];
        long long v165 = *(_OWORD *)&__p[32];
        long long v166 = *(_OWORD *)v172;
      }
      while (*(void *)__p != v63 || DWORD2(v163) != v141);
    }
  }
  int v19 = *(_DWORD *)(v17 + 8);
  if (!v19)
  {
    unsigned int v149 = 0;
    sub_1CD5DF400(v17, &v149, 1, (uint64_t)__p);
    sub_1CD5E0680((uint64_t)__len, (uint64_t)__p);
    *((void *)&v169 + 1) = *(void *)&__p[40];
    sub_1CD5E0680((uint64_t)&v163, (uint64_t)v172);
    unint64_t v67 = v174;
    *((void *)&v165 + 1) = v174;
    if (*((void *)&v169 + 1) <= 7uLL) {
      goto LABEL_218;
    }
    while (1)
    {
      if ((void)v168 == (void)v164)
      {
LABEL_254:
        uint64_t v127 = *((void *)&v163 + 1);
        *((void *)&v163 + 1) = 0;
        if (v127) {
          (*(void (**)(uint64_t))(*(void *)v127 + 16))(v127);
        }
        size_t v128 = __len[1];
        __len[1] = 0;
        if (v128) {
          (*(void (**)(size_t))(*(void *)v128 + 16))(v128);
        }
        uint64_t v129 = *(void *)&v172[8];
        *(void *)&v172[8] = 0;
        if (v129) {
          (*(void (**)(uint64_t))(*(void *)v129 + 16))(v129);
        }
        uint64_t v130 = *(void *)&__p[8];
        *(void *)&__p[8] = 0;
        if (v130) {
          (*(void (**)(uint64_t))(*(void *)v130 + 16))(v130);
        }
        long long v131 = v149;
        if (v149)
        {
          unsigned int v149 = 0;
          *(unsigned char *)(a7 + 24) |= 1u;
          *(void *)a7 = v131;
        }
        else
        {
          if ((*(unsigned char *)(v17 + 98) & 8) != 0)
          {
            long long v132 = *(uint64_t **)(v17 + 104);
            *(void *)__p = v132;
            *(_OWORD *)&__p[8] = *(_OWORD *)(v17 + 112);
            uint64_t v133 = *(uint64_t **)&__p[8];
            *(void *)(v17 + 112) = 0;
            *(void *)(v17 + 120) = 0;
            *(void *)(v17 + 104) = 0;
            while (v132 != v133)
              sub_1CD5DF518(a4, v132++);
            __len[0] = (size_t)__p;
            sub_1CC66CFA8((void ***)__len);
          }
          *(unsigned char *)(a7 + 24) &= ~1u;
          *(int64x2_t *)a7 = v145;
          *(void *)(a7 + 16) = v146[0];
          int64x2_t v145 = 0uLL;
          v146[0] = 0;
        }
        goto LABEL_280;
      }
      llvm::object::Archive::Child::getMemoryBufferRef((llvm::object::Archive::Child *)__len, (uint64_t)&v158);
      if (v160) {
        break;
      }
      v143[0] = v158;
      v143[1] = v159;
      llvm::coverage::BinaryCoverageReader::create(v143, a2, a3, a4, a5, a6);
      char v107 = v157;
      unint64_t v108 = v154;
      char v140 = v157;
      if (v157)
      {
        uint64_t v154 = 0;
        *(unsigned char *)(a7 + 24) |= 1u;
        *(void *)a7 = v108;
        char v109 = v107;
      }
      else
      {
        char v109 = v157;
        long long v110 = v155;
        if (v154 != v155)
        {
          size_t v111 = (void *)v145.i64[1];
          do
          {
            if ((unint64_t)v111 >= v146[0])
            {
              uint64_t v113 = ((uint64_t)v111 - v145.i64[0]) >> 3;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_282;
              }
              unint64_t v114 = (v146[0] - v145.i64[0]) >> 2;
              if (v114 <= v113 + 1) {
                unint64_t v114 = v113 + 1;
              }
              if (v146[0] - v145.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v114;
              }
              unsigned int v179 = v146;
              if (v115)
              {
                if (v115 >> 61) {
                  goto LABEL_283;
                }
                uint64_t v116 = (char *)operator new(8 * v115);
              }
              else
              {
                uint64_t v116 = 0;
              }
              long long v117 = &v116[8 * v113];
              unsigned int v118 = &v116[8 * v115];
              unsigned int v178 = v118;
              uint64_t v119 = *v108;
              uint64_t *v108 = 0;
              *(void *)long long v117 = v119;
              size_t v111 = v117 + 8;
              v177.i64[1] = (uint64_t)(v117 + 8);
              uint64_t v120 = (void *)v145.i64[1];
              uint64_t v121 = (void *)v145.i64[0];
              if (v145.i64[1] == v145.i64[0])
              {
                int64x2_t v123 = vdupq_n_s64(v145.u64[1]);
              }
              else
              {
                do
                {
                  uint64_t v122 = *--v120;
                  *uint64_t v120 = 0;
                  *((void *)v117 - 1) = v122;
                  v117 -= 8;
                }
                while (v120 != v121);
                int64x2_t v123 = v145;
                size_t v111 = (void *)v177.i64[1];
                unsigned int v118 = v178;
              }
              v145.i64[0] = (uint64_t)v117;
              v145.i64[1] = (uint64_t)v111;
              int64x2_t v177 = v123;
              unsigned int v124 = (char *)v146[0];
              v146[0] = v118;
              unsigned int v178 = v124;
              unint64_t v176 = (void **)v123.i64[0];
              sub_1CC66CF2C((uint64_t)&v176);
            }
            else
            {
              uint64_t v112 = *v108;
              uint64_t *v108 = 0;
              *v111++ = v112;
            }
            v145.i64[1] = (uint64_t)v111;
            ++v108;
          }
          while (v108 != v110);
          char v109 = v157;
        }
      }
      if (v109)
      {
        long long v126 = v154;
        uint64_t v154 = 0;
        char v125 = v140;
        if (v126) {
          (*(void (**)(uint64_t *))(*v126 + 8))(v126);
        }
      }
      else
      {
        unint64_t v176 = (void **)&v154;
        sub_1CC6595B0(&v176);
        char v125 = v140;
      }
      if ((v160 & 1) != 0 && (void)v158) {
        (*(void (**)(void))(*(void *)v158 + 8))(v158);
      }
      if (v125) {
        goto LABEL_272;
      }
      sub_1CD5DF480((uint64_t)__len);
      if (*((void *)&v169 + 1) <= 7uLL)
      {
        unint64_t v67 = *((void *)&v165 + 1);
LABEL_218:
        if (v67 < 8) {
          goto LABEL_254;
        }
      }
    }
    uint64_t v134 = v158;
    *(unsigned char *)(a7 + 24) |= 1u;
    *(void *)a7 = v134;
LABEL_272:
    uint64_t v135 = *((void *)&v163 + 1);
    *((void *)&v163 + 1) = 0;
    if (v135) {
      (*(void (**)(uint64_t))(*(void *)v135 + 16))(v135);
    }
    size_t v136 = __len[1];
    __len[1] = 0;
    if (v136) {
      (*(void (**)(size_t))(*(void *)v136 + 16))(v136);
    }
    uint64_t v137 = *(void *)&v172[8];
    *(void *)&v172[8] = 0;
    if (v137) {
      (*(void (**)(uint64_t))(*(void *)v137 + 16))(v137);
    }
    uint64_t v138 = *(void *)&__p[8];
    *(void *)&__p[8] = 0;
    if (v138) {
      (*(void (**)(uint64_t))(*(void *)v138 + 16))(v138);
    }
LABEL_280:
    if (v149) {
      (*(void (**)(void *))(*(void *)v149 + 8))(v149);
    }
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    goto LABEL_212;
  }
  if (v19 != 1)
  {
    if ((v19 - 9) > 0xE) {
      operator new();
    }
    if (a3)
    {
      int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 376))(v17);
      LOWORD(v169) = 261;
      __len[0] = (size_t)a2;
      __len[1] = a3;
      unint64_t v22 = llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)__len);
      int v23 = *(_DWORD *)&__p[24];
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v21 != v23)
      {
        *(void *)&v181.__val_ = llvm::object::object_category(v22);
        llvm::errorCodeToError((llvm *)1, v181, &v152);
        uint64_t v24 = 0;
        LOBYTE(__len[1]) = -1;
        __len[0] = v152;
        size_t v152 = 0;
        unint64_t v20 = (_DWORD *)v17;
        goto LABEL_23;
      }
      uint64_t v24 = 0;
      unint64_t v20 = (_DWORD *)v17;
    }
    else
    {
      uint64_t v24 = 0;
      unint64_t v20 = (_DWORD *)v17;
    }
LABEL_115:
    (*(void (**)(_DWORD *))(*(void *)v20 + 360))(v20);
    unsigned int v75 = v20[2];
    if (v75 > 0x13 || ((1 << v75) & 0xAAC00) != 0 || (int v78 = 1, v75 != 9))
    {
      unsigned int v76 = v75 & 0xFFFFFFFC;
      if (v76 == 12) {
        int v77 = 3;
      }
      else {
        int v77 = 0;
      }
      if (v76 == 16) {
        int v78 = 5;
      }
      else {
        int v78 = v77;
      }
    }
    llvm::getInstrProfSectionName(2u, v78, 0, (std::string *)__p);
    if (__p[23] >= 0) {
      unint64_t v79 = __p;
    }
    else {
      unint64_t v79 = *(unsigned char **)__p;
    }
    if (__p[23] >= 0) {
      size_t v80 = __p[23] & 0x7F;
    }
    else {
      size_t v80 = *(void *)&__p[8];
    }
    sub_1CC65E5F4((uint64_t)&v163, v20, v79, v80);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((BYTE8(v164) & 1) != 0 && (v81 = v163, *(void *)&long long v163 = 0, v81))
    {
      LOBYTE(__len[1]) = -1;
      __len[0] = v81;
      sub_1CC1EB7C0((uint64_t)&v163);
    }
    else
    {
      llvm::getInstrProfSectionName(5u, v78, 0, (std::string *)__p);
      if (__p[23] >= 0) {
        unint64_t v82 = __p;
      }
      else {
        unint64_t v82 = *(unsigned char **)__p;
      }
      if (__p[23] >= 0) {
        size_t v83 = __p[23] & 0x7F;
      }
      else {
        size_t v83 = *(void *)&__p[8];
      }
      sub_1CC65E5F4((uint64_t)&v176, v20, v82, v83);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      char v84 = v176;
      if ((v178 & 1) != 0 && (unint64_t v176 = 0, v84))
      {
        LOBYTE(__len[1]) = -1;
        __len[0] = (size_t)v84;
      }
      else
      {
        uint64_t v154 = 0;
        unint64_t v155 = 0;
        uint64_t v156 = 0;
        sub_1CC0C53B4(&v154, v84, v177.i64[0], (v177.i64[0] - (uint64_t)v84) >> 4);
        uint64_t v85 = v154;
        if ((char *)v155 - (char *)v154 != 16) {
          operator new();
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*(v155 - 1) + 168))(__p);
        if (__p[16])
        {
          LOBYTE(__len[1]) = -1;
          __len[0] = *(void *)__p;
        }
        else
        {
          memset(__p, 0, 44);
          *(_DWORD *)&__p[44] = 8;
          *(_OWORD *)&v172[8] = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          memset(v175, 0, sizeof(v175));
          unsigned int v149 = 0;
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          sub_1CC0C53B4(&v149, (const void *)v163, *((uint64_t *)&v163 + 1), (uint64_t)(*((void *)&v163 + 1) - v163) >> 4);
          unsigned int v86 = v149;
          if (v150 - (void)v149 != 16) {
            operator new();
          }
          llvm::InstrProfSymtab::create((uint64_t *)__p, (void *)(v150 - 16), &v158);
          if ((void)v158)
          {
            LOBYTE(__len[1]) = -1;
            __len[0] = v158;
          }
          else
          {
            llvm::getInstrProfSectionName(6u, v78, 0, (std::string *)__len);
            if ((SBYTE7(v168) & 0x80u) == 0) {
              uint64_t v87 = __len;
            }
            else {
              uint64_t v87 = (size_t *)__len[0];
            }
            if ((SBYTE7(v168) & 0x80u) == 0) {
              size_t v88 = BYTE7(v168) & 0x7F;
            }
            else {
              size_t v88 = __len[1];
            }
            sub_1CC65E5F4((uint64_t)&v158, v20, v87, v88);
            if (SBYTE7(v168) < 0) {
              operator delete((void *)__len[0]);
            }
            unsigned int v148 = 0;
            uint64_t v89 = (void *)v158;
            if (BYTE8(v159))
            {
              uint64_t v90 = 0;
              *(void *)&long long v158 = 0;
              if (v89)
              {
                unsigned int v147 = v89;
                sub_1CD4515D0(&v147);
                if (v147) {
                  (*(void (**)(void *))(*v147 + 8))(v147);
                }
                LOWORD(v169) = 261;
                __len[0] = (size_t)"";
                __len[1] = 0;
                BOOL v153 = __len;
                unsigned int v103 = (size_t *)sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v153);
                *unsigned int v103 = (size_t)&unk_1F2644E70;
                v103[1] = (size_t)"";
                v103[2] = (size_t)"";
                unsigned int v148 = v103;
LABEL_192:
                llvm::coverage::BinaryCoverageReader::createCoverageReaderFromBuffer();
              }
            }
            else
            {
              uint64_t v90 = v158;
            }
            uint64_t v93 = *((void *)&v158 + 1);
            if (v90 == *((void *)&v158 + 1))
            {
              uint64_t v94 = 0;
LABEL_178:
              LOWORD(v169) = 257;
              llvm::WritableMemoryBuffer::getNewUninitMemBuffer(v94, (const void ***)__len, &v153);
              uint64_t v97 = *((void *)&v158 + 1);
              uint64_t v96 = v158;
              if ((void)v158 == *((void *)&v158 + 1))
              {
                unsigned int v148 = v153;
                goto LABEL_192;
              }
              long long v98 = (char *)v153[1];
              while (1)
              {
                (*(void (**)(size_t *__return_ptr))(**(void **)(v96 + 8) + 168))(__len);
                if (v168) {
                  break;
                }
                size_t v99 = __len[1];
                if (__len[1]) {
                  memmove(v98, (const void *)__len[0], __len[1]);
                }
                v98 += v99;
                unint64_t v100 = (unint64_t)(v98 + 7) & 0xFFFFFFFFFFFFFFF8;
                size_t v101 = v100 - (void)v98;
                if ((char *)v100 != v98)
                {
                  bzero(v98, v101);
                  long long v98 = (char *)((unint64_t)(v98 + 7) & 0xFFFFFFFFFFFFFFF8);
                }
                v96 += 16;
                if (v96 == v97)
                {
                  unsigned int v102 = v148;
                  unsigned int v148 = v153;
                  if (v102) {
                    (*(void (**)(size_t *, size_t))(*v102 + 8))(v102, v101);
                  }
                  goto LABEL_192;
                }
              }
              LOBYTE(__len[1]) = -1;
              if (v153) {
                (*(void (**)(size_t *, size_t))(*v153 + 8))(v153, __len[0]);
              }
            }
            else
            {
              uint64_t v94 = 0;
              while (1)
              {
                (*(void (**)(size_t *__return_ptr))(**(void **)(v90 + 8) + 168))(__len);
                if (v168) {
                  break;
                }
                uint64_t v94 = (llvm::WritableMemoryBuffer *)((char *)v94 + ((__len[1] + 7) & 0xFFFFFFFFFFFFFFF8));
                v90 += 16;
                if (v90 == v93) {
                  goto LABEL_178;
                }
              }
              LOBYTE(__len[1]) = -1;
            }
            if (v148) {
              (*(void (**)(size_t *))(*v148 + 8))(v148);
            }
            sub_1CC1EB7C0((uint64_t)&v158);
            unsigned int v86 = v149;
          }
          if (v86) {
            operator delete(v86);
          }
          sub_1CD5DF60C(__p);
          uint64_t v85 = v154;
        }
        if (v85) {
          operator delete(v85);
        }
      }
      sub_1CC1EB7C0((uint64_t)&v176);
      sub_1CC1EB7C0((uint64_t)&v163);
    }
LABEL_23:
    (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
    uint64_t v17 = v24;
    if (!v24) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  llvm::object::MachOUniversalBinary::getMachOObjectForArch(v17, a2, a3, (uint64_t)__p);
  unint64_t v20 = *(_DWORD **)__p;
  if ((__p[8] & 1) == 0)
  {
    uint64_t v24 = v17;
    goto LABEL_115;
  }
  LOBYTE(__len[1]) = -1;
  __len[0] = *(void *)__p;
LABEL_32:
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
LABEL_33:
  char v31 = __len[1];
  if (__len[1])
  {
    size_t v34 = 0;
    size_t v37 = __len[0];
    __len[0] = 0;
    *(unsigned char *)(a7 + 24) |= 1u;
    *(void *)a7 = v37;
  }
  else
  {
    unsigned __int32 v32 = (void *)v145.i64[1];
    uint64_t v33 = v146[0];
    if (v145.i64[1] >= v146[0])
    {
      unint64_t v38 = (void *)v145.i64[0];
      uint64_t v39 = (v145.i64[1] - v145.i64[0]) >> 3;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 61) {
LABEL_282:
      }
        abort();
      if ((v146[0] - v145.i64[0]) >> 2 > v40) {
        unint64_t v40 = (v146[0] - v145.i64[0]) >> 2;
      }
      if (v146[0] - v145.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      *(void *)&__p[32] = v146;
      if (v41)
      {
        if (v41 >> 61) {
LABEL_283:
        }
          sub_1CB833614();
        unint64_t v42 = (char *)operator new(8 * v41);
      }
      else
      {
        unint64_t v42 = 0;
      }
      unint64_t v51 = (size_t *)&v42[8 * v39];
      size_t v52 = __len[0];
      __len[0] = 0;
      size_t *v51 = v52;
      uint64_t v53 = &v42[8 * v41];
      *(void *)&__p[16] = v51 + 1;
      *(void *)&__p[24] = v53;
      if (v32 == v38)
      {
        size_t v34 = 0;
        int64x2_t v55 = vdupq_n_s64((unint64_t)v32);
        uint64_t v36 = v51 + 1;
      }
      else
      {
        do
        {
          size_t v54 = *--v32;
          void *v32 = 0;
          *--unint64_t v51 = v54;
        }
        while (v32 != v38);
        int64x2_t v55 = v145;
        uint64_t v53 = *(char **)&__p[24];
        uint64_t v36 = *(void **)&__p[16];
        uint64_t v33 = v146[0];
        char v31 = __len[1];
        size_t v34 = __len[0];
      }
      v145.i64[0] = (uint64_t)v51;
      v145.i64[1] = (uint64_t)v36;
      *(int64x2_t *)&__p[8] = v55;
      v146[0] = v53;
      *(void *)&__p[24] = v33;
      *(void *)__p = v55.i64[0];
      sub_1CC66CF2C((uint64_t)__p);
    }
    else
    {
      size_t v34 = 0;
      size_t v35 = __len[0];
      __len[0] = 0;
      *(void *)v145.i64[1] = v35;
      uint64_t v36 = v32 + 1;
    }
    *(unsigned char *)(a7 + 24) &= ~1u;
    uint64_t v56 = v146[0];
    *(void *)a7 = v145.i64[0];
    *(void *)(a7 + 8) = v36;
    *(void *)(a7 + 16) = v56;
    int64x2_t v145 = 0uLL;
    v146[0] = 0;
    if ((v31 & 1) == 0)
    {
      if (!v34) {
        goto LABEL_212;
      }
      goto LABEL_38;
    }
  }
  if (v34) {
LABEL_38:
  }
    (*(void (**)(size_t))(*(void *)v34 + 8))(v34);
LABEL_212:
  uint64_t v106 = v161;
  uint64_t v161 = 0;
  if (v162)
  {
    if (v106) {
LABEL_216:
    }
      (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
  }
  else if (v106)
  {
    goto LABEL_216;
  }
  *(void *)__p = &v145;
  sub_1CC6595B0((void ***)__p);
}

__n128 llvm::coverage::BinaryCoverageReader::readNextRecord@<Q0>(void *a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[24];
  uint64_t v5 = a1[4];
  if (v4 >= (a1[5] - v5) >> 6) {
    operator new();
  }
  a1[26] = a1[25];
  a1[29] = a1[28];
  a1[32] = a1[31];
  uint64_t v8 = v5 + (v4 << 6);
  uint64_t v9 = *(void *)(v8 + 56);
  v22[0] = a1[1] + 24 * *(void *)(v8 + 48);
  v22[1] = v9;
  long long v17 = *(_OWORD *)(v8 + 32);
  int v18 = v22;
  int v19 = a1 + 25;
  unint64_t v20 = a1 + 28;
  int v21 = a1 + 31;
  llvm::coverage::RawCoverageMappingReader::read((llvm::coverage::RawCoverageMappingReader *)&v17, a3);
  if (!*a3)
  {
    __n128 result = *(__n128 *)(v8 + 8);
    *a2 = result;
    a2[1].n128_u64[0] = *(void *)(v8 + 24);
    unint64_t v11 = a1[25];
    uint64_t v12 = (uint64_t)(a1[26] - v11) >> 4;
    a2[1].n128_u64[1] = v11;
    a2[2].n128_u64[0] = v12;
    unint64_t v13 = a1[28];
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[29] - v13) >> 2);
    a2[2].n128_u64[1] = v13;
    a2[3].n128_u64[0] = v14;
    unint64_t v15 = a1[31];
    uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[32] - v15) >> 2);
    a2[3].n128_u64[1] = v15;
    a2[4].n128_u64[0] = v16;
    ++a1[24];
    *a3 = 0;
  }
  return result;
}

void sub_1CC65E5BC(uint64_t a1)
{
  sub_1CC65E9C0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC65E5F4(uint64_t a1, _DWORD *a2, const void *a3, size_t a4)
{
  size_t v4 = a4;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v7 = a2[2];
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  if (v7 == 9)
  {
    LOBYTE(v37[0]) = 36;
    unint64_t v8 = llvm::StringRef::find((uint64_t *)&v39, (char *)v37, 1uLL, 0);
    size_t v9 = v4 >= v8 ? v8 : v4;
    if (v8 != -1) {
      size_t v4 = v9;
    }
  }
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 344))(a2);
  uint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 352))(a2);
  *(void *)&long long v36 = v10;
  *((void *)&v36 + 1) = v12;
  if (v12 == v14 && v10 == v13) {
    goto LABEL_49;
  }
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  int v18 = 0;
  int v19 = 0;
  size_t v35 = 0;
  while (1)
  {
    (*(void (**)(const void **__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 136))(&v39, v12, v10);
    char v20 = v41;
    if (v41)
    {
      uint64_t v25 = (uint64_t)v39;
      uint64_t v39 = 0;
      *(unsigned char *)(a1 + 24) |= 1u;
      *(void *)a1 = v25;
    }
    else
    {
      unint64_t v22 = v39;
      unint64_t v21 = v40;
      v37[0] = (uint64_t)v39;
      v37[1] = v40;
      if (v7 == 9)
      {
        char v38 = 36;
        unint64_t v23 = llvm::StringRef::find(v37, &v38, 1uLL, 0);
        unint64_t v24 = v21 >= v23 ? v23 : v21;
        if (v23 != -1) {
          unint64_t v21 = v24;
        }
      }
      if (v21 == v4 && (!v4 || !memcmp(v22, a3, v4)))
      {
        if (v19 >= v35)
        {
          uint64_t v27 = (v19 - v18) >> 4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            abort();
          }
          if ((v35 - v18) >> 3 > v28) {
            unint64_t v28 = (v35 - v18) >> 3;
          }
          if ((unint64_t)(v35 - v18) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29)
          {
            if (v29 >> 60) {
              sub_1CB833614();
            }
            uint64_t v30 = (char *)operator new(16 * v29);
          }
          else
          {
            uint64_t v30 = 0;
          }
          char v31 = &v30[16 * v27];
          *(_OWORD *)char v31 = v36;
          if (v19 == v18)
          {
            uint64_t v33 = &v30[16 * v27];
          }
          else
          {
            unsigned __int32 v32 = &v30[16 * v27];
            do
            {
              uint64_t v33 = v32 - 16;
              *((_OWORD *)v32 - 1) = *((_OWORD *)v19 - 1);
              v19 -= 16;
              v32 -= 16;
            }
            while (v19 != v18);
          }
          size_t v35 = &v30[16 * v29];
          int v19 = v31 + 16;
          if (v18) {
            operator delete(v18);
          }
          int v18 = v33;
        }
        else
        {
          *(_OWORD *)int v19 = v36;
          v19 += 16;
        }
      }
    }
    if (v41)
    {
      uint64_t v26 = (uint64_t)v39;
      uint64_t v39 = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    if (v20) {
      break;
    }
    (*(void (**)(void, long long *))(**((void **)&v36 + 1) + 128))(*((void *)&v36 + 1), &v36);
    uint64_t v12 = *((void *)&v36 + 1);
    uint64_t v10 = v36;
    if (v36 == __PAIR128__(v17, v16))
    {
      if (v18 != v19)
      {
        *(unsigned char *)(a1 + 24) &= ~1u;
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v35;
        return;
      }
LABEL_49:
      operator new();
    }
  }
  if (v18) {
    operator delete(v18);
  }
}

uint64_t sub_1CC65E9C0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2618238;
  uint64_t v2 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(void *)(a1 + 256) = v3;
    operator delete(v3);
  }
  size_t v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5)
  {
    *(void *)(a1 + 208) = v5;
    operator delete(v5);
  }
  sub_1CD5DF60C((void *)(a1 + 56));
  unint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  unint64_t v8 = (void **)(a1 + 8);
  sub_1CB8338B8(&v8);
  return a1;
}

_DWORD *sub_1CC65EA90(void *a1, void *a2, uint64_t *a3)
{
  int v6 = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::coverage::CoverageMapError::ID);
  __n128 result = (_DWORD *)*a2;
  *a2 = 0;
  if (v6)
  {
    uint64_t v8 = *a3;
    int v9 = result[2];
    if (v9 == 1)
    {
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_DWORD *)(v8 + 80) = 0;
    }
    else
    {
      *(_DWORD *)(v8 + 80) = v9;
    }
    *a1 = 0;
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (_DWORD *)v10();
  }
  else
  {
    *a1 = result;
  }
  return result;
}

void *sub_1CC65EB78(void *a1)
{
  *a1 = &unk_1F2618260;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC65EBD0(void *a1)
{
  *a1 = &unk_1F2618260;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC65EC48(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], uint64_t v8 = &v5[5 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[5 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 0, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC65EDF0(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v8 = a8;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a2 < a3)
  {
    unint64_t v9 = a7;
    unint64_t v11 = a3;
    uint64_t v12 = a2;
    uint64_t v13 = a1;
    unint64_t v59 = HIDWORD(a4);
    if (a5) {
      BOOL v14 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v15 = v14;
    uint64_t v64 = a1 + 8;
    uint64_t v58 = a4;
    char v63 = v15;
    do
    {
      uint64_t v16 = v12[2];
      if (a6 + v16 > v9) {
LABEL_62:
      }
        operator new();
      if (v15) {
        goto LABEL_60;
      }
      uint64_t v17 = *(void *)(v12 + 3);
      uint64_t v18 = (uint64_t)(*(void *)(*(void *)(v13 + 64) + 8) - **(void **)(v13 + 64)) >> 6;
      *(void *)&v67[0] = *v12;
      *((void *)&v67[0] + 1) = v18;
      sub_1CC65F280(&v65, v64, v67, (void *)v67 + 1);
      if (!v66)
      {
        uint64_t v28 = v13;
        uint64_t v29 = *(void *)(v65 + 8);
        uint64_t v30 = **(void **)(v28 + 64);
        uint64_t v31 = v30 + (v29 << 6);
        uint64_t v33 = *(void *)(v31 + 24);
        uint64_t v32 = v31 + 24;
        __n128 v34 = *(__n128 *)(v32 + 8);
        if (v33)
        {
          v71 &= ~1u;
          LOBYTE(v70) = 0;
          if ((v71 & 1) == 0) {
            goto LABEL_19;
          }
LABEL_44:
          uint64_t v52 = v70;
          *uint64_t v8 = v70;
LABEL_59:
          unint64_t v9 = a7;
          uint64_t v13 = a1;
          unint64_t v11 = a3;
          char v15 = v63;
          if (v52) {
            return;
          }
          goto LABEL_60;
        }
        v67[0] = *(_OWORD *)(v32 + 8);
        llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
        if (v71) {
          goto LABEL_44;
        }
LABEL_19:
        if ((_BYTE)v70)
        {
          if (v17)
          {
            char v35 = v69 & 0xFE;
            v69 &= ~1u;
            LOBYTE(v68) = 0;
          }
          else
          {
            *(void *)&v67[0] = a6;
            *((void *)&v67[0] + 1) = v16;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
            char v35 = v69;
          }
          uint64_t v53 = v17;
          if (v35)
          {
            uint64_t v52 = v68;
            uint64_t v68 = 0;
            *uint64_t v8 = v52;
            if (v52) {
              goto LABEL_59;
            }
          }
          else if ((_BYTE)v68)
          {
            goto LABEL_53;
          }
          uint64_t v52 = 0;
          *(void *)uint64_t v32 = v53;
          *(void *)(v32 + 8) = a6;
          *(void *)(v32 + 16) = v16;
          uint64_t v54 = v30 + (v29 << 6);
          *(void *)(v54 + 48) = v58;
          *(void *)(v54 + 56) = v59;
          *uint64_t v8 = 0;
          if (v35)
          {
            if (v68) {
              (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v34);
            }
            uint64_t v52 = 0;
          }
          goto LABEL_59;
        }
LABEL_53:
        uint64_t v52 = 0;
        *uint64_t v8 = 0;
        goto LABEL_59;
      }
      int v19 = *(void **)(v13 + 32);
      unint64_t v21 = *v12;
      unint64_t v20 = v12[1];
      unint64_t v22 = v19[2];
      BOOL v23 = v21 >= v22;
      unint64_t v24 = v21 - v22;
      if (v23 && (unint64_t v25 = v19[1], v24 + v20 <= v25))
      {
        if (v25 < v24) {
          unint64_t v24 = v19[1];
        }
        unint64_t v26 = *v19 + v24;
        if (v25 - v24 >= v20) {
          unint64_t v27 = v12[1];
        }
        else {
          unint64_t v27 = v25 - v24;
        }
        if (v20)
        {
LABEL_28:
          if (!v27) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = 0;
        if (v20) {
          goto LABEL_28;
        }
      }
      if (!v27) {
        operator new();
      }
      uint64_t v36 = *(void *)(v13 + 64);
      char v38 = *(void **)(v36 + 8);
      unint64_t v37 = *(void *)(v36 + 16);
      if ((unint64_t)v38 >= v37)
      {
        uint64_t v56 = v17;
        uint64_t v40 = *(void **)v36;
        uint64_t v41 = ((uint64_t)v38 - *(void *)v36) >> 6;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 58) {
          abort();
        }
        uint64_t v43 = v37 - (void)v40;
        if (v43 >> 5 > v42) {
          unint64_t v42 = v43 >> 5;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFLL;
        }
        if (v42 >> 58) {
          sub_1CB833614();
        }
        unint64_t v44 = v26;
        unint64_t v55 = v42;
        unint64_t v45 = (char *)operator new(v42 << 6);
        unsigned int v46 = &v45[64 * v41];
        *(_DWORD *)unsigned int v46 = 0;
        *((void *)v46 + 1) = v44;
        *((void *)v46 + 2) = v27;
        *((void *)v46 + 3) = v56;
        *((void *)v46 + 4) = a6;
        *((void *)v46 + 5) = v16;
        *((void *)v46 + 6) = v58;
        *((void *)v46 + 7) = v59;
        if (v38 == v40)
        {
          unint64_t v51 = &v45[64 * v41];
          unint64_t v9 = a7;
          char v15 = v63;
        }
        else
        {
          unint64_t v47 = &v45[64 * v41];
          unint64_t v9 = a7;
          char v15 = v63;
          do
          {
            long long v48 = *((_OWORD *)v38 - 4);
            long long v49 = *((_OWORD *)v38 - 3);
            long long v50 = *((_OWORD *)v38 - 1);
            unint64_t v51 = v47 - 64;
            *((_OWORD *)v47 - 2) = *((_OWORD *)v38 - 2);
            *((_OWORD *)v47 - 1) = v50;
            *((_OWORD *)v47 - 4) = v48;
            *((_OWORD *)v47 - 3) = v49;
            v38 -= 8;
            v47 -= 64;
          }
          while (v38 != v40);
        }
        uint64_t v39 = v46 + 64;
        *(void *)uint64_t v36 = v51;
        *(void *)(v36 + 8) = v46 + 64;
        *(void *)(v36 + 16) = &v45[64 * v55];
        if (v40) {
          operator delete(v40);
        }
        unint64_t v11 = a3;
      }
      else
      {
        *(_DWORD *)char v38 = 0;
        v38[1] = v26;
        v38[2] = v27;
        v38[3] = v17;
        v38[4] = a6;
        v38[5] = v16;
        v38[6] = v58;
        uint64_t v39 = (char *)(v38 + 8);
        v38[7] = v59;
        unint64_t v11 = a3;
        char v15 = v63;
      }
      *(void *)(v36 + 8) = v39;
      uint64_t v8 = a8;
      uint64_t v13 = a1;
      *a8 = 0;
LABEL_60:
      v12 += 5;
      a6 += v16;
    }
    while ((unint64_t)v12 < v11);
  }
  *uint64_t v8 = 0;
}

_DWORD *sub_1CC65F280(_DWORD *result, uint64_t a2, _DWORD *a3, void *a4)
{
  int v7 = result;
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  if (v9)
  {
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (37 * *a3) & (v9 - 1);
    uint64_t v12 = v8 + 16 * v11;
    int v13 = *(_DWORD *)v12;
    if (*a3 == *(_DWORD *)v12)
    {
LABEL_3:
      char v14 = 0;
      goto LABEL_10;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v13 != -1)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v13 == -2;
      }
      if (v18) {
        uint64_t v16 = v12;
      }
      unsigned int v19 = v11 + v17++;
      unsigned int v11 = v19 & v10;
      uint64_t v12 = v8 + 16 * (v19 & v10);
      int v13 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12) {
        goto LABEL_3;
      }
    }
    if (v16) {
      uint64_t v12 = v16;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v9)
  {
    __n128 result = sub_1CC65F4BC((uint64_t *)a2, 2 * v9);
    uint64_t v8 = *(void *)a2;
    int v20 = *(_DWORD *)(a2 + 16);
    if (v20)
    {
      int v21 = v20 - 1;
      unsigned int v22 = (37 * *a3) & (v20 - 1);
      uint64_t v12 = v8 + 16 * v22;
      int v23 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12) {
        goto LABEL_7;
      }
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != -1)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          uint64_t v24 = v12;
        }
        unsigned int v27 = v22 + v25++;
        unsigned int v22 = v27 & v21;
        uint64_t v12 = v8 + 16 * (v27 & v21);
        int v23 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12) {
          goto LABEL_7;
        }
      }
LABEL_46:
      if (v24) {
        uint64_t v12 = v24;
      }
      goto LABEL_7;
    }
LABEL_45:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  if (v9 + ~v15 - *(_DWORD *)(a2 + 12) <= v9 >> 3)
  {
    __n128 result = sub_1CC65F4BC((uint64_t *)a2, v9);
    uint64_t v8 = *(void *)a2;
    int v28 = *(_DWORD *)(a2 + 16);
    if (v28)
    {
      int v29 = v28 - 1;
      unsigned int v30 = (37 * *a3) & (v28 - 1);
      uint64_t v12 = v8 + 16 * v30;
      int v31 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12) {
        goto LABEL_7;
      }
      uint64_t v24 = 0;
      int v32 = 1;
      while (v31 != -1)
      {
        if (v24) {
          BOOL v33 = 0;
        }
        else {
          BOOL v33 = v31 == -2;
        }
        if (v33) {
          uint64_t v24 = v12;
        }
        unsigned int v34 = v30 + v32++;
        unsigned int v30 = v34 & v29;
        uint64_t v12 = v8 + 16 * (v34 & v29);
        int v31 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12) {
          goto LABEL_7;
        }
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v12 != -1) {
    --*(_DWORD *)(a2 + 12);
  }
  *(_DWORD *)uint64_t v12 = *a3;
  *(void *)(v12 + 8) = *a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  char v14 = 1;
LABEL_10:
  *(void *)int v7 = v12;
  *((void *)v7 + 1) = v8 + 16 * v9;
  *((unsigned char *)v7 + 16) = v14;
  return result;
}

_DWORD *sub_1CC65F4BC(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  size_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      uint64_t v12 = result;
      do
      {
        *uint64_t v12 = -1;
        v12 += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v10 - 1;
      int v15 = v4;
      do
      {
        int v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          unsigned int v17 = (37 * v16) & v14;
          BOOL v18 = &result[4 * v17];
          int v19 = *v18;
          if (v16 != *v18)
          {
            int v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                int v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v14;
              BOOL v18 = &result[4 * (v23 & v14)];
              int v19 = *v18;
              if (v16 == *v18) {
                goto LABEL_12;
              }
            }
            if (v20) {
              BOOL v18 = v20;
            }
          }
LABEL_12:
          *BOOL v18 = v16;
          *((void *)v18 + 1) = *((void *)v15 + 1);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 4;
      }
      while (v15 != &v4[4 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v24 = *((unsigned int *)a1 + 4);
  if (v24)
  {
    uint64_t v25 = 16 * v24;
    do
    {
      *__n128 result = -1;
      result += 4;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

void *sub_1CC65F648(void *a1)
{
  *a1 = &unk_1F2618290;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC65F6A0(void *a1)
{
  *a1 = &unk_1F2618290;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC65F718(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], unsigned int v8 = &v5[5 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[5 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 1, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC65F8C0(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a2 < a3)
  {
    unint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v59 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v62 = a1 + 8;
    uint64_t v58 = a4;
    char v61 = v14;
    while (1)
    {
      uint64_t v15 = *((unsigned int *)v11 + 2);
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_30:
      uint64_t v11 = (uint64_t *)((char *)v11 + 20);
      a6 += v15;
      if ((unint64_t)v11 >= v10) {
        goto LABEL_60;
      }
    }
    uint64_t v16 = *(uint64_t *)((char *)v11 + 12);
    uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
    *(void *)&v67[0] = *v11;
    *((void *)&v67[0] + 1) = v17;
    sub_1CC65FD90(&v65, v62, (uint64_t *)v67, (uint64_t *)v67 + 1);
    if (v66)
    {
      uint64_t v57 = v16;
      int v28 = *(uint64_t **)(v12 + 32);
      unint64_t v29 = *v11;
      sub_1CD5DF87C(v28);
      unsigned int v30 = (void *)v28[7];
      int v31 = (void *)v28[8];
      if (v31 != v30)
      {
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
        do
        {
          unint64_t v33 = v32 >> 1;
          unsigned int v34 = &v30[3 * (v32 >> 1)];
          unint64_t v36 = *v34;
          char v35 = v34 + 3;
          v32 += ~(v32 >> 1);
          if (v36 < v29) {
            unsigned int v30 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
        operator new();
      }
      uint64_t v38 = v30[1];
      uint64_t v39 = *(char ***)(a1 + 64);
      uint64_t v41 = v39[1];
      unint64_t v40 = (unint64_t)v39[2];
      if ((unint64_t)v41 >= v40)
      {
        unint64_t v55 = a7;
        uint64_t v43 = *v39;
        uint64_t v44 = (v41 - *v39) >> 6;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 58) {
          abort();
        }
        uint64_t v56 = *(char ***)(a1 + 64);
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 5 > v45) {
          unint64_t v45 = v46 >> 5;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47 >> 58) {
          sub_1CB833614();
        }
        long long v48 = (char *)operator new(v47 << 6);
        long long v49 = &v48[64 * v44];
        *(_DWORD *)long long v49 = 1;
        *((void *)v49 + 1) = v38;
        *((void *)v49 + 2) = v37;
        *((void *)v49 + 3) = v57;
        *((void *)v49 + 4) = a6;
        *((void *)v49 + 5) = v15;
        *((void *)v49 + 6) = v58;
        *((void *)v49 + 7) = v59;
        if (v41 == v43)
        {
          uint64_t v54 = &v48[64 * v44];
          unint64_t v10 = a3;
        }
        else
        {
          long long v50 = &v48[64 * v44];
          unint64_t v10 = a3;
          do
          {
            long long v51 = *((_OWORD *)v41 - 4);
            long long v52 = *((_OWORD *)v41 - 3);
            long long v53 = *((_OWORD *)v41 - 1);
            uint64_t v54 = v50 - 64;
            *((_OWORD *)v50 - 2) = *((_OWORD *)v41 - 2);
            *((_OWORD *)v50 - 1) = v53;
            *((_OWORD *)v50 - 4) = v51;
            *((_OWORD *)v50 - 3) = v52;
            v41 -= 64;
            v50 -= 64;
          }
          while (v41 != v43);
        }
        unint64_t v42 = v49 + 64;
        uint64_t v39 = v56;
        char *v56 = v54;
        v56[1] = v49 + 64;
        v56[2] = &v48[64 * v47];
        if (v43)
        {
          operator delete(v43);
          uint64_t v39 = v56;
        }
        a7 = v55;
      }
      else
      {
        *(_DWORD *)uint64_t v41 = 1;
        *((void *)v41 + 1) = v38;
        *((void *)v41 + 2) = v37;
        *((void *)v41 + 3) = v57;
        *((void *)v41 + 4) = a6;
        *((void *)v41 + 5) = v15;
        *((void *)v41 + 6) = v58;
        unint64_t v42 = v41 + 64;
        *((void *)v41 + 7) = v59;
      }
      uint64_t v12 = a1;
      uint64_t v25 = 0;
      v39[1] = v42;
      char v14 = v61;
      *a8 = 0;
LABEL_29:
      if (v25) {
        return;
      }
      goto LABEL_30;
    }
    uint64_t v18 = v65[1];
    uint64_t v19 = **(void **)(v12 + 64);
    uint64_t v20 = v19 + (v18 << 6);
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    __n128 v23 = *(__n128 *)(v21 + 8);
    if (v22)
    {
      v71 &= ~1u;
      LOBYTE(v70) = 0;
      if ((v71 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      v67[0] = *(_OWORD *)(v21 + 8);
      llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
      if ((v71 & 1) == 0)
      {
LABEL_14:
        if ((_BYTE)v70)
        {
          if (v16)
          {
            char v24 = v69 & 0xFE;
            v69 &= ~1u;
            LOBYTE(v68) = 0;
          }
          else
          {
            *(void *)&v67[0] = a6;
            *((void *)&v67[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
            char v24 = v69;
          }
          uint64_t v26 = v16;
          if (v24)
          {
            uint64_t v25 = v68;
            uint64_t v68 = 0;
            *a8 = v25;
            if (v25) {
              goto LABEL_28;
            }
          }
          else if ((_BYTE)v68)
          {
            goto LABEL_22;
          }
          uint64_t v25 = 0;
          *(void *)uint64_t v21 = v26;
          *(void *)(v21 + 8) = a6;
          *(void *)(v21 + 16) = v15;
          uint64_t v27 = v19 + (v18 << 6);
          *(void *)(v27 + 48) = v58;
          *(void *)(v27 + 56) = v59;
          *a8 = 0;
          if (v24)
          {
            if (v68) {
              (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v23);
            }
            uint64_t v25 = 0;
          }
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v25 = 0;
        *a8 = 0;
        goto LABEL_28;
      }
    }
    uint64_t v25 = v70;
    *a8 = v70;
LABEL_28:
    unint64_t v10 = a3;
    uint64_t v12 = a1;
    char v14 = v61;
    goto LABEL_29;
  }
LABEL_60:
  *a8 = 0;
}

uint64_t **sub_1CC65FD90(uint64_t **result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = result;
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  if (v9)
  {
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (37 * *a3) & (v9 - 1);
    uint64_t v12 = (uint64_t *)(v8 + 16 * v11);
    uint64_t v13 = *v12;
    if (*a3 == *v12)
    {
LABEL_3:
      char v14 = 0;
      goto LABEL_11;
    }
    uint64_t v18 = 0;
    int v19 = 1;
    while (v13 != -1)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v13 == -2;
      }
      if (v20) {
        uint64_t v18 = v12;
      }
      unsigned int v21 = v11 + v19++;
      unsigned int v11 = v21 & v10;
      uint64_t v12 = (uint64_t *)(v8 + 16 * (v21 & v10));
      uint64_t v13 = *v12;
      if (*a3 == *v12) {
        goto LABEL_3;
      }
    }
    if (v18) {
      uint64_t v12 = v18;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v9)
  {
    __n128 result = (uint64_t **)sub_1CC65FFB4(a2, 2 * v9);
    uint64_t v8 = *(void *)a2;
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    uint64_t v16 = *a3;
    unsigned int v22 = v9 - 1;
    unsigned int v23 = (37 * *a3) & (v9 - 1);
    uint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v23);
    uint64_t v24 = *v12;
    if (*a3 == *v12) {
      goto LABEL_8;
    }
    uint64_t v25 = 0;
    int v26 = 1;
    while (v24 != -1)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -2;
      }
      if (v27) {
        uint64_t v25 = v12;
      }
      unsigned int v28 = v23 + v26++;
      unsigned int v23 = v28 & v22;
      uint64_t v12 = (uint64_t *)(v8 + 16 * (v28 & v22));
      uint64_t v24 = *v12;
      if (v16 == *v12) {
        goto LABEL_8;
      }
    }
    goto LABEL_44;
  }
  if (v9 + ~v15 - *(_DWORD *)(a2 + 12) <= v9 >> 3)
  {
    __n128 result = (uint64_t **)sub_1CC65FFB4(a2, v9);
    uint64_t v8 = *(void *)a2;
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    uint64_t v16 = *a3;
    unsigned int v29 = v9 - 1;
    unsigned int v30 = (37 * *a3) & (v9 - 1);
    uint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v30);
    uint64_t v31 = *v12;
    if (*a3 == *v12) {
      goto LABEL_8;
    }
    uint64_t v25 = 0;
    int v32 = 1;
    while (v31 != -1)
    {
      if (v25) {
        BOOL v33 = 0;
      }
      else {
        BOOL v33 = v31 == -2;
      }
      if (v33) {
        uint64_t v25 = v12;
      }
      unsigned int v34 = v30 + v32++;
      unsigned int v30 = v34 & v29;
      uint64_t v12 = (uint64_t *)(v8 + 16 * (v34 & v29));
      uint64_t v31 = *v12;
      if (v16 == *v12) {
        goto LABEL_8;
      }
    }
LABEL_44:
    if (v25) {
      uint64_t v12 = v25;
    }
  }
  uint64_t v16 = *v12;
LABEL_8:
  ++*(_DWORD *)(a2 + 8);
  if (v16 != -1) {
    --*(_DWORD *)(a2 + 12);
  }
  uint64_t v17 = *a4;
  *uint64_t v12 = *a3;
  v12[1] = v17;
  char v14 = 1;
LABEL_11:
  char *v7 = v12;
  v7[1] = (uint64_t *)(v8 + 16 * v9);
  *((unsigned char *)v7 + 16) = v14;
  return result;
}

void *sub_1CC65FFB4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  size_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      uint64_t v12 = result;
      do
      {
        *uint64_t v12 = -1;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v10 - 1;
      int v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v17 = (37 * v16) & v14;
          uint64_t v18 = &result[2 * v17];
          uint64_t v19 = *v18;
          if (v16 != *v18)
          {
            unsigned int v21 = 0;
            int v22 = 1;
            while (v19 != -1)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v19 == -2;
              }
              if (v23) {
                unsigned int v21 = v18;
              }
              unsigned int v24 = v17 + v22++;
              unsigned int v17 = v24 & v14;
              uint64_t v18 = &result[2 * (v24 & v14)];
              uint64_t v19 = *v18;
              if (v16 == *v18) {
                goto LABEL_12;
              }
            }
            if (v21) {
              uint64_t v18 = v21;
            }
          }
LABEL_12:
          uint64_t v20 = v15[1];
          *uint64_t v18 = v16;
          v18[1] = v20;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v25 = *(unsigned int *)(a1 + 16);
  if (v25)
  {
    uint64_t v26 = 16 * v25;
    do
    {
      *__n128 result = -1;
      result += 2;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1CC660154(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    unint64_t v6 = (long long *)(a1 + 1);
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      long long v7 = *v6;
      *unint64_t v6 = *(_OWORD *)(a3 + 1);
      *(_OWORD *)(a3 + 1) = v7;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    long long v11 = *v6;
    *unint64_t v6 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v11;
    unint64_t v12 = *a2;
    if (*a3 >= *a2) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v12;
    long long v13 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v13;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    long long v8 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v8;
    unint64_t v9 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v9;
    long long v10 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v10;
    return 2;
  }
  return 0;
}

unint64_t *sub_1CC660244(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(a2 - 3))
  {
    unint64_t v5 = (unint64_t *)(a1 + 3);
    do
    {
      unint64_t v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = (unint64_t *)a1;
    do
    {
      unint64_t v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      unint64_t v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *a2;
    do
    {
      unint64_t *v3 = v8;
      *a2 = v7;
      long long v13 = *(_OWORD *)(v3 + 1);
      *(_OWORD *)(v3 + 1) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a2 + 1) = v13;
      do
      {
        unint64_t v9 = v3[3];
        v3 += 3;
        unint64_t v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        unint64_t v10 = *(a2 - 3);
        a2 -= 3;
        unint64_t v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 3 != (unint64_t *)a1)
  {
    *a1 = *(v3 - 3);
    *(_OWORD *)(a1 + 1) = *((_OWORD *)v3 - 1);
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

unint64_t sub_1CC66032C(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  do
  {
    unint64_t v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v5 >= (unint64_t)a2) {
        break;
      }
      unint64_t v7 = *(a2 - 3);
      a2 -= 3;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      unint64_t v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v6 >= v3);
  }
  if (v5 >= (unint64_t)a2)
  {
    unint64_t v9 = (unint64_t)&a1[v2];
  }
  else
  {
    unint64_t v8 = *a2;
    unint64_t v9 = (unint64_t)&a1[v2];
    unint64_t v10 = a2;
    do
    {
      *(void *)unint64_t v9 = v8;
      *unint64_t v10 = v4;
      long long v15 = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 1);
      *(_OWORD *)(v10 + 1) = v15;
      do
      {
        unint64_t v11 = *(void *)(v9 + 24);
        v9 += 24;
        unint64_t v4 = v11;
      }
      while (v11 < v3);
      do
      {
        unint64_t v12 = *(v10 - 3);
        v10 -= 3;
        unint64_t v8 = v12;
      }
      while (v12 >= v3);
    }
    while (v9 < (unint64_t)v10);
  }
  if ((uint64_t *)(v9 - 24) != a1)
  {
    *a1 = *(void *)(v9 - 24);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(v9 - 16);
  }
  *(void *)(v9 - 24) = v3;
  *(_OWORD *)(v9 - 16) = v14;
  return v9 - 24;
}

BOOL sub_1CC66041C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = *(void *)(a2 - 24);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 24) = v7;
        long long v8 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v8;
      }
      return result;
    case 3uLL:
      sub_1CC660154((unint64_t *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CC6605F0(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1CC6606B4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      unint64_t v9 = (unint64_t *)(a1 + 48);
      sub_1CC660154((unint64_t *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)v10;
    if (*(void *)v10 < *v9)
    {
      long long v18 = *(_OWORD *)(v10 + 8);
      unint64_t v14 = *v9;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 72) = v14;
        *(_OWORD *)(v16 + 80) = *(_OWORD *)(a1 + v15 + 56);
        if (v15 == -48) {
          break;
        }
        unint64_t v14 = *(void *)(v16 + 24);
        v15 -= 24;
        if (v13 >= v14)
        {
          unsigned int v17 = (void *)(a1 + v15 + 72);
          goto LABEL_12;
        }
      }
      unsigned int v17 = (void *)a1;
LABEL_12:
      *unsigned int v17 = v13;
      *(_OWORD *)(v16 + 56) = v18;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    unint64_t v9 = (unint64_t *)v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC6605F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CC660154((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a3;
  if (*(void *)a4 < *(void *)a3)
  {
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    __n128 result = *(__n128 *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(__n128 *)(a4 + 8) = result;
    unint64_t v10 = *(void *)a2;
    if (*(void *)a3 < *(void *)a2)
    {
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      __n128 result = *(__n128 *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a3 + 8) = result;
      unint64_t v11 = *(void *)a1;
      if (*(void *)a2 < *(void *)a1)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
        __n128 result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

__n128 sub_1CC6606B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_1CC6605F0(a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)a4;
  if (*(void *)a5 < *(void *)a4)
  {
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    __n128 result = *(__n128 *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(__n128 *)(a5 + 8) = result;
    uint64_t v12 = *(void *)a3;
    if (*(void *)a4 < *(void *)a3)
    {
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v12;
      __n128 result = *(__n128 *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(__n128 *)(a4 + 8) = result;
      uint64_t v13 = *(void *)a2;
      if (*(void *)a3 < *(void *)a2)
      {
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        __n128 result = *(__n128 *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(__n128 *)(a3 + 8) = result;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a2 < *(void *)a1)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
          __n128 result = *(__n128 *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(__n128 *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC6607B0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (unint64_t *)(a1 + 24 * v10);
      do
      {
        sub_1CC6609C8(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = (_OWORD *)(a1 + 8);
      uint64_t v15 = v6;
      do
      {
        unint64_t v16 = *v15;
        if ((unint64_t)*v15 < *(void *)a1)
        {
          uint64_t *v15 = *(void *)a1;
          *(void *)a1 = v16;
          long long v17 = *(_OWORD *)(v15 + 1);
          *(_OWORD *)(v15 + 1) = *v14;
          *uint64_t v14 = v17;
          sub_1CC6609C8(a1, a4, v9, (unint64_t *)a1);
        }
        v15 += 3;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      do
      {
        uint64_t v18 = 0;
        unint64_t v19 = *(void *)a1;
        long long v28 = *(_OWORD *)(a1 + 8);
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v20 + 24 * v18 + 24;
          uint64_t v22 = (2 * v18) | 1;
          uint64_t v18 = 2 * v18 + 2;
          if (v18 >= v9)
          {
            uint64_t v23 = *(void *)v21;
            uint64_t v18 = v22;
          }
          else
          {
            uint64_t v23 = *(void *)v21;
            unint64_t v24 = *(void *)(v21 + 24);
            if (*(void *)v21 <= v24) {
              uint64_t v23 = *(void *)(v21 + 24);
            }
            if (*(void *)v21 >= v24) {
              uint64_t v18 = v22;
            }
            else {
              v21 += 24;
            }
          }
          *(void *)uint64_t v20 = v23;
          *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
          uint64_t v20 = v21;
        }
        while (v18 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        uint64_t v25 = (_OWORD *)(v21 + 8);
        if ((uint64_t *)v21 == v6 - 3)
        {
          *(void *)uint64_t v21 = v19;
          *uint64_t v25 = v28;
        }
        else
        {
          *(void *)uint64_t v21 = *(v6 - 3);
          *uint64_t v25 = *((_OWORD *)v6 - 1);
          *(v6 - 3) = v19;
          *((_OWORD *)v6 - 1) = v28;
          sub_1CC660AD0(a1, v21 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
        v6 -= 3;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_1CC6609C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        unint64_t v7 = *v6;
      }
      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[3];
        if (*v6 <= v8) {
          unint64_t v7 = v6[3];
        }
        if (*v6 < v8)
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        __n128 v14 = *(__n128 *)(a4 + 1);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          *unint64_t v10 = v7;
          *(_OWORD *)(v10 + 1) = *(_OWORD *)(v6 + 1);
          if (v4 < v5) {
            break;
          }
          uint64_t v11 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(a1 + 24 * v11);
          uint64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v7 = *v6;
            uint64_t v5 = v11;
          }
          else
          {
            unint64_t v7 = *v6;
            unint64_t v12 = v6[3];
            if (*v6 <= v12) {
              unint64_t v7 = v6[3];
            }
            if (*v6 >= v12) {
              uint64_t v5 = v11;
            }
            else {
              v6 += 3;
            }
          }
        }
        while (v7 >= v9);
        *a4 = v9;
        __n128 result = v14;
        *(__n128 *)(a4 + 1) = v14;
      }
    }
  }
  return result;
}

__n128 sub_1CC660AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (unint64_t *)(a1 + 24 * v4);
    unint64_t v7 = (unint64_t *)(a2 - 24);
    unint64_t v6 = *(void *)(a2 - 24);
    unint64_t v8 = *v5;
    if (*v5 < v6)
    {
      __n128 v11 = *(__n128 *)(a2 - 16);
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = v5;
        unint64_t *v9 = v8;
        *(_OWORD *)(v9 + 1) = *(_OWORD *)(v5 + 1);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (unint64_t *)(a1 + 24 * v4);
        unint64_t v8 = *v5;
      }
      while (*v5 < v6);
      unint64_t *v7 = v6;
      __n128 result = v11;
      *(__n128 *)(v7 + 1) = v11;
    }
  }
  return result;
}

uint64_t sub_1CC660B68(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      unint64_t v6 = a1[1];
      unint64_t v7 = a3[1];
      *a1 = v5;
      a1[1] = v7;
      *a3 = v4;
      a3[1] = v6;
      return 1;
    }
    unint64_t v13 = a1[1];
    unint64_t v14 = a2[1];
    *a1 = v3;
    a1[1] = v14;
    *a2 = v4;
    a2[1] = v13;
    if (*a3 >= v4) {
      return 1;
    }
    unint64_t v15 = a3[1];
    *a2 = *a3;
    a2[1] = v15;
    *a3 = v4;
    a3[1] = v13;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v8 = *a2;
    unint64_t v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    unint64_t v10 = *a1;
    if (v8 >= *a1) {
      return 1;
    }
    unint64_t v11 = a1[1];
    unint64_t v12 = a2[1];
    *a1 = v8;
    a1[1] = v12;
    *a2 = v10;
    a2[1] = v11;
    return 2;
  }
  return 0;
}

unint64_t *sub_1CC660C18(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    unint64_t v5 = (uint64_t *)(a1 + 2);
    do
    {
      unint64_t v3 = (unint64_t *)v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
    {
      unint64_t v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  unint64_t v7 = a1[1];
  if (v3 < (unint64_t *)a2)
  {
    unint64_t v8 = *v3;
    unint64_t v9 = *a2;
    do
    {
      uint64_t v10 = v3[1];
      uint64_t v11 = a2[1];
      unint64_t *v3 = v9;
      v3[1] = v11;
      *a2 = v8;
      a2[1] = v10;
      do
      {
        unint64_t v12 = v3[2];
        v3 += 2;
        unint64_t v8 = v12;
      }
      while (v2 >= v12);
      do
      {
        unint64_t v13 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v13;
      }
      while (v2 < v13);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 2 != a1)
  {
    unint64_t v14 = *(v3 - 1);
    *a1 = *(v3 - 2);
    a1[1] = v14;
  }
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

unint64_t *sub_1CC660CD4(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  do
  {
    unint64_t v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v3);
  unint64_t v6 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  if (v6 >= a2)
  {
    uint64_t v10 = &a1[v2];
  }
  else
  {
    unint64_t v9 = *a2;
    uint64_t v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      unint64_t v12 = v10[1];
      unint64_t v13 = v11[1];
      *uint64_t v10 = v9;
      v10[1] = v13;
      *uint64_t v11 = v5;
      v11[1] = v12;
      do
      {
        unint64_t v14 = v10[2];
        v10 += 2;
        unint64_t v5 = v14;
      }
      while (v14 < v3);
      do
      {
        unint64_t v15 = *(v11 - 2);
        v11 -= 2;
        unint64_t v9 = v15;
      }
      while (v15 >= v3);
    }
    while (v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    unint64_t v16 = *(v10 - 1);
    *a1 = *(v10 - 2);
    a1[1] = v16;
  }
  *(v10 - 2) = v3;
  *(v10 - 1) = v4;
  return v10 - 2;
}

BOOL sub_1CC660D94(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CC660B68(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC660F38(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC660FDC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      sub_1CC660B68(a1, a1 + 2, a1 + 4);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *v11;
    unint64_t v15 = *v10;
    if (*v11 < *v10)
    {
      unint64_t v16 = v11[1];
      uint64_t v17 = v12;
      while (1)
      {
        uint64_t v18 = (unint64_t *)((char *)a1 + v17);
        uint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 40);
        v18[6] = v15;
        v18[7] = v19;
        if (v17 == -32) {
          break;
        }
        unint64_t v15 = v18[2];
        v17 -= 16;
        if (v14 >= v15)
        {
          uint64_t v20 = (unint64_t *)((char *)a1 + v17 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      unint64_t *v20 = v14;
      v20[1] = v16;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC660F38(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_1CC660B68(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a3;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a2;
    if (v10 < *a2)
    {
      *a2 = v10;
      *a3 = v12;
      unint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a1;
      if (v13 < *a1)
      {
        unint64_t v16 = a1[1];
        unint64_t v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1CC660FDC(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_1CC660F38(a1, a2, a3, a4);
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a4;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a3;
    if (v12 < *a3)
    {
      *a3 = v12;
      *a4 = v14;
      unint64_t v15 = *a3;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a2;
      if (v15 < *a2)
      {
        *a2 = v15;
        *a3 = v17;
        unint64_t v18 = *a2;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a1;
        if (v18 < *a1)
        {
          unint64_t v21 = a1[1];
          unint64_t v22 = a2[1];
          *a1 = v18;
          a1[1] = v22;
          *a2 = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1CC6610B0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        sub_1CC6612A8((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        unint64_t v15 = *v14;
        if (*v14 < *a1)
        {
          unint64_t v16 = v14[1];
          unint64_t v17 = a1[1];
          *unint64_t v14 = *a1;
          v14[1] = v17;
          *a1 = v15;
          a1[1] = v16;
          sub_1CC6612A8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      do
      {
        uint64_t v18 = 0;
        unint64_t v19 = *a1;
        unint64_t v20 = a1[1];
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = &v21[2 * v18 + 2];
          uint64_t v23 = (2 * v18) | 1;
          uint64_t v18 = 2 * v18 + 2;
          if (v18 >= v9)
          {
            unint64_t v24 = *v22;
            uint64_t v18 = v23;
          }
          else
          {
            unint64_t v24 = *v22;
            unint64_t v25 = v22[2];
            if (*v22 <= v25) {
              unint64_t v24 = v22[2];
            }
            if (*v22 >= v25) {
              uint64_t v18 = v23;
            }
            else {
              v22 += 2;
            }
          }
          unint64_t v26 = v22[1];
          unint64_t *v21 = v24;
          v21[1] = v26;
          unint64_t v21 = v22;
        }
        while (v18 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if (v22 == v6 - 2)
        {
          unint64_t *v22 = v19;
          v22[1] = v20;
        }
        else
        {
          unint64_t v27 = *(v6 - 1);
          unint64_t *v22 = *(v6 - 2);
          v22[1] = v27;
          *(v6 - 2) = v19;
          *(v6 - 1) = v20;
          uint64_t v28 = (char *)v22 - (char *)a1 + 16;
          if (v28 >= 17)
          {
            unint64_t v29 = (((unint64_t)v28 >> 4) - 2) >> 1;
            unsigned int v30 = &a1[2 * v29];
            unint64_t v31 = *v30;
            unint64_t v32 = *v22;
            if (*v30 < *v22)
            {
              unint64_t v33 = v22[1];
              do
              {
                unsigned int v34 = v22;
                unint64_t v22 = v30;
                unint64_t v35 = v30[1];
                unint64_t *v34 = v31;
                v34[1] = v35;
                if (!v29) {
                  break;
                }
                unint64_t v29 = (v29 - 1) >> 1;
                unsigned int v30 = &a1[2 * v29];
                unint64_t v31 = *v30;
              }
              while (*v30 < v32);
              unint64_t *v22 = v32;
              v22[1] = v33;
            }
          }
        }
        v6 -= 2;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CC6612A8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = v8[2];
        BOOL v11 = *v8 >= v10;
        if (*v8 > v10) {
          unint64_t v10 = *v8;
        }
        if (!v11)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v12 = *a4;
      if (v10 >= *a4)
      {
        unint64_t v13 = a4[1];
        do
        {
          unint64_t v14 = a4;
          a4 = v8;
          unint64_t v15 = v8[1];
          *unint64_t v14 = v10;
          v14[1] = v15;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v16;
          }
          else
          {
            unint64_t v10 = *v8;
            unint64_t v17 = v8[2];
            if (*v8 <= v17) {
              unint64_t v10 = v8[2];
            }
            if (*v8 >= v17) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1CC661390(uint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      uint64_t v6 = a1 + 1;
      *a3 = v4;
      uint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 1;
LABEL_9:
      unint64_t v10 = v7;
      goto LABEL_10;
    }
    *a1 = v3;
    *a2 = v4;
    uint64_t v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    unint64_t v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 2;
      uint64_t v6 = (uint64_t *)(a2 + 1);
      goto LABEL_9;
    }
    return 1;
  }
  if (v5 >= v3) {
    return 0;
  }
  *a2 = v5;
  *a3 = v3;
  unint64_t v10 = (uint64_t *)(a2 + 1);
  unint64_t v9 = a2[1];
  a2[1] = a3[1];
  a3[1] = v9;
  unint64_t v11 = *a1;
  if (*a2 >= *a1) {
    return 1;
  }
  *a1 = *a2;
  uint64_t v6 = a1 + 1;
  *a2 = v11;
  uint64_t v8 = 2;
LABEL_10:
  uint64_t v14 = *v6;
  *uint64_t v6 = *v10;
  *unint64_t v10 = v14;
  return v8;
}

unint64_t *sub_1CC661468(unint64_t *a1, uint64_t *a2)
{
  long long v2 = *(_OWORD *)a1;
  unint64_t v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    uint64_t v6 = (uint64_t *)(a1 + 2);
    do
    {
      unint64_t v4 = (unint64_t *)v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < (unint64_t *)a2)
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  if (v4 < (unint64_t *)a2)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = *a2;
    do
    {
      unint64_t *v4 = v9;
      *a2 = v8;
      uint64_t v10 = v4[1];
      v4[1] = a2[1];
      a2[1] = v10;
      do
      {
        unint64_t v11 = v4[2];
        v4 += 2;
        unint64_t v8 = v11;
      }
      while (v3 >= v11);
      do
      {
        unint64_t v12 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v12;
      }
      while (v3 < v12);
    }
    while (v4 < (unint64_t *)a2);
  }
  if (v4 - 2 != a1)
  {
    *a1 = *(v4 - 2);
    a1[1] = *(v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

unint64_t *sub_1CC661534(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  unint64_t v4 = *a1;
  do
  {
    unint64_t v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
  else
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v4);
  }
  if (v6 >= (unint64_t)a2)
  {
    uint64_t v10 = &a1[v2];
  }
  else
  {
    unint64_t v9 = *a2;
    uint64_t v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      *uint64_t v10 = v9;
      *unint64_t v11 = v5;
      unint64_t v12 = v10[1];
      v10[1] = v11[1];
      v11[1] = v12;
      do
      {
        unint64_t v13 = v10[2];
        v10 += 2;
        unint64_t v5 = v13;
      }
      while (v13 < v4);
      do
      {
        unint64_t v14 = *(v11 - 2);
        v11 -= 2;
        unint64_t v9 = v14;
      }
      while (v14 >= v4);
    }
    while (v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    a1[1] = *(v10 - 1);
  }
  *((_OWORD *)v10 - 1) = v3;
  return v10 - 2;
}

BOOL sub_1CC661608(unint64_t *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 2);
      uint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((void *)a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CC661390((uint64_t *)a1, a1 + 2, (unint64_t *)a2 - 2);
      return 1;
    case 4:
      sub_1CC6617B4((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_1CC661868((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6, (unint64_t *)a2 - 2);
      return 1;
    default:
      unint64_t v9 = (char *)(a1 + 4);
      sub_1CC661390((uint64_t *)a1, a1 + 2, a1 + 4);
      uint64_t v10 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)v10;
    unint64_t v14 = *(void *)v9;
    if (*(void *)v10 < *(void *)v9)
    {
      unint64_t v15 = *((void *)v10 + 1);
      uint64_t v16 = v11;
      while (1)
      {
        unint64_t v17 = (unint64_t *)((char *)a1 + v16);
        uint64_t v18 = *(unint64_t *)((char *)a1 + v16 + 40);
        v17[6] = v14;
        v17[7] = v18;
        if (v16 == -32) {
          break;
        }
        unint64_t v14 = v17[2];
        v16 -= 16;
        if (v13 >= v14)
        {
          unint64_t v19 = (unint64_t *)((char *)a1 + v16 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v19 = a1;
LABEL_12:
      unint64_t *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC6617B4(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_1CC661390(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    unint64_t v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      unint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1CC661868(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_1CC6617B4(a1, a2, a3, a4);
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    unint64_t v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      unint64_t v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      unint64_t v15 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v15;
        unint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        uint64_t v17 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1CC661950(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        sub_1CC661B60((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        unint64_t v15 = *v14;
        if (*v14 < *a1)
        {
          *unint64_t v14 = *a1;
          *a1 = v15;
          unint64_t v16 = v14[1];
          v14[1] = a1[1];
          a1[1] = v16;
          sub_1CC661B60((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      do
      {
        uint64_t v17 = 0;
        unint64_t v18 = *a1;
        unint64_t v19 = a1[1];
        unint64_t v20 = a1;
        do
        {
          unint64_t v21 = &v20[2 * v17 + 2];
          uint64_t v22 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v9)
          {
            unint64_t v23 = *v21;
            uint64_t v17 = v22;
          }
          else
          {
            unint64_t v23 = *v21;
            unint64_t v24 = v21[2];
            if (*v21 <= v24) {
              unint64_t v23 = v21[2];
            }
            if (*v21 >= v24) {
              uint64_t v17 = v22;
            }
            else {
              v21 += 2;
            }
          }
          unint64_t *v20 = v23;
          v20[1] = v21[1];
          unint64_t v20 = v21;
        }
        while (v17 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if (v21 == v6 - 2)
        {
          unint64_t *v21 = v18;
          v21[1] = v19;
        }
        else
        {
          unint64_t *v21 = *(v6 - 2);
          v21[1] = *(v6 - 1);
          *(v6 - 2) = v18;
          *(v6 - 1) = v19;
          uint64_t v25 = (char *)v21 - (char *)a1 + 16;
          if (v25 >= 17)
          {
            unint64_t v26 = (((unint64_t)v25 >> 4) - 2) >> 1;
            unint64_t v27 = &a1[2 * v26];
            unint64_t v28 = *v27;
            unint64_t v29 = *v21;
            if (*v27 < *v21)
            {
              unint64_t v30 = v21[1];
              do
              {
                unint64_t v31 = v21;
                unint64_t v21 = v27;
                *unint64_t v31 = v28;
                v31[1] = v27[1];
                if (!v26) {
                  break;
                }
                unint64_t v26 = (v26 - 1) >> 1;
                unint64_t v27 = &a1[2 * v26];
                unint64_t v28 = *v27;
              }
              while (*v27 < v29);
              unint64_t *v21 = v29;
              v21[1] = v30;
            }
          }
        }
        v6 -= 2;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CC661B60(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = v8[2];
        BOOL v11 = *v8 >= v10;
        if (*v8 > v10) {
          unint64_t v10 = *v8;
        }
        if (!v11)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v12 = *a4;
      if (v10 >= *a4)
      {
        unint64_t v13 = a4[1];
        do
        {
          unint64_t v14 = a4;
          a4 = v8;
          *unint64_t v14 = v10;
          v14[1] = v8[1];
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 16 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v15;
          }
          else
          {
            unint64_t v10 = *v8;
            unint64_t v16 = v8[2];
            if (*v8 <= v16) {
              unint64_t v10 = v8[2];
            }
            if (*v8 >= v16) {
              uint64_t v7 = v15;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC661C34(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2) {
        return a2;
      }
      uint64_t v6 = v4[2];
      v4 += 2;
      uint64_t v5 = v6;
    }
    while (v6 != v4[2] || v4[1] != v4[3]);
    for (uint64_t i = v4 + 4; i != a2; i += 2)
    {
      uint64_t v9 = v5;
      uint64_t v5 = *i;
      if (v9 != *i || v4[1] != i[1])
      {
        v4[2] = v5;
        v4 += 2;
        v4[1] = i[1];
      }
    }
    return v4 + 2;
  }
  return result;
}

void *sub_1CC661CB4(void *a1)
{
  *a1 = &unk_1F26182C0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC661D0C(void *a1)
{
  *a1 = &unk_1F26182C0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC661D84(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], uint64_t v8 = &v5[5 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  unint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[5 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 2, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC661F2C(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a2 < a3)
  {
    unint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v59 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v62 = a1 + 8;
    uint64_t v58 = a4;
    char v61 = v14;
    while (1)
    {
      uint64_t v15 = *((unsigned int *)v11 + 2);
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_30:
      uint64_t v11 = (uint64_t *)((char *)v11 + 20);
      a6 += v15;
      if ((unint64_t)v11 >= v10) {
        goto LABEL_60;
      }
    }
    uint64_t v16 = *(uint64_t *)((char *)v11 + 12);
    uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
    *(void *)&v67[0] = *v11;
    *((void *)&v67[0] + 1) = v17;
    sub_1CC65FD90(&v65, v62, (uint64_t *)v67, (uint64_t *)v67 + 1);
    if (v66)
    {
      uint64_t v57 = v16;
      unint64_t v28 = *(uint64_t **)(v12 + 32);
      unint64_t v29 = *v11;
      sub_1CD5DF87C(v28);
      unint64_t v30 = (void *)v28[7];
      unint64_t v31 = (void *)v28[8];
      if (v31 != v30)
      {
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
        do
        {
          unint64_t v33 = v32 >> 1;
          unsigned int v34 = &v30[3 * (v32 >> 1)];
          unint64_t v36 = *v34;
          unint64_t v35 = v34 + 3;
          v32 += ~(v32 >> 1);
          if (v36 < v29) {
            unint64_t v30 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
        operator new();
      }
      uint64_t v38 = v30[1];
      uint64_t v39 = *(char ***)(a1 + 64);
      uint64_t v41 = v39[1];
      unint64_t v40 = (unint64_t)v39[2];
      if ((unint64_t)v41 >= v40)
      {
        unint64_t v55 = a7;
        uint64_t v43 = *v39;
        uint64_t v44 = (v41 - *v39) >> 6;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 58) {
          abort();
        }
        uint64_t v56 = *(char ***)(a1 + 64);
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 5 > v45) {
          unint64_t v45 = v46 >> 5;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47 >> 58) {
          sub_1CB833614();
        }
        long long v48 = (char *)operator new(v47 << 6);
        long long v49 = &v48[64 * v44];
        *(_DWORD *)long long v49 = 2;
        *((void *)v49 + 1) = v38;
        *((void *)v49 + 2) = v37;
        *((void *)v49 + 3) = v57;
        *((void *)v49 + 4) = a6;
        *((void *)v49 + 5) = v15;
        *((void *)v49 + 6) = v58;
        *((void *)v49 + 7) = v59;
        if (v41 == v43)
        {
          uint64_t v54 = &v48[64 * v44];
          unint64_t v10 = a3;
        }
        else
        {
          long long v50 = &v48[64 * v44];
          unint64_t v10 = a3;
          do
          {
            long long v51 = *((_OWORD *)v41 - 4);
            long long v52 = *((_OWORD *)v41 - 3);
            long long v53 = *((_OWORD *)v41 - 1);
            uint64_t v54 = v50 - 64;
            *((_OWORD *)v50 - 2) = *((_OWORD *)v41 - 2);
            *((_OWORD *)v50 - 1) = v53;
            *((_OWORD *)v50 - 4) = v51;
            *((_OWORD *)v50 - 3) = v52;
            v41 -= 64;
            v50 -= 64;
          }
          while (v41 != v43);
        }
        unint64_t v42 = v49 + 64;
        uint64_t v39 = v56;
        char *v56 = v54;
        v56[1] = v49 + 64;
        v56[2] = &v48[64 * v47];
        if (v43)
        {
          operator delete(v43);
          uint64_t v39 = v56;
        }
        a7 = v55;
      }
      else
      {
        *(_DWORD *)uint64_t v41 = 2;
        *((void *)v41 + 1) = v38;
        *((void *)v41 + 2) = v37;
        *((void *)v41 + 3) = v57;
        *((void *)v41 + 4) = a6;
        *((void *)v41 + 5) = v15;
        *((void *)v41 + 6) = v58;
        unint64_t v42 = v41 + 64;
        *((void *)v41 + 7) = v59;
      }
      uint64_t v12 = a1;
      uint64_t v25 = 0;
      v39[1] = v42;
      char v14 = v61;
      *a8 = 0;
LABEL_29:
      if (v25) {
        return;
      }
      goto LABEL_30;
    }
    uint64_t v18 = v65[1];
    uint64_t v19 = **(void **)(v12 + 64);
    uint64_t v20 = v19 + (v18 << 6);
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    __n128 v23 = *(__n128 *)(v21 + 8);
    if (v22)
    {
      v71 &= ~1u;
      LOBYTE(v70) = 0;
      if ((v71 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      v67[0] = *(_OWORD *)(v21 + 8);
      llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
      if ((v71 & 1) == 0)
      {
LABEL_14:
        if ((_BYTE)v70)
        {
          if (v16)
          {
            char v24 = v69 & 0xFE;
            v69 &= ~1u;
            LOBYTE(v68) = 0;
          }
          else
          {
            *(void *)&v67[0] = a6;
            *((void *)&v67[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
            char v24 = v69;
          }
          uint64_t v26 = v16;
          if (v24)
          {
            uint64_t v25 = v68;
            uint64_t v68 = 0;
            *a8 = v25;
            if (v25) {
              goto LABEL_28;
            }
          }
          else if ((_BYTE)v68)
          {
            goto LABEL_22;
          }
          uint64_t v25 = 0;
          *(void *)uint64_t v21 = v26;
          *(void *)(v21 + 8) = a6;
          *(void *)(v21 + 16) = v15;
          uint64_t v27 = v19 + (v18 << 6);
          *(void *)(v27 + 48) = v58;
          *(void *)(v27 + 56) = v59;
          *a8 = 0;
          if (v24)
          {
            if (v68) {
              (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v23);
            }
            uint64_t v25 = 0;
          }
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v25 = 0;
        *a8 = 0;
        goto LABEL_28;
      }
    }
    uint64_t v25 = v70;
    *a8 = v70;
LABEL_28:
    unint64_t v10 = a3;
    uint64_t v12 = a1;
    char v14 = v61;
    goto LABEL_29;
  }
LABEL_60:
  *a8 = 0;
}

void *sub_1CC6623FC(void *a1)
{
  *a1 = &unk_1F26182F0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC662454(void *a1)
{
  *a1 = &unk_1F26182F0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6624CC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], uint64_t v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 3, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          unint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            unint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC662780(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        uint64_t v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unint64_t v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              uint64_t v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 3;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 3;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

uint64_t **sub_1CC662C58(uint64_t **result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    unsigned int v10 = v8 - 1;
    unsigned int v11 = (37 * *a3) & (v8 - 1);
    unint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v11);
    uint64_t v13 = *v12;
    if (*a3 == *v12)
    {
LABEL_3:
      char v14 = 0;
      goto LABEL_11;
    }
    uint64_t v17 = 0;
    int v18 = 1;
    while (v13 != -1)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v13 == -2;
      }
      if (v19) {
        uint64_t v17 = v12;
      }
      unsigned int v20 = v11 + v18++;
      unsigned int v11 = v20 & v10;
      unint64_t v12 = (uint64_t *)(v9 + 16 * (v20 & v10));
      uint64_t v13 = *v12;
      if (*a3 == *v12) {
        goto LABEL_3;
      }
    }
    if (v17) {
      unint64_t v12 = v17;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v8)
  {
    uint64_t result = (uint64_t **)sub_1CC662E88(a2, 2 * v8);
    uint64_t v16 = *a3;
    int v21 = *(_DWORD *)(a2 + 16) - 1;
    unsigned int v22 = (37 * *a3) & v21;
    unint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v22);
    uint64_t v23 = *v12;
    if (*a3 == *v12) {
      goto LABEL_8;
    }
    uint64_t v24 = 0;
    int v25 = 1;
    while (v23 != -1)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == -2;
      }
      if (v26) {
        uint64_t v24 = v12;
      }
      unsigned int v27 = v22 + v25++;
      unsigned int v22 = v27 & v21;
      unint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * (v27 & v21));
      uint64_t v23 = *v12;
      if (v16 == *v12) {
        goto LABEL_8;
      }
    }
    goto LABEL_44;
  }
  if (v8 + ~v15 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    uint64_t result = (uint64_t **)sub_1CC662E88(a2, v8);
    uint64_t v16 = *a3;
    int v28 = *(_DWORD *)(a2 + 16) - 1;
    unsigned int v29 = (37 * *a3) & v28;
    unint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v29);
    uint64_t v30 = *v12;
    if (*a3 == *v12) {
      goto LABEL_8;
    }
    uint64_t v24 = 0;
    int v31 = 1;
    while (v30 != -1)
    {
      if (v24) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v30 == -2;
      }
      if (v32) {
        uint64_t v24 = v12;
      }
      unsigned int v33 = v29 + v31++;
      unsigned int v29 = v33 & v28;
      unint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * (v33 & v28));
      uint64_t v30 = *v12;
      if (v16 == *v12) {
        goto LABEL_8;
      }
    }
LABEL_44:
    if (v24) {
      unint64_t v12 = v24;
    }
  }
  uint64_t v16 = *v12;
LABEL_8:
  ++*(_DWORD *)(a2 + 8);
  if (v16 != -1) {
    --*(_DWORD *)(a2 + 12);
  }
  *unint64_t v12 = *a3;
  v12[1] = *a4;
  uint64_t v9 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v14 = 1;
LABEL_11:
  char *v7 = v12;
  v7[1] = (uint64_t *)(v9 + 16 * v8);
  *((unsigned char *)v7 + 16) = v14;
  return result;
}

void *sub_1CC662E88(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      unint64_t v12 = v4;
      do
      {
        uint64_t v13 = *v12;
        if ((unint64_t)*v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v14 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v15 = v14 & (37 * v13);
          uint64_t v16 = (void *)(*(void *)a1 + 16 * v15);
          uint64_t v17 = *v16;
          if (v13 != *v16)
          {
            int v18 = 0;
            int v19 = 1;
            while (v17 != -1)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v17 == -2;
              }
              if (v20) {
                int v18 = v16;
              }
              unsigned int v21 = v15 + v19++;
              unsigned int v15 = v21 & v14;
              uint64_t v16 = (void *)(*(void *)a1 + 16 * (v21 & v14));
              uint64_t v17 = *v16;
              if (v13 == *v16) {
                goto LABEL_12;
              }
            }
            if (v18) {
              uint64_t v16 = v18;
            }
          }
LABEL_12:
          *uint64_t v16 = v13;
          v16[1] = v12[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
      }
      while (v12 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v22 = *(unsigned int *)(a1 + 16);
  if (v22)
  {
    uint64_t v23 = 16 * v22;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t *sub_1CC663018(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 16 * a2);
  }
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  unint64_t v4 = (uint64_t *)(a1 + 16 * v3);
  uint64_t v5 = *v4;
  if (*v4 != a3)
  {
    int v6 = 1;
    while (v5 != -1)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v5 = *(void *)(a1 + 16 * v3);
      if (v5 == a3) {
        return (uint64_t *)(a1 + 16 * v3);
      }
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

void *sub_1CC663078(void *a1)
{
  *a1 = &unk_1F2618320;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC6630D0(void *a1)
{
  *a1 = &unk_1F2618320;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC663148(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], int v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  uint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 4, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      uint64_t v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            unsigned int v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            unsigned int v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            int v31 = (unsigned __int8 *)v23;
          }
          else {
            int v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC6633FC(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      uint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        unsigned int v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unsigned int v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              unsigned int v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 4;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 4;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC6638D4(void *a1)
{
  *a1 = &unk_1F2618350;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66392C(void *a1)
{
  *a1 = &unk_1F2618350;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6639A4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], int v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  uint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 5, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      uint64_t v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            unsigned int v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            unsigned int v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          unint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            unint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC663C58(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      uint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        unsigned int v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unsigned int v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              unsigned int v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 5;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 5;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC664130(void *a1)
{
  *a1 = &unk_1F2618380;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC664188(void *a1)
{
  *a1 = &unk_1F2618380;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC664200(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        uint64_t v9 = &v5[5 * v7],
        uint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  unint64_t v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[5 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 0, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC6643B4(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v8 = a8;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v9 = a7;
    unint64_t v11 = a3;
    unint64_t v12 = a2;
    uint64_t v13 = a1;
    unint64_t v58 = HIDWORD(a4);
    if (a5) {
      BOOL v14 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v15 = v14;
    uint64_t v63 = a1 + 8;
    uint64_t v57 = a4;
    char v62 = v15;
    do
    {
      uint64_t v16 = bswap32(*(_DWORD *)(v12 + 8));
      if (a6 + v16 > v9) {
LABEL_63:
      }
        operator new();
      if (v15) {
        goto LABEL_54;
      }
      unint64_t v17 = *(void *)(v12 + 12);
      unint64_t v64 = bswap64(v17);
      uint64_t v18 = (uint64_t)(*(void *)(*(void *)(v13 + 64) + 8) - **(void **)(v13 + 64)) >> 6;
      *(void *)&v67[0] = bswap32(*(_DWORD *)v12);
      *((void *)&v67[0] + 1) = v18;
      sub_1CC65F280(&v65, v63, v67, (void *)v67 + 1);
      if (!v66)
      {
        uint64_t v29 = v13;
        uint64_t v30 = *(void *)(v65 + 8);
        uint64_t v31 = **(void **)(v29 + 64);
        uint64_t v32 = v31 + (v30 << 6);
        uint64_t v34 = *(void *)(v32 + 24);
        uint64_t v33 = v32 + 24;
        __n128 v35 = *(__n128 *)(v33 + 8);
        if (v34)
        {
          v71 &= ~1u;
          LOBYTE(v70) = 0;
          if ((v71 & 1) == 0) {
            goto LABEL_19;
          }
LABEL_46:
          uint64_t v37 = v70;
          *uint64_t v8 = v70;
LABEL_47:
          unint64_t v11 = a3;
          unint64_t v9 = a7;
          uint64_t v13 = a1;
          char v15 = v62;
          if (v37) {
            return;
          }
          goto LABEL_54;
        }
        v67[0] = *(_OWORD *)(v33 + 8);
        llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
        if (v71) {
          goto LABEL_46;
        }
LABEL_19:
        if ((_BYTE)v70)
        {
          if (v17)
          {
            v69 &= ~1u;
            char v36 = v69;
            LOBYTE(v68) = 0;
            if ((v69 & 1) == 0) {
              goto LABEL_22;
            }
LABEL_57:
            uint64_t v37 = v68;
            uint64_t v68 = 0;
            *uint64_t v8 = v37;
            if (v37) {
              goto LABEL_47;
            }
            goto LABEL_58;
          }
          *(void *)&v67[0] = a6;
          *((void *)&v67[0] + 1) = v16;
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
          char v36 = v69;
          if (v69) {
            goto LABEL_57;
          }
LABEL_22:
          if (!(_BYTE)v68)
          {
LABEL_58:
            uint64_t v37 = 0;
            *(void *)uint64_t v33 = v64;
            *(void *)(v33 + 8) = a6;
            *(void *)(v33 + 16) = v16;
            uint64_t v54 = v31 + (v30 << 6);
            *(void *)(v54 + 48) = v57;
            *(void *)(v54 + 56) = v58;
            *uint64_t v8 = 0;
            if (v36)
            {
              if (v68) {
                (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v35);
              }
              uint64_t v37 = 0;
            }
            goto LABEL_47;
          }
        }
        uint64_t v37 = 0;
        *uint64_t v8 = 0;
        goto LABEL_47;
      }
      unint64_t v19 = *(void **)(v13 + 32);
      unsigned int v20 = *(_DWORD *)(v12 + 4);
      unint64_t v21 = bswap32(*(_DWORD *)v12);
      unint64_t v22 = v19[2];
      BOOL v23 = v21 >= v22;
      unint64_t v24 = v21 - v22;
      if (v23 && (unint64_t v25 = bswap32(v20), v26 = v19[1], v24 + v25 <= v26))
      {
        if (v26 < v24) {
          unint64_t v24 = v19[1];
        }
        unint64_t v27 = *v19 + v24;
        if (v26 - v24 >= v25) {
          unint64_t v28 = v25;
        }
        else {
          unint64_t v28 = v26 - v24;
        }
        if (v20)
        {
LABEL_30:
          if (!v28) {
            goto LABEL_63;
          }
        }
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        if (v20) {
          goto LABEL_30;
        }
      }
      if (!v28) {
        operator new();
      }
      uint64_t v38 = *(void *)(v13 + 64);
      unint64_t v40 = *(void **)(v38 + 8);
      unint64_t v39 = *(void *)(v38 + 16);
      if ((unint64_t)v40 >= v39)
      {
        uint64_t v42 = *(void **)v38;
        uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 58) {
          abort();
        }
        uint64_t v45 = v39 - (void)v42;
        if (v45 >> 5 > v44) {
          unint64_t v44 = v45 >> 5;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
        }
        if (v44 >> 58) {
          sub_1CB833614();
        }
        unint64_t v46 = v27;
        unint64_t v56 = v44;
        unint64_t v47 = (char *)operator new(v44 << 6);
        long long v48 = &v47[64 * v43];
        *(_DWORD *)long long v48 = 0;
        *((void *)v48 + 1) = v46;
        *((void *)v48 + 2) = v28;
        *((void *)v48 + 3) = v64;
        *((void *)v48 + 4) = a6;
        *((void *)v48 + 5) = v16;
        *((void *)v48 + 6) = v57;
        *((void *)v48 + 7) = v58;
        if (v40 == v42)
        {
          uint64_t v53 = &v47[64 * v43];
          char v15 = v62;
        }
        else
        {
          long long v49 = &v47[64 * v43];
          char v15 = v62;
          do
          {
            long long v50 = *((_OWORD *)v40 - 4);
            long long v51 = *((_OWORD *)v40 - 3);
            long long v52 = *((_OWORD *)v40 - 1);
            uint64_t v53 = v49 - 64;
            *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v49 - 1) = v52;
            *((_OWORD *)v49 - 4) = v50;
            *((_OWORD *)v49 - 3) = v51;
            v40 -= 8;
            v49 -= 64;
          }
          while (v40 != v42);
        }
        uint64_t v41 = v48 + 64;
        *(void *)uint64_t v38 = v53;
        *(void *)(v38 + 8) = v48 + 64;
        *(void *)(v38 + 16) = &v47[64 * v56];
        if (v42) {
          operator delete(v42);
        }
        uint64_t v8 = a8;
        unint64_t v9 = a7;
      }
      else
      {
        *(_DWORD *)unint64_t v40 = 0;
        v40[1] = v27;
        v40[2] = v28;
        v40[3] = v64;
        v40[4] = a6;
        v40[5] = v16;
        v40[6] = v57;
        uint64_t v41 = (char *)(v40 + 8);
        v40[7] = v58;
        unint64_t v9 = a7;
        char v15 = v62;
      }
      *(void *)(v38 + 8) = v41;
      uint64_t v13 = a1;
      unint64_t v11 = a3;
      *uint64_t v8 = 0;
LABEL_54:
      v12 += 20;
      a6 += v16;
    }
    while (v12 < v11);
  }
  *uint64_t v8 = 0;
}

void *sub_1CC66485C(void *a1)
{
  *a1 = &unk_1F26183B0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC6648B4(void *a1)
{
  *a1 = &unk_1F26183B0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66492C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        unint64_t v9 = &v5[5 * v7],
        uint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  uint64_t v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[5 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 1, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC664AE0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v10 = a3;
    unint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v60 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v65 = a1 + 8;
    uint64_t v59 = a4;
    char v61 = v14;
    do
    {
      uint64_t v15 = bswap32(*(_DWORD *)(v11 + 8));
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0)
      {
        unint64_t v16 = *(void *)(v11 + 12);
        unint64_t v64 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
        *(void *)&v69[0] = bswap64(*(void *)v11);
        *((void *)&v69[0] + 1) = v17;
        sub_1CC65FD90(&v67, v65, (uint64_t *)v69, (uint64_t *)v69 + 1);
        if (!v68)
        {
          unint64_t v18 = a7;
          uint64_t v19 = v67[1];
          uint64_t v20 = **(void **)(v12 + 64);
          uint64_t v21 = v20 + (v19 << 6);
          uint64_t v23 = *(void *)(v21 + 24);
          uint64_t v22 = v21 + 24;
          __n128 v24 = *(__n128 *)(v22 + 8);
          if (v23)
          {
            v73 &= ~1u;
            LOBYTE(v72) = 0;
            if ((v73 & 1) == 0) {
              goto LABEL_14;
            }
LABEL_20:
            uint64_t v26 = v72;
            *a8 = v72;
LABEL_21:
            a7 = v18;
            unint64_t v10 = a3;
            uint64_t v12 = a1;
            char v14 = v61;
            if (v26) {
              return;
            }
            goto LABEL_22;
          }
          v69[0] = *(_OWORD *)(v22 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v72);
          if (v73) {
            goto LABEL_20;
          }
LABEL_14:
          if ((_BYTE)v72)
          {
            if (v16)
            {
              v71 &= ~1u;
              char v25 = v71;
              LOBYTE(v70) = 0;
              if ((v71 & 1) == 0) {
                goto LABEL_17;
              }
LABEL_25:
              uint64_t v26 = v70;
              uint64_t v70 = 0;
              *a8 = v26;
              if (v26) {
                goto LABEL_21;
              }
              goto LABEL_26;
            }
            *(void *)&v69[0] = a6;
            *((void *)&v69[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v70);
            char v25 = v71;
            if (v71) {
              goto LABEL_25;
            }
LABEL_17:
            if (!(_BYTE)v70)
            {
LABEL_26:
              uint64_t v26 = 0;
              *(void *)uint64_t v22 = v64;
              *(void *)(v22 + 8) = a6;
              *(void *)(v22 + 16) = v15;
              uint64_t v27 = v20 + (v19 << 6);
              *(void *)(v27 + 48) = v59;
              *(void *)(v27 + 56) = v60;
              *a8 = 0;
              if (v25)
              {
                if (v70) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v70 + 8))(v70, v24);
                }
                uint64_t v26 = 0;
              }
              goto LABEL_21;
            }
          }
          uint64_t v26 = 0;
          *a8 = 0;
          goto LABEL_21;
        }
        unint64_t v28 = *(uint64_t **)(v12 + 32);
        unint64_t v29 = bswap64(*(void *)v11);
        sub_1CD5DF87C(v28);
        uint64_t v30 = (void *)v28[7];
        uint64_t v31 = (void *)v28[8];
        if (v31 != v30)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
          do
          {
            unint64_t v33 = v32 >> 1;
            uint64_t v34 = &v30[3 * (v32 >> 1)];
            unint64_t v36 = *v34;
            __n128 v35 = v34 + 3;
            v32 += ~(v32 >> 1);
            if (v36 < v29) {
              uint64_t v30 = v35;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
        }
        if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
          operator new();
        }
        uint64_t v38 = v30[1];
        unint64_t v39 = *(char ***)(v12 + 64);
        uint64_t v41 = v39[1];
        unint64_t v40 = (unint64_t)v39[2];
        if ((unint64_t)v41 >= v40)
        {
          unint64_t v57 = a7;
          uint64_t v43 = *v39;
          uint64_t v44 = (v41 - *v39) >> 6;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 58) {
            abort();
          }
          unint64_t v58 = *(char ***)(v12 + 64);
          uint64_t v46 = v40 - (void)v43;
          if (v46 >> 5 > v45) {
            unint64_t v45 = v46 >> 5;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v45 >> 58) {
            sub_1CB833614();
          }
          uint64_t v47 = v38;
          uint64_t v48 = v37;
          unint64_t v56 = v45;
          long long v49 = (char *)operator new(v45 << 6);
          long long v50 = &v49[64 * v44];
          *(_DWORD *)long long v50 = 1;
          *((void *)v50 + 1) = v47;
          *((void *)v50 + 2) = v48;
          *((void *)v50 + 3) = v64;
          *((void *)v50 + 4) = a6;
          *((void *)v50 + 5) = v15;
          *((void *)v50 + 6) = v59;
          *((void *)v50 + 7) = v60;
          if (v41 == v43)
          {
            uint64_t v55 = &v49[64 * v44];
            a7 = v57;
          }
          else
          {
            long long v51 = &v49[64 * v44];
            a7 = v57;
            do
            {
              long long v52 = *((_OWORD *)v41 - 4);
              long long v53 = *((_OWORD *)v41 - 3);
              long long v54 = *((_OWORD *)v41 - 1);
              uint64_t v55 = v51 - 64;
              *((_OWORD *)v51 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 4) = v52;
              *((_OWORD *)v51 - 3) = v53;
              v41 -= 64;
              v51 -= 64;
            }
            while (v41 != v43);
          }
          uint64_t v42 = v50 + 64;
          unint64_t v39 = v58;
          char *v58 = v55;
          v58[1] = v50 + 64;
          v58[2] = &v49[64 * v56];
          unint64_t v10 = a3;
          if (v43)
          {
            operator delete(v43);
            unint64_t v39 = v58;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v41 = 1;
          *((void *)v41 + 1) = v38;
          *((void *)v41 + 2) = v37;
          *((void *)v41 + 3) = v64;
          *((void *)v41 + 4) = a6;
          *((void *)v41 + 5) = v15;
          *((void *)v41 + 6) = v59;
          uint64_t v42 = v41 + 64;
          *((void *)v41 + 7) = v60;
        }
        v39[1] = v42;
        uint64_t v12 = a1;
        *a8 = 0;
      }
LABEL_22:
      v11 += 20;
      a6 += v15;
    }
    while (v11 < v10);
  }
  *a8 = 0;
}

void *sub_1CC664FC0(void *a1)
{
  *a1 = &unk_1F26183E0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC665018(void *a1)
{
  *a1 = &unk_1F26183E0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC665090(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        unint64_t v9 = &v5[5 * v7],
        unint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  BOOL v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[5 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 2, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC665244(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v10 = a3;
    unint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v60 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v65 = a1 + 8;
    uint64_t v59 = a4;
    char v61 = v14;
    do
    {
      uint64_t v15 = bswap32(*(_DWORD *)(v11 + 8));
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0)
      {
        unint64_t v16 = *(void *)(v11 + 12);
        unint64_t v64 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
        *(void *)&v69[0] = bswap64(*(void *)v11);
        *((void *)&v69[0] + 1) = v17;
        sub_1CC65FD90(&v67, v65, (uint64_t *)v69, (uint64_t *)v69 + 1);
        if (!v68)
        {
          unint64_t v18 = a7;
          uint64_t v19 = v67[1];
          uint64_t v20 = **(void **)(v12 + 64);
          uint64_t v21 = v20 + (v19 << 6);
          uint64_t v23 = *(void *)(v21 + 24);
          uint64_t v22 = v21 + 24;
          __n128 v24 = *(__n128 *)(v22 + 8);
          if (v23)
          {
            v73 &= ~1u;
            LOBYTE(v72) = 0;
            if ((v73 & 1) == 0) {
              goto LABEL_14;
            }
LABEL_20:
            uint64_t v26 = v72;
            *a8 = v72;
LABEL_21:
            a7 = v18;
            unint64_t v10 = a3;
            uint64_t v12 = a1;
            char v14 = v61;
            if (v26) {
              return;
            }
            goto LABEL_22;
          }
          v69[0] = *(_OWORD *)(v22 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v72);
          if (v73) {
            goto LABEL_20;
          }
LABEL_14:
          if ((_BYTE)v72)
          {
            if (v16)
            {
              v71 &= ~1u;
              char v25 = v71;
              LOBYTE(v70) = 0;
              if ((v71 & 1) == 0) {
                goto LABEL_17;
              }
LABEL_25:
              uint64_t v26 = v70;
              uint64_t v70 = 0;
              *a8 = v26;
              if (v26) {
                goto LABEL_21;
              }
              goto LABEL_26;
            }
            *(void *)&v69[0] = a6;
            *((void *)&v69[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v70);
            char v25 = v71;
            if (v71) {
              goto LABEL_25;
            }
LABEL_17:
            if (!(_BYTE)v70)
            {
LABEL_26:
              uint64_t v26 = 0;
              *(void *)uint64_t v22 = v64;
              *(void *)(v22 + 8) = a6;
              *(void *)(v22 + 16) = v15;
              uint64_t v27 = v20 + (v19 << 6);
              *(void *)(v27 + 48) = v59;
              *(void *)(v27 + 56) = v60;
              *a8 = 0;
              if (v25)
              {
                if (v70) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v70 + 8))(v70, v24);
                }
                uint64_t v26 = 0;
              }
              goto LABEL_21;
            }
          }
          uint64_t v26 = 0;
          *a8 = 0;
          goto LABEL_21;
        }
        unint64_t v28 = *(uint64_t **)(v12 + 32);
        unint64_t v29 = bswap64(*(void *)v11);
        sub_1CD5DF87C(v28);
        uint64_t v30 = (void *)v28[7];
        uint64_t v31 = (void *)v28[8];
        if (v31 != v30)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
          do
          {
            unint64_t v33 = v32 >> 1;
            uint64_t v34 = &v30[3 * (v32 >> 1)];
            unint64_t v36 = *v34;
            __n128 v35 = v34 + 3;
            v32 += ~(v32 >> 1);
            if (v36 < v29) {
              uint64_t v30 = v35;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
        }
        if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
          operator new();
        }
        uint64_t v38 = v30[1];
        unint64_t v39 = *(char ***)(v12 + 64);
        uint64_t v41 = v39[1];
        unint64_t v40 = (unint64_t)v39[2];
        if ((unint64_t)v41 >= v40)
        {
          unint64_t v57 = a7;
          uint64_t v43 = *v39;
          uint64_t v44 = (v41 - *v39) >> 6;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 58) {
            abort();
          }
          unint64_t v58 = *(char ***)(v12 + 64);
          uint64_t v46 = v40 - (void)v43;
          if (v46 >> 5 > v45) {
            unint64_t v45 = v46 >> 5;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v45 >> 58) {
            sub_1CB833614();
          }
          uint64_t v47 = v38;
          uint64_t v48 = v37;
          unint64_t v56 = v45;
          long long v49 = (char *)operator new(v45 << 6);
          long long v50 = &v49[64 * v44];
          *(_DWORD *)long long v50 = 2;
          *((void *)v50 + 1) = v47;
          *((void *)v50 + 2) = v48;
          *((void *)v50 + 3) = v64;
          *((void *)v50 + 4) = a6;
          *((void *)v50 + 5) = v15;
          *((void *)v50 + 6) = v59;
          *((void *)v50 + 7) = v60;
          if (v41 == v43)
          {
            uint64_t v55 = &v49[64 * v44];
            a7 = v57;
          }
          else
          {
            long long v51 = &v49[64 * v44];
            a7 = v57;
            do
            {
              long long v52 = *((_OWORD *)v41 - 4);
              long long v53 = *((_OWORD *)v41 - 3);
              long long v54 = *((_OWORD *)v41 - 1);
              uint64_t v55 = v51 - 64;
              *((_OWORD *)v51 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 4) = v52;
              *((_OWORD *)v51 - 3) = v53;
              v41 -= 64;
              v51 -= 64;
            }
            while (v41 != v43);
          }
          uint64_t v42 = v50 + 64;
          unint64_t v39 = v58;
          char *v58 = v55;
          v58[1] = v50 + 64;
          v58[2] = &v49[64 * v56];
          unint64_t v10 = a3;
          if (v43)
          {
            operator delete(v43);
            unint64_t v39 = v58;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v41 = 2;
          *((void *)v41 + 1) = v38;
          *((void *)v41 + 2) = v37;
          *((void *)v41 + 3) = v64;
          *((void *)v41 + 4) = a6;
          *((void *)v41 + 5) = v15;
          *((void *)v41 + 6) = v59;
          uint64_t v42 = v41 + 64;
          *((void *)v41 + 7) = v60;
        }
        v39[1] = v42;
        uint64_t v12 = a1;
        *a8 = 0;
      }
LABEL_22:
      v11 += 20;
      a6 += v15;
    }
    while (v11 < v10);
  }
  *a8 = 0;
}

void *sub_1CC665724(void *a1)
{
  *a1 = &unk_1F2618410;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66577C(void *a1)
{
  *a1 = &unk_1F2618410;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6657F4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), int v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 3, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      __n128 v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            uint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            uint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC665AB0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 3;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 3;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC665FB4(void *a1)
{
  *a1 = &unk_1F2618440;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66600C(void *a1)
{
  *a1 = &unk_1F2618440;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC666084(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), uint64_t v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 4, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC666340(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 4;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 4;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC666844(void *a1)
{
  *a1 = &unk_1F2618470;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66689C(void *a1)
{
  *a1 = &unk_1F2618470;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC666914(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), uint64_t v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 5, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC666BD0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 5;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 5;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC6670D4(void *a1)
{
  *a1 = &unk_1F26184A0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66712C(void *a1)
{
  *a1 = &unk_1F26184A0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6671A4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], uint64_t v8 = &v5[6 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[6 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 0, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC66734C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v8 = a8;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v9 = a7;
    unint64_t v11 = a3;
    unint64_t v12 = a2;
    uint64_t v13 = a1;
    unint64_t v57 = HIDWORD(a4);
    if (a5) {
      BOOL v14 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v15 = v14;
    uint64_t v62 = a1 + 8;
    uint64_t v56 = a4;
    char v61 = v15;
    do
    {
      uint64_t v16 = *(unsigned int *)(v12 + 12);
      if (a6 + v16 > v9) {
LABEL_61:
      }
        operator new();
      if (v15) {
        goto LABEL_59;
      }
      uint64_t v17 = *(void *)(v12 + 16);
      uint64_t v18 = (uint64_t)(*(void *)(*(void *)(v13 + 64) + 8) - **(void **)(v13 + 64)) >> 6;
      *(void *)&v65[0] = *(void *)v12;
      *((void *)&v65[0] + 1) = v18;
      sub_1CC65FD90(&v63, v62, (uint64_t *)v65, (uint64_t *)v65 + 1);
      if (!v64)
      {
        uint64_t v26 = v13;
        uint64_t v27 = v63[1];
        uint64_t v28 = **(void **)(v26 + 64);
        uint64_t v29 = v28 + (v27 << 6);
        uint64_t v31 = *(void *)(v29 + 24);
        uint64_t v30 = v29 + 24;
        __n128 v32 = *(__n128 *)(v30 + 8);
        if (v31)
        {
          v69 &= ~1u;
          LOBYTE(v68) = 0;
          if ((v69 & 1) == 0) {
            goto LABEL_18;
          }
LABEL_43:
          uint64_t v50 = v68;
          *uint64_t v8 = v68;
LABEL_58:
          unint64_t v9 = a7;
          uint64_t v13 = a1;
          unint64_t v11 = a3;
          char v15 = v61;
          if (v50) {
            return;
          }
          goto LABEL_59;
        }
        v65[0] = *(_OWORD *)(v30 + 8);
        llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v65, (uint64_t)&v68);
        if (v69) {
          goto LABEL_43;
        }
LABEL_18:
        if ((_BYTE)v68)
        {
          if (v17)
          {
            char v33 = v67 & 0xFE;
            v67 &= ~1u;
            LOBYTE(v66) = 0;
          }
          else
          {
            *(void *)&v65[0] = a6;
            *((void *)&v65[0] + 1) = v16;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v65, (uint64_t)&v66);
            char v33 = v67;
          }
          uint64_t v51 = v17;
          if (v33)
          {
            uint64_t v50 = v66;
            uint64_t v66 = 0;
            *uint64_t v8 = v50;
            if (v50) {
              goto LABEL_58;
            }
          }
          else if ((_BYTE)v66)
          {
            goto LABEL_52;
          }
          uint64_t v50 = 0;
          *(void *)uint64_t v30 = v51;
          *(void *)(v30 + 8) = a6;
          *(void *)(v30 + 16) = v16;
          uint64_t v52 = v28 + (v27 << 6);
          *(void *)(v52 + 48) = v56;
          *(void *)(v52 + 56) = v57;
          *uint64_t v8 = 0;
          if (v33)
          {
            if (v66) {
              (*(void (**)(uint64_t, __n128))(*(void *)v66 + 8))(v66, v32);
            }
            uint64_t v50 = 0;
          }
          goto LABEL_58;
        }
LABEL_52:
        uint64_t v50 = 0;
        *uint64_t v8 = 0;
        goto LABEL_58;
      }
      uint64_t v19 = *(void **)(v13 + 32);
      unint64_t v20 = *(unsigned int *)(v12 + 8);
      unint64_t v21 = v19[2];
      unint64_t v22 = *(void *)v12 - v21;
      if (*(void *)v12 >= v21 && (unint64_t v23 = v19[1], v22 + v20 <= v23))
      {
        if (v23 < v22) {
          unint64_t v22 = v19[1];
        }
        unint64_t v24 = *v19 + v22;
        if (v23 - v22 >= v20) {
          unint64_t v25 = *(unsigned int *)(v12 + 8);
        }
        else {
          unint64_t v25 = v23 - v22;
        }
        if (v20)
        {
LABEL_27:
          if (!v25) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
        if (v20) {
          goto LABEL_27;
        }
      }
      if (!v25) {
        operator new();
      }
      uint64_t v34 = *(void *)(v13 + 64);
      uint64_t v36 = *(void **)(v34 + 8);
      unint64_t v35 = *(void *)(v34 + 16);
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v54 = v17;
        uint64_t v38 = *(void **)v34;
        uint64_t v39 = ((uint64_t)v36 - *(void *)v34) >> 6;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 58) {
          abort();
        }
        uint64_t v41 = v35 - (void)v38;
        if (v41 >> 5 > v40) {
          unint64_t v40 = v41 >> 5;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFLL;
        }
        if (v40 >> 58) {
          sub_1CB833614();
        }
        unint64_t v42 = v24;
        unint64_t v53 = v40;
        uint64_t v43 = (char *)operator new(v40 << 6);
        unint64_t v44 = &v43[64 * v39];
        *(_DWORD *)unint64_t v44 = 0;
        *((void *)v44 + 1) = v42;
        *((void *)v44 + 2) = v25;
        *((void *)v44 + 3) = v54;
        *((void *)v44 + 4) = a6;
        *((void *)v44 + 5) = v16;
        *((void *)v44 + 6) = v56;
        *((void *)v44 + 7) = v57;
        if (v36 == v38)
        {
          long long v49 = &v43[64 * v39];
          unint64_t v9 = a7;
          char v15 = v61;
        }
        else
        {
          uint64_t v45 = &v43[64 * v39];
          unint64_t v9 = a7;
          char v15 = v61;
          do
          {
            long long v46 = *((_OWORD *)v36 - 4);
            long long v47 = *((_OWORD *)v36 - 3);
            long long v48 = *((_OWORD *)v36 - 1);
            long long v49 = v45 - 64;
            *((_OWORD *)v45 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v45 - 1) = v48;
            *((_OWORD *)v45 - 4) = v46;
            *((_OWORD *)v45 - 3) = v47;
            v36 -= 8;
            v45 -= 64;
          }
          while (v36 != v38);
        }
        uint64_t v37 = v44 + 64;
        *(void *)uint64_t v34 = v49;
        *(void *)(v34 + 8) = v44 + 64;
        *(void *)(v34 + 16) = &v43[64 * v53];
        if (v38) {
          operator delete(v38);
        }
        unint64_t v11 = a3;
      }
      else
      {
        *(_DWORD *)uint64_t v36 = 0;
        v36[1] = v24;
        v36[2] = v25;
        v36[3] = v17;
        v36[4] = a6;
        v36[5] = v16;
        v36[6] = v56;
        uint64_t v37 = (char *)(v36 + 8);
        v36[7] = v57;
        unint64_t v11 = a3;
        char v15 = v61;
      }
      *(void *)(v34 + 8) = v37;
      uint64_t v8 = a8;
      uint64_t v13 = a1;
      *a8 = 0;
LABEL_59:
      v12 += 24;
      a6 += v16;
    }
    while (v12 < v11);
  }
  *uint64_t v8 = 0;
}

void *sub_1CC6677E0(void *a1)
{
  *a1 = &unk_1F26184D0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC667838(void *a1)
{
  *a1 = &unk_1F26184D0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6678B0(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], uint64_t v8 = &v5[5 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  unint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[5 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 1, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC667A58(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a2 < a3)
  {
    unint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v59 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v62 = a1 + 8;
    uint64_t v58 = a4;
    char v61 = v14;
    while (1)
    {
      uint64_t v15 = *((unsigned int *)v11 + 2);
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_30:
      uint64_t v11 = (uint64_t *)((char *)v11 + 20);
      a6 += v15;
      if ((unint64_t)v11 >= v10) {
        goto LABEL_60;
      }
    }
    uint64_t v16 = *(uint64_t *)((char *)v11 + 12);
    uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
    *(void *)&v67[0] = *v11;
    *((void *)&v67[0] + 1) = v17;
    sub_1CC65FD90(&v65, v62, (uint64_t *)v67, (uint64_t *)v67 + 1);
    if (v66)
    {
      uint64_t v57 = v16;
      uint64_t v28 = *(uint64_t **)(v12 + 32);
      unint64_t v29 = *v11;
      sub_1CD5DF87C(v28);
      uint64_t v30 = (void *)v28[7];
      uint64_t v31 = (void *)v28[8];
      if (v31 != v30)
      {
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
        do
        {
          unint64_t v33 = v32 >> 1;
          uint64_t v34 = &v30[3 * (v32 >> 1)];
          unint64_t v36 = *v34;
          unint64_t v35 = v34 + 3;
          v32 += ~(v32 >> 1);
          if (v36 < v29) {
            uint64_t v30 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
        operator new();
      }
      uint64_t v38 = v30[1];
      uint64_t v39 = *(char ***)(a1 + 64);
      uint64_t v41 = v39[1];
      unint64_t v40 = (unint64_t)v39[2];
      if ((unint64_t)v41 >= v40)
      {
        unint64_t v55 = a7;
        uint64_t v43 = *v39;
        uint64_t v44 = (v41 - *v39) >> 6;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 58) {
          abort();
        }
        uint64_t v56 = *(char ***)(a1 + 64);
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 5 > v45) {
          unint64_t v45 = v46 >> 5;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47 >> 58) {
          sub_1CB833614();
        }
        long long v48 = (char *)operator new(v47 << 6);
        long long v49 = &v48[64 * v44];
        *(_DWORD *)long long v49 = 1;
        *((void *)v49 + 1) = v38;
        *((void *)v49 + 2) = v37;
        *((void *)v49 + 3) = v57;
        *((void *)v49 + 4) = a6;
        *((void *)v49 + 5) = v15;
        *((void *)v49 + 6) = v58;
        *((void *)v49 + 7) = v59;
        if (v41 == v43)
        {
          uint64_t v54 = &v48[64 * v44];
          unint64_t v10 = a3;
        }
        else
        {
          uint64_t v50 = &v48[64 * v44];
          unint64_t v10 = a3;
          do
          {
            long long v51 = *((_OWORD *)v41 - 4);
            long long v52 = *((_OWORD *)v41 - 3);
            long long v53 = *((_OWORD *)v41 - 1);
            uint64_t v54 = v50 - 64;
            *((_OWORD *)v50 - 2) = *((_OWORD *)v41 - 2);
            *((_OWORD *)v50 - 1) = v53;
            *((_OWORD *)v50 - 4) = v51;
            *((_OWORD *)v50 - 3) = v52;
            v41 -= 64;
            v50 -= 64;
          }
          while (v41 != v43);
        }
        unint64_t v42 = v49 + 64;
        uint64_t v39 = v56;
        char *v56 = v54;
        v56[1] = v49 + 64;
        v56[2] = &v48[64 * v47];
        if (v43)
        {
          operator delete(v43);
          uint64_t v39 = v56;
        }
        a7 = v55;
      }
      else
      {
        *(_DWORD *)uint64_t v41 = 1;
        *((void *)v41 + 1) = v38;
        *((void *)v41 + 2) = v37;
        *((void *)v41 + 3) = v57;
        *((void *)v41 + 4) = a6;
        *((void *)v41 + 5) = v15;
        *((void *)v41 + 6) = v58;
        unint64_t v42 = v41 + 64;
        *((void *)v41 + 7) = v59;
      }
      uint64_t v12 = a1;
      uint64_t v25 = 0;
      v39[1] = v42;
      char v14 = v61;
      *a8 = 0;
LABEL_29:
      if (v25) {
        return;
      }
      goto LABEL_30;
    }
    uint64_t v18 = v65[1];
    uint64_t v19 = **(void **)(v12 + 64);
    uint64_t v20 = v19 + (v18 << 6);
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    __n128 v23 = *(__n128 *)(v21 + 8);
    if (v22)
    {
      v71 &= ~1u;
      LOBYTE(v70) = 0;
      if ((v71 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      v67[0] = *(_OWORD *)(v21 + 8);
      llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
      if ((v71 & 1) == 0)
      {
LABEL_14:
        if ((_BYTE)v70)
        {
          if (v16)
          {
            char v24 = v69 & 0xFE;
            v69 &= ~1u;
            LOBYTE(v68) = 0;
          }
          else
          {
            *(void *)&v67[0] = a6;
            *((void *)&v67[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
            char v24 = v69;
          }
          uint64_t v26 = v16;
          if (v24)
          {
            uint64_t v25 = v68;
            uint64_t v68 = 0;
            *a8 = v25;
            if (v25) {
              goto LABEL_28;
            }
          }
          else if ((_BYTE)v68)
          {
            goto LABEL_22;
          }
          uint64_t v25 = 0;
          *(void *)uint64_t v21 = v26;
          *(void *)(v21 + 8) = a6;
          *(void *)(v21 + 16) = v15;
          uint64_t v27 = v19 + (v18 << 6);
          *(void *)(v27 + 48) = v58;
          *(void *)(v27 + 56) = v59;
          *a8 = 0;
          if (v24)
          {
            if (v68) {
              (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v23);
            }
            uint64_t v25 = 0;
          }
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v25 = 0;
        *a8 = 0;
        goto LABEL_28;
      }
    }
    uint64_t v25 = v70;
    *a8 = v70;
LABEL_28:
    unint64_t v10 = a3;
    uint64_t v12 = a1;
    char v14 = v61;
    goto LABEL_29;
  }
LABEL_60:
  *a8 = 0;
}

void *sub_1CC667F28(void *a1)
{
  *a1 = &unk_1F2618500;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC667F80(void *a1)
{
  *a1 = &unk_1F2618500;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC667FF8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (v7 = (char *)a2[1], uint64_t v8 = &v5[5 * *a2], v9 = &v7[(void)v8], &v7[(void)v8] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = *(char **)(a1 + 56);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  v19[0] = (char *)&v5[5 * *a2];
  v19[1] = v7;
  v19[2] = v12;
  long long v20 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v19, 2, &v18);
  unint64_t v15 = v18;
  if (v18) {
    goto LABEL_5;
  }
  unint64_t v17 = (unint64_t)&v9[v11];
  if (v17 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v18, a1, v5, v8, (-1431655765 * ((v13 - v14) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v13 - v14) >> 3)) << 32), 1, v9, v17);
  unint64_t v15 = v18;
  if (v18)
  {
LABEL_5:
    char v16 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v15 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v16 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)a4 = v15;
}

void sub_1CC6681A0(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a2 < a3)
  {
    unint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v59 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v62 = a1 + 8;
    uint64_t v58 = a4;
    char v61 = v14;
    while (1)
    {
      uint64_t v15 = *((unsigned int *)v11 + 2);
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_30:
      uint64_t v11 = (uint64_t *)((char *)v11 + 20);
      a6 += v15;
      if ((unint64_t)v11 >= v10) {
        goto LABEL_60;
      }
    }
    uint64_t v16 = *(uint64_t *)((char *)v11 + 12);
    uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
    *(void *)&v67[0] = *v11;
    *((void *)&v67[0] + 1) = v17;
    sub_1CC65FD90(&v65, v62, (uint64_t *)v67, (uint64_t *)v67 + 1);
    if (v66)
    {
      uint64_t v57 = v16;
      uint64_t v28 = *(uint64_t **)(v12 + 32);
      unint64_t v29 = *v11;
      sub_1CD5DF87C(v28);
      uint64_t v30 = (void *)v28[7];
      uint64_t v31 = (void *)v28[8];
      if (v31 != v30)
      {
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
        do
        {
          unint64_t v33 = v32 >> 1;
          uint64_t v34 = &v30[3 * (v32 >> 1)];
          unint64_t v36 = *v34;
          unint64_t v35 = v34 + 3;
          v32 += ~(v32 >> 1);
          if (v36 < v29) {
            uint64_t v30 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
        operator new();
      }
      uint64_t v38 = v30[1];
      uint64_t v39 = *(char ***)(a1 + 64);
      uint64_t v41 = v39[1];
      unint64_t v40 = (unint64_t)v39[2];
      if ((unint64_t)v41 >= v40)
      {
        unint64_t v55 = a7;
        uint64_t v43 = *v39;
        uint64_t v44 = (v41 - *v39) >> 6;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 58) {
          abort();
        }
        uint64_t v56 = *(char ***)(a1 + 64);
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 5 > v45) {
          unint64_t v45 = v46 >> 5;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47 >> 58) {
          sub_1CB833614();
        }
        long long v48 = (char *)operator new(v47 << 6);
        long long v49 = &v48[64 * v44];
        *(_DWORD *)long long v49 = 2;
        *((void *)v49 + 1) = v38;
        *((void *)v49 + 2) = v37;
        *((void *)v49 + 3) = v57;
        *((void *)v49 + 4) = a6;
        *((void *)v49 + 5) = v15;
        *((void *)v49 + 6) = v58;
        *((void *)v49 + 7) = v59;
        if (v41 == v43)
        {
          uint64_t v54 = &v48[64 * v44];
          unint64_t v10 = a3;
        }
        else
        {
          uint64_t v50 = &v48[64 * v44];
          unint64_t v10 = a3;
          do
          {
            long long v51 = *((_OWORD *)v41 - 4);
            long long v52 = *((_OWORD *)v41 - 3);
            long long v53 = *((_OWORD *)v41 - 1);
            uint64_t v54 = v50 - 64;
            *((_OWORD *)v50 - 2) = *((_OWORD *)v41 - 2);
            *((_OWORD *)v50 - 1) = v53;
            *((_OWORD *)v50 - 4) = v51;
            *((_OWORD *)v50 - 3) = v52;
            v41 -= 64;
            v50 -= 64;
          }
          while (v41 != v43);
        }
        unint64_t v42 = v49 + 64;
        uint64_t v39 = v56;
        char *v56 = v54;
        v56[1] = v49 + 64;
        v56[2] = &v48[64 * v47];
        if (v43)
        {
          operator delete(v43);
          uint64_t v39 = v56;
        }
        a7 = v55;
      }
      else
      {
        *(_DWORD *)uint64_t v41 = 2;
        *((void *)v41 + 1) = v38;
        *((void *)v41 + 2) = v37;
        *((void *)v41 + 3) = v57;
        *((void *)v41 + 4) = a6;
        *((void *)v41 + 5) = v15;
        *((void *)v41 + 6) = v58;
        unint64_t v42 = v41 + 64;
        *((void *)v41 + 7) = v59;
      }
      uint64_t v12 = a1;
      uint64_t v25 = 0;
      v39[1] = v42;
      char v14 = v61;
      *a8 = 0;
LABEL_29:
      if (v25) {
        return;
      }
      goto LABEL_30;
    }
    uint64_t v18 = v65[1];
    uint64_t v19 = **(void **)(v12 + 64);
    uint64_t v20 = v19 + (v18 << 6);
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    __n128 v23 = *(__n128 *)(v21 + 8);
    if (v22)
    {
      v71 &= ~1u;
      LOBYTE(v70) = 0;
      if ((v71 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      v67[0] = *(_OWORD *)(v21 + 8);
      llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
      if ((v71 & 1) == 0)
      {
LABEL_14:
        if ((_BYTE)v70)
        {
          if (v16)
          {
            char v24 = v69 & 0xFE;
            v69 &= ~1u;
            LOBYTE(v68) = 0;
          }
          else
          {
            *(void *)&v67[0] = a6;
            *((void *)&v67[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
            char v24 = v69;
          }
          uint64_t v26 = v16;
          if (v24)
          {
            uint64_t v25 = v68;
            uint64_t v68 = 0;
            *a8 = v25;
            if (v25) {
              goto LABEL_28;
            }
          }
          else if ((_BYTE)v68)
          {
            goto LABEL_22;
          }
          uint64_t v25 = 0;
          *(void *)uint64_t v21 = v26;
          *(void *)(v21 + 8) = a6;
          *(void *)(v21 + 16) = v15;
          uint64_t v27 = v19 + (v18 << 6);
          *(void *)(v27 + 48) = v58;
          *(void *)(v27 + 56) = v59;
          *a8 = 0;
          if (v24)
          {
            if (v68) {
              (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v23);
            }
            uint64_t v25 = 0;
          }
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v25 = 0;
        *a8 = 0;
        goto LABEL_28;
      }
    }
    uint64_t v25 = v70;
    *a8 = v70;
LABEL_28:
    unint64_t v10 = a3;
    uint64_t v12 = a1;
    char v14 = v61;
    goto LABEL_29;
  }
LABEL_60:
  *a8 = 0;
}

void *sub_1CC668670(void *a1)
{
  *a1 = &unk_1F2618530;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC6686C8(void *a1)
{
  *a1 = &unk_1F2618530;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC668740(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], uint64_t v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 3, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            uint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            uint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC6689F4(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        uint64_t v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unint64_t v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              uint64_t v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 3;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 3;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC668ECC(void *a1)
{
  *a1 = &unk_1F2618560;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC668F24(void *a1)
{
  *a1 = &unk_1F2618560;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC668F9C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], uint64_t v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 4, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      uint64_t v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          unint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            unint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC669250(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        uint64_t v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unint64_t v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              uint64_t v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 4;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 4;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC669728(void *a1)
{
  *a1 = &unk_1F2618590;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC669780(void *a1)
{
  *a1 = &unk_1F2618590;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6697F8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = a2[1], uint64_t v6 = (int *)((char *)a2 + 29 * *a2 + 16), v7 = (char *)v6 + v5, (unint64_t)v6 + v5 > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = (char *)a2 + 29 * *a2 + 16;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 5, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      uint64_t v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          unint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            unint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC669AAC(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v55 = a1 + 8;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(a1 + 88), *(void *)(v5 + 20));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_52:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      unint64_t v12 = v5 + 28 + v7;
      unint64_t v13 = v10[1];
      unint64_t v14 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        if (v12 > v4) {
          goto LABEL_52;
        }
        uint64_t v56 = *(void *)(v5 + 12);
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 6;
        *(void *)&v62[0] = *(void *)v5;
        *((void *)&v62[0] + 1) = v15;
        sub_1CC65FD90(&v60, v55, (uint64_t *)v62, (uint64_t *)v62 + 1);
        if (!v61)
        {
          unint64_t v58 = v5 + 28 + v7;
          uint64_t v16 = v60[1];
          uint64_t v17 = **(void **)(a1 + 64);
          uint64_t v18 = v17 + (v16 << 6);
          uint64_t v20 = *(void *)(v18 + 24);
          uint64_t v19 = v18 + 24;
          __n128 v21 = *(__n128 *)(v19 + 8);
          if (v20)
          {
            v66 &= ~1u;
            LOBYTE(v65) = 0;
            if ((v66 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_15:
            uint64_t v23 = v65;
            *a4 = v65;
LABEL_16:
            unint64_t v4 = a3;
            unint64_t v12 = v58;
            if (v23) {
              return;
            }
            goto LABEL_17;
          }
          v62[0] = *(_OWORD *)(v19 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v65);
          if (v66) {
            goto LABEL_15;
          }
LABEL_9:
          if ((_BYTE)v65)
          {
            if (v56)
            {
              v64 &= ~1u;
              char v22 = v64;
              LOBYTE(v63) = 0;
              if ((v64 & 1) == 0) {
                goto LABEL_12;
              }
LABEL_20:
              uint64_t v23 = v63;
              uint64_t v63 = 0;
              *a4 = v23;
              if (v23) {
                goto LABEL_16;
              }
              goto LABEL_21;
            }
            *(void *)&v62[0] = v5 + 28;
            *((void *)&v62[0] + 1) = v7;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v62, (uint64_t)&v63);
            char v22 = v64;
            if (v64) {
              goto LABEL_20;
            }
LABEL_12:
            if (!(_BYTE)v63)
            {
LABEL_21:
              uint64_t v23 = 0;
              *(void *)uint64_t v19 = v56;
              *(void *)(v19 + 8) = v11;
              *(void *)(v19 + 16) = v7;
              uint64_t v24 = v17 + (v16 << 6);
              *(void *)(v24 + 48) = v13;
              *(void *)(v24 + 56) = v14;
              *a4 = 0;
              if (v22)
              {
                if (v63) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v63 + 8))(v63, v21);
                }
                uint64_t v23 = 0;
              }
              goto LABEL_16;
            }
          }
          uint64_t v23 = 0;
          *a4 = 0;
          goto LABEL_16;
        }
        char v25 = *(uint64_t **)(a1 + 32);
        unint64_t v26 = *(void *)v5;
        sub_1CD5DF87C(v25);
        uint64_t v27 = (void *)v25[7];
        char v28 = (void *)v25[8];
        unint64_t v29 = v5 + 28 + v7;
        if (v28 != v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v27[3 * (v30 >> 1)];
            unint64_t v34 = *v32;
            unint64_t v33 = v32 + 3;
            v30 += ~(v30 >> 1);
            if (v34 < v26) {
              uint64_t v27 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v27 == v28 || *v27 != v26 || (uint64_t v35 = v27[2]) == 0) {
          operator new();
        }
        uint64_t v36 = v27[1];
        uint64_t v37 = *(void *)(a1 + 64);
        uint64_t v39 = *(void **)(v37 + 8);
        unint64_t v38 = *(void *)(v37 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(void **)v37;
          uint64_t v42 = ((uint64_t)v39 - *(void *)v37) >> 6;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 58) {
            abort();
          }
          uint64_t v53 = v36;
          uint64_t v59 = *(void *)(a1 + 64);
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 5 > v43) {
            unint64_t v43 = v44 >> 5;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v43 >> 58) {
            sub_1CB833614();
          }
          unint64_t v52 = v43;
          unint64_t v45 = (char *)operator new(v43 << 6);
          uint64_t v46 = &v45[64 * v42];
          *(_DWORD *)uint64_t v46 = 5;
          *((void *)v46 + 1) = v53;
          *((void *)v46 + 2) = v35;
          *((void *)v46 + 3) = v56;
          *((void *)v46 + 4) = v11;
          *((void *)v46 + 5) = v7;
          *((void *)v46 + 6) = v13;
          *((void *)v46 + 7) = v14;
          if (v39 == v41)
          {
            long long v51 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
          }
          else
          {
            unint64_t v47 = &v45[64 * v42];
            unint64_t v12 = v29;
            uint64_t v37 = v59;
            do
            {
              long long v48 = *((_OWORD *)v39 - 4);
              long long v49 = *((_OWORD *)v39 - 3);
              long long v50 = *((_OWORD *)v39 - 1);
              long long v51 = v47 - 64;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v47 - 1) = v50;
              *((_OWORD *)v47 - 4) = v48;
              *((_OWORD *)v47 - 3) = v49;
              v39 -= 8;
              v47 -= 64;
            }
            while (v39 != v41);
          }
          unint64_t v40 = v46 + 64;
          *(void *)uint64_t v37 = v51;
          *(void *)(v37 + 8) = v46 + 64;
          *(void *)(v37 + 16) = &v45[64 * v52];
          if (v41)
          {
            operator delete(v41);
            uint64_t v37 = v59;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 5;
          v39[1] = v36;
          v39[2] = v35;
          v39[3] = v56;
          v39[4] = v11;
          v39[5] = v7;
          v39[6] = v13;
          unint64_t v40 = (char *)(v39 + 8);
          v39[7] = v14;
          unint64_t v12 = v5 + 28 + v7;
        }
        *(void *)(v37 + 8) = v40;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC669F84(void *a1)
{
  *a1 = &unk_1F26185C0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC669FDC(void *a1)
{
  *a1 = &unk_1F26185C0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66A054(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        uint64_t v9 = &v5[6 * v7],
        unint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  unint64_t v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[6 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 0, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC66A208(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v8 = a8;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v9 = a7;
    unint64_t v11 = a3;
    unint64_t v12 = a2;
    uint64_t v13 = a1;
    unint64_t v58 = HIDWORD(a4);
    if (a5) {
      BOOL v14 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v15 = v14;
    uint64_t v63 = a1 + 8;
    uint64_t v57 = a4;
    char v62 = v15;
    do
    {
      uint64_t v16 = bswap32(*(_DWORD *)(v12 + 12));
      if (a6 + v16 > v9) {
LABEL_63:
      }
        operator new();
      if (v15) {
        goto LABEL_54;
      }
      unint64_t v17 = *(void *)(v12 + 16);
      unint64_t v64 = bswap64(v17);
      uint64_t v18 = (uint64_t)(*(void *)(*(void *)(v13 + 64) + 8) - **(void **)(v13 + 64)) >> 6;
      *(void *)&v67[0] = bswap64(*(void *)v12);
      *((void *)&v67[0] + 1) = v18;
      sub_1CC65FD90(&v65, v63, (uint64_t *)v67, (uint64_t *)v67 + 1);
      if (!v66)
      {
        uint64_t v29 = v13;
        uint64_t v30 = v65[1];
        uint64_t v31 = **(void **)(v29 + 64);
        uint64_t v32 = v31 + (v30 << 6);
        uint64_t v34 = *(void *)(v32 + 24);
        uint64_t v33 = v32 + 24;
        __n128 v35 = *(__n128 *)(v33 + 8);
        if (v34)
        {
          v71 &= ~1u;
          LOBYTE(v70) = 0;
          if ((v71 & 1) == 0) {
            goto LABEL_19;
          }
LABEL_46:
          uint64_t v37 = v70;
          *uint64_t v8 = v70;
LABEL_47:
          unint64_t v11 = a3;
          unint64_t v9 = a7;
          uint64_t v13 = a1;
          char v15 = v62;
          if (v37) {
            return;
          }
          goto LABEL_54;
        }
        v67[0] = *(_OWORD *)(v33 + 8);
        llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v70);
        if (v71) {
          goto LABEL_46;
        }
LABEL_19:
        if ((_BYTE)v70)
        {
          if (v17)
          {
            v69 &= ~1u;
            char v36 = v69;
            LOBYTE(v68) = 0;
            if ((v69 & 1) == 0) {
              goto LABEL_22;
            }
LABEL_57:
            uint64_t v37 = v68;
            uint64_t v68 = 0;
            *uint64_t v8 = v37;
            if (v37) {
              goto LABEL_47;
            }
            goto LABEL_58;
          }
          *(void *)&v67[0] = a6;
          *((void *)&v67[0] + 1) = v16;
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v67, (uint64_t)&v68);
          char v36 = v69;
          if (v69) {
            goto LABEL_57;
          }
LABEL_22:
          if (!(_BYTE)v68)
          {
LABEL_58:
            uint64_t v37 = 0;
            *(void *)uint64_t v33 = v64;
            *(void *)(v33 + 8) = a6;
            *(void *)(v33 + 16) = v16;
            uint64_t v54 = v31 + (v30 << 6);
            *(void *)(v54 + 48) = v57;
            *(void *)(v54 + 56) = v58;
            *uint64_t v8 = 0;
            if (v36)
            {
              if (v68) {
                (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v35);
              }
              uint64_t v37 = 0;
            }
            goto LABEL_47;
          }
        }
        uint64_t v37 = 0;
        *uint64_t v8 = 0;
        goto LABEL_47;
      }
      unint64_t v19 = *(void **)(v13 + 32);
      unsigned int v20 = *(_DWORD *)(v12 + 8);
      unint64_t v21 = bswap64(*(void *)v12);
      unint64_t v22 = v19[2];
      BOOL v23 = v21 >= v22;
      unint64_t v24 = v21 - v22;
      if (v23 && (unint64_t v25 = bswap32(v20), v26 = v19[1], v24 + v25 <= v26))
      {
        if (v26 < v24) {
          unint64_t v24 = v19[1];
        }
        unint64_t v27 = *v19 + v24;
        if (v26 - v24 >= v25) {
          unint64_t v28 = v25;
        }
        else {
          unint64_t v28 = v26 - v24;
        }
        if (v20)
        {
LABEL_30:
          if (!v28) {
            goto LABEL_63;
          }
        }
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        if (v20) {
          goto LABEL_30;
        }
      }
      if (!v28) {
        operator new();
      }
      uint64_t v38 = *(void *)(v13 + 64);
      unint64_t v40 = *(void **)(v38 + 8);
      unint64_t v39 = *(void *)(v38 + 16);
      if ((unint64_t)v40 >= v39)
      {
        uint64_t v42 = *(void **)v38;
        uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 58) {
          abort();
        }
        uint64_t v45 = v39 - (void)v42;
        if (v45 >> 5 > v44) {
          unint64_t v44 = v45 >> 5;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
        }
        if (v44 >> 58) {
          sub_1CB833614();
        }
        unint64_t v46 = v27;
        unint64_t v56 = v44;
        unint64_t v47 = (char *)operator new(v44 << 6);
        long long v48 = &v47[64 * v43];
        *(_DWORD *)long long v48 = 0;
        *((void *)v48 + 1) = v46;
        *((void *)v48 + 2) = v28;
        *((void *)v48 + 3) = v64;
        *((void *)v48 + 4) = a6;
        *((void *)v48 + 5) = v16;
        *((void *)v48 + 6) = v57;
        *((void *)v48 + 7) = v58;
        if (v40 == v42)
        {
          uint64_t v53 = &v47[64 * v43];
          char v15 = v62;
        }
        else
        {
          long long v49 = &v47[64 * v43];
          char v15 = v62;
          do
          {
            long long v50 = *((_OWORD *)v40 - 4);
            long long v51 = *((_OWORD *)v40 - 3);
            long long v52 = *((_OWORD *)v40 - 1);
            uint64_t v53 = v49 - 64;
            *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v49 - 1) = v52;
            *((_OWORD *)v49 - 4) = v50;
            *((_OWORD *)v49 - 3) = v51;
            v40 -= 8;
            v49 -= 64;
          }
          while (v40 != v42);
        }
        uint64_t v41 = v48 + 64;
        *(void *)uint64_t v38 = v53;
        *(void *)(v38 + 8) = v48 + 64;
        *(void *)(v38 + 16) = &v47[64 * v56];
        if (v42) {
          operator delete(v42);
        }
        uint64_t v8 = a8;
        unint64_t v9 = a7;
      }
      else
      {
        *(_DWORD *)unint64_t v40 = 0;
        v40[1] = v27;
        v40[2] = v28;
        v40[3] = v64;
        v40[4] = a6;
        v40[5] = v16;
        v40[6] = v57;
        uint64_t v41 = (char *)(v40 + 8);
        v40[7] = v58;
        unint64_t v9 = a7;
        char v15 = v62;
      }
      *(void *)(v38 + 8) = v41;
      uint64_t v13 = a1;
      unint64_t v11 = a3;
      *uint64_t v8 = 0;
LABEL_54:
      v12 += 24;
      a6 += v16;
    }
    while (v12 < v11);
  }
  *uint64_t v8 = 0;
}

void *sub_1CC66A6B4(void *a1)
{
  *a1 = &unk_1F26185F0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66A70C(void *a1)
{
  *a1 = &unk_1F26185F0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66A784(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        unint64_t v9 = &v5[5 * v7],
        unint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  uint64_t v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[5 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 1, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC66A938(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v10 = a3;
    unint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v60 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v65 = a1 + 8;
    uint64_t v59 = a4;
    char v61 = v14;
    do
    {
      uint64_t v15 = bswap32(*(_DWORD *)(v11 + 8));
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0)
      {
        unint64_t v16 = *(void *)(v11 + 12);
        unint64_t v64 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
        *(void *)&v69[0] = bswap64(*(void *)v11);
        *((void *)&v69[0] + 1) = v17;
        sub_1CC65FD90(&v67, v65, (uint64_t *)v69, (uint64_t *)v69 + 1);
        if (!v68)
        {
          unint64_t v18 = a7;
          uint64_t v19 = v67[1];
          uint64_t v20 = **(void **)(v12 + 64);
          uint64_t v21 = v20 + (v19 << 6);
          uint64_t v23 = *(void *)(v21 + 24);
          uint64_t v22 = v21 + 24;
          __n128 v24 = *(__n128 *)(v22 + 8);
          if (v23)
          {
            v73 &= ~1u;
            LOBYTE(v72) = 0;
            if ((v73 & 1) == 0) {
              goto LABEL_14;
            }
LABEL_20:
            uint64_t v26 = v72;
            *a8 = v72;
LABEL_21:
            a7 = v18;
            unint64_t v10 = a3;
            uint64_t v12 = a1;
            char v14 = v61;
            if (v26) {
              return;
            }
            goto LABEL_22;
          }
          v69[0] = *(_OWORD *)(v22 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v72);
          if (v73) {
            goto LABEL_20;
          }
LABEL_14:
          if ((_BYTE)v72)
          {
            if (v16)
            {
              v71 &= ~1u;
              char v25 = v71;
              LOBYTE(v70) = 0;
              if ((v71 & 1) == 0) {
                goto LABEL_17;
              }
LABEL_25:
              uint64_t v26 = v70;
              uint64_t v70 = 0;
              *a8 = v26;
              if (v26) {
                goto LABEL_21;
              }
              goto LABEL_26;
            }
            *(void *)&v69[0] = a6;
            *((void *)&v69[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v70);
            char v25 = v71;
            if (v71) {
              goto LABEL_25;
            }
LABEL_17:
            if (!(_BYTE)v70)
            {
LABEL_26:
              uint64_t v26 = 0;
              *(void *)uint64_t v22 = v64;
              *(void *)(v22 + 8) = a6;
              *(void *)(v22 + 16) = v15;
              uint64_t v27 = v20 + (v19 << 6);
              *(void *)(v27 + 48) = v59;
              *(void *)(v27 + 56) = v60;
              *a8 = 0;
              if (v25)
              {
                if (v70) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v70 + 8))(v70, v24);
                }
                uint64_t v26 = 0;
              }
              goto LABEL_21;
            }
          }
          uint64_t v26 = 0;
          *a8 = 0;
          goto LABEL_21;
        }
        unint64_t v28 = *(uint64_t **)(v12 + 32);
        unint64_t v29 = bswap64(*(void *)v11);
        sub_1CD5DF87C(v28);
        uint64_t v30 = (void *)v28[7];
        uint64_t v31 = (void *)v28[8];
        if (v31 != v30)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
          do
          {
            unint64_t v33 = v32 >> 1;
            uint64_t v34 = &v30[3 * (v32 >> 1)];
            unint64_t v36 = *v34;
            __n128 v35 = v34 + 3;
            v32 += ~(v32 >> 1);
            if (v36 < v29) {
              uint64_t v30 = v35;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
        }
        if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
          operator new();
        }
        uint64_t v38 = v30[1];
        unint64_t v39 = *(char ***)(v12 + 64);
        uint64_t v41 = v39[1];
        unint64_t v40 = (unint64_t)v39[2];
        if ((unint64_t)v41 >= v40)
        {
          unint64_t v57 = a7;
          uint64_t v43 = *v39;
          uint64_t v44 = (v41 - *v39) >> 6;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 58) {
            abort();
          }
          unint64_t v58 = *(char ***)(v12 + 64);
          uint64_t v46 = v40 - (void)v43;
          if (v46 >> 5 > v45) {
            unint64_t v45 = v46 >> 5;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v45 >> 58) {
            sub_1CB833614();
          }
          uint64_t v47 = v38;
          uint64_t v48 = v37;
          unint64_t v56 = v45;
          long long v49 = (char *)operator new(v45 << 6);
          long long v50 = &v49[64 * v44];
          *(_DWORD *)long long v50 = 1;
          *((void *)v50 + 1) = v47;
          *((void *)v50 + 2) = v48;
          *((void *)v50 + 3) = v64;
          *((void *)v50 + 4) = a6;
          *((void *)v50 + 5) = v15;
          *((void *)v50 + 6) = v59;
          *((void *)v50 + 7) = v60;
          if (v41 == v43)
          {
            uint64_t v55 = &v49[64 * v44];
            a7 = v57;
          }
          else
          {
            long long v51 = &v49[64 * v44];
            a7 = v57;
            do
            {
              long long v52 = *((_OWORD *)v41 - 4);
              long long v53 = *((_OWORD *)v41 - 3);
              long long v54 = *((_OWORD *)v41 - 1);
              uint64_t v55 = v51 - 64;
              *((_OWORD *)v51 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 4) = v52;
              *((_OWORD *)v51 - 3) = v53;
              v41 -= 64;
              v51 -= 64;
            }
            while (v41 != v43);
          }
          uint64_t v42 = v50 + 64;
          unint64_t v39 = v58;
          char *v58 = v55;
          v58[1] = v50 + 64;
          v58[2] = &v49[64 * v56];
          unint64_t v10 = a3;
          if (v43)
          {
            operator delete(v43);
            unint64_t v39 = v58;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v41 = 1;
          *((void *)v41 + 1) = v38;
          *((void *)v41 + 2) = v37;
          *((void *)v41 + 3) = v64;
          *((void *)v41 + 4) = a6;
          *((void *)v41 + 5) = v15;
          *((void *)v41 + 6) = v59;
          uint64_t v42 = v41 + 64;
          *((void *)v41 + 7) = v60;
        }
        v39[1] = v42;
        uint64_t v12 = a1;
        *a8 = 0;
      }
LABEL_22:
      v11 += 20;
      a6 += v15;
    }
    while (v11 < v10);
  }
  *a8 = 0;
}

void *sub_1CC66AE18(void *a1)
{
  *a1 = &unk_1F2618620;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66AE70(void *a1)
{
  *a1 = &unk_1F2618620;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66AEE8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = a2 + 4;
  if ((unint64_t)(a2 + 4) > a3
    || (unsigned int v7 = bswap32(*a2),
        uint64_t v8 = (char *)bswap32(a2[1]),
        unint64_t v9 = &v5[5 * v7],
        unint64_t v10 = &v8[(void)v9],
        &v8[(void)v9] > (char *)a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v12 = a2[2];
  BOOL v13 = *(char **)(a1 + 56);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  v20[0] = (char *)&v5[5 * v7];
  v20[1] = v8;
  v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v20, 2, &v19);
  unint64_t v16 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unint64_t v18 = (unint64_t)&v10[bswap32(v12)];
  if (v18 > a3) {
    goto LABEL_3;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, unsigned int *, unsigned int *, unint64_t, uint64_t, char *, unint64_t))(*(void *)a1 + 24))(&v19, a1, v5, v9, (-1431655765 * ((v14 - v15) >> 3)) | ((unint64_t)(-1431655765* ((*(void *)(*(void *)(a1 + 56) + 8)- **(void **)(a1 + 56)) >> 3)- -1431655765* ((v14 - v15) >> 3)) << 32), 1, v10, v18);
  unint64_t v16 = v19;
  if (v19)
  {
LABEL_5:
    char v17 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v17 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v17;
  *(void *)a4 = v16;
}

void sub_1CC66B09C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v10 = a3;
    unint64_t v11 = a2;
    uint64_t v12 = a1;
    unint64_t v60 = HIDWORD(a4);
    if (a5) {
      BOOL v13 = HIDWORD(a4) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    uint64_t v65 = a1 + 8;
    uint64_t v59 = a4;
    char v61 = v14;
    do
    {
      uint64_t v15 = bswap32(*(_DWORD *)(v11 + 8));
      if (a6 + v15 > a7) {
        operator new();
      }
      if ((v14 & 1) == 0)
      {
        unint64_t v16 = *(void *)(v11 + 12);
        unint64_t v64 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v12 + 64) + 8) - **(void **)(v12 + 64)) >> 6;
        *(void *)&v69[0] = bswap64(*(void *)v11);
        *((void *)&v69[0] + 1) = v17;
        sub_1CC65FD90(&v67, v65, (uint64_t *)v69, (uint64_t *)v69 + 1);
        if (!v68)
        {
          unint64_t v18 = a7;
          uint64_t v19 = v67[1];
          uint64_t v20 = **(void **)(v12 + 64);
          uint64_t v21 = v20 + (v19 << 6);
          uint64_t v23 = *(void *)(v21 + 24);
          uint64_t v22 = v21 + 24;
          __n128 v24 = *(__n128 *)(v22 + 8);
          if (v23)
          {
            v73 &= ~1u;
            LOBYTE(v72) = 0;
            if ((v73 & 1) == 0) {
              goto LABEL_14;
            }
LABEL_20:
            uint64_t v26 = v72;
            *a8 = v72;
LABEL_21:
            a7 = v18;
            unint64_t v10 = a3;
            uint64_t v12 = a1;
            char v14 = v61;
            if (v26) {
              return;
            }
            goto LABEL_22;
          }
          v69[0] = *(_OWORD *)(v22 + 8);
          llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v72);
          if (v73) {
            goto LABEL_20;
          }
LABEL_14:
          if ((_BYTE)v72)
          {
            if (v16)
            {
              v71 &= ~1u;
              char v25 = v71;
              LOBYTE(v70) = 0;
              if ((v71 & 1) == 0) {
                goto LABEL_17;
              }
LABEL_25:
              uint64_t v26 = v70;
              uint64_t v70 = 0;
              *a8 = v26;
              if (v26) {
                goto LABEL_21;
              }
              goto LABEL_26;
            }
            *(void *)&v69[0] = a6;
            *((void *)&v69[0] + 1) = v15;
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v69, (uint64_t)&v70);
            char v25 = v71;
            if (v71) {
              goto LABEL_25;
            }
LABEL_17:
            if (!(_BYTE)v70)
            {
LABEL_26:
              uint64_t v26 = 0;
              *(void *)uint64_t v22 = v64;
              *(void *)(v22 + 8) = a6;
              *(void *)(v22 + 16) = v15;
              uint64_t v27 = v20 + (v19 << 6);
              *(void *)(v27 + 48) = v59;
              *(void *)(v27 + 56) = v60;
              *a8 = 0;
              if (v25)
              {
                if (v70) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v70 + 8))(v70, v24);
                }
                uint64_t v26 = 0;
              }
              goto LABEL_21;
            }
          }
          uint64_t v26 = 0;
          *a8 = 0;
          goto LABEL_21;
        }
        unint64_t v28 = *(uint64_t **)(v12 + 32);
        unint64_t v29 = bswap64(*(void *)v11);
        sub_1CD5DF87C(v28);
        uint64_t v30 = (void *)v28[7];
        uint64_t v31 = (void *)v28[8];
        if (v31 != v30)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
          do
          {
            unint64_t v33 = v32 >> 1;
            uint64_t v34 = &v30[3 * (v32 >> 1)];
            unint64_t v36 = *v34;
            __n128 v35 = v34 + 3;
            v32 += ~(v32 >> 1);
            if (v36 < v29) {
              uint64_t v30 = v35;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
        }
        if (v30 == v31 || *v30 != v29 || (uint64_t v37 = v30[2]) == 0) {
          operator new();
        }
        uint64_t v38 = v30[1];
        unint64_t v39 = *(char ***)(v12 + 64);
        uint64_t v41 = v39[1];
        unint64_t v40 = (unint64_t)v39[2];
        if ((unint64_t)v41 >= v40)
        {
          unint64_t v57 = a7;
          uint64_t v43 = *v39;
          uint64_t v44 = (v41 - *v39) >> 6;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 58) {
            abort();
          }
          unint64_t v58 = *(char ***)(v12 + 64);
          uint64_t v46 = v40 - (void)v43;
          if (v46 >> 5 > v45) {
            unint64_t v45 = v46 >> 5;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v45 >> 58) {
            sub_1CB833614();
          }
          uint64_t v47 = v38;
          uint64_t v48 = v37;
          unint64_t v56 = v45;
          long long v49 = (char *)operator new(v45 << 6);
          long long v50 = &v49[64 * v44];
          *(_DWORD *)long long v50 = 2;
          *((void *)v50 + 1) = v47;
          *((void *)v50 + 2) = v48;
          *((void *)v50 + 3) = v64;
          *((void *)v50 + 4) = a6;
          *((void *)v50 + 5) = v15;
          *((void *)v50 + 6) = v59;
          *((void *)v50 + 7) = v60;
          if (v41 == v43)
          {
            uint64_t v55 = &v49[64 * v44];
            a7 = v57;
          }
          else
          {
            long long v51 = &v49[64 * v44];
            a7 = v57;
            do
            {
              long long v52 = *((_OWORD *)v41 - 4);
              long long v53 = *((_OWORD *)v41 - 3);
              long long v54 = *((_OWORD *)v41 - 1);
              uint64_t v55 = v51 - 64;
              *((_OWORD *)v51 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 4) = v52;
              *((_OWORD *)v51 - 3) = v53;
              v41 -= 64;
              v51 -= 64;
            }
            while (v41 != v43);
          }
          uint64_t v42 = v50 + 64;
          unint64_t v39 = v58;
          char *v58 = v55;
          v58[1] = v50 + 64;
          v58[2] = &v49[64 * v56];
          unint64_t v10 = a3;
          if (v43)
          {
            operator delete(v43);
            unint64_t v39 = v58;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v41 = 2;
          *((void *)v41 + 1) = v38;
          *((void *)v41 + 2) = v37;
          *((void *)v41 + 3) = v64;
          *((void *)v41 + 4) = a6;
          *((void *)v41 + 5) = v15;
          *((void *)v41 + 6) = v59;
          uint64_t v42 = v41 + 64;
          *((void *)v41 + 7) = v60;
        }
        v39[1] = v42;
        uint64_t v12 = a1;
        *a8 = 0;
      }
LABEL_22:
      v11 += 20;
      a6 += v15;
    }
    while (v11 < v10);
  }
  *a8 = 0;
}

void *sub_1CC66B57C(void *a1)
{
  *a1 = &unk_1F2618650;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66B5D4(void *a1)
{
  *a1 = &unk_1F2618650;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66B64C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), uint64_t v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 3, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      uint64_t v23 = (unsigned __int8 **)(v20 + 24 * v19);
      __n128 v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            uint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            uint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC66B908(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 3;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 3;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC66BE0C(void *a1)
{
  *a1 = &unk_1F2618680;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66BE64(void *a1)
{
  *a1 = &unk_1F2618680;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66BEDC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), uint64_t v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 4, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC66C198(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 4;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 4;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

void *sub_1CC66C69C(void *a1)
{
  *a1 = &unk_1F26186B0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC66C6F4(void *a1)
{
  *a1 = &unk_1F26186B0;
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC66C76C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 + 4) > a3
    || (v5 = bswap32(a2[1]), uint64_t v6 = (char *)a2 + 29 * bswap32(*a2) + 16, v7 = &v6[v5], (unint64_t)&v6[v5] > a3))
  {
LABEL_3:
    operator new();
  }
  unsigned int v9 = a2[2];
  unint64_t v10 = *(char **)(a1 + 56);
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  v33[0] = v6;
  v33[1] = (char *)v5;
  v33[2] = v10;
  long long v34 = *(_OWORD *)(a1 + 40);
  llvm::coverage::RawCoverageFilenamesReader::read(v33, 5, &v37);
  unint64_t v13 = v37;
  if ((void)v37)
  {
    char v14 = *(unsigned char *)(a4 + 8) | 1;
    goto LABEL_6;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 56) + 8) - **(void **)(a1 + 56)) >> 3) - v15;
  long long v37 = xmmword_1CFAC4320;
  uint64_t v38 = 0;
  llvm::MD5::update((int *)&v37, (int *)v6, v5);
  llvm::MD5::final((int *)&v37, (int *)&v35);
  unint64_t v36 = v15 | ((unint64_t)v16 << 32);
  sub_1CC662C58((uint64_t **)&v37, a1 + 72, &v35, (uint64_t *)&v36);
  if (!(_BYTE)v38)
  {
    uint64_t v17 = v37;
    uint64_t v18 = *(unsigned int *)(v37 + 12);
    if (v16 == v18)
    {
      unsigned int v19 = v15;
      uint64_t v20 = **(void **)(a1 + 56);
      uint64_t v21 = v20 + 24 * *(unsigned int *)(v37 + 8);
      uint64_t v22 = v21 + 24 * v18;
      __n128 v23 = (unsigned __int8 **)(v20 + 24 * v19);
      char v24 = &v23[3 * v16];
      if (v18)
      {
        while (1)
        {
          char v25 = *(unsigned char *)(v21 + 23);
          uint64_t v26 = v25 & 0x7F;
          if (v25 >= 0) {
            uint64_t v27 = (unsigned __int8 *)(v25 & 0x7F);
          }
          else {
            uint64_t v27 = *(unsigned __int8 **)(v21 + 8);
          }
          char v28 = *((unsigned char *)v23 + 23);
          int v29 = v28;
          uint64_t v30 = (unsigned __int8 *)(v28 & 0x7F);
          if (v29 < 0) {
            uint64_t v30 = v23[1];
          }
          if (v27 != v30) {
            break;
          }
          if (v29 >= 0) {
            unint64_t v31 = (unsigned __int8 *)v23;
          }
          else {
            unint64_t v31 = *v23;
          }
          if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, v31, *(void *)(v21 + 8))) {
              break;
            }
          }
          else if ((v25 & 0x7F) != 0)
          {
            uint64_t v32 = 0;
            while (*(unsigned __int8 *)(v21 + v32) == v31[v32])
            {
              if (v26 == ++v32) {
                goto LABEL_26;
              }
            }
            break;
          }
LABEL_26:
          v21 += 24;
          v23 += 3;
          if (v21 == v22 || v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        if (v21 == v22 && v23 == v24) {
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)(v17 + 12) = 0;
  }
LABEL_31:
  if (v9) {
    goto LABEL_3;
  }
  unint64_t v13 = (unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(a4 + 8) & 0xFE;
LABEL_6:
  *(unsigned char *)(a4 + 8) = v14;
  *(void *)a4 = v13;
}

void sub_1CC66CA28(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 < a3)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v58 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      uint64_t v8 = *(void *)(v6 + 72);
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      unint64_t v10 = sub_1CC663018(v8, *(_DWORD *)(v6 + 88), bswap64(*(void *)(v5 + 20)));
      if ((uint64_t *)(v8 + 16 * v9) == v10) {
LABEL_55:
      }
        operator new();
      unint64_t v11 = v5 + 28;
      uint64_t v12 = bswap32(v7);
      unint64_t v13 = v5 + 28 + v12;
      unint64_t v14 = v10[1];
      if (HIDWORD(v14))
      {
        if (v13 > v4) {
          goto LABEL_55;
        }
        unint64_t v56 = HIDWORD(v14);
        uint64_t v15 = v6;
        unint64_t v16 = *(void *)(v5 + 12);
        unint64_t v55 = bswap64(v16);
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)(v15 + 64) + 8) - **(void **)(v15 + 64)) >> 6;
        *(void *)&v64[0] = bswap64(*(void *)v5);
        *((void *)&v64[0] + 1) = v17;
        sub_1CC65FD90(&v62, v58, (uint64_t *)v64, (uint64_t *)v64 + 1);
        if (!v63)
        {
          unint64_t v60 = v5 + 28 + v12;
          uint64_t v18 = v62[1];
          uint64_t v19 = **(void **)(v15 + 64);
          uint64_t v20 = v19 + (v18 << 6);
          uint64_t v22 = *(void *)(v20 + 24);
          uint64_t v21 = v20 + 24;
          __n128 v23 = *(__n128 *)(v21 + 8);
          if (v22)
          {
            v68 &= ~1u;
            LOBYTE(v67) = 0;
            if ((v68 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_13:
            uint64_t v25 = v67;
            *a4 = v67;
LABEL_15:
            uint64_t v6 = v15;
            unint64_t v13 = v60;
          }
          else
          {
            v64[0] = *(_OWORD *)(v21 + 8);
            llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v67);
            if (v68) {
              goto LABEL_13;
            }
LABEL_9:
            if (!(_BYTE)v67)
            {
              uint64_t v25 = 0;
              *a4 = 0;
              goto LABEL_15;
            }
            if (v16)
            {
              char v24 = v66 & 0xFE;
              v66 &= ~1u;
              LOBYTE(v65) = 0;
            }
            else
            {
              *(void *)&v64[0] = v5 + 28;
              *((void *)&v64[0] + 1) = v12;
              llvm::coverage::RawCoverageMappingDummyChecker::isDummy((char **)v64, (uint64_t)&v65);
              char v24 = v66;
            }
            uint64_t v6 = v15;
            if (v24)
            {
              uint64_t v25 = v65;
              uint64_t v65 = 0;
              unint64_t v13 = v60;
              *a4 = v25;
              if (v25) {
                goto LABEL_16;
              }
            }
            else
            {
              unint64_t v13 = v5 + 28 + v12;
              if ((_BYTE)v65)
              {
                uint64_t v25 = 0;
                *a4 = 0;
                goto LABEL_16;
              }
            }
            uint64_t v25 = 0;
            *(void *)uint64_t v21 = v55;
            *(void *)(v21 + 8) = v11;
            *(void *)(v21 + 16) = v12;
            uint64_t v26 = v19 + (v18 << 6);
            *(void *)(v26 + 48) = v14;
            *(void *)(v26 + 56) = v56;
            *a4 = 0;
            if (v24)
            {
              if (v65) {
                (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v23);
              }
              uint64_t v25 = 0;
            }
          }
LABEL_16:
          unint64_t v4 = a3;
          if (v25) {
            return;
          }
          goto LABEL_17;
        }
        uint64_t v27 = *(uint64_t **)(v15 + 32);
        unint64_t v28 = bswap64(*(void *)v5);
        sub_1CD5DF87C(v27);
        int v29 = (void *)v27[7];
        uint64_t v30 = (void *)v27[8];
        uint64_t v6 = v15;
        if (v30 != v29)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v29);
          do
          {
            unint64_t v32 = v31 >> 1;
            unint64_t v33 = &v29[3 * (v31 >> 1)];
            unint64_t v35 = *v33;
            long long v34 = v33 + 3;
            v31 += ~(v31 >> 1);
            if (v35 < v28) {
              int v29 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v29 == v30 || *v29 != v28 || (uint64_t v36 = v29[2]) == 0) {
          operator new();
        }
        uint64_t v37 = v29[1];
        uint64_t v38 = *(void *)(v15 + 64);
        unint64_t v40 = *(void **)(v38 + 8);
        unint64_t v39 = *(void *)(v38 + 16);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v61 = *(void *)(v6 + 64);
          uint64_t v42 = *(void **)v38;
          uint64_t v43 = ((uint64_t)v40 - *(void *)v38) >> 6;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 58) {
            abort();
          }
          uint64_t v45 = v39 - (void)v42;
          if (v45 >> 5 > v44) {
            unint64_t v44 = v45 >> 5;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFLL;
          }
          if (v44 >> 58) {
            sub_1CB833614();
          }
          uint64_t v46 = v37;
          unint64_t v54 = v44;
          uint64_t v47 = (char *)operator new(v44 << 6);
          uint64_t v48 = &v47[64 * v43];
          *(_DWORD *)uint64_t v48 = 5;
          *((void *)v48 + 1) = v46;
          *((void *)v48 + 2) = v36;
          *((void *)v48 + 3) = v55;
          *((void *)v48 + 4) = v11;
          *((void *)v48 + 5) = v12;
          *((void *)v48 + 6) = v14;
          *((void *)v48 + 7) = v56;
          if (v40 == v42)
          {
            long long v53 = &v47[64 * v43];
            uint64_t v38 = v61;
          }
          else
          {
            long long v49 = &v47[64 * v43];
            uint64_t v38 = v61;
            do
            {
              long long v50 = *((_OWORD *)v40 - 4);
              long long v51 = *((_OWORD *)v40 - 3);
              long long v52 = *((_OWORD *)v40 - 1);
              long long v53 = v49 - 64;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 4) = v50;
              *((_OWORD *)v49 - 3) = v51;
              v40 -= 8;
              v49 -= 64;
            }
            while (v40 != v42);
          }
          uint64_t v41 = v48 + 64;
          *(void *)uint64_t v38 = v53;
          *(void *)(v38 + 8) = v48 + 64;
          *(void *)(v38 + 16) = &v47[64 * v54];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = 5;
          v40[1] = v37;
          v40[2] = v36;
          v40[3] = v55;
          v40[4] = v11;
          v40[5] = v12;
          v40[6] = v14;
          uint64_t v41 = (char *)(v40 + 8);
          v40[7] = v56;
        }
        *(void *)(v38 + 8) = v41;
        unint64_t v4 = a3;
        *a4 = 0;
      }
LABEL_17:
      unint64_t v5 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 < v4);
  }
  *a4 = 0;
}

uint64_t sub_1CC66CF2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CC66CFA8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::DWARFAbbreviationDeclaration::clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)this = 0;
  if (*(unsigned char *)(this + 158)) {
    *(unsigned char *)(this + 158) = 0;
  }
  return this;
}

double llvm::DWARFAbbreviationDeclaration::DWARFAbbreviationDeclaration(llvm::DWARFAbbreviationDeclaration *this)
{
  *((unsigned char *)this + 152) = 0;
  *((unsigned char *)this + 158) = 0;
  *(void *)&double result = 0x800000000;
  *((void *)this + 2) = 0x800000000;
  *(void *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  return result;
}

{
  double result;

  *((unsigned char *)this + 152) = 0;
  *((unsigned char *)this + 158) = 0;
  *(void *)&double result = 0x800000000;
  *((void *)this + 2) = 0x800000000;
  *(void *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  return result;
}

void llvm::DWARFAbbreviationDeclaration::dump(llvm::DWARFAbbreviationDeclaration *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v4 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 91);
  }
  else
  {
    *((void *)a2 + 4) = v4 + 1;
    unsigned char *v4 = 91;
  }
  sub_1CD098D14(a2, *(unsigned int *)this, 0, 0, 0);
  unint64_t v5 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v5 > 1uLL)
  {
    _WORD *v5 = 8285;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "] ", 2uLL);
  }
  __int16 v6 = *((_WORD *)this + 2);
  uint64_t v19 = "{0}";
  uint64_t v20 = 3;
  uint64_t v21 = v25;
  uint64_t v22 = 1;
  __n128 v23 = &unk_1F26186E0;
  LOWORD(v24) = v6;
  v25[0] = &v23;
  sub_1CD862C68((uint64_t)&v19, a2);
  uint64_t v7 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v7 > 0xCuLL)
  {
    qmemcpy(v7, "\tDW_CHILDREN_", 13);
    uint64_t v8 = (void *)(*((void *)a2 + 4) + 13);
    *((void *)a2 + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\tDW_CHILDREN_", 0xDuLL);
    uint64_t v8 = (void *)*((void *)a2 + 4);
  }
  if (*((unsigned char *)this + 7)) {
    uint64_t v9 = "yes";
  }
  else {
    uint64_t v9 = "no";
  }
  if (*((unsigned char *)this + 7)) {
    size_t v10 = 3;
  }
  else {
    size_t v10 = 2;
  }
  if (v10 <= *((void *)a2 + 3) - (void)v8)
  {
    memcpy(v8, v9, v10);
    unint64_t v11 = (unsigned char *)(*((void *)a2 + 4) + v10);
    *((void *)a2 + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(a2, v9, v10);
    unint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  }
  if ((unint64_t)v11 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v11 + 1;
    *unint64_t v11 = 10;
  }
  uint64_t v12 = *((unsigned int *)this + 4);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 1);
    uint64_t v14 = v13 + 16 * v12;
    do
    {
      uint64_t v19 = "\t{0}\t{1}";
      uint64_t v20 = 8;
      uint64_t v21 = v26;
      uint64_t v22 = 2;
      __n128 v23 = &unk_1F2618730;
      uint64_t v24 = v13;
      uint64_t v15 = v13 + 2;
      v25[0] = &unk_1F2618780;
      v25[1] = v13 + 2;
      v26[0] = &v23;
      v26[1] = v25;
      sub_1CD862C68((uint64_t)&v19, a2);
      if (*(_WORD *)(v13 + 2) == 33)
      {
        unint64_t v16 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v16 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 9);
        }
        else
        {
          *((void *)a2 + 4) = v16 + 1;
          *unint64_t v16 = 9;
        }
        llvm::raw_ostream::operator<<(a2, *(void *)(v13 + 8));
      }
      uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v17 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v17 + 1;
        *uint64_t v17 = 10;
      }
      v13 += 16;
    }
    while (v15 + 14 != v14);
  }
  uint64_t v18 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v18 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v18 + 1;
    *uint64_t v18 = 10;
  }
}

uint64_t llvm::DWARFAbbreviationDeclaration::findAttributeIndex(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned __int16 **)(a1 + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 8;
      if (v5 == a2) {
        break;
      }
      if (v2 == ++v3) {
        goto LABEL_5;
      }
    }
    uint64_t v6 = 0x100000000;
  }
  else
  {
LABEL_5:
    uint64_t v6 = 0;
    LODWORD(v3) = 0;
  }
  return v6 | v3;
}

void sub_1CC66D400()
{
}

llvm::raw_ostream *sub_1CC66D414(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E11D4(*(unsigned __int16 **)(a1 + 8), a2);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, uint64_t *a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  v4[0] = -1;
  v4[1] = 0x1040000FFFFFFFFLL;
  int v5 = 0;
  __int16 v6 = 0;
  v7[0] = &unk_1F26187D0;
  v7[1] = llvm::WithColor::defaultErrorHandler;
  v7[3] = v7;
  v8[0] = &unk_1F26187D0;
  v8[1] = llvm::WithColor::defaultWarningHandler;
  v8[3] = v8;
  llvm::DWARFAddressRange::dump(a2, a1, 8u, (uint64_t)v4, 0);
  sub_1CD5E15A8(v4);
  return a1;
}

{
  llvm::raw_ostream *v3;
  unsigned char *v4;
  unsigned char *v5;
  unsigned char *v6;
  llvm::raw_ostream *result;
  unsigned char *v8;
  uint64_t v9;

  uint64_t v3 = a1;
  uint64_t v4 = (unsigned char *)*((void *)a1 + 4);
  if ((unint64_t)v4 >= *((void *)a1 + 3))
  {
    uint64_t v3 = llvm::raw_ostream::write(a1, 91);
  }
  else
  {
    *((void *)a1 + 4) = v4 + 1;
    unsigned __int16 *v4 = 91;
  }
  uint64_t v9 = *a2;
  llvm::SlotIndex::print((llvm::SlotIndex *)&v9, v3);
  int v5 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v5 >= *((void *)v3 + 3))
  {
    uint64_t v3 = llvm::raw_ostream::write(v3, 44);
  }
  else
  {
    *((void *)v3 + 4) = v5 + 1;
    _WORD *v5 = 44;
  }
  uint64_t v9 = a2[1];
  llvm::SlotIndex::print((llvm::SlotIndex *)&v9, v3);
  __int16 v6 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v6 >= *((void *)v3 + 3))
  {
    uint64_t v3 = llvm::raw_ostream::write(v3, 58);
  }
  else
  {
    *((void *)v3 + 4) = v6 + 1;
    *__int16 v6 = 58;
  }
  double result = llvm::raw_ostream::operator<<(v3, *(unsigned int *)a2[2]);
  uint64_t v8 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v8 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 41);
  }
  *((void *)result + 4) = v8 + 1;
  *uint64_t v8 = 41;
  return result;
}

uint64_t sub_1CC66D518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t llvm::AppleAcceleratorTable::extract@<X0>(llvm::AppleAcceleratorTable *this@<X0>, void *a2@<X8>)
{
  v12[0] = 0;
  if (*((void *)this + 2) <= 0x14uLL)
  {
    uint64_t v13 = 92;
    uint64_t v14 = std::generic_category();
    uint64_t v3 = "Section too small: cannot read header.";
    goto LABEL_3;
  }
  int v5 = (char *)this + 8;
  *((_DWORD *)this + 18) = sub_1CD8337FC((uint64_t)this + 8, v12, 0);
  *((_WORD *)this + 38) = sub_1CD833674((uint64_t)v5, v12, 0);
  *((_WORD *)this + 39) = sub_1CD833674((uint64_t)v5, v12, 0);
  *((_DWORD *)this + 20) = sub_1CD8337FC((uint64_t)v5, v12, 0);
  *((_DWORD *)this + 21) = sub_1CD8337FC((uint64_t)v5, v12, 0);
  unsigned int v6 = sub_1CD8337FC((uint64_t)v5, v12, 0);
  *((_DWORD *)this + 22) = v6;
  if (*((void *)this + 2) <= (4 * *((_DWORD *)this + 20))
                              + (unint64_t)v6
                              + (8 * *((_DWORD *)this + 21))
                              + 19)
  {
    uint64_t v7 = std::generic_category();
    uint64_t v13 = 92;
    uint64_t v14 = v7;
    uint64_t v3 = "Section too small: cannot read buckets and hashes.";
LABEL_3:
    v12[1] = (unint64_t)v3;
    sub_1CD06481C();
  }
  *((void *)this + 12) = sub_1CD8337FC((uint64_t)v5, v12, 0);
  uint64_t result = sub_1CD8337FC((uint64_t)v5, v12, 0);
  if (result)
  {
    int v9 = result;
    do
    {
      int v10 = sub_1CD833674((uint64_t)v5, v12, 0);
      uint64_t result = sub_1CD833674((uint64_t)v5, v12, 0);
      unint64_t v11 = *((unsigned int *)this + 28);
      if (v11 >= *((unsigned int *)this + 29)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*((void *)this + 13) + 4 * v11) = v10 | (result << 16);
      ++*((_DWORD *)this + 28);
      --v9;
    }
    while (v9);
  }
  *((unsigned char *)this + 136) = 1;
  *a2 = 0;
  return result;
}

uint64_t llvm::AppleAcceleratorTable::getNumBuckets(llvm::AppleAcceleratorTable *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t llvm::AppleAcceleratorTable::getNumHashes(llvm::AppleAcceleratorTable *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t llvm::AppleAcceleratorTable::getSizeHdr(llvm::AppleAcceleratorTable *this)
{
  return 20;
}

uint64_t llvm::AppleAcceleratorTable::getHeaderDataLength(llvm::AppleAcceleratorTable *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t llvm::AppleAcceleratorTable::getAtomsDesc(llvm::AppleAcceleratorTable *this)
{
  return *((void *)this + 13);
}

uint64_t llvm::AppleAcceleratorTable::validateForms(llvm::AppleAcceleratorTable *this)
{
  uint64_t v1 = *((unsigned int *)this + 28);
  uint64_t v2 = 1;
  if (v1)
  {
    uint64_t v3 = (unsigned __int16 *)*((void *)this + 13);
    uint64_t v4 = &v3[2 * v1];
    while (1)
    {
      unsigned int v5 = *v3;
      int v6 = v3[1];
      unsigned __int16 v12 = v3[1];
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      BOOL v7 = v5 > 4;
      int v8 = (1 << v5) & 0x1A;
      if (!v7 && v8 != 0)
      {
        char isFormClass = llvm::DWARFFormValue::isFormClass(&v12, 3);
        if ((isFormClass & 1) == 0 && !llvm::DWARFFormValue::isFormClass(&v12, 5) || v6 == 13) {
          break;
        }
      }
      v3 += 2;
      if (v3 == v4) {
        return 1;
      }
    }
    return 0;
  }
  return v2;
}

unint64_t llvm::AppleAcceleratorTable::readAtoms(llvm::AppleAcceleratorTable *this, unint64_t *a2)
{
  uint64_t v3 = *((unsigned int *)this + 28);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = (unsigned __int16 *)*((void *)this + 13);
  int v6 = &v5[2 * v3];
  uint64_t v7 = *((unsigned __int16 *)this + 38);
  int v8 = (uint64_t *)((char *)this + 8);
  unint64_t AsUnsignedConstant = 0xFFFFFFFFLL;
  do
  {
    int v10 = *v5;
    unsigned __int16 v12 = v5[1];
    char v13 = 0;
    unint64_t v2 = v2 & 0xFFFF000000000000 | v7;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    llvm::DWARFFormValue::extractValue(&v12, v8, a2, v2, 0, 0);
    if (v10 == 3)
    {
      llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v12);
    }
    else if (v10 == 1)
    {
      unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v12);
    }
    v5 += 2;
  }
  while (v5 != v6);
  return AsUnsignedConstant;
}

uint64_t llvm::AppleAcceleratorTable::Header::dump(unsigned int *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 208))(a2, "Header", 6);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Magic", 5, *a1);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Version", 7, *((unsigned __int16 *)a1 + 2));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Hash function", 13, *((unsigned __int16 *)a1 + 3));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Bucket count", 12, a1[2]);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Hashes count", 12, a1[3]);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "HeaderData length", 17, a1[4]);
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(a2);
  }
  return result;
}

void *sub_1CC66DC04(void *a1)
{
  *a1 = &unk_1F2618938;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 216))(v2);
  }
  return a1;
}

unint64_t llvm::AppleAcceleratorTable::HeaderData::extractOffset(void *a1, unsigned __int16 *a2)
{
  if (*((unsigned char *)a2 + 48))
  {
    if (*a2 - 17 > 4)
    {
      if (llvm::DWARFFormValue::isFormClass(a2, 8)) {
        uint64_t v3 = *((void *)a2 + 1);
      }
      else {
        uint64_t v3 = 0;
      }
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      uint64_t v3 = *a1 + *((void *)a2 + 1);
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFF00;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    unint64_t v4 = 0;
  }
  return v4 | v3;
}

BOOL llvm::AppleAcceleratorTable::dumpName(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned __int16 *)(a1 + 76);
  unint64_t v68 = *a4;
  if (v68 > 0xFFFFFFFFFFFFFFFBLL || *(void *)(a1 + 16) <= v68 + 3)
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 184))(a2, "Incorrectly terminated list.", 28);
    return 0;
  }
  unint64_t v11 = a1 + 8;
  unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a1 + 8, 4, a4, 0, 0);
  unint64_t v67 = RelocatedValue;
  BOOL v7 = RelocatedValue != 0;
  if (!RelocatedValue) {
    return v7;
  }
  char v13 = (unint64_t *)RelocatedValue;
  uint64_t v56 = v5;
  uint64_t v58 = "Name@0x";
  unint64_t v60 = &v68;
  __int16 v61 = 3587;
  llvm::Twine::str((llvm::Twine *)&v58, &__p);
  if (v64 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v64 >= 0) {
    uint64_t v15 = v64 & 0x7F;
  }
  else {
    uint64_t v15 = v63;
  }
  uint64_t v65 = &unk_1F2618938;
  uint64_t v66 = a2;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 208))(a2, p_p, v15);
  if (v64 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  uint64_t v58 = (const char *)&unk_1F25FF808;
  uint64_t v59 = "String: 0x%08llx";
  unint64_t v60 = v13;
  llvm::raw_ostream::operator<<(v16, (uint64_t)&v58);
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
  uint64_t v18 = v17;
  uint64_t v19 = (_WORD *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 8736;
    *((void *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, " \"", 2uLL);
  }
  unint64_t v57 = (uint64_t *)(a1 + 8);
  CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)(a1 + 48), &v67, 0);
  uint64_t v21 = (_WORD *)*((void *)v18 + 4);
  uint64_t v52 = a3;
  if (CStrRef)
  {
    uint64_t v22 = CStrRef;
    size_t v23 = strlen(CStrRef);
    unint64_t v11 = v23;
    if (v23 <= *((void *)v18 + 3) - (void)v21)
    {
      if (v23)
      {
        memcpy(v21, v22, v23);
        uint64_t v21 = (_WORD *)(*((void *)v18 + 4) + v11);
        *((void *)v18 + 4) = v21;
      }
    }
    else
    {
      llvm::raw_ostream::write(v18, v22, v23);
      uint64_t v21 = (_WORD *)*((void *)v18 + 4);
    }
  }
  if (*((void *)v18 + 3) - (void)v21 > 1uLL)
  {
    _WORD *v21 = 2594;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "\"\n", 2uLL);
  }
  unsigned int v24 = sub_1CD8337FC((uint64_t)v57, a4, 0);
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v51 = v24;
    while (1)
    {
      uint64_t v58 = "Data ";
      unint64_t v54 = v54 & 0xFFFFFFFF00000000 | v25;
      unint64_t v60 = (unint64_t *)v54;
      __int16 v61 = 2051;
      llvm::Twine::str((llvm::Twine *)&v58, &__p);
      if (v64 >= 0) {
        uint64_t v26 = &__p;
      }
      else {
        uint64_t v26 = __p;
      }
      if (v64 >= 0) {
        uint64_t v27 = v64 & 0x7F;
      }
      else {
        uint64_t v27 = v63;
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 232))(a2, v26, v27);
      if (v64 < 0) {
        operator delete(__p);
      }
      uint64_t v55 = v25;
      uint64_t v28 = *(unsigned int *)(a3 + 8);
      if (v28) {
        break;
      }
LABEL_58:
      if (a2) {
        (*(void (**)(uint64_t))(*(void *)a2 + 240))(a2);
      }
      uint64_t v25 = v55 + 1;
      a3 = v52;
      if (v55 + 1 == v51) {
        goto LABEL_61;
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = *(unsigned __int16 **)a3;
    uint64_t v32 = 48 * v28;
    while (1)
    {
      unint64_t v33 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
      uint64_t v58 = (const char *)&unk_1F25FED10;
      uint64_t v59 = "Atom[%d]: ";
      unint64_t v60 = v30;
      llvm::raw_ostream::operator<<(v33, (uint64_t)&v58);
      unint64_t v11 = v11 & 0xFFFF000000000000 | v56;
      unsigned int Value = llvm::DWARFFormValue::extractValue(v31, v57, a4, v11, 0, 0);
      unint64_t v35 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
      if (!Value) {
        break;
      }
      long long v74 = 0u;
      _OWORD v69[2] = 0;
      long long v71 = 0u;
      v69[0] = -1;
      v69[1] = 0x1040000FFFFFFFFLL;
      uint64_t v70 = &unk_1F26187D0;
      *(void *)&long long v71 = llvm::WithColor::defaultErrorHandler;
      uint64_t v72 = &v70;
      char v73 = &unk_1F26187D0;
      *(void *)&long long v74 = llvm::WithColor::defaultWarningHandler;
      unsigned int v75 = &v73;
      llvm::DWARFFormValue::dump(v31, v35, (uint64_t)v69);
      sub_1CD5E15A8(v69);
      unint64_t AsUnsignedConstant = (llvm::dwarf *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v31);
      if (!v42) {
        goto LABEL_37;
      }
      if (!*(_WORD *)(*(void *)(a1 + 104) + v29))
      {
        size_t __n = 4;
        __src = "NULL";
LABEL_49:
        uint64_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
        uint64_t v46 = v45;
        uint64_t v47 = (_WORD *)*((void *)v45 + 4);
        if (*((void *)v45 + 3) - (void)v47 > 1uLL)
        {
          *uint64_t v47 = 10272;
          uint64_t v48 = (void *)(*((void *)v45 + 4) + 2);
          *((void *)v46 + 4) = v48;
        }
        else
        {
          llvm::raw_ostream::write(v45, " (", 2uLL);
          uint64_t v48 = (void *)*((void *)v46 + 4);
        }
        if (__n <= *((void *)v46 + 3) - (void)v48)
        {
          memcpy(v48, __src, __n);
          long long v49 = (unsigned char *)(*((void *)v46 + 4) + __n);
          *((void *)v46 + 4) = v49;
        }
        else
        {
          llvm::raw_ostream::write(v46, __src, __n);
          long long v49 = (unsigned char *)*((void *)v46 + 4);
        }
        if (*((unsigned char **)v46 + 3) != v49)
        {
          unsigned char *v49 = 41;
          ++*((void *)v46 + 4);
          goto LABEL_37;
        }
        unint64_t v35 = v46;
        uint64_t v37 = ")";
        size_t v38 = 1;
LABEL_36:
        llvm::raw_ostream::write(v35, v37, v38);
        goto LABEL_37;
      }
      if (*(_WORD *)(*(void *)(a1 + 104) + v29) == 3)
      {
        uint64_t v43 = llvm::dwarf::TagString(AsUnsignedConstant);
        if (v44)
        {
          __src = v43;
          size_t __n = v44;
          goto LABEL_49;
        }
      }
LABEL_37:
      unint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
      unint64_t v40 = (unsigned char *)*((void *)v39 + 4);
      if (*((unsigned char **)v39 + 3) == v40)
      {
        llvm::raw_ostream::write(v39, "\n", 1uLL);
      }
      else
      {
        unsigned char *v40 = 10;
        ++*((void *)v39 + 4);
      }
      uint64_t v30 = (unint64_t *)((char *)v30 + 1);
      v31 += 24;
      v29 += 4;
      v32 -= 48;
      if (!v32) {
        goto LABEL_58;
      }
    }
    uint64_t v36 = (void *)*((void *)v35 + 4);
    if (*((void *)v35 + 3) - (void)v36 > 0x19uLL)
    {
      qmemcpy(v36, "Error extracting the value", 26);
      *((void *)v35 + 4) += 26;
      goto LABEL_37;
    }
    uint64_t v37 = "Error extracting the value";
    size_t v38 = 26;
    goto LABEL_36;
  }
LABEL_61:
  uint64_t v65 = &unk_1F2618938;
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 216))(v66);
  }
  return v7;
}

void *sub_1CC66E540(void *a1)
{
  *a1 = &unk_1F2618960;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 240))(v2);
  }
  return a1;
}

void llvm::AppleAcceleratorTable::dump(llvm::AppleAcceleratorTable *this, llvm::raw_ostream *a2)
{
  v69[18] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 136))
  {
    __int16 v61 = (void (**)(void **, const char *, uint64_t))&unk_1F26454D8;
    char v62 = a2;
    int v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    int v66 = 0;
    llvm::AppleAcceleratorTable::Header::dump((unsigned int *)this + 18, (uint64_t)&v61);
    sub_1CD5E1780((uint64_t)&v61, "DIE offset base", 0xFuLL, *((void *)this + 12));
    sub_1CD5E1780((uint64_t)&v61, "Number of atoms", 0xFuLL, *((unsigned int *)this + 28));
    unint64_t v67 = v69;
    uint64_t v68 = 0x300000000;
    uint64_t v59 = &unk_1F2618960;
    unint64_t v60 = (void **)&v61;
    v61[29]((void **)&v61, "Atoms", 5);
    uint64_t v5 = *((unsigned int *)this + 28);
    if (v5)
    {
      uint64_t v6 = 0;
      BOOL v7 = (__int16 *)*((void *)this + 13);
      unint64_t v40 = &v7[2 * v5];
      unint64_t v2 = (unint64_t)&v51;
      do
      {
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v6;
        uint64_t v47 = "Atom ";
        unint64_t v49 = v3;
        LOWORD(v51) = 2051;
        llvm::Twine::str((llvm::Twine *)&v47, &__p);
        if (v56 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        if (v56 >= 0) {
          uint64_t v9 = v56 & 0x7F;
        }
        else {
          uint64_t v9 = v55;
        }
        unint64_t v57 = &unk_1F2618938;
        uint64_t v58 = (void **)&v61;
        v61[26]((void **)&v61, p_p, v9);
        if (v56 < 0) {
          operator delete(__p);
        }
        sub_1CD5E2174((uint64_t)&v61);
        int v10 = v62;
        uint64_t v11 = *((void *)v62 + 4);
        if ((unint64_t)(*((void *)v62 + 3) - v11) > 5)
        {
          *(_WORD *)(v11 + 4) = 8250;
          *(_DWORD *)uint64_t v11 = 1701869908;
          *((void *)v10 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v62, "Type: ", 6uLL);
        }
        unint64_t v12 = *v7;
        if (v12 > 7)
        {
          uint64_t v16 = (_OWORD *)*((void *)v10 + 4);
          if (*((void *)v10 + 3) - (void)v16 > 0xFuLL)
          {
            *uint64_t v16 = *(_OWORD *)"DW_ATOM_unknown_";
            *((void *)v10 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write(v10, "DW_ATOM_unknown_", 0x10uLL);
          }
          uint64_t v47 = (const char *)&unk_1F25FED10;
          uint64_t v48 = (uint64_t)"%x";
          unint64_t v49 = (unsigned __int16)v12;
          llvm::raw_ostream::operator<<(v10, (uint64_t)&v47);
        }
        else
        {
          char v13 = off_1E68499C8[v12];
          size_t v14 = qword_1CFB1B7D0[v12];
          uint64_t v15 = (void *)*((void *)v10 + 4);
          if (v14 <= *((void *)v10 + 3) - (void)v15)
          {
            memcpy(v15, v13, v14);
            *((void *)v10 + 4) += v14;
          }
          else
          {
            llvm::raw_ostream::write(v10, v13, v14);
          }
        }
        uint64_t v17 = (unsigned char *)*((void *)v10 + 4);
        if ((unint64_t)v17 >= *((void *)v10 + 3))
        {
          llvm::raw_ostream::write(v10, 10);
        }
        else
        {
          *((void *)v10 + 4) = v17 + 1;
          *uint64_t v17 = 10;
        }
        sub_1CD5E2174((uint64_t)&v61);
        uint64_t v18 = v62;
        uint64_t v19 = *((void *)v62 + 4);
        if ((unint64_t)(*((void *)v62 + 3) - v19) > 5)
        {
          *(_WORD *)(v19 + 4) = 8250;
          *(_DWORD *)uint64_t v19 = 1836216134;
          *((void *)v18 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v62, "Form: ", 6uLL);
        }
        uint64_t v47 = "{0}";
        uint64_t v48 = 3;
        unint64_t v49 = (unint64_t)&v53;
        uint64_t v50 = 1;
        uint64_t v20 = v7 + 1;
        uint64_t v51 = &unk_1F2618780;
        uint64_t v52 = v20;
        long long v53 = &v51;
        sub_1CD862C68((uint64_t)&v47, v18);
        uint64_t v21 = (unsigned char *)*((void *)v18 + 4);
        if ((unint64_t)v21 >= *((void *)v18 + 3))
        {
          llvm::raw_ostream::write(v18, 10);
        }
        else
        {
          *((void *)v18 + 4) = v21 + 1;
          unsigned char *v21 = 10;
        }
        LOWORD(v47) = *v20;
        BYTE2(v47) = 0;
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t v22 = (long long *)sub_1CC1B48A4((uint64_t)&v67, (unint64_t)&v47);
        size_t v23 = (char *)v67 + 48 * v68;
        long long v24 = v22[2];
        long long v25 = *v22;
        v23[1] = v22[1];
        v23[2] = v24;
        _OWORD *v23 = v25;
        LODWORD(v68) = v68 + 1;
        unint64_t v57 = &unk_1F2618938;
        if (v58) {
          (*((void (**)(void **))*v58 + 27))(v58);
        }
        BOOL v7 = v20 + 1;
        ++v6;
      }
      while (v7 != v40);
    }
    uint64_t v59 = &unk_1F2618960;
    if (v60) {
      (*((void (**)(void **))*v60 + 30))(v60);
    }
    uint64_t v26 = *((unsigned int *)this + 22) + 20;
    uint64_t v46 = v26;
    int v27 = *((_DWORD *)this + 20);
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v26 + (4 * v27);
      uint64_t v41 = v29 + (4 * *((_DWORD *)this + 21));
      do
      {
        unsigned int v30 = sub_1CD8337FC((uint64_t)this + 8, (unint64_t *)&v46, 0);
        unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v28;
        uint64_t v47 = "Bucket ";
        unint64_t v49 = v2;
        LOWORD(v51) = 2051;
        llvm::Twine::str((llvm::Twine *)&v47, &__p);
        if (v56 >= 0) {
          unint64_t v31 = (const char *)&__p;
        }
        else {
          unint64_t v31 = (const char *)__p;
        }
        if (v56 >= 0) {
          uint64_t v32 = v56 & 0x7F;
        }
        else {
          uint64_t v32 = v55;
        }
        uint64_t v59 = &unk_1F2618960;
        unint64_t v60 = (void **)&v61;
        v61[29]((void **)&v61, v31, v32);
        if (v56 < 0) {
          operator delete(__p);
        }
        if (v30 == -1)
        {
          sub_1CD5E1848((uint64_t)&v61, "EMPTY", 5uLL);
        }
        else if (v30 < *((_DWORD *)this + 21))
        {
          unint64_t v33 = v30;
          do
          {
            uint64_t v34 = (4 * v33);
            unint64_t v45 = v34 + v29;
            unint64_t v44 = v41 + v34;
            unsigned int v35 = sub_1CD8337FC((uint64_t)this + 8, &v45, 0);
            if (v28 != v35 % *((_DWORD *)this + 20)) {
              break;
            }
            unsigned int v36 = v35;
            unint64_t v43 = 0;
            unsigned int v37 = sub_1CD8337FC((uint64_t)this + 8, &v44, 0);
            uint64_t v42 = v36;
            unint64_t v43 = v37;
            uint64_t v47 = "Hash 0x";
            unint64_t v49 = (unint64_t)&v42;
            LOWORD(v51) = 3587;
            llvm::Twine::str((llvm::Twine *)&v47, &__p);
            if (v56 >= 0) {
              size_t v38 = (const char *)&__p;
            }
            else {
              size_t v38 = (const char *)__p;
            }
            if (v56 >= 0) {
              uint64_t v39 = v56 & 0x7F;
            }
            else {
              uint64_t v39 = v55;
            }
            unint64_t v57 = &unk_1F2618960;
            uint64_t v58 = (void **)&v61;
            v61[29]((void **)&v61, v38, v39);
            if (v56 < 0) {
              operator delete(__p);
            }
            if (*((void *)this + 2) <= v43)
            {
              sub_1CD5E1848((uint64_t)&v61, "Invalid section offset", 0x16uLL);
            }
            else
            {
              while (llvm::AppleAcceleratorTable::dumpName((uint64_t)this, (uint64_t)&v61, (uint64_t)&v67, &v43))
                ;
            }
            unint64_t v57 = &unk_1F2618960;
            if (v58) {
              (*((void (**)(void **))*v58 + 30))(v58);
            }
            ++v33;
          }
          while (v33 < *((unsigned int *)this + 21));
        }
        uint64_t v59 = &unk_1F2618960;
        if (v60) {
          (*((void (**)(void **))*v60 + 30))(v60);
        }
        ++v28;
      }
      while (v28 < *((unsigned int *)this + 20));
    }
    if (v67 != v69) {
      free(v67);
    }
  }
}

void *llvm::AppleAcceleratorTable::Entry::Entry(void *a1, uint64_t a2)
{
  a1[1] = a1 + 3;
  uint64_t v3 = (uint64_t)(a1 + 1);
  a1[2] = 0x300000000;
  *a1 = &unk_1F2618818;
  a1[21] = a2;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v4)
  {
    uint64_t v5 = 4 * v4;
    uint64_t v6 = (__int16 *)(*(void *)(a2 + 8) + 2);
    do
    {
      __int16 v7 = *v6;
      v6 += 2;
      __int16 v13 = v7;
      char v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v8 = (_OWORD *)sub_1CC1B48A4(v3, (unint64_t)&v13);
      uint64_t v9 = (_OWORD *)(a1[1] + 48 * *((unsigned int *)a1 + 4));
      long long v11 = v8[1];
      long long v10 = v8[2];
      _OWORD *v9 = *v8;
      v9[1] = v11;
      v9[2] = v10;
      ++*((_DWORD *)a1 + 4);
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

unsigned __int16 *llvm::AppleAcceleratorTable::Entry::extract(unsigned __int16 *this, const llvm::AppleAcceleratorTable *a2, unint64_t *a3)
{
  uint64_t v4 = *((unsigned int *)this + 4);
  if (v4)
  {
    uint64_t v6 = (unsigned __int16 *)*((void *)this + 1);
    uint64_t v7 = *((unsigned __int16 *)a2 + 38);
    int v8 = (uint64_t *)((char *)a2 + 8);
    uint64_t v9 = 48 * v4;
    do
    {
      unint64_t v3 = v3 & 0xFFFF000000000000 | v7;
      this = llvm::DWARFFormValue::extractValue(v6, v8, a3, v3, 0, 0);
      v6 += 24;
      v9 -= 48;
    }
    while (v9);
  }
  return this;
}

uint64_t llvm::AppleAcceleratorTable::Entry::lookup@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 168);
  uint64_t v4 = *(unsigned int *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(unsigned __int16 **)(v3 + 8);
    uint64_t v6 = *(_OWORD **)(this + 8);
    uint64_t v7 = 4 * v4;
    while (*v5 != a2)
    {
      v5 += 2;
      v6 += 3;
      v7 -= 4;
      if (!v7) {
        goto LABEL_5;
      }
    }
    long long v9 = v6[1];
    *(_OWORD *)a3 = *v6;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v6[2];
    char v8 = 1;
  }
  else
  {
LABEL_5:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 48) = v8;
  return this;
}

unint64_t llvm::AppleAcceleratorTable::Entry::getDIESectionOffset(llvm::AppleAcceleratorTable::Entry *this)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(_WORD **)(v2 + 8);
    uint64_t v5 = (_OWORD *)*((void *)this + 1);
    uint64_t v6 = 4 * v3;
    while (*v4 != 1)
    {
      v4 += 2;
      v5 += 3;
      v6 -= 4;
      if (!v6) {
        goto LABEL_5;
      }
    }
    long long v8 = v5[1];
    v10[0] = *v5;
    v10[1] = v8;
    v10[2] = v5[2];
    char v7 = 1;
  }
  else
  {
LABEL_5:
    char v7 = 0;
    LOBYTE(v10[0]) = 0;
  }
  char v11 = v7;
  return llvm::AppleAcceleratorTable::HeaderData::extractOffset((void *)v2, (unsigned __int16 *)v10);
}

unint64_t llvm::AppleAcceleratorTable::Entry::getCUOffset(llvm::AppleAcceleratorTable::Entry *this)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(_WORD **)(v2 + 8);
    uint64_t v5 = (_OWORD *)*((void *)this + 1);
    uint64_t v6 = 4 * v3;
    while (*v4 != 2)
    {
      v4 += 2;
      v5 += 3;
      v6 -= 4;
      if (!v6) {
        goto LABEL_5;
      }
    }
    long long v8 = v5[1];
    v10[0] = *v5;
    v10[1] = v8;
    v10[2] = v5[2];
    char v7 = 1;
  }
  else
  {
LABEL_5:
    char v7 = 0;
    LOBYTE(v10[0]) = 0;
  }
  char v11 = v7;
  return llvm::AppleAcceleratorTable::HeaderData::extractOffset((void *)v2, (unsigned __int16 *)v10);
}

uint64_t llvm::AppleAcceleratorTable::Entry::getTag(llvm::AppleAcceleratorTable::Entry *this)
{
  uint64_t v1 = *((void *)this + 21);
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(_WORD **)(v1 + 8);
    uint64_t v4 = (_OWORD *)*((void *)this + 1);
    v2 *= 4;
    while (*v3 != 3)
    {
      v3 += 2;
      v4 += 3;
      v2 -= 4;
      if (!v2) {
        goto LABEL_5;
      }
    }
    long long v8 = v4[1];
    v11[0] = *v4;
    v11[1] = v8;
    void v11[2] = v4[2];
    char v12 = 1;
    __int16 AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v11);
    LODWORD(v2) = AsUnsignedConstant & 0xFF00;
    int v6 = AsUnsignedConstant;
    if (v10) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0;
    }
    if (!v10)
    {
      int v6 = 0;
      LODWORD(v2) = 0;
    }
  }
  else
  {
LABEL_5:
    int v5 = 0;
    int v6 = 0;
  }
  return v6 | v5 | v2;
}

llvm::AppleAcceleratorTable::ValueIterator *llvm::AppleAcceleratorTable::ValueIterator::ValueIterator(llvm::AppleAcceleratorTable::ValueIterator *this, const llvm::AppleAcceleratorTable *a2, unint64_t a3)
{
  *(void *)this = a2;
  llvm::AppleAcceleratorTable::Entry::Entry((void *)this + 1, (uint64_t)a2 + 96);
  *((void *)this + 23) = a3;
  *((void *)this + 24) = 0;
  if (a3 <= 0xFFFFFFFFFFFFFFFBLL && *((void *)a2 + 2) > a3 + 3)
  {
    *((_DWORD *)this + 49) = sub_1CD8337FC((uint64_t)a2 + 8, (unint64_t *)this + 23, 0);
    llvm::AppleAcceleratorTable::ValueIterator::Next((unsigned __int16 *)this);
  }
  return this;
}

unsigned __int16 *llvm::AppleAcceleratorTable::ValueIterator::Next(unsigned __int16 *this)
{
  uint64_t v2 = this;
  unsigned int v3 = *((_DWORD *)this + 48);
  if (v3 >= *((_DWORD *)this + 49)
    || (unint64_t v4 = *((void *)this + 23), v4 > 0xFFFFFFFFFFFFFFFBLL)
    || (uint64_t v5 = *(void *)this, *(void *)(*(void *)this + 16) <= v4 + 3))
  {
    *((_DWORD *)this + 49) = 0;
    *((void *)this + 23) = 0;
  }
  else
  {
    uint64_t v6 = *((unsigned int *)this + 6);
    if (v6)
    {
      char v7 = (unsigned __int16 *)*((void *)this + 2);
      uint64_t v8 = *(unsigned __int16 *)(v5 + 76);
      long long v9 = (uint64_t *)(v5 + 8);
      uint64_t v10 = 48 * v6;
      do
      {
        unint64_t v1 = v1 & 0xFFFF000000000000 | v8;
        this = llvm::DWARFFormValue::extractValue(v7, v9, (unint64_t *)v2 + 23, v1, 0, 0);
        v7 += 24;
        v10 -= 48;
      }
      while (v10);
      unsigned int v3 = *((_DWORD *)v2 + 48);
    }
    *((_DWORD *)v2 + 48) = v3 + 1;
  }
  return this;
}

void llvm::AppleAcceleratorTable::equal_range(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v10 = 5381;
    if (a3)
    {
      size_t v11 = a3;
      char v12 = a2;
      do
      {
        int v13 = *v12++;
        unsigned int v10 = 33 * v10 + v13;
        --v11;
      }
      while (v11);
    }
    unsigned int v14 = *(_DWORD *)(a1 + 80);
    int v15 = *(_DWORD *)(a1 + 84);
    uint64_t v16 = *(unsigned int *)(a1 + 88) + 20;
    int v26 = v10 % v14;
    uint64_t v31 = v16 + 4 * (v10 % v14);
    unsigned int v17 = sub_1CD8337FC(a1 + 8, (unint64_t *)&v31, 0);
    if (v17 < *(_DWORD *)(a1 + 84))
    {
      uint64_t v18 = v16 + 4 * v14;
      uint64_t v19 = v18 + (4 * v15);
      unint64_t v20 = v17;
      int v21 = 4 * v17;
      do
      {
        uint64_t v22 = v18;
        uint64_t v29 = v19 + (v21 & 0xFFFFFFFC);
        uint64_t v30 = (v21 & 0xFFFFFFFC) + v18;
        if (sub_1CD8337FC(a1 + 8, (unint64_t *)&v30, 0) % *(_DWORD *)(a1 + 80) != v26) {
          break;
        }
        unint64_t v28 = 0;
        unint64_t v28 = sub_1CD8337FC(a1 + 8, (unint64_t *)&v29, 0);
        unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a1 + 8, 4, &v28, 0, 0);
        if (!RelocatedValue) {
          break;
        }
        uint64_t v25 = v19;
        CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)(a1 + 48), &RelocatedValue, 0);
        if (CStrRef)
        {
          long long v24 = CStrRef;
          if (a3 == strlen(CStrRef) && (!a3 || !memcmp(a2, v24, a3)))
          {
LABEL_25:
            llvm::AppleAcceleratorTable::ValueIterator::ValueIterator((llvm::AppleAcceleratorTable::ValueIterator *)v53, (const llvm::AppleAcceleratorTable *)a1, v28);
            uint64_t v46 = 0;
            long long v48 = 0u;
            memset(v49, 0, sizeof(v49));
            HIDWORD(v48) = 3;
            uint64_t v47 = &unk_1F2618818;
            *(void *)&long long v48 = v49;
            uint64_t v50 = 0;
            uint64_t v52 = 0;
            uint64_t v51 = 0;
            sub_1CC66F7BC(a4, v53, &v46);
            uint64_t v47 = &unk_1F2618988;
            if ((unsigned char *)v48 != v49) {
              free((void *)v48);
            }
            v53[1] = (uint64_t)&unk_1F2618988;
            uint64_t v6 = v54;
            if (v54 != &v55) {
              goto LABEL_6;
            }
            return;
          }
        }
        else if (!a3)
        {
          goto LABEL_25;
        }
        ++v20;
        v21 += 4;
        uint64_t v18 = v22;
        uint64_t v19 = v25;
      }
      while (v20 < *(unsigned int *)(a1 + 84));
    }
    uint64_t v39 = 0;
    long long v41 = 0u;
    memset(v42, 0, sizeof(v42));
    uint64_t v5 = (uint64_t *)v42;
    HIDWORD(v41) = 3;
    unint64_t v40 = &unk_1F2618818;
    *(void *)&long long v41 = v42;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    memset(v35, 0, sizeof(v35));
    uint64_t v32 = 0;
    v34[1] = (void *)0x300000000;
    unint64_t v33 = &unk_1F2618818;
    v34[0] = v35;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    sub_1CC66F7BC(a4, &v39, &v32);
    unint64_t v33 = &unk_1F2618988;
    if (v34[0] != v35) {
      free(v34[0]);
    }
    unint64_t v40 = &unk_1F2618988;
    uint64_t v6 = (uint64_t *)v41;
  }
  else
  {
    long long v65 = 0u;
    uint64_t v63 = 0;
    memset(v66, 0, sizeof(v66));
    uint64_t v5 = (uint64_t *)v66;
    *(void *)&long long v65 = v66;
    HIDWORD(v65) = 3;
    uint64_t v64 = &unk_1F2618818;
    uint64_t v67 = 0;
    uint64_t v69 = 0;
    uint64_t v68 = 0;
    long long v58 = 0u;
    memset(v59, 0, sizeof(v59));
    uint64_t v56 = 0;
    *(void *)&long long v58 = v59;
    HIDWORD(v58) = 3;
    unint64_t v57 = &unk_1F2618818;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_1CC66F7BC(a4, &v63, &v56);
    unint64_t v57 = &unk_1F2618988;
    if ((unsigned char *)v58 != v59) {
      free((void *)v58);
    }
    uint64_t v64 = &unk_1F2618988;
    uint64_t v6 = (uint64_t *)v65;
  }
  if (v6 != v5) {
LABEL_6:
  }
    free(v6);
}

void sub_1CC66F7BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *a2;
  int v15 = &unk_1F2618988;
  uint64_t v16 = v18;
  uint64_t v17 = 0x300000000;
  if (*((_DWORD *)a2 + 6)) {
    sub_1CD5E235C((uint64_t)&v16, (uint64_t)(a2 + 2));
  }
  uint64_t v6 = a2[22];
  int v15 = &unk_1F2618818;
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a2 + 23);
  uint64_t v8 = *a3;
  long long v9 = v11;
  uint64_t v10 = 0x300000000;
  if (*((_DWORD *)a3 + 6)) {
    sub_1CD5E235C((uint64_t)&v9, (uint64_t)(a3 + 2));
  }
  uint64_t v12 = a3[22];
  long long v13 = *(_OWORD *)(a3 + 23);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = &unk_1F2618988;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x300000000;
  if (v17) {
    sub_1CD5E235C(a1 + 16, (uint64_t)&v16);
  }
  *(void *)(a1 + 216) = a1 + 232;
  *(void *)(a1 + 8) = &unk_1F2618818;
  *(void *)(a1 + 176) = v19;
  *(_OWORD *)(a1 + 184) = v20;
  *(void *)(a1 + 200) = v8;
  *(void *)(a1 + 208) = &unk_1F2618988;
  *(void *)(a1 + 224) = 0x300000000;
  if (v10) {
    sub_1CD5E235C(a1 + 216, (uint64_t)&v9);
  }
  *(void *)(a1 + 208) = &unk_1F2618818;
  char v7 = v9;
  *(void *)(a1 + 376) = v12;
  *(_OWORD *)(a1 + 384) = v13;
  if (v7 != v11) {
    free(v7);
  }
  int v15 = &unk_1F2618988;
  if (v16 != v18) {
    free(v16);
  }
}

uint64_t llvm::DWARFDebugNames::Header::dump(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 208))(a2, "Header", 6);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Length", 6, *(void *)a1);
  int v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = "DWARF32";
  uint64_t v6 = 7;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v4 == 1) {
    char v7 = "DWARF64";
  }
  else {
    char v7 = v5;
  }
  if (v4 == 1) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = v6;
  }
  (*(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))(*(void *)a2 + 192))(a2, "Format", 6, v7, v8);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 32))(a2, "Version", 7, *(unsigned __int16 *)(a1 + 10));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "CU count", 8, *(unsigned int *)(a1 + 12));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Local TU count", 14, *(unsigned int *)(a1 + 16));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Foreign TU count", 16, *(unsigned int *)(a1 + 20));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Bucket count", 12, *(unsigned int *)(a1 + 24));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 24))(a2, "Name count", 10, *(unsigned int *)(a1 + 28));
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Abbreviations table size", 24, *(unsigned int *)(a1 + 32));
  long long v9 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 0xEuLL)
  {
    qmemcpy(v10, "Augmentation: '", 15);
    *((void *)v9 + 4) += 15;
  }
  else
  {
    long long v9 = llvm::raw_ostream::write(v9, "Augmentation: '", 0xFuLL);
  }
  size_t v11 = llvm::raw_ostream::write(v9, *(const char **)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v12 = (_WORD *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v12 > 1uLL)
  {
    *uint64_t v12 = 2599;
    *((void *)v11 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v11, "'\n", 2uLL);
  }
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(a2);
  }
  return result;
}

unsigned char *llvm::DWARFDebugNames::Header::extract@<X0>(llvm::DWARFDebugNames::Header *this@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *a3;
  uint64_t v21 = 0;
  uint64_t v22 = v8;
  unint64_t v20 = v8;
  *(void *)this = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a2, &v20, &v21);
  *((unsigned char *)this + 8) = v9;
  *((_WORD *)this + 5) = sub_1CD833674((uint64_t)a2, &v20, &v21);
  llvm::DataExtractor::skip((BOOL)a2, &v20, 2);
  *((_DWORD *)this + 3) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  *((_DWORD *)this + 4) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  *((_DWORD *)this + 5) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  *((_DWORD *)this + 6) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  *((_DWORD *)this + 7) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  *((_DWORD *)this + 8) = sub_1CD8337FC((uint64_t)a2, &v20, &v21);
  unint64_t v10 = (sub_1CD8337FC((uint64_t)a2, &v20, &v21) + 3) & 0xFFFFFFFC;
  *((_DWORD *)this + 9) = v10;
  uint64_t v11 = v21;
  if (v21)
  {
    uint64_t v21 = 0;
    uint64_t v17 = std::generic_category();
    uint64_t v23 = v11;
    sub_1CD4FB504(&v23, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v25 = (const char *)p_p;
    sub_1CD5E2210(92, (uint64_t)v17, (uint64_t)"parsing .debug_names header at 0x%llx: %s", &v22, (uint64_t *)&v25);
  }
  unint64_t v12 = v20 + v10;
  if (v12 < v20 || *((void *)a2 + 1) <= v12 - 1)
  {
    uint64_t v19 = std::generic_category();
    __p.__r_.__value_.__r.__words[0] = 92;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    uint64_t v25 = "cannot read header augmentation";
    sub_1CD06481C();
  }
  long long v13 = (unsigned char **)((char *)this + 40);
  unint64_t v14 = *((void *)this + 6);
  if (v14 != v10)
  {
    if (v14 <= v10)
    {
      if (*((void *)this + 7) < v10) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v10 != v14) {
        bzero(&(*v13)[v14], v10 - v14);
      }
    }
    *((void *)this + 6) = v10;
    LODWORD(v10) = *((_DWORD *)this + 9);
  }
  uint64_t result = sub_1CD8335A0(a2, &v20, *v13, v10, &v21);
  uint64_t v16 = v21;
  *a3 = v20;
  *a4 = v16;
  return result;
}

uint64_t llvm::DWARFDebugNames::Abbrev::dump(unsigned int *a1, uint64_t a2)
{
  uint64_t v19 = *a1;
  uint64_t v11 = "Abbreviation 0x";
  long long v13 = &v19;
  LOWORD(v15) = 3587;
  llvm::Twine::str((llvm::Twine *)&v11, __p);
  if (v21 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if (v21 >= 0) {
    uint64_t v5 = (void *)(v21 & 0x7F);
  }
  else {
    uint64_t v5 = __p[1];
  }
  uint64_t v22 = &unk_1F2618938;
  uint64_t v23 = a2;
  (*(void (**)(uint64_t, void **, void *))(*(void *)a2 + 208))(a2, v4, v5);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  uint64_t v11 = "Tag: {0}\n";
  uint64_t v12 = 9;
  long long v13 = v17;
  uint64_t v14 = 1;
  int v15 = &unk_1F26189A8;
  uint64_t v16 = a1 + 1;
  v17[0] = &v15;
  sub_1CD862C68((uint64_t)&v11, v6);
  uint64_t v8 = (unsigned int *)*((void *)a1 + 1);
  for (uint64_t i = (unsigned int *)*((void *)a1 + 2); v8 != i; v8 += 2)
  {
    char v9 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
    uint64_t v11 = "{0}: {1}\n";
    uint64_t v12 = 9;
    long long v13 = v18;
    uint64_t v14 = 2;
    int v15 = &unk_1F26189D8;
    uint64_t v16 = v8;
    v17[0] = &unk_1F2618780;
    v17[1] = v8 + 1;
    v18[0] = &v15;
    v18[1] = v17;
    sub_1CD862C68((uint64_t)&v11, v9);
  }
  uint64_t v22 = &unk_1F2618938;
  uint64_t result = v23;
  if (v23) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v23 + 216))(v23);
  }
  return result;
}

void llvm::DWARFDebugNames::AbbrevMapInfo::getEmptyKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
}

void llvm::DWARFDebugNames::AbbrevMapInfo::getTombstoneKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = -1;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
}

uint64_t llvm::DWARFDebugNames::NameIndex::extractAttributeEncoding@<X0>(llvm::DWARFDebugNames::NameIndex *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 >= *((void *)this + 19))
  {
    std::generic_category();
    sub_1CD06481C();
  }
  unsigned int ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(*((void *)this + 12) + 8), (uint64_t *)a2, 0);
  uint64_t result = llvm::DataExtractor::getULEB128((uint64_t *)(*((void *)this + 12) + 8), (uint64_t *)a2, 0);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = ULEB128 | ((unint64_t)(unsigned __int16)result << 32);
  return result;
}

void llvm::DWARFDebugNames::NameIndex::extractAttributeEncodings(llvm::DWARFDebugNames::NameIndex *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  llvm::DWARFDebugNames::NameIndex::extractAttributeEncoding(this, a2, (uint64_t)&v20);
  if (v21)
  {
    uint64_t v19 = v20;
    *(unsigned char *)(a3 + 24) |= 1u;
    *(void *)a3 = v19;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (v20) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = WORD2(v20) == 0;
      }
      if (v9)
      {
        *(unsigned char *)(a3 + 24) &= ~1u;
        *(void *)a3 = v6;
        *(void *)(a3 + 8) = v7;
        *(void *)(a3 + 16) = v8;
        return;
      }
      if (v7 >= v8)
      {
        uint64_t v11 = (v7 - v6) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          abort();
        }
        if ((v8 - v6) >> 2 > v12) {
          unint64_t v12 = (v8 - v6) >> 2;
        }
        if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          if (v13 >> 61) {
            sub_1CB833614();
          }
          uint64_t v14 = (char *)operator new(8 * v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        int v15 = &v14[8 * v11];
        *(void *)int v15 = v20;
        unint64_t v10 = v15 + 8;
        while (v7 != v6)
        {
          int v16 = *((_DWORD *)v7 - 2);
          v7 -= 8;
          __int16 v17 = *((_WORD *)v7 + 2);
          *((_DWORD *)v15 - 2) = v16;
          v15 -= 8;
          *((_WORD *)v15 + 2) = v17;
        }
        uint64_t v8 = &v14[8 * v13];
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v15;
      }
      else
      {
        *(void *)char v7 = v20;
        unint64_t v10 = v7 + 8;
        if ((v21 & 1) != 0 && v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      llvm::DWARFDebugNames::NameIndex::extractAttributeEncoding(this, a2, (uint64_t)&v20);
      char v7 = v10;
    }
    while ((v21 & 1) == 0);
    uint64_t v18 = v20;
    *(unsigned char *)(a3 + 24) |= 1u;
    *(void *)a3 = v18;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void llvm::DWARFDebugNames::NameIndex::extractAbbrev(llvm::DWARFDebugNames::NameIndex *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a2 >= *((void *)this + 19))
  {
    *(void *)&long long v10 = 92;
    *((void *)&v10 + 1) = std::generic_category();
    sub_1CD06481C();
  }
  int ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(*((void *)this + 12) + 8), (uint64_t *)a2, 0);
  if (ULEB128)
  {
    __int16 v7 = llvm::DataExtractor::getULEB128((uint64_t *)(*((void *)this + 12) + 8), (uint64_t *)a2, 0);
    llvm::DWARFDebugNames::NameIndex::extractAttributeEncodings(this, a2, (uint64_t)&v10);
    if (v12)
    {
      uint64_t v9 = v10;
      *(unsigned char *)(a3 + 32) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      uint64_t v8 = v11;
      *(unsigned char *)(a3 + 32) &= ~1u;
      *(_DWORD *)a3 = ULEB128;
      *(_WORD *)(a3 + 4) = v7;
      *(_OWORD *)(a3 + 8) = v10;
      *(void *)(a3 + 24) = v8;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 32) &= ~1u;
    *(_DWORD *)a3 = 0;
    *(_WORD *)(a3 + 4) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t *llvm::DWARFDebugNames::NameIndex::extract@<X0>(llvm::DWARFDebugNames::NameIndex *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 12);
  v43[0] = *((void *)this + 13);
  uint64_t result = (uint64_t *)llvm::DWARFDebugNames::Header::extract((llvm::DWARFDebugNames::NameIndex *)((char *)this + 24), (const llvm::DWARFDataExtractor *)(v4 + 8), v43, a2);
  if (*a2) {
    return result;
  }
  if (*((unsigned char *)this + 32)) {
    char v6 = 3;
  }
  else {
    char v6 = 2;
  }
  int v7 = *((_DWORD *)this + 12);
  unint64_t v8 = v43[0]
     + (*((_DWORD *)this + 9) << v6)
     + (*((_DWORD *)this + 10) << v6)
     + (unint64_t)(8 * *((_DWORD *)this + 11));
  *((void *)this + 14) = v43[0];
  *((void *)this + 15) = v8;
  unint64_t v9 = v8 + (4 * v7);
  int v10 = *((_DWORD *)this + 13);
  uint64_t v11 = *((unsigned int *)this + 14);
  if (v7) {
    unint64_t v8 = v9 + (4 * v10);
  }
  *((void *)this + 16) = v9;
  *((void *)this + 17) = v8;
  uint64_t v12 = (v10 << v6);
  *((void *)this + 18) = v8 + v12;
  v43[0] = v8 + v12 + v12;
  uint64_t v13 = v43[0] + v11;
  if (__CFADD__(v43[0], v11) || *(void *)(v4 + 16) <= (unint64_t)(v13 - 1))
  {
    unint64_t v40 = std::generic_category();
    uint64_t v46 = 92;
    *(void *)&long long v47 = v40;
    uint64_t v44 = (uint64_t)"Section too small: cannot read abbreviations.";
    sub_1CD06481C();
  }
  *((void *)this + 19) = v13;
  llvm::DWARFDebugNames::NameIndex::extractAbbrev(this, v43, (uint64_t)&v46);
  if (v49)
  {
LABEL_59:
    uint64_t v41 = v46;
    uint64_t v46 = 0;
    *a2 = v41;
    return sub_1CC673B0C(&v46);
  }
  while (v46)
  {
    unsigned int v14 = *((_DWORD *)this + 4);
    if (v14)
    {
      uint64_t v15 = (v14 - 1) & (37 * v46);
      int v16 = (_DWORD *)(*(void *)this + 32 * v15);
      int v17 = *v16;
      if (v46 == *v16)
      {
LABEL_60:
        uint64_t v42 = std::generic_category();
        uint64_t v44 = 22;
        uint64_t v45 = v42;
        v43[1] = (unint64_t)"Duplicate abbreviation code.";
        sub_1CD06481C();
      }
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -1;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        int v21 = v15 + v19++;
        uint64_t v15 = v21 & (v14 - 1);
        int v16 = (_DWORD *)(*(void *)this + 32 * v15);
        int v17 = *v16;
        if (v46 == *v16) {
          goto LABEL_60;
        }
      }
      if (v18) {
        uint64_t v22 = (uint64_t)v18;
      }
      else {
        uint64_t v22 = (uint64_t)v16;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    int v23 = *((_DWORD *)this + 2);
    if (4 * v23 + 4 >= 3 * v14)
    {
      sub_1CC673B7C((char **)this, 2 * v14);
      int v24 = v46;
      int v27 = *((_DWORD *)this + 4) - 1;
      uint64_t v28 = (37 * v46) & v27;
      uint64_t v22 = *(void *)this + 32 * v28;
      int v29 = *(_DWORD *)v22;
      if (v46 == *(_DWORD *)v22) {
        goto LABEL_26;
      }
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == -1;
        }
        if (v32) {
          uint64_t v30 = v22;
        }
        int v33 = v28 + v31++;
        uint64_t v28 = v33 & v27;
        uint64_t v22 = *(void *)this + 32 * v28;
        int v29 = *(_DWORD *)v22;
        if (v46 == *(_DWORD *)v22) {
          goto LABEL_26;
        }
      }
      goto LABEL_55;
    }
    if (v14 + ~v23 - *((_DWORD *)this + 3) <= v14 >> 3)
    {
      sub_1CC673B7C((char **)this, v14);
      int v24 = v46;
      int v34 = *((_DWORD *)this + 4) - 1;
      uint64_t v35 = (37 * v46) & v34;
      uint64_t v22 = *(void *)this + 32 * v35;
      int v36 = *(_DWORD *)v22;
      if (v46 == *(_DWORD *)v22) {
        goto LABEL_26;
      }
      uint64_t v30 = 0;
      int v37 = 1;
      while (v36)
      {
        if (v30) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v36 == -1;
        }
        if (v38) {
          uint64_t v30 = v22;
        }
        int v39 = v35 + v37++;
        uint64_t v35 = v39 & v34;
        uint64_t v22 = *(void *)this + 32 * v35;
        int v36 = *(_DWORD *)v22;
        if (v46 == *(_DWORD *)v22) {
          goto LABEL_26;
        }
      }
LABEL_55:
      if (v30) {
        uint64_t v22 = v30;
      }
    }
    int v24 = *(_DWORD *)v22;
LABEL_26:
    ++*((_DWORD *)this + 2);
    if (v24) {
      --*((_DWORD *)this + 3);
    }
    int v25 = v46;
    *(_WORD *)(v22 + 4) = WORD2(v46);
    *(_DWORD *)uint64_t v22 = v25;
    int v26 = *(void **)(v22 + 8);
    if (v26)
    {
      *(void *)(v22 + 16) = v26;
      operator delete(v26);
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0;
      *(void *)(v22 + 24) = 0;
    }
    *(_OWORD *)(v22 + 8) = v47;
    *(void *)(v22 + 24) = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    sub_1CC673B0C(&v46);
    llvm::DWARFDebugNames::NameIndex::extractAbbrev(this, v43, (uint64_t)&v46);
    if (v49) {
      goto LABEL_59;
    }
  }
  *a2 = 0;
  return sub_1CC673B0C(&v46);
}

uint64_t llvm::DWARFDebugNames::Entry::lookup@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 176);
  uint64_t v4 = *(_DWORD **)(v3 + 8);
  uint64_t v5 = *(_DWORD **)(v3 + 16);
  if (v4 == v5)
  {
LABEL_5:
    char v7 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    char v6 = *(_OWORD **)(result + 8);
    while (*v4 != a2)
    {
      v4 += 2;
      v6 += 3;
      if (v4 == v5) {
        goto LABEL_5;
      }
    }
    long long v8 = v6[1];
    *(_OWORD *)a3 = *v6;
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = v6[2];
    char v7 = 1;
  }
  *(unsigned char *)(a3 + 48) = v7;
  return result;
}

uint64_t llvm::DWARFDebugNames::Entry::getDIEUnitOffset(llvm::DWARFDebugNames::Entry *this)
{
  uint64_t v1 = *((void *)this + 22);
  uint64_t v2 = *(_DWORD **)(v1 + 8);
  uint64_t v3 = *(_DWORD **)(v1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(*((void *)this + 1) + 8);
  while (*v2 != 3)
  {
    v2 += 2;
    v4 += 6;
    if (v2 == v3) {
      return 0;
    }
  }
  unsigned int v5 = *((unsigned __int16 *)v4 - 4);
  uint64_t result = *v4;
  if (v5 <= 0x2D)
  {
    if ((0x11103F0000uLL >> v5)) {
      return result;
    }
    return 0;
  }
  if (v5 != 7968) {
    return 0;
  }
  return result;
}

unint64_t llvm::DWARFDebugNames::Entry::getCUOffset(llvm::DWARFDebugNames::Entry *this)
{
  unint64_t CUIndex = llvm::DWARFDebugNames::Entry::getCUIndex(this);
  if (v3 && (uint64_t v4 = *((void *)this + 21), CUIndex < *(unsigned int *)(v4 + 36)))
  {
    if (*(unsigned char *)(v4 + 32)) {
      int v8 = 8;
    }
    else {
      int v8 = 4;
    }
    if (*(unsigned char *)(v4 + 32)) {
      char v9 = 3;
    }
    else {
      char v9 = 2;
    }
    unint64_t v11 = *(void *)(v4 + 112) + (CUIndex << v9);
    unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(void *)(v4 + 96) + 8, v8, &v11, 0, 0);
    unint64_t v6 = RelocatedValue & 0xFFFFFFFFFFFFFF00;
    uint64_t v5 = RelocatedValue;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  return v6 | v5;
}

unint64_t llvm::DWARFDebugNames::NameIndex::getCUOffset(llvm::DWARFDebugNames::NameIndex *this, int a2)
{
  if (*((unsigned char *)this + 32)) {
    int v2 = 8;
  }
  else {
    int v2 = 4;
  }
  if (*((unsigned char *)this + 32)) {
    char v3 = 3;
  }
  else {
    char v3 = 2;
  }
  unint64_t v5 = *((void *)this + 14) + (a2 << v3);
  return llvm::DWARFDataExtractor::getRelocatedValue(*((void *)this + 12) + 8, v2, &v5, 0, 0);
}

unint64_t llvm::DWARFDebugNames::NameIndex::getLocalTUOffset(llvm::DWARFDebugNames::NameIndex *this, int a2)
{
  if (*((unsigned char *)this + 32)) {
    int v2 = 8;
  }
  else {
    int v2 = 4;
  }
  if (*((unsigned char *)this + 32)) {
    char v3 = 3;
  }
  else {
    char v3 = 2;
  }
  unint64_t v5 = *((void *)this + 14) + ((*((_DWORD *)this + 9) + a2) << v3);
  return llvm::DWARFDataExtractor::getRelocatedValue(*((void *)this + 12) + 8, v2, &v5, 0, 0);
}

unint64_t llvm::DWARFDebugNames::NameIndex::getForeignTUSignature(llvm::DWARFDebugNames::NameIndex *this, int a2)
{
  if (*((unsigned char *)this + 32)) {
    char v2 = 3;
  }
  else {
    char v2 = 2;
  }
  unint64_t v4 = *((void *)this + 14)
     + (8 * a2)
     + ((*((_DWORD *)this + 10) + *((_DWORD *)this + 9)) << v2);
  return sub_1CD833894(*((void *)this + 12) + 8, &v4, 0);
}

__n128 llvm::DWARFDebugNames::NameIndex::getNameTableEntry@<Q0>(llvm::DWARFDebugNames::NameIndex *this@<X0>, unsigned __int32 a2@<W1>, __n128 *a3@<X8>)
{
  if (*((unsigned char *)this + 32)) {
    int v6 = 8;
  }
  else {
    int v6 = 4;
  }
  if (*((unsigned char *)this + 32)) {
    char v7 = 3;
  }
  else {
    char v7 = 2;
  }
  uint64_t v8 = (a2 - 1) << v7;
  unint64_t v9 = *((void *)this + 17) + v8;
  unint64_t v15 = *((void *)this + 18) + v8;
  unint64_t v16 = v9;
  int v10 = (void *)(*((void *)this + 12) + 8);
  unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v10, v6, &v16, 0, 0);
  unint64_t v12 = *((void *)this + 19) + llvm::DataExtractor::getUnsigned(v10, &v15, v6, 0);
  uint64_t v13 = (__n128 *)*((void *)this + 12);
  __n128 result = v13[3];
  *a3 = result;
  a3[1].n128_u64[0] = v13[4].n128_u64[0];
  a3[1].n128_u32[2] = a2;
  a3[2].n128_u64[0] = RelocatedValue;
  a3[2].n128_u64[1] = v12;
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::getBucketArrayEntry(llvm::DWARFDebugNames::NameIndex *this, int a2)
{
  unint64_t v3 = *((void *)this + 15) + (4 * a2);
  return sub_1CD8337FC(*((void *)this + 12) + 8, &v3, 0);
}

uint64_t llvm::DWARFDebugNames::NameIndex::getHashArrayEntry(llvm::DWARFDebugNames::NameIndex *this, int a2)
{
  unint64_t v3 = *((void *)this + 16) + (4 * a2 - 4);
  return sub_1CD8337FC(*((void *)this + 12) + 8, &v3, 0);
}

BOOL llvm::DWARFDebugNames::NameIndex::dumpEntry(llvm::DWARFDebugNames::NameIndex *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v22 = *a3;
  llvm::DWARFDebugNames::NameIndex::getEntry(a1, a3, (uint64_t)v25);
  char v4 = v26;
  if (v26)
  {
    unint64_t v5 = (char *)v25[0];
    v25[0] = 0;
    uint64_t v21 = a2;
    if (v5)
    {
      if ((*(unsigned int (**)(char *, void *))(*(void *)v5 + 48))(v5, &llvm::ErrorList::ID))
      {
        int v6 = (uint64_t *)*((void *)v5 + 1);
        char v7 = (uint64_t *)*((void *)v5 + 2);
        if (v6 == v7)
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = 0;
          do
          {
            __p[0] = v8;
            uint64_t v9 = *v6;
            *int v6 = 0;
            uint64_t v24 = v9;
            sub_1CC673DE4(&v19, &v24, (uint64_t)&v21);
            sub_1CD451630((char **)__p, &v19, v15);
            uint64_t v8 = v15[0];
            v15[0] = 0;
            if (v19) {
              (*(void (**)(char *))(*(void *)v19 + 8))(v19);
            }
            uint64_t v10 = v24;
            uint64_t v24 = 0;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
            if (__p[0]) {
              (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
            }
            ++v6;
          }
          while (v6 != v7);
        }
        int v23 = v8;
        unint64_t v11 = *(void (**)(void))(*(void *)v5 + 8);
        goto LABEL_19;
      }
      v15[0] = v5;
      sub_1CC673DE4(&v23, v15, (uint64_t)&v21);
      if (v15[0])
      {
        unint64_t v11 = *(void (**)(void))(*(void *)v15[0] + 8);
LABEL_19:
        v11();
      }
    }
    else
    {
      int v23 = 0;
    }
  }
  else
  {
    v15[0] = "Entry @ 0x";
    v15[2] = (char *)&v22;
    __int16 v16 = 3587;
    llvm::Twine::str((llvm::Twine *)v15, __p);
    if (v18 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if (v18 >= 0) {
      unsigned int v14 = (void *)(v18 & 0x7F);
    }
    else {
      unsigned int v14 = __p[1];
    }
    int v19 = (char *)&unk_1F2618938;
    uint64_t v20 = a2;
    (*(void (**)(uint64_t, void **, void *))(*(void *)a2 + 208))(a2, v13, v14);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    llvm::DWARFDebugNames::Entry::dump((uint64_t)v25, a2);
    int v19 = (char *)&unk_1F2618938;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 216))(v20);
    }
  }
  sub_1CC673D54(v25);
  return (v4 & 1) == 0;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpName(llvm::DWARFDebugNames::NameIndex *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a3 + 24);
  v22[0] = (unint64_t)"Name ";
  uint64_t v23 = v8;
  __int16 v24 = 2051;
  llvm::Twine::str((llvm::Twine *)v22, __p);
  if (v26 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if (v26 >= 0) {
    uint64_t v10 = (void *)(v26 & 0x7F);
  }
  else {
    uint64_t v10 = __p[1];
  }
  uint64_t v27 = &unk_1F2618938;
  uint64_t v28 = a2;
  (*(void (**)(uint64_t, void **, void *))(*(void *)a2 + 208))(a2, v9, v10);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if ((a4 & 0xFF00000000) != 0) {
    (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Hash", 4, a4);
  }
  unint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  uint64_t v12 = *(void *)(a3 + 32);
  v22[0] = (unint64_t)&unk_1F25FF808;
  v22[1] = (unint64_t)"String: 0x%08llx";
  uint64_t v23 = v12;
  llvm::raw_ostream::operator<<(v11, (uint64_t)v22);
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
  unsigned int v14 = v13;
  unint64_t v15 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v15 > 1uLL)
  {
    _WORD *v15 = 8736;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v13, " \"", 2uLL);
  }
  v22[0] = *(void *)(a3 + 32);
  CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)a3, v22, 0);
  int v17 = (_WORD *)*((void *)v14 + 4);
  if (CStrRef)
  {
    char v18 = CStrRef;
    size_t v19 = strlen(CStrRef);
    size_t v20 = v19;
    if (v19 <= *((void *)v14 + 3) - (void)v17)
    {
      if (v19)
      {
        memcpy(v17, v18, v19);
        int v17 = (_WORD *)(*((void *)v14 + 4) + v20);
        *((void *)v14 + 4) = v17;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, v18, v19);
      int v17 = (_WORD *)*((void *)v14 + 4);
    }
  }
  if (*((void *)v14 + 3) - (void)v17 > 1uLL)
  {
    *int v17 = 2594;
    *((void *)v14 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v14, "\"\n", 2uLL);
  }
  v22[0] = *(void *)(a3 + 40);
  while (llvm::DWARFDebugNames::NameIndex::dumpEntry(a1, a2, v22))
    ;
  uint64_t v27 = &unk_1F2618938;
  uint64_t result = v28;
  if (v28) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v28 + 216))(v28);
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpCUs(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = &unk_1F2618960;
  uint64_t v14 = a2;
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 232))(a2, "Compilation Unit offsets", 24);
  if (*(_DWORD *)(a1 + 36))
  {
    unsigned int v4 = 0;
    do
    {
      unint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
      if (*(unsigned char *)(a1 + 32)) {
        int v6 = 8;
      }
      else {
        int v6 = 4;
      }
      if (*(unsigned char *)(a1 + 32)) {
        char v7 = 3;
      }
      else {
        char v7 = 2;
      }
      v10[0] = *(void *)(a1 + 112) + (v4 << v7);
      unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(void *)(a1 + 96) + 8, v6, v10, 0, 0);
      v10[0] = (unint64_t)&unk_1F2618A28;
      v10[1] = (unint64_t)"CU[%u]: 0x%08llx\n";
      unsigned int v11 = v4;
      unint64_t v12 = RelocatedValue;
      llvm::raw_ostream::operator<<(v5, (uint64_t)v10);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 36));
  }
  uint64_t v13 = &unk_1F2618960;
  uint64_t result = v14;
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 240))(v14);
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpLocalTUs(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 40))
  {
    uint64_t v3 = result;
    unint64_t v12 = &unk_1F2618960;
    uint64_t v13 = a2;
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 232))(a2, "Local Type Unit offsets", 23);
    if (*(_DWORD *)(v3 + 40))
    {
      unsigned int v4 = 0;
      do
      {
        unint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
        if (*(unsigned char *)(v3 + 32)) {
          int v6 = 8;
        }
        else {
          int v6 = 4;
        }
        if (*(unsigned char *)(v3 + 32)) {
          char v7 = 3;
        }
        else {
          char v7 = 2;
        }
        v9[0] = *(void *)(v3 + 112) + ((v4 + *(_DWORD *)(v3 + 36)) << v7);
        unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(void *)(v3 + 96) + 8, v6, v9, 0, 0);
        v9[0] = (unint64_t)&unk_1F2618A28;
        v9[1] = (unint64_t)"LocalTU[%u]: 0x%08llx\n";
        unsigned int v10 = v4;
        unint64_t v11 = RelocatedValue;
        llvm::raw_ostream::operator<<(v5, (uint64_t)v9);
        ++v4;
      }
      while (v4 < *(_DWORD *)(v3 + 40));
    }
    unint64_t v12 = &unk_1F2618960;
    uint64_t result = v13;
    if (v13) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 240))(v13);
    }
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpForeignTUs(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v3 = result;
    unint64_t v12 = &unk_1F2618960;
    uint64_t v13 = a2;
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 232))(a2, "Foreign Type Unit signatures", 28);
    if (*(_DWORD *)(v3 + 44))
    {
      int v4 = 0;
      unint64_t v5 = 0;
      do
      {
        int v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
        if (*(unsigned char *)(v3 + 32)) {
          char v7 = 3;
        }
        else {
          char v7 = 2;
        }
        v9[0] = *(void *)(v3 + 112)
              + (v4 & 0xFFFFFFF8)
              + ((*(_DWORD *)(v3 + 40) + *(_DWORD *)(v3 + 36)) << v7);
        unint64_t v8 = sub_1CD833894(*(void *)(v3 + 96) + 8, v9, 0);
        v9[0] = (unint64_t)&unk_1F2618A28;
        v9[1] = (unint64_t)"ForeignTU[%u]: 0x%016llx\n";
        int v10 = v5;
        unint64_t v11 = v8;
        llvm::raw_ostream::operator<<(v6, (uint64_t)v9);
        ++v5;
        v4 += 8;
      }
      while (v5 < *(unsigned int *)(v3 + 44));
    }
    unint64_t v12 = &unk_1F2618960;
    uint64_t result = v13;
    if (v13) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 240))(v13);
    }
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpAbbreviations(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 232))(a2, "Abbreviations", 13);
  int v4 = *(unsigned int **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)a1 + 32 * v5;
  if (*(_DWORD *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 32 * v5;
      unint64_t v8 = *(unsigned int **)a1;
      while (*v8 + 1 <= 1)
      {
        v8 += 8;
        v7 -= 32;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      unint64_t v8 = *(unsigned int **)a1;
    }
  }
  else
  {
LABEL_6:
    unint64_t v8 = (unsigned int *)v6;
  }
  uint64_t v9 = &v4[8 * v5];
LABEL_9:
  while (v8 != v9)
  {
    llvm::DWARFDebugNames::Abbrev::dump(v8, a2);
    int v10 = v8 + 8;
    unint64_t v8 = (unsigned int *)v6;
    if (v10 != (unsigned int *)v6)
    {
      unint64_t v8 = v10;
      while (*v8 + 1 <= 1)
      {
        v8 += 8;
        if (v8 == (unsigned int *)v6)
        {
          unint64_t v8 = (unsigned int *)v6;
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 240))(a2);
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpBucket(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v16.n128_u64[0] = (unint64_t)"Bucket ";
  uint64_t v17 = a3;
  __int16 v18 = 2051;
  llvm::Twine::str((llvm::Twine *)&v16, __p);
  if (v20 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v20 >= 0) {
    uint64_t v7 = (void *)(v20 & 0x7F);
  }
  else {
    uint64_t v7 = __p[1];
  }
  uint64_t v21 = &unk_1F2618960;
  uint64_t v22 = a2;
  (*(void (**)(uint64_t, void **, void *))(*(void *)a2 + 232))(a2, v6, v7);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  v16.n128_u64[0] = *(void *)(a1 + 120) + 4 * a3;
  unsigned __int32 v8 = sub_1CD8337FC(*(void *)(a1 + 96) + 8, v16.n128_u64, 0);
  if (!v8)
  {
    int v10 = "EMPTY";
    uint64_t v11 = 5;
    goto LABEL_13;
  }
  unsigned __int32 v9 = v8;
  if (v8 > *(_DWORD *)(a1 + 52))
  {
    int v10 = "Name index is invalid";
    uint64_t v11 = 21;
LABEL_13:
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 184))(a2, v10, v11);
    goto LABEL_17;
  }
  unsigned int v12 = 4 * v8 - 4;
  do
  {
    v16.n128_u64[0] = *(void *)(a1 + 128) + v12;
    unsigned int v13 = sub_1CD8337FC(*(void *)(a1 + 96) + 8, v16.n128_u64, 0);
    if (v13 % *(_DWORD *)(a1 + 48) != a3) {
      break;
    }
    unsigned int v14 = v13;
    llvm::DWARFDebugNames::NameIndex::getNameTableEntry((llvm::DWARFDebugNames::NameIndex *)a1, v9, &v16);
    llvm::DWARFDebugNames::NameIndex::dumpName((llvm::DWARFDebugNames::NameIndex *)a1, a2, (uint64_t)&v16, v14 | 0x100000000);
    ++v9;
    v12 += 4;
  }
  while (v9 <= *(_DWORD *)(a1 + 52));
LABEL_17:
  uint64_t v21 = &unk_1F2618960;
  uint64_t result = v22;
  if (v22) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 240))(v22);
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::NameIndex::dump(llvm::DWARFDebugNames::NameIndex *a1, uint64_t a2)
{
  v12.n128_u64[0] = (unint64_t)"Name Index @ 0x";
  unsigned int v13 = (_DWORD *)((char *)a1 + 104);
  __int16 v14 = 3587;
  llvm::Twine::str((llvm::Twine *)&v12, __p);
  if (v16 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if (v16 >= 0) {
    uint64_t v5 = (void *)(v16 & 0x7F);
  }
  else {
    uint64_t v5 = __p[1];
  }
  uint64_t v17 = &unk_1F2618938;
  uint64_t v18 = a2;
  (*(void (**)(uint64_t, void **, void *))(*(void *)a2 + 208))(a2, v4, v5);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  llvm::DWARFDebugNames::Header::dump((uint64_t)a1 + 24, a2);
  llvm::DWARFDebugNames::NameIndex::dumpCUs((uint64_t)a1, a2);
  llvm::DWARFDebugNames::NameIndex::dumpLocalTUs((uint64_t)a1, a2);
  llvm::DWARFDebugNames::NameIndex::dumpForeignTUs((uint64_t)a1, a2);
  llvm::DWARFDebugNames::NameIndex::dumpAbbreviations((uint64_t)a1, a2);
  if (*((_DWORD *)a1 + 12))
  {
    unsigned int v6 = 0;
    do
      llvm::DWARFDebugNames::NameIndex::dumpBucket((uint64_t)a1, a2, v6++);
    while (v6 < *((_DWORD *)a1 + 12));
  }
  else
  {
    uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
    unsigned __int32 v8 = (void *)*((void *)v7 + 4);
    if (*((void *)v7 + 3) - (void)v8 > 0x16uLL)
    {
      qmemcpy(v8, "Hash table not present\n", 23);
      *((void *)v7 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v7, "Hash table not present\n", 0x17uLL);
    }
    int v9 = *((_DWORD *)a1 + 13);
    if (v9)
    {
      int v10 = 0;
      do
      {
        llvm::DWARFDebugNames::NameIndex::getNameTableEntry(a1, ++v10, &v12);
        llvm::DWARFDebugNames::NameIndex::dumpName(a1, a2, (uint64_t)&v12, 0);
      }
      while (v9 != v10);
    }
  }
  uint64_t v17 = &unk_1F2618938;
  uint64_t result = v18;
  if (v18) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 216))(v18);
  }
  return result;
}

uint64_t *llvm::DWARFDebugNames::extract@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (uint64_t)this;
  unint64_t v4 = 0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = (uint64_t)(this + 9);
  while (*(void *)(v2 + 16) > v4)
  {
    v24[0] = 0;
    v24[1] = 0;
    int v25 = 0;
    uint64_t v28 = v30;
    long long v29 = xmmword_1CD96EEC0;
    v30[1] = v2;
    unint64_t v31 = v4;
    llvm::DWARFDebugNames::NameIndex::extract((llvm::DWARFDebugNames::NameIndex *)v24, a2);
    uint64_t v5 = *a2;
    if (!*a2)
    {
      unint64_t v6 = v31;
      if (v27) {
        uint64_t v7 = 12;
      }
      else {
        uint64_t v7 = 4;
      }
      uint64_t v8 = v26;
      unint64_t v9 = sub_1CC673F30(v23, (unint64_t)v24, 1);
      uint64_t v10 = *(void *)(v2 + 72);
      unsigned int v11 = *(_DWORD *)(v2 + 80);
      uint64_t v12 = v10 + 160 * v11;
      *(_DWORD *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)uint64_t v12 = *(void *)v9;
      *(void *)unint64_t v9 = 0;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = 0;
      int v13 = *(_DWORD *)(v12 + 12);
      *(_DWORD *)(v12 + 12) = *(_DWORD *)(v9 + 12);
      *(_DWORD *)(v9 + 12) = v13;
      int v14 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = v14;
      uint64_t v15 = *(void *)(v9 + 56);
      long long v16 = *(_OWORD *)(v9 + 40);
      long long v17 = *(_OWORD *)(v9 + 24);
      *(void *)(v12 + 64) = v12 + 88;
      uint64_t v18 = v12 + 64;
      *(_OWORD *)(v18 - 40) = v17;
      *(_OWORD *)(v18 - 24) = v16;
      *(void *)(v18 - 8) = v15;
      *(_OWORD *)(v18 + 8) = xmmword_1CD96EEC0;
      if (*(void *)(v9 + 72)) {
        sub_1CC1B8518(v18, v9 + 64);
      }
      unint64_t v4 = v8 + v6 + v7;
      size_t v19 = (_OWORD *)(v10 + 160 * v11);
      long long v20 = *(_OWORD *)(v9 + 96);
      long long v21 = *(_OWORD *)(v9 + 112);
      long long v22 = *(_OWORD *)(v9 + 144);
      v19[8] = *(_OWORD *)(v9 + 128);
      v19[9] = v22;
      v19[6] = v20;
      v19[7] = v21;
      ++*(_DWORD *)(v2 + 80);
    }
    if (v28 != v30) {
      free(v28);
    }
    this = sub_1CC673924(v24);
    if (v5) {
      return this;
    }
  }
  *a2 = 0;
  return this;
}

void llvm::DWARFDebugNames::NameIndex::equal_range(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  llvm::DWARFDebugNames::ValueIterator::ValueIterator((uint64_t)v12, a1, a2, a3);
  uint64_t v11 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  *(_OWORD *)unint64_t v6 = 0u;
  memset(v7, 0, sizeof(v7));
  long long v5 = 0u;
  sub_1CC672408(v12, (uint64_t *)&v5, a4);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (BYTE8(v8))
  {
    v6[0] = &unk_1F2618988;
    if (v6[1] != (char *)v7 + 8) {
      free(v6[1]);
    }
    BYTE8(v8) = 0;
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14[160])
  {
    unint64_t v12[2] = (uint64_t)&unk_1F2618988;
    if (v13 != v14) {
      free(v13);
    }
  }
}

void sub_1CC672408(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = *a1;
  char v27 = *((unsigned char *)a1 + 8);
  LOBYTE(v28) = 0;
  char v31 = 0;
  if (*((unsigned char *)a1 + 200)) {
    sub_1CC6741A0((uint64_t)&v28, (uint64_t)(a1 + 2));
  }
  uint64_t v32 = a1[26];
  long long __p = *(_OWORD *)(a1 + 27);
  a1[27] = 0;
  a1[28] = 0;
  uint64_t v6 = a1[29];
  uint64_t v7 = a1[30];
  a1[29] = 0;
  uint64_t v34 = v6;
  uint64_t v35 = v7;
  uint64_t v16 = *a2;
  char v17 = *((unsigned char *)a2 + 8);
  LOBYTE(v18) = 0;
  char v21 = 0;
  if (*((unsigned char *)a2 + 200)) {
    sub_1CC6741A0((uint64_t)&v18, (uint64_t)(a2 + 2));
  }
  uint64_t v22 = a2[26];
  long long v8 = *(_OWORD *)(a2 + 27);
  a2[27] = 0;
  a2[28] = 0;
  uint64_t v9 = a2[29];
  uint64_t v10 = a2[30];
  a2[29] = 0;
  long long v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  *(void *)a3 = v26;
  *(unsigned char *)(a3 + 8) = v27;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 200) = 0;
  if (v31) {
    sub_1CC6741A0(a3 + 16, (uint64_t)&v28);
  }
  uint64_t v11 = v35;
  *(void *)(a3 + 208) = v32;
  long long v12 = __p;
  uint64_t v13 = v34;
  long long __p = 0uLL;
  uint64_t v34 = 0;
  *(_OWORD *)(a3 + 216) = v12;
  *(void *)(a3 + 232) = v13;
  *(void *)(a3 + 240) = v11;
  *(void *)(a3 + 248) = v16;
  *(unsigned char *)(a3 + 256) = v17;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 448) = 0;
  if (v21) {
    sub_1CC6741A0(a3 + 264, (uint64_t)&v18);
  }
  uint64_t v14 = v25;
  *(void *)(a3 + 456) = v22;
  *(_OWORD *)(a3 + 464) = v23;
  uint64_t v15 = v24;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  *(void *)(a3 + 480) = v15;
  *(void *)(a3 + 488) = v14;
  if (v21)
  {
    uint64_t v18 = &unk_1F2618988;
    if (v19 != &v20) {
      free(v19);
    }
    char v21 = 0;
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  if (v31)
  {
    uint64_t v28 = &unk_1F2618988;
    if (v29 != &v30) {
      free(v29);
    }
  }
}

unint64_t llvm::DWARFDebugNames::ValueIterator::findEntryOffsetInCurrentIndex(llvm::DWARFDebugNames::ValueIterator *this)
{
  uint64_t v2 = *(llvm::DWARFDebugNames::NameIndex **)this;
  if (*(_DWORD *)(*(void *)this + 48))
  {
    if (*((unsigned char *)this + 244))
    {
      unsigned int v18 = *((_DWORD *)this + 60);
    }
    else
    {
      char v13 = *((unsigned char *)this + 239);
      int v14 = v13;
      if (v13 >= 0) {
        uint64_t v15 = (unsigned int *)((char *)this + 216);
      }
      else {
        uint64_t v15 = (unsigned int *)*((void *)this + 27);
      }
      uint64_t v16 = (char *)(v13 & 0x7F);
      if (v14 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = (char *)*((void *)this + 28);
      }
      unsigned int v18 = llvm::caseFoldingDjbHash(v15, v17, 5381);
      int v19 = *((unsigned __int8 *)this + 244);
      *((_DWORD *)this + 60) = v18;
      if (!v19) {
        *((unsigned char *)this + 244) = 1;
      }
    }
    int v20 = v18 % *((_DWORD *)v2 + 12);
    char v21 = *(llvm::DWARFDebugNames::NameIndex **)this;
    v36[0].n128_u64[0] = *(void *)(*(void *)this + 120) + (4 * v20);
    unsigned __int32 v22 = sub_1CD8337FC(*((void *)v21 + 12) + 8, v36[0].n128_u64, 0);
    if (v22)
    {
      unsigned __int32 v23 = v22;
      if (v22 <= *((_DWORD *)v2 + 13))
      {
        for (unsigned int i = 4 * v22 - 4; ; i += 4)
        {
          uint64_t v28 = *(llvm::DWARFDebugNames::NameIndex **)this;
          v36[0].n128_u64[0] = *(void *)(*(void *)this + 128) + i;
          if (sub_1CD8337FC(*((void *)v28 + 12) + 8, v36[0].n128_u64, 0) % *((_DWORD *)v2 + 12) != v20) {
            break;
          }
          llvm::DWARFDebugNames::NameIndex::getNameTableEntry(*(llvm::DWARFDebugNames::NameIndex **)this, v23, v36);
          unint64_t v39 = v37;
          CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)v36, &v39, 0);
          size_t v30 = strlen(CStrRef);
          size_t v31 = *((unsigned __int8 *)this + 239);
          if ((v31 & 0x80u) == 0) {
            size_t v32 = v31 & 0x7F;
          }
          else {
            size_t v32 = *((void *)this + 28);
          }
          if (v30 == v32)
          {
            size_t v33 = v30;
            if ((v31 & 0x80) != 0)
            {
              if (v30 == -1) {
LABEL_53:
              }
                abort();
              uint64_t v34 = (char *)*((void *)this + 27);
              size_t v31 = *((void *)this + 28);
            }
            else
            {
              uint64_t v34 = (char *)this + 216;
              if (v33 == -1) {
                goto LABEL_53;
              }
            }
            size_t v35 = v31 >= v33 ? v33 : v31;
            if (!memcmp(v34, CStrRef, v35) && v31 == v33) {
              goto LABEL_52;
            }
          }
          unsigned __int8 v24 = 0;
          unint64_t v25 = 0;
          if (++v23 > *((_DWORD *)v2 + 13)) {
            return v25 | v24;
          }
        }
      }
    }
    goto LABEL_33;
  }
  int v3 = *((_DWORD *)v2 + 13);
  if (!v3)
  {
LABEL_33:
    unsigned __int8 v24 = 0;
    unint64_t v25 = 0;
    return v25 | v24;
  }
  int v4 = 0;
  while (1)
  {
    llvm::DWARFDebugNames::NameIndex::getNameTableEntry(v2, ++v4, v36);
    unint64_t v39 = v37;
    long long v5 = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)v36, &v39, 0);
    size_t v6 = strlen(v5);
    size_t v7 = *((unsigned __int8 *)this + 239);
    size_t v8 = (v7 & 0x80u) == 0 ? v7 & 0x7F : *((void *)this + 28);
    if (v6 == v8)
    {
      size_t v9 = v6;
      if ((v7 & 0x80) != 0)
      {
        if (v6 == -1) {
          goto LABEL_53;
        }
        uint64_t v10 = (char *)*((void *)this + 27);
        size_t v7 = *((void *)this + 28);
      }
      else
      {
        uint64_t v10 = (char *)this + 216;
        if (v9 == -1) {
          goto LABEL_53;
        }
      }
      size_t v11 = v7 >= v9 ? v9 : v7;
      if (!memcmp(v10, v5, v11) && v7 == v9) {
        break;
      }
    }
    if (v3 == v4) {
      goto LABEL_33;
    }
  }
LABEL_52:
  unsigned __int8 v24 = v38;
  unint64_t v25 = v38 & 0xFFFFFFFFFFFFFF00;
  return v25 | v24;
}

BOOL llvm::DWARFDebugNames::ValueIterator::getEntryAtCurrentOffset(llvm::DWARFDebugNames::ValueIterator *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  llvm::DWARFDebugNames::NameIndex::getEntry(*(llvm::DWARFDebugNames::NameIndex **)this, (unint64_t *)this + 26, (uint64_t)v5);
  char v2 = v6;
  if (v6)
  {
    int v4 = (void *)v5[0];
    v5[0] = 0;
    sub_1CD4515D0(&v4);
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
  else
  {
    sub_1CC674268((uint64_t)this + 16, (uint64_t)v5);
  }
  sub_1CC673D54(v5);
  return (v2 & 1) == 0;
}

BOOL llvm::DWARFDebugNames::ValueIterator::findInCurrentIndex(llvm::DWARFDebugNames::ValueIterator *this)
{
  unint64_t EntryOffsetInCurrentIndex = llvm::DWARFDebugNames::ValueIterator::findEntryOffsetInCurrentIndex(this);
  if (!v3) {
    return 0;
  }
  *((void *)this + 26) = EntryOffsetInCurrentIndex;

  return llvm::DWARFDebugNames::ValueIterator::getEntryAtCurrentOffset(this);
}

void llvm::DWARFDebugNames::ValueIterator::searchFromStartOfCurrentIndex(llvm::DWARFDebugNames::ValueIterator *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)(*(void *)this + 96) + 72)
     + 160 * *(unsigned int *)(*(void *)(*(void *)this + 96) + 80);
  while (v2 != v3)
  {
    unint64_t EntryOffsetInCurrentIndex = llvm::DWARFDebugNames::ValueIterator::findEntryOffsetInCurrentIndex(this);
    if (v5)
    {
      *((void *)this + 26) = EntryOffsetInCurrentIndex;
      if (llvm::DWARFDebugNames::ValueIterator::getEntryAtCurrentOffset(this)) {
        return;
      }
    }
    uint64_t v2 = *(void *)this + 160;
    *(void *)this = v2;
  }
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  long long v9 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  memset(v8, 0, sizeof(v8));
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  sub_1CC67398C((uint64_t)this + 16, (uint64_t)v7);
  *((void *)this + 26) = *(void *)&v10[0];
  char v6 = (void **)((char *)this + 216);
  if (*((char *)this + 239) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)char v6 = *(_OWORD *)((char *)v10 + 8);
  *((void *)this + 29) = *((void *)&v10[1] + 1);
  HIBYTE(v10[1]) = 0;
  BYTE8(v10[0]) = 0;
  *((void *)this + 30) = v11;
  if (BYTE8(v9))
  {
    v7[0] = &unk_1F2618988;
    if (v7[1] != (char *)v8 + 8) {
      free(v7[1]);
    }
  }
}

void llvm::DWARFDebugNames::ValueIterator::next(llvm::DWARFDebugNames::ValueIterator *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!llvm::DWARFDebugNames::ValueIterator::getEntryAtCurrentOffset(this))
  {
    if (*((unsigned char *)this + 8)
      || *(void *)this == *(void *)(*(void *)(*(void *)this + 96) + 72)
                          + 160 * *(unsigned int *)(*(void *)(*(void *)this + 96) + 80)
                          - 160)
    {
      uint64_t v7 = 0;
      memset(v6, 0, sizeof(v6));
      long long v5 = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      memset(v4, 0, sizeof(v4));
      *(void *)this = 0;
      *((unsigned char *)this + 8) = 0;
      sub_1CC67398C((uint64_t)this + 16, (uint64_t)v3);
      *((void *)this + 26) = *(void *)&v6[0];
      uint64_t v2 = (void **)((char *)this + 216);
      if (*((char *)this + 239) < 0) {
        operator delete(*v2);
      }
      *(_OWORD *)uint64_t v2 = *(_OWORD *)((char *)v6 + 8);
      *((void *)this + 29) = *((void *)&v6[1] + 1);
      HIBYTE(v6[1]) = 0;
      BYTE8(v6[0]) = 0;
      *((void *)this + 30) = v7;
      if (BYTE8(v5))
      {
        v3[0] = &unk_1F2618988;
        if (v3[1] != (char *)v4 + 8) {
          free(v3[1]);
        }
      }
    }
    else
    {
      *(void *)this += 160;
      llvm::DWARFDebugNames::ValueIterator::searchFromStartOfCurrentIndex(this);
    }
  }
}

uint64_t llvm::DWARFDebugNames::ValueIterator::ValueIterator(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  *(void *)a1 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a4 >= 0x17)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *(void *)(a1 + 224) = a4;
    *(void *)(a1 + 232) = v9 | 0x8000000000000000;
    *(void *)(a1 + 216) = v7;
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 216);
    *(unsigned char *)(a1 + 239) = a4;
    if (!a4) {
      goto LABEL_9;
    }
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((unsigned char *)v7 + a4) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  llvm::DWARFDebugNames::ValueIterator::searchFromStartOfCurrentIndex((llvm::DWARFDebugNames::ValueIterator *)a1);
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(void *)a1 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a4 >= 0x17)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *(void *)(a1 + 224) = a4;
    *(void *)(a1 + 232) = v9 | 0x8000000000000000;
    *(void *)(a1 + 216) = v7;
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 216);
    *(unsigned char *)(a1 + 239) = a4;
    if (!a4) {
      goto LABEL_9;
    }
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((unsigned char *)v7 + a4) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  llvm::DWARFDebugNames::ValueIterator::searchFromStartOfCurrentIndex((llvm::DWARFDebugNames::ValueIterator *)a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t EntryOffsetInCurrentIndex;
  char v13;
  void *v15[2];
  _OWORD v16[10];
  long long v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  int v20 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 16) = 0;
  int v4 = a1 + 16;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v8 = a1 + 216;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 224) = a4;
    *(void *)(a1 + 232) = v11 | 0x8000000000000000;
    *(void *)(a1 + 216) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 239) = a4;
    uint64_t v9 = (void *)(a1 + 216);
    if (!a4) {
      goto LABEL_9;
    }
  }
  memmove(v9, a3, a4);
LABEL_9:
  *((unsigned char *)v9 + a4) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  unint64_t EntryOffsetInCurrentIndex = llvm::DWARFDebugNames::ValueIterator::findEntryOffsetInCurrentIndex((llvm::DWARFDebugNames::ValueIterator *)a1);
  if (!v13
    || (*(void *)(a1 + 208) = EntryOffsetInCurrentIndex,
        !llvm::DWARFDebugNames::ValueIterator::getEntryAtCurrentOffset((llvm::DWARFDebugNames::ValueIterator *)a1)))
  {
    int v19 = 0;
    memset(v18, 0, sizeof(v18));
    char v17 = 0u;
    *(_OWORD *)uint64_t v15 = 0u;
    memset(v16, 0, sizeof(v16));
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    sub_1CC67398C(v4, (uint64_t)v15);
    *(void *)(a1 + 208) = *(void *)&v18[0];
    if (*(char *)(a1 + 239) < 0) {
      operator delete(*(void **)v8);
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)((char *)v18 + 8);
    *(void *)(v8 + 16) = *((void *)&v18[1] + 1);
    HIBYTE(v18[1]) = 0;
    BYTE8(v18[0]) = 0;
    *(void *)(a1 + 240) = v19;
    if (BYTE8(v17))
    {
      v15[0] = &unk_1F2618988;
      if (v15[1] != (char *)v16 + 8) {
        free(v15[1]);
      }
    }
  }
  return a1;
}

void llvm::DWARFDebugNames::equal_range(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 80))
  {
    uint64_t v19 = *(void *)(a1 + 72);
    char v20 = 0;
    LOBYTE(v21) = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a3 >= 0x17)
    {
      uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v10 = a3 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v7 = operator new(v10 + 1);
      v25[1] = (void *)a3;
      unint64_t v26 = v11 | 0x8000000000000000;
      v25[0] = v7;
    }
    else
    {
      uint64_t v7 = v25;
      HIBYTE(v26) = a3;
      if (!a3)
      {
LABEL_20:
        *((unsigned char *)v7 + a3) = 0;
        char v27 = 0;
        char v28 = 0;
        llvm::DWARFDebugNames::ValueIterator::searchFromStartOfCurrentIndex((llvm::DWARFDebugNames::ValueIterator *)&v19);
        uint64_t v18 = 0;
        *(_OWORD *)uint64_t v16 = 0u;
        long long v17 = 0u;
        long long v15 = 0u;
        *(_OWORD *)char v13 = 0u;
        memset(v14, 0, sizeof(v14));
        long long v12 = 0u;
        sub_1CC672408(&v19, (uint64_t *)&v12, a4);
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[1]);
        }
        if (BYTE8(v15))
        {
          v13[0] = &unk_1F2618988;
          if (v13[1] != (char *)v14 + 8) {
            free(v13[1]);
          }
          BYTE8(v15) = 0;
        }
        if (SHIBYTE(v26) < 0) {
          operator delete(v25[0]);
        }
        if (v23)
        {
          char v21 = &unk_1F2618988;
          uint64_t v8 = (uint64_t *)v22;
          uint64_t v9 = &v19;
LABEL_30:
          if (v8 != v9 + 5) {
            free(v8);
          }
          return;
        }
        return;
      }
    }
    memmove(v7, a2, a3);
    goto LABEL_20;
  }
  uint64_t v51 = 0;
  *(_OWORD *)char v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  long long v29 = 0u;
  *(_OWORD *)size_t v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v32 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  sub_1CC672408((uint64_t *)&v36, (uint64_t *)&v29, a4);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[1]);
  }
  if (BYTE8(v32))
  {
    v30[0] = &unk_1F2618988;
    if (v30[1] != (char *)v31 + 8) {
      free(v30[1]);
    }
    BYTE8(v32) = 0;
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[1]);
  }
  if (BYTE8(v48))
  {
    *(void *)&long long v37 = &unk_1F2618988;
    uint64_t v8 = (uint64_t *)*((void *)&v37 + 1);
    uint64_t v9 = (uint64_t *)&v36;
    goto LABEL_30;
  }
}

uint64_t llvm::DWARFDebugNames::getCUNameIndex(llvm::DWARFDebugNames *this, uint64_t a2)
{
  uint64_t v14 = a2;
  uint64_t v2 = (uint64_t *)((char *)this + 88);
  if (!*((_DWORD *)this + 24))
  {
    unsigned int v3 = *((_DWORD *)this + 20);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 9);
      uint64_t v5 = v4 + 160 * v3;
      do
      {
        if (*(_DWORD *)(v4 + 36))
        {
          unsigned int v6 = 0;
          do
          {
            if (*(unsigned char *)(v4 + 32)) {
              int v7 = 8;
            }
            else {
              int v7 = 4;
            }
            if (*(unsigned char *)(v4 + 32)) {
              char v8 = 3;
            }
            else {
              char v8 = 2;
            }
            v11[0] = *(void *)(v4 + 112) + (v6 << v8);
            unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(void *)(v4 + 96) + 8, v7, v11, 0, 0);
            uint64_t v12 = v4;
            unint64_t v13 = RelocatedValue;
            sub_1CC6734C4((uint64_t)v2, (uint64_t *)&v13, &v12, (uint64_t)v11);
            ++v6;
          }
          while (v6 < *(_DWORD *)(v4 + 36));
        }
        v4 += 160;
      }
      while (v4 != v5);
    }
  }
  return sub_1CC6735B4(v2, &v14);
}

void *sub_1CC6734C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    uint64_t v14 = 0;
LABEL_5:
    uint64_t result = sub_1CC674324(a1, (uint64_t)a2, a2, v14);
    uint64_t v15 = *a3;
    *uint64_t result = *a2;
    result[1] = v15;
    uint64_t v9 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    char v13 = 1;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = (37 * *a2) & (v8 - 1);
  uint64_t result = (void *)(*(void *)a1 + 16 * v10);
  uint64_t v12 = *result;
  if (*a2 != *result)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v12 != -1)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v12 == -2;
      }
      if (v18) {
        uint64_t v16 = result;
      }
      unsigned int v19 = v10 + v17++;
      unsigned int v10 = v19 & (v8 - 1);
      uint64_t result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a2 == *result) {
        goto LABEL_3;
      }
    }
    if (v16) {
      uint64_t v14 = v16;
    }
    else {
      uint64_t v14 = result;
    }
    goto LABEL_5;
  }
LABEL_3:
  char v13 = 0;
LABEL_6:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1CC6735B4(uint64_t *a1, void *a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (37 * *a2) & (v2 - 1);
    uint64_t v6 = *(void *)(*a1 + 16 * ((37 * *a2) & v4));
    if (*a2 == v6) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v8 = 1;
    while (v6 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (*a2 == v6) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

void *sub_1CC673624(void *a1)
{
  *a1 = &unk_1F2618888;
  int v2 = (void *)a1[13];
  if (v2 != a1 + 15) {
    free(v2);
  }
  return a1;
}

void sub_1CC673678(void *a1)
{
  *a1 = &unk_1F2618888;
  int v2 = (void *)a1[13];
  if (v2 != a1 + 15) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6736EC(uint64_t a1)
{
  *(void *)a1 = &unk_1F26188B8;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 88), 8);
  sub_1CC673A8C((char **)(a1 + 72));
  return a1;
}

void sub_1CC673740(uint64_t a1)
{
  *(void *)a1 = &unk_1F26188B8;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 88), 8);
  sub_1CC673A8C((char **)(a1 + 72));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC6737B4(void *a1)
{
  *a1 = &unk_1F2618938;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 216))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC673840(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
}

void sub_1CC67386C(void *a1)
{
  *a1 = &unk_1F2618960;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 240))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC6738F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
}

uint64_t *sub_1CC673924(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 32 * v2;
    uint64_t v5 = (void *)(v3 + 16);
    do
    {
      uint64_t v6 = (void *)*(v5 - 1);
      if (v6)
      {
        void *v5 = v6;
        operator delete(v6);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CC67398C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 184))
  {
    if (*(unsigned char *)(a1 + 184))
    {
      sub_1CD5E235C(a1 + 8, a2 + 8);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    }
    else
    {
      *(void *)a1 = &unk_1F2618988;
      *(void *)(a1 + 8) = a1 + 24;
      uint64_t v4 = a1 + 8;
      *(void *)(a1 + 16) = 0x300000000;
      if (*(_DWORD *)(a2 + 16)) {
        sub_1CD5E235C(v4, a2 + 8);
      }
      *(void *)a1 = &unk_1F2618838;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(unsigned char *)(a1 + 184) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 184))
  {
    *(void *)a1 = &unk_1F2618988;
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5 != (void *)(a1 + 24)) {
      free(v5);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
  return a1;
}

char **sub_1CC673A8C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 160 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 96];
      if (&v2[v4 - 72] != v5) {
        free(v5);
      }
      sub_1CC673924((uint64_t *)&v2[v4 - 160]);
      v4 -= 160;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t *sub_1CC673B0C(uint64_t *a1)
{
  if (a1[4])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    uint64_t v2 = (void *)a1[1];
    if (v2)
    {
      a1[2] = (uint64_t)v2;
      operator delete(v2);
    }
  }
  return a1;
}

char *sub_1CC673B7C(char **a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = &result[32 * v10];
      do
      {
        *(_DWORD *)uint64_t result = 0;
        *((_WORD *)result + 2) = 0;
        *((void *)result + 2) = 0;
        *((void *)result + 3) = 0;
        *((void *)result + 1) = 0;
        result += 32;
      }
      while (result != v11);
    }
    if (v3)
    {
      uint64_t v12 = v4;
      char v13 = &v4[8 * v3];
      do
      {
        int v14 = *v12;
        if ((*v12 + 1) >= 2)
        {
          int v15 = *((_DWORD *)a1 + 4);
          if (v15)
          {
            unsigned int v16 = v15 - 1;
            uint64_t v17 = (v15 - 1) & (37 * v14);
            uint64_t v18 = (uint64_t)&(*a1)[32 * v17];
            int v19 = *(_DWORD *)v18;
            if (v14 != *(_DWORD *)v18)
            {
              uint64_t v20 = 0;
              int v21 = 1;
              while (v19)
              {
                if (v20) {
                  BOOL v22 = 0;
                }
                else {
                  BOOL v22 = v19 == -1;
                }
                if (v22) {
                  uint64_t v20 = v18;
                }
                int v23 = v17 + v21++;
                uint64_t v17 = v23 & v16;
                uint64_t v18 = (uint64_t)&(*a1)[32 * v17];
                int v19 = *(_DWORD *)v18;
                if (v14 == *(_DWORD *)v18) {
                  goto LABEL_23;
                }
              }
              if (v20) {
                uint64_t v18 = v20;
              }
            }
          }
          else
          {
            uint64_t v18 = 0;
          }
LABEL_23:
          int v24 = *v12;
          *(_WORD *)(v18 + 4) = *((_WORD *)v12 + 2);
          *(_DWORD *)uint64_t v18 = v24;
          sub_1CD46D2D8(v18 + 8, (__n128 *)(v12 + 2));
          ++*((_DWORD *)a1 + 2);
        }
        unint64_t v25 = (void *)*((void *)v12 + 1);
        if (v25)
        {
          *((void *)v12 + 2) = v25;
          operator delete(v25);
        }
        v12 += 8;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v26 = *((unsigned int *)a1 + 4);
  if (v26)
  {
    char v27 = &result[32 * v26];
    do
    {
      *(_DWORD *)uint64_t result = 0;
      *((_WORD *)result + 2) = 0;
      *((void *)result + 2) = 0;
      *((void *)result + 3) = 0;
      *((void *)result + 1) = 0;
      result += 32;
    }
    while (result != v27);
  }
  return result;
}

uint64_t *sub_1CC673D54(uint64_t *a1)
{
  if (a1[23])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *a1 = (uint64_t)&unk_1F2618988;
    uint64_t v2 = (uint64_t *)a1[1];
    if (v2 != a1 + 3) {
      free(v2);
    }
  }
  return a1;
}

uint64_t sub_1CC673DE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::DWARFDebugNames::SentinelError::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    *a1 = 0;
    if (!v7) {
      return result;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, &llvm::ErrorInfoBase::ID);
    if (!result)
    {
      *a1 = v7;
      return result;
    }
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)a3 + 248))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8);
    *a1 = 0;
  }
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v9(v7);
}

unint64_t sub_1CC673F30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 160 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      sub_1CC673F9C(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      sub_1CC673F9C(a1, v5);
    }
  }
  return a2;
}

void sub_1CC673F9C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = malloc_type_malloc(160 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CC674058(a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC674058(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)result;
    uint64_t v7 = *(void *)result + 160 * v2;
    do
    {
      uint64_t v8 = v6 + v5;
      uint64_t v9 = a2 + v5;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = *(void *)(v6 + v5);
      *(void *)uint64_t v8 = 0;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v6 + v5 + 8);
      *(_DWORD *)(v8 + 8) = 0;
      int v10 = *(_DWORD *)(a2 + v5 + 12);
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v6 + v5 + 12);
      *(_DWORD *)(v8 + 12) = v10;
      int v11 = *(_DWORD *)(a2 + v5 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v6 + v5 + 16);
      long long v12 = *(_OWORD *)(v6 + v5 + 24);
      long long v13 = *(_OWORD *)(v6 + v5 + 40);
      uint64_t v14 = *(void *)(v6 + v5 + 56);
      *(void *)(a2 + v5 + 64) = a2 + v5 + 88;
      uint64_t result = a2 + v5 + 64;
      *(_DWORD *)(v8 + 16) = v11;
      *(void *)(result - 8) = v14;
      *(_OWORD *)(result - 24) = v13;
      *(_OWORD *)(result - 40) = v12;
      *(_OWORD *)(result + 8) = xmmword_1CD96EEC0;
      if (*(void *)(v6 + v5 + 72)) {
        uint64_t result = sub_1CC1B8518(result, v8 + 64);
      }
      long long v15 = *(_OWORD *)(v8 + 96);
      long long v16 = *(_OWORD *)(v8 + 112);
      long long v17 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v9 + 128) = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v9 + 144) = v17;
      *(_OWORD *)(v9 + 96) = v15;
      *(_OWORD *)(v9 + 112) = v16;
      v5 += 160;
    }
    while (v8 + 160 != v7);
    uint64_t v18 = *(unsigned int *)(v4 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)v4;
      uint64_t v20 = 160 * v18;
      do
      {
        int v21 = *(void **)(v19 + v20 - 96);
        if ((void *)(v19 + v20 - 72) != v21) {
          free(v21);
        }
        uint64_t result = (uint64_t)sub_1CC673924((uint64_t *)(v19 + v20 - 160));
        v20 -= 160;
      }
      while (v20);
    }
  }
  return result;
}

__n128 sub_1CC6741A0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 184))
  {
    *(void *)a1 = &unk_1F2618988;
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4 != (void *)(a1 + 24)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
  *(void *)a1 = &unk_1F2618988;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x300000000;
  if (*(_DWORD *)(a2 + 16)) {
    sub_1CD5E235C(a1 + 8, a2 + 8);
  }
  *(void *)a1 = &unk_1F2618838;
  __n128 result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(unsigned char *)(a1 + 184) = 1;
  return result;
}

uint64_t sub_1CC674268(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 184))
  {
    sub_1CD5E235C(a1 + 8, a2 + 8);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  else
  {
    *(void *)a1 = &unk_1F2618988;
    *(void *)(a1 + 8) = a1 + 24;
    uint64_t v4 = a1 + 8;
    *(void *)(a1 + 16) = 0x300000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD5E235C(v4, a2 + 8);
    }
    *(void *)a1 = &unk_1F2618838;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = 1;
  }
  return a1;
}

void *sub_1CC674324(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC4EB5F0(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = (37 * *a3) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      long long v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          long long v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CC4EB5F0(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = (37 * *a3) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      long long v13 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          long long v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t llvm::DWARFContext::DWARFContext(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F2618AD0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = a1 + 256;
  *(void *)(a1 + 248) = 0x100000000;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0x1800000000;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  long long v8 = *a3;
  *(void *)(a1 + 440) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 424) = v8;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a1 + 448) = 0;
  sub_1CC66D518(a1 + 456, a4);
  sub_1CC66D518(a1 + 488, a5);
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(a1 + 520) = v9;
  return a1;
}

void llvm::DWARFContext::~DWARFContext(llvm::DWARFContext *this)
{
  *(void *)this = &unk_1F2618AD0;
  uint64_t v2 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (llvm::DWARFContext *)*((void *)this + 64);
  if (v3 == (llvm::DWARFContext *)((char *)this + 488))
  {
    (*(void (**)(char *))(*((void *)this + 61) + 32))((char *)this + 488);
  }
  else if (v3)
  {
    (*(void (**)(llvm::DWARFContext *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::DWARFContext *)*((void *)this + 60);
  if (v4 == (llvm::DWARFContext *)((char *)this + 456))
  {
    (*(void (**)(char *))(*((void *)this + 57) + 32))((char *)this + 456);
  }
  else if (v4)
  {
    (*(void (**)(llvm::DWARFContext *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v5) {
    sub_1CD521E44(v5);
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (*((_DWORD *)this + 95))
  {
    uint64_t v7 = *((unsigned int *)this + 94);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *(void *)(*((void *)this + 46) + v8);
        if (v10 != -8 && v10 != 0)
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
          if (v12) {
            std::__shared_weak_count::__release_weak(v12);
          }
          MEMORY[0x1D25D9CD0](v10, 8);
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*((void **)this + 46));
  long long v13 = (void **)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v13)
  {
    long long v42 = v13;
    sub_1CC6823F0(&v42);
    MEMORY[0x1D25D9CE0](v13, 0x20C40960023A9);
  }
  int v14 = (void **)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v14)
  {
    long long v42 = v14;
    sub_1CC6823F0(&v42);
    MEMORY[0x1D25D9CE0](v14, 0x20C40960023A9);
  }
  uint64_t v15 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v15)
  {
    sub_1CD5E3EA8(v15, *(char **)(v15 + 8));
    MEMORY[0x1D25D9CE0](v15, 0x1072C402B7D7BD7);
  }
  if (*((unsigned char *)this + 328))
  {
    MEMORY[0x1D25D9CD0](*((void *)this + 38), 8);
    *((unsigned char *)this + 328) = 0;
  }
  unsigned int v16 = (llvm::DWARFContext *)*((void *)this + 36);
  if (v16 == (llvm::DWARFContext *)((char *)this + 264))
  {
    (*(void (**)(char *))(*((void *)this + 33) + 32))((char *)this + 264);
  }
  else if (v16)
  {
    (*(void (**)(llvm::DWARFContext *))(*(void *)v16 + 40))(v16);
  }
  sub_1CC682364((char **)this + 30);
  uint64_t v17 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  unsigned int v22 = (void **)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v22)
  {
    long long v42 = v22;
    sub_1CC6823F0(&v42);
    MEMORY[0x1D25D9CE0](v22, 0x20C40960023A9);
  }
  int v23 = (void **)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v23)
  {
    long long v42 = v23;
    sub_1CC6823F0(&v42);
    MEMORY[0x1D25D9CE0](v23, 0x20C40960023A9);
  }
  uint64_t v24 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v24)
  {
    long long v42 = (void **)(v24 + 16);
    sub_1CC68FFA4(&v42);
    MEMORY[0x1D25D9CE0](v24, 0x1020C40CCA6D962);
  }
  uint64_t v25 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v25)
  {
    long long v42 = (void **)(v25 + 16);
    sub_1CC68FFA4(&v42);
    MEMORY[0x1D25D9CE0](v25, 0x1020C40CCA6D962);
  }
  uint64_t v26 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v26)
  {
    sub_1CC683D18(*(void **)(v26 + 8));
    MEMORY[0x1D25D9CE0](v26, 0x1020C4062D53EE8);
  }
  uint64_t v27 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v27)
  {
    MEMORY[0x1D25D9CD0](*(void *)(v27 + 48), 8);
    char v28 = *(void **)(v27 + 24);
    if (v28)
    {
      *(void *)(v27 + 32) = v28;
      operator delete(v28);
    }
    long long v29 = *(void **)v27;
    if (*(void *)v27)
    {
      *(void *)(v27 + 8) = v29;
      operator delete(v29);
    }
    MEMORY[0x1D25D9CE0](v27, 0x1020C4088D124F6);
  }
  uint64_t v30 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v30)
  {
    sub_1CD5E3F0C((char **)(v30 + 48));
    MEMORY[0x1D25D9CE0](v30, 0x10F1C40D646D640);
  }
  uint64_t v31 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v31)
  {
    sub_1CD5E3EA8(v31, *(char **)(v31 + 8));
    MEMORY[0x1D25D9CE0](v31, 0x1072C402B7D7BD7);
  }
  long long v32 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v32)
  {
    long long v40 = sub_1CD5E3B20(v32);
    MEMORY[0x1D25D9CE0](v40, 0x10B0C40B5600ACDLL);
  }
  uint64_t v33 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v33)
  {
    sub_1CC683BB0((char **)(v33 + 88));
    long long v34 = *(void **)(v33 + 72);
    if (v34 != (void *)(v33 + 88)) {
      free(v34);
    }
    uint64_t v35 = *(void **)(v33 + 56);
    if (v35 != (void *)(v33 + 72)) {
      free(v35);
    }
    long long v36 = *(void **)(v33 + 40);
    if (v36 != (void *)(v33 + 56)) {
      free(v36);
    }
    long long v37 = *(void **)(v33 + 24);
    if (v37 != (void *)(v33 + 40)) {
      free(v37);
    }
    MEMORY[0x1D25D9CE0](v33, 0x10D0C40CB60C578);
  }
  long long v38 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v38)
  {
    long long v41 = sub_1CD5E3B20(v38);
    MEMORY[0x1D25D9CE0](v41, 0x10B0C40B5600ACDLL);
  }
  if (*((unsigned char *)this + 104))
  {
    MEMORY[0x1D25D9CD0](*((void *)this + 10), 8);
    *((unsigned char *)this + 104) = 0;
  }
  long long v39 = (llvm::DWARFContext *)*((void *)this + 8);
  if (v39 == (llvm::DWARFContext *)((char *)this + 40))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  }
  else if (v39)
  {
    (*(void (**)(llvm::DWARFContext *))(*(void *)v39 + 40))(v39);
  }
  sub_1CC682364((char **)this + 2);
}

{
  uint64_t vars8;

  llvm::DWARFContext::~DWARFContext(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::DWARFContext::parseMacroOrMacinfo(uint64_t a1, int a2)
{
  int v2 = a2;
  operator new();
}

uint64_t sub_1CC674F0C(char ****a1, long long *a2, int a3)
{
  uint64_t v5 = (llvm::DWARFContext *)a1[2];
  int v6 = **a1;
  if (a3)
  {
    if (*(_DWORD *)a1[1] == 2) {
      sub_1CC6821F8((uint64_t)a1[2], v19);
    }
    else {
      sub_1CC67CD38(v19, v5);
    }
    uint64_t v10 = **((void **)v5 + 65);
    if (*(_DWORD *)a1[1] == 2) {
      uint64_t v11 = (*(uint64_t (**)(void))(v10 + 136))();
    }
    else {
      uint64_t v11 = (*(uint64_t (**)(void))(v10 + 280))();
    }
    long long v13 = a2[1];
    long long v21 = *a2;
    long long v22 = v13;
    uint64_t v23 = *((void *)a2 + 4);
    v27[0] = v19[0];
    v27[1] = v19[1];
    v27[2] = v19[2];
    char v28 = 1;
    v24[0] = v11;
    v24[1] = v12;
    __int16 v25 = 0;
    char v26 = 1;
    uint64_t v8 = v6;
    int v9 = 1;
  }
  else
  {
    long long v7 = a2[1];
    long long v21 = *a2;
    long long v22 = v7;
    uint64_t v23 = *((void *)a2 + 4);
    LOBYTE(v27[0]) = 0;
    char v28 = 0;
    LOBYTE(v24[0]) = 0;
    char v26 = 0;
    uint64_t v8 = v6;
    int v9 = 0;
  }
  uint64_t result = llvm::DWARFDebugMacro::parseImpl(v8, (uint64_t)v27, v24, (uint64_t)&v21, v9, &v20);
  if (v20)
  {
    uint64_t v18 = v20;
    uint64_t v20 = 0;
    uint64_t v15 = *((void *)v5 + 60);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v18);
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      unsigned int v16 = *a1;
      uint64_t v17 = **a1;
      *unsigned int v16 = 0;
      if (v17)
      {
        *(void *)&v27[0] = v17;
        sub_1CC6823F0((void ***)v27);
        MEMORY[0x1D25D9CE0](v17, 0x20C40960023A9);
      }
      uint64_t result = v20;
      if (v20) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    else
    {
      sub_1CB920400();
      return llvm::DWARFContext::dump();
    }
  }
  return result;
}

void *llvm::DWARFContext::dump(llvm::DWARFContext *a1, llvm::raw_ostream *a2, void *a3, uint64_t a4)
{
  uint64_t v486 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)a3;
  uint64_t v7 = (*(uint64_t (**)(void *))(**((void **)a1 + 65) + 16))(*((void **)a1 + 65));
  int v9 = llvm::sys::path::extension(v7, v8, 0);
  BOOL v10 = 0;
  if (v11 == 4) {
    BOOL v10 = *(_DWORD *)v9 == 1870095406 || *(_DWORD *)v9 == 1886872622;
  }
  BOOL v343 = v10;
  unsigned int v342 = a1;
  uint64_t v12 = (*(uint64_t (**)(void *))(**((void **)a1 + 65) + 24))(*((void **)a1 + 65));
  int v335 = v6;
  if ((v6 & 0x8000000) != 0)
  {
    uint64_t v13 = v12;
    if ((*(_DWORD *)(v12 + 8) & 0xFFFFFFFC) == 0x10)
    {
      uint64_t v14 = *(unsigned int *)(v12 + 136);
      if (v14)
      {
        uint64_t v15 = *(uint64_t **)(v12 + 128);
        unsigned int v16 = &v15[2 * v14];
        do
        {
          if (*((_DWORD *)v15 + 2) == 27)
          {
            uint64_t v17 = (_WORD *)*((void *)a2 + 4);
            unint64_t v18 = *((void *)a2 + 3) - (void)v17;
            if (*((_DWORD *)v15 + 3) <= 0x17u)
            {
              if (v18 > 0x26)
              {
                qmemcpy(v17, "error: UUID load command is too short.\n", 39);
                *((void *)a2 + 4) += 39;
              }
              else
              {
                llvm::raw_ostream::write(a2, "error: UUID load command is too short.\n", 0x27uLL);
              }
              break;
            }
            uint64_t v19 = *v15;
            if (v18 > 5)
            {
              void v17[2] = 8250;
              *(_DWORD *)uint64_t v17 = 1145656661;
              *((void *)a2 + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(a2, "UUID: ", 6uLL);
            }
            *(_OWORD *)uint64_t v475 = *(_OWORD *)(v19 + 8);
            llvm::raw_ostream::write_uuid(a2, v475);
            llvm::object::MachOObjectFile::getArchTriple((llvm::Triple *)*(unsigned int *)(v13 + 52), 0, *(_DWORD *)(v13 + 56), 0, (llvm::Triple *)v480);
            uint64_t v20 = (_WORD *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v20 > 1uLL)
            {
              _WORD *v20 = 10272;
              *((void *)a2 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a2, " (", 2uLL);
            }
            ArchName = llvm::Triple::getArchName((llvm::Triple *)v480);
            size_t v23 = v21;
            uint64_t v24 = (unsigned char *)*((void *)a2 + 4);
            if (v21 <= *((void *)a2 + 3) - (void)v24)
            {
              if (v21)
              {
                memcpy(v24, ArchName, v21);
                uint64_t v24 = (unsigned char *)(*((void *)a2 + 4) + v23);
                *((void *)a2 + 4) = v24;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, (const char *)ArchName, v21);
              uint64_t v24 = (unsigned char *)*((void *)a2 + 4);
            }
            if ((unint64_t)v24 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 41);
            }
            else
            {
              *((void *)a2 + 4) = v24 + 1;
              *uint64_t v24 = 41;
            }
            __int16 v25 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v25 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((void *)a2 + 4) = v25 + 1;
              *__int16 v25 = 32;
            }
            char v26 = *(const void **)(v13 + 32);
            unint64_t v27 = *(void *)(v13 + 40);
            char v28 = (unsigned char *)*((void *)a2 + 4);
            if (v27 <= *((void *)a2 + 3) - (void)v28)
            {
              if (v27)
              {
                memcpy(v28, v26, *(void *)(v13 + 40));
                char v28 = (unsigned char *)(*((void *)a2 + 4) + v27);
                *((void *)a2 + 4) = v28;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, (const char *)v26, *(void *)(v13 + 40));
              char v28 = (unsigned char *)*((void *)a2 + 4);
            }
            if ((unint64_t)v28 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 10);
            }
            else
            {
              *((void *)a2 + 4) = v28 + 1;
              unsigned char *v28 = 10;
            }
            if ((v480[23] & 0x80000000) != 0) {
              operator delete(*(void **)v480);
            }
          }
          v15 += 2;
        }
        while (v15 != v16);
      }
    }
  }
  int v29 = v6;
  char v30 = v6 != -1 && !v343;
  char v344 = v30 & v343;
  uint64_t v31 = (uint64_t)v342;
  (*(void (**)(void))(**((void **)v342 + 65) + 72))(*((void *)v342 + 65));
  if (v6 & 1) == 0 || (v30)
  {
    uint64_t v33 = (llvm::raw_ostream *)a4;
    if ((v6 & 1) == 0) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v33 = (llvm::raw_ostream *)a4;
    if (!v32) {
      goto LABEL_55;
    }
  }
  long long v34 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v34)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v35 = (void *)*((void *)a2 + 4);
  }
  else
  {
    unsigned char *v34 = 10;
    uint64_t v35 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v35;
  }
  if (*((void *)a2 + 3) - (void)v35 > 0xCuLL)
  {
    qmemcpy(v35, ".debug_abbrev", 13);
    uint64_t v36 = *((void *)a2 + 4) + 13;
    *((void *)a2 + 4) = v36;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_abbrev", 0xDuLL);
    uint64_t v36 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v36) <= 0xA)
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
    if (!v33) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  *(_DWORD *)(v36 + 7) = 171602804;
  *(void *)uint64_t v36 = *(void *)" contents:\n";
  *((void *)a2 + 4) += 11;
  if (v33)
  {
LABEL_54:
    DebugAbbrev = (uint64_t **)llvm::DWARFContext::getDebugAbbrev(v342);
    llvm::DWARFDebugAbbrev::dump(DebugAbbrev, a2);
  }
LABEL_55:
  (*(void (**)(void))(**((void **)v342 + 65) + 248))(*((void *)v342 + 65));
  char v39 = v344;
  if ((v6 & 1) == 0) {
    char v39 = 1;
  }
  if (v39)
  {
    if ((v6 & 1) == 0) {
      goto LABEL_68;
    }
  }
  else if (!v38)
  {
    goto LABEL_68;
  }
  long long v40 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v40)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v41 = *((void *)a2 + 4);
  }
  else
  {
    unsigned char *v40 = 10;
    uint64_t v41 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v41;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v41) > 0x10)
  {
    *(unsigned char *)(v41 + 16) = 111;
    *(_OWORD *)uint64_t v41 = *(_OWORD *)".debug_abbrev.dwo";
    uint64_t v42 = *((void *)a2 + 4) + 17;
    *((void *)a2 + 4) = v42;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_abbrev.dwo", 0x11uLL);
    uint64_t v42 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v42) <= 0xA)
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  *(_DWORD *)(v42 + 7) = 171602804;
  *(void *)uint64_t v42 = *(void *)" contents:\n";
  *((void *)a2 + 4) += 11;
  if (v33)
  {
LABEL_67:
    DebugAbbrevDWO = (uint64_t **)llvm::DWARFContext::getDebugAbbrevDWO(v342);
    llvm::DWARFDebugAbbrev::dump(DebugAbbrevDWO, a2);
  }
LABEL_68:
  v399[0] = a2;
  v399[1] = v33;
  v399[2] = (llvm::raw_ostream *)a3;
  if ((v6 & 8) != 0)
  {
    if (v30) {
      goto LABEL_73;
    }
    llvm::DWARFContext::parseNormalUnits((uint64_t)v342);
    int v44 = *((_DWORD *)v342 + 18);
    if (v44 == -1) {
      int v44 = *((_DWORD *)v342 + 6);
    }
    if (v44)
    {
LABEL_73:
      llvm::DWARFContext::parseNormalUnits((uint64_t)v342);
      unsigned int v45 = *((_DWORD *)v342 + 18);
      if (v45 == -1) {
        unsigned int v45 = *((_DWORD *)v342 + 6);
      }
      sub_1CC679D18(v399, ".debug_info", *((llvm::DWARFUnit ***)v342 + 2), (llvm::DWARFUnit **)(*((void *)v342 + 2) + 8 * v45));
    }
    if (v344) {
      goto LABEL_80;
    }
    llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0);
    int v46 = *((_DWORD *)v342 + 74);
    if (v46 == -1) {
      int v46 = *((_DWORD *)v342 + 62);
    }
    if (v46)
    {
LABEL_80:
      llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0);
      unsigned int v47 = *((_DWORD *)v342 + 74);
      if (v47 == -1) {
        unsigned int v47 = *((_DWORD *)v342 + 62);
      }
      sub_1CC679D18(v399, ".debug_info.dwo", *((llvm::DWARFUnit ***)v342 + 30), (llvm::DWARFUnit **)(*((void *)v342 + 30) + 8 * v47));
    }
  }
  v398[0] = a2;
  v398[1] = v33;
  v398[2] = (llvm::raw_ostream *)a3;
  if ((v6 & 0x10) != 0)
  {
    if ((v30 & 1) != 0
      || (llvm::DWARFContext::parseNormalUnits((uint64_t)v342), *((_DWORD *)v342 + 6) != *((_DWORD *)v342 + 18)))
    {
      llvm::DWARFContext::parseNormalUnits((uint64_t)v342);
      unsigned int v48 = *((_DWORD *)v342 + 18);
      if (v48 == -1) {
        unsigned int v48 = *((_DWORD *)v342 + 6);
      }
      sub_1CC679F5C(v398, ".debug_types", (llvm::DWARFUnit **)(*((void *)v342 + 2) + 8 * v48), (llvm::DWARFUnit **)(*((void *)v342 + 2) + 8 * *((unsigned int *)v342 + 6)));
    }
    if ((v344 & 1) != 0
      || (llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0), *((_DWORD *)v342 + 62) != *((_DWORD *)v342 + 74)))
    {
      llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0);
      unsigned int v49 = *((_DWORD *)v342 + 74);
      if (v49 == -1) {
        unsigned int v49 = *((_DWORD *)v342 + 62);
      }
      sub_1CC679F5C(v398, ".debug_types.dwo", (llvm::DWARFUnit **)(*((void *)v342 + 30) + 8 * v49), (llvm::DWARFUnit **)(*((void *)v342 + 30) + 8 * *((unsigned int *)v342 + 62)));
    }
  }
  *(_OWORD *)uint64_t v475 = *(_OWORD *)a3;
  *(void *)&v475[14] = *(void *)((char *)a3 + 14);
  uint64_t v341 = (uint64_t)(a3 + 3);
  sub_1CC66D518((uint64_t)v476, (uint64_t)(a3 + 3));
  sub_1CC66D518((uint64_t)v478, (uint64_t)(a3 + 7));
  if (v475[20]) {
    v475[21] = 1;
  }
  uint64_t v50 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 80))(*((void *)v342 + 65));
  if ((v6 & 0x80) != 0) {
    char v51 = v30;
  }
  else {
    char v51 = 1;
  }
  if (v51)
  {
    uint64_t v52 = (void *)a4;
    if ((v335 & 0x80) == 0) {
      goto LABEL_120;
    }
  }
  else
  {
    uint64_t v52 = (void *)a4;
    if (!*(void *)(v50 + 8)) {
      goto LABEL_120;
    }
  }
  long long v53 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v53)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v54 = *((void *)a2 + 4);
  }
  else
  {
    unsigned char *v53 = 10;
    uint64_t v54 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v54;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v54) > 9)
  {
    *(_WORD *)(v54 + 8) = 25455;
    *(void *)uint64_t v54 = *(void *)".debug_loc";
    uint64_t v55 = *((void *)a2 + 4) + 10;
    *((void *)a2 + 4) = v55;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_loc", 0xAuLL);
    uint64_t v55 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v55) > 0xA)
  {
    *(_DWORD *)(v55 + 7) = 171602804;
    *(void *)uint64_t v55 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  DebugLoc = (void *)llvm::DWARFContext::getDebugLoc(v342);
  uint64_t v57 = *((void *)v342 + 56);
  uint64_t v58 = *((void *)v342 + 65);
  *(_OWORD *)uint64_t v470 = *(_OWORD *)v475;
  *(void *)&v470[14] = *(void *)&v475[14];
  if (v477)
  {
    if (v477 == v476)
    {
      uint64_t v472 = &v471;
      (*(void (**)(void *))(v476[0] + 24))(v476);
    }
    else
    {
      uint64_t v472 = (uint64_t *)(*(uint64_t (**)(void))(*v477 + 16))();
    }
  }
  else
  {
    uint64_t v472 = 0;
  }
  if (v479)
  {
    if (v479 == v478)
    {
      v474 = &v473;
      (*(void (**)(void *))(v478[0] + 24))(v478);
    }
    else
    {
      v474 = (uint64_t *)(*(uint64_t (**)(void))(*v479 + 16))();
    }
  }
  else
  {
    v474 = 0;
  }
  llvm::DWARFDebugLoc::dump(DebugLoc, a2, v57, v58, (uint64_t)v470, v52[14], v52[15]);
  sub_1CD5E15A8(v470);
  int v29 = v335;
LABEL_120:
  uint64_t v59 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 88))(*((void *)v342 + 65));
  if ((v29 & 0x100) != 0) {
    char v60 = v30;
  }
  else {
    char v60 = 1;
  }
  if (v60)
  {
    if ((v29 & 0x100) == 0) {
      goto LABEL_146;
    }
  }
  else if (!*(void *)(v59 + 8))
  {
    goto LABEL_146;
  }
  uint64_t v61 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v61)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v62 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v61 = 10;
    uint64_t v62 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v62;
  }
  if (*((void *)a2 + 3) - (void)v62 > 0xEuLL)
  {
    qmemcpy(v62, ".debug_loclists", 15);
    uint64_t v63 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v63;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_loclists", 0xFuLL);
    uint64_t v63 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v63) > 0xA)
  {
    *(_DWORD *)(v63 + 7) = 171602804;
    *(void *)uint64_t v63 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v64 = *((void *)v342 + 65);
  long long v65 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 88))(v64);
  char v66 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v67 = *v65;
  *(void *)&v465[14] = *(void *)&v475[14];
  *(_OWORD *)v465 = *(_OWORD *)v475;
  long long v338 = v67;
  if (v477)
  {
    if (v477 == v476)
    {
      uint64_t v467 = &v466;
      (*(void (**)(void *))(v476[0] + 24))(v476);
    }
    else
    {
      uint64_t v467 = (uint64_t *)(*(uint64_t (**)(void))(*v477 + 16))();
    }
    long long v67 = v338;
  }
  else
  {
    uint64_t v467 = 0;
  }
  if (v479)
  {
    if (v479 == v478)
    {
      uint64_t v469 = &v468;
      (*(void (**)(void *))(v478[0] + 24))(v478);
    }
    else
    {
      uint64_t v469 = (uint64_t *)(*(uint64_t (**)(void))(*v479 + 16))();
    }
    long long v67 = v338;
  }
  else
  {
    uint64_t v469 = 0;
  }
  long long v393 = v67;
  char v394 = v66;
  char v395 = 0;
  uint64_t v396 = v64;
  __n128 v397 = v65;
  sub_1CC67A330(a2, (uint64_t)v465, &v393, *((void *)v342 + 56), *((void *)v342 + 65), v52[16], v52[17]);
  sub_1CD5E15A8(v465);
  int v29 = v335;
LABEL_146:
  uint64_t v68 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 272))(*((void *)v342 + 65));
  char v69 = v344;
  if ((v29 & 0x100) == 0) {
    char v69 = 1;
  }
  if (v69)
  {
    if ((v29 & 0x100) == 0) {
      goto LABEL_171;
    }
  }
  else if (!*(void *)(v68 + 8))
  {
    goto LABEL_171;
  }
  uint64_t v70 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v70)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v71 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v70 = 10;
    uint64_t v71 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v71;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v71) > 0x12)
  {
    *(_DWORD *)(v71 + 15) = 1870095406;
    *(_OWORD *)uint64_t v71 = *(_OWORD *)".debug_loclists.dwo";
    uint64_t v72 = *((void *)a2 + 4) + 19;
    *((void *)a2 + 4) = v72;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_loclists.dwo", 0x13uLL);
    uint64_t v72 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v72) > 0xA)
  {
    *(_DWORD *)(v72 + 7) = 171602804;
    *(void *)uint64_t v72 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v73 = *((void *)v342 + 65);
  long long v74 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v73 + 272))(v73);
  char v75 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v76 = *v74;
  *(void *)&v460[14] = *(void *)&v475[14];
  *(_OWORD *)uint64_t v460 = *(_OWORD *)v475;
  long long v339 = v76;
  if (v477)
  {
    if (v477 == v476)
    {
      unsigned int v462 = &v461;
      (*(void (**)(void *))(v476[0] + 24))(v476);
    }
    else
    {
      unsigned int v462 = (uint64_t *)(*(uint64_t (**)(void))(*v477 + 16))();
    }
    long long v76 = v339;
  }
  else
  {
    unsigned int v462 = 0;
  }
  if (v479)
  {
    if (v479 == v478)
    {
      v464 = &v463;
      (*(void (**)(void *))(v478[0] + 24))(v478);
    }
    else
    {
      v464 = (uint64_t *)(*(uint64_t (**)(void))(*v479 + 16))();
    }
    long long v76 = v339;
  }
  else
  {
    v464 = 0;
  }
  long long v388 = v76;
  char v389 = v75;
  char v390 = 0;
  uint64_t v391 = v73;
  long long v392 = v74;
  sub_1CC67A330(a2, (uint64_t)v460, &v388, *((void *)v342 + 56), *((void *)v342 + 65), v52[16], v52[17]);
  sub_1CD5E15A8(v460);
  int v29 = v335;
LABEL_171:
  uint64_t v340 = (uint64_t)(a3 + 7);
  uint64_t v77 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 264))(*((void *)v342 + 65));
  char v78 = v344;
  if ((v29 & 0x80) == 0) {
    char v78 = 1;
  }
  if (v78)
  {
    if ((v29 & 0x80) == 0) {
      goto LABEL_208;
    }
  }
  else if (!*(void *)(v77 + 8))
  {
    goto LABEL_208;
  }
  unint64_t v79 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v79)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    size_t v80 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *unint64_t v79 = 10;
    size_t v80 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v80;
  }
  if (*((void *)a2 + 3) - (void)v80 > 0xDuLL)
  {
    qmemcpy(v80, ".debug_loc.dwo", 14);
    uint64_t v81 = *((void *)a2 + 4) + 14;
    *((void *)a2 + 4) = v81;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_loc.dwo", 0xEuLL);
    uint64_t v81 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v81) > 0xA)
  {
    *(_DWORD *)(v81 + 7) = 171602804;
    *(void *)uint64_t v81 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v82 = *((void *)v342 + 65);
  size_t v83 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v82 + 264))(v82);
  char v84 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  uint64_t v85 = v83[1];
  *(void *)&v480[8] = *v83;
  *(void *)&v480[16] = v85;
  LOBYTE(v481[0]) = v84;
  BYTE1(v481[0]) = 4;
  *((void *)&v481[0] + 1) = v82;
  *(void *)&v481[1] = v83;
  *(void *)int v480 = &unk_1F2619120;
  WORD4(v481[1]) = 4;
  if (*(unsigned char *)(a4 + 120))
  {
    *(void *)&long long v402 = *(void *)(a4 + 112);
    LOBYTE(v386) = 0;
    char v387 = 0;
    uint64_t v88 = *((void *)v342 + 56);
    uint64_t v89 = *((void *)v342 + 65);
    *(_OWORD *)uint64_t v455 = *(_OWORD *)v475;
    *(void *)&v455[14] = *(void *)&v475[14];
    if (v477)
    {
      if (v477 == v476)
      {
        v457 = &v456;
        (*(void (**)(void *))(v476[0] + 24))(v476);
      }
      else
      {
        v457 = (uint64_t *)(*(uint64_t (**)(void))(*v477 + 16))();
      }
    }
    else
    {
      v457 = 0;
    }
    if (v479)
    {
      if (v479 == v478)
      {
        unsigned int v459 = &v458;
        (*(void (**)(void *))(v478[0] + 24))(v478);
      }
      else
      {
        unsigned int v459 = (uint64_t *)(*(uint64_t (**)(void))(*v479 + 16))();
      }
    }
    else
    {
      unsigned int v459 = 0;
    }
    LODWORD(v333) = 0;
    llvm::DWARFLocationTable::dumpLocationList((uint64_t)v480, (uint64_t *)&v402, a2, &v386, v88, v89, 0, (uint64_t)v455, v333);
    sub_1CD5E15A8(v455);
    uint64_t v90 = (unsigned char *)*((void *)a2 + 4);
    if (*((unsigned char **)a2 + 3) == v90)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *uint64_t v90 = 10;
      ++*((void *)a2 + 4);
    }
  }
  else
  {
    uint64_t v86 = *((void *)v342 + 56);
    uint64_t v87 = *((void *)v342 + 65);
    *(_OWORD *)uint64_t v450 = *(_OWORD *)v475;
    *(void *)&v450[14] = *(void *)&v475[14];
    if (v477)
    {
      if (v477 == v476)
      {
        unsigned int v452 = &v451;
        (*(void (**)(void *))(v476[0] + 24))(v476);
      }
      else
      {
        unsigned int v452 = (uint64_t *)(*(uint64_t (**)(void))(*v477 + 16))();
      }
    }
    else
    {
      unsigned int v452 = 0;
    }
    if (v479)
    {
      if (v479 == v478)
      {
        v454 = &v453;
        (*(void (**)(void *))(v478[0] + 24))(v478);
      }
      else
      {
        v454 = (uint64_t *)(*(uint64_t (**)(void))(*v479 + 16))();
      }
    }
    else
    {
      v454 = 0;
    }
    llvm::DWARFDebugLoclists::dumpRange((uint64_t)v480, 0, v85, a2, v86, v87, (uint64_t)v450);
    sub_1CD5E15A8(v450);
  }
  int v29 = v335;
LABEL_208:
  uint64_t v91 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 104))(*((void *)v342 + 65));
  if ((v29 & 0x200) != 0) {
    char v92 = v30;
  }
  else {
    char v92 = 1;
  }
  if (v92)
  {
    if ((v29 & 0x200) == 0) {
      goto LABEL_226;
    }
  }
  else if (!*(void *)(v91 + 8))
  {
    goto LABEL_226;
  }
  uint64_t v93 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v93)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v94 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v93 = 10;
    uint64_t v94 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v94;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v94) > 0xB)
  {
    *(_DWORD *)(v94 + 8) = 1701667186;
    *(void *)uint64_t v94 = *(void *)".debug_frame";
    uint64_t v95 = *((void *)a2 + 4) + 12;
    *((void *)a2 + 4) = v95;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_frame", 0xCuLL);
    uint64_t v95 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v95) > 0xA)
  {
    *(_DWORD *)(v95 + 7) = 171602804;
    *(void *)uint64_t v95 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  llvm::DWARFContext::getDebugFrame((uint64_t)v342, (uint64_t)v480);
  if (v480[8])
  {
    uint64_t v385 = *(void *)v480;
    uint64_t v97 = *((void *)v342 + 60);
    if (!v97) {
      goto LABEL_802;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v97 + 48))(v97, &v385);
    if (v385) {
      (*(void (**)(uint64_t))(*(void *)v385 + 8))(v385);
    }
  }
  else
  {
    uint64_t v96 = *(void **)v480;
    *(_OWORD *)uint64_t v447 = *(_OWORD *)a3;
    *(void *)&v447[14] = *(void *)((char *)a3 + 14);
    sub_1CC66D518((uint64_t)&v448, v341);
    sub_1CC66D518((uint64_t)&v449, v340);
    llvm::DWARFDebugFrame::dump(v96, a2, (uint64_t)v447, *((void *)v342 + 56), *(void *)(a4 + 144), *(void *)(a4 + 152));
    sub_1CD5E15A8(v447);
  }
LABEL_226:
  uint64_t v98 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 112))(*((void *)v342 + 65));
  if (v92)
  {
    if ((v29 & 0x200) == 0) {
      goto LABEL_241;
    }
  }
  else if (!*(void *)(v98 + 8))
  {
    goto LABEL_241;
  }
  size_t v99 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v99)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v100 = *((void *)a2 + 4);
  }
  else
  {
    *size_t v99 = 10;
    uint64_t v100 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v100;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v100) > 8)
  {
    *(unsigned char *)(v100 + 8) = 101;
    *(void *)uint64_t v100 = *(void *)".eh_frame";
    uint64_t v101 = *((void *)a2 + 4) + 9;
    *((void *)a2 + 4) = v101;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".eh_frame", 9uLL);
    uint64_t v101 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v101) > 0xA)
  {
    *(_DWORD *)(v101 + 7) = 171602804;
    *(void *)uint64_t v101 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  llvm::DWARFContext::getEHFrame((uint64_t)v342, (uint64_t)v480);
  if (v480[8])
  {
    uint64_t v384 = *(void *)v480;
    uint64_t v103 = *((void *)v342 + 60);
    if (!v103) {
      goto LABEL_802;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v103 + 48))(v103, &v384);
    if (v384) {
      (*(void (**)(uint64_t))(*(void *)v384 + 8))(v384);
    }
  }
  else
  {
    unsigned int v102 = *(void **)v480;
    *(_OWORD *)uint64_t v444 = *(_OWORD *)a3;
    *(void *)&v444[14] = *(void *)((char *)a3 + 14);
    sub_1CC66D518((uint64_t)&v445, v341);
    sub_1CC66D518((uint64_t)&v446, v340);
    llvm::DWARFDebugFrame::dump(v102, a2, (uint64_t)v444, *((void *)v342 + 56), *(void *)(a4 + 144), *(void *)(a4 + 152));
    sub_1CD5E15A8(v444);
  }
LABEL_241:
  uint64_t v104 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 160))(*((void *)v342 + 65));
  if ((v29 & 0x400) != 0) {
    char v105 = v30;
  }
  else {
    char v105 = 1;
  }
  if (v105)
  {
    if ((v29 & 0x400) == 0) {
      goto LABEL_256;
    }
  }
  else if (!*(void *)(v104 + 8))
  {
    goto LABEL_256;
  }
  uint64_t v106 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v106)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v107 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v106 = 10;
    uint64_t v107 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v107;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v107) > 0xB)
  {
    *(_DWORD *)(v107 + 8) = 1869767521;
    *(void *)uint64_t v107 = *(void *)".debug_macro";
    uint64_t v108 = *((void *)a2 + 4) + 12;
    *((void *)a2 + 4) = v108;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_macro", 0xCuLL);
    uint64_t v108 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v108) > 0xA)
  {
    *(_DWORD *)(v108 + 7) = 171602804;
    *(void *)uint64_t v108 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  DebugMacro = (unsigned __int16 **)llvm::DWARFContext::getDebugMacro(v342);
  if (DebugMacro) {
    llvm::DWARFDebugMacro::dump(DebugMacro, a2);
  }
LABEL_256:
  (*(void (**)(void))(**((void **)v342 + 65) + 168))(*((void *)v342 + 65));
  if (v105)
  {
    if ((v29 & 0x400) == 0) {
      goto LABEL_268;
    }
  }
  else if (!v110)
  {
    goto LABEL_268;
  }
  size_t v111 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v111)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v112 = (_OWORD *)*((void *)a2 + 4);
  }
  else
  {
    *size_t v111 = 10;
    uint64_t v112 = (_OWORD *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v112;
  }
  if (*((void *)a2 + 3) - (void)v112 > 0xFuLL)
  {
    *uint64_t v112 = *(_OWORD *)".debug_macro.dwo";
    uint64_t v113 = *((void *)a2 + 4) + 16;
    *((void *)a2 + 4) = v113;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_macro.dwo", 0x10uLL);
    uint64_t v113 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v113) > 0xA)
  {
    *(_DWORD *)(v113 + 7) = 171602804;
    *(void *)uint64_t v113 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  DebugMacroDWO = (unsigned __int16 **)llvm::DWARFContext::getDebugMacroDWO(v342);
  if (DebugMacroDWO) {
    llvm::DWARFDebugMacro::dump(DebugMacroDWO, a2);
  }
LABEL_268:
  (*(void (**)(void))(**((void **)v342 + 65) + 176))(*((void *)v342 + 65));
  if (v105)
  {
    if ((v29 & 0x400) == 0) {
      goto LABEL_280;
    }
  }
  else if (!v115)
  {
    goto LABEL_280;
  }
  uint64_t v116 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v116)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    long long v117 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v116 = 10;
    long long v117 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v117;
  }
  if (*((void *)a2 + 3) - (void)v117 > 0xDuLL)
  {
    qmemcpy(v117, ".debug_macinfo", 14);
    uint64_t v118 = *((void *)a2 + 4) + 14;
    *((void *)a2 + 4) = v118;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_macinfo", 0xEuLL);
    uint64_t v118 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v118) > 0xA)
  {
    *(_DWORD *)(v118 + 7) = 171602804;
    *(void *)uint64_t v118 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  DebugMacinfo = (unsigned __int16 **)llvm::DWARFContext::getDebugMacinfo(v342);
  if (DebugMacinfo) {
    llvm::DWARFDebugMacro::dump(DebugMacinfo, a2);
  }
LABEL_280:
  (*(void (**)(void))(**((void **)v342 + 65) + 184))(*((void *)v342 + 65));
  if (v105)
  {
    uint64_t v121 = (uint64_t)(a3 + 7);
    if ((v29 & 0x400) == 0) {
      goto LABEL_292;
    }
  }
  else
  {
    uint64_t v121 = (uint64_t)(a3 + 7);
    if (!v120) {
      goto LABEL_292;
    }
  }
  uint64_t v122 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v122)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v123 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v122 = 10;
    uint64_t v123 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v123;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v123) > 0x11)
  {
    *(_WORD *)(v123 + 16) = 28535;
    *(_OWORD *)uint64_t v123 = *(_OWORD *)".debug_macinfo.dwo";
    uint64_t v124 = *((void *)a2 + 4) + 18;
    *((void *)a2 + 4) = v124;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_macinfo.dwo", 0x12uLL);
    uint64_t v124 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v124) > 0xA)
  {
    *(_DWORD *)(v124 + 7) = 171602804;
    *(void *)uint64_t v124 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  DebugMacinfoDWO = (unsigned __int16 **)llvm::DWARFContext::getDebugMacinfoDWO(v342);
  if (DebugMacinfoDWO) {
    llvm::DWARFDebugMacro::dump(DebugMacinfoDWO, a2);
  }
LABEL_292:
  (*(void (**)(void))(**((void **)v342 + 65) + 96))(*((void *)v342 + 65));
  if ((v29 & 4) != 0) {
    char v127 = v30;
  }
  else {
    char v127 = 1;
  }
  if (v127)
  {
    if ((v29 & 4) == 0) {
      goto LABEL_318;
    }
  }
  else if (!v126)
  {
    goto LABEL_318;
  }
  size_t v128 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v128)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v129 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *size_t v128 = 10;
    uint64_t v129 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v129;
  }
  if (*((void *)a2 + 3) - (void)v129 > 0xDuLL)
  {
    qmemcpy(v129, ".debug_aranges", 14);
    uint64_t v130 = *((void *)a2 + 4) + 14;
    *((void *)a2 + 4) = v130;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_aranges", 0xEuLL);
    uint64_t v130 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v130) > 0xA)
  {
    *(_DWORD *)(v130 + 7) = 171602804;
    *(void *)uint64_t v130 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  *(void *)&long long v402 = 0;
  uint64_t v131 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 96))(*((void *)v342 + 65));
  unint64_t v133 = v132;
  char v134 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  uint64_t v482 = 0;
  *(void *)int v480 = -1;
  *(_OWORD *)&v480[8] = 0u;
  memset(v481, 0, sizeof(v481));
  if (v133 > (unint64_t)v402)
  {
    char v135 = v134;
    while (1)
    {
      v379[0] = v131;
      v379[1] = v133;
      char v380 = v135;
      char v381 = 0;
      uint64_t v382 = 0;
      uint64_t v383 = 0;
      llvm::DWARFDebugArangeSet::extract((unint64_t *)v480, v379, (unint64_t *)&v402, &v367);
      if ((void)v367) {
        break;
      }
      llvm::DWARFDebugArangeSet::dump((llvm::DWARFDebugArangeSet *)v480, a2);
      if (v133 <= (unint64_t)v402) {
        goto LABEL_315;
      }
    }
    uint64_t v378 = v367;
    *(void *)&long long v367 = 0;
    uint64_t v136 = *((void *)v342 + 60);
    if (!v136) {
      goto LABEL_802;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v136 + 48))(v136, &v378);
    if (v378) {
      (*(void (**)(uint64_t))(*(void *)v378 + 8))(v378);
    }
    if ((void)v367) {
      (*(void (**)(void))(*(void *)v367 + 8))(v367);
    }
  }
LABEL_315:
  if (*(void *)&v481[1])
  {
    *((void *)&v481[1] + 1) = *(void *)&v481[1];
    operator delete(*(void **)&v481[1]);
  }
  int v29 = v335;
LABEL_318:
  v376[2] = a2;
  uint64_t v377 = a2;
  v376[0] = v342;
  v376[1] = a3;
  uint64_t v137 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 120))(*((void *)v342 + 65));
  if ((v29 & 0x20) != 0) {
    char v138 = v30;
  }
  else {
    char v138 = 1;
  }
  if (v138)
  {
    if ((v29 & 0x20) == 0) {
      goto LABEL_332;
    }
  }
  else if (!*(void *)(v137 + 8))
  {
    goto LABEL_332;
  }
  int v139 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v139)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v140 = *((void *)a2 + 4);
  }
  else
  {
    *int v139 = 10;
    uint64_t v140 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v140;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v140) > 0xA)
  {
    *(_DWORD *)(v140 + 7) = 1701734764;
    *(void *)uint64_t v140 = *(void *)".debug_line";
    uint64_t v141 = *((void *)a2 + 4) + 11;
    *((void *)a2 + 4) = v141;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_line", 0xBuLL);
    uint64_t v141 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v141) > 0xA)
  {
    *(_DWORD *)(v141 + 7) = 171602804;
    *(void *)uint64_t v141 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  long long v142 = (void *)*((void *)v342 + 65);
  long long v143 = (long long *)(*(uint64_t (**)(void *))(*(void *)v142 + 120))(v142);
  unsigned __int8 v144 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v402 = *v143;
  LOWORD(v403) = v144;
  long long v404 = v142;
  long long __p = v143;
  llvm::DWARFContext::parseNormalUnits((uint64_t)v342);
  llvm::DWARFDebugLine::SectionParser::SectionParser((uint64_t)v480, (uint64_t)&v402, (uint64_t)v342, *((llvm::DWARFUnit ***)v342 + 2), (llvm::DWARFUnit **)(*((void *)v342 + 2) + 8 * *((unsigned int *)v342 + 6)));
  sub_1CC6824FC(v374, v480);
  v375[0] = v481[0];
  *(_OWORD *)((char *)v375 + 9) = *(_OWORD *)((char *)v481 + 9);
  *(_OWORD *)uint64_t v441 = *(_OWORD *)a3;
  *(void *)&v441[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v442, v341);
  sub_1CC66D518((uint64_t)&v443, v121);
  sub_1CC67ADA0(&v377, (uint64_t)v374, (uint64_t)v441, *(void *)(a4 + 80), *(void *)(a4 + 88));
  sub_1CD5E15A8(v441);
  sub_1CC1B4328((uint64_t)v374, v374[1]);
  sub_1CC1B4328((uint64_t)v480, *(void **)&v480[8]);
LABEL_332:
  uint64_t v145 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 256))(*((void *)v342 + 65));
  char v146 = v344;
  if ((v29 & 0x20) == 0) {
    char v146 = 1;
  }
  if (v146)
  {
    if ((v29 & 0x20) == 0) {
      goto LABEL_345;
    }
  }
  else if (!*(void *)(v145 + 8))
  {
    goto LABEL_345;
  }
  unsigned int v147 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v147)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    unsigned int v148 = (void *)*((void *)a2 + 4);
  }
  else
  {
    unsigned char *v147 = 10;
    unsigned int v148 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v148;
  }
  if (*((void *)a2 + 3) - (void)v148 > 0xEuLL)
  {
    qmemcpy(v148, ".debug_line.dwo", 15);
    uint64_t v149 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v149;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_line.dwo", 0xFuLL);
    uint64_t v149 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v149) > 0xA)
  {
    *(_DWORD *)(v149 + 7) = 171602804;
    *(void *)uint64_t v149 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v150 = (void *)*((void *)v342 + 65);
  uint64_t v151 = (long long *)(*(uint64_t (**)(void *))(*(void *)v150 + 256))(v150);
  unsigned __int8 v152 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v402 = *v151;
  LOWORD(v403) = v152;
  long long v404 = v150;
  long long __p = v151;
  llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0);
  llvm::DWARFDebugLine::SectionParser::SectionParser((uint64_t)v480, (uint64_t)&v402, (uint64_t)v342, *((llvm::DWARFUnit ***)v342 + 30), (llvm::DWARFUnit **)(*((void *)v342 + 30) + 8 * *((unsigned int *)v342 + 62)));
  sub_1CC6824FC(v372, v480);
  v373[0] = v481[0];
  *(_OWORD *)((char *)v373 + 9) = *(_OWORD *)((char *)v481 + 9);
  *(_OWORD *)uint64_t v438 = *(_OWORD *)a3;
  *(void *)&v438[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v439, v341);
  sub_1CC66D518((uint64_t)&v440, v121);
  sub_1CC67ADA0(&v377, (uint64_t)v372, (uint64_t)v438, *(void *)(a4 + 80), *(void *)(a4 + 88));
  sub_1CD5E15A8(v438);
  sub_1CC1B4328((uint64_t)v372, v372[1]);
  sub_1CC1B4328((uint64_t)v480, *(void **)&v480[8]);
LABEL_345:
  (*(void (**)(void))(**((void **)v342 + 65) + 360))(*((void *)v342 + 65));
  if ((*(void *)&v29 & 0x100000) != 0) {
    char v154 = v30;
  }
  else {
    char v154 = 1;
  }
  if (v154)
  {
    if ((v29 & 0x100000) == 0) {
      goto LABEL_359;
    }
  }
  else if (!v153)
  {
    goto LABEL_359;
  }
  unint64_t v155 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v155)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v156 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *unint64_t v155 = 10;
    uint64_t v156 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v156;
  }
  if (*((void *)a2 + 3) - (void)v156 > 0xEuLL)
  {
    qmemcpy(v156, ".debug_cu_index", 15);
    uint64_t v157 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v157;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_cu_index", 0xFuLL);
    uint64_t v157 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v157) > 0xA)
  {
    *(_DWORD *)(v157 + 7) = 171602804;
    *(void *)uint64_t v157 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  unint64_t CUIndex = (llvm::raw_ostream *)llvm::DWARFContext::getCUIndex(v342);
  llvm::DWARFUnitIndex::dump(CUIndex, a2);
LABEL_359:
  (*(void (**)(void))(**((void **)v342 + 65) + 376))(*((void *)v342 + 65));
  if ((*(void *)&v29 & 0x200000) != 0) {
    char v160 = v30;
  }
  else {
    char v160 = 1;
  }
  if (v160)
  {
    if ((v29 & 0x200000) == 0) {
      goto LABEL_373;
    }
  }
  else if (!v159)
  {
    goto LABEL_373;
  }
  uint64_t v161 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v161)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    char v162 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v161 = 10;
    char v162 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v162;
  }
  if (*((void *)a2 + 3) - (void)v162 > 0xEuLL)
  {
    qmemcpy(v162, ".debug_tu_index", 15);
    uint64_t v163 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v163;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_tu_index", 0xFuLL);
    uint64_t v163 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v163) > 0xA)
  {
    *(_DWORD *)(v163 + 7) = 171602804;
    *(void *)uint64_t v163 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  TUIndex = (llvm::raw_ostream *)llvm::DWARFContext::getTUIndex(v342);
  llvm::DWARFUnitIndex::dump(TUIndex, a2);
LABEL_373:
  (*(void (**)(void))(**((void **)v342 + 65) + 136))(*((void *)v342 + 65));
  if ((*(void *)&v29 & 0x40000) != 0) {
    char v166 = v30;
  }
  else {
    char v166 = 1;
  }
  if (v166)
  {
    if ((v29 & 0x40000) == 0) {
      goto LABEL_387;
    }
  }
  else if (!v165)
  {
    goto LABEL_387;
  }
  unint64_t v167 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v167)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v168 = *((void *)a2 + 4);
  }
  else
  {
    *unint64_t v167 = 10;
    uint64_t v168 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v168;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v168) > 9)
  {
    *(_WORD *)(v168 + 8) = 29300;
    *(void *)uint64_t v168 = *(void *)".debug_str";
    uint64_t v169 = *((void *)a2 + 4) + 10;
    *((void *)a2 + 4) = v169;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_str", 0xAuLL);
    uint64_t v169 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v169) > 0xA)
  {
    *(_DWORD *)(v169 + 7) = 171602804;
    *(void *)uint64_t v169 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v170 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 136))(*((void *)v342 + 65));
  sub_1CC67AF3C((uint64_t)v376, v170, v171);
LABEL_387:
  (*(void (**)(void))(**((void **)v342 + 65) + 280))(*((void *)v342 + 65));
  char v173 = v344;
  if ((*(void *)&v29 & 0x40000) == 0) {
    char v173 = 1;
  }
  if (v173)
  {
    if ((v29 & 0x40000) == 0) {
      goto LABEL_400;
    }
  }
  else if (!v172)
  {
    goto LABEL_400;
  }
  long long v174 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v174)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    unsigned __int32 v175 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *long long v174 = 10;
    unsigned __int32 v175 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v175;
  }
  if (*((void *)a2 + 3) - (void)v175 > 0xDuLL)
  {
    qmemcpy(v175, ".debug_str.dwo", 14);
    uint64_t v176 = *((void *)a2 + 4) + 14;
    *((void *)a2 + 4) = v176;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_str.dwo", 0xEuLL);
    uint64_t v176 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v176) > 0xA)
  {
    *(_DWORD *)(v176 + 7) = 171602804;
    *(void *)uint64_t v176 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v177 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 280))(*((void *)v342 + 65));
  sub_1CC67AF3C((uint64_t)v376, v177, v178);
LABEL_400:
  (*(void (**)(void))(**((void **)v342 + 65) + 128))(*((void *)v342 + 65));
  if ((v29 & 0x40) != 0) {
    char v180 = v30;
  }
  else {
    char v180 = 1;
  }
  if (v180)
  {
    if ((v29 & 0x40) == 0) {
      goto LABEL_414;
    }
  }
  else if (!v179)
  {
    goto LABEL_414;
  }
  std::error_code v181 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v181)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    long long v182 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *std::error_code v181 = 10;
    long long v182 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v182;
  }
  if (*((void *)a2 + 3) - (void)v182 > 0xEuLL)
  {
    qmemcpy(v182, ".debug_line_str", 15);
    uint64_t v183 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v183;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_line_str", 0xFuLL);
    uint64_t v183 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v183) > 0xA)
  {
    *(_DWORD *)(v183 + 7) = 171602804;
    *(void *)uint64_t v183 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v184 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 128))(*((void *)v342 + 65));
  sub_1CC67AF3C((uint64_t)v376, v184, v185);
LABEL_414:
  uint64_t v186 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 312))(*((void *)v342 + 65));
  if ((v29 & 2) != 0) {
    char v187 = v30;
  }
  else {
    char v187 = 1;
  }
  char v337 = v30;
  if (v187)
  {
    if ((v29 & 2) == 0) {
      goto LABEL_468;
    }
  }
  else if (!*(void *)(v186 + 8))
  {
    goto LABEL_468;
  }
  unint64_t v188 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v188)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v189 = *((void *)a2 + 4);
  }
  else
  {
    *unint64_t v188 = 10;
    uint64_t v189 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v189;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v189) > 0xA)
  {
    *(_DWORD *)(v189 + 7) = 1919181921;
    *(void *)uint64_t v189 = *(void *)".debug_addr";
    uint64_t v190 = *((void *)a2 + 4) + 11;
    *((void *)a2 + 4) = v190;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_addr", 0xBuLL);
    uint64_t v190 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v190) > 0xA)
  {
    *(_DWORD *)(v190 + 7) = 171602804;
    *(void *)uint64_t v190 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v191 = *((void *)v342 + 65);
  unsigned int v192 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v191 + 312))(v191);
  char v193 = (*(uint64_t (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v367 = *v192;
  char v368 = v193;
  char v369 = 0;
  uint64_t v370 = v191;
  uint64_t v371 = v192;
  *(void *)&v433[14] = *(void *)((char *)a3 + 14);
  *(_OWORD *)uint64_t v433 = *(_OWORD *)a3;
  sub_1CC66D518((uint64_t)v434, v341);
  sub_1CC66D518((uint64_t)v436, v121);
  llvm::DWARFContext::parseNormalUnits((uint64_t)v342);
  int v194 = *((_DWORD *)v342 + 90);
  sub_1CC6821F8((uint64_t)v342, v480);
  int v195 = 0;
  if (*(void *)v480 != *(void *)&v481[0]) {
    int v195 = *(unsigned __int8 *)(**(void **)v480 + 34);
  }
  unint64_t v408 = 0;
  do
  {
    unint64_t v196 = v408;
    if (*((void *)&v367 + 1) <= v408) {
      break;
    }
    long long v403 = 0;
    long long v406 = 0;
    uint64_t v407 = 0;
    long long __p = 0;
    if (v437)
    {
      if (v437 == v436)
      {
        v485 = v484;
        (*(void (**)(void *, void *))(v436[0] + 24))(v436, v484);
      }
      else
      {
        v485 = (void *)(*(uint64_t (**)(void))(*v437 + 16))();
      }
    }
    else
    {
      v485 = 0;
    }
    llvm::DWARFDebugAddrTable::extract((llvm::DWARFDebugAddrTable *)&v402, (llvm::DWARFDataExtractor *)&v367, &v408, (unsigned __int16)v194, v195, (uint64_t)v484, &v401);
    if (v485 == v484)
    {
      (*(void (**)(void *))(v484[0] + 32))(v484);
    }
    else if (v485)
    {
      (*(void (**)(void))(*v485 + 40))();
    }
    if (v401)
    {
      uint64_t v400 = v401;
      uint64_t v401 = 0;
      if (!v435) {
        goto LABEL_802;
      }
      (*(void (**)(void *, uint64_t *))(*v435 + 48))(v435, &v400);
      if (v400) {
        (*(void (**)(uint64_t))(*(void *)v400 + 8))(v400);
      }
      if (v403)
      {
        if ((_BYTE)v402) {
          uint64_t v197 = 12;
        }
        else {
          uint64_t v197 = 4;
        }
        unint64_t v408 = (unint64_t)v403 + v196 + v197;
        int v198 = 2;
      }
      else
      {
        int v198 = 3;
      }
      if (v401) {
        (*(void (**)(uint64_t))(*(void *)v401 + 8))(v401);
      }
    }
    else
    {
      *(_OWORD *)int v480 = *(_OWORD *)v433;
      *(void *)&v480[14] = *(void *)&v433[14];
      if (v435)
      {
        if (v435 == v434)
        {
          *((void *)&v481[1] + 1) = v481;
          (*(void (**)(void *))(v434[0] + 24))(v434);
        }
        else
        {
          *((void *)&v481[1] + 1) = (*(uint64_t (**)(void))(*v435 + 16))();
        }
      }
      else
      {
        *((void *)&v481[1] + 1) = 0;
      }
      if (v437)
      {
        if (v437 == v436)
        {
          v483 = &v482;
          (*(void (**)(void *))(v436[0] + 24))(v436);
        }
        else
        {
          v483 = (uint64_t *)(*(uint64_t (**)(void))(*v437 + 16))();
        }
      }
      else
      {
        v483 = 0;
      }
      llvm::DWARFDebugAddrTable::dump((llvm::raw_ostream *)&v402, a2, (uint64_t)v480);
      sub_1CD5E15A8(v480);
      int v198 = 0;
    }
    if (__p)
    {
      long long v406 = __p;
      operator delete(__p);
    }
  }
  while (v198 != 3);
  sub_1CD5E15A8(v433);
  uint64_t v31 = (uint64_t)v342;
  int v29 = v335;
  char v30 = v337;
  uint64_t v121 = (uint64_t)(a3 + 7);
LABEL_468:
  uint64_t v199 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 144))(*(void *)(v31 + 520));
  if ((*(void *)&v29 & 0x10000) != 0) {
    char v200 = v30;
  }
  else {
    char v200 = 1;
  }
  if (v200)
  {
    if ((v29 & 0x10000) == 0) {
      goto LABEL_495;
    }
  }
  else if (!*(void *)(v199 + 8))
  {
    goto LABEL_495;
  }
  unint64_t v201 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v201)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    unsigned int v202 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *unint64_t v201 = 10;
    unsigned int v202 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v202;
  }
  if (*((void *)a2 + 3) - (void)v202 > 0xCuLL)
  {
    qmemcpy(v202, ".debug_ranges", 13);
    uint64_t v203 = *((void *)a2 + 4) + 13;
    *((void *)a2 + 4) = v203;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_ranges", 0xDuLL);
    uint64_t v203 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v203) > 0xA)
  {
    *(_DWORD *)(v203 + 7) = 171602804;
    *(void *)uint64_t v203 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  sub_1CC6821F8(v31, v480);
  if (*(void *)v480 == *(void *)&v481[0]) {
    char v204 = 0;
  }
  else {
    char v204 = *(unsigned char *)(**(void **)v480 + 34);
  }
  uint64_t v205 = *(void *)(v31 + 520);
  uint64_t v206 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v205 + 144))(v205);
  char v207 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  uint64_t v208 = v206[1];
  *(void *)int v480 = *v206;
  *(void *)&v480[8] = v208;
  v480[16] = v207;
  v480[17] = v204;
  *(void *)&v481[0] = v205;
  *((void *)&v481[0] + 1) = v206;
  *(void *)&long long v367 = 0;
  long long v404 = 0;
  long long v403 = 0;
  long long __p = 0;
  *(void *)&long long v402 = -1;
  BYTE8(v402) = 0;
  char v30 = v337;
  if (v208)
  {
    while (1)
    {
      llvm::DWARFDebugRangeList::extract((llvm::DWARFDebugRangeList *)&v402, (const llvm::DWARFDataExtractor *)v480, (unint64_t *)&v367, v484);
      if (v484[0]) {
        break;
      }
      llvm::DWARFDebugRangeList::dump((llvm::DWARFDebugRangeList *)&v402, a2);
      if (*(void *)&v480[8] <= (unint64_t)v367) {
        goto LABEL_493;
      }
    }
    uint64_t v366 = v484[0];
    v484[0] = 0;
    uint64_t v209 = a3[6];
    if (v209)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v209 + 48))(v209, &v366);
      if (v366) {
        (*(void (**)(uint64_t))(*(void *)v366 + 8))(v366);
      }
      if (v484[0]) {
        (*(void (**)(void))(*(void *)v484[0] + 8))(v484[0]);
      }
      goto LABEL_493;
    }
LABEL_802:
    sub_1CB920400();
  }
LABEL_493:
  if (v403)
  {
    long long v404 = v403;
    operator delete(v403);
  }
LABEL_495:
  *(void *)&long long v402 = v31;
  uint64_t v210 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 152))(*(void *)(v31 + 520));
  if ((*(void *)&v29 & 0x20000) != 0) {
    char v211 = v30;
  }
  else {
    char v211 = 1;
  }
  if (v211)
  {
    if ((v29 & 0x20000) == 0) {
      goto LABEL_509;
    }
  }
  else if (!*(void *)(v210 + 8))
  {
    goto LABEL_509;
  }
  uint64_t v212 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v212)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    int v213 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v212 = 10;
    int v213 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v213;
  }
  if (*((void *)a2 + 3) - (void)v213 > 0xEuLL)
  {
    qmemcpy(v213, ".debug_rnglists", 15);
    uint64_t v214 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v214;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_rnglists", 0xFuLL);
    uint64_t v214 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v214) > 0xA)
  {
    *(_DWORD *)(v214 + 7) = 171602804;
    *(void *)uint64_t v214 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v215 = *(void *)(v31 + 520);
  long long v216 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v215 + 152))(v215);
  char v217 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  *(_OWORD *)int v480 = *v216;
  v480[16] = v217;
  v480[17] = 0;
  *(void *)&v481[0] = v215;
  *((void *)&v481[0] + 1) = v216;
  *(void *)&v430[14] = *(void *)((char *)a3 + 14);
  *(_OWORD *)v430 = *(_OWORD *)a3;
  sub_1CC66D518((uint64_t)&v431, v341);
  sub_1CC66D518((uint64_t)&v432, v121);
  sub_1CC67B184(a2, (long long *)v480, (void *(*)(unsigned char *__return_ptr, uint64_t, void))sub_1CC683C24, (uint64_t)&v402, (uint64_t)v430);
  sub_1CD5E15A8(v430);
  char v30 = v337;
LABEL_509:
  uint64_t v218 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 304))(*(void *)(v31 + 520));
  char v219 = v344;
  if ((*(void *)&v29 & 0x20000) == 0) {
    char v219 = 1;
  }
  if (v219)
  {
    if ((v29 & 0x20000) == 0) {
      goto LABEL_522;
    }
  }
  else if (!*(void *)(v218 + 8))
  {
    goto LABEL_522;
  }
  uint64_t v220 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v220)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v221 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v220 = 10;
    uint64_t v221 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v221;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v221) > 0x12)
  {
    *(_DWORD *)(v221 + 15) = 1870095406;
    *(_OWORD *)uint64_t v221 = *(_OWORD *)".debug_rnglists.dwo";
    uint64_t v222 = *((void *)a2 + 4) + 19;
    *((void *)a2 + 4) = v222;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_rnglists.dwo", 0x13uLL);
    uint64_t v222 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v222) > 0xA)
  {
    *(_DWORD *)(v222 + 7) = 171602804;
    *(void *)uint64_t v222 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v223 = *(void *)(v31 + 520);
  unsigned int v224 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v223 + 304))(v223);
  char v225 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  *(_OWORD *)int v480 = *v224;
  v480[16] = v225;
  v480[17] = 0;
  *(void *)&v481[0] = v223;
  *((void *)&v481[0] + 1) = v224;
  *(void *)&v427[14] = *(void *)((char *)a3 + 14);
  *(_OWORD *)uint64_t v427 = *(_OWORD *)a3;
  sub_1CC66D518((uint64_t)&v428, v341);
  sub_1CC66D518((uint64_t)&v429, v121);
  sub_1CC67B184(a2, (long long *)v480, (void *(*)(unsigned char *__return_ptr, uint64_t, void))sub_1CC683C24, (uint64_t)&v402, (uint64_t)v427);
  sub_1CD5E15A8(v427);
  char v30 = v337;
LABEL_522:
  uint64_t v226 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 192))(*(void *)(v31 + 520));
  if ((v29 & 0x1000) != 0) {
    char v227 = v30;
  }
  else {
    char v227 = 1;
  }
  if (v227)
  {
    if ((v29 & 0x1000) == 0) {
      goto LABEL_536;
    }
  }
  else if (!*(void *)(v226 + 8))
  {
    goto LABEL_536;
  }
  unsigned int v228 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v228)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    unsigned int v229 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *unsigned int v228 = 10;
    unsigned int v229 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v229;
  }
  if (*((void *)a2 + 3) - (void)v229 > 0xEuLL)
  {
    qmemcpy(v229, ".debug_pubnames", 15);
    uint64_t v230 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v230;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_pubnames", 0xFuLL);
    uint64_t v230 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v230) > 0xA)
  {
    *(_DWORD *)(v230 + 7) = 171602804;
    *(void *)uint64_t v230 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v231 = *(void *)(v31 + 520);
  unsigned int v232 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v231 + 192))(v231);
  char v233 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  uint64_t v234 = *v232;
  uint64_t v235 = v232[1];
  *(_OWORD *)uint64_t v424 = *(_OWORD *)a3;
  *(void *)&v424[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v425, v341);
  uint64_t v31 = (uint64_t)v342;
  sub_1CC66D518((uint64_t)&v426, v340);
  v361[0] = v234;
  v361[1] = v235;
  char v362 = v233;
  char v363 = 0;
  uint64_t v364 = v231;
  v365 = v232;
  sub_1CC67B968(a2, (uint64_t)v424, (uint64_t)v361, 0);
  sub_1CD5E15A8(v424);
  char v30 = v337;
LABEL_536:
  uint64_t v236 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 200))(*(void *)(v31 + 520));
  if ((v29 & 0x2000) != 0) {
    char v237 = v30;
  }
  else {
    char v237 = 1;
  }
  if (v237)
  {
    if ((v29 & 0x2000) == 0) {
      goto LABEL_550;
    }
  }
  else if (!*(void *)(v236 + 8))
  {
    goto LABEL_550;
  }
  unsigned int v238 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v238)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    int v239 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *unsigned int v238 = 10;
    int v239 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v239;
  }
  if (*((void *)a2 + 3) - (void)v239 > 0xEuLL)
  {
    qmemcpy(v239, ".debug_pubtypes", 15);
    uint64_t v240 = *((void *)a2 + 4) + 15;
    *((void *)a2 + 4) = v240;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_pubtypes", 0xFuLL);
    uint64_t v240 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v240) > 0xA)
  {
    *(_DWORD *)(v240 + 7) = 171602804;
    *(void *)uint64_t v240 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v241 = *(void *)(v31 + 520);
  long long v242 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v241 + 200))(v241);
  char v243 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  uint64_t v244 = *v242;
  uint64_t v245 = v242[1];
  *(_OWORD *)uint64_t v421 = *(_OWORD *)a3;
  *(void *)&v421[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v422, v341);
  uint64_t v31 = (uint64_t)v342;
  sub_1CC66D518((uint64_t)&v423, v340);
  v356[0] = v244;
  v356[1] = v245;
  char v357 = v243;
  char v358 = 0;
  uint64_t v359 = v241;
  unsigned int v360 = v242;
  sub_1CC67B968(a2, (uint64_t)v421, (uint64_t)v356, 0);
  sub_1CD5E15A8(v421);
  char v30 = v337;
LABEL_550:
  uint64_t v246 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 208))(*(void *)(v31 + 520));
  if ((v29 & 0x4000) != 0) {
    char v247 = v30;
  }
  else {
    char v247 = 1;
  }
  if (v247)
  {
    if ((v29 & 0x4000) == 0) {
      goto LABEL_564;
    }
  }
  else if (!*(void *)(v246 + 8))
  {
    goto LABEL_564;
  }
  uint64_t v248 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v248)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v249 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v248 = 10;
    uint64_t v249 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v249;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v249) > 0x12)
  {
    *(_DWORD *)(v249 + 15) = 1936026977;
    *(_OWORD *)uint64_t v249 = *(_OWORD *)".debug_gnu_pubnames";
    uint64_t v250 = *((void *)a2 + 4) + 19;
    *((void *)a2 + 4) = v250;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_gnu_pubnames", 0x13uLL);
    uint64_t v250 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v250) > 0xA)
  {
    *(_DWORD *)(v250 + 7) = 171602804;
    *(void *)uint64_t v250 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v251 = *(void *)(v31 + 520);
  unsigned int v252 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v251 + 208))(v251);
  char v253 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  uint64_t v254 = *v252;
  uint64_t v255 = v252[1];
  *(_OWORD *)long long v418 = *(_OWORD *)a3;
  *(void *)&v418[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v419, v341);
  sub_1CC66D518((uint64_t)&v420, v340);
  v351[0] = v254;
  v351[1] = v255;
  uint64_t v31 = (uint64_t)v342;
  char v352 = v253;
  char v353 = 0;
  uint64_t v354 = v251;
  unsigned int v355 = v252;
  sub_1CC67B968(a2, (uint64_t)v418, (uint64_t)v351, 1);
  sub_1CD5E15A8(v418);
  char v30 = v337;
LABEL_564:
  uint64_t v256 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 216))(*(void *)(v31 + 520));
  if ((v29 & 0x8000) != 0) {
    char v257 = v30;
  }
  else {
    char v257 = 1;
  }
  if (v257)
  {
    if ((v29 & 0x8000) == 0) {
      goto LABEL_578;
    }
  }
  else if (!*(void *)(v256 + 8))
  {
    goto LABEL_578;
  }
  unsigned int v258 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v258)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v259 = *((void *)a2 + 4);
  }
  else
  {
    *unsigned int v258 = 10;
    uint64_t v259 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v259;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v259) > 0x12)
  {
    *(_DWORD *)(v259 + 15) = 1936027769;
    *(_OWORD *)uint64_t v259 = *(_OWORD *)".debug_gnu_pubtypes";
    uint64_t v260 = *((void *)a2 + 4) + 19;
    *((void *)a2 + 4) = v260;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_gnu_pubtypes", 0x13uLL);
    uint64_t v260 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v260) > 0xA)
  {
    *(_DWORD *)(v260 + 7) = 171602804;
    *(void *)uint64_t v260 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t v261 = *(void *)(v31 + 520);
  long long v262 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v261 + 216))(v261);
  char v263 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 40))(*(void *)(v31 + 520));
  uint64_t v264 = *v262;
  uint64_t v265 = v262[1];
  *(_OWORD *)long long v415 = *(_OWORD *)a3;
  *(void *)&v415[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v416, v341);
  sub_1CC66D518((uint64_t)&v417, v340);
  v346[0] = v264;
  v346[1] = v265;
  uint64_t v31 = (uint64_t)v342;
  char v347 = v263;
  char v348 = 0;
  uint64_t v349 = v261;
  unsigned int v350 = v262;
  sub_1CC67B968(a2, (uint64_t)v415, (uint64_t)v346, 1);
  sub_1CD5E15A8(v415);
  char v30 = v337;
LABEL_578:
  uint64_t v266 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 224))(*(void *)(v31 + 520));
  if ((*(void *)&v29 & 0x80000) != 0) {
    char v267 = v30;
  }
  else {
    char v267 = 1;
  }
  if (v267)
  {
    if ((v29 & 0x80000) == 0) {
      goto LABEL_592;
    }
  }
  else if (!*(void *)(v266 + 8))
  {
    goto LABEL_592;
  }
  unint64_t v268 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v268)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v269 = *((void *)a2 + 4);
  }
  else
  {
    *unint64_t v268 = 10;
    uint64_t v269 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v269;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v269) > 0x11)
  {
    *(_WORD *)(v269 + 16) = 29556;
    *(_OWORD *)uint64_t v269 = *(_OWORD *)".debug_str_offsets";
    uint64_t v270 = *((void *)a2 + 4) + 18;
    *((void *)a2 + 4) = v270;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_str_offsets", 0x12uLL);
    uint64_t v270 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v270) > 0xA)
  {
    *(_DWORD *)(v270 + 7) = 171602804;
    *(void *)uint64_t v270 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  *(_OWORD *)long long v412 = *(_OWORD *)a3;
  *(void *)&v412[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v413, v341);
  sub_1CC66D518((uint64_t)&v414, v340);
  uint64_t v271 = *(void *)(v31 + 520);
  unsigned __int32 v272 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v271 + 224))(v271);
  uint64_t v273 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 136))(*(void *)(v31 + 520));
  uint64_t v275 = v274;
  llvm::DWARFContext::parseNormalUnits(v31);
  unsigned int v276 = *(__n128 ***)(v31 + 16);
  unsigned int v277 = &v276[*(unsigned int *)(v31 + 24)];
  v278.n128_f64[0] = (*(double (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  long long v334 = v277;
  uint64_t v31 = (uint64_t)v342;
  sub_1CC67BA1C(a2, v278, (uint64_t)v412, "debug_str_offsets", 0x11uLL, v271, v272, v273, v275, v276, v334, v279);
  sub_1CD5E15A8(v412);
  char v30 = v337;
LABEL_592:
  uint64_t v280 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 288))(*(void *)(v31 + 520));
  char v281 = v344;
  if ((*(void *)&v29 & 0x80000) == 0) {
    char v281 = 1;
  }
  if (v281)
  {
    if ((v29 & 0x80000) == 0) {
      goto LABEL_605;
    }
  }
  else if (!*(void *)(v280 + 8))
  {
    goto LABEL_605;
  }
  int v282 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v282)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    long long v283 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *int v282 = 10;
    long long v283 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v283;
  }
  if (*((void *)a2 + 3) - (void)v283 > 0x15uLL)
  {
    qmemcpy(v283, ".debug_str_offsets.dwo", 22);
    uint64_t v284 = *((void *)a2 + 4) + 22;
    *((void *)a2 + 4) = v284;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_str_offsets.dwo", 0x16uLL);
    uint64_t v284 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v284) > 0xA)
  {
    *(_DWORD *)(v284 + 7) = 171602804;
    *(void *)uint64_t v284 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  *(_OWORD *)long long v409 = *(_OWORD *)a3;
  *(void *)&v409[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v410, v341);
  sub_1CC66D518((uint64_t)&v411, v340);
  uint64_t v285 = *(void *)(v31 + 520);
  unint64_t v286 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v285 + 288))(v285);
  uint64_t v287 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 280))();
  uint64_t v289 = v288;
  llvm::DWARFContext::parseDWOUnits((uint64_t)v342, 0);
  uint64_t v290 = (__n128 **)*((void *)v342 + 30);
  uint64_t v291 = &v290[*((unsigned int *)v342 + 62)];
  v292.n128_f64[0] = (*(double (**)(void))(**((void **)v342 + 65) + 40))(*((void *)v342 + 65));
  uint64_t v293 = v287;
  uint64_t v31 = (uint64_t)v342;
  sub_1CC67BA1C(a2, v292, (uint64_t)v409, "debug_str_offsets.dwo", 0x15uLL, v285, v286, v293, v289, v290, v291, v294);
  sub_1CD5E15A8(v409);
  char v30 = v337;
LABEL_605:
  (*(void (**)(void))(**(void **)(v31 + 520) + 368))(*(void *)(v31 + 520));
  if ((v29 & 0x4000000) != 0) {
    char v297 = v30;
  }
  else {
    char v297 = 1;
  }
  if (v297)
  {
    if ((v29 & 0x4000000) == 0) {
      goto LABEL_619;
    }
  }
  else if (!v295)
  {
    goto LABEL_619;
  }
  long long v298 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v298)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v299 = *((void *)a2 + 4);
  }
  else
  {
    *long long v298 = 10;
    uint64_t v299 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v299;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v299) > 9)
  {
    *(_WORD *)(v299 + 8) = 30821;
    *(void *)uint64_t v299 = *(void *)".gdb_index";
    uint64_t v300 = *((void *)a2 + 4) + 10;
    *((void *)a2 + 4) = v300;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".gdb_index", 0xAuLL);
    uint64_t v300 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v300) > 0xA)
  {
    *(_DWORD *)(v300 + 7) = 171602804;
    *(void *)uint64_t v300 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  GdbIndex = (llvm::DWARFGdbIndex *)llvm::DWARFContext::getGdbIndex((llvm::DWARFContext *)v31);
  v296.n128_f64[0] = llvm::DWARFGdbIndex::dump(GdbIndex, a2);
LABEL_619:
  uint64_t v302 = (*(uint64_t (**)(void, __n128))(**(void **)(v31 + 520) + 320))(*(void *)(v31 + 520), v296);
  if ((*(void *)&v29 & 0x400000) != 0) {
    char v303 = v30;
  }
  else {
    char v303 = 1;
  }
  if (v303)
  {
    if ((v29 & 0x400000) == 0) {
      goto LABEL_633;
    }
  }
  else if (!*(void *)(v302 + 8))
  {
    goto LABEL_633;
  }
  int v304 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v304)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v305 = *((void *)a2 + 4);
  }
  else
  {
    unsigned char *v304 = 10;
    uint64_t v305 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v305;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v305) > 0xB)
  {
    *(_DWORD *)(v305 + 8) = 1936026977;
    *(void *)uint64_t v305 = *(void *)".apple_names";
    uint64_t v306 = *((void *)a2 + 4) + 12;
    *((void *)a2 + 4) = v306;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".apple_names", 0xCuLL);
    uint64_t v306 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v306) > 0xA)
  {
    *(_DWORD *)(v306 + 7) = 171602804;
    *(void *)uint64_t v306 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t AppleNames = llvm::DWARFContext::getAppleNames((llvm::DWARFContext *)v31);
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)AppleNames + 24))(AppleNames, a2);
LABEL_633:
  uint64_t v308 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 328))(*(void *)(v31 + 520));
  if ((*(void *)&v29 & 0x800000) != 0) {
    char v309 = v30;
  }
  else {
    char v309 = 1;
  }
  if (v309)
  {
    if ((v29 & 0x800000) == 0) {
      goto LABEL_647;
    }
  }
  else if (!*(void *)(v308 + 8))
  {
    goto LABEL_647;
  }
  unsigned __int32 v310 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v310)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v311 = *((void *)a2 + 4);
  }
  else
  {
    *unsigned __int32 v310 = 10;
    uint64_t v311 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v311;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v311) > 0xB)
  {
    *(_DWORD *)(v311 + 8) = 1936027769;
    *(void *)uint64_t v311 = *(void *)".apple_types";
    uint64_t v312 = *((void *)a2 + 4) + 12;
    *((void *)a2 + 4) = v312;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".apple_types", 0xCuLL);
    uint64_t v312 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v312) > 0xA)
  {
    *(_DWORD *)(v312 + 7) = 171602804;
    *(void *)uint64_t v312 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t AppleTypes = llvm::DWARFContext::getAppleTypes((llvm::DWARFContext *)v31);
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)AppleTypes + 24))(AppleTypes, a2);
LABEL_647:
  uint64_t v314 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 336))(*(void *)(v31 + 520));
  if ((v29 & 0x1000000) != 0) {
    char v315 = v30;
  }
  else {
    char v315 = 1;
  }
  if (v315)
  {
    if ((v29 & 0x1000000) == 0) {
      goto LABEL_661;
    }
  }
  else if (!*(void *)(v314 + 8))
  {
    goto LABEL_661;
  }
  unsigned int v316 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v316)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v317 = *((void *)a2 + 4);
  }
  else
  {
    *unsigned int v316 = 10;
    uint64_t v317 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v317;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v317) > 0x10)
  {
    *(unsigned char *)(v317 + 16) = 115;
    *(_OWORD *)uint64_t v317 = *(_OWORD *)".apple_namespaces";
    uint64_t v318 = *((void *)a2 + 4) + 17;
    *((void *)a2 + 4) = v318;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".apple_namespaces", 0x11uLL);
    uint64_t v318 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v318) > 0xA)
  {
    *(_DWORD *)(v318 + 7) = 171602804;
    *(void *)uint64_t v318 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t AppleNamespaces = llvm::DWARFContext::getAppleNamespaces((llvm::DWARFContext *)v31);
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)AppleNamespaces + 24))(AppleNamespaces, a2);
LABEL_661:
  uint64_t v320 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 352))(*(void *)(v31 + 520));
  if ((v29 & 0x2000000) != 0) {
    char v321 = v30;
  }
  else {
    char v321 = 1;
  }
  if (v321)
  {
    if ((v29 & 0x2000000) == 0) {
      goto LABEL_675;
    }
  }
  else if (!*(void *)(v320 + 8))
  {
    goto LABEL_675;
  }
  unint64_t v322 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v322)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v323 = *((void *)a2 + 4);
  }
  else
  {
    unsigned char *v322 = 10;
    uint64_t v323 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v323;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v323) > 0xA)
  {
    *(_DWORD *)(v323 + 7) = 1667916399;
    *(void *)uint64_t v323 = *(void *)".apple_objc";
    uint64_t v324 = *((void *)a2 + 4) + 11;
    *((void *)a2 + 4) = v324;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".apple_objc", 0xBuLL);
    uint64_t v324 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v324) > 0xA)
  {
    *(_DWORD *)(v324 + 7) = 171602804;
    *(void *)uint64_t v324 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t AppleObjC = llvm::DWARFContext::getAppleObjC((llvm::DWARFContext *)v31);
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)AppleObjC + 24))(AppleObjC, a2);
LABEL_675:
  uint64_t v326 = (*(uint64_t (**)(void))(**(void **)(v31 + 520) + 344))(*(void *)(v31 + 520));
  if ((v29 & 0x800) != 0) {
    char v327 = v30;
  }
  else {
    char v327 = 1;
  }
  if (v327)
  {
    if ((v29 & 0x800) == 0) {
      return sub_1CD5E15A8(v475);
    }
  }
  else if (!*(void *)(v326 + 8))
  {
    return sub_1CD5E15A8(v475);
  }
  unsigned int v328 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v328)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v329 = *((void *)a2 + 4);
  }
  else
  {
    unsigned char *v328 = 10;
    uint64_t v329 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v329;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v329) > 0xB)
  {
    *(_DWORD *)(v329 + 8) = 1936026977;
    *(void *)uint64_t v329 = *(void *)".debug_names";
    uint64_t v330 = *((void *)a2 + 4) + 12;
    *((void *)a2 + 4) = v330;
  }
  else
  {
    llvm::raw_ostream::write(a2, ".debug_names", 0xCuLL);
    uint64_t v330 = *((void *)a2 + 4);
  }
  if ((unint64_t)(*((void *)a2 + 3) - v330) > 0xA)
  {
    *(_DWORD *)(v330 + 7) = 171602804;
    *(void *)uint64_t v330 = *(void *)" contents:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " contents:\n", 0xBuLL);
  }
  uint64_t DebugNames = llvm::DWARFContext::getDebugNames((llvm::DWARFContext *)v31);
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)DebugNames + 24))(DebugNames, a2);
  return sub_1CD5E15A8(v475);
}

llvm::raw_ostream **sub_1CC679D18(llvm::raw_ostream **result, char *__s, llvm::DWARFUnit **a3, llvm::DWARFUnit **a4)
{
  uint64_t v7 = result;
  v25[11] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *result;
  int v9 = (unsigned char *)*((void *)*result + 4);
  if ((unint64_t)v9 >= *((void *)*result + 3))
  {
    uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(*result, 10);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 10;
  }
  BOOL v10 = (void *)*((void *)v8 + 4);
  if (__s)
  {
    uint64_t result = (llvm::raw_ostream **)strlen(__s);
    uint64_t v11 = result;
    if ((unint64_t)result <= *((void *)v8 + 3) - (void)v10)
    {
      if (result)
      {
        uint64_t result = (llvm::raw_ostream **)memcpy(v10, __s, (size_t)result);
        BOOL v10 = (llvm::raw_ostream **)((char *)v11 + *((void *)v8 + 4));
        *((void *)v8 + 4) = v10;
      }
    }
    else
    {
      uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(v8, __s, (size_t)result);
      BOOL v10 = (void *)*((void *)v8 + 4);
    }
  }
  if (*((void *)v8 + 3) - (void)v10 > 0xAuLL)
  {
    *(_DWORD *)((char *)v10 + 7) = 171602804;
    *BOOL v10 = *(void *)" contents:\n";
    *((void *)v8 + 4) += 11;
  }
  else
  {
    uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(v8, " contents:\n", 0xBuLL);
  }
  uint64_t v12 = v7[1];
  if (*((unsigned char *)v12 + 56))
  {
    if (a3 != a4)
    {
      unint64_t v13 = *((void *)v12 + 6);
      do
      {
        uint64_t v14 = *a3++;
        v21[0] = (uint64_t)sub_1CD5E31EC(v14, v13);
        v21[1] = v15;
        unsigned int v16 = *v7;
        sub_1CC682480((uint64_t)v25, (uint64_t)v7[2]);
        llvm::DWARFDie::dump(v21, v16, 0, (uint64_t)v25);
        uint64_t result = (llvm::raw_ostream **)sub_1CD5E15A8(v25);
      }
      while (a3 != a4);
    }
  }
  else
  {
    for (; a3 != a4; uint64_t result = (llvm::raw_ostream **)sub_1CD5E15A8(v22))
    {
      uint64_t v17 = (uint64_t)*a3++;
      unint64_t v18 = *v7;
      uint64_t v19 = v7[2];
      uint64_t v20 = *(void *)((char *)v19 + 14);
      *(_OWORD *)long long v22 = *(_OWORD *)v19;
      *(void *)&v22[14] = v20;
      sub_1CC66D518((uint64_t)&v23, (uint64_t)v19 + 24);
      sub_1CC66D518((uint64_t)&v24, (uint64_t)v19 + 56);
      (*(void (**)(uint64_t, llvm::raw_ostream *, unsigned char *))(*(void *)v17 + 16))(v17, v18, v22);
    }
  }
  return result;
}

llvm::raw_ostream **sub_1CC679F5C(llvm::raw_ostream **result, char *__s, llvm::DWARFUnit **a3, llvm::DWARFUnit **a4)
{
  uint64_t v7 = result;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *result;
  int v9 = (unsigned char *)*((void *)*result + 4);
  if ((unint64_t)v9 >= *((void *)*result + 3))
  {
    uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(*result, 10);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 10;
  }
  BOOL v10 = (void *)*((void *)v8 + 4);
  if (__s)
  {
    uint64_t result = (llvm::raw_ostream **)strlen(__s);
    uint64_t v11 = result;
    if ((unint64_t)result <= *((void *)v8 + 3) - (void)v10)
    {
      if (result)
      {
        uint64_t result = (llvm::raw_ostream **)memcpy(v10, __s, (size_t)result);
        BOOL v10 = (llvm::raw_ostream **)((char *)v11 + *((void *)v8 + 4));
        *((void *)v8 + 4) = v10;
      }
    }
    else
    {
      uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(v8, __s, (size_t)result);
      BOOL v10 = (void *)*((void *)v8 + 4);
    }
  }
  if (*((void *)v8 + 3) - (void)v10 > 0xAuLL)
  {
    *(_DWORD *)((char *)v10 + 7) = 171602804;
    *BOOL v10 = *(void *)" contents:\n";
    *((void *)v8 + 4) += 11;
  }
  else
  {
    uint64_t result = (llvm::raw_ostream **)llvm::raw_ostream::write(v8, " contents:\n", 0xBuLL);
  }
  for (; a3 != a4; ++a3)
  {
    uint64_t v12 = v7[1];
    if (*((unsigned char *)v12 + 72))
    {
      v20[0] = (uint64_t)sub_1CD5E31EC(*a3, *((void *)v12 + 8));
      v20[1] = v18;
      uint64_t v19 = *v7;
      sub_1CC682480((uint64_t)v24, (uint64_t)v7[2]);
      llvm::DWARFDie::dump(v20, v19, 0, (uint64_t)v24);
      uint64_t v17 = v24;
    }
    else
    {
      unint64_t v13 = *a3;
      uint64_t v14 = *v7;
      uint64_t v15 = v7[2];
      uint64_t v16 = *(void *)((char *)v15 + 14);
      *(_OWORD *)size_t v21 = *(_OWORD *)v15;
      *(void *)&v21[14] = v16;
      sub_1CC66D518((uint64_t)&v22, (uint64_t)v15 + 24);
      sub_1CC66D518((uint64_t)&v23, (uint64_t)v15 + 56);
      (*(void (**)(llvm::DWARFUnit *, llvm::raw_ostream *, unsigned char *))(*(void *)v13 + 16))(v13, v14, v21);
      uint64_t v17 = v21;
    }
    uint64_t result = (llvm::raw_ostream **)sub_1CD5E15A8(v17);
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugLoc(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 18);
  if (!result)
  {
    llvm::DWARFContext::parseNormalUnits((uint64_t)this);
    int v3 = *((_DWORD *)this + 18);
    if (v3 == -1) {
      int v3 = *((_DWORD *)this + 6);
    }
    uint64_t v4 = (uint64_t *)*((void *)this + 65);
    uint64_t v5 = *v4;
    if (v3)
    {
      (*(void (**)(uint64_t *))(v5 + 80))(v4);
      (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
      llvm::DWARFContext::parseNormalUnits((uint64_t)this);
    }
    else
    {
      (*(void (**)(uint64_t *))(v5 + 40))(v4);
    }
    operator new();
  }
  return result;
}

llvm::raw_ostream *sub_1CC67A330(llvm::raw_ostream *result, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned __int8 a7)
{
  v60[4] = *MEMORY[0x1E4F143B8];
  unint64_t v51 = 0;
  if (*((void *)a3 + 1))
  {
    BOOL v10 = result;
    uint64_t v28 = a2 + 24;
    uint64_t v29 = a2 + 56;
    uint64_t v11 = a7;
    while (1)
    {
      unsigned int v47 = ".debug_loclists";
      uint64_t v48 = 15;
      unsigned int v49 = "locations";
      uint64_t v50 = 9;
      long long v12 = a3[1];
      v40[0] = *a3;
      v40[1] = v12;
      uint64_t v41 = *((void *)a3 + 4);
      uint64_t v42 = 0;
      llvm::DWARFListTableHeader::extract((uint64_t)&v42, (uint64_t)v40, &v51, &v32);
      if (v32) {
        break;
      }
      long long v37 = *a3;
      uint64_t v38 = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v58 = *(_OWORD *)a2;
      *(void *)&v58[14] = *(void *)(a2 + 14);
      sub_1CC66D518((uint64_t)&v59, v28);
      sub_1CC66D518((uint64_t)v60, v29);
      unint64_t v13 = v10;
      llvm::DWARFListTableHeader::dump(&v42, &v37, v10, (uint64_t)v58);
      uint64_t result = (llvm::raw_ostream *)sub_1CD5E15A8(v58);
      uint64_t v14 = 12;
      if (!v45) {
        uint64_t v14 = 4;
      }
      uint64_t v15 = v14 + v42;
      if (v42) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = v16 + v46;
      *((unsigned char *)a3 + 17) = v44;
      long long v18 = a3[1];
      long long v33 = *a3;
      long long v34 = v18;
      uint64_t v35 = *((void *)a3 + 4);
      uint64_t v32 = (llvm::raw_ostream *)&unk_1F2619120;
      __int16 v36 = v43;
      unint64_t v19 = v51;
      if (v11)
      {
        BOOL v10 = v13;
        if (a6 >= v51 && a6 < v17)
        {
          unint64_t v51 = a6;
          LOBYTE(v30) = 0;
          char v31 = 0;
          *(_OWORD *)uint64_t v55 = *(_OWORD *)a2;
          *(void *)&v55[14] = *(void *)(a2 + 14);
          sub_1CC66D518((uint64_t)&v56, v28);
          sub_1CC66D518((uint64_t)&v57, v29);
          LODWORD(v24) = 0;
          llvm::DWARFLocationTable::dumpLocationList((uint64_t)&v32, (uint64_t *)&v51, v13, &v30, a4, a5, 0, (uint64_t)v55, v24);
          uint64_t result = (llvm::raw_ostream *)sub_1CD5E15A8(v55);
          uint64_t v22 = (unsigned char *)*((void *)v13 + 4);
          if (*((unsigned char **)v13 + 3) == v22) {
            return llvm::raw_ostream::write(v13, "\n", 1uLL);
          }
          unsigned char *v22 = 10;
          ++*((void *)v13 + 4);
          return result;
        }
      }
      else
      {
        uint64_t v25 = v17 - v51;
        *(_OWORD *)uint64_t v52 = *(_OWORD *)a2;
        *(void *)&v52[14] = *(void *)(a2 + 14);
        sub_1CC66D518((uint64_t)&v53, v28);
        sub_1CC66D518((uint64_t)&v54, v29);
        unint64_t v20 = v19;
        BOOL v10 = v13;
        llvm::DWARFDebugLoclists::dumpRange((uint64_t)&v32, v20, v25, v13, a4, a5, (uint64_t)v52);
        uint64_t result = (llvm::raw_ostream *)sub_1CD5E15A8(v52);
      }
      unint64_t v51 = v17;
      if (*((void *)a3 + 1) <= v17) {
        return result;
      }
    }
    char v39 = v32;
    uint64_t v32 = 0;
    uint64_t v21 = *(void *)(a2 + 48);
    if (v21)
    {
      (*(void (**)(uint64_t, llvm::raw_ostream **))(*(void *)v21 + 48))(v21, &v39);
      if (v39) {
        (*(void (**)(llvm::raw_ostream *))(*(void *)v39 + 8))(v39);
      }
      uint64_t result = v32;
      if (v32) {
        return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v32 + 8))(v32);
      }
    }
    else
    {
      sub_1CB920400();
      return (llvm::raw_ostream *)llvm::DWARFContext::getDebugFrame(v23);
    }
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugFrame@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 168);
  if (!v3)
  {
    uint64_t v4 = this;
    (*(void (**)(void))(**(void **)(this + 520) + 104))(*(void *)(this + 520));
    (*(void (**)(void))(**(void **)(v4 + 520) + 40))(*(void *)(v4 + 520));
    (*(void (**)(void))(**(void **)(v4 + 520) + 48))(*(void *)(v4 + 520));
    uint64_t v5 = *(void *)(*(uint64_t (**)(void))(**(void **)(v4 + 520) + 24))(*(void *)(v4 + 520));
    (*(void (**)(void))(v5 + 376))();
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = v3;
  return this;
}

uint64_t llvm::DWARFContext::getEHFrame@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 176);
  if (!v3)
  {
    uint64_t v4 = this;
    (*(void (**)(void))(**(void **)(this + 520) + 112))(*(void *)(this + 520));
    (*(void (**)(void))(**(void **)(v4 + 520) + 40))(*(void *)(v4 + 520));
    (*(void (**)(void))(**(void **)(v4 + 520) + 48))(*(void *)(v4 + 520));
    uint64_t v5 = *(void *)(*(uint64_t (**)(void))(**(void **)(v4 + 520) + 24))(*(void *)(v4 + 520));
    (*(void (**)(void))(v5 + 376))();
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = v3;
  return this;
}

uint64_t llvm::DWARFContext::getDebugMacro(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 23);
  if (!result) {
    llvm::DWARFContext::parseMacroOrMacinfo((uint64_t)this, 2);
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugMacroDWO(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 44);
  if (!result) {
    llvm::DWARFContext::parseMacroOrMacinfo((uint64_t)this, 3);
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugMacinfo(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 24);
  if (!result) {
    llvm::DWARFContext::parseMacroOrMacinfo((uint64_t)this, 0);
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugMacinfoDWO(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 43);
  if (!result) {
    llvm::DWARFContext::parseMacroOrMacinfo((uint64_t)this, 1);
  }
  return result;
}

llvm::raw_ostream **sub_1CC67ADA0(llvm::raw_ostream **result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v8 = result;
    uint64_t v9 = a5;
    uint64_t v10 = a3 + 56;
    do
    {
      if (!v9 || *(void *)(a2 + 40) == a4)
      {
        uint64_t v11 = *v8;
        uint64_t v12 = *((void *)*v8 + 4);
        if ((unint64_t)(*((void *)*v8 + 3) - v12) > 0xA)
        {
          *(_DWORD *)(v12 + 7) = 1533374057;
          *(void *)uint64_t v12 = *(void *)"debug_line[";
          *((void *)v11 + 4) += 11;
        }
        else
        {
          uint64_t v11 = llvm::raw_ostream::write(v11, "debug_line[", 0xBuLL);
        }
        uint64_t v13 = *(void *)(a2 + 40);
        v17[0] = &unk_1F25FF808;
        v17[1] = "0x%8.8llx";
        void v17[2] = v13;
        uint64_t v14 = llvm::raw_ostream::operator<<(v11, (uint64_t)v17);
        uint64_t v15 = (_WORD *)*((void *)v14 + 4);
        if (*((void *)v14 + 3) - (void)v15 > 1uLL)
        {
          _WORD *v15 = 2653;
          *((void *)v14 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v14, "]\n", 2uLL);
        }
        llvm::DWARFDebugLine::SectionParser::parseNext(a2, (void (*)(void, void))sub_1CD5E3A98, v10, (void (*)(uint64_t, uint64_t *))sub_1CD5E3A98, v10, *v8, *(unsigned char *)(a3 + 20), (uint64_t)v16);
        uint64_t result = (llvm::raw_ostream **)sub_1CD5E35A8(v16);
      }
      else
      {
        uint64_t result = (llvm::raw_ostream **)llvm::DWARFDebugLine::SectionParser::skip(a2, (uint64_t)sub_1CD5E3A98, v10, (void (*)(uint64_t, uint64_t *))sub_1CD5E3A98, v10);
      }
    }
    while (!*(unsigned char *)(a2 + 48));
  }
  return result;
}

uint64_t sub_1CC67AF3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 520) + 40))(*(void *)(*(void *)a1 + 520));
  unint64_t v7 = 0;
  v22[0] = a2;
  v22[1] = a3;
  char v23 = result;
  char v24 = 0;
  unint64_t v21 = 0;
  while (a3 > v21)
  {
    uint64_t v20 = 0;
    CStrRef = (char *)llvm::DataExtractor::getCStrRef(v22, &v21, &v20);
    uint64_t v9 = v20;
    if (v20)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v19 = v20;
      uint64_t v20 = 0;
      uint64_t v11 = *(void *)(v10 + 80);
      if (!v11)
      {
        sub_1CB920400();
        return llvm::DWARFContext::getCUAddrSize(v17);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v19);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    else
    {
      uint64_t v12 = CStrRef;
      uint64_t v13 = *(llvm::raw_ostream **)(a1 + 16);
      v18[0] = &unk_1F25FF808;
      v18[1] = "0x%8.8llx: \"";
      void v18[2] = v7;
      llvm::raw_ostream::operator<<(v13, (uint64_t)v18);
      if (v12) {
        size_t v14 = strlen(v12);
      }
      else {
        size_t v14 = 0;
      }
      llvm::raw_ostream::write_escaped(*(llvm::raw_ostream **)(a1 + 16), v12, v14, 0);
      uint64_t v15 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v16 = (_WORD *)*((void *)v15 + 4);
      if (*((void *)v15 + 3) - (void)v16 > 1uLL)
      {
        *uint64_t v16 = 2594;
        *((void *)v15 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v15, "\"\n", 2uLL);
      }
      unint64_t v7 = v21;
    }
    uint64_t result = v20;
    if (v20) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    if (v9) {
      return result;
    }
  }
  return result;
}

uint64_t llvm::DWARFContext::getCUAddrSize(llvm::DWARFContext *this)
{
  sub_1CC6821F8((uint64_t)this, v2);
  if (v2[0] == v2[3]) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(*(void *)v2[0] + 34);
  }
}

void sub_1CC67B184(llvm::raw_ostream *a1, long long *a2, void *(*a3)(unsigned char *__return_ptr, uint64_t, void), uint64_t a4, uint64_t a5)
{
  v106[4] = *MEMORY[0x1E4F143B8];
  unint64_t v95 = 0;
  uint64_t v61 = a5 + 56;
  uint64_t v62 = a5 + 24;
  long long v65 = (char *)a2 + 18;
  char v66 = a2;
  do
  {
    unint64_t v5 = *((void *)a2 + 1);
    if (v5 <= v95) {
      break;
    }
    unint64_t v63 = v95;
    uint64_t v86 = ".debug_rnglists";
    uint64_t v87 = 15;
    uint64_t v88 = "range";
    uint64_t v89 = 5;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v90 = &v91;
    uint64_t v93 = "ranges:";
    size_t v94 = 7;
    uint64_t v6 = *(void *)a2;
    int v7 = *((unsigned __int8 *)a2 + 16);
    char v8 = *((unsigned char *)a2 + 17);
    v102[0] = *(_OWORD *)v65;
    *(void *)((char *)v102 + 14) = *(void *)(v65 + 14);
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    sub_1CD5E3788((uint64_t)&v90, 0);
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v90 = &v91;
    uint64_t v74 = v6;
    *(void *)char v105 = v6;
    *(void *)&v105[8] = v5;
    v105[16] = v7;
    v105[17] = v8;
    *(_OWORD *)&v105[18] = v102[0];
    *(void *)&char v105[32] = *(void *)((char *)v102 + 14);
    llvm::DWARFListTableHeader::extract((uint64_t)&v82, (uint64_t)v105, &v95, &v81);
    uint64_t v9 = v81;
    if (!v81)
    {
      char v73 = BYTE2(v83);
      uint64_t v10 = 12;
      if (!v84) {
        uint64_t v10 = 4;
      }
      uint64_t v11 = v10 + v82;
      if (v82) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v5 >= v12 + v85) {
        unint64_t v13 = v12 + v85;
      }
      else {
        unint64_t v13 = v5;
      }
      BOOL v72 = v7 != 0;
      unint64_t v71 = v13;
      while (2)
      {
        unint64_t v14 = v95;
        if (v13 <= v95)
        {
          uint64_t v81 = 0;
          goto LABEL_61;
        }
        memset(v105, 0, 24);
        *(void *)uint64_t v103 = v74;
        *(void *)&v103[8] = v13;
        v103[16] = v72;
        v103[17] = v73;
        *(_OWORD *)&v103[18] = v102[0];
        *(void *)&char v103[32] = *(void *)((char *)v102 + 14);
        sub_1CD5E3648((uint64_t)v105, (uint64_t)v103, v85, (uint64_t *)&v95, (uint64_t)v86, (uint64_t)v88, &v81);
        uint64_t v15 = v81;
        if (v81) {
          goto LABEL_48;
        }
        uint64_t v16 = v91;
        unint64_t v17 = &v91;
        long long v18 = &v91;
        if (v91)
        {
          while (1)
          {
            while (1)
            {
              long long v18 = (uint64_t **)v16;
              unint64_t v19 = v16[4];
              if (v19 <= v14) {
                break;
              }
              uint64_t v16 = *v18;
              unint64_t v17 = v18;
              if (!*v18) {
                goto LABEL_22;
              }
            }
            if (v19 >= v14) {
              break;
            }
            uint64_t v16 = v18[1];
            if (!v16)
            {
              unint64_t v17 = v18 + 1;
              goto LABEL_22;
            }
          }
        }
        else
        {
LABEL_22:
          uint64_t v20 = (uint64_t *)v18;
          long long v18 = (uint64_t **)operator new(0x40uLL);
          *long long v18 = 0;
          v18[1] = 0;
          void v18[4] = (uint64_t *)v14;
          v18[5] = 0;
          v18[6] = 0;
          v18[7] = 0;
          void v18[2] = v20;
          *unint64_t v17 = (uint64_t *)v18;
          unint64_t v21 = (uint64_t *)v18;
          if (*v90)
          {
            uint64_t v90 = (uint64_t **)*v90;
            unint64_t v21 = *v17;
          }
          sub_1CB8358B8(v91, v21);
          ++v92;
          unint64_t v13 = v71;
        }
        if (v18 + 5 == (uint64_t **)v105) {
          goto LABEL_48;
        }
        char v23 = *(unsigned char **)&v105[8];
        uint64_t v22 = *(char **)v105;
        size_t __n = *(void *)&v105[8] - *(void *)v105;
        unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v105[8] - *(void *)v105) >> 3);
        uint64_t v25 = (uint64_t)v18[7];
        char v26 = v18[5];
        if (0xCCCCCCCCCCCCCCCDLL * ((v25 - (uint64_t)v26) >> 3) < v24)
        {
          long long v67 = *(const void **)&v105[8];
          uint64_t v68 = *(const void **)v105;
          if (v26)
          {
            v18[6] = v26;
            operator delete(v26);
            uint64_t v25 = 0;
            v18[5] = 0;
            v18[6] = 0;
            v18[7] = 0;
          }
          if (v24 > 0x666666666666666) {
            goto LABEL_104;
          }
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * (v25 >> 3);
          uint64_t v28 = 2 * v27;
          if (2 * v27 <= v24) {
            uint64_t v28 = v24;
          }
          unint64_t v29 = v27 >= 0x333333333333333 ? 0x666666666666666 : v28;
          if (v29 > 0x666666666666666) {
LABEL_104:
          }
            abort();
          uint64_t v30 = 5 * v29;
          char v31 = (uint64_t *)operator new(40 * v29);
          char v26 = v31;
          v18[6] = v31;
          uint64_t v32 = v18 + 6;
          *(v32 - 1) = v31;
          v32[1] = &v31[v30];
          unint64_t v13 = v71;
          if (v67 != v68)
          {
            size_t v33 = __n;
            memcpy(v31, v68, __n);
            goto LABEL_47;
          }
LABEL_44:
          size_t v33 = __n;
LABEL_47:
          llvm::raw_ostream *v32 = (uint64_t *)((char *)v26 + v33);
LABEL_48:
          if (*(void *)v105)
          {
            *(void *)&v105[8] = *(void *)v105;
            operator delete(*(void **)v105);
          }
          if (v15)
          {
            uint64_t v9 = v81;
            if (v81) {
              goto LABEL_52;
            }
LABEL_61:
            long long v78 = *v66;
            long long v79 = v66[1];
            *(_OWORD *)size_t v99 = *(_OWORD *)a5;
            *(void *)&v99[14] = *(void *)(a5 + 14);
            sub_1CC66D518((uint64_t)v100, v62);
            sub_1CC66D518((uint64_t)v101, v61);
            long long v97 = v78;
            uint64_t v98 = v79;
            *(_OWORD *)char v105 = *(_OWORD *)v99;
            *(void *)&v105[14] = *(void *)&v99[14];
            sub_1CC66D518((uint64_t)&v105[24], (uint64_t)v100);
            sub_1CC66D518((uint64_t)v106, (uint64_t)v101);
            char v44 = a1;
            llvm::DWARFListTableHeader::dump(&v82, &v97, a1, (uint64_t)v105);
            sub_1CD5E15A8(v105);
            size_t v45 = v94;
            uint64_t v46 = (unsigned char *)*((void *)a1 + 4);
            if (v94 <= *((void *)a1 + 3) - (void)v46)
            {
              if (v94)
              {
                memcpy(v46, v93, v94);
                char v44 = a1;
                uint64_t v46 = (unsigned char *)(*((void *)a1 + 4) + v45);
                *((void *)a1 + 4) = v46;
              }
              else
              {
                char v44 = a1;
              }
            }
            else
            {
              llvm::raw_ostream::write(a1, v93, v94);
              uint64_t v46 = (unsigned char *)*((void *)a1 + 4);
            }
            if (*((unsigned char **)v44 + 3) == v46)
            {
              llvm::raw_ostream::write(v44, "\n", 1uLL);
            }
            else
            {
              *uint64_t v46 = 10;
              ++*((void *)v44 + 4);
            }
            LOBYTE(v47) = 0;
            uint64_t v48 = (uint64_t *)v90;
            if (v99[20] && v90 != &v91)
            {
              unint64_t v47 = 0;
              unsigned int v49 = (uint64_t *)v90;
              do
              {
                for (uint64_t i = v49[5]; i != v49[6]; i += 40)
                {
                  unint64_t v51 = *(char *)(i + 8);
                  if (v51 > 7) {
                    unint64_t v52 = 0;
                  }
                  else {
                    unint64_t v52 = qword_1CFB1B810[v51];
                  }
                  if (v47 <= v52) {
                    unint64_t v47 = v52;
                  }
                }
                uint64_t v53 = (uint64_t *)v49[1];
                if (v53)
                {
                  do
                  {
                    uint64_t v54 = (uint64_t **)v53;
                    uint64_t v53 = (uint64_t *)*v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    uint64_t v54 = (uint64_t **)v49[2];
                    BOOL v55 = *v54 == v49;
                    unsigned int v49 = (uint64_t *)v54;
                  }
                  while (!v55);
                }
                unsigned int v49 = (uint64_t *)v54;
              }
              while (v54 != &v91);
            }
            unint64_t v96 = 0;
            if (v90 != &v91)
            {
              do
              {
                uint64_t v56 = (llvm::raw_ostream *)v48[5];
                uint64_t v57 = (llvm::raw_ostream *)v48[6];
                while (v56 != v57)
                {
                  unsigned __int8 v58 = BYTE2(v83);
                  *(_OWORD *)uint64_t v103 = *(_OWORD *)v99;
                  *(void *)&v103[14] = *(void *)&v99[14];
                  sub_1CC66D518((uint64_t)&v103[24], (uint64_t)v100);
                  sub_1CC66D518((uint64_t)&v104, (uint64_t)v101);
                  llvm::RangeListEntry::dump(v56, a1, v58, v47, &v96, (uint64_t)v103, a3, a4);
                  sub_1CD5E15A8(v103);
                  uint64_t v56 = (llvm::raw_ostream *)((char *)v56 + 40);
                }
                uint64_t v59 = (uint64_t *)v48[1];
                if (v59)
                {
                  do
                  {
                    char v60 = (uint64_t **)v59;
                    uint64_t v59 = (uint64_t *)*v59;
                  }
                  while (v59);
                }
                else
                {
                  do
                  {
                    char v60 = (uint64_t **)v48[2];
                    BOOL v55 = *v60 == v48;
                    uint64_t v48 = (uint64_t *)v60;
                  }
                  while (!v55);
                }
                uint64_t v48 = (uint64_t *)v60;
              }
              while (v60 != &v91);
            }
            sub_1CD5E15A8(v99);
LABEL_97:
            char v43 = 1;
            goto LABEL_98;
          }
          continue;
        }
        break;
      }
      uint64_t v35 = v18[6];
      uint64_t v32 = v18 + 6;
      long long v34 = v35;
      size_t v36 = (char *)v35 - (char *)v26;
      unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * (v35 - v26);
      if (v37 >= v24)
      {
        unint64_t v13 = v71;
        if (*(void *)&v105[8] == *(void *)v105) {
          goto LABEL_44;
        }
        long long v40 = v26;
        size_t v33 = *(void *)&v105[8] - *(void *)v105;
      }
      else
      {
        unint64_t v13 = v71;
        if (v34 != v26)
        {
          uint64_t v38 = v26;
          char v39 = *(unsigned char **)&v105[8];
          char v69 = *(char **)v105;
          memmove(v38, *(const void **)v105, v36);
          char v23 = v39;
          uint64_t v22 = v69;
          char v26 = *v32;
        }
        v22 += 40 * v37;
        size_t v33 = v23 - v22;
        if (v23 == v22) {
          goto LABEL_47;
        }
        long long v40 = v26;
      }
      memmove(v40, v22, v33);
      goto LABEL_47;
    }
LABEL_52:
    uint64_t v80 = v9;
    uint64_t v81 = 0;
    uint64_t v41 = *(void *)(a5 + 48);
    if (!v41) {
      sub_1CB920400();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v80);
    if (v80) {
      (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
    }
    if (v82)
    {
      uint64_t v42 = 12;
      if (!v84) {
        uint64_t v42 = 4;
      }
      if (v42 + v82)
      {
        unint64_t v95 = v42 + v82 + v63;
        goto LABEL_97;
      }
    }
    char v43 = 0;
LABEL_98:
    if (v81) {
      (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
    }
    sub_1CD5E3788((uint64_t)&v90, v91);
    a2 = v66;
  }
  while ((v43 & 1) != 0);
}

void sub_1CC67B968(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  unint64_t v13 = 0;
  char v15 = 0;
  uint64_t v14 = 0;
  long long v5 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a3 + 32);
  llvm::DWARFDebugPubTable::extract((char **)&__p, (uint64_t)v10, a4);
  llvm::DWARFDebugPubTable::dump((uint64_t **)&__p, a1);
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    int v7 = v13;
    char v8 = __p;
    if (v13 != __p)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 3);
        if (v9)
        {
          *((void *)v7 - 2) = v9;
          operator delete(v9);
        }
        v7 -= 56;
      }
      while (v7 != v6);
      char v8 = __p;
    }
    unint64_t v13 = v6;
    operator delete(v8);
  }
}

void sub_1CC67BA1C(llvm::raw_ostream *a1, __n128 a2, uint64_t a3, const void *a4, size_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, __n128 **a10, __n128 **a11, char a12)
{
  unint64_t v13 = a10;
  if (a10 == a11)
  {
    char v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    char v15 = 0;
    uint64_t v16 = 0;
    do
    {
      if ((*v13)[15].n128_u8[8])
      {
        uint64_t v17 = (uint64_t)&(*v13)[14];
        if (v15 >= (__n128 *)v16)
        {
          uint64_t v19 = ((char *)v15 - v14) >> 5;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 59) {
            abort();
          }
          if ((v16 - v14) >> 4 > v20) {
            unint64_t v20 = (v16 - v14) >> 4;
          }
          if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            if (v21 >> 59) {
              sub_1CB833614();
            }
            uint64_t v22 = (char *)operator new(32 * v21);
          }
          else
          {
            uint64_t v22 = 0;
          }
          a2 = *(__n128 *)v17;
          long long v23 = *(_OWORD *)(v17 + 16);
          unint64_t v24 = &v22[32 * v19];
          *(_OWORD *)unint64_t v24 = *(_OWORD *)v17;
          *((_OWORD *)v24 + 1) = v23;
          if (v15 == (__n128 *)v14)
          {
            unint64_t v27 = &v22[32 * v19];
          }
          else
          {
            uint64_t v25 = (__n128 *)&v22[32 * v19];
            do
            {
              a2 = v15[-2];
              __n128 v26 = v15[-1];
              unint64_t v27 = (char *)&v25[-2];
              v25[-2] = a2;
              v25[-1] = v26;
              v15 -= 2;
              v25 -= 2;
            }
            while (v15 != (__n128 *)v14);
          }
          uint64_t v16 = &v22[32 * v21];
          char v15 = (__n128 *)(v24 + 32);
          if (v14) {
            operator delete(v14);
          }
          uint64_t v14 = v27;
        }
        else
        {
          a2 = *(__n128 *)v17;
          __n128 v18 = (*v13)[15];
          __n128 *v15 = *(__n128 *)v17;
          v15[1] = v18;
          v15 += 2;
        }
      }
      ++v13;
    }
    while (v13 != a11);
  }
  unint64_t v28 = 126 - 2 * __clz(((char *)v15 - v14) >> 5);
  if (v15 == (__n128 *)v14) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  sub_1CC6827AC((unint64_t)v14, v15, v29, 1, a2);
  if (v15 != (__n128 *)v14)
  {
    for (uint64_t i = (__n128 *)(v14 + 32); i != v15; i += 2)
    {
      if (i[-1].n128_u8[8]) {
        BOOL v31 = i[1].n128_u8[8] == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (!v31 && i[-2].n128_u64[0] == i->n128_u64[0] && i[-2].n128_u64[1] == i->n128_u64[1])
      {
        uint64_t v32 = (char *)&i[-2];
        if (&i[-2] != v15)
        {
          while (1)
          {
            i += 2;
            if (i == v15) {
              break;
            }
            if (v32[24]) {
              BOOL v33 = i[1].n128_u8[8] == 0;
            }
            else {
              BOOL v33 = 1;
            }
            if (v33 || *(void *)v32 != i->n128_u64[0] || *((void *)v32 + 1) != i->n128_u64[1])
            {
              __n128 v34 = i[1];
              *((__n128 *)v32 + 2) = *i;
              *((__n128 *)v32 + 3) = v34;
              v32 += 32;
            }
          }
          if (v32 + 32 != (char *)v15) {
            char v15 = (__n128 *)(v32 + 32);
          }
        }
        break;
      }
    }
  }
  unint64_t v35 = a7[1];
  v79[0] = *a7;
  v79[1] = v35;
  unint64_t v64 = v35;
  char v80 = a12;
  char v81 = 0;
  uint64_t v82 = a6;
  uint64_t v83 = a7;
  v76[0] = a8;
  v76[1] = a9;
  char v77 = a12;
  char v78 = 0;
  unint64_t v75 = 0;
  if (v14 != (char *)v15)
  {
    unint64_t v36 = 0;
    unint64_t v37 = (__n128 *)v14;
    while (1)
    {
      if (!v37[1].n128_u8[8])
      {
        char v60 = (void *)*((void *)a1 + 4);
        if (*((void *)a1 + 3) - (void)v60 > 0x3FuLL)
        {
          qmemcpy(v60, "error: invalid contribution to string offsets table in section .", 64);
          uint64_t v61 = (_WORD *)(*((void *)a1 + 4) + 64);
          *((void *)a1 + 4) = v61;
        }
        else
        {
          llvm::raw_ostream::write(a1, "error: invalid contribution to string offsets table in section .", 0x40uLL);
          uint64_t v61 = (_WORD *)*((void *)a1 + 4);
        }
        if (a5 <= *((void *)a1 + 3) - (void)v61)
        {
          if (a5)
          {
            memcpy(v61, a4, a5);
            uint64_t v61 = (_WORD *)(*((void *)a1 + 4) + a5);
            *((void *)a1 + 4) = v61;
          }
        }
        else
        {
          llvm::raw_ostream::write(a1, (const char *)a4, a5);
          uint64_t v61 = (_WORD *)*((void *)a1 + 4);
        }
        if (*((void *)a1 + 3) - (void)v61 <= 1uLL)
        {
          llvm::raw_ostream::write(a1, ".\n", 2uLL);
          goto LABEL_113;
        }
        *uint64_t v61 = 2606;
        uint64_t v62 = *((void *)a1 + 4) + 2;
LABEL_119:
        *((void *)a1 + 4) = v62;
        if (!v14) {
          return;
        }
        goto LABEL_114;
      }
      int v38 = v37[1].n128_u8[3];
      if (v37[1].n128_u8[3]) {
        int v39 = 16;
      }
      else {
        int v39 = 8;
      }
      __int16 v40 = v37[1].n128_i16[0];
      unint64_t v41 = v37->n128_u64[0];
      uint64_t v42 = -16;
      if (!v37[1].n128_u8[3]) {
        uint64_t v42 = -8;
      }
      if (v37[1].n128_u16[0] <= 4u) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = v42;
      }
      unint64_t v44 = v43 + v41;
      if (v36 > v43 + v41)
      {
        uint64_t v50 = std::generic_category();
        uint64_t v70 = (void *)a4;
        sub_1CD5E3960(22, (uint64_t)v50, (uint64_t)"overlapping contributions to string offsets table in section .%s.", (uint64_t *)&v70);
      }
      if (v36 < v44)
      {
        uint64_t v70 = &unk_1F25FF808;
        unint64_t v71 = "0x%8.8llx: Gap, length = ";
        unint64_t v72 = v36;
        size_t v45 = llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
        sub_1CD098D14(v45, v44 - v75, 0, 0, 0);
        uint64_t v46 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v46)
        {
          llvm::raw_ostream::write(a1, "\n", 1uLL);
        }
        else
        {
          *uint64_t v46 = 10;
          ++*((void *)a1 + 4);
        }
      }
      uint64_t v70 = &unk_1F25FF808;
      unint64_t v71 = "0x%8.8llx: ";
      unint64_t v72 = v44;
      llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
      uint64_t v47 = *((void *)a1 + 4);
      if ((unint64_t)(*((void *)a1 + 3) - v47) > 0x13)
      {
        *(_DWORD *)(v47 + 16) = 540876901;
        *(_OWORD *)uint64_t v47 = *(_OWORD *)"Contribution size = ";
        *((void *)a1 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(a1, "Contribution size_t size = ", 0x14uLL);
      }
      sub_1CD098D14(a1, v37->n128_u64[1] + 4 * (v40 > 4u), 0, 0, 0);
      uint64_t v48 = *((void *)a1 + 4);
      if ((unint64_t)(*((void *)a1 + 3) - v48) > 0xA)
      {
        *(_DWORD *)(v48 + 7) = 540876916;
        *(void *)uint64_t v48 = *(void *)", Format = ";
        *((void *)a1 + 4) += 11;
        if (!v38)
        {
LABEL_75:
          unsigned int v49 = "DWARF32";
          goto LABEL_76;
        }
      }
      else
      {
        llvm::raw_ostream::write(a1, ", Format = ", 0xBuLL);
        if (!v38) {
          goto LABEL_75;
        }
      }
      if (v38 != 1) {
        goto LABEL_78;
      }
      unsigned int v49 = "DWARF64";
LABEL_76:
      unint64_t v51 = (_DWORD *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v51 > 6uLL)
      {
        _DWORD *v51 = *(_DWORD *)v49;
        *(_DWORD *)((char *)v51 + 3) = *(_DWORD *)(v49 + 3);
        uint64_t v52 = *((void *)a1 + 4) + 7;
        *((void *)a1 + 4) = v52;
        goto LABEL_80;
      }
      llvm::raw_ostream::write(a1, v49, 7uLL);
LABEL_78:
      uint64_t v52 = *((void *)a1 + 4);
LABEL_80:
      if ((unint64_t)(*((void *)a1 + 3) - v52) > 0xB)
      {
        *(_DWORD *)(v52 + 8) = 540876910;
        *(void *)uint64_t v52 = *(void *)", Version = ";
        *((void *)a1 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(a1, ", Version = ", 0xCuLL);
      }
      sub_1CD098D14(a1, v40, 0, 0, 0);
      uint64_t v53 = (unsigned char *)*((void *)a1 + 4);
      if (*((unsigned char **)a1 + 3) == v53)
      {
        llvm::raw_ostream::write(a1, "\n", 1uLL);
      }
      else
      {
        unsigned char *v53 = 10;
        ++*((void *)a1 + 4);
      }
      unint64_t v36 = v37->n128_u64[0];
      unint64_t v54 = v37->n128_u64[1];
      unint64_t v75 = v37->n128_u64[0];
      if (v37[1].n128_u8[3]) {
        int v55 = 8;
      }
      else {
        int v55 = 4;
      }
      if (v36 - v37->n128_u64[0] < v54)
      {
        do
        {
          uint64_t v70 = &unk_1F25FF808;
          unint64_t v71 = "0x%8.8llx: ";
          unint64_t v72 = v36;
          llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
          unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v79, v55, &v75, 0, 0);
          unint64_t v74 = RelocatedValue;
          uint64_t v70 = &unk_1F2618A68;
          unint64_t v71 = "%0*llx ";
          LODWORD(v72) = v39;
          llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
          CStrRef = llvm::DataExtractor::getCStrRef(v76, &v74, 0);
          if (CStrRef)
          {
            uint64_t v70 = &unk_1F25FF060;
            unint64_t v71 = "\"%s\"";
            unint64_t v72 = (unint64_t)CStrRef;
            llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
          }
          uint64_t v57 = (unsigned char *)*((void *)a1 + 4);
          if (*((unsigned char **)a1 + 3) == v57)
          {
            llvm::raw_ostream::write(a1, "\n", 1uLL);
          }
          else
          {
            *uint64_t v57 = 10;
            ++*((void *)a1 + 4);
          }
          unint64_t v36 = v75;
        }
        while (v75 - v37->n128_u64[0] < v37->n128_u64[1]);
      }
      v37 += 2;
      if (v37 == v15) {
        goto LABEL_101;
      }
    }
  }
  unint64_t v36 = 0;
LABEL_101:
  if (v36 >= v64)
  {
LABEL_113:
    if (!v14) {
      return;
    }
    goto LABEL_114;
  }
  uint64_t v70 = &unk_1F25FF808;
  unint64_t v71 = "0x%8.8llx: Gap, length = ";
  unint64_t v72 = v36;
  unsigned __int8 v58 = llvm::raw_ostream::operator<<(a1, (uint64_t)&v70);
  sub_1CD098D14(v58, v64 - v75, 0, 0, 0);
  uint64_t v59 = (unsigned char *)*((void *)a1 + 4);
  if (*((unsigned char **)a1 + 3) != v59)
  {
    *uint64_t v59 = 10;
    uint64_t v62 = *((void *)a1 + 4) + 1;
    goto LABEL_119;
  }
  llvm::raw_ostream::write(a1, "\n", 1uLL);
  if (v14) {
LABEL_114:
  }
    operator delete(v14);
}

uint64_t llvm::DWARFContext::getGdbIndex(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    (*(void (**)(void))(**((void **)this + 65) + 368))(*((void *)this + 65));
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::getAppleNames(llvm::DWARFContext *this)
{
  int v2 = (uint64_t *)((char *)this + 208);
  (*(void (**)(void))(**((void **)this + 65) + 320))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 136))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));

  return sub_1CC67CFC4(v2);
}

uint64_t llvm::DWARFContext::getAppleTypes(llvm::DWARFContext *this)
{
  int v2 = (uint64_t *)((char *)this + 216);
  (*(void (**)(void))(**((void **)this + 65) + 328))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 136))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));

  return sub_1CC67CFC4(v2);
}

uint64_t llvm::DWARFContext::getAppleNamespaces(llvm::DWARFContext *this)
{
  int v2 = (uint64_t *)((char *)this + 224);
  (*(void (**)(void))(**((void **)this + 65) + 336))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 136))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));

  return sub_1CC67CFC4(v2);
}

uint64_t llvm::DWARFContext::getAppleObjC(llvm::DWARFContext *this)
{
  int v2 = (uint64_t *)((char *)this + 232);
  (*(void (**)(void))(**((void **)this + 65) + 352))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 136))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));

  return sub_1CC67CFC4(v2);
}

uint64_t llvm::DWARFContext::getDebugNames(llvm::DWARFContext *this)
{
  (*(void (**)(void))(**((void **)this + 65) + 344))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 136))(*((void *)this + 65));
  (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
  uint64_t result = *((void *)this + 25);
  if (!result) {
    operator new();
  }
  return result;
}

const llvm::DWARFUnitIndex::Entry *llvm::DWARFContext::getTypeUnitForHash(llvm::DWARFContext *this, unsigned __int16 a2, uint64_t a3, int a4)
{
  uint64_t v19 = a3;
  llvm::DWARFContext::parseDWOUnits((uint64_t)this, 1);
  TUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getTUIndex(this);
  if (*((_DWORD *)TUIndex + 3))
  {
    uint64_t result = (const llvm::DWARFUnitIndex::Entry *)llvm::DWARFUnitIndex::getFromHash(TUIndex, a3);
    if (result)
    {
      uint64_t result = (const llvm::DWARFUnitIndex::Entry *)llvm::DWARFUnitVector::getUnitForIndexEntry((llvm::DWARFContext *)((char *)this + 240), result);
      if (result)
      {
        if ((*((unsigned char *)result + 96) & 0xFB) != 2) {
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 80;
    if (a4) {
      uint64_t v8 = 304;
    }
    uint64_t v9 = (char *)this + v8;
    if (!*((unsigned char *)this + v8 + 24))
    {
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      v9[24] = 1;
      if (a4)
      {
        llvm::DWARFContext::parseDWOUnits((uint64_t)this, 0);
        uint64_t v10 = (char *)this + 240;
        uint64_t v11 = (char *)this + 248;
      }
      else
      {
        llvm::DWARFContext::parseNormalUnits((uint64_t)this);
        uint64_t v10 = (char *)this + 16;
        uint64_t v11 = (char *)this + 24;
      }
      uint64_t v13 = *(unsigned int *)v11;
      if (v13)
      {
        uint64_t v14 = *(uint64_t **)v10;
        uint64_t v15 = 8 * v13;
        do
        {
          uint64_t v16 = *v14;
          if (*v14) {
            BOOL v17 = (*(unsigned char *)(*v14 + 96) & 0xFB) == 2;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17)
          {
            uint64_t v18 = *(void *)(v16 + 64);
            sub_1CD5E3BA8((uint64_t)v9, &v18)[1] = v16;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
    }
    return (const llvm::DWARFUnitIndex::Entry *)sub_1CD5E3BA8((uint64_t)v9, &v19)[1];
  }
  return result;
}

llvm::DWARFUnit *llvm::DWARFContext::getDWOCompileUnitForHash(llvm::DWARFContext *this, uint64_t a2)
{
  llvm::DWARFContext::parseDWOUnits((uint64_t)this, 1);
  unint64_t CUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getCUIndex(this);
  if (*((_DWORD *)CUIndex + 3))
  {
    uint64_t result = (llvm::DWARFUnit *)llvm::DWARFUnitIndex::getFromHash(CUIndex, a2);
    if (result)
    {
      uint64_t result = (llvm::DWARFUnit *)llvm::DWARFUnitVector::getUnitForIndexEntry((llvm::DWARFContext *)((char *)this + 240), result);
      if (result)
      {
        if ((*((unsigned char *)result + 96) & 0xFB) == 2) {
          return 0;
        }
      }
    }
  }
  else
  {
    sub_1CC67CD38(v22, this);
    long long v5 = (llvm::DWARFUnit **)v22[0];
    uint64_t v6 = v23;
    if ((llvm::DWARFUnit **)v22[0] == v23)
    {
      return 0;
    }
    else
    {
      int v7 = (llvm::DWARFUnit **)v22[1];
      uint64_t v8 = (unsigned int (*)(llvm::DWARFUnit **))v22[2];
      while (1)
      {
        uint64_t v9 = *v5;
        llvm::DWARFUnit::extractDIEsIfNeeded(*v5, 1);
        uint64_t v10 = *v5;
        if (*((unsigned char *)v9 + 88)) {
          break;
        }
        llvm::DWARFUnit::extractDIEsIfNeeded(*v5, 1);
        uint64_t v11 = (llvm::DWARFUnit *)*((void *)v10 + 36);
        uint64_t v12 = (llvm::DWARFUnit *)*((void *)v10 + 37);
        BOOL v13 = v11 == v12;
        if (v11 == v12) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = v10;
        }
        if (v13) {
          uint64_t v11 = 0;
        }
        v20[0] = v14;
        v20[1] = v11;
        llvm::DWARFDie::find(v20, 8497, v21);
        if (v21[48])
        {
          unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v21);
          if (v16)
          {
            uint64_t v10 = *v5;
            int v17 = *((unsigned __int8 *)*v5 + 88);
            *((void *)*v5 + 10) = AsUnsignedConstant;
            if (v17) {
              uint64_t v10 = *v5;
            }
            else {
              *((unsigned char *)v10 + 88) = 1;
            }
            break;
          }
        }
LABEL_19:
        while (++v5 != v7)
        {
          if (v8(v5)) {
            goto LABEL_23;
          }
        }
        long long v5 = v7;
LABEL_23:
        if (v5 == v6) {
          return 0;
        }
      }
      llvm::DWARFUnit::extractDIEsIfNeeded(v10, 1);
      if (*((unsigned char *)v10 + 88)) {
        BOOL v18 = *((void *)v10 + 10) == a2;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18) {
        goto LABEL_19;
      }
      if ((*((unsigned char *)*v5 + 96) & 0xFB) == 2) {
        return 0;
      }
      else {
        return *v5;
      }
    }
  }
  return result;
}

uint64_t sub_1CC67CD38(void *a1, llvm::DWARFContext *this)
{
  uint64_t result = llvm::DWARFContext::parseDWOUnits((uint64_t)this, 0);
  uint64_t v5 = *((void *)this + 30);
  unsigned int v6 = *((_DWORD *)this + 74);
  if (v6 == -1) {
    unsigned int v6 = *((_DWORD *)this + 62);
  }
  uint64_t v7 = v5 + 8 * v6;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    while ((*(unsigned char *)(*(void *)v5 + 96) & 0xFB) == 2)
    {
      v5 += 8;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v5 = v7;
        break;
      }
    }
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = sub_1CC6838D8;
  a1[3] = v7;
  a1[4] = v7;
  a1[5] = sub_1CC6838D8;
  return result;
}

llvm::DWARFUnit *llvm::DWARFContext::getDIEForOffset(uint64_t **this, unint64_t a2)
{
  llvm::DWARFContext::parseNormalUnits((uint64_t)this);
  uint64_t result = (llvm::DWARFUnit *)llvm::DWARFUnitVector::getUnitForOffset(this + 2, a2);
  if (result) {
    return sub_1CD5E31EC(result, a2);
  }
  return result;
}

uint64_t llvm::DWARFContext::verify(uint64_t a1, uint64_t a2, int *a3)
{
  v14[12] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
  *(void *)&v10[14] = *(void *)((char *)a3 + 14);
  sub_1CC66D518((uint64_t)&v11, (uint64_t)(a3 + 6));
  sub_1CC66D518((uint64_t)&v12, (uint64_t)(a3 + 14));
  llvm::DWARFVerifier::DWARFVerifier((uint64_t)v13, a2, a1, (long long *)v10);
  sub_1CD5E15A8(v10);
  int v6 = llvm::DWARFVerifier::handleDebugAbbrev(v13);
  int v7 = *a3;
  if ((*a3 & 8) != 0)
  {
    v6 &= llvm::DWARFVerifier::handleDebugInfo((llvm::DWARFVerifier *)v13);
    int v7 = *a3;
  }
  if ((v7 & 0x20) != 0) {
    v6 &= llvm::DWARFVerifier::handleDebugLine((llvm::DWARFVerifier *)v13);
  }
  BOOL v8 = llvm::DWARFVerifier::handleAccelTables((llvm::DWARFVerifier *)v13);
  sub_1CD5E15A8(v14);
  return v6 & v8;
}

uint64_t llvm::DWARFContext::getDebugAranges(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 19);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t sub_1CC67CFC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::getCompileUnitForOffset(uint64_t **this, unint64_t a2)
{
  llvm::DWARFContext::parseNormalUnits((uint64_t)this);
  uint64_t result = llvm::DWARFUnitVector::getUnitForOffset(this + 2, a2);
  if (result)
  {
    if ((*(unsigned char *)(result + 96) & 0xFB) == 2) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::DWARFContext::getCompileUnitForAddress(uint64_t **this, unint64_t a2)
{
  DebugAranges = (llvm::DWARFDebugAranges *)llvm::DWARFContext::getDebugAranges((llvm::DWARFContext *)this);
  unint64_t Address = llvm::DWARFDebugAranges::findAddress(DebugAranges, a2);
  llvm::DWARFContext::parseNormalUnits((uint64_t)this);
  uint64_t result = llvm::DWARFUnitVector::getUnitForOffset(this + 2, Address);
  if (result)
  {
    if ((*(unsigned char *)(result + 96) & 0xFB) == 2) {
      return 0;
    }
  }
  return result;
}

void llvm::DWARFContext::getDIEsForAddress(uint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i = a2;
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  CompileUnitForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFContext::getCompileUnitForAddress(this, a2);
  if (!CompileUnitForAddress) {
    return;
  }
  unint64_t v63 = (_OWORD *)(a3 + 24);
  *(void *)a3 = CompileUnitForAddress;
  *(void *)(a3 + 8) = llvm::DWARFUnit::getSubroutineForAddress(CompileUnitForAddress, i);
  *(void *)(a3 + 16) = v6;
  int v7 = operator new(0x10uLL);
  _OWORD *v7 = *(_OWORD *)(a3 + 8);
  BOOL v8 = (uint64_t *)v7;
  long long v65 = (char *)(v7 + 1);
  uint64_t v9 = (char *)(v7 + 1);
  while (1)
  {
    long long v10 = *((_OWORD *)v9 - 1);
    v9 -= 16;
    long long v67 = v10;
    long long v11 = v10;
    if ((void)v10) {
      BOOL v12 = *((void *)&v10 + 1) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      goto LABEL_81;
    }
    uint64_t v13 = *(void *)(*((void *)&v10 + 1) + 16);
    if (v13)
    {
      if (*(_WORD *)(v13 + 4) == 11
        && llvm::DWARFDie::addressRangeContainsAddress((llvm::DWARFDie *)&v67, i))
      {
        break;
      }
    }
    uint64_t FirstChild = llvm::DWARFUnit::getFirstChild(v11, *((uint64_t *)&v11 + 1));
    uint64_t v16 = v15;
    uint64_t LastChild = llvm::DWARFUnit::getLastChild(v11, *((uint64_t *)&v11 + 1));
    if (v16 == v18 && FirstChild == LastChild) {
      goto LABEL_64;
    }
    uint64_t v20 = LastChild;
    uint64_t v21 = v18;
    unint64_t v64 = i;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v16;
    uint64_t v25 = FirstChild;
    do
    {
      uint64_t v26 = v25;
      uint64_t v25 = 0;
      if (v24)
      {
        uint64_t v27 = v24;
        uint64_t v24 = 0;
        if (v26)
        {
          unsigned int v28 = *(_DWORD *)(v27 + 12);
          if (v28)
          {
            uint64_t v24 = *(void *)(v26 + 288) + 24 * v28;
            uint64_t v25 = v26;
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v24 = 0;
          }
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      --v23;
      v22 += 16;
    }
    while (v24 != v18 || v25 != LastChild);
    uint64_t v29 = (char *)v7;
    uint64_t v30 = v9 - (char *)v7;
    uint64_t v31 = v30 >> 4;
    long long __p = v29;
    uint64_t v32 = (uint64_t *)&v29[v30 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v33 = ~v23;
    if (~v23 >= (v65 - v9) >> 4)
    {
      unint64_t v38 = v31 - v23;
      if (v38 >> 60) {
        abort();
      }
      if ((v65 - v29) >> 3 > v38) {
        unint64_t v38 = (v65 - v29) >> 3;
      }
      if ((unint64_t)(v65 - v29) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39)
      {
        if (v39 >> 60) {
          sub_1CB833614();
        }
        __int16 v40 = (char *)operator new(16 * v39);
        uint64_t v31 = v30 >> 4;
      }
      else
      {
        __int16 v40 = 0;
      }
      BOOL v8 = (uint64_t *)&v40[16 * v31];
      uint64_t v54 = 16 * v31;
      int v55 = &v8[v22 / 8];
      uint64_t v56 = v8;
      do
      {
        uint64_t v57 = 0;
        uint64_t *v56 = FirstChild;
        v56[1] = v16;
        uint64_t v58 = 0;
        if (FirstChild && v16)
        {
          unsigned int v59 = *(_DWORD *)(v16 + 12);
          if (v59)
          {
            uint64_t v58 = *(void *)(FirstChild + 288) + 24 * v59;
            uint64_t v57 = FirstChild;
          }
          else
          {
            uint64_t v57 = 0;
            uint64_t v58 = 0;
          }
        }
        v56 += 2;
        uint64_t v16 = v58;
        uint64_t FirstChild = v57;
      }
      while (v55 != v56);
      if ((unint64_t)v30 >= 0x10)
      {
        do
        {
          *(_OWORD *)&v40[v54 - 16] = *(_OWORD *)&__p[v54 - 16];
          v54 -= 16;
        }
        while (v54);
        BOOL v8 = (uint64_t *)v40;
      }
      size_t v60 = v9 - (char *)v32;
      if (v60)
      {
        uint64_t v61 = v31;
        memmove(v55, v32, v60);
        uint64_t v31 = v61;
      }
      long long v65 = &v40[16 * v39];
      uint64_t v9 = &v40[16 * v31 + (v60 & 0xFFFFFFFFFFFFFFF0) + v22];
      if (__p) {
        operator delete(__p);
      }
      int v7 = v8;
      unint64_t i = v64;
      goto LABEL_81;
    }
    uint64_t v62 = v30 >> 4;
    uint64_t v68 = FirstChild;
    uint64_t v69 = v16;
    sub_1CC683DC4(&v68, -v23);
    uint64_t v34 = v68;
    uint64_t v35 = v69;
    uint64_t v36 = (v9 - (char *)v32) >> 4;
    if (v36 > v33)
    {
      unint64_t v37 = v9;
LABEL_47:
      int64_t v47 = &v37[-16 * v62] - __p - v22;
      uint64_t v48 = (char *)v32 + v47;
      unsigned int v49 = v37;
      while (v48 < v9)
      {
        long long v50 = *(_OWORD *)v48;
        v48 += 16;
        *(_OWORD *)unsigned int v49 = v50;
        v49 += 16;
      }
      if (&__p[16 * v62 + v22] != v37) {
        memmove(&v37[-16 * (v47 >> 4)], v32, v47);
      }
      for (unint64_t i = v64; v16 != v35 || FirstChild != v34; v32 += 2)
      {
        uint64_t v51 = FirstChild;
        uint64_t *v32 = FirstChild;
        v32[1] = v16;
        uint64_t FirstChild = 0;
        if (v16)
        {
          uint64_t v52 = v16;
          uint64_t v16 = 0;
          if (v51)
          {
            unsigned int v53 = *(_DWORD *)(v52 + 12);
            if (v53)
            {
              uint64_t v16 = *(void *)(v51 + 288) + 24 * v53;
              uint64_t FirstChild = v51;
            }
            else
            {
              uint64_t FirstChild = 0;
              uint64_t v16 = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
      }
      unint64_t v37 = v49;
      goto LABEL_63;
    }
    uint64_t v68 = FirstChild;
    uint64_t v69 = v16;
    sub_1CC683DC4(&v68, v36);
    uint64_t v34 = v68;
    uint64_t v35 = v69;
    if (v69 != v21 || (unint64_t v37 = v9, v68 != v20))
    {
      unint64_t v37 = v9;
      uint64_t v41 = v69;
      uint64_t v42 = v68;
      uint64_t v43 = v9;
      do
      {
        uint64_t v44 = v42;
        *uint64_t v43 = v42;
        v43[1] = v41;
        uint64_t v42 = 0;
        if (v41)
        {
          uint64_t v45 = v41;
          uint64_t v41 = 0;
          if (v44)
          {
            unsigned int v46 = *(_DWORD *)(v45 + 12);
            if (v46)
            {
              uint64_t v41 = *(void *)(v44 + 288) + 24 * v46;
              uint64_t v42 = v44;
            }
            else
            {
              uint64_t v42 = 0;
              uint64_t v41 = 0;
            }
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        v37 += 16;
        v43 += 2;
      }
      while (v41 != v21 || v42 != v20);
    }
    if (v9 - (char *)v32 >= 1) {
      goto LABEL_47;
    }
    unint64_t i = v64;
LABEL_63:
    uint64_t v9 = v37;
    int v7 = __p;
LABEL_64:
    BOOL v8 = (uint64_t *)v7;
LABEL_81:
    if (v8 == (uint64_t *)v9) {
      goto LABEL_85;
    }
  }
  _OWORD *v63 = v67;
  uint64_t v9 = (char *)v7;
LABEL_85:
  if (v9)
  {
    operator delete(v9);
  }
}

void llvm::DWARFContext::addLocalsForDie(uint64_t a1, llvm::DWARFContext **a2, llvm::DWARFUnit *a3, uint64_t a4, llvm::DWARFUnit *a5, uint64_t a6, void **a7)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v113 = a3;
  uint64_t v114 = a4;
  size_t v111 = a5;
  uint64_t v112 = a6;
  uint64_t v9 = *(void *)(a6 + 16);
  if (!v9) {
    goto LABEL_5;
  }
  int v10 = *(unsigned __int16 *)(v9 + 4);
  if (v10 != 52)
  {
    if (v10 == 29)
    {
      AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v111, 49);
      if (AttributeValueAsReferencedDie && v46)
      {
        uint64_t v113 = AttributeValueAsReferencedDie;
        uint64_t v114 = v46;
      }
      goto LABEL_5;
    }
    if (v10 != 5)
    {
LABEL_5:
      uint64_t LastChild = v111;
      if (v111)
      {
        uint64_t v12 = v112;
        uint64_t v13 = a7;
        if (v112)
        {
          uint64_t FirstChild = llvm::DWARFUnit::getFirstChild((uint64_t)v111, v112);
          uint64_t v14 = v43;
          uint64_t LastChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getLastChild((uint64_t)LastChild, v12);
          uint64_t v12 = v44;
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t FirstChild = 0;
          uint64_t LastChild = 0;
        }
      }
      else
      {
        uint64_t v13 = a7;
        uint64_t v14 = 0;
        uint64_t FirstChild = 0;
        uint64_t v12 = 0;
      }
      if (v14 != v12 || (llvm::DWARFUnit *)FirstChild != LastChild)
      {
        uint64_t v16 = v113;
        uint64_t v17 = v114;
        do
        {
          uint64_t v18 = FirstChild;
          llvm::DWARFContext::addLocalsForDie(a1, a2, v16, v17, FirstChild, v14, v13);
          uint64_t FirstChild = 0;
          uint64_t v19 = 0;
          if (v14 && v18)
          {
            unsigned int v20 = *(_DWORD *)(v14 + 12);
            if (v20)
            {
              uint64_t v19 = *(void *)(v18 + 288) + 24 * v20;
              uint64_t FirstChild = v18;
            }
            else
            {
              uint64_t FirstChild = 0;
              uint64_t v19 = 0;
            }
          }
          uint64_t v14 = v19;
        }
        while (v12 != v19 || LastChild != (llvm::DWARFUnit *)FirstChild);
      }
      return;
    }
  }
  LOBYTE(v108) = 0;
  BYTE8(v108) = 0;
  LOBYTE(v109) = 0;
  BYTE8(v109) = 0;
  LOBYTE(v110) = 0;
  *(_OWORD *)uint64_t v104 = 0u;
  memset(v105, 0, sizeof(v105));
  *(_OWORD *)long long __p = 0u;
  memset(v107, 0, 17);
  SubroutineName = llvm::DWARFDie::getSubroutineName((llvm::DWARFDie *)&v113, 1);
  if (SubroutineName) {
    MEMORY[0x1D25D9630](v104, SubroutineName);
  }
  llvm::DWARFDie::find(&v113, 64, &v116);
  if (v119
    && (unsigned __int16)v116 <= 0x2Du
    && (((0x618uLL >> v116) & 1) != 0 || (unsigned __int16)v116 == 30 || (unsigned __int16)v116 == 24)
    && *((void *)&v116 + 1))
  {
    unsigned int v99 = *(unsigned __int8 *)v117 - 80;
    BOOL v22 = v99 <= 0x1F;
    if (v99 <= 0x1F) {
      int v23 = *(unsigned __int8 *)v117 - 80;
    }
    else {
      int v23 = 0;
    }
  }
  else
  {
    BOOL v22 = 0;
    int v23 = 0;
  }
  llvm::DWARFDie::getLocations(&v111, (llvm::dwarf *)2, (uint64_t)&v116);
  if (BYTE8(v117))
  {
    int64_t v47 = (void *)v116;
    *(void *)&long long v116 = 0;
    uint64_t v103 = v47;
    sub_1CD4515D0(&v103);
    if (v103) {
      (*(void (**)(void *))(*v103 + 8))(v103);
    }
  }
  else
  {
    uint64_t v24 = v116;
    if ((void)v116 != *((void *)&v116 + 1))
    {
      while (1)
      {
        uint64_t v25 = *(void *)(v24 + 40);
        if (v25)
        {
          uint64_t v26 = *(unsigned __int8 **)(v24 + 32);
          int v27 = *v26;
          BOOL v28 = v23 + 112 == v27 && v22;
          if (v27 == 145 || v28)
          {
            uint64_t v30 = 0;
            unsigned int v31 = 0;
            int v32 = v26 + v25;
            uint64_t v33 = 1;
            int v34 = v26 + 1;
            while (v25 != v33)
            {
              unsigned __int8 v35 = v26[v33];
              uint64_t v36 = v35 & 0x7F;
              if (v31 >= 0x40)
              {
                if (((v30 >> 63) & 0x7F) != v36)
                {
                  uint64_t v42 = 0;
LABEL_58:
                  int v32 = v26 + v33;
                  goto LABEL_59;
                }
              }
              else if (v31 == 63 && v36 != 127 && v36 != 0)
              {
                uint64_t v42 = 0;
                int v32 = v34;
                goto LABEL_59;
              }
              v30 |= v36 << v31;
              v31 += 7;
              ++v34;
              ++v33;
              if ((v35 & 0x80) == 0)
              {
                BOOL v38 = (v35 & 0x40) == 0 || v31 > 0x3F;
                uint64_t v39 = -1 << v31;
                if (v38) {
                  uint64_t v39 = 0;
                }
                uint64_t v42 = v30 | v39;
                goto LABEL_58;
              }
            }
            uint64_t v42 = 0;
LABEL_59:
            int v40 = v32 - (v26 + 1);
            uint64_t v41 = (v40 + 1);
            if (v25 == v41 || v25 == v40 + 2 && v26[v41] == 6) {
              break;
            }
          }
        }
        v24 += 64;
        if (v24 == *((void *)&v116 + 1)) {
          goto LABEL_71;
        }
      }
      *(void *)&v107[16] = v42;
      if (!(_BYTE)v108) {
        LOBYTE(v108) = 1;
      }
    }
  }
LABEL_71:
  if (BYTE8(v117))
  {
    uint64_t v48 = v116;
    *(void *)&long long v116 = 0;
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
    }
  }
  else
  {
    *(void *)&v101[0] = &v116;
    sub_1CC683E70((void ***)v101);
  }
  llvm::DWARFDie::find(&v111, 15875, &v116);
  if (v119)
  {
    *((void *)&v109 + 1) = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v116);
    uint64_t v110 = v49;
  }
  long long v50 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v111, 49);
  if (v50 && v51)
  {
    size_t v111 = v50;
    uint64_t v112 = v51;
  }
  llvm::DWARFDie::find(&v111, 3, &v116);
  if (v119)
  {
    v101[0] = v116;
    v101[1] = v117;
    v101[2] = v118;
    char v102 = 1;
    llvm::DWARFFormValue::getAsCString((llvm *)v101, (uint64_t)&v120);
    char v52 = v121;
    if (v121)
    {
      uint64_t v54 = v120;
      uint64_t v120 = 0;
      uint64_t v115 = v54;
      sub_1CD4515D0(&v115);
      unsigned int v53 = 0;
      if (v115)
      {
        (*(void (**)(void *))(*v115 + 8))(v115);
        unsigned int v53 = 0;
      }
    }
    else
    {
      unsigned int v53 = v120;
    }
    if (v121)
    {
      int v55 = v120;
      uint64_t v120 = 0;
      if (v55) {
        (*(void (**)(void *))(*v55 + 8))(v55);
      }
    }
    if ((v52 & 1) == 0) {
      MEMORY[0x1D25D9630](&v105[1], v53);
    }
  }
  uint64_t v56 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v111, 73);
  if (v56)
  {
    uint64_t v58 = v57;
    if (v57)
    {
      unsigned int v59 = v56;
      sub_1CC6821F8(a1, &v116);
      if ((void)v116 == *((void *)&v117 + 1)) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = *(unsigned __int8 *)(*(void *)v116 + 34);
      }
      *((void *)&v108 + 1) = sub_1CC67E010(v59, v58, v60);
      *(void *)&long long v109 = v61;
    }
  }
  llvm::DWARFDie::find(&v111, 58, &v116);
  if (v119)
  {
    llvm::DWARFContext::getLineTableForUnit(a2[1], (llvm::DWARFUnit *)a2);
    if (v62)
    {
      uint64_t v63 = v62;
      unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v116);
      CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir(a2);
      uint64_t v66 = (uint64_t)CompilationDir;
      if (CompilationDir) {
        size_t v67 = strlen(CompilationDir);
      }
      else {
        size_t v67 = 0;
      }
      llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v63 + 8, AsUnsignedConstant, v66, v67, 4, (uint64_t)__p, 0);
    }
  }
  llvm::DWARFDie::find(&v111, 59, &v116);
  if (v119) {
    *(void *)&v107[8] = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v116);
  }
  uint64_t v69 = (char *)a7[1];
  uint64_t v68 = (char *)a7[2];
  if (v69 >= v68)
  {
    uint64_t v71 = (v69 - (unsigned char *)*a7) >> 7;
    if ((unint64_t)(v71 + 1) >> 57) {
      abort();
    }
    uint64_t v72 = v68 - (unsigned char *)*a7;
    uint64_t v73 = v72 >> 6;
    if (v72 >> 6 <= (unint64_t)(v71 + 1)) {
      uint64_t v73 = v71 + 1;
    }
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v74 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v73;
    }
    if (v74)
    {
      if (v74 >> 57) {
        sub_1CB833614();
      }
      unint64_t v75 = (void **)operator new(v74 << 7);
    }
    else
    {
      unint64_t v75 = 0;
    }
    char v84 = &v75[16 * v71];
    if (SHIBYTE(v105[0]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v75[16 * v71], v104[0], (unint64_t)v104[1]);
    }
    else
    {
      *(_OWORD *)char v84 = *(_OWORD *)v104;
      v84[2] = v105[0];
    }
    unint64_t v85 = &v75[16 * v71 + 3];
    if (SHIBYTE(v105[3]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v85, v105[1], (unint64_t)v105[2]);
    }
    else
    {
      *(_OWORD *)unint64_t v85 = *(_OWORD *)&v105[1];
      v75[16 * v71 + 5] = v105[3];
    }
    uint64_t v86 = &v75[16 * v71 + 6];
    if ((v107[7] & 0x80000000) != 0)
    {
      sub_1CB8BDF7C((uint64_t)v86, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v86 = *(_OWORD *)__p;
      v75[16 * v71 + 8] = *(void **)v107;
    }
    uint64_t v87 = &v75[16 * v74];
    uint64_t v88 = &v75[16 * v71];
    long long v89 = v108;
    *(_OWORD *)(v88 + 9) = *(_OWORD *)&v107[8];
    *(_OWORD *)(v88 + 11) = v89;
    *(_OWORD *)(v88 + 13) = v109;
    v88[15] = v110;
    uint64_t v83 = (char *)(v84 + 16);
    uint64_t v90 = (void **)*a7;
    uint64_t v91 = (void **)a7[1];
    if (v91 == *a7)
    {
      *a7 = v84;
      a7[1] = v83;
      a7[2] = v87;
    }
    else
    {
      do
      {
        long long v92 = *((_OWORD *)v91 - 8);
        *(v84 - 14) = *(v91 - 14);
        *((_OWORD *)v84 - 8) = v92;
        *(v91 - 15) = 0;
        *(v91 - 14) = 0;
        *(v91 - 16) = 0;
        long long v93 = *(_OWORD *)(v91 - 13);
        *(v84 - 11) = *(v91 - 11);
        *(_OWORD *)(v84 - 13) = v93;
        *(v91 - 12) = 0;
        *(v91 - 11) = 0;
        *(v91 - 13) = 0;
        long long v94 = *((_OWORD *)v91 - 5);
        *(v84 - 8) = *(v91 - 8);
        *((_OWORD *)v84 - 5) = v94;
        *(v91 - 9) = 0;
        *(v91 - 8) = 0;
        *(v91 - 10) = 0;
        long long v95 = *(_OWORD *)(v91 - 7);
        long long v96 = *(_OWORD *)(v91 - 5);
        long long v97 = *(_OWORD *)(v91 - 3);
        *(v84 - 1) = *(v91 - 1);
        *(_OWORD *)(v84 - 3) = v97;
        *(_OWORD *)(v84 - 5) = v96;
        *(_OWORD *)(v84 - 7) = v95;
        v84 -= 16;
        v91 -= 16;
      }
      while (v91 != v90);
      uint64_t v91 = (void **)*a7;
      uint64_t v98 = (void **)a7[1];
      *a7 = v84;
      a7[1] = v83;
      a7[2] = v87;
      while (v98 != v91)
      {
        if (*((char *)v98 - 57) < 0) {
          operator delete(*(v98 - 10));
        }
        if (*((char *)v98 - 81) < 0) {
          operator delete(*(v98 - 13));
        }
        if (*((char *)v98 - 105) < 0) {
          operator delete(*(v98 - 16));
        }
        v98 -= 16;
      }
    }
    if (v91) {
      operator delete(v91);
    }
  }
  else
  {
    if (SHIBYTE(v105[0]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)a7[1], v104[0], (unint64_t)v104[1]);
    }
    else
    {
      long long v70 = *(_OWORD *)v104;
      *((void **)v69 + 2) = v105[0];
      *(_OWORD *)uint64_t v69 = v70;
    }
    long long v76 = v69 + 24;
    if (SHIBYTE(v105[3]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v76, v105[1], (unint64_t)v105[2]);
    }
    else
    {
      long long v77 = *(_OWORD *)&v105[1];
      *((void **)v69 + 5) = v105[3];
      _OWORD *v76 = v77;
    }
    char v78 = v69 + 48;
    if ((v107[7] & 0x80000000) != 0)
    {
      sub_1CB8BDF7C((uint64_t)v78, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v79 = *(_OWORD *)__p;
      *((void *)v69 + 8) = *(void *)v107;
      *char v78 = v79;
    }
    long long v80 = *(_OWORD *)&v107[8];
    long long v81 = v108;
    long long v82 = v109;
    *((void *)v69 + 15) = v110;
    *(_OWORD *)(v69 + 104) = v82;
    *(_OWORD *)(v69 + 88) = v81;
    *(_OWORD *)(v69 + 72) = v80;
    uint64_t v83 = v69 + 128;
  }
  a7[1] = v83;
  if ((v107[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v105[3]) < 0) {
    operator delete(v105[1]);
  }
  if (SHIBYTE(v105[0]) < 0) {
    operator delete(v104[0]);
  }
}

unint64_t sub_1CC67E010(llvm::DWARFUnit *a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  v41[0] = a1;
  v41[1] = a2;
  llvm::DWARFDie::find(v41, 11, v39);
  if (v40)
  {
    unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v39);
    if (v13) {
      goto LABEL_16;
    }
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (!v6)
  {
LABEL_9:
    unint64_t v9 = 0;
    LOBYTE(v10) = 0;
    return v10 | v9;
  }
  int v7 = *(unsigned __int16 *)(v6 + 4);
  uint64_t v8 = (v7 - 15);
  if (v8 > 0x3C)
  {
LABEL_8:
    if (v7 != 1) {
      goto LABEL_9;
    }
    if (llvm::DWARFDie::getAttributeValueAsReferencedDie(v41, 73))
    {
      unint64_t v9 = 0;
      LOBYTE(v10) = 0;
      if (!v17) {
        return v10 | v9;
      }
      uint64_t v18 = sub_1CC67E010();
      if (!v19) {
        goto LABEL_9;
      }
      uint64_t v10 = v18;
      uint64_t v20 = 0;
      uint64_t FirstChild = 0;
      uint64_t LastChild = 0;
      uint64_t v23 = 0;
      if (a1 && a2)
      {
        uint64_t FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild((uint64_t)a1, (uint64_t)a2);
        uint64_t v20 = v35;
        uint64_t LastChild = llvm::DWARFUnit::getLastChild((uint64_t)a1, (uint64_t)a2);
        uint64_t v23 = v36;
      }
      while (1)
      {
        while (1)
        {
          if (v20 == v23 && FirstChild == (llvm::DWARFUnit *)LastChild)
          {
            unint64_t v9 = v10 & 0xFFFFFFFFFFFFFF00;
            return v10 | v9;
          }
          v38[0] = FirstChild;
          v38[1] = (llvm::DWARFUnit *)v20;
          uint64_t v24 = *(void *)(v20 + 16);
          if (v24 && *(_WORD *)(v24 + 4) == 33)
          {
            llvm::DWARFDie::find(v38, 55, v39);
            if (v40)
            {
              unint64_t v26 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v39);
              if (v27) {
                uint64_t v28 = v26;
              }
              else {
                uint64_t v28 = 1;
              }
              v10 *= v28;
            }
            llvm::DWARFDie::find(v38, 47, v39);
            if (v40)
            {
              unint64_t AsSignedConstant = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v39);
              if (v30)
              {
                unint64_t v31 = AsSignedConstant;
                llvm::DWARFDie::find(v38, 34, v37);
                if (v37[48])
                {
                  unint64_t v33 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v37);
                  if (v34) {
                    unint64_t v32 = v33;
                  }
                  else {
                    unint64_t v32 = 0;
                  }
                }
                else
                {
                  unint64_t v32 = 0;
                }
                v10 += v10 * (v31 - v32);
              }
            }
          }
          if (FirstChild) {
            break;
          }
LABEL_33:
          uint64_t v20 = 0;
        }
        unsigned int v25 = *(_DWORD *)(v20 + 12);
        if (!v25)
        {
          uint64_t FirstChild = 0;
          goto LABEL_33;
        }
        uint64_t v20 = *((void *)FirstChild + 36) + 24 * v25;
      }
    }
LABEL_50:
    unint64_t v9 = 0;
    LOBYTE(v10) = 0;
    return v10 | v9;
  }
  if (((1 << (v7 - 15)) & 0x8000000000003) == 0)
  {
    if (((1 << (v7 - 15)) & 0x1000014000800080) == 0)
    {
      if (v8 == 16)
      {
        if (llvm::DWARFDie::getAttributeValueAsReferencedDie(v41, 73))
        {
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              if (*(_WORD *)(v16 + 4) == 21)
              {
                LOBYTE(v10) = 2 * a3;
                unint64_t v9 = (2 * a3) & 0x7FFFFFFFFFFFFF00;
                return v10 | v9;
              }
            }
          }
        }
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    if (!llvm::DWARFDie::getAttributeValueAsReferencedDie(v41, 73)) {
      goto LABEL_50;
    }
    unint64_t v9 = 0;
    LOBYTE(v10) = 0;
    if (!v14) {
      return v10 | v9;
    }
    unint64_t AsUnsignedConstant = sub_1CC67E010();
LABEL_16:
    LOBYTE(v10) = AsUnsignedConstant;
    unint64_t v9 = AsUnsignedConstant & 0xFFFFFFFFFFFFFF00;
    return v10 | v9;
  }
LABEL_5:
  unint64_t v9 = 0;
  LOBYTE(v10) = a3;
  return v10 | v9;
}

void llvm::DWARFContext::getLocalsForAddress(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CompileUnitForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFContext::getCompileUnitForAddress(a1, a2);
  if (CompileUnitForAddress)
  {
    int v7 = (llvm::DWARFContext **)CompileUnitForAddress;
    SubroutineForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFUnit::getSubroutineForAddress(CompileUnitForAddress, a2);
    if (SubroutineForAddress)
    {
      if (v9)
      {
        llvm::DWARFContext::addLocalsForDie((uint64_t)a1, v7, SubroutineForAddress, v9, SubroutineForAddress, v9, (void **)a3);
      }
    }
  }
}

void llvm::DWARFContext::getLineInfoForAddress(uint64_t **a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  strcpy((char *)(a5 + 23), "\t<invalid>");
  strcpy((char *)a5, "<invalid>");
  strcpy((char *)(a5 + 47), "\t<invalid>");
  *(_WORD *)(a5 + 71) = 9;
  *(unsigned char *)(a5 + 88) = 0;
  *(_DWORD *)(a5 + 104) = 0;
  *(void *)(a5 + 96) = 0;
  *(unsigned char *)(a5 + 112) = 0;
  *(unsigned char *)(a5 + 120) = 0;
  *(_DWORD *)(a5 + 128) = 0;
  CompileUnitForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFContext::getCompileUnitForAddress(a1, a2);
  if (CompileUnitForAddress)
  {
    long long v11 = CompileUnitForAddress;
    sub_1CC67E4D4(CompileUnitForAddress, a2, SHIDWORD(a4), a4, a5 + 24, (std::string *)(a5 + 48), (_DWORD *)(a5 + 104), a5 + 112);
    if (a4)
    {
      llvm::DWARFContext::getLineTableForUnit((llvm::DWARFContext *)a1, v11);
      if (v12)
      {
        char v13 = v12;
        CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v11);
        llvm::DWARFDebugLine::LineTable::getFileLineInfoForAddress(v13, a2, a3, CompilationDir, a4, a5);
      }
    }
  }
}

void sub_1CC67E4D4(llvm::DWARFUnit *a1, unint64_t a2, int a3, int a4, uint64_t a5, std::string *a6, _DWORD *a7, uint64_t a8)
{
  v26[8] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = v26;
  uint64_t v25 = 0x400000000;
  llvm::DWARFUnit::getInlinedChainForAddress(a1, a2, (uint64_t)&v24);
  if (v25)
  {
    uint64_t v14 = (llvm::DWARFDie *)v24;
    if (a3)
    {
      SubroutineName = llvm::DWARFDie::getSubroutineName((llvm::DWARFDie *)v24, a3);
      if (SubroutineName) {
        MEMORY[0x1D25D9630](a5, SubroutineName);
      }
    }
    llvm::DWARFDie::getDeclFile(v14, a4, (uint64_t)&__str);
    std::string::size_type size = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::operator=(a6, &__str);
    }
    unint64_t DeclLine = llvm::DWARFDie::getDeclLine(v14);
    if (DeclLine) {
      *a7 = DeclLine;
    }
    llvm::DWARFDie::find((llvm::DWARFUnit **)v14, 17, v19);
    if (v20)
    {
      llvm::DWARFFormValue::getAsSectionedAddress(v19, (uint64_t)&v21);
      if (v22)
      {
        int v18 = *(unsigned __int8 *)(a8 + 8);
        *(void *)a8 = v21;
        if (!v18) {
          *(unsigned char *)(a8 + 8) = 1;
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v24 != v26) {
    free(v24);
  }
}

void llvm::DWARFContext::getLineInfoForAddressRange(uint64_t **a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a6 + 2;
  a6[1] = 0x1000000000;
  CompileUnitForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFContext::getCompileUnitForAddress(a1, a2);
  if (!CompileUnitForAddress) {
    return;
  }
  char v13 = CompileUnitForAddress;
  v52[0] = 0;
  memset(&v51, 0, sizeof(v51));
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__str, "<invalid>");
  LOBYTE(v49) = 0;
  BYTE8(v49) = 0;
  sub_1CC67E4D4(CompileUnitForAddress, a2, SHIDWORD(a5), a5, (uint64_t)&__str, &v51, v52, (uint64_t)&v49);
  if (a5)
  {
    llvm::DWARFContext::getLineTableForUnit((llvm::DWARFContext *)a1, v13);
    uint64_t v16 = v15;
    char v30 = 0;
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    int v17 = llvm::DWARFDebugLine::LineTable::lookupAddressRange(v15, a2, a3, a4, (uint64_t)&v30);
    int v18 = v30;
    if (v17)
    {
      uint64_t v29 = v31;
      if (v30 != v31)
      {
        uint64_t v28 = (uint64_t)(v16 + 1);
        int v27 = v52[0];
        char v19 = v30;
        unint64_t v26 = v30;
        do
        {
          char v20 = v16;
          uint64_t v21 = v16[15] + 32 * *v19;
          strcpy(&v44[7], "\t<invalid>");
          strcpy((char *)&v43, "<invalid>");
          strcpy(&v45[7], "\t<invalid>");
          strcpy(&v46[7], "\t");
          LOBYTE(v47) = 0;
          *((void *)&v47 + 1) = 0;
          *(_DWORD *)uint64_t v48 = 0;
          v48[8] = 0;
          v48[16] = 0;
          *(_DWORD *)&v48[24] = 0;
          unint64_t v22 = *(unsigned __int16 *)(v21 + 22);
          CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v13);
          uint64_t v24 = (uint64_t)CompilationDir;
          if (CompilationDir) {
            size_t v25 = strlen(CompilationDir);
          }
          else {
            size_t v25 = 0;
          }
          llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v28, v22, v24, v25, a5, (uint64_t)&v43, 0);
          std::string::operator=((std::string *)&v44[8], &__str);
          DWORD2(v47) = *(_DWORD *)(v21 + 16);
          HIDWORD(v47) = *(unsigned __int16 *)(v21 + 20);
          std::string::operator=((std::string *)&v45[8], &v51);
          *(_DWORD *)uint64_t v48 = v27;
          *(_OWORD *)&v48[8] = v49;
          unint64_t v33 = *(void *)v21;
          if ((v44[7] & 0x80000000) != 0)
          {
            sub_1CB8BDF7C((uint64_t)&v34, (const void *)v43, *((unint64_t *)&v43 + 1));
          }
          else
          {
            long long v34 = v43;
            uint64_t v35 = *(void *)v44;
          }
          int v18 = v26;
          uint64_t v16 = v20;
          if ((v45[7] & 0x80000000) != 0)
          {
            sub_1CB8BDF7C((uint64_t)&v36, *(const void **)&v44[8], *(unint64_t *)&v44[16]);
          }
          else
          {
            long long v36 = *(_OWORD *)&v44[8];
            uint64_t v37 = *(void *)v45;
          }
          if ((v46[7] & 0x80000000) != 0)
          {
            sub_1CB8BDF7C((uint64_t)&__p, *(const void **)&v45[8], *(unint64_t *)&v45[16]);
          }
          else
          {
            long long __p = *(_OWORD *)&v45[8];
            uint64_t v39 = *(void *)v46;
          }
          long long v40 = *(_OWORD *)&v46[8];
          long long v41 = v47;
          v42[0] = *(_OWORD *)v48;
          *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v48[12];
          sub_1CC67EBA0((uint64_t)a6, (unint64_t)&v33);
          if (SHIBYTE(v39) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v37) < 0) {
            operator delete((void *)v36);
          }
          if (SHIBYTE(v35) < 0) {
            operator delete((void *)v34);
          }
          if ((v46[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v45[8]);
          }
          if ((v45[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v44[8]);
          }
          if ((v44[7] & 0x80000000) != 0) {
            operator delete((void *)v43);
          }
          ++v19;
        }
        while (v19 != v29);
      }
    }
    if (!v18) {
      goto LABEL_25;
    }
    uint64_t v14 = v18;
  }
  else
  {
    strcpy(&v44[7], "\t<invalid>");
    strcpy((char *)&v43, "<invalid>");
    strcpy(&v45[7], "\t<invalid>");
    strcpy(&v46[7], "\t");
    LOBYTE(v47) = 0;
    *((void *)&v47 + 1) = 0;
    *(_DWORD *)uint64_t v48 = 0;
    v48[8] = 0;
    v48[16] = 0;
    *(_DWORD *)&v48[24] = 0;
    std::string::operator=((std::string *)&v44[8], &__str);
    std::string::operator=((std::string *)&v45[8], &v51);
    *(_DWORD *)uint64_t v48 = v52[0];
    *(_OWORD *)&v48[8] = v49;
    unint64_t v33 = a2;
    if ((v44[7] & 0x80000000) != 0)
    {
      sub_1CB8BDF7C((uint64_t)&v34, (const void *)v43, *((unint64_t *)&v43 + 1));
    }
    else
    {
      long long v34 = v43;
      uint64_t v35 = *(void *)v44;
    }
    if ((v45[7] & 0x80000000) != 0)
    {
      sub_1CB8BDF7C((uint64_t)&v36, *(const void **)&v44[8], *(unint64_t *)&v44[16]);
    }
    else
    {
      long long v36 = *(_OWORD *)&v44[8];
      uint64_t v37 = *(void *)v45;
    }
    if ((v46[7] & 0x80000000) != 0)
    {
      sub_1CB8BDF7C((uint64_t)&__p, *(const void **)&v45[8], *(unint64_t *)&v45[16]);
    }
    else
    {
      long long __p = *(_OWORD *)&v45[8];
      uint64_t v39 = *(void *)v46;
    }
    long long v40 = *(_OWORD *)&v46[8];
    long long v41 = v47;
    v42[0] = *(_OWORD *)v48;
    *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v48[12];
    sub_1CC67EBA0((uint64_t)a6, (unint64_t)&v33);
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete((void *)v36);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
    if ((v46[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v45[8]);
    }
    if ((v45[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v44[8]);
    }
    if ((v44[7] & 0x80000000) == 0) {
      goto LABEL_25;
    }
    uint64_t v14 = (unsigned int *)v43;
  }
  operator delete(v14);
LABEL_25:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
}

__n128 sub_1CC67EBA0(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CC683F00(a1, a2, 1);
  uint64_t v4 = *(void *)a1 + 144 * *(unsigned int *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)v3;
  long long v5 = *(_OWORD *)(v3 + 8);
  *(void *)(v4 + 24) = *(void *)(v3 + 24);
  *(_OWORD *)(v4 + 8) = v5;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v6 = *(void *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(void *)(v4 + 48) = v6;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  uint64_t v7 = *(void *)(v3 + 72);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(v3 + 56);
  *(void *)(v4 + 72) = v7;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 56) = 0;
  __n128 result = *(__n128 *)(v3 + 80);
  long long v9 = *(_OWORD *)(v3 + 96);
  long long v10 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v4 + 124) = *(_OWORD *)(v3 + 124);
  *(_OWORD *)(v4 + 96) = v9;
  *(_OWORD *)(v4 + 112) = v10;
  *(__n128 *)(v4 + 80) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void llvm::DWARFContext::getInliningInfoForAddress(uint64_t **a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v77[8] = *MEMORY[0x1E4F143B8];
  *a5 = a5 + 2;
  a5[1] = 0x400000000;
  CompileUnitForunint64_t Address = (llvm::DWARFUnit *)llvm::DWARFContext::getCompileUnitForAddress(a1, a2);
  if (CompileUnitForAddress)
  {
    long long v11 = (llvm::DWARFUnit **)CompileUnitForAddress;
    unint64_t v75 = (char *)v77;
    uint64_t v76 = 0x400000000;
    llvm::DWARFUnit::getInlinedChainForAddress(CompileUnitForAddress, a2, (uint64_t)&v75);
    if (v76)
    {
      unint64_t v53 = a2;
      unint64_t v54 = a3;
      uint64_t v12 = 0;
      *(void *)uint64_t v63 = 0;
      *(void *)unint64_t v64 = 0;
      unint64_t v55 = v76;
      uint64_t v56 = 0;
      uint64_t v57 = 16 * v76;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = (llvm::DWARFDie *)&v75[v12];
        strcpy(v66, "\t<invalid>");
        strcpy((char *)v65, "<invalid>");
        strcpy(v67, "\t<invalid>");
        strcpy((char *)v68 + 7, "\t");
        char v69 = 0;
        unint64_t v70 = 0;
        int v71 = 0;
        LOBYTE(v72) = 0;
        char v73 = 0;
        unsigned int v74 = 0;
        SubroutineName = llvm::DWARFDie::getSubroutineName((llvm::DWARFDie *)&v75[v12], SHIDWORD(a4));
        if (SubroutineName) {
          MEMORY[0x1D25D9630](&v66[1], SubroutineName);
        }
        unint64_t DeclLine = llvm::DWARFDie::getDeclLine(v14);
        if (DeclLine) {
          int v71 = DeclLine;
        }
        llvm::DWARFDie::getDeclFile(v14, a4, (uint64_t)&v58);
        if (SHIBYTE(v68[0]) < 0) {
          operator delete(*(void **)&v67[1]);
        }
        *(_OWORD *)&v67[1] = v58;
        v68[0] = v59;
        llvm::DWARFDie::find((llvm::DWARFUnit **)v14, 17, &v58);
        if (v60)
        {
          llvm::DWARFFormValue::getAsSectionedAddress(&v58, (uint64_t)&v61);
          if (v62)
          {
            uint64_t v72 = v61;
            if (!v73) {
              char v73 = 1;
            }
          }
        }
        if (a4)
        {
          if (v12)
          {
            if (v56)
            {
              unint64_t v31 = v64[1];
              CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir(v11);
              uint64_t v33 = (uint64_t)CompilationDir;
              if (CompilationDir) {
                size_t v34 = strlen(CompilationDir);
              }
              else {
                size_t v34 = 0;
              }
              llvm::DWARFDebugLine::Prologue::getFileNameByIndex((uint64_t)(v56 + 1), v31, v33, v34, a4, (uint64_t)v65, 0);
            }
            unint64_t v70 = __PAIR64__(v63[1], v64[0]);
            unsigned int v74 = v63[0];
          }
          else
          {
            llvm::DWARFContext::getLineTableForUnit((llvm::DWARFContext *)a1, (llvm::DWARFUnit *)v11);
            if (v30)
            {
              uint64_t v35 = v30;
              long long v36 = (const char *)llvm::DWARFUnit::getCompilationDir(v11);
              uint64_t v56 = v35;
              llvm::DWARFDebugLine::LineTable::getFileLineInfoForAddress(v35, v53, v54, v36, a4, (uint64_t)v65);
            }
            else
            {
              uint64_t v56 = 0;
            }
          }
          if (v13 < v55) {
            llvm::DWARFDie::getCallerFrame((llvm::DWARFUnit **)v14, &v64[1], v64, &v63[1], v63);
          }
        }
        unint64_t v17 = sub_1CC6838F0((uint64_t)a5, (unint64_t)v65, 1);
        uint64_t v18 = *a5;
        unsigned int v19 = *((_DWORD *)a5 + 2);
        uint64_t v20 = *a5 + 136 * v19;
        if (*(char *)(v17 + 23) < 0)
        {
          sub_1CB8BDF7C(v20, *(const void **)v17, *(void *)(v17 + 8));
        }
        else
        {
          long long v21 = *(_OWORD *)v17;
          *(void *)(v20 + 16) = *(void *)(v17 + 16);
          *(_OWORD *)uint64_t v20 = v21;
        }
        unint64_t v22 = (_OWORD *)(v18 + 136 * v19 + 24);
        if (*(char *)(v17 + 47) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v22, *(const void **)(v17 + 24), *(void *)(v17 + 32));
        }
        else
        {
          long long v23 = *(_OWORD *)(v17 + 24);
          *(void *)(v18 + 136 * v19 + 40) = *(void *)(v17 + 40);
          _OWORD *v22 = v23;
        }
        uint64_t v24 = (_OWORD *)(v18 + 136 * v19 + 48);
        if (*(char *)(v17 + 71) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v24, *(const void **)(v17 + 48), *(void *)(v17 + 56));
        }
        else
        {
          long long v25 = *(_OWORD *)(v17 + 48);
          *(void *)(v18 + 136 * v19 + 64) = *(void *)(v17 + 64);
          *uint64_t v24 = v25;
        }
        uint64_t v26 = v18 + 136 * v19;
        long long v27 = *(_OWORD *)(v17 + 72);
        long long v28 = *(_OWORD *)(v17 + 88);
        long long v29 = *(_OWORD *)(v17 + 104);
        *(_OWORD *)(v26 + 116) = *(_OWORD *)(v17 + 116);
        *(_OWORD *)(v26 + 104) = v29;
        *(_OWORD *)(v26 + 88) = v28;
        *(_OWORD *)(v26 + 72) = v27;
        ++*((_DWORD *)a5 + 2);
        if (SHIBYTE(v68[0]) < 0) {
          operator delete(*(void **)&v67[1]);
        }
        if (v67[0] < 0) {
          operator delete(*(void **)&v66[1]);
        }
        if (v66[0] < 0) {
          operator delete(v65[0]);
        }
        v12 += 16;
        ++v13;
      }
      while (v57 != v12);
    }
    else if (a4)
    {
      strcpy(v66, "\t<invalid>");
      strcpy((char *)v65, "<invalid>");
      strcpy(v67, "\t<invalid>");
      strcpy((char *)v68 + 7, "\t");
      char v69 = 0;
      unint64_t v70 = 0;
      int v71 = 0;
      LOBYTE(v72) = 0;
      char v73 = 0;
      unsigned int v74 = 0;
      llvm::DWARFContext::getLineTableForUnit((llvm::DWARFContext *)a1, (llvm::DWARFUnit *)v11);
      if (v37)
      {
        BOOL v38 = v37;
        uint64_t v39 = (const char *)llvm::DWARFUnit::getCompilationDir(v11);
        if (llvm::DWARFDebugLine::LineTable::getFileLineInfoForAddress(v38, a2, a3, v39, a4, (uint64_t)v65))
        {
          unint64_t v40 = sub_1CC6838F0((uint64_t)a5, (unint64_t)v65, 1);
          uint64_t v41 = *a5;
          unsigned int v42 = *((_DWORD *)a5 + 2);
          uint64_t v43 = *a5 + 136 * v42;
          if (*(char *)(v40 + 23) < 0)
          {
            sub_1CB8BDF7C(v43, *(const void **)v40, *(void *)(v40 + 8));
          }
          else
          {
            long long v44 = *(_OWORD *)v40;
            *(void *)(v43 + 16) = *(void *)(v40 + 16);
            *(_OWORD *)uint64_t v43 = v44;
          }
          uint64_t v45 = (_OWORD *)(v41 + 136 * v42 + 24);
          if (*(char *)(v40 + 47) < 0)
          {
            sub_1CB8BDF7C((uint64_t)v45, *(const void **)(v40 + 24), *(void *)(v40 + 32));
          }
          else
          {
            long long v46 = *(_OWORD *)(v40 + 24);
            *(void *)(v41 + 136 * v42 + 40) = *(void *)(v40 + 40);
            *uint64_t v45 = v46;
          }
          long long v47 = (_OWORD *)(v41 + 136 * v42 + 48);
          if (*(char *)(v40 + 71) < 0)
          {
            sub_1CB8BDF7C((uint64_t)v47, *(const void **)(v40 + 48), *(void *)(v40 + 56));
          }
          else
          {
            long long v48 = *(_OWORD *)(v40 + 48);
            *(void *)(v41 + 136 * v42 + 64) = *(void *)(v40 + 64);
            *long long v47 = v48;
          }
          uint64_t v49 = v41 + 136 * v42;
          long long v50 = *(_OWORD *)(v40 + 72);
          long long v51 = *(_OWORD *)(v40 + 88);
          long long v52 = *(_OWORD *)(v40 + 104);
          *(_OWORD *)(v49 + 116) = *(_OWORD *)(v40 + 116);
          *(_OWORD *)(v49 + 104) = v52;
          *(_OWORD *)(v49 + 88) = v51;
          *(_OWORD *)(v49 + 72) = v50;
          ++*((_DWORD *)a5 + 2);
        }
      }
      if (SHIBYTE(v68[0]) < 0) {
        operator delete(*(void **)&v67[1]);
      }
      if (v67[0] < 0) {
        operator delete(*(void **)&v66[1]);
      }
      if (v66[0] < 0) {
        operator delete(v65[0]);
      }
    }
    if (v75 != (char *)v77) {
      free(v75);
    }
  }
}

void llvm::DWARFContext::getDWOContext(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t *)(a1 + 400);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 408);
  if (!v8) {
    goto LABEL_8;
  }
  long long v9 = std::__shared_weak_count::lock(v8);
  if (!v9) {
    goto LABEL_8;
  }
  long long v10 = v9;
  uint64_t v11 = *v7;
  if (*v7)
  {
    *a4 = *(void *)(v11 + 16);
    a4[1] = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v10);
  if (v11) {
    return;
  }
LABEL_8:
  unsigned int v12 = *(_DWORD *)(a1 + 376);
  if (!v12)
  {
    *(void *)(a1 + 380) = 0;
    long long v47 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v47) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v47[16] = 2;
    *(void *)(a1 + 368) = v47;
    unsigned int v12 = 16;
    *(_DWORD *)(a1 + 376) = 16;
  }
  long long v48 = a4;
  int v13 = 0;
  if (a3)
  {
    size_t v14 = a3;
    uint64_t v15 = a2;
    do
    {
      int v16 = *v15++;
      int v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  uint64_t v17 = *(void *)(a1 + 368);
  unsigned int v18 = v12 - 1;
  uint64_t v19 = v17 + 8 * v12 + 8;
  int v20 = -1;
  int v21 = 1;
  int v22 = v13;
  while (1)
  {
    uint64_t v23 = v22 & v18;
    uint64_t v24 = *(void **)(v17 + 8 * v23);
    if (!v24) {
      break;
    }
    if (v24 == (void *)-8)
    {
      if (v20 == -1) {
        int v20 = v22 & v18;
      }
    }
    else if (*(_DWORD *)(v19 + 4 * v23) == v13 {
           && a3 == *v24
    }
           && (!a3 || !memcmp(a2, (char *)v24 + *(unsigned int *)(a1 + 388), a3)))
    {
      goto LABEL_27;
    }
    int v22 = v21 + v23;
    ++v21;
  }
  uint64_t v25 = v20;
  if (v20 == -1)
  {
    uint64_t v25 = v23;
    uint64_t v23 = v23;
  }
  else
  {
    uint64_t v23 = v20;
  }
  *(_DWORD *)(v19 + 4 * v25) = v13;
  uint64_t v24 = *(void **)(v17 + 8 * v23);
LABEL_27:
  if (v24 == (void *)-8)
  {
    --*(_DWORD *)(a1 + 384);
  }
  else if (v24)
  {
    goto LABEL_40;
  }
  uint64_t v26 = operator new(a3 + 25, (std::align_val_t)8uLL);
  long long v27 = v26;
  long long v28 = (char *)(v26 + 3);
  if (a3) {
    memcpy(v26 + 3, a2, a3);
  }
  v28[a3] = 0;
  v27[1] = 0;
  v27[2] = 0;
  *long long v27 = a3;
  *(void *)(v17 + 8 * v23) = v27;
  ++*(_DWORD *)(a1 + 380);
  for (unint64_t i = (void **)(*(void *)(a1 + 368)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 368), v23)); ; ++i)
  {
    uint64_t v24 = *i;
    if (*i && v24 + 1 != 0) {
      break;
    }
  }
LABEL_40:
  unint64_t v31 = v24 + 1;
  uint64_t v32 = (std::__shared_weak_count *)v24[2];
  if (v32)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v32);
    if (v33)
    {
      size_t v34 = v33;
      if (*v31)
      {
        *long long v48 = *(void *)(*v31 + 16);
        v48[1] = v33;
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v34);
        }
        return;
      }
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 416))
  {
    unint64_t v54 = v56;
    long long v55 = xmmword_1CFAC3020;
    char v36 = *(unsigned char *)(a1 + 447);
    if (v36 < 0)
    {
      if (*(void *)(a1 + 432)) {
        goto LABEL_53;
      }
    }
    else if (*(unsigned char *)(a1 + 447))
    {
LABEL_53:
      if (v36 >= 0) {
        uint64_t v37 = (void *)(a1 + 424);
      }
      else {
        uint64_t v37 = *(void **)(a1 + 424);
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(a1 + 447);
      }
      else {
        uint64_t v38 = *(void *)(a1 + 432);
      }
      goto LABEL_62;
    }
    uint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 520) + 16))(*(void *)(a1 + 520));
    DWORD2(v57) = 0;
    char v61 = 0;
    uint64_t v62 = 0;
    unint64_t v64 = &v54;
    int v63 = 0;
    *(void *)&long long v57 = &unk_1F2646FA8;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v41 = llvm::Twine::printOneChild(v39, (llvm::raw_ostream *)&v57, (uint64_t)v39, v40, 5);
    llvm::Twine::printOneChild(v41, (llvm::raw_ostream *)&v57, (uint64_t)".dwp", v42, 3);
    *(void *)&long long v57 = &unk_1F2646B98;
    if (v63 == 1 && v58) {
      MEMORY[0x1D25D9CB0](v58, 0x1000C8077774924);
    }
    uint64_t v37 = v54;
    uint64_t v38 = v55;
LABEL_62:
    llvm::object::ObjectFile::createObjectFile((uint64_t)v37, v38, (uint64_t)&v57);
    char v43 = v58;
    if (v58)
    {
      *(unsigned char *)(a1 + 416) = 1;
      long long v46 = (void *)v57;
      *(void *)&long long v57 = 0;
      long long v51 = v46;
      sub_1CD4515D0(&v51);
      if (v51) {
        (*(void (**)(void *))(*v51 + 8))(v51);
      }
      sub_1CC684130((uint64_t *)&v57);
    }
    if (v54 != v56) {
      free(v54);
    }
    uint64_t v35 = v48;
    if ((v43 & 1) == 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  uint64_t v35 = v48;
LABEL_66:
  llvm::object::ObjectFile::createObjectFile((uint64_t)a2, a3, (uint64_t)&v57);
LABEL_67:
  if ((v58 & 1) == 0)
  {
    long long v44 = (char *)operator new(0x30uLL);
    *((void *)v44 + 1) = 0;
    *((void *)v44 + 2) = 0;
    *(void *)long long v44 = &unk_1F2618B20;
    *(_OWORD *)(v44 + 24) = v57;
    *((void *)v44 + 5) = 0;
    long long v57 = 0uLL;
    v53[0] = &unk_1F26187D0;
    v53[1] = llvm::WithColor::defaultErrorHandler;
    v53[3] = v53;
    v52[0] = &unk_1F26187D0;
    v52[1] = llvm::WithColor::defaultWarningHandler;
    int v52[3] = v52;
    llvm::DWARFContext::create();
  }
  uint64_t v45 = (void *)v57;
  *(void *)&long long v57 = 0;
  long long v50 = v45;
  sub_1CD4515D0(&v50);
  if (v50) {
    (*(void (**)(void *))(*v50 + 8))(v50);
  }
  *uint64_t v35 = 0;
  v35[1] = 0;
  sub_1CC684130((uint64_t *)&v57);
}

void llvm::DWARFContext::create()
{
}

{
  operator new();
}

void llvm::DWARFContext::loadRegisterInfo(llvm::DWARFContext *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, void *a3@<X8>)
{
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  uint64_t v5 = (*(uint64_t (**)(const llvm::object::ObjectFile *))(*(void *)a2 + 376))(a2);
  ArchName = (char *)llvm::Triple::getArchName(v5, v5, 0);
  llvm::Triple::setArchName((llvm::Triple *)v23, ArchName, v7);
  VendorTypeName = llvm::Triple::getVendorTypeName(0);
  llvm::Triple::setVendorName((llvm::Triple *)v23, (uint64_t)VendorTypeName, v9);
  OSTypeName = llvm::Triple::getOSTypeName(0);
  llvm::Triple::setOSName((llvm::Triple *)v23, (uint64_t)OSTypeName, v11);
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unsigned int v12 = llvm::TargetRegistry::lookupTarget((std::string::size_type)v23, (uint64_t)&__p);
  uint64_t v13 = HIBYTE(v22) & 0x7F;
  if (v22 < 0) {
    uint64_t v13 = v21;
  }
  if (v13)
  {
    size_t v14 = std::generic_category();
    if (v22 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v27 = 22;
    long long v28 = v14;
    uint64_t v26 = p_p;
    sub_1CD06481C();
  }
  if ((SBYTE7(v24) & 0x80u) == 0) {
    int v16 = v23;
  }
  else {
    int v16 = (void **)v23[0];
  }
  if ((SBYTE7(v24) & 0x80u) == 0) {
    uint64_t v17 = BYTE7(v24) & 0x7F;
  }
  else {
    uint64_t v17 = (uint64_t)v23[1];
  }
  uint64_t v18 = sub_1CD52142C((uint64_t)v12, (uint64_t)v16, v17);
  uint64_t v19 = *((void *)this + 56);
  *((void *)this + 56) = v18;
  if (v19) {
    sub_1CD521E44(v19);
  }
  *a3 = 0;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v24) < 0) {
    operator delete(v23[0]);
  }
}

void sub_1CC6821E0(uint64_t a1)
{
}

uint64_t sub_1CC6821F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = llvm::DWARFContext::parseNormalUnits(a1);
  uint64_t v5 = *(void *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 72);
  if (v6 == -1) {
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  uint64_t v7 = v5 + 8 * v6;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    while ((*(unsigned char *)(*(void *)v5 + 96) & 0xFB) == 2)
    {
      v5 += 8;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v5 = v7;
        break;
      }
    }
  }
  *a2 = v5;
  a2[1] = v7;
  a2[2] = sub_1CC6838D8;
  a2[3] = v7;
  a2[4] = v7;
  a2[5] = sub_1CC6838D8;
  return result;
}

void *sub_1CC682280(llvm::DWARFContext *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  v13[4] = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v7 = &__src[v6];
    unsigned char *v7 = 0;
    v7[8] = 0;
    v6 += 16;
  }
  while (v6 != 448);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
  *(void *)&v11[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)&v12, a3 + 24);
  sub_1CC66D518((uint64_t)v13, a3 + 56);
  memcpy(v9, __src, sizeof(v9));
  llvm::DWARFContext::dump(a1, a2, v11, (uint64_t)v9);
  return sub_1CD5E15A8(v11);
}

char **sub_1CC682364(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CC6823F0(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v4 - 16);
        if (v4 - 112 != v6) {
          free(v6);
        }
        v4 -= 144;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC682480(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  sub_1CC66D518(a1 + 24, a2 + 24);
  uint64_t result = sub_1CC66D518(a1 + 56, a2 + 56);
  if (*(_DWORD *)(a2 + 4) == -1 && !*(unsigned char *)(a2 + 16)) {
    *(_DWORD *)(a1 + 4) = 0;
  }
  if (*(_DWORD *)(a2 + 8) == -1 && !*(unsigned char *)(a2 + 17)) {
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t **sub_1CC6824FC(uint64_t **a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unint64_t v6 = v5[4];
      uint64_t v7 = a1[1];
      uint64_t v8 = v3;
      if (*a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = a1[1];
      long long v10 = v3;
      if (v7)
      {
        do
        {
          uint64_t v8 = v9;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          long long v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v12 = (uint64_t **)v8;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v7) {
          uint64_t v13 = (uint64_t **)(v8 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t **)v3;
        uint64_t v12 = (uint64_t **)v3;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v7;
              unint64_t v14 = v7[4];
              if (v14 <= v6) {
                break;
              }
              uint64_t v7 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_23;
              }
            }
            if (v14 >= v6) {
              goto LABEL_27;
            }
            uint64_t v7 = v12[1];
            if (!v7)
            {
              uint64_t v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v15 = operator new(0x30uLL);
      v15[2] = *((_OWORD *)v5 + 2);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v12;
      *uint64_t v13 = (uint64_t *)v15;
      int v16 = (uint64_t *)**a1;
      if (v16)
      {
        *a1 = v16;
        uint64_t v17 = *v13;
      }
      else
      {
        uint64_t v17 = (uint64_t *)v15;
      }
      sub_1CB8358B8(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v5[2];
          BOOL v11 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v11);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

char *sub_1CC682688(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  int v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = &v9[40 * v4];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  uint64_t v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      long long v13 = *(_OWORD *)(v2 - 40);
      long long v14 = *(_OWORD *)(v2 - 24);
      *((void *)v10 - 1) = *((void *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    int v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

__n128 sub_1CC6827AC(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
__n128 sub_1CC683384(long long *a1, long long *a2, long long *a3, __n128 result)
{
  if (*((unsigned char *)a2 + 24)) {
    BOOL v4 = *((unsigned char *)a1 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (!*((unsigned char *)a1 + 24)) {
      goto LABEL_15;
    }
LABEL_7:
    if (*((unsigned char *)a2 + 24)) {
      BOOL v5 = *((unsigned char *)a3 + 24) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (!*((unsigned char *)a2 + 24)) {
        goto LABEL_23;
      }
    }
    else if (*(void *)a3 >= *(void *)a2)
    {
LABEL_23:
      long long v9 = *a1;
      uint64_t result = (__n128)a1[1];
      long long v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      *a2 = v9;
      a2[1] = (__int128)result;
      if (*((unsigned char *)a3 + 24) && *((unsigned char *)a2 + 24))
      {
        if (*(void *)a3 >= *(void *)a2) {
          return result;
        }
      }
      else if (!*((unsigned char *)a2 + 24))
      {
        return result;
      }
      long long v6 = *a2;
      uint64_t result = (__n128)a2[1];
      long long v13 = a3[1];
      *a2 = *a3;
      a2[1] = v13;
LABEL_34:
      *a3 = v6;
      a3[1] = (__int128)result;
      return result;
    }
    long long v6 = *a1;
    uint64_t result = (__n128)a1[1];
    long long v7 = a3[1];
    *a1 = *a3;
    a1[1] = v7;
    goto LABEL_34;
  }
  if (*(void *)a2 < *(void *)a1) {
    goto LABEL_7;
  }
LABEL_15:
  if (*((unsigned char *)a2 + 24)) {
    BOOL v8 = *((unsigned char *)a3 + 24) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!*((unsigned char *)a2 + 24)) {
      return result;
    }
  }
  else if (*(void *)a3 >= *(void *)a2)
  {
    return result;
  }
  long long v11 = *a2;
  uint64_t result = (__n128)a2[1];
  long long v12 = a3[1];
  *a2 = *a3;
  a2[1] = v12;
  *a3 = v11;
  a3[1] = (__int128)result;
  if (!*((unsigned char *)a2 + 24) || !*((unsigned char *)a1 + 24))
  {
    if (!*((unsigned char *)a1 + 24)) {
      return result;
    }
    goto LABEL_36;
  }
  if (*(void *)a2 < *(void *)a1)
  {
LABEL_36:
    long long v14 = *a1;
    uint64_t result = (__n128)a1[1];
    long long v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    *a2 = v14;
    a2[1] = (__int128)result;
  }
  return result;
}

BOOL sub_1CC6834A8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v7 = (void *)(a2 - 32);
      if (*(unsigned char *)(a2 - 8)) {
        BOOL v8 = *(unsigned char *)(a1 + 24) == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        if (!*(unsigned char *)(a1 + 24)) {
          return result;
        }
      }
      else if (*v7 >= *(void *)a1)
      {
        return result;
      }
      long long v28 = *(_OWORD *)a1;
      long long v27 = *(_OWORD *)(a1 + 16);
      long long v29 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 16) = v29;
      *(_OWORD *)long long v7 = v28;
      *(_OWORD *)(a2 - 16) = v27;
      return result;
    case 3:
      sub_1CC683384((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32), a3);
      return 1;
    case 4:
      sub_1CC6837EC(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      int v22 = (void *)(a1 + 32);
      uint64_t v23 = (void *)(a1 + 64);
      long long v24 = (void *)(a1 + 96);
      unint64_t v25 = (void *)(a2 - 32);
      sub_1CC6837EC(a1, a1 + 32, a1 + 64, a1 + 96, a3);
      if (*(unsigned char *)(a2 - 8)) {
        BOOL v26 = *(unsigned char *)(a1 + 120) == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26)
      {
        if (!*(unsigned char *)(a1 + 120)) {
          return 1;
        }
      }
      else if (*v25 >= *v24)
      {
        return 1;
      }
      long long v31 = *(_OWORD *)v24;
      long long v30 = *(_OWORD *)(a1 + 112);
      long long v32 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 112) = v32;
      *(_OWORD *)unint64_t v25 = v31;
      *(_OWORD *)(a2 - 16) = v30;
      if (*(unsigned char *)(a1 + 120) && *(unsigned char *)(a1 + 88))
      {
        if (*v24 >= *v23) {
          return 1;
        }
      }
      else if (!*(unsigned char *)(a1 + 88))
      {
        return 1;
      }
      long long v34 = *(_OWORD *)v23;
      long long v33 = *(_OWORD *)(a1 + 80);
      long long v35 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 80) = v35;
      *(_OWORD *)long long v24 = v34;
      *(_OWORD *)(a1 + 112) = v33;
      if (*(unsigned char *)(a1 + 88) && *(unsigned char *)(a1 + 56))
      {
        if (*v23 >= *v22) {
          return 1;
        }
      }
      else if (!*(unsigned char *)(a1 + 56))
      {
        return 1;
      }
      long long v37 = *(_OWORD *)v22;
      long long v36 = *(_OWORD *)(a1 + 48);
      long long v38 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)int v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 48) = v38;
      *(_OWORD *)uint64_t v23 = v37;
      *(_OWORD *)(a1 + 80) = v36;
      if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a1 + 24))
      {
        if (*(void *)(a1 + 32) >= *(void *)a1) {
          return 1;
        }
      }
      else if (!*(unsigned char *)(a1 + 24))
      {
        return 1;
      }
      long long v40 = *(_OWORD *)a1;
      long long v39 = *(_OWORD *)(a1 + 16);
      long long v41 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)a1 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 16) = v41;
      *(_OWORD *)int v22 = v40;
      *(_OWORD *)(a1 + 48) = v39;
      return 1;
    default:
      uint64_t v9 = a1 + 64;
      sub_1CC683384((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), a3);
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    int v13 = *(unsigned __int8 *)(v10 + 24);
    if (*(unsigned char *)(v10 + 24)) {
      BOOL v14 = *(unsigned char *)(v9 + 24) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (!*(unsigned char *)(v9 + 24)) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)v10;
    }
    else
    {
      unint64_t v15 = *(void *)v10;
      if (*(void *)v10 >= *(void *)v9) {
        goto LABEL_30;
      }
    }
    long long v43 = *(_OWORD *)(v10 + 8);
    *(_DWORD *)long long v42 = *(_DWORD *)(v10 + 25);
    *(_DWORD *)&v42[3] = *(_DWORD *)(v10 + 28);
    long long v16 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
    *(_OWORD *)(v10 + 16) = v16;
    uint64_t v17 = a1;
    if (v9 == a1) {
      goto LABEL_29;
    }
    uint64_t v18 = v11;
    while (1)
    {
      uint64_t v19 = a1 + v18;
      long long v20 = (unint64_t *)(a1 + v18 + 32);
      if (v13 && *(unsigned char *)(a1 + v18 + 56))
      {
        if (v15 >= *v20)
        {
          uint64_t v17 = a1 + v18 + 64;
          goto LABEL_29;
        }
        goto LABEL_26;
      }
      if (!*(unsigned char *)(a1 + v18 + 56)) {
        break;
      }
LABEL_26:
      v9 -= 32;
      long long v21 = *(_OWORD *)(a1 + v18 + 48);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 80) = v21;
      v18 -= 32;
      if (v18 == -64)
      {
        uint64_t v17 = a1;
        goto LABEL_29;
      }
    }
    uint64_t v17 = v9;
LABEL_29:
    *(void *)uint64_t v17 = v15;
    *(_OWORD *)(v17 + 8) = v43;
    *(unsigned char *)(v17 + 24) = v13;
    *(_DWORD *)(v17 + 25) = *(_DWORD *)v42;
    *(_DWORD *)(v17 + 28) = *(_DWORD *)&v42[3];
    if (++v12 == 8) {
      return v10 + 32 == a2;
    }
LABEL_30:
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
  }
  while (v10 != a2);
  return 1;
}

__n128 sub_1CC6837EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  result.n128_u64[0] = sub_1CC683384((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  if (*(unsigned char *)(a4 + 24)) {
    BOOL v10 = *(unsigned char *)(a3 + 24) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!*(unsigned char *)(a3 + 24)) {
      return result;
    }
  }
  else if (*(void *)a4 >= *(void *)a3)
  {
    return result;
  }
  long long v11 = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)a4 = v11;
  *(__n128 *)(a4 + 16) = result;
  if (*(unsigned char *)(a3 + 24) && *(unsigned char *)(a2 + 24))
  {
    if (*(void *)a3 >= *(void *)a2) {
      return result;
    }
  }
  else if (!*(unsigned char *)(a2 + 24))
  {
    return result;
  }
  long long v13 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v14 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)a3 = v13;
  *(__n128 *)(a3 + 16) = result;
  if (!*(unsigned char *)(a2 + 24) || !*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a1 + 24)) {
      return result;
    }
    goto LABEL_19;
  }
  if (*(void *)a2 < *(void *)a1)
  {
LABEL_19:
    long long v15 = *(_OWORD *)a1;
    __n128 result = *(__n128 *)(a1 + 16);
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)a2 = v15;
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

BOOL sub_1CC6838D8(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)a1 + 96) & 0xFB) != 2;
}

unint64_t sub_1CC6838F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 136 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      sub_1CC68395C(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      sub_1CC68395C(a1, v5);
    }
  }
  return a2;
}

void sub_1CC68395C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  long long v6 = malloc_type_malloc(136 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CC683A18((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC683A18(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = (long long *)*a1;
    uint64_t v4 = *a1 + 136 * v2;
    do
    {
      long long v5 = *v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *(void *)uint64_t v3 = 0;
      long long v6 = *(long long *)((char *)v3 + 24);
      *(void *)(a2 + 40) = *((void *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((void *)v3 + 4) = 0;
      *((void *)v3 + 5) = 0;
      *((void *)v3 + 3) = 0;
      long long v7 = v3[3];
      *(void *)(a2 + 64) = *((void *)v3 + 8);
      *(_OWORD *)(a2 + 48) = v7;
      *((void *)v3 + 7) = 0;
      *((void *)v3 + 8) = 0;
      *((void *)v3 + 6) = 0;
      long long v8 = *(long long *)((char *)v3 + 72);
      long long v9 = *(long long *)((char *)v3 + 88);
      long long v10 = *(long long *)((char *)v3 + 104);
      *(_OWORD *)(a2 + 116) = *(long long *)((char *)v3 + 116);
      *(_OWORD *)(a2 + 104) = v10;
      *(_OWORD *)(a2 + 88) = v9;
      *(_OWORD *)(a2 + 72) = v8;
      uint64_t v3 = (long long *)((char *)v3 + 136);
      a2 += 136;
    }
    while (v3 != (long long *)v4);
    uint64_t v11 = *((unsigned int *)a1 + 2);
    if (v11)
    {
      long long v12 = (long long *)*a1;
      uint64_t v13 = 136 * v11;
      do
      {
        uint64_t v14 = (uint64_t)v12 + v13;
        if (*((char *)v12 + v13 - 65) < 0) {
          operator delete(*(void **)(v14 - 88));
        }
        if (*(char *)(v14 - 89) < 0) {
          operator delete(*(void **)((char *)v12 + v13 - 112));
        }
        if (*((char *)v12 + v13 - 113) < 0) {
          operator delete(*(void **)(v14 - 136));
        }
        v13 -= 136;
      }
      while (v13);
    }
  }
}

void sub_1CC683B20(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v4 = 24 * v2;
      do
      {
        uint64_t v5 = *(void *)(v3 + v4);
        *(void *)(v3 + v4) = 0;
        if (v5) {
          MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x1D25D9CB0);
  }
}

char **sub_1CC683BB0(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 16];
      if (&v2[v4] != v5) {
        free(v5);
      }
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC683C24@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CC6821F8(*a1, v6);
  if (v6[0] != v6[3]) {
    return llvm::DWARFUnit::getAddrOffsetSectionItem(*(void *)v6[0], a2, (uint64_t)a3);
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

void sub_1CC683C88(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (char *)*((void *)v4 - 19);
        if (v4 - 136 != v6) {
          free(v6);
        }
        v4 -= 160;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC683D18(void *a1)
{
  if (a1)
  {
    sub_1CC683D18(*a1);
    sub_1CC683D18(a1[1]);
    sub_1CD5E35A8(a1 + 5);
    operator delete(a1);
  }
}

uint64_t sub_1CC683D6C(llvm::DWARFContext **a1, uint64_t a2)
{
  return llvm::DWARFUnitVector::addUnitsForSection((uint64_t)*a1 + 16, *a1, a2, 1);
}

uint64_t sub_1CC683D80(llvm::DWARFContext **a1, uint64_t a2)
{
  return llvm::DWARFUnitVector::addUnitsForSection((uint64_t)*a1 + 16, *a1, a2, 2);
}

uint64_t sub_1CC683D94(uint64_t a1, uint64_t a2)
{
  return llvm::DWARFUnitVector::addUnitsForDWOSection(*(void *)a1 + 240, *(llvm::DWARFContext **)a1, a2, 1, **(unsigned char **)(a1 + 8));
}

uint64_t sub_1CC683DAC(uint64_t a1, uint64_t a2)
{
  return llvm::DWARFUnitVector::addUnitsForDWOSection(*(void *)a1 + 240, *(llvm::DWARFContext **)a1, a2, 2, **(unsigned char **)(a1 + 8));
}

void *sub_1CC683DC4(void *result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  if (a2 < 0)
  {
    uint64_t result = (void *)*result;
    do
    {
      if (result)
      {
        uint64_t v8 = v3[1];
        if (v8) {
          uint64_t result = (void *)llvm::DWARFUnit::getPreviousSibling((uint64_t)result, v8);
        }
        else {
          uint64_t result = 0;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      void *v3 = result;
      v3[1] = v8;
    }
    while (!__CFADD__(v2++, 1));
  }
  else if (a2)
  {
    uint64_t v4 = *result;
    for (unint64_t i = a2 + 1; i > 1; --i)
    {
      if (!v4) {
        goto LABEL_10;
      }
      uint64_t v6 = result[1];
      if (v6)
      {
        unsigned int v7 = *(_DWORD *)(v6 + 12);
        if (!v7)
        {
          uint64_t v4 = 0;
LABEL_10:
          uint64_t v6 = 0;
          goto LABEL_11;
        }
        uint64_t v6 = *(void *)(v4 + 288) + 24 * v7;
      }
      else
      {
        uint64_t v4 = 0;
      }
LABEL_11:
      *uint64_t result = v4;
      result[1] = v6;
    }
  }
  return result;
}

void sub_1CC683E70(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v4 - 4);
        if (v4 - 8 != v6) {
          free(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t sub_1CC683F00(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 144 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      sub_1CC683F6C(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      sub_1CC683F6C(a1, v5);
    }
  }
  return a2;
}

void sub_1CC683F6C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(144 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CC684028((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC684028(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 144 * v2;
    do
    {
      *(void *)a2 = *(void *)v3;
      long long v5 = *(_OWORD *)(v3 + 8);
      *(void *)(a2 + 24) = *(void *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 8) = 0;
      long long v6 = *(_OWORD *)(v3 + 32);
      *(void *)(a2 + 48) = *(void *)(v3 + 48);
      *(_OWORD *)(a2 + 32) = v6;
      *(void *)(v3 + 40) = 0;
      *(void *)(v3 + 48) = 0;
      *(void *)(v3 + 32) = 0;
      long long v7 = *(_OWORD *)(v3 + 56);
      *(void *)(a2 + 72) = *(void *)(v3 + 72);
      *(_OWORD *)(a2 + 56) = v7;
      *(void *)(v3 + 64) = 0;
      *(void *)(v3 + 72) = 0;
      *(void *)(v3 + 56) = 0;
      long long v8 = *(_OWORD *)(v3 + 80);
      long long v9 = *(_OWORD *)(v3 + 96);
      long long v10 = *(_OWORD *)(v3 + 112);
      *(_OWORD *)(a2 + 124) = *(_OWORD *)(v3 + 124);
      *(_OWORD *)(a2 + 96) = v9;
      *(_OWORD *)(a2 + 112) = v10;
      *(_OWORD *)(a2 + 80) = v8;
      v3 += 144;
      a2 += 144;
    }
    while (v3 != v4);
    uint64_t v11 = *((unsigned int *)a1 + 2);
    if (v11)
    {
      uint64_t v12 = *a1;
      uint64_t v13 = 144 * v11;
      do
      {
        uint64_t v14 = v12 + v13;
        if (*(char *)(v12 + v13 - 65) < 0) {
          operator delete(*(void **)(v14 - 88));
        }
        if (*(char *)(v14 - 89) < 0) {
          operator delete(*(void **)(v12 + v13 - 112));
        }
        if (*(char *)(v12 + v13 - 113) < 0) {
          operator delete(*(void **)(v14 - 136));
        }
        v13 -= 144;
      }
      while (v13);
    }
  }
}

uint64_t *sub_1CC684130(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
LABEL_7:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    uint64_t v2 = a1[1];
    a1[1] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      goto LABEL_7;
    }
  }
  return a1;
}

void sub_1CC6841F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2618B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC684210(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2618B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC684264(void *a1)
{
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = a1[3];
  a1[3] = 0;
  if (result)
  {
    long long v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void sub_1CC684330(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v4 = sub_1CD4FB504(&v9, &__p);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  if (v5 == 1)
  {
    p_p = &__p;
    __int16 v6 = 260;
  }
  else
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (*(unsigned char *)(a2 + 33) == 1)
      {
        long long v8 = *(std::string **)a2;
      }
      else
      {
        LOBYTE(v5) = 2;
        long long v8 = (std::string *)a2;
      }
      p_p = v8;
      uint64_t v12 = v7;
      uint64_t v13 = &__p;
      LOBYTE(v14) = v5;
      HIBYTE(v14) = 4;
LABEL_10:
      llvm::inconvertibleErrorCode((llvm *)v4);
      operator new();
    }
    __int16 v6 = 256;
  }
  __int16 v14 = v6;
  goto LABEL_10;
}

uint64_t sub_1CC684474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1CC6847B4(a1, a2, a3);
  if (!result)
  {
    switch(a3)
    {
      case 9:
        if (*(void *)a2 == 0x74735F6775626564 && *(unsigned char *)(a2 + 8) == 114)
        {
          uint64_t result = a1 + 1512;
        }
        else
        {
          if (*(void *)a2 != 0x65646E695F626467 || *(unsigned char *)(a2 + 8) != 120) {
            goto LABEL_63;
          }
          uint64_t result = a1 + 1624;
        }
        break;
      case 12:
        if (*(void *)a2 != 0x62615F6775626564 || *(_DWORD *)(a2 + 8) != 1986359906) {
          goto LABEL_63;
        }
        uint64_t result = a1 + 1480;
        break;
      case 13:
        if (*(void *)a2 == 0x72615F6775626564 && *(void *)(a2 + 5) == 0x7365676E6172615FLL)
        {
          uint64_t result = a1 + 1496;
        }
        else if (*(void *)a2 == 0x616D5F6775626564 && *(void *)(a2 + 5) == 0x6F666E6963616D5FLL)
        {
          uint64_t result = a1 + 1528;
        }
        else
        {
          if (*(void *)a2 != 0x74735F6775626564 || *(void *)(a2 + 5) != 0x6F77642E7274735FLL) {
            goto LABEL_63;
          }
          uint64_t result = a1 + 1592;
        }
        break;
      case 14:
        if (*(void *)a2 == 0x75635F6775626564 && *(void *)(a2 + 6) == 0x7865646E695F7563)
        {
          uint64_t result = a1 + 1608;
        }
        else if (*(void *)a2 == 0x75745F6775626564 && *(void *)(a2 + 6) == 0x7865646E695F7574)
        {
          uint64_t result = a1 + 1640;
        }
        else if (*(void *)a2 ^ 0x696C5F6775626564 | *(void *)(a2 + 6) ^ 0x7274735F656E696CLL)
        {
          uint64_t result = 0;
        }
        else
        {
          uint64_t result = a1 + 1656;
        }
        break;
      case 15:
        if (*(void *)a2 != 0x616D5F6775626564 || *(void *)(a2 + 7) != 0x6F77642E6F726361) {
          goto LABEL_63;
        }
        uint64_t result = a1 + 1560;
        break;
      case 16:
        if (*(void *)a2 != 0x62615F6775626564 || *(void *)(a2 + 8) != 0x6F77642E76657262) {
          goto LABEL_63;
        }
        uint64_t result = a1 + 1576;
        break;
      case 17:
        if (*(void *)a2 == 0x616D5F6775626564
          && *(void *)(a2 + 8) == 0x77642E6F666E6963
          && *(unsigned char *)(a2 + 16) == 111)
        {
          uint64_t result = a1 + 1544;
        }
        else
        {
LABEL_63:
          uint64_t result = 0;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1CC6847B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 8:
      if (*(void *)a2 != 0x656D6172665F6865) {
        goto LABEL_120;
      }
      return a1 + 712;
    case 9:
      if (*(void *)a2 != 0x6F6C5F6775626564 || *(unsigned char *)(a2 + 8) != 99) {
        return 0;
      }
      return a1 + 280;
    case 10:
      if (*(void *)a2 == 0x696C5F6775626564 && *(_WORD *)(a2 + 8) == 25966) {
        return a1 + 424;
      }
      if (*(void *)a2 != 0x64615F6775626564 || *(_WORD *)(a2 + 8) != 29284) {
        goto LABEL_120;
      }
      return a1 + 952;
    case 11:
      if (*(void *)a2 == 0x72665F6775626564 && *(void *)(a2 + 3) == 0x656D6172665F6775) {
        return a1 + 664;
      }
      if (*(void *)a2 == 0x616E5F6775626564 && *(void *)(a2 + 3) == 0x73656D616E5F6775) {
        return a1 + 1192;
      }
      if (*(void *)a2 == 0x616E5F656C707061 && *(void *)(a2 + 3) == 0x73656D616E5F656CLL) {
        return a1 + 1000;
      }
      if (*(void *)a2 != 0x79745F656C707061 || *(void *)(a2 + 3) != 0x73657079745F656CLL) {
        goto LABEL_120;
      }
      return a1 + 1048;
    case 12:
      if (*(void *)a2 != 0x61725F6775626564 || *(_DWORD *)(a2 + 8) != 1936025454) {
        goto LABEL_120;
      }
      return a1 + 472;
    case 13:
      if (*(void *)a2 != 0x6F6C5F6775626564 || *(void *)(a2 + 5) != 0x6F77642E636F6C5FLL) {
        goto LABEL_120;
      }
      return a1 + 760;
    case 14:
      if (*(void *)a2 == 0x6F6C5F6775626564 && *(void *)(a2 + 6) == 0x737473696C636F6CLL) {
        return a1 + 328;
      }
      if (*(void *)a2 == 0x6E725F6775626564 && *(void *)(a2 + 6) == 0x737473696C676E72) {
        return a1 + 520;
      }
      if (*(void *)a2 == 0x696C5F6775626564 && *(void *)(a2 + 6) == 0x6F77642E656E696CLL) {
        return a1 + 616;
      }
      if (*(void *)a2 == 0x75705F6775626564 && *(void *)(a2 + 6) == 0x73656D616E627570) {
        return a1 + 1240;
      }
      if (*(void *)a2 != 0x75705F6775626564 || *(void *)(a2 + 6) != 0x7365707974627570) {
        goto LABEL_120;
      }
      return a1 + 1288;
    case 17:
      if (*(void *)a2 != 0x74735F6775626564
        || *(void *)(a2 + 8) != 0x74657366666F5F72
        || *(unsigned char *)(a2 + 16) != 115)
      {
        goto LABEL_120;
      }
      return a1 + 568;
    case 18:
      if (*(void *)a2 == 0x6F6C5F6775626564
        && *(void *)(a2 + 8) == 0x642E737473696C63
        && *(_WORD *)(a2 + 16) == 28535)
      {
        return a1 + 376;
      }
      if (*(void *)a2 == 0x6E725F6775626564
        && *(void *)(a2 + 8) == 0x642E737473696C67
        && *(_WORD *)(a2 + 16) == 28535)
      {
        return a1 + 904;
      }
      if (*(void *)a2 == 0x6E675F6775626564
        && *(void *)(a2 + 8) == 0x6D616E6275705F75
        && *(_WORD *)(a2 + 16) == 29541)
      {
        return a1 + 1336;
      }
      if (*(void *)a2 != 0x6E675F6775626564
        || *(void *)(a2 + 8) != 0x7079746275705F75
        || *(_WORD *)(a2 + 16) != 29541)
      {
        return 0;
      }
      return a1 + 1384;
    case 21:
      if (*(void *)a2 != 0x74735F6775626564
        || *(void *)(a2 + 8) != 0x74657366666F5F72
        || *(void *)(a2 + 13) != 0x6F77642E73746573)
      {
LABEL_120:
        uint64_t v3 = a1 + 1096;
        goto LABEL_121;
      }
      return a1 + 808;
    default:
      uint64_t v3 = a1 + 1096;
      if (a3 == 16)
      {
        uint64_t v18 = *(void *)(a2 + 8);
        BOOL v19 = *(void *)a2 == 0x616E5F656C707061;
        uint64_t v20 = 0x736563617073656DLL;
      }
      else
      {
LABEL_121:
        if (a3 == 10)
        {
          if (*(void *)a2 == 0x626F5F656C707061 && *(_WORD *)(a2 + 8) == 25450) {
            return a1 + 1144;
          }
          return 0;
        }
        if (a3 == 11)
        {
          uint64_t v3 = a1 + 1432;
          if (*(void *)a2 ^ 0x616D5F6775626564 | *(void *)(a2 + 3) ^ 0x6F7263616D5F6775) {
            return 0;
          }
          return v3;
        }
        if (a3 != 14) {
          return 0;
        }
        uint64_t v18 = *(void *)(a2 + 6);
        BOOL v19 = *(void *)a2 == 0x616E5F656C707061;
        uint64_t v20 = 0x63617073656D616ELL;
      }
      if (!v19 || v18 != v20) {
        return 0;
      }
      return v3;
  }
}

unint64_t sub_1CC684DCC(uint64_t **a1, long long *a2)
{
  long long v40 = *a2;
  int v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (!v4)
  {
    __int16 v6 = (uint64_t *)(a1 + 1);
LABEL_16:
    uint64_t v18 = operator new(0x38uLL);
    void v18[2] = *a2;
    *((_DWORD *)v18 + 12) = 0;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v6;
    void *v5 = (uint64_t *)v18;
    BOOL v19 = (uint64_t *)**a1;
    uint64_t v20 = (uint64_t *)v18;
    if (v19)
    {
      *a1 = v19;
      uint64_t v20 = *v5;
    }
    sub_1CB8358B8(a1[1], v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v22 = (char *)a1[4];
    unint64_t v21 = (unint64_t)a1[5];
    if ((unint64_t)v22 >= v21)
    {
      unint64_t v25 = (char *)a1[3];
      uint64_t v26 = (v22 - v25) >> 6;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 58) {
        abort();
      }
      uint64_t v28 = v21 - (void)v25;
      if (v28 >> 5 > v27) {
        unint64_t v27 = v28 >> 5;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29 >> 58) {
        sub_1CB833614();
      }
      long long v30 = (char *)operator new(v29 << 6);
      long long v31 = &v30[64 * v26];
      *(_OWORD *)long long v31 = *a2;
      *((_OWORD *)v31 + 1) = 0u;
      long long v32 = &v30[64 * v29];
      long long v24 = (uint64_t *)(v31 + 64);
      *((_OWORD *)v31 + 2) = 0u;
      *(_OWORD *)(v31 + 44) = 0u;
      if (v22 == v25)
      {
        a1[3] = (uint64_t *)v31;
        a1[4] = v24;
        a1[5] = (uint64_t *)v32;
        if (!v22) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v33 = 0;
        do
        {
          long long v34 = &v31[v33];
          long long v35 = &v22[v33];
          *((_OWORD *)v34 - 4) = *(_OWORD *)&v22[v33 - 64];
          long long v36 = *(_OWORD *)&v22[v33 - 48];
          *((void *)v34 - 4) = *(void *)&v22[v33 - 32];
          *((_OWORD *)v34 - 3) = v36;
          *((void *)v34 - 3) = *(void *)&v22[v33 - 24];
          *((void *)v35 - 3) = 0;
          *((_DWORD *)v34 - 4) = *(_DWORD *)&v22[v33 - 16];
          *((_DWORD *)v35 - 4) = 0;
          *((_DWORD *)v34 - 3) = *(_DWORD *)&v22[v33 - 12];
          *((_DWORD *)v35 - 3) = 0;
          *((_DWORD *)v34 - 2) = *(_DWORD *)&v22[v33 - 8];
          *((_DWORD *)v35 - 2) = 0;
          v33 -= 64;
        }
        while (&v22[v33] != v25);
        int v22 = (char *)a1[3];
        long long v37 = (char *)a1[4];
        a1[3] = (uint64_t *)&v31[v33];
        a1[4] = v24;
        a1[5] = (uint64_t *)v32;
        if (v37 != v22)
        {
          do
          {
            long long v38 = v37 - 64;
            MEMORY[0x1D25D9CD0](*((void *)v37 - 3), 8);
            long long v37 = v38;
          }
          while (v38 != v22);
        }
        if (!v22) {
          goto LABEL_34;
        }
      }
      operator delete(v22);
    }
    else
    {
      long long v23 = *a2;
      long long v24 = (uint64_t *)(v22 + 64);
      *(_OWORD *)int v22 = v23;
      *((_OWORD *)v22 + 1) = 0u;
      *((_OWORD *)v22 + 2) = 0u;
      *(_OWORD *)(v22 + 44) = 0u;
    }
LABEL_34:
    a1[4] = v24;
    MEMORY[0x1D25D9CD0](0, 8);
    MEMORY[0x1D25D9CD0](0, 8);
    uint64_t v17 = a1[3];
    unsigned int v16 = ((unint64_t)((char *)a1[4] - (char *)v17) >> 6) - 1;
    *((_DWORD *)v18 + 12) = v16;
    return (unint64_t)&v17[8 * (unint64_t)v16 + 2];
  }
  while (1)
  {
    while (1)
    {
      __int16 v6 = v4;
      unint64_t v7 = bswap64(v40);
      unint64_t v8 = bswap64(v6[4]);
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 > v8;
      BOOL v11 = !v9;
      if (v10 - v11 >= 0) {
        break;
      }
      uint64_t v4 = (uint64_t *)*v6;
      int v5 = (uint64_t **)v6;
      if (!*v6) {
        goto LABEL_16;
      }
    }
    unint64_t v12 = bswap64(v6[4]);
    unint64_t v13 = bswap64(v40);
    BOOL v9 = v12 >= v13;
    BOOL v14 = v12 > v13;
    BOOL v15 = !v9;
    if (v14 - v15 >= 0) {
      break;
    }
    uint64_t v4 = (uint64_t *)v6[1];
    if (!v4)
    {
      int v5 = (uint64_t **)(v6 + 1);
      goto LABEL_16;
    }
  }
  unsigned int v16 = *((_DWORD *)v6 + 12);
  uint64_t v17 = a1[3];
  return (unint64_t)&v17[8 * (unint64_t)v16 + 2];
}

uint64_t sub_1CC685084(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 1680);
  uint64_t v3 = *(void ***)(a1 + 1688);
  if (v3 == v2)
  {
    unint64_t v8 = (void *)(a1 + 1712);
    uint64_t v3 = *(void ***)(a1 + 1680);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 1704);
    int v5 = &v2[v4 / 0xAA];
    __int16 v6 = (void **)*v5;
    unint64_t v7 = (void **)((char *)*v5 + 24 * (v4 % 0xAA));
    unint64_t v8 = (void *)(a1 + 1712);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 1712) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 1712) + v4) % 0xAA);
    if (v7 != (void **)v9)
    {
      do
      {
        BOOL v11 = (void **)*v7;
        v7 += 3;
        BOOL v10 = v11;
        if (v11 != v7)
        {
          free(v10);
          __int16 v6 = (void **)*v5;
        }
        if ((char *)v7 - (char *)v6 == 4080)
        {
          unint64_t v12 = (void **)v5[1];
          ++v5;
          __int16 v6 = v12;
          unint64_t v7 = v12;
        }
      }
      while (v7 != (void **)v9);
      uint64_t v3 = *(void ***)(a1 + 1688);
      uint64_t v2 = *(void ***)(a1 + 1680);
    }
  }
  *unint64_t v8 = 0;
  unint64_t v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v2 = (void **)(*(void *)(a1 + 1680) + 8);
      *(void *)(a1 + 1680) = v2;
      uint64_t v3 = *(void ***)(a1 + 1688);
      unint64_t v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v14 = v13 >> 3;
  if (v14 == 1)
  {
    uint64_t v15 = 85;
    goto LABEL_16;
  }
  if (v14 == 2)
  {
    uint64_t v15 = 170;
LABEL_16:
    *(void *)(a1 + 1704) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      unsigned int v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 1680);
    uint64_t v18 = *(void *)(a1 + 1688);
    if (v18 != v17) {
      *(void *)(a1 + 1688) = v18 + ((v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  BOOL v19 = *(void **)(a1 + 1672);
  if (v19) {
    operator delete(v19);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1456), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1408), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1360), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1312), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1264), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1216), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1168), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1120), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1072), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1024), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 976), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 928), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 880), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 832), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 784), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 736), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 688), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 640), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 592), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 544), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 496), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 448), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 400), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 352), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 304), 8);
  uint64_t v20 = *(void *)(a1 + 256);
  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 264);
    int v22 = *(void **)(a1 + 256);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = v21 - 64;
        MEMORY[0x1D25D9CD0](*(void *)(v21 - 24), 8);
        uint64_t v21 = v23;
      }
      while (v23 != v20);
      int v22 = *(void **)(a1 + 256);
    }
    *(void *)(a1 + 264) = v20;
    operator delete(v22);
  }
  sub_1CBB0D544(*(void **)(a1 + 240));
  uint64_t v24 = *(void *)(a1 + 208);
  if (v24)
  {
    uint64_t v25 = *(void *)(a1 + 216);
    uint64_t v26 = *(void **)(a1 + 208);
    if (v25 != v24)
    {
      do
      {
        uint64_t v27 = v25 - 64;
        MEMORY[0x1D25D9CD0](*(void *)(v25 - 24), 8);
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      uint64_t v26 = *(void **)(a1 + 208);
    }
    *(void *)(a1 + 216) = v24;
    operator delete(v26);
  }
  sub_1CBB0D544(*(void **)(a1 + 192));
  uint64_t v28 = *(void *)(a1 + 160);
  if (v28)
  {
    uint64_t v29 = *(void *)(a1 + 168);
    long long v30 = *(void **)(a1 + 160);
    if (v29 != v28)
    {
      do
      {
        uint64_t v31 = v29 - 64;
        MEMORY[0x1D25D9CD0](*(void *)(v29 - 24), 8);
        uint64_t v29 = v31;
      }
      while (v31 != v28);
      long long v30 = *(void **)(a1 + 160);
    }
    *(void *)(a1 + 168) = v28;
    operator delete(v30);
  }
  sub_1CBB0D544(*(void **)(a1 + 144));
  uint64_t v32 = *(void *)(a1 + 112);
  if (v32)
  {
    uint64_t v33 = *(void *)(a1 + 120);
    long long v34 = *(void **)(a1 + 112);
    if (v33 != v32)
    {
      do
      {
        uint64_t v35 = v33 - 64;
        MEMORY[0x1D25D9CD0](*(void *)(v33 - 24), 8);
        uint64_t v33 = v35;
      }
      while (v35 != v32);
      long long v34 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 120) = v32;
    operator delete(v34);
  }
  sub_1CBB0D544(*(void **)(a1 + 96));
  long long v36 = *(void **)(a1 + 64);
  if (v36)
  {
    *(void *)(a1 + 72) = v36;
    operator delete(v36);
  }
  return a1;
}

void sub_1CC685464(uint64_t a1)
{
  sub_1CC685084(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC68549C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_1CC6854A8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1CC6854B0(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_1CC6854D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1CC6854D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 33);
}

uint64_t sub_1CC6854E0(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 112);
  for (uint64_t i = *(void *)(result + 120); v3 != i; v3 += 64)
    uint64_t result = a2(a3, v3 + 16);
  return result;
}

uint64_t sub_1CC685530(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 160);
  for (uint64_t i = *(void *)(result + 168); v3 != i; v3 += 64)
    uint64_t result = a2(a3, v3 + 16);
  return result;
}

uint64_t sub_1CC685580(uint64_t a1)
{
  return *(void *)(a1 + 1480);
}

uint64_t sub_1CC685590(uint64_t a1)
{
  return a1 + 280;
}

uint64_t sub_1CC685598(uint64_t a1)
{
  return a1 + 328;
}

uint64_t sub_1CC6855A0(uint64_t a1)
{
  return *(void *)(a1 + 1496);
}

uint64_t sub_1CC6855B0(uint64_t a1)
{
  return a1 + 664;
}

uint64_t sub_1CC6855B8(uint64_t a1)
{
  return a1 + 712;
}

uint64_t sub_1CC6855C0(uint64_t a1)
{
  return a1 + 424;
}

uint64_t sub_1CC6855C8(uint64_t a1)
{
  return *(void *)(a1 + 1656);
}

uint64_t sub_1CC6855D8(uint64_t a1)
{
  return *(void *)(a1 + 1512);
}

uint64_t sub_1CC6855E8(uint64_t a1)
{
  return a1 + 472;
}

uint64_t sub_1CC6855F0(uint64_t a1)
{
  return a1 + 520;
}

uint64_t sub_1CC6855F8(uint64_t a1)
{
  return a1 + 1432;
}

uint64_t sub_1CC685600(uint64_t a1)
{
  return *(void *)(a1 + 1560);
}

uint64_t sub_1CC685610(uint64_t a1)
{
  return *(void *)(a1 + 1528);
}

uint64_t sub_1CC685620(uint64_t a1)
{
  return *(void *)(a1 + 1544);
}

uint64_t sub_1CC685630(uint64_t a1)
{
  return a1 + 1240;
}

uint64_t sub_1CC685638(uint64_t a1)
{
  return a1 + 1288;
}

uint64_t sub_1CC685640(uint64_t a1)
{
  return a1 + 1336;
}

uint64_t sub_1CC685648(uint64_t a1)
{
  return a1 + 1384;
}

uint64_t sub_1CC685650(uint64_t a1)
{
  return a1 + 568;
}

uint64_t sub_1CC685658(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 208);
  for (uint64_t i = *(void *)(result + 216); v3 != i; v3 += 64)
    uint64_t result = a2(a3, v3 + 16);
  return result;
}

uint64_t sub_1CC6856A8(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 256);
  for (uint64_t i = *(void *)(result + 264); v3 != i; v3 += 64)
    uint64_t result = a2(a3, v3 + 16);
  return result;
}

uint64_t sub_1CC6856F8(uint64_t a1)
{
  return *(void *)(a1 + 1576);
}

uint64_t sub_1CC685708(uint64_t a1)
{
  return a1 + 616;
}

uint64_t sub_1CC685710(uint64_t a1)
{
  return a1 + 760;
}

uint64_t sub_1CC685718(uint64_t a1)
{
  return a1 + 376;
}

uint64_t sub_1CC685720(uint64_t a1)
{
  return *(void *)(a1 + 1592);
}

uint64_t sub_1CC685730(uint64_t a1)
{
  return a1 + 808;
}

uint64_t sub_1CC685738(uint64_t a1)
{
  return a1 + 856;
}

uint64_t sub_1CC685740(uint64_t a1)
{
  return a1 + 904;
}

uint64_t sub_1CC685748(uint64_t a1)
{
  return a1 + 952;
}

uint64_t sub_1CC685750(uint64_t a1)
{
  return a1 + 1000;
}

uint64_t sub_1CC685758(uint64_t a1)
{
  return a1 + 1048;
}

uint64_t sub_1CC685760(uint64_t a1)
{
  return a1 + 1096;
}

uint64_t sub_1CC685768(uint64_t a1)
{
  return a1 + 1192;
}

uint64_t sub_1CC685770(uint64_t a1)
{
  return a1 + 1144;
}

uint64_t sub_1CC685778(uint64_t a1)
{
  return *(void *)(a1 + 1608);
}

uint64_t sub_1CC685788(uint64_t a1)
{
  return *(void *)(a1 + 1624);
}

uint64_t sub_1CC685798(uint64_t a1)
{
  return *(void *)(a1 + 1640);
}

void sub_1CC6857A8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    unsigned int v5 = (v4 - 1) & (37 * a2);
    __int16 v6 = (uint64_t *)(v3 + 80 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -1)
    {
      unsigned int v9 = v5 + v8++;
      unsigned int v5 = v9 & (v4 - 1);
      __int16 v6 = (uint64_t *)(v3 + 80 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        goto LABEL_8;
      }
    }
  }
  __int16 v6 = (uint64_t *)(v3 + 80 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 80 * v4))
  {
    char v12 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    long long v10 = *(_OWORD *)(v6 + 3);
    long long v11 = *(_OWORD *)(v6 + 7);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(a3 + 48) = v11;
    *(void *)(a3 + 64) = v6[9];
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(a3 + 16) = v10;
    char v12 = 1;
  }
  *(unsigned char *)(a3 + 72) = v12;
}

uint64_t sub_1CC685854(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    __int16 v6 = (void *)(a1 + 80 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      long long v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          long long v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        __int16 v6 = (void *)(a1 + 80 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        __int16 v6 = v10;
      }
    }
  }
  else
  {
    __int16 v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC6858EC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 80 * v10;
      do
      {
        *uint64_t result = -1;
        result += 10;
        v11 -= 80;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 80 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v21 = 0;
          sub_1CC685854(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          uint64_t v15 = v21;
          void *v21 = *(void *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          long long v16 = *(_OWORD *)(v13 + 24);
          long long v17 = *(_OWORD *)(v13 + 40);
          long long v18 = *(_OWORD *)(v13 + 56);
          v15[9] = *(void *)(v13 + 72);
          *(_OWORD *)(v15 + 7) = v18;
          *(_OWORD *)(v15 + 5) = v17;
          *(_OWORD *)(v15 + 3) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 80;
        v12 -= 80;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 80 * v19;
    do
    {
      *uint64_t result = -1;
      result += 10;
      v20 -= 80;
    }
    while (v20);
  }
  return result;
}

unint64_t llvm::DWARFDataExtractor::getInitialLength(uint64_t a1, unint64_t *a2, void *a3)
{
  if (a3 && *a3) {
    return 0;
  }
  unint64_t v10 = *a2;
  uint64_t v11 = 0;
  unint64_t result = llvm::DWARFDataExtractor::getRelocatedValue(a1, 4, &v10, 0, &v11);
  unint64_t v9 = result;
  if (result == 0xFFFFFFFF)
  {
    unint64_t result = llvm::DWARFDataExtractor::getRelocatedValue(a1, 8, &v10, 0, &v11);
  }
  else if (result >= 0xFFFFFFF0)
  {
    uint64_t v11 = 0;
    if (a3)
    {
      int v7 = std::generic_category();
      sub_1CD5E3FE8(22, (uint64_t)v7, (uint64_t)"unsupported reserved unit length of value 0x%8.8llx", (uint64_t *)&v9);
    }
LABEL_12:
    unint64_t result = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_15;
  }
  if (!v11)
  {
    *a2 = v10;
    if (!a3) {
      return result;
    }
LABEL_15:
    if (!*a3) {
      *a3 = 0;
    }
    return result;
  }
  if (a3)
  {
    *a3 = v11;
    goto LABEL_12;
  }
  unsigned int v8 = v11;
  uint64_t v11 = 0;
  sub_1CD4515D0(&v8);
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  unint64_t result = (unint64_t)v11;
  if (v11)
  {
    (*(void (**)(void *))(*v11 + 8))(v11);
    goto LABEL_12;
  }
  return result;
}

unint64_t llvm::DWARFDataExtractor::getEncodedPointer(llvm::DWARFDataExtractor *this, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  if (a3 == 255)
  {
LABEL_8:
    unint64_t v5 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v8 = *a2;
    uint64_t v9 = 0;
    switch(a3 & 0xF)
    {
      case 0u:
        unsigned int v10 = *((unsigned __int8 *)this + 17);
        if (v10 > 8 || ((1 << v10) & 0x114) == 0) {
          goto LABEL_8;
        }
        unint64_t Unsigned = llvm::DataExtractor::getUnsigned(this, a2, v10, 0);
        goto LABEL_17;
      case 1u:
        unint64_t Unsigned = llvm::DataExtractor::getULEB128((uint64_t *)this, (uint64_t *)a2, 0);
        goto LABEL_17;
      case 2u:
        LODWORD(Unsigned) = sub_1CD833674((uint64_t)this, a2, 0);
        goto LABEL_26;
      case 3u:
        LODWORD(Unsigned) = sub_1CD8337FC((uint64_t)this, a2, 0);
LABEL_26:
        unint64_t Unsigned = Unsigned;
        goto LABEL_17;
      case 4u:
        unint64_t Unsigned = sub_1CD833894((uint64_t)this, a2, 0);
        goto LABEL_17;
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        return v9 | v5;
      case 9u:
        unint64_t Unsigned = llvm::DataExtractor::getSLEB128(this, (uint64_t *)a2, 0);
        goto LABEL_17;
      case 0xAu:
        if (v8 > 0xFFFFFFFFFFFFFFFDLL || *((void *)this + 1) <= v8 + 1)
        {
          unint64_t Unsigned = 0;
        }
        else
        {
          unsigned int v12 = *(unsigned __int16 *)(*(void *)this + v8);
          unsigned int v13 = bswap32(v12) >> 16;
          if (*((unsigned char *)this + 16) != 1) {
            LOWORD(v12) = v13;
          }
          *a2 = v8 + 2;
          unint64_t Unsigned = (__int16)v12;
        }
        goto LABEL_17;
      case 0xBu:
        unint64_t Unsigned = (int)llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)this, 4, a2, 0, 0);
        goto LABEL_17;
      case 0xCu:
        unint64_t Unsigned = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)this, 8, a2, 0, 0);
LABEL_17:
        int v14 = (a3 >> 4) & 7;
        if (!v14) {
          goto LABEL_20;
        }
        if (v14 == 1)
        {
          Unsigned += a4;
LABEL_20:
          unint64_t v5 = Unsigned & 0xFFFFFFFFFFFFFF00;
          uint64_t v9 = Unsigned;
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v9 = 0;
          *a2 = v8;
        }
        break;
      default:
        uint64_t v9 = 0;
        return v9 | v5;
    }
  }
  return v9 | v5;
}

uint64_t llvm::DWARFAbbreviationDeclarationSet::DWARFAbbreviationDeclarationSet(uint64_t this)
{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

void llvm::DWARFAbbreviationDeclarationSet::clear(llvm::DWARFAbbreviationDeclarationSet *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  uint64_t v2 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); i != v2; i -= 160)
  {
    uint64_t v4 = *(void **)(i - 152);
    if ((void *)(i - 136) != v4) {
      free(v4);
    }
  }
  *((void *)this + 3) = v2;
}

void sub_1CC685E78(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a1) >> 5);
    if (v7 + 1 > 0x199999999999999) {
      abort();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 5);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v10 = 0x199999999999999;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v20 = a1 + 2;
    if (v10)
    {
      if (v10 > 0x199999999999999) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(160 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unsigned int v12 = &v11[160 * v7];
    std::string __p = v11;
    long long v17 = v12;
    uint64_t v19 = &v11[160 * v10];
    *(void *)unsigned int v12 = *(void *)a2;
    *((void *)v12 + 1) = v12 + 24;
    *((void *)v12 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4684F0((uint64_t)(v12 + 8), a2 + 8);
    }
    *(void *)&v11[160 * v7 + 152] = *(void *)(a2 + 152);
    long long v18 = v12 + 160;
    sub_1CD5E47BC(a1, &__p);
    unint64_t v6 = (void *)a1[1];
    unsigned int v13 = v17;
    for (uint64_t i = v18; i != v13; i -= 160)
    {
      uint64_t v15 = (char *)*((void *)i - 19);
      if (i - 136 != v15) {
        free(v15);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    void *v5 = *(void *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4684F0((uint64_t)(v5 + 1), a2 + 8);
    }
    v5[19] = *(void *)(a2 + 152);
    unint64_t v6 = v5 + 20;
  }
  a1[1] = (uint64_t)v6;
}

void llvm::DWARFAbbreviationDeclarationSet::dump(llvm::DWARFAbbreviationDeclarationSet *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = (llvm::DWARFAbbreviationDeclaration *)*((void *)this + 2);
  for (uint64_t i = (llvm::DWARFAbbreviationDeclaration *)*((void *)this + 3);
        v2 != i;
        uint64_t v2 = (llvm::DWARFAbbreviationDeclaration *)((char *)v2 + 160))
  {
    llvm::DWARFAbbreviationDeclaration::dump(v2, a2);
  }
}

uint64_t llvm::DWARFDebugAbbrev::DWARFDebugAbbrev(uint64_t this)
{
  *(unsigned char *)(this + 56) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = this + 8;
  return this;
}

{
  *(unsigned char *)(this + 56) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = this + 8;
  return this;
}

void llvm::DWARFDebugAbbrev::clear(char **this)
{
  uint64_t v2 = (char *)(this + 1);
  sub_1CD5E3EA8((uint64_t)this, this[1]);
  *this = v2;
  *(void *)uint64_t v2 = 0;
  this[2] = 0;
  this[3] = v2;
}

void llvm::DWARFDebugAbbrev::parse(uint64_t **this)
{
  if (!*((unsigned char *)this + 56)) {
    return;
  }
  unint64_t v43 = 0;
  if (!this[5]) {
    goto LABEL_59;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(this + 1);
  unint64_t v4 = *this;
  long long v30 = (char *)(this + 4);
  while (1)
  {
    unint64_t v5 = v4;
    unint64_t v4 = (uint64_t *)(this + 1);
    if (v5 != v3)
    {
      while (v5[4] < (unint64_t)v2)
      {
        unint64_t v6 = (uint64_t *)v5[1];
        if (v6)
        {
          do
          {
            unint64_t v7 = v6;
            unint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            unint64_t v7 = (uint64_t *)v5[2];
            BOOL v8 = *v7 == (void)v5;
            unint64_t v5 = v7;
          }
          while (!v8);
        }
        unint64_t v5 = v7;
        if (v7 == v3)
        {
          unint64_t v4 = (uint64_t *)(this + 1);
          goto LABEL_14;
        }
      }
      unint64_t v4 = v5;
    }
LABEL_14:
    long long v38 = 0;
    int v39 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    long long v36 = *(_OWORD *)v30;
    uint64_t v37 = *((void *)v30 + 2);
    if (!llvm::DWARFAbbreviationDeclarationSet::extract((uint64_t)&v38, &v36, (uint64_t *)&v43)) {
      break;
    }
    v31[1] = v38;
    int v32 = v39;
    uint64_t v9 = v40;
    uint64_t v10 = v41;
    v31[0] = v2;
    uint64_t v33 = v40;
    uint64_t v34 = v41;
    uint64_t v11 = v42;
    uint64_t v35 = v42;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    if (v3 == v4 || (unint64_t v12 = v4[4], v12 > (unint64_t)v2))
    {
      uint64_t v13 = *v4;
      int v14 = v4;
      if (*this == v4) {
        goto LABEL_23;
      }
      uint64_t v15 = (uint64_t *)*v4;
      long long v16 = v4;
      if (v13)
      {
        do
        {
          int v14 = v15;
          uint64_t v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          int v14 = (uint64_t *)v16[2];
          BOOL v8 = *v14 == (void)v16;
          long long v16 = v14;
        }
        while (v8);
      }
      if (v14[4] < (unint64_t)v2)
      {
LABEL_23:
        if (v13) {
          long long v17 = v14;
        }
        else {
          long long v17 = v4;
        }
        if (v13) {
          long long v18 = v14 + 1;
        }
        else {
          long long v18 = v4;
        }
        if (*v18) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v21 = (uint64_t *)*v3;
        long long v18 = (uint64_t *)(this + 1);
        long long v17 = (uint64_t *)(this + 1);
        if (*v3)
        {
          while (1)
          {
            while (1)
            {
              long long v17 = v21;
              unint64_t v22 = v21[4];
              if (v22 <= (unint64_t)v2) {
                break;
              }
              uint64_t v21 = (uint64_t *)*v17;
              long long v18 = v17;
              if (!*v17) {
                goto LABEL_54;
              }
            }
            if (v22 >= (unint64_t)v2) {
              goto LABEL_58;
            }
            uint64_t v21 = (uint64_t *)v17[1];
            if (!v21) {
              goto LABEL_41;
            }
          }
        }
      }
      goto LABEL_54;
    }
    if (v12 < (unint64_t)v2)
    {
      long long v18 = v4 + 1;
      uint64_t v19 = (uint64_t *)v4[1];
      if (v19)
      {
        do
        {
          long long v18 = v19;
          uint64_t v19 = (uint64_t *)*v19;
          long long v17 = v18;
          uint64_t v20 = v18;
        }
        while (v19);
      }
      else
      {
        uint64_t v20 = v4;
        do
        {
          uint64_t v23 = v20;
          uint64_t v20 = (uint64_t *)v20[2];
        }
        while ((uint64_t *)*v20 != v23);
        long long v17 = v4;
      }
      if (v20 != v3 && v20[4] <= (unint64_t)v2)
      {
        uint64_t v24 = (uint64_t *)*v3;
        long long v18 = (uint64_t *)(this + 1);
        long long v17 = (uint64_t *)(this + 1);
        if (*v3)
        {
          while (1)
          {
            while (1)
            {
              long long v17 = v24;
              unint64_t v25 = v24[4];
              if (v25 <= (unint64_t)v2) {
                break;
              }
              uint64_t v24 = (uint64_t *)*v17;
              long long v18 = v17;
              if (!*v17) {
                goto LABEL_54;
              }
            }
            if (v25 >= (unint64_t)v2) {
              goto LABEL_58;
            }
            uint64_t v24 = (uint64_t *)v17[1];
            if (!v24)
            {
LABEL_41:
              long long v18 = v17 + 1;
              break;
            }
          }
        }
      }
LABEL_54:
      uint64_t v26 = operator new(0x50uLL);
      uint64_t v27 = v38;
      v26[4] = v2;
      v26[5] = v27;
      *((_DWORD *)v26 + 12) = v39;
      v26[7] = v9;
      v26[8] = v10;
      void v26[9] = v11;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      *uint64_t v26 = 0;
      v26[1] = 0;
      void v26[2] = v17;
      *long long v18 = (uint64_t)v26;
      uint64_t v28 = (uint64_t *)**this;
      if (v28)
      {
        *this = v28;
        uint64_t v29 = (uint64_t *)*v18;
      }
      else
      {
        uint64_t v29 = v26;
      }
      sub_1CB8358B8(this[1], v29);
      this[2] = (uint64_t *)((char *)this[2] + 1);
    }
LABEL_58:
    __n128 v44 = (void **)&v33;
    sub_1CC683C88(&v44);
    v31[0] = (void **)&v40;
    sub_1CC683C88(v31);
    uint64_t v2 = (void **)v43;
    if ((unint64_t)this[5] <= v43) {
      goto LABEL_59;
    }
  }
  v31[0] = (void **)&v40;
  sub_1CC683C88(v31);
LABEL_59:
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 56) = 0;
}

void llvm::DWARFDebugAbbrev::dump(uint64_t **this, llvm::raw_ostream *a2)
{
  llvm::DWARFDebugAbbrev::parse(this);
  if (this[2])
  {
    unint64_t v6 = *this;
    unint64_t v4 = (uint64_t *)(this + 1);
    unint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t v7 = v5[4];
        v14[0] = &unk_1F25FF808;
        v14[1] = "Abbrev table for offset: 0x%8.8llx\n";
        v14[2] = v7;
        llvm::raw_ostream::operator<<(a2, (uint64_t)v14);
        BOOL v8 = (llvm::DWARFAbbreviationDeclaration *)v5[7];
        uint64_t v9 = (llvm::DWARFAbbreviationDeclaration *)v5[8];
        while (v8 != v9)
        {
          llvm::DWARFAbbreviationDeclaration::dump(v8, a2);
          BOOL v8 = (llvm::DWARFAbbreviationDeclaration *)((char *)v8 + 160);
        }
        uint64_t v10 = (uint64_t *)v5[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (uint64_t *)v5[2];
            BOOL v12 = *v11 == (void)v5;
            unint64_t v5 = v11;
          }
          while (!v12);
        }
        unint64_t v5 = v11;
      }
      while (v11 != v4);
    }
  }
  else
  {
    uint64_t v13 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v13) > 9)
    {
      *(_WORD *)(v13 + 8) = 2622;
      *(void *)uint64_t v13 = *(void *)"< EMPTY >\n";
      *((void *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "< EMPTY >\n", 0xAuLL);
    }
  }
}

void llvm::DWARFDebugAddrTable::extractAddresses(llvm::DWARFDebugAddrTable *this@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v10 = *a3;
  unsigned int v11 = *((unsigned __int8 *)this + 26);
  std::generic_category();
  sub_1CD5E49A8(v11, (uint64_t)"address table at offset 0x%llx", (uint64_t *)this + 1, a5);
  if (!*a5)
  {
    unint64_t v12 = a4 - v10;
    unint64_t v13 = *((unsigned __int8 *)this + 26);
    unint64_t v14 = v12 / v13;
    if (v12 % v13)
    {
      *((void *)this + 2) = 0;
      std::generic_category();
      memset(__p, 0, sizeof(__p));
      int v32 = 0;
      char v36 = 0;
      uint64_t v37 = 0;
      int v39 = __p;
      int v38 = 0;
      uint64_t v31 = &unk_1F2646F30;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v15 = *((void *)this + 1);
      char v16 = *((unsigned char *)this + 26);
      v41[0] = &unk_1F2618D10;
      v41[1] = "address table at offset 0x%llx contains data of size 0x%llx which is not a multiple of addr size %hhu";
      void v41[2] = v15;
      v41[3] = v12;
      LOBYTE(v42) = v16;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v31, (uint64_t)v41);
      operator new();
    }
    long long v17 = (void **)((char *)this + 32);
    *((void *)this + 5) = *((void *)this + 4);
    sub_1CBF7ACFC((uint64_t)this + 32, v12 / v13);
    if (v12 >= v13)
    {
      do
      {
        unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, *((unsigned __int8 *)this + 26), a3, 0, 0);
        unint64_t v19 = RelocatedValue;
        uint64_t v21 = (unint64_t *)*((void *)this + 5);
        unint64_t v20 = *((void *)this + 6);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v23 = (unint64_t *)*v17;
          uint64_t v24 = ((char *)v21 - (unsigned char *)*v17) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            abort();
          }
          uint64_t v26 = v20 - (void)v23;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            if (v27 >> 61) {
              sub_1CB833614();
            }
            uint64_t v28 = (char *)operator new(8 * v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (unint64_t *)&v28[8 * v24];
          unint64_t *v29 = v19;
          unint64_t v22 = v29 + 1;
          while (v21 != v23)
          {
            unint64_t v30 = *--v21;
            *--uint64_t v29 = v30;
          }
          *((void *)this + 4) = v29;
          *((void *)this + 5) = v22;
          *((void *)this + 6) = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
          long long v17 = (void **)((char *)this + 32);
        }
        else
        {
          unint64_t *v21 = RelocatedValue;
          unint64_t v22 = v21 + 1;
        }
        *((void *)this + 5) = v22;
        --v14;
      }
      while (v14);
    }
    *a5 = 0;
  }
}

uint64_t llvm::DWARFDebugAddrTable::extractV5@<X0>(uint64_t a1@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  *(void *)(a1 + 8) = *a3;
  unint64_t v10 = (uint64_t *)(a1 + 8);
  uint64_t v31 = 0;
  unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a2, a3, &v31);
  *(void *)(a1 + 16) = InitialLength;
  *(unsigned char *)a1 = v12;
  if (v31)
  {
    *(void *)(a1 + 16) = 0;
    long long v17 = std::generic_category();
    uint64_t v30 = v31;
    uint64_t v31 = 0;
    sub_1CD4FB504(&v30, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    __int16 v42 = p_p;
    sub_1CD5E2210(22, (uint64_t)v17, (uint64_t)"parsing address table at offset 0x%llx: %s", v10, (uint64_t *)&v42);
  }
  unint64_t v13 = *a3 + InitialLength;
  if (v13 < *a3 || *((void *)a2 + 1) <= v13 - 1)
  {
    __p.__r_.__value_.__r.__words[0] = InitialLength;
    *(void *)(a1 + 16) = 0;
    uint64_t v15 = std::generic_category();
    char v16 = "section is not large enough to contain an address table at offset 0x%llx with a unit_length value of 0x%llx";
    goto LABEL_13;
  }
  if (InitialLength <= 3)
  {
    __p.__r_.__value_.__r.__words[0] = InitialLength;
    *(void *)(a1 + 16) = 0;
    uint64_t v15 = std::generic_category();
    char v16 = "address table at offset 0x%llx has a unit_length value of 0x%llx, which is too small to contain a complete header";
LABEL_13:
    sub_1CD5E4C08(22, (uint64_t)v15, (uint64_t)v16, v10, (uint64_t *)&__p);
  }
  *(_WORD *)(a1 + 24) = sub_1CD833674((uint64_t)a2, a3, 0);
  unint64_t v20 = *a3;
  BOOL v21 = llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0);
  unint64_t v22 = *a3;
  if (v21)
  {
    char v23 = *(unsigned char *)(*(void *)a2 + v20);
    *a3 = ++v22;
  }
  else
  {
    char v23 = 0;
  }
  *(unsigned char *)(a1 + 26) = v23;
  if (!llvm::DataExtractor::prepareRead((uint64_t)a2, v22, 1, 0))
  {
    *(unsigned char *)(a1 + 27) = 0;
    if (*(_WORD *)(a1 + 24) == 5) {
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v29 = std::generic_category();
    sub_1CD5E4D44(45, (uint64_t)v29, (uint64_t)"address table at offset 0x%llx has unsupported version %hu", v10, (__int16 *)(a1 + 24));
  }
  int v24 = *(unsigned __int8 *)(*(void *)a2 + v22);
  ++*a3;
  *(unsigned char *)(a1 + 27) = v24;
  if (*(_WORD *)(a1 + 24) != 5) {
    goto LABEL_30;
  }
  if (v24)
  {
    std::generic_category();
    int v39 = 0;
    uint64_t v40 = 0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    char v35 = 0;
    uint64_t v36 = 0;
    int v38 = &v39;
    int v37 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
    __p.__r_.__value_.__r.__words[2] = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v25 = *(void *)(a1 + 8);
    char v26 = *(unsigned char *)(a1 + 27);
    uint64_t v41 = 0;
    __int16 v42 = (std::string *)&unk_1F2618D70;
    unint64_t v43 = "address table at offset 0x%llx has unsupported segment selector size %hhu";
    uint64_t v44 = v25;
    char v45 = v26;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__p, (uint64_t)&v42);
    operator new();
  }
LABEL_25:
  llvm::DWARFDebugAddrTable::extractAddresses((llvm::DWARFDebugAddrTable *)a1, a2, a3, v13, a5);
  if (!*a5)
  {
    if (a4 && *(unsigned __int8 *)(a1 + 26) != a4)
    {
      std::generic_category();
      int v39 = 0;
      uint64_t v40 = 0;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
      char v35 = 0;
      uint64_t v36 = 0;
      int v38 = &v39;
      int v37 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
      __p.__r_.__value_.__r.__words[2] = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v27 = *(void *)(a1 + 8);
      char v28 = *(unsigned char *)(a1 + 26);
      uint64_t v41 = 0;
      __int16 v42 = (std::string *)&unk_1F2618D90;
      unint64_t v43 = "address table at offset 0x%llx has address size %hhu which is different from CU address size %hhu";
      uint64_t v44 = v27;
      char v45 = v28;
      char v46 = a4;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__p, (uint64_t)&v42);
      operator new();
    }
    *a5 = 0;
  }
  uint64_t result = v31;
  if (v31) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  return result;
}

void llvm::DWARFDebugAddrTable::extractPreStandard(llvm::DWARFDebugAddrTable *this@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, __int16 a4@<W3>, char a5@<W4>, void *a6@<X8>)
{
  *((void *)this + 1) = *a3;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = a4;
  *((unsigned char *)this + 26) = a5;
  *((unsigned char *)this + 27) = 0;
  llvm::DWARFDebugAddrTable::extractAddresses(this, a2, a3, *((void *)a2 + 1), a6);
}

void llvm::DWARFDebugAddrTable::extract(llvm::DWARFDebugAddrTable *this@<X0>, llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((a4 - 1) > 3)
  {
    if (!a4)
    {
      std::generic_category();
      sub_1CD06481C();
    }
    sub_1CC66D518((uint64_t)v13, a6);
    llvm::DWARFDebugAddrTable::extractV5((uint64_t)this, a2, a3, a5, a7);
    if (v14 == v13)
    {
      (*(void (**)(void *))(v13[0] + 32))(v13);
    }
    else if (v14)
    {
      (*(void (**)(void))(*v14 + 40))();
    }
  }
  else
  {
    *((void *)this + 1) = *a3;
    *((void *)this + 2) = 0;
    *((_WORD *)this + 12) = a4;
    *((unsigned char *)this + 26) = a5;
    *((unsigned char *)this + 27) = 0;
    uint64_t v12 = *((void *)a2 + 1);
    llvm::DWARFDebugAddrTable::extractAddresses(this, a2, a3, v12, a7);
  }
}

llvm::raw_ostream *llvm::DWARFDebugAddrTable::dump(llvm::raw_ostream *result, llvm::raw_ostream *this, uint64_t a3)
{
  uint64_t v4 = (uint64_t)result;
  if (*(unsigned char *)(a3 + 20))
  {
    uint64_t v5 = *((void *)result + 1);
    char v28 = &unk_1F25FF808;
    uint64_t v29 = "0x%8.8llx: ";
    uint64_t v30 = v5;
    uint64_t result = llvm::raw_ostream::operator<<(this, (uint64_t)&v28);
  }
  if (*(void *)(v4 + 16))
  {
    if (*(unsigned char *)v4) {
      int v6 = 16;
    }
    else {
      int v6 = 8;
    }
    uint64_t v7 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v7 > 0x15uLL)
    {
      qmemcpy(v7, "Address table header: ", 22);
      *((void *)this + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(this, "Address table header: ", 0x16uLL);
    }
    uint64_t v8 = *(void *)(v4 + 16);
    char v28 = &unk_1F2618A68;
    uint64_t v29 = "length = 0x%0*llx";
    LODWORD(v30) = v6;
    uint64_t v31 = v8;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v28);
    uint64_t v9 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v9) > 0xA)
    {
      *(_DWORD *)(v9 + 7) = 540876916;
      *(void *)uint64_t v9 = *(void *)", format = ";
      *((void *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, ", format = ", 0xBuLL);
    }
    if (*(unsigned char *)v4)
    {
      if (*(unsigned char *)v4 != 1)
      {
LABEL_18:
        uint64_t v12 = *(unsigned __int16 *)(v4 + 24);
        v27[0] = &unk_1F2618A88;
        v27[1] = ", version = 0x%4.4hx";
        v27[2] = v12;
        unint64_t v13 = llvm::raw_ostream::operator<<(this, (uint64_t)v27);
        uint64_t v14 = *(unsigned __int8 *)(v4 + 26);
        v26[0] = &unk_1F260ED30;
        v26[1] = ", addr_std::string::size_type size = 0x%2.2hhx";
        void v26[2] = v14;
        uint64_t v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)v26);
        uint64_t v16 = *(unsigned __int8 *)(v4 + 27);
        v25[0] = &unk_1F260ED30;
        v25[1] = ", seg_std::string::size_type size = 0x%2.2hhx";
        void v25[2] = v16;
        uint64_t result = llvm::raw_ostream::operator<<(v15, (uint64_t)v25);
        long long v17 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v17)
        {
          uint64_t result = llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *long long v17 = 10;
          ++*((void *)this + 4);
        }
        goto LABEL_20;
      }
      unint64_t v10 = "DWARF64";
    }
    else
    {
      unint64_t v10 = "DWARF32";
    }
    unsigned int v11 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v11 > 6uLL)
    {
      *unsigned int v11 = *(_DWORD *)v10;
      *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)(v10 + 3);
      *((void *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, v10, 7uLL);
    }
    goto LABEL_18;
  }
LABEL_20:
  if (*(void *)(v4 + 40) != *(void *)(v4 + 32))
  {
    int v18 = *(unsigned __int8 *)(v4 + 26);
    if (v18 == 2)
    {
      unint64_t v19 = "0x%4.4llx\n";
    }
    else if (v18 == 8)
    {
      unint64_t v19 = "0x%16.16llx\n";
    }
    else
    {
      unint64_t v19 = "0x%8.8llx\n";
    }
    uint64_t v20 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v20) > 8)
    {
      *(unsigned char *)(v20 + 8) = 10;
      *(void *)uint64_t v20 = *(void *)"Addrs: [\n";
      *((void *)this + 4) += 9;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(this, "Addrs: [\n", 9uLL);
    }
    BOOL v21 = *(uint64_t **)(v4 + 32);
    for (uint64_t i = *(uint64_t **)(v4 + 40); v21 != i; result = llvm::raw_ostream::operator<<(this, (uint64_t)&v28))
    {
      uint64_t v23 = *v21++;
      char v28 = &unk_1F25FF808;
      uint64_t v29 = v19;
      uint64_t v30 = v23;
    }
    int v24 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v24 > 1uLL)
    {
      *int v24 = 2653;
      *((void *)this + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(this, "]\n", 2uLL);
    }
  }
  return result;
}

uint64_t llvm::DWARFDebugAddrTable::getAddrEntry@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6 = a2;
  uint64_t v3 = *(void *)(this + 32);
  if (a2 >= (unint64_t)((*(void *)(this + 40) - v3) >> 3))
  {
    uint64_t v4 = this;
    uint64_t v5 = std::generic_category();
    sub_1CD5E4E84(22, (uint64_t)v5, (uint64_t)"Index %u is out of range of the address table at offset 0x%llx", (int *)&v6, (uint64_t *)(v4 + 8));
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = *(void *)(v3 + 8 * a2);
  return this;
}

uint64_t llvm::DWARFDebugAddrTable::getFullLength(llvm::DWARFDebugAddrTable *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 12;
  if (!*(unsigned char *)this) {
    uint64_t v2 = 4;
  }
  return v2 + v1;
}

BOOL sub_1CC687520(unsigned int a1)
{
  __int16 v4 = 1026;
  char v5 = 8;
  uint64_t v1 = v6;
  if (a1 <= 0xFF)
  {
    uint64_t v2 = memchr(&v4, (char)a1, 3uLL);
    if (v2) {
      uint64_t v1 = v2;
    }
  }
  return v1 - (unsigned char *)&v4 != 3;
}

uint64_t sub_1CC68758C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1CC6875CC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_1CC687604(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
}

llvm::raw_ostream *llvm::DWARFDebugArangeSet::Descriptor::dump(llvm::DWARFDebugArangeSet::Descriptor *this, llvm::raw_ostream *a2, char a3)
{
  unsigned int v6 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v6 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 91);
  }
  else
  {
    *((void *)a2 + 4) = v6 + 1;
    *unsigned int v6 = 91;
  }
  uint64_t v7 = *(void *)this;
  unint64_t v13 = &unk_1F2619220;
  uint64_t v14 = "0x%*.*llx";
  char v8 = 2 * a3;
  char v15 = v8;
  char v16 = v8;
  uint64_t v17 = v7;
  llvm::raw_ostream::operator<<(a2, (uint64_t)&v13);
  uint64_t v9 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 8236;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", ", 2uLL);
  }
  uint64_t v10 = *((void *)this + 1) + *(void *)this;
  unint64_t v13 = &unk_1F2619220;
  uint64_t v14 = "0x%*.*llx";
  char v15 = v8;
  char v16 = v8;
  uint64_t v17 = v10;
  uint64_t result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v13);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v12 >= *((void *)a2 + 3))
  {
    return llvm::raw_ostream::write(a2, 41);
  }
  else
  {
    *((void *)a2 + 4) = v12 + 1;
    *uint64_t v12 = 41;
  }
  return result;
}

double llvm::DWARFDebugArangeSet::clear(llvm::DWARFDebugArangeSet *this)
{
  *(void *)this = -1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 6) = *((void *)this + 5);
  return result;
}

uint64_t llvm::DWARFDebugArangeSet::extract@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  a1[6] = a1[5];
  *a1 = *a3;
  uint64_t v45 = 0;
  a1[1] = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a2, a3, &v45);
  *((unsigned char *)a1 + 16) = v8;
  *((_WORD *)a1 + 16) = sub_1CD833674((uint64_t)a2, a3, &v45);
  if (*((unsigned char *)a1 + 16)) {
    int v9 = 8;
  }
  else {
    int v9 = 4;
  }
  a1[3] = llvm::DataExtractor::getUnsigned(a2, a3, v9, &v45);
  *((unsigned char *)a1 + 34) = sub_1CD05EA24(a2, a3, &v45);
  *((unsigned char *)a1 + 35) = sub_1CD05EA24(a2, a3, &v45);
  if (v45)
  {
    uint64_t v33 = std::generic_category();
    uint64_t v42 = v45;
    uint64_t v45 = 0;
    sub_1CD4FB504(&v42, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unint64_t v44 = (unint64_t)p_p;
    sub_1CD5E2210(22, (uint64_t)v33, (uint64_t)"parsing address ranges table at offset 0x%llx: %s", (uint64_t *)a1, (uint64_t *)&v44);
  }
  uint64_t v10 = 12;
  if (!*((unsigned char *)a1 + 16)) {
    uint64_t v10 = 4;
  }
  unint64_t v11 = v10 + a1[1];
  if (__CFADD__(v11, *a1) || a2[1] <= v11 + *a1 - 1)
  {
    char v35 = std::generic_category();
    uint64_t v36 = "the length of address range table at offset 0x%llx exceeds section size";
LABEL_45:
    uint64_t v37 = 22;
    goto LABEL_46;
  }
  unsigned int v12 = *((unsigned __int8 *)a1 + 34);
  std::generic_category();
  sub_1CD5E49A8(v12, (uint64_t)"address range table at offset 0x%llx", (uint64_t *)a1, a4);
  if (*a4) {
    goto LABEL_47;
  }
  if (*((unsigned char *)a1 + 35))
  {
    char v35 = std::generic_category();
    uint64_t v36 = "non-zero segment selector size in address range table at offset 0x%llx is not supported";
    uint64_t v37 = 45;
LABEL_46:
    sub_1CD5E3FE8(v37, (uint64_t)v35, (uint64_t)v36, (uint64_t *)a1);
  }
  unint64_t v13 = 2 * *((unsigned __int8 *)a1 + 34);
  if (v11 % v13)
  {
    char v35 = std::generic_category();
    uint64_t v36 = "address range table at offset 0x%llx has length that is not a multiple of the tuple size";
    goto LABEL_45;
  }
  uint64_t v14 = *a1;
  LODWORD(v15) = -2 * *((unsigned __int8 *)a1 + 34);
  do
    uint64_t v15 = (v15 + v13);
  while (v15 < *(_DWORD *)a3 - *a1);
  if (v11 <= v15)
  {
    char v35 = std::generic_category();
    uint64_t v36 = "address range table at offset 0x%llx has an insufficient length to contain any entries";
    goto LABEL_45;
  }
  unint64_t v16 = v14 + v15;
  *a3 = v14 + v15;
  unint64_t v17 = *a1 + v11;
  while (1)
  {
    if (v16 >= v17)
    {
      char v35 = std::generic_category();
      uint64_t v36 = "address range table at offset 0x%llx is not terminated by null entry";
      goto LABEL_45;
    }
    unint64_t v44 = v16;
    unint64_t Unsigned = llvm::DataExtractor::getUnsigned(a2, a3, *((unsigned __int8 *)a1 + 34), 0);
    unint64_t v19 = llvm::DataExtractor::getUnsigned(a2, a3, *((unsigned __int8 *)a1 + 34), 0);
    if (!(v19 | Unsigned)) {
      break;
    }
    unint64_t v22 = (unint64_t *)a1[6];
    unint64_t v21 = a1[7];
    if ((unint64_t)v22 >= v21)
    {
      unint64_t v40 = v17;
      unint64_t v41 = v19;
      unint64_t v24 = Unsigned;
      uint64_t v25 = (unint64_t *)a1[5];
      uint64_t v26 = ((char *)v22 - (char *)v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        abort();
      }
      uint64_t v28 = v21 - (void)v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 60) {
          sub_1CB833614();
        }
        unint64_t v39 = v29;
        uint64_t v30 = (char *)operator new(16 * v29);
        unint64_t v29 = v39;
      }
      else
      {
        uint64_t v30 = 0;
      }
      uint64_t v31 = (unint64_t *)&v30[16 * v26];
      *uint64_t v31 = v24;
      v31[1] = v41;
      int v32 = v31;
      if (v22 == v25)
      {
        unint64_t v17 = v40;
      }
      else
      {
        unint64_t v17 = v40;
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v22 - 1);
          v32 -= 2;
          v22 -= 2;
        }
        while (v22 != v25);
        unint64_t v22 = (unint64_t *)a1[5];
      }
      uint64_t v23 = v31 + 2;
      a1[5] = (unint64_t)v32;
      a1[6] = (unint64_t)(v31 + 2);
      a1[7] = (unint64_t)&v30[16 * v29];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      unint64_t *v22 = Unsigned;
      v22[1] = v19;
      uint64_t v23 = v22 + 2;
    }
    a1[6] = (unint64_t)v23;
    unint64_t v16 = *a3;
  }
  if (*a3 != v17)
  {
    uint64_t v20 = std::generic_category();
    sub_1CD5E4C08(22, (uint64_t)v20, (uint64_t)"address range table at offset 0x%llx has a premature terminator entry at offset 0x%llx", (uint64_t *)a1, (uint64_t *)&v44);
  }
  *a4 = 0;
LABEL_47:
  uint64_t result = v45;
  if (v45) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFDebugArangeSet::dump(llvm::DWARFDebugArangeSet *this, llvm::raw_ostream *a2)
{
  if (*((unsigned char *)this + 16)) {
    int v4 = 16;
  }
  else {
    int v4 = 8;
  }
  char v5 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v5 > 0x15uLL)
  {
    qmemcpy(v5, "Address Range Header: ", 22);
    *((void *)a2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Address Range Header: ", 0x16uLL);
  }
  uint64_t v6 = *((void *)this + 1);
  v28[0] = &unk_1F2618A68;
  v28[1] = "length = 0x%0*llx, ";
  int v29 = v4;
  uint64_t v30 = v6;
  llvm::raw_ostream::operator<<(a2, (uint64_t)v28);
  uint64_t v7 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v7) > 8)
  {
    *(unsigned char *)(v7 + 8) = 32;
    *(void *)uint64_t v7 = *(void *)"format = ";
    *((void *)a2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a2, "format = ", 9uLL);
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) != 1)
    {
LABEL_14:
      uint64_t v10 = (_WORD *)*((void *)a2 + 4);
      goto LABEL_16;
    }
    char v8 = "DWARF64";
  }
  else
  {
    char v8 = "DWARF32";
  }
  int v9 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v9 <= 6uLL)
  {
    llvm::raw_ostream::write(a2, v8, 7uLL);
    goto LABEL_14;
  }
  _DWORD *v9 = *(_DWORD *)v8;
  *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)(v8 + 3);
  uint64_t v10 = (_WORD *)(*((void *)a2 + 4) + 7);
  *((void *)a2 + 4) = v10;
LABEL_16:
  if (*((void *)a2 + 3) - (void)v10 > 1uLL)
  {
    *uint64_t v10 = 8236;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", ", 2uLL);
  }
  uint64_t v11 = *((unsigned __int16 *)this + 16);
  v27[0] = &unk_1F2618A88;
  v27[1] = "version = 0x%4.4x, ";
  v27[2] = v11;
  unsigned int v12 = llvm::raw_ostream::operator<<(a2, (uint64_t)v27);
  uint64_t v13 = *((void *)this + 3);
  v24[0] = &unk_1F2618A68;
  v24[1] = "cu_offset = 0x%0*llx, ";
  int v25 = v4;
  uint64_t v26 = v13;
  uint64_t v14 = llvm::raw_ostream::operator<<(v12, (uint64_t)v24);
  uint64_t v15 = *((unsigned __int8 *)this + 34);
  v23[0] = &unk_1F260ED30;
  v23[1] = "addr_std::string::size_type size = 0x%2.2x, ";
  v23[2] = v15;
  unint64_t v16 = llvm::raw_ostream::operator<<(v14, (uint64_t)v23);
  uint64_t v17 = *((unsigned __int8 *)this + 35);
  v22[0] = &unk_1F260ED30;
  v22[1] = "seg_std::string::size_type size = 0x%2.2x\n";
  uint64_t v22[2] = v17;
  uint64_t result = llvm::raw_ostream::operator<<(v16, (uint64_t)v22);
  unint64_t v19 = (llvm::DWARFDebugArangeSet::Descriptor *)*((void *)this + 5);
  for (uint64_t i = (llvm::DWARFDebugArangeSet::Descriptor *)*((void *)this + 6);
        v19 != i;
        unint64_t v19 = (llvm::DWARFDebugArangeSet::Descriptor *)((char *)v19 + 16))
  {
    uint64_t result = llvm::DWARFDebugArangeSet::Descriptor::dump(v19, a2, *((unsigned char *)this + 34));
    unint64_t v21 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v21 >= *((void *)a2 + 3))
    {
      uint64_t result = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((void *)a2 + 4) = v21 + 1;
      unsigned char *v21 = 10;
    }
  }
  return result;
}

void llvm::DWARFDebugAranges::extract(llvm::DWARFDebugAranges *a1, uint64_t a2, void (*a3)(uint64_t, void *), uint64_t a4)
{
  if (*(void *)(a2 + 8))
  {
    unint64_t v24 = 0;
    std::string __p = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v18 = -1;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v8 = (uint64_t)a1 + 48;
    while (1)
    {
      long long v9 = *(_OWORD *)(a2 + 16);
      v15[0] = *(_OWORD *)a2;
      v15[1] = v9;
      uint64_t v16 = *(void *)(a2 + 32);
      llvm::DWARFDebugArangeSet::extract(&v18, v15, &v24, &v17);
      unint64_t v10 = v17;
      if (v17) {
        break;
      }
      uint64_t v11 = (unint64_t *)__p;
      unsigned int v12 = v22;
      unint64_t v17 = v20;
      while (v11 != v12)
      {
        unint64_t v13 = *v11;
        unint64_t v14 = v11[1];
        v11 += 2;
        llvm::DWARFDebugAranges::appendRange(a1, v17, v13, v14 + v13);
      }
      sub_1CD4ADCD0(v8, (uint64_t *)&v17, (uint64_t)v25);
      if (*(void *)(a2 + 8) <= v24) {
        goto LABEL_13;
      }
    }
    unint64_t v17 = 0;
    v25[0] = v10;
    a3(a4, v25);
    if (v25[0]) {
      (*(void (**)(void))(*(void *)v25[0] + 8))(v25[0]);
    }
    if (v17) {
      (*(void (**)(unint64_t))(*(void *)v17 + 8))(v17);
    }
LABEL_13:
    if (__p)
    {
      unint64_t v22 = (unint64_t *)__p;
      operator delete(__p);
    }
  }
}

void llvm::DWARFDebugAranges::appendRange(llvm::DWARFDebugAranges *this, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a3 < a4)
  {
    long long v9 = (char *)*((void *)this + 1);
    uint64_t v8 = (char *)*((void *)this + 2);
    if (v9 >= v8)
    {
      uint64_t v11 = *(unsigned char **)this;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v9[-*(void *)this] >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_34;
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_35;
      }
      uint64_t v16 = 3 * v15;
      unint64_t v17 = (char *)operator new(24 * v15);
      unint64_t v18 = &v17[24 * v12];
      uint64_t v8 = &v17[8 * v16];
      *(void *)unint64_t v18 = a3;
      *((void *)v18 + 1) = a2;
      v18[16] = 1;
      unint64_t v10 = v18 + 24;
      if (v9 == v11)
      {
        long long v20 = &v17[24 * v12];
      }
      else
      {
        do
        {
          long long v19 = *(_OWORD *)(v9 - 24);
          long long v20 = v18 - 24;
          *(v18 - 8) = *(v9 - 8);
          *(_OWORD *)(v18 - 24) = v19;
          v9 -= 24;
          v18 -= 24;
        }
        while (v9 != v11);
      }
      *(void *)this = v20;
      *((void *)this + 1) = v10;
      *((void *)this + 2) = v8;
      if (v11)
      {
        operator delete(v11);
        uint64_t v8 = (char *)*((void *)this + 2);
      }
    }
    else
    {
      *(void *)long long v9 = a3;
      *((void *)v9 + 1) = a2;
      v9[16] = 1;
      unint64_t v10 = v9 + 24;
    }
    *((void *)this + 1) = v10;
    if (v10 < v8)
    {
      *(void *)unint64_t v10 = a4;
      *((void *)v10 + 1) = a2;
      unint64_t v21 = v10 + 24;
      v10[16] = 0;
LABEL_32:
      *((void *)this + 1) = v21;
      return;
    }
    unint64_t v22 = *(unsigned char **)this;
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-*(void *)this] >> 3);
    unint64_t v24 = v23 + 1;
    if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v27 = 3 * v26;
        uint64_t v28 = (char *)operator new(24 * v26);
        int v29 = &v28[24 * v23];
        *(void *)int v29 = a4;
        *((void *)v29 + 1) = a2;
        v29[16] = 0;
        unint64_t v21 = v29 + 24;
        if (v10 == v22)
        {
          uint64_t v31 = &v28[24 * v23];
        }
        else
        {
          do
          {
            long long v30 = *(_OWORD *)(v10 - 24);
            uint64_t v31 = v29 - 24;
            *(v29 - 8) = *(v10 - 8);
            *(_OWORD *)(v29 - 24) = v30;
            v10 -= 24;
            v29 -= 24;
          }
          while (v10 != v22);
        }
        *(void *)this = v31;
        *((void *)this + 1) = v21;
        *((void *)this + 2) = &v28[8 * v27];
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_32;
      }
LABEL_35:
      sub_1CB833614();
    }
LABEL_34:
    abort();
  }
}

void llvm::DWARFDebugAranges::generate(llvm::DWARFDebugAranges *this, llvm::DWARFContext *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = *(void *)this;
  *((void *)this + 4) = *((void *)this + 3);
  int v4 = (char *)this + 48;
  sub_1CD4AF204((void *)this + 6);
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 65) + 96))(*((void *)a2 + 65));
    uint64_t v7 = v6;
    char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 65) + 40))(*((void *)a2 + 65));
    v21[0] = v5;
    v21[1] = v7;
    char v22 = v8;
    char v23 = 0;
    long long v9 = (char *)a2 + 456;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    llvm::DWARFDebugAranges::extract(this, (uint64_t)v21, (void (*)(uint64_t, void *))sub_1CD5E3A98, (uint64_t)a2 + 456);
    sub_1CC6821F8((uint64_t)a2, v19);
    unint64_t v10 = (llvm::DWARFUnit **)v19[0];
    uint64_t v11 = v20;
    if ((llvm::DWARFUnit **)v19[0] != v20)
    {
      unint64_t v12 = (llvm::DWARFUnit **)v19[1];
      unint64_t v13 = (unsigned int (*)(llvm::DWARFUnit **))v19[2];
      do
      {
        unint64_t v18 = 0;
        unint64_t v18 = *((void *)*v10 + 3);
        sub_1CD4ADCD0((uint64_t)v4, (uint64_t *)&v18, (uint64_t)v27);
        if (v28)
        {
          llvm::DWARFUnit::collectAddressRanges(*v10, (uint64_t)v27);
          unint64_t v14 = (unint64_t *)v27[0];
          if (v29)
          {
            uint64_t v26 = v27[0];
            v27[0] = 0;
            sub_1CD5E3A98((uint64_t)v9, &v26);
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
          }
          else
          {
            unint64_t v15 = (unint64_t *)v27[1];
            while (v14 != v15)
            {
              unint64_t v16 = *v14;
              unint64_t v17 = v14[1];
              v14 += 3;
              llvm::DWARFDebugAranges::appendRange(this, v18, v16, v17);
            }
          }
          sub_1CC1EB7C0((uint64_t)v27);
        }
        while (++v10 != v12)
        {
          if (v13(v10)) {
            goto LABEL_16;
          }
        }
        unint64_t v10 = v12;
LABEL_16:
        ;
      }
      while (v10 != v11);
    }
    llvm::DWARFDebugAranges::construct(this);
  }
}

void *llvm::DWARFDebugAranges::clear(llvm::DWARFDebugAranges *this)
{
  *((void *)this + 1) = *(void *)this;
  *((void *)this + 4) = *((void *)this + 3);
  return sub_1CD4AF204((void *)this + 6);
}

void llvm::DWARFDebugAranges::construct(llvm::DWARFDebugAranges *this)
{
  unint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3));
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  int v53 = &v54;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_1CC688974(v2, v3, v5, 1);
  uint64_t v6 = *(char **)this;
  uint64_t v7 = (char *)*((void *)this + 1);
  if (*(char **)this != v7)
  {
    unint64_t v8 = -1;
    do
    {
      unint64_t v9 = *(void *)v6;
      unint64_t v10 = *(void *)v6 - v8;
      BOOL v11 = *(void *)v6 <= v8 || v55 == 0;
      if (!v11)
      {
        unint64_t v12 = (unint64_t *)*((void *)this + 3);
        unint64_t v13 = (unint64_t *)*((void *)this + 4);
        if (v12 == v13) {
          goto LABEL_24;
        }
        uint64_t v14 = *(v13 - 2);
        unint64_t v15 = v14 ? *(v13 - 3) + v14 : -1;
        if (v15 != v8) {
          goto LABEL_24;
        }
        unint64_t v16 = v54;
        if (!v54) {
          goto LABEL_24;
        }
        unint64_t v17 = *(v13 - 1);
        unint64_t v18 = &v54;
        do
        {
          long long v19 = v18;
          long long v20 = v16;
          unint64_t v21 = v16[4];
          char v22 = (uint64_t **)(v16 + 1);
          if (v21 >= v17)
          {
            char v22 = (uint64_t **)v20;
            unint64_t v18 = (uint64_t **)v20;
          }
          unint64_t v16 = *v22;
        }
        while (v16);
        if (v18 == &v54) {
          goto LABEL_24;
        }
        if (v21 >= v17) {
          long long v19 = (uint64_t **)v20;
        }
        if (v17 >= (unint64_t)v19[4])
        {
          if (v9 != -1 && (unint64_t v50 = *(v13 - 3), v51 = v9 > v50, v52 = v9 - v50, v51)) {
            *(v13 - 2) = v52;
          }
          else {
            *(v13 - 2) = 0;
          }
        }
        else
        {
LABEL_24:
          char v23 = (uint64_t *)v53;
          unint64_t v24 = *((void *)this + 5);
          if ((unint64_t)v13 >= v24)
          {
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v13 - v12) + 1;
            if (v27 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v12) >> 3);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x555555555555555) {
              unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29 > 0xAAAAAAAAAAAAAAALL) {
              sub_1CB833614();
            }
            uint64_t v30 = 3 * v29;
            uint64_t v31 = (char *)operator new(24 * v29);
            uint64_t v32 = v23[4];
            uint64_t v33 = (unint64_t *)&v31[8 * (v13 - v12)];
            unint64_t *v33 = v8;
            v33[1] = v10;
            v33[2] = v32;
            if (v12 == v13)
            {
              uint64_t v36 = &v31[8 * (v13 - v12)];
            }
            else
            {
              uint64_t v34 = &v31[8 * (v13 - v12)];
              do
              {
                long long v35 = *(_OWORD *)(v13 - 3);
                uint64_t v36 = v34 - 24;
                *((void *)v34 - 1) = *(v13 - 1);
                *(_OWORD *)(v34 - 24) = v35;
                v13 -= 3;
                v34 -= 24;
              }
              while (v13 != v12);
            }
            uint64_t v37 = &v31[8 * v30];
            uint64_t v26 = v33 + 3;
            *((void *)this + 3) = v36;
            *((void *)this + 4) = v33 + 3;
            *((void *)this + 5) = v37;
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            uint64_t v25 = (uint64_t)v53[4];
            *unint64_t v13 = v8;
            v13[1] = v10;
            v13[2] = v25;
            uint64_t v26 = v13 + 3;
          }
          *((void *)this + 4) = v26;
        }
      }
      int v38 = (unint64_t *)(v6 + 8);
      if (v6[16])
      {
        sub_1CD5E5034((uint64_t **)&v53, v38);
      }
      else
      {
        if (!v54) {
          goto LABEL_51;
        }
        unint64_t v39 = *v38;
        unint64_t v40 = v54;
        unint64_t v41 = &v54;
        do
        {
          uint64_t v42 = v41;
          unint64_t v43 = v40;
          unint64_t v44 = v40[4];
          uint64_t v45 = (uint64_t **)(v40 + 1);
          if (v44 >= v39)
          {
            uint64_t v45 = (uint64_t **)v43;
            unint64_t v41 = (uint64_t **)v43;
          }
          unint64_t v40 = *v45;
        }
        while (v40);
        if (v41 == &v54) {
          goto LABEL_51;
        }
        if (v44 >= v39) {
          uint64_t v42 = (uint64_t **)v43;
        }
        if (v39 < (unint64_t)v42[4]) {
LABEL_51:
        }
          unint64_t v41 = &v54;
        char v46 = v41[1];
        int v47 = v41;
        if (v46)
        {
          do
          {
            long long v48 = v46;
            char v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            long long v48 = (uint64_t *)*((void *)v47 + 2);
            BOOL v11 = *v48 == (void)v47;
            int v47 = v48;
          }
          while (!v11);
        }
        if (v53 == v41) {
          int v53 = (uint64_t **)v48;
        }
        --v55;
        sub_1CB91F7C8(v54, (uint64_t *)v41);
        operator delete(v41);
      }
      unint64_t v49 = *(void *)v6;
      v6 += 24;
      unint64_t v8 = v49;
    }
    while (v6 != v7);
    uint64_t v6 = *(char **)this;
  }
  *((void *)this + 1) = v6;
  if (*((char **)this + 2) != v6)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  sub_1CB833A08((uint64_t)&v53, v54);
}

unint64_t llvm::DWARFDebugAranges::findAddress(llvm::DWARFDebugAranges *this, unint64_t a2)
{
  unint64_t v2 = (unint64_t *)*((void *)this + 3);
  unint64_t v3 = (unint64_t *)*((void *)this + 4);
  if (v3 != v2)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &v2[3 * (v4 >> 1)];
      unint64_t v8 = *v6;
      unint64_t v9 = v6[1];
      uint64_t v7 = v6 + 3;
      unint64_t v10 = v9 + v8;
      if (!v9) {
        unint64_t v10 = -1;
      }
      v4 += ~(v4 >> 1);
      if (v10 <= a2) {
        unint64_t v2 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v2 == v3 || *v2 > a2) {
    return -1;
  }
  else {
    return v2[2];
  }
}

void sub_1CC688974(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t v41 = *(void *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(void *)v10)
                {
                  uint64_t v99 = *(void *)(v10 + 16);
                  long long v91 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v40 + 16);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(unsigned char *)(v40 + 16) = v99;
                  *(_OWORD *)unint64_t v40 = v91;
                }
                break;
              case 3:
                sub_1CC6891A8((long long *)v10, (unint64_t *)(v10 + 24), (unint64_t *)(a2 - 24));
                break;
              case 4:
                sub_1CC689468(v10, (unint64_t *)(v10 + 24), (unint64_t *)(v10 + 48), a2 - 24);
                break;
              case 5:
                sub_1CC689538((__n128 *)v10, (unint64_t *)(v10 + 24), (unint64_t *)(v10 + 48), (__n128 *)(v10 + 72), (__n128 *)(a2 - 24));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v43 = v10 + 24;
            BOOL v45 = v10 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v10;
                do
                {
                  unint64_t v48 = v43;
                  unint64_t v49 = *(void *)(v47 + 24);
                  if (v49 < *(void *)v47)
                  {
                    long long v92 = *(_OWORD *)(v47 + 32);
                    uint64_t v50 = v46;
                    while (1)
                    {
                      uint64_t v51 = v10 + v50;
                      *(_OWORD *)(v51 + 24) = *(_OWORD *)(v10 + v50);
                      *(unsigned char *)(v51 + 40) = *(unsigned char *)(v10 + v50 + 16);
                      if (!v50) {
                        break;
                      }
                      v50 -= 24;
                      if (v49 >= *(void *)(v51 - 24))
                      {
                        uint64_t v52 = v10 + v50 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_78:
                    *(void *)uint64_t v52 = v49;
                    *(void *)(v52 + 8) = v92;
                    *(unsigned char *)(v52 + 16) = BYTE8(v92);
                  }
                  unint64_t v43 = v48 + 24;
                  v46 += 24;
                  unint64_t v47 = v48;
                }
                while (v48 + 24 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                unint64_t v82 = v43;
                unint64_t v83 = *(void *)(a1 + 24);
                if (v83 < *(void *)a1)
                {
                  long long v95 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v43 = *(_OWORD *)(v43 - 24);
                    *(unsigned char *)(v43 + 16) = *(unsigned char *)(v43 - 8);
                    unint64_t v84 = *(void *)(v43 - 48);
                    v43 -= 24;
                  }
                  while (v83 < v84);
                  *(void *)unint64_t v43 = v83;
                  *(unsigned char *)(v43 + 16) = BYTE8(v95);
                  *(void *)(v43 + 8) = v95;
                }
                unint64_t v43 = v82 + 24;
                a1 = v82;
              }
              while (v82 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v53 = (unint64_t)(v12 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  unint64_t v57 = v10 + 24 * v56;
                  if (2 * v55 + 2 < v12)
                  {
                    unint64_t v59 = *(void *)(v57 + 24);
                    BOOL v58 = *(void *)v57 >= v59;
                    if (*(void *)v57 > v59) {
                      unint64_t v59 = *(void *)v57;
                    }
                    if (!v58)
                    {
                      v57 += 24;
                      uint64_t v56 = 2 * v55 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v59 = *(void *)v57;
                  }
                  unint64_t v60 = v10 + 24 * v55;
                  unint64_t v61 = *(void *)v60;
                  if (v59 >= *(void *)v60)
                  {
                    long long v93 = *(_OWORD *)(v60 + 8);
                    do
                    {
                      unint64_t v62 = v60;
                      unint64_t v60 = v57;
                      long long v63 = *(_OWORD *)v57;
                      *(unsigned char *)(v62 + 16) = *(unsigned char *)(v57 + 16);
                      *(_OWORD *)unint64_t v62 = v63;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v64 = (2 * v56) | 1;
                      unint64_t v57 = v10 + 24 * v64;
                      uint64_t v56 = 2 * v56 + 2;
                      if (v56 < v12)
                      {
                        unint64_t v67 = *(void *)v57;
                        unint64_t v65 = *(void *)(v57 + 24);
                        BOOL v66 = *(void *)v57 >= v65;
                        if (*(void *)v57 <= v65) {
                          unint64_t v67 = *(void *)(v57 + 24);
                        }
                        if (*(void *)v57 < v65) {
                          v57 += 24;
                        }
                        if (v66) {
                          uint64_t v56 = v64;
                        }
                      }
                      else
                      {
                        unint64_t v67 = *(void *)v57;
                        uint64_t v56 = v64;
                      }
                    }
                    while (v67 >= v61);
                    *(void *)unint64_t v60 = v61;
                    *(void *)(v60 + 8) = v93;
                    *(unsigned char *)(v60 + 16) = BYTE8(v93);
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              do
              {
                uint64_t v68 = 0;
                uint64_t v100 = *(void *)(v10 + 16);
                long long v94 = *(_OWORD *)v10;
                unint64_t v69 = v10;
                do
                {
                  uint64_t v70 = v69 + 24 * v68 + 24;
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v12 && *(void *)v70 < *(void *)(v70 + 24))
                  {
                    v70 += 24;
                    uint64_t v71 = v72;
                  }
                  long long v73 = *(_OWORD *)v70;
                  *(unsigned char *)(v69 + 16) = *(unsigned char *)(v70 + 16);
                  *(_OWORD *)unint64_t v69 = v73;
                  unint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 24;
                if (v70 == a2)
                {
                  *(unsigned char *)(v70 + 16) = v100;
                  *(_OWORD *)uint64_t v70 = v94;
                }
                else
                {
                  long long v74 = *(_OWORD *)a2;
                  *(unsigned char *)(v70 + 16) = *(unsigned char *)(a2 + 16);
                  *(_OWORD *)uint64_t v70 = v74;
                  *(unsigned char *)(a2 + 16) = v100;
                  *(_OWORD *)a2 = v94;
                  uint64_t v75 = v70 - v10 + 24;
                  if (v75 >= 25)
                  {
                    unint64_t v76 = (v75 / 0x18uLL - 2) >> 1;
                    uint64_t v77 = v10 + 24 * v76;
                    unint64_t v78 = *(void *)v70;
                    if (*(void *)v77 < *(void *)v70)
                    {
                      long long v87 = *(_OWORD *)(v70 + 8);
                      do
                      {
                        uint64_t v79 = v70;
                        uint64_t v70 = v77;
                        long long v80 = *(_OWORD *)v77;
                        *(unsigned char *)(v79 + 16) = *(unsigned char *)(v77 + 16);
                        *(_OWORD *)uint64_t v79 = v80;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        uint64_t v77 = v10 + 24 * v76;
                      }
                      while (*(void *)v77 < v78);
                      *(void *)uint64_t v70 = v78;
                      *(void *)(v70 + 8) = v87;
                      *(unsigned char *)(v70 + 16) = BYTE8(v87);
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 24 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CC6891A8((long long *)a1, (unint64_t *)(a1 + 24 * ((unint64_t)v12 >> 1)), (unint64_t *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            unint64_t v16 = (unint64_t *)(a1 + 24 * v13 - 24);
            sub_1CC6891A8((long long *)(a1 + 24), v16, (unint64_t *)(a2 - 48));
            unint64_t v17 = (unint64_t *)(a1 + 24 + 8 * v15);
            sub_1CC6891A8((long long *)(a1 + 48), v17, (unint64_t *)(a2 - 72));
            sub_1CC6891A8((long long *)v16, (unint64_t *)v14, v17);
            uint64_t v96 = *(void *)(a1 + 16);
            long long v88 = *(_OWORD *)a1;
            char v18 = *(unsigned char *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(unsigned char *)(a1 + 16) = v18;
            *(unsigned char *)(v14 + 16) = v96;
            *(_OWORD *)unint64_t v14 = v88;
          }
          else
          {
            sub_1CC6891A8((long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 24));
          }
          --a3;
          unint64_t v19 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 24) < v19) {
            break;
          }
          long long v86 = *(_OWORD *)(a1 + 8);
          if (v19 >= *(void *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v32 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            uint64_t v98 = *(void *)(v10 + 16);
            long long v90 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(unsigned char *)(v10 + 16) = *(unsigned char *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = v36;
            *(unsigned char *)(v34 + 16) = v98;
            *(_OWORD *)unint64_t v34 = v90;
            do
            {
              unint64_t v37 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              unint64_t v38 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(v10 - 8);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v19;
          *(unsigned char *)(v10 - 8) = BYTE8(v86);
          *(void *)(v10 - 16) = v86;
        }
        uint64_t v20 = 0;
        long long v85 = *(_OWORD *)(a1 + 8);
        do
        {
          unint64_t v21 = *(void *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            unint64_t v25 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            unint64_t v24 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            uint64_t v97 = *(void *)(v10 + 16);
            long long v89 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(unsigned char *)(v10 + 16) = *(unsigned char *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(unsigned char *)(v26 + 16) = v97;
            *(_OWORD *)unint64_t v26 = v89;
            do
            {
              unint64_t v28 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              unint64_t v29 = *(void *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(v10 - 8);
          *(_OWORD *)a1 = v30;
        }
        *(void *)(v10 - 24) = v19;
        *(unsigned char *)(v10 - 8) = BYTE8(v85);
        *(void *)(v10 - 16) = v85;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_1CC688974(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CC689298(a1, v10 - 24);
      if (sub_1CC689298(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_1CC6891A8(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v8 = *(_OWORD *)a2;
      unint64_t v9 = a2[2];
      char v10 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v10;
      *((unsigned char *)a3 + 16) = v9;
      *(_OWORD *)a3 = v8;
      if (*a2 < *(void *)result)
      {
        long long v11 = *result;
        uint64_t v12 = *((void *)result + 2);
        char v13 = *((unsigned char *)a2 + 16);
        *uint64_t result = *(_OWORD *)a2;
        *((unsigned char *)result + 16) = v13;
        *((unsigned char *)a2 + 16) = v12;
        *(_OWORD *)a2 = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v14 = *result;
      uint64_t v15 = *((void *)result + 2);
      char v16 = *((unsigned char *)a2 + 16);
      *uint64_t result = *(_OWORD *)a2;
      *((unsigned char *)result + 16) = v16;
      *((unsigned char *)a2 + 16) = v15;
      *(_OWORD *)a2 = v14;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      unint64_t v6 = a2[2];
      char v17 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v17;
    }
    else
    {
      long long v5 = *result;
      unint64_t v6 = *((void *)result + 2);
      char v7 = *((unsigned char *)a3 + 16);
      *uint64_t result = *(_OWORD *)a3;
      *((unsigned char *)result + 16) = v7;
    }
    *((unsigned char *)a3 + 16) = v6;
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_1CC689298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a1 + 16);
        char v9 = *(unsigned char *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 16) = v9;
        *(unsigned char *)(a2 - 8) = v8;
        *unint64_t v6 = v7;
      }
      return result;
    case 3uLL:
      sub_1CC6891A8((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CC689468(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      sub_1CC689538((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      char v10 = (void *)(a1 + 48);
      sub_1CC6891A8((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(unsigned char *)(v16 + 88) = *(unsigned char *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = v18;
      *(unsigned char *)(v17 + 16) = BYTE8(v18);
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    char v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC689468(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  sub_1CC6891A8((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    unint64_t v9 = a3[2];
    char v10 = *(unsigned char *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((unsigned char *)a3 + 16) = v10;
    *(unsigned char *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      unint64_t v11 = a2[2];
      char v12 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v12;
      *((unsigned char *)a3 + 16) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        char v14 = *((unsigned char *)a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = v14;
        *((unsigned char *)a2 + 16) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1CC689538(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = sub_1CC689468((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    unint64_t v11 = a4[1].n128_u64[0];
    unsigned __int8 v12 = a5[1].n128_u8[0];
    *a4 = *a5;
    a4[1].n128_u8[0] = v12;
    a5[1].n128_u8[0] = v11;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      unint64_t v13 = a3[2];
      unsigned __int8 v14 = a4[1].n128_u8[0];
      *(__n128 *)a3 = *a4;
      *((unsigned char *)a3 + 16) = v14;
      a4[1].n128_u8[0] = v13;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        unint64_t v15 = a2[2];
        char v16 = *((unsigned char *)a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((unsigned char *)a2 + 16) = v16;
        *((unsigned char *)a3 + 16) = v15;
        *(__n128 *)a3 = result;
        if (*a2 < a1->n128_u64[0])
        {
          __n128 result = *a1;
          unint64_t v17 = a1[1].n128_u64[0];
          unsigned __int8 v18 = *((unsigned char *)a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u8[0] = v18;
          *((unsigned char *)a2 + 16) = v17;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

double llvm::dwarf::UnwindLocation::createUnspecified@<D0>(uint64_t a1@<X8>)
{
  double result = NAN;
  *(void *)a1 = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createUndefined@<D0>(uint64_t a1@<X8>)
{
  double result = NAN;
  *(void *)a1 = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createSame@<D0>(uint64_t a1@<X8>)
{
  double result = NAN;
  *(void *)a1 = 0xFFFFFFFF00000002;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createIsConstant@<D0>(llvm::dwarf::UnwindLocation *this@<X0>, uint64_t a2@<X8>)
{
  double result = NAN;
  *(void *)a2 = -4294967290;
  *(_DWORD *)(a2 + 8) = this;
  *(void *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createIsCFAPlusOffset@<D0>(llvm::dwarf::UnwindLocation *this@<X0>, uint64_t a2@<X8>)
{
  double result = NAN;
  *(void *)a2 = 0xFFFFFFFF00000003;
  *(_DWORD *)(a2 + 8) = this;
  *(void *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createAtCFAPlusOffset@<D0>(llvm::dwarf::UnwindLocation *this@<X0>, uint64_t a2@<X8>)
{
  double result = NAN;
  *(void *)a2 = 0xFFFFFFFF00000003;
  *(_DWORD *)(a2 + 8) = this;
  *(void *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

uint64_t llvm::dwarf::UnwindLocation::createIsRegisterPlusOffset@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 4;
  *(_DWORD *)(a4 + 4) = result;
  *(_DWORD *)(a4 + 8) = a2;
  *(void *)(a4 + 12) = a3;
  *(unsigned char *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 64) = 0;
  return result;
}

uint64_t llvm::dwarf::UnwindLocation::createAtRegisterPlusOffset@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 4;
  *(_DWORD *)(a4 + 4) = result;
  *(_DWORD *)(a4 + 8) = a2;
  *(void *)(a4 + 12) = a3;
  *(unsigned char *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 64) = 1;
  return result;
}

double llvm::dwarf::UnwindLocation::createIsDWARFExpression@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[1];
  *(_OWORD *)(a2 + 24) = *a1;
  *(_OWORD *)(a2 + 40) = v2;
  double result = NAN;
  *(void *)a2 = -4294967291;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

double llvm::dwarf::UnwindLocation::createAtDWARFExpression@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[1];
  *(_OWORD *)(a2 + 24) = *a1;
  *(_OWORD *)(a2 + 40) = v2;
  double result = NAN;
  *(void *)a2 = -4294967291;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

llvm::raw_ostream *llvm::dwarf::UnwindLocation::dump(llvm::raw_ostream *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3, int a4)
{
  uint64_t v7 = (uint64_t)this;
  v29[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 64))
  {
    uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v8 >= *((void *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((void *)a2 + 4) = v8 + 1;
      *uint64_t v8 = 91;
    }
  }
  switch(*(_DWORD *)v7)
  {
    case 0:
      uint64_t v9 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v9) <= 0xA)
      {
        char v10 = "unspecified";
        unint64_t v11 = a2;
        size_t v12 = 11;
        goto LABEL_12;
      }
      *(_DWORD *)(v9 + 7) = 1684367718;
      *(void *)uint64_t v9 = *(void *)"unspecified";
      uint64_t v26 = *((void *)a2 + 4) + 11;
      goto LABEL_44;
    case 1:
      uint64_t v13 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v13) <= 8)
      {
        char v10 = "undefined";
        unint64_t v11 = a2;
        size_t v12 = 9;
        goto LABEL_12;
      }
      *(unsigned char *)(v13 + 8) = 100;
      *(void *)uint64_t v13 = *(void *)"undefined";
      uint64_t v26 = *((void *)a2 + 4) + 9;
      goto LABEL_44;
    case 2:
      unsigned __int8 v14 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v14 > 3uLL)
      {
        *unsigned __int8 v14 = 1701667187;
        uint64_t v26 = *((void *)a2 + 4) + 4;
LABEL_44:
        *((void *)a2 + 4) = v26;
      }
      else
      {
        char v10 = "same";
        unint64_t v11 = a2;
        size_t v12 = 4;
LABEL_12:
        this = llvm::raw_ostream::write(v11, v10, v12);
      }
      goto LABEL_35;
    case 3:
      uint64_t v15 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v15) > 2)
      {
        *(unsigned char *)(v15 + 2) = 65;
        *(_WORD *)uint64_t v15 = 17987;
        *((void *)a2 + 4) += 3;
      }
      else
      {
        this = llvm::raw_ostream::write(a2, "CFA", 3uLL);
      }
      unint64_t v16 = *(int *)(v7 + 8);
      if (!v16) {
        goto LABEL_35;
      }
      if ((int)v16 > 0)
      {
        unint64_t v17 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v17)
        {
          llvm::raw_ostream::write(a2, "+", 1uLL);
        }
        else
        {
          *unint64_t v17 = 43;
          ++*((void *)a2 + 4);
        }
LABEL_19:
        unint64_t v16 = *(int *)(v7 + 8);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      unint64_t v16 = -(uint64_t)v16;
      unsigned __int8 v18 = a2;
      int v19 = 1;
      goto LABEL_34;
    case 4:
      this = sub_1CC689C28(a2, a3, a4, *(_DWORD *)(v7 + 4));
      unint64_t v20 = *(int *)(v7 + 8);
      if (v20)
      {
        if ((v20 & 0x80000000) != 0)
        {
LABEL_23:
          unint64_t v20 = -(uint64_t)v20;
          unint64_t v21 = a2;
          int v22 = 1;
          goto LABEL_29;
        }
      }
      else if (!*(unsigned char *)(v7 + 16))
      {
        goto LABEL_35;
      }
      unint64_t v23 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v23)
      {
        llvm::raw_ostream::write(a2, "+", 1uLL);
      }
      else
      {
        unsigned char *v23 = 43;
        ++*((void *)a2 + 4);
      }
      unint64_t v20 = *(int *)(v7 + 8);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_23;
      }
      unint64_t v21 = a2;
      int v22 = 0;
LABEL_29:
      this = sub_1CD098D14(v21, v20, 0, 0, v22);
      if (*(unsigned char *)(v7 + 16))
      {
        unint64_t v24 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v24 > 0xCuLL)
        {
          qmemcpy(v24, " in addrspace", 13);
          *((void *)a2 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(a2, " in addrspace", 0xDuLL);
        }
        unint64_t v16 = *(unsigned int *)(v7 + 12);
LABEL_33:
        unsigned __int8 v18 = a2;
        int v19 = 0;
LABEL_34:
        this = sub_1CD098D14(v18, v16, 0, 0, v19);
      }
LABEL_35:
      if (*(unsigned char *)(v7 + 64))
      {
        unint64_t v25 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v25 >= *((void *)a2 + 3))
        {
          return llvm::raw_ostream::write(a2, 93);
        }
        else
        {
          *((void *)a2 + 4) = v25 + 1;
          *unint64_t v25 = 93;
        }
      }
      return this;
    case 5:
      void v28[2] = 0;
      v29[2] = 0;
      v27[0] = -1;
      v27[1] = 0x1040000FFFFFFFFLL;
      void v27[2] = 0;
      v28[0] = &unk_1F26187D0;
      v28[1] = llvm::WithColor::defaultErrorHandler;
      v28[3] = v28;
      v29[0] = &unk_1F26187D0;
      v29[1] = llvm::WithColor::defaultWarningHandler;
      v29[3] = v29;
      llvm::DWARFExpression::print(v7 + 24, a2, (uint64_t)v27, a3, 0, a4);
      this = (llvm::raw_ostream *)sub_1CD5E15A8(v27);
      goto LABEL_35;
    case 6:
      goto LABEL_19;
    default:
      goto LABEL_35;
  }
}

llvm::raw_ostream *sub_1CC689C28(llvm::raw_ostream *this, llvm::MCRegisterInfo *a2, int a3, unsigned int a4)
{
  if (a2
    && (uint64_t LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(a2, a4, a3), (LLVMRegNum & 0xFF00000000) != 0)
    && (uint64_t v10 = *((void *)a2 + 8)) != 0)
  {
    unint64_t v11 = (const char *)(v10 + *(unsigned int *)(*(void *)a2 + 24 * LLVMRegNum));
    unint64_t v12 = strlen(v11);
    double result = (llvm::raw_ostream *)*((void *)this + 4);
    if (v12 <= *((void *)this + 3) - (void)result)
    {
      if (v12)
      {
        double result = (llvm::raw_ostream *)memcpy(result, v11, v12);
        *((void *)this + 4) += v12;
      }
    }
    else
    {
      return llvm::raw_ostream::write(this, v11, v12);
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v6) > 2)
    {
      *(unsigned char *)(v6 + 2) = 103;
      *(_WORD *)uint64_t v6 = 25970;
      *((void *)this + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(this, "reg", 3uLL);
    }
    return sub_1CD098D14(this, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *llvm::dwarf::operator<<(llvm::raw_ostream *a1, llvm::dwarf::UnwindLocation *this)
{
  return a1;
}

BOOL llvm::dwarf::UnwindLocation::operator==(int *a1, uint64_t a2)
{
  int v2 = *a1;
  if (*a1 != *(_DWORD *)a2) {
    return 0;
  }
  BOOL result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      goto LABEL_4;
    case 4:
      if (a1[1] != *(_DWORD *)(a2 + 4)) {
        return 0;
      }
LABEL_4:
      if (a1[2] != *(_DWORD *)(a2 + 8)) {
        return 0;
      }
      goto LABEL_8;
    case 5:
      BOOL result = llvm::DWARFExpression::operator==((uint64_t)(a1 + 6), a2 + 24);
      if (!result) {
        return result;
      }
LABEL_8:
      int v6 = *((unsigned __int8 *)a1 + 64);
      int v7 = *(unsigned __int8 *)(a2 + 64);
LABEL_10:
      BOOL result = v6 == v7;
      break;
    case 6:
      int v6 = a1[2];
      int v7 = *(_DWORD *)(a2 + 8);
      goto LABEL_10;
    default:
      return 0;
  }
  return result;
}

llvm::raw_ostream *llvm::dwarf::RegisterLocations::dump(llvm::raw_ostream *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3, int a4)
{
  uint64_t v4 = (void *)((char *)this + 8);
  long long v5 = *(void **)this;
  if (*(llvm::raw_ostream **)this != (llvm::raw_ostream *)((char *)this + 8))
  {
    char v9 = 1;
    do
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v10 = (_WORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v10 > 1uLL)
        {
          *uint64_t v10 = 8236;
          *((void *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
        }
      }
      sub_1CC689C28(a2, a3, a4, *((_DWORD *)v5 + 8));
      unint64_t v11 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v11 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 61);
      }
      else
      {
        *((void *)a2 + 4) = v11 + 1;
        *unint64_t v11 = 61;
      }
      this = llvm::dwarf::UnwindLocation::dump((llvm::raw_ostream *)(v5 + 5), a2, a3, a4);
      unint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          long long v5 = v13;
        }
        while (!v14);
      }
      char v9 = 0;
      long long v5 = v13;
    }
    while (v13 != v4);
  }
  return this;
}

llvm::raw_ostream *llvm::dwarf::operator<<(llvm::raw_ostream *a1, llvm::dwarf::RegisterLocations *this)
{
  return a1;
}

llvm::raw_ostream *llvm::dwarf::UnwindRow::dump(llvm::dwarf::UnwindRow *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3, int a4, int a5)
{
  llvm::raw_ostream::indent(a2, 2 * a5);
  if (*((unsigned char *)this + 8))
  {
    uint64_t v9 = *(void *)this;
    v15[0] = &unk_1F25FF808;
    v15[1] = "0x%llx: ";
    _OWORD v15[2] = v9;
    llvm::raw_ostream::operator<<(a2, (uint64_t)v15);
  }
  uint64_t v10 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v10 > 3uLL)
  {
    *uint64_t v10 = 1027688003;
    *((void *)a2 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a2, "CFA=", 4uLL);
  }
  BOOL result = llvm::dwarf::UnwindLocation::dump((llvm::dwarf::UnwindRow *)((char *)this + 16), a2, a3, a4);
  if (*((void *)this + 13))
  {
    unint64_t v12 = (llvm::dwarf::UnwindRow *)((char *)this + 88);
    uint64_t v13 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v13 > 1uLL)
    {
      *uint64_t v13 = 8250;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ": ", 2uLL);
    }
    BOOL result = llvm::dwarf::RegisterLocations::dump(v12, a2, a3, a4);
  }
  BOOL v14 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v14) {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  *BOOL v14 = 10;
  ++*((void *)a2 + 4);
  return result;
}

llvm::raw_ostream *llvm::dwarf::operator<<(llvm::raw_ostream *a1, llvm::dwarf::UnwindRow *this)
{
  return a1;
}

llvm::raw_ostream *llvm::dwarf::UnwindTable::dump(llvm::raw_ostream *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3, int a4, int a5)
{
  long long v5 = *(llvm::dwarf::UnwindRow **)this;
  int v6 = (llvm::dwarf::UnwindRow *)*((void *)this + 1);
  if (*(llvm::dwarf::UnwindRow **)this != v6)
  {
    do
    {
      this = llvm::dwarf::UnwindRow::dump(v5, a2, a3, a4, a5);
      long long v5 = (llvm::dwarf::UnwindRow *)((char *)v5 + 112);
    }
    while (v5 != v6);
  }
  return this;
}

llvm::raw_ostream *llvm::dwarf::operator<<(llvm::raw_ostream *a1, llvm::dwarf::UnwindRow **a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    llvm::dwarf::UnwindRow::dump(v3, a1, 0, 0, 0);
    unint64_t v3 = (llvm::dwarf::UnwindRow *)((char *)v3 + 112);
  }
  return a1;
}

void llvm::dwarf::UnwindTable::create(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[13];
  if (!v4)
  {
    unsigned __int8 v18 = std::generic_category();
    *(void *)&long long v21 = a1[2];
    sub_1CD5E3FE8(22, (uint64_t)v18, (uint64_t)"unable to get CIE for FDE at offset 0x%llx", (uint64_t *)&v21);
  }
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = *(void *)(v4 + 40);
  long long v5 = (llvm::dwarf::CFIProgram *)(v4 + 32);
  if (v6 == v7 && a1[4] == a1[5])
  {
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 0;
    *(unsigned char *)(a2 + 40) &= ~1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)&long long v22 = 0;
    long long v21 = 0uLL;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    long long v30 = &v21;
    unint64_t v11 = (void ***)&v30;
  }
  else
  {
    long long v30 = 0;
    BOOL v31 = 0;
    *(void *)&long long v22 = 0xFFFFFFFF00000000;
    DWORD2(v22) = 0;
    BYTE12(v22) = 0;
    LOBYTE(v23) = 0;
    BYTE8(v23) = 0;
    BYTE8(v25) = 0;
    char v26 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    long long v27 = &v28;
    uint64_t v8 = a1[12];
    *(void *)&long long v21 = a1[11];
    BYTE8(v21) = 1;
    unint64_t v32 = 0;
    *(void *)&long long v33 = v8 + v21;
    BYTE8(v33) = 1;
    llvm::dwarf::UnwindTable::parseRows(v5, (uint64_t)&v30, (uint64_t)&v21, 0, (uint64_t *)v20);
    uint64_t v9 = v20[0];
    if (v20[0])
    {
      *(unsigned char *)(a2 + 40) |= 1u;
      *(void *)a2 = v9;
    }
    else
    {
      sub_1CC68F760(v20, &v27);
      llvm::dwarf::UnwindTable::parseRows((llvm::dwarf::CFIProgram *)(a1 + 4), (uint64_t)&v30, (uint64_t)&v21, (uint64_t)v20, &v19);
      uint64_t v10 = v19;
      if (v19)
      {
        *(unsigned char *)(a2 + 40) |= 1u;
        *(void *)a2 = v10;
      }
      else
      {
        unint64_t v12 = v31;
        unint64_t v13 = v32;
        if (v29 || v22)
        {
          if ((unint64_t)v31 >= v32)
          {
            unint64_t v12 = sub_1CC68FD50((void **)&v30, (uint64_t)&v21);
            unint64_t v13 = v32;
          }
          else
          {
            long long v14 = v22;
            *(_OWORD *)BOOL v31 = v21;
            *((_OWORD *)v12 + 1) = v14;
            long long v15 = v23;
            long long v16 = v24;
            long long v17 = v25;
            v12[80] = v26;
            *((_OWORD *)v12 + 3) = v16;
            *((_OWORD *)v12 + 4) = v17;
            *((_OWORD *)v12 + 2) = v15;
            sub_1CC68F760((uint64_t **)v12 + 11, &v27);
            v12 += 112;
          }
          BOOL v31 = v12;
        }
        *(unsigned char *)(a2 + 40) &= ~1u;
        *(void *)a2 = v30;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = v13;
        BOOL v31 = 0;
        unint64_t v32 = 0;
        long long v30 = 0;
        *(_OWORD *)(a2 + 24) = v33;
      }
      sub_1CBB0D544(v20[1]);
    }
    sub_1CBB0D544(v28);
    *(void *)&long long v21 = &v30;
    unint64_t v11 = (void ***)&v21;
  }
  sub_1CC68F6D8(v11);
}

void llvm::dwarf::UnwindTable::parseRows(llvm::dwarf::CFIProgram *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD **)a1;
  uint64_t v6 = (_OWORD *)*((void *)a1 + 1);
  if (*(_OWORD **)a1 == v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_175:
    *a5 = 0;
    goto LABEL_180;
  }
  uint64_t v8 = (int *)a1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = (uint64_t **)(a3 + 88);
  __n128 v153 = 0;
  uint64_t v156 = (uint64_t *)(a3 + 96);
  uint64_t v150 = a3 + 33;
  long long v151 = (void *)(a4 + 8);
  while (2)
  {
    int v12 = *(unsigned __int8 *)v5;
    switch(*(unsigned char *)v5)
    {
      case 1:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        uint64_t v53 = *(void *)v165;
        if (*(void *)v165 <= *(void *)a3)
        {
          BOOL v101 = std::generic_category();
          BOOL v102 = llvm::dwarf::CallFrameString(*(unsigned __int8 *)v5, v8[10]);
          if (v102)
          {
            size_t v104 = v103;
            if (v103 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_252;
            }
            uint64_t v105 = v102;
            if (v103 >= 0x17)
            {
              uint64_t v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v103 | 7) != 0x17) {
                uint64_t v108 = v103 | 7;
              }
              uint64_t v109 = v108 + 1;
              unint64_t v106 = operator new(v108 + 1);
              *(void *)&__dst[8] = v104;
              *(void *)&__dst[16] = v109 | 0x8000000000000000;
              *(void *)long long __dst = v106;
            }
            else
            {
              __dst[23] = v103;
              unint64_t v106 = __dst;
              if (!v103) {
                goto LABEL_196;
              }
            }
            memmove(v106, v105, v104);
LABEL_196:
            v106[v104] = 0;
            unint64_t v107 = __dst;
            if (__dst[23] < 0) {
              unint64_t v107 = *(unsigned char **)__dst;
            }
          }
          else
          {
            memset(__dst, 0, 24);
            unint64_t v107 = __dst;
          }
          char v162 = v107;
          uint64_t v157 = *(uint64_t **)a3;
          sub_1CC68CB18(22, (uint64_t)v101, (uint64_t)"%s with adrress 0x%llx which must be greater than the current row address 0x%llx", (uint64_t *)&v162, (uint64_t *)v165, (uint64_t *)&v157);
        }
        unint64_t v54 = *(void *)(a2 + 8);
        if (v54 >= *(void *)(a2 + 16))
        {
          unint64_t v59 = sub_1CC68FD50((void **)a2, a3);
        }
        else
        {
          long long v55 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)unint64_t v54 = *(_OWORD *)a3;
          *(_OWORD *)(v54 + 16) = v55;
          long long v56 = *(_OWORD *)(a3 + 32);
          long long v57 = *(_OWORD *)(a3 + 48);
          long long v58 = *(_OWORD *)(a3 + 64);
          *(unsigned char *)(v54 + 80) = *(unsigned char *)(a3 + 80);
          *(_OWORD *)(v54 + 48) = v57;
          *(_OWORD *)(v54 + 64) = v58;
          *(_OWORD *)(v54 + 32) = v56;
          sub_1CC68F760((uint64_t **)(v54 + 88), v11);
          unint64_t v59 = (char *)(v54 + 112);
        }
        *(void *)(a2 + 8) = v59;
        if (!*(unsigned char *)(a3 + 8)) {
          *(unsigned char *)(a3 + 8) = 1;
        }
        *(void *)a3 = v53;
        goto LABEL_172;
      case 2:
      case 3:
      case 4:
      case 0x40:
        unint64_t v13 = *(void *)(a2 + 8);
        if (v13 >= *(void *)(a2 + 16))
        {
          uint64_t v18 = a2;
          uint64_t v19 = sub_1CC68FD50((void **)a2, a3);
        }
        else
        {
          long long v14 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)unint64_t v13 = *(_OWORD *)a3;
          *(_OWORD *)(v13 + 16) = v14;
          long long v15 = *(_OWORD *)(a3 + 32);
          long long v16 = *(_OWORD *)(a3 + 48);
          long long v17 = *(_OWORD *)(a3 + 64);
          *(unsigned char *)(v13 + 80) = *(unsigned char *)(a3 + 80);
          *(_OWORD *)(v13 + 48) = v16;
          *(_OWORD *)(v13 + 64) = v17;
          *(_OWORD *)(v13 + 32) = v15;
          uint64_t v18 = a2;
          sub_1CC68F760((uint64_t **)(v13 + 88), v11);
          uint64_t v19 = (char *)(v13 + 112);
        }
        *(void *)(v18 + 8) = v19;
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)__dst);
        if (__dst[8]) {
          goto LABEL_178;
        }
        *(void *)a3 += *(void *)__dst;
        goto LABEL_172;
      case 5:
      case 0x11:
        goto LABEL_22;
      case 6:
        goto LABEL_8;
      case 7:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        unsigned int v20 = *(_DWORD *)v165;
        sub_1CC68FAFC(v11, *(unsigned int *)v165);
        *(_DWORD *)long long __dst = v20;
        *(void *)&__dst[8] = 0xFFFFFFFF00000001;
        goto LABEL_88;
      case 8:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        unsigned int v20 = *(_DWORD *)v165;
        sub_1CC68FAFC(v11, *(unsigned int *)v165);
        *(_DWORD *)long long __dst = v20;
        *(void *)&__dst[8] = 0xFFFFFFFF00000002;
LABEL_88:
        *(_DWORD *)&__dst[16] = 0;
        __dst[20] = 0;
        unsigned char __dst[24] = 0;
        goto LABEL_89;
      case 9:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 1u, (uint64_t)&v162);
        if (v163) {
          goto LABEL_177;
        }
        unsigned int v20 = *(_DWORD *)v165;
        int v34 = (int)v162;
        sub_1CC68FAFC(v11, *(unsigned int *)v165);
        *(_DWORD *)long long __dst = v20;
        *(_DWORD *)&__dst[8] = 4;
        *(_DWORD *)&__dst[12] = v34;
        *(_DWORD *)&__dst[16] = 0;
        goto LABEL_48;
      case 0xA:
        if (v10 >= v153)
        {
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9) + 1;
          if (v68 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_252;
          }
          if (0x5555555555555556 * (v153 - v9) > v68) {
            unint64_t v68 = 0x5555555555555556 * (v153 - v9);
          }
          if (0xAAAAAAAAAAAAAAABLL * (v153 - v9) >= 0x555555555555555) {
            unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v69 = v68;
          }
          __n128 v148 = v6;
          if (v69)
          {
            if (v69 > 0xAAAAAAAAAAAAAAALL) {
              sub_1CB833614();
            }
            uint64_t v70 = (char *)operator new(24 * v69);
          }
          else
          {
            uint64_t v70 = 0;
          }
          uint64_t v79 = (uint64_t **)&v70[8 * (v10 - v9)];
          sub_1CC68F760(v79, v11);
          if (v10 == v9)
          {
            long long v86 = (uint64_t **)&v70[8 * (v10 - v9)];
          }
          else
          {
            uint64_t v80 = 0;
            do
            {
              unint64_t v81 = &v79[v80];
              *(v81 - 3) = v10[v80 - 3];
              unint64_t v82 = (uint64_t *)&v10[v80 - 2];
              unint64_t v83 = (uint64_t *)*v82;
              v79[v80 - 2] = (uint64_t *)*v82;
              uint64_t v84 = (uint64_t)&v79[v80 - 2];
              long long v85 = v10[v80 - 1];
              *(v81 - 1) = v85;
              if (v85)
              {
                v83[2] = v84;
                v10[v80 - 3] = v82;
                uint64_t *v82 = 0;
                v10[v80 - 1] = 0;
              }
              else
              {
                *(v81 - 3) = (uint64_t *)v84;
              }
              v80 -= 3;
            }
            while (&v10[v80] != v9);
            long long v86 = &v79[v80];
            do
            {
              sub_1CBB0D544(*(v10 - 2));
              v10 -= 3;
            }
            while (v10 != v9);
          }
          __n128 v153 = (uint64_t **)&v70[24 * v69];
          uint64_t v10 = v79 + 3;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v86;
          uint64_t v6 = v148;
        }
        else
        {
          sub_1CC68F760(v10, v11);
          v10 += 3;
        }
        goto LABEL_172;
      case 0xB:
        if (v9 == v10)
        {
          uint64_t v100 = std::generic_category();
          *(void *)long long __dst = 22;
          *(void *)&__dst[8] = v100;
          *(void *)uint64_t v165 = "DW_CFA_restore_state without a matching previous DW_CFA_remember_state";
          sub_1CD06481C();
        }
        unint64_t v35 = v10 - 3;
        if (v11 == v10 - 3) {
          goto LABEL_171;
        }
        long long v149 = v8;
        long long v36 = (uint64_t **)*(v10 - 3);
        unint64_t v37 = v10 - 2;
        if (!*(void *)(a3 + 104))
        {
          uint64_t v51 = (uint64_t **)*(v10 - 3);
LABEL_146:
          uint64_t v8 = v149;
          goto LABEL_156;
        }
        __n128 v146 = v9;
        unint64_t v38 = *v11;
        *unint64_t v11 = v156;
        *(void *)(*v156 + 16) = 0;
        uint64_t *v156 = 0;
        v156[1] = 0;
        if (v38[1]) {
          uint64_t v39 = v38[1];
        }
        else {
          uint64_t v39 = (uint64_t)v38;
        }
        if (!v39)
        {
          uint64_t v51 = v36;
          uint64_t v9 = v146;
          goto LABEL_146;
        }
        __n128 v147 = v6;
        unint64_t v40 = sub_1CD4F3428(v39);
        if (v36 == v37)
        {
          unint64_t v41 = (void *)v39;
          uint64_t v51 = v36;
        }
        else
        {
          do
          {
            unint64_t v41 = v40;
            unsigned int v42 = *((_DWORD *)v36 + 8);
            *(_DWORD *)(v39 + 32) = v42;
            *(_OWORD *)(v39 + 40) = *(_OWORD *)(v36 + 5);
            long long v43 = *(_OWORD *)(v36 + 7);
            long long v44 = *(_OWORD *)(v36 + 9);
            long long v45 = *(_OWORD *)(v36 + 11);
            *(unsigned char *)(v39 + 104) = *((unsigned char *)v36 + 104);
            *(_OWORD *)(v39 + 88) = v45;
            *(_OWORD *)(v39 + 72) = v44;
            *(_OWORD *)(v39 + 56) = v43;
            uint64_t v46 = v156;
            uint64_t v47 = *v156;
            unint64_t v48 = v156;
            if (*v156)
            {
              do
              {
                while (1)
                {
                  unint64_t v48 = (uint64_t *)v47;
                  if (v42 >= *(_DWORD *)(v47 + 32)) {
                    break;
                  }
                  uint64_t v47 = *(void *)v47;
                  uint64_t v46 = v48;
                  if (!*v48) {
                    goto LABEL_65;
                  }
                }
                uint64_t v47 = *(void *)(v47 + 8);
              }
              while (v47);
              uint64_t v46 = v48 + 1;
            }
LABEL_65:
            *(void *)uint64_t v39 = 0;
            *(void *)(v39 + 8) = 0;
            *(void *)(v39 + 16) = v48;
            *uint64_t v46 = v39;
            unint64_t v49 = (uint64_t *)**v11;
            if (v49)
            {
              *unint64_t v11 = v49;
              uint64_t v39 = *v46;
            }
            sub_1CB8358B8(*(uint64_t **)(a3 + 96), (uint64_t *)v39);
            ++*(void *)(a3 + 104);
            if (v40) {
              unint64_t v40 = sub_1CD4F3428((uint64_t)v40);
            }
            else {
              unint64_t v40 = 0;
            }
            uint64_t v50 = v36[1];
            if (v50)
            {
              do
              {
                uint64_t v51 = (uint64_t **)v50;
                uint64_t v50 = (uint64_t *)*v50;
              }
              while (v50);
            }
            else
            {
              do
              {
                uint64_t v51 = (uint64_t **)v36[2];
                BOOL v52 = *v51 == (uint64_t *)v36;
                long long v36 = v51;
              }
              while (!v52);
            }
            if (!v41) {
              break;
            }
            long long v36 = v51;
            uint64_t v39 = (uint64_t)v41;
          }
          while (v51 != v37);
        }
        sub_1CBB0D544(v41);
        if (v40)
        {
          uint64_t v9 = v146;
          uint64_t v6 = v147;
          uint64_t v8 = v149;
          do
          {
            long long v87 = v40;
            unint64_t v40 = (void *)v40[2];
          }
          while (v40);
          sub_1CBB0D544(v87);
        }
        else
        {
          uint64_t v9 = v146;
          uint64_t v6 = v147;
          uint64_t v8 = v149;
        }
        unint64_t v35 = v10 - 3;
LABEL_156:
        if (v51 != v37)
        {
          do
          {
            long long v88 = (uint64_t *)operator new(0x70uLL);
            long long v89 = v88;
            *((_OWORD *)v88 + 2) = *((_OWORD *)v51 + 2);
            long long v90 = *((_OWORD *)v51 + 6);
            long long v92 = *((_OWORD *)v51 + 3);
            long long v91 = *((_OWORD *)v51 + 4);
            *((_OWORD *)v88 + 5) = *((_OWORD *)v51 + 5);
            *((_OWORD *)v88 + 6) = v90;
            *((_OWORD *)v88 + 3) = v92;
            *((_OWORD *)v88 + 4) = v91;
            long long v93 = (uint64_t **)v156;
            uint64_t v94 = *v156;
            long long v95 = (uint64_t **)v156;
            if (*v156)
            {
              do
              {
                while (1)
                {
                  long long v95 = (uint64_t **)v94;
                  if (*((_DWORD *)v88 + 8) >= *(_DWORD *)(v94 + 32)) {
                    break;
                  }
                  uint64_t v94 = *(void *)v94;
                  long long v93 = v95;
                  if (!*v95) {
                    goto LABEL_163;
                  }
                }
                uint64_t v94 = *(void *)(v94 + 8);
              }
              while (v94);
              long long v93 = v95 + 1;
            }
LABEL_163:
            *long long v88 = 0;
            v88[1] = 0;
            v88[2] = (uint64_t)v95;
            *long long v93 = v88;
            uint64_t v96 = (uint64_t *)**v11;
            if (v96)
            {
              *unint64_t v11 = v96;
              long long v89 = *v93;
            }
            sub_1CB8358B8(*(uint64_t **)(a3 + 96), v89);
            ++*(void *)(a3 + 104);
            uint64_t v97 = v51[1];
            if (v97)
            {
              do
              {
                uint64_t v98 = (uint64_t **)v97;
                uint64_t v97 = (uint64_t *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                uint64_t v98 = (uint64_t **)v51[2];
                BOOL v52 = *v98 == (uint64_t *)v51;
                uint64_t v51 = v98;
              }
              while (!v52);
            }
            uint64_t v51 = v98;
          }
          while (v98 != v37);
        }
LABEL_171:
        sub_1CBB0D544(*(v10 - 2));
        uint64_t v10 = v35;
        goto LABEL_172;
      case 0xC:
      case 0x12:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)__dst);
        if (__dst[8]) {
          goto LABEL_178;
        }
        llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 1u, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        int v27 = *(_DWORD *)__dst;
        int v28 = *(_DWORD *)v165;
        *(_DWORD *)(a3 + 16) = 4;
        *(_DWORD *)(a3 + 20) = v27;
        *(_DWORD *)(a3 + 24) = v28;
        *(void *)(a3 + 28) = 0;
        goto LABEL_35;
      case 0xD:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)__dst);
        if (__dst[8]) {
          goto LABEL_178;
        }
        if (*(_DWORD *)(a3 + 16) != 4)
        {
          *(_DWORD *)(a3 + 16) = 4;
          *(_DWORD *)(a3 + 24) = 0;
          *(void *)(a3 + 28) = 0;
          *(unsigned char *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 72) = 0;
          *(unsigned char *)(a3 + 80) = 0;
        }
        *(_DWORD *)(a3 + 20) = *(_DWORD *)__dst;
        goto LABEL_172;
      case 0xE:
      case 0x13:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        if (*(_DWORD *)(a3 + 16) != 4)
        {
          unint64_t v110 = std::generic_category();
          int v111 = llvm::dwarf::CallFrameString(*(unsigned __int8 *)v5, v8[10]);
          if (!v111)
          {
            memset(__dst, 0, 24);
            unint64_t v113 = __dst;
            goto LABEL_217;
          }
          size_t v117 = v112;
          if (v112 <= 0x7FFFFFFFFFFFFFF7)
          {
            __n128 v118 = v111;
            if (v112 >= 0x17)
            {
              uint64_t v123 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v112 | 7) != 0x17) {
                uint64_t v123 = v112 | 7;
              }
              uint64_t v124 = v123 + 1;
              __n128 v119 = operator new(v123 + 1);
              *(void *)&__dst[8] = v117;
              *(void *)&__dst[16] = v124 | 0x8000000000000000;
              *(void *)long long __dst = v119;
            }
            else
            {
              __dst[23] = v112;
              __n128 v119 = __dst;
              if (!v112)
              {
LABEL_215:
                v119[v117] = 0;
                unint64_t v113 = __dst;
                if (__dst[23] < 0) {
                  unint64_t v113 = *(unsigned char **)__dst;
                }
LABEL_217:
                char v162 = v113;
                sub_1CD5E3960(22, (uint64_t)v110, (uint64_t)"%s found when CFA rule was not RegPlusOffset", (uint64_t *)&v162);
              }
            }
            memmove(v119, v118, v117);
            goto LABEL_215;
          }
LABEL_252:
          abort();
        }
        *(_DWORD *)(a3 + 24) = *(_DWORD *)v165;
        goto LABEL_172;
      case 0xF:
        long long v62 = v5[4];
        *(_OWORD *)&__dst[7] = v5[3];
        *(_OWORD *)&__dst[23] = v62;
        *(void *)(a3 + 16) = -4294967291;
        *(_DWORD *)(a3 + 24) = 0;
        *(unsigned char *)(a3 + 28) = 0;
        *(unsigned char *)(a3 + 32) = 0;
        long long v63 = *(_OWORD *)&__dst[16];
        *(_OWORD *)uint64_t v150 = *(_OWORD *)__dst;
        *(_OWORD *)(v150 + 16) = v63;
        *(void *)(v150 + 31) = *(void *)&__dst[31];
        *(unsigned char *)(a3 + 72) = 1;
        goto LABEL_96;
      case 0x10:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)&v162);
        if (v163) {
          goto LABEL_177;
        }
        unsigned int v20 = v162;
        long long v33 = v5[4];
        *(_OWORD *)&v165[7] = v5[3];
        *(_OWORD *)&v165[23] = v33;
        sub_1CC68FAFC(v11, v162);
        *(_DWORD *)long long __dst = v20;
        *(void *)&__dst[8] = -4294967291;
        *(_DWORD *)&__dst[16] = 0;
        __dst[20] = 0;
        unsigned char __dst[24] = 0;
        *(_OWORD *)&__dst[25] = *(_OWORD *)v165;
        *(_OWORD *)uint64_t v161 = *(_OWORD *)&v165[16];
        *(void *)&v161[15] = *(void *)&v165[31];
        v161[23] = 1;
        goto LABEL_44;
      case 0x14:
      case 0x15:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
        if (v165[8]) {
          goto LABEL_176;
        }
        llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 1u, (uint64_t)&v162);
        if (v163) {
          goto LABEL_177;
        }
        unsigned int v20 = *(_DWORD *)v165;
        int v32 = (int)v162;
        sub_1CC68FAFC(v11, *(unsigned int *)v165);
        *(_DWORD *)long long __dst = v20;
        *(void *)&__dst[8] = 0xFFFFFFFF00000003;
        *(_DWORD *)&__dst[16] = v32;
LABEL_48:
        *(void *)&__dst[20] = 0;
LABEL_89:
        __dst[32] = 0;
        v161[23] = 0;
LABEL_90:
        v161[31] = 0;
        goto LABEL_91;
      case 0x16:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)&v162);
        if (v163) {
          goto LABEL_177;
        }
        unsigned int v20 = v162;
        long long v64 = v5[4];
        *(_OWORD *)&v165[7] = v5[3];
        *(_OWORD *)&v165[23] = v64;
        sub_1CC68FAFC(v11, v162);
        *(_DWORD *)long long __dst = v20;
        *(void *)&__dst[8] = -4294967291;
        *(_DWORD *)&__dst[16] = 0;
        __dst[20] = 0;
        unsigned char __dst[24] = 0;
        *(_OWORD *)&__dst[25] = *(_OWORD *)v165;
        *(_OWORD *)uint64_t v161 = *(_OWORD *)&v165[16];
        *(void *)&v161[15] = *(void *)&v165[31];
        v161[23] = 1;
        goto LABEL_90;
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2E:
      case 0x2F:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
        goto LABEL_172;
      case 0x2D:
        int v65 = v8[10];
        if ((v65 - 3) < 3)
        {
          uint64_t v71 = *v156;
          if (!*v156) {
            goto LABEL_124;
          }
          uint64_t v72 = v156;
          do
          {
            unsigned int v73 = *(_DWORD *)(v71 + 32);
            BOOL v74 = v73 >= 0x22;
            if (v73 >= 0x22) {
              uint64_t v75 = (uint64_t *)v71;
            }
            else {
              uint64_t v75 = (uint64_t *)(v71 + 8);
            }
            if (v74) {
              uint64_t v72 = (uint64_t *)v71;
            }
            uint64_t v71 = *v75;
          }
          while (*v75);
          if (v72 == v156 || *((_DWORD *)v72 + 8) > 0x22u)
          {
LABEL_124:
            sub_1CC68FAFC(v11, 0x22u);
            *(_DWORD *)long long __dst = 34;
            *(void *)&__dst[8] = -4294967290;
            *(_DWORD *)&__dst[16] = 1;
            *(void *)&__dst[20] = 0;
            __dst[32] = 0;
            v161[23] = 0;
            v161[31] = 0;
            unint64_t v60 = (uint64_t *)v11;
            unsigned int v61 = 34;
            goto LABEL_92;
          }
          if (*((_DWORD *)v72 + 10) != 6)
          {
            unint64_t v133 = std::generic_category();
            __n128 v134 = llvm::dwarf::CallFrameString(*(unsigned __int8 *)v5, v8[10]);
            if (!v134)
            {
              memset(__dst, 0, 24);
              uint64_t v136 = __dst;
              goto LABEL_251;
            }
            size_t v141 = v135;
            if (v135 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_252;
            }
            long long v142 = v134;
            if (v135 >= 0x17)
            {
              uint64_t v144 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v135 | 7) != 0x17) {
                uint64_t v144 = v135 | 7;
              }
              uint64_t v145 = v144 + 1;
              __n128 v143 = operator new(v144 + 1);
              *(void *)&__dst[8] = v141;
              *(void *)&__dst[16] = v145 | 0x8000000000000000;
              *(void *)long long __dst = v143;
            }
            else
            {
              __dst[23] = v135;
              __n128 v143 = __dst;
              if (!v135)
              {
LABEL_249:
                v143[v141] = 0;
                uint64_t v136 = __dst;
                if (__dst[23] < 0) {
                  uint64_t v136 = *(unsigned char **)__dst;
                }
LABEL_251:
                *(void *)uint64_t v165 = v136;
                long long v127 = "%s encountered when existing rule for this register is not a constant";
LABEL_225:
                sub_1CD5E3960(22, (uint64_t)v133, (uint64_t)v127, (uint64_t *)v165);
              }
            }
            memmove(v143, v142, v141);
            goto LABEL_249;
          }
        }
        else
        {
          if ((v65 - 33) > 2)
          {
            std::generic_category();
            ArchTypeName = llvm::Triple::getArchTypeName(v8[10]);
            if (ArchTypeName)
            {
              size_t v130 = v129;
              if (v129 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_252;
              }
              uint64_t v131 = ArchTypeName;
              if (v129 >= 0x17)
              {
                uint64_t v138 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v129 | 7) != 0x17) {
                  uint64_t v138 = v129 | 7;
                }
                uint64_t v139 = v138 + 1;
                unint64_t v132 = (uint64_t *)operator new(v138 + 1);
                size_t v158 = v130;
                int64_t v159 = v139 | 0x8000000000000000;
                uint64_t v157 = v132;
              }
              else
              {
                HIBYTE(v159) = v129;
                unint64_t v132 = (uint64_t *)&v157;
                if (!v129) {
                  goto LABEL_238;
                }
              }
              memmove(v132, v131, v130);
LABEL_238:
              *((unsigned char *)v132 + v130) = 0;
              uint64_t v137 = (uint64_t *)&v157;
              if (v159 < 0) {
                uint64_t v137 = v157;
              }
            }
            else
            {
              uint64_t v157 = 0;
              size_t v158 = 0;
              uint64_t v137 = (uint64_t *)&v157;
              int64_t v159 = 0;
            }
            char v162 = 0;
            uint64_t v163 = 0;
            *(_DWORD *)&__dst[8] = 0;
            *(void *)&v161[7] = 0;
            *(void *)&v161[23] = &v162;
            *(_DWORD *)&v161[15] = 0;
            *(void *)long long __dst = &unk_1F2646F30;
            memset(&__dst[16], 0, 25);
            uint64_t v164 = 0;
            *(void *)uint64_t v165 = &unk_1F2618E68;
            char v140 = *(unsigned char *)v5;
            *(void *)&v165[8] = "DW_CFA opcode %#x is not supported for architecture %s";
            v165[16] = v140;
            *(void *)&v165[24] = v137;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)__dst, (uint64_t)v165);
            operator new();
          }
          int v66 = 0;
          for (unsigned int i = 16; i != 32; ++i)
          {
            sub_1CC68FAFC(v11, i);
            *(_DWORD *)long long __dst = i;
            *(void *)&__dst[8] = 0xFFFFFFFF00000003;
            *(_DWORD *)&__dst[16] = v66;
            *(void *)&__dst[20] = 0;
            __dst[32] = 0;
            v161[23] = 0;
            v161[31] = 1;
            sub_1CC68FBD4((uint64_t *)v11, i, (uint64_t)__dst);
            v66 += 8;
          }
        }
        goto LABEL_172;
      case 0x30:
      case 0x31:
        llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)__dst);
        if ((__dst[8] & 1) == 0)
        {
          llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 1u, (uint64_t)v165);
          if (v165[8])
          {
LABEL_176:
            uint64_t v99 = *(void *)v165;
            goto LABEL_179;
          }
          llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 2u, (uint64_t)&v162);
          if (v163) {
            goto LABEL_177;
          }
          int v29 = *(_DWORD *)__dst;
          int v30 = *(_DWORD *)v165;
          uint64_t v31 = v162 | 0x100000000;
          *(_DWORD *)(a3 + 16) = 4;
          *(_DWORD *)(a3 + 20) = v29;
          *(_DWORD *)(a3 + 24) = v30;
          *(void *)(a3 + 28) = v31;
LABEL_35:
          *(unsigned char *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 72) = 0;
LABEL_96:
          *(unsigned char *)(a3 + 80) = 0;
LABEL_172:
          long long v5 = (_OWORD *)((char *)v5 + 88);
          if (v5 == v6) {
            goto LABEL_175;
          }
          continue;
        }
LABEL_178:
        uint64_t v99 = *(void *)__dst;
LABEL_179:
        *a5 = v99;
LABEL_180:
        if (v9)
        {
          for (; v10 != v9; v10 -= 3)
            sub_1CBB0D544(*(v10 - 2));
          operator delete(v9);
        }
        return;
      default:
        if (v12 == 128)
        {
LABEL_22:
          llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
          if (v165[8]) {
            goto LABEL_176;
          }
          llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 1u, (uint64_t)&v162);
          if (v163)
          {
LABEL_177:
            uint64_t v99 = (uint64_t)v162;
            goto LABEL_179;
          }
          unsigned int v20 = *(_DWORD *)v165;
          int v26 = (int)v162;
          sub_1CC68FAFC(v11, *(unsigned int *)v165);
          *(_DWORD *)long long __dst = v20;
          *(void *)&__dst[8] = 0xFFFFFFFF00000003;
          *(_DWORD *)&__dst[16] = v26;
          *(void *)&__dst[20] = 0;
          __dst[32] = 0;
          v161[23] = 0;
LABEL_44:
          v161[31] = 1;
        }
        else
        {
          if (v12 != 192) {
            goto LABEL_172;
          }
LABEL_8:
          if (!a4)
          {
            unint64_t v133 = std::generic_category();
            unint64_t v114 = llvm::dwarf::CallFrameString(*(unsigned __int8 *)v5, v8[10]);
            if (!v114)
            {
              memset(__dst, 0, 24);
              long long v116 = __dst;
LABEL_224:
              *(void *)uint64_t v165 = v116;
              long long v127 = "%s encountered while parsing a CIE";
              goto LABEL_225;
            }
            size_t v120 = v115;
            if (v115 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_252;
            }
            int v121 = v114;
            if (v115 >= 0x17)
            {
              uint64_t v125 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v115 | 7) != 0x17) {
                uint64_t v125 = v115 | 7;
              }
              uint64_t v126 = v125 + 1;
              BOOL v122 = operator new(v125 + 1);
              *(void *)&__dst[8] = v120;
              *(void *)&__dst[16] = v126 | 0x8000000000000000;
              *(void *)long long __dst = v122;
            }
            else
            {
              __dst[23] = v115;
              BOOL v122 = __dst;
              if (!v115)
              {
LABEL_222:
                v122[v120] = 0;
                long long v116 = __dst;
                if (__dst[23] < 0) {
                  long long v116 = *(unsigned char **)__dst;
                }
                goto LABEL_224;
              }
            }
            memmove(v122, v121, v120);
            goto LABEL_222;
          }
          llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned((llvm::dwarf::CFIProgram::Instruction *)v5, (const llvm::dwarf::CFIProgram *)v8, 0, (uint64_t)v165);
          if (v165[8]) {
            goto LABEL_176;
          }
          unsigned int v20 = *(_DWORD *)v165;
          uint64_t v21 = *v151;
          if (!*v151) {
            goto LABEL_21;
          }
          long long v22 = v151;
          do
          {
            unsigned int v23 = *(_DWORD *)(v21 + 32);
            BOOL v24 = v23 >= *(_DWORD *)v165;
            if (v23 >= *(_DWORD *)v165) {
              long long v25 = (uint64_t *)v21;
            }
            else {
              long long v25 = (uint64_t *)(v21 + 8);
            }
            if (v24) {
              long long v22 = (void *)v21;
            }
            uint64_t v21 = *v25;
          }
          while (*v25);
          if (v22 == v151 || *((_DWORD *)v22 + 8) > *(_DWORD *)v165)
          {
LABEL_21:
            sub_1CC68FAFC(v11, *(unsigned int *)v165);
            goto LABEL_172;
          }
          char v76 = *((unsigned char *)v22 + 40);
          long long v77 = *(_OWORD *)((char *)v22 + 57);
          long long v78 = *(_OWORD *)((char *)v22 + 89);
          *(_OWORD *)uint64_t v161 = *(_OWORD *)((char *)v22 + 73);
          *(_OWORD *)&v161[16] = v78;
          *(void *)&v161[31] = v22[13];
          *(_OWORD *)&__dst[9] = *(_OWORD *)((char *)v22 + 41);
          *(_OWORD *)&__dst[25] = v77;
          sub_1CC68FAFC(v11, *(unsigned int *)v165);
          *(_DWORD *)long long __dst = v20;
          __dst[8] = v76;
        }
LABEL_91:
        unint64_t v60 = (uint64_t *)v11;
        unsigned int v61 = v20;
LABEL_92:
        sub_1CC68FBD4(v60, v61, (uint64_t)__dst);
        goto LABEL_172;
    }
  }
}

void llvm::dwarf::UnwindTable::create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 32) == *(void *)(a1 + 40))
  {
    *((void *)&v13 + 1) = 0;
    *(void *)&long long v14 = 0;
    *(unsigned char *)(a2 + 40) &= ~1u;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)&long long v13 = 0;
    long long v12 = 0uLL;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v21 = &v12;
    uint64_t v4 = (void ***)&v21;
  }
  else
  {
    BYTE8(v24) = 0;
    long long v22 = 0;
    unint64_t v23 = 0;
    uint64_t v21 = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v12) = 0;
    BYTE8(v12) = 0;
    *(void *)&long long v13 = 0xFFFFFFFF00000000;
    DWORD2(v13) = 0;
    BYTE12(v13) = 0;
    LOBYTE(v14) = 0;
    BYTE8(v14) = 0;
    BYTE8(v16) = 0;
    char v17 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = &v19;
    llvm::dwarf::UnwindTable::parseRows((llvm::dwarf::CFIProgram *)(a1 + 32), (uint64_t)&v21, (uint64_t)&v12, 0, &v11);
    uint64_t v3 = v11;
    if (v11)
    {
      *(unsigned char *)(a2 + 40) |= 1u;
      *(void *)a2 = v3;
    }
    else
    {
      long long v5 = v22;
      unint64_t v6 = v23;
      if (v20 || v13)
      {
        if ((unint64_t)v22 >= v23)
        {
          long long v5 = sub_1CC68FD50((void **)&v21, (uint64_t)&v12);
          unint64_t v6 = v23;
        }
        else
        {
          long long v7 = v13;
          *(_OWORD *)long long v22 = v12;
          *((_OWORD *)v5 + 1) = v7;
          long long v8 = v14;
          long long v9 = v15;
          long long v10 = v16;
          v5[80] = v17;
          *((_OWORD *)v5 + 3) = v9;
          *((_OWORD *)v5 + 4) = v10;
          *((_OWORD *)v5 + 2) = v8;
          sub_1CC68F760((uint64_t **)v5 + 11, &v18);
          v5 += 112;
        }
        long long v22 = v5;
      }
      *(unsigned char *)(a2 + 40) &= ~1u;
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v6;
      long long v22 = 0;
      unint64_t v23 = 0;
      uint64_t v21 = 0;
      *(_OWORD *)(a2 + 24) = v24;
    }
    sub_1CBB0D544(v19);
    *(void *)&long long v12 = &v21;
    uint64_t v4 = (void ***)&v12;
  }
  sub_1CC68F6D8(v4);
}

void llvm::dwarf::CFIProgram::parse(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *a3;
  unsigned long long v50 = *a3;
  if (v7 >= a4)
  {
    uint64_t v12 = 0;
  }
  else
  {
    while (1)
    {
      unsigned __int8 RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a2, 1, (unint64_t *)&v50, 0, (void *)&v50 + 1);
      uint64_t v12 = *((void *)&v50 + 1);
      if (*((void *)&v50 + 1)) {
        break;
      }
      unsigned __int8 v13 = RelocatedValue;
      if ((RelocatedValue & 0xC0) == 0)
      {
        switch(RelocatedValue)
        {
          case 0u:
          case 0xAu:
          case 0xBu:
          case 0x2Du:
            LOBYTE(v53) = RelocatedValue;
            unint64_t v54 = v56;
            uint64_t v55 = 0x300000000;
            LOBYTE(v58) = 0;
            LOBYTE(v60) = 0;
            unint64_t v24 = *(void *)(a1 + 8);
            if (v24 >= *(void *)(a1 + 16))
            {
              int v27 = sub_1CC68F8FC((char **)a1, (char *)&v53);
            }
            else
            {
              *(unsigned char *)unint64_t v24 = RelocatedValue;
              *(void *)(v24 + 8) = v24 + 24;
              *(void *)(v24 + 16) = 0x300000000;
              if (v55) {
                sub_1CD41C56C(v24 + 8, (uint64_t)&v54);
              }
              long long v25 = v58;
              long long v26 = v59;
              *(void *)(v24 + 80) = v60;
              *(_OWORD *)(v24 + 48) = v25;
              *(_OWORD *)(v24 + 64) = v26;
              int v27 = (char *)(v24 + 88);
            }
            *(void *)(a1 + 8) = v27;
            if (v54 != v56) {
              free(v54);
            }
            goto LABEL_18;
          case 1u:
            uint64_t v20 = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v50, 0, (void *)&v50 + 1);
            uint64_t v21 = a1;
            LOBYTE(v15) = 1;
            goto LABEL_9;
          case 2u:
            uint64_t v20 = llvm::DWARFDataExtractor::getRelocatedValue(a2, 1, (unint64_t *)&v50, 0, (void *)&v50 + 1);
            uint64_t v21 = a1;
            LOBYTE(v15) = 2;
            goto LABEL_9;
          case 3u:
            uint64_t v20 = llvm::DWARFDataExtractor::getRelocatedValue(a2, 2, (unint64_t *)&v50, 0, (void *)&v50 + 1);
            uint64_t v21 = a1;
            LOBYTE(v15) = 3;
            goto LABEL_9;
          case 4u:
            uint64_t v20 = llvm::DWARFDataExtractor::getRelocatedValue(a2, 4, (unint64_t *)&v50, 0, (void *)&v50 + 1);
            uint64_t v21 = a1;
            LOBYTE(v15) = 4;
            goto LABEL_9;
          case 5u:
          case 9u:
          case 0xCu:
          case 0x14u:
            uint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            uint64_t SLEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            goto LABEL_16;
          case 6u:
          case 7u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0x2Eu:
            uint64_t v20 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            LOBYTE(v15) = v13;
            uint64_t v21 = a1;
            goto LABEL_9;
          case 0xFu:
            uint64_t v41 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            sub_1CC68C254(a1, 15, 0);
            unint64_t v40 = (void *)a2;
            uint64_t v39 = v41;
            goto LABEL_40;
          case 0x10u:
          case 0x16u:
            uint64_t v38 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            sub_1CC68C394(a1, v13, v38, 0);
            uint64_t v39 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            unint64_t v40 = (void *)a2;
LABEL_40:
            unint64_t Bytes = llvm::DataExtractor::getBytes(v40, (unint64_t *)&v50, v39, (void *)&v50 + 1);
            BOOL v44 = *(unsigned char *)(a2 + 16) != 0;
            char v45 = *(unsigned char *)(a2 + 17);
            uint64_t v46 = *(void *)(a1 + 8);
            if (!*(unsigned char *)(v46 - 8)) {
              *(unsigned char *)(v46 - 8) = 1;
            }
            *(void *)(v46 - 40) = Bytes;
            *(void *)(v46 - 32) = v43;
            *(unsigned char *)(v46 - 24) = v44;
            *(unsigned char *)(v46 - 23) = v45;
            *(unsigned char *)(v46 - 16) = v45;
            *(_WORD *)(v46 - 15) = 0;
            goto LABEL_18;
          case 0x11u:
          case 0x12u:
          case 0x15u:
            uint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            uint64_t SLEB128 = llvm::DataExtractor::getSLEB128((void *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
LABEL_16:
            uint64_t v16 = SLEB128;
            char v18 = v13;
            uint64_t v17 = a1;
            uint64_t v19 = ULEB128;
            goto LABEL_17;
          case 0x13u:
            uint64_t v20 = llvm::DataExtractor::getSLEB128((void *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            uint64_t v21 = a1;
            LOBYTE(v15) = 19;
            goto LABEL_9;
          case 0x30u:
          case 0x31u:
            uint64_t v47 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            if (v13 == 48) {
              uint64_t v28 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            }
            else {
              uint64_t v28 = llvm::DataExtractor::getSLEB128((void *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            }
            uint64_t v48 = v28;
            uint64_t v49 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
            LOBYTE(v53) = v13;
            unint64_t v54 = v56;
            uint64_t v55 = 0x300000000;
            LOBYTE(v58) = 0;
            LOBYTE(v60) = 0;
            unint64_t v29 = *(void *)(a1 + 8);
            if (v29 >= *(void *)(a1 + 16))
            {
              int v32 = sub_1CC68F8FC((char **)a1, (char *)&v53);
            }
            else
            {
              *(unsigned char *)unint64_t v29 = v13;
              *(void *)(v29 + 8) = v29 + 24;
              *(void *)(v29 + 16) = 0x300000000;
              if (v55) {
                sub_1CD41C56C(v29 + 8, (uint64_t)&v54);
              }
              long long v30 = v58;
              long long v31 = v59;
              *(void *)(v29 + 80) = v60;
              *(_OWORD *)(v29 + 48) = v30;
              *(_OWORD *)(v29 + 64) = v31;
              int v32 = (char *)(v29 + 88);
            }
            *(void *)(a1 + 8) = v32;
            if (v54 != v56)
            {
              free(v54);
              int v32 = *(char **)(a1 + 8);
            }
            unint64_t v33 = *((unsigned int *)v32 - 18);
            if (v33 >= *((unsigned int *)v32 - 17)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*((void *)v32 - 10) + 8 * v33) = v47;
            ++*((_DWORD *)v32 - 18);
            uint64_t v34 = *(void *)(a1 + 8);
            unint64_t v35 = *(unsigned int *)(v34 - 72);
            if (v35 >= *(unsigned int *)(v34 - 68)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v34 - 80) + 8 * v35) = v48;
            ++*(_DWORD *)(v34 - 72);
            uint64_t v36 = *(void *)(a1 + 8);
            unint64_t v37 = *(unsigned int *)(v36 - 72);
            if (v37 >= *(unsigned int *)(v36 - 68)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v36 - 80) + 8 * v37) = v49;
            ++*(_DWORD *)(v36 - 72);
            goto LABEL_18;
          default:
            std::generic_category();
            memset(__p, 0, sizeof(__p));
            LODWORD(v54) = 0;
            char v57 = 0;
            *(void *)&long long v58 = 0;
            *(void *)&long long v59 = __p;
            DWORD2(v58) = 0;
            uint64_t v53 = &unk_1F2646F30;
            uint64_t v55 = 0;
            v56[0] = 0;
            v56[1] = 0;
            v52[0] = &unk_1F260ED30;
            v52[1] = "invalid extended CFI opcode 0x%hhx";
            v52[2] = v13;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v53, (uint64_t)v52);
            operator new();
        }
      }
      uint64_t v14 = RelocatedValue & 0x3F;
      int v15 = RelocatedValue & 0xC0;
      if (v15 == 128)
      {
        uint64_t v16 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)&v50, (void *)&v50 + 1);
        uint64_t v17 = a1;
        char v18 = 0x80;
        uint64_t v19 = v14;
LABEL_17:
        sub_1CC68C394(v17, v18, v19, v16);
      }
      else
      {
        uint64_t v21 = a1;
        uint64_t v20 = v14;
LABEL_9:
        sub_1CC68C254(v21, v15, v20);
      }
LABEL_18:
      uint64_t v12 = *((void *)&v50 + 1);
      unint64_t v7 = v50;
      if (v50 >= a4) {
        goto LABEL_51;
      }
    }
    unint64_t v7 = v50;
  }
LABEL_51:
  *a3 = v7;
  *a5 = v12;
}

void sub_1CC68C254(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v10[0] = a2;
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  LOBYTE(v14) = 0;
  LOBYTE(v16) = 0;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    long long v8 = sub_1CC68F8FC((char **)a1, v10);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = a2;
    *(void *)(v5 + 8) = v5 + 24;
    *(void *)(v5 + 16) = 0x300000000;
    if (v12) {
      sub_1CD41C56C(v5 + 8, (uint64_t)&v11);
    }
    long long v6 = v14;
    long long v7 = v15;
    *(void *)(v5 + 80) = v16;
    *(_OWORD *)(v5 + 48) = v6;
    *(_OWORD *)(v5 + 64) = v7;
    long long v8 = (char *)(v5 + 88);
  }
  *(void *)(a1 + 8) = v8;
  if (v11 != v13)
  {
    free(v11);
    long long v8 = *(char **)(a1 + 8);
  }
  unsigned int v9 = *((_DWORD *)v8 - 18);
  if (v9 >= *((_DWORD *)v8 - 17)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)v8 - 10) + 8 * v9) = a3;
  ++*((_DWORD *)v8 - 18);
}

void sub_1CC68C394(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v14[0] = a2;
  long long v15 = v17;
  uint64_t v16 = 0x300000000;
  LOBYTE(v18) = 0;
  LOBYTE(v20) = 0;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7 >= *(void *)(a1 + 16))
  {
    long long v10 = sub_1CC68F8FC((char **)a1, v14);
  }
  else
  {
    *(unsigned char *)unint64_t v7 = a2;
    *(void *)(v7 + 8) = v7 + 24;
    *(void *)(v7 + 16) = 0x300000000;
    if (v16) {
      sub_1CD41C56C(v7 + 8, (uint64_t)&v15);
    }
    long long v8 = v18;
    long long v9 = v19;
    *(void *)(v7 + 80) = v20;
    *(_OWORD *)(v7 + 48) = v8;
    *(_OWORD *)(v7 + 64) = v9;
    long long v10 = (char *)(v7 + 88);
  }
  *(void *)(a1 + 8) = v10;
  if (v15 != v17)
  {
    free(v15);
    long long v10 = *(char **)(a1 + 8);
  }
  unsigned int v11 = *((_DWORD *)v10 - 18);
  if (v11 >= *((_DWORD *)v10 - 17)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)v10 - 10) + 8 * v11) = a3;
  ++*((_DWORD *)v10 - 18);
  uint64_t v12 = *(void *)(a1 + 8);
  unsigned int v13 = *(_DWORD *)(v12 - 72);
  if (v13 >= *(_DWORD *)(v12 - 68)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v12 - 80) + 8 * v13) = a4;
  ++*(_DWORD *)(v12 - 72);
}

const char *llvm::dwarf::CFIProgram::callFrameString(llvm::dwarf::CFIProgram *this, int a2)
{
  return llvm::dwarf::CallFrameString(a2, *((_DWORD *)this + 10));
}

const char *llvm::dwarf::CFIProgram::operandTypeString(unsigned int a1)
{
  if (a1 > 9) {
    return "<unknown CFIProgram::OperandType>";
  }
  else {
    return off_1E6849A08[a1];
  }
}

uint64_t *llvm::dwarf::CFIProgram::Instruction::getOperandAsUnsigned@<X0>(llvm::dwarf::CFIProgram::Instruction *this@<X0>, const llvm::dwarf::CFIProgram *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v18 = a3;
  if (a3 >= 3)
  {
    uint64_t v12 = std::generic_category();
    sub_1CD5E50F0(22, (uint64_t)v12, (uint64_t)"operand index %u is not valid", &v18);
  }
  BOOL result = llvm::dwarf::CFIProgram::getOperandTypes(this);
  uint64_t v9 = *(int *)&byte_1EBCD9048[12 * *(unsigned __int8 *)this + 8 + 4 * a3];
  uint64_t v10 = *(void *)(*((void *)this + 1) + 8 * a3);
  switch(*(_DWORD *)&byte_1EBCD9048[12 * *(unsigned __int8 *)this + 8 + 4 * a3])
  {
    case 2:
    case 7:
    case 8:
      break;
    case 3:
    case 5:
    case 6:
      long long v15 = std::generic_category();
      sub_1CD5E50F0(22, (uint64_t)v15, (uint64_t)"op[%u] has OperandType OT_Offset which produces a signed result, call getOperandAsSigned instead", &v18);
    case 4:
      uint64_t v11 = *((void *)a2 + 3);
      if (!v11)
      {
        uint64_t v16 = std::generic_category();
        sub_1CD5E50F0(22, (uint64_t)v16, (uint64_t)"op[%u] has type OT_FactoredCodeOffset but code alignment is zero", &v18);
      }
      v10 *= v11;
      break;
    default:
      unsigned int v13 = std::generic_category();
      if (v9 > 9) {
        long long v14 = "<unknown CFIProgram::OperandType>";
      }
      else {
        long long v14 = off_1E6849A08[v9];
      }
      uint64_t v17 = v14;
      sub_1CD5E5228(22, (uint64_t)v13, (uint64_t)"op[%u] has type %s which has no value", (int *)&v18, (uint64_t *)&v17);
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(void *)a4 = v10;
  return result;
}

uint64_t *llvm::dwarf::CFIProgram::getOperandTypes(llvm::dwarf::CFIProgram *this)
{
  if ((byte_1EBCD9048 & 1) == 0)
  {
    byte_1EBCD9048 = 1;
    qword_1EBCD9350 = 0x100000004;
    dword_1EBCD9358 = 1;
    unk_1EBCD905C = xmmword_1CFB1B870;
    unk_1EBCD906C = xmmword_1CFB1B880;
    unk_1EBCD907C = xmmword_1CFB1B890;
    qword_1EBCD91AC = 0x100000004;
    dword_1EBCD91B4 = 1;
    qword_1EBCD9128 = 0x500000007;
    dword_1EBCD9130 = 1;
    unk_1EBCD90E0 = xmmword_1CFB1B8A0;
    xmmword_1EBCD9290 = xmmword_1CFB1B8B0;
    qword_1EBCD92A0 = 0x800000005;
    unk_1EBCD90F0 = xmmword_1CFB1B8C0;
    unk_1EBCD9134 = 0x100000005;
    dword_1EBCD913C = 1;
    unk_1EBCD9100 = xmmword_1CFB1B8D0;
    unk_1EBCD90A4 = xmmword_1CFB1B8E0;
    unk_1EBCD90B4 = 0x100000001;
    qword_1EBCD9650 = 0x600000007;
    dword_1EBCD9658 = 1;
    unk_1EBCD908C = 0x600000007;
    dword_1EBCD9094 = 1;
    qword_1EBCD9120 = 0x100000005;
    unk_1EBCD9140 = xmmword_1CFB1B8F0;
    unk_1EBCD9110 = xmmword_1CFB1B900;
    xmmword_1EBCD9150 = xmmword_1CFB1B910;
    dword_1EBCD9160 = 1;
    qword_1EBCD9950 = 0x100000007;
    dword_1EBCD9958 = 1;
    qword_1EBCD9098 = 0x100000007;
    dword_1EBCD90A0 = 1;
    unk_1EBCD90BC = xmmword_1CFB1B920;
    *(void *)&long long v1 = 0x100000001;
    *((void *)&v1 + 1) = 0x100000001;
    unk_1EBCD90CC = v1;
    dword_1EBCD90DC = 1;
    xmmword_1EBCD926C = xmmword_1CFB1B930;
    qword_1EBCD927C = 0x100000001;
    qword_1EBCD9050 = 0x100000001;
    dword_1EBCD9058 = 1;
  }
  return &qword_1EBCD9050;
}

uint64_t *llvm::dwarf::CFIProgram::Instruction::getOperandAsSigned@<X0>(llvm::dwarf::CFIProgram::Instruction *this@<X0>, const llvm::dwarf::CFIProgram *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v21 = a3;
  if (a3 >= 3)
  {
    long long v14 = std::generic_category();
    sub_1CD5E50F0(22, (uint64_t)v14, (uint64_t)"operand index %u is not valid", &v21);
  }
  BOOL result = llvm::dwarf::CFIProgram::getOperandTypes(this);
  uint64_t v9 = *(int *)&byte_1EBCD9048[12 * *(unsigned __int8 *)this + 8 + 4 * a3];
  uint64_t v10 = *(void *)(*((void *)this + 1) + 8 * a3);
  switch(*(_DWORD *)&byte_1EBCD9048[12 * *(unsigned __int8 *)this + 8 + 4 * a3])
  {
    case 2:
    case 7:
    case 8:
      uint64_t v17 = std::generic_category();
      if ((v9 - 2) > 6) {
        unsigned int v18 = "<unknown CFIProgram::OperandType>";
      }
      else {
        unsigned int v18 = off_1E6849A58[(int)v9 - 2];
      }
      uint64_t v20 = v18;
      sub_1CD5E5228(22, (uint64_t)v17, (uint64_t)"op[%u] has OperandType %s which produces an unsigned result, call getOperandAsUnsigned instead", (int *)&v21, (uint64_t *)&v20);
    case 3:
      goto LABEL_11;
    case 4:
    case 5:
      uint64_t v11 = *((void *)a2 + 4);
      if (!v11)
      {
        uint64_t v12 = std::generic_category();
        unsigned int v13 = "<unknown CFIProgram::OperandType>";
        if (v9 == 4) {
          unsigned int v13 = "OT_FactoredCodeOffset";
        }
        if (v9 == 5) {
          unsigned int v13 = "OT_SignedFactDataOffset";
        }
        uint64_t v20 = v13;
        sub_1CD5E5228(22, (uint64_t)v12, (uint64_t)"op[%u] has type %s but data alignment is zero", (int *)&v21, (uint64_t *)&v20);
      }
      goto LABEL_10;
    case 6:
      uint64_t v11 = *((void *)a2 + 4);
      if (!v11)
      {
        long long v19 = std::generic_category();
        sub_1CD5E50F0(22, (uint64_t)v19, (uint64_t)"op[%u] has type OT_UnsignedFactDataOffset but data alignment is zero", &v21);
      }
LABEL_10:
      v10 *= v11;
LABEL_11:
      *(unsigned char *)(a4 + 8) &= ~1u;
      *(void *)a4 = v10;
      return result;
    default:
      long long v15 = std::generic_category();
      if (v9 > 9) {
        uint64_t v16 = "<unknown CFIProgram::OperandType>";
      }
      else {
        uint64_t v16 = off_1E6849A08[v9];
      }
      uint64_t v20 = v16;
      sub_1CD5E5228(22, (uint64_t)v15, (uint64_t)"op[%u] has type %s which has no value", (int *)&v21, (uint64_t *)&v20);
  }
}

void sub_1CC68CB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  memset(__p, 0, sizeof(__p));
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = __p;
  int v16 = 0;
  uint64_t v9 = &unk_1F2646F30;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = *a4;
  uint64_t v7 = *a5;
  uint64_t v8 = *a6;
  v19[0] = &unk_1F2618E48;
  v19[1] = a3;
  v19[2] = v6;
  void v19[3] = v7;
  v19[4] = v8;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v19);
  operator new();
}

llvm::raw_ostream *llvm::dwarf::CFIProgram::printOperand(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, llvm::MCRegisterInfo *a4, int a5, unsigned __int8 *a6, int a7, uint64_t a8)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *a6;
  BOOL result = (llvm::raw_ostream *)llvm::dwarf::CFIProgram::getOperandTypes((llvm::dwarf::CFIProgram *)a1);
  switch(*(_DWORD *)&byte_1EBCD9048[12 * v16 + 8 + 4 * a7])
  {
    case 0:
      unsigned int v18 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v18 > 0xCuLL)
      {
        qmemcpy(v18, " Unsupported ", 13);
        long long v19 = (void *)(*((void *)a2 + 4) + 13);
        *((void *)a2 + 4) = v19;
      }
      else
      {
        llvm::raw_ostream::write(a2, " Unsupported ", 0xDuLL);
        long long v19 = (void *)*((void *)a2 + 4);
      }
      if (a7) {
        uint64_t v20 = "second";
      }
      else {
        uint64_t v20 = "first";
      }
      if (a7) {
        size_t v21 = 6;
      }
      else {
        size_t v21 = 5;
      }
      if (v21 <= *((void *)a2 + 3) - (void)v19)
      {
        memcpy(v19, v20, v21);
        size_t v22 = *((void *)a2 + 4) + v21;
        *((void *)a2 + 4) = v22;
      }
      else
      {
        llvm::raw_ostream::write(a2, v20, v21);
        size_t v22 = *((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - v22 > 0xA)
      {
        *(_DWORD *)(v22 + 7) = 1869881444;
        *(void *)size_t v22 = *(void *)" operand to";
        *((void *)a2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a2, " operand to", 0xBuLL);
      }
      unint64_t v23 = llvm::dwarf::CallFrameString(v16, *(_DWORD *)(a1 + 40));
      if (!v24)
      {
        unint64_t v37 = &unk_1F260ED30;
        uint64_t v38 = " Opcode %x";
        uint64_t v39 = v16;
        return llvm::raw_ostream::operator<<(a2, (uint64_t)&v37);
      }
      long long v25 = v23;
      size_t v26 = v24;
      int v27 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v27)
      {
        llvm::raw_ostream::write(a2, " ", 1uLL);
        uint64_t v28 = (void *)*((void *)a2 + 4);
      }
      else
      {
        *int v27 = 32;
        uint64_t v28 = (void *)(*((void *)a2 + 4) + 1);
        *((void *)a2 + 4) = v28;
      }
      if (v26 <= *((void *)a2 + 3) - (void)v28)
      {
        BOOL result = (llvm::raw_ostream *)memcpy(v28, v25, v26);
        *((void *)a2 + 4) += v26;
      }
      else
      {
        return llvm::raw_ostream::write(a2, v25, v26);
      }
      return result;
    case 2:
      unint64_t v29 = &unk_1F25FF808;
      long long v30 = " %llx";
      goto LABEL_41;
    case 3:
      unint64_t v29 = &unk_1F2618EA8;
      long long v30 = " %+lld";
      goto LABEL_41;
    case 4:
      uint64_t v31 = *(void *)(a1 + 24);
      if (v31) {
        goto LABEL_28;
      }
      unint64_t v29 = &unk_1F25FF808;
      long long v30 = " %lld*code_alignment_factor";
      goto LABEL_41;
    case 5:
      uint64_t v32 = *(void *)(a1 + 32);
      if (v32)
      {
        uint64_t v33 = v32 * a8;
        uint64_t v34 = &unk_1F2618EA8;
        goto LABEL_29;
      }
      unint64_t v29 = &unk_1F2618EA8;
      goto LABEL_40;
    case 6:
      uint64_t v31 = *(void *)(a1 + 32);
      if (v31)
      {
LABEL_28:
        uint64_t v33 = v31 * a8;
        uint64_t v34 = &unk_1F25FF808;
LABEL_29:
        unint64_t v37 = v34;
        uint64_t v38 = " %lld";
        uint64_t v39 = v33;
      }
      else
      {
        unint64_t v29 = &unk_1F25FF808;
LABEL_40:
        long long v30 = " %lld*data_alignment_factor";
LABEL_41:
        unint64_t v37 = v29;
        uint64_t v38 = v30;
        uint64_t v39 = a8;
      }
      return llvm::raw_ostream::operator<<(a2, (uint64_t)&v37);
    case 7:
      unint64_t v35 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v35 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((void *)a2 + 4) = v35 + 1;
        *unint64_t v35 = 32;
      }
      return sub_1CC689C28(a2, a4, a5, a8);
    case 8:
      unint64_t v29 = &unk_1F25FF808;
      long long v30 = " in addrspace%lld";
      goto LABEL_41;
    case 9:
      uint64_t v36 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v36)
      {
        llvm::raw_ostream::write(a2, " ", 1uLL);
      }
      else
      {
        unsigned char *v36 = 32;
        ++*((void *)a2 + 4);
      }
      *(_OWORD *)unint64_t v40 = *(_OWORD *)a3;
      *(void *)&v40[14] = *(void *)(a3 + 14);
      sub_1CC66D518((uint64_t)&v41, a3 + 24);
      sub_1CC66D518((uint64_t)v42, a3 + 56);
      llvm::DWARFExpression::print((uint64_t)(a6 + 48), a2, (uint64_t)v40, a4, 0, a5);
      return (llvm::raw_ostream *)sub_1CD5E15A8(v40);
    default:
      return result;
  }
}

unsigned __int8 **llvm::dwarf::CFIProgram::dump(unsigned __int8 **result, unsigned __int8 ***this, uint64_t a3, llvm::MCRegisterInfo *a4, int a5, int a6)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *result;
  uint64_t v20 = result[1];
  if (*result != v20)
  {
    uint64_t v10 = (uint64_t)result;
    int v19 = 2 * a6;
    uint64_t v11 = a3 + 24;
    uint64_t v12 = a3 + 56;
    do
    {
      int v13 = *v6;
      llvm::raw_ostream::indent((llvm::raw_ostream *)this, v19);
      uint64_t v15 = llvm::dwarf::CallFrameString(v13, *(_DWORD *)(v10 + 40));
      size_t v16 = v14;
      BOOL result = this[4];
      if (v14 <= (char *)this[3] - (char *)result)
      {
        if (v14)
        {
          memcpy(result, v15, v14);
          BOOL result = (unsigned __int8 **)((char *)this[4] + v16);
          this[4] = result;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, v15, v14);
        BOOL result = this[4];
      }
      if (this[3] == result)
      {
        BOOL result = (unsigned __int8 **)llvm::raw_ostream::write((llvm::raw_ostream *)this, ":", 1uLL);
      }
      else
      {
        *(unsigned char *)BOOL result = 58;
        this[4] = (unsigned __int8 **)((char *)this[4] + 1);
      }
      if (*((_DWORD *)v6 + 4))
      {
        unint64_t v17 = 0;
        do
        {
          *(_OWORD *)size_t v22 = *(_OWORD *)a3;
          *(void *)&v22[14] = *(void *)(a3 + 14);
          sub_1CC66D518((uint64_t)&v23, v11);
          sub_1CC66D518((uint64_t)v24, v12);
          llvm::dwarf::CFIProgram::printOperand(v10, (llvm::raw_ostream *)this, (uint64_t)v22, a4, a5, v6, v17, *(void *)(*((void *)v6 + 1) + 8 * v17));
          BOOL result = (unsigned __int8 **)sub_1CD5E15A8(v22);
          ++v17;
        }
        while (v17 < *((unsigned int *)v6 + 4));
      }
      unsigned int v18 = this[4];
      if (v18 >= (unsigned char *)this[3])
      {
        BOOL result = (unsigned __int8 **)llvm::raw_ostream::write((llvm::raw_ostream *)this, 10);
      }
      else
      {
        this[4] = (unsigned __int8 **)(v18 + 1);
        *unsigned int v18 = 10;
      }
      v6 += 88;
    }
    while (v6 != v20);
  }
  return result;
}

void llvm::dwarf::CIE::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, llvm::MCRegisterInfo *a4, int a5)
{
  v70[5] = *MEMORY[0x1E4F143B8];
  if (a5 && !*(void *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F25FF808;
    long long v64 = "%08llx";
    uint64_t v65 = v10;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v63);
    uint64_t v11 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v11) <= 0x10)
    {
      uint64_t v12 = " ZERO terminator\n";
      int v13 = a2;
      size_t v14 = 17;
LABEL_5:
      llvm::raw_ostream::write(v13, v12, v14);
      return;
    }
    *(unsigned char *)(v11 + 16) = 10;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)" ZERO terminator\n";
    uint64_t v56 = *((void *)a2 + 4) + 17;
    goto LABEL_70;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  v62[0] = &unk_1F25FF808;
  v62[1] = "%08llx";
  _OWORD v62[2] = v15;
  size_t v16 = llvm::raw_ostream::operator<<(a2, (uint64_t)v62);
  BOOL v17 = *(unsigned char *)(a1 + 12) == 0;
  uint64_t v18 = *(void *)(a1 + 24);
  long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F2618A68;
  long long v64 = " %0*llx";
  if (v17) {
    int v19 = 8;
  }
  else {
    int v19 = 16;
  }
  LODWORD(v65) = v19;
  uint64_t v66 = v18;
  uint64_t v20 = llvm::raw_ostream::operator<<(v16, (uint64_t)&v63);
  if (*(unsigned char *)(a1 + 12)) {
    int v21 = a5;
  }
  else {
    int v21 = 1;
  }
  uint64_t v22 = 0xFFFFFFFFLL;
  if (*(unsigned char *)(a1 + 12)) {
    uint64_t v22 = -1;
  }
  if (v21) {
    int v23 = 8;
  }
  else {
    int v23 = 16;
  }
  uint64_t v58 = (uint64_t)&unk_1F2618A68;
  long long v59 = " %0*llx";
  if (a5) {
    uint64_t v22 = 0;
  }
  int v60 = v23;
  uint64_t v61 = v22;
  llvm::raw_ostream::operator<<(v20, (uint64_t)&v58);
  uint64_t v24 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v24) > 4)
  {
    *(unsigned char *)(v24 + 4) = 10;
    *(_DWORD *)uint64_t v24 = 1162429216;
    long long v25 = (void *)(*((void *)a2 + 4) + 5);
    *((void *)a2 + 4) = v25;
  }
  else
  {
    llvm::raw_ostream::write(a2, " CIE\n", 5uLL);
    long long v25 = (void *)*((void *)a2 + 4);
  }
  if (*((void *)a2 + 3) - (void)v25 > 0x18uLL)
  {
    qmemcpy(v25, "  Format:                ", 25);
    size_t v26 = (_DWORD *)(*((void *)a2 + 4) + 25);
    *((void *)a2 + 4) = v26;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  Format:                ", 0x19uLL);
    size_t v26 = (_DWORD *)*((void *)a2 + 4);
  }
  if (*(unsigned char *)(a1 + 12)) {
    int v27 = "DWARF64";
  }
  else {
    int v27 = "DWARF32";
  }
  if (*((void *)a2 + 3) - (void)v26 > 6uLL)
  {
    *size_t v26 = *(_DWORD *)v27;
    *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)(v27 + 3);
    uint64_t v28 = (unsigned char *)(*((void *)a2 + 4) + 7);
    *((void *)a2 + 4) = v28;
  }
  else
  {
    llvm::raw_ostream::write(a2, v27, 7uLL);
    uint64_t v28 = (unsigned char *)*((void *)a2 + 4);
  }
  if (*((unsigned char **)a2 + 3) == v28)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    if (a5) {
      goto LABEL_31;
    }
  }
  else
  {
    unsigned char *v28 = 10;
    ++*((void *)a2 + 4);
    if (a5)
    {
LABEL_31:
      if (*(unsigned char *)(a1 + 80) != 1)
      {
        unint64_t v29 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v29 > 0x20uLL)
        {
          qmemcpy(v29, "WARNING: unsupported CIE version\n", 33);
          *((void *)a2 + 4) += 33;
        }
        else
        {
          llvm::raw_ostream::write(a2, "WARNING: unsupported CIE version\n", 0x21uLL);
        }
      }
    }
  }
  uint64_t v30 = *(unsigned __int8 *)(a1 + 80);
  long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F260ED30;
  long long v64 = "  Version:               %d\n";
  uint64_t v65 = v30;
  llvm::raw_ostream::operator<<(a2, (uint64_t)&v63);
  uint64_t v31 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v31 > 0x19uLL)
  {
    qmemcpy(v31, "  Augmentation:          \"", 26);
    *((void *)a2 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  Augmentation:          \"", 0x1AuLL);
  }
  llvm::raw_ostream::write(a2, *(const char **)(a1 + 88), *(void *)(a1 + 96));
  uint64_t v32 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v32 > 1uLL)
  {
    _WORD *v32 = 2594;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\"\n", 2uLL);
  }
  if (*(unsigned __int8 *)(a1 + 80) >= 4u)
  {
    uint64_t v33 = *(unsigned __int8 *)(a1 + 120);
    long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F25FED10;
    long long v64 = "  Address size:          %u\n";
    uint64_t v65 = v33;
    uint64_t v34 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v63);
    uint64_t v35 = *(unsigned __int8 *)(a1 + 121);
    long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F25FED10;
    long long v64 = "  Segment desc size:     %u\n";
    uint64_t v65 = v35;
    llvm::raw_ostream::operator<<(v34, (uint64_t)&v63);
  }
  uint64_t v36 = *(unsigned int *)(a1 + 128);
  long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F25FED10;
  long long v64 = "  Code alignment factor: %u\n";
  uint64_t v65 = v36;
  unint64_t v37 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v63);
  uint64_t v38 = *(unsigned int *)(a1 + 136);
  long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F2618E88;
  long long v64 = "  Data alignment factor: %d\n";
  uint64_t v65 = v38;
  uint64_t v39 = llvm::raw_ostream::operator<<(v37, (uint64_t)&v63);
  uint64_t v40 = *(unsigned int *)(a1 + 144);
  long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F2618E88;
  long long v64 = "  Return address column: %d\n";
  uint64_t v65 = v40;
  llvm::raw_ostream::operator<<(v39, (uint64_t)&v63);
  if (*(unsigned char *)(a1 + 200))
  {
    uint64_t v41 = *(void *)(a1 + 192);
    long long v63 = (llvm::dwarf::UnwindRow *)&unk_1F25FF808;
    long long v64 = "  Personality Address: %016llx\n";
    uint64_t v65 = v41;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v63);
  }
  unsigned int v42 = (unsigned char *)*((void *)a2 + 4);
  if (*(void *)(a1 + 160))
  {
    if (*((void *)a2 + 3) - (void)v42 > 0x17uLL)
    {
      qmemcpy(v42, "  Augmentation data:    ", 24);
      *((void *)a2 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  Augmentation data:    ", 0x18uLL);
    }
    uint64_t v43 = *(void *)(a1 + 160);
    if (v43)
    {
      BOOL v44 = *(unsigned __int8 **)(a1 + 152);
      do
      {
        unint64_t v45 = *v44;
        uint64_t v46 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v46 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 32);
        }
        else
        {
          *((void *)a2 + 4) = v46 + 1;
          *uint64_t v46 = 32;
        }
        char v47 = a0123456789abcd_6[v45 >> 4];
        uint64_t v48 = (char *)*((void *)a2 + 4);
        if ((unint64_t)v48 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, v47);
        }
        else
        {
          *((void *)a2 + 4) = v48 + 1;
          *uint64_t v48 = v47;
        }
        char v49 = a0123456789abcd_6[v45 & 0xF];
        unsigned long long v50 = (char *)*((void *)a2 + 4);
        if ((unint64_t)v50 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, v49);
        }
        else
        {
          *((void *)a2 + 4) = v50 + 1;
          *unsigned long long v50 = v49;
        }
        ++v44;
        --v43;
      }
      while (v43);
    }
    uint64_t v51 = (unsigned char *)*((void *)a2 + 4);
    if (*((unsigned char **)a2 + 3) == v51)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
      unsigned int v42 = (unsigned char *)*((void *)a2 + 4);
    }
    else
    {
      unsigned char *v51 = 10;
      unsigned int v42 = (unsigned char *)(*((void *)a2 + 4) + 1);
      *((void *)a2 + 4) = v42;
    }
  }
  if (*((unsigned char **)a2 + 3) == v42)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    unsigned char *v42 = 10;
    ++*((void *)a2 + 4);
  }
  *(_OWORD *)unint64_t v68 = *(_OWORD *)a3;
  *(void *)&v68[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)&v69, a3 + 24);
  sub_1CC66D518((uint64_t)v70, a3 + 56);
  llvm::dwarf::CFIProgram::dump((unsigned __int8 **)(a1 + 32), (unsigned __int8 ***)a2, (uint64_t)v68, a4, a5, 1);
  sub_1CD5E15A8(v68);
  BOOL v52 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v52)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *BOOL v52 = 10;
    ++*((void *)a2 + 4);
  }
  llvm::dwarf::UnwindTable::create(a1, (uint64_t)&v63);
  if (v67)
  {
    char v57 = std::generic_category();
    uint64_t v58 = 22;
    long long v59 = (const char *)v57;
    v62[0] = "decoding the CIE opcodes into rows failed";
    sub_1CD06481C();
  }
  uint64_t v53 = v63;
  unint64_t v54 = (llvm::dwarf::UnwindRow *)v64;
  while (v53 != v54)
  {
    llvm::dwarf::UnwindRow::dump(v53, a2, a4, a5, 1);
    uint64_t v53 = (llvm::dwarf::UnwindRow *)((char *)v53 + 112);
  }
  uint64_t v58 = (uint64_t)&v63;
  sub_1CC68F6D8((void ***)&v58);
  uint64_t v55 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v55)
  {
    uint64_t v12 = "\n";
    int v13 = a2;
    size_t v14 = 1;
    goto LABEL_5;
  }
  unsigned char *v55 = 10;
  uint64_t v56 = *((void *)a2 + 4) + 1;
LABEL_70:
  *((void *)a2 + 4) = v56;
}

void llvm::dwarf::FDE::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, llvm::MCRegisterInfo *a4, int a5)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 16);
  v39[0] = &unk_1F25FF808;
  v39[1] = "%08llx";
  v39[2] = v10;
  uint64_t v11 = llvm::raw_ostream::operator<<(a2, (uint64_t)v39);
  BOOL v12 = *(unsigned char *)(a1 + 12) == 0;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v40 = (llvm::dwarf::UnwindRow *)&unk_1F2618A68;
  uint64_t v41 = " %0*llx";
  if (v12) {
    int v14 = 8;
  }
  else {
    int v14 = 16;
  }
  LODWORD(v42) = v14;
  uint64_t v43 = v13;
  uint64_t v15 = llvm::raw_ostream::operator<<(v11, (uint64_t)&v40);
  if (*(unsigned char *)(a1 + 12)) {
    int v16 = a5;
  }
  else {
    int v16 = 1;
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (v16) {
    int v18 = 8;
  }
  else {
    int v18 = 16;
  }
  uint64_t v35 = (uint64_t)&unk_1F2618A68;
  uint64_t v36 = " %0*llx";
  int v37 = v18;
  uint64_t v38 = v17;
  llvm::raw_ostream::operator<<(v15, (uint64_t)&v35);
  uint64_t v19 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v19) > 8)
  {
    *(unsigned char *)(v19 + 8) = 61;
    *(void *)uint64_t v19 = *(void *)" FDE cie=";
    *((void *)a2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a2, " FDE cie=", 9uLL);
  }
  uint64_t v20 = *(void *)(a1 + 104);
  if (v20)
  {
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v40 = (llvm::dwarf::UnwindRow *)&unk_1F25FF808;
    uint64_t v41 = "%08llx";
    uint64_t v42 = v22;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v40);
  }
  else
  {
    int v21 = (_OWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v21 > 0xFuLL)
    {
      _OWORD *v21 = *(_OWORD *)"<invalid offset>";
      *((void *)a2 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<invalid offset>", 0x10uLL);
    }
  }
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 96) + v23;
  uint64_t v40 = (llvm::dwarf::UnwindRow *)&unk_1F2618D30;
  uint64_t v41 = " pc=%08llx...%08llx\n";
  uint64_t v42 = v23;
  uint64_t v43 = v24;
  llvm::raw_ostream::operator<<(a2, (uint64_t)&v40);
  long long v25 = (_OWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v25 > 0xFuLL)
  {
    *long long v25 = *(_OWORD *)"  Format:       ";
    size_t v26 = (_DWORD *)(*((void *)a2 + 4) + 16);
    *((void *)a2 + 4) = v26;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  Format:       ", 0x10uLL);
    size_t v26 = (_DWORD *)*((void *)a2 + 4);
  }
  if (*(unsigned char *)(a1 + 12)) {
    int v27 = "DWARF64";
  }
  else {
    int v27 = "DWARF32";
  }
  if (*((void *)a2 + 3) - (void)v26 > 6uLL)
  {
    *size_t v26 = *(_DWORD *)v27;
    *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)(v27 + 3);
    uint64_t v28 = (unsigned char *)(*((void *)a2 + 4) + 7);
    *((void *)a2 + 4) = v28;
  }
  else
  {
    llvm::raw_ostream::write(a2, v27, 7uLL);
    uint64_t v28 = (unsigned char *)*((void *)a2 + 4);
  }
  if (*((unsigned char **)a2 + 3) == v28)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    unsigned char *v28 = 10;
    ++*((void *)a2 + 4);
  }
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v29 = *(void *)(a1 + 112);
    uint64_t v40 = (llvm::dwarf::UnwindRow *)&unk_1F25FF808;
    uint64_t v41 = "  LSDA Address: %016llx\n";
    uint64_t v42 = v29;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v40);
  }
  *(_OWORD *)unint64_t v45 = *(_OWORD *)a3;
  *(void *)&v45[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)&v46, a3 + 24);
  sub_1CC66D518((uint64_t)v47, a3 + 56);
  llvm::dwarf::CFIProgram::dump((unsigned __int8 **)(a1 + 32), (unsigned __int8 ***)a2, (uint64_t)v45, a4, a5, 1);
  sub_1CD5E15A8(v45);
  uint64_t v30 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v30)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *uint64_t v30 = 10;
    ++*((void *)a2 + 4);
  }
  llvm::dwarf::UnwindTable::create((void *)a1, (uint64_t)&v40);
  if (v44)
  {
    uint64_t v34 = std::generic_category();
    uint64_t v35 = 22;
    uint64_t v36 = (const char *)v34;
    v39[0] = "decoding the FDE opcodes into rows failed";
    sub_1CD06481C();
  }
  uint64_t v31 = v40;
  uint64_t v32 = (llvm::dwarf::UnwindRow *)v41;
  while (v31 != v32)
  {
    llvm::dwarf::UnwindRow::dump(v31, a2, a4, a5, 1);
    uint64_t v31 = (llvm::dwarf::UnwindRow *)((char *)v31 + 112);
  }
  uint64_t v35 = (uint64_t)&v40;
  sub_1CC68F6D8((void ***)&v35);
  uint64_t v33 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v33)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    unsigned char *v33 = 10;
    ++*((void *)a2 + 4);
  }
}

uint64_t llvm::DWARFDebugFrame::DWARFDebugFrame(uint64_t result, int a2, char a3, uint64_t a4)
{
  *(_DWORD *)BOOL result = a2;
  *(unsigned char *)(result + 4) = a3;
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

{
  *(_DWORD *)BOOL result = a2;
  *(unsigned char *)(result + 4) = a3;
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void llvm::DWARFDebugFrame::~DWARFDebugFrame(llvm::DWARFDebugFrame *this)
{
  long long v1 = (void **)((char *)this + 16);
  sub_1CC68FFA4(&v1);
}

{
  void **v1;

  long long v1 = (void **)((char *)this + 16);
  sub_1CC68FFA4(&v1);
}

uint64_t llvm::DWARFDebugFrame::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  v62[9] = *MEMORY[0x1E4F143B8];
  v56[0] = 0;
  v54[0] = 0;
  v54[1] = 0;
  int v55 = 0;
  if (*(void *)(a2 + 8))
  {
    unint64_t v53 = v56[0];
    unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, v56, 0);
    uint64_t v8 = v7;
    if (!InitialLength)
    {
      uint64_t v61 = 0;
      uint64_t v58 = 0;
      long long v59 = &v61;
      long long v60 = xmmword_1CD96EEC0;
      v56[1] = (unint64_t)&v58;
      long long v57 = xmmword_1CD96EEC0;
      operator new();
    }
    unint64_t v9 = v56[0];
    long long v59 = 0;
    if (v7 == 1)
    {
      if (*(unsigned char *)(a1 + 4)) {
        int v10 = 4;
      }
      else {
        int v10 = 8;
      }
    }
    else
    {
      int v10 = 4;
    }
    unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a2, v10, v56, 0, &v59);
    if (!v59)
    {
      uint64_t v12 = 0xFFFFFFFFLL;
      if (v8 == 1) {
        uint64_t v12 = -1;
      }
      if (*(unsigned char *)(a1 + 4)) {
        uint64_t v12 = 0;
      }
      if (RelocatedValue == v12)
      {
        unint64_t v21 = v56[0];
        if (llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0))
        {
          unsigned int v22 = *(unsigned __int8 *)(*(void *)a2 + v21);
          ++v56[0];
        }
        else
        {
          unsigned int v22 = 0;
        }
        CStrRef = (const char *)llvm::DataExtractor::getCStrRef((uint64_t *)a2, v56, 0);
        if (!CStrRef) {
          CStrRef = "";
        }
        __src = CStrRef;
        int v24 = strlen(CStrRef);
        int v25 = v24;
        unsigned int v50 = v22;
        if (v22 > 3)
        {
          int v28 = v24;
          unint64_t v29 = v56[0];
          BOOL v30 = llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0);
          unint64_t v31 = v56[0];
          if (v30)
          {
            char v32 = *(unsigned char *)(*(void *)a2 + v29);
            unint64_t v31 = ++v56[0];
          }
          else
          {
            char v32 = 0;
          }
          *(unsigned char *)(a2 + 17) = v32;
          int v25 = v28;
          if (llvm::DataExtractor::prepareRead(a2, v31, 1, 0)) {
            ++v56[0];
          }
          unsigned int v22 = v50;
        }
        llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)v56, 0);
        llvm::DataExtractor::getSLEB128((void *)a2, (uint64_t *)v56, 0);
        if (v22 == 1)
        {
          if (llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0)) {
            ++v56[0];
          }
        }
        else
        {
          llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)v56, 0);
        }
        if (!*(unsigned char *)(a1 + 4)) {
          goto LABEL_74;
        }
        char v51 = 0;
        if (!v25) {
          goto LABEL_74;
        }
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = 0;
        while (2)
        {
          while (1)
          {
            int v36 = __src[v33];
            if (v36 != 122) {
              break;
            }
            if (v33)
            {
              uint64_t v38 = "'z' must be the first character at 0x%llx";
              goto LABEL_79;
            }
            uint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)v56, 0);
            unint64_t v34 = v56[0] + ULEB128;
            uint64_t v33 = 1;
            int v35 = 1;
            if (v25 == 1)
            {
              unint64_t v47 = v56[0];
              goto LABEL_73;
            }
          }
          uint64_t v38 = "unknown augmentation character in entry at 0x%llx";
          switch(__src[v33])
          {
            case 'L':
              if (llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0)) {
                goto LABEL_65;
              }
              goto LABEL_66;
            case 'M':
            case 'N':
            case 'O':
            case 'Q':
              goto LABEL_79;
            case 'P':
              if (v51)
              {
                uint64_t v38 = "duplicate personality in entry at 0x%llx";
                goto LABEL_79;
              }
              unint64_t v39 = v56[0];
              BOOL v40 = llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0);
              unint64_t v41 = v56[0];
              if (v40)
              {
                unsigned int v42 = *(unsigned __int8 *)(*(void *)a2 + v39);
                unint64_t v41 = ++v56[0];
              }
              else
              {
                unsigned int v42 = 0;
              }
              uint64_t v43 = *(void *)(a1 + 8);
              uint64_t v44 = v41 + v43;
              if (v43) {
                uint64_t v45 = v44;
              }
              else {
                uint64_t v45 = 0;
              }
              llvm::DWARFDataExtractor::getEncodedPointer((llvm::DWARFDataExtractor *)a2, v56, v42, v45);
              char v51 = v46;
LABEL_66:
              if (++v33 != v25) {
                continue;
              }
              if (!v35) {
                goto LABEL_74;
              }
              unint64_t v47 = v56[0];
LABEL_73:
              if (v47 == v34) {
LABEL_74:
              }
                operator new();
              uint64_t v38 = "parsing augmentation data at 0x%llx failed";
LABEL_79:
              uint64_t v48 = v38;
              size_t v26 = std::generic_category();
              int v27 = v48;
              break;
            case 'R':
              if (llvm::DataExtractor::prepareRead(a2, v56[0], 1, 0)) {
LABEL_65:
              }
                ++v56[0];
              goto LABEL_66;
            case 'S':
              goto LABEL_66;
            default:
              if (v36 != 66) {
                goto LABEL_79;
              }
              goto LABEL_66;
          }
          break;
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 4)) {
          uint64_t v13 = v9 - RelocatedValue;
        }
        else {
          uint64_t v13 = RelocatedValue;
        }
        v62[0] = v13;
        int v14 = sub_1CC69021C((uint64_t)v54, v62, 0);
        *int v14 = v13;
        v14[1] = 0;
        uint64_t v15 = v14[1];
        if (!*(unsigned char *)(a1 + 4))
        {
          llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), v56, 0, 0);
          llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), v56, 0, 0);
          goto LABEL_26;
        }
        if (v15)
        {
          llvm::DWARFDataExtractor::getEncodedPointer((llvm::DWARFDataExtractor *)a2, v56, *(unsigned __int8 *)(v15 + 184), v56[0] + *(void *)(a1 + 8));
          llvm::DWARFDataExtractor::getEncodedPointer((llvm::DWARFDataExtractor *)a2, v56, *(unsigned __int8 *)(v15 + 184), 0);
          if (!*(void *)(v15 + 96)) {
            goto LABEL_26;
          }
          uint64_t v16 = llvm::DataExtractor::getULEB128((uint64_t *)a2, (uint64_t *)v56, 0);
          unint64_t v17 = v56[0];
          unint64_t v18 = v56[0];
          if (*(_DWORD *)(v15 + 188) != 255)
          {
            uint64_t v19 = *(void *)(a1 + 8);
            if (v19) {
              uint64_t v20 = v19 + v56[0];
            }
            else {
              uint64_t v20 = 0;
            }
            llvm::DWARFDataExtractor::getEncodedPointer((llvm::DWARFDataExtractor *)a2, v56, *(_DWORD *)(v15 + 188), v20);
            unint64_t v18 = v56[0];
          }
          if (v18 == v17 + v16) {
LABEL_26:
          }
            operator new();
          size_t v26 = std::generic_category();
          int v27 = "parsing augmentation data at 0x%llx failed";
        }
        else
        {
          size_t v26 = std::generic_category();
          int v27 = "parsing FDE data at 0x%llx failed due to missing CIE";
        }
      }
      sub_1CD5E3FE8(22, (uint64_t)v26, (uint64_t)v27, (uint64_t *)&v53);
    }
    *a3 = v59;
  }
  else
  {
    *a3 = 0;
  }
  return MEMORY[0x1D25D9CD0](v54[0], 8);
}

uint64_t llvm::DWARFDebugFrame::getEntryAtOffset(llvm::DWARFDebugFrame *this, unint64_t a2)
{
  int v2 = (uint64_t *)*((void *)this + 2);
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3 != v2)
  {
    unint64_t v4 = v3 - v2;
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &v2[v4 >> 1];
      uint64_t v8 = *v6;
      unsigned __int8 v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (*(void *)(v8 + 16) < a2) {
        int v2 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v2 == v3) {
    return 0;
  }
  uint64_t v9 = *v2;
  if (*(void *)(v9 + 16) == a2) {
    return v9;
  }
  else {
    return 0;
  }
}

void *llvm::DWARFDebugFrame::dump(void *result, llvm::raw_ostream *this, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v9 = (uint64_t)result;
  v27[5] = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    int v10 = (void *)result[2];
    uint64_t v11 = (void *)result[3];
    if (v11 != v10)
    {
      unint64_t v12 = v11 - v10;
      do
      {
        unint64_t v13 = v12 >> 1;
        int v14 = &v10[v12 >> 1];
        uint64_t v16 = *v14;
        uint64_t v15 = v14 + 1;
        v12 += ~(v12 >> 1);
        if (*(void *)(v16 + 16) < a5) {
          int v10 = v15;
        }
        else {
          unint64_t v12 = v13;
        }
      }
      while (v12);
    }
    if (v10 != v11)
    {
      uint64_t v17 = *v10;
      if (*(void *)(*v10 + 16) == a5)
      {
        *(_OWORD *)int v25 = *(_OWORD *)a3;
        *(void *)&v25[14] = *(void *)(a3 + 14);
        sub_1CC66D518((uint64_t)&v26, a3 + 24);
        sub_1CC66D518((uint64_t)v27, a3 + 56);
        (*(void (**)(uint64_t, llvm::raw_ostream *, unsigned char *, uint64_t, void))(*(void *)v17 + 16))(v17, this, v25, a4, *(unsigned __int8 *)(v9 + 4));
        return sub_1CD5E15A8(v25);
      }
    }
  }
  else
  {
    unint64_t v18 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v18)
    {
      BOOL result = llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *unint64_t v18 = 10;
      ++*((void *)this + 4);
    }
    uint64_t v20 = *(uint64_t **)(v9 + 16);
    for (unsigned int i = *(uint64_t **)(v9 + 24); v20 != i; result = sub_1CD5E15A8(v22))
    {
      uint64_t v21 = *v20++;
      *(_OWORD *)unsigned int v22 = *(_OWORD *)a3;
      *(void *)&v22[14] = *(void *)(a3 + 14);
      sub_1CC66D518((uint64_t)&v23, a3 + 24);
      sub_1CC66D518((uint64_t)&v24, a3 + 56);
      (*(void (**)(uint64_t, llvm::raw_ostream *, unsigned char *, uint64_t, void))(*(void *)v21 + 16))(v21, this, v22, a4, *(unsigned __int8 *)(v9 + 4));
    }
  }
  return result;
}

uint64_t sub_1CC68F4B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2618DB0;
  int v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 176)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 112)) {
    free(v3);
  }
  *(void *)a1 = &unk_1F2618E00;
  unint64_t v5 = (void **)(a1 + 32);
  sub_1CC68FCC0(&v5);
  return a1;
}

void sub_1CC68F54C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2618DB0;
  int v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 176)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 112)) {
    free(v3);
  }
  *(void *)a1 = &unk_1F2618E00;
  unint64_t v4 = (void **)(a1 + 32);
  sub_1CC68FCC0(&v4);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC68F608(uint64_t a1)
{
  *(void *)a1 = &unk_1F2618E00;
  uint64_t v3 = (void **)(a1 + 32);
  sub_1CC68FCC0(&v3);
  return a1;
}

void sub_1CC68F660(uint64_t a1)
{
  *(void *)a1 = &unk_1F2618E00;
  long long v1 = (void **)(a1 + 32);
  sub_1CC68FCC0(&v1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC68F6D8(void ***a1)
{
  long long v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 112;
        sub_1CBB0D544(*((void **)v4 - 2));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_1CC68F760(uint64_t **a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  unint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unsigned int v6 = *((_DWORD *)v5 + 8);
      unsigned __int8 v7 = a1[1];
      uint64_t v8 = v3;
      if (*a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = a1[1];
      int v10 = v3;
      if (v7)
      {
        do
        {
          uint64_t v8 = v9;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          int v10 = v8;
        }
        while (v11);
      }
      if (*((_DWORD *)v8 + 8) < v6)
      {
LABEL_8:
        if (v7) {
          unint64_t v12 = (uint64_t **)v8;
        }
        else {
          unint64_t v12 = (uint64_t **)v3;
        }
        if (v7) {
          unint64_t v13 = (uint64_t **)(v8 + 1);
        }
        else {
          unint64_t v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v13 = (uint64_t **)v3;
        unint64_t v12 = (uint64_t **)v3;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v12 = (uint64_t **)v7;
              unsigned int v14 = *((_DWORD *)v7 + 8);
              if (v14 <= v6) {
                break;
              }
              unsigned __int8 v7 = *v12;
              unint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_23;
              }
            }
            if (v14 >= v6) {
              goto LABEL_27;
            }
            unsigned __int8 v7 = v12[1];
            if (!v7)
            {
              unint64_t v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v15 = operator new(0x70uLL);
      _OWORD v15[2] = *((_OWORD *)v5 + 2);
      long long v16 = *((_OWORD *)v5 + 3);
      long long v17 = *((_OWORD *)v5 + 4);
      long long v18 = *((_OWORD *)v5 + 6);
      v15[5] = *((_OWORD *)v5 + 5);
      v15[6] = v18;
      void v15[3] = v16;
      v15[4] = v17;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v12;
      *unint64_t v13 = (uint64_t *)v15;
      uint64_t v19 = (uint64_t *)**a1;
      if (v19)
      {
        *a1 = v19;
        uint64_t v20 = *v13;
      }
      else
      {
        uint64_t v20 = (uint64_t *)v15;
      }
      sub_1CB8358B8(a1[1], v20);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      uint64_t v21 = (void *)v5[1];
      if (v21)
      {
        do
        {
          unsigned int v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned int v22 = (void *)v5[2];
          BOOL v11 = *v22 == (void)v5;
          unint64_t v5 = v22;
        }
        while (!v11);
      }
      unint64_t v5 = v22;
    }
    while (v22 != v4);
  }
  return a1;
}

char *sub_1CC68F8FC(char **a1, char *a2)
{
  int v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v3 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - v2) >> 3) > v5) {
    unint64_t v5 = 0x5D1745D1745D1746 * ((a1[2] - v2) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - v2) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v8 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(88 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  int v10 = &v9[88 * v4];
  *int v10 = *a2;
  *((void *)v10 + 1) = v10 + 24;
  *((void *)v10 + 2) = 0x300000000;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1CD41C56C((uint64_t)(v10 + 8), (uint64_t)(a2 + 8));
    int v2 = *a1;
    uint64_t v3 = a1[1];
  }
  BOOL v11 = &v9[88 * v8];
  unint64_t v12 = &v9[88 * v4];
  long long v13 = *((_OWORD *)a2 + 4);
  *((_OWORD *)v12 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)v12 + 4) = v13;
  *((void *)v12 + 10) = *((void *)a2 + 10);
  unsigned int v14 = v10 + 88;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      long long v16 = &v10[v15];
      long long v17 = &v3[v15];
      char v18 = v3[v15 - 88];
      *(void *)&v10[v15 - 80] = &v10[v15 - 64];
      uint64_t v19 = (uint64_t)&v10[v15 - 80];
      *(unsigned char *)(v19 - 8) = v18;
      *(void *)(v19 + 8) = 0x300000000;
      if (*(_DWORD *)&v3[v15 - 72]) {
        sub_1CD41C56C(v19, (uint64_t)(v17 - 80));
      }
      long long v20 = *(_OWORD *)(v17 - 40);
      long long v21 = *(_OWORD *)(v17 - 24);
      *((void *)v16 - 1) = *((void *)v17 - 1);
      *(_OWORD *)(v16 - 24) = v21;
      *(_OWORD *)(v16 - 40) = v20;
      v15 -= 88;
    }
    while (&v3[v15] != v2);
    int v2 = *a1;
    unsigned int v22 = a1[1];
    *a1 = &v10[v15];
    a1[1] = v14;
    a1[2] = v11;
    while (v22 != v2)
    {
      uint64_t v23 = (char *)*((void *)v22 - 10);
      if (v22 - 64 != v23) {
        free(v23);
      }
      v22 -= 88;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v10 + 88;
}

void sub_1CC68FAFC(uint64_t **a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    unint64_t v5 = v3;
    unsigned int v6 = v4;
    do
    {
      unsigned int v7 = *((_DWORD *)v5 + 8);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v5;
      }
      else {
        uint64_t v9 = (uint64_t **)(v5 + 1);
      }
      if (v8) {
        unsigned int v6 = v5;
      }
      unint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != v4 && *((_DWORD *)v6 + 8) <= a2)
    {
      int v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        unint64_t v12 = v6;
        do
        {
          BOOL v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          unint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_1CB91F7C8(v3, v6);
      operator delete(v6);
    }
  }
}

uint64_t *sub_1CC68FBD4(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = result;
  unsigned int v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = result + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x70uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v9 + 72) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v9 + 88) = *(_OWORD *)(a3 + 56);
    *((void *)v9 + 13) = *(void *)(a3 + 72);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *unsigned int v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      BOOL v11 = *v6;
    }
    else
    {
      BOOL v11 = (uint64_t *)v9;
    }
    BOOL result = sub_1CB8358B8((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void sub_1CC68FCC0(void ***a1)
{
  long long v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = (char *)*((void *)v4 - 10);
        if (v4 - 64 != v6) {
          free(v6);
        }
        v4 -= 88;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CC68FD50(void **a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_1CB833614();
    }
    unsigned int v7 = (char *)operator new(112 * v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = &v7[112 * v2];
  uint64_t v10 = &v7[112 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v8;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  v9[80] = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  sub_1CC68F760((uint64_t **)v9 + 11, (void *)(a2 + 88));
  unint64_t v12 = v9 + 112;
  BOOL v13 = (char *)*a1;
  unsigned int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v9 + 112;
    }
    goto LABEL_20;
  }
  uint64_t v15 = 0;
  do
  {
    long long v16 = &v9[v15];
    long long v17 = *(_OWORD *)&v14[v15 - 96];
    *((_OWORD *)v16 - 7) = *(_OWORD *)&v14[v15 - 112];
    *((_OWORD *)v16 - 6) = v17;
    long long v18 = *(_OWORD *)&v14[v15 - 80];
    long long v19 = *(_OWORD *)&v14[v15 - 64];
    long long v20 = *(_OWORD *)&v14[v15 - 48];
    *(v16 - 32) = v14[v15 - 32];
    *((_OWORD *)v16 - 4) = v19;
    *((_OWORD *)v16 - 3) = v20;
    *((_OWORD *)v16 - 5) = v18;
    *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
    long long v21 = &v14[v15 - 16];
    uint64_t v22 = *(void *)v21;
    *(void *)&v9[v15 - 16] = *(void *)v21;
    uint64_t v23 = (uint64_t)&v9[v15 - 16];
    uint64_t v24 = *(void *)&v14[v15 - 8];
    *((void *)v16 - 1) = v24;
    if (v24)
    {
      *(void *)(v22 + 16) = v23;
      *(void *)&v14[v15 - 24] = v21;
      *(void *)long long v21 = 0;
      *(void *)&v14[v15 - 8] = 0;
    }
    else
    {
      *((void *)v16 - 3) = v23;
    }
    v15 -= 112;
  }
  while (&v14[v15] != v13);
  unsigned int v14 = (char *)*a1;
  int v25 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v25 != v14)
  {
    do
    {
      uint64_t v26 = v25 - 112;
      sub_1CBB0D544(*((void **)v25 - 2));
      int v25 = v26;
    }
    while (v26 != v14);
  }
  if (v14) {
LABEL_20:
  }
    operator delete(v14);
  return v9 + 112;
}

uint64_t sub_1CC68FF28(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC68FF68(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24));
}

void sub_1CC68FFA4(void ***a1)
{
  long long v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC69004C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a9;
  *(void *)(a1 + 64) = a10;
  *(_DWORD *)(a1 + 72) = a18;
  *(void *)a1 = &unk_1F2618DB0;
  *(unsigned char *)(a1 + 80) = a5;
  *(void *)(a1 + 88) = a1 + 112;
  uint64_t v19 = a1 + 88;
  long long v20 = xmmword_1CD96EEC0;
  *(_OWORD *)(a1 + 96) = xmmword_1CD96EEC0;
  if (*(void *)(a6 + 8))
  {
    char v21 = a8;
    char v22 = a7;
    sub_1CC1B8518(v19, a6);
    long long v20 = xmmword_1CD96EEC0;
    a7 = v22;
    a8 = v21;
  }
  *(void *)(a1 + 152) = a1 + 176;
  *(unsigned char *)(a1 + 120) = a7;
  *(unsigned char *)(a1 + 121) = a8;
  *(void *)(a1 + 128) = a9;
  *(void *)(a1 + 136) = a10;
  *(void *)(a1 + 144) = a11;
  *(_OWORD *)(a1 + 160) = v20;
  if (*(void *)(a12 + 8)) {
    sub_1CC1B8518(a1 + 152, a12);
  }
  *(_DWORD *)(a1 + 184) = a13;
  *(_DWORD *)(a1 + 188) = a14;
  *(void *)(a1 + 192) = a15;
  *(void *)(a1 + 200) = a16;
  *(void *)(a1 + 208) = a17;
  return a1;
}

void *sub_1CC690164(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unint64_t v12 = 0;
LABEL_13:
    uint64_t v6 = sub_1CC69021C(a1, a2, v12);
    *uint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    long long v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -2;
      }
      if (v10) {
        long long v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v6;
    }
    goto LABEL_13;
  }
  return v6;
}

void *sub_1CC69021C(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CC4EB5F0(a1, 2 * v6);
    uint64_t v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = (37 * *a2) & v9;
    a3 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a3;
    if (*a2 != *a3)
    {
      unint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          unint64_t v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (void *)(*(void *)a1 + 16 * v10);
        uint64_t v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a3;
      goto LABEL_4;
    }
    sub_1CC4EB5F0(a1, v6);
    uint64_t v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = (37 * *a2) & v16;
    a3 = (void *)(*(void *)a1 + 16 * v17);
    uint64_t v18 = *a3;
    if (*a2 != *a3)
    {
      unint64_t v12 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          unint64_t v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (void *)(*(void *)a1 + 16 * v17);
        uint64_t v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC690394(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *llvm::DWARFDebugLine::ContentTypeTracker::trackContentType(unsigned char *result, int a2)
{
  if (a2 > 4)
  {
    if (a2 == 5)
    {
      result += 2;
    }
    else
    {
      if (a2 != 8193) {
        return result;
      }
      result += 3;
    }
  }
  else if (a2 != 3)
  {
    if (a2 != 4) {
      return result;
    }
    ++result;
  }
  *BOOL result = 1;
  return result;
}

double llvm::DWARFDebugLine::Prologue::Prologue(llvm::DWARFDebugLine::Prologue *this)
{
  *(void *)((char *)this + 5) = 0;
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  return result;
}

{
  double result;

  *(void *)((char *)this + 5) = 0;
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  return result;
}

BOOL llvm::DWARFDebugLine::Prologue::hasFileAtIndex(llvm::DWARFDebugLine::Prologue *this, unint64_t a2)
{
  if (*((unsigned __int16 *)this + 4) >= 5u) {
    return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3) > a2;
  }
  if (a2) {
    return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3) >= a2;
  }
  return 0;
}

unint64_t llvm::DWARFDebugLine::Prologue::getLastValidFileIndex(llvm::DWARFDebugLine::Prologue *this)
{
  uint64_t v1 = *((void *)this + 11);
  uint64_t v2 = *((void *)this + 12);
  if (v1 == v2)
  {
    LOBYTE(v3) = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((v2 - v1) >> 3);
    if (*((unsigned __int16 *)this + 4) >= 5u) {
      --v3;
    }
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFF00;
  }
  return v4 | v3;
}

uint64_t llvm::DWARFDebugLine::Prologue::getFileNameEntry(llvm::DWARFDebugLine::Prologue *this, uint64_t a2)
{
  return *((void *)this + 11) + 136 * (a2 - (*((unsigned __int16 *)this + 4) < 5u));
}

BOOL llvm::DWARFDebugLine::Prologue::totalLengthIsValid(llvm::DWARFDebugLine::Prologue *this)
{
  return *(void *)this != 0;
}

uint64_t llvm::DWARFDebugLine::Prologue::getLength(llvm::DWARFDebugLine::Prologue *this)
{
  uint64_t v1 = 4;
  uint64_t v2 = 12;
  if (*((unsigned char *)this + 11) == 1) {
    uint64_t v1 = 8;
  }
  else {
    uint64_t v2 = 4;
  }
  uint64_t v3 = *((void *)this + 2) + v2 + v1;
  uint64_t v4 = v3 + 2;
  uint64_t v5 = v3 + 4;
  if (*((unsigned __int16 *)this + 4) <= 4u) {
    return v4;
  }
  else {
    return v5;
  }
}

uint64_t llvm::DWARFDebugLine::Prologue::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  unsigned int v6 = a3;
  uint64_t v7 = a2;
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  uint64_t v171 = 0;
  uint64_t v172 = v10;
  unint64_t v12 = (unint64_t *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)a1 = 0;
  *(void *)(a1 + 5) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  *(void *)(a1 + 96) = *(void *)(a1 + 88);
  unint64_t v13 = (unint64_t)&v171;
  unint64_t v170 = *a3;
  unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, &v170, &v171);
  *(void *)a1 = InitialLength;
  *(unsigned char *)(a1 + 11) = v15;
  uint64_t v16 = v170 + InitialLength;
  if (*(void *)(v7 + 8) < v170 + InitialLength) {
    uint64_t v16 = *(void *)(v7 + 8);
  }
  BOOL v17 = *(unsigned char *)(v7 + 16) != 0;
  *(void *)(v7 + 8) = v16;
  *(unsigned char *)(v7 + 16) = v17;
  unsigned int v18 = sub_1CD833674(v7, &v170, &v171);
  *(_WORD *)(a1 + 8) = v18;
  if (!v171 && v18 - 2 >= 4)
  {
    *unsigned int v6 = v170;
    int v19 = std::generic_category();
    LOWORD(v189[0].__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 8);
    sub_1CD5E4D44(45, (uint64_t)v19, (uint64_t)"parsing line table prologue at offset 0x%8.8llx: unsupported version %hu", &v172, (__int16 *)v189);
  }
  if (v18 >= 5)
  {
    *(unsigned char *)(a1 + 10) = sub_1CD05EA24((void *)v7, &v170, &v171);
    *(unsigned char *)(a1 + 24) = sub_1CD05EA24((void *)v7, &v170, &v171);
  }
  if (*(unsigned char *)(a1 + 11) == 1) {
    int v20 = 8;
  }
  else {
    int v20 = 4;
  }
  unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(v7, v20, &v170, 0, &v171);
  *(void *)(a1 + 16) = RelocatedValue;
  uint64_t v22 = v170 + RelocatedValue;
  uint64_t v169 = v170 + RelocatedValue;
  if (*(void *)(v7 + 8) < v170 + RelocatedValue) {
    uint64_t v22 = *(void *)(v7 + 8);
  }
  BOOL v23 = *(unsigned char *)(v7 + 16) != 0;
  *(void *)(v7 + 8) = v22;
  *(unsigned char *)(v7 + 16) = v23;
  *(unsigned char *)(a1 + 25) = sub_1CD05EA24((void *)v7, &v170, &v171);
  if (*(unsigned __int16 *)(a1 + 8) >= 4u) {
    *(unsigned char *)(a1 + 26) = sub_1CD05EA24((void *)v7, &v170, &v171);
  }
  *(unsigned char *)(a1 + 27) = sub_1CD05EA24((void *)v7, &v170, &v171);
  *(unsigned char *)(a1 + 28) = sub_1CD05EA24((void *)v7, &v170, &v171);
  *(unsigned char *)(a1 + 29) = sub_1CD05EA24((void *)v7, &v170, &v171);
  unsigned int v24 = sub_1CD05EA24((void *)v7, &v170, &v171);
  *(unsigned char *)(a1 + 30) = v24;
  uint64_t v163 = a6;
  uint64_t v164 = v6;
  if (!v171 && !v24)
  {
    int v25 = std::generic_category();
    sub_1CD5E3FE8(22, (uint64_t)v25, (uint64_t)"parsing line table prologue at offset 0x%8.8llx found opcode base of 0. Assuming no standard opcodes", &v172);
  }
  if (v171)
  {
    *unsigned int v6 = v170;
    goto LABEL_148;
  }
  sub_1CD452EA8(v12, v24 - 1);
  if (*(unsigned __int8 *)(a1 + 30) >= 2u)
  {
    unsigned int v26 = 1;
    do
    {
      char v27 = sub_1CD05EA24((void *)v7, &v170, &v171);
      char v28 = v27;
      BOOL v30 = *(unsigned char **)(a1 + 48);
      unint64_t v29 = *(void *)(a1 + 56);
      if ((unint64_t)v30 >= v29)
      {
        unint64_t v32 = *v12;
        uint64_t v33 = &v30[-*v12];
        unint64_t v34 = (unint64_t)(v33 + 1);
        if ((uint64_t)(v33 + 1) < 0) {
LABEL_207:
        }
          abort();
        unint64_t v35 = v29 - v32;
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v36 = v34;
        }
        if (v36) {
          int v37 = (char *)operator new(v36);
        }
        else {
          int v37 = 0;
        }
        uint64_t v38 = &v33[(void)v37];
        unint64_t v39 = &v33[(void)v37];
        unsigned char *v39 = v28;
        unint64_t v31 = v39 + 1;
        if (v30 != (unsigned char *)v32)
        {
          BOOL v40 = &v30[~v32];
          do
          {
            char v41 = *--v30;
            (v40--)[(void)v37] = v41;
          }
          while (v30 != (unsigned char *)v32);
          BOOL v30 = (unsigned char *)*v12;
          uint64_t v38 = v37;
        }
        *(void *)(a1 + 40) = v38;
        *(void *)(a1 + 48) = v31;
        *(void *)(a1 + 56) = &v37[v36];
        if (v30) {
          operator delete(v30);
        }
        unsigned int v6 = v164;
      }
      else
      {
        *BOOL v30 = v27;
        unint64_t v31 = v30 + 1;
      }
      *(void *)(a1 + 48) = v31;
      ++v26;
    }
    while (v26 < *(unsigned __int8 *)(a1 + 30));
  }
  uint64_t v42 = v171;
  *unsigned int v6 = v170;
  uint64_t v43 = v163;
  if (v42)
  {
LABEL_148:
    unint64_t v107 = std::generic_category();
    uint64_t v168 = v171;
    uint64_t v171 = 0;
    sub_1CD4FB504(&v168, v189);
    if ((v189[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v108 = v189;
    }
    else {
      uint64_t v108 = (std::string *)v189[0].__r_.__value_.__r.__words[0];
    }
    *(void *)&long long v185 = v108;
    sub_1CD5E2210(22, (uint64_t)v107, (uint64_t)"parsing line table prologue at offset 0x%8.8llx: %s", &v172, (uint64_t *)&v185);
  }
  if (*(unsigned __int16 *)(a1 + 8) < 5u)
  {
    while (1)
    {
      *(void *)&long long v173 = 0;
      CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)v7, v6, &v173);
      if ((void)v173)
      {
        v183[0] = (void *)v173;
        *(void *)&long long v173 = 0;
        sub_1CD4515D0(v183);
        if (v183[0]) {
          (*(void (**)(void *))(*v183[0] + 8))(v183[0]);
        }
        unint64_t v106 = std::generic_category();
        v189[0].__r_.__value_.__r.__words[0] = 22;
        v189[0].__r_.__value_.__l.__size_ = (std::string::size_type)v106;
        *(void *)&long long v185 = "include directories table was not null terminated before the end of the prologue";
        sub_1CD06481C();
      }
      if (!v92) {
        break;
      }
      std::string::size_type v93 = (std::string::size_type)CStrRef;
      *(_OWORD *)&v189[0].__r_.__value_.__r.__words[1] = 0uLL;
      long long v95 = *(std::string **)(a1 + 72);
      unint64_t v94 = *(void *)(a1 + 80);
      if ((unint64_t)v95 >= v94)
      {
        uint64_t v97 = *(std::string **)(a1 + 64);
        unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v97) >> 4) + 1;
        if (v98 > 0x555555555555555) {
          goto LABEL_207;
        }
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (void)v97) >> 4);
        if (2 * v99 > v98) {
          unint64_t v98 = 2 * v99;
        }
        if (v99 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v100 = 0x555555555555555;
        }
        else {
          unint64_t v100 = v98;
        }
        if (v100)
        {
          if (v100 > 0x555555555555555) {
LABEL_208:
          }
            sub_1CB833614();
          BOOL v101 = (char *)operator new(48 * v100);
        }
        else
        {
          BOOL v101 = 0;
        }
        BOOL v102 = (std::string *)&v101[16 * (((char *)v95 - (char *)v97) >> 4)];
        LOWORD(v102->__r_.__value_.__l.__data_) = 8;
        v102->__r_.__value_.__s.__data_[2] = 0;
        v102->__r_.__value_.__l.__size_ = v93;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102[1] = v189[0];
        unint64_t v103 = v102;
        if (v95 == v97)
        {
          unsigned int v6 = v164;
        }
        else
        {
          unsigned int v6 = v164;
          do
          {
            long long v104 = *(_OWORD *)&v95[-2].__r_.__value_.__l.__data_;
            long long v105 = *(_OWORD *)&v95[-1].__r_.__value_.__r.__words[1];
            *(_OWORD *)&v103[-2].__r_.__value_.__r.__words[2] = *(_OWORD *)&v95[-2].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v103[-1].__r_.__value_.__r.__words[1] = v105;
            *(_OWORD *)&v103[-2].__r_.__value_.__l.__data_ = v104;
            v103 -= 2;
            v95 -= 2;
          }
          while (v95 != v97);
          long long v95 = *(std::string **)(a1 + 64);
        }
        uint64_t v96 = v102 + 2;
        *(void *)(a1 + 64) = v103;
        *(void *)(a1 + 72) = v102 + 2;
        *(void *)(a1 + 80) = &v101[48 * v100];
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        LOWORD(v95->__r_.__value_.__l.__data_) = 8;
        v95->__r_.__value_.__s.__data_[2] = 0;
        v95->__r_.__value_.__l.__size_ = (std::string::size_type)CStrRef;
        v95->__r_.__value_.__r.__words[2] = 0;
        v95[1] = v189[0];
        uint64_t v96 = v95 + 2;
      }
      *(void *)(a1 + 72) = v96;
      if ((void)v173) {
        (*(void (**)(void))(*(void *)v173 + 8))(v173);
      }
    }
    *(_WORD *)(a1 + 31) = 257;
    while (1)
    {
      *(void *)&long long v173 = 0;
      unint64_t v110 = llvm::DataExtractor::getCStrRef((uint64_t *)v7, v6, &v173);
      if (!(void)v173 && v111 == 0) {
        break;
      }
      unint64_t v113 = v110;
      uint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)v6, &v173);
      uint64_t v115 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)v6, &v173);
      uint64_t v116 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)v6, &v173);
      if ((void)v173)
      {
        *(void *)&long long v184 = v173;
        *(void *)&long long v173 = 0;
        sub_1CD4515D0((void **)&v184);
        if ((void)v184) {
          (*(void (**)(void))(*(void *)v184 + 8))(v184);
        }
        unint64_t v135 = std::generic_category();
        v189[0].__r_.__value_.__r.__words[0] = 22;
        v189[0].__r_.__value_.__l.__size_ = (std::string::size_type)v135;
        *(void *)&long long v185 = "file names table was not null terminated before the end of the prologue";
        sub_1CD06481C();
      }
      uint64_t v117 = v116;
      __n128 v119 = *(char **)(a1 + 96);
      unint64_t v118 = *(void *)(a1 + 104);
      if ((unint64_t)v119 >= v118)
      {
        int v121 = *(char **)(a1 + 88);
        unint64_t v122 = 0xF0F0F0F0F0F0F0F1 * ((v119 - v121) >> 3) + 1;
        if (v122 > 0x1E1E1E1E1E1E1E1) {
          goto LABEL_207;
        }
        unint64_t v123 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v118 - (void)v121) >> 3);
        if (2 * v123 > v122) {
          unint64_t v122 = 2 * v123;
        }
        if (v123 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v124 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v124 = v122;
        }
        if (v124)
        {
          if (v124 > 0x1E1E1E1E1E1E1E1) {
            goto LABEL_208;
          }
          uint64_t v125 = (char *)operator new(136 * v124);
        }
        else
        {
          uint64_t v125 = 0;
        }
        uint64_t v126 = &v125[8 * ((v119 - v121) >> 3)];
        *(_WORD *)uint64_t v126 = 8;
        v126[2] = 0;
        *((void *)v126 + 1) = v113;
        *((void *)v126 + 2) = 0;
        *((void *)v126 + 4) = 0;
        *((void *)v126 + 5) = 0;
        *((void *)v126 + 6) = ULEB128;
        *((void *)v126 + 7) = v115;
        *((void *)v126 + 8) = v117;
        *((_WORD *)v126 + 44) = 0;
        v126[90] = 0;
        *((void *)v126 + 12) = 0;
        *((void *)v126 + 13) = 0;
        *((void *)v126 + 15) = 0;
        *((void *)v126 + 16) = 0;
        long long v127 = v126;
        if (v119 == v121)
        {
          unsigned int v6 = v164;
        }
        else
        {
          unsigned int v6 = v164;
          do
          {
            *(_OWORD *)(v127 - 136) = *(_OWORD *)(v119 - 136);
            long long v128 = *(_OWORD *)(v119 - 120);
            long long v129 = *(_OWORD *)(v119 - 104);
            long long v130 = *(_OWORD *)(v119 - 88);
            *(_OWORD *)(v127 - 72) = *(_OWORD *)(v119 - 72);
            *(_OWORD *)(v127 - 88) = v130;
            *(_OWORD *)(v127 - 104) = v129;
            *(_OWORD *)(v127 - 120) = v128;
            long long v131 = *(_OWORD *)(v119 - 56);
            long long v132 = *(_OWORD *)(v119 - 40);
            long long v133 = *(_OWORD *)(v119 - 24);
            *((void *)v127 - 1) = *((void *)v119 - 1);
            *(_OWORD *)(v127 - 24) = v133;
            *(_OWORD *)(v127 - 40) = v132;
            *(_OWORD *)(v127 - 56) = v131;
            v127 -= 136;
            v119 -= 136;
          }
          while (v119 != v121);
          __n128 v119 = *(char **)(a1 + 88);
        }
        __n128 v134 = &v125[136 * v124];
        size_t v120 = v126 + 136;
        *(void *)(a1 + 88) = v127;
        *(void *)(a1 + 96) = v126 + 136;
        *(void *)(a1 + 104) = v134;
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(_WORD *)__n128 v119 = 8;
        v119[2] = 0;
        *((void *)v119 + 1) = v113;
        *((void *)v119 + 2) = 0;
        *((void *)v119 + 4) = 0;
        *((void *)v119 + 5) = 0;
        *((void *)v119 + 6) = ULEB128;
        *((void *)v119 + 7) = v115;
        *((void *)v119 + 8) = v116;
        *((_WORD *)v119 + 44) = 0;
        v119[90] = 0;
        size_t v120 = v119 + 136;
        *((void *)v119 + 12) = 0;
        *((void *)v119 + 13) = 0;
        *((void *)v119 + 15) = 0;
        *((void *)v119 + 16) = 0;
      }
      *(void *)(a1 + 96) = v120;
      if ((void)v173) {
        (*(void (**)(void))(*(void *)v173 + 8))(v173);
      }
    }
    std::string::size_type v167 = 0;
    uint64_t v43 = v163;
  }
  else
  {
    sub_1CC694CE4((uint64_t)v189, (uint64_t *)v7, v6, 0);
    if (v190)
    {
      std::string::size_type v167 = v189[0].__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v158 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)v6, 0);
      if (v158)
      {
        uint64_t v44 = 0;
        uint64_t v45 = (void *)&v185 + 1;
        do
        {
          uint64_t v160 = v44;
          if (LODWORD(v189[0].__r_.__value_.__r.__words[1]))
          {
            std::string::size_type v46 = v189[0].__r_.__value_.__r.__words[0];
            std::string::size_type v47 = v189[0].__r_.__value_.__r.__words[0] + 8 * LODWORD(v189[0].__r_.__value_.__r.__words[1]);
            do
            {
              int v48 = *(_DWORD *)v46;
              unsigned __int16 v49 = *(_WORD *)(v46 + 4);
              LOWORD(v185) = v49;
              BYTE2(v185) = 0;
              *uint64_t v45 = 0;
              v45[1] = 0;
              long long v187 = 0uLL;
              if (v48 == 1)
              {
                unint64_t v13 = v13 & 0xFFFF000000000000 | *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32);
                if (!llvm::DWARFFormValue::extractValue((unsigned __int16 *)&v185, (uint64_t *)v7, v6, v13, a4, a5))
                {
                  uint64_t v139 = "failed to parse directory entry because extracting the form value failed";
LABEL_154:
                  uint64_t v109 = std::generic_category();
                  *(void *)&long long v173 = 22;
                  *((void *)&v173 + 1) = v109;
                  v183[0] = v139;
                  sub_1CD06481C();
                }
                char v51 = *(_OWORD **)(a1 + 72);
                unint64_t v50 = *(void *)(a1 + 80);
                if ((unint64_t)v51 >= v50)
                {
                  int v55 = v45;
                  uint64_t v56 = v7;
                  std::string::size_type v57 = v47;
                  uint64_t v58 = *(_OWORD **)(a1 + 64);
                  unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (v51 - v58) + 1;
                  if (v59 > 0x555555555555555) {
                    goto LABEL_207;
                  }
                  unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v58) >> 4);
                  if (2 * v60 > v59) {
                    unint64_t v59 = 2 * v60;
                  }
                  if (v60 >= 0x2AAAAAAAAAAAAAALL) {
                    unint64_t v61 = 0x555555555555555;
                  }
                  else {
                    unint64_t v61 = v59;
                  }
                  if (v61)
                  {
                    if (v61 > 0x555555555555555) {
                      goto LABEL_208;
                    }
                    long long v62 = (char *)operator new(48 * v61);
                  }
                  else
                  {
                    long long v62 = 0;
                  }
                  long long v63 = &v62[16 * (v51 - v58)];
                  long long v64 = v186;
                  *(_OWORD *)long long v63 = v185;
                  *((_OWORD *)v63 + 1) = v64;
                  *((_OWORD *)v63 + 2) = v187;
                  uint64_t v65 = v63;
                  if (v51 == v58)
                  {
                    unsigned int v6 = v164;
                  }
                  else
                  {
                    unsigned int v6 = v164;
                    do
                    {
                      long long v66 = *(v51 - 3);
                      long long v67 = *(v51 - 1);
                      *((_OWORD *)v65 - 2) = *(v51 - 2);
                      *((_OWORD *)v65 - 1) = v67;
                      *((_OWORD *)v65 - 3) = v66;
                      v65 -= 48;
                      v51 -= 3;
                    }
                    while (v51 != v58);
                    char v51 = *(_OWORD **)(a1 + 64);
                  }
                  unint64_t v68 = &v62[48 * v61];
                  unint64_t v54 = v63 + 48;
                  *(void *)(a1 + 64) = v65;
                  *(void *)(a1 + 72) = v63 + 48;
                  *(void *)(a1 + 80) = v68;
                  std::string::size_type v47 = v57;
                  if (v51) {
                    operator delete(v51);
                  }
                  uint64_t v7 = v56;
                  uint64_t v45 = v55;
                }
                else
                {
                  long long v52 = v185;
                  long long v53 = v187;
                  v51[1] = v186;
                  v51[2] = v53;
                  _OWORD *v51 = v52;
                  unint64_t v54 = v51 + 3;
                }
                *(void *)(a1 + 72) = v54;
              }
              else
              {
                long long v173 = *(_OWORD *)v7;
                long long v174 = *(_OWORD **)(v7 + 16);
                if (!llvm::DWARFFormValue::skipValue(v49, (uint64_t *)&v173, v6, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32)))
                {
                  uint64_t v139 = "failed to parse directory entry because skipping the form value failed";
                  goto LABEL_154;
                }
              }
              v46 += 8;
            }
            while (v46 != v47);
          }
          uint64_t v44 = v160 + 1;
          uint64_t v43 = v163;
        }
        while (v160 + 1 != v158);
      }
      sub_1CC694CE4((uint64_t)&v185, (uint64_t *)v7, v6, (unsigned char *)(a1 + 31));
      if (v188)
      {
        std::string::size_type v167 = v185;
      }
      else
      {
        uint64_t v144 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)v6, 0);
        if (v144)
        {
          uint64_t v69 = 0;
          uint64_t v70 = "failed to parse file entry because extracting the form value failed";
          do
          {
            uint64_t v145 = v69;
            if (DWORD2(v185))
            {
              uint64_t v161 = 0;
              uint64_t v162 = 0;
              uint64_t v157 = 0;
              int64_t v159 = 0;
              uint64_t v155 = 0;
              uint64_t v156 = 0;
              unint64_t v147 = 0;
              unint64_t v148 = 0;
              unint64_t AsUnsignedConstant = 0;
              __n128 v153 = 0;
              uint64_t v154 = 0;
              uint64_t v151 = 0;
              uint64_t v152 = 0;
              uint64_t v71 = (int *)v185;
              uint64_t v72 = (int *)(v185 + 8 * DWORD2(v185));
              while (1)
              {
                int v73 = *v71;
                LOWORD(v173) = *((_WORD *)v71 + 2);
                BYTE2(v173) = 0;
                *((void *)&v173 + 1) = 0;
                long long v174 = 0;
                uint64_t v176 = 0;
                uint64_t v177 = 0;
                unint64_t v13 = v13 & 0xFFFF000000000000 | *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32);
                if (!llvm::DWARFFormValue::extractValue((unsigned __int16 *)&v173, (uint64_t *)v7, v164, v13, a4, a5))goto LABEL_188; {
                switch(v73)
                }
                {
                  case 1:
                    LOWORD(v151) = v173;
                    BYTE4(v151) = BYTE2(v173);
                    int v180 = *(_DWORD *)((char *)&v173 + 3);
                    char v181 = BYTE7(v173);
                    uint64_t v152 = *((void *)&v173 + 1);
                    __n128 v153 = v174;
                    uint64_t v149 = v175;
                    uint64_t v154 = v176;
                    uint64_t v155 = v177;
                    goto LABEL_94;
                  case 2:
                    unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v173);
                    goto LABEL_94;
                  case 3:
                    unint64_t v147 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v173);
                    goto LABEL_94;
                  case 4:
                    unint64_t v148 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v173);
                    goto LABEL_94;
                  case 5:
                    if ((unsigned __int16)v173 > 0x2Du) {
                      goto LABEL_187;
                    }
                    if ((0x618uLL >> v173))
                    {
                      if (*((void *)&v173 + 1) != 16) {
                        goto LABEL_187;
                      }
                      BOOL v74 = v174;
                    }
                    else if ((unsigned __int16)v173 != 30 && (unsigned __int16)v173 != 24 {
                           || (BOOL v74 = v174, *((void *)&v173 + 1) != 16))
                    }
                    {
LABEL_187:
                      uint64_t v70 = "failed to parse file entry because the MD5 hash is invalid";
LABEL_188:
                      uint64_t v136 = std::generic_category();
                      v183[0] = (void *)22;
                      v183[1] = &v136->__vftable;
                      long long v182 = v70;
                      sub_1CD06481C();
                    }
                    long long v184 = *v74;
LABEL_94:
                    v71 += 2;
                    if (v71 == v72) {
                      goto LABEL_100;
                    }
                    break;
                  default:
                    if (v73 == 8193)
                    {
                      LOWORD(v156) = v173;
                      BYTE4(v156) = BYTE2(v173);
                      int v178 = *(_DWORD *)((char *)&v173 + 3);
                      char v179 = BYTE7(v173);
                      uint64_t v157 = *((void *)&v173 + 1);
                      int64_t v159 = v174;
                      uint64_t v150 = v175;
                      uint64_t v161 = v176;
                      uint64_t v162 = v177;
                    }
                    goto LABEL_94;
                }
              }
            }
            uint64_t v161 = 0;
            uint64_t v162 = 0;
            uint64_t v157 = 0;
            int64_t v159 = 0;
            uint64_t v155 = 0;
            uint64_t v156 = 0;
            unint64_t v147 = 0;
            unint64_t v148 = 0;
            unint64_t AsUnsignedConstant = 0;
            __n128 v153 = 0;
            uint64_t v154 = 0;
            uint64_t v151 = 0;
            uint64_t v152 = 0;
LABEL_100:
            char v76 = *(char **)(a1 + 96);
            unint64_t v75 = *(void *)(a1 + 104);
            if ((unint64_t)v76 >= v75)
            {
              long long v78 = *(char **)(a1 + 88);
              unint64_t v79 = 0xF0F0F0F0F0F0F0F1 * ((v76 - v78) >> 3) + 1;
              if (v79 > 0x1E1E1E1E1E1E1E1) {
                goto LABEL_207;
              }
              unint64_t v80 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v75 - (void)v78) >> 3);
              if (2 * v80 > v79) {
                unint64_t v79 = 2 * v80;
              }
              if (v80 >= 0xF0F0F0F0F0F0F0) {
                unint64_t v79 = 0x1E1E1E1E1E1E1E1;
              }
              unint64_t v143 = v79;
              if (v79)
              {
                if (v79 > 0x1E1E1E1E1E1E1E1) {
                  goto LABEL_208;
                }
                unint64_t v81 = (char *)operator new(136 * v79);
              }
              else
              {
                unint64_t v81 = 0;
              }
              unint64_t v82 = &v81[8 * ((v76 - v78) >> 3)];
              *(_WORD *)unint64_t v82 = v151;
              v82[2] = BYTE4(v151);
              *(_DWORD *)(v82 + 3) = v180;
              v82[7] = v181;
              *((void *)v82 + 1) = v152;
              *((void *)v82 + 2) = v153;
              *((void *)v82 + 3) = v149;
              *((void *)v82 + 4) = v154;
              *((void *)v82 + 5) = v155;
              *((void *)v82 + 6) = AsUnsignedConstant;
              *((void *)v82 + 7) = v147;
              *((void *)v82 + 8) = v148;
              *(_OWORD *)(v82 + 72) = v184;
              *((_WORD *)v82 + 44) = v156;
              v82[90] = BYTE4(v156);
              v82[95] = v179;
              *(_DWORD *)(v82 + 91) = v178;
              *((void *)v82 + 12) = v157;
              *((void *)v82 + 13) = v159;
              *((void *)v82 + 14) = v150;
              *((void *)v82 + 15) = v161;
              *((void *)v82 + 16) = v162;
              unint64_t v83 = v82;
              if (v76 == v78)
              {
                unint64_t v84 = v143;
              }
              else
              {
                unint64_t v84 = v143;
                do
                {
                  *(_OWORD *)(v83 - 136) = *(_OWORD *)(v76 - 136);
                  long long v85 = *(_OWORD *)(v76 - 120);
                  long long v86 = *(_OWORD *)(v76 - 104);
                  long long v87 = *(_OWORD *)(v76 - 88);
                  *(_OWORD *)(v83 - 72) = *(_OWORD *)(v76 - 72);
                  *(_OWORD *)(v83 - 88) = v87;
                  *(_OWORD *)(v83 - 104) = v86;
                  *(_OWORD *)(v83 - 120) = v85;
                  long long v88 = *(_OWORD *)(v76 - 56);
                  long long v89 = *(_OWORD *)(v76 - 40);
                  long long v90 = *(_OWORD *)(v76 - 24);
                  *((void *)v83 - 1) = *((void *)v76 - 1);
                  *(_OWORD *)(v83 - 24) = v90;
                  *(_OWORD *)(v83 - 40) = v89;
                  *(_OWORD *)(v83 - 56) = v88;
                  v83 -= 136;
                  v76 -= 136;
                }
                while (v76 != v78);
                char v76 = *(char **)(a1 + 88);
              }
              long long v77 = v82 + 136;
              *(void *)(a1 + 88) = v83;
              *(void *)(a1 + 96) = v82 + 136;
              *(void *)(a1 + 104) = &v81[136 * v84];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(_WORD *)char v76 = v151;
              uint64_t v76[2] = BYTE4(v151);
              *(_DWORD *)(v76 + 3) = v180;
              v76[7] = v181;
              *((void *)v76 + 1) = v152;
              *((void *)v76 + 2) = v153;
              *((void *)v76 + 3) = v149;
              *((void *)v76 + 4) = v154;
              *((void *)v76 + 5) = v155;
              *((void *)v76 + 6) = AsUnsignedConstant;
              *((void *)v76 + 7) = v147;
              *((void *)v76 + 8) = v148;
              *(_OWORD *)(v76 + 72) = v184;
              *((_WORD *)v76 + 44) = v156;
              v76[90] = BYTE4(v156);
              v76[95] = v179;
              *(_DWORD *)(v76 + 91) = v178;
              *((void *)v76 + 12) = v157;
              *((void *)v76 + 13) = v159;
              *((void *)v76 + 14) = v150;
              *((void *)v76 + 15) = v161;
              long long v77 = v76 + 136;
              *((void *)v76 + 16) = v162;
            }
            *(void *)(a1 + 96) = v77;
            uint64_t v69 = v145 + 1;
          }
          while (v145 + 1 != v144);
        }
        std::string::size_type v167 = 0;
        uint64_t v137 = v185;
        if (v188)
        {
          *(void *)&long long v185 = 0;
          unsigned int v6 = v164;
          if (v137) {
            (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
          }
        }
        else
        {
          unsigned int v6 = v164;
          if ((long long *)v185 != &v186) {
            free((void *)v185);
          }
        }
      }
      std::string::size_type v138 = v189[0].__r_.__value_.__r.__words[0];
      if (v190)
      {
        v189[0].__r_.__value_.__r.__words[0] = 0;
        if (v138) {
          (*(void (**)(std::string::size_type))(*(void *)v138 + 8))(v138);
        }
      }
      else if ((std::string::size_type *)v189[0].__r_.__value_.__l.__data_ != &v189[0].__r_.__value_.__r.__words[2])
      {
        free(v189[0].__r_.__value_.__l.__data_);
      }
    }
  }
  if (v167)
  {
    size_t v141 = std::generic_category();
    sub_1CD5E4C08(22, (uint64_t)v141, (uint64_t)"parsing line table prologue at 0x%8.8llx found an invalid directory or file table description at 0x%8.8llx", &v172, (uint64_t *)v6);
  }
  if (*v6 != v169)
  {
    long long v142 = std::generic_category();
    sub_1CD5E5860(22, (uint64_t)v142, (uint64_t)"unknown data in line table prologue at offset 0x%8.8llx: parsing ended (at offset 0x%8.8llx) before reaching the prologue end at offset 0x%8.8llx", &v172, (uint64_t *)v6, &v169);
  }
  *uint64_t v43 = 0;
  uint64_t result = v171;
  if (v171) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v171 + 8))(v171);
  }
  return result;
}

double llvm::DWARFDebugLine::Row::Row(llvm::DWARFDebugLine::Row *this, char a2)
{
  double result = 0.0;
  *(_OWORD *)this = xmmword_1CD91C150;
  *((void *)this + 2) = 0x1000000000001;
  *((unsigned char *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 29) = *((unsigned char *)this + 29) & 0xE0 | a2;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = xmmword_1CD91C150;
  *((void *)this + 2) = 0x1000000000001;
  *((unsigned char *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 29) = *((unsigned char *)this + 29) & 0xE0 | a2;
  return result;
}

double llvm::DWARFDebugLine::Row::reset(llvm::DWARFDebugLine::Row *this, char a2)
{
  double result = 0.0;
  *(_OWORD *)this = xmmword_1CD91C150;
  *((void *)this + 2) = 0x1000000000001;
  *((unsigned char *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 29) = *((unsigned char *)this + 29) & 0xE0 | a2;
  return result;
}

uint64_t llvm::DWARFDebugLine::Row::postAppend(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(unsigned char *)(this + 29) &= 0xE5u;
  return this;
}

uint64_t llvm::DWARFDebugLine::Sequence::Sequence(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = -1;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 1;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = -1;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 1;
  return this;
}

uint64_t llvm::DWARFDebugLine::Sequence::reset(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = -1;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 1;
  return this;
}

uint64_t llvm::DWARFDebugLine::LineTable::clear(uint64_t this)
{
  *(void *)(this + 13) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 39) = 0;
  *(void *)(this + 56) = *(void *)(this + 48);
  *(void *)(this + 80) = *(void *)(this + 72);
  *(void *)(this + 104) = *(void *)(this + 96);
  *(void *)(this + 128) = *(void *)(this + 120);
  *(void *)(this + 152) = *(void *)(this + 144);
  return this;
}

double llvm::DWARFDebugLine::LineTable::LineTable(llvm::DWARFDebugLine::LineTable *this)
{
  *(_DWORD *)this = -1;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 13) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)this = -1;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 13) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

llvm::raw_ostream *llvm::DWARFDebugLine::LineTable::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 8;
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a3;
  *(void *)&v12[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)&v13, a3 + 24);
  sub_1CC66D518((uint64_t)v14, a3 + 56);
  llvm::DWARFDebugLine::Prologue::dump(v6, a2, (uint64_t)v12);
  double result = (llvm::raw_ostream *)sub_1CD5E15A8(v12);
  if (*(void *)(a1 + 120) != *(void *)(a1 + 128))
  {
    int v9 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v9 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((void *)a2 + 4) = v9 + 1;
      unsigned char *v9 = 10;
    }
    double result = llvm::DWARFDebugLine::Row::dumpTableHeader(a2, 0);
    uint64_t v11 = *(llvm::DWARFDebugLine::Row **)(a1 + 120);
    uint64_t v10 = *(llvm::DWARFDebugLine::Row **)(a1 + 128);
    while (v11 != v10)
    {
      double result = llvm::DWARFDebugLine::Row::dump(v11, a2);
      uint64_t v11 = (llvm::DWARFDebugLine::Row *)((char *)v11 + 32);
    }
  }
  long long v8 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v8 >= *((void *)a2 + 3)) {
    return llvm::raw_ostream::write(a2, 10);
  }
  *((void *)a2 + 4) = v8 + 1;
  *long long v8 = 10;
  return result;
}

double llvm::DWARFDebugLine::ParsingState::ParsingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  char v5 = *(unsigned char *)(a1 + 37) & 0xE0;
  *(unsigned char *)(a1 + 37) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 88) = 257;
  *(void *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = a5;
  BOOL v6 = *(unsigned char *)(a2 + 35) != 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_1CD91C150;
  *(void *)(a1 + 24) = 0x1000000000001;
  *(unsigned char *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 37) = v5 | v6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  return result;
}

double llvm::DWARFDebugLine::ParsingState::resetRowAndSequence(llvm::DWARFDebugLine::ParsingState *this)
{
  BOOL v1 = *(unsigned char *)(*(void *)this + 35) != 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = xmmword_1CD91C150;
  *((void *)this + 3) = 0x1000000000001;
  *((unsigned char *)this + 36) = 0;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 37) = *((unsigned char *)this + 37) & 0xE0 | v1;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = -1;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 72) = 1;
  return result;
}

void llvm::DWARFDebugLine::ParsingState::appendRowToMatrix(llvm::DWARFDebugLine::ParsingState *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v4 = *(char **)(*(void *)this + 120);
  uint64_t v3 = *(char **)(*(void *)this + 128);
  uint64_t v5 = v3 - v4;
  unint64_t v6 = (unint64_t)(v3 - v4) >> 5;
  if (*((unsigned char *)this + 72))
  {
    *((unsigned char *)this + 72) = 0;
    *((void *)this + 5) = *((void *)this + 1);
    *((_DWORD *)this + 16) = v6;
  }
  uint64_t v7 = (_OWORD *)((char *)this + 8);
  unint64_t v8 = v2[17];
  if ((unint64_t)v3 >= v8)
  {
    uint64_t v11 = v5 >> 5;
    unint64_t v12 = (v5 >> 5) + 1;
    if (v12 >> 59) {
      goto LABEL_44;
    }
    uint64_t v13 = v8 - (void)v4;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 59) {
        goto LABEL_45;
      }
      char v15 = (char *)operator new(32 * v14);
    }
    else
    {
      char v15 = 0;
    }
    uint64_t v16 = &v15[32 * v11];
    long long v17 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)uint64_t v16 = *v7;
    *((_OWORD *)v16 + 1) = v17;
    uint64_t v10 = v16 + 32;
    if (v3 != v4)
    {
      do
      {
        long long v18 = *((_OWORD *)v3 - 2);
        *(_OWORD *)(v16 - 18) = *(_OWORD *)(v3 - 18);
        *((_OWORD *)v16 - 2) = v18;
        v16 -= 32;
        v3 -= 32;
      }
      while (v3 != v4);
      uint64_t v3 = (char *)v2[15];
    }
    v2[15] = v16;
    v2[16] = v10;
    v2[17] = &v15[32 * v14];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)uint64_t v3 = *v7;
    *((_OWORD *)v3 + 1) = v9;
    uint64_t v10 = v3 + 32;
  }
  v2[16] = v10;
  char v19 = *((unsigned char *)this + 37);
  if ((v19 & 4) != 0)
  {
    int v20 = (void *)((char *)this + 40);
    *((_DWORD *)this + 17) = v6 + 1;
    long long v21 = *(_OWORD *)((char *)this + 8);
    *((_OWORD *)this + 3) = v21;
    if (*((unsigned char *)this + 72) || *v20 >= (unint64_t)v21 || *((_DWORD *)this + 16) >= (v6 + 1)) {
      goto LABEL_42;
    }
    uint64_t v22 = *(void **)this;
    unsigned int v24 = *(char **)(*(void *)this + 152);
    unint64_t v23 = *(void *)(*(void *)this + 160);
    if ((unint64_t)v24 < v23)
    {
      long long v25 = *(_OWORD *)v20;
      long long v26 = *(_OWORD *)((char *)this + 56);
      *((void *)v24 + 4) = *((void *)this + 9);
      *(_OWORD *)unsigned int v24 = v25;
      *((_OWORD *)v24 + 1) = v26;
      char v27 = v24 + 40;
LABEL_41:
      v22[19] = v27;
      char v19 = *((unsigned char *)this + 37);
LABEL_42:
      void *v20 = 0;
      *((void *)this + 6) = 0;
      *((void *)this + 7) = -1;
      *((void *)this + 8) = 0;
      *((unsigned char *)this + 72) = 1;
      goto LABEL_43;
    }
    char v28 = (unsigned char *)v22[18];
    unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - v28) >> 3) + 1;
    if (v29 <= 0x666666666666666)
    {
      unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - (void)v28) >> 3);
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x333333333333333) {
        unint64_t v31 = 0x666666666666666;
      }
      else {
        unint64_t v31 = v29;
      }
      if (!v31)
      {
        unint64_t v32 = 0;
        goto LABEL_36;
      }
      if (v31 <= 0x666666666666666)
      {
        unint64_t v32 = (char *)operator new(40 * v31);
LABEL_36:
        uint64_t v33 = &v32[8 * ((v24 - v28) >> 3)];
        long long v34 = *(_OWORD *)((char *)this + 56);
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v20;
        *((_OWORD *)v33 + 1) = v34;
        *((void *)v33 + 4) = *((void *)this + 9);
        char v27 = v33 + 40;
        if (v24 != v28)
        {
          do
          {
            long long v35 = *(_OWORD *)(v24 - 40);
            long long v36 = *(_OWORD *)(v24 - 24);
            *(v33 - 8) = *(v24 - 8);
            *(_OWORD *)(v33 - 24) = v36;
            *(_OWORD *)(v33 - 40) = v35;
            v33 -= 40;
            v24 -= 40;
          }
          while (v24 != v28);
          unsigned int v24 = (char *)v22[18];
        }
        v22[18] = v33;
        v22[19] = v27;
        v22[20] = &v32[40 * v31];
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_41;
      }
LABEL_45:
      sub_1CB833614();
    }
LABEL_44:
    abort();
  }
LABEL_43:
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 37) = v19 & 0xE5;
}

uint64_t llvm::DWARFDebugLine::LineTable::parse@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void)@<X5>, uint64_t a7@<X6>, llvm::raw_ostream *a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10)
{
  uint64_t v13 = a3;
  uint64_t v15 = a1;
  int v17 = a10;
  v215[4] = *MEMORY[0x1E4F143B8];
  unint64_t v18 = *a3;
  unint64_t v196 = *a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = a1 + 8;
  *(void *)(a1 + 13) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(void *)(a1 + 152) = *(void *)(a1 + 144);
  long long v20 = *a2;
  long long v21 = a2[1];
  uint64_t v194 = *((void *)a2 + 4);
  v193[0] = v20;
  v193[1] = v21;
  uint64_t result = llvm::DWARFDebugLine::Prologue::parse(a1 + 8, (uint64_t)v193, a3, a4, a5, &v195);
  if (a8)
  {
    *(void *)unint64_t v201 = -1;
    *(void *)&v201[8] = 0x1040000FFFFFFFFLL;
    *(_DWORD *)&v201[16] = 0;
    uint64_t v202 = (uint64_t)&unk_1F26187D0;
    uint64_t v203 = llvm::WithColor::defaultErrorHandler;
    uint64_t v205 = &v202;
    uint64_t v206 = (uint64_t)&unk_1F26187D0;
    char v207 = llvm::WithColor::defaultWarningHandler;
    uint64_t v209 = &v206;
    *(_WORD *)&v201[20] = a10;
    *(_OWORD *)int v213 = *(_OWORD *)v201;
    *(void *)&v213[14] = *(void *)&v201[14];
    v214[0] = &unk_1F26187D0;
    v214[1] = llvm::WithColor::defaultErrorHandler;
    v215[3] = v215;
    v214[3] = v214;
    v215[0] = &unk_1F26187D0;
    v215[1] = llvm::WithColor::defaultWarningHandler;
    llvm::DWARFDebugLine::Prologue::dump(v19, a8, (uint64_t)v213);
    sub_1CD5E15A8(v213);
    uint64_t result = (uint64_t)sub_1CD5E15A8(v201);
    if (v195)
    {
      unint64_t v23 = (unsigned char *)*((void *)a8 + 4);
      if (*((unsigned char **)a8 + 3) == v23)
      {
        uint64_t result = (uint64_t)llvm::raw_ostream::write(a8, "\n", 1uLL);
      }
      else
      {
        unsigned char *v23 = 10;
        ++*((void *)a8 + 4);
      }
      goto LABEL_3;
    }
    unint64_t v18 = v196;
  }
  else if (v195)
  {
LABEL_3:
    *a9 = v195;
    return result;
  }
  uint64_t v24 = *(void *)(v15 + 8);
  uint64_t v25 = 4;
  if (*(unsigned char *)(v15 + 19) == 1) {
    uint64_t v25 = 12;
  }
  uint64_t v192 = v25 + v24;
  unint64_t v26 = v25 + v24 + v18;
  unint64_t v27 = *((void *)a2 + 1);
  if (v26 < v18 || v27 <= v26 - 1)
  {
    v188[0] = v27 - v18;
    uint64_t v160 = std::generic_category();
    sub_1CD5E5860(22, (uint64_t)v160, (uint64_t)"line table program with offset 0x%8.8llx has length 0x%8.8llx but only 0x%8.8llx bytes are available", (uint64_t *)&v196, &v192, v188);
  }
  if (v27 >= v26) {
    unint64_t v27 = v26;
  }
  BOOL v28 = *((unsigned char *)a2 + 16) != 0;
  int v29 = *((unsigned __int8 *)a2 + 17);
  v188[0] = *(void *)a2;
  v188[1] = v27;
  BOOL v189 = v28;
  unsigned __int8 v190 = v29;
  long long v191 = *(long long *)((char *)a2 + 24);
  if (!v29) {
    unsigned __int8 v190 = *(unsigned char *)(v15 + 18);
  }
  uint64_t v209 = (uint64_t *)v18;
  __int16 v210 = 257;
  char v211 = a6;
  uint64_t v212 = a7;
  BOOL v30 = *(unsigned char *)(v15 + 35) != 0;
  __n128 v31 = (__n128)xmmword_1CD91C150;
  *(_OWORD *)&v201[8] = xmmword_1CD91C150;
  *(void *)unint64_t v201 = v15;
  uint64_t v202 = 0x1000000000001;
  BYTE4(v203) = 0;
  LODWORD(v203) = 0;
  BYTE5(v203) = BYTE5(v203) & 0xE0 | v30;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  uint64_t v206 = -1;
  char v207 = 0;
  char v208 = 1;
  uint64_t v32 = 4;
  uint64_t v33 = 12;
  if (*(unsigned char *)(v15 + 19) == 1) {
    uint64_t v32 = 8;
  }
  else {
    uint64_t v33 = 4;
  }
  uint64_t v34 = *(void *)(v15 + 24) + v33 + v32;
  uint64_t v35 = v34 + 2;
  uint64_t v36 = v34 + 4;
  if (*(unsigned __int16 *)(v15 + 16) <= 4u) {
    uint64_t v36 = v35;
  }
  unint64_t v37 = v36 + v18;
  *uint64_t v13 = v36 + v18;
  unint64_t v177 = v26;
  if (a8 && v37 < v26)
  {
    uint64_t v161 = (unsigned char *)*((void *)a8 + 4);
    if ((unint64_t)v161 >= *((void *)a8 + 3))
    {
      llvm::raw_ostream::write(a8, 10);
    }
    else
    {
      *((void *)a8 + 4) = v161 + 1;
      *uint64_t v161 = 10;
    }
    if (a10) {
      uint64_t v163 = 12;
    }
    else {
      uint64_t v163 = 0;
    }
    llvm::DWARFDebugLine::Row::dumpTableHeader(a8, (llvm::raw_ostream *)v163);
    unint64_t v37 = *v13;
    unint64_t v26 = v177;
  }
  if (v37 >= v26)
  {
LABEL_298:
    if (!v208)
    {
      uint64_t v162 = std::generic_category();
      sub_1CD5E3FE8(92, (uint64_t)v162, (uint64_t)"last sequence in debug line table at offset 0x%8.8llx is not terminated", (uint64_t *)&v196);
    }
    uint64_t v156 = *(void *)(v15 + 144);
    uint64_t v157 = *(__n128 **)(v15 + 152);
    if ((__n128 *)v156 == v157)
    {
      if (a8) {
        goto LABEL_301;
      }
    }
    else
    {
      uint64_t v197 = sub_1CD5E6F04;
      sub_1CD5E79F0(v156, v157, (uint64_t (**)(long long *, long long *))&v197, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v157 - v156) >> 3)), 1, v31);
      if (a8)
      {
LABEL_301:
        uint64_t v158 = (unsigned char *)*((void *)a8 + 4);
        if (*((unsigned char **)a8 + 3) == v158)
        {
          llvm::raw_ostream::write(a8, "\n", 1uLL);
        }
        else
        {
          *uint64_t v158 = 10;
          ++*((void *)a8 + 4);
        }
      }
    }
    *a9 = 0;
    goto LABEL_307;
  }
  BOOL v175 = 0;
  uint64_t v176 = v13;
  while (1)
  {
    unint64_t v186 = v37;
    long long v187 = 0;
    if (v17)
    {
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F25FF808;
      int v198 = "0x%08.08llx: ";
      unint64_t v199 = v37;
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
      unint64_t v37 = *v13;
    }
    uint64_t v38 = sub_1CD05EA24(v188, &v186, &v187);
    unint64_t v39 = (llvm::dwarf *)v38;
    uint64_t v178 = *(void *)(v15 + 120);
    uint64_t v179 = *(void *)(v15 + 128);
    if (v187) {
      BOOL v40 = 1;
    }
    else {
      BOOL v40 = v17 == 0;
    }
    if (!v40)
    {
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F260ED30;
      int v198 = "%02.02hhx ";
      unint64_t v199 = v38;
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
    }
    if (v39) {
      break;
    }
    uint64_t v185 = 0;
    uint64_t ULEB128 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
    unint64_t v184 = v186;
    uint64_t v185 = ULEB128;
    if (!ULEB128)
    {
      int v48 = v187;
      if (v187 || !v17) {
        goto LABEL_49;
      }
      unsigned __int16 v49 = (void *)*((void *)a8 + 4);
      if (*((void *)a8 + 3) - (void)v49 > 0x28uLL)
      {
        qmemcpy(v49, "Badly formed extended line op (length 0)\n", 41);
        __n128 v31 = *(__n128 *)"e op (length 0)\n";
        *((void *)a8 + 4) += 41;
      }
      else
      {
        llvm::raw_ostream::write(a8, "Badly formed extended line op (length 0)\n", 0x29uLL);
        int v48 = v187;
LABEL_49:
        if (v48)
        {
          if (v17)
          {
            unint64_t v50 = (unsigned char *)*((void *)a8 + 4);
            if (*((unsigned char **)a8 + 3) == v50)
            {
              llvm::raw_ostream::write(a8, "\n", 1uLL);
            }
            else
            {
              *unint64_t v50 = 10;
              ++*((void *)a8 + 4);
            }
          }
          char v51 = v187;
          long long v187 = 0;
          uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))v51;
          a6(a7, &v197);
          if (v197) {
            (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(void *)v197 + 8))(v197);
          }
        }
      }
      *uint64_t v13 = v186;
      goto LABEL_188;
    }
    unsigned int v42 = sub_1CD05EA24(v188, &v186, &v187);
    unsigned int v43 = v42;
    uint64_t v173 = v186;
    if (v17)
    {
      char v44 = v42 - 1;
      if ((v42 - 1) > 3u)
      {
LABEL_172:
        if (!v187 && v17)
        {
          uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F260ED30;
          int v198 = "Unrecognized extended op 0x%02.02hhx";
          unint64_t v199 = v43;
          unint64_t v112 = llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
          uint64_t v181 = (uint64_t)&unk_1F25FF808;
          v182[0] = " length %llx";
          v182[1] = v185;
          llvm::raw_ostream::operator<<(v112, (uint64_t)&v181);
        }
        llvm::DataExtractor::skip((BOOL)v188, &v186, v185 - 1);
        goto LABEL_176;
      }
      uint64_t v45 = off_1E6849A90[v44];
      size_t v46 = qword_1CFB1B940[v44];
      std::string::size_type v47 = (void *)*((void *)a8 + 4);
      if (v46 <= *((void *)a8 + 3) - (void)v47)
      {
        memcpy(v47, v45, v46);
        *((void *)a8 + 4) += v46;
      }
      else
      {
        llvm::raw_ostream::write(a8, v45, v46);
      }
    }
    switch(v43)
    {
      case 1u:
        char v52 = BYTE5(v203) | 4;
        BYTE5(v203) |= 4u;
        if (v175) {
          goto LABEL_62;
        }
        if (v17)
        {
          uint64_t v137 = (unsigned char *)*((void *)a8 + 4);
          if (*((unsigned char **)a8 + 3) == v137)
          {
            llvm::raw_ostream::write(a8, "\n", 1uLL);
          }
          else
          {
            *uint64_t v137 = 10;
            ++*((void *)a8 + 4);
          }
          llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
        }
        else if (!a8)
        {
          goto LABEL_61;
        }
        llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v201[8], a8);
LABEL_61:
        llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)v201);
        char v52 = BYTE5(v203);
LABEL_62:
        BOOL v53 = *(unsigned char *)(*(void *)v201 + 35) != 0;
        __n128 v31 = (__n128)xmmword_1CD91C150;
        *(_OWORD *)&v201[8] = xmmword_1CD91C150;
        uint64_t v202 = 0x1000000000001;
        BYTE4(v203) = 0;
        LODWORD(v203) = 0;
        BYTE5(v203) = v52 & 0xE0 | v53;
        uint64_t v204 = 0;
        uint64_t v205 = 0;
        uint64_t v206 = -1;
        char v207 = 0;
        char v208 = 1;
        break;
      case 2u:
        int v120 = v190;
        unint64_t v121 = v185 - 1;
        uint64_t v181 = v185 - 1;
        if (v190 && v121 != v190)
        {
          unint64_t v122 = std::generic_category();
          sub_1CD5E6DF0((uint64_t)&v183, 22, (uint64_t)v122, v184, v120, v185 - 1);
        }
        if (v121 > 8 || ((1 << v121) & 0x116) == 0)
        {
          std::string::size_type v138 = std::generic_category();
          sub_1CD5E4C08(22, (uint64_t)v138, (uint64_t)"address size 0x%2.2llx of DW_LNE_set_address opcode at offset 0x%8.8llx is unsupported", &v181, (uint64_t *)&v184);
        }
        unsigned __int8 v190 = v185 - 1;
        *(void *)&v201[8] = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v188, v121, &v186, &v201[16], &v187);
        BOOL v175 = *(void *)&v201[8] == 0xFFFFFFFFFFFFFFFFLL >> (-8 * v181);
        if (v120) {
          unsigned __int8 v190 = v120;
        }
        if (!v187 && v17)
        {
          uint64_t v139 = (_WORD *)*((void *)a8 + 4);
          if (*((void *)a8 + 3) - (void)v139 > 1uLL)
          {
            *uint64_t v139 = 10272;
            *((void *)a8 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a8, " (", 2uLL);
          }
          uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F2619220;
          int v198 = "0x%*.*llx";
          LOBYTE(v199) = 2 * v181;
          BYTE1(v199) = 2 * v181;
          uint64_t v200 = *(void *)&v201[8];
          llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
          char v140 = (unsigned char *)*((void *)a8 + 4);
          if ((unint64_t)v140 >= *((void *)a8 + 3))
          {
            llvm::raw_ostream::write(a8, 41);
          }
          else
          {
            *((void *)a8 + 4) = v140 + 1;
            unsigned char *v140 = 41;
          }
        }
        break;
      case 3u:
        uint64_t v172 = a9;
        __s = (char *)llvm::DataExtractor::getCStrRef(v188, &v186, &v187);
        unint64_t v165 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
        uint64_t v123 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
        uint64_t v124 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
        uint64_t v125 = v124;
        long long v127 = *(char **)(v15 + 104);
        unint64_t v126 = *(void *)(v15 + 112);
        uint64_t v164 = v123;
        if ((unint64_t)v127 >= v126)
        {
          uint64_t v168 = a7;
          long long v131 = *(char **)(v15 + 96);
          unint64_t v132 = 0xF0F0F0F0F0F0F0F1 * ((v127 - v131) >> 3) + 1;
          if (v132 > 0x1E1E1E1E1E1E1E1) {
LABEL_324:
          }
            abort();
          unint64_t v133 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v126 - (void)v131) >> 3);
          if (2 * v133 > v132) {
            unint64_t v132 = 2 * v133;
          }
          if (v133 >= 0xF0F0F0F0F0F0F0) {
            unint64_t v134 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v134 = v132;
          }
          a9 = v172;
          if (v134)
          {
            if (v134 > 0x1E1E1E1E1E1E1E1) {
LABEL_325:
            }
              sub_1CB833614();
            uint64_t v135 = v124;
            uint64_t v136 = (char *)operator new(136 * v134);
            uint64_t v125 = v135;
          }
          else
          {
            uint64_t v136 = 0;
          }
          size_t v141 = &v136[8 * ((v127 - v131) >> 3)];
          *(_WORD *)size_t v141 = 8;
          v141[2] = 0;
          *((void *)v141 + 1) = __s;
          *((void *)v141 + 2) = 0;
          *((void *)v141 + 4) = 0;
          *((void *)v141 + 5) = 0;
          *((void *)v141 + 6) = v165;
          *((void *)v141 + 7) = v164;
          *((void *)v141 + 8) = v125;
          *((_WORD *)v141 + 44) = 0;
          v141[90] = 0;
          *((void *)v141 + 12) = 0;
          *((void *)v141 + 13) = 0;
          *((void *)v141 + 15) = 0;
          *((void *)v141 + 16) = 0;
          long long v142 = v141;
          if (v127 != v131)
          {
            do
            {
              *(_OWORD *)(v142 - 136) = *(_OWORD *)(v127 - 136);
              long long v143 = *(_OWORD *)(v127 - 120);
              long long v144 = *(_OWORD *)(v127 - 104);
              long long v145 = *(_OWORD *)(v127 - 88);
              *(_OWORD *)(v142 - 72) = *(_OWORD *)(v127 - 72);
              *(_OWORD *)(v142 - 88) = v145;
              *(_OWORD *)(v142 - 104) = v144;
              *(_OWORD *)(v142 - 120) = v143;
              __n128 v31 = *(__n128 *)(v127 - 56);
              long long v146 = *(_OWORD *)(v127 - 40);
              long long v147 = *(_OWORD *)(v127 - 24);
              *((void *)v142 - 1) = *((void *)v127 - 1);
              *(_OWORD *)(v142 - 24) = v147;
              *(_OWORD *)(v142 - 40) = v146;
              *(__n128 *)(v142 - 56) = v31;
              v142 -= 136;
              v127 -= 136;
            }
            while (v127 != v131);
            long long v127 = *(char **)(v15 + 96);
          }
          long long v128 = v141 + 136;
          *(void *)(v15 + 96) = v142;
          *(void *)(v15 + 104) = v141 + 136;
          *(void *)(v15 + 112) = &v136[136 * v134];
          if (v127)
          {
            uint64_t v148 = v125;
            operator delete(v127);
            uint64_t v125 = v148;
          }
          a7 = v168;
          uint64_t v13 = v176;
          int v17 = a10;
        }
        else
        {
          *(_WORD *)long long v127 = 8;
          v127[2] = 0;
          *((void *)v127 + 1) = __s;
          *((void *)v127 + 2) = 0;
          *((void *)v127 + 4) = 0;
          *((void *)v127 + 5) = 0;
          *((void *)v127 + 6) = v165;
          *((void *)v127 + 7) = v123;
          *((void *)v127 + 8) = v124;
          *((_WORD *)v127 + 44) = 0;
          v127[90] = 0;
          long long v128 = v127 + 136;
          *((void *)v127 + 12) = 0;
          *((void *)v127 + 13) = 0;
          *((void *)v127 + 15) = 0;
          *((void *)v127 + 16) = 0;
          a9 = v172;
        }
        *(void *)(v15 + 104) = v128;
        if (!v187 && v17)
        {
          unint64_t v169 = v125;
          uint64_t v149 = (_WORD *)*((void *)a8 + 4);
          if (*((void *)a8 + 3) - (void)v149 > 1uLL)
          {
            *uint64_t v149 = 10272;
            uint64_t v150 = (_WORD *)(*((void *)a8 + 4) + 2);
            *((void *)a8 + 4) = v150;
          }
          else
          {
            llvm::raw_ostream::write(a8, " (", 2uLL);
            uint64_t v150 = (_WORD *)*((void *)a8 + 4);
          }
          if (__s)
          {
            size_t v151 = strlen(__s);
            size_t v152 = v151;
            if (v151 <= *((void *)a8 + 3) - (void)v150)
            {
              if (v151)
              {
                memcpy(v150, __s, v151);
                uint64_t v150 = (_WORD *)(*((void *)a8 + 4) + v152);
                *((void *)a8 + 4) = v150;
              }
            }
            else
            {
              llvm::raw_ostream::write(a8, __s, v151);
              uint64_t v150 = (_WORD *)*((void *)a8 + 4);
            }
          }
          if (*((void *)a8 + 3) - (void)v150 > 5uLL)
          {
            v150[2] = 15730;
            *(_DWORD *)uint64_t v150 = 1768169516;
            *((void *)a8 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(a8, ", dir=", 6uLL);
          }
          sub_1CD098D14(a8, v165, 0, 0, 0);
          uint64_t v153 = *((void *)a8 + 4);
          if ((unint64_t)(*((void *)a8 + 3) - v153) > 0xA)
          {
            *(_DWORD *)(v153 + 7) = 1030057321;
            *(void *)uint64_t v153 = *(void *)", mod_time=";
            *((void *)a8 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a8, ", mod_time=", 0xBuLL);
          }
          uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F25FF808;
          int v198 = "(0x%16.16llx)";
          unint64_t v199 = v164;
          llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
          uint64_t v154 = *((void *)a8 + 4);
          if ((unint64_t)(*((void *)a8 + 3) - v154) > 8)
          {
            *(unsigned char *)(v154 + 8) = 61;
            *(void *)uint64_t v154 = *(void *)", length=";
            *((void *)a8 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(a8, ", length=", 9uLL);
          }
          uint64_t v56 = a8;
          unint64_t v55 = v169;
LABEL_68:
          sub_1CD098D14(v56, v55, 0, 0, 0);
          std::string::size_type v57 = (unsigned char *)*((void *)a8 + 4);
          if (*((unsigned char **)a8 + 3) == v57)
          {
            llvm::raw_ostream::write(a8, ")", 1uLL);
          }
          else
          {
            *std::string::size_type v57 = 41;
            ++*((void *)a8 + 4);
          }
        }
        break;
      case 4u:
        LODWORD(v203) = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
        if (v187 || !v17) {
          break;
        }
        unint64_t v54 = (_WORD *)*((void *)a8 + 4);
        if (*((void *)a8 + 3) - (void)v54 > 1uLL)
        {
          _WORD *v54 = 10272;
          *((void *)a8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a8, " (", 2uLL);
        }
        unint64_t v55 = v203;
        uint64_t v56 = a8;
        goto LABEL_68;
      default:
        goto LABEL_172;
    }
LABEL_176:
    unint64_t v113 = v185 + v184;
    if (!v187 && v186 != v113)
    {
      unint64_t v114 = std::generic_category();
      uint64_t v181 = v186 - v184;
      sub_1CD5E5860(92, (uint64_t)v114, (uint64_t)"unexpected line op length at offset 0x%8.8llx expected 0x%2.2llx found 0x%2.2llx", (uint64_t *)&v184, &v185, &v181);
    }
    if (v187 && v17)
    {
      uint64_t v181 = v173;
      v182[0] = 0;
      unsigned int v115 = sub_1CD05EA24(v188, (unint64_t *)&v181, v182);
      if (!v182[0])
      {
        unsigned int v116 = v115;
        uint64_t v117 = *((void *)a8 + 4);
        if ((unint64_t)(*((void *)a8 + 3) - v117) > 0x10)
        {
          *(unsigned char *)(v117 + 16) = 62;
          *(_OWORD *)uint64_t v117 = *(_OWORD *)" (<parsing error>";
          *((void *)a8 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(a8, " (<parsing error>", 0x11uLL);
        }
        unint64_t v118 = v116;
        do
        {
          uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F260ED30;
          int v198 = " %2.2hhx";
          unint64_t v199 = v118;
          llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
          unint64_t v118 = sub_1CD05EA24(v188, (unint64_t *)&v181, v182);
        }
        while (!v182[0]);
        __n128 v119 = (unsigned char *)*((void *)a8 + 4);
        if (*((unsigned char **)a8 + 3) == v119)
        {
          llvm::raw_ostream::write(a8, ")", 1uLL);
        }
        else
        {
          *__n128 v119 = 41;
          ++*((void *)a8 + 4);
        }
      }
      int v180 = (void *)v182[0];
      v182[0] = 0;
      sub_1CD4515D0(&v180);
      if (v180) {
        (*(void (**)(void *))(*v180 + 8))(v180);
      }
      if (v182[0]) {
        (*(void (**)(void))(*(void *)v182[0] + 8))(v182[0]);
      }
    }
    *uint64_t v13 = v113;
    if (v17) {
      goto LABEL_121;
    }
LABEL_181:
    long long v88 = v187;
    BOOL v89 = v187 == 0;
    if (v39)
    {
      if (v187) {
        goto LABEL_306;
      }
LABEL_183:
      if (!v89) {
        goto LABEL_186;
      }
      goto LABEL_188;
    }
    if (v187)
    {
LABEL_186:
      long long v187 = 0;
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))v88;
      a6(a7, &v197);
      if (v197) {
        (*(void (**)(BOOL (*)(uint64_t, uint64_t)))(*(void *)v197 + 8))(v197);
      }
    }
LABEL_188:
    if (v187) {
      (*(void (**)(uint64_t (*)(long long *, long long *)))(*(void *)v187 + 8))(v187);
    }
    unint64_t v37 = *v13;
    if (*v13 >= v177) {
      goto LABEL_298;
    }
  }
  if (v39 >= *(unsigned __int8 *)(v15 + 38))
  {
    unint64_t v94 = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode((llvm::DWARFDebugLine::ParsingState *)v201, v39, v37);
    if (*(unsigned char *)(*(void *)v201 + 37)) {
      signed int v95 = v93 % *(unsigned __int8 *)(*(void *)v201 + 37) + *(char *)(*(void *)v201 + 36);
    }
    else {
      signed int v95 = 0;
    }
    LODWORD(v202) = v202 + v95;
    if (v17)
    {
      uint64_t v106 = *((void *)a8 + 4);
      if ((unint64_t)(*((void *)a8 + 3) - v106) > 0xA)
      {
        *(_DWORD *)(v106 + 7) = 540879648;
        *(void *)uint64_t v106 = *(void *)"address += ";
        *((void *)a8 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a8, "address += ", 0xBuLL);
      }
      sub_1CD098D14(a8, v94, 0, 0, 0);
      uint64_t v107 = *((void *)a8 + 4);
      if ((unint64_t)(*((void *)a8 + 3) - v107) > 0xA)
      {
        *(_DWORD *)(v107 + 7) = 540879648;
        *(void *)uint64_t v107 = *(void *)",  line += ";
        *((void *)a8 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a8, ",  line += ", 0xBuLL);
      }
      unint64_t v108 = v95;
      if (v95 < 0)
      {
        unint64_t v108 = -(uint64_t)v95;
        uint64_t v109 = a8;
        int v110 = 1;
      }
      else
      {
        uint64_t v109 = a8;
        int v110 = 0;
      }
      sub_1CD098D14(v109, v108, 0, 0, v110);
      if (v175)
      {
LABEL_170:
        *uint64_t v13 = v186;
        if (v17) {
          goto LABEL_121;
        }
        goto LABEL_181;
      }
      uint64_t v111 = (unsigned char *)*((void *)a8 + 4);
      if (*((unsigned char **)a8 + 3) == v111)
      {
        llvm::raw_ostream::write(a8, "\n", 1uLL);
      }
      else
      {
        *uint64_t v111 = 10;
        ++*((void *)a8 + 4);
      }
      llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
    }
    else
    {
      if (v175) {
        goto LABEL_170;
      }
      if (!a8) {
        goto LABEL_169;
      }
    }
    llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v201[8], a8);
LABEL_169:
    llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)v201);
    goto LABEL_170;
  }
  if (v17)
  {
    uint64_t v97 = llvm::dwarf::LNStandardString(v39);
    size_t v98 = v96;
    unint64_t v99 = (void *)*((void *)a8 + 4);
    if (v96 <= *((void *)a8 + 3) - (void)v99)
    {
      if (v96)
      {
        memcpy(v99, v97, v96);
        *((void *)a8 + 4) += v98;
      }
    }
    else
    {
      llvm::raw_ostream::write(a8, v97, v96);
    }
  }
  switch((int)v39)
  {
    case 1:
      if (v175) {
        goto LABEL_120;
      }
      if (a10)
      {
        uint64_t v155 = (unsigned char *)*((void *)a8 + 4);
        if (*((unsigned char **)a8 + 3) == v155)
        {
          llvm::raw_ostream::write(a8, "\n", 1uLL);
        }
        else
        {
          *uint64_t v155 = 10;
          ++*((void *)a8 + 4);
        }
        llvm::raw_ostream::write(a8, "                                                                                ", 0xCuLL);
      }
      else if (!a8)
      {
        goto LABEL_39;
      }
      llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)&v201[8], a8);
LABEL_39:
      llvm::DWARFDebugLine::ParsingState::appendRowToMatrix((llvm::DWARFDebugLine::ParsingState *)v201);
      goto LABEL_120;
    case 2:
      uint64_t v74 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
      if (v187) {
        goto LABEL_120;
      }
      uint64_t v75 = llvm::DWARFDebugLine::ParsingState::advanceAddr((llvm::DWARFDebugLine::ParsingState *)v201, v74, (llvm::dwarf *)2, v37);
      if (!a10) {
        goto LABEL_120;
      }
      unint64_t v76 = v75;
      long long v77 = (_WORD *)*((void *)a8 + 4);
      if (*((void *)a8 + 3) - (void)v77 > 1uLL)
      {
        *long long v77 = 10272;
        *((void *)a8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a8, " (", 2uLL);
      }
      long long v78 = a8;
      unint64_t v79 = v76;
      goto LABEL_133;
    case 3:
      int SLEB128 = llvm::DataExtractor::getSLEB128(v188, (uint64_t *)&v186, &v187);
      if (v187) {
        goto LABEL_120;
      }
      LODWORD(v202) = v202 + SLEB128;
      if (!a10) {
        goto LABEL_120;
      }
      unint64_t v81 = (_WORD *)*((void *)a8 + 4);
      if (*((void *)a8 + 3) - (void)v81 > 1uLL)
      {
        _WORD *v81 = 10272;
        *((void *)a8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a8, " (", 2uLL);
      }
      unint64_t v79 = v202;
      goto LABEL_132;
    case 4:
      __int16 v82 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
      if (v187) {
        goto LABEL_120;
      }
      HIWORD(v202) = v82;
      if (!a10) {
        goto LABEL_120;
      }
      unint64_t v83 = (_WORD *)*((void *)a8 + 4);
      if (*((void *)a8 + 3) - (void)v83 > 1uLL)
      {
        _WORD *v83 = 10272;
        *((void *)a8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a8, " (", 2uLL);
      }
      unint64_t v79 = HIWORD(v202);
      goto LABEL_132;
    case 5:
      __int16 v84 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
      if (v187) {
        goto LABEL_120;
      }
      WORD2(v202) = v84;
      if (!a10) {
        goto LABEL_120;
      }
      long long v85 = (_WORD *)*((void *)a8 + 4);
      if (*((void *)a8 + 3) - (void)v85 > 1uLL)
      {
        _WORD *v85 = 10272;
        *((void *)a8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a8, " (", 2uLL);
      }
      unint64_t v79 = WORD2(v202);
      goto LABEL_132;
    case 6:
      char v86 = BYTE5(v203) ^ 1;
      goto LABEL_119;
    case 7:
      char v86 = BYTE5(v203) | 2;
      goto LABEL_119;
    case 8:
      uint64_t v129 = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode((llvm::DWARFDebugLine::ParsingState *)v201, (llvm::dwarf *)8, v37);
      if (!v17) {
        goto LABEL_120;
      }
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F25FF808;
      int v198 = " (0x%16.16llx)";
      unint64_t v199 = v129;
      goto LABEL_223;
    case 9:
      unsigned __int16 RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v188, 2, &v186, 0, &v187);
      if (v187) {
        goto LABEL_120;
      }
      *(void *)&v201[8] += RelocatedValue;
      if (!a10) {
        goto LABEL_120;
      }
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F2618A88;
      int v198 = " (0x%4.4hx)";
      unint64_t v199 = RelocatedValue;
LABEL_223:
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
      goto LABEL_120;
    case 10:
      char v86 = BYTE5(v203) | 8;
      goto LABEL_119;
    case 11:
      char v86 = BYTE5(v203) | 0x10;
LABEL_119:
      BYTE5(v203) = v86;
      goto LABEL_120;
    case 12:
      char v90 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
      if (!v187)
      {
        BYTE4(v203) = v90;
        if (a10)
        {
          long long v91 = (_WORD *)*((void *)a8 + 4);
          if (*((void *)a8 + 3) - (void)v91 > 1uLL)
          {
            *long long v91 = 10272;
            *((void *)a8 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a8, " (", 2uLL);
          }
          unint64_t v79 = BYTE4(v203);
LABEL_132:
          long long v78 = a8;
LABEL_133:
          sub_1CD098D14(v78, v79, 0, 0, 0);
          uint64_t v92 = (unsigned char *)*((void *)a8 + 4);
          if (*((unsigned char **)a8 + 3) == v92)
          {
            llvm::raw_ostream::write(a8, ")", 1uLL);
          }
          else
          {
            *uint64_t v92 = 41;
            ++*((void *)a8 + 4);
          }
        }
      }
      goto LABEL_120;
    default:
      if (v17)
      {
        uint64_t v58 = (void *)*((void *)a8 + 4);
        if (*((void *)a8 + 3) - (void)v58 > 0x1BuLL)
        {
          qmemcpy(v58, "Unrecognized standard opcode", 28);
          __n128 v31 = *(__n128 *)" standard opcode";
          *((void *)a8 + 4) += 28;
        }
        else
        {
          llvm::raw_ostream::write(a8, "Unrecognized standard opcode", 0x1CuLL);
        }
      }
      uint64_t v59 = *(void *)(v15 + 48) + v39;
      unsigned int v60 = *(unsigned __int8 *)(v59 - 1);
      if (!*(unsigned char *)(v59 - 1)) {
        goto LABEL_120;
      }
      uint64_t v167 = a7;
      unint64_t v170 = a6;
      uint64_t v174 = v15;
      uint64_t v171 = a9;
      unsigned int v61 = 0;
      long long v62 = 0;
      long long v63 = 0;
      long long v64 = 0;
      break;
  }
  while (1)
  {
    uint64_t v65 = llvm::DataExtractor::getULEB128(v188, (uint64_t *)&v186, &v187);
    if (v187) {
      break;
    }
    uint64_t v66 = v65;
    if (v63 >= v64)
    {
      uint64_t v68 = v63 - v62;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 61) {
        goto LABEL_324;
      }
      if (((char *)v64 - (char *)v62) >> 2 > v69) {
        unint64_t v69 = ((char *)v64 - (char *)v62) >> 2;
      }
      if ((unint64_t)((char *)v64 - (char *)v62) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70)
      {
        if (v70 >> 61) {
          goto LABEL_325;
        }
        uint64_t v71 = (char *)operator new(8 * v70);
      }
      else
      {
        uint64_t v71 = 0;
      }
      uint64_t v72 = (uint64_t *)&v71[8 * v68];
      uint64_t *v72 = v66;
      for (uint64_t i = v72 + 1; v63 != v62; --v72)
      {
        uint64_t v73 = *--v63;
        *(v72 - 1) = v73;
      }
      long long v64 = (uint64_t *)&v71[8 * v70];
      if (v62) {
        operator delete(v62);
      }
      long long v62 = v72;
    }
    else
    {
      uint64_t *v63 = v65;
      uint64_t i = v63 + 1;
    }
    ++v61;
    long long v63 = i;
    if (v61 >= v60) {
      goto LABEL_142;
    }
  }
  uint64_t i = v63;
LABEL_142:
  a9 = v171;
  a7 = v167;
  if (a10 && v62 != i)
  {
    uint64_t v100 = *((void *)a8 + 4);
    if ((unint64_t)(*((void *)a8 + 3) - v100) > 0xB)
    {
      *(_DWORD *)(v100 + 8) = 540701540;
      *(void *)uint64_t v100 = *(void *)" (operands: ";
      *((void *)a8 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a8, " (operands: ", 0xCuLL);
    }
    char v101 = 1;
    BOOL v102 = v62;
    do
    {
      unint64_t v103 = *v102;
      if ((v101 & 1) == 0)
      {
        long long v104 = (_WORD *)*((void *)a8 + 4);
        if (*((void *)a8 + 3) - (void)v104 > 1uLL)
        {
          *long long v104 = 8236;
          *((void *)a8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a8, ", ", 2uLL);
        }
      }
      uint64_t v197 = (BOOL (*)(uint64_t, uint64_t))&unk_1F25FF808;
      int v198 = "0x%16.16llx";
      unint64_t v199 = v103;
      llvm::raw_ostream::operator<<(a8, (uint64_t)&v197);
      char v101 = 0;
      ++v102;
    }
    while (v102 != i);
    long long v105 = (unsigned char *)*((void *)a8 + 4);
    if ((unint64_t)v105 >= *((void *)a8 + 3))
    {
      llvm::raw_ostream::write(a8, 41);
    }
    else
    {
      *((void *)a8 + 4) = v105 + 1;
      *long long v105 = 41;
    }
  }
  uint64_t v15 = v174;
  a6 = v170;
  if (v62) {
    operator delete(v62);
  }
LABEL_120:
  uint64_t v13 = v176;
  unint64_t *v176 = v186;
  int v17 = a10;
  if (!a10) {
    goto LABEL_181;
  }
LABEL_121:
  if (*(void *)(v15 + 128) - *(void *)(v15 + 120) == v179 - v178)
  {
    long long v87 = (unsigned char *)*((void *)a8 + 4);
    if (*((unsigned char **)a8 + 3) == v87)
    {
      llvm::raw_ostream::write(a8, "\n", 1uLL);
    }
    else
    {
      *long long v87 = 10;
      ++*((void *)a8 + 4);
    }
  }
  long long v88 = v187;
  BOOL v89 = v187 == 0;
  if (!v39 || !v187) {
    goto LABEL_183;
  }
  int64_t v159 = (unsigned char *)*((void *)a8 + 4);
  if (*((unsigned char **)a8 + 3) == v159)
  {
    llvm::raw_ostream::write(a8, "\n", 1uLL);
  }
  else
  {
    unsigned char *v159 = 10;
    ++*((void *)a8 + 4);
  }
LABEL_306:
  *a9 = (uint64_t)v187;
LABEL_307:
  uint64_t result = v195;
  if (v195) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v195 + 8))(v195);
  }
  return result;
}

uint64_t llvm::DWARFDebugLine::ParsingState::handleSpecialOpcode(llvm::DWARFDebugLine::ParsingState *this, llvm::dwarf *a2, uint64_t a3)
{
  uint64_t result = llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode(this, a2, a3);
  unsigned int v6 = *(unsigned __int8 *)(*(void *)this + 37);
  if (*(unsigned char *)(*(void *)this + 37)) {
    unsigned int v6 = v5 % v6 + *(char *)(*(void *)this + 36);
  }
  *((_DWORD *)this + 6) += v6;
  return result;
}

unint64_t llvm::DWARFDebugLine::LineTable::findRowInSeq(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (*(void *)(a2 + 16) != a4 || *(void *)a2 > a3 || a3 >= *(void *)(a2 + 8)) {
    return *(unsigned int *)a1;
  }
  uint64_t v7 = a1[15];
  uint64_t v8 = v7 + 32 * *(unsigned int *)(a2 + 24) + 32;
  uint64_t v9 = 32 * *(unsigned int *)(a2 + 28) - 32 - (32 * *(unsigned int *)(a2 + 24) + 32);
  if (v9)
  {
    unint64_t v10 = v9 >> 5;
    do
    {
      unint64_t v11 = v10 >> 1;
      unint64_t v12 = (unint64_t *)(v8 + 32 * (v10 >> 1));
      unint64_t v13 = v12[1];
      if (a4 >= v13)
      {
        if (v13 >= a4)
        {
          unint64_t v15 = *v12;
          unint64_t v14 = v12 + 4;
          unint64_t v16 = v10 + ~v11;
          if (a3 >= v15)
          {
            uint64_t v8 = (uint64_t)v14;
            unint64_t v11 = v16;
          }
        }
        else
        {
          uint64_t v8 = (uint64_t)(v12 + 4);
          unint64_t v11 = v10 + ~v11;
        }
      }
      unint64_t v10 = v11;
    }
    while (v11);
  }
  return (unint64_t)(v8 - v7 - 32) >> 5;
}

unint64_t llvm::DWARFDebugLine::LineTable::lookupAddress(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, a3);
  if (result == *(_DWORD *)a1 && a3 != -1)
  {
    return llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

unint64_t llvm::DWARFDebugLine::LineTable::lookupAddressImpl(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[19];
  if (v6 != v5)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
    do
    {
      unint64_t v8 = v7 >> 1;
      unint64_t v9 = v5 + 40 * (v7 >> 1);
      unint64_t v10 = *(void *)(v9 + 16);
      if (a3 >= v10)
      {
        if (v10 >= a3)
        {
          BOOL v11 = a2 < *(void *)(v9 + 8);
          unint64_t v12 = v7 + ~v8;
          uint64_t v13 = v9 + 40;
          if (!v11)
          {
            uint64_t v5 = v13;
            unint64_t v8 = v12;
          }
        }
        else
        {
          uint64_t v5 = v9 + 40;
          unint64_t v8 = v7 + ~v8;
        }
      }
      unint64_t v7 = v8;
    }
    while (v8);
  }
  if (v5 == v6 || *(void *)(v5 + 16) != a3) {
    return *(unsigned int *)a1;
  }
  else {
    return llvm::DWARFDebugLine::LineTable::findRowInSeq(a1, v5, a2, a3);
  }
}

uint64_t llvm::DWARFDebugLine::LineTable::lookupAddressRange(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(a1, a2, a3, a4, a5)) {
    return 1;
  }
  if (a3 == -1) {
    return 0;
  }

  return llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL, a4, a5);
}

uint64_t llvm::DWARFDebugLine::LineTable::lookupAddressRangeImpl(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (unint64_t *)a1[18];
  uint64_t v5 = (unint64_t *)a1[19];
  if (v6 == v5) {
    return 0;
  }
  unint64_t v9 = a1;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v5 - v6);
  do
  {
    unint64_t v11 = v10 >> 1;
    unint64_t v12 = &v6[5 * (v10 >> 1)];
    unint64_t v13 = v12[2];
    if (a3 >= v13)
    {
      if (v13 >= a3)
      {
        BOOL v14 = a2 < v12[1];
        unint64_t v15 = v10 + ~v11;
        unint64_t v16 = v12 + 5;
        if (!v14)
        {
          uint64_t v6 = v16;
          unint64_t v11 = v15;
        }
      }
      else
      {
        uint64_t v6 = v12 + 5;
        unint64_t v11 = v10 + ~v11;
      }
    }
    unint64_t v10 = v11;
  }
  while (v11);
  if (v6 == v5 || v6[2] != a3 || *v6 > a2 || a2 >= v6[1]) {
    return 0;
  }
  uint64_t v34 = a1[19];
  unint64_t v37 = a2 + a4;
  unint64_t v36 = a2 + a4 - 1;
  uint64_t v17 = (uint64_t)v6;
  while (*(void *)v17 < v37)
  {
    if ((unint64_t *)v17 == v6) {
      unsigned int RowInSeq = llvm::DWARFDebugLine::LineTable::findRowInSeq(v9, (uint64_t)v6, a2, a3);
    }
    else {
      unsigned int RowInSeq = *(_DWORD *)(v17 + 24);
    }
    unsigned int v19 = llvm::DWARFDebugLine::LineTable::findRowInSeq(v9, v17, v36, a3);
    if (v19 == *(_DWORD *)v9) {
      unsigned int v20 = *(_DWORD *)(v17 + 28) - 1;
    }
    else {
      unsigned int v20 = v19;
    }
    if (RowInSeq <= v20)
    {
      long long v21 = *(unsigned int **)(a5 + 8);
      do
      {
        unint64_t v22 = *(void *)(a5 + 16);
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v24 = *(unsigned int **)a5;
          uint64_t v25 = ((uint64_t)v21 - *(void *)a5) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            abort();
          }
          uint64_t v27 = v22 - (void)v24;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 >> 62) {
              sub_1CB833614();
            }
            int v29 = (char *)operator new(4 * v28);
          }
          else
          {
            int v29 = 0;
          }
          BOOL v30 = (unsigned int *)&v29[4 * v25];
          *BOOL v30 = RowInSeq;
          unint64_t v23 = v30 + 1;
          while (v21 != v24)
          {
            unsigned int v31 = *--v21;
            *--BOOL v30 = v31;
          }
          *(void *)a5 = v30;
          *(void *)(a5 + 8) = v23;
          *(void *)(a5 + 16) = &v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          unsigned int *v21 = RowInSeq;
          unint64_t v23 = v21 + 1;
        }
        *(void *)(a5 + 8) = v23;
        ++RowInSeq;
        long long v21 = v23;
      }
      while (RowInSeq <= v20);
    }
    v17 += 40;
    uint64_t result = 1;
    unint64_t v9 = a1;
    if (v17 == v34) {
      return result;
    }
  }
  return 1;
}

void *llvm::DWARFDebugLine::LineTable::getSourceByIndex@<X0>(void *result@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_16;
  }
  if (*((unsigned __int16 *)result + 8) >= 5u)
  {
    uint64_t v5 = result[12];
    if (0xF0F0F0F0F0F0F0F1 * ((result[13] - v5) >> 3) > a2)
    {
      uint64_t v6 = v5 + 136 * a2;
      goto LABEL_8;
    }
LABEL_16:
    char v11 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_17;
  }
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v7 = result[12];
  if (0xF0F0F0F0F0F0F0F1 * ((result[13] - v7) >> 3) < a2) {
    goto LABEL_16;
  }
  uint64_t v6 = v7 + 136 * a2 - 136;
LABEL_8:
  long long v8 = *(_OWORD *)(v6 + 104);
  v13[0] = *(_OWORD *)(v6 + 88);
  v13[1] = v8;
  v13[2] = *(_OWORD *)(v6 + 120);
  char v14 = 1;
  uint64_t result = llvm::DWARFFormValue::getAsCString((llvm *)v13, (uint64_t)&v16);
  char v9 = v17;
  if (v17)
  {
    unint64_t v12 = v16;
    unint64_t v16 = 0;
    unint64_t v15 = v12;
    sub_1CD4515D0(&v15);
    uint64_t result = v15;
    if (v15) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v15 + 8))(v15);
    }
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = (const char *)v16;
  }
  if (v17)
  {
    uint64_t result = v16;
    unint64_t v16 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  if (v9) {
    goto LABEL_16;
  }
  if (v10) {
    uint64_t result = (void *)strlen(v10);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = result;
  char v11 = 1;
LABEL_17:
  *(unsigned char *)(a4 + 16) = v11;
  return result;
}

void *sub_1CC694498(llvm *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 48)) {
    return 0;
  }
  llvm::DWARFFormValue::getAsCString(a1, (uint64_t)&v5);
  if (v6)
  {
    uint64_t v4 = v5;
    uint64_t v5 = 0;
    sub_1CD4515D0(&v4);
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
    BOOL v1 = 0;
  }
  else
  {
    BOOL v1 = v5;
  }
  if (v6)
  {
    uint64_t v2 = v5;
    uint64_t v5 = 0;
    if (v2) {
      (*(void (**)(void *))(*v2 + 8))(v2);
    }
  }
  return v1;
}

uint64_t llvm::DWARFDebugLine::LineTable::getFileLineInfoForAddress(void *a1, unint64_t a2, unint64_t a3, const char *a4, int a5, uint64_t a6)
{
  unsigned int v12 = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, a3);
  if (v12 == *(_DWORD *)a1 && a3 != -1) {
    unsigned int v12 = llvm::DWARFDebugLine::LineTable::lookupAddressImpl(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  }
  if (v12 == -1) {
    return 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = a1[15];
  uint64_t v17 = v16 + 32 * v12;
  unsigned int v20 = *(unsigned __int16 *)(v17 + 22);
  unsigned int v19 = (unsigned __int16 *)(v17 + 22);
  unint64_t v18 = v20;
  if (a4) {
    size_t v21 = strlen(a4);
  }
  else {
    size_t v21 = 0;
  }
  int FileNameByIndex = llvm::DWARFDebugLine::Prologue::getFileNameByIndex((uint64_t)(a1 + 1), v18, (uint64_t)a4, v21, a5, a6, 0);
  uint64_t result = 0;
  if (FileNameByIndex)
  {
    uint64_t v23 = v16 + 32 * v15;
    *(_DWORD *)(a6 + 96) = *(_DWORD *)(v23 + 16);
    *(_DWORD *)(a6 + 100) = *(unsigned __int16 *)(v23 + 20);
    *(_DWORD *)(a6 + 128) = *(_DWORD *)(v23 + 24);
    llvm::DWARFDebugLine::LineTable::getSourceByIndex(a1, *v19, a5, (uint64_t)&v24);
    *(_OWORD *)(a6 + 72) = v24;
    *(void *)(a6 + 88) = v25;
    return 1;
  }
  return result;
}

uint64_t llvm::DWARFDebugLine::SectionParser::SectionParser(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DWARFUnit **a4, llvm::DWARFUnit **a5)
{
  *(void *)(a1 + 8) = 0;
  char v6 = (void **)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = &v28;
  if (a4 == a5)
  {
    uint64_t v23 = 0;
  }
  else
  {
    long long v8 = a4;
    do
    {
      char v9 = *v8;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v8, 1);
      unint64_t v10 = (llvm::DWARFUnit *)*((void *)v9 + 36);
      char v11 = (llvm::DWARFUnit *)*((void *)v9 + 37);
      BOOL v12 = v10 == v11;
      if (v10 == v11) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = v9;
      }
      if (v12) {
        unint64_t v10 = 0;
      }
      v33[0] = v13;
      v33[1] = v10;
      if (v13) {
        BOOL v14 = v10 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (!v14)
      {
        llvm::DWARFDie::find(v33, 16, &v30);
        if (v32 && (llvm::DWARFFormValue::isFormClass(&v30, 8) & 1) != 0)
        {
          uint64_t v15 = v31;
          uint64_t v16 = *v8;
          uint64_t v17 = &v28;
          unint64_t v18 = &v28;
          unsigned int v19 = v28;
          if (v28)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v18 = (uint64_t **)v19;
                unint64_t v20 = v19[4];
                if (v20 <= v31) {
                  break;
                }
                unsigned int v19 = *v18;
                uint64_t v17 = v18;
                if (!*v18) {
                  goto LABEL_24;
                }
              }
              if (v20 >= v31) {
                break;
              }
              unsigned int v19 = v18[1];
              if (!v19)
              {
                uint64_t v17 = v18 + 1;
                goto LABEL_24;
              }
            }
          }
          else
          {
LABEL_24:
            size_t v21 = (uint64_t *)operator new(0x30uLL);
            v21[4] = v15;
            v21[5] = (uint64_t)v16;
            uint64_t *v21 = 0;
            v21[1] = 0;
            void v21[2] = (uint64_t)v18;
            *uint64_t v17 = v21;
            if (*v27)
            {
              uint64_t v27 = (uint64_t **)*v27;
              unint64_t v22 = *v17;
            }
            else
            {
              unint64_t v22 = v21;
            }
            sub_1CB8358B8(v28, v22);
            ++v29;
          }
        }
      }
      ++v8;
    }
    while (v8 != a5);
    uint64_t v23 = *v6;
  }
  sub_1CC1B4328(a1, v23);
  long long v24 = v28;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v24;
  uint64_t v25 = v29;
  *(void *)(a1 + 16) = v29;
  if (v25)
  {
    void v24[2] = (uint64_t)v6;
    uint64_t v27 = &v28;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    long long v24 = 0;
  }
  else
  {
    *(void *)a1 = v6;
  }
  sub_1CC1B4328((uint64_t)&v27, v24);
  if (*(void *)(*(void *)(a1 + 24) + 8) <= *(void *)(a1 + 40)) {
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t llvm::DWARFDebugLine::SectionParser::parseNext@<X0>(uint64_t a1@<X0>, void (*a2)(void, void)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t *)@<X3>, uint64_t a5@<X4>, llvm::raw_ostream *a6@<X5>, unsigned __int8 a7@<W6>, uint64_t a8@<X8>)
{
  BOOL v14 = (unint64_t *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void **)(a1 + 8);
  if (!v16) {
    goto LABEL_12;
  }
  uint64_t v17 = (void *)(a1 + 8);
  do
  {
    unint64_t v18 = v16[4];
    BOOL v19 = v18 >= v15;
    if (v18 >= v15) {
      unint64_t v20 = v16;
    }
    else {
      unint64_t v20 = v16 + 1;
    }
    if (v19) {
      uint64_t v17 = v16;
    }
    uint64_t v16 = (void *)*v20;
  }
  while (*v20);
  if (v17 != (void *)(a1 + 8) && v17[4] <= v15)
  {
    uint64_t v21 = v17[5];
    uint64_t v24 = a1 + 24;
    uint64_t v23 = *(void *)(a1 + 24);
    if (v21) {
      char v22 = *(unsigned char *)(v21 + 34);
    }
    else {
      char v22 = 0;
    }
  }
  else
  {
LABEL_12:
    uint64_t v21 = 0;
    char v22 = 0;
    uint64_t v24 = a1 + 24;
    uint64_t v23 = *(void *)(a1 + 24);
  }
  *(unsigned char *)(v23 + 17) = v22;
  *(_DWORD *)a8 = -1;
  *(void *)(a8 + 8) = 0;
  uint64_t v25 = (void *)(a8 + 8);
  *(void *)(a8 + 13) = 0;
  *(void *)(a8 + 24) = 0;
  *(void *)(a8 + 32) = 0;
  *(_DWORD *)(a8 + 39) = 0;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 144) = 0u;
  *(void *)(a8 + 160) = 0;
  uint64_t result = llvm::DWARFDebugLine::LineTable::parse(a8, (long long *)v23, v14, *(void *)(a1 + 32), v21, a2, a3, a6, &v29, a7);
  if (v29)
  {
    uint64_t v30 = v29;
    a4(a5, &v30);
    uint64_t result = v30;
    if (v30) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
  if (!*v25) {
    goto LABEL_20;
  }
  uint64_t v27 = 4;
  if (*(unsigned char *)(a8 + 19) == 1) {
    uint64_t v27 = 12;
  }
  unint64_t v28 = *v25 + v15 + v27;
  *BOOL v14 = v28;
  if (*(void *)(*(void *)v24 + 8) <= v28) {
LABEL_20:
  }
    *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t llvm::DWARFDebugLine::SectionParser::prepareToParse(llvm::DWARFDebugLine::SectionParser *this, unint64_t a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = (void *)((char *)this + 8);
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      char v6 = v2;
    }
    else {
      char v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = (void *)*v6;
  }
  while (*v6);
  if (v3 != (void *)((char *)this + 8) && v3[4] <= a2)
  {
    uint64_t v7 = v3[5];
    uint64_t v9 = *((void *)this + 3);
    if (v7) {
      char v8 = *(unsigned char *)(v7 + 34);
    }
    else {
      char v8 = 0;
    }
  }
  else
  {
LABEL_12:
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = *((void *)this + 3);
  }
  *(unsigned char *)(v9 + 17) = v8;
  return v7;
}

uint64_t llvm::DWARFDebugLine::SectionParser::moveToNextTable(uint64_t this, uint64_t a2, const llvm::DWARFDebugLine::Prologue *a3)
{
  if (!*(void *)a3) {
    goto LABEL_5;
  }
  uint64_t v3 = 4;
  if (*((unsigned char *)a3 + 11) == 1) {
    uint64_t v3 = 12;
  }
  unint64_t v4 = *(void *)a3 + a2 + v3;
  *(void *)(this + 40) = v4;
  if (*(void *)(*(void *)(this + 24) + 8) <= v4) {
LABEL_5:
  }
    *(unsigned char *)(this + 48) = 1;
  return this;
}

void *llvm::DWARFDebugLine::SectionParser::skip(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t *), uint64_t a5)
{
  char v8 = (unint64_t *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void **)(a1 + 8);
  if (!v10) {
    goto LABEL_12;
  }
  char v11 = (void *)(a1 + 8);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      BOOL v14 = v10;
    }
    else {
      BOOL v14 = v10 + 1;
    }
    if (v13) {
      char v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != (void *)(a1 + 8) && v11[4] <= v9)
  {
    uint64_t v15 = v11[5];
    uint64_t v18 = a1 + 24;
    uint64_t v17 = *(long long **)(a1 + 24);
    if (v15) {
      char v16 = *(unsigned char *)(v15 + 34);
    }
    else {
      char v16 = 0;
    }
  }
  else
  {
LABEL_12:
    uint64_t v15 = 0;
    char v16 = 0;
    uint64_t v18 = a1 + 24;
    uint64_t v17 = *(long long **)(a1 + 24);
  }
  *((unsigned char *)v17 + 17) = v16;
  LODWORD(v28) = -1;
  memset(v29, 0, 13);
  v29[2] = 0;
  v30[0] = 0;
  *(_DWORD *)((char *)v30 + 7) = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  long long v19 = *v17;
  long long v20 = v17[1];
  uint64_t v26 = *((void *)v17 + 4);
  v25[0] = v19;
  v25[1] = v20;
  llvm::DWARFDebugLine::Prologue::parse((uint64_t)v29, (uint64_t)v25, v8, *(void *)(a1 + 32), v15, &v27);
  uint64_t v21 = v27;
  if (v27)
  {
    uint64_t v27 = 0;
    uint64_t v39 = v21;
    a4(a5, &v39);
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  if (!v29[0]) {
    goto LABEL_22;
  }
  uint64_t v22 = 4;
  if (BYTE3(v29[1]) == 1) {
    uint64_t v22 = 12;
  }
  unint64_t v23 = v29[0] + v9 + v22;
  *char v8 = v23;
  if (*(void *)(*(void *)v18 + 8) <= v23) {
LABEL_22:
  }
    *(unsigned char *)(a1 + 48) = 1;
  return sub_1CD5E35A8(&v28);
}

uint64_t sub_1CC694CE4(uint64_t a1, uint64_t *a2, unint64_t *a3, unsigned char *a4)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  uint64_t v24 = v26;
  uint64_t v25 = 0x400000000;
  int v8 = sub_1CD05EA24(a2, a3, &v22);
  if (!v8 || v22)
  {
    if (!v22) {
      goto LABEL_26;
    }
LABEL_32:
    uint64_t v17 = std::generic_category();
    uint64_t v20 = v22;
    uint64_t v22 = 0;
    sub_1CD4FB504(&v20, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unint64_t v23 = (const char *)p_p;
    sub_1CD5E3960(22, (uint64_t)v17, (uint64_t)"failed to parse entry content descriptors: %s", (uint64_t *)&v23);
  }
  uint64_t v19 = a1;
  char v9 = 0;
  int v10 = v8 - 1;
  do
  {
    int ULEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v22);
    unsigned __int16 v12 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v22);
    if (!a4) {
      goto LABEL_13;
    }
    if (ULEB128 > 4)
    {
      BOOL v13 = a4 + 2;
      if (ULEB128 != 5)
      {
        if (ULEB128 != 8193) {
          goto LABEL_13;
        }
        BOOL v13 = a4 + 3;
      }
LABEL_12:
      *BOOL v13 = 1;
      goto LABEL_13;
    }
    BOOL v13 = a4;
    if (ULEB128 == 3) {
      goto LABEL_12;
    }
    BOOL v13 = a4 + 1;
    if (ULEB128 == 4) {
      goto LABEL_12;
    }
LABEL_13:
    if (v25 >= (unint64_t)HIDWORD(v25)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v9 |= ULEB128 == 1;
    *((void *)v24 + v25) = ULEB128 | ((unint64_t)v12 << 32);
    unsigned int v14 = v25 + 1;
    LODWORD(v25) = v25 + 1;
    if (!v10) {
      break;
    }
    --v10;
  }
  while (!v22);
  if (v22) {
    goto LABEL_32;
  }
  if ((v9 & 1) == 0)
  {
LABEL_26:
    __p.__r_.__value_.__r.__words[0] = 22;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
    unint64_t v23 = "failed to parse entry content descriptions because no path was found";
    sub_1CD06481C();
  }
  *(unsigned char *)(v19 + 48) &= ~1u;
  *(void *)uint64_t v19 = v19 + 16;
  *(void *)(v19 + 8) = 0x400000000;
  if (&v24 != (void **)v19 && v14)
  {
    if (v24 == v26)
    {
      if (v14 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(v19 + 16), v26, 8 * v14);
      *(_DWORD *)(v19 + 8) = v14;
    }
    else
    {
      *(void *)uint64_t v19 = v24;
      int v15 = HIDWORD(v25);
      *(_DWORD *)(v19 + 8) = v14;
      *(_DWORD *)(v19 + 12) = v15;
      uint64_t v24 = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
  }
  if (v24 != v26) {
    free(v24);
  }
  uint64_t result = v22;
  if (v22) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  return result;
}

uint64_t sub_1CC695088(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 4);
      long long v11 = *a1;
      long long v12 = a1[1];
      char v13 = *((unsigned char *)a3 + 32);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((unsigned char *)a1 + 32) = v13;
    }
    else
    {
      uint64_t v25 = *((void *)a1 + 4);
      long long v26 = *a1;
      long long v27 = a1[1];
      char v28 = *((unsigned char *)a2 + 32);
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((unsigned char *)a1 + 32) = v28;
      *a2 = v26;
      a2[1] = v27;
      *((unsigned char *)a2 + 32) = v25;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 4);
      long long v11 = *a2;
      long long v12 = a2[1];
      char v30 = *((unsigned char *)a3 + 32);
      long long v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((unsigned char *)a2 + 32) = v30;
    }
    *a3 = v11;
    a3[1] = v12;
    *((unsigned char *)a3 + 32) = v10;
  }
  else if (result)
  {
    uint64_t v15 = *((void *)a2 + 4);
    long long v16 = *a2;
    long long v17 = a2[1];
    char v18 = *((unsigned char *)a3 + 32);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((unsigned char *)a2 + 32) = v18;
    *a3 = v16;
    a3[1] = v17;
    *((unsigned char *)a3 + 32) = v15;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v20 = *((void *)a1 + 4);
      long long v21 = *a1;
      long long v22 = a1[1];
      char v23 = *((unsigned char *)a2 + 32);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((unsigned char *)a1 + 32) = v23;
      *a2 = v21;
      a2[1] = v22;
      *((unsigned char *)a2 + 32) = v20;
    }
  }
  return result;
}

long long *sub_1CC6951C4(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  unint64_t v4 = a2;
  long long v6 = a1[1];
  long long v22 = *a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if ((*a3)(&v22, (long long *)((char *)a2 - 40)))
  {
    uint64_t v7 = a1;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (((*a3)(&v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = (long long *)((char *)a1 + 40);
    do
    {
      uint64_t v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v22, v8);
      char v8 = (long long *)((char *)v7 + 40);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      unint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *v7;
    long long v11 = v7[1];
    uint64_t v27 = *((void *)v7 + 4);
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *v4;
    long long v13 = v4[1];
    *((unsigned char *)v7 + 32) = *((unsigned char *)v4 + 32);
    long long *v7 = v12;
    v7[1] = v13;
    long long v14 = v25;
    long long v15 = v26;
    *((unsigned char *)v4 + 32) = v27;
    long long *v4 = v14;
    v4[1] = v15;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (!(*a3)(&v22, v7));
    do
      unint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  long long v16 = (long long *)((char *)v7 - 40);
  if ((long long *)((char *)v7 - 40) != a1)
  {
    long long v17 = *v16;
    long long v18 = *(long long *)((char *)v7 - 24);
    *((unsigned char *)a1 + 32) = *((unsigned char *)v7 - 8);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *((unsigned char *)v7 - 8) = v24;
  *long long v16 = v19;
  *(long long *)((char *)v7 - 24) = v20;
  return v7;
}

uint64_t sub_1CC695324(long long *a1, char *a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while (((*a3)((char *)a1 + v6, &v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)(a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    long long v10 = (long long *)((char *)a1 + v6);
    long long v11 = (long long *)a2;
    do
    {
      long long v13 = v10[1];
      long long v25 = *v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *((void *)v10 + 4);
      char v14 = v27;
      long long v16 = *v11;
      long long v15 = v11[1];
      *((unsigned char *)v10 + 32) = *((unsigned char *)v11 + 32);
      *long long v10 = v16;
      v10[1] = v15;
      *((unsigned char *)v11 + 32) = v14;
      *long long v11 = v12;
      v11[1] = v13;
      do
        long long v10 = (long long *)((char *)v10 + 40);
      while (((*a3)((char *)v10, &v22) & 1) != 0);
      do
        long long v11 = (long long *)((char *)v11 - 40);
      while (!(*a3)((char *)v11, &v22));
    }
    while (v10 < v11);
    uint64_t v9 = (uint64_t)v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((unsigned char *)a1 + 32) = *(unsigned char *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(unsigned char *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_1CC695484(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      long long v10 = *(_OWORD *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      char v12 = *(unsigned char *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(unsigned char *)(a1 + 32) = v12;
      *unint64_t v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      BOOL result = 1;
      *(unsigned char *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1CC695088((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1CC69569C(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1CC695788(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      char v14 = (long long *)(a1 + 80);
      sub_1CC695088((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(unsigned char *)(v20 + 152) = *(unsigned char *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(unsigned char *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    char v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC69569C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1CC695088((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 32);
    long long v12 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    char v14 = *(unsigned char *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 32) = v14;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v13;
    *(unsigned char *)(a4 + 32) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v16 = *(void *)(a2 + 32);
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      char v19 = *(unsigned char *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(unsigned char *)(a2 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      *(unsigned char *)(a3 + 32) = v16;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        __n128 result = *(__n128 *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        char v23 = *(unsigned char *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(unsigned char *)(a1 + 32) = v23;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v22;
        *(unsigned char *)(a2 + 32) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1CC695788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1CC69569C(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 32);
    long long v15 = *(_OWORD *)a4;
    long long v16 = *(_OWORD *)(a4 + 16);
    char v17 = *(unsigned char *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(unsigned char *)(a4 + 32) = v17;
    *(_OWORD *)a5 = v15;
    *(_OWORD *)(a5 + 16) = v16;
    *(unsigned char *)(a5 + 32) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v19 = *(void *)(a3 + 32);
      long long v20 = *(_OWORD *)a3;
      long long v21 = *(_OWORD *)(a3 + 16);
      char v22 = *(unsigned char *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(unsigned char *)(a3 + 32) = v22;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v21;
      *(unsigned char *)(a4 + 32) = v19;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v24 = *(void *)(a2 + 32);
        __n128 v25 = *(__n128 *)a2;
        long long v26 = *(_OWORD *)(a2 + 16);
        char v27 = *(unsigned char *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(unsigned char *)(a2 + 32) = v27;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v26;
        *(unsigned char *)(a3 + 32) = v24;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          long long v30 = *(_OWORD *)(a1 + 16);
          char v31 = *(unsigned char *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(unsigned char *)(a1 + 32) = v31;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v30;
          *(unsigned char *)(a2 + 32) = v29;
        }
      }
    }
  }
  return result;
}

void sub_1CC6958B4(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v48 = v5;
    uint64_t v49 = v6;
    uint64_t v9 = a2;
    uint64_t v11 = (uint64_t)a2 - a1;
    uint64_t v12 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v13 = (unint64_t)(v12 - 2) >> 1;
      unint64_t v14 = v13 + 1;
      long long v15 = (__n128 *)(a1 + 40 * v13);
      do
      {
        a5 = sub_1CC695B48(a1, a4, v12, v15);
        long long v15 = (__n128 *)((char *)v15 - 40);
        --v14;
      }
      while (v14);
    }
    if (v9 != a3)
    {
      long long v16 = v9;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v16, a1, a5))
        {
          unint64_t v17 = v16[2].n128_u64[0];
          __n128 v18 = *v16;
          __n128 v19 = v16[1];
          unsigned __int8 v20 = *(unsigned char *)(a1 + 32);
          __n128 v21 = *(__n128 *)(a1 + 16);
          *long long v16 = *(__n128 *)a1;
          v16[1] = v21;
          v16[2].n128_u8[0] = v20;
          *(__n128 *)a1 = v18;
          *(__n128 *)(a1 + 16) = v19;
          *(unsigned char *)(a1 + 32) = v17;
          a5 = sub_1CC695B48(a1, a4, v12, (__n128 *)a1);
        }
        long long v16 = (__n128 *)((char *)v16 + 40);
      }
      while (v16 != a3);
    }
    if (v11 >= 41)
    {
      do
      {
        char v41 = v9;
        uint64_t v22 = 0;
        __n128 v42 = *(__n128 *)a1;
        __n128 v43 = *(__n128 *)(a1 + 16);
        uint64_t v44 = *(void *)(a1 + 32);
        uint64_t v23 = a1;
        do
        {
          uint64_t v24 = v23 + 40 * v22 + 40;
          uint64_t v25 = (2 * v22) | 1;
          uint64_t v26 = 2 * v22 + 2;
          if (v26 < v12 && (*a4)(v23 + 40 * v22 + 40, v23 + 40 * v22 + 80))
          {
            v24 += 40;
            uint64_t v25 = v26;
          }
          long long v27 = *(_OWORD *)v24;
          long long v28 = *(_OWORD *)(v24 + 16);
          *(unsigned char *)(v23 + 32) = *(unsigned char *)(v24 + 32);
          *(_OWORD *)uint64_t v23 = v27;
          *(_OWORD *)(v23 + 16) = v28;
          uint64_t v23 = v24;
          uint64_t v22 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        uint64_t v9 = (__n128 *)((char *)v41 - 40);
        if ((__int8 *)v24 == &v41[-3].n128_i8[8])
        {
          *(unsigned char *)(v24 + 32) = v44;
          *(__n128 *)uint64_t v24 = v42;
          *(__n128 *)(v24 + 16) = v43;
        }
        else
        {
          __n128 v29 = *v9;
          long long v30 = *(long long *)((char *)&v41[-2] + 8);
          *(unsigned char *)(v24 + 32) = v41[-1].n128_u8[8];
          *(__n128 *)uint64_t v24 = v29;
          *(_OWORD *)(v24 + 16) = v30;
          __n128 *v9 = v42;
          *(__n128 *)((char *)v41 - 24) = v43;
          v41[-1].n128_u8[8] = v44;
          uint64_t v31 = v24 - a1 + 40;
          if (v31 >= 41)
          {
            unint64_t v32 = (v31 / 0x28uLL - 2) >> 1;
            int64_t v33 = a1 + 40 * v32;
            if ((*a4)(v33, v24))
            {
              long long v34 = *(_OWORD *)v24;
              long long v35 = *(_OWORD *)(v24 + 16);
              uint64_t v47 = *(void *)(v24 + 32);
              long long v45 = v34;
              long long v46 = v35;
              do
              {
                uint64_t v36 = v33;
                long long v37 = *(_OWORD *)v33;
                long long v38 = *(_OWORD *)(v33 + 16);
                *(unsigned char *)(v24 + 32) = *(unsigned char *)(v33 + 32);
                *(_OWORD *)uint64_t v24 = v37;
                *(_OWORD *)(v24 + 16) = v38;
                if (!v32) {
                  break;
                }
                unint64_t v32 = (v32 - 1) >> 1;
                int64_t v33 = a1 + 40 * v32;
                uint64_t v24 = v36;
              }
              while ((((uint64_t (*)(int64_t, long long *))*a4)(v33, &v45) & 1) != 0);
              long long v39 = v46;
              *(_OWORD *)uint64_t v36 = v45;
              *(_OWORD *)(v36 + 16) = v39;
              *(unsigned char *)(v36 + 32) = v47;
            }
          }
        }
      }
      while (v12-- > 2);
    }
  }
}

__n128 sub_1CC695B48(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, (uint64_t)v13 + 40))
      {
        unint64_t v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          unint64_t v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u8[0] = *((unsigned char *)v13 + 32);
          __n128 *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          unint64_t v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if ((*a2)(a1 + 40 * v20, (uint64_t)v13 + 40))
            {
              unint64_t v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          long long v7 = v17;
          int64_t v12 = v20;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u8[0] = v25;
        *unint64_t v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFLocationTable::visitAbsoluteLocationList(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v13[0] = a5;
  v13[1] = a6;
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  uint64_t v12 = a2;
  long long v7 = (void *)a4[3];
  if (!v7)
  {
    long long v15 = 0;
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    goto LABEL_5;
  }
  if (v7 != a4)
  {
    long long v15 = (void *)a4[3];
    a4[3] = 0;
    long long v16 = v10;
    uint64_t v17 = v11;
    goto LABEL_7;
  }
  long long v15 = v14;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v14);
  long long v7 = v15;
  long long v16 = v10;
  uint64_t v17 = v11;
  if (!v15)
  {
LABEL_5:
    long long v19 = 0;
    goto LABEL_9;
  }
LABEL_7:
  if (v7 == v14)
  {
    long long v19 = v18;
    (*(void (**)(void *, void *))(v14[0] + 24))(v14, v18);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
    }
  }
  else
  {
    long long v19 = v7;
    long long v15 = 0;
  }
LABEL_9:
  v9[0] = &v16;
  v9[1] = v13;
  (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t *, uint64_t), void *))(*(void *)a1 + 16))(a1, &v12, sub_1CC696F5C, v9);
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

void *llvm::DWARFDebugLoc::dump(void *result, llvm::raw_ostream *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = (uint64_t)result;
  v30[4] = *MEMORY[0x1E4F143B8];
  v24[0] = a6;
  v24[1] = a7;
  if ((_BYTE)a7)
  {
    LOBYTE(v22) = 0;
    char v23 = 0;
    *(_OWORD *)long long v28 = *(_OWORD *)a5;
    *(void *)&v28[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)&v29, a5 + 24);
    sub_1CC66D518((uint64_t)v30, a5 + 56);
    LODWORD(v17) = 12;
    llvm::DWARFLocationTable::dumpLocationList(v10, v24, this, &v22, a3, a4, 0, (uint64_t)v28, v17);
    return sub_1CD5E15A8(v28);
  }
  else
  {
    uint64_t v11 = 0;
    size_t v12 = 0;
    unint64_t v21 = 0;
    char v13 = 1;
    do
    {
      if (*(void *)(v10 + 16) <= v21) {
        break;
      }
      int64_t v14 = (void *)*((void *)this + 4);
      if (v12 <= *((void *)this + 3) - (void)v14)
      {
        if ((v13 & 1) == 0)
        {
          memcpy(v14, v11, v12);
          *((void *)this + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v11, v12);
      }
      LOBYTE(v19) = 0;
      char v20 = 0;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)a5;
      *(void *)&v25[14] = *(void *)(a5 + 14);
      sub_1CC66D518((uint64_t)&v26, a5 + 24);
      sub_1CC66D518((uint64_t)&v27, a5 + 56);
      LODWORD(v17) = 12;
      char v15 = llvm::DWARFLocationTable::dumpLocationList(v10, (uint64_t *)&v21, this, &v19, a3, a4, 0, (uint64_t)v25, v17);
      uint64_t result = sub_1CD5E15A8(v25);
      long long v16 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v16 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((void *)this + 4) = v16 + 1;
        *long long v16 = 10;
      }
      char v13 = 0;
      uint64_t v11 = "\n";
      size_t v12 = 1;
    }
    while ((v15 & 1) != 0);
  }
  return result;
}

double llvm::DWARFDebugLoclists::dumpRange(uint64_t a1, unint64_t a2, uint64_t a3, llvm::raw_ostream *this, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v30[5] = *MEMORY[0x1E4F143B8];
  unint64_t v8 = a3 + a2;
  if (__CFADD__(a3, a2) || *(void *)(a1 + 16) <= v8 - 1)
  {
    uint64_t v22 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v22) > 0x12)
    {
      *(_DWORD *)(v22 + 15) = 174417774;
      double result = *(double *)"Invalid dump range\n";
      *(_OWORD *)uint64_t v22 = *(_OWORD *)"Invalid dump range\n";
      *((void *)this + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(this, "Invalid dump range\n", 0x13uLL);
    }
  }
  else
  {
    int64_t v14 = 0;
    size_t v15 = 0;
    unint64_t v27 = a2;
    uint64_t v24 = a7 + 24;
    uint64_t v16 = a7 + 56;
    char v17 = 1;
    do
    {
      if (v27 >= v8) {
        break;
      }
      __n128 v18 = (void *)*((void *)this + 4);
      if (v15 <= *((void *)this + 3) - (void)v18)
      {
        if ((v17 & 1) == 0)
        {
          memcpy(v18, v14, v15);
          *((void *)this + 4) += v15;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v14, v15);
      }
      LOBYTE(v25) = 0;
      char v26 = 0;
      *(_OWORD *)long long v28 = *(_OWORD *)a7;
      *(void *)&v28[14] = *(void *)(a7 + 14);
      sub_1CC66D518((uint64_t)&v29, v24);
      sub_1CC66D518((uint64_t)v30, v16);
      LODWORD(v23) = 12;
      char v19 = llvm::DWARFLocationTable::dumpLocationList(a1, (uint64_t *)&v27, this, &v25, a5, a6, 0, (uint64_t)v28, v23);
      sub_1CD5E15A8(v28);
      unint64_t v21 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v21 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((void *)this + 4) = v21 + 1;
        unsigned char *v21 = 10;
      }
      char v17 = 0;
      int64_t v14 = "\n";
      size_t v15 = 1;
    }
    while ((v19 & 1) != 0);
  }
  return result;
}

void sub_1CC6963A8(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 < a2) {
    goto LABEL_2;
  }
  if (v4 != a2)
  {
    if (v4 > a2)
    {
LABEL_5:
      a1[1] = a2;
      return;
    }
LABEL_2:
    if (a1[2] < a2) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v4 != a2) {
      bzero((void *)(*a1 + v4), a2 - v4);
    }
    goto LABEL_5;
  }
}

void sub_1CC696430()
{
}

void *sub_1CC696444(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F26190B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC69648C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26190B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC6964B8@<X0>(uint64_t a1@<X0>, int *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return llvm::DWARFUnit::getAddrOffsetSectionItem(result, *a2, (uint64_t)a3);
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

uint64_t sub_1CC6964D4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(unsigned char **)(a1 + 16);
  sub_1CC696AC8((uint64_t)v52, *(void *)a1, (uint64_t)a2);
  char v5 = v55;
  uint64_t v6 = *(void *)(a1 + 8);
  if ((v55 & 1) != 0 || *(unsigned char *)(v6 + 21))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = **(unsigned int **)(a1 + 32);
    uint64_t v11 = *(void *)(v6 + 14);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v6;
    *(void *)&v49[14] = v11;
    sub_1CC66D518((uint64_t)&v50, v6 + 24);
    sub_1CC66D518((uint64_t)&v51, v6 + 56);
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, uint64_t, unsigned char *, void))(*(void *)v4 + 24))(v4, a2, v9, v10, v49, *(void *)(a1 + 40));
    sub_1CD5E15A8(v49);
    char v5 = v55;
  }
  if ((v5 & 1) != 0 || !v54)
  {
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
  size_t v12 = *(llvm::raw_ostream **)(a1 + 24);
  char v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "\n", 1uLL);
  }
  else
  {
    *char v13 = 10;
    ++*((void *)v12 + 4);
  }
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a1 + 24), **(_DWORD **)(a1 + 32));
  if (*(unsigned char *)(*(void *)(a1 + 8) + 21))
  {
    int64_t v14 = *(llvm::raw_ostream **)(a1 + 24);
    size_t v15 = (void *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 > 0xCuLL)
    {
      qmemcpy(v15, "          => ", 13);
      *((void *)v14 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v14, "          => ", 0xDuLL);
    }
  }
  uint64_t v16 = *(long long **)(a1 + 8);
  long long v17 = *v16;
  *(void *)&v56[14] = *(void *)((char *)v16 + 14);
  *(_OWORD *)uint64_t v56 = v17;
  sub_1CC66D518((uint64_t)v57, (uint64_t)v16 + 24);
  sub_1CC66D518((uint64_t)v59, (uint64_t)v16 + 56);
  v56[21] = 0;
  __n128 v18 = *(llvm::raw_ostream **)(a1 + 24);
  if (v53)
  {
    unsigned __int8 v20 = v4[25];
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v56;
    *(void *)&v44[14] = *(void *)&v56[14];
    if (v58)
    {
      if (v58 == v57)
      {
        long long v46 = &v45;
        (*(void (**)(void *))(v57[0] + 24))(v57);
      }
      else
      {
        long long v46 = (uint64_t *)(*(uint64_t (**)(void))(*v58 + 16))();
      }
    }
    else
    {
      long long v46 = 0;
    }
    if (v60)
    {
      if (v60 == v59)
      {
        uint64_t v48 = &v47;
        (*(void (**)(void *))(v59[0] + 24))(v59);
      }
      else
      {
        uint64_t v48 = (uint64_t *)(*(uint64_t (**)(void))(*v60 + 16))();
      }
    }
    else
    {
      uint64_t v48 = 0;
    }
    llvm::DWARFAddressRange::dump(v52, v18, v20, (uint64_t)v44, *(llvm::raw_ostream **)(a1 + 40));
    sub_1CD5E15A8(v44);
  }
  else
  {
    uint64_t v19 = *((void *)v18 + 4);
    if ((unint64_t)(*((void *)v18 + 3) - v19) > 8)
    {
      *(unsigned char *)(v19 + 8) = 62;
      *(void *)uint64_t v19 = *(void *)"<default>";
      *((void *)v18 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 24), "<default>", 9uLL);
    }
  }
  sub_1CD5E15A8(v56);
  if (v55)
  {
LABEL_36:
    unint64_t v32 = (void *)v52[0];
    v52[0] = 0;
    int64_t v33 = v32;
    sub_1CD4515D0(&v33);
    if (v33) {
      (*(void (**)(void *))(*v33 + 8))(v33);
    }
  }
LABEL_6:
  unsigned int v7 = *a2;
  if (v7 > 6 || ((1 << v7) & 0x43) == 0)
  {
    unint64_t v21 = *(llvm::raw_ostream **)(a1 + 24);
    uint64_t v22 = (_WORD *)*((void *)v21 + 4);
    if (*((void *)v21 + 3) - (void)v22 > 1uLL)
    {
      _WORD *v22 = 8250;
      *((void *)v21 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v21, ": ", 2uLL);
    }
    uint64_t v23 = *(llvm::raw_ostream **)(a1 + 24);
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v25 = *(void *)(v24 + 14);
    *(_OWORD *)long long v39 = *(_OWORD *)v24;
    *(void *)&v39[14] = v25;
    sub_1CC66D518((uint64_t)v40, v24 + 24);
    sub_1CC66D518((uint64_t)v42, v24 + 56);
    uint64_t v26 = *((void *)a2 + 4);
    uint64_t v27 = *((void *)a2 + 5);
    BOOL v28 = v4[24] != 0;
    char v29 = v4[25];
    long long v30 = **(llvm::MCRegisterInfo ***)(a1 + 48);
    uint64_t v31 = **(llvm::DWARFUnit ***)(a1 + 56);
    v34[0] = v26;
    v34[1] = v27;
    BOOL v35 = v28;
    char v36 = v29;
    char v37 = v29;
    __int16 v38 = 0;
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v39;
    *(void *)&v56[14] = *(void *)&v39[14];
    if (v41)
    {
      if (v41 == v40)
      {
        uint64_t v58 = v57;
        (*(void (**)(void *))(v40[0] + 24))(v40);
      }
      else
      {
        uint64_t v58 = (void *)(*(uint64_t (**)(void))(*v41 + 16))();
      }
    }
    else
    {
      uint64_t v58 = 0;
    }
    if (v43)
    {
      if (v43 == v42)
      {
        unsigned int v60 = v59;
        (*(void (**)(void *))(v42[0] + 24))(v42);
      }
      else
      {
        unsigned int v60 = (void *)(*(uint64_t (**)(void))(*v43 + 16))();
      }
    }
    else
    {
      unsigned int v60 = 0;
    }
    llvm::DWARFExpression::print((uint64_t)v34, v23, (uint64_t)v56, v30, v31, 0);
    sub_1CD5E15A8(v56);
    sub_1CD5E15A8(v39);
  }
  sub_1CC696EDC(v52);
  return 1;
}

void sub_1CC696AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(unsigned char *)a3)
  {
    case 1:
      LODWORD(v35) = *(void *)(a3 + 8);
      uint64_t v6 = *(void *)(a2 + 48);
      if (!v6) {
        goto LABEL_40;
      }
      (*(void (**)(int64x2_t *__return_ptr))(*(void *)v6 + 48))(&v28);
      *(int64x2_t *)a2 = v28;
      char v7 = v29;
      *(void *)(a2 + 16) = v29;
      if (!v7) {
        goto LABEL_18;
      }
      goto LABEL_26;
    case 2:
      v28.i32[0] = *(void *)(a3 + 8);
      uint64_t v12 = *(void *)(a2 + 48);
      if (!v12) {
        goto LABEL_40;
      }
      (*(void (**)(const char **__return_ptr))(*(void *)v12 + 48))(&v35);
      if (!v37) {
        goto LABEL_18;
      }
      v28.i32[0] = *(void *)(a3 + 16);
      uint64_t v13 = *(void *)(a2 + 48);
      if (!v13)
      {
LABEL_40:
        sub_1CB920400();
        goto LABEL_41;
      }
      (*(void (**)(const char **__return_ptr))(*(void *)v13 + 48))(&v33);
      if (!v34) {
LABEL_18:
      }
        operator new();
      int64_t v14 = v33;
      size_t v15 = v35;
      uint64_t v16 = v36;
LABEL_17:
      v28.i64[0] = (uint64_t)v15;
      v28.i64[1] = (uint64_t)v14;
      *(void *)&long long v29 = v16;
      char v18 = 1;
      BYTE8(v29) = 1;
LABEL_29:
      long long v30 = &v32;
      long long v19 = xmmword_1CDB159A0;
      long long v31 = xmmword_1CDB159A0;
      size_t v20 = *(void *)(a3 + 40);
      if (v20)
      {
LABEL_30:
        if (&v30 != (void **)(a3 + 32))
        {
          long long v27 = v19;
          if (v20 < 5)
          {
            memcpy(&v32, *(const void **)(a3 + 32), v20);
            char v18 = 0;
            *(void *)&long long v31 = v20;
            long long v19 = v27;
            goto LABEL_33;
          }
LABEL_41:
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
LABEL_22:
        char v18 = 1;
      }
LABEL_33:
      *(unsigned char *)(a1 + 72) &= ~1u;
      long long v25 = v29;
      *(int64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v25;
      *(void *)(a1 + 32) = a1 + 56;
      *(_OWORD *)(a1 + 40) = v19;
      if ((v18 & 1) == 0) {
        sub_1CD426C4C(a1 + 32, (uint64_t)&v30);
      }
      *(unsigned char *)(a1 + 64) = 1;
      if (v30 != &v32) {
        free(v30);
      }
      return;
    case 3:
      v28.i32[0] = *(void *)(a3 + 8);
      uint64_t v17 = *(void *)(a2 + 48);
      if (!v17) {
        goto LABEL_40;
      }
      (*(void (**)(const char **__return_ptr))(*(void *)v17 + 48))(&v35);
      if (!v37) {
        goto LABEL_18;
      }
      size_t v15 = v35;
      uint64_t v16 = v36;
      int64_t v14 = &v35[*(void *)(a3 + 16)];
      goto LABEL_17;
    case 4:
      if (!*(unsigned char *)(a2 + 16))
      {
        v28.i64[0] = llvm::inconvertibleErrorCode((llvm *)a1);
        v28.i64[1] = v26;
        BOOL v35 = "Unable to resolve location list offset pair: Base address not defined";
        sub_1CD06481C();
      }
      int64x2_t v9 = (int64x2_t)vld1q_dup_f64((const double *)a2);
      unint64_t v8 = (uint64_t *)(a2 + 8);
      uint64_t v10 = *v8;
      if (*v8 == -1) {
        uint64_t v10 = *(void *)(a3 + 24);
      }
      int64x2_t v11 = vaddq_s64(*(int64x2_t *)(a3 + 8), v9);
      goto LABEL_20;
    case 5:
      v28.i8[0] = 0;
      BYTE8(v29) = 0;
      long long v30 = &v32;
      long long v19 = xmmword_1CDB159A0;
      long long v31 = xmmword_1CDB159A0;
      size_t v20 = *(void *)(a3 + 40);
      if (!v20) {
        goto LABEL_22;
      }
      goto LABEL_30;
    case 6:
      uint64_t v21 = *(void *)(a3 + 8);
      uint64_t v22 = *(void *)(a3 + 24);
      if (!*(unsigned char *)(a2 + 16)) {
        *(unsigned char *)(a2 + 16) = 1;
      }
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v22;
      goto LABEL_26;
    case 7:
      uint64_t v10 = *(void *)(a3 + 24);
      int64x2_t v11 = *(int64x2_t *)(a3 + 8);
LABEL_20:
      int64x2_t v28 = v11;
      *(void *)&long long v29 = v10;
      goto LABEL_28;
    case 8:
      uint64_t v23 = *(void *)(a3 + 16) + *(void *)(a3 + 8);
      uint64_t v24 = *(void *)(a3 + 24);
      v28.i64[0] = *(void *)(a3 + 8);
      v28.i64[1] = v23;
      *(void *)&long long v29 = v24;
LABEL_28:
      char v18 = 1;
      BYTE8(v29) = 1;
      goto LABEL_29;
    default:
LABEL_26:
      *(unsigned char *)(a1 + 72) &= ~1u;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 64) = 0;
      return;
  }
}

uint64_t *sub_1CC696EDC(uint64_t *a1)
{
  if (a1[9])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (*((unsigned char *)a1 + 64))
  {
    uint64_t v2 = (uint64_t *)a1[4];
    if (v2 != a1 + 7) {
      free(v2);
    }
    *((unsigned char *)a1 + 64) = 0;
  }
  return a1;
}

uint64_t sub_1CC696F5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  sub_1CC696AC8((uint64_t)v16, *a1, a2);
  if ((v20 & 1) == 0)
  {
    if (!v19)
    {
      uint64_t v5 = 1;
      goto LABEL_15;
    }
    uint64_t v3 = a1[1];
    char v15 = 0;
    v11[0] = v16[0];
    v11[1] = v16[1];
    uint64_t v12 = &v14;
    long long v13 = xmmword_1CDB159A0;
    size_t v4 = __n;
    if (__n)
    {
      if (__n >= 5) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      memcpy(&v14, __src, __n);
      *(void *)&long long v13 = v4;
    }
    uint64_t v5 = sub_1CC697104(*(uint64_t (**)(uint64_t, void *))v3, *(void *)(v3 + 8), (uint64_t *)v11);
    if ((v15 & 1) == 0)
    {
      uint64_t v6 = v12;
      if (v12 == &v14) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = *(void *)&v16[0];
  *(void *)&v16[0] = 0;
  char v15 = -1;
  *(void *)&v11[0] = v8;
  uint64_t v5 = sub_1CC697104(*(uint64_t (**)(uint64_t, void *))v7, *(void *)(v7 + 8), (uint64_t *)v11);
  if (v15)
  {
LABEL_12:
    uint64_t v9 = *(void *)&v11[0];
    *(void *)&v11[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_15;
  }
  uint64_t v6 = v12;
  if (v12 != &v14) {
LABEL_11:
  }
    free(v6);
LABEL_15:
  sub_1CC696EDC((uint64_t *)v16);
  return v5;
}

uint64_t sub_1CC697104(uint64_t (*a1)(uint64_t, void *), uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CC6971D8((uint64_t)v8, a3);
  uint64_t v5 = a1(a2, v8);
  if (v10[8])
  {
    uint64_t v6 = v8[0];
    v8[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else if (v9 != v10)
  {
    free(v9);
  }
  return v5;
}

uint64_t sub_1CC6971D8(uint64_t result, uint64_t *a2)
{
  char v2 = *((unsigned char *)a2 + 64);
  *(unsigned char *)(result + 64) = *(unsigned char *)(result + 64) & 0xFE | v2 & 1;
  if (v2)
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v4;
  }
  else
  {
    long long v3 = *((_OWORD *)a2 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v3;
    *(void *)(result + 32) = result + 56;
    *(_OWORD *)(result + 40) = xmmword_1CDB159A0;
    if (a2[5]) {
      return sub_1CD426C4C(result + 32, (uint64_t)(a2 + 4));
    }
  }
  return result;
}

uint64_t llvm::DWARFDebugMacro::MacroHeader::getDwarfFormat(llvm::DWARFDebugMacro::MacroHeader *this)
{
  return *((unsigned char *)this + 2) & 1;
}

uint64_t llvm::DWARFDebugMacro::MacroHeader::getOffsetByteSize(llvm::DWARFDebugMacro::MacroHeader *this)
{
  if (*((unsigned char *)this + 2)) {
    return 8;
  }
  else {
    return 4;
  }
}

llvm::raw_ostream *llvm::DWARFDebugMacro::MacroHeader::dumpMacroHeader(llvm::DWARFDebugMacro::MacroHeader *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *(unsigned __int16 *)this;
  char v15 = &unk_1F2618A88;
  uint64_t v16 = "macro header: version = 0x%04hx";
  uint64_t v17 = v4;
  uint64_t v5 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
  uint64_t v6 = *((unsigned __int8 *)this + 2);
  v19[0] = &unk_1F260ED30;
  v19[1] = ", flags = 0x%02hhx";
  v19[2] = v6;
  uint64_t result = llvm::raw_ostream::operator<<(v5, (uint64_t)v19);
  uint64_t v8 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 540876916;
    *(void *)uint64_t v8 = *(void *)", format = ";
    uint64_t v9 = (_DWORD *)(*((void *)a2 + 4) + 11);
    *((void *)a2 + 4) = v9;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(a2, ", format = ", 0xBuLL);
    uint64_t v9 = (_DWORD *)*((void *)a2 + 4);
  }
  if (*((unsigned char *)this + 2)) {
    uint64_t v10 = "DWARF64";
  }
  else {
    uint64_t v10 = "DWARF32";
  }
  if (*((void *)a2 + 3) - (void)v9 > 6uLL)
  {
    _DWORD *v9 = *(_DWORD *)v10;
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)(v10 + 3);
    *((void *)a2 + 4) += 7;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(a2, v10, 7uLL);
  }
  char v11 = *((unsigned char *)this + 2);
  if ((v11 & 2) != 0)
  {
    uint64_t v12 = *((void *)this + 1);
    char v15 = &unk_1F2618A68;
    uint64_t v16 = ", debug_line_offset = 0x%0*llx";
    if (v11) {
      int v13 = 16;
    }
    else {
      int v13 = 8;
    }
    LODWORD(v17) = v13;
    uint64_t v18 = v12;
    uint64_t result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v15);
  }
  uint64_t v14 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v14) {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  *uint64_t v14 = 10;
  ++*((void *)a2 + 4);
  return result;
}

void llvm::DWARFDebugMacro::dump(unsigned __int16 **this, llvm::raw_ostream *a2)
{
  char v2 = *this;
  long long v3 = this[1];
  if (*this != v3)
  {
    int v5 = 0;
    while (1)
    {
      uint64_t v6 = *((void *)v2 + 16);
      uint64_t v47 = (llvm::raw_ostream *)&unk_1F25FF808;
      uint64_t v48 = "0x%08llx:\n";
      uint64_t v49 = v6;
      llvm::raw_ostream::operator<<(a2, (uint64_t)&v47);
      if (*((unsigned char *)v2 + 136)) {
        llvm::DWARFDebugMacro::MacroHeader::dumpMacroHeader((llvm::DWARFDebugMacro::MacroHeader *)v2, a2);
      }
      int v7 = *((_DWORD *)v2 + 6);
      if (v7) {
        break;
      }
LABEL_71:
      v2 += 72;
      if (v2 == v3) {
        return;
      }
    }
    uint64_t v8 = (unsigned int *)*((void *)v2 + 2);
    uint64_t v9 = &v8[6 * v7];
    while (1)
    {
      unsigned int v10 = *v8;
      if (v5)
      {
        int v12 = v10 == 4;
        int v11 = v5 - v12;
        int v13 = v5 - v12;
        if (v5 != v12)
        {
          do
          {
            uint64_t v14 = (_WORD *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v14 > 1uLL)
            {
              *uint64_t v14 = 8224;
              *((void *)a2 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a2, "  ", 2uLL);
            }
            --v13;
          }
          while (v13);
          unsigned int v10 = *v8;
        }
      }
      else
      {
        int v11 = 0;
      }
      if (v10 == 3) {
        int v5 = v11 + 1;
      }
      else {
        int v5 = v11;
      }
      if (*((unsigned char *)v2 + 136))
      {
        llvm::WithColor::WithColor((uint64_t)&v47, (uint64_t)a2, 5, 0);
        uint64_t v23 = v47;
        uint64_t v24 = (llvm::dwarf *)*v8;
        if (*v2 > 4u) {
          long long v25 = llvm::dwarf::MacroString(v24);
        }
        else {
          long long v25 = llvm::dwarf::GnuMacroString(v24);
        }
        long long v27 = v25;
        size_t v28 = v26;
        long long v29 = (void *)*((void *)v23 + 4);
        if (v26 <= *((void *)v23 + 3) - (void)v29)
        {
          if (v26)
          {
            memcpy(v29, v27, v26);
            *((void *)v23 + 4) += v28;
          }
          goto LABEL_31;
        }
        char v20 = v23;
        uint64_t v21 = v27;
        size_t v22 = v28;
      }
      else
      {
        llvm::WithColor::WithColor((uint64_t)&v47, (uint64_t)a2, 5, 0);
        char v15 = v47;
        uint64_t v17 = llvm::dwarf::MacinfoString((llvm::dwarf *)*v8);
        size_t v18 = v16;
        char v19 = (void *)*((void *)v15 + 4);
        if (v16 <= *((void *)v15 + 3) - (void)v19)
        {
          if (v16)
          {
            memcpy(v19, v17, v16);
            *((void *)v15 + 4) += v18;
          }
          goto LABEL_31;
        }
        char v20 = v15;
        uint64_t v21 = v17;
        size_t v22 = v18;
      }
      llvm::raw_ostream::write(v20, v21, v22);
LABEL_31:
      llvm::WithColor::~WithColor((llvm::WithColor *)&v47);
      unsigned int v30 = *v8;
      if (*v8 > 0xC) {
        goto LABEL_51;
      }
      if (((1 << v30) & 0x1866) != 0)
      {
        uint64_t v31 = *((void *)a2 + 4);
        if ((unint64_t)(*((void *)a2 + 3) - v31) > 0xA)
        {
          *(_DWORD *)(v31 + 7) = 540700526;
          *(void *)uint64_t v31 = *(void *)" - lineno: ";
          *((void *)a2 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a2, " - lineno: ", 0xBuLL);
        }
        sub_1CD098D14(a2, *((void *)v8 + 1), 0, 0, 0);
        uint64_t v32 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v32 <= 7uLL)
        {
          int64_t v33 = a2;
          char v34 = " macro: ";
          size_t v35 = 8;
          goto LABEL_37;
        }
        void *v32 = 0x203A6F7263616D20;
        uint64_t v46 = *((void *)a2 + 4) + 8;
        goto LABEL_66;
      }
      if (v30 == 3)
      {
        uint64_t v44 = *((void *)a2 + 4);
        if ((unint64_t)(*((void *)a2 + 3) - v44) > 0xA)
        {
          *(_DWORD *)(v44 + 7) = 540700526;
          *(void *)uint64_t v44 = *(void *)" - lineno: ";
          *((void *)a2 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a2, " - lineno: ", 0xBuLL);
        }
        sub_1CD098D14(a2, *((void *)v8 + 1), 0, 0, 0);
        uint64_t v45 = *((void *)a2 + 4);
        if ((unint64_t)(*((void *)a2 + 3) - v45) > 9)
        {
          *(_WORD *)(v45 + 8) = 8250;
          *(void *)uint64_t v45 = *(void *)" filenum: ";
          *((void *)a2 + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(a2, " filenum: ", 0xAuLL);
        }
        sub_1CD098D14(a2, *((void *)v8 + 2), 0, 0, 0);
        goto LABEL_41;
      }
      if (v30 == 7)
      {
        if (v2[1]) {
          int v40 = 16;
        }
        else {
          int v40 = 8;
        }
        uint64_t v41 = *((void *)v8 + 1);
        uint64_t v47 = (llvm::raw_ostream *)&unk_1F2618A68;
        uint64_t v48 = " - import offset: 0x%0*llx";
        LODWORD(v49) = v40;
        uint64_t v50 = v41;
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v47);
      }
      else
      {
LABEL_51:
        if (v30 == 255)
        {
          __n128 v42 = (void *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v42 > 0xCuLL)
          {
            qmemcpy(v42, " - constant: ", 13);
            *((void *)a2 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(a2, " - constant: ", 0xDuLL);
          }
          sub_1CD098D14(a2, *((void *)v8 + 1), 0, 0, 0);
          uint64_t v43 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v43) <= 8)
          {
            int64_t v33 = a2;
            char v34 = " string: ";
            size_t v35 = 9;
LABEL_37:
            llvm::raw_ostream::write(v33, v34, v35);
LABEL_38:
            uint64_t v36 = (const void *)*((void *)v8 + 2);
            if (v36)
            {
              size_t v37 = strlen(*((const char **)v8 + 2));
              __int16 v38 = (void *)*((void *)a2 + 4);
              if (v37 <= *((void *)a2 + 3) - (void)v38)
              {
                if (v37)
                {
                  memcpy(v38, v36, v37);
                  *((void *)a2 + 4) += v37;
                }
              }
              else
              {
                llvm::raw_ostream::write(a2, (const char *)v36, v37);
              }
            }
            goto LABEL_41;
          }
          *(unsigned char *)(v43 + 8) = 32;
          *(void *)uint64_t v43 = *(void *)" string: ";
          uint64_t v46 = *((void *)a2 + 4) + 9;
LABEL_66:
          *((void *)a2 + 4) = v46;
          goto LABEL_38;
        }
      }
LABEL_41:
      long long v39 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v39)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        unsigned char *v39 = 10;
        ++*((void *)a2 + 4);
      }
      v8 += 6;
      if (v8 == v9) {
        goto LABEL_71;
      }
    }
  }
}

uint64_t llvm::DWARFDebugMacro::parseImpl@<X0>(char **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v6 = a5;
  uint64_t v7 = a4;
  uint64_t v9 = a1;
  unint64_t v11 = 0;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unint64_t v108 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  unsigned int v107 = 0;
  if (a5)
  {
    unint64_t v11 = *(void *)(a4 + 8);
    if (v11)
    {
      int v12 = *(llvm::DWARFUnit ***)a2;
      int v13 = *(llvm::DWARFUnit ***)(a2 + 24);
      if (*(llvm::DWARFUnit ***)a2 != v13)
      {
        char v15 = *(llvm::DWARFUnit ***)(a2 + 8);
        size_t v16 = *(unsigned int (**)(llvm::DWARFUnit **))(a2 + 16);
        while (1)
        {
          uint64_t v17 = *v12;
          llvm::DWARFUnit::extractDIEsIfNeeded(*v12, 1);
          uint64_t v18 = *((void *)v17 + 36);
          uint64_t v19 = *((void *)v17 + 37);
          BOOL v20 = v18 == v19;
          if (v18 == v19) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = v17;
          }
          if (v20) {
            uint64_t v18 = 0;
          }
          uint64_t v109 = v21;
          uint64_t v110 = v18;
          if (v21 && v18 != 0)
          {
            llvm::DWARFDie::find(&v109, 121, &v102);
            if (v104 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v102, 8) & 1) != 0) {
              break;
            }
          }
LABEL_15:
          while (++v12 != v15)
          {
            if (v16(v12)) {
              goto LABEL_19;
            }
          }
          int v12 = v15;
LABEL_19:
          if (v12 == v13)
          {
            unint64_t v11 = v108;
            uint64_t v9 = a1;
            goto LABEL_69;
          }
        }
        uint64_t v23 = *((void *)&v102 + 1);
        uint64_t v24 = *v12;
        if (v107)
        {
          unsigned int v25 = (v107 - 1) & (37 * DWORD2(v102));
          size_t v26 = (void *)(v105 + 16 * v25);
          uint64_t v27 = *v26;
          if (*((void *)&v102 + 1) == *v26) {
            goto LABEL_15;
          }
          size_t v28 = 0;
          int v29 = 1;
          while (v27 != -1)
          {
            if (v28) {
              BOOL v30 = 0;
            }
            else {
              BOOL v30 = v27 == -2;
            }
            if (v30) {
              size_t v28 = v26;
            }
            unsigned int v31 = v25 + v29++;
            unsigned int v25 = v31 & (v107 - 1);
            size_t v26 = (void *)(v105 + 16 * v25);
            uint64_t v27 = *v26;
            if (*((void *)&v102 + 1) == *v26) {
              goto LABEL_15;
            }
          }
          if (v28) {
            uint64_t v32 = v28;
          }
          else {
            uint64_t v32 = v26;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (4 * (int)v106 + 4 >= 3 * v107)
        {
          size_t v98 = *v12;
          sub_1CC4EB5F0((uint64_t)&v105, 2 * v107);
          unsigned int v34 = v107 - 1;
          unsigned int v35 = (v107 - 1) & (37 * v23);
          uint64_t v32 = (void *)(v105 + 16 * v35);
          uint64_t v36 = *v32;
          if (v23 == *v32) {
            goto LABEL_55;
          }
          size_t v37 = 0;
          int v38 = 1;
          while (v36 != -1)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -2;
            }
            if (v39) {
              size_t v37 = v32;
            }
            unsigned int v40 = v35 + v38++;
            unsigned int v35 = v40 & v34;
            uint64_t v32 = (void *)(v105 + 16 * (v40 & v34));
            uint64_t v36 = *v32;
            if (v23 == *v32) {
              goto LABEL_55;
            }
          }
        }
        else
        {
          if (v107 + ~v106 - HIDWORD(v106) > v107 >> 3)
          {
LABEL_37:
            uint64_t v33 = *v32;
LABEL_38:
            LODWORD(v106) = v106 + 1;
            if (v33 != -1) {
              --HIDWORD(v106);
            }
            void *v32 = v23;
            v32[1] = v24;
            goto LABEL_15;
          }
          size_t v98 = *v12;
          sub_1CC4EB5F0((uint64_t)&v105, v107);
          unsigned int v41 = v107 - 1;
          unsigned int v42 = (v107 - 1) & (37 * v23);
          uint64_t v32 = (void *)(v105 + 16 * v42);
          uint64_t v43 = *v32;
          if (v23 == *v32)
          {
LABEL_55:
            uint64_t v33 = v23;
            uint64_t v24 = v98;
            goto LABEL_38;
          }
          size_t v37 = 0;
          int v44 = 1;
          while (v43 != -1)
          {
            if (v37) {
              BOOL v45 = 0;
            }
            else {
              BOOL v45 = v43 == -2;
            }
            if (v45) {
              size_t v37 = v32;
            }
            unsigned int v46 = v42 + v44++;
            unsigned int v42 = v46 & v41;
            uint64_t v32 = (void *)(v105 + 16 * (v46 & v41));
            uint64_t v43 = *v32;
            if (v23 == *v32) {
              goto LABEL_55;
            }
          }
        }
        if (v37) {
          uint64_t v32 = v37;
        }
        uint64_t v24 = v98;
        goto LABEL_37;
      }
      unint64_t v11 = 0;
    }
  }
LABEL_69:
  if (*(void *)(v7 + 8) > v11)
  {
    uint64_t v47 = 0;
    while (1)
    {
      uint64_t v48 = v47;
      if (!v47)
      {
        uint64_t v50 = v9[1];
        unint64_t v49 = (unint64_t)v9[2];
        if ((unint64_t)v50 >= v49)
        {
          uint64_t v97 = v7;
          unint64_t v99 = a3;
          char v52 = *v9;
          unint64_t v53 = 0x8E38E38E38E38E39 * ((v50 - *v9) >> 4);
          unint64_t v54 = v53 + 1;
          if (v53 + 1 > 0x1C71C71C71C71C7) {
            abort();
          }
          int v96 = v6;
          unint64_t v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - (void)v52) >> 4);
          if (2 * v55 > v54) {
            unint64_t v54 = 2 * v55;
          }
          if (v55 >= 0xE38E38E38E38E3) {
            unint64_t v54 = 0x1C71C71C71C71C7;
          }
          if (v54 > 0x1C71C71C71C71C7) {
            sub_1CB833614();
          }
          uint64_t v56 = v9;
          uint64_t v57 = 9 * v54;
          uint64_t v58 = (char *)operator new(144 * v54);
          uint64_t v59 = &v58[144 * v53];
          *(_OWORD *)uint64_t v59 = 0u;
          *((_OWORD *)v59 + 1) = 0u;
          *((_OWORD *)v59 + 3) = 0u;
          *((_OWORD *)v59 + 4) = 0u;
          *((_OWORD *)v59 + 5) = 0u;
          *((_OWORD *)v59 + 6) = 0u;
          *((_OWORD *)v59 + 7) = 0u;
          *((_OWORD *)v59 + 8) = 0u;
          *((_OWORD *)v59 + 2) = 0u;
          *((void *)v59 + 2) = v59 + 32;
          *((void *)v59 + 3) = 0x400000000;
          uint64_t v51 = v59 + 144;
          if (v50 == v52)
          {
            llvm::raw_ostream *v56 = v59;
            v56[1] = v51;
            uint64_t v9 = v56;
            unint64_t v56[2] = &v58[16 * v57];
            int v6 = v96;
            uint64_t v7 = v97;
            a3 = v99;
          }
          else
          {
            signed int v95 = &v58[16 * v57];
            uint64_t v60 = 0;
            do
            {
              uint64_t v61 = &v50[v60];
              long long v62 = &v59[v60];
              *((_OWORD *)v62 - 9) = *(_OWORD *)&v50[v60 - 144];
              long long v63 = &v59[v60 - 112];
              *(void *)&v59[v60 - 128] = v63;
              *((void *)v62 - 15) = 0x400000000;
              unsigned int v64 = *(_DWORD *)&v50[v60 - 120];
              if (v64) {
                BOOL v65 = v62 == v61;
              }
              else {
                BOOL v65 = 1;
              }
              if (!v65)
              {
                uint64_t v66 = (char *)*((void *)v61 - 16);
                if (v61 - 112 == v66)
                {
                  if (v64 >= 5) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v63, v66, 24 * *(unsigned int *)&v50[v60 - 120]);
                  *((_DWORD *)v62 - 30) = v64;
                }
                else
                {
                  *((void *)v62 - 16) = v66;
                  *((_DWORD *)v62 - 30) = v64;
                  *((_DWORD *)v62 - 29) = *(_DWORD *)&v50[v60 - 116];
                  *((void *)v61 - 16) = v61 - 112;
                  *(_DWORD *)&v50[v60 - 116] = 0;
                }
                *((_DWORD *)v61 - 30) = 0;
              }
              uint64_t v67 = *((void *)v61 - 2);
              *(v62 - 8) = *(v61 - 8);
              *((void *)v62 - 2) = v67;
              v60 -= 144;
            }
            while (&v50[v60] != v52);
            uint64_t v50 = *v56;
            uint64_t v68 = v56[1];
            unint64_t v69 = &v59[v60];
            uint64_t v9 = v56;
            llvm::raw_ostream *v56 = v69;
            v56[1] = v51;
            unint64_t v56[2] = v95;
            a3 = v99;
            if (v68 == v50)
            {
              int v6 = v96;
              uint64_t v7 = v97;
            }
            else
            {
              int v6 = v96;
              uint64_t v7 = v97;
              do
              {
                unint64_t v70 = (char *)*((void *)v68 - 16);
                if (v68 - 112 != v70) {
                  free(v70);
                }
                v68 -= 144;
              }
              while (v68 != v50);
            }
          }
          if (v50) {
            operator delete(v50);
          }
          unint64_t v11 = v108;
        }
        else
        {
          *((_OWORD *)v50 + 7) = 0u;
          *((_OWORD *)v50 + 8) = 0u;
          *((_OWORD *)v50 + 5) = 0u;
          *((_OWORD *)v50 + 6) = 0u;
          *((_OWORD *)v50 + 3) = 0u;
          *((_OWORD *)v50 + 4) = 0u;
          *(_OWORD *)uint64_t v50 = 0u;
          *((_OWORD *)v50 + 1) = 0u;
          *((_OWORD *)v50 + 2) = 0u;
          *((void *)v50 + 2) = v50 + 32;
          uint64_t v51 = v50 + 144;
          *((_DWORD *)v50 + 7) = 4;
        }
        v9[1] = v51;
        uint64_t v48 = v51 - 144;
        *((void *)v51 - 2) = v11;
        *(v51 - 8) = v6;
        if (v6)
        {
          long long v71 = *(_OWORD *)(v7 + 16);
          v100[0] = *(_OWORD *)v7;
          v100[1] = v71;
          uint64_t v101 = *(void *)(v7 + 32);
          llvm::DWARFDebugMacro::MacroHeader::parseMacroHeader((uint64_t)(v51 - 144), v100, &v108, a6);
          if (*a6) {
            return MEMORY[0x1D25D9CD0](v105, 8);
          }
        }
      }
      unsigned int v72 = *((_DWORD *)v48 + 6);
      if (v72 >= *((_DWORD *)v48 + 7))
      {
        uint64_t v103 = 0;
        long long v102 = 0uLL;
        unint64_t v91 = *((void *)v48 + 2);
        BOOL v92 = v91 + 24 * v72 > (unint64_t)&v102;
        if (v91 > (unint64_t)&v102 || !v92) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v73 = (void *)(*((void *)v48 + 2) + 24 * v72);
      *uint64_t v73 = 0;
      v73[1] = 0;
      v73[2] = 0;
      LODWORD(v73) = *((_DWORD *)v48 + 6) + 1;
      uint64_t v74 = *((void *)v48 + 2);
      *((_DWORD *)v48 + 6) = v73;
      uint64_t v75 = v74 + 24 * v73;
      int ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
      *(_DWORD *)(v75 - 24) = ULEB128;
      uint64_t v47 = 0;
      switch(ULEB128)
      {
        case 0:
          goto LABEL_131;
        case 1:
        case 2:
          goto LABEL_134;
        case 3:
          *(void *)(v75 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          uint64_t CStrRef = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          goto LABEL_122;
        case 4:
          goto LABEL_123;
        case 5:
        case 6:
          if ((v6 & 1) == 0) {
            goto LABEL_143;
          }
          *(void *)(v75 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          if (v48[2]) {
            int v77 = 8;
          }
          else {
            int v77 = 4;
          }
          *(void *)&long long v102 = llvm::DWARFDataExtractor::getRelocatedValue(v7, v77, &v108, 0, 0);
          long long v78 = (unint64_t *)&v102;
          unint64_t v79 = a3;
          goto LABEL_113;
        case 7:
          if (v48[2]) {
            int v90 = 8;
          }
          else {
            int v90 = 4;
          }
          *(void *)(v75 - 16) = llvm::DWARFDataExtractor::getRelocatedValue(v7, v90, &v108, 0, 0);
          goto LABEL_123;
        case 8:
        case 9:
        case 10:
          goto LABEL_143;
        case 11:
        case 12:
          if ((v6 & 1) == 0) {
            goto LABEL_143;
          }
          *(void *)(v75 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          if (!v107) {
            goto LABEL_124;
          }
          uint64_t v81 = *((void *)v48 + 16);
          LODWORD(v82) = (37 * v81) & (v107 - 1);
          unint64_t v83 = (uint64_t *)(v105 + 16 * v82);
          uint64_t v84 = *v83;
          if (*v83 == v81) {
            goto LABEL_125;
          }
          int v85 = 1;
          while (v84 != -1)
          {
            int v86 = v82 + v85++;
            uint64_t v82 = v86 & (v107 - 1);
            uint64_t v84 = *(void *)(v105 + 16 * v82);
            if (v84 == v81)
            {
              unint64_t v83 = (uint64_t *)(v105 + 16 * v82);
              goto LABEL_125;
            }
          }
LABEL_124:
          unint64_t v83 = (uint64_t *)(v105 + 16 * v107);
LABEL_125:
          if ((uint64_t *)(v105 + 16 * v107) == v83)
          {
            unint64_t v94 = std::generic_category();
            *(void *)&long long v102 = 22;
            *((void *)&v102 + 1) = v94;
            uint64_t v109 = (llvm::DWARFUnit *)"Macro contribution of the unit not found";
            sub_1CD06481C();
          }
          long long v87 = (llvm::DWARFUnit *)v83[1];
          unsigned int v88 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          llvm::DWARFUnit::getStringOffsetSectionItem(v87, v88, (uint64_t)&v109);
          if (v110)
          {
            *a6 = v109;
            return MEMORY[0x1D25D9CD0](v105, 8);
          }
          long long v102 = *(_OWORD *)(v83[1] + 152);
          LOWORD(v103) = 0;
          *(void *)(v75 - 8) = llvm::DataExtractor::getCStrRef((uint64_t *)&v102, (unint64_t *)&v109, 0);
          if (v110)
          {
            BOOL v89 = v109;
            uint64_t v109 = 0;
            if (v89) {
              (*(void (**)(llvm::DWARFUnit *))(*(void *)v89 + 8))(v89);
            }
          }
          uint64_t v47 = v48;
          goto LABEL_131;
        default:
          if (ULEB128 != 255)
          {
LABEL_143:
            *(_DWORD *)(v75 - 24) = -1;
            goto LABEL_144;
          }
LABEL_134:
          *(void *)(v75 - 16) = llvm::DataExtractor::getULEB128((uint64_t *)v7, (uint64_t *)&v108, 0);
          long long v78 = &v108;
          unint64_t v79 = (uint64_t *)v7;
LABEL_113:
          uint64_t CStrRef = (uint64_t)llvm::DataExtractor::getCStrRef(v79, v78, 0);
LABEL_122:
          *(void *)(v75 - 8) = CStrRef;
LABEL_123:
          uint64_t v47 = v48;
LABEL_131:
          unint64_t v11 = v108;
          if (*(void *)(v7 + 8) <= v108) {
            goto LABEL_144;
          }
          break;
      }
    }
  }
LABEL_144:
  *a6 = 0;
  return MEMORY[0x1D25D9CD0](v105, 8);
}

unint64_t llvm::DWARFDebugMacro::MacroHeader::parseMacroHeader@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  *(_WORD *)a1 = sub_1CD833674((uint64_t)a2, a3, 0);
  unint64_t v8 = *a3;
  unint64_t result = llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0);
  if (result)
  {
    char v10 = *(unsigned char *)(*a2 + v8);
    ++*a3;
    if ((v10 & 4) != 0)
    {
      std::generic_category();
      sub_1CD06481C();
    }
    *(unsigned char *)(a1 + 2) = v10;
    if ((v10 & 2) != 0)
    {
      if (v10) {
        int v11 = 8;
      }
      else {
        int v11 = 4;
      }
      unint64_t result = llvm::DataExtractor::getUnsigned(a2, a3, v11, 0);
      *(void *)(a1 + 8) = result;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2) = 0;
  }
  *a4 = 0;
  return result;
}

void llvm::DWARFDebugPubTable::extract(char **a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  *((unsigned char *)a1 + 24) = a3;
  int v5 = *a1;
  for (uint64_t i = a1[1]; i != v5; i -= 56)
  {
    uint64_t v7 = (void *)*((void *)i - 3);
    if (v7)
    {
      *((void *)i - 2) = v7;
      operator delete(v7);
    }
  }
  v4[1] = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v8 = 0;
    long long v62 = v4;
    uint64_t v63 = a2;
    do
    {
      uint64_t v75 = v8;
      char v10 = v4[1];
      unint64_t v9 = (unint64_t)v4[2];
      if ((unint64_t)v10 >= v9)
      {
        int v12 = *v4;
        uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v10 - *v4) >> 3);
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x492492492492492) {
LABEL_75:
        }
          abort();
        unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x249249249249249) {
          unint64_t v16 = 0x492492492492492;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16 > 0x492492492492492) {
LABEL_76:
        }
          sub_1CB833614();
        uint64_t v17 = 56 * v16;
        uint64_t v18 = (char *)operator new(56 * v16);
        uint64_t v19 = &v18[56 * v13];
        *(void *)uint64_t v19 = 0;
        v19[8] = 0;
        BOOL v20 = &v18[v17];
        *((_WORD *)v19 + 5) = 0;
        int v11 = v19 + 56;
        *((_OWORD *)v19 + 1) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((void *)v19 + 6) = 0;
        if (v10 == v12)
        {
          unsigned char *v4 = v19;
          v4[1] = v11;
          void v4[2] = v20;
        }
        else
        {
          do
          {
            long long v21 = *(_OWORD *)(v10 - 56);
            *(_OWORD *)(v19 - 40) = *(_OWORD *)(v10 - 40);
            *(_OWORD *)(v19 - 56) = v21;
            *((void *)v19 - 2) = 0;
            *((void *)v19 - 1) = 0;
            *((void *)v19 - 3) = 0;
            *(_OWORD *)(v19 - 24) = *(_OWORD *)(v10 - 24);
            *((void *)v19 - 1) = *((void *)v10 - 1);
            v19 -= 56;
            *((void *)v10 - 3) = 0;
            *((void *)v10 - 2) = 0;
            *((void *)v10 - 1) = 0;
            v10 -= 56;
          }
          while (v10 != v12);
          char v10 = *v4;
          size_t v22 = v4[1];
          unsigned char *v4 = v19;
          v4[1] = v11;
          for (void v4[2] = v20; v22 != v10; v22 -= 56)
          {
            uint64_t v23 = (void *)*((void *)v22 - 3);
            if (v23)
            {
              *((void *)v22 - 2) = v23;
              operator delete(v23);
            }
          }
        }
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(void *)char v10 = 0;
        char v10[8] = 0;
        *((_WORD *)v10 + 5) = 0;
        int v11 = v10 + 56;
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *((void *)v10 + 6) = 0;
      }
      v4[1] = v11;
      uint64_t v73 = v8;
      uint64_t v74 = 0;
      unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, (unint64_t *)&v73, &v74);
      *((void *)v11 - 7) = InitialLength;
      *(v11 - 48) = v25;
      if (v74)
      {
        char v52 = v4[1];
        unint64_t v53 = (void *)*((void *)v52 - 3);
        if (v53)
        {
          *((void *)v52 - 2) = v53;
          operator delete(v53);
        }
        v4[1] = v52 - 56;
        unint64_t v54 = std::generic_category();
        uint64_t v72 = v74;
        uint64_t v74 = 0;
        sub_1CD4FB504(&v72, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v76[0] = (uint64_t)p_p;
        sub_1CD5E2210(22, (uint64_t)v54, (uint64_t)"name lookup table at offset 0x%llx parsing failed: %s", &v75, v76);
      }
      std::string::size_type v26 = *(void *)(a2 + 8);
      unint64_t v64 = v73 + InitialLength;
      if (v26 >= v73 + InitialLength) {
        std::string::size_type v26 = v73 + InitialLength;
      }
      BOOL v27 = *(unsigned char *)(a2 + 16) != 0;
      std::string::value_type v28 = *(unsigned char *)(a2 + 17);
      __p.__r_.__value_.__r.__words[0] = *(void *)a2;
      __p.__r_.__value_.__l.__size_ = v26;
      __p.__r_.__value_.__s.__data_[16] = v27;
      __p.__r_.__value_.__s.__data_[17] = v28;
      long long v71 = *(_OWORD *)(a2 + 24);
      if (v25) {
        uint64_t v29 = 8;
      }
      else {
        uint64_t v29 = 4;
      }
      *((_WORD *)v11 - 23) = sub_1CD833674((uint64_t)&__p, (unint64_t *)&v73, &v74);
      *((void *)v11 - 5) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)&__p, v29, (unint64_t *)&v73, 0, &v74);
      *((void *)v11 - 4) = llvm::DataExtractor::getUnsigned(&__p, (unint64_t *)&v73, v29, &v74);
      if (v74)
      {
        uint64_t v58 = std::generic_category();
        uint64_t v67 = v74;
        uint64_t v74 = 0;
        sub_1CD4FB504(&v67, &v68);
        uint64_t v59 = &v68;
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v59 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        unint64_t v69 = v59;
        sub_1CD5E2210(22, (uint64_t)v58, (uint64_t)"name lookup table at offset 0x%llx does not have a complete header: %s", &v75, (uint64_t *)&v69);
      }
      while (1)
      {
        unint64_t Unsigned = llvm::DataExtractor::getUnsigned(&__p, (unint64_t *)&v73, v29, &v74);
        if (!Unsigned) {
          break;
        }
        unint64_t v31 = Unsigned;
        if (a3) {
          unsigned int v32 = sub_1CD05EA24(&__p, (unint64_t *)&v73, &v74);
        }
        else {
          unsigned int v32 = 0;
        }
        uint64_t CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)&__p, (unint64_t *)&v73, &v74);
        if (!v74)
        {
          unsigned int v35 = CStrRef;
          unint64_t v36 = v34;
          int v37 = (v32 >> 4) & 7;
          unsigned int v38 = v32 >> 7;
          unsigned int v40 = (unint64_t *)*((void *)v11 - 2);
          unint64_t v39 = *((void *)v11 - 1);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v42 = v29;
            uint64_t v43 = (char *)*((void *)v11 - 3);
            uint64_t v44 = ((char *)v40 - v43) >> 5;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 59) {
              goto LABEL_75;
            }
            uint64_t v46 = v39 - (void)v43;
            if (v46 >> 4 > v45) {
              unint64_t v45 = v46 >> 4;
            }
            unint64_t v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v45;
            if (v47)
            {
              if (v47 >> 59) {
                goto LABEL_76;
              }
              unint64_t v61 = v47;
              uint64_t v48 = (char *)operator new(32 * v47);
              unint64_t v47 = v61;
            }
            else
            {
              uint64_t v48 = 0;
            }
            unint64_t v49 = &v48[32 * v44];
            *(void *)unint64_t v49 = v31;
            *((_DWORD *)v49 + 2) = v37;
            *((_DWORD *)v49 + 3) = v38;
            *((void *)v49 + 2) = v35;
            *((void *)v49 + 3) = v36;
            uint64_t v50 = v49;
            uint64_t v29 = v42;
            if (v40 != (unint64_t *)v43)
            {
              do
              {
                long long v51 = *((_OWORD *)v40 - 1);
                *((_OWORD *)v50 - 2) = *((_OWORD *)v40 - 2);
                *((_OWORD *)v50 - 1) = v51;
                v50 -= 32;
                v40 -= 4;
              }
              while (v40 != (unint64_t *)v43);
              unsigned int v40 = (unint64_t *)*((void *)v11 - 3);
            }
            unsigned int v41 = v49 + 32;
            *((void *)v11 - 3) = v50;
            *((void *)v11 - 2) = v49 + 32;
            *((void *)v11 - 1) = &v48[32 * v47];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            unint64_t *v40 = v31;
            *((_DWORD *)v40 + 2) = v37;
            *((_DWORD *)v40 + 3) = v38;
            unsigned int v41 = v40 + 4;
            _OWORD v40[2] = (unint64_t)CStrRef;
            void v40[3] = v34;
          }
          *((void *)v11 - 2) = v41;
          if (!v74) {
            continue;
          }
        }
        goto LABEL_65;
      }
      if (v74)
      {
LABEL_65:
        uint64_t v56 = std::generic_category();
        uint64_t v66 = v74;
        uint64_t v74 = 0;
        sub_1CD4FB504(&v66, &v68);
        uint64_t v57 = &v68;
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v57 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        unint64_t v69 = v57;
        sub_1CD5E2210(22, (uint64_t)v56, (uint64_t)"name lookup table at offset 0x%llx parsing failed: %s", &v75, (uint64_t *)&v69);
      }
      uint64_t v8 = v64;
      if (v73 != v64)
      {
        uint64_t v60 = std::generic_category();
        v76[0] = v73 - v29;
        unint64_t v69 = (std::string *)(v64 - v29);
        sub_1CD5E5860(22, (uint64_t)v60, (uint64_t)"name lookup table at offset 0x%llx has a terminator at offset 0x%llx before the expected end at 0x%llx", &v75, v76, (uint64_t *)&v69);
      }
      a2 = v63;
      uint64_t v4 = v62;
    }
    while (*(void *)(v63 + 8) > v64);
  }
}

uint64_t **llvm::DWARFDebugPubTable::dump(uint64_t **this, llvm::raw_ostream *a2)
{
  char v2 = *this;
  uint64_t v33 = this[1];
  if (*this != v33)
  {
    uint64_t v4 = this;
    do
    {
      if (*((unsigned char *)v2 + 8)) {
        int v5 = 16;
      }
      else {
        int v5 = 8;
      }
      uint64_t v6 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v6) > 8)
      {
        *(unsigned char *)(v6 + 8) = 32;
        *(void *)uint64_t v6 = *(void *)"length = ";
        *((void *)a2 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(a2, "length = ", 9uLL);
      }
      unsigned int v35 = &unk_1F2618A68;
      uint64_t v7 = *v2;
      unint64_t v36 = "0x%0*llx";
      LODWORD(v37) = v5;
      uint64_t v38 = v7;
      llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
      uint64_t v8 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v8) > 0xA)
      {
        *(_DWORD *)(v8 + 7) = 540876916;
        *(void *)uint64_t v8 = *(void *)", format = ";
        *((void *)a2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", format = ", 0xBuLL);
      }
      if (*((unsigned char *)v2 + 8))
      {
        if (*((unsigned char *)v2 + 8) != 1) {
          goto LABEL_17;
        }
        unint64_t v9 = "DWARF64";
      }
      else
      {
        unint64_t v9 = "DWARF32";
      }
      char v10 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v10 > 6uLL)
      {
        *char v10 = *(_DWORD *)v9;
        *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)(v9 + 3);
        *((void *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, v9, 7uLL);
      }
LABEL_17:
      uint64_t v11 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v11) > 0xB)
      {
        *(_DWORD *)(v11 + 8) = 540876910;
        *(void *)uint64_t v11 = *(void *)", version = ";
        *((void *)a2 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", version = ", 0xCuLL);
      }
      int v12 = (const char *)*((unsigned __int16 *)v2 + 5);
      unsigned int v35 = &unk_1F2618A88;
      unint64_t v36 = "0x%04x";
      int v37 = v12;
      llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
      uint64_t v13 = (_OWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v13 > 0xFuLL)
      {
        *uint64_t v13 = *(_OWORD *)", unit_offset = ";
        *((void *)a2 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", unit_offset = ", 0x10uLL);
      }
      uint64_t v14 = v2[2];
      unsigned int v35 = &unk_1F2618A68;
      unint64_t v36 = "0x%0*llx";
      LODWORD(v37) = v5;
      uint64_t v38 = v14;
      llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
      unint64_t v15 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v15 > 0xDuLL)
      {
        qmemcpy(v15, ", unit_std::string::size_type size = ", 14);
        *((void *)a2 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", unit_std::string::size_type size = ", 0xEuLL);
      }
      uint64_t v16 = v2[3];
      unsigned int v35 = &unk_1F2618A68;
      unint64_t v36 = "0x%0*llx";
      LODWORD(v37) = v5;
      uint64_t v38 = v16;
      llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
      uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v17 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v17 + 1;
        *uint64_t v17 = 10;
      }
      if (*((unsigned char *)v4 + 24)) {
        uint64_t v18 = "Offset     Linkage  Kind     Name\n";
      }
      else {
        uint64_t v18 = "Offset     Name\n";
      }
      if (*((unsigned char *)v4 + 24)) {
        size_t v19 = 34;
      }
      else {
        size_t v19 = 16;
      }
      BOOL v20 = (void *)*((void *)a2 + 4);
      if (v19 <= *((void *)a2 + 3) - (void)v20)
      {
        this = (uint64_t **)memcpy(v20, v18, v19);
        *((void *)a2 + 4) += v19;
      }
      else
      {
        this = (uint64_t **)llvm::raw_ostream::write(a2, v18, v19);
      }
      uint64_t v21 = v2[4];
      uint64_t v22 = v2[5];
      if (v21 != v22)
      {
        uint64_t v23 = v21 + 12;
        do
        {
          uint64_t v25 = v23 - 12;
          uint64_t v24 = *(void *)(v23 - 12);
          unsigned int v35 = &unk_1F2618A68;
          unint64_t v36 = "0x%0*llx ";
          LODWORD(v37) = v5;
          uint64_t v38 = v24;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
          if (*((unsigned char *)v4 + 24))
          {
            std::string::size_type v26 = off_1E6849AB0[*(int *)(v23 - 4)];
            BOOL v27 = "STATIC";
            if (!*(_DWORD *)v23) {
              BOOL v27 = "EXTERNAL";
            }
            unsigned int v35 = &unk_1F25FF060;
            unint64_t v36 = "%-8s";
            int v37 = v27;
            llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
            std::string::value_type v28 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v28 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((void *)a2 + 4) = v28 + 1;
              unsigned char *v28 = 32;
            }
            v34[0] = &unk_1F25FF060;
            v34[1] = "%-8s";
            void v34[2] = v26;
            llvm::raw_ostream::operator<<(a2, (uint64_t)v34);
            uint64_t v29 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v29 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((void *)a2 + 4) = v29 + 1;
              unsigned char *v29 = 32;
            }
          }
          BOOL v30 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v30 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 34);
          }
          else
          {
            *((void *)a2 + 4) = v30 + 1;
            *BOOL v30 = 34;
          }
          unint64_t v31 = *(const void **)(v23 + 4);
          unint64_t v32 = *(void *)(v23 + 12);
          this = (uint64_t **)*((void *)a2 + 4);
          if (v32 <= *((void *)a2 + 3) - (void)this)
          {
            if (v32)
            {
              memcpy(this, v31, *(void *)(v23 + 12));
              this = (uint64_t **)(*((void *)a2 + 4) + v32);
              *((void *)a2 + 4) = this;
            }
          }
          else
          {
            llvm::raw_ostream::write(a2, (const char *)v31, *(void *)(v23 + 12));
            this = (uint64_t **)*((void *)a2 + 4);
          }
          if (*((void *)a2 + 3) - (void)this > 1uLL)
          {
            *(_WORD *)this = 2594;
            *((void *)a2 + 4) += 2;
          }
          else
          {
            this = (uint64_t **)llvm::raw_ostream::write(a2, "\"\n", 2uLL);
          }
          v23 += 32;
        }
        while (v25 + 32 != v22);
      }
      v2 += 7;
    }
    while (v2 != v33);
  }
  return this;
}

BOOL llvm::DWARFDebugRangeList::RangeListEntry::isBaseAddressSelectionEntry(llvm::DWARFDebugRangeList::RangeListEntry *this, char a2)
{
  return *(void *)this == 0xFFFFFFFFFFFFFFFFLL >> (-8 * a2);
}

uint64_t llvm::DWARFDebugRangeList::extract@<X0>(llvm::DWARFDebugRangeList *this@<X0>, const llvm::DWARFDataExtractor *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)this = -1;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 3) = *((void *)this + 2);
  if (*((void *)a2 + 1) <= *a3)
  {
    uint64_t v22 = std::generic_category();
    sub_1CD5E3FE8(22, (uint64_t)v22, (uint64_t)"invalid range list offset 0x%llx", (uint64_t *)a3);
  }
  unsigned int v8 = *((unsigned __int8 *)a2 + 17);
  *((unsigned char *)this + 8) = v8;
  std::generic_category();
  uint64_t result = sub_1CD5E49A8(v8, (uint64_t)"range list at offset 0x%llx", (uint64_t *)a3, a4);
  if (!*a4)
  {
    *(void *)this = *a3;
    while (1)
    {
      uint64_t v26 = -1;
      uint64_t v24 = *a3;
      *(void *)&long long v25 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, *((unsigned __int8 *)a2 + 17), a3, 0, 0);
      uint64_t result = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a2, *((unsigned __int8 *)a2 + 17), a3, &v26, 0);
      *((void *)&v25 + 1) = result;
      if (*a3 != v24 + 2 * *((unsigned __int8 *)this + 8))
      {
        *(void *)this = -1;
        *((unsigned char *)this + 8) = 0;
        *((void *)this + 3) = *((void *)this + 2);
        uint64_t v23 = std::generic_category();
        sub_1CD5E3FE8(22, (uint64_t)v23, (uint64_t)"invalid range list entry at offset 0x%llx", &v24);
      }
      if (!((unint64_t)v25 | result)) {
        break;
      }
      uint64_t v11 = (void *)*((void *)this + 3);
      unint64_t v10 = *((void *)this + 4);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v14 = (void *)*((void *)this + 2);
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v11 - v14) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v14) >> 3);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL) {
            sub_1CB833614();
          }
          uint64_t v18 = (char *)operator new(24 * v17);
        }
        else
        {
          uint64_t v18 = 0;
        }
        size_t v19 = &v18[8 * (v11 - v14)];
        *(_OWORD *)size_t v19 = v25;
        *((void *)v19 + 2) = v26;
        BOOL v20 = v19;
        if (v11 != v14)
        {
          do
          {
            long long v21 = *(_OWORD *)(v11 - 3);
            *((void *)v20 - 1) = *(v11 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v11 -= 3;
          }
          while (v11 != v14);
          uint64_t v11 = (void *)*((void *)this + 2);
        }
        uint64_t v13 = v19 + 24;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19 + 24;
        *((void *)this + 4) = &v18[24 * v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        long long v12 = v25;
        _OWORD v11[2] = v26;
        *(_OWORD *)uint64_t v11 = v12;
        uint64_t v13 = v11 + 3;
      }
      *((void *)this + 3) = v13;
    }
    *a4 = 0;
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFDebugRangeList::dump(llvm::DWARFDebugRangeList *this, llvm::raw_ostream *a2)
{
  int v4 = *((unsigned __int8 *)this + 8);
  if (v4 == 2)
  {
    int v5 = "%08llx %04llx %04llx\n";
  }
  else if (v4 == 8)
  {
    int v5 = "%08llx %016llx %016llx\n";
  }
  else
  {
    int v5 = "%08llx %08llx %08llx\n";
  }
  uint64_t v6 = (long long *)*((void *)this + 2);
  uint64_t v7 = (long long *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *(void *)this;
    long long v12 = &unk_1F2618EC8;
    uint64_t v13 = v5;
    uint64_t v14 = v8;
    long long v9 = *v6;
    uint64_t v6 = (long long *)((char *)v6 + 24);
    long long v15 = v9;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
  }
  uint64_t v10 = *(void *)this;
  long long v12 = &unk_1F25FF808;
  uint64_t v13 = "%08llx <End of list>\n";
  uint64_t v14 = v10;
  return llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
}

void llvm::DWARFDebugRangeList::getAbsoluteRanges(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v3 = *(uint64_t **)(a1 + 16);
  int v4 = *(uint64_t **)(a1 + 24);
  if (v3 != v4)
  {
    uint64_t v7 = a3;
    uint64_t v8 = 0;
    unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (-8 * *(unsigned char *)(a1 + 8))) - 1;
    unint64_t v25 = v9;
    do
    {
      uint64_t v10 = *v3;
      if (*v3 == 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(unsigned char *)(a1 + 8)))
      {
        int v11 = *((unsigned __int8 *)a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)(v3 + 1);
        if (!v11) {
          *((unsigned char *)a2 + 16) = 1;
        }
      }
      else if (v10 != v9)
      {
        uint64_t v12 = v3[1];
        uint64_t v13 = v3[2];
        if (!*((unsigned char *)a2 + 16)) {
          goto LABEL_11;
        }
        uint64_t v14 = *a2;
        if (*a2 != v9)
        {
          v10 += v14;
          v12 += v14;
          if (v13 == -1) {
            uint64_t v13 = a2[1];
          }
LABEL_11:
          unint64_t v15 = (unint64_t)v7[2];
          if ((unint64_t)v8 >= v15)
          {
            unint64_t v17 = *v7;
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v17) >> 3) + 1;
            if (v18 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v17) >> 3);
            if (2 * v19 > v18) {
              unint64_t v18 = 2 * v19;
            }
            if (v19 >= 0x555555555555555) {
              unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v20 = v18;
            }
            unint64_t v27 = v20;
            if (v20)
            {
              if (v20 > 0xAAAAAAAAAAAAAAALL) {
                sub_1CB833614();
              }
              long long v21 = (char *)operator new(24 * v20);
            }
            else
            {
              long long v21 = 0;
            }
            uint64_t v22 = &v21[8 * ((v8 - v17) >> 3)];
            *(void *)uint64_t v22 = v10;
            *((void *)v22 + 1) = v12;
            *((void *)v22 + 2) = v13;
            uint64_t v23 = v22;
            if (v8 == v17)
            {
              uint64_t v7 = a3;
            }
            else
            {
              do
              {
                long long v24 = *(_OWORD *)(v8 - 24);
                *((void *)v23 - 1) = *((void *)v8 - 1);
                *(_OWORD *)(v23 - 24) = v24;
                v23 -= 24;
                v8 -= 24;
              }
              while (v8 != v17);
              uint64_t v7 = a3;
              uint64_t v8 = *a3;
            }
            unint64_t v16 = v22 + 24;
            long long *v7 = v23;
            v7[1] = v22 + 24;
            v7[2] = &v21[24 * v27];
            if (v8) {
              operator delete(v8);
            }
            unint64_t v9 = v25;
          }
          else
          {
            *(void *)uint64_t v8 = v10;
            *((void *)v8 + 1) = v12;
            unint64_t v16 = v8 + 24;
            *((void *)v8 + 2) = v13;
          }
          v7[1] = v16;
          uint64_t v8 = v16;
        }
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void llvm::DWARFDebugRnglist::getAbsoluteRanges(int8x16_t **a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void (*a4)(long long *__return_ptr, uint64_t, void)@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  void (*v23)(long long *__return_ptr, uint64_t, void);
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  long long v32;
  int8x16_t *v35;
  unint64_t v36;
  long long v37;
  char v38;
  long long v39;
  uint64_t v40;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v8 = a5;
    int v11 = a6;
    uint64_t v12 = 0;
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3);
    unsigned int v35 = a1[1];
    do
    {
      int v13 = v7->u8[8];
      if (v13 == 1)
      {
        a4(&v39, v8, v7[1].u32[2]);
        *(_OWORD *)a2 = v39;
        char v18 = v40;
        a2[2] = v40;
        if (!v18)
        {
          *a2 = v7[1].i64[1];
          a2[1] = -1;
LABEL_20:
          *((unsigned char *)a2 + 16) = 1;
        }
      }
      else
      {
        if (v13 != 5)
        {
          if (!v7->i8[8]) {
            return;
          }
          uint64_t v14 = v7[1].i64[0];
          if (*((unsigned char *)a2 + 16) && v14 == -1) {
            uint64_t v14 = a2[1];
          }
          switch(v7->i8[8])
          {
            case 3:
              a4(&v39, v8, v7[1].u32[2]);
              if ((_BYTE)v40) {
                uint64_t v16 = v39;
              }
              else {
                uint64_t v16 = 0;
              }
              if ((_BYTE)v40) {
                uint64_t v14 = *((void *)&v39 + 1);
              }
              else {
                uint64_t v14 = -1;
              }
              goto LABEL_33;
            case 4:
              uint64_t v16 = v7[1].i64[1];
              if (v16 == v36) {
                goto LABEL_55;
              }
              uint64_t v15 = v7[2].i64[0];
              if (!*((unsigned char *)a2 + 16)) {
                goto LABEL_34;
              }
              uint64_t v19 = *a2;
              if (*a2 != v36)
              {
                v16 += v19;
                v15 += v19;
LABEL_34:
                if (v16 != v36)
                {
                  unint64_t v20 = (unint64_t)v11[2];
                  if ((unint64_t)v12 >= v20)
                  {
                    uint64_t v22 = v11;
                    uint64_t v23 = a4;
                    long long v24 = *v22;
                    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v12 - *v22);
                    uint64_t v26 = v25 + 1;
                    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      abort();
                    }
                    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v24) >> 3);
                    if (2 * v27 > v26) {
                      uint64_t v26 = 2 * v27;
                    }
                    if (v27 >= 0x555555555555555) {
                      std::string::value_type v28 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      std::string::value_type v28 = v26;
                    }
                    if (v28)
                    {
                      if (v28 > 0xAAAAAAAAAAAAAAALL) {
                        sub_1CB833614();
                      }
                      uint64_t v29 = (char *)operator new(24 * v28);
                    }
                    else
                    {
                      uint64_t v29 = 0;
                    }
                    BOOL v30 = (uint64_t *)&v29[24 * v25];
                    *BOOL v30 = v16;
                    v30[1] = v15;
                    void v30[2] = v14;
                    unint64_t v31 = v30;
                    a4 = v23;
                    if (v12 == v24)
                    {
                      int v11 = a6;
                    }
                    else
                    {
                      do
                      {
                        unint64_t v32 = *(_OWORD *)(v12 - 3);
                        *(v31 - 1) = *(v12 - 1);
                        *(_OWORD *)(v31 - 3) = v32;
                        v31 -= 3;
                        v12 -= 3;
                      }
                      while (v12 != v24);
                      int v11 = a6;
                      uint64_t v12 = *a6;
                    }
                    long long v21 = v30 + 3;
                    *int v11 = v31;
                    v11[1] = v30 + 3;
                    _OWORD v11[2] = (uint64_t *)&v29[24 * v28];
                    if (v12) {
                      operator delete(v12);
                    }
                    uint64_t v8 = a5;
                  }
                  else
                  {
                    *uint64_t v12 = v16;
                    v12[1] = v15;
                    long long v21 = v12 + 3;
                    unint64_t v12[2] = v14;
                  }
                  v11[1] = v21;
                  uint64_t v12 = v21;
                  uint64_t v6 = v35;
                }
              }
              break;
            case 5:
              __break(1u);
              JUMPOUT(0x1CC699D10);
            case 6:
              uint64_t v16 = v7[1].i64[1];
              uint64_t v15 = v7[2].i64[0];
              goto LABEL_34;
            case 7:
              uint64_t v16 = v7[1].i64[1];
LABEL_33:
              uint64_t v15 = v7[2].i64[0] + v16;
              goto LABEL_34;
            default:
              a4(&v39, v8, v7[1].u32[2]);
              if (!(_BYTE)v40)
              {
                unint64_t v39 = xmmword_1CD91C150;
                LOBYTE(v40) = 1;
              }
              a4(&v37, v8, v7[2].u32[0]);
              if (v38) {
                uint64_t v15 = v37;
              }
              else {
                uint64_t v15 = 0;
              }
              uint64_t v14 = *((void *)&v39 + 1);
              uint64_t v16 = v39;
              goto LABEL_34;
          }
          goto LABEL_55;
        }
        int v17 = *((unsigned __int8 *)a2 + 16);
        *(int8x16_t *)a2 = vextq_s8(v7[1], v7[1], 8uLL);
        if (!v17) {
          goto LABEL_20;
        }
      }
LABEL_55:
      uint64_t v7 = (int8x16_t *)((char *)v7 + 40);
    }
    while (v7 != v6);
  }
}

llvm::raw_ostream *llvm::RangeListEntry::dump(llvm::raw_ostream *result, llvm::raw_ostream *this, unsigned __int8 a3, unsigned int a4, unint64_t *a5, uint64_t a6, void *(*a7)(unsigned char *__return_ptr, uint64_t, void), uint64_t a8)
{
  uint64_t v14 = result;
  v76[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a6 + 20))
  {
    uint64_t v16 = *(void *)result;
    *(void *)uint64_t v73 = &unk_1F25FF808;
    *(void *)&v73[8] = "0x%8.8llx:";
    *(void *)&v73[16] = v16;
    llvm::raw_ostream::operator<<(this, (uint64_t)v73);
    unint64_t v17 = *((char *)v14 + 8);
    if (v17 > 7)
    {
      char v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      char v18 = off_1E6849AF0[v17];
      uint64_t v19 = qword_1CFB1B960[v17];
    }
    *(void *)uint64_t v73 = &unk_1F2619180;
    *(void *)&v73[8] = " [%s%*c";
    *(void *)&v73[16] = v18;
    uint64_t v74 = v19 + a4 + 1;
    char v75 = 93;
    uint64_t result = llvm::raw_ostream::operator<<(this, (uint64_t)v73);
    if (*((unsigned char *)v14 + 8))
    {
      unint64_t v20 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v20 > 1uLL)
      {
        _WORD *v20 = 8250;
        *((void *)this + 4) += 2;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(this, ": ", 2uLL);
      }
    }
  }
  switch(*((unsigned char *)v14 + 8))
  {
    case 1:
      unsigned int v26 = *((_DWORD *)v14 + 6);
      unint64_t v25 = (unint64_t *)((char *)v14 + 24);
      uint64_t result = (llvm::raw_ostream *)a7(v73, a8, v26);
      if (v73[16]) {
        unint64_t v27 = (unint64_t *)v73;
      }
      else {
        unint64_t v27 = v25;
      }
      *a5 = *v27;
      if (*(unsigned char *)(a6 + 20))
      {
        std::string::value_type v28 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v28 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((void *)this + 4) = v28 + 1;
          unsigned char *v28 = 32;
        }
        uint64_t v30 = *v25;
        goto LABEL_31;
      }
      return result;
    case 2:
      *(_OWORD *)unint64_t v49 = *(_OWORD *)a6;
      *(void *)&v49[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)v50, a6 + 24);
      sub_1CC66D518((uint64_t)v51, a6 + 56);
      if (v49[20])
      {
        v49[21] = 1;
        long long v44 = *(_OWORD *)((char *)v14 + 24);
        uint64_t v45 = -1;
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v49;
        *(void *)&v73[14] = *(void *)&v49[14];
        sub_1CC66D518((uint64_t)&v74, (uint64_t)v50);
        sub_1CC66D518((uint64_t)v76, (uint64_t)v51);
        llvm::DWARFAddressRange::dump((uint64_t *)&v44, this, a3, (uint64_t)v73, 0);
        sub_1CD5E15A8(v73);
        unint64_t v32 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v32 > 3uLL)
        {
          _DWORD *v32 = 540949792;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, " => ", 4uLL);
        }
      }
      sub_1CD5E15A8(v49);
      a7(v73, a8, *((unsigned int *)v14 + 6));
      if (v73[16]) {
        uint64_t v33 = *(void *)v73;
      }
      else {
        uint64_t v33 = 0;
      }
      a7(v73, a8, *((unsigned int *)v14 + 8));
      if (v73[16]) {
        uint64_t v34 = *(void *)v73;
      }
      else {
        uint64_t v34 = 0;
      }
      *(void *)uint64_t v73 = v33;
      *(void *)&v73[8] = v34;
      *(void *)&v73[16] = -1;
      *(_OWORD *)uint64_t v46 = *(_OWORD *)a6;
      *(void *)&v46[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)&v47, a6 + 24);
      sub_1CC66D518((uint64_t)&v48, a6 + 56);
      llvm::DWARFAddressRange::dump((uint64_t *)v73, this, a3, (uint64_t)v46, 0);
      unsigned int v35 = v46;
      goto LABEL_63;
    case 3:
      *(_OWORD *)unint64_t v55 = *(_OWORD *)a6;
      *(void *)&v55[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)v56, a6 + 24);
      sub_1CC66D518((uint64_t)v57, a6 + 56);
      if (v55[20])
      {
        v55[21] = 1;
        long long v44 = *(_OWORD *)((char *)v14 + 24);
        uint64_t v45 = -1;
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v55;
        *(void *)&v73[14] = *(void *)&v55[14];
        sub_1CC66D518((uint64_t)&v74, (uint64_t)v56);
        sub_1CC66D518((uint64_t)v76, (uint64_t)v57);
        llvm::DWARFAddressRange::dump((uint64_t *)&v44, this, a3, (uint64_t)v73, 0);
        sub_1CD5E15A8(v73);
        unint64_t v36 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v36 > 3uLL)
        {
          _DWORD *v36 = 540949792;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, " => ", 4uLL);
        }
      }
      sub_1CD5E15A8(v55);
      a7(v73, a8, *((unsigned int *)v14 + 6));
      if (v73[16]) {
        uint64_t v37 = *(void *)v73;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = *((void *)v14 + 4) + v37;
      *(void *)uint64_t v73 = v37;
      *(void *)&v73[8] = v38;
      *(void *)&v73[16] = -1;
      *(_OWORD *)char v52 = *(_OWORD *)a6;
      *(void *)&v52[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)&v53, a6 + 24);
      sub_1CC66D518((uint64_t)&v54, a6 + 56);
      llvm::DWARFAddressRange::dump((uint64_t *)v73, this, a3, (uint64_t)v52, 0);
      unsigned int v35 = v52;
      goto LABEL_63;
    case 4:
      *(_OWORD *)unint64_t v64 = *(_OWORD *)a6;
      *(void *)&v64[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)v65, a6 + 24);
      sub_1CC66D518((uint64_t)v66, a6 + 56);
      if (v64[20])
      {
        v64[21] = 1;
        long long v44 = *(_OWORD *)((char *)v14 + 24);
        uint64_t v45 = -1;
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v64;
        *(void *)&v73[14] = *(void *)&v64[14];
        sub_1CC66D518((uint64_t)&v74, (uint64_t)v65);
        sub_1CC66D518((uint64_t)v76, (uint64_t)v66);
        llvm::DWARFAddressRange::dump((uint64_t *)&v44, this, a3, (uint64_t)v73, 0);
        sub_1CD5E15A8(v73);
        unint64_t v39 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v39 > 3uLL)
        {
          _DWORD *v39 = 540949792;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, " => ", 4uLL);
        }
      }
      uint64_t result = (llvm::raw_ostream *)sub_1CD5E15A8(v64);
      if (*a5 != 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3))
      {
        *(int64x2_t *)uint64_t v73 = vaddq_s64(*(int64x2_t *)((char *)v14 + 24), vdupq_n_s64(*a5));
        *(void *)&v73[16] = -1;
        *(_OWORD *)unint64_t v61 = *(_OWORD *)a6;
        *(void *)&v61[14] = *(void *)(a6 + 14);
        sub_1CC66D518((uint64_t)&v62, a6 + 24);
        sub_1CC66D518((uint64_t)&v63, a6 + 56);
        llvm::DWARFAddressRange::dump((uint64_t *)v73, this, a3, (uint64_t)v61, 0);
        unsigned int v35 = v61;
LABEL_63:
        uint64_t result = (llvm::raw_ostream *)sub_1CD5E15A8(v35);
        goto LABEL_32;
      }
      uint64_t v40 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v40) <= 8)
      {
        uint64_t v23 = "dead code";
        long long v24 = this;
        size_t v21 = 9;
        goto LABEL_17;
      }
      *(unsigned char *)(v40 + 8) = 101;
      *(void *)uint64_t v40 = *(void *)"dead code";
      uint64_t v43 = *((void *)this + 4) + 9;
      goto LABEL_68;
    case 5:
      *a5 = *((void *)v14 + 3);
      if (!*(unsigned char *)(a6 + 20)) {
        return result;
      }
      uint64_t v29 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v29 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((void *)this + 4) = v29 + 1;
        unsigned char *v29 = 32;
      }
      uint64_t v30 = *((void *)v14 + 3);
LABEL_31:
      *(void *)uint64_t v73 = &unk_1F2619220;
      *(void *)&v73[8] = "0x%*.*llx";
      v73[16] = 2 * a3;
      v73[17] = 2 * a3;
      uint64_t v74 = v30;
      uint64_t result = llvm::raw_ostream::operator<<(this, (uint64_t)v73);
      goto LABEL_32;
    case 6:
      *(_OWORD *)uint64_t v73 = *(_OWORD *)((char *)v14 + 24);
      *(void *)&v73[16] = -1;
      *(_OWORD *)uint64_t v58 = *(_OWORD *)a6;
      *(void *)&v58[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)&v59, a6 + 24);
      sub_1CC66D518((uint64_t)&v60, a6 + 56);
      llvm::DWARFAddressRange::dump((uint64_t *)v73, this, a3, (uint64_t)v58, 0);
      unsigned int v35 = v58;
      goto LABEL_63;
    case 7:
      *(_OWORD *)unint64_t v70 = *(_OWORD *)a6;
      *(void *)&v70[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)v71, a6 + 24);
      sub_1CC66D518((uint64_t)v72, a6 + 56);
      if (v70[20])
      {
        v70[21] = 1;
        long long v44 = *(_OWORD *)((char *)v14 + 24);
        uint64_t v45 = -1;
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v70;
        *(void *)&v73[14] = *(void *)&v70[14];
        sub_1CC66D518((uint64_t)&v74, (uint64_t)v71);
        sub_1CC66D518((uint64_t)v76, (uint64_t)v72);
        llvm::DWARFAddressRange::dump((uint64_t *)&v44, this, a3, (uint64_t)v73, 0);
        sub_1CD5E15A8(v73);
        unsigned int v41 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v41 > 3uLL)
        {
          *unsigned int v41 = 540949792;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, " => ", 4uLL);
        }
      }
      sub_1CD5E15A8(v70);
      uint64_t v42 = *((void *)v14 + 4) + *((void *)v14 + 3);
      *(void *)uint64_t v73 = *((void *)v14 + 3);
      *(void *)&v73[8] = v42;
      *(void *)&v73[16] = -1;
      *(_OWORD *)uint64_t v67 = *(_OWORD *)a6;
      *(void *)&v67[14] = *(void *)(a6 + 14);
      sub_1CC66D518((uint64_t)&v68, a6 + 24);
      sub_1CC66D518((uint64_t)&v69, a6 + 56);
      llvm::DWARFAddressRange::dump((uint64_t *)v73, this, a3, (uint64_t)v67, 0);
      unsigned int v35 = v67;
      goto LABEL_63;
    default:
      if (*(unsigned char *)(a6 + 20)) {
        size_t v21 = 0;
      }
      else {
        size_t v21 = 13;
      }
      uint64_t v22 = (void *)*((void *)this + 4);
      if (v21 <= *((void *)this + 3) - (void)v22)
      {
        if (!*(unsigned char *)(a6 + 20))
        {
          qmemcpy(v22, "<End of list>", 13);
          uint64_t v43 = *((void *)this + 4) + 13;
LABEL_68:
          *((void *)this + 4) = v43;
        }
      }
      else
      {
        if (*(unsigned char *)(a6 + 20)) {
          uint64_t v23 = "";
        }
        else {
          uint64_t v23 = "<End of list>";
        }
        long long v24 = this;
LABEL_17:
        uint64_t result = llvm::raw_ostream::write(v24, v23, v21);
      }
LABEL_32:
      unint64_t v31 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v31) {
        return llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      *unint64_t v31 = 10;
      ++*((void *)this + 4);
      return result;
  }
}

uint64_t sub_1CC69A6FC@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return llvm::DWARFUnit::getAddrOffsetSectionItem(*a1, a2, a3);
}

uint64_t sub_1CC69A704(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(char *)(a1 + 32));
}

void llvm::DWARFDie::getFullName(llvm::DWARFUnit **a1, uint64_t a2, uint64_t a3)
{
  if (llvm::DWARFDie::getShortName((llvm::DWARFDie *)a1))
  {
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = v6[2];
    if (!v7 || *(_WORD *)(v7 + 4) != 16647)
    {
      uint64_t v11 = a2;
      __int16 v12 = 1;
      uint64_t v8 = *a1;
      unint64_t v9 = sub_1CC69CE38(&v11, v8, v6, a3);
      sub_1CC69DAA0(&v11, v8, v6, v9, v10, 0);
    }
  }
}

void llvm::dumpTypeUnqualifiedName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  __int16 v8 = 1;
  long long v3 = *(llvm::DWARFUnit **)a1;
  int v4 = *(uint64_t **)(a1 + 8);
  int v5 = sub_1CC69CE38(&v7, *(llvm::DWARFUnit **)a1, v4, a3);
  sub_1CC69DAA0(&v7, v3, v4, v5, v6, 0);
}

BOOL llvm::DWARFDie::isSubprogramDIE(llvm::DWARFDie *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 16);
  return v1 && *(unsigned __int16 *)(v1 + 4) == 46;
}

BOOL llvm::DWARFDie::isSubroutineDIE(llvm::DWARFDie *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 16);
  if (v1) {
    LODWORD(v1) = *(unsigned __int16 *)(v1 + 4);
  }
  return v1 == 46 || v1 == 29;
}

uint64_t llvm::DWARFDie::getRangesBaseAttribute(llvm::DWARFUnit **this)
{
  int v2 = 556925044;
  llvm::DWARFDie::find(this, (unsigned __int16 *)&v2, 2, &v3);
  if (!v5) {
    return 0;
  }
  if (llvm::DWARFFormValue::isFormClass(&v3, 8)) {
    return v4;
  }
  return 0;
}

uint64_t llvm::DWARFDie::getLocBaseAttribute(llvm::DWARFUnit **this)
{
  llvm::DWARFDie::find(this, 140, &v2);
  if (!v4) {
    return 0;
  }
  if (llvm::DWARFFormValue::isFormClass(&v2, 8)) {
    return v3;
  }
  return 0;
}

uint64_t llvm::DWARFDie::addressRangeContainsAddress(llvm::DWARFDie *this, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  llvm::DWARFDie::getAddressRanges(this, (uint64_t)&v8);
  if (v10)
  {
    uint64_t v7 = v8;
    __int16 v8 = 0;
    sub_1CD4515D0(&v7);
    if (v7) {
      (*(void (**)(unint64_t *))(*v7 + 8))(v7);
    }
    goto LABEL_14;
  }
  uint64_t v3 = v8;
  if (v8 == v9)
  {
LABEL_14:
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  do
  {
    BOOL v4 = *v3 <= a2 && v3[1] > a2;
    uint64_t v5 = v4;
    if (v4) {
      break;
    }
    v3 += 3;
  }
  while (v3 != v9);
LABEL_15:
  sub_1CC1EB7C0((uint64_t)&v8);
  return v5;
}

void llvm::DWARFDie::getLocations(llvm::DWARFUnit **a1@<X0>, llvm::dwarf *a2@<X1>, uint64_t a3@<X8>)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = llvm::DWARFDie::find(a1, (int)a2, &v25);
  if (!v28)
  {
    uint64_t v7 = llvm::inconvertibleErrorCode((llvm *)v6);
    uint64_t v9 = v8;
    *(void *)&long long v30 = llvm::dwarf::AttributeString(a2);
    sub_1CD5E3960(v7, v9, (uint64_t)"No %s", (uint64_t *)&v30);
  }
  char isFormClass = (llvm *)llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v25, 8);
  if (isFormClass)
  {
    uint64_t v11 = *(void *)v26;
    if ((unsigned __int16)v25 == 34)
    {
      LoclistOffset = (llvm *)llvm::DWARFUnit::getLoclistOffset(*a1, v26[0]);
      if (!v13)
      {
        *(void *)&long long v30 = llvm::inconvertibleErrorCode(LoclistOffset);
        *((void *)&v30 + 1) = v20;
        v24[0] = (uint64_t)"Loclist table not found";
        sub_1CD06481C();
      }
      uint64_t v11 = (uint64_t)LoclistOffset;
    }
    llvm::DWARFUnit::findLoclistFromOffset(*a1, v11, a3);
  }
  else
  {
    if ((unsigned __int16)v25 > 0x2Du
      || ((0x618uLL >> (char)v25) & 1) == 0 && (unsigned __int16)v25 != 30 && (unsigned __int16)v25 != 24)
    {
      uint64_t v21 = llvm::inconvertibleErrorCode(isFormClass);
      uint64_t v23 = v22;
      *(void *)&long long v30 = llvm::dwarf::AttributeString(a2);
      v24[0] = (uint64_t)llvm::dwarf::FormEncodingString((llvm::dwarf *)(unsigned __int16)v25);
      sub_1CD4F664C(v21, v23, (uint64_t)"Unsupported %s encoding: %s", (uint64_t *)&v30, v24);
    }
    uint64_t v14 = *(void *)v26;
    LOBYTE(v30) = 0;
    BYTE8(v31) = 0;
    unint64_t v32 = v34;
    long long v33 = xmmword_1CDB159A0;
    if (*(void *)v26 >= 5uLL) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v15 = 0;
    if (*(void *)v26)
    {
      memcpy(v32, v27, *(size_t *)v26);
      uint64_t v15 = v33;
    }
    size_t v16 = v15 + v14;
    *(void *)&long long v33 = v16;
    unint64_t v17 = operator new(0x40uLL);
    char v18 = (char *)(v17 + 4);
    long long v19 = v31;
    *unint64_t v17 = v30;
    v17[1] = v19;
    *((void *)v17 + 4) = (char *)v17 + 56;
    *(_OWORD *)((char *)v17 + 40) = xmmword_1CDB159A0;
    if (v16)
    {
      if (v16 >= 5) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      memcpy((char *)v17 + 56, v32, v16);
      *((void *)v17 + 5) = v16;
    }
    *(unsigned char *)(a3 + 24) &= ~1u;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v18;
    *(void *)(a3 + 16) = v18;
    memset(v24, 0, sizeof(v24));
    uint64_t v29 = (void **)v24;
    sub_1CC683E70(&v29);
    if (v32 != v34) {
      free(v32);
    }
  }
}

void *llvm::DWARFDie::getSubroutineName(llvm::DWARFDie *a1, int a2)
{
  uint64_t v2 = *(void *)(*((void *)a1 + 1) + 16);
  if (v2 && ((v3 = *(unsigned __int16 *)(v2 + 4), v3 != 46) ? (BOOL v4 = v3 == 29) : (BOOL v4 = 1), v4)) {
    return llvm::DWARFDie::getName(a1, a2);
  }
  else {
    return 0;
  }
}

unint64_t llvm::DWARFDie::getDeclLine(llvm::DWARFDie *this)
{
  unsigned __int16 v3 = 59;
  llvm::DWARFDie::findRecursively(this, &v3, 1, v4);
  if (!v4[48]) {
    return 0;
  }
  unint64_t result = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v4);
  if (!v2) {
    return 0;
  }
  return result;
}

void llvm::DWARFDie::getDeclFile(_OWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LOWORD(v6) = 58;
  llvm::DWARFDie::findRecursively(a1, (unsigned __int16 *)&v6, 1, v9);
  if (v10 && (llvm::DWARFFormValue::getAsFile(v9, a2, (uint64_t)&v6), v8))
  {
    if (SHIBYTE(v7) < 0)
    {
      uint64_t v5 = (void *)v6;
      sub_1CB8BDF7C(a3, (const void *)v6, *((unint64_t *)&v6 + 1));
      operator delete(v5);
    }
    else
    {
      *(_OWORD *)a3 = v6;
      *(void *)(a3 + 16) = v7;
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

uint64_t llvm::DWARFDie::getCallerFrame(llvm::DWARFUnit **this, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  llvm::DWARFDie::find(this, 88, v22);
  unsigned int v10 = v23;
  if (v23)
  {
    unsigned int AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v12) {
      unsigned int v10 = AsUnsignedConstant;
    }
    else {
      unsigned int v10 = 0;
    }
  }
  *a2 = v10;
  llvm::DWARFDie::find(this, 89, v22);
  unsigned int v13 = v23;
  if (v23)
  {
    unsigned int v14 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v15) {
      unsigned int v13 = v14;
    }
    else {
      unsigned int v13 = 0;
    }
  }
  *a3 = v13;
  llvm::DWARFDie::find(this, 87, v22);
  unsigned int v16 = v23;
  if (v23)
  {
    unsigned int v17 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v18) {
      unsigned int v16 = v17;
    }
    else {
      unsigned int v16 = 0;
    }
  }
  *a4 = v16;
  uint64_t result = (uint64_t)llvm::DWARFDie::find(this, 8502, v22);
  unsigned int v20 = v23;
  if (v23)
  {
    uint64_t result = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v22);
    if (v21) {
      unsigned int v20 = result;
    }
    else {
      unsigned int v20 = 0;
    }
  }
  *a5 = v20;
  return result;
}

void llvm::DWARFDie::dump(uint64_t *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (!*a1) {
    return;
  }
  long long v6 = (uint64_t *)a1[1];
  if (!v6) {
    return;
  }
  unsigned int v10 = *(uint64_t **)(v4 + 16);
  uint64_t v11 = *(void *)(*(void *)(v4 + 8) + 520);
  char v12 = *(unsigned char *)(v4 + 208);
  char v13 = *(unsigned char *)(v4 + 34);
  unint64_t v14 = v10[1];
  v46[0] = *v10;
  v46[1] = v14;
  char v47 = v12;
  char v48 = v13;
  uint64_t v49 = v11;
  uint64_t v50 = v10;
  uint64_t v15 = *v6;
  unint64_t v45 = *v6;
  if (!*(unsigned char *)(a4 + 17))
  {
    unint64_t v16 = v15;
    goto LABEL_5;
  }
  *(_OWORD *)uint64_t v59 = *(_OWORD *)a4;
  *(void *)&v59[14] = *(void *)(a4 + 14);
  sub_1CC66D518((uint64_t)&v59[24], a4 + 24);
  sub_1CC66D518((uint64_t)v61 + 8, a4 + 56);
  *(_WORD *)&v59[16] = 0;
  uint64_t v22 = *a1;
  if (*a1)
  {
    uint64_t v23 = a1[1];
    if (v23)
    {
      unsigned int v24 = *(_DWORD *)(v23 + 8);
      if (v24 != -1)
      {
        uint64_t v25 = *(void *)(v22 + 288) + 24 * v24;
        goto LABEL_23;
      }
    }
    uint64_t v22 = 0;
  }
  uint64_t v25 = 0;
LABEL_23:
  *(_OWORD *)unint64_t v64 = *(_OWORD *)v59;
  *(void *)&v64[14] = *(void *)&v59[14];
  if (*(void *)&v61[0])
  {
    if (*(unsigned char **)&v61[0] == &v59[24])
    {
      uint64_t v66 = &v65;
      (*(void (**)(unsigned char *))(*(void *)&v59[24] + 24))(&v59[24]);
    }
    else
    {
      uint64_t v66 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)&v61[0] + 16))();
    }
  }
  else
  {
    uint64_t v66 = 0;
  }
  if (v62)
  {
    if (v62 == (_OWORD *)((char *)v61 + 8))
    {
      uint64_t v68 = &v67;
      (*(void (**)(char *))(*((void *)&v61[0] + 1) + 24))((char *)v61 + 8);
    }
    else
    {
      uint64_t v68 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v62 + 16))();
    }
  }
  else
  {
    uint64_t v68 = 0;
  }
  LODWORD(a3) = sub_1CC69B74C(v22, v25, (uint64_t)a2, a3, (uint64_t)v64, 0);
  sub_1CD5E15A8(v64);
  sub_1CD5E15A8(v59);
  unint64_t v16 = v45;
LABEL_5:
  if (v14 > v16)
  {
    unsigned int ULEB128 = llvm::DataExtractor::getULEB128(v46, (uint64_t *)&v45, 0);
    if (*(unsigned char *)(a4 + 15))
    {
      llvm::WithColor::WithColor((uint64_t)v42, (uint64_t)a2, 0, 0);
      *(void *)uint64_t v59 = &unk_1F25FF808;
      *(void *)&v59[8] = "\n0x%8.8llx: ";
      *(void *)&v59[16] = v15;
      llvm::raw_ostream::operator<<(v42[0], (uint64_t)v59);
      llvm::WithColor::~WithColor((llvm::WithColor *)v42);
    }
    if (ULEB128)
    {
      uint64_t v18 = *(void *)(a1[1] + 16);
      if (v18)
      {
        llvm::WithColor::WithColor((uint64_t)v42, (uint64_t)a2, 2, 0);
        unsigned int v26 = v42[0];
        llvm::raw_ostream::indent(v42[0], a3);
        __int16 v27 = 0;
        uint64_t v28 = *(void *)(a1[1] + 16);
        if (v28) {
          __int16 v27 = *(_WORD *)(v28 + 4);
        }
        *(void *)uint64_t v59 = "{0}";
        *(void *)&v59[8] = 3;
        *(void *)&v59[16] = v61;
        *(void *)&v59[24] = 1;
        *(void *)&long long v60 = &unk_1F26186E0;
        WORD4(v60) = v27;
        *(void *)&v61[0] = &v60;
        sub_1CD862C68((uint64_t)v59, v26);
        llvm::WithColor::~WithColor((llvm::WithColor *)v42);
        if (*(unsigned char *)(a4 + 20))
        {
          uint64_t v29 = 0x2A00000000;
          if (!*(unsigned char *)(v18 + 7)) {
            uint64_t v29 = 0x2000000000;
          }
          *(void *)uint64_t v59 = &unk_1F2619200;
          *(void *)&v59[8] = " [%u] %c";
          *(void *)&v59[16] = v29 | ULEB128;
          llvm::raw_ostream::operator<<(a2, (uint64_t)v59);
          unsigned int v30 = *(_DWORD *)(a1[1] + 8);
          if (v30 != -1)
          {
            uint64_t v31 = *(void *)(*(void *)(*a1 + 288) + 24 * v30);
            *(void *)uint64_t v59 = &unk_1F25FF808;
            *(void *)&v59[8] = " (0x%8.8llx)";
            *(void *)&v59[16] = v31;
            llvm::raw_ostream::operator<<(a2, (uint64_t)v59);
          }
        }
        unint64_t v32 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v32 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 10);
        }
        else
        {
          *((void *)a2 + 4) = v32 + 1;
          unsigned char *v32 = 10;
        }
        llvm::DWARFDie::attributes((llvm::DWARFDie *)a1, (uint64_t)v59);
        long long v44 = v62;
        v43[1] = v60;
        unint64_t v43[2] = v61[0];
        v43[3] = v61[1];
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v59;
        v43[0] = *(_OWORD *)&v59[16];
        int v33 = v63;
        while (v44 != v33)
        {
          *(_OWORD *)uint64_t v56 = *(_OWORD *)a4;
          *(void *)&v56[14] = *(void *)(a4 + 14);
          sub_1CC66D518((uint64_t)&v57, a4 + 24);
          sub_1CC66D518((uint64_t)&v58, a4 + 56);
          sub_1CC69B8FC(a2, a1, (uint64_t)v43, a3, (uint64_t)v56);
          sub_1CD5E15A8(v56);
          uint64_t v38 = (const llvm::DWARFAbbreviationDeclaration *)*((void *)v42[1] + 2);
          if (v38) {
            llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)v42, v38, v44 + 1);
          }
        }
        if (*(unsigned char *)(a4 + 16))
        {
          int v34 = *(_DWORD *)(a4 + 4);
          if (v34)
          {
            if (*a1 && (uint64_t v35 = a1[1]) != 0)
            {
              uint64_t FirstChild = (llvm::raw_ostream *)llvm::DWARFUnit::getFirstChild(*a1, v35);
              uint64_t v37 = v39;
            }
            else
            {
              uint64_t FirstChild = 0;
              uint64_t v37 = 0;
            }
            v42[0] = FirstChild;
            v42[1] = v37;
            *(_DWORD *)(a4 + 4) = v34 - 1;
            *(_OWORD *)uint64_t v59 = *(_OWORD *)a4;
            *(void *)&v59[14] = *(void *)(a4 + 14);
            sub_1CC66D518((uint64_t)&v59[24], a4 + 24);
            sub_1CC66D518((uint64_t)v61 + 8, a4 + 56);
            v59[17] = 0;
            if (FirstChild && v37)
            {
              uint64_t v40 = (a3 + 2);
              while (1)
              {
                *(_OWORD *)long long v51 = *(_OWORD *)v59;
                *(void *)&v51[14] = *(void *)&v59[14];
                if (*(void *)&v61[0])
                {
                  if (*(unsigned char **)&v61[0] == &v59[24])
                  {
                    uint64_t v53 = v52;
                    (*(void (**)(unsigned char *, unsigned char *))(*(void *)&v59[24] + 24))(&v59[24], v52);
                  }
                  else
                  {
                    uint64_t v53 = (unsigned char *)(*(uint64_t (**)(void))(**(void **)&v61[0] + 16))();
                  }
                }
                else
                {
                  uint64_t v53 = 0;
                }
                if (v62)
                {
                  if (v62 == (_OWORD *)((char *)v61 + 8))
                  {
                    unint64_t v55 = v54;
                    (*(void (**)(char *, unsigned char *))(*((void *)&v61[0] + 1) + 24))((char *)v61 + 8, v54);
                  }
                  else
                  {
                    unint64_t v55 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v62 + 16))();
                  }
                }
                else
                {
                  unint64_t v55 = 0;
                }
                llvm::DWARFDie::dump(v42, a2, v40, v51);
                sub_1CD5E15A8(v51);
                unsigned int v41 = *((_DWORD *)v37 + 3);
                if (!v41) {
                  break;
                }
                uint64_t v37 = (llvm::raw_ostream *)(*((void *)FirstChild + 36) + 24 * v41);
                v42[0] = FirstChild;
                v42[1] = v37;
              }
            }
            sub_1CD5E15A8(v59);
          }
        }
      }
      else
      {
        long long v19 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v19 > 0x3DuLL)
        {
          qmemcpy(v19, "Abbreviation code not found in 'debug_abbrev' class for code: ", 62);
          *((void *)a2 + 4) += 62;
        }
        else
        {
          llvm::raw_ostream::write(a2, "Abbreviation code not found in 'debug_abbrev' class for code: ", 0x3EuLL);
        }
        sub_1CD098D14(a2, ULEB128, 0, 0, 0);
        unsigned int v20 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v20 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 10);
        }
        else
        {
          *((void *)a2 + 4) = v20 + 1;
          unsigned char *v20 = 10;
        }
      }
    }
    else
    {
      llvm::raw_ostream::indent(a2, a3);
      uint64_t v21 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v21) > 4)
      {
        *(unsigned char *)(v21 + 4) = 10;
        *(_DWORD *)uint64_t v21 = 1280070990;
        *((void *)a2 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(a2, "NULL\n", 5uLL);
      }
    }
  }
}

uint64_t sub_1CC69B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  v16[0] = a1;
  v16[1] = a2;
  if (a1 && a2 && *(_DWORD *)(a5 + 8) - 1 >= a6)
  {
    unsigned int v11 = *(_DWORD *)(a2 + 8);
    if (v11 == -1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = a1;
      uint64_t v12 = *(void *)(a1 + 288) + 24 * v11;
    }
    *(_OWORD *)unsigned int v20 = *(_OWORD *)a5;
    *(void *)&v20[14] = *(void *)(a5 + 14);
    uint64_t v14 = a5 + 24;
    sub_1CC66D518((uint64_t)&v21, a5 + 24);
    sub_1CC66D518((uint64_t)v22, a5 + 56);
    uint64_t v15 = sub_1CC69B74C(v13, v12, a3, a4, v20, a6 + 1);
    sub_1CD5E15A8(v20);
    *(_OWORD *)unsigned int v17 = *(_OWORD *)a5;
    *(void *)&v17[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)&v18, v14);
    sub_1CC66D518((uint64_t)&v19, a5 + 56);
    llvm::DWARFDie::dump(v16, a3, v15, v17);
    sub_1CD5E15A8(v17);
    return (v15 + 2);
  }
  return a4;
}

uint64_t llvm::DWARFDie::getParent(llvm::DWARFDie *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (!v3 || *(_DWORD *)(v3 + 8) == -1) {
      return 0;
    }
  }
  return result;
}

void sub_1CC69B8FC(llvm::raw_ostream *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  if (*a2) {
    BOOL v5 = a2[1] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return;
  }
  strcpy(__s, "            ");
  size_t v11 = strlen(__s);
  uint64_t v12 = (void *)*((void *)a1 + 4);
  if (v11 <= *((void *)a1 + 3) - (void)v12)
  {
    if (v11)
    {
      memcpy(v12, __s, v11);
      *((void *)a1 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, __s, v11);
  }
  llvm::raw_ostream::indent(a1, a4 + 2);
  unsigned __int16 v115 = *(_WORD *)(a3 + 12);
  llvm::WithColor::WithColor((uint64_t)v140, (uint64_t)a1, 3, 0);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
  v144.__r_.__value_.__l.__size_ = 3;
  v144.__r_.__value_.__r.__words[2] = (std::string::size_type)&v148;
  uint64_t v145 = 1;
  long long v146 = &unk_1F26191A0;
  long long v147 = &v115;
  uint64_t v148 = &v146;
  sub_1CD862C68((uint64_t)&v144, *(llvm::raw_ostream **)v140);
  llvm::WithColor::~WithColor((llvm::WithColor *)v140);
  uint64_t v13 = (_WORD *)(a3 + 16);
  __int16 v114 = *(_WORD *)(a3 + 16);
  if (*(unsigned char *)(a5 + 20) || *(unsigned char *)(a5 + 18))
  {
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)" [{0}]";
    v144.__r_.__value_.__l.__size_ = 6;
    v144.__r_.__value_.__r.__words[2] = (std::string::size_type)&v148;
    uint64_t v145 = 1;
    long long v146 = &unk_1F26191D0;
    long long v147 = (unsigned __int16 *)&v114;
    uint64_t v148 = &v146;
    sub_1CD862C68((uint64_t)&v144, a1);
  }
  uint64_t v14 = *a2;
  uint64_t v15 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v15 > 1uLL)
  {
    _WORD *v15 = 10249;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\t(", 2uLL);
  }
  std::string __p = 0;
  long long v113 = 0uLL;
  unint64_t v16 = (llvm::dwarf *)v115;
  if (v115 == 88 || v115 == 58)
  {
    llvm::DWARFContext::getLineTableForUnit(*(llvm::DWARFContext **)(v14 + 8), (llvm::DWARFUnit *)v14);
    if (!v17) {
      goto LABEL_16;
    }
    uint64_t v22 = v17;
    unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
    CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v14);
    uint64_t v25 = (uint64_t)CompilationDir;
    uint64_t v26 = CompilationDir ? strlen(CompilationDir) : 0;
    if (!llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v22 + 8, AsUnsignedConstant, v25, v26, 4, (uint64_t)&__p, 0))goto LABEL_16; {
    if (v113 >= 0)
    }
      size_t v52 = HIBYTE(v113) & 0x7F;
    else {
      size_t v52 = v113;
    }
    uint64_t v53 = &v144;
    sub_1CB907098((uint64_t)&v144, v52 + 1);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v53 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    v53->__r_.__value_.__s.__data_[0] = 34;
    uint64_t v54 = (char *)&v53->__r_.__value_.__l.__data_ + 1;
    if (v52)
    {
      if (v113 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      memmove(v54, p_p, v52);
    }
    *((unsigned char *)v54 + v52) = 0;
    std::string::push_back(&v144, 34);
    *(void *)char v140 = v144.__r_.__value_.__l.__size_;
    long long v44 = (void *)v144.__r_.__value_.__r.__words[0];
    *(void *)&v140[7] = *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 7);
    char v56 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    memset(&v144, 0, sizeof(v144));
    if (SHIBYTE(v113) < 0)
    {
      operator delete(__p);
      std::string __p = v44;
      *(void *)&long long v113 = *(void *)v140;
      *(void *)((char *)&v113 + 7) = *(void *)&v140[7];
      HIBYTE(v113) = v56;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v144.__r_.__value_.__l.__data_);
        char v56 = HIBYTE(v113);
        long long v44 = __p;
      }
    }
    else
    {
      std::string __p = v44;
      *(void *)&long long v113 = *(void *)v140;
      *(void *)((char *)&v113 + 7) = *(void *)&v140[7];
      HIBYTE(v113) = v56;
    }
    if (v56 < 0)
    {
      size_t v46 = v113;
    }
    else
    {
      long long v44 = &__p;
      size_t v46 = v56 & 0x7F;
    }
    int v47 = 1;
  }
  else
  {
    uint64_t v42 = (llvm::dwarf *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
    if (!v43) {
      goto LABEL_16;
    }
    long long v44 = (void *)llvm::dwarf::AttributeValueString(v16, v42);
    size_t v46 = v45;
    int v47 = 4;
  }
  if (v46)
  {
    llvm::WithColor::WithColor((uint64_t)&v144, (uint64_t)a1, v47, 0);
    std::string::size_type v57 = v144.__r_.__value_.__r.__words[0];
    uint64_t v58 = *(void **)(v144.__r_.__value_.__r.__words[0] + 32);
    if (v46 <= *(void *)(v144.__r_.__value_.__r.__words[0] + 24) - (void)v58)
    {
      memcpy(v58, v44, v46);
      *(void *)(v57 + 32) += v46;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v144.__r_.__value_.__l.__data_, (const char *)v44, v46);
    }
    llvm::WithColor::~WithColor((llvm::WithColor *)&v144);
    goto LABEL_103;
  }
LABEL_16:
  int v18 = v115;
  if (v115 != 17)
  {
    if (v115 == 89 || v115 == 59)
    {
      unint64_t v21 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
      sub_1CD098D14(a1, v21, 0, 0, 0);
      goto LABEL_103;
    }
LABEL_33:
    if (v18 == 18 && !*(unsigned char *)(a5 + 18) && !*(unsigned char *)(a5 + 20))
    {
      llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
      if (v27)
      {
        if (!*(unsigned char *)(a5 + 15)) {
          goto LABEL_103;
        }
        *(void *)&long long __dst = 0;
        if (llvm::DWARFDie::getLowAndHighPC((llvm::DWARFUnit **)a2, (unint64_t *)v140, (unint64_t *)&__dst, &v118))
        {
          std::string::value_type v28 = 2 * *(unsigned char *)(v14 + 34);
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2619220;
          v144.__r_.__value_.__l.__size_ = (std::string::size_type)"0x%*.*llx";
          v144.__r_.__value_.__s.__data_[16] = v28;
          v144.__r_.__value_.__s.__data_[17] = v28;
          uint64_t v145 = __dst;
          llvm::raw_ostream::operator<<(a1, (uint64_t)&v144);
          goto LABEL_103;
        }
        *(_OWORD *)unint64_t v133 = *(_OWORD *)a5;
        *(void *)&v133[14] = *(void *)(a5 + 14);
        sub_1CC66D518((uint64_t)&v134, a5 + 24);
        sub_1CC66D518((uint64_t)&v135, a5 + 56);
        llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v133);
        uint64_t v35 = v133;
        goto LABEL_102;
      }
    }
    if (!llvm::DWARFAttribute::mayHaveLocationList(v18)
      || !llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
    {
      if ((llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 9) & 1) != 0
        || llvm::DWARFAttribute::mayHaveLocationExpr(v18)
        && llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 2))
      {
        *(_OWORD *)uint64_t v125 = *(_OWORD *)a5;
        *(void *)&v125[14] = *(void *)(a5 + 14);
        unint64_t v36 = v125;
        sub_1CC66D518((uint64_t)v126, a5 + 24);
        uint64_t v37 = sub_1CC66D518((uint64_t)v128, a5 + 56);
        uint64_t v38 = *(void *)(v14 + 8);
        unsigned int v39 = (unsigned __int16)*v13;
        uint64_t v107 = v37;
        if (v39 <= 0x2D && (((0x618uLL >> v39) & 1) != 0 || v39 == 30 || v39 == 24))
        {
          unint64_t v36 = *(unsigned char **)(a3 + 24);
          uint64_t v40 = *(void *)(a3 + 32);
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v108 = *(llvm::MCRegisterInfo **)(v38 + 448);
        char v48 = (*(uint64_t (**)(void))(**(void **)(v38 + 520) + 40))(*(void *)(v38 + 520));
        char v49 = *(unsigned char *)(v14 + 34);
        __int16 v50 = *(unsigned __int8 *)(v14 + 35) | 0x100;
        *(void *)char v140 = v40;
        *(void *)&v140[8] = v36;
        v140[16] = v48;
        v140[17] = 0;
        char v141 = v49;
        __int16 v142 = v50;
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)v125;
        *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 6) = *(void *)&v125[14];
        if (v127)
        {
          uint64_t v51 = v107;
          if (v127 == v126)
          {
            uint64_t v148 = (void **)&v145;
            (*(void (**)(void *))(v126[0] + 24))(v126);
          }
          else
          {
            uint64_t v148 = (void **)(*(uint64_t (**)(void))(*v127 + 16))();
          }
        }
        else
        {
          uint64_t v148 = 0;
          uint64_t v51 = v107;
        }
        if (v129)
        {
          if (v129 == v51)
          {
            uint64_t v150 = v149;
            (*(void (**)(uint64_t))(v128[0] + 24))(v51);
          }
          else
          {
            uint64_t v150 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v129 + 16))();
          }
        }
        else
        {
          uint64_t v150 = 0;
        }
        llvm::DWARFExpression::print((uint64_t)v140, a1, (uint64_t)&v144, v108, (llvm::DWARFUnit *)v14, 0);
        sub_1CD5E15A8(&v144);
        uint64_t v35 = v125;
      }
      else
      {
        *(_OWORD *)unint64_t v122 = *(_OWORD *)a5;
        *(void *)&v122[14] = *(void *)(a5 + 14);
        sub_1CC66D518((uint64_t)&v123, a5 + 24);
        sub_1CC66D518((uint64_t)&v124, a5 + 56);
        llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v122);
        uint64_t v35 = v122;
      }
      goto LABEL_102;
    }
    *(_OWORD *)long long v130 = *(_OWORD *)a5;
    *(void *)&v130[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)v131, a5 + 24);
    sub_1CC66D518((uint64_t)v132, a5 + 56);
    uint64_t v29 = *(void *)(v14 + 8);
    uint64_t v106 = *(void *)(v29 + 448);
    if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8)) {
      unint64_t v30 = *(void *)(a3 + 24);
    }
    else {
      unint64_t v30 = 0;
    }
    unint64_t v118 = v30;
    if (*(_WORD *)(a3 + 16) == 34)
    {
      uint64_t v104 = v29;
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)v130;
      *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 6) = *(void *)&v130[14];
      int v31 = v30;
      sub_1CC66D518((uint64_t)&v145, (uint64_t)v131);
      sub_1CC66D518((uint64_t)v149, (uint64_t)v132);
      llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)&v144);
      sub_1CD5E15A8(&v144);
      unint64_t LoclistOffset = llvm::DWARFUnit::getLoclistOffset((llvm::DWARFUnit *)v14, v31);
      if (!v33)
      {
LABEL_49:
        uint64_t v35 = v130;
LABEL_102:
        sub_1CD5E15A8(v35);
        goto LABEL_103;
      }
      unint64_t v118 = LoclistOffset;
      uint64_t v29 = v104;
    }
    uint64_t v105 = *(void *)(v14 + 136);
    llvm::DWARFUnit::getBaseAddress((llvm::DWARFUnit *)v14, (uint64_t)&__dst);
    uint64_t v34 = *(void *)(v29 + 520);
    *(_OWORD *)char v140 = *(_OWORD *)v130;
    *(void *)&v140[14] = *(void *)&v130[14];
    sub_1CC66D518((uint64_t)&v141, (uint64_t)v131);
    sub_1CC66D518((uint64_t)&v143, (uint64_t)v132);
    LODWORD(v103) = a4 + 17;
    llvm::DWARFLocationTable::dumpLocationList(v105, (uint64_t *)&v118, a1, &__dst, v106, v34, v14, (uint64_t)v140, v103);
    sub_1CD5E15A8(v140);
    goto LABEL_49;
  }
  llvm::DWARFFormValue::getAsSectionedAddress((void *)(a3 + 16), (uint64_t)&v144);
  if (!v144.__r_.__value_.__s.__data_[16]
    || v144.__r_.__value_.__r.__words[0] != 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(unsigned char *)(v14 + 34)))
  {
    int v18 = v115;
    goto LABEL_33;
  }
  if (*(unsigned char *)(a5 + 20))
  {
    *(_OWORD *)uint64_t v136 = *(_OWORD *)a5;
    *(void *)&v136[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)&v137, a5 + 24);
    sub_1CC66D518((uint64_t)&v138, a5 + 56);
    llvm::DWARFFormValue::dump((unsigned __int16 *)(a3 + 16), a1, (uint64_t)v136);
    sub_1CD5E15A8(v136);
    unsigned int v41 = (_WORD *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v41 > 1uLL)
    {
      *unsigned int v41 = 10272;
      *((void *)a1 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a1, " (", 2uLL);
    }
  }
  uint64_t v19 = *((void *)a1 + 4);
  if ((unint64_t)(*((void *)a1 + 3) - v19) > 8)
  {
    *(unsigned char *)(v19 + 8) = 101;
    *(void *)uint64_t v19 = *(void *)"dead code";
    *((void *)a1 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a1, "dead code", 9uLL);
  }
  if (*(unsigned char *)(a5 + 20))
  {
    unsigned int v20 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v20 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 41);
    }
    else
    {
      *((void *)a1 + 4) = v20 + 1;
      unsigned char *v20 = 41;
    }
  }
LABEL_103:
  unsigned __int8 v117 = *(unsigned char *)(a5 + 15);
  uint64_t v59 = v117;
  if (v117) {
    memcpy(&__dst, " ", v117);
  }
  *((unsigned char *)&__dst + v59) = 0;
  if (v115 <= 0x48u)
  {
    if (v115 != 49 && v115 != 71) {
      goto LABEL_123;
    }
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)a2, (const llvm::DWARFFormValue *)(a3 + 16));
    v144.__r_.__value_.__l.__size_ = v72;
    if (!v144.__r_.__value_.__r.__words[0] || !v72) {
      goto LABEL_123;
    }
    LinkageName = (const char *)llvm::DWARFDie::getLinkageName((llvm::DWARFDie *)&v144);
    if (LinkageName)
    {
      ShortName = LinkageName;
    }
    else
    {
      ShortName = (const char *)llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v144);
      if (!ShortName) {
        goto LABEL_123;
      }
    }
    if ((v117 & 0x80u) == 0) {
      p_dst = (const char *)&__dst;
    }
    else {
      p_dst = (const char *)__dst;
    }
    if ((v117 & 0x80u) == 0) {
      size_t v76 = v117 & 0x7F;
    }
    else {
      size_t v76 = *((void *)&__dst + 1);
    }
    llvm::raw_ostream::write(a1, p_dst, v76);
    int v77 = (unsigned char *)*((void *)a1 + 4);
    if (*((unsigned char **)a1 + 3) == v77)
    {
      llvm::raw_ostream::write(a1, "\"", 1uLL);
      long long v78 = (unsigned char *)*((void *)a1 + 4);
    }
    else
    {
      *int v77 = 34;
      long long v78 = (unsigned char *)(*((void *)a1 + 4) + 1);
      *((void *)a1 + 4) = v78;
    }
    size_t v79 = strlen(ShortName);
    size_t v80 = v79;
    if (v79 <= *((void *)a1 + 3) - (void)v78)
    {
      if (v79)
      {
        memcpy(v78, ShortName, v79);
        long long v78 = (unsigned char *)(*((void *)a1 + 4) + v80);
        *((void *)a1 + 4) = v78;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, ShortName, v79);
      long long v78 = (unsigned char *)*((void *)a1 + 4);
    }
    if ((unint64_t)v78 >= *((void *)a1 + 3)) {
      goto LABEL_176;
    }
    *((void *)a1 + 4) = v78 + 1;
    *long long v78 = 34;
  }
  else
  {
    if (v115 != 73)
    {
      if (v115 == 85)
      {
        uint64_t v109 = *(llvm::raw_ostream **)(*(void *)(*a2 + 8) + 520);
        if (*v13 == 35)
        {
          int v92 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8)
              ? *(_DWORD *)(a3 + 24)
              : 0;
          unint64_t RnglistOffset = llvm::DWARFUnit::getRnglistOffset((llvm::DWARFUnit *)v14, v92);
          if (v94)
          {
            LOWORD(v144.__r_.__value_.__l.__data_) = 23;
            v144.__r_.__value_.__s.__data_[2] = 0;
            *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = RnglistOffset;
            long long v146 = 0;
            long long v147 = 0;
            *(_OWORD *)__n128 v119 = *(_OWORD *)a5;
            *(void *)&v119[14] = *(void *)(a5 + 14);
            sub_1CC66D518((uint64_t)&v120, a5 + 24);
            sub_1CC66D518((uint64_t)&v121, a5 + 56);
            llvm::DWARFFormValue::dump((unsigned __int16 *)&v144, a1, (uint64_t)v119);
            sub_1CD5E15A8(v119);
          }
        }
        llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)a2, (uint64_t)v140);
        if (v141)
        {
          uint64_t v100 = std::generic_category();
          if (v141)
          {
            uint64_t v101 = *(void *)v140;
            *(void *)char v140 = 0;
          }
          else
          {
            uint64_t v101 = 0;
          }
          uint64_t v110 = v101;
          sub_1CD4FB504(&v110, &v144);
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v102 = &v144;
          }
          else {
            long long v102 = (std::string *)v144.__r_.__value_.__r.__words[0];
          }
          unint64_t v118 = (unint64_t)v102;
          sub_1CD5E3960(22, (uint64_t)v100, (uint64_t)"decoding address ranges: %s", (uint64_t *)&v118);
        }
        if (*(unsigned char *)(a5 + 15))
        {
          signed int v95 = *(uint64_t **)v140;
          int v96 = *(uint64_t **)&v140[8];
          if (*(void *)v140 != *(void *)&v140[8])
          {
            unsigned int v97 = a4 + 17;
            unsigned __int8 v98 = *(unsigned char *)(v14 + 34);
            do
            {
              unint64_t v99 = (unsigned char *)*((void *)a1 + 4);
              if ((unint64_t)v99 >= *((void *)a1 + 3))
              {
                llvm::raw_ostream::write(a1, 10);
              }
              else
              {
                *((void *)a1 + 4) = v99 + 1;
                *unint64_t v99 = 10;
              }
              llvm::raw_ostream::indent(a1, v97);
              *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
              *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 6) = *(void *)(a5 + 14);
              sub_1CC66D518((uint64_t)&v145, a5 + 24);
              sub_1CC66D518((uint64_t)v149, a5 + 56);
              llvm::DWARFAddressRange::dump(v95, a1, v98, (uint64_t)&v144, v109);
              sub_1CD5E15A8(&v144);
              v95 += 3;
            }
            while (v95 != v96);
          }
        }
        sub_1CC1EB7C0((uint64_t)v140);
      }
      else if (v115 == 16363)
      {
        unint64_t v60 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
        if (v61)
        {
          unint64_t v62 = v60;
          int v63 = (_WORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v63 > 1uLL)
          {
            _WORD *v63 = 10272;
            *((void *)a1 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a1, " (", 2uLL);
          }
          while (1)
          {
            unint64_t v64 = llvm::dwarf::ApplePropertyString((llvm::dwarf *)(v62 & -(uint64_t)v62));
            if (v65)
            {
              uint64_t v66 = v64;
              size_t v67 = v65;
              uint64_t v68 = (void *)*((void *)a1 + 4);
              if (v65 <= *((void *)a1 + 3) - (void)v68)
              {
                memcpy(v68, v66, v65);
                *((void *)a1 + 4) += v67;
              }
              else
              {
                llvm::raw_ostream::write(a1, v66, v65);
              }
            }
            else
            {
              v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25FF808;
              v144.__r_.__value_.__l.__size_ = (std::string::size_type)"DW_APPLE_PROPERTY_0x%llx";
              v144.__r_.__value_.__r.__words[2] = v62 & -(uint64_t)v62;
              llvm::raw_ostream::operator<<(a1, (uint64_t)&v144);
            }
            unint64_t v70 = (char *)*((void *)a1 + 3);
            uint64_t v69 = (char *)*((void *)a1 + 4);
            v62 ^= v62 & -(uint64_t)v62;
            if (!v62) {
              break;
            }
            if ((unint64_t)(v70 - v69) > 1)
            {
              *(_WORD *)uint64_t v69 = 8236;
              *((void *)a1 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a1, ", ", 2uLL);
            }
          }
          if (v70 == v69)
          {
            llvm::raw_ostream::write(a1, ")", 1uLL);
          }
          else
          {
            *uint64_t v69 = 41;
            ++*((void *)a1 + 4);
          }
        }
      }
      goto LABEL_123;
    }
    long long v81 = *(_OWORD *)a2;
    long long v82 = *(_OWORD *)(a3 + 32);
    v111[0] = *(_OWORD *)v13;
    v111[1] = v82;
    v111[2] = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v81;
    *(void *)char v140 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)&v144, (const llvm::DWARFFormValue *)v111);
    *(void *)&v140[8] = v83;
    uint64_t v84 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)v140);
    if (v84)
    {
      uint64_t v86 = v85;
      if (v85)
      {
        if (*(void *)(v85 + 16))
        {
          long long v87 = v84;
          if ((v117 & 0x80u) == 0) {
            unsigned int v88 = (const char *)&__dst;
          }
          else {
            unsigned int v88 = (const char *)__dst;
          }
          if ((v117 & 0x80u) == 0) {
            size_t v89 = v117 & 0x7F;
          }
          else {
            size_t v89 = *((void *)&__dst + 1);
          }
          llvm::raw_ostream::write(a1, v88, v89);
          int v90 = (unsigned char *)*((void *)a1 + 4);
          if (*((unsigned char **)a1 + 3) == v90)
          {
            llvm::raw_ostream::write(a1, "\"", 1uLL);
          }
          else
          {
            *int v90 = 34;
            ++*((void *)a1 + 4);
          }
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
          LOWORD(v144.__r_.__value_.__r.__words[1]) = 1;
          sub_1CC69CC60((llvm::raw_ostream *)&v144, v87, v86);
          unint64_t v91 = (unsigned char *)*((void *)a1 + 4);
          if ((unint64_t)v91 < *((void *)a1 + 3))
          {
            *((void *)a1 + 4) = v91 + 1;
            *unint64_t v91 = 34;
            goto LABEL_123;
          }
LABEL_176:
          llvm::raw_ostream::write(a1, 34);
        }
      }
    }
  }
LABEL_123:
  long long v71 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v71 > 1uLL)
  {
    *long long v71 = 2601;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ")\n", 2uLL);
  }
  if ((char)v117 < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v113) < 0) {
    operator delete(__p);
  }
}

llvm::DWARFDie::attribute_iterator *llvm::DWARFDie::attribute_iterator::operator++(llvm::DWARFDie::attribute_iterator *this)
{
  char v2 = *(const llvm::DWARFAbbreviationDeclaration **)(*((void *)this + 1) + 16);
  if (v2) {
    llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)this, v2, *((_DWORD *)this + 20) + 1);
  }
  return this;
}

uint64_t llvm::DWARFDie::getFirstChild(llvm::DWARFDie *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      return llvm::DWARFUnit::getFirstChild(result, v3);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::DWARFDie::getSibling(llvm::DWARFDie *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (!v3 || !*(_DWORD *)(v3 + 12)) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::DWARFDie::getPreviousSibling(llvm::DWARFDie *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      return llvm::DWARFUnit::getPreviousSibling(result, v3);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::DWARFDie::getLastChild(llvm::DWARFDie *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      return llvm::DWARFUnit::getLastChild(result, v3);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::DWARFDie::attribute_iterator::attribute_iterator(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  uint64_t v5 = a3[2];
  if (a4)
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v5 + 16);
  }
  else
  {
    *(void *)(a1 + 16) = *a3 + *(unsigned __int8 *)(v5 + 6);
    llvm::DWARFDie::attribute_iterator::updateForIndex(a1, (const llvm::DWARFAbbreviationDeclaration *)v5, 0);
  }
  return a1;
}

void llvm::dumpTypeQualifiedName(llvm *this, const llvm::DWARFDie *a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = a2;
  __int16 v4 = 1;
  sub_1CC69CC60((llvm::raw_ostream *)&v3, *(llvm::DWARFUnit **)this, *((void *)this + 1));
}

void sub_1CC69CC60(llvm::raw_ostream *a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  __int16 v4 = a2;
  if (a2 && a3)
  {
    unsigned int v6 = *(_DWORD *)(a3 + 8);
    if (v6 == -1)
    {
      uint64_t v7 = 0;
      a2 = 0;
    }
    else
    {
      uint64_t v7 = (llvm::DWARFUnit *)(*((void *)a2 + 36) + 24 * v6);
    }
    sub_1CC69CD04(a1, a2, v7);
  }
  uint64_t v9 = sub_1CC69CE38(a1, v4, (uint64_t *)a3, 0);

  sub_1CC69DAA0(a1, v4, (uint64_t *)a3, v9, v8, 0);
}

llvm::raw_ostream *sub_1CC69CD04(llvm::raw_ostream *result, llvm::DWARFUnit *a2, llvm::DWARFUnit *a3)
{
  uint64_t v3 = result;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v4 = *((void *)a3 + 2);
  if (!v4
    || ((v5 = *(unsigned __int16 *)(v4 + 4) - 11, BOOL v6 = v5 > 0x3F, v7 = (1 << v5) & 0x8040000800000041, !v6)
      ? (BOOL v8 = v7 == 0)
      : (BOOL v8 = 1),
        v8))
  {
    uint64_t v9 = llvm::DWARFDie::resolveTypeUnitReference(v18);
    size_t v11 = v9;
    uint64_t v12 = (uint64_t *)v10;
    if (v9)
    {
      if (v10)
      {
        unsigned int v13 = *(_DWORD *)(v10 + 8);
        if (v13 != -1)
        {
          uint64_t v14 = *((void *)v9 + 36);
          if (v14) {
            sub_1CC69CD04(v3, v9, v14 + 24 * v13);
          }
        }
      }
    }
    uint64_t v15 = sub_1CC69CE38(v3, v11, v12, 0);
    sub_1CC69DAA0(v3, v11, v12, v15, v16, 0);
    uint64_t result = *(llvm::raw_ostream **)v3;
    uint64_t v17 = *(_WORD **)(*(void *)v3 + 32);
    if (*(void *)(*(void *)v3 + 24) - (void)v17 > 1uLL)
    {
      *uint64_t v17 = 14906;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "::", 2uLL);
    }
  }
  return result;
}

llvm::DWARFUnit *sub_1CC69CE38(unsigned char *a1, llvm::DWARFUnit *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  __n128 v119 = a2;
  uint64_t v120 = a3;
  a1[8] = 1;
  if (!a2 || (uint64_t v5 = (uint64_t)a3) == 0)
  {
    uint64_t v17 = *(llvm::raw_ostream **)a1;
    int v18 = *(_DWORD **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v18 <= 3uLL)
    {
      uint64_t v19 = "void";
      size_t v20 = 4;
      goto LABEL_14;
    }
    size_t v11 = 0;
    *int v18 = 1684631414;
    uint64_t v55 = *((void *)v17 + 4) + 4;
LABEL_71:
    *((void *)v17 + 4) = v55;
    return v11;
  }
  uint64_t v6 = a3[2];
  if (!v6)
  {
LABEL_83:
    uint64_t v63 = *(void *)(v5 + 16);
    if (v63) {
      unint64_t v64 = (llvm::dwarf *)*(unsigned __int16 *)(v63 + 4);
    }
    else {
      unint64_t v64 = 0;
    }
    size_t v65 = llvm::dwarf::TagString(v64);
    size_t v67 = v66 - 7;
    if (v66 < 7) {
      return 0;
    }
    if (*(_DWORD *)v65 != 1415534404 || *(_DWORD *)(v65 + 3) != 1598505300) {
      return 0;
    }
    if (*(_DWORD *)&v65[v66 - 5] != 1887007839 || v65[v66 - 1] != 101) {
      return 0;
    }
    long long v71 = *(llvm::raw_ostream **)a1;
    size_t v72 = v66 - 12;
    uint64_t v73 = v65 + 7;
    if (v67 >= v72) {
      size_t v74 = v72;
    }
    else {
      size_t v74 = v67;
    }
    char v75 = (unsigned char *)*((void *)v71 + 4);
    if (v74 <= *((void *)v71 + 3) - (void)v75)
    {
      if (v74)
      {
        memcpy(v75, v73, v74);
        char v75 = (unsigned char *)(*((void *)v71 + 4) + v74);
        *((void *)v71 + 4) = v75;
      }
    }
    else
    {
      llvm::raw_ostream::write(v71, (const char *)v73, v74);
      char v75 = (unsigned char *)*((void *)v71 + 4);
    }
    if (*((unsigned char **)v71 + 3) == v75)
    {
      uint64_t v19 = " ";
      uint64_t v17 = v71;
      size_t v20 = 1;
      goto LABEL_14;
    }
    size_t v11 = 0;
    *char v75 = 32;
    uint64_t v110 = *((void *)v71 + 4) + 1;
LABEL_190:
    *((void *)v71 + 4) = v110;
    return v11;
  }
  BOOL v8 = a2;
  unsigned int v9 = *(unsigned __int16 *)(v6 + 4);
  if (v9 <= 0x34)
  {
    if (*(unsigned __int16 *)(v6 + 4) > 0x14u)
    {
      if (v9 != 38)
      {
        if (v9 == 21)
        {
          long long v113 = a2;
          size_t v114 = (size_t)a3;
          *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
          *((void *)&v126 + 1) = v84;
          size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
          sub_1CC69E8C4((uint64_t)a1, v11, v85);
          if (a1[8])
          {
            uint64_t v86 = *(llvm::raw_ostream **)a1;
            long long v87 = *(unsigned char **)(*(void *)a1 + 32);
            if ((unint64_t)v87 >= *(void *)(*(void *)a1 + 24))
            {
              llvm::raw_ostream::write(v86, 32);
            }
            else
            {
              *((void *)v86 + 4) = v87 + 1;
              *long long v87 = 32;
            }
          }
          goto LABEL_166;
        }
        if (v9 == 31)
        {
          long long v113 = a2;
          size_t v114 = (size_t)a3;
          *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
          *((void *)&v126 + 1) = v10;
          size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
          unsigned int v13 = (llvm::DWARFUnit *)v12;
          sub_1CC69E8C4((uint64_t)a1, v11, v12);
          if (sub_1CC69E94C(v11, v13))
          {
            uint64_t v14 = *(llvm::raw_ostream **)a1;
            uint64_t v15 = *(char **)(*(void *)a1 + 32);
            if ((unint64_t)v15 < *(void *)(*(void *)a1 + 24))
            {
              *((void *)v14 + 4) = v15 + 1;
              char v16 = 40;
LABEL_130:
              char *v15 = v16;
              goto LABEL_160;
            }
            char v92 = 40;
          }
          else
          {
            if (!a1[8]) {
              goto LABEL_160;
            }
            uint64_t v14 = *(llvm::raw_ostream **)a1;
            uint64_t v15 = *(char **)(*(void *)a1 + 32);
            if ((unint64_t)v15 < *(void *)(*(void *)a1 + 24))
            {
              *((void *)v14 + 4) = v15 + 1;
              char v16 = 32;
              goto LABEL_130;
            }
            char v92 = 32;
          }
          llvm::raw_ostream::write(v14, v92);
LABEL_160:
          long long v113 = v8;
          size_t v114 = v5;
          *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 29);
          *((void *)&v126 + 1) = v98;
          unint64_t v99 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
          if (v99 && v100)
          {
            sub_1CC69CC60(a1, v99, v100);
            a1[9] = 0;
            uint64_t v101 = *(llvm::raw_ostream **)a1;
            long long v102 = *(_WORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v102 > 1uLL)
            {
              *long long v102 = 14906;
              *((void *)v101 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v101, "::", 2uLL);
            }
          }
          uint64_t v103 = *(llvm::raw_ostream **)a1;
          uint64_t v104 = *(unsigned char **)(*(void *)a1 + 32);
          if (*(unsigned char **)(*(void *)a1 + 24) == v104)
          {
            llvm::raw_ostream::write(v103, "*", 1uLL);
          }
          else
          {
            *uint64_t v104 = 42;
            ++*((void *)v103 + 4);
          }
LABEL_166:
          a1[8] = 0;
          return v11;
        }
LABEL_72:
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v6, a2, *a3, 3, &v113);
        if (v118)
        {
          llvm::DWARFFormValue::getAsCString((llvm *)&v113, (uint64_t)&v126);
          char v56 = BYTE8(v126);
          if (BYTE8(v126))
          {
            uint64_t v108 = v126;
            *(void *)&long long v126 = 0;
            *(void *)&long long v125 = v108;
            sub_1CD4515D0((void **)&v125);
            if ((void)v125) {
              (*(void (**)(void))(*(void *)v125 + 8))(v125);
            }
            uint64_t v57 = 0;
          }
          else
          {
            uint64_t v57 = v126;
          }
          if (BYTE8(v126))
          {
            uint64_t v58 = v126;
            *(void *)&long long v126 = 0;
            if (v58) {
              (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
            }
          }
          if ((v56 & 1) == 0 && v57)
          {
            a1[8] = 1;
            size_t v59 = strlen((const char *)v57);
            size_t v60 = v59;
            size_t v61 = v59 - 5;
            if (v59 >= 5)
            {
              if (*(_DWORD *)v57 == 1314149215 && *(unsigned char *)(v57 + 4) == 124)
              {
                v57 += 5;
                if (v59 >= 6 && (uint64_t v105 = memchr((void *)v57, 124, v61)) != 0) {
                  unint64_t v106 = (unint64_t)v105 - v57;
                }
                else {
                  unint64_t v106 = -1;
                }
                if (v61 >= v106) {
                  size_t v60 = v106;
                }
                else {
                  size_t v60 = v61;
                }
                if (a4)
                {
                  if (v61 >= v106 + 1) {
                    size_t v107 = v106 + 1;
                  }
                  else {
                    size_t v107 = v61;
                  }
                  long long v113 = (llvm::DWARFUnit *)v57;
                  size_t v114 = v60;
                  size_t v115 = v57 + v107;
                  size_t v116 = v61 - v107;
                  __int16 v117 = 1285;
                  llvm::Twine::str((llvm::Twine *)&v113, &v126);
                  if (*(char *)(a4 + 23) < 0) {
                    operator delete(*(void **)a4);
                  }
                  *(_OWORD *)a4 = v126;
                  *(void *)(a4 + 16) = v127;
                }
                goto LABEL_146;
              }
            }
            else if (!v59)
            {
              BOOL v62 = 0;
LABEL_145:
              a1[9] = v62;
LABEL_146:
              uint64_t v94 = *(void *)a1;
              signed int v95 = *(void **)(*(void *)a1 + 32);
              if (v60 <= *(void *)(*(void *)a1 + 24) - (void)v95)
              {
                if (!v60) {
                  goto LABEL_152;
                }
                memcpy(v95, (const void *)v57, v60);
                *(void *)(v94 + 32) += v60;
              }
              else
              {
                llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, (const char *)v57, v60);
              }
              if (*(unsigned char *)(v57 + v60 - 1) != 62)
              {
                BOOL v8 = v119;
                uint64_t v5 = (uint64_t)v120;
LABEL_152:
                size_t v11 = 0;
                if (sub_1CC69E9D0(a1, (uint64_t)v8, v5, 0))
                {
                  if (a1[9])
                  {
                    int v96 = *(llvm::raw_ostream **)a1;
                    unsigned int v97 = *(unsigned char **)(*(void *)a1 + 32);
                    if ((unint64_t)v97 >= *(void *)(*(void *)a1 + 24))
                    {
                      llvm::raw_ostream::write(v96, 32);
                    }
                    else
                    {
                      *((void *)v96 + 4) = v97 + 1;
                      *unsigned int v97 = 32;
                    }
                  }
                  uint64_t v111 = *(llvm::raw_ostream **)a1;
                  unint64_t v112 = *(unsigned char **)(*(void *)a1 + 32);
                  if ((unint64_t)v112 >= *(void *)(*(void *)a1 + 24))
                  {
                    llvm::raw_ostream::write(v111, 62);
                  }
                  else
                  {
                    *((void *)v111 + 4) = v112 + 1;
                    *unint64_t v112 = 62;
                  }
                  size_t v11 = 0;
                  *((_WORD *)a1 + 4) = 257;
                }
                return v11;
              }
              return 0;
            }
            BOOL v62 = *(unsigned char *)(v57 + v59 - 1) == 62;
            goto LABEL_145;
          }
        }
        goto LABEL_83;
      }
LABEL_17:
      *(void *)&long long v125 = a2;
      *((void *)&v125 + 1) = a3;
      long long v124 = 0uLL;
      long long v123 = 0uLL;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      sub_1CC69FBDC(&v125, &v121, &v124, &v123);
      uint64_t v22 = v121;
      uint64_t v21 = v122;
      if (!v121 || !v122) {
        goto LABEL_39;
      }
      uint64_t v23 = *(void *)(v122 + 16);
      BOOL v24 = v23 && *(_WORD *)(v23 + 4) == 21;
      size_t v25 = v122;
      uint64_t v26 = v121;
      while (1)
      {
        uint64_t v27 = *(void *)(v25 + 16);
        if (!v27)
        {
LABEL_27:
          if (v24) {
            goto LABEL_49;
          }
          goto LABEL_39;
        }
        int v28 = *(unsigned __int16 *)(v27 + 4);
        if (v28 != 1) {
          break;
        }
        long long v113 = v26;
        size_t v114 = v25;
        *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((void *)&v126 + 1) = v29;
        uint64_t v26 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
        if (!v26 || !v25) {
          goto LABEL_27;
        }
      }
      if (v24) {
        goto LABEL_49;
      }
      if ((v28 | 0x10) == 0x1F)
      {
        sub_1CC69E8C4((uint64_t)a1, v22, v21);
        a1[8] = 1;
        if ((void)v124 && *((void *)&v124 + 1))
        {
          unint64_t v30 = *(llvm::raw_ostream **)a1;
          uint64_t v31 = *(void *)(*(void *)a1 + 32);
          if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v31) > 4)
          {
            *(unsigned char *)(v31 + 4) = 116;
            *(_DWORD *)uint64_t v31 = 1936617315;
            *((void *)v30 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v30, "const", 5uLL);
          }
          if (!(void)v123 || !*((void *)&v123 + 1)) {
            return 0;
          }
          unint64_t v32 = *(llvm::raw_ostream **)a1;
          char v33 = *(unsigned char **)(*(void *)a1 + 32);
          if ((unint64_t)v33 >= *(void *)(*(void *)a1 + 24))
          {
            llvm::raw_ostream::write(v32, 32);
          }
          else
          {
            *((void *)v32 + 4) = v33 + 1;
            unsigned char *v33 = 32;
          }
        }
        else if (!(void)v123 || !*((void *)&v123 + 1))
        {
          return 0;
        }
        uint64_t v17 = *(llvm::raw_ostream **)a1;
        size_t v89 = *(void **)(*(void *)a1 + 32);
        if (*(void *)(*(void *)a1 + 24) - (void)v89 <= 7uLL)
        {
          uint64_t v19 = "volatile";
          size_t v20 = 8;
          goto LABEL_14;
        }
        *size_t v89 = 0x656C6974616C6F76;
        *((void *)v17 + 4) += 8;
      }
      else
      {
LABEL_39:
        if ((void)v124) {
          BOOL v34 = *((void *)&v124 + 1) == 0;
        }
        else {
          BOOL v34 = 1;
        }
        if (!v34)
        {
          uint64_t v35 = *(llvm::raw_ostream **)a1;
          uint64_t v36 = *(void *)(*(void *)a1 + 32);
          if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v36) > 5)
          {
            *(_WORD *)(v36 + 4) = 8308;
            *(_DWORD *)uint64_t v36 = 1936617315;
            *((void *)v35 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v35, "const ", 6uLL);
          }
        }
        if ((void)v123 && *((void *)&v123 + 1))
        {
          uint64_t v37 = *(llvm::raw_ostream **)a1;
          uint64_t v38 = *(void *)(*(void *)a1 + 32);
          if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v38) > 8)
          {
            *(unsigned char *)(v38 + 8) = 32;
            *(void *)uint64_t v38 = *(void *)"volatile ";
            *((void *)v37 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v37, "volatile ", 9uLL);
          }
        }
LABEL_49:
        sub_1CC69E8C4((uint64_t)a1, v22, v21);
      }
      return 0;
    }
    if (v9 != 1)
    {
      if (v9 == 15)
      {
        long long v113 = a2;
        size_t v114 = (size_t)a3;
        *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((void *)&v126 + 1) = v49;
        size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
        unsigned int v41 = v50;
        uint64_t v42 = "*";
      }
      else
      {
        if (v9 != 16) {
          goto LABEL_72;
        }
        long long v113 = a2;
        size_t v114 = (size_t)a3;
        *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
        *((void *)&v126 + 1) = v39;
        size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
        unsigned int v41 = v40;
        uint64_t v42 = "&";
      }
      uint64_t v51 = a1;
      size_t v52 = v11;
      uint64_t v53 = v41;
      size_t v54 = 1;
LABEL_114:
      sub_1CC69E7C8(v51, v52, v53, v42, v54);
      return v11;
    }
    goto LABEL_67;
  }
  if (*(unsigned __int16 *)(v6 + 4) <= 0x38u)
  {
    if (v9 != 53) {
      goto LABEL_72;
    }
    goto LABEL_17;
  }
  if (*(unsigned __int16 *)(v6 + 4) > 0x41u)
  {
    if (v9 == 66)
    {
      long long v113 = a2;
      size_t v114 = (size_t)a3;
      *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
      *((void *)&v126 + 1) = v81;
      size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
      uint64_t v83 = v82;
      uint64_t v42 = "&&";
      uint64_t v51 = a1;
      size_t v52 = v11;
      uint64_t v53 = v83;
      size_t v54 = 2;
      goto LABEL_114;
    }
    if (v9 != 17152) {
      goto LABEL_72;
    }
LABEL_67:
    long long v113 = a2;
    size_t v114 = (size_t)a3;
    *(void *)&long long v126 = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v113, 73);
    *((void *)&v126 + 1) = v47;
    size_t v11 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v126);
    sub_1CC69E8C4((uint64_t)a1, v11, v48);
    return v11;
  }
  if (v9 == 57)
  {
    llvm::DWARFAbbreviationDeclaration::getAttributeValue(v6, a2, *a3, 3, &v113);
    if (v118)
    {
      llvm::DWARFFormValue::getAsCString((llvm *)&v113, (uint64_t)&v126);
      char v76 = BYTE8(v126);
      if (BYTE8(v126))
      {
        uint64_t v109 = v126;
        *(void *)&long long v126 = 0;
        *(void *)&long long v125 = v109;
        sub_1CD4515D0((void **)&v125);
        if ((void)v125) {
          (*(void (**)(void))(*(void *)v125 + 8))(v125);
        }
        int v77 = 0;
      }
      else
      {
        int v77 = (const char *)v126;
      }
      if (BYTE8(v126))
      {
        uint64_t v78 = v126;
        *(void *)&long long v126 = 0;
        if (v78) {
          (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
        }
      }
      if ((v76 & 1) == 0 && v77)
      {
        long long v71 = *(llvm::raw_ostream **)a1;
        size_t v79 = strlen(v77);
        size_t v80 = (void *)*((void *)v71 + 4);
        if (v79 <= *((void *)v71 + 3) - (void)v80)
        {
          if (!v79) {
            return 0;
          }
          memcpy(v80, v77, v79);
          size_t v11 = 0;
          uint64_t v110 = *((void *)v71 + 4) + v79;
          goto LABEL_190;
        }
        uint64_t v17 = v71;
        uint64_t v19 = v77;
        size_t v20 = v79;
LABEL_14:
        llvm::raw_ostream::write(v17, v19, v20);
        return 0;
      }
    }
    uint64_t v17 = *(llvm::raw_ostream **)a1;
    unsigned int v88 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v88 <= 0x14uLL)
    {
      uint64_t v19 = "(anonymous namespace)";
      size_t v20 = 21;
      goto LABEL_14;
    }
    size_t v11 = 0;
    qmemcpy(v88, "(anonymous namespace)", 21);
    uint64_t v55 = *((void *)v17 + 4) + 21;
    goto LABEL_71;
  }
  if (v9 != 59) {
    goto LABEL_72;
  }
  ShortName = (const char *)llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v119);
  if (ShortName)
  {
    long long v44 = ShortName;
    size_t v45 = strlen(ShortName);
    if (v45 == 17)
    {
      if (*(void *)v44 ^ 0x657079746C636564 | *((void *)v44 + 1) ^ 0x7274706C6C756E28 | *((unsigned __int8 *)v44
                                                                                                 + 16) ^ 0x29)
      {
        size_t v46 = 17;
      }
      else
      {
        long long v44 = "std::nullptr_t";
        size_t v46 = 14;
      }
    }
    else
    {
      size_t v46 = v45;
    }
    a1[8] = 1;
    int v90 = *(llvm::raw_ostream **)a1;
    unint64_t v91 = *(void **)(*(void *)a1 + 32);
    if (v46 <= *(void *)(*(void *)a1 + 24) - (void)v91)
    {
      if (v46)
      {
        memcpy(v91, v44, v46);
        *((void *)v90 + 4) += v46;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v44, v46);
    }
  }
  else
  {
    a1[8] = 1;
  }
  size_t v11 = 0;
  a1[9] = 0;
  return v11;
}

void sub_1CC69DAA0(unsigned char *a1, llvm::DWARFUnit *a2, uint64_t *a3, llvm::DWARFUnit *a4, llvm::DWARFUnit *a5, BOOL a6)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  unint64_t v7 = a3;
  if (!a3) {
    return;
  }
  unsigned int v9 = a2;
  while (1)
  {
    uint64_t v11 = v7[2];
    if (!v11) {
      return;
    }
    int v12 = *(unsigned __int16 *)(v11 + 4);
    uint64_t v13 = (v12 - 15);
    if (v13 > 0x33) {
      goto LABEL_22;
    }
    std::string::size_type v6 = (std::string::size_type)a4;
    if (((1 << (v12 - 15)) & 0x8000000010003) == 0) {
      break;
    }
    if (sub_1CC69E94C(a4, a5))
    {
      uint64_t v14 = *(llvm::raw_ostream **)a1;
      uint64_t v15 = *(unsigned char **)(*(void *)a1 + 32);
      if ((unint64_t)v15 >= *(void *)(*(void *)a1 + 24))
      {
        llvm::raw_ostream::write(v14, 41);
      }
      else
      {
        *((void *)v14 + 4) = v15 + 1;
        unsigned char *v15 = 41;
      }
    }
    v112.__r_.__value_.__r.__words[0] = v6;
    v112.__r_.__value_.__l.__size_ = (std::string::size_type)a5;
    *(void *)&long long v125 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
    *((void *)&v125 + 1) = v16;
    a4 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v125);
    uint64_t v18 = v7[2];
    if (v18)
    {
      a6 = *(unsigned __int16 *)(v18 + 4) == 31;
      if (!v6) {
        return;
      }
    }
    else
    {
      a6 = 0;
      if (!v6) {
        return;
      }
    }
    unint64_t v7 = (uint64_t *)a5;
    unsigned int v9 = (llvm::DWARFUnit *)v6;
    a5 = v17;
    if (!v7) {
      return;
    }
  }
  if (v13 == 6)
  {
    int v19 = a6;
    sub_1CC69FCBC(a1, (uint64_t)v9, (uint64_t)v7, a4, (uint64_t *)a5, v19, 0, 0);
    return;
  }
  if (((1 << (v12 - 15)) & 0x4000800000) != 0)
  {
    *(void *)&long long v123 = v9;
    *((void *)&v123 + 1) = v7;
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = 0uLL;
    long long __p = 0uLL;
    long long v122 = 0uLL;
    sub_1CC69FBDC(&v123, (llvm::DWARFUnit **)&v122, &v121, &__p);
    long long v20 = v122;
    if ((void)v122
      && *((void *)&v122 + 1)
      && (uint64_t v21 = *(void *)(*((void *)&v122 + 1) + 16)) != 0
      && *(_WORD *)(v21 + 4) == 21)
    {
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v122;
      *(void *)&long long v125 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
      *((void *)&v125 + 1) = v22;
      BOOL v24 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v125);
      if (v121.__r_.__value_.__r.__words[0]) {
        BOOL v25 = v121.__r_.__value_.__l.__size_ == 0;
      }
      else {
        BOOL v25 = 1;
      }
      int v26 = !v25;
      if ((void)__p) {
        BOOL v27 = *((void *)&__p + 1) == 0;
      }
      else {
        BOOL v27 = 1;
      }
      int v28 = !v27;
      sub_1CC69FCBC(a1, v20, *((uint64_t *)&v20 + 1), v24, v23, 0, v26, v28);
    }
    else
    {
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v122;
      *(void *)&long long v125 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v112, 73);
      *((void *)&v125 + 1) = v29;
      unint64_t v30 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&v125);
      sub_1CC69DAA0(a1, v20, *((void *)&v20 + 1), v30, v31, 0);
    }
    return;
  }
LABEL_22:
  if (v12 == 1)
  {
    sub_1CD5EA028((uint64_t *)&v125, (uint64_t)v9, (uint64_t)v7);
    char v33 = (uint64_t *)*((void *)&v125 + 1);
    unint64_t v32 = (llvm::DWARFUnit *)v125;
    long long v34 = v126;
    if (v125 == v126)
    {
LABEL_44:
      a1[9] = 0;
      return;
    }
    uint64_t v105 = 0;
    while (1)
    {
      uint64_t v47 = v32;
      uint64_t v48 = v33;
      uint64_t v49 = v32;
      uint64_t v50 = v33[2];
      if (!v50 || *(_WORD *)(v50 + 4) != 33) {
        goto LABEL_72;
      }
      unint64_t AsUnsignedConstant = v6 & 0xFFFFFFFFFFFFFF00;
      v110 &= 0xFFFFFFFFFFFFFF00;
      v111 &= 0xFFFFFFFFFFFFFF00;
      if (!v33 || !v32) {
        break;
      }
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v50, v32, *v33, 34, &v112);
      if ((_BYTE)v116)
      {
        unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
        unsigned __int8 v106 = v54;
      }
      else
      {
        unsigned __int8 v106 = 0;
      }
      uint64_t v55 = v33[2];
      unint64_t v109 = AsUnsignedConstant;
      if (v55 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v55, v49, *v33, 55, &v112), (_BYTE)v116))
      {
        unint64_t v111 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
        unsigned __int8 v53 = v56;
      }
      else
      {
        unsigned __int8 v53 = 0;
      }
      uint64_t v57 = v33[2];
      if (!v57) {
        goto LABEL_92;
      }
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v57, v49, *v33, 47, &v112);
      if (!(_BYTE)v116) {
        goto LABEL_92;
      }
      unint64_t v110 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
      unsigned __int8 v58 = v77;
LABEL_93:
      llvm::DWARFUnit::extractDIEsIfNeeded(v9, 1);
      size_t v59 = (uint64_t *)*((void *)v9 + 36);
      size_t v60 = (uint64_t *)*((void *)v9 + 37);
      if (v59 == v60) {
        size_t v61 = 0;
      }
      else {
        size_t v61 = v9;
      }
      if (v59 == v60) {
        size_t v59 = 0;
      }
      if (v61) {
        BOOL v62 = v59 == 0;
      }
      else {
        BOOL v62 = 1;
      }
      if (v62 || (uint64_t v63 = v59[2]) == 0)
      {
LABEL_103:
        unsigned __int8 v64 = 0;
        int v65 = 0;
LABEL_104:
        unsigned __int8 v66 = v106;
        goto LABEL_105;
      }
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v63, v61, *v59, 19, &v112);
      int v65 = v116;
      if (!(_BYTE)v116)
      {
        unsigned __int8 v64 = 0;
        goto LABEL_104;
      }
      int v89 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
      if (!v90) {
        goto LABEL_103;
      }
      uint64_t v91 = llvm::dwarf::LanguageLowerBound(v89);
      uint64_t v105 = v91 >> 8;
      unsigned __int8 v64 = v91;
      int v65 = BYTE4(v91);
      if (!BYTE4(v91) || !v106) {
        goto LABEL_104;
      }
      unsigned __int8 v66 = v106;
      unint64_t v92 = v109;
      BOOL v93 = v109 == v91;
      if (v109 == v91) {
        unint64_t v92 = 0;
      }
      unint64_t v109 = v92;
      if (v93) {
        unsigned __int8 v66 = 0;
      }
      int v65 = 1;
LABEL_105:
      if (v66 || v53 || v58)
      {
        if (v66)
        {
          size_t v107 = (llvm::raw_ostream *)v66;
          uint64_t v69 = *(llvm::raw_ostream **)a1;
          unint64_t v70 = *(_WORD **)(*(void *)a1 + 32);
          if (*(void *)(*(void *)a1 + 24) - (void)v70 > 1uLL)
          {
            *unint64_t v70 = 23387;
            *((void *)v69 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v69, "[[", 2uLL);
          }
          sub_1CD098D14(*(llvm::raw_ostream **)a1, v109, 0, 0, 0);
          goto LABEL_115;
        }
        char v75 = *(llvm::raw_ostream **)a1;
        if (!(v53 | (unint64_t)v58) || !v65)
        {
          size_t v107 = 0;
          size_t v79 = (_WORD *)*((void *)v75 + 4);
          if (*((void *)v75 + 3) - (void)v79 > 1uLL)
          {
            *size_t v79 = 23387;
            *((void *)v75 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v75, "[[", 2uLL);
          }
          size_t v80 = *(llvm::raw_ostream **)a1;
          uint64_t v81 = *(unsigned char **)(*(void *)a1 + 32);
          if ((unint64_t)v81 >= *(void *)(*(void *)a1 + 24))
          {
            llvm::raw_ostream::write(v80, 63);
          }
          else
          {
            *((void *)v80 + 4) = v81 + 1;
            unsigned char *v81 = 63;
          }
LABEL_115:
          long long v71 = *(llvm::raw_ostream **)a1;
          size_t v72 = *(_WORD **)(*(void *)a1 + 32);
          if (*(void *)(*(void *)a1 + 24) - (void)v72 > 1uLL)
          {
            _WORD *v72 = 8236;
            *((void *)v71 + 4) += 2;
            if (!v53) {
              goto LABEL_143;
            }
LABEL_117:
            uint64_t v73 = *(llvm::raw_ostream **)a1;
            if (v107)
            {
              std::string::size_type v6 = v109;
              unint64_t v74 = v109 + v111;
            }
            else
            {
              uint64_t v78 = (_DWORD *)*((void *)v73 + 4);
              std::string::size_type v6 = v109;
              if (*((void *)v73 + 3) - (void)v78 > 3uLL)
              {
                *uint64_t v78 = 539697215;
                *((void *)v73 + 4) += 4;
              }
              else
              {
                uint64_t v73 = llvm::raw_ostream::write(v73, "? + ", 4uLL);
              }
              unint64_t v74 = v111;
            }
            sub_1CD098D14(v73, v74, 0, 0, 0);
          }
          else
          {
            llvm::raw_ostream::write(v71, ", ", 2uLL);
            if (v53) {
              goto LABEL_117;
            }
LABEL_143:
            uint64_t v85 = *(llvm::raw_ostream **)a1;
            if (v58)
            {
              sub_1CD098D14(v85, v110 + 1, 0, 0, 0);
              std::string::size_type v6 = v109;
            }
            else
            {
              uint64_t v86 = (unsigned char *)*((void *)v85 + 4);
              std::string::size_type v6 = v109;
              if ((unint64_t)v86 >= *((void *)v85 + 3))
              {
                llvm::raw_ostream::write(v85, 63);
              }
              else
              {
                *((void *)v85 + 4) = v86 + 1;
                *uint64_t v86 = 63;
              }
            }
          }
          long long v87 = *(llvm::raw_ostream **)a1;
          unsigned int v88 = *(_WORD **)(*(void *)a1 + 32);
          if (*(void *)(*(void *)a1 + 24) - (void)v88 > 1uLL)
          {
            *unsigned int v88 = 23849;
            *((void *)v87 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v87, ")]", 2uLL);
          }
          goto LABEL_72;
        }
        char v76 = (unsigned char *)*((void *)v75 + 4);
        uint64_t v108 = *(llvm::raw_ostream **)a1;
        if ((unint64_t)v76 >= *((void *)v75 + 3))
        {
          unsigned __int8 v82 = v64;
          llvm::raw_ostream::write(v108, 91);
          unsigned __int8 v64 = v82;
        }
        else
        {
          *((void *)v75 + 4) = v76 + 1;
          unsigned char *v76 = 91;
        }
        unint64_t v83 = v111;
        if (!v53) {
          unint64_t v83 = v110 - (v64 | (unint64_t)(v105 << 8)) + 1;
        }
        sub_1CD098D14(v108, v83, 0, 0, 0);
        uint64_t v84 = (unsigned char *)*((void *)v108 + 4);
        if ((unint64_t)v84 >= *((void *)v108 + 3))
        {
          llvm::raw_ostream::write(v108, 93);
        }
        else
        {
          *((void *)v108 + 4) = v84 + 1;
          unsigned char *v84 = 93;
        }
      }
      else
      {
        size_t v67 = *(llvm::raw_ostream **)a1;
        uint64_t v68 = *(_WORD **)(*(void *)a1 + 32);
        if (*(void *)(*(void *)a1 + 24) - (void)v68 > 1uLL)
        {
          *uint64_t v68 = 23899;
          *((void *)v67 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v67, "[]", 2uLL);
        }
      }
      std::string::size_type v6 = v109;
LABEL_72:
      unint64_t v32 = 0;
      if (v33)
      {
        char v33 = 0;
        if (v47)
        {
          unsigned int v51 = *((_DWORD *)v48 + 3);
          if (v51)
          {
            char v33 = (uint64_t *)(*((void *)v49 + 36) + 24 * v51);
            unint64_t v32 = v49;
          }
          else
          {
            unint64_t v32 = 0;
            char v33 = 0;
          }
        }
      }
      else
      {
        char v33 = 0;
      }
      if (__PAIR128__((unint64_t)v33, (unint64_t)v32) == v34) {
        goto LABEL_44;
      }
    }
    unsigned __int8 v106 = 0;
    unint64_t v109 = AsUnsignedConstant;
    unsigned __int8 v53 = 0;
LABEL_92:
    unsigned __int8 v58 = 0;
    goto LABEL_93;
  }
  if (v12 == 17152)
  {
    *(void *)&long long v123 = v124;
    *((void *)&v123 + 1) = 0x200000000;
    llvm::DWARFAbbreviationDeclaration::getAttributeValue(v11, v9, *v7, 15880, &v112);
    if ((_BYTE)v116 && llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112))
    {
      if (DWORD2(v123) >= HIDWORD(v123)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v123 + 8 * DWORD2(v123)) = "isa-pointer";
      ++DWORD2(v123);
    }
    uint64_t v35 = v7[2];
    if (v35 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v35, v9, *v7, 15881, &v112), (_BYTE)v116))
    {
      unint64_t v94 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v112);
      unsigned int v36 = DWORD2(v123);
      if (v94)
      {
        if (DWORD2(v123) >= HIDWORD(v123)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v123 + 8 * DWORD2(v123)) = "authenticates-null-values";
        unsigned int v36 = ++DWORD2(v123);
      }
    }
    else
    {
      unsigned int v36 = DWORD2(v123);
    }
    memset(&v121, 0, sizeof(v121));
    if (v36)
    {
      uint64_t v37 = (const std::string::value_type **)v123;
      uint64_t v38 = 8 * v36;
      do
      {
        uint64_t v39 = *v37;
        std::string::size_type size = *((unsigned char *)&v121.__r_.__value_.__s + 23) & 0x7F;
        if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v121.__r_.__value_.__l.__size_;
        }
        if (size) {
          std::string::append(&v121, ",");
        }
        std::string::append(&v121, v39);
        ++v37;
        v38 -= 8;
      }
      while (v38);
      std::string::size_type v41 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v41 = v121.__r_.__value_.__l.__size_;
      }
      if (v41)
      {
        std::operator+<char>();
        uint64_t v42 = std::string::append(&v112, "\"");
        std::string::size_type v43 = v42->__r_.__value_.__r.__words[0];
        *(void *)&long long v125 = v42->__r_.__value_.__l.__size_;
        *(void *)((char *)&v125 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
        char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v121.__r_.__value_.__l.__data_);
        }
        v121.__r_.__value_.__r.__words[0] = v43;
        v121.__r_.__value_.__l.__size_ = v125;
        *(std::string::size_type *)((char *)&v121.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v125 + 7);
        *((unsigned char *)&v121.__r_.__value_.__s + 23) = v44;
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
      }
    }
    long long __p = 0uLL;
    uint64_t v120 = 0;
    LODWORD(v112.__r_.__value_.__r.__words[1]) = 0;
    char v115 = 0;
    uint64_t v116 = 0;
    p_p = &__p;
    int v117 = 0;
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
    v112.__r_.__value_.__r.__words[2] = 0;
    long long v113 = 0;
    size_t v114 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v112, "__ptrauth(", 0xAuLL);
    unint64_t v45 = 0;
    uint64_t v46 = v7[2];
    if (v46)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v46, v9, *v7, 15876, &v125);
      if (v127) {
        unint64_t v45 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v125);
      }
      else {
        unint64_t v45 = 0;
      }
    }
    sub_1CD098D14((llvm::raw_ostream *)&v112, v45, 0, 0, 0);
    if ((unint64_t)(v113 - v114) > 1)
    {
      *(_WORD *)size_t v114 = 8236;
      v114 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ", ", 2uLL);
    }
    uint64_t v95 = v7[2];
    if (v95 && (llvm::DWARFAbbreviationDeclaration::getAttributeValue(v95, v9, *v7, 15877, &v125), v127)) {
      unint64_t v96 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v125);
    }
    else {
      unint64_t v96 = 0;
    }
    sub_1CD098D14((llvm::raw_ostream *)&v112, v96, 0, 0, 0);
    unsigned int v97 = v114;
    if ((unint64_t)(v113 - v114) > 4)
    {
      v114[4] = 48;
      *unsigned int v97 = 2016419884;
      v114 += 5;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ", 0x0", 5uLL);
    }
    unint64_t v98 = v7[2];
    if (v98)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v98, v9, *v7, 15878, &v125);
      if (v127) {
        unint64_t v98 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v125);
      }
      else {
        unint64_t v98 = 0;
      }
    }
    sub_1CD5E9F58(v98, 1, 0, &v125);
    if ((SBYTE7(v126) & 0x80u) == 0) {
      unint64_t v99 = (const char *)&v125;
    }
    else {
      unint64_t v99 = (const char *)v125;
    }
    if ((SBYTE7(v126) & 0x80u) == 0) {
      size_t v100 = BYTE7(v126) & 0x7F;
    }
    else {
      size_t v100 = *((void *)&v125 + 1);
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v112, v99, v100);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v101 = &v121;
    }
    else {
      uint64_t v101 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v102 = *((unsigned char *)&v121.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t v102 = v121.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v112, (const char *)v101, v102);
    if (v113 == v114) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v112, ")", 1uLL);
    }
    else {
      *v114++ = 41;
    }
    if (SBYTE7(v126) < 0) {
      operator delete((void *)v125);
    }
    if (v120 >= 0) {
      uint64_t v103 = (llvm::raw_ostream *)&__p;
    }
    else {
      uint64_t v103 = (llvm::raw_ostream *)__p;
    }
    if (v120 >= 0) {
      uint64_t v104 = HIBYTE(v120) & 0x7F;
    }
    else {
      uint64_t v104 = *((void *)&__p + 1);
    }
    llvm::printEscapedString(v103, v104, *(llvm::raw_ostream **)a1);
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
    if (v117 == 1 && v112.__r_.__value_.__r.__words[2]) {
      MEMORY[0x1D25D9CB0](v112.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    }
    if (SHIBYTE(v120) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if ((unsigned char *)v123 != v124) {
      free((void *)v123);
    }
  }
}

void *sub_1CC69E7C8(unsigned char *a1, llvm::DWARFUnit *a2, llvm::DWARFUnit *a3, const void *a4, size_t a5)
{
  sub_1CC69E8C4((uint64_t)a1, a2, (uint64_t)a3);
  if (a1[8])
  {
    uint64_t v10 = *(llvm::raw_ostream **)a1;
    uint64_t v11 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v11 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *uint64_t v11 = 32;
    }
  }
  if (sub_1CC69E94C(a2, a3))
  {
    int v12 = *(llvm::raw_ostream **)a1;
    uint64_t v13 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v13 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v12, 40);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 40;
    }
  }
  uint64_t v14 = *(void *)a1;
  uint64_t result = *(void **)(*(void *)a1 + 32);
  if (a5 <= *(void *)(*(void *)a1 + 24) - (void)result)
  {
    if (a5)
    {
      uint64_t result = memcpy(result, a4, a5);
      *(void *)(v14 + 32) += a5;
    }
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, (const char *)a4, a5);
  }
  *((_WORD *)a1 + 4) = 0;
  return result;
}

uint64_t sub_1CC69E8C4(uint64_t a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = a1;
  if (a2 && a3)
  {
    unsigned int v5 = *(_DWORD *)(a3 + 8);
    if (v5 == -1)
    {
      uint64_t v6 = 0;
      a2 = 0;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 36) + 24 * v5;
    }
    sub_1CC69CD04(a1, a2, v6);
  }

  return sub_1CC69CE38(v4, v3);
}

BOOL sub_1CC69E94C(llvm::DWARFUnit *a1, llvm::DWARFUnit *a2)
{
  for (uint64_t i = 0; a1 && a2; uint64_t i = 0)
  {
    uint64_t i = *((void *)a2 + 2);
    if (!i) {
      break;
    }
    int v3 = *(unsigned __int16 *)(i + 4);
    if (v3 != 53 && v3 != 38) {
      return v3 == 21 || v3 == 1;
    }
    v8[0] = a1;
    v8[1] = a2;
    v7[0] = llvm::DWARFDie::getAttributeValueAsReferencedDie(v8, 73);
    v7[1] = v4;
    a1 = llvm::DWARFDie::resolveTypeUnitReference(v7);
  }
  return i;
}

uint64_t sub_1CC69E9D0(unsigned char *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unsigned int v5 = 0;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  char v149 = 1;
  if (a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = &v149;
  }
  if (a2)
  {
    uint64_t FirstChild = 0;
    uint64_t LastChild = 0;
    unsigned int v9 = 0;
    if (a3)
    {
      uint64_t FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild(a2, a3);
      unsigned int v5 = v11;
      uint64_t LastChild = llvm::DWARFUnit::getLastChild(a2, a3);
      unsigned int v9 = v12;
    }
  }
  else
  {
    uint64_t FirstChild = 0;
    uint64_t LastChild = 0;
    unsigned int v9 = 0;
  }
  uint64_t v13 = (llvm::DWARFUnit *)LastChild;
  if (v9 == v5 && (llvm::DWARFUnit *)LastChild == FirstChild) {
    return 0;
  }
  int v14 = 0;
  do
  {
    uint64_t v15 = FirstChild;
    uint64_t v16 = v5;
    uint64_t v17 = FirstChild;
    uint64_t v18 = v5[2];
    if (!v18) {
      goto LABEL_49;
    }
    int v19 = *(unsigned __int16 *)(v18 + 4);
    if (v19 == 16647)
    {
      sub_1CC69E9D0(a1, FirstChild, v5, v6);
      uint64_t v18 = v5[2];
      if (!v18) {
        goto LABEL_42;
      }
      int v19 = *(unsigned __int16 *)(v18 + 4);
      int v14 = 1;
    }
    if (v19 == 47)
    {
      if (v5 && FirstChild)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v18, FirstChild, *v5, 73, v147);
      }
      else
      {
        LOBYTE(v147[0]) = 0;
        char v148 = 0;
      }
      int v26 = *(llvm::raw_ostream **)a1;
      if (*v6)
      {
        BOOL v27 = (unsigned char *)*((void *)v26 + 4);
        if ((unint64_t)v27 >= *((void *)v26 + 3))
        {
          llvm::raw_ostream::write(v26, 60);
        }
        else
        {
          *((void *)v26 + 4) = v27 + 1;
          *BOOL v27 = 60;
        }
      }
      else
      {
        unint64_t v32 = (_WORD *)*((void *)v26 + 4);
        if (*((void *)v26 + 3) - (void)v32 > 1uLL)
        {
          _WORD *v32 = 8236;
          *((void *)v26 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v26, ", ", 2uLL);
        }
      }
      a1[9] = 0;
      *uint64_t v6 = 0;
      if (v148)
      {
        v143[0] = v147[0];
        v143[1] = v147[1];
        _OWORD v143[2] = v147[2];
        uint64_t v150 = FirstChild;
        size_t v151 = (size_t)v5;
        AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)&v150, (const llvm::DWARFFormValue *)v143);
        uint64_t v145 = v41;
        long long v34 = llvm::DWARFDie::resolveTypeUnitReference((llvm::DWARFUnit **)&AttributeValueAsReferencedDie);
        uint64_t v35 = v42;
      }
      else
      {
        long long v34 = 0;
        uint64_t v35 = 0;
      }
      sub_1CC69CC60(a1, v34, v35);
LABEL_42:
      int v14 = 1;
      goto LABEL_49;
    }
    if (v19 == 16646)
    {
      if (!v5) {
        goto LABEL_29;
      }
      if (!FirstChild) {
        goto LABEL_29;
      }
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v18, FirstChild, *v5, 8464, v147);
      if (!v148) {
        goto LABEL_29;
      }
      llvm::DWARFFormValue::getAsCString((llvm *)v147, (uint64_t)&v150);
      char v39 = v151;
      if (v151)
      {
        uint64_t v91 = v150;
        uint64_t v150 = 0;
        AttributeValueAsReferencedDie = v91;
        sub_1CD4515D0(&AttributeValueAsReferencedDie);
        if (AttributeValueAsReferencedDie) {
          (*(void (**)(void *))(*AttributeValueAsReferencedDie + 8))(AttributeValueAsReferencedDie);
        }
        int v28 = 0;
      }
      else
      {
        int v28 = (const char *)v150;
      }
      if (v151)
      {
        uint64_t v40 = v150;
        uint64_t v150 = 0;
        if (v40) {
          (*(void (**)(llvm::DWARFUnit *))(*(void *)v40 + 8))(v40);
        }
      }
      if ((v39 & 1) == 0)
      {
        if (v28)
        {
          size_t v29 = strlen(v28);
          goto LABEL_31;
        }
      }
      else
      {
LABEL_29:
        int v28 = 0;
      }
      size_t v29 = 0;
LABEL_31:
      unint64_t v30 = *(llvm::raw_ostream **)a1;
      if (*v6)
      {
        uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
        if ((unint64_t)v31 >= *((void *)v30 + 3))
        {
          llvm::raw_ostream::write(v30, 60);
        }
        else
        {
          *((void *)v30 + 4) = v31 + 1;
          *uint64_t v31 = 60;
        }
      }
      else
      {
        char v33 = (_WORD *)*((void *)v30 + 4);
        if (*((void *)v30 + 3) - (void)v33 > 1uLL)
        {
          _WORD *v33 = 8236;
          *((void *)v30 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v30, ", ", 2uLL);
        }
      }
      a1[9] = 0;
      *uint64_t v6 = 0;
      uint64_t v36 = *(void *)a1;
      uint64_t v37 = *(void **)(*(void *)a1 + 32);
      if (v29 <= *(void *)(*(void *)a1 + 24) - (void)v37)
      {
        if (v29)
        {
          memcpy(v37, v28, v29);
          *(void *)(v36 + 32) += v29;
        }
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v28, v29);
      }
      int v14 = 1;
      uint64_t v13 = (llvm::DWARFUnit *)LastChild;
      goto LABEL_49;
    }
    if (v19 != 48) {
      goto LABEL_49;
    }
    *(void *)&v147[0] = FirstChild;
    *((void *)&v147[0] + 1) = v5;
    uint64_t v150 = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)v147, 73);
    size_t v151 = v20;
    uint64_t v21 = llvm::DWARFDie::resolveTypeUnitReference(&v150);
    uint64_t v23 = v22;
    BOOL v24 = *(llvm::raw_ostream **)a1;
    if (*v6)
    {
      BOOL v25 = (unsigned char *)*((void *)v24 + 4);
      if ((unint64_t)v25 >= *((void *)v24 + 3))
      {
        llvm::raw_ostream::write(v24, 60);
      }
      else
      {
        *((void *)v24 + 4) = v25 + 1;
        *BOOL v25 = 60;
      }
    }
    else
    {
      std::string::size_type v43 = (_WORD *)*((void *)v24 + 4);
      if (*((void *)v24 + 3) - (void)v43 > 1uLL)
      {
        *std::string::size_type v43 = 8236;
        *((void *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
      }
    }
    a1[9] = 0;
    *uint64_t v6 = 0;
    uint64_t v44 = v23[2];
    if (!v44) {
      goto LABEL_77;
    }
    int v45 = *(unsigned __int16 *)(v44 + 4);
    if (v45 == 15) {
      goto LABEL_292;
    }
    if (v45 != 4)
    {
      if (!v21) {
        goto LABEL_77;
      }
      if (!v23) {
        goto LABEL_77;
      }
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v44, v21, *v23, 3, v147);
      if (!v148) {
        goto LABEL_77;
      }
      llvm::DWARFFormValue::getAsCString((llvm *)v147, (uint64_t)&v150);
      char v94 = v151;
      if (v151)
      {
        long long v130 = v150;
        uint64_t v150 = 0;
        AttributeValueAsReferencedDie = v130;
        sub_1CD4515D0(&AttributeValueAsReferencedDie);
        if (AttributeValueAsReferencedDie) {
          (*(void (**)(void *))(*AttributeValueAsReferencedDie + 8))(AttributeValueAsReferencedDie);
        }
        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v46 = v150;
      }
      if (v151)
      {
        uint64_t v95 = v150;
        uint64_t v150 = 0;
        if (v95) {
          (*(void (**)(llvm::DWARFUnit *))(*(void *)v95 + 8))(v95);
        }
      }
      if ((v94 & 1) == 0)
      {
        if (v46)
        {
          size_t v47 = strlen((const char *)v46);
LABEL_79:
          uint64_t v13 = (llvm::DWARFUnit *)LastChild;
          if (v5 && v15 && (uint64_t v48 = v5[2]) != 0)
          {
            llvm::DWARFAbbreviationDeclaration::getAttributeValue(v48, v17, *v5, 28, v147);
          }
          else
          {
            LOBYTE(v147[0]) = 0;
            char v148 = 0;
          }
          switch(v47)
          {
            case 3uLL:
              if (*(_WORD *)v46 != 28265 || *((unsigned char *)v46 + 2) != 116) {
                break;
              }
              goto LABEL_154;
            case 4uLL:
              if (*(_DWORD *)v46 == 1819242338)
              {
                uint64_t v103 = *(llvm::raw_ostream **)a1;
                unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v147);
                if (AsUnsignedConstant) {
                  uint64_t v63 = "true";
                }
                else {
                  uint64_t v63 = "false";
                }
                if (AsUnsignedConstant) {
                  size_t v105 = 4;
                }
                else {
                  size_t v105 = 5;
                }
                unsigned __int8 v106 = (void *)*((void *)v103 + 4);
                if (v105 <= *((void *)v103 + 3) - (void)v106)
                {
                  memcpy(v106, v63, v105);
                  *((void *)v103 + 4) += v105;
                }
                else
                {
                  size_t v61 = v103;
                  size_t v64 = v105;
LABEL_224:
                  llvm::raw_ostream::write(v61, v63, v64);
                }
LABEL_225:
                uint64_t v13 = (llvm::DWARFUnit *)LastChild;
                break;
              }
              if (*(_DWORD *)v46 != 1735290732)
              {
                if (*(_DWORD *)v46 != 1918986339) {
                  break;
                }
                unint64_t AsSignedConstant = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
                goto LABEL_244;
              }
              uint64_t v120 = *(llvm::raw_ostream **)a1;
              unint64_t v121 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
              sub_1CD5E9DE0((uint64_t)&v150, v121);
              if (v152 >= 0) {
                long long v122 = (const char *)&v150;
              }
              else {
                long long v122 = (const char *)v150;
              }
              if (v152 >= 0) {
                size_t v123 = v152 & 0x7F;
              }
              else {
                size_t v123 = v151;
              }
              llvm::raw_ostream::write(v120, v122, v123);
              if (v152 < 0) {
                operator delete(v150);
              }
              unint64_t v111 = *(llvm::raw_ostream **)a1;
              long long v124 = *(char **)(*(void *)a1 + 32);
              uint64_t v13 = (llvm::DWARFUnit *)LastChild;
              if (*(char **)(*(void *)a1 + 24) != v124)
              {
                char v134 = 76;
                goto LABEL_319;
              }
              long long v113 = "L";
LABEL_290:
              size_t v114 = 1;
              goto LABEL_291;
            case 5uLL:
              if (*(_DWORD *)v46 != 1919903859 || *((unsigned char *)v46 + 4) != 116) {
                break;
              }
              size_t v52 = *(llvm::raw_ostream **)a1;
              unsigned __int8 v53 = *(_DWORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v53 <= 6uLL)
              {
                unsigned __int8 v54 = "(short)";
                size_t v55 = 7;
                goto LABEL_153;
              }
              *(_DWORD *)((char *)v53 + 3) = 695497327;
              _DWORD *v53 = 1869116200;
              uint64_t v131 = *((void *)v52 + 4) + 7;
              goto LABEL_297;
            case 9uLL:
              if (*(void *)v46 != 0x6E6F6C20676E6F6CLL || *((unsigned char *)v46 + 8) != 103) {
                break;
              }
              uint64_t v57 = *(llvm::raw_ostream **)a1;
              unint64_t v58 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
              sub_1CD5E9DE0((uint64_t)&v150, v58);
              if (v152 >= 0) {
                size_t v59 = (const char *)&v150;
              }
              else {
                size_t v59 = (const char *)v150;
              }
              if (v152 >= 0) {
                size_t v60 = v152 & 0x7F;
              }
              else {
                size_t v60 = v151;
              }
              llvm::raw_ostream::write(v57, v59, v60);
              if (v152 < 0) {
                operator delete(v150);
              }
              size_t v61 = *(llvm::raw_ostream **)a1;
              BOOL v62 = *(_WORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v62 <= 1uLL)
              {
                uint64_t v63 = "LL";
                size_t v64 = 2;
                goto LABEL_224;
              }
              _WORD *v62 = 19532;
              uint64_t v132 = *((void *)v61 + 4) + 2;
              goto LABEL_299;
            case 0xBuLL:
              uint64_t v65 = *(void *)((char *)v46 + 3);
              BOOL v66 = *(void *)v46 == 0x632064656E676973;
              goto LABEL_139;
            case 0xCuLL:
              if (*(void *)v46 != 0x64656E6769736E75 || *((_DWORD *)v46 + 2) != 1953392928) {
                break;
              }
              uint64_t v68 = *(llvm::raw_ostream **)a1;
              AttributeValueAsReferencedDie = (void *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v147);
              uint64_t v145 = v69;
              sub_1CD452F60((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&v150);
              if (v152 >= 0) {
                unint64_t v70 = (const char *)&v150;
              }
              else {
                unint64_t v70 = (const char *)v150;
              }
              if (v152 >= 0) {
                size_t v71 = v152 & 0x7F;
              }
              else {
                size_t v71 = v151;
              }
              llvm::raw_ostream::write(v68, v70, v71);
              if (v152 < 0) {
                operator delete(v150);
              }
              size_t v61 = *(llvm::raw_ostream **)a1;
              size_t v72 = *(unsigned char **)(*(void *)a1 + 32);
              if (*(unsigned char **)(*(void *)a1 + 24) == v72)
              {
                uint64_t v63 = "U";
                size_t v64 = 1;
                goto LABEL_224;
              }
              unsigned char *v72 = 85;
              uint64_t v132 = *((void *)v61 + 4) + 1;
              goto LABEL_299;
            case 0xDuLL:
              if (*(void *)v46 == 0x64656E6769736E75 && *(void *)((char *)v46 + 5) == 0x676E6F6C2064656ELL)
              {
                size_t v107 = *(llvm::raw_ostream **)a1;
                AttributeValueAsReferencedDie = (void *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v147);
                uint64_t v145 = v108;
                sub_1CD452F60((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&v150);
                if (v152 >= 0) {
                  unint64_t v109 = (const char *)&v150;
                }
                else {
                  unint64_t v109 = (const char *)v150;
                }
                if (v152 >= 0) {
                  size_t v110 = v152 & 0x7F;
                }
                else {
                  size_t v110 = v151;
                }
                llvm::raw_ostream::write(v107, v109, v110);
                if (v152 < 0) {
                  operator delete(v150);
                }
                unint64_t v111 = *(llvm::raw_ostream **)a1;
                std::string v112 = *(_WORD **)(*(void *)a1 + 32);
                uint64_t v13 = (llvm::DWARFUnit *)LastChild;
                if (*(void *)(*(void *)a1 + 24) - (void)v112 > 1uLL)
                {
                  *std::string v112 = 19541;
                  uint64_t v133 = *((void *)v111 + 4) + 2;
LABEL_320:
                  *((void *)v111 + 4) = v133;
                  break;
                }
                long long v113 = "UL";
                size_t v114 = 2;
LABEL_291:
                llvm::raw_ostream::write(v111, v113, v114);
              }
              else
              {
                uint64_t v65 = *(void *)((char *)v46 + 5);
                BOOL v66 = *(void *)v46 == 0x64656E6769736E75;
LABEL_139:
                if (v66 && v65 == 0x726168632064656ELL)
                {
                  unint64_t v141 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
                  char v75 = *(llvm::raw_ostream **)a1;
                  char v76 = *(unsigned char **)(*(void *)a1 + 32);
                  if ((unint64_t)v76 >= *(void *)(*(void *)a1 + 24))
                  {
                    llvm::raw_ostream::write(v75, 40);
                  }
                  else
                  {
                    *((void *)v75 + 4) = v76 + 1;
                    unsigned char *v76 = 40;
                  }
                  char v115 = *(llvm::raw_ostream **)a1;
                  uint64_t v116 = *(void **)(*(void *)a1 + 32);
                  if (v47 <= *(void *)(*(void *)a1 + 24) - (void)v116)
                  {
                    memcpy(v116, v46, v47);
                    *((void *)v115 + 4) += v47;
                  }
                  else
                  {
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, (const char *)v46, v47);
                  }
                  int v117 = *(llvm::raw_ostream **)a1;
                  char v118 = *(unsigned char **)(*(void *)a1 + 32);
                  uint64_t v13 = (llvm::DWARFUnit *)LastChild;
                  if ((unint64_t)v118 >= *(void *)(*(void *)a1 + 24))
                  {
                    llvm::raw_ostream::write(v117, 41);
                  }
                  else
                  {
                    *((void *)v117 + 4) = v118 + 1;
                    unsigned char *v118 = 41;
                  }
                  unint64_t AsSignedConstant = v141;
LABEL_244:
                  switch(AsSignedConstant)
                  {
                    case 7uLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\a'";
                        goto LABEL_275;
                      }
                      int v137 = 660692007;
                      goto LABEL_316;
                    case 8uLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\b'";
                        goto LABEL_275;
                      }
                      int v137 = 660757543;
                      goto LABEL_316;
                    case 9uLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\t'";
                        goto LABEL_275;
                      }
                      int v137 = 661937191;
                      goto LABEL_316;
                    case 0xAuLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\n'";
                        goto LABEL_275;
                      }
                      int v137 = 661543975;
                      goto LABEL_316;
                    case 0xBuLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\v'";
                        goto LABEL_275;
                      }
                      int v137 = 662068263;
                      goto LABEL_316;
                    case 0xCuLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\f'";
                        goto LABEL_275;
                      }
                      int v137 = 661019687;
                      goto LABEL_316;
                    case 0xDuLL:
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      __n128 v119 = *(int **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                      {
                        long long v113 = "'\\r'";
                        goto LABEL_275;
                      }
                      int v137 = 661806119;
                      goto LABEL_316;
                    default:
                      if (AsSignedConstant == 39)
                      {
                        unint64_t v111 = *(llvm::raw_ostream **)a1;
                        __n128 v119 = *(int **)(*(void *)a1 + 32);
                        if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                        {
                          long long v113 = "'\\''";
                          goto LABEL_275;
                        }
                        int v137 = 656890919;
                        goto LABEL_316;
                      }
                      if (AsSignedConstant == 92)
                      {
                        unint64_t v111 = *(llvm::raw_ostream **)a1;
                        __n128 v119 = *(int **)(*(void *)a1 + 32);
                        if (*(void *)(*(void *)a1 + 24) - (void)v119 <= 3uLL)
                        {
                          long long v113 = "'\\\\'";
LABEL_275:
                          size_t v114 = 4;
                          goto LABEL_291;
                        }
                        int v137 = 660364327;
LABEL_316:
                        *__n128 v119 = v137;
                        uint64_t v133 = *((void *)v111 + 4) + 4;
                        goto LABEL_320;
                      }
                      if ((~AsSignedConstant & 0xFFFFFF00) != 0) {
                        uint64_t v125 = AsSignedConstant;
                      }
                      else {
                        uint64_t v125 = AsSignedConstant;
                      }
                      if ((unint64_t)(v125 - 32) > 0x5E)
                      {
                        if (v125 > 255)
                        {
                          uint64_t v135 = *(llvm::raw_ostream **)a1;
                          AttributeValueAsReferencedDie = &unk_1F2618EA8;
                          if ((unint64_t)v125 >> 16) {
                            uint64_t v136 = "'\\U%08x'";
                          }
                          else {
                            uint64_t v136 = "'\\u%04x'";
                          }
                          uint64_t v145 = v136;
                          uint64_t v146 = v125;
                          sub_1CD5E9E9C((uint64_t)&v150, (uint64_t)&AttributeValueAsReferencedDie);
                          if (v152 >= 0) {
                            uint64_t v81 = (const char *)&v150;
                          }
                          else {
                            uint64_t v81 = (const char *)v150;
                          }
                          if (v152 >= 0) {
                            size_t v82 = v152 & 0x7F;
                          }
                          else {
                            size_t v82 = v151;
                          }
                          unint64_t v83 = v135;
                        }
                        else
                        {
                          size_t v79 = *(llvm::raw_ostream **)a1;
                          AttributeValueAsReferencedDie = &unk_1F2618EA8;
                          uint64_t v145 = "'\\x%02x'";
                          uint64_t v146 = v125;
                          sub_1CD5E9E9C((uint64_t)&v150, (uint64_t)&AttributeValueAsReferencedDie);
LABEL_155:
                          if (v152 >= 0) {
                            uint64_t v81 = (const char *)&v150;
                          }
                          else {
                            uint64_t v81 = (const char *)v150;
                          }
                          if (v152 >= 0) {
                            size_t v82 = v152 & 0x7F;
                          }
                          else {
                            size_t v82 = v151;
                          }
                          unint64_t v83 = v79;
                        }
                        llvm::raw_ostream::write(v83, v81, v82);
                        if (v152 < 0) {
                          operator delete(v150);
                        }
                        goto LABEL_225;
                      }
                      long long v126 = *(llvm::raw_ostream **)a1;
                      char v127 = *(unsigned char **)(*(void *)a1 + 32);
                      if (*(unsigned char **)(*(void *)a1 + 24) == v127)
                      {
                        llvm::raw_ostream::write(v126, "'", 1uLL);
                      }
                      else
                      {
                        *char v127 = 39;
                        ++*((void *)v126 + 4);
                      }
                      uint64_t v128 = *(llvm::raw_ostream **)a1;
                      uint64_t v129 = *(unsigned char **)(*(void *)a1 + 32);
                      if ((unint64_t)v129 >= *(void *)(*(void *)a1 + 24))
                      {
                        llvm::raw_ostream::write(v128, v125);
                      }
                      else
                      {
                        *((void *)v128 + 4) = v129 + 1;
                        *uint64_t v129 = v125;
                      }
                      unint64_t v111 = *(llvm::raw_ostream **)a1;
                      long long v124 = *(char **)(*(void *)a1 + 32);
                      if (*(char **)(*(void *)a1 + 24) == v124)
                      {
                        long long v113 = "'";
                        goto LABEL_290;
                      }
                      char v134 = 39;
                      break;
                  }
LABEL_319:
                  char *v124 = v134;
                  uint64_t v133 = *((void *)v111 + 4) + 1;
                  goto LABEL_320;
                }
              }
              break;
            case 0xEuLL:
              if (*(void *)v46 != 0x64656E6769736E75 || *(void *)((char *)v46 + 6) != 0x74726F6873206465) {
                break;
              }
              size_t v52 = *(llvm::raw_ostream **)a1;
              uint64_t v78 = *(_OWORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v78 > 0xFuLL)
              {
                *uint64_t v78 = *(_OWORD *)"(unsigned short)";
                uint64_t v131 = *((void *)v52 + 4) + 16;
LABEL_297:
                *((void *)v52 + 4) = v131;
              }
              else
              {
                unsigned __int8 v54 = "(unsigned short)";
                size_t v55 = 16;
LABEL_153:
                llvm::raw_ostream::write(v52, v54, v55);
              }
LABEL_154:
              size_t v79 = *(llvm::raw_ostream **)a1;
              unint64_t v80 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
              sub_1CD5E9DE0((uint64_t)&v150, v80);
              goto LABEL_155;
            case 0x12uLL:
              if (*(void *)v46 != 0x64656E6769736E75
                || *((void *)v46 + 1) != 0x6F6C20676E6F6C20
                || *((_WORD *)v46 + 8) != 26478)
              {
                break;
              }
              uint64_t v86 = *(llvm::raw_ostream **)a1;
              AttributeValueAsReferencedDie = (void *)llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v147);
              uint64_t v145 = v87;
              sub_1CD452F60((unint64_t *)&AttributeValueAsReferencedDie, (uint64_t)&v150);
              if (v152 >= 0) {
                unsigned int v88 = (const char *)&v150;
              }
              else {
                unsigned int v88 = (const char *)v150;
              }
              if (v152 >= 0) {
                size_t v89 = v152 & 0x7F;
              }
              else {
                size_t v89 = v151;
              }
              llvm::raw_ostream::write(v86, v88, v89);
              if (v152 < 0) {
                operator delete(v150);
              }
              size_t v61 = *(llvm::raw_ostream **)a1;
              uint64_t v90 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v90) <= 2)
              {
                uint64_t v63 = "ULL";
                size_t v64 = 3;
                goto LABEL_224;
              }
              *(unsigned char *)(v90 + 2) = 76;
              *(_WORD *)uint64_t v90 = 19541;
              uint64_t v132 = *((void *)v61 + 4) + 3;
LABEL_299:
              *((void *)v61 + 4) = v132;
              goto LABEL_225;
            default:
              break;
          }
LABEL_292:
          int v14 = 1;
          goto LABEL_49;
        }
      }
      else
      {
LABEL_77:
        uint64_t v46 = 0;
      }
      size_t v47 = 0;
      goto LABEL_79;
    }
    unint64_t v92 = *(llvm::raw_ostream **)a1;
    BOOL v93 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v93 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v92, 40);
    }
    else
    {
      *((void *)v92 + 4) = v93 + 1;
      *BOOL v93 = 40;
    }
    sub_1CC69CC60(a1, v21, v23);
    unint64_t v96 = *(llvm::raw_ostream **)a1;
    unsigned int v97 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v97 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v96, 41);
    }
    else
    {
      *((void *)v96 + 4) = v97 + 1;
      *unsigned int v97 = 41;
    }
    if (v5 && v15 && (uint64_t v98 = v5[2]) != 0)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v98, v17, *v5, 28, v147);
    }
    else
    {
      LOBYTE(v147[0]) = 0;
      char v148 = 0;
    }
    unint64_t v99 = *(llvm::raw_ostream **)a1;
    unint64_t v100 = llvm::DWARFFormValue::getAsSignedConstant((llvm::DWARFFormValue *)v147);
    sub_1CD5E9DE0((uint64_t)&v150, v100);
    if (v152 >= 0) {
      uint64_t v101 = (const char *)&v150;
    }
    else {
      uint64_t v101 = (const char *)v150;
    }
    if (v152 >= 0) {
      size_t v102 = v152 & 0x7F;
    }
    else {
      size_t v102 = v151;
    }
    llvm::raw_ostream::write(v99, v101, v102);
    if (v152 < 0) {
      operator delete(v150);
    }
    int v14 = 1;
    uint64_t v13 = (llvm::DWARFUnit *)LastChild;
LABEL_49:
    uint64_t FirstChild = 0;
    if (v5)
    {
      unsigned int v5 = 0;
      if (v15)
      {
        unsigned int v38 = *((_DWORD *)v16 + 3);
        if (v38)
        {
          unsigned int v5 = (uint64_t *)(*((void *)v17 + 36) + 24 * v38);
          uint64_t FirstChild = v17;
        }
        else
        {
          uint64_t FirstChild = 0;
          unsigned int v5 = 0;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
  }
  while (v9 != v5 || v13 != FirstChild);
  if (!v14) {
    return 0;
  }
  uint64_t result = 1;
  if (v6 == &v149 && *v6)
  {
    uint64_t v139 = *(llvm::raw_ostream **)a1;
    char v140 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v140 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v139, 60);
    }
    else
    {
      *((void *)v139 + 4) = v140 + 1;
      unsigned char *v140 = 60;
    }
    a1[9] = 0;
    return 1;
  }
  return result;
}

llvm::DWARFUnit *sub_1CC69FBDC(long long *a1, llvm::DWARFUnit **a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v7 = *(void *)(*((void *)a1 + 1) + 16);
  BOOL v8 = a4;
  if (v7)
  {
    if (*(_WORD *)(v7 + 4) == 38) {
      BOOL v8 = a3;
    }
    else {
      BOOL v8 = a4;
    }
  }
  *BOOL v8 = *a1;
  long long v18 = *a1;
  AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v18, 73);
  uint64_t v17 = v9;
  uint64_t result = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
  *a2 = result;
  a2[1] = v11;
  if (result)
  {
    if (v11)
    {
      uint64_t v12 = *((void *)v11 + 2);
      if (v12)
      {
        int v13 = *(unsigned __int16 *)(v12 + 4);
        if (v13 == 53)
        {
          *a4 = *(_OWORD *)a2;
        }
        else
        {
          if (v13 != 38) {
            return result;
          }
          *a3 = *(_OWORD *)a2;
        }
        long long v18 = *(_OWORD *)a2;
        AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)&v18, 73);
        uint64_t v17 = v14;
        uint64_t result = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
        *a2 = result;
        a2[1] = v15;
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC69FCBC(unsigned char *a1, uint64_t a2, uint64_t a3, llvm::DWARFUnit *a4, uint64_t *a5, int a6, int a7, int a8)
{
  uint64_t result = *(llvm::raw_ostream **)a1;
  uint64_t v16 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v16 >= *((void *)result + 3))
  {
    uint64_t result = llvm::raw_ostream::write(result, 40);
  }
  else
  {
    *((void *)result + 4) = v16 + 1;
    *uint64_t v16 = 40;
  }
  int v87 = a7;
  a1[9] = 0;
  if (a2) {
    BOOL v17 = a3 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  char v18 = v17;
  uint64_t v90 = (uint64_t *)a3;
  uint64_t v91 = (llvm::DWARFUnit *)a2;
  if (v17)
  {
    char v39 = 0;
    uint64_t FirstChild = 0;
    unint64_t v96 = 0;
    std::string::size_type v41 = 0;
  }
  else
  {
    uint64_t FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild(a2, a3);
    char v39 = v38;
    uint64_t result = (llvm::raw_ostream *)llvm::DWARFUnit::getLastChild(a2, a3);
    unint64_t v96 = result;
    std::string::size_type v41 = v40;
  }
  char v88 = v18;
  int v89 = a8;
  unint64_t v92 = a4;
  BOOL v93 = a5;
  if (v39 != v41 || FirstChild != v96)
  {
    char v94 = 0;
    uint64_t v95 = 0;
    char v19 = 1;
    int v20 = 1;
    while (1)
    {
      uint64_t v21 = v39[2];
      if (!v21) {
        return result;
      }
      int v22 = *(unsigned __int16 *)(v21 + 4);
      if (v22 != 24 && v22 != 5) {
        return result;
      }
      BOOL v24 = FirstChild;
      BOOL v25 = v39;
      int v26 = FirstChild;
      uint64_t v98 = FirstChild;
      unint64_t v99 = v39;
      AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
      uint64_t v102 = v27;
      int v28 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
      unint64_t v30 = v29;
      if ((a6 & v20) == 1
        && v39
        && v24
        && (uint64_t v31 = v39[2]) != 0
        && (uint64_t result = (llvm::raw_ostream *)llvm::DWARFAbbreviationDeclaration::getAttributeValue(v31, v26, *v39, 52, &v98), v100))
      {
        int v20 = 0;
        char v94 = v30;
        uint64_t v95 = v28;
      }
      else
      {
        if ((v19 & 1) == 0)
        {
          unint64_t v32 = *(llvm::raw_ostream **)a1;
          char v33 = *(_WORD **)(*(void *)a1 + 32);
          if (*(void *)(*(void *)a1 + 24) - (void)v33 > 1uLL)
          {
            _WORD *v33 = 8236;
            *((void *)v32 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v32, ", ", 2uLL);
          }
        }
        uint64_t v34 = v39[2];
        if (v34 && *(_WORD *)(v34 + 4) == 24)
        {
          uint64_t result = *(llvm::raw_ostream **)a1;
          uint64_t v35 = *(void *)(*(void *)a1 + 32);
          if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v35) > 2)
          {
            char v19 = 0;
            *(unsigned char *)(v35 + 2) = 46;
            *(_WORD *)uint64_t v35 = 11822;
            *((void *)result + 4) += 3;
            goto LABEL_35;
          }
          uint64_t result = llvm::raw_ostream::write(result, "...", 3uLL);
        }
        else
        {
          uint64_t result = (llvm::raw_ostream *)sub_1CC69CC60(a1, v28, v30);
        }
        char v19 = 0;
      }
LABEL_35:
      uint64_t FirstChild = 0;
      if (v39)
      {
        char v39 = 0;
        if (v24)
        {
          unsigned int v36 = *((_DWORD *)v25 + 3);
          if (v36)
          {
            char v39 = (uint64_t *)(*((void *)v26 + 36) + 24 * v36);
            uint64_t FirstChild = v26;
          }
          else
          {
            uint64_t FirstChild = 0;
            char v39 = 0;
          }
        }
      }
      else
      {
        char v39 = 0;
      }
      if (v39 == v41 && FirstChild == v96) {
        goto LABEL_49;
      }
    }
  }
  char v94 = 0;
  uint64_t v95 = 0;
LABEL_49:
  a1[9] = 0;
  uint64_t v42 = *(llvm::raw_ostream **)a1;
  std::string::size_type v43 = *(unsigned char **)(*(void *)a1 + 32);
  if ((unint64_t)v43 >= *(void *)(*(void *)a1 + 24))
  {
    llvm::raw_ostream::write(v42, 41);
  }
  else
  {
    *((void *)v42 + 4) = v43 + 1;
    *std::string::size_type v43 = 41;
  }
  int v44 = v89;
  int v45 = v87;
  if (v95)
  {
    if (v94)
    {
      uint64_t v46 = v94[2];
      if (v46)
      {
        if (*(_WORD *)(v46 + 4) == 15)
        {
          uint64_t v98 = v95;
          unint64_t v99 = v94;
          AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
          uint64_t v102 = v47;
          uint64_t v48 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
          if (v48)
          {
            if (v49)
            {
              uint64_t v50 = v49[2];
              if (v50)
              {
                int v51 = *(unsigned __int16 *)(v50 + 4);
                if (v51 == 38) {
                  int v45 = 1;
                }
                LODWORD(v50) = v51 == 53;
              }
              int v44 = v50 | v89;
              uint64_t v98 = v48;
              unint64_t v99 = v49;
              AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
              uint64_t v102 = v52;
              if (llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie) && v53)
              {
                uint64_t v54 = *(void *)(v53 + 16);
                if (v54)
                {
                  int v55 = *(unsigned __int16 *)(v54 + 4);
                  if (v55 == 38) {
                    int v45 = 1;
                  }
                  LODWORD(v54) = v55 == 53;
                }
                v44 |= v54;
              }
            }
          }
        }
      }
    }
  }
  if ((v88 & 1) == 0)
  {
    uint64_t v56 = v90[2];
    if (v56)
    {
      llvm::DWARFAbbreviationDeclaration::getAttributeValue(v56, v91, *v90, 54, &v98);
      if (v100)
      {
        switch(llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&v98))
        {
          case 0xB1uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            unint64_t v58 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v58 <= 0x18uLL)
            {
              size_t v59 = " __attribute__(stdcall)";
              goto LABEL_104;
            }
            size_t v71 = " __attribute__(stdcall)";
            goto LABEL_130;
          case 0xB2uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            uint64_t v60 = *(void *)(*(void *)a1 + 32);
            if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v60) <= 0x17)
            {
              size_t v59 = " __attribute__(pascal)";
              goto LABEL_85;
            }
            size_t v72 = " __attribute__(pascal)";
            goto LABEL_119;
          case 0xB3uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v61 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v61 <= 0x19uLL)
            {
              size_t v59 = " __attribute__(fastcall)";
              goto LABEL_88;
            }
            uint64_t v73 = " __attribute__(fastcall)";
            goto LABEL_121;
          case 0xB5uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v61 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v61 <= 0x19uLL)
            {
              size_t v59 = " __attribute__(thiscall)";
              goto LABEL_88;
            }
            uint64_t v73 = " __attribute__(thiscall)";
            goto LABEL_121;
          case 0xC0uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            BOOL v62 = *(void **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v62 <= 0x1BuLL)
            {
              size_t v59 = " __attribute__(vectorcall)";
              size_t v63 = 28;
              goto LABEL_105;
            }
            qmemcpy(v62, " __attribute__(vectorcall)", 28);
            uint64_t v74 = *((void *)v57 + 4) + 28;
            goto LABEL_131;
          case 0xC1uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            uint64_t v60 = *(void *)(*(void *)a1 + 32);
            if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v60) <= 0x17)
            {
              size_t v59 = " __attribute__(ms_abi)";
LABEL_85:
              size_t v63 = 24;
              goto LABEL_105;
            }
            size_t v72 = " __attribute__(ms_abi)";
LABEL_119:
            *(_OWORD *)uint64_t v60 = *(_OWORD *)v72;
            *(void *)(v60 + 16) = *((void *)v72 + 2);
            uint64_t v74 = *((void *)v57 + 4) + 24;
            goto LABEL_131;
          case 0xC2uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v61 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v61 <= 0x19uLL)
            {
              size_t v59 = " __attribute__(sysv_abi)";
LABEL_88:
              size_t v63 = 26;
              goto LABEL_105;
            }
            uint64_t v73 = " __attribute__(sysv_abi)";
LABEL_121:
            *size_t v61 = *(_OWORD *)v73;
            *(_OWORD *)((char *)v61 + 10) = *(_OWORD *)(v73 + 10);
            uint64_t v74 = *((void *)v57 + 4) + 26;
            goto LABEL_131;
          case 0xC3uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v64 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v64 <= 0x1DuLL)
            {
              size_t v59 = " __attribute__((pcs(\"aapcs\")))";
              goto LABEL_101;
            }
            char v75 = " __attribute__((pcs(\"aapcs\")))";
            goto LABEL_128;
          case 0xC4uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            uint64_t v65 = *(void **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v65 <= 0x21uLL)
            {
              size_t v59 = " __attribute__((pcs(\"aapcs-vfp\")))";
              size_t v63 = 34;
              goto LABEL_105;
            }
            qmemcpy(v65, " __attribute__((pcs(\"aapcs-vfp\")))", 34);
            uint64_t v74 = *((void *)v57 + 4) + 34;
            goto LABEL_131;
          case 0xC5uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            BOOL v66 = *(void **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v66 <= 0x1FuLL)
            {
              size_t v59 = " __attribute__(intel_ocl_bicc)";
              size_t v63 = 32;
              goto LABEL_105;
            }
            qmemcpy(v66, " __attribute__(intel_ocl_bicc)", 32);
            uint64_t v74 = *((void *)v57 + 4) + 32;
            goto LABEL_131;
          case 0xC8uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v67 = *(void **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v67 <= 0x1AuLL)
            {
              size_t v59 = " __attribute__(swiftcall)";
              size_t v63 = 27;
              goto LABEL_105;
            }
            qmemcpy(v67, " __attribute__(swiftcall)", 27);
            uint64_t v74 = *((void *)v57 + 4) + 27;
            goto LABEL_131;
          case 0xC9uLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            uint64_t v68 = *(void **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v68 <= 0x1EuLL)
            {
              size_t v59 = " __attribute__(preserve_most)";
              size_t v63 = 31;
              goto LABEL_105;
            }
            qmemcpy(v68, " __attribute__(preserve_most)", 31);
            uint64_t v74 = *((void *)v57 + 4) + 31;
            goto LABEL_131;
          case 0xCAuLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            size_t v64 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v64 <= 0x1DuLL)
            {
              size_t v59 = " __attribute__(preserve_all)";
LABEL_101:
              size_t v63 = 30;
              goto LABEL_105;
            }
            char v75 = " __attribute__(preserve_all)";
LABEL_128:
            *size_t v64 = *(_OWORD *)v75;
            *(_OWORD *)((char *)v64 + 14) = *(_OWORD *)(v75 + 14);
            uint64_t v74 = *((void *)v57 + 4) + 30;
            goto LABEL_131;
          case 0xCBuLL:
            uint64_t v57 = *(llvm::raw_ostream **)a1;
            unint64_t v58 = *(_OWORD **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v58 <= 0x18uLL)
            {
              size_t v59 = " __attribute__(regcall)";
LABEL_104:
              size_t v63 = 25;
LABEL_105:
              llvm::raw_ostream::write(v57, v59, v63);
              break;
            }
            size_t v71 = " __attribute__(regcall)";
LABEL_130:
            _OWORD *v58 = *(_OWORD *)v71;
            *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)(v71 + 9);
            uint64_t v74 = *((void *)v57 + 4) + 25;
LABEL_131:
            *((void *)v57 + 4) = v74;
            if (v45) {
              goto LABEL_132;
            }
            goto LABEL_107;
          default:
            break;
        }
      }
    }
  }
  if (!v45)
  {
LABEL_107:
    if (v44) {
      goto LABEL_108;
    }
LABEL_134:
    if ((v88 & 1) == 0) {
      goto LABEL_135;
    }
    goto LABEL_143;
  }
LABEL_132:
  char v76 = *(llvm::raw_ostream **)a1;
  uint64_t v77 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v77) > 5)
  {
    *(_WORD *)(v77 + 4) = 29811;
    *(_DWORD *)uint64_t v77 = 1852793632;
    *((void *)v76 + 4) += 6;
    if (!v44) {
      goto LABEL_134;
    }
  }
  else
  {
    llvm::raw_ostream::write(v76, " const", 6uLL);
    if (!v44) {
      goto LABEL_134;
    }
  }
LABEL_108:
  uint64_t v69 = *(llvm::raw_ostream **)a1;
  uint64_t v70 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v70) > 8)
  {
    *(unsigned char *)(v70 + 8) = 101;
    *(void *)uint64_t v70 = *(void *)" volatile";
    *((void *)v69 + 4) += 9;
    if ((v88 & 1) == 0) {
      goto LABEL_135;
    }
  }
  else
  {
    llvm::raw_ostream::write(v69, " volatile", 9uLL);
    if ((v88 & 1) == 0)
    {
LABEL_135:
      uint64_t v78 = v90[2];
      if (v78)
      {
        llvm::DWARFAbbreviationDeclaration::getAttributeValue(v78, v91, *v90, 119, &v98);
        if (v100)
        {
          size_t v79 = *(llvm::raw_ostream **)a1;
          unint64_t v80 = *(_WORD **)(*(void *)a1 + 32);
          if (*(void *)(*(void *)a1 + 24) - (void)v80 > 1uLL)
          {
            *unint64_t v80 = 9760;
            *((void *)v79 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v79, " &", 2uLL);
          }
        }
        uint64_t v81 = v90[2];
        if (v81)
        {
          llvm::DWARFAbbreviationDeclaration::getAttributeValue(v81, v91, *v90, 120, &v98);
          if (v100)
          {
            size_t v82 = *(llvm::raw_ostream **)a1;
            uint64_t v83 = *(void *)(*(void *)a1 + 32);
            if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v83) > 2)
            {
              *(unsigned char *)(v83 + 2) = 38;
              *(_WORD *)uint64_t v83 = 9760;
              *((void *)v82 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v82, " &&", 3uLL);
            }
          }
        }
      }
    }
  }
LABEL_143:
  uint64_t v98 = v92;
  unint64_t v99 = v93;
  AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(&v98, 73);
  uint64_t v102 = v84;
  uint64_t v85 = llvm::DWARFDie::resolveTypeUnitReference(&AttributeValueAsReferencedDie);
  return (llvm::raw_ostream *)sub_1CC69DAA0(a1, v92, v93, v85, v86, 0);
}

void *sub_1CC6A0680(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v5 = 3 * a3;
    size_t v6 = 24 * a3;
    uint64_t v7 = (char *)operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    BOOL v8 = &v7[8 * v5];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

uint64_t llvm::DWARFExpression::Operation::extract(uint64_t a1, uint64_t *a2, int a3, unint64_t a4, __int16 a5)
{
  unint64_t v38 = a4;
  *(void *)(a1 + 8) = a4;
  if (llvm::DataExtractor::prepareRead((uint64_t)a2, a4, 1, 0))
  {
    unsigned int v10 = *(unsigned __int8 *)(*a2 + a4);
    unint64_t v38 = a4 + 1;
  }
  else
  {
    unsigned int v10 = 0;
  }
  *(unsigned char *)a1 = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCD9960, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCD9960))
  {
    sub_1CC6A2060();
    __cxa_atexit((void (*)(void *))sub_1CC6A2230, &qword_1EBCD9968, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCD9960);
  }
  if (0xAAAAAAAAAAAAAAABLL * (qword_1EBCD9970 - qword_1EBCD9968) <= v10)
  {
    int v12 = 0;
    char v14 = -1;
    __int16 v13 = 255;
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)(qword_1EBCD9968 + 3 * v10);
    int v12 = *v11;
    __int16 v13 = v11[1];
    char v14 = v11[2];
  }
  *(unsigned char *)(a1 + 3) = v14;
  *(_WORD *)(a1 + 1) = v12 | (v13 << 8);
  if (!v12) {
    return 0;
  }
  uint64_t v15 = 0;
  char v16 = 1;
  while (1)
  {
    int v17 = *(unsigned __int8 *)(a1 + v15 + 2);
    if (v17 == 255) {
      break;
    }
    char v18 = v16;
    if ((v17 & 0x7F) == 4)
    {
      if ((v17 & 0x80) != 0) {
        uint64_t SLEB128 = llvm::DataExtractor::getSLEB128(a2, (uint64_t *)&v38, 0);
      }
      else {
        uint64_t SLEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)&v38, 0);
      }
      *(void *)(a1 + 8 * v15 + 16) = SLEB128;
    }
    else
    {
      if ((v17 & 0x7Fu) <= 4)
      {
        char v24 = *(unsigned char *)(a1 + v15 + 2);
        switch(v17 & 0x7F)
        {
          case 0:
            unint64_t v25 = v38;
            if (llvm::DataExtractor::prepareRead((uint64_t)a2, v38, 1, 0))
            {
              unsigned int v26 = *(unsigned __int8 *)(*a2 + v25);
              ++v38;
            }
            else
            {
              unsigned int v26 = 0;
            }
            uint64_t v27 = a1 + 8 * v15;
            *(void *)(v27 + 16) = v26;
            int v28 = (void *)(v27 + 16);
            if (v24 < 0) {
              void *v28 = (char)v26;
            }
            goto LABEL_13;
          case 1:
            unsigned int U16 = llvm::DataExtractor::getU16(a2, &v38, 0);
            uint64_t v31 = a1 + 8 * v15;
            *(void *)(v31 + 16) = U16;
            unint64_t v32 = (void *)(v31 + 16);
            if ((v24 & 0x80) == 0) {
              goto LABEL_13;
            }
            uint64_t v33 = (__int16)U16;
            goto LABEL_45;
          case 2:
            unsigned int U32 = llvm::DataExtractor::getU32(a2, &v38, 0);
            uint64_t v35 = a1 + 8 * v15;
            *(void *)(v35 + 16) = U32;
            unint64_t v32 = (void *)(v35 + 16);
            if ((v24 & 0x80) == 0) {
              goto LABEL_13;
            }
            uint64_t v33 = (int)U32;
LABEL_45:
            void *v32 = v33;
            goto LABEL_13;
          case 3:
            uint64_t U64 = llvm::DataExtractor::getU64(a2, &v38, 0);
            goto LABEL_27;
          case 4:
            __break(1u);
            goto LABEL_36;
          case 5:
            unsigned int v36 = a2;
            int v37 = a3;
            goto LABEL_53;
          case 6:
            if ((a5 & 0xFF00) == 0) {
              return 0;
            }
            if ((_BYTE)a5) {
              int v37 = 8;
            }
            else {
              int v37 = 4;
            }
            unsigned int v36 = a2;
LABEL_53:
            uint64_t U64 = llvm::DataExtractor::getUnsigned(v36, &v38, v37, 0);
            goto LABEL_27;
          case 7:
            if (v16) {
              return 0;
            }
LABEL_36:
            unint64_t v29 = v38;
            *(void *)(a1 + 16 + 8 * v15) = v38;
            unint64_t v19 = *(void *)(a1 + 16) + v29;
            *(void *)(a1 + 8 * v15 + 32) = v19;
            goto LABEL_16;
          case 8:
            goto LABEL_26;
          default:
            JUMPOUT(0);
        }
      }
      unint64_t v22 = *(void *)(a1 + 16);
      if (v22 < 3) {
        goto LABEL_26;
      }
      if (v22 != 3)
      {
        if (v22 != 4) {
          return 0;
        }
LABEL_26:
        uint64_t U64 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)&v38, 0);
LABEL_27:
        *(void *)(a1 + 8 * v15 + 16) = U64;
        goto LABEL_13;
      }
      *(void *)(a1 + 8 * v15 + 16) = llvm::DataExtractor::getU32(a2, &v38, 0);
    }
LABEL_13:
    char v16 = 0;
    unint64_t v19 = v38;
    *(void *)(a1 + 8 * v15 + 32) = v38;
    uint64_t v15 = 1;
    if ((v18 & 1) == 0) {
      goto LABEL_16;
    }
  }
  unint64_t v19 = v38;
LABEL_16:
  *(void *)(a1 + 8) = v19;
  return 1;
}

BOOL llvm::DWARFExpression::Operation::print(unsigned __int8 *a1, llvm::raw_ostream *this, uint64_t a3, void *a4, llvm::MCRegisterInfo *a5, llvm::DWARFUnit *a6, int a7)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v54 = a1[4];
  if (a1[4])
  {
    BOOL v8 = (_OWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v8 > 0xFuLL)
    {
      *BOOL v8 = *(_OWORD *)"<decoding error>";
      *((void *)this + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(this, "<decoding error>", 0x10uLL);
    }
    return v54 == 0;
  }
  int v17 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*a1);
  size_t v18 = v16;
  unint64_t v19 = (void *)*((void *)this + 4);
  if (v16 <= *((void *)this + 3) - (void)v19)
  {
    if (v16)
    {
      memcpy(v19, v17, v16);
      *((void *)this + 4) += v18;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v17, v16);
  }
  int v20 = *a1;
  uint64_t v51 = a3;
  if ((v20 - 80) >= 0x40)
  {
    unsigned int v21 = v20 - 144;
    BOOL v22 = v21 > 0x15;
    int v23 = (1 << v21) & 0x200005;
    if (v22 || v23 == 0) {
      goto LABEL_15;
    }
  }
  *(_OWORD *)size_t v59 = *(_OWORD *)a3;
  *(void *)&v59[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)v60, a3 + 24);
  sub_1CC66D518((uint64_t)v62, a3 + 56);
  if (!a5
    || ((int v39 = *a1, v53 = (uint64_t)(a1 + 16), (v39 - 144) > 0x15) || ((1 << (v39 + 112)) & 0x200005) == 0
      ? ((v39 - 112) <= 0x21 ? (v40 = v39 - 112) : (v40 = v39 - 80), uint64_t v41 = 0)
      : (v40 = *((_DWORD *)a1 + 4), uint64_t v41 = 1),
        (uint64_t LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(a5, v40, a7), (LLVMRegNum & 0xFF00000000) == 0)
     || (uint64_t v43 = *((void *)a5 + 8)) == 0))
  {
    sub_1CD5E15A8(v59);
LABEL_15:
    uint64_t v25 = 0;
    uint64_t v52 = a1 + 16;
    uint64_t v50 = a3 + 24;
    uint64_t v49 = a3 + 56;
    for (char i = 1; ; char i = 0)
    {
      char v27 = i;
      int v28 = a1[v25 + 2];
      if (v28 == 255) {
        return v54 == 0;
      }
      if (a6 && v28 == 8)
      {
        if (*a1 != 168 || *(void *)&a1[8 * v25 + 16])
        {
          *(_OWORD *)uint64_t v56 = *(_OWORD *)v51;
          *(void *)&v56[14] = *(void *)(v51 + 14);
          sub_1CC66D518((uint64_t)&v57, v50);
          sub_1CC66D518((uint64_t)&v58, v49);
          sub_1CC6A1118(a6, this, (uint64_t)v56, (uint64_t)v52, v25);
          sub_1CD5E15A8(v56);
        }
        else
        {
          unint64_t v29 = (_DWORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v29 > 3uLL)
          {
            _DWORD *v29 = 813183008;
            *((void *)this + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(this, " 0x0", 4uLL);
          }
        }
        goto LABEL_41;
      }
      if (v28 == 7)
      {
        unint64_t v30 = &a1[8 * (v25 - 1)];
        uint64_t v32 = *((void *)v30 + 2);
        uint64_t v31 = v30 + 16;
        if (v32)
        {
          unint64_t v33 = *(void *)&a1[8 * v25 + 16];
          unsigned int v34 = 1;
          do
          {
            if (llvm::DataExtractor::prepareRead((uint64_t)a4, v33, 1, 0)) {
              uint64_t v35 = *(unsigned __int8 *)(*a4 + v33++);
            }
            else {
              uint64_t v35 = 0;
            }
            *(void *)size_t v64 = &unk_1F260ED30;
            *(void *)&v64[8] = " 0x%02x";
            *(void *)&v64[16] = v35;
            llvm::raw_ostream::operator<<(this, (uint64_t)v64);
            BOOL v22 = *v31 > (unint64_t)v34++;
          }
          while (v22);
        }
        goto LABEL_41;
      }
      if (v28 == 30)
      {
        if (*v52 > 4uLL) {
          goto LABEL_41;
        }
      }
      else
      {
        if ((v28 & 0x80) != 0)
        {
          uint64_t v37 = *(void *)&a1[8 * v25 + 16];
          *(void *)size_t v64 = &unk_1F2618EA8;
          unint64_t v38 = " %+lld";
          goto LABEL_39;
        }
        int v36 = *a1;
        if (v36 == 163 || v36 == 243) {
          goto LABEL_41;
        }
      }
      uint64_t v37 = *(void *)&a1[8 * v25 + 16];
      *(void *)size_t v64 = &unk_1F25FF808;
      unint64_t v38 = " 0x%llx";
LABEL_39:
      *(void *)&v64[8] = v38;
      *(void *)&v64[16] = v37;
      llvm::raw_ostream::operator<<(this, (uint64_t)v64);
LABEL_41:
      uint64_t v25 = 1;
      if ((v27 & 1) == 0) {
        return v54 == 0;
      }
    }
  }
  int v44 = (const char *)(v43 + *(unsigned int *)(*(void *)a5 + 24 * LLVMRegNum));
  if (v39 == 146 || (v39 - 112) <= 0x1F)
  {
    uint64_t v46 = *(void *)(v53 + 8 * v41);
    v55[0] = &unk_1F2618CF0;
    v55[1] = " %s%+lld";
    v55[2] = v44;
    v55[3] = v46;
    llvm::raw_ostream::operator<<(this, (uint64_t)v55);
  }
  else
  {
    int v45 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v45 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 32);
    }
    else
    {
      *((void *)this + 4) = v45 + 1;
      *int v45 = 32;
    }
    size_t v47 = strlen(v44);
    uint64_t v48 = (void *)*((void *)this + 4);
    if (v47 <= *((void *)this + 3) - (void)v48)
    {
      if (v47)
      {
        memcpy(v48, v44, v47);
        *((void *)this + 4) += v47;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, v44, v47);
    }
    if (v39 == 165)
    {
      *(_OWORD *)size_t v64 = *(_OWORD *)v59;
      *(void *)&v64[14] = *(void *)&v59[14];
      if (v61)
      {
        if (v61 == v60)
        {
          BOOL v66 = &v65;
          (*(void (**)(void *))(v60[0] + 24))(v60);
        }
        else
        {
          BOOL v66 = (uint64_t *)(*(uint64_t (**)(void))(*v61 + 16))();
        }
      }
      else
      {
        BOOL v66 = 0;
      }
      if (v63)
      {
        if (v63 == v62)
        {
          uint64_t v68 = &v67;
          (*(void (**)(void *))(v62[0] + 24))(v62);
        }
        else
        {
          uint64_t v68 = (uint64_t *)(*(uint64_t (**)(void))(*v63 + 16))();
        }
      }
      else
      {
        uint64_t v68 = 0;
      }
      sub_1CC6A1118(a6, this, (uint64_t)v64, v53, 1u);
      sub_1CD5E15A8(v64);
    }
  }
  sub_1CD5E15A8(v59);
  return v54 == 0;
}

llvm::raw_ostream *sub_1CC6A1118(llvm::DWARFUnit *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a5;
  v28[0] = sub_1CD5E31EC(a1, *(void *)(a4 + 8 * a5) + *((void *)a1 + 3));
  v28[1] = v10;
  if (v28[0]) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || (uint64_t v12 = *((void *)v10 + 2)) == 0 || *(_WORD *)(v12 + 4) != 36)
  {
    uint64_t v13 = *(void *)(a4 + 8 * v9);
    char v24 = &unk_1F25FF808;
    uint64_t v25 = " <invalid base_type ref: 0x%llx>";
    uint64_t v26 = v13;
    return llvm::raw_ostream::operator<<(a2, (uint64_t)&v24);
  }
  uint64_t v15 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v15 > 1uLL)
  {
    _WORD *v15 = 10272;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
  }
  if (*(unsigned char *)(a3 + 20))
  {
    uint64_t v16 = *(void *)(a4 + 8 * v9);
    char v24 = &unk_1F25FF808;
    uint64_t v25 = "0x%08llx -> ";
    uint64_t v26 = v16;
    llvm::raw_ostream::operator<<(a2, (uint64_t)&v24);
  }
  uint64_t v17 = *(void *)(a4 + 8 * v9) + *((void *)a1 + 3);
  char v24 = &unk_1F25FF808;
  uint64_t v25 = "0x%08llx)";
  uint64_t v26 = v17;
  llvm::raw_ostream::operator<<(a2, (uint64_t)&v24);
  uint64_t result = (llvm::raw_ostream *)llvm::DWARFDie::find(v28, 3, &v24);
  if (v27)
  {
    uint64_t result = llvm::DWARFFormValue::getAsCString((llvm *)&v24, (uint64_t)&v30);
    char v18 = v31;
    if (v31)
    {
      int v23 = v30;
      unint64_t v30 = 0;
      unint64_t v29 = v23;
      sub_1CD4515D0((void **)&v29);
      uint64_t result = v29;
      if (v29) {
        uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v29 + 8))(v29);
      }
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = (const char *)v30;
    }
    if (v31)
    {
      uint64_t result = v30;
      unint64_t v30 = 0;
      if (result) {
        uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 8))(result);
      }
    }
    if ((v18 & 1) == 0)
    {
      int v20 = (_WORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v20 > 1uLL)
      {
        _WORD *v20 = 8736;
        unsigned int v21 = (unsigned char *)(*((void *)a2 + 4) + 2);
        *((void *)a2 + 4) = v21;
        if (v19)
        {
LABEL_22:
          uint64_t result = (llvm::raw_ostream *)strlen(v19);
          BOOL v22 = result;
          if ((unint64_t)result <= *((void *)a2 + 3) - (void)v21)
          {
            if (result)
            {
              uint64_t result = (llvm::raw_ostream *)memcpy(v21, v19, (size_t)result);
              unsigned int v21 = (char *)v22 + *((void *)a2 + 4);
              *((void *)a2 + 4) = v21;
            }
          }
          else
          {
            uint64_t result = llvm::raw_ostream::write(a2, v19, (size_t)result);
            unsigned int v21 = (unsigned char *)*((void *)a2 + 4);
          }
        }
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(a2, " \"", 2uLL);
        unsigned int v21 = (unsigned char *)*((void *)a2 + 4);
        if (v19) {
          goto LABEL_22;
        }
      }
      if (*((unsigned char **)a2 + 3) == v21)
      {
        return llvm::raw_ostream::write(a2, "\"", 1uLL);
      }
      else
      {
        unsigned char *v21 = 34;
        ++*((void *)a2 + 4);
      }
    }
  }
  return result;
}

unint64_t *sub_1CC6A144C(unint64_t *a1)
{
  if (*((unsigned char *)a1 + 20))
  {
    char v2 = (long long *)*a1;
    int v3 = (unint64_t *)(*a1 + 8);
  }
  else
  {
    int v3 = a1 + 3;
    char v2 = (long long *)*a1;
  }
  unint64_t v4 = *v3;
  a1[1] = *v3;
  if (v4 >= *((void *)v2 + 1))
  {
    char v6 = 1;
  }
  else
  {
    long long v5 = *v2;
    uint64_t v9 = *((void *)v2 + 2);
    long long v8 = v5;
    char v6 = llvm::DWARFExpression::Operation::extract((uint64_t)(a1 + 2), (uint64_t *)&v8, *((unsigned __int8 *)v2 + 24), v4, *(_WORD *)((char *)v2 + 25)) ^ 1;
  }
  *((unsigned char *)a1 + 20) = v6;
  return a1;
}

BOOL llvm::DWARFExpression::Operation::verify(llvm::DWARFExpression::Operation *this, const Operation *a2, llvm::DWARFUnit *a3)
{
  uint64_t v5 = 0;
  int v6 = 1;
  while (1)
  {
    while (1)
    {
      int v7 = v6;
      int v8 = *((unsigned __int8 *)this + v5 + 2);
      if (v8 != 8)
      {
        if (v8 == 255) {
          return 1;
        }
        goto LABEL_10;
      }
      uint64_t v9 = *((void *)this + v5 + 2);
      if (*(unsigned __int8 *)this != 168 || v9 != 0) {
        break;
      }
LABEL_10:
      int v6 = 0;
      uint64_t v5 = 1;
      if ((v7 & 1) == 0) {
        return 1;
      }
    }
    BOOL v11 = sub_1CD5E31EC(a2, *((void *)a2 + 3) + v9);
    if (!v11 || v12 == 0) {
      return 0;
    }
    uint64_t v14 = *(void *)(v12 + 16);
    if (!v14) {
      return 0;
    }
    int v6 = 0;
    BOOL result = *(unsigned __int16 *)(v14 + 4) == 36;
    uint64_t v5 = 1;
    if (!(v7 & result)) {
      return result;
    }
  }
}

BOOL llvm::DWARFExpression::verify(llvm::DWARFExpression *this, llvm::DWARFUnit *a2)
{
  sub_1CC6A2264((uint64_t)&v11, (long long *)this, 0);
  sub_1CC6A2264((uint64_t)&v9, (long long *)this, *((void *)this + 1));
  if (v11 == v9 && v12 == v10) {
    return 1;
  }
  do
  {
    BOOL v6 = llvm::DWARFExpression::Operation::verify((llvm::DWARFExpression::Operation *)&v13, a2, v4);
    if (!v6) {
      break;
    }
    sub_1CC6A144C(&v11);
  }
  while (v11 != v9 || v12 != v10);
  return v6;
}

uint64_t llvm::DWARFExpression::printCompact(llvm::DWARFExpression *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3)
{
  sub_1CC6A2264((uint64_t)v8, (long long *)this, 0);
  sub_1CC6A2264((uint64_t)v7, (long long *)this, *((void *)this + 1));
  return sub_1CC6A16C0(a2, (uint64_t)v8, v7, a3);
}

uint64_t sub_1CC6A16C0(llvm::raw_ostream *a1, uint64_t a2, long long **a3, llvm::MCRegisterInfo *a4)
{
  v77[24] = *MEMORY[0x1E4F143B8];
  char v75 = v77;
  uint64_t v76 = 0x400000000;
  BOOL v6 = *(long long **)a2;
  if (v6 == *a3 && *(void *)(a2 + 8) == (void)a3[1]) {
    goto LABEL_60;
  }
  do
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned __int8 *)(a2 + 16) <= 0xA2u)
    {
      switch(v10)
      {
        case 0x9F:
          *((_DWORD *)v75 + 12 * v76 - 12) = 1;
LABEL_26:
          sub_1CC6A144C((unint64_t *)a2);
          goto LABEL_27;
        case 0x90:
          unint64_t v16 = *(void *)(a2 + 32);
          uint64_t LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(a4, v16, 0);
          if ((LLVMRegNum & 0xFF00000000) != 0)
          {
            unsigned int v25 = LLVMRegNum;
            LODWORD(v62) = 1;
            uint64_t v26 = sub_1CC6A22E0((uint64_t)&v75, &v62);
            int v67 = 0;
            char v71 = 0;
            uint64_t v72 = 0;
            BOOL v66 = &unk_1F2646FA8;
            uint64_t v74 = v26 + 8;
            int v73 = 0;
            uint64_t v69 = 0;
            uint64_t v70 = 0;
            uint64_t v68 = 0;
            uint64_t v27 = *((void *)a4 + 8);
            if (!v27) {
              goto LABEL_26;
            }
            unsigned int v28 = v25;
            goto LABEL_38;
          }
LABEL_73:
          uint64_t v52 = *((void *)a1 + 4);
          if ((unint64_t)(*((void *)a1 + 3) - v52) > 0x11)
          {
            *(_WORD *)(v52 + 16) = 8306;
            *(_OWORD *)uint64_t v52 = *(_OWORD *)"<unknown register ";
            *((void *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          uint64_t v53 = a1;
          unint64_t v54 = v16;
          break;
        case 0x92:
          uint64_t v29 = *(void *)(a2 + 32);
          uint64_t v17 = *(void *)(a2 + 40);
          uint64_t v18 = llvm::MCRegisterInfo::getLLVMRegNum(a4, v29, 0);
          if ((v18 & 0xFF00000000) != 0) {
            goto LABEL_20;
          }
          uint64_t v58 = *((void *)a1 + 4);
          if ((unint64_t)(*((void *)a1 + 3) - v58) > 0x11)
          {
            *(_WORD *)(v58 + 16) = 8306;
            *(_OWORD *)uint64_t v58 = *(_OWORD *)"<unknown register ";
            *((void *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          unint64_t v54 = (int)v29;
          if (v29 << 32 < (uint64_t)0xFFFFFFFF00000001)
          {
            unint64_t v54 = -(uint64_t)(int)v29;
            uint64_t v53 = a1;
            int v55 = 1;
            goto LABEL_77;
          }
          uint64_t v53 = a1;
          break;
        default:
LABEL_17:
          if ((v10 - 80) > 0x1F)
          {
            if ((v10 - 112) <= 0x1F)
            {
              unint64_t v16 = v10 - 112;
              uint64_t v17 = *(void *)(a2 + 32);
              uint64_t v18 = llvm::MCRegisterInfo::getLLVMRegNum(a4, v16, 0);
              if ((v18 & 0xFF00000000) == 0) {
                goto LABEL_73;
              }
LABEL_20:
              unsigned int v19 = v18;
              uint64_t v20 = sub_1CC6A23FC((uint64_t)&v75);
              int v67 = 0;
              char v71 = 0;
              uint64_t v72 = 0;
              BOOL v66 = &unk_1F2646FA8;
              uint64_t v74 = v20 + 8;
              int v73 = 0;
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              uint64_t v68 = 0;
              uint64_t v21 = *((void *)a4 + 8);
              if (v21)
              {
                BOOL v22 = (const char *)(v21 + *(unsigned int *)(*(void *)a4 + 24 * v19));
                size_t v23 = strlen(v22);
                if (v23) {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v66, v22, v23);
                }
              }
              if (v17)
              {
                *(void *)&long long v62 = &unk_1F2618EA8;
                *((void *)&v62 + 1) = "%+lld";
                *(void *)&long long v63 = v17;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v66, (uint64_t)&v62);
              }
              BOOL v66 = &unk_1F2646B98;
              if (v73 != 1) {
                goto LABEL_26;
              }
              uint64_t v35 = v68;
              if (!v68) {
                goto LABEL_26;
              }
LABEL_43:
              MEMORY[0x1D25D9CB0](v35, 0x1000C8077774924);
              goto LABEL_26;
            }
            uint64_t v36 = *((void *)a1 + 4);
            if ((unint64_t)(*((void *)a1 + 3) - v36) > 0xB)
            {
              *(_DWORD *)(v36 + 8) = 544239392;
              *(void *)uint64_t v36 = *(void *)"<unknown op ";
              *((void *)a1 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(a1, "<unknown op ", 0xCuLL);
            }
            unint64_t v38 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)v10);
            size_t v39 = v37;
            unsigned int v40 = (_WORD *)*((void *)a1 + 4);
            if (v37 <= *((void *)a1 + 3) - (void)v40)
            {
              if (v37)
              {
                memcpy(v40, v38, v37);
                unsigned int v40 = (_WORD *)(*((void *)a1 + 4) + v39);
                *((void *)a1 + 4) = v40;
              }
            }
            else
            {
              llvm::raw_ostream::write(a1, v38, v37);
              unsigned int v40 = (_WORD *)*((void *)a1 + 4);
            }
            if (*((void *)a1 + 3) - (void)v40 > 1uLL)
            {
              _WORD *v40 = 10272;
              *((void *)a1 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a1, " (", 2uLL);
            }
            sub_1CD098D14(a1, v10, 0, 0, 0);
            uint64_t v41 = (_WORD *)*((void *)a1 + 4);
            if (*((void *)a1 + 3) - (void)v41 <= 1uLL)
            {
              uint64_t v42 = ")>";
              uint64_t v43 = a1;
              size_t v44 = 2;
LABEL_56:
              llvm::raw_ostream::write(v43, v42, v44);
              uint64_t v45 = 0;
              goto LABEL_64;
            }
            uint64_t v45 = 0;
            *uint64_t v41 = 15913;
            uint64_t v57 = *((void *)a1 + 4) + 2;
            goto LABEL_84;
          }
          uint64_t v30 = llvm::MCRegisterInfo::getLLVMRegNum(a4, (int)v10 - 80, 0);
          if ((v30 & 0xFF00000000) != 0)
          {
            unsigned int v31 = v30;
            LODWORD(v62) = 1;
            uint64_t v32 = sub_1CC6A22E0((uint64_t)&v75, &v62);
            int v67 = 0;
            char v71 = 0;
            uint64_t v72 = 0;
            BOOL v66 = &unk_1F2646FA8;
            uint64_t v74 = v32 + 8;
            int v73 = 0;
            uint64_t v69 = 0;
            uint64_t v70 = 0;
            uint64_t v68 = 0;
            uint64_t v27 = *((void *)a4 + 8);
            if (!v27) {
              goto LABEL_26;
            }
            unsigned int v28 = v31;
LABEL_38:
            unint64_t v33 = (const char *)(v27 + *(unsigned int *)(*(void *)a4 + 24 * v28));
            size_t v34 = strlen(v33);
            if (!v34) {
              goto LABEL_26;
            }
            llvm::raw_ostream::write((llvm::raw_ostream *)&v66, v33, v34);
            BOOL v66 = &unk_1F2646B98;
            if (v73 != 1) {
              goto LABEL_26;
            }
            uint64_t v35 = v68;
            if (!v68) {
              goto LABEL_26;
            }
            goto LABEL_43;
          }
          uint64_t v59 = *((void *)a1 + 4);
          if ((unint64_t)(*((void *)a1 + 3) - v59) > 0x11)
          {
            *(_WORD *)(v59 + 16) = 8306;
            *(_OWORD *)uint64_t v59 = *(_OWORD *)"<unknown register ";
            *((void *)a1 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a1, "<unknown register ", 0x12uLL);
          }
          uint64_t v53 = a1;
          unint64_t v54 = (v10 - 80);
          break;
      }
      int v55 = 0;
LABEL_77:
      sub_1CD098D14(v53, v54, 0, 0, v55);
      uint64_t v56 = (unsigned char *)*((void *)a1 + 4);
      if (*((unsigned char **)a1 + 3) == v56)
      {
        uint64_t v42 = ">";
        uint64_t v43 = a1;
        size_t v44 = 1;
        goto LABEL_56;
      }
      uint64_t v45 = 0;
      unsigned char *v56 = 62;
      uint64_t v57 = *((void *)a1 + 4) + 1;
LABEL_84:
      *((void *)a1 + 4) = v57;
      goto LABEL_64;
    }
    if (v10 != 163 && v10 != 243) {
      goto LABEL_17;
    }
    sub_1CC6A2264((uint64_t)&v62, v6, *(void *)(a2 + 24) + *(void *)(a2 + 32));
    sub_1CC6A144C((unint64_t *)a2);
    uint64_t v11 = sub_1CC6A23FC((uint64_t)&v75);
    int v67 = 0;
    char v71 = 0;
    uint64_t v72 = 0;
    BOOL v66 = &unk_1F2646FA8;
    uint64_t v74 = v11 + 8;
    int v73 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v68 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v66, "entry(", 6uLL);
    long long v12 = *(_OWORD *)(a2 + 16);
    v61[0] = *(_OWORD *)a2;
    v61[1] = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    _OWORD v61[2] = *(_OWORD *)(a2 + 32);
    v61[3] = v13;
    v60[0] = v62;
    v60[1] = v63;
    v60[2] = v64;
    void v60[3] = v65;
    sub_1CC6A16C0(&v66, v61, v60, a4);
    if (v69 == v70) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v66, ")", 1uLL);
    }
    else {
      *v70++ = 41;
    }
    long long v14 = v63;
    *(_OWORD *)a2 = v62;
    *(_OWORD *)(a2 + 16) = v14;
    long long v15 = v65;
    *(_OWORD *)(a2 + 32) = v64;
    *(_OWORD *)(a2 + 48) = v15;
    BOOL v66 = &unk_1F2646B98;
    if (v73 == 1 && v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8077774924);
    }
LABEL_27:
    BOOL v6 = *(long long **)a2;
  }
  while (*(long long **)a2 != *a3 || *(long long **)(a2 + 8) != a3[1]);
  if (*(_DWORD *)v75)
  {
    llvm::raw_ostream::write(a1, *((const char **)v75 + 1), *((void *)v75 + 2));
    goto LABEL_59;
  }
LABEL_60:
  uint64_t v46 = (unsigned char *)*((void *)a1 + 4);
  if (*((unsigned char **)a1 + 3) == v46)
  {
    llvm::raw_ostream::write(a1, "[", 1uLL);
  }
  else
  {
    *uint64_t v46 = 91;
    ++*((void *)a1 + 4);
  }
  llvm::raw_ostream::write(a1, *((const char **)v75 + 1), *((void *)v75 + 2));
  size_t v47 = (unsigned char *)*((void *)a1 + 4);
  if (*((unsigned char **)a1 + 3) == v47)
  {
    uint64_t v45 = 1;
    llvm::raw_ostream::write(a1, "]", 1uLL);
  }
  else
  {
    *size_t v47 = 93;
    ++*((void *)a1 + 4);
LABEL_59:
    uint64_t v45 = 1;
  }
LABEL_64:
  uint64_t v48 = (char *)v75;
  if (v76)
  {
    uint64_t v49 = 48 * v76;
    do
    {
      uint64_t v50 = *(char **)&v48[v49 - 40];
      if (&v48[v49 - 16] != v50) {
        free(v50);
      }
      v49 -= 48;
    }
    while (v49);
    uint64_t v48 = (char *)v75;
  }
  if (v48 != (char *)v77) {
    free(v48);
  }
  return v45;
}

BOOL llvm::DWARFExpression::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a2 + 26);
  if (*(unsigned char *)(a1 + 26)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if ((*(unsigned char *)(a1 + 26) == 0) == (v2 != 0)) {
      return 0;
    }
  }
  else if (*(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
  {
    return 0;
  }
  size_t v4 = *(void *)(a1 + 8);
  if (v4 != *(void *)(a2 + 8)) {
    return 0;
  }
  return !v4 || memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
}

double sub_1CC6A2060()
{
  qword_1EBCD9968 = 0;
  qword_1EBCD9970 = 0;
  qword_1EBCD9978 = 0;
  sub_1CD5EA438();
  uint64_t v0 = 0;
  uint64_t v1 = qword_1EBCD9968;
  *(_WORD *)(qword_1EBCD9968 + 9) = 1282;
  *(unsigned char *)(v1 + 11) = -1;
  *(_OWORD *)(v1 + 24) = xmmword_1CFB1B9B0;
  *(_OWORD *)(v1 + 40) = xmmword_1CFB1B9C0;
  *(_OWORD *)(v1 + 56) = xmmword_1CFB1B9D0;
  *(_OWORD *)(v1 + 72) = xmmword_1CFB1B9E0;
  *(_OWORD *)(v1 + 88) = xmmword_1CFB1B9F0;
  *(_WORD *)(v1 + 18) = -254;
  *(unsigned char *)(v1 + 20) = -1;
  *(_OWORD *)(v1 + 104) = xmmword_1CFB1BA00;
  uint64_t v2 = qword_1EBCD9968;
  *(_OWORD *)(qword_1EBCD9968 + 120) = xmmword_1CFB1BA10;
  *(void *)(v2 + 136) = 0xFF8102FFFF02FFFFLL;
  do
  {
    uint64_t v3 = qword_1EBCD9968 + v0;
    *(_WORD *)(v3 + 144) = -254;
    *(unsigned char *)(v3 + 146) = -1;
    v0 += 3;
  }
  while (v0 != 96);
  for (uint64_t i = 0; i != 96; i += 3)
  {
    uint64_t v5 = qword_1EBCD9968 + i;
    *(_WORD *)(v5 + 240) = -254;
    *(unsigned char *)(v5 + 242) = -1;
  }
  for (uint64_t j = 336; j != 432; j += 3)
  {
    uint64_t v7 = qword_1EBCD9968 + j;
    *(_WORD *)uint64_t v7 = -31742;
    *(unsigned char *)(v7 + 2) = -1;
  }
  uint64_t v8 = qword_1EBCD9968;
  *(_OWORD *)(qword_1EBCD9968 + 432) = xmmword_1CFB1BA20;
  *(_OWORD *)(v8 + 448) = xmmword_1CFB1BA30;
  *(_OWORD *)(v8 + 464) = xmmword_1CFB1BA40;
  *(_WORD *)(v8 + 711) = 1028;
  *(unsigned char *)(v8 + 713) = 30;
  *(_WORD *)(v8 + 672) = -253;
  *(unsigned char *)(v8 + 674) = -1;
  *(_WORD *)(v8 + 483) = 1028;
  *(unsigned char *)(v8 + 485) = -1;
  *(void *)&double result = 83821572;
  *(_DWORD *)(v8 + 753) = 83821572;
  *(_WORD *)(v8 + 757) = -252;
  *(_WORD *)(v8 + 729) = 1028;
  *(unsigned char *)(v8 + 731) = -1;
  *(_WORD *)(v8 + 504) = 2053;
  *(unsigned char *)(v8 + 506) = -1;
  *(_WORD *)(v8 + 489) = 1029;
  *(unsigned char *)(v8 + 491) = -1;
  *(_WORD *)(v8 + 495) = 1029;
  *(unsigned char *)(v8 + 497) = 8;
  return result;
}

uint64_t sub_1CC6A2230(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1CC6A2264(uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 17) = 16776960;
  if (*((void *)a2 + 1) <= a3)
  {
    char v4 = 1;
  }
  else
  {
    long long v6 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    char v4 = llvm::DWARFExpression::Operation::extract(a1 + 16, (uint64_t *)&v6, *((unsigned __int8 *)a2 + 24), a3, *(_WORD *)((char *)a2 + 25)) ^ 1;
  }
  *(unsigned char *)(a1 + 20) = v4;
  return a1;
}

uint64_t sub_1CC6A22E0(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v4 >= v5)
  {
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v5) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (2 * v5) | 1;
    }
    uint64_t v11 = (char *)malloc_type_malloc(48 * v10, 0x4065EBACuLL);
    if (!v11) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v6 = (uint64_t)v11;
    long long v12 = &v11[48 * *(unsigned int *)(a1 + 8)];
    *(_DWORD *)long long v12 = *a2;
    *((void *)v12 + 1) = v12 + 32;
    *((_OWORD *)v12 + 1) = xmmword_1CDB15990;
    sub_1CC6A250C((uint64_t *)a1, (uint64_t)v11);
    if (*(void *)a1 != a1 + 16) {
      free(*(void **)a1);
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 12) = v10;
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(void *)a1 + 48 * v4;
    *(_DWORD *)uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v7 + 32;
    *(_OWORD *)(v7 + 16) = xmmword_1CDB15990;
  }
  unsigned int v8 = v4 + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return v6 + 48 * v8 - 48;
}

uint64_t sub_1CC6A23FC(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v2 >= v3)
  {
    if (v3 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v3) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = (2 * v3) | 1;
    }
    uint64_t v9 = (char *)malloc_type_malloc(48 * v8, 0x4065EBACuLL);
    if (!v9) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v4 = (uint64_t)v9;
    uint64_t v10 = &v9[48 * *(unsigned int *)(a1 + 8)];
    *(_DWORD *)uint64_t v10 = 0;
    *((void *)v10 + 1) = v10 + 32;
    *((_OWORD *)v10 + 1) = xmmword_1CDB15990;
    sub_1CC6A250C((uint64_t *)a1, (uint64_t)v9);
    if (*(void *)a1 != a1 + 16) {
      free(*(void **)a1);
    }
    *(void *)a1 = v4;
    *(_DWORD *)(a1 + 12) = v8;
    unsigned int v2 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)a1 + 48 * v2;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = v5 + 32;
    *(_OWORD *)(v5 + 16) = xmmword_1CDB15990;
  }
  unsigned int v6 = v2 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 48 * v6 - 48;
}

void sub_1CC6A250C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 48 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(v6 + v5);
      *(_OWORD *)(v8 + 16) = xmmword_1CDB15990;
      *(void *)(v8 + 8) = a2 + v5 + 32;
      if (*(void *)(v6 + v5 + 16)) {
        sub_1CC1B8518(a2 + v5 + 8, v9 + 8);
      }
      v5 += 48;
    }
    while (v9 + 48 != v7);
    uint64_t v10 = *((unsigned int *)a1 + 2);
    if (v10)
    {
      uint64_t v11 = *a1;
      uint64_t v12 = 48 * v10;
      do
      {
        long long v13 = *(void **)(v11 + v12 - 40);
        if ((void *)(v11 + v12 - 16) != v13) {
          free(v13);
        }
        v12 -= 48;
      }
      while (v12);
    }
  }
}

uint64_t llvm::DWARFFormValue::createFromBlockValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = result;
  *(unsigned char *)(a4 + 2) = 0;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = a2;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  return result;
}

BOOL sub_1CC6A2754(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)*a1;
    *a1 = 0;
    sub_1CD4515D0(&v3);
    if (v3) {
      (*(void (**)(void *))(*v3 + 8))(v3);
    }
  }
  return v1 != 0;
}

uint64_t llvm::DWARFFormValue::getAsReference(llvm::DWARFFormValue *this)
{
  llvm::DWARFFormValue::getAsRelativeReference((unsigned __int16 *)this, (uint64_t)&v2);
  if (!v4) {
    return 0;
  }
  if (v2) {
    return v3 + *(void *)(v2 + 24);
  }
  return v3;
}

uint64_t llvm::DWARFFormValue::getAsCStringOffset(llvm::DWARFFormValue *this)
{
  unsigned int v1 = *(unsigned __int16 *)this;
  if (v1 <= 0x2D && v1 == 8 && ((0x1E0A4004100uLL >> v1) & 1) == 0) {
    return 0;
  }
  else {
    return *((void *)this + 1);
  }
}

double llvm::DWARFFormValue::getAsFile@<D0>(unsigned __int16 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 4);
  if (v4)
  {
    unint64_t v6 = *a1;
    if (v6 <= 0x2D && ((0x24000A8E0uLL >> v6) & 1) != 0)
    {
      if (*(unsigned char *)(v4 + 209)) {
        uint64_t v4 = *(void *)(v4 + 184);
      }
      llvm::DWARFContext::getLineTableForUnit(*(llvm::DWARFContext **)(v4 + 8), (llvm::DWARFUnit *)v4);
      if (v8)
      {
        uint64_t v10 = v8;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v16 = 0;
        unint64_t v11 = *((void *)a1 + 1);
        CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)v4);
        uint64_t v13 = (uint64_t)CompilationDir;
        if (CompilationDir) {
          size_t v14 = strlen(CompilationDir);
        }
        else {
          size_t v14 = 0;
        }
        if (llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v10 + 8, v11, v13, v14, a2, (uint64_t)__p, 0))
        {
          double result = *(double *)__p;
          *(_OWORD *)a3 = *(_OWORD *)__p;
          *(void *)(a3 + 16) = v16;
          *(unsigned char *)(a3 + 24) = 1;
          return result;
        }
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

void sub_1CC6A2A38()
{
}

void sub_1CC6A2AD8()
{
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpCUList(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((unsigned int *)this + 8);
  int v5 = *((_DWORD *)this + 1);
  uint64_t v12 = &unk_1F2618A28;
  uint64_t v13 = "\n  CU list offset = 0x%x, has %lld entries:";
  int v14 = v5;
  *(void *)&long long v15 = v4;
  double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v7 >= *((void *)a2 + 3))
  {
    double result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v7 + 1;
    unsigned char *v7 = 10;
  }
  uint64_t v8 = *((unsigned int *)this + 8);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = 16 * v8;
    do
    {
      uint64_t v12 = &unk_1F2619240;
      uint64_t v13 = "    %d: Offset = 0x%llx, Length = 0x%llx\n";
      int v14 = v9;
      long long v15 = *(_OWORD *)(v10 + 16 * v9);
      double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v12);
      ++v9;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void llvm::DWARFGdbIndex::dumpTUList(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = *((unsigned int *)this + 12);
  uint64_t v10 = "\n  Types CU list offset = {0:x}, has {1} entries:\n";
  uint64_t v11 = 50;
  uint64_t v12 = &v18;
  uint64_t v13 = 2;
  int v14 = &unk_1F2607908;
  long long v15 = (char *)this + 8;
  uint64_t v16 = &unk_1F2619260;
  uint64_t v17 = v3;
  uint64_t v18 = &v14;
  unsigned int v19 = &v16;
  sub_1CD862C68((uint64_t)&v10, a2);
  unsigned int v4 = *((_DWORD *)this + 12);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = *((void *)this + 5);
    uint64_t v8 = v6 + 24 * v4;
    do
    {
      int v7 = v5 + 1;
      uint64_t v10 = "    {0}: offset = {1:x8}, type_offset = {2:x8}, type_signature = {3:x16}\n";
      uint64_t v11 = 73;
      uint64_t v12 = (void ***)v21;
      uint64_t v13 = 4;
      int v14 = &unk_1F2619290;
      LODWORD(v15) = v5;
      uint64_t v16 = &unk_1F26192C0;
      uint64_t v17 = v6;
      uint64_t v18 = (void **)&unk_1F26192C0;
      unsigned int v19 = (void **)(v6 + 8);
      v20[0] = &unk_1F26192C0;
      v20[1] = v6 + 16;
      v21[0] = &v14;
      v21[1] = &v16;
      void v21[2] = &v18;
      v21[3] = v20;
      sub_1CD862C68((uint64_t)&v10, a2);
      v6 += 24;
      int v5 = v7;
    }
    while (v6 != v8);
  }
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpAddressArea(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((unsigned int *)this + 16);
  int v5 = *((_DWORD *)this + 3);
  int v14 = &unk_1F2618A28;
  long long v15 = "\n  Address area offset = 0x%x, has %lld entries:";
  LODWORD(v16) = v5;
  uint64_t v17 = v4;
  double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v14);
  int v7 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v7 >= *((void *)a2 + 3))
  {
    double result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v7 + 1;
    unsigned char *v7 = 10;
  }
  uint64_t v8 = *((unsigned int *)this + 16);
  if (v8)
  {
    uint64_t v9 = 24 * v8;
    uint64_t v10 = (_DWORD *)(*((void *)this + 7) + 16);
    do
    {
      uint64_t v12 = *((void *)v10 - 2);
      uint64_t v11 = *((void *)v10 - 1);
      int v14 = &unk_1F26192F0;
      int v13 = *v10;
      v10 += 6;
      long long v15 = "    Low/High address = [0x%llx, 0x%llx) (Size: 0x%llx), CU id = %d\n";
      uint64_t v16 = v12;
      uint64_t v17 = v11;
      uint64_t v18 = v11 - v12;
      int v19 = v13;
      double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v14);
      v9 -= 24;
    }
    while (v9);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpSymbolTable(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((unsigned int *)this + 20);
  int v5 = *((_DWORD *)this + 4);
  uint64_t v21 = &unk_1F2618A28;
  BOOL v22 = "\n  Symbol table offset = 0x%x, size = %lld, filled slots:";
  LODWORD(v23) = v5;
  uint64_t v24 = v4;
  double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
  int v7 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v7 >= *((void *)a2 + 3))
  {
    double result = llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v7 + 1;
    unsigned char *v7 = 10;
  }
  uint64_t v8 = *((unsigned int *)this + 20);
  if (v8)
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 9);
    uint64_t v10 = &v9[2 * v8];
    int v11 = -1;
    do
    {
      ++v11;
      unsigned int v12 = *v9;
      unsigned int v13 = v9[1];
      if (*(void *)v9)
      {
        uint64_t v21 = &unk_1F2619310;
        BOOL v22 = "    %d: Name offset = 0x%x, CU vector offset = 0x%x\n";
        unint64_t v23 = __PAIR64__(v12, v11);
        LODWORD(v24) = v13;
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
        unint64_t v14 = *((void *)this + 14);
        if (v14 >= *((_DWORD *)this + 5) - *((_DWORD *)this + 30) + *v9) {
          unint64_t v14 = *((_DWORD *)this + 5) - *((_DWORD *)this + 30) + *v9;
        }
        uint64_t v15 = *((void *)this + 11);
        uint64_t v16 = *((unsigned int *)this + 24);
        if (v16)
        {
          uint64_t v17 = (_DWORD *)(v15 + 24 * v16);
          uint64_t v18 = 24 * v16;
          int v19 = (_DWORD *)*((void *)this + 11);
          while (*v19 != v9[1])
          {
            v19 += 6;
            v18 -= 24;
            if (!v18)
            {
              int v19 = v17;
              break;
            }
          }
        }
        else
        {
          int v19 = (_DWORD *)*((void *)this + 11);
        }
        unint64_t v20 = *((void *)this + 13) + v14;
        uint64_t v21 = &unk_1F2619330;
        BOOL v22 = "      String name: %s, CU vector index: %d\n";
        unint64_t v23 = v20;
        LODWORD(v24) = -1431655765 * (((unint64_t)v19 - v15) >> 3);
        double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v21);
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFGdbIndex::dumpConstantPool(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((unsigned int *)this + 24);
  int v5 = *((_DWORD *)this + 5);
  uint64_t v17 = &unk_1F2618A28;
  uint64_t v18 = "\n  Constant pool offset = 0x%x, has %lld CU vectors:";
  LODWORD(v19) = v5;
  uint64_t v20 = v4;
  double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
  int v7 = *((_DWORD *)this + 24);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 11);
    uint64_t v10 = &v9[6 * v7];
    do
    {
      uint64_t v17 = &unk_1F26088E8;
      unint64_t v11 = v8 | ((unint64_t)*v9 << 32);
      uint64_t v18 = "\n    %d(0x%x): ";
      unint64_t v19 = v11;
      double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
      uint64_t v12 = v9[4];
      if (v12)
      {
        unsigned int v13 = (unsigned int *)*((void *)v9 + 1);
        uint64_t v14 = 4 * v12;
        do
        {
          unsigned int v15 = *v13++;
          uint64_t v17 = &unk_1F25FED10;
          uint64_t v18 = "0x%x ";
          unint64_t v19 = v15;
          double result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v17);
          v14 -= 4;
        }
        while (v14);
      }
      ++v8;
      v9 += 6;
    }
    while (v9 != v10);
  }
  uint64_t v16 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v16 >= *((void *)a2 + 3)) {
    return llvm::raw_ostream::write(a2, 10);
  }
  *((void *)a2 + 4) = v16 + 1;
  *uint64_t v16 = 10;
  return result;
}

double llvm::DWARFGdbIndex::dump(llvm::DWARFGdbIndex *this, llvm::raw_ostream *a2)
{
  if (*((unsigned char *)this + 125))
  {
    uint64_t v3 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v3) > 0x10)
    {
      *(unsigned char *)(v3 + 16) = 10;
      double result = *(double *)"\n<error parsing>\n";
      *(_OWORD *)uint64_t v3 = *(_OWORD *)"\n<error parsing>\n";
      *((void *)a2 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\n<error parsing>\n", 0x11uLL);
    }
  }
  else if (*((unsigned char *)this + 124))
  {
    uint64_t v6 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 540876910;
      *(void *)uint64_t v6 = *(void *)"  Version = ";
      *((void *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  Version = ", 0xCuLL);
    }
    sub_1CD098D14(a2, *(unsigned int *)this, 0, 0, 0);
    int v7 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v7 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((void *)a2 + 4) = v7 + 1;
      unsigned char *v7 = 10;
    }
    llvm::DWARFGdbIndex::dumpCUList(this, a2);
    llvm::DWARFGdbIndex::dumpTUList(this, a2);
    llvm::DWARFGdbIndex::dumpAddressArea(this, a2);
    llvm::DWARFGdbIndex::dumpSymbolTable(this, a2);
    llvm::DWARFGdbIndex::dumpConstantPool(this, a2);
  }
  return result;
}

uint64_t llvm::DWARFGdbIndex::parseImpl(uint64_t a1, void *a2)
{
  unint64_t v82 = 0;
  int v4 = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  *(_DWORD *)a1 = v4;
  if (v4 != 7) {
    return 0;
  }
  *(_DWORD *)(a1 + 4) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  *(_DWORD *)(a1 + 8) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  *(_DWORD *)(a1 + 12) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  *(_DWORD *)(a1 + 16) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  *(_DWORD *)(a1 + 20) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if (v82 != v6) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8) - v6;
  if (*(_DWORD *)(a1 + 36) < v7 >> 4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v7 >= 0x10)
  {
    if (v7 >> 4 <= 1) {
      int v28 = 1;
    }
    else {
      int v28 = v7 >> 4;
    }
    do
    {
      unint64_t v29 = sub_1CD833894((uint64_t)a2, &v82, 0);
      unint64_t v30 = sub_1CD833894((uint64_t)a2, &v82, 0);
      unint64_t v31 = *(unsigned int *)(a1 + 32);
      if (v31 >= *(unsigned int *)(a1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v32 = (unint64_t *)(*(void *)(a1 + 24) + 16 * v31);
      unint64_t *v32 = v29;
      v32[1] = v30;
      ++*(_DWORD *)(a1 + 32);
      --v28;
    }
    while (v28);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8);
  unint64_t v9 = v8 / 0x18uLL;
  uint64_t v10 = (void *)(a1 + 40);
  unsigned int v11 = *(_DWORD *)(a1 + 48);
  if (v11 != v9)
  {
    if (v11 <= v9)
    {
      if (*(_DWORD *)(a1 + 52) < v9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v11 != v9) {
        bzero((void *)(*v10 + 24 * v11), 24 * ((24 * (v9 - v11) - 24) / 0x18) + 24);
      }
    }
    *(_DWORD *)(a1 + 48) = v9;
  }
  if (v8 >= 0x18)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = v8 / 0x18;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      unint64_t v15 = sub_1CD833894((uint64_t)a2, &v82, 0);
      unint64_t v16 = sub_1CD833894((uint64_t)a2, &v82, 0);
      unint64_t v17 = sub_1CD833894((uint64_t)a2, &v82, 0);
      uint64_t v18 = (unint64_t *)(*v10 + v12);
      *uint64_t v18 = v15;
      v18[1] = v16;
      void v18[2] = v17;
      v12 += 24;
    }
    while (v14 != v12);
  }
  unsigned int v19 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 68) < v19 / 0x14) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v19 >= 0x14)
  {
    if (v19 / 0x14 <= 1) {
      unsigned int v33 = 1;
    }
    else {
      unsigned int v33 = v19 / 0x14;
    }
    do
    {
      *(void *)&long long __src = sub_1CD833894((uint64_t)a2, &v82, 0);
      *((void *)&__src + 1) = sub_1CD833894((uint64_t)a2, &v82, 0);
      LODWORD(v81) = sub_1CD8337FC((uint64_t)a2, &v82, 0);
      unsigned int v34 = *(_DWORD *)(a1 + 64);
      unint64_t v35 = *(void *)(a1 + 56);
      if (v34 >= *(_DWORD *)(a1 + 68))
      {
        BOOL v38 = v35 + 24 * v34 > (unint64_t)&__src;
        if (v35 > (unint64_t)&__src || !v38) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v36 = v35 + 24 * *(unsigned int *)(a1 + 64);
      long long v37 = __src;
      *(void *)(v36 + 16) = v81;
      *(_OWORD *)uint64_t v36 = v37;
      ++*(_DWORD *)(a1 + 64);
      --v33;
    }
    while (v33);
  }
  unsigned int v20 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16);
  unsigned int v21 = v20 >> 3;
  if (*(_DWORD *)(a1 + 84) < v20 >> 3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v20 >= 8)
  {
    int v22 = 0;
    unint64_t v23 = (void **)(a1 + 88);
    if (v21 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v21;
    }
    do
    {
      unsigned int v25 = sub_1CD8337FC((uint64_t)a2, &v82, 0);
      uint64_t v26 = sub_1CD8337FC((uint64_t)a2, &v82, 0);
      unint64_t v27 = *(unsigned int *)(a1 + 80);
      if (v27 >= *(unsigned int *)(a1 + 84)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 72) + 8 * v27) = v25 | (unint64_t)(v26 << 32);
      ++*(_DWORD *)(a1 + 80);
      if (v25 | v26) {
        ++v22;
      }
      --v24;
    }
    while (v24);
    if (v22)
    {
      for (int i = 0; i != v22; ++i)
      {
        *(void *)&long long __src = &v81;
        *((void *)&__src + 1) = 0;
        unsigned int v40 = *(_DWORD *)(a1 + 96);
        uint64_t v41 = *(unsigned int *)(a1 + 100);
        if (v40 >= v41)
        {
          uint64_t v76 = v23;
          if (v41 == -1) {
            sub_1CD0A89A8(0xFFFFFFFFuLL);
          }
          unint64_t v54 = (2 * v41) | 1;
          if (v54 >= 0xFFFFFFFF) {
            unint64_t v54 = 0xFFFFFFFFLL;
          }
          int v75 = v54;
          uint64_t v78 = (char *)malloc_type_malloc(24 * v54, 0x4065EBACuLL);
          if (!v78) {
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          int v55 = &v78[24 * *(unsigned int *)(a1 + 96)];
          *(_DWORD *)int v55 = 0;
          uint64_t v56 = v55 + 24;
          *((void *)v55 + 2) = 0;
          *((void *)v55 + 1) = v55 + 24;
          uint64_t v57 = v55 + 8;
          int v58 = DWORD2(__src);
          if (v57 != (char *)&__src && DWORD2(__src) != 0)
          {
            uint64_t v60 = __src;
            if ((uint64_t *)__src == &v81)
            {
              *((_DWORD *)v57 + 2) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v56 != v57 + 16)
            {
              free(v56);
              uint64_t v60 = __src;
              int v58 = DWORD2(__src);
            }
            *(void *)uint64_t v57 = v60;
            *((_DWORD *)v57 + 2) = v58;
            *((_DWORD *)v57 + 3) = HIDWORD(__src);
            *(void *)&long long __src = &v81;
            *((void *)&__src + 1) = 0;
          }
          size_t v79 = *(char **)(a1 + 88);
          uint64_t v61 = *(unsigned int *)(a1 + 96);
          if (v61)
          {
            uint64_t v62 = 0;
            uint64_t v77 = 24 * v61;
            do
            {
              long long v63 = &v78[v62];
              long long v64 = &v79[v62];
              int v65 = *(_DWORD *)&v79[v62];
              *(void *)&v78[v62 + 8] = &v78[v62 + 24];
              *(_DWORD *)long long v63 = v65;
              *((void *)v63 + 2) = 0;
              int v66 = *(_DWORD *)&v79[v62 + 16];
              if (v66) {
                BOOL v67 = v64 == v63;
              }
              else {
                BOOL v67 = 1;
              }
              if (!v67)
              {
                uint64_t v68 = (char *)*((void *)v64 + 1);
                if (v64 + 24 == v68) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)&v78[v62 + 8] = v68;
                *((_DWORD *)v63 + 4) = v66;
                *((_DWORD *)v63 + 5) = *(_DWORD *)&v79[v62 + 20];
                *((void *)v64 + 1) = v64 + 24;
                *(_DWORD *)&v79[v62 + 20] = 0;
                *((_DWORD *)v64 + 4) = 0;
              }
              v62 += 24;
            }
            while (v77 != v62);
            size_t v79 = *(char **)(a1 + 88);
            uint64_t v69 = *(unsigned int *)(a1 + 96);
            if (v69)
            {
              uint64_t v70 = 24 * v69;
              do
              {
                char v71 = *(char **)&v79[v70 - 16];
                if (&v79[v70] != v71) {
                  free(v71);
                }
                v70 -= 24;
              }
              while (v70);
              size_t v79 = (char *)*v76;
            }
          }
          if (v79 != (char *)(a1 + 104)) {
            free(v79);
          }
          *(void *)(a1 + 88) = v78;
          unint64_t v23 = v76;
          *(_DWORD *)(a1 + 100) = v75;
        }
        else
        {
          uint64_t v42 = (uint64_t)*v23 + 24 * v40;
          *(_DWORD *)uint64_t v42 = 0;
          uint64_t v43 = (void *)(v42 + 24);
          *(void *)(v42 + 16) = 0;
          *(void *)(v42 + 8) = v42 + 24;
          uint64_t v44 = v42 + 8;
          int v45 = DWORD2(__src);
          if ((long long *)v44 != &__src && DWORD2(__src) != 0)
          {
            uint64_t v47 = __src;
            if ((uint64_t *)__src == &v81)
            {
              *(_DWORD *)(v44 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v43 != (void *)(v44 + 16))
            {
              free(v43);
              uint64_t v47 = __src;
              int v45 = DWORD2(__src);
            }
            *(void *)uint64_t v44 = v47;
            *(_DWORD *)(v44 + 8) = v45;
            *(_DWORD *)(v44 + 12) = HIDWORD(__src);
            *(void *)&long long __src = &v81;
            *((void *)&__src + 1) = 0;
          }
        }
        unsigned int v48 = *(_DWORD *)(a1 + 96) + 1;
        *(_DWORD *)(a1 + 96) = v48;
        if ((uint64_t *)__src != &v81)
        {
          free((void *)__src);
          unsigned int v48 = *(_DWORD *)(a1 + 96);
        }
        uint64_t v49 = *(void *)(a1 + 88) + 24 * v48;
        *(_DWORD *)(v49 - 24) = v82 - *(_DWORD *)(a1 + 20);
        int v50 = sub_1CD8337FC((uint64_t)a2, &v82, 0);
        if (v50)
        {
          int v51 = v50;
          do
          {
            int v52 = sub_1CD8337FC((uint64_t)a2, &v82, 0);
            unint64_t v53 = *(unsigned int *)(v49 - 8);
            if (v53 >= *(unsigned int *)(v49 - 4)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)(v49 - 16) + 4 * v53) = v52;
            ++*(_DWORD *)(v49 - 8);
            --v51;
          }
          while (v51);
        }
      }
    }
  }
  unint64_t v72 = a2[1];
  int v73 = v82;
  if (v72 >= v82) {
    unint64_t v74 = v82;
  }
  else {
    unint64_t v74 = a2[1];
  }
  *(void *)(a1 + 104) = *a2 + v74;
  *(void *)(a1 + 112) = v72 - v74;
  *(_DWORD *)(a1 + 120) = v73;
  return 1;
}

uint64_t llvm::DWARFGdbIndex::parse(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)a2 + 1);
  *(unsigned char *)(result + 124) = v3 != 0;
  if (v3)
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    double result = llvm::DWARFGdbIndex::parseImpl(result, &v4);
    LOBYTE(v3) = result ^ 1;
  }
  *(unsigned char *)(v2 + 125) = v3;
  return result;
}

uint64_t sub_1CC6A3D44(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

void sub_1CC6A3D84()
{
}

llvm::raw_ostream *sub_1CC6A3D98(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!sub_1CD465E40(&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return sub_1CD098D14(a2, *(void *)(a1 + 8), v14, v12, 0);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *(void *)(a1 + 8), v7, v10, 1);
}

void sub_1CC6A3ED0()
{
}

llvm::raw_ostream *sub_1CC6A3EE4(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD465D04(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CC6A3EEC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1CC6A3F30(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

uint64_t llvm::DWARFListTableHeader::extract@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)(a1 + 24) = *a3;
  int v8 = (std::string *)(a1 + 24);
  uint64_t v54 = 0;
  unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength(a2, a3, &v54);
  *(void *)a1 = InitialLength;
  *(unsigned char *)(a1 + 16) = v10;
  if (v54)
  {
    std::generic_category();
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v52 = v54;
    uint64_t v54 = 0;
    sub_1CD4FB504(&v52, &v53);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v53;
    }
    else {
      int v22 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    long long __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v56 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    p_p = &__p;
    int v62 = 0;
    int v55 = &unk_1F2646F30;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    std::string::size_type v23 = *(void *)(a1 + 24);
    BOOL v67 = (std::string::size_type *)&unk_1F2619350;
    v68.i64[0] = (uint64_t)"parsing %s table at offset 0x%llx: %s";
    v68.i64[1] = v21;
    std::string::size_type v69 = v23;
    uint64_t v70 = v22;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v55, (uint64_t)&v67);
    operator new();
  }
  int v11 = v10;
  unint64_t v12 = 12;
  uint64_t v13 = 4;
  if (v10) {
    uint64_t v13 = 12;
  }
  std::string::size_type v14 = v13 + InitialLength;
  v53.__r_.__value_.__r.__words[0] = v14;
  if (v10) {
    unint64_t v12 = 20;
  }
  if (v14 < v12)
  {
    int v15 = std::generic_category();
    int v55 = *(void **)(a1 + 32);
    unint64_t v16 = "%s table at offset 0x%llx has too small length (0x%llx) to contain a complete header";
    uint64_t v17 = &v53;
    size_t v18 = v8;
    goto LABEL_11;
  }
  std::string::size_type v19 = v8->__r_.__value_.__r.__words[0] + v14;
  if (__CFADD__(v8->__r_.__value_.__r.__words[0], v14) || *(void *)(a2 + 8) <= v19 - 1)
  {
    int v15 = std::generic_category();
    int v55 = *(void **)(a1 + 32);
    unint64_t v16 = "section is not large enough to contain a %s table of length 0x%llx at offset 0x%llx";
    size_t v18 = &v53;
    uint64_t v17 = v8;
LABEL_11:
    sub_1CC68CB18(22, (uint64_t)v15, (uint64_t)v16, (uint64_t *)&v55, (uint64_t *)v18, (uint64_t *)v17);
  }
  *(_WORD *)(a1 + 8) = sub_1CD833674(a2, a3, 0);
  unint64_t v24 = *a3;
  BOOL v25 = llvm::DataExtractor::prepareRead(a2, *a3, 1, 0);
  unint64_t v26 = *a3;
  if (v25)
  {
    char v27 = *(unsigned char *)(*(void *)a2 + v24);
    *a3 = ++v26;
  }
  else
  {
    char v27 = 0;
  }
  *(unsigned char *)(a1 + 10) = v27;
  if (llvm::DataExtractor::prepareRead(a2, v26, 1, 0))
  {
    char v28 = *(unsigned char *)(*(void *)a2 + v26);
    ++*a3;
  }
  else
  {
    char v28 = 0;
  }
  *(unsigned char *)(a1 + 11) = v28;
  *(_DWORD *)(a1 + 12) = sub_1CD8337FC(a2, a3, 0);
  if (*(_WORD *)(a1 + 8) != 5)
  {
    std::generic_category();
    uint64_t v32 = *(std::string **)(a1 + 24);
    uint64_t v31 = *(void *)(a1 + 32);
    long long __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v56 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    p_p = &__p;
    int v62 = 0;
    int v55 = &unk_1F2646F30;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    __int16 v33 = *(_WORD *)(a1 + 8);
    BOOL v67 = (std::string::size_type *)&unk_1F2619370;
    v68.i64[0] = (uint64_t)"unrecognised %s table version %hu in table at offset 0x%llx";
    v68.i64[1] = v31;
    LOWORD(v69) = v33;
    uint64_t v70 = v32;
    goto LABEL_27;
  }
  unint64_t v29 = *(unsigned __int8 *)(a1 + 10);
  std::generic_category();
  uint64_t v30 = *(void *)(a1 + 32);
  if (!sub_1CC687520(v29))
  {
    long long __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v56 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    p_p = &__p;
    int v62 = 0;
    int v55 = &unk_1F2646F30;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    std::string::size_type v34 = v8->__r_.__value_.__r.__words[0];
    BOOL v67 = (std::string::size_type *)&unk_1F2618CF0;
    v68.i64[0] = (uint64_t)"%s table at offset 0x%llx";
    v68.i64[1] = v30;
    std::string::size_type v69 = v34;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v55, (uint64_t)&v67);
    unint64_t v35 = v59;
    if (v58 - (unint64_t)v59 > 0x1E)
    {
      *uint64_t v59 = *(_OWORD *)" has unsupported address size: ";
      *(_OWORD *)((char *)v35 + 15) = *(_OWORD *)"d address size: ";
      uint64_t v59 = (_OWORD *)((char *)v59 + 31);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v55, " has unsupported address size: ", 0x1FuLL);
    }
    sub_1CD098D14((llvm::raw_ostream *)&v55, v29, 0, 0, 0);
    if (v58 - (unint64_t)v59 > 0xF) {
      *v59++ = *(_OWORD *)" (supported are ";
    }
    else {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v55, " (supported are ", 0x10uLL);
    }
    char v36 = 0;
    BOOL v67 = &v69;
    LOWORD(v69) = 1026;
    BYTE2(v69) = 8;
    int64x2_t v68 = vdupq_n_s64(3uLL);
    uint64_t v37 = 24;
    while (1)
    {
      unint64_t v38 = *((unsigned __int8 *)&v67 + v37);
      if (v36) {
        size_t v39 = 2;
      }
      else {
        size_t v39 = 0;
      }
      if (v39 <= v58 - (unint64_t)v59)
      {
        if (v36)
        {
          *(_WORD *)uint64_t v59 = 8236;
          uint64_t v59 = (_OWORD *)((char *)v59 + 2);
        }
      }
      else
      {
        if (v36) {
          unsigned int v40 = ", ";
        }
        else {
          unsigned int v40 = 0;
        }
        llvm::raw_ostream::write((llvm::raw_ostream *)&v55, v40, v39);
      }
      sub_1CD098D14((llvm::raw_ostream *)&v55, v38, 0, 0, 0);
      ++v37;
      char v36 = 1;
      if (v37 == 27)
      {
        if (v67 != &v69) {
          free(v67);
        }
        uint64_t v41 = v59;
        if ((unint64_t)v59 >= v58)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v55, 41);
        }
        else
        {
          uint64_t v59 = (_OWORD *)((char *)v59 + 1);
          *uint64_t v41 = 41;
        }
        operator new();
      }
    }
  }
  *a4 = 0;
  if (*(unsigned char *)(a1 + 11))
  {
    std::generic_category();
    long long __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v56 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    p_p = &__p;
    int v62 = 0;
    int v55 = &unk_1F2646F30;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    std::string::size_type v43 = *(void *)(a1 + 24);
    uint64_t v42 = *(void *)(a1 + 32);
    char v44 = *(unsigned char *)(a1 + 11);
    BOOL v67 = (std::string::size_type *)&unk_1F2619390;
    v68.i64[0] = (uint64_t)"%s table at offset 0x%llx has unsupported segment selector size %hhu";
    v68.i64[1] = v42;
    std::string::size_type v69 = v43;
    LOBYTE(v70) = v44;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v55, (uint64_t)&v67);
    operator new();
  }
  uint64_t v45 = 20;
  if (!*(unsigned char *)(a1 + 16)) {
    uint64_t v45 = 12;
  }
  uint64_t v46 = v45 + *(void *)(a1 + 24);
  if (v11 == 1) {
    char v47 = 3;
  }
  else {
    char v47 = 2;
  }
  uint64_t v48 = (*(_DWORD *)(a1 + 12) << v47);
  if (v19 < v46 + v48)
  {
    std::generic_category();
    long long __p = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v56 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    p_p = &__p;
    int v62 = 0;
    int v55 = &unk_1F2646F30;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    std::string::size_type v50 = *(void *)(a1 + 24);
    uint64_t v49 = *(void *)(a1 + 32);
    int v51 = *(_DWORD *)(a1 + 12);
    BOOL v67 = (std::string::size_type *)&unk_1F26193B0;
    v68.i64[0] = (uint64_t)"%s table at offset 0x%llx has more offset entries (%u) than there is space for";
    v68.i64[1] = v49;
    std::string::size_type v69 = v50;
    LODWORD(v70) = v51;
LABEL_27:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v55, (uint64_t)&v67);
    operator new();
  }
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a1 + 10);
  *a3 += v48;
  *a4 = 0;
  uint64_t result = v54;
  if (v54) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFListTableHeader::dump(uint64_t *a1, long long *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 20))
  {
    unint64_t v7 = a1[3];
    *(void *)&long long v29 = &unk_1F25FF808;
    *((void *)&v29 + 1) = "0x%8.8llx: ";
    unint64_t v30 = v7;
    llvm::raw_ostream::operator<<(a3, (uint64_t)&v29);
  }
  if (*((unsigned char *)a1 + 16)) {
    int v8 = 16;
  }
  else {
    int v8 = 8;
  }
  unint64_t v9 = a1[6];
  uint64_t v10 = *a1;
  *(void *)&long long v29 = &unk_1F26193D0;
  *((void *)&v29 + 1) = "%s list header: length = 0x%0*llx";
  unint64_t v30 = v9;
  LODWORD(v31) = v8;
  uint64_t v32 = v10;
  llvm::raw_ostream::operator<<(a3, (uint64_t)&v29);
  uint64_t v11 = *((void *)a3 + 4);
  if ((unint64_t)(*((void *)a3 + 3) - v11) > 0xA)
  {
    *(_DWORD *)(v11 + 7) = 540876916;
    *(void *)uint64_t v11 = *(void *)", format = ";
    *((void *)a3 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a3, ", format = ", 0xBuLL);
  }
  if (*((unsigned char *)a1 + 16))
  {
    if (*((unsigned char *)a1 + 16) != 1) {
      goto LABEL_15;
    }
    unint64_t v12 = "DWARF64";
  }
  else
  {
    unint64_t v12 = "DWARF32";
  }
  uint64_t v13 = (_DWORD *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v13 > 6uLL)
  {
    *uint64_t v13 = *(_DWORD *)v12;
    *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)(v12 + 3);
    *((void *)a3 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a3, v12, 7uLL);
  }
LABEL_15:
  unint64_t v14 = a1[1];
  v28[0] = (unint64_t)&unk_1F26193F0;
  v28[1] = (unint64_t)", version = 0x%4.4hx, addr_std::string::size_type size = 0x%2.2hhx, seg_std::string::size_type size = 0x%2.2hhx, offset_entry_count = 0x%8.8x\n";
  void v28[2] = v14;
  uint64_t result = llvm::raw_ostream::operator<<(a3, (uint64_t)v28);
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v16 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v16) > 9)
    {
      *(_WORD *)(v16 + 8) = 23328;
      *(void *)uint64_t v16 = *(void *)"offsets: [";
      *((void *)a3 + 4) += 10;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a3, "offsets: [", 0xAuLL);
    }
    unsigned int v17 = *((_DWORD *)a1 + 3);
    if (v17)
    {
      for (unsigned int i = 0; i < v17; ++i)
      {
        if (v17 > i)
        {
          long long v29 = *a2;
          unint64_t v30 = *((void *)a2 + 2);
          int v22 = *((unsigned __int8 *)a1 + 16);
          if (*((unsigned char *)a1 + 16)) {
            uint64_t v23 = 20;
          }
          else {
            uint64_t v23 = 12;
          }
          if (v22 == 1) {
            int v24 = 8;
          }
          else {
            int v24 = 4;
          }
          if (v22 == 1) {
            char v25 = 3;
          }
          else {
            char v25 = 2;
          }
          v28[0] = v23 + a1[3] + (i << v25);
          unint64_t Unsigned = llvm::DataExtractor::getUnsigned(&v29, v28, v24, 0);
        }
        else
        {
          unint64_t Unsigned = 0;
        }
        *(void *)&long long v29 = &unk_1F2618A68;
        *((void *)&v29 + 1) = "\n0x%0*llx";
        LODWORD(v30) = v8;
        unint64_t v31 = Unsigned;
        uint64_t result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v29);
        if (*(unsigned char *)(a4 + 20))
        {
          if (*((unsigned char *)a1 + 16)) {
            uint64_t v20 = 20;
          }
          else {
            uint64_t v20 = 12;
          }
          unint64_t v21 = a1[3] + Unsigned + v20;
          *(void *)&long long v29 = &unk_1F25FF808;
          *((void *)&v29 + 1) = " => 0x%08llx";
          unint64_t v30 = v21;
          uint64_t result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v29);
        }
        unsigned int v17 = *((_DWORD *)a1 + 3);
      }
    }
    uint64_t v26 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v26) > 2)
    {
      *(unsigned char *)(v26 + 2) = 10;
      *(_WORD *)uint64_t v26 = 23818;
      *((void *)a3 + 4) += 3;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "\n]\n", 3uLL);
    }
  }
  return result;
}

uint64_t sub_1CC6A4D10(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC6A4D50(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC6A4D90(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1CC6A4DD0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

uint64_t sub_1CC6A4E10(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CC6A4E50(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19), *(unsigned int *)(a1 + 20));
}

void sub_1CC6A4F98()
{
}

unsigned __int8 *sub_1CC6A4FAC(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v5 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
  int v15 = a3;
  uint64_t v16 = a4;
  unint64_t v7 = (const void *)sub_1CC6A5100(&v15, 0x24u, (uint64_t)", ");
  size_t v9 = v8;
  uint64_t result = (unsigned __int8 *)sub_1CC6A5100(&v15, 0x40u, (uint64_t)"");
  unint64_t v12 = result;
  uint64_t v13 = v11;
  if (v5 != v6)
  {
    int v15 = (unsigned __int8 *)&unk_1F2618F98;
    uint64_t v16 = v5;
    uint64_t result = (unsigned __int8 *)sub_1CD5E768C(v5++, a2, result, v11);
  }
  for (; v5 != v6; ++v5)
  {
    unint64_t v14 = (void *)*((void *)a2 + 4);
    if (v9 <= *((void *)a2 + 3) - (void)v14)
    {
      if (v9)
      {
        memcpy(v14, v7, v9);
        *((void *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)v7, v9);
    }
    int v15 = (unsigned __int8 *)&unk_1F2618F98;
    uint64_t v16 = v5;
    uint64_t result = (unsigned __int8 *)sub_1CD5E768C(v5, a2, v12, v13);
  }
  return result;
}

uint64_t sub_1CC6A5100(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  long long v4 = a1[1];
  if (v4)
  {
    uint64_t v6 = (uint64_t)*a1;
    if (**a1 == a2)
    {
      unint64_t v7 = (unsigned __int8 *)(v6 + 1);
      size_t v8 = (size_t)(v4 - 1);
      *a1 = (unsigned __int8 *)(v6 + 1);
      a1[1] = v4 - 1;
      if (v4 != (unsigned __int8 *)1)
      {
        uint64_t v9 = 0;
        while (1)
        {
          uint64_t v10 = off_1E6849B30[v9];
          if (*v7 == *v10) {
            break;
          }
          if (++v9 == 3) {
            return a3;
          }
        }
        uint64_t v11 = memchr((void *)(v6 + 1), v10[1], v8);
        uint64_t v12 = v11 - v7;
        if (v11) {
          BOOL v13 = v12 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13)
        {
          a3 = v6 + 2;
          if (v8 >= v12 + 1) {
            size_t v14 = v12 + 1;
          }
          else {
            size_t v14 = v8;
          }
          *a1 = &v7[v14];
          a1[1] = (unsigned __int8 *)(v8 - v14);
        }
      }
    }
  }
  return a3;
}

uint64_t llvm::serializeSectionKind(uint64_t result, int a2)
{
  if (a2 != 5) {
    return dword_1CFB1BB10[(int)result - 1];
  }
  return result;
}

uint64_t llvm::deserializeSectionKind(uint64_t this, int a2)
{
  unsigned int v2 = this - 1;
  if (a2 == 5)
  {
    if (v2 >= 8 || this == 2) {
      return 0;
    }
    else {
      return this;
    }
  }
  else if (v2 > 7)
  {
    return 0;
  }
  else
  {
    return dword_1CFB1BB38[v2];
  }
}

llvm::raw_ostream *llvm::DWARFUnitIndex::Header::dump(llvm::DWARFUnitIndex::Header *this, llvm::raw_ostream *a2)
{
  int v2 = *(_DWORD *)this;
  v4[0] = &unk_1F2619310;
  v4[1] = "version = %u, units = %u, slots = %u\n\n";
  int v5 = v2;
  uint64_t v6 = *((void *)this + 1);
  return llvm::raw_ostream::operator<<(a2, (uint64_t)v4);
}

uint64_t llvm::DWARFUnitIndex::getColumnHeader(int a1)
{
  return qword_1E6849B48[a1];
}

llvm::raw_ostream *llvm::DWARFUnitIndex::dump(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  int v2 = *((_DWORD *)this + 3);
  if (v2)
  {
    long long v4 = this;
    unsigned int v5 = *(_DWORD *)this;
    unsigned int v6 = *((_DWORD *)this + 2);
    char v27 = (const char *)&unk_1F2619310;
    char v28 = "version = %u, units = %u, slots = %u\n\n";
    unint64_t v29 = __PAIR64__(v6, v5);
    LODWORD(v30) = v2;
    this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v27);
    uint64_t v7 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v7) > 0x17)
    {
      *(void *)(v7 + 16) = 0x2020202020202020;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)"Index Signature         ";
      *((void *)a2 + 4) += 24;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "Index Signature         ", 0x18uLL);
    }
    if (*((_DWORD *)v4 + 1))
    {
      unsigned int v8 = 0;
      do
      {
        uint64_t v9 = v8;
        uint64_t v10 = 4;
        uint64_t v11 = "INFO";
        switch(*(_DWORD *)(*((void *)v4 + 3) + 4 * v8))
        {
          case 1:
            goto LABEL_19;
          case 2:
            uint64_t v11 = "TYPES";
            goto LABEL_14;
          case 3:
            uint64_t v11 = "ABBREV";
            uint64_t v10 = 6;
            goto LABEL_19;
          case 4:
            uint64_t v11 = "LINE";
            uint64_t v10 = 4;
            goto LABEL_19;
          case 5:
            uint64_t v11 = "LOCLISTS";
            goto LABEL_16;
          case 6:
            uint64_t v11 = "STR_OFFSETS";
            uint64_t v10 = 11;
            goto LABEL_19;
          case 7:
            uint64_t v11 = "MACRO";
LABEL_14:
            uint64_t v10 = 5;
            goto LABEL_19;
          case 8:
            uint64_t v11 = "RNGLISTS";
LABEL_16:
            uint64_t v10 = 8;
            goto LABEL_19;
          case 9:
            uint64_t v11 = "LOC";
            uint64_t v10 = 3;
            goto LABEL_19;
          case 0xA:
            uint64_t v11 = "MACINFO";
            uint64_t v10 = 7;
LABEL_19:
            size_t v14 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v14 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 32);
            }
            else
            {
              *((void *)a2 + 4) = v14 + 1;
              *size_t v14 = 32;
            }
            char v27 = v11;
            char v28 = (const char *)v10;
            unint64_t v29 = 0x100000018;
            this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v27);
            break;
          default:
            uint64_t v12 = *((void *)v4 + 4);
            char v27 = (const char *)&unk_1F25FED10;
            unint64_t v13 = *(unsigned int *)(v12 + 4 * v9);
            char v28 = " Unknown: %-15u";
            unint64_t v29 = v13;
            this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v27);
            break;
        }
        unsigned int v8 = v9 + 1;
      }
      while (v9 + 1 != *((_DWORD *)v4 + 1));
    }
    int v15 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v15 > 0x18uLL)
    {
      qmemcpy(v15, "\n----- ------------------", 25);
      *((void *)a2 + 4) += 25;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "\n----- ------------------", 0x19uLL);
    }
    if (*((_DWORD *)v4 + 1))
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v17 > 0x18uLL)
        {
          qmemcpy(v17, " ------------------------", 25);
          *((void *)a2 + 4) += 25;
        }
        else
        {
          this = llvm::raw_ostream::write(a2, " ------------------------", 0x19uLL);
        }
        ++v16;
      }
      while (v16 != *((_DWORD *)v4 + 1));
    }
    size_t v18 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v18 >= *((void *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((void *)a2 + 4) = v18 + 1;
      *size_t v18 = 10;
    }
    if (*((_DWORD *)v4 + 3))
    {
      unsigned int v19 = 0;
      do
      {
        unsigned int v20 = v19;
        uint64_t v21 = *((void *)v4 + 5);
        uint64_t v22 = *(void *)(v21 + 24 * v19 + 16);
        if (v22)
        {
          char v27 = (const char *)&unk_1F2618A28;
          uint64_t v23 = *(void *)(v21 + 24 * v19++ + 8);
          char v28 = "%5u 0x%016llx ";
          LODWORD(v29) = v20 + 1;
          uint64_t v30 = v23;
          this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v27);
          if (*((_DWORD *)v4 + 1))
          {
            unsigned int v24 = 0;
            do
            {
              unint64_t v25 = *(unsigned int *)(v22 + 8 * v24) | ((unint64_t)(*(_DWORD *)(v22 + 8 * v24 + 4)
                                                                                         + *(_DWORD *)(v22 + 8 * v24)) << 32);
              char v27 = (const char *)&unk_1F26088E8;
              char v28 = "[0x%08x, 0x%08x) ";
              unint64_t v29 = v25;
              this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v27);
              ++v24;
            }
            while (v24 != *((_DWORD *)v4 + 1));
          }
          uint64_t v26 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v26 >= *((void *)a2 + 3))
          {
            this = llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((void *)a2 + 4) = v26 + 1;
            *uint64_t v26 = 10;
          }
        }
        else
        {
          ++v19;
        }
      }
      while (v19 != *((_DWORD *)v4 + 3));
    }
  }
  return this;
}

unint64_t sub_1CC6A573C(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = *v12;
                uint64_t v49 = 8 * *(int *)(*(void *)a3 + 20);
                if (*(_DWORD *)(*(void *)(v47 + 16) + v49) < *(_DWORD *)(*(void *)(*v12 + 16) + v49))
                {
                  *uint64_t v12 = v47;
                  *(a2 - 1) = v48;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CC6A6078(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CC6A6400(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5:
                std::string::size_type v50 = v12 + 1;
                int v51 = v12 + 2;
                uint64_t v52 = v12 + 3;
                uint64_t result = (unint64_t)sub_1CC6A6400(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v53 = *(a2 - 1);
                uint64_t v54 = v12[3];
                uint64_t v55 = 8 * *(int *)(*(void *)a3 + 20);
                if (*(_DWORD *)(*(void *)(v53 + 16) + v55) < *(_DWORD *)(*(void *)(v54 + 16) + v55))
                {
                  *uint64_t v52 = v53;
                  *(a2 - 1) = v54;
                  uint64_t v56 = *v52;
                  uint64_t v57 = *v51;
                  uint64_t v58 = 8 * *(int *)(*(void *)a3 + 20);
                  if (*(_DWORD *)(*(void *)(*v52 + 16) + v58) < *(_DWORD *)(*(void *)(*v51 + 16) + v58))
                  {
                    uint64_t *v51 = v56;
                    *uint64_t v52 = v57;
                    uint64_t v59 = *v50;
                    uint64_t v60 = 8 * *(int *)(*(void *)a3 + 20);
                    if (*(_DWORD *)(*(void *)(v56 + 16) + v60) < *(_DWORD *)(*(void *)(*v50 + 16) + v60))
                    {
                      v12[1] = v56;
                      unint64_t v12[2] = v59;
                      uint64_t v61 = *v12;
                      uint64_t v62 = 8 * *(int *)(*(void *)a3 + 20);
                      if (*(_DWORD *)(*(void *)(v56 + 16) + v62) < *(_DWORD *)(*(void *)(*v12 + 16) + v62))
                      {
                        *uint64_t v12 = v56;
                        v12[1] = v61;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            long long v63 = v12 + 1;
            BOOL v65 = v12 == a2 || v63 == a2;
            if (a5)
            {
              if (!v65)
              {
                uint64_t v66 = *(void *)a3;
                uint64_t v67 = 8;
                int64x2_t v68 = v12;
                do
                {
                  uint64_t v70 = *v68;
                  uint64_t v69 = v68[1];
                  int64x2_t v68 = v63;
                  if (*(_DWORD *)(*(void *)(v69 + 16) + 8 * *(int *)(v66 + 20)) < *(_DWORD *)(*(void *)(v70 + 16)
                                                                                                 + 8
                                                                                                 * *(int *)(v66 + 20)))
                  {
                    uint64_t v71 = v67;
                    do
                    {
                      *(uint64_t *)((char *)v12 + v71) = v70;
                      uint64_t v72 = v71 - 8;
                      if (v71 == 8)
                      {
                        unint64_t v74 = v12;
                        goto LABEL_85;
                      }
                      uint64_t v73 = 8 * *(int *)(*(void *)a3 + 20);
                      uint64_t v70 = *(uint64_t *)((char *)v12 + v71 - 16);
                      v71 -= 8;
                    }
                    while (*(_DWORD *)(*(void *)(v69 + 16) + v73) < *(_DWORD *)(*(void *)(v70 + 16) + v73));
                    unint64_t v74 = (uint64_t *)((char *)v12 + v72);
LABEL_85:
                    *unint64_t v74 = v69;
                    uint64_t v66 = *(void *)a3;
                  }
                  long long v63 = v68 + 1;
                  v67 += 8;
                }
                while (v68 + 1 != a2);
              }
            }
            else if (!v65)
            {
              uint64_t v110 = *(void *)a3;
              do
              {
                uint64_t v112 = *v11;
                uint64_t v111 = v11[1];
                uint64_t v11 = v63;
                if (*(_DWORD *)(*(void *)(v111 + 16) + 8 * *(int *)(v110 + 20)) < *(_DWORD *)(*(void *)(v112 + 16)
                                                                                                 + 8
                                                                                                 * *(int *)(v110 + 20)))
                {
                  long long v113 = v63;
                  do
                  {
                    *long long v113 = v112;
                    uint64_t v114 = 8 * *(int *)(*(void *)a3 + 20);
                    uint64_t v112 = *(v113 - 2);
                    --v113;
                  }
                  while (*(_DWORD *)(*(void *)(v111 + 16) + v114) < *(_DWORD *)(*(void *)(v112 + 16) + v114));
                  *long long v113 = v111;
                  uint64_t v110 = *(void *)a3;
                }
                long long v63 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v75 = (unint64_t)(v14 - 2) >> 1;
              int64_t v76 = v75;
              do
              {
                int64_t v77 = v76;
                if (v75 >= v76)
                {
                  uint64_t v78 = (2 * v76) | 1;
                  size_t v79 = &v12[v78];
                  uint64_t v80 = *v79;
                  if (2 * v77 + 2 < v14)
                  {
                    uint64_t v81 = *(int *)(*(void *)a3 + 20);
                    if (*(_DWORD *)(*(void *)(v80 + 16) + 8 * v81) < *(_DWORD *)(*(void *)(v79[1] + 16) + 8 * v81))
                    {
                      uint64_t v80 = v79[1];
                      ++v79;
                      uint64_t v78 = 2 * v77 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v81 = *(int *)(*(void *)a3 + 20);
                  }
                  unint64_t v82 = &v12[v77];
                  uint64_t v83 = *v82;
                  uint64_t result = *(void *)(*v82 + 16);
                  if (*(_DWORD *)(*(void *)(v80 + 16) + 8 * v81) >= *(_DWORD *)(result + 8 * v81))
                  {
                    do
                    {
                      uint64_t v84 = v79;
                      uint64_t *v82 = v80;
                      if (v75 < v78) {
                        break;
                      }
                      uint64_t v85 = (2 * v78) | 1;
                      size_t v79 = &v12[v85];
                      uint64_t v78 = 2 * v78 + 2;
                      uint64_t v80 = *v79;
                      if (v78 < v14)
                      {
                        uint64_t v86 = *(int *)(*(void *)a3 + 20);
                        if (*(_DWORD *)(*(void *)(v80 + 16) + 8 * v86) >= *(_DWORD *)(*(void *)(v79[1] + 16)
                                                                                       + 8 * v86))
                        {
                          uint64_t v78 = v85;
                        }
                        else
                        {
                          uint64_t v80 = v79[1];
                          ++v79;
                        }
                      }
                      else
                      {
                        uint64_t v86 = *(int *)(*(void *)a3 + 20);
                        uint64_t v78 = v85;
                      }
                      uint64_t v87 = 8 * v86;
                      uint64_t result = *(unsigned int *)(*(void *)(v80 + 16) + v87);
                      unint64_t v82 = v84;
                    }
                    while (result >= *(_DWORD *)(*(void *)(v83 + 16) + v87));
                    uint64_t *v84 = v83;
                  }
                }
                int64_t v76 = v77 - 1;
              }
              while (v77);
              do
              {
                uint64_t v88 = 0;
                uint64_t v89 = *v12;
                uint64_t v90 = v12;
                do
                {
                  uint64_t v91 = &v90[v88];
                  uint64_t v94 = v91[1];
                  unint64_t v92 = v91 + 1;
                  uint64_t v93 = v94;
                  uint64_t v95 = (2 * v88) | 1;
                  uint64_t v96 = 2 * v88 + 2;
                  if (v96 < v14)
                  {
                    uint64_t v97 = 8 * *(int *)(*(void *)a3 + 20);
                    unsigned int v98 = *(_DWORD *)(*(void *)(v93 + 16) + v97);
                    uint64_t result = *(unsigned int *)(*(void *)(v92[1] + 16) + v97);
                    if (v98 < result)
                    {
                      uint64_t v93 = v92[1];
                      ++v92;
                      uint64_t v95 = v96;
                    }
                  }
                  *uint64_t v90 = v93;
                  uint64_t v90 = v92;
                  uint64_t v88 = v95;
                }
                while (v95 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v92 == --a2)
                {
                  *unint64_t v92 = v89;
                }
                else
                {
                  *unint64_t v92 = *a2;
                  *a2 = v89;
                  uint64_t v99 = (char *)v92 - (char *)v12 + 8;
                  if (v99 >= 9)
                  {
                    unint64_t v100 = (((unint64_t)v99 >> 3) - 2) >> 1;
                    uint64_t v101 = &v12[v100];
                    uint64_t v102 = *v101;
                    uint64_t v103 = *v92;
                    uint64_t v104 = 8 * *(int *)(*(void *)a3 + 20);
                    if (*(_DWORD *)(*(void *)(*v101 + 16) + v104) < *(_DWORD *)(*(void *)(*v92 + 16) + v104))
                    {
                      do
                      {
                        size_t v105 = v101;
                        *unint64_t v92 = v102;
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                        uint64_t v101 = &v12[v100];
                        uint64_t v102 = *v101;
                        uint64_t v106 = 8 * *(int *)(*(void *)a3 + 20);
                        unsigned int v107 = *(_DWORD *)(*(void *)(*v101 + 16) + v106);
                        unsigned int v108 = *(_DWORD *)(*(void *)(v103 + 16) + v106);
                        unint64_t v92 = v105;
                      }
                      while (v107 < v108);
                      *size_t v105 = v103;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          int v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            sub_1CC6A6078(v11, &v11[(unint64_t)v14 >> 1], a2 - 1, a3);
            sub_1CC6A6078(v11 + 1, v16 - 1, a2 - 2, a3);
            sub_1CC6A6078(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            uint64_t result = (unint64_t)sub_1CC6A6078(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            *uint64_t v11 = *v16;
            *int v16 = v17;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CC6A6078(&v11[(unint64_t)v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          uint64_t v18 = *v11;
          uint64_t v19 = *(void *)a3;
          if (a5) {
            break;
          }
          uint64_t v20 = *(int *)(v19 + 20);
          uint64_t v22 = 8 * v20;
          unsigned int v21 = *(_DWORD *)(*(void *)(v18 + 16) + 8 * v20);
          if (*(_DWORD *)(*(void *)(*(v11 - 1) + 16) + 8 * v20) < v21) {
            goto LABEL_13;
          }
          if (v21 >= *(_DWORD *)(*(void *)(*(a2 - 1) + 16) + 8 * v20))
          {
            unint64_t v38 = v11 + 1;
            do
            {
              uint64_t v12 = v38;
              if (v38 >= a2) {
                break;
              }
              ++v38;
            }
            while (v21 >= *(_DWORD *)(*(void *)(*v12 + 16) + v22));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v37 = v12[1];
              ++v12;
            }
            while (v21 >= *(_DWORD *)(*(void *)(v37 + 16) + 8 * v20));
          }
          size_t v39 = a2;
          if (v12 < a2)
          {
            size_t v39 = a2;
            do
              uint64_t v40 = *--v39;
            while (v21 < *(_DWORD *)(*(void *)(v40 + 16) + v22));
          }
          if (v12 < v39)
          {
            uint64_t v41 = *v12;
            uint64_t v42 = *v39;
            do
            {
              *uint64_t v12 = v42;
              uint64_t *v39 = v41;
              unsigned int v43 = *(_DWORD *)(*(void *)(v18 + 16) + 8 * *(int *)(*(void *)a3 + 20));
              do
              {
                uint64_t v44 = v12[1];
                ++v12;
                uint64_t v41 = v44;
              }
              while (v43 >= *(_DWORD *)(*(void *)(v44 + 16) + 8 * *(int *)(*(void *)a3 + 20)));
              do
              {
                uint64_t v45 = *--v39;
                uint64_t v42 = v45;
              }
              while (v43 < *(_DWORD *)(*(void *)(v45 + 16) + 8 * *(int *)(*(void *)a3 + 20)));
            }
            while (v12 < v39);
          }
          uint64_t v46 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v46;
          }
          a5 = 0;
          *uint64_t v46 = v18;
        }
        uint64_t v20 = *(int *)(v19 + 20);
        unsigned int v21 = *(_DWORD *)(*(void *)(v18 + 16) + 8 * v20);
LABEL_13:
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = v11[v23 + 1];
          uint64_t v25 = 8 * v20;
          ++v23;
        }
        while (*(_DWORD *)(*(void *)(v24 + 16) + 8 * v20) < v21);
        uint64_t v26 = &v11[v23];
        char v27 = a2;
        if (v23 == 1)
        {
          char v27 = a2;
          do
          {
            if (v26 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(_DWORD *)(*(void *)(v29 + 16) + v25) >= v21);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(_DWORD *)(*(void *)(v28 + 16) + v25) >= v21);
        }
        if (v26 >= v27)
        {
          uint64_t v12 = &v11[v23];
        }
        else
        {
          uint64_t v30 = *v27;
          uint64_t v12 = &v11[v23];
          unint64_t v31 = v27;
          do
          {
            *uint64_t v12 = v30;
            *unint64_t v31 = v24;
            unsigned int v32 = *(_DWORD *)(*(void *)(v18 + 16) + 8 * *(int *)(*(void *)a3 + 20));
            do
            {
              uint64_t v33 = v12[1];
              ++v12;
              uint64_t v24 = v33;
            }
            while (*(_DWORD *)(*(void *)(v33 + 16) + 8 * *(int *)(*(void *)a3 + 20)) < v32);
            do
            {
              uint64_t v34 = *--v31;
              uint64_t v30 = v34;
            }
            while (*(_DWORD *)(*(void *)(v34 + 16) + 8 * *(int *)(*(void *)a3 + 20)) >= v32);
          }
          while (v12 < v31);
        }
        unint64_t v35 = v12 - 1;
        if (v12 - 1 != v11) {
          *uint64_t v11 = *v35;
        }
        *unint64_t v35 = v18;
        if (v26 >= v27) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1CC6A573C(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = sub_1CC6A6144(v11, v12 - 1, a3);
      uint64_t result = sub_1CC6A6144(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_34;
      }
    }
    a2 = v12 - 1;
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC6A6078(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = 8 * *(int *)(*(void *)a4 + 20);
  unsigned int v7 = *(_DWORD *)(*(void *)(*a2 + 16) + v6);
  unsigned int v8 = *(_DWORD *)(*(void *)(*result + 16) + v6);
  uint64_t v9 = *a3;
  unsigned int v10 = *(_DWORD *)(*(void *)(*a3 + 16) + v6);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *result;
      uint64_t v12 = 8 * *(int *)(*(void *)a4 + 20);
      if (*(_DWORD *)(*(void *)(*a2 + 16) + v12) < *(_DWORD *)(*(void *)(*result + 16) + v12))
      {
        *uint64_t result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v13 = 8 * *(int *)(*(void *)a4 + 20);
      if (*(_DWORD *)(*(void *)(*a3 + 16) + v13) >= *(_DWORD *)(*(void *)(v5 + 16) + v13)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CC6A6144(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = 8 * *(int *)(*(void *)a3 + 20);
      if (*(_DWORD *)(*(void *)(v8 + 16) + v10) < *(_DWORD *)(*(void *)(*a1 + 16) + v10))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1CC6A6078(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC6A6400(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v25 = a1 + 1;
      uint64_t v26 = a1 + 2;
      char v27 = a1 + 3;
      sub_1CC6A6400(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v28 = *(a2 - 1);
      uint64_t v29 = a1[3];
      uint64_t v30 = 8 * *(int *)(*(void *)a3 + 20);
      if (*(_DWORD *)(*(void *)(v28 + 16) + v30) < *(_DWORD *)(*(void *)(v29 + 16) + v30))
      {
        *char v27 = v28;
        *(a2 - 1) = v29;
        uint64_t v31 = *v27;
        uint64_t v32 = *v26;
        uint64_t v33 = 8 * *(int *)(*(void *)a3 + 20);
        if (*(_DWORD *)(*(void *)(*v27 + 16) + v33) < *(_DWORD *)(*(void *)(*v26 + 16) + v33))
        {
          *uint64_t v26 = v31;
          *char v27 = v32;
          uint64_t v34 = *v25;
          uint64_t v35 = 8 * *(int *)(*(void *)a3 + 20);
          if (*(_DWORD *)(*(void *)(v31 + 16) + v35) < *(_DWORD *)(*(void *)(*v25 + 16) + v35))
          {
            a1[1] = v31;
            a1[2] = v34;
            uint64_t v36 = *a1;
            uint64_t v37 = 8 * *(int *)(*(void *)a3 + 20);
            if (*(_DWORD *)(*(void *)(v31 + 16) + v37) < *(_DWORD *)(*(void *)(*a1 + 16) + v37))
            {
              *a1 = v31;
              a1[1] = v36;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_1CC6A6078(a1, a1 + 1, a1 + 2, a3);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = 24;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (*(_DWORD *)(*(void *)(*v12 + 16) + 8 * *(int *)(v14 + 20)) < *(_DWORD *)(*(void *)(*v11 + 16)
                                                                                    + 8 * *(int *)(v14 + 20)))
      break;
LABEL_15:
    uint64_t v11 = v12;
    v15 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
  uint64_t v18 = v15;
  while (1)
  {
    *(uint64_t *)((char *)a1 + v18) = v17;
    uint64_t v19 = v18 - 8;
    if (v18 == 8) {
      break;
    }
    uint64_t v20 = (char *)a1 + v18;
    uint64_t v21 = 8 * *(int *)(*(void *)a3 + 20);
    unsigned int v22 = *(_DWORD *)(*(void *)(v16 + 16) + v21);
    uint64_t v17 = *((void *)v20 - 2);
    unsigned int v23 = *(_DWORD *)(*(void *)(v17 + 16) + v21);
    uint64_t v18 = v19;
    if (v22 >= v23)
    {
      uint64_t v24 = (uint64_t *)((char *)a1 + v19);
      goto LABEL_13;
    }
  }
  uint64_t v24 = a1;
LABEL_13:
  *uint64_t v24 = v16;
  if (++v13 != 8)
  {
    uint64_t v14 = *(void *)a3;
    goto LABEL_15;
  }
  return v12 + 1 == a2;
}

uint64_t *sub_1CC6A6400(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  BOOL result = sub_1CC6A6078(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  uint64_t v12 = 8 * *(int *)(*(void *)a5 + 20);
  if (*(_DWORD *)(*(void *)(*a4 + 16) + v12) < *(_DWORD *)(*(void *)(*a3 + 16) + v12))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    uint64_t v14 = 8 * *(int *)(*(void *)a5 + 20);
    if (*(_DWORD *)(*(void *)(*a3 + 16) + v14) < *(_DWORD *)(*(void *)(*a2 + 16) + v14))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v15 = *a1;
      uint64_t v16 = 8 * *(int *)(*(void *)a5 + 20);
      if (*(_DWORD *)(*(void *)(*a2 + 16) + v16) < *(_DWORD *)(*(void *)(*a1 + 16) + v16))
      {
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFUnitVector::addUnitsImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, char a16, int a17)
{
  uint64_t v18 = result;
  unint64_t v19 = *(void *)(a4 + 8);
  if (!*(void *)(result + 48))
  {
    BOOL result = (uint64_t)operator new(0x70uLL);
    *(void *)BOOL result = &unk_1F2619490;
    *(void *)(result + 8) = a2;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = a4;
    *(void *)(result + 32) = a11;
    *(void *)(result + 40) = a13;
    *(unsigned char *)(result + 48) = a14;
    *(unsigned char *)(result + 49) = a15;
    *(void *)(result + 56) = a5;
    *(void *)(result + 64) = a6;
    *(void *)(result + 72) = a7;
    *(void *)(result + 80) = a9;
    *(void *)(result + 88) = a10;
    *(void *)(result + 96) = a12;
    *(void *)(result + 104) = v18;
    *(void *)(v18 + 48) = result;
  }
  if ((a16 & 1) == 0 && v19)
  {
    unint64_t v25 = 0;
    uint64_t v26 = *(void *)v18;
    do
    {
      uint64_t v27 = *(void *)v18 + 8 * *(unsigned int *)(v18 + 8);
      if (v26 != v27)
      {
        while (*(void *)(*(void *)v26 + 16) != a4 || *(void *)(*(void *)v26 + 24) == v25)
        {
          v26 += 8;
          if (v26 == v27)
          {
            uint64_t v26 = *(void *)v18 + 8 * *(unsigned int *)(v18 + 8);
            break;
          }
        }
      }
      BOOL result = sub_1CC6A66DC(v18 + 24, v25, a17, a4, 0);
      if (!v32) {
        break;
      }
      uint64_t v28 = *(void *)(v32 + 24);
      uint64_t v29 = *(void *)(v32 + 40);
      uint64_t v30 = *(unsigned char *)(v32 + 35) ? 12 : 4;
      uint64_t v31 = sub_1CD5EF024(v18, v26, &v32);
      BOOL result = v32;
      uint64_t v32 = 0;
      if (result) {
        BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      unint64_t v25 = v29 + v28 + v30;
      uint64_t v26 = v31 + 8;
    }
    while (v19 > v25);
  }
  return result;
}

uint64_t sub_1CC6A66DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  int v9 = a3;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
  }
  sub_1CB920400();
  return llvm::DWARFUnitVector::addUnit();
}

uint64_t llvm::DWARFUnitVector::addUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = (uint64_t *)(v3 + 8 * (v4 >> 1));
      uint64_t v8 = *v6;
      uint64_t v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (*(void *)(*a2 + 24) < *(void *)(v8 + 24)) {
        unint64_t v4 = v5;
      }
      else {
        uint64_t v3 = (uint64_t)v7;
      }
    }
    while (v4);
  }
  return *(void *)sub_1CD5EF024(a1, v3, a2);
}

uint64_t llvm::DWARFUnitVector::getUnitForIndexEntry(llvm::DWARFUnitVector *this, const llvm::DWARFUnitIndex::Entry *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)a2 + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(int **)(*(void *)a2 + 24);
  uint64_t v7 = 8 * v2;
  while (1)
  {
    int v8 = *v6++;
    if (v8 == 1) {
      break;
    }
    v5 += 8;
    if (v7 == v5) {
      return 0;
    }
  }
  uint64_t v9 = *((void *)a2 + 2);
  if (!v9) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(v9 + v5);
  uint64_t v11 = *(void *)this;
  LODWORD(v12) = *((_DWORD *)this + 14);
  if (v12 == -1) {
    LODWORD(v12) = *((_DWORD *)this + 2);
  }
  uint64_t v13 = v11 + 8 * v12;
  if (v12)
  {
    unint64_t v12 = v12;
    do
    {
      unint64_t v14 = v12 >> 1;
      uint64_t v15 = (uint64_t *)(v11 + 8 * (v12 >> 1));
      uint64_t v17 = *v15;
      uint64_t v16 = v15 + 1;
      uint64_t v18 = *(void *)(v17 + 40) + *(void *)(v17 + 24);
      if (*(unsigned char *)(v17 + 35)) {
        uint64_t v19 = 12;
      }
      else {
        uint64_t v19 = 4;
      }
      v12 += ~(v12 >> 1);
      if (v18 + v19 > v10) {
        unint64_t v12 = v14;
      }
      else {
        uint64_t v11 = (uint64_t)v16;
      }
    }
    while (v12);
  }
  if (v11 == v13 || (uint64_t v20 = *(void *)v11, *(void *)(*(void *)v11 + 24) > v10))
  {
    if (!*((void *)this + 6)) {
      return 0;
    }
    sub_1CC6A66DC((uint64_t)this + 24, v10, 1, 0, (uint64_t)a2);
    uint64_t v20 = v23;
    if (!v23) {
      uint64_t v23 = 0;
    }
    sub_1CD5EF024((uint64_t)this, v11, &v23);
    ++*((_DWORD *)this + 14);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  return v20;
}

uint64_t llvm::DWARFUnit::DWARFUnit(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  *(void *)a1 = &unk_1F2619468;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  long long v17 = a4[1];
  long long v18 = a4[2];
  long long v19 = a4[3];
  *(_OWORD *)(a1 + 88) = a4[4];
  *(_OWORD *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 56) = v18;
  *(_OWORD *)(a1 + 40) = v17;
  *(void *)(a1 + 104) = a5;
  *(void *)(a1 + 112) = a6;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a13;
  *(void *)(a1 + 152) = a9;
  *(void *)(a1 + 160) = a10;
  *(void *)(a1 + 168) = a11;
  *(void *)(a1 + 176) = a12;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = a14;
  *(unsigned char *)(a1 + 209) = a15;
  *(void *)(a1 + 216) = a16;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  llvm::DWARFUnit::clear((llvm::DWARFUnit *)a1);
  return a1;
}

void llvm::DWARFUnit::clear(llvm::DWARFUnit *this)
{
  *((void *)this + 32) = 0;
  if (*((unsigned char *)this + 280)) {
    *((unsigned char *)this + 280) = 0;
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 200) = 0;
  *((void *)this + 23) = 0;
  double v2 = llvm::DWARFUnit::clearDIEs(this, 0);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v3->__on_zero_shared)(v3, v2);
    std::__shared_weak_count::__release_weak(v3);
  }
}

unint64_t llvm::DWARFUnit::getStringOffsetSectionItem@<X0>(llvm::DWARFUnit *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (!*((unsigned char *)this + 248))
  {
    llvm::inconvertibleErrorCode(this);
    operator new();
  }
  BOOL v5 = *((unsigned char *)this + 243) == 0;
  uint64_t v6 = 8;
  if (*((unsigned char *)this + 243)) {
    int v7 = 8;
  }
  else {
    int v7 = 4;
  }
  if (*((unsigned char *)this + 243)) {
    char v8 = 3;
  }
  else {
    char v8 = 2;
  }
  unint64_t v9 = *((void *)this + 28) + (a2 << v8);
  unint64_t v17 = v9;
  unint64_t v10 = (void *)*((void *)this + 21);
  unint64_t v11 = v10[1];
  if (v5) {
    uint64_t v6 = 4;
  }
  if (v11 < v9 + v6)
  {
    v15[0] = "DW_FORM_strx uses index ";
    _OWORD v15[2] = a2;
    __int16 v16 = 2051;
    v18[0] = v15;
    long long v19 = ", which is too large";
    LOWORD(v21) = 770;
    llvm::inconvertibleErrorCode(this);
    operator new();
  }
  uint64_t v12 = *(void *)(*((void *)this + 1) + 520);
  unsigned __int8 v13 = *((unsigned char *)this + 208);
  v18[0] = *v10;
  v18[1] = v11;
  LOWORD(v19) = v13;
  uint64_t v20 = v12;
  uint64_t v21 = v10;
  unint64_t result = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v18, v7, &v17, 0, 0);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = result;
  return result;
}

uint64_t llvm::DWARFUnitHeader::applyIndexEntry(uint64_t a1, void *a2)
{
  *(void *)(a1 + 32) = a2;
  if (*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)a2[2];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 12;
  if (!*(unsigned char *)(a1 + 11)) {
    uint64_t v5 = 4;
  }
  if (v5 + *(void *)(a1 + 16) != v3[2 * *(int *)(*a2 + 20) + 1]) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(v4 + 4);
  if (!v6) {
    return 0;
  }
  int v7 = *(int **)(v4 + 24);
  while (1)
  {
    int v8 = *v7++;
    if (v8 == 3) {
      break;
    }
    v3 += 2;
    if (!--v6) {
      return 0;
    }
  }
  *(void *)(a1 + 24) = *v3;
  return 1;
}

uint64_t llvm::DWARFUnit::extractRangeList@<X0>(llvm::DWARFUnit *this@<X0>, llvm::DWARFDebugRangeList *a2@<X2>, uint64_t a3@<X1>, void *a4@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)this + 1) + 520);
  char v5 = *((unsigned char *)this + 208);
  char v6 = *((unsigned char *)this + 34);
  int v7 = (_OWORD *)*((void *)this + 14);
  uint64_t v8 = *((void *)this + 15);
  long long v11 = *v7;
  char v12 = v5;
  char v13 = v6;
  uint64_t v14 = v4;
  uint64_t v15 = v7;
  unint64_t v10 = v8 + a3;
  return llvm::DWARFDebugRangeList::extract(a2, (const llvm::DWARFDataExtractor *)&v11, &v10, a4);
}

void llvm::DWARFUnit::extractDIEsToVector(uint64_t a1, int a2, int a3, char **a4)
{
  int v5 = a2;
  uint64_t v6 = a1;
  if ((a2 & 1) == 0 && !a3) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v78 = v7 + *(unsigned __int8 *)(a1 + 97);
  uint64_t v8 = *(void *)(a1 + 40) + v7;
  uint64_t v9 = 12;
  if (!*(unsigned char *)(a1 + 35)) {
    uint64_t v9 = 4;
  }
  unint64_t v68 = v8 + v9;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0xFFFFFFFFLL;
  uint64_t v77 = 0;
  unint64_t v10 = *(_OWORD **)(a1 + 16);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 520);
  char v12 = *(unsigned char *)(a1 + 208);
  char v13 = *(unsigned char *)(a1 + 34);
  long long v71 = *v10;
  char v72 = v12;
  char v73 = v13;
  uint64_t v74 = v11;
  int64_t v75 = v10;
  uint64_t v14 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v14 = -1;
  uint64_t v15 = v14 + 4;
  if ((v5 & 1) == 0)
  {
    __int16 v16 = (char *)operator new(8uLL);
    *(void *)__int16 v16 = 0xFFFFFFFFLL;
    uint64_t v15 = v16 + 8;
    operator delete(v14);
    uint64_t v14 = v16;
  }
  long long v63 = v15;
  long long __p = (char *)operator new(4uLL);
  *(_DWORD *)long long __p = 0;
  unint64_t v17 = __p + 4;
  char v18 = 1;
  uint64_t v62 = __p + 4;
  int v66 = v5;
  uint64_t v67 = v6;
  do
  {
    long long v19 = v15 - 4;
    if (!llvm::DWARFDebugInfoEntry::extractFast((llvm::DWARFDebugInfoEntry *)&v76, (const llvm::DWARFUnit *)v6, &v78, (const llvm::DWARFDataExtractor *)&v71, v68, *((_DWORD *)v15 - 1)))break; {
    unsigned int v20 = *((_DWORD *)v17 - 1);
    }
    if (v20) {
      *(_DWORD *)&(*a4)[24 * v20 + 12] = -1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
    }
    if (v18)
    {
      if (v5)
      {
        uint64_t v70 = v14;
        uint64_t v28 = a4[1];
        unint64_t v27 = (unint64_t)a4[2];
        if ((unint64_t)v28 >= v27)
        {
          uint64_t v35 = *a4;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v28 - *a4) >> 3);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_110;
          }
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)v35) >> 3);
          if (2 * v38 > v37) {
            unint64_t v37 = 2 * v38;
          }
          if (v38 >= 0x555555555555555) {
            unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_111;
            }
            uint64_t v40 = (char *)operator new(24 * v39);
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v44 = &v40[24 * v36];
          *(_OWORD *)uint64_t v44 = v76;
          *((void *)v44 + 2) = v77;
          uint64_t v45 = v44;
          if (v28 != v35)
          {
            do
            {
              long long v46 = *(_OWORD *)(v28 - 24);
              *((void *)v45 - 1) = *((void *)v28 - 1);
              *(_OWORD *)(v45 - 24) = v46;
              v45 -= 24;
              v28 -= 24;
            }
            while (v28 != v35);
            uint64_t v28 = *a4;
          }
          uint64_t v30 = v44 + 24;
          *a4 = v45;
          a4[1] = v44 + 24;
          a4[2] = &v40[24 * v39];
          uint64_t v6 = v67;
          if (v28) {
            operator delete(v28);
          }
          int v5 = v66;
        }
        else
        {
          long long v29 = v76;
          *((void *)v28 + 2) = v77;
          *(_OWORD *)uint64_t v28 = v29;
          uint64_t v30 = v28 + 24;
        }
        a4[1] = v30;
        uint64_t v14 = v70;
      }
      if (!a3) {
        break;
      }
      uint64_t v47 = 4;
      if (*(unsigned char *)(v6 + 35)) {
        uint64_t v47 = 12;
      }
      sub_1CD5EDFA4((uint64_t)a4, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3)+ (v47 + *(void *)(v6 + 40) - (unint64_t)*(unsigned __int8 *)(v6 + 97)) / 0xE);
    }
    else
    {
      uint64_t v69 = v14;
      uint64_t v22 = *a4;
      uint64_t v21 = a4[1];
      uint64_t v23 = (v21 - *a4) / 24;
      *((_DWORD *)v17 - 1) = v23;
      unint64_t v24 = (unint64_t)a4[2];
      if ((unint64_t)v21 >= v24)
      {
        unint64_t v31 = v23 + 1;
        if ((unint64_t)(v23 + 1) > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_110;
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v22) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_111;
          }
          uint64_t v34 = (char *)operator new(24 * v33);
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v41 = &v34[24 * v23];
        *(_OWORD *)uint64_t v41 = v76;
        *((void *)v41 + 2) = v77;
        uint64_t v42 = v41;
        if (v21 != v22)
        {
          do
          {
            long long v43 = *(_OWORD *)(v21 - 24);
            *((void *)v42 - 1) = *((void *)v21 - 1);
            *(_OWORD *)(v42 - 24) = v43;
            v42 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          uint64_t v21 = *a4;
        }
        uint64_t v26 = v41 + 24;
        *a4 = v42;
        a4[1] = v41 + 24;
        a4[2] = &v34[24 * v33];
        uint64_t v6 = v67;
        if (v21) {
          operator delete(v21);
        }
        int v5 = v66;
      }
      else
      {
        long long v25 = v76;
        *((void *)v21 + 2) = v77;
        *(_OWORD *)uint64_t v21 = v25;
        uint64_t v26 = v21 + 24;
        uint64_t v6 = v67;
      }
      a4[1] = v26;
      uint64_t v14 = v69;
    }
    if (!v77)
    {
      v17 -= 4;
LABEL_84:
      uint64_t v15 = v19;
      goto LABEL_85;
    }
    if (!*(unsigned char *)(v77 + 7))
    {
      if (v18) {
        break;
      }
      goto LABEL_85;
    }
    if ((v18 & 1) == 0 || v5)
    {
      int v48 = -1 - 1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
      if (v15 >= v63)
      {
        uint64_t v49 = (v15 - v14) >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
          goto LABEL_110;
        }
        if ((v63 - v14) >> 1 > v50) {
          unint64_t v50 = (v63 - v14) >> 1;
        }
        if ((unint64_t)(v63 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          if (v51 >> 62) {
            goto LABEL_111;
          }
          uint64_t v52 = (char *)operator new(4 * v51);
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = &v52[4 * v49];
        *(_DWORD *)uint64_t v53 = v48;
        long long v19 = v53 + 4;
        if (v15 == v14)
        {
          int v5 = v66;
        }
        else
        {
          int v5 = v66;
          do
          {
            int v54 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          while (v15 != v14);
        }
        long long v63 = &v52[4 * v51];
        if (v14) {
          operator delete(v14);
        }
        uint64_t v14 = v53;
      }
      else
      {
        *(_DWORD *)uint64_t v15 = v48;
        long long v19 = v15 + 4;
        int v5 = v66;
      }
      if (v17 >= v62)
      {
        uint64_t v55 = (v17 - __p) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
LABEL_110:
        }
          abort();
        if ((v62 - __p) >> 1 > v56) {
          unint64_t v56 = (v62 - __p) >> 1;
        }
        if ((unint64_t)(v62 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          if (v57 >> 62) {
LABEL_111:
          }
            sub_1CB833614();
          uint64_t v58 = (char *)operator new(4 * v57);
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v59 = &v58[4 * v55];
        *(_DWORD *)uint64_t v59 = 0;
        uint64_t v60 = v59 + 4;
        while (v17 != __p)
        {
          int v61 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        uint64_t v62 = &v58[4 * v57];
        if (__p) {
          operator delete(__p);
        }
        long long __p = v59;
        unint64_t v17 = v60;
        uint64_t v15 = v19;
        int v5 = v66;
        goto LABEL_85;
      }
      *(_DWORD *)unint64_t v17 = 0;
      v17 += 4;
      goto LABEL_84;
    }
LABEL_85:
    if (v18) {
      char v18 = 0;
    }
  }
  while ((unint64_t)(v15 - v14) > 4);
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
}

uint64_t llvm::DWARFUnit::parseDWO(llvm::DWARFUnit *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 209) || *((void *)this + 42)) {
    return 0;
  }
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  uint64_t v4 = (llvm::DWARFUnit *)*((void *)this + 36);
  int v5 = (llvm::DWARFUnit *)*((void *)this + 37);
  BOOL v6 = v4 == v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = this;
  }
  if (v6) {
    uint64_t v4 = 0;
  }
  v40[0] = v7;
  v40[1] = v4;
  if (!v7 || v4 == 0) {
    return 0;
  }
  int v9 = *((unsigned __int16 *)this + 16) < 5u ? 8496 : 118;
  llvm::DWARFDie::find(v40, v9, &v44);
  if (v47)
  {
    llvm::DWARFFormValue::getAsCString((llvm *)&v44, (uint64_t)&v41);
    if (v42)
    {
      uint64_t v15 = v41;
      uint64_t v41 = 0;
      v38[0] = v15;
      sub_1CD4515D0(v38);
      if (v38[0]) {
        (*(void (**)(void *))(*v38[0] + 8))(v38[0]);
      }
      uint64_t v11 = 0;
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = v41;
      uint64_t v11 = 1;
    }
    if (v42)
    {
      char v12 = v41;
      uint64_t v41 = 0;
      if (v12) {
        (*(void (**)(llvm::DWARFContext *))(*(void *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  if (!v11) {
    return 0;
  }
  llvm::DWARFDie::find(v40, 27, &v44);
  if (v47)
  {
    llvm::DWARFFormValue::getAsCString((llvm *)&v44, (uint64_t)&v41);
    if (v42)
    {
      __int16 v16 = v41;
      uint64_t v41 = 0;
      v38[0] = v16;
      sub_1CD4515D0(v38);
      if (v38[0]) {
        (*(void (**)(void *))(*v38[0] + 8))(v38[0]);
      }
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = v41;
      uint64_t v13 = 1;
    }
    if (v42)
    {
      unint64_t v17 = v41;
      uint64_t v41 = 0;
      if (v17) {
        (*(void (**)(llvm::DWARFContext *))(*(void *)v17 + 8))(v17);
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v44 = v46;
  long long v45 = xmmword_1CDB15990;
  __int16 v43 = 257;
  if (*(unsigned char *)v10)
  {
    uint64_t v41 = v10;
    char v18 = 3;
  }
  else
  {
    char v18 = 1;
  }
  LOBYTE(v43) = v18;
  char is_absolute = llvm::sys::path::is_absolute((const char **)&v41, 0);
  if (v13 && (is_absolute & 1) == 0 && v14)
  {
    __int16 v43 = 257;
    if (*(unsigned char *)v14)
    {
      uint64_t v41 = v14;
      char v20 = 3;
    }
    else
    {
      char v20 = 1;
    }
    LOBYTE(v43) = v20;
    __int16 v39 = 257;
    __int16 v37 = 257;
    __int16 v35 = 257;
    llvm::sys::path::append(&v44, 0, (const char **)&v41, v38, (uint64_t)v36, (uint64_t)v34);
  }
  __int16 v43 = 257;
  if (*(unsigned char *)v10)
  {
    uint64_t v41 = v10;
    char v21 = 3;
  }
  else
  {
    char v21 = 1;
  }
  LOBYTE(v43) = v21;
  __int16 v39 = 257;
  __int16 v37 = 257;
  __int16 v35 = 257;
  llvm::sys::path::append(&v44, 0, (const char **)&v41, v38, (uint64_t)v36, (uint64_t)v34);
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  if (*((unsigned char *)this + 88))
  {
    uint64_t v22 = *((void *)this + 10);
    llvm::DWARFContext::getDWOContext(*((void *)this + 1), v44, v45, &v41);
    if (v41 && (DWOCompileUnitForHash = llvm::DWARFContext::getDWOCompileUnitForHash(v41, v22)) != 0)
    {
      unint64_t v24 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v25 = (std::__shared_weak_count *)*((void *)this + 43);
      *((void *)this + 42) = DWOCompileUnitForHash;
      *((void *)this + 43) = v24;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v26 = *((void *)this + 42);
      *(void *)(v26 + 184) = this;
      if (*((unsigned char *)this + 200))
      {
        uint64_t v27 = *((void *)this + 24);
        *(void *)(v26 + 176) = *((void *)this + 22);
        int v28 = *(unsigned __int8 *)(v26 + 200);
        *(void *)(v26 + 192) = v27;
        if (!v28) {
          *(unsigned char *)(v26 + 200) = 1;
        }
      }
      if (*((_WORD *)this + 16) == 4)
      {
        uint64_t RangesBaseAttribute = llvm::DWARFDie::getRangesBaseAttribute(v40);
        uint64_t v30 = *((void *)this + 42);
        if (v31) {
          uint64_t v32 = RangesBaseAttribute;
        }
        else {
          uint64_t v32 = 0;
        }
        *(void *)(v30 + 112) = *((void *)this + 14);
        *(void *)(v30 + 120) = v32;
      }
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
    unint64_t v33 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (v44 != v46) {
    free(v44);
  }
  return v2;
}

void llvm::DWARFUnit::findRnglistFromOffset(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int16 *)this + 16) > 4u)
  {
    uint64_t v11 = *(void *)(*((void *)this + 1) + 520);
    char v12 = (_OWORD *)*((void *)this + 14);
    char v13 = *((unsigned char *)this + 208);
    char v14 = *((unsigned char *)this + 34);
    long long v15 = *v12;
    *(void *)uint64_t v26 = 0;
    int v28 = ".debug_rnglists";
    uint64_t v29 = 15;
    uint64_t v30 = "range";
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v31 = 5;
    uint64_t v32 = v33;
    v33[2] = "ranges:";
    v33[3] = (void *)7;
    long long v21 = v15;
    char v22 = v13;
    char v23 = v14;
    uint64_t v24 = v11;
    long long v25 = v12;
    sub_1CD5EEC24((uint64_t)&v36, (llvm::DWARFListTableHeader *)v26, (uint64_t)&v21, a2);
    if (v39)
    {
      unint64_t v17 = (int8x16_t *)v36;
      *(unsigned char *)(a3 + 24) |= 1u;
      *(void *)a3 = v17;
    }
    else
    {
      llvm::DWARFUnit::getBaseAddress(this, (uint64_t)&v18);
      llvm::DWARFDebugRnglist::getAbsoluteRanges((int8x16_t **)&v36, &v18, (uint64_t)this, (uint64_t **)v19);
      *(unsigned char *)(a3 + 24) &= ~1u;
      *(void *)(a3 + 16) = v20;
      __int16 v16 = (int8x16_t *)v36;
      *(_OWORD *)a3 = *(_OWORD *)v19;
      if (v39)
      {
        uint64_t v36 = 0;
        if (v16) {
          (*(void (**)(int8x16_t *))(v16->i64[0] + 8))(v16);
        }
      }
      else if (v16)
      {
        __int16 v37 = v16;
        operator delete(v16);
      }
    }
    sub_1CD5E3788((uint64_t)&v32, v33[0]);
  }
  else
  {
    unint64_t v38 = 0;
    __int16 v39 = 0;
    uint64_t v40 = 0;
    uint64_t v36 = -1;
    LOBYTE(v37) = 0;
    uint64_t v5 = *(void *)(*((void *)this + 1) + 520);
    BOOL v6 = (const char *)*((void *)this + 14);
    uint64_t v7 = *((void *)this + 15);
    long long v8 = *(_OWORD *)v6;
    v26[16] = *((unsigned char *)this + 208);
    char v9 = *((unsigned char *)this + 34);
    *(_OWORD *)uint64_t v26 = v8;
    v26[17] = v9;
    uint64_t v27 = v5;
    int v28 = v6;
    v19[0] = v7 + a2;
    llvm::DWARFDebugRangeList::extract((llvm::DWARFDebugRangeList *)&v36, (const llvm::DWARFDataExtractor *)v26, v19, &v35);
    uint64_t v10 = v35;
    if (v35)
    {
      *(unsigned char *)(a3 + 24) |= 1u;
    }
    else
    {
      llvm::DWARFUnit::getBaseAddress(this, (uint64_t)v34);
      llvm::DWARFDebugRangeList::getAbsoluteRanges((uint64_t)&v36, v34, (char **)v26);
      *(unsigned char *)(a3 + 24) &= ~1u;
      uint64_t v10 = *(void *)v26;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v26[8];
    }
    *(void *)a3 = v10;
    if (v38)
    {
      __int16 v39 = v38;
      operator delete(v38);
    }
  }
}

unint64_t llvm::DWARFUnit::getRnglistOffset(llvm::DWARFUnit *this, int a2)
{
  char v2 = *((unsigned char *)this + 208);
  uint64_t v3 = *((void *)this + 15);
  char v4 = *((unsigned char *)this + 34);
  long long v8 = *(_OWORD *)*((void *)this + 14);
  char v9 = v2;
  char v10 = v4;
  if (*((unsigned char *)this + 35) == 1) {
    int v5 = 8;
  }
  else {
    int v5 = 4;
  }
  if (*((unsigned char *)this + 35) == 1) {
    char v6 = 3;
  }
  else {
    char v6 = 2;
  }
  unint64_t v11 = v3 + (a2 << v6);
  return *((void *)this + 15) + llvm::DataExtractor::getUnsigned(&v8, &v11, v5, 0);
}

uint64_t llvm::DWARFUnit::collectAddressRanges@<X0>(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
  uint64_t v4 = *((void *)this + 36);
  uint64_t v5 = *((void *)this + 37);
  BOOL v6 = v4 == v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = this;
  }
  if (v6) {
    uint64_t v4 = 0;
  }
  v16[0] = v7;
  v16[1] = v4;
  if (v7) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v17 = 22;
    long long v18 = std::generic_category();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"No unit DIE";
    sub_1CD06481C();
  }
  llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)v16, (uint64_t)&v17);
  if (v19)
  {
    char v10 = std::generic_category();
    if (v19)
    {
      uint64_t v11 = v17;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = v11;
    sub_1CD4FB504(&v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v15 = p_p;
    sub_1CD5E3960(22, (uint64_t)v10, (uint64_t)"decoding address ranges: %s", (uint64_t *)&v15);
  }
  *(unsigned char *)(a2 + 24) &= ~1u;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_1CC6A8A48((void *)a2, (const void *)v17, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 3));
  return sub_1CC1EB7C0((uint64_t)&v17);
}

void llvm::DWARFUnit::findLoclistFromOffset(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  *((void *)&v12 + 1) = 0;
  uint64_t v6 = *((void *)this + 17);
  llvm::DWARFUnit::getBaseAddress(this, (uint64_t)&v11);
  v15[0] = &unk_1F2619518;
  v15[1] = this;
  __int16 v16 = v15;
  v10[0] = (void **)&v13;
  v10[1] = (void **)&v12 + 1;
  llvm::DWARFLocationTable::visitAbsoluteLocationList(v6, a2, &v11, v15, (uint64_t)sub_1CC6A8B70, (uint64_t)v10);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void *))(*v16 + 40))(v16);
  }
  if (v12 == 0)
  {
    *(unsigned char *)(a3 + 24) &= ~1u;
    *(_OWORD *)a3 = v13;
    *(void *)(a3 + 16) = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v7 = (char *)*((void *)&v12 + 1);
    BOOL v8 = (char *)v12;
    long long v12 = 0uLL;
    sub_1CD5E5368(&v8, &v7, &v9);
    *(unsigned char *)(a3 + 24) |= 1u;
    *(void *)a3 = v9;
    char v9 = 0;
    if (v7) {
      (*(void (**)(char *))(*(void *)v7 + 8))(v7);
    }
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 8))(v8);
    }
  }
  if ((void)v12) {
    (*(void (**)(void))(*(void *)v12 + 8))(v12);
  }
  if (*((void *)&v12 + 1)) {
    (*(void (**)(void))(**((void **)&v12 + 1) + 8))(*((void *)&v12 + 1));
  }
  v10[0] = (void **)&v13;
  sub_1CC683E70(v10);
}

uint64_t llvm::DWARFUnit::updateAddressDieMap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v33 = a2;
  *((void *)&v33 + 1) = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  if (!v6 || ((v7 = *(unsigned __int16 *)(v6 + 4), v7 != 46) ? (BOOL v8 = v7 == 29) : (BOOL v8 = 1), !v8))
  {
    if (!a3) {
      return result;
    }
    goto LABEL_7;
  }
  llvm::DWARFDie::getAddressRanges((llvm::DWARFDie *)&v33, (uint64_t)&v34);
  if (v36)
  {
    uint64_t v31 = v34;
    uint64_t v34 = 0;
    uint64_t v32 = v31;
    sub_1CD4515D0(&v32);
    if (v32) {
      ((void (*)(uint64_t **))(*v32)[1])(v32);
    }
  }
  else
  {
    char v9 = v34;
    char v10 = v35;
    if (v34 != v35)
    {
      long long v11 = (void *)(v5 + 320);
      do
      {
        long long v12 = *v9;
        unint64_t v13 = (unint64_t)v9[1];
        if (*v9 != (uint64_t *)v13)
        {
          uint64_t v14 = (void *)*v11;
          long long v15 = (uint64_t *)(v5 + 320);
          if (*v11)
          {
            long long v15 = (uint64_t *)(v5 + 320);
            do
            {
              unint64_t v16 = v14[4];
              BOOL v17 = (unint64_t)v12 >= v16;
              if ((unint64_t)v12 >= v16) {
                long long v18 = v14 + 1;
              }
              else {
                long long v18 = v14;
              }
              if (!v17) {
                long long v15 = v14;
              }
              uint64_t v14 = (void *)*v18;
            }
            while (*v18);
          }
          if (v15 != *(uint64_t **)(v5 + 312))
          {
            uint64_t v19 = *v15;
            if (*v15)
            {
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = *(void *)(v19 + 8);
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = v15[2];
                BOOL v8 = *(void *)v20 == (void)v15;
                long long v15 = (uint64_t *)v20;
              }
              while (v8);
            }
            unint64_t v21 = *(void *)(v20 + 40);
            if ((unint64_t)v12 < v21)
            {
              if (v13 < v21)
              {
                char v22 = sub_1CD4F40F4((uint64_t **)(v5 + 312), v13, v9 + 1);
                void v22[5] = *(uint64_t **)(v20 + 40);
                *((_OWORD *)v22 + 3) = *(_OWORD *)(v20 + 48);
                long long v12 = *v9;
              }
              unint64_t v23 = *(void *)(v20 + 32);
              if ((unint64_t)v12 > v23)
              {
                sub_1CD4F40F4((uint64_t **)(v5 + 312), v23, (uint64_t **)(v20 + 32))[5] = v12;
                long long v12 = *v9;
              }
            }
          }
          uint64_t v24 = v9[1];
          long long v25 = sub_1CD4F40F4((uint64_t **)(v5 + 312), (unint64_t)v12, v9);
          v25[5] = v24;
          *((_OWORD *)v25 + 3) = v33;
        }
        v9 += 3;
      }
      while (v9 != v10);
    }
  }
  unint64_t result = sub_1CC1EB7C0((uint64_t)&v34);
  if (a3)
  {
LABEL_7:
    if (a2)
    {
      unint64_t result = llvm::DWARFUnit::getFirstChild(a2, a3);
      if (result)
      {
        uint64_t v27 = v26;
        if (v26)
        {
          uint64_t v28 = result;
          unint64_t result = llvm::DWARFUnit::updateAddressDieMap(v5, result, v26);
          for (uint64_t i = *(unsigned int *)(v27 + 12); i; uint64_t i = *(unsigned int *)(v30 + 12))
          {
            uint64_t v30 = *(void *)(v28 + 288) + 24 * i;
            unint64_t result = llvm::DWARFUnit::updateAddressDieMap(v5, v28, v30);
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFUnit::getSubroutineForAddress(llvm::DWARFUnit *this, unint64_t a2)
{
  llvm::DWARFUnit::extractDIEsIfNeeded(this, 0);
  if (!*((void *)this + 41))
  {
    llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
    uint64_t v13 = *((void *)this + 36);
    uint64_t v14 = *((void *)this + 37);
    if (v13 == v14) {
      long long v15 = 0;
    }
    else {
      long long v15 = this;
    }
    if (v13 == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *((void *)this + 36);
    }
    llvm::DWARFUnit::updateAddressDieMap((uint64_t)this, (uint64_t)v15, v16);
  }
  uint64_t v4 = (void *)((char *)this + 320);
  uint64_t v5 = (void *)*((void *)this + 40);
  if (v5)
  {
    do
    {
      unint64_t v6 = v5[4];
      BOOL v7 = v6 > a2;
      if (v6 <= a2) {
        BOOL v8 = v5 + 1;
      }
      else {
        BOOL v8 = v5;
      }
      if (v7) {
        uint64_t v4 = v5;
      }
      uint64_t v5 = (void *)*v8;
    }
    while (*v8);
  }
  if (v4 == *((void **)this + 39)) {
    return 0;
  }
  char v9 = (void *)*v4;
  if (*v4)
  {
    do
    {
      char v10 = v9;
      char v9 = (void *)v9[1];
    }
    while (v9);
  }
  else
  {
    do
    {
      char v10 = (void *)v4[2];
      BOOL v11 = *v10 == (void)v4;
      uint64_t v4 = v10;
    }
    while (v11);
  }
  if (v10[5] <= a2) {
    return 0;
  }
  else {
    return v10[6];
  }
}

uint64_t llvm::DWARFUnit::getInlinedChainForAddress(llvm::DWARFUnit *a1, unint64_t a2, uint64_t a3)
{
  llvm::DWARFUnit::parseDWO(a1);
  if (*((void *)a1 + 42)) {
    unint64_t v6 = (llvm::DWARFUnit *)*((void *)a1 + 42);
  }
  else {
    unint64_t v6 = a1;
  }
  uint64_t result = llvm::DWARFUnit::getSubroutineForAddress(v6, a2);
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return result;
  }
  uint64_t v10 = v8;
  while (1)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      int v12 = *(unsigned __int16 *)(v11 + 4);
      if (v12 == 29)
      {
        unint64_t v13 = *(unsigned int *)(a3 + 8);
        if (v13 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v14 = (uint64_t *)(*(void *)a3 + 16 * v13);
        *uint64_t v14 = result;
        v14[1] = v10;
        ++*(_DWORD *)(a3 + 8);
        goto LABEL_16;
      }
      if (v12 == 46) {
        break;
      }
    }
LABEL_16:
    unsigned int v15 = *(_DWORD *)(v10 + 8);
    if (v15 != -1)
    {
      uint64_t v16 = *(void *)(result + 288);
      uint64_t v10 = v16 + 24 * v15;
      if (v16) {
        continue;
      }
    }
    return result;
  }
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v18 = (uint64_t *)(*(void *)a3 + 16 * v17);
  *long long v18 = result;
  v18[1] = v10;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t llvm::getDWARFUnitIndex(llvm::DWARFContext *a1, int a2)
{
  if (a2 == 1) {
    return llvm::DWARFContext::getCUIndex(a1);
  }
  else {
    return llvm::DWARFContext::getTUIndex(a1);
  }
}

uint64_t llvm::DWARFUnit::getPreviousSibling(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = v2 == -1 ? 0 : *(_DWORD *)(a2 + 8);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v4 = *(void *)(result + 288);
  unsigned int v5 = -1431655765 * ((unint64_t)(a2 - v4) >> 3) - 1;
  if (v5 == v2) {
    return 0;
  }
  do
  {
    unsigned int v5 = *(_DWORD *)(v4 + 24 * v5 + 8);
    BOOL v6 = v5 == -1;
    if (v5 == -1) {
      unsigned int v5 = 0;
    }
  }
  while (v6 || v5 != v3);
  return result;
}

double sub_1CC6A844C(__n128 *a1, uint64_t a2, int a3, unint64_t a4)
{
  unsigned __int8 v4 = a3;
  memset(v17, 0, sizeof(v17));
  if (!a3)
  {
    if (a4 <= 7)
    {
      uint64_t v20 = 22;
      unint64_t v21 = std::generic_category();
      uint64_t v19 = "insufficient space for 32 bit header prefix";
      sub_1CD06481C();
    }
    unint64_t v18 = a4 - 8;
    if (*(void *)(a2 + 8) > a4 - 1)
    {
      unsigned int v9 = sub_1CD8337FC(a2, &v18, 0);
      if (v9 >= 0xFFFFFFF0)
      {
        uint64_t v10 = std::generic_category();
        uint64_t v20 = 22;
        unint64_t v21 = v10;
        uint64_t v8 = "invalid length";
        goto LABEL_15;
      }
      unsigned int v15 = v9;
      unsigned __int8 v12 = sub_1CD833674(a2, &v18, 0);
      sub_1CD833674(a2, &v18, 0);
      unint64_t v13 = v18;
      unint64_t v14 = v15 - 4;
      goto LABEL_18;
    }
LABEL_11:
    uint64_t v20 = 22;
    unint64_t v21 = std::generic_category();
    uint64_t v19 = "section offset exceeds section size";
    goto LABEL_12;
  }
  if (a3 == 1)
  {
    if (a4 <= 0xF)
    {
      uint64_t v20 = 22;
      unint64_t v21 = std::generic_category();
      uint64_t v19 = "insufficient space for 64 bit header prefix";
      sub_1CD06481C();
    }
    unint64_t v18 = a4 - 16;
    if (*(void *)(a2 + 8) > a4 - 1)
    {
      if (sub_1CD8337FC(a2, &v18, 0) != -1)
      {
        BOOL v7 = std::generic_category();
        uint64_t v20 = 22;
        unint64_t v21 = v7;
        uint64_t v8 = "32 bit contribution referenced from a 64 bit unit";
LABEL_15:
        uint64_t v19 = v8;
LABEL_12:
        sub_1CD06481C();
      }
      unint64_t v11 = sub_1CD833894(a2, &v18, 0);
      unsigned __int8 v12 = sub_1CD833674(a2, &v18, 0);
      sub_1CD833674(a2, &v18, 0);
      unint64_t v13 = v18;
      unint64_t v14 = v11 - 4;
LABEL_18:
      *(void *)unsigned int v17 = v13;
      *(void *)&v17[8] = v14;
      *(_WORD *)&v17[16] = v12;
      v17[18] = 0;
      *(_WORD *)&v17[19] = v4;
      goto LABEL_19;
    }
    goto LABEL_11;
  }
LABEL_19:
  *(void *)&double result = llvm::StrOffsetsContributionDescriptor::validateContributionSize((__n128 *)v17, a2, a1).n128_u64[0];
  return result;
}

unint64_t llvm::DWARFUnit::getLoclistOffset(llvm::DWARFUnit *this, int a2)
{
  uint64_t v3 = *((void *)this + 16);
  uint64_t v2 = *((void *)this + 17);
  uint64_t v4 = *(void *)(v2 + 24);
  long long v8 = *(_OWORD *)(v2 + 8);
  if (*((unsigned char *)this + 35) == 1) {
    int v5 = 8;
  }
  else {
    int v5 = 4;
  }
  if (*((unsigned char *)this + 35) == 1) {
    char v6 = 3;
  }
  else {
    char v6 = 2;
  }
  uint64_t v9 = v4;
  unint64_t v10 = v3 + (a2 << v6);
  return *((void *)this + 16) + llvm::DataExtractor::getUnsigned(&v8, &v10, v5, 0);
}

void sub_1CC6A8724()
{
}

__n128 sub_1CC6A8738(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x70uLL);
  *(void *)uint64_t v2 = &unk_1F2619490;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((void *)v2 + 13) = *(void *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CC6A87B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2619490;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1CC6A8814@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, void *a4@<X3>, void **a5@<X4>, void *a6@<X8>)
{
  unint64_t v8 = *a2;
  int v9 = *a3;
  unint64_t v10 = (void *)*a4;
  unint64_t v11 = *a5;
  unint64_t v29 = *a2;
  uint64_t v12 = *(void *)(result + 16);
  if (v10) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = *(void **)(result + 24);
  }
  char v14 = *(unsigned char *)(result + 48);
  unint64_t v15 = v13[1];
  v24[0] = *v13;
  v24[1] = v15;
  char v25 = v14;
  char v26 = 0;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  if (v15 > v8)
  {
    uint64_t v16 = result;
    *(void *)uint64_t v19 = 0;
    LOBYTE(v19[3]) = 0;
    char v22 = 0;
    __int16 v23 = 0;
    long long v20 = 0u;
    memset(v21, 0, 25);
    __n128 result = llvm::DWARFUnitHeader::extract((uint64_t)v19, *(void *)(result + 8), v24, &v29, v9);
    if (result)
    {
      if (!v11
        && (!*(unsigned char *)(v16 + 49)
         || ((unsigned int v17 = *(llvm::DWARFContext **)(v16 + 8), (v23 & 0xFB) != 2)
           ? (unint64_t CUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getCUIndex(v17))
           : (unint64_t CUIndex = (llvm::DWARFUnitIndex *)llvm::DWARFContext::getTUIndex(v17)),
             (unint64_t v11 = (void *)llvm::DWARFUnitIndex::getFromOffset(CUIndex, v19[0])) == 0))
        || (__n128 result = llvm::DWARFUnitHeader::applyIndexEntry((uint64_t)v19, v11), result))
      {
        operator new();
      }
    }
    *a6 = 0;
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

void *sub_1CC6A8A48(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    long long v6 = result;
    uint64_t v7 = 3 * a4;
    __n128 result = operator new(24 * a4);
    unint64_t v8 = result;
    *long long v6 = result;
    v6[1] = result;
    _OWORD v6[2] = &result[v7];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      __n128 result = memcpy(result, a2, v9);
    }
    v6[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_1CC6A8ADC()
{
}

void *sub_1CC6A8AF0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2619518;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC6A8B38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2619518;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC6A8B64@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::DWARFUnit::getAddrOffsetSectionItem(*(void *)(a1 + 8), *a2, a3);
}

BOOL sub_1CC6A8B70(void *a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  sub_1CC6971D8((uint64_t)&v32, a2);
  if (v37)
  {
    uint64_t v27 = (char *)v32;
    *(void *)&long long v32 = 0;
    uint64_t v30 = v27;
    uint64_t v28 = (char **)a1[1];
    unint64_t v29 = *v28;
    void *v28 = 0;
    sub_1CD5E5368(&v30, &v29, &v31);
    *(void *)a1[1] = v31;
    uint64_t v31 = 0;
    if (v29) {
      (*(void (**)(char *))(*(void *)v29 + 8))(v29);
    }
    if (v30) {
      (*(void (**)(char *))(*(void *)v30 + 8))(v30);
    }
  }
  else
  {
    uint64_t v3 = *a1;
    long long v5 = *(char **)(*a1 + 8);
    unint64_t v4 = *(void *)(*a1 + 16);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v8 = *(char **)v3;
      uint64_t v9 = (uint64_t)&v5[-*(void *)v3] >> 6;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 58) {
        abort();
      }
      uint64_t v11 = v4 - (void)v8;
      if (v11 >> 5 > v10) {
        unint64_t v10 = v11 >> 5;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12 >> 58) {
        sub_1CB833614();
      }
      unint64_t v13 = (char *)operator new(v12 << 6);
      char v14 = &v13[64 * v9];
      long long v15 = v33;
      *(_OWORD *)char v14 = v32;
      *((_OWORD *)v14 + 1) = v15;
      *((void *)v14 + 4) = v14 + 56;
      long long v16 = xmmword_1CDB159A0;
      *(_OWORD *)(v14 + 40) = xmmword_1CDB159A0;
      if (v35)
      {
        sub_1CD426C4C((uint64_t)(v14 + 32), (uint64_t)&v34);
        long long v16 = xmmword_1CDB159A0;
        unint64_t v8 = *(char **)v3;
        long long v5 = *(char **)(v3 + 8);
      }
      unsigned int v17 = &v13[64 * v12];
      uint64_t v7 = v14 + 64;
      if (v5 == v8)
      {
        *(void *)uint64_t v3 = v14;
        *(void *)(v3 + 8) = v7;
        *(void *)(v3 + 16) = v17;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          long long v19 = *(_OWORD *)&v5[v18 - 64];
          long long v20 = *(_OWORD *)&v5[v18 - 48];
          *(void *)&v14[v18 - 32] = &v14[v18 - 8];
          uint64_t v21 = (uint64_t)&v14[v18 - 32];
          *(_OWORD *)(v21 - 32) = v19;
          *(_OWORD *)(v21 - 16) = v20;
          *(_OWORD *)(v21 + 8) = v16;
          if (*(void *)&v5[v18 - 24])
          {
            sub_1CD426C4C(v21, (uint64_t)&v5[v18 - 32]);
            long long v16 = xmmword_1CDB159A0;
          }
          v18 -= 64;
        }
        while (&v5[v18] != v8);
        unint64_t v8 = *(char **)v3;
        char v22 = *(char **)(v3 + 8);
        *(void *)uint64_t v3 = &v14[v18];
        *(void *)(v3 + 8) = v7;
        *(void *)(v3 + 16) = v17;
        while (v22 != v8)
        {
          __int16 v23 = (char *)*((void *)v22 - 4);
          if (v22 - 8 != v23) {
            free(v23);
          }
          v22 -= 64;
        }
      }
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      long long v6 = v33;
      *(_OWORD *)long long v5 = v32;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = v5 + 56;
      *(_OWORD *)(v5 + 40) = xmmword_1CDB159A0;
      if (v35) {
        sub_1CD426C4C((uint64_t)(v5 + 32), (uint64_t)&v34);
      }
      uint64_t v7 = v5 + 64;
    }
    *(void *)(v3 + 8) = v7;
  }
  uint64_t v24 = *(void *)a1[1];
  if (v37)
  {
    uint64_t v25 = v32;
    *(void *)&long long v32 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
  else if (v34 != &v36)
  {
    free(v34);
  }
  return v24 == 0;
}

void llvm::DWARFVerifier::DieRangeInfo::insert(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v7 = (unint64_t *)a1[2];
  long long v6 = (unint64_t *)a1[3];
  if (v6 == v7)
  {
    uint64_t v11 = (unint64_t *)a1[2];
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
    unint64_t v9 = a2[2];
    unint64_t v10 = *a2;
    uint64_t v11 = (unint64_t *)a1[2];
    do
    {
      unint64_t v12 = v8 >> 1;
      unint64_t v13 = &v11[3 * (v8 >> 1)];
      unint64_t v14 = v13[2];
      if (v14 < v9 || v9 >= v14 && (*v13 < v10 || v10 >= *v13 && v13[1] < a2[1]))
      {
        uint64_t v11 = v13 + 3;
        unint64_t v12 = v8 + ~v12;
      }
      unint64_t v8 = v12;
    }
    while (v12);
  }
  if (v6 != v11 && (v48 = v11[2], long long v47 = *(_OWORD *)v11, sub_1CC6A9238(v11, a2))
    || v7 != v11 && (v48 = *(v11 - 1), long long v47 = *(_OWORD *)(v11 - 3), sub_1CC6A9238(v11 - 3, v3)))
  {
    *(_OWORD *)a3 = v47;
    *(void *)(a3 + 16) = v48;
    *(unsigned char *)(a3 + 24) = 1;
    return;
  }
  long long v16 = (unint64_t *)a1[2];
  long long v15 = (unint64_t *)a1[3];
  uint64_t v17 = ((char *)v11 - (char *)v16) / 24;
  uint64_t v18 = &v16[3 * v17];
  unint64_t v19 = a1[4];
  if ((unint64_t)v15 >= v19)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16) + 1;
    if (v24 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v16) >> 3);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v24;
    }
    uint64_t v46 = a3;
    if (v26)
    {
      if (v26 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_58;
      }
      uint64_t v27 = (char *)operator new(24 * v26);
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v30 = &v27[24 * v17];
    uint64_t v31 = &v27[24 * v26];
    if (v17 != v26)
    {
LABEL_49:
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v3;
      *((void *)v30 + 2) = v3[2];
      uint64_t v38 = v30;
      if (v18 != v16)
      {
        __int16 v39 = v18;
        uint64_t v40 = v30;
        do
        {
          long long v41 = *(_OWORD *)(v39 - 3);
          uint64_t v38 = v40 - 24;
          *((void *)v40 - 1) = *(v39 - 1);
          *(_OWORD *)(v40 - 24) = v41;
          v39 -= 3;
          v40 -= 24;
        }
        while (v39 != v16);
      }
      uint64_t v42 = (unint64_t *)a1[3];
      int64_t v43 = (char *)v42 - (char *)v18;
      if (v42 != v18)
      {
        uint64_t v44 = v31;
        memmove(v30 + 24, v18, (char *)v42 - (char *)v18);
        uint64_t v31 = v44;
      }
      long long v45 = (void *)a1[2];
      a1[2] = v38;
      a1[3] = &v30[v43 + 24];
      a1[4] = v31;
      a3 = v46;
      if (v45) {
        operator delete(v45);
      }
      goto LABEL_56;
    }
    if ((char *)v11 - (char *)v16 >= 1)
    {
      uint64_t v32 = v17 + 2;
      if (v17 >= -1) {
        uint64_t v32 = v17 + 1;
      }
      v30 -= 24 * (v32 >> 1);
      goto LABEL_49;
    }
    unint64_t v33 = 2 * v17;
    if (v16 == v11) {
      unint64_t v33 = 1;
    }
    if (v33 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v34 = v33 >> 2;
      uint64_t v35 = 3 * v33;
      uint64_t v36 = (char *)operator new(24 * v33);
      uint64_t v30 = &v36[24 * v34];
      uint64_t v31 = &v36[8 * v35];
      if (v27)
      {
        char v37 = &v36[8 * v35];
        operator delete(v27);
        uint64_t v31 = v37;
        long long v16 = (unint64_t *)a1[2];
      }
      goto LABEL_49;
    }
LABEL_58:
    sub_1CB833614();
  }
  if (v18 == v15)
  {
    long long v29 = *(_OWORD *)v3;
    void v18[2] = v3[2];
    *(_OWORD *)uint64_t v18 = v29;
    a1[3] = v18 + 3;
  }
  else
  {
    long long v20 = (char *)(v18 + 3);
    uint64_t v21 = v15 - 3;
    uint64_t v22 = a1[3];
    while (v21 < v15)
    {
      long long v23 = *(_OWORD *)v21;
      *(void *)(v22 + 16) = v21[2];
      *(_OWORD *)uint64_t v22 = v23;
      v22 += 24;
      v21 += 3;
    }
    a1[3] = v22;
    if (v15 != (unint64_t *)v20) {
      memmove(v18 + 3, &v16[3 * v17], (char *)v15 - v20);
    }
    if (v18 <= v3) {
      v3 += 3 * (a1[3] > (unint64_t)v3);
    }
    long long v28 = *(_OWORD *)v3;
    void v18[2] = v3[2];
    *(_OWORD *)uint64_t v18 = v28;
  }
LABEL_56:
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
}

uint64_t sub_1CC6A9238(unint64_t *a1, unint64_t *a2)
{
  if (a1[2] != a2[2]) {
    return 0;
  }
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  if (v4 >= v2 || v3 >= v5) {
    return 0;
  }
  if (v4 < v3) {
    unint64_t v3 = *a2;
  }
  *a1 = v3;
  if (v2 <= a2[1]) {
    unint64_t v2 = a2[1];
  }
  a1[1] = v2;
  return 1;
}

void *llvm::DWARFVerifier::DieRangeInfo::insert(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) == *(void *)(a2 + 24)) {
    return (void *)(a1 + 48);
  }
  unint64_t v4 = (void **)(a1 + 40);
  unint64_t v5 = *(void **)(a1 + 40);
  long long v6 = (void *)(a1 + 48);
  if (v5 == (void *)(a1 + 48))
  {
LABEL_10:
    unint64_t v10 = sub_1CC6B2DA4(a1 + 40, &v20, a2);
    if (!*v10)
    {
      uint64_t v11 = v10;
      unint64_t v12 = operator new(0x60uLL);
      unint64_t v12[2] = *(_OWORD *)a2;
      *((void *)v12 + 7) = 0;
      *((void *)v12 + 8) = 0;
      *((void *)v12 + 6) = 0;
      sub_1CC6A8A48((void *)v12 + 6, *(const void **)(a2 + 16), *(void *)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
      *((void *)v12 + 10) = 0;
      *((void *)v12 + 9) = v12 + 5;
      *((void *)v12 + 11) = 0;
      unint64_t v13 = *(void **)(a2 + 40);
      unint64_t v14 = (void *)(a2 + 48);
      if (v13 != v14)
      {
        do
        {
          sub_1CC6B2F90((uint64_t)v12 + 72, (void *)v12 + 10, (uint64_t)(v13 + 4), (uint64_t)(v13 + 4));
          long long v15 = (void *)v13[1];
          if (v15)
          {
            do
            {
              long long v16 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              long long v16 = (void *)v13[2];
              BOOL v9 = *v16 == (void)v13;
              unint64_t v13 = v16;
            }
            while (!v9);
          }
          unint64_t v13 = v16;
        }
        while (v16 != v14);
      }
      uint64_t v17 = v20;
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v17;
      *uint64_t v11 = v12;
      uint64_t v18 = (void *)**v4;
      if (v18)
      {
        void *v4 = v18;
        unint64_t v12 = (_OWORD *)*v11;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 48), (uint64_t *)v12);
      ++*(void *)(a1 + 56);
    }
    return (void *)(a1 + 48);
  }
  else
  {
    while ((llvm::DWARFVerifier::DieRangeInfo::intersects((uint64_t)(v5 + 4), a2) & 1) == 0)
    {
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unint64_t v5 = v8;
        }
        while (!v9);
      }
      unint64_t v5 = v8;
      if (v8 == v6) {
        goto LABEL_10;
      }
    }
  }
  return v5;
}

uint64_t llvm::DWARFVerifier::DieRangeInfo::intersects(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unint64_t **)(a1 + 16);
  unint64_t v3 = *(unint64_t **)(a1 + 24);
  unint64_t v4 = *(unint64_t **)(a2 + 16);
  for (uint64_t i = *(unint64_t **)(a2 + 24); v2 != v3 && v4 != i; v2 += 3 * v13)
  {
    unint64_t v7 = *v2;
    if (v2[2] == v4[2])
    {
      unint64_t v8 = v2[1];
      unint64_t v9 = *v4;
      if (v7 != v8)
      {
        unint64_t v10 = v4[1];
        BOOL v11 = v9 == v10 || v9 >= v8;
        if (!v11 && v7 < v10) {
          return 1;
        }
      }
    }
    else
    {
      unint64_t v9 = *v4;
    }
    BOOL v11 = v7 >= v9;
    BOOL v13 = v7 < v9;
    unsigned int v14 = v11;
    v4 += 3 * v14;
  }
  return 0;
}

uint64_t llvm::DWARFVerifier::DieRangeInfo::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unint64_t **)(a2 + 16);
  unint64_t v2 = *(unint64_t **)(a2 + 24);
  if (v3 == v2) {
    return 1;
  }
  unint64_t v5 = *(unint64_t **)(a1 + 16);
  unint64_t v4 = *(unint64_t **)(a1 + 24);
  if (v5 != v4)
  {
    unint64_t v6 = *v3;
    unint64_t v7 = v3[1];
    do
    {
      if (v6 == v7) {
        goto LABEL_10;
      }
      if (*v5 > v6) {
        return 0;
      }
      unint64_t v8 = v5[1];
      if (v7 <= v8)
      {
LABEL_10:
        if (v3 + 3 == v2) {
          return 1;
        }
        unint64_t v6 = v3[3];
        unint64_t v7 = v3[4];
        v3 += 3;
      }
      else
      {
        if (v6 <= v8) {
          unint64_t v6 = v5[1];
        }
        v5 += 3;
      }
    }
    while (v5 != v4);
  }
  return 0;
}

uint64_t llvm::DWARFVerifier::verifyUnitHeader(llvm::raw_ostream **a1, void *a2, unint64_t *a3, int a4, unsigned char *a5, BOOL *a6)
{
  unint64_t v11 = *a3;
  unint64_t InitialLength = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a2, a3, 0);
  *a6 = v13 == 1;
  unsigned int v49 = sub_1CD833674((uint64_t)a2, a3, 0);
  unint64_t v51 = a6;
  if (v49 < 5)
  {
    *a5 = 0;
    if (*a6) {
      unint64_t v19 = sub_1CD833894((uint64_t)a2, a3, 0);
    }
    else {
      unint64_t v19 = sub_1CD8337FC((uint64_t)a2, a3, 0);
    }
    unint64_t v21 = *a3;
    BOOL v20 = 1;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      unsigned int v18 = *(unsigned __int8 *)(*a2 + v21);
      ++*a3;
      BOOL v20 = 1;
    }
    else
    {
      unsigned int v18 = 0;
    }
  }
  else
  {
    unint64_t v14 = v11;
    unint64_t v15 = *a3;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      char v16 = *(unsigned char *)(*a2 + v15);
      ++*a3;
    }
    else
    {
      char v16 = 0;
    }
    *a5 = v16;
    unint64_t v17 = *a3;
    if (llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0))
    {
      unsigned int v18 = *(unsigned __int8 *)(*a2 + v17);
      ++*a3;
    }
    else
    {
      unsigned int v18 = 0;
    }
    unint64_t v11 = v14;
    if (*a6) {
      unint64_t v19 = sub_1CD833894((uint64_t)a2, a3, 0);
    }
    else {
      unint64_t v19 = sub_1CD8337FC((uint64_t)a2, a3, 0);
    }
    BOOL v20 = *a5 - 1 < 6;
  }
  DebugAbbrev = (llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrev(a1[1]);
  AbbreviationDeclarationSet = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(DebugAbbrev, (void **)v19);
  unint64_t v24 = v11;
  unint64_t v25 = InitialLength + v11;
  unint64_t v26 = a2[1];
  unsigned int v27 = v49 - 6;
  unsigned int v28 = v18;
  long long v29 = AbbreviationDeclarationSet;
  BOOL v30 = sub_1CC687520(v28);
  BOOL v31 = v26 > v25 + 3 && v27 >= 0xFFFFFFFC;
  int v32 = !v30;
  if (!v31) {
    int v32 = 1;
  }
  if (!v29) {
    int v32 = 1;
  }
  int v33 = v32 | !v20;
  if (v33 == 1)
  {
    BOOL v50 = v30;
    uint64_t v36 = llvm::WithColor::error(*a1, "", 0, 0);
    v52[0] = &unk_1F2618A28;
    v52[1] = "Units[%d] - start offset: 0x%08llx \n";
    int v53 = a4;
    unint64_t v54 = v24;
    llvm::raw_ostream::operator<<(v36, (uint64_t)v52);
    if (v26 <= v25 + 3)
    {
      uint64_t v40 = llvm::WithColor::note(*a1, "", 0, 0);
      long long v41 = (void *)*((void *)v40 + 4);
      if (*((void *)v40 + 3) - (void)v41 > 0x43uLL)
      {
        qmemcpy(v41, "The length for this unit is too large for the .debug_info provided.\n", 68);
        *((void *)v40 + 4) += 68;
      }
      else
      {
        llvm::raw_ostream::write(v40, "The length for this unit is too large for the .debug_info provided.\n", 0x44uLL);
      }
    }
    BOOL v37 = v50;
    if (v27 <= 0xFFFFFFFB)
    {
      uint64_t v42 = llvm::WithColor::note(*a1, "", 0, 0);
      int64_t v43 = (void *)*((void *)v42 + 4);
      if (*((void *)v42 + 3) - (void)v43 > 0x2CuLL)
      {
        qmemcpy(v43, "The 16 bit unit header version is not valid.\n", 45);
        *((void *)v42 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(v42, "The 16 bit unit header version is not valid.\n", 0x2DuLL);
      }
      BOOL v37 = v50;
      if (v20)
      {
LABEL_29:
        if (v29) {
          goto LABEL_30;
        }
        goto LABEL_41;
      }
    }
    else if (v20)
    {
      goto LABEL_29;
    }
    uint64_t v44 = llvm::WithColor::note(*a1, "", 0, 0);
    long long v45 = (void *)*((void *)v44 + 4);
    if (*((void *)v44 + 3) - (void)v45 > 0x24uLL)
    {
      qmemcpy(v45, "The unit type encoding is not valid.\n", 37);
      *((void *)v44 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v44, "The unit type encoding is not valid.\n", 0x25uLL);
    }
    BOOL v37 = v50;
    if (v29)
    {
LABEL_30:
      if (!v37)
      {
        uint64_t v38 = llvm::WithColor::note(*a1, "", 0, 0);
        __int16 v39 = (void *)*((void *)v38 + 4);
        if (*((void *)v38 + 3) - (void)v39 > 0x20uLL)
        {
          qmemcpy(v39, "The address size is unsupported.\n", 33);
          *((void *)v38 + 4) += 33;
        }
        else
        {
          llvm::raw_ostream::write(v38, "The address size is unsupported.\n", 0x21uLL);
        }
      }
      goto LABEL_23;
    }
LABEL_41:
    uint64_t v46 = llvm::WithColor::note(*a1, "", 0, 0);
    long long v47 = (void *)*((void *)v46 + 4);
    if (*((void *)v46 + 3) - (void)v47 > 0x37uLL)
    {
      qmemcpy(v47, "The offset into the .debug_abbrev section is not valid.\n", 56);
      *((void *)v46 + 4) += 56;
    }
    else
    {
      llvm::raw_ostream::write(v46, "The offset into the .debug_abbrev section is not valid.\n", 0x38uLL);
    }
    BOOL v37 = v50;
    goto LABEL_30;
  }
LABEL_23:
  uint64_t result = v33 ^ 1u;
  uint64_t v35 = 12;
  if (!*v51) {
    uint64_t v35 = 4;
  }
  *a3 = v35 + v25;
  return result;
}

llvm::raw_ostream *llvm::DWARFVerifier::error(llvm::raw_ostream **this)
{
  return llvm::WithColor::error(*this, "", 0, 0);
}

llvm::raw_ostream *llvm::DWARFVerifier::note(llvm::raw_ostream **this)
{
  return llvm::WithColor::note(*this, "", 0, 0);
}

uint64_t llvm::DWARFVerifier::verifyName(llvm::raw_ostream **this, llvm::DWARFUnit **a2)
{
  int64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v35 = 0;
  char v39 = 0;
  uint64_t v40 = 0;
  uint64_t v42 = (void **)&v43;
  int v41 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = &unk_1F2646F30;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  __s1 = 0;
  size_t __n = 0;
  llvm::DWARFDie::getFullName(a2, (uint64_t)&v34, (uint64_t)&__s1);
  if (v38 != v36)
  {
    uint64_t v38 = v36;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v34, v36);
  }
  uint64_t v4 = HIBYTE(v33) & 0x7F;
  if (v33 >= 0) {
    size_t v5 = HIBYTE(v33) & 0x7F;
  }
  else {
    size_t v5 = __n;
  }
  if (!v5)
  {
LABEL_18:
    uint64_t v9 = 0;
    if ((v33 & 0x8000000000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_19;
  }
  uint64_t v6 = HIBYTE(v45) & 0x7F;
  if (v45 < 0) {
    uint64_t v6 = v44;
  }
  if (v5 == v6)
  {
    if (v45 >= 0) {
      unint64_t v7 = (void **)&v43;
    }
    else {
      unint64_t v7 = v43;
    }
    if (v33 < 0)
    {
      unint64_t v10 = __s1;
      if (!memcmp(__s1, v7, __n))
      {
        uint64_t v9 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      if ((v33 & 0x7F00000000000000) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_38;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v7)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        unint64_t v7 = (void **)((char *)v7 + 1);
        if (!--v4) {
          goto LABEL_18;
        }
      }
    }
  }
  unint64_t v11 = llvm::WithColor::error(*this, "", 0, 0);
  unint64_t v12 = v11;
  char v13 = (void *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v13 > 0x3AuLL)
  {
    qmemcpy(v13, "Simplified template DW_AT_name could not be reconstituted:\n", 59);
    *((void *)v11 + 4) += 59;
  }
  else
  {
    llvm::raw_ostream::write(v11, "Simplified template DW_AT_name could not be reconstituted:\n", 0x3BuLL);
  }
  unint64_t v24 = "         original: {0}\n    reconstituted: {1}\n";
  uint64_t v25 = 46;
  unint64_t v26 = v30;
  uint64_t v27 = 2;
  v28[0] = &unk_1F2619560;
  v28[1] = &__s1;
  v29[0] = &unk_1F2619560;
  v29[1] = &v43;
  v30[0] = v28;
  v30[1] = v29;
  sub_1CD862C68((uint64_t)&v24, v12);
  unint64_t v14 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)this, (const llvm::DWARFDie *)a2, 0);
  unint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 10);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 10;
  }
  char v16 = *a2;
  llvm::DWARFUnit::extractDIEsIfNeeded(v16, 1);
  uint64_t v17 = *((void *)v16 + 36);
  uint64_t v18 = *((void *)v16 + 37);
  BOOL v19 = v17 == v18;
  if (v17 == v18) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v16;
  }
  if (v19) {
    uint64_t v17 = 0;
  }
  unint64_t v24 = (const char *)v20;
  uint64_t v25 = v17;
  unint64_t v21 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)this, (const llvm::DWARFDie *)&v24, 0);
  uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
  if ((unint64_t)v22 >= *((void *)v21 + 3))
  {
    llvm::raw_ostream::write(v21, 10);
  }
  else
  {
    *((void *)v21 + 4) = v22 + 1;
    unsigned char *v22 = 10;
  }
  uint64_t v9 = 1;
  if (v33 < 0)
  {
LABEL_19:
    unint64_t v10 = __s1;
LABEL_22:
    operator delete(v10);
  }
LABEL_38:
  unint64_t v34 = &unk_1F2646B98;
  if (v41 == 1 && v36) {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8077774924);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  return v9;
}

uint64_t llvm::DWARFVerifier::dump(llvm::DWARFVerifier *this, const llvm::DWARFDie *a2, uint64_t a3)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::raw_ostream **)this;
  *(_OWORD *)unint64_t v8 = *((_OWORD *)this + 1);
  *(void *)&v8[14] = *(void *)((char *)this + 30);
  sub_1CC66D518((uint64_t)&v9, (uint64_t)this + 40);
  sub_1CC66D518((uint64_t)v10, (uint64_t)this + 72);
  llvm::DWARFDie::dump((uint64_t *)a2, v6, a3, (uint64_t)v8);
  sub_1CD5E15A8(v8);
  return *(void *)this;
}

uint64_t llvm::DWARFVerifier::verifyUnitContents(llvm::raw_ostream **a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 0);
  int v6 = 0;
  uint64_t v7 = -1431655765 * ((*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3);
  if (v7)
  {
    uint64_t v25 = 0;
    int v6 = 0;
    do
    {
      uint64_t v26 = *(void *)(a2 + 288) + 24 * v25;
      uint64_t v86 = (llvm::DWARFUnit *)a2;
      uint64_t v87 = v26;
      uint64_t v27 = *(void *)(v26 + 16);
      if (v27 && *(_WORD *)(v27 + 4))
      {
        llvm::DWARFDie::attributes((llvm::DWARFDie *)&v86, (uint64_t)&v80);
        int v28 = v84;
        uint64_t v79 = v84;
        long long v76 = v82;
        long long v77 = v83[0];
        long long v78 = v83[1];
        long long v74 = v80;
        long long v75 = *(_OWORD *)__p;
        int v29 = v85;
        while (v28 != v29)
        {
          v73[0] = v75;
          v73[1] = v76;
          v73[2] = v77;
          v73[3] = v78;
          int v30 = llvm::DWARFVerifier::verifyDebugInfoAttribute((uint64_t)a1, (uint64_t)&v86, (uint64_t)v73);
          int v31 = llvm::DWARFVerifier::verifyDebugInfoForm((uint64_t)a1, (uint64_t)&v86, (llvm::DWARFFormValue *)v73, a3, a4);
          int v32 = *(const llvm::DWARFAbbreviationDeclaration **)(*((void *)&v74 + 1) + 16);
          if (v32)
          {
            llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)&v74, v32, v28 + 1);
            int v28 = v79;
          }
          v6 += v30 + v31;
        }
        int v33 = llvm::DWARFVerifier::verifyName(a1, &v86);
        uint64_t v34 = *(void *)(v87 + 16);
        if (v34)
        {
          if (*(unsigned char *)(v34 + 7))
          {
            if (v86)
            {
              if (llvm::DWARFUnit::getFirstChild((uint64_t)v86, v87))
              {
                if (v35)
                {
                  uint64_t v36 = *(void *)(v35 + 16);
                  if (!v36 || !*(_WORD *)(v36 + 4))
                  {
                    uint64_t v37 = llvm::WithColor::warning(*a1, "", 0, 0);
                    uint64_t v38 = 0;
                    uint64_t v39 = *(void *)(v87 + 16);
                    if (v39) {
                      uint64_t v38 = (llvm::dwarf *)*(unsigned __int16 *)(v39 + 4);
                    }
                    int v41 = llvm::dwarf::TagString(v38);
                    size_t v42 = v40;
                    int64_t v43 = (void *)*((void *)v37 + 4);
                    if (v40 <= *((void *)v37 + 3) - (void)v43)
                    {
                      if (v40)
                      {
                        memcpy(v43, v41, v40);
                        int64_t v43 = (void *)(*((void *)v37 + 4) + v42);
                        *((void *)v37 + 4) = v43;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v37, v41, v40);
                      int64_t v43 = (void *)*((void *)v37 + 4);
                    }
                    if (*((void *)v37 + 3) - (void)v43 > 0x2DuLL)
                    {
                      qmemcpy(v43, " has DW_CHILDREN_yes but DIE has no children: ", 46);
                      *((void *)v37 + 4) += 46;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v37, " has DW_CHILDREN_yes but DIE has no children: ", 0x2EuLL);
                    }
                    uint64_t v44 = *a1;
                    long long v93 = 0u;
                    v88[2] = 0;
                    long long v90 = 0u;
                    v88[0] = -1;
                    v88[1] = 0x1040000FFFFFFFFLL;
                    uint64_t v89 = &unk_1F26187D0;
                    *(void *)&long long v90 = llvm::WithColor::defaultErrorHandler;
                    uint64_t v91 = &v89;
                    unint64_t v92 = &unk_1F26187D0;
                    *(void *)&long long v93 = llvm::WithColor::defaultWarningHandler;
                    uint64_t v94 = &v92;
                    llvm::DWARFDie::dump((uint64_t *)&v86, v44, 0, (uint64_t)v88);
                    sub_1CD5E15A8(v88);
                  }
                }
              }
            }
          }
        }
        v6 += v33 + llvm::DWARFVerifier::verifyDebugInfoCallSite(a1, (const llvm::DWARFDie *)&v86);
      }
      ++v25;
    }
    while (v25 != v7);
  }
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 0);
  uint64_t v9 = *(void *)(a2 + 288);
  uint64_t v8 = *(void *)(a2 + 296);
  BOOL v10 = v9 == v8;
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a2;
  }
  if (v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(a2 + 288);
  }
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v12;
  if (v10 || v12 == 0)
  {
    unint64_t v57 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v58 = (void *)*((void *)v57 + 4);
    if (*((void *)v57 + 3) - (void)v58 > 0x1DuLL)
    {
      qmemcpy(v58, "Compilation unit without DIE.\n", 30);
      *((void *)v57 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v57, "Compilation unit without DIE.\n", 0x1EuLL);
    }
    return (v6 + 1);
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 16);
    if (!v14
      || ((int v15 = *(unsigned __int16 *)(v14 + 4), (v15 - 17) <= 0x39)
        ? (BOOL v16 = ((1 << (v15 - 17)) & 0x201080000000001) == 0)
        : (BOOL v16 = 1),
          v16))
    {
      uint64_t v52 = llvm::WithColor::error(*a1, "", 0, 0);
      int v53 = v52;
      unint64_t v54 = (void *)*((void *)v52 + 4);
      if (*((void *)v52 + 3) - (void)v54 > 0x2CuLL)
      {
        qmemcpy(v54, "Compilation unit root DIE is not a unit DIE: ", 45);
        *((void *)v52 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(v52, "Compilation unit root DIE is not a unit DIE: ", 0x2DuLL);
      }
      uint64_t v55 = *(void *)(v12 + 16);
      if (v55) {
        unint64_t v56 = (llvm::dwarf *)*(unsigned __int16 *)(v55 + 4);
      }
      else {
        unint64_t v56 = 0;
      }
      uint64_t v60 = llvm::dwarf::TagString(v56);
      size_t v61 = v59;
      uint64_t v62 = (_WORD *)*((void *)v53 + 4);
      if (v59 <= *((void *)v53 + 3) - (void)v62)
      {
        if (v59)
        {
          memcpy(v62, v60, v59);
          uint64_t v62 = (_WORD *)(*((void *)v53 + 4) + v61);
          *((void *)v53 + 4) = v62;
        }
      }
      else
      {
        llvm::raw_ostream::write(v53, v60, v59);
        uint64_t v62 = (_WORD *)*((void *)v53 + 4);
      }
      if (*((void *)v53 + 3) - (void)v62 > 1uLL)
      {
        _WORD *v62 = 2606;
        *((void *)v53 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v53, ".\n", 2uLL);
      }
      ++v6;
      uint64_t v14 = *(void *)(v9 + 16);
      int v17 = *(unsigned __int8 *)(a2 + 96);
      if (v14) {
        int v15 = *(unsigned __int16 *)(v14 + 4);
      }
      else {
        int v15 = 0;
      }
    }
    else
    {
      int v17 = *(unsigned __int8 *)(a2 + 96);
    }
    unsigned int v18 = v17 - 1;
    switch(v17)
    {
      case 1:
        if (v15 == 17) {
          goto LABEL_23;
        }
        goto LABEL_64;
      case 2:
        if (v15 != 65) {
          goto LABEL_64;
        }
        goto LABEL_23;
      case 3:
        if (v15 != 60) {
          goto LABEL_64;
        }
        goto LABEL_23;
      case 4:
        if (v15 != 74) {
          goto LABEL_64;
        }
        goto LABEL_23;
      case 5:
      case 6:
        unsigned int v19 = v15 - 17;
        BOOL v20 = v19 > 0x39;
        uint64_t v21 = (1 << v19) & 0x201080000000001;
        if (v20 || v21 == 0) {
          goto LABEL_64;
        }
LABEL_23:
        if (v14) {
          goto LABEL_24;
        }
        goto LABEL_26;
      default:
LABEL_64:
        uint64_t v45 = llvm::WithColor::error(*a1, "", 0, 0);
        uint64_t v46 = v45;
        long long v47 = (void *)*((void *)v45 + 4);
        if (*((void *)v45 + 3) - (void)v47 > 0x16uLL)
        {
          qmemcpy(v47, "Compilation unit type (", 23);
          *((void *)v45 + 4) += 23;
        }
        else
        {
          llvm::raw_ostream::write(v45, "Compilation unit type (", 0x17uLL);
        }
        if (v18 >= 6) {
          goto LABEL_69;
        }
        unint64_t v48 = off_1E6849C18[(char)v18];
        size_t v49 = qword_1CFB1BBC0[(char)v18];
        BOOL v50 = (void *)*((void *)v46 + 4);
        if (v49 <= *((void *)v46 + 3) - (void)v50)
        {
          memcpy(v50, v48, v49);
          unint64_t v51 = (_OWORD *)(*((void *)v46 + 4) + v49);
          *((void *)v46 + 4) = v51;
        }
        else
        {
          llvm::raw_ostream::write(v46, v48, v49);
LABEL_69:
          unint64_t v51 = (_OWORD *)*((void *)v46 + 4);
        }
        if (*((void *)v46 + 3) - (void)v51 > 0xFuLL)
        {
          _OWORD *v51 = *(_OWORD *)") and root DIE (";
          *((void *)v46 + 4) += 16;
        }
        else
        {
          llvm::raw_ostream::write(v46, ") and root DIE (", 0x10uLL);
        }
        uint64_t v65 = *(void *)(v9 + 16);
        if (v65) {
          int v66 = (llvm::dwarf *)*(unsigned __int16 *)(v65 + 4);
        }
        else {
          int v66 = 0;
        }
        unint64_t v68 = llvm::dwarf::TagString(v66);
        size_t v69 = v67;
        uint64_t v70 = (_OWORD *)*((void *)v46 + 4);
        if (v67 <= *((void *)v46 + 3) - (void)v70)
        {
          if (v67)
          {
            memcpy(v70, v68, v67);
            uint64_t v70 = (_OWORD *)(*((void *)v46 + 4) + v69);
            *((void *)v46 + 4) = v70;
          }
        }
        else
        {
          llvm::raw_ostream::write(v46, v68, v67);
          uint64_t v70 = (_OWORD *)*((void *)v46 + 4);
        }
        if (*((void *)v46 + 3) - (void)v70 > 0xFuLL)
        {
          *uint64_t v70 = *(_OWORD *)") do not match.\n";
          *((void *)v46 + 4) += 16;
        }
        else
        {
          llvm::raw_ostream::write(v46, ") do not match.\n", 0x10uLL);
        }
        ++v6;
        uint64_t v14 = *(void *)(v12 + 16);
        if (v14)
        {
LABEL_24:
          if (*(_WORD *)(v14 + 4) == 74 && *(unsigned char *)(v14 + 7))
          {
            long long v63 = llvm::WithColor::error(*a1, "", 0, 0);
            long long v64 = (void *)*((void *)v63 + 4);
            if (*((void *)v63 + 3) - (void)v64 > 0x27uLL)
            {
              qmemcpy(v64, "Skeleton compilation unit has children.\n", 40);
              *((void *)v63 + 4) += 40;
            }
            else
            {
              llvm::raw_ostream::write(v63, "Skeleton compilation unit has children.\n", 0x28uLL);
            }
            ++v6;
          }
        }
LABEL_26:
        long long v80 = 0u;
        *(_OWORD *)std::string __p = 0u;
        v83[0] = 0uLL;
        *(void *)&long long v82 = 0;
        *((void *)&v82 + 1) = v83;
        uint64_t v23 = llvm::DWARFVerifier::verifyDieRanges((uint64_t)a1, (llvm::DWARFDie *)&v74, (const llvm::DWARFDie *)&v80)+ v6;
        sub_1CC6B2CA0(*(void **)&v83[0]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
    }
  }
  return v23;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  int v6 = *(llvm::DWARFUnit **)a2;
  uint64_t v7 = (llvm::dwarf *)*(unsigned __int16 *)(a3 + 12);
  if (*(unsigned __int16 *)(a3 + 12) <= 0xFu)
  {
    if (v7 != 2) {
      return v5;
    }
    llvm::DWARFDie::getLocations((llvm::DWARFUnit **)a2, (llvm::dwarf *)2, (uint64_t)&v148);
    uint64_t v8 = v148;
    if (v151)
    {
      char v148 = 0;
      if (v8)
      {
        if ((*(unsigned int (**)(long long *, void *))(*(void *)v8 + 48))(v8, &llvm::ErrorList::ID))
        {
          int v32 = (uint64_t *)*((void *)v8 + 1);
          int v33 = (uint64_t *)*((void *)v8 + 2);
          if (v32 == v33)
          {
            uint64_t v34 = 0;
          }
          else
          {
            uint64_t v34 = 0;
            do
            {
              std::string::pointer v136 = v34;
              uint64_t v35 = *v32;
              uint64_t *v32 = 0;
              if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v35 + 48))(v35, &llvm::ResolverError::ID))
              {
                int v36 = *((unsigned __int8 *)v6 + 209);
                if (*((unsigned char *)v6 + 209)) {
                  uint64_t v37 = 0;
                }
                else {
                  uint64_t v37 = v35;
                }
                *(void *)&long long v132 = v37;
                if (v36) {
                  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
                }
              }
              else
              {
                *(void *)&long long v132 = v35;
              }
              sub_1CD451630(&v136, (char **)&v132, &v143.__r_.__value_.__l.__data_);
              uint64_t v34 = (char *)v143.__r_.__value_.__r.__words[0];
              v143.__r_.__value_.__r.__words[0] = 0;
              if ((void)v132) {
                (*(void (**)(void))(*(void *)v132 + 8))(v132);
              }
              if (v136) {
                (*(void (**)(std::string::pointer))(*(void *)v136 + 8))(v136);
              }
              ++v32;
            }
            while (v32 != v33);
          }
          (*(void (**)(long long *))(*(void *)v8 + 8))(v8);
          uint64_t v8 = (long long *)v34;
          if (!v34) {
            goto LABEL_88;
          }
        }
        else if (((*(uint64_t (**)(long long *, void *))(*(void *)v8 + 48))(v8, &llvm::ResolverError::ID) & 1) != 0 {
               && *((unsigned char *)v6 + 209))
        }
        {
          (*(void (**)(long long *))(*(void *)v8 + 8))(v8);
          goto LABEL_88;
        }
        uint64_t v135 = v8;
        sub_1CD4FB504((uint64_t *)&v135, &v143);
        long long v74 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        long long v76 = llvm::Twine::printOneChild(v74, v74, (uint64_t)&v143, v75, 4);
        llvm::Twine::printOneChild(v76, v74, v77, v78, 1);
        uint64_t v79 = (unsigned char *)*((void *)v74 + 4);
        if ((unint64_t)v79 >= *((void *)v74 + 3))
        {
          llvm::raw_ostream::write(v74, 10);
        }
        else
        {
          *((void *)v74 + 4) = v79 + 1;
          *uint64_t v79 = 10;
        }
        uint64_t v94 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)a2, 0);
        uint64_t v95 = (unsigned char *)*((void *)v94 + 4);
        if ((unint64_t)v95 >= *((void *)v94 + 3))
        {
          llvm::raw_ostream::write(v94, 10);
        }
        else
        {
          *((void *)v94 + 4) = v95 + 1;
          *uint64_t v95 = 10;
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        if (v135) {
          (*(void (**)(long long *))(*(void *)v135 + 8))(v135);
        }
        uint64_t v5 = 1;
        goto LABEL_89;
      }
    }
    else
    {
      uint64_t v9 = v149;
      if (v148 != v149)
      {
        uint64_t v5 = 0;
        do
        {
          uint64_t v11 = *((void *)v8 + 4);
          uint64_t v10 = *((void *)v8 + 5);
          unsigned __int8 v12 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 520) + 40))(*(void *)(*(void *)(a1 + 8) + 520));
          char v13 = *((unsigned char *)v6 + 34);
          __int16 v14 = *((unsigned __int8 *)v6 + 35) | 0x100;
          *(void *)&long long v132 = v11;
          *((void *)&v132 + 1) = v10;
          LOWORD(v133) = v12;
          BYTE8(v133) = v13;
          *(_WORD *)((char *)&v133 + 9) = v14;
          sub_1CC6A2264((uint64_t)&v143, &v132, 0);
          sub_1CC6A2264((uint64_t)&v136, &v132, *((unint64_t *)&v132 + 1));
          BOOL v15 = v143.__r_.__value_.__l.__data_ == v136 && v143.__r_.__value_.__l.__size_ == v137;
          LOBYTE(v16) = !v15;
          if (!v15 && !v143.__r_.__value_.__s.__data_[20])
          {
            do
            {
              sub_1CC6A144C((unint64_t *)&v143);
              BOOL v16 = v143.__r_.__value_.__l.__data_ != v136 || v143.__r_.__value_.__l.__size_ != v137;
            }
            while (v16 && v143.__r_.__value_.__s.__data_[20] == 0);
          }
          if (v16 || !llvm::DWARFExpression::verify((llvm::DWARFExpression *)&v132, v6))
          {
            unsigned int v19 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
            uint64_t v21 = llvm::Twine::printOneChild(v19, v19, (uint64_t)"DIE contains invalid DWARF expression:", v20, 3);
            llvm::Twine::printOneChild(v21, v19, v22, v23, 1);
            unint64_t v24 = (unsigned char *)*((void *)v19 + 4);
            if ((unint64_t)v24 >= *((void *)v19 + 3))
            {
              llvm::raw_ostream::write(v19, 10);
            }
            else
            {
              *((void *)v19 + 4) = v24 + 1;
              *unint64_t v24 = 10;
            }
            uint64_t v5 = (v5 + 1);
            uint64_t v25 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)a2, 0);
            uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
            if ((unint64_t)v26 >= *((void *)v25 + 3))
            {
              llvm::raw_ostream::write(v25, 10);
            }
            else
            {
              *((void *)v25 + 4) = v26 + 1;
              *uint64_t v26 = 10;
            }
          }
          v8 += 4;
        }
        while (v8 != v9);
        goto LABEL_89;
      }
    }
LABEL_88:
    uint64_t v5 = 0;
LABEL_89:
    if (v151)
    {
      size_t v61 = v148;
      char v148 = 0;
      if (v61) {
        (*(void (**)(long long *))(*(void *)v61 + 8))(v61);
      }
    }
    else
    {
      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
      sub_1CC683E70((void ***)&v143);
    }
    return v5;
  }
  if (*(unsigned __int16 *)(a3 + 12) <= 0x46u)
  {
    if (v7 == 16)
    {
      if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
      {
        std::string::pointer v136 = *(std::string::pointer *)(a3 + 24);
        uint64_t v137 = 1;
        if ((unint64_t)v136 < *(void *)(*((void *)v6 + 18) + 8)) {
          return 0;
        }
        v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x8}";
        v143.__r_.__value_.__l.__size_ = 6;
        v143.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
        uint64_t v144 = 1;
        uint64_t v145 = &unk_1F2619590;
        uint64_t v146 = (long long *)&v136;
        v147[0] = &v145;
        uint64_t v55 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        unint64_t v57 = v55;
        uint64_t v58 = "DW_AT_stmt_list offset is beyond .debug_line bounds: ";
        size_t v59 = v55;
        char v60 = 3;
LABEL_111:
        size_t v69 = llvm::Twine::printOneChild(v55, v59, (uint64_t)v58, v56, v60);
        long long v71 = &v143;
        char v72 = v57;
        char v73 = 6;
LABEL_154:
        llvm::Twine::printOneChild(v69, v72, (uint64_t)v71, v70, v73);
        size_t v105 = (unsigned char *)*((void *)v57 + 4);
        if ((unint64_t)v105 < *((void *)v57 + 3))
        {
          *((void *)v57 + 4) = v105 + 1;
LABEL_156:
          *size_t v105 = 10;
LABEL_159:
          unsigned int v107 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)a2, 0);
          unsigned int v108 = (unsigned char *)*((void *)v107 + 4);
          if ((unint64_t)v108 >= *((void *)v107 + 3))
          {
            llvm::raw_ostream::write(v107, 10);
          }
          else
          {
            *((void *)v107 + 4) = v108 + 1;
            unsigned char *v108 = 10;
          }
          return 1;
        }
        uint64_t v106 = v57;
        goto LABEL_158;
      }
      unint64_t v100 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      unint64_t v57 = v100;
      uint64_t v102 = "DIE has invalid DW_AT_stmt_list encoding:";
LABEL_149:
      size_t v69 = llvm::Twine::printOneChild(v100, v100, (uint64_t)v102, v101, 3);
      char v72 = v57;
      char v73 = 1;
      goto LABEL_154;
    }
    if (v7 == 49) {
      goto LABEL_71;
    }
    if (v7 != 58) {
      return v5;
    }
LABEL_75:
    unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)(a3 + 16));
    v131[0] = AsUnsignedConstant;
    v131[1] = v47;
    if ((_BYTE)v47)
    {
      unint64_t v48 = AsUnsignedConstant;
      if (*((unsigned char *)v6 + 209) && (*((unsigned char *)v6 + 96) & 0xFB) != 2) {
        return 0;
      }
      llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)v6 + 1), v6);
      if (v49)
      {
        if (*(unsigned __int16 *)(v49 + 16) < 5u)
        {
          if (v48)
          {
            uint64_t v62 = *(void *)(v49 + 96);
            uint64_t v63 = *(void *)(v49 + 104);
            if (0xF0F0F0F0F0F0F0F1 * ((v63 - v62) >> 3) >= v48) {
              return 0;
            }
          }
          else
          {
            uint64_t v62 = *(void *)(v49 + 96);
            uint64_t v63 = *(void *)(v49 + 104);
          }
          if (v62 != v63)
          {
            unint64_t v53 = 0xF0F0F0F0F0F0F0F1 * ((v63 - v62) >> 3);
            unint64_t v54 = "1-";
LABEL_164:
            v130[0] = v53;
            v130[1] = 1;
            __int16 v122 = 1283;
            v121[0] = "DIE has ";
            v121[2] = llvm::dwarf::AttributeString(v7);
            v121[3] = v109;
            v123[0] = v121;
            v123[2] = " with an invalid file index ";
            __int16 v124 = 770;
            v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
            v143.__r_.__value_.__l.__size_ = 3;
            v143.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
            uint64_t v144 = 1;
            uint64_t v145 = &unk_1F2619590;
            uint64_t v146 = (long long *)v131;
            v147[0] = &v145;
            v125[0] = v123;
            v125[2] = &v143;
            __int16 v126 = 1538;
            *(void *)&long long v127 = v125;
            *(void *)&long long v128 = " (valid values are [";
            LOWORD(v129) = 770;
            if (*v54)
            {
              *(void *)&long long v132 = &v127;
              *(void *)&long long v133 = v54;
              LOWORD(v134) = 770;
              long long v113 = (long long *)v142;
              std::string::pointer v136 = "{0}";
              uint64_t v137 = 3;
              uint64_t v138 = (std::string *)v142;
              uint64_t v139 = 1;
              char v140 = &unk_1F2619590;
              unint64_t v141 = v130;
              v142[0] = &v140;
              char v114 = 2;
              char v115 = &v132;
            }
            else
            {
              long long v132 = v127;
              long long v133 = v128;
              uint64_t v134 = v129;
              uint64_t v110 = &v136;
              std::string::pointer v136 = "{0}";
              uint64_t v137 = 3;
              uint64_t v138 = (std::string *)v142;
              uint64_t v139 = 1;
              char v140 = &unk_1F2619590;
              unint64_t v141 = v130;
              v142[0] = &v140;
              if (v129 == 1)
              {
                char v148 = (long long *)&v136;
                __int16 v152 = 262;
                char v116 = 6;
LABEL_177:
                int v117 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
                __n128 v119 = llvm::Twine::printOneChild(v117, v117, (uint64_t)v110, v118, v116);
                llvm::Twine::printOneChild(v119, v117, (uint64_t)"])", v120, 3);
                size_t v105 = (unsigned char *)*((void *)v117 + 4);
                if ((unint64_t)v105 < *((void *)v117 + 3))
                {
                  *((void *)v117 + 4) = v105 + 1;
                  goto LABEL_156;
                }
                uint64_t v106 = v117;
LABEL_158:
                llvm::raw_ostream::write(v106, 10);
                goto LABEL_159;
              }
              long long v113 = (long long *)*((void *)&v132 + 1);
              char v115 = (long long *)v132;
              if (BYTE1(v134) == 1)
              {
                char v114 = v129;
              }
              else
              {
                char v115 = &v132;
                char v114 = 2;
              }
            }
            char v148 = v115;
            char v149 = v113;
            uint64_t v150 = (const char *)&v136;
            LOBYTE(v152) = v114;
            char v116 = 2;
            uint64_t v110 = (char **)&v148;
            HIBYTE(v152) = 6;
            goto LABEL_177;
          }
        }
        else
        {
          uint64_t v51 = *(void *)(v49 + 96);
          uint64_t v50 = *(void *)(v49 + 104);
          unint64_t v52 = 0xF0F0F0F0F0F0F0F1 * ((v50 - v51) >> 3);
          if (v52 > v48) {
            return 0;
          }
          if (v51 != v50)
          {
            unint64_t v53 = v52 - 1;
            unint64_t v54 = "0-";
            goto LABEL_164;
          }
        }
        LOWORD(v134) = 1283;
        *(void *)&long long v132 = "DIE has ";
        *(void *)&long long v133 = llvm::dwarf::AttributeString(v7);
        *((void *)&v133 + 1) = v103;
        char v148 = &v132;
        uint64_t v150 = " with an invalid file index ";
        __int16 v152 = 770;
        v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
        v143.__r_.__value_.__l.__size_ = 3;
        v143.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
        uint64_t v144 = 1;
        uint64_t v145 = &unk_1F2619590;
        uint64_t v146 = (long long *)v131;
        v147[0] = &v145;
        std::string::pointer v136 = (std::string::pointer)&v148;
        uint64_t v138 = &v143;
        LOWORD(v140) = 1538;
        unint64_t v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        size_t v69 = llvm::Twine::printOneChild(v57, v57, (uint64_t)&v136, v104, 2);
        long long v71 = (std::string *)" (the file table in the prologue is empty)";
      }
      else
      {
        LOWORD(v134) = 1283;
        *(void *)&long long v132 = "DIE has ";
        *(void *)&long long v133 = llvm::dwarf::AttributeString(v7);
        *((void *)&v133 + 1) = v98;
        char v148 = &v132;
        uint64_t v150 = " that references a file with index ";
        __int16 v152 = 770;
        v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0}";
        v143.__r_.__value_.__l.__size_ = 3;
        v143.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
        uint64_t v144 = 1;
        uint64_t v145 = &unk_1F2619590;
        uint64_t v146 = (long long *)v131;
        v147[0] = &v145;
        std::string::pointer v136 = (std::string::pointer)&v148;
        uint64_t v138 = &v143;
        LOWORD(v140) = 1538;
        unint64_t v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        size_t v69 = llvm::Twine::printOneChild(v57, v57, (uint64_t)&v136, v99, 2);
        long long v71 = (std::string *)" and the compile unit has no line table";
      }
    }
    else
    {
      LOWORD(v145) = 1283;
      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"DIE has ";
      v143.__r_.__value_.__r.__words[2] = (std::string::size_type)llvm::dwarf::AttributeString(v7);
      uint64_t v144 = v96;
      unint64_t v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      size_t v69 = llvm::Twine::printOneChild(v57, v57, (uint64_t)&v143, v97, 2);
      long long v71 = (std::string *)" with invalid encoding";
    }
    char v72 = v57;
    char v73 = 3;
    goto LABEL_154;
  }
  if (*(unsigned __int16 *)(a3 + 12) > 0x54u)
  {
    if (v7 != 88)
    {
      if (v7 != 85) {
        return v5;
      }
      uint64_t v38 = *(uint64_t **)(*(void *)(a1 + 8) + 520);
      if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)(a3 + 16), 8))
      {
        unint64_t v39 = *(void *)(a3 + 24);
        *(void *)&long long v132 = v39;
        *((void *)&v132 + 1) = 1;
        unsigned int v40 = *((unsigned __int16 *)v6 + 16);
        uint64_t v41 = *v38;
        if (v40 > 4) {
          uint64_t v42 = (*(uint64_t (**)(uint64_t *))(v41 + 152))(v38);
        }
        else {
          uint64_t v42 = (*(uint64_t (**)(uint64_t *))(v41 + 144))(v38);
        }
        unint64_t v64 = *(void *)(v42 + 8);
        if (v64) {
          BOOL v65 = 1;
        }
        else {
          BOOL v65 = *((unsigned char *)v6 + 209) == 0;
        }
        if (!v65 || v39 < v64) {
          return 0;
        }
        __int16 v152 = 1283;
        if (v40 >= 5) {
          size_t v67 = ".debug_rnglists";
        }
        else {
          size_t v67 = ".debug_ranges";
        }
        char v148 = (long long *)"DW_AT_ranges offset is beyond ";
        uint64_t v68 = 15;
        if (v40 < 5) {
          uint64_t v68 = 13;
        }
        uint64_t v150 = v67;
        uint64_t v151 = v68;
        std::string::pointer v136 = (std::string::pointer)&v148;
        uint64_t v138 = (std::string *)" bounds: ";
        LOWORD(v140) = 770;
        v143.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x8}";
        v143.__r_.__value_.__l.__size_ = 6;
        v143.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
        uint64_t v144 = 1;
        uint64_t v145 = &unk_1F2619590;
        uint64_t v146 = &v132;
        v147[0] = &v145;
        uint64_t v55 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        unint64_t v57 = v55;
        uint64_t v58 = (const char *)&v136;
        size_t v59 = v55;
        char v60 = 2;
        goto LABEL_111;
      }
      unint64_t v100 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      unint64_t v57 = v100;
      uint64_t v102 = "DIE has invalid DW_AT_ranges encoding:";
      goto LABEL_149;
    }
    goto LABEL_75;
  }
  if (v7 != 71)
  {
    if (v7 != 73) {
      return v5;
    }
    uint64_t v5 = 0;
    if (!llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)a2, 73)) {
      return v5;
    }
    uint64_t v29 = v28;
    if (!v28) {
      return v5;
    }
    uint64_t v30 = *(void *)(v28 + 16);
    if (v30) {
      int v31 = *(unsigned __int16 *)(v30 + 4);
    }
    else {
      int v31 = 0;
    }
    if (!sub_1CD5EF374(v31))
    {
      LOWORD(v140) = 1283;
      std::string::pointer v136 = "DIE has ";
      uint64_t v138 = (std::string *)llvm::dwarf::AttributeString((llvm::dwarf *)0x49);
      uint64_t v139 = v111;
      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
      v143.__r_.__value_.__r.__words[2] = (std::string::size_type)" with incompatible tag ";
      LOWORD(v145) = 770;
      uint64_t v112 = *(void *)(v29 + 16);
      if (v112) {
        uint64_t v89 = (llvm::dwarf *)*(unsigned __int16 *)(v112 + 4);
      }
      else {
        uint64_t v89 = 0;
      }
      goto LABEL_135;
    }
    return 0;
  }
LABEL_71:
  uint64_t v5 = 0;
  if (!llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFUnit **)a2, *(unsigned __int16 *)(a3 + 12)) || !v43) {
    return v5;
  }
  uint64_t v44 = *(void *)(*(void *)(a2 + 8) + 16);
  if (v44) {
    uint64_t v45 = (llvm::dwarf *)*(unsigned __int16 *)(v44 + 4);
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v80 = *(void *)(v43 + 16);
  if (v80) {
    uint64_t v81 = (llvm::dwarf *)*(unsigned __int16 *)(v80 + 4);
  }
  else {
    uint64_t v81 = 0;
  }
  if (v45 == v81 || v45 == 29 && v81 == 46) {
    return 0;
  }
  uint64_t v5 = 0;
  BOOL v84 = v45 == 16649 && v81 == 46;
  BOOL v85 = v81 == 13 && v45 == 52;
  if (!v85 && !v84)
  {
    LOWORD(v134) = 1283;
    *(void *)&long long v132 = "DIE with tag ";
    *(void *)&long long v133 = llvm::dwarf::TagString(v45);
    *((void *)&v133 + 1) = v86;
    char v148 = &v132;
    uint64_t v150 = " has ";
    __int16 v152 = 770;
    uint64_t v87 = llvm::dwarf::AttributeString(v7);
    std::string::pointer v136 = (std::string::pointer)&v148;
    uint64_t v138 = (std::string *)v87;
    uint64_t v139 = v88;
    LOWORD(v140) = 1282;
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    v143.__r_.__value_.__r.__words[2] = (std::string::size_type)" that points to DIE with incompatible tag ";
    LOWORD(v145) = 770;
    uint64_t v89 = v81;
LABEL_135:
    long long v90 = llvm::dwarf::TagString(v89);
    size_t v92 = v91;
    unint64_t v57 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    size_t v69 = llvm::Twine::printOneChild(v57, v57, (uint64_t)&v143, v93, 2);
    char v72 = v57;
    long long v71 = (std::string *)v90;
    size_t v70 = v92;
    char v73 = 5;
    goto LABEL_154;
  }
  return v5;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoForm(uint64_t a1, uint64_t a2, llvm::DWARFFormValue *this, uint64_t **a4, uint64_t **a5)
{
  uint64_t result = 0;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (llvm::dwarf *)*((unsigned __int16 *)this + 8);
  if (v7 <= 0x28)
  {
    if (((1 << (char)v7) & 0x1E004004000) != 0)
    {
      llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)((char *)this + 16), (uint64_t)&v47);
      if ((v47.__r_.__value_.__s.__data_[8] & 1) == 0) {
        return 0;
      }
      std::string::size_type v21 = v47.__r_.__value_.__r.__words[0];
      if (!v47.__r_.__value_.__r.__words[0]) {
        return 0;
      }
      uint64_t v22 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      std::string::size_type v41 = v21;
      sub_1CD4FB504((uint64_t *)&v41, &v47);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v23 = &v47;
      }
      else {
        size_t v23 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&v47.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = v47.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(v22, (const char *)v23, size);
      uint64_t v25 = (_WORD *)*((void *)v22 + 4);
      if (*((void *)v22 + 3) - (void)v25 > 1uLL)
      {
        *uint64_t v25 = 2618;
        *((void *)v22 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v22, ":\n", 2uLL);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (v41) {
        (*(void (**)(std::string::size_type))(*(void *)v41 + 8))(v41);
      }
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      if (((1 << (char)v7) & 0x3E0000) != 0)
      {
        AsReference = (uint64_t *)llvm::DWARFFormValue::getAsReference((llvm::DWARFFormValue *)((char *)this + 16));
        v43[0] = AsReference;
        v43[1] = v13;
        if (!(_BYTE)v13) {
          return 0;
        }
        uint64_t v14 = *(void *)(v9 + 40);
        uint64_t v15 = 12;
        if (!*(unsigned char *)(v9 + 35)) {
          uint64_t v15 = 4;
        }
        uint64_t v16 = v15 + v14;
        std::string::size_type v17 = *((void *)this + 3);
        if (v17 < v15 + v14)
        {
          unsigned int v18 = sub_1CD486E50(a4, (unint64_t)AsReference, v43) + 5;
          v47.__r_.__value_.__r.__words[0] = **(void **)(a2 + 8);
          unsigned int v19 = &v47;
          size_t v20 = (uint64_t **)&v47;
LABEL_9:
          sub_1CD3CFB98(v18, (unint64_t *)v19, v20);
          return 0;
        }
        uint64_t v29 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        int v31 = llvm::dwarf::FormEncodingString(v7);
        size_t v32 = v30;
        int v33 = (void *)*((void *)v29 + 4);
        if (v30 <= *((void *)v29 + 3) - (void)v33)
        {
          if (v30)
          {
            memcpy(v33, v31, v30);
            int v33 = (void *)(*((void *)v29 + 4) + v32);
            *((void *)v29 + 4) = v33;
          }
        }
        else
        {
          llvm::raw_ostream::write(v29, v31, v30);
          int v33 = (void *)*((void *)v29 + 4);
        }
        if (*((void *)v29 + 3) - (void)v33 > 0xAuLL)
        {
          *(_DWORD *)((char *)v33 + 7) = 544499059;
          void *v33 = *(void *)" CU offset ";
          *((void *)v29 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(v29, " CU offset ", 0xBuLL);
        }
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25FF808;
        v47.__r_.__value_.__l.__size_ = (std::string::size_type)"0x%08llx";
        v47.__r_.__value_.__r.__words[2] = v17;
        llvm::raw_ostream::operator<<(v29, (uint64_t)&v47);
        uint64_t v34 = (void *)*((void *)v29 + 4);
        if (*((void *)v29 + 3) - (void)v34 > 0x29uLL)
        {
          qmemcpy(v34, " is invalid (must be less than CU size of ", 42);
          *((void *)v29 + 4) += 42;
        }
        else
        {
          llvm::raw_ostream::write(v29, " is invalid (must be less than CU size of ", 0x2AuLL);
        }
        v42[0] = &unk_1F25FF808;
        v42[1] = "0x%08llx";
        _OWORD v42[2] = v16;
        llvm::raw_ostream::operator<<(v29, (uint64_t)v42);
        uint64_t v35 = *((void *)v29 + 4);
        if ((unint64_t)(*((void *)v29 + 3) - v35) > 2)
        {
          *(unsigned char *)(v35 + 2) = 10;
          *(_WORD *)uint64_t v35 = 14889;
          *((void *)v29 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v29, "):\n", 3uLL);
        }
        int v36 = *(llvm::raw_ostream **)a1;
        *(_OWORD *)uint64_t v44 = *(_OWORD *)(a1 + 16);
        *(void *)&v44[14] = *(void *)(a1 + 30);
        sub_1CC66D518((uint64_t)&v45, a1 + 40);
        sub_1CC66D518((uint64_t)&v46, a1 + 72);
        llvm::DWARFDie::dump((uint64_t *)a2, v36, 0, (uint64_t)v44);
        sub_1CD5E15A8(v44);
      }
      else
      {
        if (v7 != (llvm::dwarf *)16) {
          return result;
        }
        unint64_t v27 = llvm::DWARFFormValue::getAsReference((llvm::DWARFFormValue *)((char *)this + 16));
        v47.__r_.__value_.__r.__words[0] = v27;
        v47.__r_.__value_.__l.__size_ = v28;
        if (!(_BYTE)v28) {
          return 0;
        }
        if (v27 < *(void *)(*(void *)(v9 + 16) + 8))
        {
          unsigned int v18 = sub_1CD486E50(a5, v27, (uint64_t **)&v47) + 5;
          v42[0] = **(void **)(a2 + 8);
          unsigned int v19 = (std::string *)v42;
          size_t v20 = (uint64_t **)v42;
          goto LABEL_9;
        }
        unint64_t v39 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
        unsigned int v40 = (void *)*((void *)v39 + 4);
        if (*((void *)v39 + 3) - (void)v40 > 0x32uLL)
        {
          qmemcpy(v40, "DW_FORM_ref_addr offset beyond .debug_info bounds:\n", 51);
          *((void *)v39 + 4) += 51;
        }
        else
        {
          llvm::raw_ostream::write(v39, "DW_FORM_ref_addr offset beyond .debug_info bounds:\n", 0x33uLL);
        }
      }
    }
    uint64_t v37 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)a2, 0);
    uint64_t v38 = (unsigned char *)*((void *)v37 + 4);
    if ((unint64_t)v38 >= *((void *)v37 + 3))
    {
      llvm::raw_ostream::write(v37, 10);
    }
    else
    {
      *((void *)v37 + 4) = v38 + 1;
      *uint64_t v38 = 10;
    }
    return 1;
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFVerifier::warn(llvm::raw_ostream **this)
{
  return llvm::WithColor::warning(*this, "", 0, 0);
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoCallSite(llvm::raw_ostream **this, const llvm::DWARFDie *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 1);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  int v6 = *(unsigned __int16 *)(v3 + 4);
  if (v6 != 16649 && v6 != 72) {
    return 0;
  }
  uint64_t v9 = *(void *)a2;
  if (!*(void *)a2 || (unsigned int v10 = *(_DWORD *)(v2 + 8), v10 == -1))
  {
    std::string::size_type v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v9 + 288);
  uint64_t v16 = v15 + 24 * v10;
  std::string::size_type v28 = *(llvm::DWARFUnit **)a2;
  uint64_t v29 = v16;
  if (v15)
  {
    while (1)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        if (*(_WORD *)(v17 + 4) == 46)
        {
          std::string::size_type v28 = (llvm::DWARFUnit *)v9;
          uint64_t v29 = v16;
          goto LABEL_14;
        }
        if (*(_WORD *)(v17 + 4) == 29) {
          break;
        }
      }
      unsigned int v18 = *(_DWORD *)(v2 + 8);
      if (v18 == -1)
      {
        uint64_t v9 = 0;
        uint64_t v29 = v16;
        uint64_t v16 = 0;
LABEL_22:
        std::string::size_type v28 = (llvm::DWARFUnit *)v9;
        uint64_t v29 = v16;
        goto LABEL_23;
      }
      uint64_t v19 = *(void *)(v9 + 288);
      uint64_t v16 = v19 + 24 * v18;
      if (!v19) {
        goto LABEL_22;
      }
    }
    std::string::size_type v28 = (llvm::DWARFUnit *)v9;
    uint64_t v29 = v16;
    unint64_t v24 = llvm::WithColor::error(*this, "", 0, 0);
    uint64_t v25 = (void *)*((void *)v24 + 4);
    if (*((void *)v24 + 3) - (void)v25 > 0x30uLL)
    {
      qmemcpy(v25, "Call site entry nested within inlined subroutine:", 49);
      *((void *)v24 + 4) += 49;
    }
    else
    {
      llvm::raw_ostream::write(v24, "Call site entry nested within inlined subroutine:", 0x31uLL);
    }
    uint64_t v26 = *this;
    v47[2] = 0;
    long long v49 = 0u;
    long long v52 = 0u;
    v47[0] = -1;
    v47[1] = 0x1040000FFFFFFFFLL;
    uint64_t v48 = &unk_1F26187D0;
    *(void *)&long long v49 = llvm::WithColor::defaultErrorHandler;
    uint64_t v50 = &v48;
    uint64_t v51 = &unk_1F26187D0;
    *(void *)&long long v52 = llvm::WithColor::defaultWarningHandler;
    unint64_t v53 = &v51;
    llvm::DWARFDie::dump((uint64_t *)&v28, v26, 0, (uint64_t)v47);
    uint64_t v14 = v47;
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v9 = 1;
LABEL_23:
  if (!v9 || !v16)
  {
LABEL_9:
    uint64_t v11 = llvm::WithColor::error(*this, "", 0, 0);
    unsigned __int8 v12 = (void *)*((void *)v11 + 4);
    if (*((void *)v11 + 3) - (void)v12 > 0x34uLL)
    {
      qmemcpy(v12, "Call site entry not nested within a valid subprogram:", 53);
      *((void *)v11 + 4) += 53;
    }
    else
    {
      llvm::raw_ostream::write(v11, "Call site entry not nested within a valid subprogram:", 0x35uLL);
    }
    char v13 = *this;
    _OWORD v40[2] = 0;
    long long v42 = 0u;
    long long v45 = 0u;
    v40[0] = -1;
    v40[1] = 0x1040000FFFFFFFFLL;
    std::string::size_type v41 = &unk_1F26187D0;
    *(void *)&long long v42 = llvm::WithColor::defaultErrorHandler;
    uint64_t v43 = &v41;
    uint64_t v44 = &unk_1F26187D0;
    *(void *)&long long v45 = llvm::WithColor::defaultWarningHandler;
    uint64_t v46 = &v44;
    llvm::DWARFDie::dump((uint64_t *)a2, v13, 0, (uint64_t)v40);
    uint64_t v14 = v40;
LABEL_12:
    sub_1CD5E15A8(v14);
    return 1;
  }
  uint64_t v38 = 0x2117007C007B007ALL;
  int v39 = 555098392;
  llvm::DWARFDie::find(&v28, (unsigned __int16 *)&v38, 6, v27);
  if (v27[48]) {
    return 0;
  }
  size_t v20 = llvm::WithColor::error(*this, "", 0, 0);
  std::string::size_type v21 = (void *)*((void *)v20 + 4);
  if (*((void *)v20 + 3) - (void)v21 > 0x3BuLL)
  {
    qmemcpy(v21, "Subprogram with call site entry has no DW_AT_call attribute:", 60);
    *((void *)v20 + 4) += 60;
  }
  else
  {
    llvm::raw_ostream::write(v20, "Subprogram with call site entry has no DW_AT_call attribute:", 0x3CuLL);
  }
  uint64_t v22 = *this;
  __n128 v36[2] = 0;
  uint64_t v37[2] = 0;
  v35[0] = -1;
  v35[1] = 0x1040000FFFFFFFFLL;
  v35[2] = 0;
  v36[0] = &unk_1F26187D0;
  v36[1] = llvm::WithColor::defaultErrorHandler;
  v36[3] = v36;
  v37[0] = &unk_1F26187D0;
  v37[1] = llvm::WithColor::defaultWarningHandler;
  v37[3] = v37;
  llvm::DWARFDie::dump((uint64_t *)&v28, v22, 0, (uint64_t)v35);
  sub_1CD5E15A8(v35);
  size_t v23 = *this;
  v31[2] = 0;
  long long v33 = 0u;
  v30[0] = -1;
  v30[1] = 0x1040000FFFFFFFFLL;
  void v30[2] = 0;
  v31[0] = &unk_1F26187D0;
  v31[1] = llvm::WithColor::defaultErrorHandler;
  v31[3] = v31;
  size_t v32 = &unk_1F26187D0;
  *(void *)&long long v33 = llvm::WithColor::defaultWarningHandler;
  uint64_t v34 = &v32;
  uint64_t v7 = 1;
  llvm::DWARFDie::dump((uint64_t *)a2, v23, 1, (uint64_t)v30);
  sub_1CD5E15A8(v30);
  return v7;
}

uint64_t llvm::DWARFVerifier::verifyDieRanges(uint64_t a1, llvm::DWARFDie *a2, const llvm::DWARFDie *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v4 = *((void *)a2 + 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  llvm::DWARFDie::getAddressRanges(a2, (uint64_t)&v58);
  if (v60)
  {
    uint64_t v5 = *(unsigned char *)(v3 + 209) == 0;
    unint64_t v57 = v58;
    uint64_t v58 = 0;
    sub_1CD4515D0(&v57);
    if (v57) {
      (*(void (**)(uint64_t *))(*v57 + 8))(v57);
    }
    goto LABEL_63;
  }
  uint64_t v10 = *((void *)a2 + 1);
  v51[0] = *(void *)a2;
  v51[1] = v10;
  std::string __p = 0;
  unint64_t v53 = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v54 = 0;
  uint64_t v55 = v56;
  if (*(unsigned char *)(a1 + 108) && !*(unsigned char *)(a1 + 109) && (uint64_t v26 = *(void *)(v10 + 16)) != 0 && *(_WORD *)(v26 + 4) == 17
    || (uint64_t v11 = v58, v12 = v59, v58 == v59))
  {
    uint64_t v5 = 0;
    goto LABEL_40;
  }
  uint64_t v5 = 0;
  char v13 = 0;
  do
  {
    if (*v11 > (unint64_t)v11[1])
    {
      uint64_t v14 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      uint64_t v15 = (void *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v15 > 0x15uLL)
      {
        qmemcpy(v15, "Invalid address range ", 22);
        *((void *)v14 + 4) += 22;
      }
      else
      {
        uint64_t v14 = llvm::raw_ostream::write(v14, "Invalid address range ", 0x16uLL);
      }
      uint64_t v5 = (v5 + 1);
      uint64_t v16 = llvm::operator<<(v14, v11);
      uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
      if (*((unsigned char **)v16 + 3) == v17)
      {
        char v13 = 1;
        llvm::raw_ostream::write(v16, "\n", 1uLL);
        goto LABEL_15;
      }
      *uint64_t v17 = 10;
      ++*((void *)v16 + 4);
    }
    else
    {
      llvm::DWARFVerifier::DieRangeInfo::insert(v51, (unint64_t *)v11, (uint64_t)v49);
      if (!v50) {
        goto LABEL_15;
      }
      unsigned int v18 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      uint64_t v19 = (void *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 > 0x35uLL)
      {
        qmemcpy(v19, "DIE has overlapping ranges in DW_AT_ranges attribute: ", 54);
        *((void *)v18 + 4) += 54;
      }
      else
      {
        unsigned int v18 = llvm::raw_ostream::write(v18, "DIE has overlapping ranges in DW_AT_ranges attribute: ", 0x36uLL);
      }
      size_t v20 = llvm::operator<<(v18, v49);
      uint64_t v21 = *((void *)v20 + 4);
      if ((unint64_t)(*((void *)v20 + 3) - v21) > 4)
      {
        *(unsigned char *)(v21 + 4) = 32;
        *(_DWORD *)uint64_t v21 = 1684955424;
        *((void *)v20 + 4) += 5;
      }
      else
      {
        size_t v20 = llvm::raw_ostream::write(v20, " and ", 5uLL);
      }
      uint64_t v5 = (v5 + 1);
      uint64_t v22 = llvm::operator<<(v20, v11);
      size_t v23 = (unsigned char *)*((void *)v22 + 4);
      if ((unint64_t)v23 >= *((void *)v22 + 3))
      {
        llvm::raw_ostream::write(v22, 10);
      }
      else
      {
        *((void *)v22 + 4) = v23 + 1;
        unsigned char *v23 = 10;
      }
    }
    char v13 = 1;
LABEL_15:
    v11 += 3;
  }
  while (v11 != v12);
  if (v13)
  {
    unint64_t v24 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, a2, 2);
    uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
    if ((unint64_t)v25 >= *((void *)v24 + 3))
    {
      llvm::raw_ostream::write(v24, 10);
    }
    else
    {
      *((void *)v24 + 4) = v25 + 1;
      *uint64_t v25 = 10;
    }
  }
LABEL_40:
  unint64_t v27 = llvm::DWARFVerifier::DieRangeInfo::insert((uint64_t)a3, (uint64_t)v51);
  if ((void *)((char *)a3 + 48) != v27)
  {
    uint64_t v38 = v27;
    uint64_t v5 = (v5 + 1);
    int v39 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
    unsigned int v40 = (void *)*((void *)v39 + 4);
    if (*((void *)v39 + 3) - (void)v40 > 0x24uLL)
    {
      qmemcpy(v40, "DIEs have overlapping address ranges:", 37);
      *((void *)v39 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v39, "DIEs have overlapping address ranges:", 0x25uLL);
    }
    llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, a2, 0);
    std::string::size_type v41 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)(v38 + 4), 0);
    long long v42 = (unsigned char *)*((void *)v41 + 4);
    if ((unint64_t)v42 >= *((void *)v41 + 3))
    {
      llvm::raw_ostream::write(v41, 10);
    }
    else
    {
      *((void *)v41 + 4) = v42 + 1;
      unsigned char *v42 = 10;
    }
  }
  if (__p != v53 && *((void *)a3 + 2) != *((void *)a3 + 3))
  {
    uint64_t v28 = *(void *)(*((void *)a2 + 1) + 16);
    if ((!v28
       || *(_WORD *)(v28 + 4) != 46
       || (uint64_t v29 = *(void *)(*((void *)a3 + 1) + 16)) == 0
       || *(_WORD *)(v29 + 4) != 46)
      && (llvm::DWARFVerifier::DieRangeInfo::contains((uint64_t)a3, (uint64_t)v51) & 1) == 0)
    {
      uint64_t v5 = (v5 + 1);
      long long v45 = llvm::WithColor::error(*(llvm::raw_ostream **)a1, "", 0, 0);
      uint64_t v46 = (void *)*((void *)v45 + 4);
      if (*((void *)v45 + 3) - (void)v46 > 0x3BuLL)
      {
        qmemcpy(v46, "DIE address ranges are not contained in its parent's ranges:", 60);
        *((void *)v45 + 4) += 60;
      }
      else
      {
        llvm::raw_ostream::write(v45, "DIE address ranges are not contained in its parent's ranges:", 0x3CuLL);
      }
      llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, a3, 0);
      std::string v47 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, a2, 2);
      uint64_t v48 = (unsigned char *)*((void *)v47 + 4);
      if ((unint64_t)v48 >= *((void *)v47 + 3))
      {
        llvm::raw_ostream::write(v47, 10);
      }
      else
      {
        *((void *)v47 + 4) = v48 + 1;
        *uint64_t v48 = 10;
      }
    }
  }
  uint64_t v30 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t LastChild = *((void *)a2 + 1);
    if (LastChild)
    {
      uint64_t FirstChild = llvm::DWARFUnit::getFirstChild(v30, LastChild);
      uint64_t v32 = v43;
      uint64_t LastChild = llvm::DWARFUnit::getLastChild(v30, LastChild);
      uint64_t v30 = v44;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t FirstChild = 0;
      uint64_t v30 = 0;
    }
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t FirstChild = 0;
    uint64_t LastChild = 0;
  }
  if (v32 != v30 || FirstChild != LastChild)
  {
    while (1)
    {
      v49[0] = FirstChild;
      v49[1] = v32;
      int v34 = llvm::DWARFVerifier::verifyDieRanges(a1, v49, v51);
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      if (v32 && FirstChild)
      {
        unsigned int v37 = *(_DWORD *)(v32 + 12);
        if (v37)
        {
          uint64_t v36 = *(void *)(FirstChild + 288) + 24 * v37;
          uint64_t v35 = FirstChild;
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
        }
      }
      uint64_t v5 = (v34 + v5);
      uint64_t v32 = v36;
      uint64_t FirstChild = v35;
      if (v36 == v30)
      {
        uint64_t v32 = v36;
        uint64_t FirstChild = v35;
        if (v35 == LastChild) {
          break;
        }
      }
    }
  }
  sub_1CC6B2CA0(v56[0]);
  if (__p)
  {
    unint64_t v53 = __p;
    operator delete(__p);
  }
LABEL_63:
  sub_1CC1EB7C0((uint64_t)&v58);
  return v5;
}

uint64_t llvm::DWARFVerifier::verifyAbbrevSection(llvm::raw_ostream **this, const llvm::DWARFDebugAbbrev *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  AbbreviationDeclarationSet = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(a2, 0);
  int v6 = (uint64_t *)AbbreviationDeclarationSet[2];
  uint64_t v7 = (uint64_t *)AbbreviationDeclarationSet[3];
  if (v6 == v7) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    uint64_t v25 = *v6;
    uint64_t v26 = v28;
    uint64_t v27 = 0x800000000;
    uint64_t v8 = *((unsigned int *)v6 + 4);
    if (!v8 || &v25 == v6)
    {
      uint64_t v29 = v6[19];
      goto LABEL_38;
    }
    if (v8 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v28, (const void *)v6[1], 16 * *((unsigned int *)v6 + 4));
    uint64_t v9 = (unsigned __int16 *)v26;
    LODWORD(v27) = v8;
    uint64_t v29 = v6[19];
    uint64_t v22 = 1;
    uint64_t v23 = -1;
    uint64_t v10 = 16 * v8;
    do
    {
      uint64_t v11 = (llvm::dwarf *)*v9;
      uint64_t v21 = 0;
      if ((sub_1CC6B322C((uint64_t)&v22, (unsigned __int16)v11, &v21) & 1) == 0)
      {
        unsigned int v12 = v22 >> 1;
        if (v22) {
          unsigned int v13 = 4;
        }
        else {
          unsigned int v13 = v24;
        }
        if (4 * v12 + 4 >= 3 * v13)
        {
          v13 *= 2;
        }
        else if (v13 + ~v12 - HIDWORD(v22) > v13 >> 3)
        {
LABEL_17:
          LODWORD(v22) = v22 + 2;
          if (*v21 != -1) {
            --HIDWORD(v22);
          }
          __int16 *v21 = (__int16)v11;
          goto LABEL_20;
        }
        sub_1CC6B32E0((uint64_t)&v22, v13);
        uint64_t v21 = 0;
        sub_1CC6B322C((uint64_t)&v22, (unsigned __int16)v11, &v21);
        goto LABEL_17;
      }
      uint64_t v14 = llvm::WithColor::error(*this, "", 0, 0);
      uint64_t v15 = v14;
      uint64_t v16 = (void *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v16 > 0x2AuLL)
      {
        qmemcpy(v16, "Abbreviation declaration contains multiple ", 43);
        *((void *)v14 + 4) += 43;
      }
      else
      {
        llvm::raw_ostream::write(v14, "Abbreviation declaration contains multiple ", 0x2BuLL);
      }
      unsigned int v18 = llvm::dwarf::AttributeString(v11);
      size_t v19 = v17;
      size_t v20 = (void *)*((void *)v15 + 4);
      if (v17 <= *((void *)v15 + 3) - (void)v20)
      {
        if (v17)
        {
          memcpy(v20, v18, v17);
          size_t v20 = (void *)(*((void *)v15 + 4) + v19);
          *((void *)v15 + 4) = v20;
        }
      }
      else
      {
        llvm::raw_ostream::write(v15, v18, v17);
        size_t v20 = (void *)*((void *)v15 + 4);
      }
      if (*((void *)v15 + 3) - (void)v20 > 0xCuLL)
      {
        qmemcpy(v20, " attributes.\n", 13);
        *((void *)v15 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v15, " attributes.\n", 0xDuLL);
      }
      llvm::DWARFAbbreviationDeclaration::dump((llvm::DWARFAbbreviationDeclaration *)&v25, *this);
      uint64_t v2 = (v2 + 1);
LABEL_20:
      v9 += 8;
      v10 -= 16;
    }
    while (v10);
    if ((v22 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v23, 2);
    }
LABEL_38:
    if (v26 != v28) {
      free(v26);
    }
    v6 += 20;
  }
  while (v6 != v7);
  return v2;
}

BOOL llvm::DWARFVerifier::handleDebugAbbrev(llvm::raw_ostream **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0x1AuLL)
  {
    qmemcpy(v3, "Verifying .debug_abbrev...\n", 27);
    *((void *)v2 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_abbrev...\n", 0x1BuLL);
  }
  uint64_t v4 = *((void *)this[1] + 65);
  (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
  if (v5)
  {
    DebugAbbrev = (const llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrev(this[1]);
    int v6 = llvm::DWARFVerifier::verifyAbbrevSection(this, DebugAbbrev);
  }
  else
  {
    int v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 248))(v4);
  if (v7)
  {
    DebugAbbrevDWO = (const llvm::DWARFDebugAbbrev *)llvm::DWARFContext::getDebugAbbrevDWO(this[1]);
    v6 += llvm::DWARFVerifier::verifyAbbrevSection(this, DebugAbbrevDWO);
  }
  return v6 == 0;
}

uint64_t llvm::DWARFVerifier::verifyUnits(llvm::raw_ostream **this, const llvm::DWARFUnitVector *a2)
{
  uint64_t v2 = a2;
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v35 = (uint64_t *)v36;
  uint64_t v4 = *((unsigned int *)a2 + 2);
  if (v4)
  {
    int v5 = 0;
    int v6 = *(llvm::DWARFUnit ***)a2;
    uint64_t v7 = 8 * v4;
    unint64_t v8 = 1;
    do
    {
      uint64_t v9 = *this;
      uint64_t v10 = (_OWORD *)*((void *)*this + 4);
      if (*((void *)*this + 3) - (void)v10 > 0xFuLL)
      {
        *uint64_t v10 = *(_OWORD *)"Verifying unit: ";
        *((void *)v9 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(*this, "Verifying unit: ", 0x10uLL);
      }
      sub_1CD098D14(v9, v8, 0, 0, 0);
      uint64_t v11 = *((void *)v9 + 4);
      if ((unint64_t)(*((void *)v9 + 3) - v11) > 2)
      {
        *(unsigned char *)(v11 + 2) = 32;
        *(_WORD *)uint64_t v11 = 12064;
        *((void *)v9 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v9, " / ", 3uLL);
      }
      sub_1CD098D14(v9, *((unsigned int *)v2 + 2), 0, 0, 0);
      unsigned int v12 = *v6;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v6, 1);
      unsigned int v13 = (void *)*((void *)v12 + 36);
      uint64_t v14 = (void *)*((void *)v12 + 37);
      BOOL v15 = v13 == v14;
      if (v13 == v14) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = (uint64_t *)v12;
      }
      if (v15) {
        unsigned int v13 = 0;
      }
      long long v33 = v16;
      v34[0] = v13;
      ShortName = (const char *)llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v33);
      if (ShortName)
      {
        unsigned int v18 = ShortName;
        size_t v19 = v2;
        size_t v20 = *this;
        uint64_t v21 = *((void *)*this + 4);
        if ((unint64_t)(*((void *)*this + 3) - v21) > 2)
        {
          *(unsigned char *)(v21 + 2) = 34;
          *(_WORD *)uint64_t v21 = 8236;
          uint64_t v22 = (unsigned char *)(*((void *)v20 + 4) + 3);
          *((void *)v20 + 4) = v22;
        }
        else
        {
          llvm::raw_ostream::write(*this, ", \"", 3uLL);
          uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
        }
        size_t v23 = strlen(v18);
        size_t v24 = v23;
        if (v23 <= *((void *)v20 + 3) - (void)v22)
        {
          if (v23)
          {
            memcpy(v22, v18, v23);
            uint64_t v22 = (unsigned char *)(*((void *)v20 + 4) + v24);
            *((void *)v20 + 4) = v22;
          }
        }
        else
        {
          llvm::raw_ostream::write(v20, v18, v23);
          uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
        }
        if ((unint64_t)v22 >= *((void *)v20 + 3))
        {
          llvm::raw_ostream::write(v20, 34);
        }
        else
        {
          *((void *)v20 + 4) = v22 + 1;
          unsigned char *v22 = 34;
        }
        uint64_t v2 = v19;
      }
      uint64_t v25 = *this;
      uint64_t v26 = (unsigned char *)*((void *)*this + 4);
      if ((unint64_t)v26 >= *((void *)*this + 3))
      {
        llvm::raw_ostream::write(v25, 10);
      }
      else
      {
        *((void *)v25 + 4) = v26 + 1;
        *uint64_t v26 = 10;
      }
      uint64_t v27 = *this;
      uint64_t v28 = (const char *)*((void *)*this + 2);
      if (*((const char **)*this + 4) != v28)
      {
        *((void *)v27 + 4) = v28;
        llvm::raw_ostream::flush_tied_then_write(v27, v28);
      }
      v34[0] = 0;
      v34[1] = 0;
      long long v33 = (uint64_t *)v34;
      int v29 = llvm::DWARFVerifier::verifyUnitContents(this, (uint64_t)*v6, &v33, &v35);
      uint64_t v32 = v6;
      v5 += v29
          + llvm::DWARFVerifier::verifyDebugInfoReferences(this, &v33, (uint64_t (*)(uint64_t, unint64_t))sub_1CC6B356C, (uint64_t)&v32);
      ++v8;
      sub_1CC6B3514(v34[0]);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    int v5 = 0;
  }
  long long v33 = (uint64_t *)v2;
  uint64_t v30 = llvm::DWARFVerifier::verifyDebugInfoReferences(this, &v35, (uint64_t (*)(uint64_t, unint64_t))sub_1CC6B3578, (uint64_t)&v33)+ v5;
  sub_1CC6B3514(v36[0]);
  return v30;
}

uint64_t llvm::DWARFVerifier::verifyDebugInfoReferences(llvm::raw_ostream **a1, void *a2, uint64_t (*a3)(uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = v5[4];
    uint64_t v11 = (llvm::DWARFUnit *)a3(a4, v10);
    if (!v11 || (sub_1CD5E31EC(v11, v10) ? (BOOL v28 = v27 == 0) : (BOOL v28 = 1), v28))
    {
      unsigned int v12 = llvm::WithColor::error(*a1, "", 0, 0);
      unsigned int v13 = (void *)*((void *)v12 + 4);
      if (*((void *)v12 + 3) - (void)v13 > 0x15uLL)
      {
        qmemcpy(v13, "invalid DIE reference ", 22);
        *((void *)v12 + 4) += 22;
      }
      else
      {
        unsigned int v12 = llvm::raw_ostream::write(v12, "invalid DIE reference ", 0x16uLL);
      }
      uint64_t v14 = v5[4];
      uint64_t v32 = (llvm::DWARFUnit *)&unk_1F25FF808;
      long long v33 = "0x%08llx";
      uint64_t v34 = v14;
      BOOL v15 = llvm::raw_ostream::operator<<(v12, (uint64_t)&v32);
      uint64_t v16 = (void *)*((void *)v15 + 4);
      if (*((void *)v15 + 3) - (void)v16 > 0x1CuLL)
      {
        qmemcpy(v16, ". Offset is in between DIEs:\n", 29);
        *((void *)v15 + 4) += 29;
      }
      else
      {
        llvm::raw_ostream::write(v15, ". Offset is in between DIEs:\n", 0x1DuLL);
      }
      size_t v17 = (void *)v5[5];
      if (v17 != v5 + 6)
      {
        do
        {
          unint64_t v18 = v17[4];
          size_t v19 = (llvm::DWARFUnit *)a3(a4, v18);
          if (v19) {
            size_t v19 = sub_1CD5E31EC(v19, v18);
          }
          else {
            size_t v20 = 0;
          }
          uint64_t v32 = v19;
          long long v33 = v20;
          uint64_t v21 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump((llvm::DWARFVerifier *)a1, (const llvm::DWARFDie *)&v32, 0);
          uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
          if ((unint64_t)v22 >= *((void *)v21 + 3))
          {
            llvm::raw_ostream::write(v21, 10);
          }
          else
          {
            *((void *)v21 + 4) = v22 + 1;
            unsigned char *v22 = 10;
          }
          size_t v23 = (void *)v17[1];
          if (v23)
          {
            do
            {
              size_t v24 = v23;
              size_t v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              size_t v24 = (void *)v17[2];
              BOOL v28 = *v24 == (void)v17;
              size_t v17 = v24;
            }
            while (!v28);
          }
          size_t v17 = v24;
        }
        while (v24 != v5 + 6);
      }
      uint64_t v9 = (v9 + 1);
      uint64_t v25 = *a1;
      uint64_t v26 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v26)
      {
        llvm::raw_ostream::write(v25, "\n", 1uLL);
      }
      else
      {
        *uint64_t v26 = 10;
        ++*((void *)v25 + 4);
      }
    }
    int v29 = (void *)v5[1];
    if (v29)
    {
      do
      {
        uint64_t v30 = v29;
        int v29 = (void *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        uint64_t v30 = (void *)v5[2];
        BOOL v28 = *v30 == (void)v5;
        int v5 = v30;
      }
      while (!v28);
    }
    int v5 = v30;
  }
  while (v30 != v4);
  return v9;
}

BOOL llvm::DWARFVerifier::verifyUnitSection(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 520);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  __int16 v22 = 0;
  v29[0] = (char *)&v30;
  v29[1] = (char *)0x100000000;
  uint64_t v32 = 0;
  int v33 = -1;
  unint64_t v23 = 0;
  v24[0] = (char *)&v25;
  v24[1] = (char *)0x100000000;
  uint64_t v27 = 0;
  int v28 = -1;
  v21[0] = 0;
  v21[1] = 0;
  size_t v20 = v21;
  if (v7)
  {
    char v8 = v5;
    uint64_t v9 = 0;
    char v10 = 1;
    while (1)
    {
      v15[0] = v6;
      v15[1] = v7;
      char v16 = v8;
      char v17 = 0;
      uint64_t v18 = v4;
      size_t v19 = a2;
      if ((llvm::DWARFVerifier::verifyUnitHeader((llvm::raw_ostream **)a1, v15, &v23, v9, (unsigned char *)&v22 + 1, (BOOL *)&v22) & 1) == 0)
      {
        char v10 = 0;
        char v11 = 0;
        if ((_BYTE)v22) {
          break;
        }
      }
      ++v9;
      if (v7 <= v23)
      {
        char v11 = v10;
        if (!v9) {
          goto LABEL_16;
        }
        break;
      }
    }
  }
  else
  {
LABEL_16:
    unsigned int v13 = llvm::WithColor::warning(*(llvm::raw_ostream **)a1, "", 0, 0);
    uint64_t v14 = *((void *)v13 + 4);
    if ((unint64_t)(*((void *)v13 + 3) - v14) > 0x11)
    {
      *(_WORD *)(v14 + 16) = 2606;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)"Section is empty.\n";
      *((void *)v13 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v13, "Section is empty.\n", 0x12uLL);
    }
    char v11 = 1;
  }
  sub_1CC6B3514(v21[0]);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  sub_1CC682364(v24);
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  sub_1CC682364(v29);
  return (v11 & 1) == 0;
}

BOOL llvm::DWARFVerifier::handleDebugInfo(llvm::DWARFVerifier *this)
{
  uint64_t v2 = *(llvm::raw_ostream **)this;
  uint64_t v4 = *(void *)(*((void *)this + 1) + 520);
  int v19 = 0;
  char v5 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v5 > 0x2AuLL)
  {
    qmemcpy(v5, "Verifying .debug_info Unit Header Chain...\n", 43);
    *((void *)v2 + 4) += 43;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_info Unit Header Chain...\n", 0x2BuLL);
  }
  char v17 = &v19;
  uint64_t v18 = this;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, void *), int **))(*(void *)v4 + 56))(v4, sub_1CC6B3580, &v17);
  uint64_t v6 = *(llvm::raw_ostream **)this;
  unint64_t v7 = *(void **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v7 > 0x2BuLL)
  {
    qmemcpy(v7, "Verifying .debug_types Unit Header Chain...\n", 44);
    *((void *)v6 + 4) += 44;
  }
  else
  {
    llvm::raw_ostream::write(v6, "Verifying .debug_types Unit Header Chain...\n", 0x2CuLL);
  }
  char v17 = &v19;
  uint64_t v18 = this;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, void *), int **))(*(void *)v4 + 64))(v4, sub_1CC6B35B8, &v17);
  char v8 = *(llvm::raw_ostream **)this;
  uint64_t v9 = *(void **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v9 > 0x1AuLL)
  {
    qmemcpy(v9, "Verifying non-dwo Units...\n", 27);
    *((void *)v8 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Verifying non-dwo Units...\n", 0x1BuLL);
  }
  uint64_t v10 = *((void *)this + 1);
  llvm::DWARFContext::parseNormalUnits(v10);
  int v11 = llvm::DWARFVerifier::verifyUnits((llvm::raw_ostream **)this, (const llvm::DWARFUnitVector *)(v10 + 16));
  v19 += v11;
  unsigned int v12 = *(llvm::raw_ostream **)this;
  unsigned int v13 = *(void **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v13 > 0x16uLL)
  {
    qmemcpy(v13, "Verifying dwo Units...\n", 23);
    *((void *)v12 + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(v12, "Verifying dwo Units...\n", 0x17uLL);
  }
  uint64_t v14 = *((void *)this + 1);
  llvm::DWARFContext::parseDWOUnits(v14, 0);
  int v15 = llvm::DWARFVerifier::verifyUnits((llvm::raw_ostream **)this, (const llvm::DWARFUnitVector *)(v14 + 240));
  return v19 + v15 == 0;
}

void llvm::DWARFVerifier::verifyDebugLineStmtOffsets(llvm::DWARFVerifier *this)
{
  long long v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = &v52;
  sub_1CC6821F8(*((void *)this + 1), v49);
  uint64_t v2 = (llvm::DWARFUnit **)v49[0];
  uint64_t v3 = v50;
  if ((llvm::DWARFUnit **)v49[0] != v50)
  {
    uint64_t v4 = (llvm::DWARFUnit **)v49[1];
    char v5 = (unsigned int (*)(llvm::DWARFUnit **))v49[2];
    while (1)
    {
      uint64_t v6 = *v2;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v2, 1);
      uint64_t v7 = *((void *)v6 + 36);
      uint64_t v8 = *((void *)v6 + 37);
      BOOL v9 = v7 == v8;
      if (v7 == v8) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v6;
      }
      if (v9) {
        uint64_t v7 = 0;
      }
      *(void *)&long long v48 = v10;
      *((void *)&v48 + 1) = v7;
      llvm::DWARFDie::find((llvm::DWARFUnit **)&v48, 16, &v44);
      if (v47)
      {
        if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v44, 8))
        {
          int v11 = (uint64_t *)v45;
          llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)this + 1), *v2);
          uint64_t v13 = v12;
          if ((unint64_t)v11 < *(void *)((*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 520)
                                                                                     + 120))(*(void *)(*((void *)this + 1) + 520))
                                                 + 8))
            break;
        }
      }
LABEL_9:
      while (++v2 != v4)
      {
        if (v5(v2)) {
          goto LABEL_13;
        }
      }
      uint64_t v2 = v4;
LABEL_13:
      if (v2 == v3) {
        goto LABEL_63;
      }
    }
    if (v13)
    {
      uint64_t v14 = v52;
      int v15 = v52;
      char v16 = &v52;
      char v17 = &v52;
      uint64_t v18 = &v52;
      if (!v52) {
        goto LABEL_34;
      }
      do
      {
        int v19 = v16;
        size_t v20 = v15;
        unint64_t v21 = v15[4];
        if (v21 >= (unint64_t)v11) {
          char v16 = (uint64_t **)v15;
        }
        else {
          ++v15;
        }
        int v15 = (uint64_t *)*v15;
      }
      while (v15);
      if (v16 == &v52 || (v21 >= (unint64_t)v11 ? (__int16 v22 = v20) : (__int16 v22 = v19), (unint64_t)v11 < v22[4]))
      {
        do
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v14;
            unint64_t v23 = v14[4];
            if (v23 <= (unint64_t)v11) {
              break;
            }
            uint64_t v14 = *v18;
            char v17 = v18;
            if (!*v18) {
              goto LABEL_34;
            }
          }
          if (v23 >= (unint64_t)v11) {
            goto LABEL_37;
          }
          uint64_t v14 = v18[1];
        }
        while (v14);
        char v17 = v18 + 1;
LABEL_34:
        size_t v24 = (uint64_t *)v18;
        uint64_t v18 = (uint64_t **)operator new(0x38uLL);
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[5] = 0;
        v18[6] = 0;
        void v18[4] = v11;
        void v18[2] = v24;
        *char v17 = (uint64_t *)v18;
        uint64_t v25 = (uint64_t *)v18;
        if (*v51)
        {
          uint64_t v51 = (uint64_t **)*v51;
          uint64_t v25 = *v17;
        }
        sub_1CB8358B8(v52, v25);
        ++v53;
LABEL_37:
        *(_OWORD *)(v18 + 5) = v48;
        goto LABEL_9;
      }
      ++*((_DWORD *)this + 26);
      uint64_t v30 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
      int v31 = (void *)*((void *)v30 + 4);
      if (*((void *)v30 + 3) - (void)v31 > 0x16uLL)
      {
        qmemcpy(v31, "two compile unit DIEs, ", 23);
        *((void *)v30 + 4) += 23;
      }
      else
      {
        uint64_t v30 = llvm::raw_ostream::write(v30, "two compile unit DIEs, ", 0x17uLL);
      }
      BOOL v32 = v21 >= (unint64_t)v11;
      if (v21 >= (unint64_t)v11) {
        int v33 = (const llvm::DWARFDie *)(v20 + 5);
      }
      else {
        int v33 = (const llvm::DWARFDie *)(v19 + 5);
      }
      if (v32) {
        uint64_t v34 = (void **)v20;
      }
      else {
        uint64_t v34 = v19;
      }
      uint64_t v35 = (uint64_t *)*v34[6];
      uint64_t v44 = &unk_1F25FF808;
      long long v45 = "0x%08llx";
      uint64_t v46 = v35;
      uint64_t v36 = llvm::raw_ostream::operator<<(v30, (uint64_t)&v44);
      uint64_t v37 = *((void *)v36 + 4);
      if ((unint64_t)(*((void *)v36 + 3) - v37) > 4)
      {
        *(unsigned char *)(v37 + 4) = 32;
        *(_DWORD *)uint64_t v37 = 1684955424;
        *((void *)v36 + 4) += 5;
      }
      else
      {
        uint64_t v36 = llvm::raw_ostream::write(v36, " and ", 5uLL);
      }
      uint64_t v38 = **((void **)&v48 + 1);
      v43[0] = &unk_1F25FF808;
      v43[1] = "0x%08llx";
      unint64_t v43[2] = v38;
      int v39 = llvm::raw_ostream::operator<<(v36, (uint64_t)v43);
      unsigned int v40 = (void *)*((void *)v39 + 4);
      if (*((void *)v39 + 3) - (void)v40 > 0x2FuLL)
      {
        qmemcpy(v40, ", have the same DW_AT_stmt_list section offset:\n", 48);
        *((void *)v39 + 4) += 48;
      }
      else
      {
        llvm::raw_ostream::write(v39, ", have the same DW_AT_stmt_list section offset:\n", 0x30uLL);
      }
      llvm::DWARFVerifier::dump(this, v33, 0);
    }
    else
    {
      ++*((_DWORD *)this + 26);
      uint64_t v26 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
      uint64_t v27 = *((void *)v26 + 4);
      if ((unint64_t)(*((void *)v26 + 3) - v27) > 0xB)
      {
        *(_DWORD *)(v27 + 8) = 1533374057;
        *(void *)uint64_t v27 = *(void *)".debug_line[";
        *((void *)v26 + 4) += 12;
      }
      else
      {
        uint64_t v26 = llvm::raw_ostream::write(v26, ".debug_line[", 0xCuLL);
      }
      uint64_t v44 = &unk_1F25FF808;
      long long v45 = "0x%08llx";
      uint64_t v46 = v11;
      int v28 = llvm::raw_ostream::operator<<(v26, (uint64_t)&v44);
      int v29 = (void *)*((void *)v28 + 4);
      if (*((void *)v28 + 3) - (void)v29 > 0x23uLL)
      {
        qmemcpy(v29, "] was not able to be parsed for CU:\n", 36);
        *((void *)v28 + 4) += 36;
      }
      else
      {
        llvm::raw_ostream::write(v28, "] was not able to be parsed for CU:\n", 0x24uLL);
      }
    }
    std::string::size_type v41 = (llvm::raw_ostream *)llvm::DWARFVerifier::dump(this, (const llvm::DWARFDie *)&v48, 0);
    long long v42 = (unsigned char *)*((void *)v41 + 4);
    if ((unint64_t)v42 >= *((void *)v41 + 3))
    {
      llvm::raw_ostream::write(v41, 10);
    }
    else
    {
      *((void *)v41 + 4) = v42 + 1;
      unsigned char *v42 = 10;
    }
    goto LABEL_9;
  }
LABEL_63:
  sub_1CBB0D544(v52);
}

void llvm::DWARFVerifier::verifyDebugLineRows(llvm::DWARFVerifier *this)
{
  unsigned int v1 = this;
  sub_1CC6821F8(*((void *)this + 1), &v129);
  uint64_t v2 = v129;
  uint64_t v3 = v132;
  if (v129 != v132)
  {
    uint64_t v4 = v130;
    char v5 = v131;
    unsigned int v108 = v132;
    uint64_t v109 = (llvm::raw_ostream **)v1;
    uint64_t v106 = v131;
    unsigned int v107 = v130;
    while (1)
    {
      uint64_t v6 = *v2;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v2, 1);
      uint64_t v7 = (llvm::DWARFUnit *)*((void *)v6 + 36);
      uint64_t v8 = (llvm::DWARFUnit *)*((void *)v6 + 37);
      BOOL v9 = v7 == v8;
      if (v7 == v8) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v6;
      }
      if (v9) {
        uint64_t v7 = 0;
      }
      v128[0] = v10;
      v128[1] = v7;
      llvm::DWARFContext::getLineTableForUnit(*((llvm::DWARFContext **)v1 + 1), *v2);
      if (v11) {
        break;
      }
LABEL_184:
      while (++v2 != v4)
      {
        if (v5(v2)) {
          goto LABEL_188;
        }
      }
      uint64_t v2 = v4;
LABEL_188:
      if (v2 == v3) {
        return;
      }
    }
    uint64_t v12 = v11;
    uint64_t v14 = v11[9];
    uint64_t v13 = v11[10];
    __int16 v126 = 0;
    *(void *)&long long v127 = 0;
    *((void *)&v127 + 1) = 0x1000000000;
    uint64_t v15 = v11[12];
    uint64_t v112 = v11[13];
    int v117 = v11;
    char v16 = 0;
    if (v15 != v112)
    {
      unint64_t v110 = -1431655765 * ((unint64_t)(v13 - v14) >> 4);
      uint64_t v111 = (uint64_t)(v11 + 1);
      unsigned int v17 = 1;
      while (1)
      {
        if (*(void *)(v15 + 48) <= v110)
        {
          unint64_t v22 = v17;
        }
        else
        {
          ++*((_DWORD *)v1 + 26);
          uint64_t v18 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
          int v19 = v18;
          uint64_t v20 = *((void *)v18 + 4);
          if ((unint64_t)(*((void *)v18 + 3) - v20) > 0xB)
          {
            *(_DWORD *)(v20 + 8) = 1533374057;
            *(void *)uint64_t v20 = *(void *)".debug_line[";
            *((void *)v18 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v18, ".debug_line[", 0xCuLL);
          }
          llvm::DWARFDie::find(v128, 16, &v120);
          if (v122)
          {
            int isFormClass = llvm::DWARFFormValue::isFormClass(&v120, 8);
            uint64_t v21 = v121;
            if (!isFormClass) {
              uint64_t v21 = 0;
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          std::string __p = &unk_1F25FF808;
          __int16 v124 = "0x%08llx";
          uint64_t v125 = v21;
          llvm::raw_ostream::operator<<(v19, (uint64_t)&__p);
          size_t v24 = (void *)*((void *)v19 + 4);
          if (*((void *)v19 + 3) - (void)v24 > 0x15uLL)
          {
            qmemcpy(v24, "].prologue.file_names[", 22);
            *((void *)v19 + 4) += 22;
          }
          else
          {
            llvm::raw_ostream::write(v19, "].prologue.file_names[", 0x16uLL);
          }
          unint64_t v22 = v17;
          sub_1CD098D14(v19, v17, 0, 0, 0);
          uint64_t v25 = (void *)*((void *)v19 + 4);
          if (*((void *)v19 + 3) - (void)v25 > 0x24uLL)
          {
            qmemcpy(v25, "].dir_idx contains an invalid index: ", 37);
            *((void *)v19 + 4) += 37;
          }
          else
          {
            llvm::raw_ostream::write(v19, "].dir_idx contains an invalid index: ", 0x25uLL);
          }
          sub_1CD098D14(v19, *(void *)(v15 + 48), 0, 0, 0);
          uint64_t v26 = (unsigned char *)*((void *)v19 + 4);
          if (*((unsigned char **)v19 + 3) == v26)
          {
            llvm::raw_ostream::write(v19, "\n", 1uLL);
          }
          else
          {
            *uint64_t v26 = 10;
            ++*((void *)v19 + 4);
          }
        }
        std::string __p = 0;
        __int16 v124 = 0;
        uint64_t v125 = 0;
        CompilationDir = (const char *)llvm::DWARFUnit::getCompilationDir((llvm::DWARFUnit **)*v2);
        uint64_t v28 = (uint64_t)CompilationDir;
        uint64_t v114 = v15;
        unsigned int v113 = v17;
        if (CompilationDir) {
          size_t v29 = strlen(CompilationDir);
        }
        else {
          size_t v29 = 0;
        }
        llvm::DWARFDebugLine::Prologue::getFileNameByIndex(v111, v22, v28, v29, 4, (uint64_t)&__p, 0);
        p_p = (unsigned __int8 *)__p;
        if (v125 >= 0) {
          p_p = (unsigned __int8 *)&__p;
        }
        __s1 = p_p;
        size_t v31 = v125 >= 0 ? HIBYTE(v125) & 0x7F : (size_t)v124;
        uint64_t v32 = v127;
        if (!v127) {
          break;
        }
        unint64_t v115 = v22;
        int v33 = 0;
        if (v31)
        {
          size_t v34 = v31;
          do
          {
            int v35 = *p_p++;
            int v33 = 33 * v33 + v35;
            --v34;
          }
          while (v34);
        }
        uint64_t v36 = HIDWORD(v127);
        int v37 = 1;
        for (int i = v33; ; int i = v39 + v37++)
        {
          uint64_t v39 = i & (v32 - 1);
          unsigned int v40 = (void *)v16[v39];
          if (v40 != (void *)-8)
          {
            if (!v40) {
              goto LABEL_47;
            }
            if (*((_DWORD *)&v16[v32 + 1] + v39) == v33
              && v31 == *v40
              && (!v31 || !memcmp(__s1, (char *)v40 + v36, v31)))
            {
              break;
            }
          }
        }
        if (v39 == -1) {
          goto LABEL_47;
        }
        uint64_t v41 = (int)v39;
        if ((int)v39 == v32) {
          goto LABEL_47;
        }
        unsigned int v54 = v113;
        if (v113 != *(unsigned __int16 *)(v16[(int)v39] + 8))
        {
          unsigned int v1 = (llvm::DWARFVerifier *)v109;
          uint64_t v61 = llvm::WithColor::warning(*v109, "", 0, 0);
          uint64_t v62 = v61;
          uint64_t v63 = *((void *)v61 + 4);
          uint64_t v12 = v117;
          if ((unint64_t)(*((void *)v61 + 3) - v63) > 0xB)
          {
            *(_DWORD *)(v63 + 8) = 1533374057;
            *(void *)uint64_t v63 = *(void *)".debug_line[";
            *((void *)v61 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v61, ".debug_line[", 0xCuLL);
          }
          llvm::DWARFDie::find(v128, 16, &v120);
          if (v122)
          {
            int v68 = llvm::DWARFFormValue::isFormClass(&v120, 8);
            uint64_t v64 = v121;
            if (!v68) {
              uint64_t v64 = 0;
            }
          }
          else
          {
            uint64_t v64 = 0;
          }
          v119[0] = &unk_1F25FF808;
          v119[1] = "0x%08llx";
          v119[2] = v64;
          llvm::raw_ostream::operator<<(v62, (uint64_t)v119);
          BOOL v65 = (void *)*((void *)v62 + 4);
          if (*((void *)v62 + 3) - (void)v65 > 0x15uLL)
          {
            qmemcpy(v65, "].prologue.file_names[", 22);
            *((void *)v62 + 4) += 22;
          }
          else
          {
            llvm::raw_ostream::write(v62, "].prologue.file_names[", 0x16uLL);
          }
          sub_1CD098D14(v62, v115, 0, 0, 0);
          int v66 = (void *)*((void *)v62 + 4);
          if (*((void *)v62 + 3) - (void)v66 > 0x1EuLL)
          {
            qmemcpy(v66, "] is a duplicate of file_names[", 31);
            *((void *)v62 + 4) += 31;
          }
          else
          {
            llvm::raw_ostream::write(v62, "] is a duplicate of file_names[", 0x1FuLL);
          }
          sub_1CD098D14(v62, *(unsigned __int16 *)(v16[v41] + 8), 0, 0, 0);
          size_t v67 = (_WORD *)*((void *)v62 + 4);
          if (*((void *)v62 + 3) - (void)v67 > 1uLL)
          {
            *size_t v67 = 2653;
            *((void *)v62 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v62, "]\n", 2uLL);
          }
          goto LABEL_70;
        }
        unsigned int v1 = (llvm::DWARFVerifier *)v109;
        uint64_t v12 = v117;
LABEL_69:
        uint64_t v15 = v114;
LABEL_70:
        if (SHIBYTE(v125) < 0) {
          operator delete(__p);
        }
        unsigned int v17 = v54 + 1;
        v15 += 136;
        if (v15 == v112) {
          goto LABEL_109;
        }
      }
      *(void *)((char *)&v127 + 4) = 0;
      size_t v69 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v69) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      char v16 = v69;
      v69[16] = 2;
      __int16 v126 = v69;
      LODWORD(v32) = 16;
      LODWORD(v127) = 16;
LABEL_47:
      int v42 = 0;
      if (v31)
      {
        size_t v43 = v31;
        uint64_t v44 = __s1;
        do
        {
          int v45 = *v44++;
          int v42 = 33 * v42 + v45;
          --v43;
        }
        while (v43);
      }
      unsigned int v46 = v32 - 1;
      uint64_t v47 = (uint64_t)&v16[v32 + 1];
      uint64_t v116 = HIDWORD(v127);
      int v48 = -1;
      int v49 = 1;
      int v50 = v42;
      while (1)
      {
        uint64_t v51 = v50 & v46;
        uint64_t v52 = v16[v51];
        if (!v52) {
          break;
        }
        if (v52 == -8)
        {
          if (v48 == -1) {
            int v48 = v50 & v46;
          }
        }
        else if (*(_DWORD *)(v47 + 4 * v51) == v42 {
               && v31 == *(void *)v52
        }
               && (!v31 || !memcmp(__s1, (const void *)(v52 + v116), v31)))
        {
          goto LABEL_65;
        }
        int v50 = v49 + v51;
        ++v49;
      }
      uint64_t v53 = v48;
      if (v48 == -1)
      {
        uint64_t v53 = v51;
        uint64_t v51 = v51;
      }
      else
      {
        uint64_t v51 = v48;
      }
      *(_DWORD *)(v47 + 4 * v53) = v42;
      uint64_t v52 = v16[v51];
LABEL_65:
      if (v52 == -8)
      {
        --DWORD2(v127);
      }
      else if (v52)
      {
        unsigned int v1 = (llvm::DWARFVerifier *)v109;
        uint64_t v12 = v117;
LABEL_68:
        *(_WORD *)(v52 + 8) = v113;
        unsigned int v54 = v113;
        goto LABEL_69;
      }
      uint64_t v55 = (char *)operator new(v31 + 17, (std::align_val_t)8uLL);
      size_t v56 = v55;
      unint64_t v57 = v55 + 16;
      if (v31) {
        memcpy(v55 + 16, __s1, v31);
      }
      v57[v31] = 0;
      *(void *)size_t v56 = v31;
      *((_WORD *)v56 + 4) = 0;
      v16[v51] = v56;
      ++DWORD1(v127);
      unsigned int v58 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v126, v51);
      char v16 = v126;
      uint64_t v59 = v58;
      unsigned int v1 = (llvm::DWARFVerifier *)v109;
      uint64_t v12 = v117;
      while (1)
      {
        uint64_t v52 = v126[v59];
        if (v52 && v52 != -8) {
          break;
        }
        ++v59;
      }
      goto LABEL_68;
    }
LABEL_109:
    long long v71 = (unint64_t *)v12[15];
    size_t v70 = (uint64_t *)v12[16];
    if (v71 == (unint64_t *)v70)
    {
LABEL_174:
      if (DWORD1(v127))
      {
        uint64_t v103 = v127;
        if (v127)
        {
          size_t v104 = v16;
          do
          {
            if (*v104 != -8 && *v104 != 0) {
              MEMORY[0x1D25D9CD0]();
            }
            ++v104;
            --v103;
          }
          while (v103);
        }
      }
      free(v16);
      uint64_t v4 = v107;
      uint64_t v3 = v108;
      char v5 = v106;
      goto LABEL_184;
    }
    unsigned int v72 = 0;
    unint64_t v73 = 0;
    while (1)
    {
      if (*v71 < v73)
      {
        ++*((_DWORD *)v1 + 26);
        uint64_t v83 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
        BOOL v84 = v83;
        uint64_t v85 = *((void *)v83 + 4);
        if ((unint64_t)(*((void *)v83 + 3) - v85) > 0xB)
        {
          *(_DWORD *)(v85 + 8) = 1533374057;
          *(void *)uint64_t v85 = *(void *)".debug_line[";
          *((void *)v83 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v83, ".debug_line[", 0xCuLL);
        }
        llvm::DWARFDie::find(v128, 16, &v120);
        if (v122)
        {
          int v98 = llvm::DWARFFormValue::isFormClass(&v120, 8);
          uint64_t v86 = v121;
          if (!v98) {
            uint64_t v86 = 0;
          }
        }
        else
        {
          uint64_t v86 = 0;
        }
        std::string __p = &unk_1F25FF808;
        __int16 v124 = "0x%08llx";
        uint64_t v125 = v86;
        llvm::raw_ostream::operator<<(v84, (uint64_t)&__p);
        uint64_t v99 = *((void *)v84 + 4);
        if ((unint64_t)(*((void *)v84 + 3) - v99) > 5)
        {
          *(_WORD *)(v99 + 4) = 23415;
          *(_DWORD *)uint64_t v99 = 1869750365;
          *((void *)v84 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v84, "] row[", 6uLL);
        }
        sub_1CD098D14(v84, v72, 0, 0, 0);
        unint64_t v100 = (void *)*((void *)v84 + 4);
        if (*((void *)v84 + 3) - (void)v100 > 0x29uLL)
        {
          qmemcpy(v100, "] decreases in address from previous row:\n", 42);
          *((void *)v84 + 4) += 42;
        }
        else
        {
          llvm::raw_ostream::write(v84, "] decreases in address from previous row:\n", 0x2AuLL);
        }
        llvm::DWARFDebugLine::Row::dumpTableHeader(*(llvm::DWARFDebugLine::Row **)v1, 0);
        if (v72) {
          llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)(v12[15] + 32 * (v72 - 1)), *(llvm::raw_ostream **)v1);
        }
        llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)v71, *(llvm::raw_ostream **)v1);
        size_t v101 = *(llvm::raw_ostream **)v1;
        uint64_t v102 = *(unsigned char **)(*(void *)v1 + 32);
        if ((unint64_t)v102 >= *(void *)(*(void *)v1 + 24))
        {
          llvm::raw_ostream::write(v101, 10);
        }
        else
        {
          *((void *)v101 + 4) = v102 + 1;
          *uint64_t v102 = 10;
        }
      }
      unint64_t v74 = *((unsigned __int16 *)v71 + 11);
      unsigned int v75 = *((unsigned __int16 *)v12 + 8);
      if (v75 < 5)
      {
        if (!*((_WORD *)v71 + 11) || 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v12[13] - v12[12]) >> 3) < v74)
        {
LABEL_122:
          ++*((_DWORD *)v1 + 26);
          uint64_t v79 = llvm::WithColor::error(*(llvm::raw_ostream **)v1, "", 0, 0);
          uint64_t v80 = v79;
          uint64_t v81 = *((void *)v79 + 4);
          if ((unint64_t)(*((void *)v79 + 3) - v81) > 0xB)
          {
            *(_DWORD *)(v81 + 8) = 1533374057;
            *(void *)uint64_t v81 = *(void *)".debug_line[";
            *((void *)v79 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v79, ".debug_line[", 0xCuLL);
          }
          llvm::DWARFDie::find(v128, 16, &v120);
          if (v122)
          {
            int v87 = llvm::DWARFFormValue::isFormClass(&v120, 8);
            uint64_t v82 = v121;
            if (!v87) {
              uint64_t v82 = 0;
            }
          }
          else
          {
            uint64_t v82 = 0;
          }
          std::string __p = &unk_1F25FF808;
          __int16 v124 = "0x%08llx";
          uint64_t v125 = v82;
          llvm::raw_ostream::operator<<(v80, (uint64_t)&__p);
          uint64_t v88 = (_WORD *)*((void *)v80 + 4);
          if (*((void *)v80 + 3) - (void)v88 > 1uLL)
          {
            *uint64_t v88 = 23389;
            *((void *)v80 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v80, "][", 2uLL);
          }
          sub_1CD098D14(v80, v72, 0, 0, 0);
          uint64_t v89 = (void *)*((void *)v80 + 4);
          if (*((void *)v80 + 3) - (void)v89 > 0x18uLL)
          {
            qmemcpy(v89, "] has invalid file index ", 25);
            *((void *)v80 + 4) += 25;
          }
          else
          {
            llvm::raw_ostream::write(v80, "] has invalid file index ", 0x19uLL);
          }
          sub_1CD098D14(v80, *((unsigned __int16 *)v71 + 11), 0, 0, 0);
          uint64_t v90 = *((void *)v80 + 4);
          if ((unint64_t)(*((void *)v80 + 3) - v90) > 0x13)
          {
            *(_DWORD *)(v90 + 16) = 1528849778;
            *(_OWORD *)uint64_t v90 = *(_OWORD *)" (valid values are [";
            size_t v91 = (_WORD *)(*((void *)v80 + 4) + 20);
            *((void *)v80 + 4) = v91;
          }
          else
          {
            llvm::raw_ostream::write(v80, " (valid values are [", 0x14uLL);
            size_t v91 = (_WORD *)*((void *)v80 + 4);
          }
          if (v75 <= 4) {
            size_t v92 = "1,";
          }
          else {
            size_t v92 = "0,";
          }
          if (*((void *)v80 + 3) - (void)v91 > 1uLL)
          {
            *size_t v91 = *(_WORD *)v92;
            *((void *)v80 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v80, v92, 2uLL);
          }
          sub_1CD098D14(v80, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v117[13] - v117[12]) >> 3), 0, 0, 0);
          if (v75 <= 4) {
            size_t v93 = "]";
          }
          else {
            size_t v93 = ")";
          }
          uint64_t v94 = (char *)*((void *)v80 + 4);
          if (*((char **)v80 + 3) == v94)
          {
            llvm::raw_ostream::write(v80, v93, 1uLL);
            uint64_t v95 = *((void *)v80 + 4);
          }
          else
          {
            char *v94 = *v93;
            uint64_t v95 = *((void *)v80 + 4) + 1;
            *((void *)v80 + 4) = v95;
          }
          uint64_t v12 = v117;
          if ((unint64_t)(*((void *)v80 + 3) - v95) > 2)
          {
            *(unsigned char *)(v95 + 2) = 10;
            *(_WORD *)uint64_t v95 = 14889;
            *((void *)v80 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v80, "):\n", 3uLL);
          }
          llvm::DWARFDebugLine::Row::dumpTableHeader(*(llvm::DWARFDebugLine::Row **)v1, 0);
          llvm::DWARFDebugLine::Row::dump((llvm::DWARFDebugLine::Row *)v71, *(llvm::raw_ostream **)v1);
          uint64_t v96 = *(llvm::raw_ostream **)v1;
          size_t v97 = *(unsigned char **)(*(void *)v1 + 32);
          if ((unint64_t)v97 >= *(void *)(*(void *)v1 + 24))
          {
            llvm::raw_ostream::write(v96, 10);
          }
          else
          {
            *((void *)v96 + 4) = v97 + 1;
            *size_t v97 = 10;
          }
        }
      }
      else if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v12[13] - v12[12]) >> 3) <= v74)
      {
        goto LABEL_122;
      }
      char v76 = *((unsigned char *)v71 + 29);
      unint64_t v78 = *v71;
      v71 += 4;
      unint64_t v77 = v78;
      if ((v76 & 4) != 0) {
        unint64_t v73 = 0;
      }
      else {
        unint64_t v73 = v77;
      }
      ++v72;
      if (v71 == (unint64_t *)v70) {
        goto LABEL_174;
      }
    }
  }
}

uint64_t llvm::DWARFVerifier::DWARFVerifier(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  long long v6 = *a4;
  *(void *)(a1 + 30) = *(void *)((char *)a4 + 14);
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = (long long *)*((void *)a4 + 6);
  if (v7)
  {
    if (v7 == (long long *)((char *)a4 + 24))
    {
      *(void *)(a1 + 64) = a1 + 40;
      (*(void (**)(void))(**((void **)a4 + 6) + 24))(*((void *)a4 + 6));
    }
    else
    {
      *(void *)(a1 + 64) = v7;
      *((void *)a4 + 6) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v8 = (long long *)*((void *)a4 + 10);
  if (v8)
  {
    if (v8 == (long long *)((char *)a4 + 56))
    {
      *(void *)(a1 + 96) = a1 + 72;
      (*(void (**)(void))(**((void **)a4 + 10) + 24))(*((void *)a4 + 10));
    }
    else
    {
      *(void *)(a1 + 96) = v8;
      *((void *)a4 + 10) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 0;
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 520) + 24))(*(void *)(*(void *)(a1 + 8) + 520));
  if (v9)
  {
    uint64_t v10 = v9;
    *(unsigned char *)(a1 + 108) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 424))(v9);
    *(unsigned char *)(a1 + 109) = (*(_DWORD *)(v10 + 8) & 0xFFFFFFFC) == 16;
  }
  return a1;
}

BOOL llvm::DWARFVerifier::handleDebugLine(llvm::DWARFVerifier *this)
{
  *((_DWORD *)this + 26) = 0;
  uint64_t v2 = *(llvm::raw_ostream **)this;
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0x18uLL)
  {
    qmemcpy(v3, "Verifying .debug_line...\n", 25);
    *((void *)v2 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Verifying .debug_line...\n", 0x19uLL);
  }
  llvm::DWARFVerifier::verifyDebugLineStmtOffsets(this);
  llvm::DWARFVerifier::verifyDebugLineRows(this);
  return *((_DWORD *)this + 26) == 0;
}

uint64_t llvm::DWARFVerifier::verifyAppleAccelTable(llvm::raw_ostream **a1, _OWORD *a2, uint64_t *a3, const char *a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a1[1] + 65);
  unsigned __int8 v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  long long v91 = *a2;
  LOWORD(v92) = v9;
  *((void *)&v92 + 1) = v8;
  size_t v93 = a2;
  long long v98 = *(_OWORD *)a3;
  unint64_t v73 = a3;
  uint64_t v99 = a3[2];
  size_t v97 = a2;
  long long v95 = v91;
  long long v96 = v92;
  uint64_t v94 = &unk_1F2618888;
  uint64_t v103 = v105;
  uint64_t v104 = 0x300000000;
  v105[16] = 0;
  uint64_t v10 = *a1;
  uint64_t v11 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v11) > 9)
  {
    *(_WORD *)(v11 + 8) = 8295;
    *(void *)uint64_t v11 = *(void *)"Verifying ";
    uint64_t v12 = (_DWORD *)(*((void *)v10 + 4) + 10);
    *((void *)v10 + 4) = v12;
    if (!a4) {
      goto LABEL_5;
    }
  }
  else
  {
    llvm::raw_ostream::write(*a1, "Verifying ", 0xAuLL);
    uint64_t v12 = (_DWORD *)*((void *)v10 + 4);
    if (!a4) {
      goto LABEL_5;
    }
  }
  size_t v13 = strlen(a4);
  size_t v14 = v13;
  if (v13 <= *((void *)v10 + 3) - (void)v12)
  {
    if (v13)
    {
      memcpy(v12, a4, v13);
      uint64_t v12 = (_DWORD *)(*((void *)v10 + 4) + v14);
      *((void *)v10 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, a4, v13);
    uint64_t v12 = (_DWORD *)*((void *)v10 + 4);
  }
LABEL_5:
  if (*((void *)v10 + 3) - (void)v12 > 3uLL)
  {
    *uint64_t v12 = 170798638;
    *((void *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, "...\n", 4uLL);
  }
  if (*((void *)&v91 + 1) <= 0x14uLL)
  {
    unsigned int v58 = llvm::WithColor::error(*a1, "", 0, 0);
    uint64_t v59 = (void *)*((void *)v58 + 4);
    if (*((void *)v58 + 3) - (void)v59 > 0x2DuLL)
    {
      qmemcpy(v59, "Section is too small to fit a section header.\n", 46);
      uint64_t v69 = *((void *)v58 + 4) + 46;
      goto LABEL_109;
    }
    char v60 = "Section is too small to fit a section header.\n";
    size_t v61 = 46;
LABEL_88:
    llvm::raw_ostream::write(v58, v60, v61);
LABEL_89:
    uint64_t v17 = 1;
    goto LABEL_90;
  }
  llvm::AppleAcceleratorTable::extract((llvm::AppleAcceleratorTable *)&v94, &v90);
  if (v90)
  {
    uint64_t v62 = llvm::WithColor::error(*a1, "", 0, 0);
    unint64_t v89 = v90;
    unint64_t v90 = 0;
    sub_1CD4FB504((uint64_t *)&v89, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(v62, (const char *)p_p, size);
    BOOL v65 = (unsigned char *)*((void *)v62 + 4);
    if ((unint64_t)v65 >= *((void *)v62 + 3))
    {
      llvm::raw_ostream::write(v62, 10);
    }
    else
    {
      *((void *)v62 + 4) = v65 + 1;
      *BOOL v65 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v89) {
      (*(void (**)(unint64_t))(*(void *)v89 + 8))(v89);
    }
    if (v90) {
      (*(void (**)(unint64_t))(*(void *)v90 + 8))(v90);
    }
    uint64_t v17 = 1;
    goto LABEL_90;
  }
  uint64_t v71 = v101;
  std::string::size_type v72 = (std::string::size_type)a4;
  unint64_t v15 = (v102 + 20);
  unint64_t v90 = v15;
  uint64_t v75 = v100;
  if (v100)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = sub_1CD8337FC((uint64_t)&v91, &v90, 0);
      if (v18 >= v71 && v18 != -1)
      {
        uint64_t v20 = v18;
        uint64_t v21 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26088E8;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Bucket[%d] has invalid hash index: %u.\n";
        __p.__r_.__value_.__r.__words[2] = v16 | (v20 << 32);
        llvm::raw_ostream::operator<<(v21, (uint64_t)&__p);
        uint64_t v17 = (v17 + 1);
      }
      ++v16;
    }
    while (v75 != v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (!v104)
  {
    unsigned int v58 = llvm::WithColor::error(*a1, "", 0, 0);
    int v66 = (void *)*((void *)v58 + 4);
    if (*((void *)v58 + 3) - (void)v66 > 0x22uLL)
    {
      qmemcpy(v66, "No atoms: failed to read HashData.\n", 35);
      uint64_t v69 = *((void *)v58 + 4) + 35;
      goto LABEL_109;
    }
    char v60 = "No atoms: failed to read HashData.\n";
    size_t v61 = 35;
    goto LABEL_88;
  }
  if (!llvm::AppleAcceleratorTable::validateForms((llvm::AppleAcceleratorTable *)&v94))
  {
    unsigned int v58 = llvm::WithColor::error(*a1, "", 0, 0);
    size_t v67 = (void *)*((void *)v58 + 4);
    if (*((void *)v58 + 3) - (void)v67 <= 0x2AuLL)
    {
      char v60 = "Unsupported form: failed to read HashData.\n";
      size_t v61 = 43;
      goto LABEL_88;
    }
    qmemcpy(v67, "Unsupported form: failed to read HashData.\n", 43);
    uint64_t v69 = *((void *)v58 + 4) + 43;
LABEL_109:
    *((void *)v58 + 4) = v69;
    goto LABEL_89;
  }
  if (v71)
  {
    uint64_t v22 = 0;
    unint64_t v70 = v15 + (4 * v75);
    while (1)
    {
      uint64_t v23 = (4 * v22);
      unint64_t v88 = v23 + v70;
      unint64_t v87 = v70 + (4 * v71) + v23;
      uint64_t v24 = v22;
      unsigned int v25 = sub_1CD8337FC((uint64_t)&v91, &v88, 0);
      unint64_t v86 = 0;
      unint64_t v86 = sub_1CD8337FC((uint64_t)&v91, &v87, 0);
      uint64_t v74 = v24;
      if (*((void *)&v91 + 1) <= v86 + 7)
      {
        uint64_t v26 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2618A28;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Hash[%d] has invalid HashData offset: 0x%08llx.\n";
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v24;
        unint64_t v78 = v86;
        llvm::raw_ostream::operator<<(v26, (uint64_t)&__p);
        uint64_t v17 = (v17 + 1);
      }
      unsigned int v27 = sub_1CD8337FC((uint64_t)&v91, &v86, 0);
      if (v27) {
        break;
      }
LABEL_72:
      uint64_t v22 = v74 + 1;
      if (v74 + 1 == v71) {
        goto LABEL_90;
      }
    }
    unsigned int v28 = v27;
    int v76 = 0;
    while (1)
    {
      unsigned int v29 = sub_1CD8337FC((uint64_t)&v91, &v86, 0);
      if (v29) {
        break;
      }
LABEL_28:
      ++v76;
      unsigned int v28 = sub_1CD8337FC((uint64_t)&v91, &v86, 0);
      if (!v28) {
        goto LABEL_72;
      }
    }
    unint64_t v30 = 0;
    unint64_t v31 = v28;
    uint64_t v32 = v29;
    while (1)
    {
      unint64_t v33 = llvm::AppleAcceleratorTable::readAtoms((llvm::AppleAcceleratorTable *)&v94, &v86);
      unsigned __int16 v35 = v34;
      if (llvm::DWARFContext::getDIEForOffset((uint64_t **)a1[1], v33)) {
        BOOL v37 = v36 == 0;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        if (v75) {
          unsigned int v40 = v25 % v75;
        }
        else {
          unsigned int v40 = -1;
        }
        unint64_t v85 = v31;
        uint64_t CStrRef = (const char *)llvm::DataExtractor::getCStrRef(v73, &v85, 0);
        if (CStrRef) {
          int v49 = CStrRef;
        }
        else {
          int v49 = "<NULL>";
        }
        int v50 = llvm::WithColor::error(*a1, "", 0, 0);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26195C0;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"%s Bucket[%d] Hash[%d] = 0x%08x Str[%u] = 0x%08llx DIE[%"
                                                                "d] = 0x%08llx is not a valid DIE offset for \"%s\".\n";
        __p.__r_.__value_.__r.__words[2] = v72;
        unint64_t v78 = __PAIR64__(v74, v40);
        unsigned int v79 = v25;
        int v80 = v76;
        unint64_t v81 = v31;
        int v82 = v30;
        unint64_t v83 = v33;
        BOOL v84 = v49;
        llvm::raw_ostream::operator<<(v50, (uint64_t)&__p);
      }
      else
      {
        if (!v35) {
          goto LABEL_39;
        }
        uint64_t v38 = v36;
        uint64_t v39 = *(void *)(v36 + 16);
        if (v39) {
          LODWORD(v39) = *(unsigned __int16 *)(v39 + 4);
        }
        if (v39 == v35) {
          goto LABEL_39;
        }
        uint64_t v41 = llvm::WithColor::error(*a1, "", 0, 0);
        int v42 = v41;
        size_t v43 = (_DWORD *)*((void *)v41 + 4);
        if (*((void *)v41 + 3) - (void)v43 > 3uLL)
        {
          *size_t v43 = 543646036;
          *((void *)v41 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v41, "Tag ", 4uLL);
        }
        int v45 = llvm::dwarf::TagString((llvm::dwarf *)v35);
        size_t v46 = v44;
        uint64_t v47 = (void *)*((void *)v42 + 4);
        if (v44 <= *((void *)v42 + 3) - (void)v47)
        {
          if (v44)
          {
            memcpy(v47, v45, v44);
            uint64_t v47 = (void *)(*((void *)v42 + 4) + v46);
            *((void *)v42 + 4) = v47;
          }
        }
        else
        {
          llvm::raw_ostream::write(v42, v45, v44);
          uint64_t v47 = (void *)*((void *)v42 + 4);
        }
        if (*((void *)v42 + 3) - (void)v47 > 0x28uLL)
        {
          qmemcpy(v47, " in accelerator table does not match Tag ", 41);
          *((void *)v42 + 4) += 41;
        }
        else
        {
          llvm::raw_ostream::write(v42, " in accelerator table does not match Tag ", 0x29uLL);
        }
        uint64_t v51 = *(void *)(v38 + 16);
        if (v51) {
          uint64_t v52 = (llvm::dwarf *)*(unsigned __int16 *)(v51 + 4);
        }
        else {
          uint64_t v52 = 0;
        }
        unsigned int v54 = llvm::dwarf::TagString(v52);
        size_t v55 = v53;
        size_t v56 = (void *)*((void *)v42 + 4);
        if (v53 <= *((void *)v42 + 3) - (void)v56)
        {
          if (v53)
          {
            memcpy(v56, v54, v53);
            size_t v56 = (void *)(*((void *)v42 + 4) + v55);
            *((void *)v42 + 4) = v56;
          }
        }
        else
        {
          llvm::raw_ostream::write(v42, v54, v53);
          size_t v56 = (void *)*((void *)v42 + 4);
        }
        if (*((void *)v42 + 3) - (void)v56 > 7uLL)
        {
          void *v56 = 0x5B45494420666F20;
          *((void *)v42 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v42, " of DIE[", 8uLL);
        }
        sub_1CD098D14(v42, v30, 0, 0, 0);
        uint64_t v57 = *((void *)v42 + 4);
        if ((unint64_t)(*((void *)v42 + 3) - v57) > 2)
        {
          *(unsigned char *)(v57 + 2) = 10;
          *(_WORD *)uint64_t v57 = 11869;
          *((void *)v42 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v42, "].\n", 3uLL);
        }
      }
      uint64_t v17 = (v17 + 1);
LABEL_39:
      if (v32 == ++v30) {
        goto LABEL_28;
      }
    }
  }
LABEL_90:
  uint64_t v94 = &unk_1F2618888;
  if (v103 != v105) {
    free(v103);
  }
  return v17;
}

uint64_t llvm::DWARFVerifier::verifyDebugNamesCULists(llvm::DWARFVerifier *this, const llvm::DWARFDebugNames *a2)
{
  int v49 = 0;
  uint64_t v50 = 0;
  unsigned int v51 = 0;
  uint64_t v3 = *((void *)this + 1);
  llvm::DWARFContext::parseNormalUnits(v3);
  int v4 = *(_DWORD *)(v3 + 72);
  if (v4 == -1) {
    int v4 = *(_DWORD *)(v3 + 24);
  }
  if (v4)
  {
    unint64_t v33 = (4 * v4 / 3u + 1) | ((unint64_t)(4 * v4 / 3u + 1) >> 1);
    unint64_t v34 = v33 | (v33 >> 2) | ((v33 | (v33 >> 2)) >> 4);
    sub_1CD5EF5CC((uint64_t)&v49, (((v34 | (v34 >> 8)) >> 16) | v34 | (v34 >> 8)) + 1);
  }
  sub_1CC6821F8(*((void *)this + 1), &v37);
  char v5 = v37;
  long long v6 = (const char *)v40;
  if (v37 != (const char *)v40)
  {
    uint64_t v7 = (const char *)v38;
    uint64_t v8 = v39;
    do
    {
      unint64_t RelocatedValue = *(void *)(*(void *)v5 + 24);
      sub_1CC6B364C((uint64_t)&v49, (uint64_t *)&RelocatedValue)[1] = -1;
      while (1)
      {
        v5 += 8;
        if (v5 == v7) {
          break;
        }
        if (((unsigned int (*)(const char *))v8)(v5)) {
          goto LABEL_12;
        }
      }
      char v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != v6);
  }
  unsigned int v9 = *((_DWORD *)a2 + 20);
  if (v9)
  {
    unsigned int v36 = 0;
    uint64_t v10 = *((void *)a2 + 9);
    uint64_t v11 = v10 + 160 * v9;
    do
    {
      int v12 = *(_DWORD *)(v10 + 36);
      if (v12)
      {
        for (int i = 0; i != v12; ++i)
        {
          unint64_t RelocatedValue = 0;
          if (*(unsigned char *)(v10 + 32)) {
            int v14 = 8;
          }
          else {
            int v14 = 4;
          }
          if (*(unsigned char *)(v10 + 32)) {
            char v15 = 3;
          }
          else {
            char v15 = 2;
          }
          BOOL v37 = (const char *)(*(void *)(v10 + 112) + (i << v15));
          unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(*(void *)(v10 + 96) + 8, v14, (unint64_t *)&v37, 0, 0);
          uint64_t v16 = sub_1CC6AFC28((uint64_t *)&v49, &RelocatedValue);
          if (&v49[2 * v51] == (unint64_t *)v16)
          {
            uint64_t v18 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
            int v19 = *(unint64_t **)(v10 + 104);
            BOOL v37 = "Name Index @ {0:x} references a non-existing CU @ {1:x}\n";
            uint64_t v38 = 56;
            uint64_t v39 = &v45;
            uint64_t v40 = 2;
            uint64_t v41 = &unk_1F26014A0;
            int v42 = v19;
            size_t v43 = (void **)&unk_1F2619590;
            p_unint64_t RelocatedValue = &RelocatedValue;
            int v45 = &v41;
            size_t v46 = &v43;
            sub_1CD862C68((uint64_t)&v37, v18);
            ++v36;
          }
          else
          {
            uint64_t v17 = (void ***)(v16 + 1);
            if (v16[1] == -1)
            {
              *uint64_t v17 = *(void ***)(v10 + 104);
            }
            else
            {
              uint64_t v20 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
              uint64_t v21 = *(unint64_t **)(v10 + 104);
              BOOL v37 = "Name Index @ {0:x} references a CU @ {1:x}, but this CU is already indexed by Name Index @ {2:x}\n";
              uint64_t v38 = 97;
              uint64_t v39 = (void ***)v47;
              uint64_t v40 = 3;
              uint64_t v41 = &unk_1F26014A0;
              int v42 = v21;
              size_t v43 = (void **)&unk_1F2619590;
              p_unint64_t RelocatedValue = &RelocatedValue;
              int v45 = (void **)&unk_1F2619590;
              size_t v46 = v17;
              v47[0] = &v41;
              v47[1] = &v43;
              v47[2] = &v45;
              sub_1CD862C68((uint64_t)&v37, v20);
            }
          }
        }
      }
      else
      {
        uint64_t v22 = llvm::WithColor::error(*(llvm::raw_ostream **)this, "", 0, 0);
        uint64_t v23 = *(unint64_t **)(v10 + 104);
        BOOL v37 = "Name Index @ {0:x} does not index any CU\n";
        uint64_t v38 = 41;
        uint64_t v39 = &v43;
        uint64_t v40 = 1;
        uint64_t v41 = &unk_1F26014A0;
        int v42 = v23;
        size_t v43 = &v41;
        sub_1CD862C68((uint64_t)&v37, v22);
        ++v36;
      }
      v10 += 160;
    }
    while (v10 != v11);
  }
  else
  {
    unsigned int v36 = 0;
  }
  uint64_t v24 = (uint64_t)v49;
  unsigned int v25 = &v49[2 * v51];
  if (v50)
  {
    if (v51)
    {
      uint64_t v26 = 16 * v51;
      unsigned int v27 = v49;
      while (*v27 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v27 += 2;
        v26 -= 16;
        if (!v26) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      unsigned int v27 = v49;
    }
  }
  else
  {
LABEL_39:
    unsigned int v27 = &v49[2 * v51];
  }
  unsigned int v28 = &v49[2 * v51];
  if (v27 != v28)
  {
    do
    {
      if (v27[1] == -1)
      {
        unint64_t v31 = llvm::WithColor::warning(*(llvm::raw_ostream **)this, "", 0, 0);
        BOOL v37 = "CU @ {0:x} not covered by any Name Index\n";
        uint64_t v38 = 41;
        uint64_t v39 = &v43;
        uint64_t v40 = 1;
        uint64_t v41 = &unk_1F26192C0;
        int v42 = v27;
        size_t v43 = &v41;
        sub_1CD862C68((uint64_t)&v37, v31);
      }
      unsigned int v29 = v27 + 2;
      while (v29 != v25)
      {
        unint64_t v30 = *v29;
        v29 += 2;
        if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v27 = v29 - 2;
          goto LABEL_49;
        }
      }
      unsigned int v27 = v25;
LABEL_49:
      ;
    }
    while (v27 != v28);
    uint64_t v24 = (uint64_t)v49;
  }
  MEMORY[0x1D25D9CD0](v24, 8);
  return v36;
}