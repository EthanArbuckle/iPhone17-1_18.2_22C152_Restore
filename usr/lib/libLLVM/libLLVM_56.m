uint64_t llvm::MCAsmParser::parseMany(llvm::MCAsmParser *a1, uint64_t (*a2)(uint64_t), uint64_t a3, int a4)
{
  BOOL v9;
  const char *v10;
  __int16 v11;

  if (llvm::MCAsmParser::parseOptionalToken(a1, 9)) {
    return 0;
  }
  if (a2(a3)) {
    return 1;
  }
  do
  {
    v9 = llvm::MCAsmParser::parseOptionalToken(a1, 9);
    if (v9) {
      break;
    }
    if (a4)
    {
      v10 = "unexpected token";
      v11 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v10)) {
        break;
      }
    }
  }
  while (!a2(a3));
  return !v9;
}

uint64_t llvm::MCAsmParser::parseGNUAttribute(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  v7 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  if (*v7 != 4) {
    return 0;
  }
  v8 = (void **)(v7 + 6);
  v9 = v7 + 6;
  if (v7[8] >= 0x41u) {
    v9 = *v8;
  }
  *a3 = *v9;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (*v7 != 4) {
    return 0;
  }
  if (v7[8] >= 0x41u) {
    v8 = (void **)*v8;
  }
  *a4 = *v8;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  return 1;
}

uint64_t sub_1CD393948()
{
  v4 = &v3;
  int v2 = 1;
  int v3 = 20;
  *(void *)&long long v1 = "The maximum nesting depth allowed for assembly macros.";
  *((void *)&v1 + 1) = 54;
  sub_1CBF7A9F8((uint64_t)&AsmMacroMaxNestingDepth, "asm-macro-max-nesting-depth", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &AsmMacroMaxNestingDepth, &dword_1CB82C000);
}

uint64_t llvm::MCAsmParserExtension::MCAsmParserExtension(uint64_t this)
{
  *(void *)this = &unk_1F264C850;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F264C850;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

uint64_t llvm::MCTargetAsmParser::copySTI(llvm::MCTargetAsmParser *this)
{
  int v2 = (llvm::MCContext *)(*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  uint64_t result = llvm::MCContext::getSubtargetCopy(v2, *((const llvm::MCSubtargetInfo **)this + 30));
  *((void *)this + 30) = result;
  return result;
}

void llvm::createMCMasmParser(llvm *this, llvm::SourceMgr *a2, llvm::MCContext *a3, llvm::MCStreamer *a4, const llvm::MCAsmInfo *a5, tm *a6)
{
}

void sub_1CD3946F8(uint64_t a1, uint64_t a2)
{
  v42[22] = *(void **)MEMORY[0x1E4F143B8];
  v4 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v5 = *(llvm::raw_ostream **)a1;
  v6 = *(char **)(a1 + 8);
  unsigned int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)a1, (unint64_t)v6);
  int v8 = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a2 + 240), *(void *)(a2 + 784));
  if (*(void *)(a2 + 248)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = BufferContainingLoc >= 2;
  }
  if (v9) {
    llvm::SourceMgr::PrintIncludeStack(v5, *(char **)(*(void *)v5 + 24 * (BufferContainingLoc - 1) + 16), v4);
  }
  if (!*(void *)(a2 + 776) || v5 != *(llvm::raw_ostream **)(a2 + 240) || BufferContainingLoc != v8)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(a2 + 248);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 256);
      v10(a1, v11);
    }
    else
    {
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)a1, 0, v4, 1, 1);
    }
    return;
  }
  size_t v12 = *(void *)(a2 + 768);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  v13 = *(const void **)(a2 + 760);
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    std::string::size_type v31 = v12;
    int64_t v32 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v32) = *(void *)(a2 + 768);
    p_dst = (void **)&__dst;
    if (!v12) {
      goto LABEL_24;
    }
  }
  memmove(p_dst, v13, v12);
LABEL_24:
  *((unsigned char *)p_dst + v12) = 0;
  int LineAndColumn = llvm::SourceMgr::getLineAndColumn((uint64_t *)v5, v6, BufferContainingLoc);
  int v18 = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a2 + 240), *(char **)(a2 + 784), BufferContainingLoc)+ LineAndColumn+ *(_DWORD *)(a2 + 776);
  if (v32 >= 0) {
    v19 = (std::string::value_type *)&__dst;
  }
  else {
    v19 = (std::string::value_type *)__dst;
  }
  if (v32 >= 0) {
    std::string::size_type v20 = HIBYTE(v32) & 0x7F;
  }
  else {
    std::string::size_type v20 = v31;
  }
  char v21 = *(unsigned char *)(a1 + 79);
  BOOL v22 = v21 < 0;
  if (v21 >= 0) {
    v23 = (const std::string::value_type *)(a1 + 56);
  }
  else {
    v23 = *(const std::string::value_type **)(a1 + 56);
  }
  std::string::size_type v24 = v21 & 0x7F;
  if (v22) {
    std::string::size_type v24 = *(void *)(a1 + 64);
  }
  char v25 = *(unsigned char *)(a1 + 103);
  BOOL v26 = v25 < 0;
  if (v25 >= 0) {
    v27 = (const std::string::value_type *)(a1 + 80);
  }
  else {
    v27 = *(const std::string::value_type **)(a1 + 80);
  }
  std::string::size_type v28 = v25 & 0x7F;
  if (v26) {
    std::string::size_type v28 = *(void *)(a1 + 88);
  }
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v33, *(void *)a1, *(void *)(a1 + 8), v19, v20, v18, *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), v23, v24, v27, v28, *(unsigned char **)(a1 + 104), (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3, 0, 0);
  v29 = *(void (**)(unsigned char *, void))(a2 + 248);
  if (v29) {
    v29(v33, *(void *)(a2 + 256));
  }
  else {
    llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v33, 0, v4, 1, 1);
  }
  sub_1CC1925A4(v42);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst);
  }
}

uint64_t sub_1CD394A78(uint64_t a1)
{
  *(void *)a1 = &unk_1F264C958;
  *(_OWORD *)(*(void *)(a1 + 240) + 48) = *(_OWORD *)(a1 + 248);
  if (*(_DWORD *)(a1 + 1148))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 1144);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 1136) + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 1136));
  if (*(_DWORD *)(a1 + 1116))
  {
    uint64_t v7 = *(unsigned int *)(a1 + 1112);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 1104) + v8);
        if (v10 != -8 && v10 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*(void **)(a1 + 1104));
  if (*(_DWORD *)(a1 + 1084))
  {
    uint64_t v12 = *(unsigned int *)(a1 + 1080);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 1072) + v13);
        if (v15 != -8 && v15 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v13 += 8;
      }
      while (v14 != v13);
    }
  }
  free(*(void **)(a1 + 1072));
  v17 = *(void **)(a1 + 816);
  if (v17 != (void *)(a1 + 832)) {
    free(v17);
  }
  sub_1CD379FD8((void **)(a1 + 704));
  int v18 = *(void **)(a1 + 680);
  if (v18)
  {
    *(void *)(a1 + 688) = v18;
    operator delete(v18);
  }
  if (*(_DWORD *)(a1 + 660))
  {
    uint64_t v19 = *(unsigned int *)(a1 + 656);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 8 * v19;
      do
      {
        uint64_t v22 = *(void *)(*(void *)(a1 + 648) + v20);
        if (v22 != -8 && v22 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v20 += 8;
      }
      while (v21 != v20);
    }
  }
  free(*(void **)(a1 + 648));
  if (*(_DWORD *)(a1 + 628))
  {
    uint64_t v24 = *(unsigned int *)(a1 + 624);
    if (v24)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 8 * v24;
      do
      {
        uint64_t v27 = *(void *)(*(void *)(a1 + 616) + v25);
        if (v27 != -8 && v27 != 0)
        {
          sub_1CD61201C(v27 + 72);
          sub_1CD39B200((void **)(v27 + 48));
          MEMORY[0x1D25D9CD0](v27, 8);
        }
        v25 += 8;
      }
      while (v26 != v25);
    }
  }
  free(*(void **)(a1 + 616));
  v29 = *(char **)(a1 + 504);
  uint64_t v30 = *(unsigned int *)(a1 + 512);
  if (v30)
  {
    uint64_t v31 = 96 * v30;
    do
    {
      sub_1CD61201C((uint64_t)&v29[v31 - 32]);
      sub_1CD39B200((void **)&v29[v31 - 56]);
      v31 -= 96;
    }
    while (v31);
    v29 = *(char **)(a1 + 504);
  }
  if (v29 != (char *)(a1 + 520)) {
    free(v29);
  }
  if (*(_DWORD *)(a1 + 484))
  {
    uint64_t v32 = *(unsigned int *)(a1 + 480);
    if (v32)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 8 * v32;
      do
      {
        uint64_t v35 = *(void *)(*(void *)(a1 + 472) + v33);
        if (v35 != -8 && v35 != 0)
        {
          if (*(char *)(v35 + 55) < 0) {
            operator delete(*(void **)(v35 + 32));
          }
          MEMORY[0x1D25D9CD0](v35, 8);
        }
        v33 += 8;
      }
      while (v34 != v33);
    }
  }
  free(*(void **)(a1 + 472));
  sub_1CD4AFD10(a1 + 440);
  char v37 = *(void **)(a1 + 416);
  if (v37)
  {
    *(void *)(a1 + 424) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 336);
  if (v38 != (void *)(a1 + 352)) {
    free(v38);
  }
  uint64_t v39 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  llvm::MCAsmLexer::~MCAsmLexer((llvm::MCAsmLexer *)(a1 + 40));
  *(void *)a1 = &unk_1F264C690;
  sub_1CD8F6154((char **)(a1 + 16));
  return a1;
}

void sub_1CD394DA0(uint64_t a1)
{
  sub_1CD394A78(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t *sub_1CD394DD8(unsigned int *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t *)sub_1CD8F49C0((uint64_t)(a1 + 110), a2, a3);
  uint64_t v11 = *result;
  *(void *)(v11 + 8) = a4;
  *(void *)(v11 + 16) = a5;
  uint64_t v12 = a1[270];
  if (!v12) {
    goto LABEL_15;
  }
  int v13 = 0;
  if (a3)
  {
    size_t v14 = a3;
    uint64_t v15 = a2;
    do
    {
      int v16 = *v15++;
      int v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  uint64_t v17 = *((void *)a1 + 134);
  int v18 = 1;
  int v19 = v13;
  while (1)
  {
    uint64_t v20 = v19 & (v12 - 1);
    uint64_t v21 = *(void **)(v17 + 8 * v20);
    if (v21 != (void *)-8)
    {
      if (!v21) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(v17 + 8 * v12 + 8 + 4 * v20) == v13 && a3 == *v21)
      {
        if (!a3) {
          break;
        }
        uint64_t result = (uint64_t *)memcmp(a2, (char *)v21 + a1[273], a3);
        if (!result) {
          break;
        }
      }
    }
    int v19 = v18 + v20;
    ++v18;
  }
  if (v20 == -1 || (int)v20 == v12)
  {
LABEL_15:
    uint64_t result = sub_1CD379C2C((llvm::StringMapImpl *)(a1 + 268), a2, a3);
    *(_DWORD *)uint64_t result = 1;
  }
  return result;
}

void *sub_1CD394EFC(uint64_t a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t __n)
{
  uint64_t v7 = (llvm::StringMapImpl *)(a1 + 1072);
  int v8 = *(_DWORD *)sub_1CD379C2C((llvm::StringMapImpl *)(a1 + 1072), a4, __n);
  uint64_t result = sub_1CD379C2C(v7, a2, a3);
  *(_DWORD *)uint64_t result = v8;
  return result;
}

uint64_t sub_1CD394F54(uint64_t a1)
{
  return *(void *)(a1 + 240);
}

uint64_t sub_1CD394F5C(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_1CD394F64(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

uint64_t sub_1CD394F6C(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

uint64_t sub_1CD394F74(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1056);
  if (result == -1) {
    return *(unsigned int *)(*(void *)(a1 + 232) + 176);
  }
  return result;
}

uint64_t sub_1CD394F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1056) = a2;
  return result;
}

BOOL sub_1CD394F9C(uint64_t a1, char a2, char a3)
{
  v65[64] = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0) {
    (*(void (**)(void, void, void))(**(void **)(a1 + 224) + 176))(*(void *)(a1 + 224), 0, *(void *)(*(void *)(a1 + 8) + 240));
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  *(unsigned char *)(a1 + 32) = 0;
  int v5 = *(_DWORD *)(a1 + 408);
  char v6 = *(unsigned char *)(a1 + 413);
  v64[0] = v65;
  v64[1] = (void *)0x400000000;
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 1513))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v8 = *(unsigned int *)(v7 + 120);
    if (v8) {
      unint64_t v3 = *(void *)(*(void *)(v7 + 112) + 32 * v8 - 32);
    }
    else {
      unint64_t v3 = 0;
    }
    if (!*(void *)(v3 + 8))
    {
      uint64_t v9 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      v55[0] = "tmp";
      __int16 v57 = 259;
      uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v9, (const llvm::Twine *)v55, 1);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v11 + 192))(v11, TempSymbol, 0);
      *(void *)(v3 + 8) = TempSymbol;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    v55[0] = (char *)v3;
    sub_1CC61C590((void *)(v12 + 1520), v55);
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8));
  while (1)
  {
    if (**(_DWORD **)(a1 + 48)) {
      goto LABEL_14;
    }
    if (!*(void *)(**(void **)(a1 + 240) + 24 * (*(_DWORD *)(a1 + 272) - 1) + 16)) {
      break;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
LABEL_14:
    v55[0] = (char *)&v56;
    v55[1] = (char *)0x800000000;
    int v58 = -1;
    char v59 = 0;
    LOBYTE(__p) = 0;
    char v62 = 0;
    v63 = v64;
    if (sub_1CD39B384(a1, (uint64_t)v55, 0))
    {
      if (!*(_DWORD *)(a1 + 24) && **(_DWORD **)(a1 + 48) == 1) {
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      }
      sub_1CD8F4AC0(a1);
      if (!*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 107)) {
        (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
      }
    }
    else
    {
      sub_1CD8F4AC0(a1);
    }
    if (v62)
    {
      if (v61 < 0) {
        operator delete(__p);
      }
      char v62 = 0;
    }
    sub_1CD381630(v55);
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8));
  sub_1CD8F4AC0(a1);
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 176))(v13, v14);
  if (*(_DWORD *)(a1 + 408) != v5 || *(unsigned char *)(a1 + 413) != (v6 & 1))
  {
    uint64_t v15 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
    v55[0] = "unmatched .ifs or .elses";
    __int16 v57 = 259;
    (*(void (**)(uint64_t, uint64_t, char **, void, void))(*(void *)a1 + 176))(a1, v15, v55, 0, 0);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (*(void *)(v16 + 1488))
  {
    uint64_t v17 = *(void *)(v16 + 1472);
    uint64_t v18 = *(unsigned int *)(v17 + 144);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 72 * v18;
      uint64_t v21 = (char *)(*(void *)(v17 + 136) + 23);
      do
      {
        if (*v21 < 0) {
          uint64_t v22 = *(void *)(v21 - 15);
        }
        else {
          uint64_t v22 = *v21;
        }
        if (v22) {
          BOOL v23 = 1;
        }
        else {
          BOOL v23 = v19 == 0;
        }
        if (!v23)
        {
          uint64_t v24 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
          unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v19;
          v51[0] = "unassigned file number: ";
          unint64_t v52 = v3;
          __int16 v54 = 2051;
          v55[0] = (char *)v51;
          v56 = " for .file directives";
          __int16 v57 = 770;
          (*(void (**)(uint64_t, uint64_t, char **, void, void))(*(void *)a1 + 176))(a1, v24, v55, 0, 0);
        }
        ++v19;
        v21 += 72;
        v20 -= 72;
      }
      while (v20);
    }
  }
  if (a3)
  {
LABEL_77:
    if (*(unsigned char *)(a1 + 32)) {
      goto LABEL_78;
    }
    BOOL v48 = *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 1960) != 0;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1 + 232) + 18))
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v26 = *(unsigned int *)(v25 + 1064);
      if (v26)
      {
        for (i = *(uint64_t **)(v25 + 1056); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = *(uint64_t **)(v25 + 1056);
      }
      uint64_t v29 = *(void *)(v25 + 1056) + 8 * v26;
      if (i != (uint64_t *)v29)
      {
        uint64_t v30 = *i;
        do
        {
          uint64_t v31 = *(void *)(v30 + 8);
          if ((*(_DWORD *)(v31 + 8) & 1) != 0 && (*(_DWORD *)(v31 + 8) & 0x1C00) != 0x800 && *(void *)v31 <= 7uLL)
          {
            uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if ((*(unsigned char *)v31 & 4) != 0)
            {
              uint64_t v35 = *(uint64_t **)(v31 - 8);
              uint64_t v36 = *v35;
              uint64_t v33 = v35 + 2;
              uint64_t v34 = v36;
            }
            else
            {
              uint64_t v33 = 0;
              uint64_t v34 = 0;
            }
            uint64_t v37 = *(void *)(*(void *)(v32 + 8) + 8);
            __int16 v54 = 1283;
            v51[0] = "assembler local symbol '";
            unint64_t v52 = (unint64_t)v33;
            uint64_t v53 = v34;
            v55[0] = (char *)v51;
            v56 = "' not defined";
            __int16 v57 = 770;
            (*(void (**)(uint64_t, uint64_t, char **, void, void))(*(void *)a1 + 176))(a1, v37, v55, 0, 0);
          }
          do
          {
            uint64_t v38 = i[1];
            ++i;
            uint64_t v30 = v38;
            if (v38) {
              BOOL v39 = v30 == -8;
            }
            else {
              BOOL v39 = 1;
            }
          }
          while (v39);
        }
        while (i != (uint64_t *)v29);
      }
    }
    uint64_t v40 = *(unsigned int *)(a1 + 824);
    if (v40)
    {
      v41 = *(uint64_t **)(a1 + 816);
      uint64_t v42 = 56 * v40;
      do
      {
        uint64_t v43 = v41[6];
        unint64_t AssociatedFragment = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (*(_DWORD *)(v43 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v43 + 8) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v43 + 24));
          *(void *)uint64_t v43 = *(void *)v43 & 7 | AssociatedFragment;
        }
        if (!AssociatedFragment)
        {
          long long v45 = *(_OWORD *)(v41 + 1);
          long long v46 = *(_OWORD *)(v41 + 3);
          *(_DWORD *)(a1 + 792) = *((_DWORD *)v41 + 10);
          *(_OWORD *)(a1 + 760) = v45;
          *(_OWORD *)(a1 + 776) = v46;
          uint64_t v47 = *v41;
          v55[0] = "directional label undefined";
          __int16 v57 = 259;
          (*(void (**)(uint64_t, uint64_t, char **, void, void))(*(void *)a1 + 176))(a1, v47, v55, 0, 0);
        }
        v41 += 7;
        v42 -= 56;
      }
      while (v42);
    }
    if (!*(unsigned char *)(a1 + 32))
    {
      llvm::MCStreamer::Finish(*(void **)(a1 + 224), *(void *)(a1 + 136));
      goto LABEL_77;
    }
LABEL_78:
    BOOL v48 = 1;
  }
  if (v64[0] != v65) {
    free(v64[0]);
  }
  return v48;
}

uint64_t sub_1CD395870(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1061) = a2;
  *(unsigned char *)(result + 149) = a2;
  return result;
}

uint64_t sub_1CD39587C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1061);
}

uint64_t sub_1CD395884()
{
  return 1;
}

uint64_t sub_1CD39588C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = a3;
  uint64_t v8 = (llvm::StringMapImpl *)(a1 + 472);
  llvm::StringRef::lower((llvm::StringRef *)&v24, __p);
  if (SHIBYTE(v22) >= 0) {
    uint64_t v9 = (unsigned __int8 *)__p;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)__p[0];
  }
  if (SHIBYTE(v22) >= 0) {
    size_t v10 = HIBYTE(v22) & 0x7F;
  }
  else {
    size_t v10 = (size_t)__p[1];
  }
  uint64_t v11 = sub_1CD3B6A5C(v8, v9, v10);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (v11[1])
  {
    int v12 = *((_DWORD *)v11 + 4);
    if (!v12)
    {
      __p[0] = "invalid variable redefinition";
      __int16 v23 = 259;
      return llvm::MCAsmParser::Error(a1, 0, (uint64_t)__p, 0, 0);
    }
    if (v12 == 1)
    {
      __int16 v20 = 1283;
      uint64_t v18 = "redefining '";
      long long v19 = v24;
      __p[0] = &v18;
      uint64_t v22 = "', already defined on the command line";
      __int16 v23 = 770;
      if ((*(uint64_t (**)(uint64_t, void, void **, void, void))(*(void *)a1 + 168))(a1, 0, __p, 0, 0))return 1; {
    }
      }
  }
  else
  {
    *(_OWORD *)uint64_t v11 = v24;
  }
  *((_DWORD *)v11 + 4) = 1;
  *((unsigned char *)v11 + 20) = 1;
  if (a4)
  {
    if (a5 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a5 >= 0x17)
    {
      uint64_t v15 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17) {
        uint64_t v15 = a5 | 7;
      }
      uint64_t v16 = v15 + 1;
      uint64_t v14 = operator new(v15 + 1);
      __p[1] = (void *)a5;
      uint64_t v22 = (const char *)(v16 | 0x8000000000000000);
      __p[0] = v14;
    }
    else
    {
      HIBYTE(v22) = a5;
      uint64_t v14 = __p;
      if (!a5) {
        goto LABEL_25;
      }
    }
    memmove(v14, a4, a5);
LABEL_25:
    *((unsigned char *)v14 + a5) = 0;
    goto LABEL_26;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v22 = 0;
LABEL_26:
  uint64_t v17 = (void **)(v11 + 3);
  if (*((char *)v11 + 47) < 0) {
    operator delete(*v17);
  }
  uint64_t result = 0;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)__p;
  v11[5] = v22;
  return result;
}

uint64_t sub_1CD395A98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v17[0] = a2;
  v17[1] = a3;
  char v18 = 46;
  unint64_t v8 = llvm::StringRef::find(v17, &v18, 1uLL, 0);
  if (a3 >= v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = a3;
  }
  if (a3 >= v8 + 1) {
    unint64_t v10 = v8 + 1;
  }
  else {
    unint64_t v10 = a3;
  }
  unint64_t v11 = a2 + v10;
  unint64_t v12 = a3 - v10;
  if (v8 == -1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v8 == -1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v11;
  }
  if (v8 == -1) {
    unint64_t v15 = a3;
  }
  else {
    unint64_t v15 = v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, v15, v14, v13, a4);
}

uint64_t sub_1CD395B50(void *a1, void *__s, size_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  *(void *)&long long v72 = __s;
  *((void *)&v72 + 1) = a3;
  if (!a3) {
    return 1;
  }
  uint64_t v69 = 0;
  long long v68 = 0uLL;
  int v71 = 0;
  int v70 = 0;
  unint64_t v9 = memchr(__s, 46, a3);
  if (v9
    && v9 - (unsigned char *)__s != -1
    && ((*(uint64_t (**)(void *, void *, size_t, long long *))(*a1 + 128))(a1, __s, a3, &v68) & 1) == 0)
  {
    long long v72 = v68;
  }
  llvm::StringRef::lower((llvm::StringRef *)&v72, &v65);
  int v10 = v67;
  if (v67 >= 0) {
    unint64_t v11 = (unsigned __int8 *)&v65;
  }
  else {
    unint64_t v11 = v65;
  }
  if (v67 >= 0) {
    size_t v12 = v67 & 0x7F;
  }
  else {
    size_t v12 = v66;
  }
  uint64_t v13 = *((unsigned int *)a1 + 156);
  __p = v65;
  if (v13)
  {
    int v14 = 0;
    if (v12)
    {
      size_t v15 = v12;
      uint64_t v16 = v11;
      do
      {
        int v17 = *v16++;
        int v14 = 33 * v14 + v17;
        --v15;
      }
      while (v15);
    }
    unsigned int v18 = v13 - 1;
    uint64_t v19 = a1[77];
    uint64_t v57 = *((unsigned int *)a1 + 156);
    uint64_t v20 = v19 + 8 * v13 + 8;
    int v21 = 1;
    int v22 = v14;
    while (1)
    {
      uint64_t v23 = v22 & v18;
      long long v24 = *(void **)(v19 + 8 * v23);
      if (v24 != (void *)-8)
      {
        if (!v24) {
          goto LABEL_27;
        }
        if (*(_DWORD *)(v20 + 4 * v23) == v14
          && v12 == *v24
          && (!v12 || !memcmp(v11, (char *)v24 + *((unsigned int *)a1 + 159), v12)))
        {
          break;
        }
      }
      int v22 = v21 + v23;
      ++v21;
    }
    uint64_t v25 = v57;
    if (v23 != -1) {
      uint64_t v25 = (int)v23;
    }
    uint64_t v57 = v25;
LABEL_27:
    if (v10 < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v19 = a1[77];
    if (v67 < 0) {
LABEL_28:
    }
      operator delete(__p);
  }
  llvm::StringRef::lower((llvm::StringRef *)&v72, &v65);
  if (v67 >= 0) {
    uint64_t v26 = (unsigned __int8 *)&v65;
  }
  else {
    uint64_t v26 = v65;
  }
  if (v67 >= 0) {
    size_t v27 = v67 & 0x7F;
  }
  else {
    size_t v27 = v66;
  }
  uint64_t v28 = *((unsigned int *)a1 + 164);
  __pa = a1;
  v56 = v65;
  int v61 = v67;
  if (v28)
  {
    int v29 = 0;
    if (v27)
    {
      size_t v30 = v27;
      uint64_t v31 = v26;
      do
      {
        int v32 = *v31++;
        int v29 = 33 * v29 + v32;
        --v30;
      }
      while (v30);
    }
    uint64_t v33 = a1[81];
    int v34 = 1;
    int v35 = v29;
    while (1)
    {
      uint64_t v36 = v35 & (v28 - 1);
      uint64_t v37 = *(void **)(v33 + 8 * v36);
      if (v37 != (void *)-8)
      {
        if (!v37)
        {
          uint64_t v38 = v28;
          goto LABEL_48;
        }
        if (*(_DWORD *)(v33 + 8 * v28 + 8 + 4 * v36) == v29
          && v27 == *v37
          && (!v27 || !memcmp(v26, (char *)v37 + *((unsigned int *)__pa + 167), v27)))
        {
          break;
        }
      }
      int v35 = v34 + v36;
      ++v34;
    }
    uint64_t v38 = (int)v36;
    if (v36 == -1) {
      uint64_t v38 = v28;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v33 = a1[81];
  }
LABEL_48:
  uint64_t v39 = v33 + 8 * v38;
  uint64_t v40 = (uint64_t)__pa;
  if (v61 < 0)
  {
    operator delete(v56);
    uint64_t v33 = __pa[81];
    LODWORD(v28) = *((_DWORD *)__pa + 164);
  }
  if (v39 == v33 + 8 * v28)
  {
    __int16 v54 = (void *)(v19 + 8 * v57);
  }
  else
  {
    llvm::StringRef::lower((llvm::StringRef *)(*(void *)v39 + 8), &v65);
    int v41 = v67;
    char v62 = v65;
    if (v67 >= 0) {
      uint64_t v42 = (unsigned __int8 *)&v65;
    }
    else {
      uint64_t v42 = v65;
    }
    if (v67 >= 0) {
      size_t v43 = v67 & 0x7F;
    }
    else {
      size_t v43 = v66;
    }
    uint64_t v44 = *((unsigned int *)__pa + 156);
    if (v44)
    {
      int v45 = 0;
      if (v43)
      {
        size_t v46 = v43;
        uint64_t v47 = v42;
        do
        {
          int v48 = *v47++;
          int v45 = 33 * v45 + v48;
          --v46;
        }
        while (v46);
      }
      uint64_t v49 = __pa[77];
      int v50 = 1;
      int v51 = v45;
      while (1)
      {
        uint64_t v52 = v51 & (v44 - 1);
        uint64_t v53 = *(void **)(v49 + 8 * v52);
        if (v53 != (void *)-8)
        {
          if (!v53) {
            goto LABEL_75;
          }
          if (*(_DWORD *)(v49 + 8 * v44 + 8 + 4 * v52) == v45
            && v43 == *v53
            && (!v43 || !memcmp(v42, (char *)v53 + *((unsigned int *)__pa + 159), v43)))
          {
            break;
          }
        }
        int v51 = v50 + v52;
        ++v50;
      }
      if (v52 != -1) {
        uint64_t v44 = (int)v52;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v49 = __pa[77];
    }
LABEL_75:
    __int16 v54 = (void *)(v49 + 8 * v44);
    uint64_t v40 = (uint64_t)__pa;
    if (v41 < 0) {
      operator delete(v62);
    }
  }
  if (v54 != (void *)(*(void *)(v40 + 616) + 8 * *(unsigned int *)(v40 + 624))) {
    return sub_1CD3B6EF8(v40, *v54 + 8, a4, a5, a6);
  }
  return 1;
}

uint64_t sub_1CD395F74(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  *(void *)&long long v29 = a2;
  *((void *)&v29 + 1) = a3;
  uint64_t v26 = a2;
  size_t v27 = a3;
  uint64_t v28 = 0;
  sub_1CD3B7300((uint64_t)&v26, "byte", 4uLL, "db", 2uLL, "sbyte", 5uLL, 1);
  sub_1CD3B7300((uint64_t)&v26, "word", 4uLL, "dw", 2uLL, "sword", 5uLL, 2);
  sub_1CD3B7300((uint64_t)&v26, "dword", 5uLL, "dd", 2uLL, "sdword", 6uLL, 4);
  sub_1CD3B739C((uint64_t)&v26, "fword", 5uLL, "df", 2uLL, 6);
  sub_1CD3B7300((uint64_t)&v26, "qword", 5uLL, "dq", 2uLL, "sqword", 6uLL, 8);
  BOOL v6 = BYTE4(v28) == 0;
  if (!BYTE4(v28) && v27 == 5)
  {
    if (llvm::StringRef::compare_insensitive(&v26, "real4", 5uLL))
    {
      if (llvm::StringRef::compare_insensitive(&v26, "real8", 5uLL)) {
        goto LABEL_12;
      }
      BOOL v6 = 0;
      int v7 = 8;
    }
    else
    {
      BOOL v6 = 0;
      int v7 = 4;
    }
  }
  else if (!BYTE4(v28) && v27 == 6)
  {
    if (llvm::StringRef::compare_insensitive(&v26, "real10", 6uLL)) {
      goto LABEL_12;
    }
    BOOL v6 = 0;
    int v7 = 10;
  }
  else
  {
    int v7 = v28;
  }
  if (!v6 && v7)
  {
    *(_OWORD *)a4 = v29;
LABEL_35:
    uint64_t result = 0;
    *(_DWORD *)(a4 + 20) = v7;
    *(_DWORD *)(a4 + 24) = 1;
    *(_DWORD *)(a4 + 16) = v7;
    return result;
  }
LABEL_12:
  llvm::StringRef::lower((llvm::StringRef *)&v29, &v26);
  if (v28 >= 0) {
    unint64_t v8 = &v26;
  }
  else {
    unint64_t v8 = (unsigned __int8 **)v26;
  }
  if (v28 >= 0) {
    size_t v9 = HIBYTE(v28) & 0x7F;
  }
  else {
    size_t v9 = v27;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 624);
  __p = v26;
  int v25 = SHIBYTE(v28);
  if (v10)
  {
    int v11 = 0;
    if (v9)
    {
      size_t v12 = v9;
      uint64_t v13 = v8;
      do
      {
        int v14 = *(unsigned __int8 *)v13;
        uint64_t v13 = (unsigned __int8 **)((char *)v13 + 1);
        int v11 = 33 * v11 + v14;
        --v12;
      }
      while (v12);
    }
    uint64_t v15 = *(void *)(a1 + 616);
    int v16 = 1;
    int v17 = v11;
    while (1)
    {
      uint64_t v18 = v17 & (v10 - 1);
      uint64_t v19 = *(void **)(v15 + 8 * v18);
      if (v19 != (void *)-8)
      {
        if (!v19)
        {
          uint64_t v20 = v10;
          goto LABEL_31;
        }
        if (*(_DWORD *)(v15 + 8 * v10 + 8 + 4 * v18) == v11
          && v9 == *v19
          && (!v9 || !memcmp(v8, (char *)v19 + *(unsigned int *)(a1 + 636), v9)))
        {
          break;
        }
      }
      int v17 = v16 + v18;
      ++v16;
    }
    uint64_t v20 = (int)v18;
    if (v18 == -1) {
      uint64_t v20 = v10;
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v15 = *(void *)(a1 + 616);
  }
LABEL_31:
  int v21 = (uint64_t *)(v15 + 8 * v20);
  if (v25 < 0)
  {
    operator delete(__p);
    uint64_t v15 = *(void *)(a1 + 616);
    LODWORD(v10) = *(_DWORD *)(a1 + 624);
  }
  if (v21 != (uint64_t *)(v15 + 8 * v10))
  {
    uint64_t v22 = *v21;
    *(_OWORD *)a4 = v29;
    int v7 = *(_DWORD *)(v22 + 40);
    goto LABEL_35;
  }
  return 1;
}

uint64_t sub_1CD39629C(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, void *a5, void *a6, void *a7, uint64_t *a8, uint64_t a9, void *a10)
{
  v186[4] = *MEMORY[0x1E4F143B8];
  v184 = v186;
  uint64_t v185 = 0x400000000;
  v181 = v183;
  uint64_t v182 = 0x400000000;
  v153 = &v155;
  long long v154 = xmmword_1CDB159A0;
  v150 = &v152;
  long long v151 = xmmword_1CDB159A0;
  v178 = (char *)&v180;
  uint64_t v179 = 0x400000000;
  v175 = (char *)&v177;
  uint64_t v176 = 0x400000000;
  __base = v174;
  size_t __nel = 0x400000000;
  v169 = v171;
  size_t v170 = 0x400000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8))
  {
    unsigned int v139 = 0;
    uint64_t v36 = a10;
    while (1)
    {
      if ((**(_DWORD **)(a1 + 48) - 21) <= 1)
      {
        __p.__r_.__value_.__r.__words[0] = *(void *)(a1 + 136);
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        if (**(_DWORD **)(a1 + 48) == 9) {
          (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        }
        LODWORD(v148[0]) = 9;
        __dst = (char *)(*(void *)(a1 + 136) - __p.__r_.__value_.__r.__words[0]);
        sub_1CD8F4680((uint64_t)&v169, (int *)v148, (uint64_t *)&__p, (uint64_t *)&__dst);
        goto LABEL_46;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__l.__size_ = 0x800000000;
      unsigned int v163 = -1;
      char v164 = 0;
      LOBYTE(v165) = 0;
      char v167 = 0;
      v168 = &v169;
      if ((sub_1CD39B384(a1, (uint64_t)&__p, v36) & 1) != 0 || v164)
      {
        sub_1CD8F4AC0(a1);
        int v37 = 1;
        goto LABEL_41;
      }
      if (v163 == -1)
      {
        int v37 = 2;
        goto LABEL_41;
      }
      int v38 = __p.__r_.__value_.__r.__words[1];
      uint64_t v133 = *a8;
      unsigned int v134 = v163;
      if (LODWORD(__p.__r_.__value_.__r.__words[1]) != 1) {
        break;
      }
LABEL_50:
      uint64_t v39 = *(unsigned __int16 **)(v133 + 48 * v134 + 32);
      if (v39)
      {
        unsigned int v40 = -1;
        uint64_t v36 = a10;
        do
          ++v40;
        while (v39[v40]);
      }
      else
      {
        unsigned int v40 = 0;
        uint64_t v36 = a10;
      }
      sub_1CD8F4EFC((uint64_t)&__base, (uint64_t)__base + 4 * __nel, v39, &v39[v40]);
      int v37 = 0;
LABEL_41:
      if (v167)
      {
        if (v166 < 0) {
          operator delete(v165);
        }
        char v167 = 0;
      }
      sub_1CD381630(&__p.__r_.__value_.__l.__data_);
      if ((v37 | 2) != 2)
      {
        uint64_t v127 = 1;
        goto LABEL_295;
      }
LABEL_46:
      if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8)) {
        goto LABEL_3;
      }
    }
    uint64_t v41 = *a8 + 48 * v163;
    v137 = (unsigned char *)(v41 + 4);
    uint64_t v138 = v41 + 8;
    v142 = (void *)(v41 + 40);
    uint64_t v42 = 2;
    uint64_t v43 = 1;
    while (1)
    {
      uint64_t v44 = *(_DWORD **)(__p.__r_.__value_.__r.__words[0] + 8 * v43);
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v44 + 48))(v44))
      {
        if (((*(uint64_t (**)(_DWORD *))(*(void *)v44 + 96))(v44) & 1) == 0)
        {
          uint64_t v45 = *(void *)(a1 + 8);
          uint64_t v46 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 56))(v44);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v45 + 80))(v45, v46) & 1) == 0)
          {
            if (*v137 && v44[2] < *v137)
            {
              int v60 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 56))(v44);
              if (__nel >= (unint64_t)HIDWORD(__nel)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)__base + __nel) = v60;
              LODWORD(__nel) = __nel + 1;
            }
            goto LABEL_99;
          }
        }
      }
      uint64_t v47 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 16))(v44);
      if (v48)
      {
        uint64_t v49 = v47;
        int v50 = v48;
        uint64_t v51 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 24))(v44);
        if (v51) {
          break;
        }
      }
LABEL_99:
      ++v43;
      v42 += 6;
      if (v38 == v43) {
        goto LABEL_50;
      }
    }
    uint64_t v52 = v51;
    char v53 = *((unsigned char *)v44 + 39);
    int v54 = v53;
    if (v53 >= 0) {
      v55 = (const char *)(v44 + 4);
    }
    else {
      v55 = (const char *)*((void *)v44 + 2);
    }
    size_t v56 = v53 & 0x7F;
    if (v54 >= 0) {
      size_t v57 = v56;
    }
    else {
      size_t v57 = *((void *)v44 + 3);
    }
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v44 + 40))(v44))
    {
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v44 + 104))(v44)) {
        v55 = "r";
      }
      else {
        v55 = "i";
      }
      size_t v57 = 1;
    }
    if (v43 == 1 && (*(unsigned char *)(v138 + 2) & 0x10) != 0)
    {
      if (v182 >= (unint64_t)HIDWORD(v182)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v181[v182] = v52;
      LODWORD(v182) = v182 + 1;
      char v61 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 96))(v44);
      if ((unint64_t)(v151 + 1) > *((void *)&v151 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v150 + v151) = v61;
      *(void *)&long long v151 = v151 + 1;
      __int16 v147 = 1283;
      __dst = "=";
      unint64_t v145 = (unint64_t)v55;
      size_t v146 = v57;
      llvm::Twine::str((llvm::Twine *)&__dst, v148);
      unint64_t v62 = sub_1CBFCD38C((uint64_t)&v175, (unint64_t)v148, 1);
      v63 = &v175[24 * v176];
      long long v64 = *(_OWORD *)v62;
      *((void *)v63 + 2) = *(void *)(v62 + 16);
      *(_OWORD *)v63 = v64;
      *(void *)(v62 + 8) = 0;
      *(void *)(v62 + 16) = 0;
      *(void *)unint64_t v62 = 0;
      LODWORD(v176) = v176 + 1;
      if (v149 < 0) {
        operator delete(v148[0]);
      }
      ++v139;
      int v65 = 5;
      goto LABEL_98;
    }
    if (v185 >= (unint64_t)HIDWORD(v185)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v184[v185] = v52;
    LODWORD(v185) = v185 + 1;
    char v58 = (*(uint64_t (**)(_DWORD *))(*(void *)v44 + 96))(v44);
    if ((unint64_t)(v154 + 1) > *((void *)&v154 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v153 + v154) = v58;
    *(void *)&long long v154 = v154 + 1;
    if (!v55)
    {
      __dst = 0;
      size_t v144 = 0;
      unint64_t v145 = 0;
LABEL_93:
      unint64_t v68 = sub_1CBFCD38C((uint64_t)&v178, (unint64_t)&__dst, 1);
      uint64_t v69 = &v178[24 * v179];
      long long v70 = *(_OWORD *)v68;
      *((void *)v69 + 2) = *(void *)(v68 + 16);
      *(_OWORD *)uint64_t v69 = v70;
      *(void *)(v68 + 8) = 0;
      *(void *)(v68 + 16) = 0;
      *(void *)unint64_t v68 = 0;
      LODWORD(v179) = v179 + 1;
      if (SHIBYTE(v145) < 0) {
        operator delete(__dst);
      }
      if ((*(unsigned char *)(*v142 + v42) & 8) != 0) {
        int v65 = 3;
      }
      else {
        int v65 = 4;
      }
LABEL_98:
      sub_1CD3B742C((unint64_t)&v169, v65, v49, v50);
      goto LABEL_99;
    }
    if (v57 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v57 >= 0x17)
    {
      uint64_t v66 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v66 = v57 | 7;
      }
      uint64_t v67 = v66 + 1;
      p_dst = (char **)operator new(v66 + 1);
      size_t v144 = v57;
      unint64_t v145 = v67 | 0x8000000000000000;
      __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v145) = v57;
      p_dst = &__dst;
      if (!v57) {
        goto LABEL_92;
      }
    }
    memmove(p_dst, v55, v57);
LABEL_92:
    *((unsigned char *)p_dst + v57) = 0;
    goto LABEL_93;
  }
  unsigned int v139 = 0;
LABEL_3:
  *a3 = v182;
  *a4 = v185;
  unsigned int v11 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC0DC50);
    unsigned int v11 = __nel;
  }
  size_t v12 = __base;
  uint64_t v13 = (char *)__base + 4 * v11;
  int v14 = (char *)__base;
  if (v11)
  {
    int v14 = (char *)__base - 4;
    uint64_t v15 = 4 * v11 - 4;
    while (v15)
    {
      int v16 = *((_DWORD *)v14 + 1);
      int v17 = *((_DWORD *)v14 + 2);
      v14 += 4;
      v15 -= 4;
      if (v16 == v17) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (v14 != v13)
    {
      uint64_t v18 = v14 + 8;
      if (v14 + 8 != v13)
      {
        int v19 = *(_DWORD *)v14;
        do
        {
          int v20 = v19;
          int v19 = *(_DWORD *)v18;
          if (v20 != *(_DWORD *)v18)
          {
            *((_DWORD *)v14 + 1) = v19;
            v14 += 4;
          }
          v18 += 4;
        }
        while (v18 != v13);
      }
      uint64_t v13 = v14 + 4;
    }
  }
  LODWORD(__nel) = (unint64_t)(v13 - v12) >> 2;
  memset(&__p, 0, sizeof(__p));
  sub_1CD8F4D08((uint64_t)a7, __nel, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (__nel)
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 24 * __nel;
    do
    {
      v74 = (std::string *)(*a7 + v72);
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
      char v159 = 0;
      uint64_t v160 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
      __str = v74;
      int v161 = 0;
      v157 = 0;
      v158 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      (*(void (**)(uint64_t, std::string *, void))(*(void *)a9 + 40))(a9, &__p, *(unsigned int *)((char *)__base + v71));
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
      if (v161 == 1 && __p.__r_.__value_.__r.__words[2]) {
        MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      }
      v72 += 24;
      v71 += 4;
    }
    while (v73 != v72);
  }
  if (*a3 | *a4)
  {
    unint64_t v21 = (*a4 + *a3);
    sub_1CD8F51D0((uint64_t)a5, v21);
    sub_1CD8F5258((uint64_t)a6, v21);
    LODWORD(v22) = *a3;
    if (*a3)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        char v26 = *((unsigned char *)v150 + v25);
        uint64_t v27 = *a5 + v23;
        *(void *)uint64_t v27 = v181[v25];
        *(unsigned char *)(v27 + 8) = v26;
        std::string::operator=((std::string *)(*a6 + v24), (const std::string *)&v175[v24]);
        ++v25;
        unint64_t v22 = *a3;
        v24 += 24;
        v23 += 16;
      }
      while (v25 < v22);
    }
    if (*a4)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      int v30 = v22;
      do
      {
        char v31 = *((unsigned char *)v153 + v29);
        uint64_t v32 = *a5 + 16 * (v30 + v29);
        *(void *)uint64_t v32 = v184[v29];
        *(unsigned char *)(v32 + 8) = v31;
        std::string::operator=((std::string *)(*a6 + 24 * (v30 + v29++)), (const std::string *)&v178[v28]);
        v28 += 24;
      }
      while (v29 < *a4);
    }
  }
  __dst = 0;
  size_t v144 = 0;
  unint64_t v145 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  char v159 = 0;
  uint64_t v160 = 0;
  __str = (std::string *)&__dst;
  int v161 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
  __p.__r_.__value_.__r.__words[2] = 0;
  v157 = 0;
  v158 = 0;
  uint64_t v33 = ***(void ***)(a1 + 240);
  int v34 = *(unsigned char **)(v33 + 8);
  v141 = *(unsigned char **)(v33 + 16);
  int v35 = v170;
  if (v170 >= 2)
  {
    qsort(v169, v170, 0x80uLL, (int (__cdecl *)(const void *, const void *))sub_1CD3B752C);
    int v35 = v170;
  }
  if (v35)
  {
    unsigned int v75 = 0;
    v76 = (char *)v169;
    while (v76[20])
    {
LABEL_250:
      v76 += 128;
      if (v76 == (char *)v169 + 128 * (unint64_t)v170) {
        goto LABEL_29;
      }
    }
    int v77 = *(_DWORD *)v76;
    uint64_t v78 = *((void *)v76 + 1);
    unint64_t v79 = (v78 - v34);
    if (v78 != v34)
    {
      if (v79 <= v157 - (unsigned char *)v158)
      {
        memcpy(v158, v34, (v78 - v34));
        v158 = (char *)v158 + v79;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v34, (v78 - v34));
      }
    }
    switch(v77)
    {
      case 0:
        v80 = v158;
        if ((unint64_t)(v157 - (unsigned char *)v158) > 5)
        {
          *((_WORD *)v158 + 2) = 28263;
          _DWORD *v80 = 1768710446;
          v158 = (char *)v158 + 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ".align", 6uLL);
        }
        if (*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 152) + 339)) {
          goto LABEL_248;
        }
        uint64_t v81 = *((void *)v76 + 3);
        v82 = v158;
        if (v158 >= v157)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, 32);
        }
        else
        {
          v158 = (char *)v158 + 1;
          unsigned char *v82 = 32;
        }
        sub_1CD098D14((llvm::raw_ostream *)&__p, v81, 0, 0, 0);
        uint64_t v94 = 3;
        if (v81 >= 7) {
          uint64_t v94 = 4;
        }
        if (v81 < 4) {
          uint64_t v94 = 2;
        }
        goto LABEL_249;
      case 1:
        v84 = v158;
        if ((unint64_t)(v157 - (unsigned char *)v158) <= 4)
        {
          v85 = ".even";
          goto LABEL_134;
        }
        uint64_t v94 = 0;
        *((unsigned char *)v158 + 4) = 110;
        int v123 = 1702257966;
        goto LABEL_263;
      case 2:
        v84 = v158;
        if ((unint64_t)(v157 - (unsigned char *)v158) <= 4)
        {
          v85 = ".byte";
LABEL_134:
          size_t v86 = 5;
          goto LABEL_247;
        }
        uint64_t v94 = 0;
        *((unsigned char *)v158 + 4) = 101;
        int v123 = 1954112046;
LABEL_263:
        _DWORD *v84 = v123;
        v100 = (char *)v158 + 5;
        goto LABEL_167;
      case 3:
        if ((unint64_t)(v157 - (unsigned char *)v158) > 1)
        {
          *(_WORD *)v158 = 31524;
          v158 = (char *)v158 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "${", 2uLL);
        }
        unsigned int v87 = v139 + 1;
        sub_1CD098D14((llvm::raw_ostream *)&__p, v139, 0, 0, 0);
        v88 = v158;
        if ((unint64_t)(v157 - (unsigned char *)v158) > 2)
        {
          uint64_t v94 = 0;
          *((unsigned char *)v158 + 2) = 125;
          _WORD *v88 = 20538;
          v158 = (char *)v158 + 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ":P}", 3uLL);
LABEL_159:
          uint64_t v94 = 0;
        }
        unsigned int v139 = v87;
        goto LABEL_249;
      case 4:
        v83 = v158;
        if (v158 >= v157)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, 36);
        }
        else
        {
          v158 = (char *)v158 + 1;
          unsigned char *v83 = 36;
        }
        unsigned int v87 = v139 + 1;
        sub_1CD098D14((llvm::raw_ostream *)&__p, v139, 0, 0, 0);
        goto LABEL_159;
      case 5:
        v93 = v158;
        if (v158 >= v157)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, 36);
        }
        else
        {
          v158 = (char *)v158 + 1;
          unsigned char *v93 = 36;
        }
        sub_1CD098D14((llvm::raw_ostream *)&__p, v75, 0, 0, 0);
        uint64_t v94 = 0;
        ++v75;
        goto LABEL_249;
      case 6:
        uint64_t v94 = 0;
        uint64_t v95 = *((void *)v76 + 3);
        if (v95 > 63)
        {
          if (v95 <= 127)
          {
            if (v95 == 64)
            {
              v96 = v158;
              if ((unint64_t)(v157 - (unsigned char *)v158) <= 9)
              {
                v85 = "qword ptr ";
                goto LABEL_238;
              }
              uint64_t v94 = 0;
              *((_WORD *)v158 + 4) = 8306;
              v124 = "qword ptr ";
            }
            else
            {
              if (v95 != 80) {
                goto LABEL_249;
              }
              v96 = v158;
              if ((unint64_t)(v157 - (unsigned char *)v158) <= 9)
              {
                v85 = "xword ptr ";
LABEL_238:
                size_t v86 = 10;
                goto LABEL_247;
              }
              uint64_t v94 = 0;
              *((_WORD *)v158 + 4) = 8306;
              v124 = "xword ptr ";
            }
LABEL_282:
            void *v96 = *(void *)v124;
            v100 = (char *)v158 + 10;
            goto LABEL_167;
          }
          if (v95 == 128)
          {
            v119 = v158;
            if ((unint64_t)(v157 - (unsigned char *)v158) <= 0xB)
            {
              v85 = "xmmword ptr ";
              goto LABEL_246;
            }
            uint64_t v94 = 0;
            *((_DWORD *)v158 + 2) = 544371824;
            v125 = "xmmword ptr ";
          }
          else
          {
            if (v95 != 256) {
              goto LABEL_249;
            }
            v119 = v158;
            if ((unint64_t)(v157 - (unsigned char *)v158) <= 0xB)
            {
              v85 = "ymmword ptr ";
LABEL_246:
              size_t v86 = 12;
LABEL_247:
              llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v85, v86);
LABEL_248:
              uint64_t v94 = 0;
              goto LABEL_249;
            }
            uint64_t v94 = 0;
            *((_DWORD *)v158 + 2) = 544371824;
            v125 = "ymmword ptr ";
          }
          void *v119 = *(void *)v125;
          v100 = (char *)v158 + 12;
          goto LABEL_167;
        }
        switch(v95)
        {
          case 8:
            v120 = v158;
            if ((unint64_t)(v157 - (unsigned char *)v158) <= 8)
            {
              v85 = "byte ptr ";
LABEL_243:
              size_t v86 = 9;
              goto LABEL_247;
            }
            uint64_t v94 = 0;
            *((unsigned char *)v158 + 8) = 32;
            v126 = "byte ptr ";
            break;
          case 16:
            v120 = v158;
            if ((unint64_t)(v157 - (unsigned char *)v158) <= 8)
            {
              v85 = "word ptr ";
              goto LABEL_243;
            }
            uint64_t v94 = 0;
            *((unsigned char *)v158 + 8) = 32;
            v126 = "word ptr ";
            break;
          case 32:
            v96 = v158;
            if ((unint64_t)(v157 - (unsigned char *)v158) <= 9)
            {
              v85 = "dword ptr ";
              goto LABEL_238;
            }
            uint64_t v94 = 0;
            *((_WORD *)v158 + 4) = 8306;
            v124 = "dword ptr ";
            goto LABEL_282;
          default:
            goto LABEL_249;
        }
        void *v120 = *(void *)v126;
        v100 = (char *)v158 + 9;
        goto LABEL_167;
      case 7:
        uint64_t v89 = *(void *)(*(void *)(a1 + 216) + 152);
        v90 = *(const void **)(v89 + 104);
        size_t v91 = *(void *)(v89 + 112);
        v92 = (char *)v158;
        if (v91 <= v157 - (unsigned char *)v158)
        {
          if (v91)
          {
            memcpy(v158, v90, v91);
            v92 = (char *)v158 + v91;
            v158 = (char *)v158 + v91;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v90, v91);
          v92 = (char *)v158;
        }
        v85 = (const char *)*((void *)v76 + 4);
        unint64_t v99 = *((void *)v76 + 5);
        if (v99 > v157 - v92)
        {
          size_t v86 = *((void *)v76 + 5);
          goto LABEL_247;
        }
        if (!v99) {
          goto LABEL_248;
        }
        memcpy(v92, v85, *((void *)v76 + 5));
        uint64_t v94 = 0;
        v100 = (char *)v158 + v99;
        goto LABEL_167;
      case 8:
        if ((unint64_t)(v157 - (unsigned char *)v158) <= 1)
        {
          v85 = "\n\t";
          size_t v86 = 2;
          goto LABEL_247;
        }
        uint64_t v94 = 0;
        *(_WORD *)v158 = 2314;
        v100 = (char *)v158 + 2;
        goto LABEL_167;
      case 9:
        int v34 = (unsigned char *)(v78 + *((unsigned int *)v76 + 4));
        goto LABEL_250;
      case 10:
        if (v76[48])
        {
          if (v157 == v158)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "[", 1uLL);
          }
          else
          {
            *(unsigned char *)v158 = 91;
            v158 = (char *)v158 + 1;
          }
        }
        unint64_t v97 = *((void *)v76 + 9);
        if (v97)
        {
          v98 = (const void *)*((void *)v76 + 8);
          if (v97 <= v157 - (unsigned char *)v158)
          {
            memcpy(v158, v98, *((void *)v76 + 9));
            v158 = (char *)v158 + v97;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v98, *((void *)v76 + 9));
          }
        }
        if (*((void *)v76 + 11))
        {
          uint64_t v101 = *((void *)v76 + 9);
          if (v101) {
            size_t v102 = 3;
          }
          else {
            size_t v102 = 0;
          }
          v103 = v158;
          if (v102 <= v157 - (unsigned char *)v158)
          {
            if (v101)
            {
              *((unsigned char *)v158 + 2) = 32;
              _WORD *v103 = 11040;
              v103 = (char *)v158 + 3;
              v158 = (char *)v158 + 3;
            }
          }
          else
          {
            if (v101) {
              v104 = " + ";
            }
            else {
              v104 = "";
            }
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v104, v102);
            v103 = v158;
          }
          v105 = (const void *)*((void *)v76 + 10);
          unint64_t v106 = *((void *)v76 + 11);
          if (v106 <= v157 - (unsigned char *)v103)
          {
            if (v106)
            {
              memcpy(v103, v105, *((void *)v76 + 11));
              v158 = (char *)v158 + v106;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v105, *((void *)v76 + 11));
          }
        }
        if (*((_DWORD *)v76 + 28) >= 2u)
        {
          v107 = v158;
          if ((unint64_t)(v157 - (unsigned char *)v158) > 4)
          {
            *((unsigned char *)v158 + 4) = 36;
            _DWORD *v107 = 606087712;
            v158 = (char *)v158 + 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, " * $$", 5uLL);
          }
          sub_1CD098D14((llvm::raw_ostream *)&__p, *((unsigned int *)v76 + 28), 0, 0, 0);
        }
        if (!*((void *)v76 + 13)) {
          goto LABEL_210;
        }
        if (*((void *)v76 + 9) || *((void *)v76 + 11))
        {
          v108 = v158;
          if ((unint64_t)(v157 - (unsigned char *)v158) > 2)
          {
            *((unsigned char *)v158 + 2) = 32;
            _WORD *v108 = 11040;
            v158 = (char *)v158 + 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, " + ", 3uLL);
          }
        }
        v110 = (const void *)*((void *)v76 + 12);
        size_t v109 = *((void *)v76 + 13);
        v111 = (char *)v169 + 128 * (unint64_t)v170;
        if (v76 == v111) {
          goto LABEL_204;
        }
        v112 = v76;
        do
        {
          if (*((const void **)v112 + 1) == v110
            && v109 == *((_DWORD *)v112 + 4)
            && (*(_DWORD *)v112 - 3) < 2)
          {
            if (*(_DWORD *)v112 == 3)
            {
              if ((unint64_t)(v157 - (unsigned char *)v158) > 1)
              {
                *(_WORD *)v158 = 31524;
                v158 = (char *)v158 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "${", 2uLL);
              }
              sub_1CD098D14((llvm::raw_ostream *)&__p, v139, 0, 0, 0);
              v121 = v158;
              if ((unint64_t)(v157 - (unsigned char *)v158) > 2)
              {
                *((unsigned char *)v158 + 2) = 125;
                _WORD *v121 = 20538;
                v158 = (char *)v158 + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ":P}", 3uLL);
              }
              ++v139;
              v112[20] = 1;
            }
            else
            {
              v122 = v158;
              if (v158 >= v157)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&__p, 36);
              }
              else
              {
                v158 = (char *)v158 + 1;
                unsigned char *v122 = 36;
              }
              sub_1CD098D14((llvm::raw_ostream *)&__p, v139, 0, 0, 0);
              v112[20] = 1;
              ++v139;
            }
            goto LABEL_210;
          }
          v112 += 128;
        }
        while (v112 != v111);
LABEL_204:
        v113 = v158;
        if ((unint64_t)(v157 - (unsigned char *)v158) > 6)
        {
          *(_DWORD *)((char *)v158 + 3) = 544499059;
          _DWORD *v113 = 1936090735;
          v114 = (char *)v158 + 7;
          v158 = (char *)v158 + 7;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "offset ", 7uLL);
          v114 = (char *)v158;
        }
        if (v109 <= v157 - v114)
        {
          if (v109)
          {
            memcpy(v114, v110, v109);
            v158 = (char *)v158 + v109;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v110, v109);
        }
LABEL_210:
        uint64_t v115 = *((void *)v76 + 9);
        if (!*((void *)v76 + 7))
        {
          if (v115) {
            goto LABEL_223;
          }
          if (*((void *)v76 + 11)) {
            goto LABEL_223;
          }
          uint64_t v117 = *((void *)v76 + 13);
          if (v117) {
            goto LABEL_223;
          }
          goto LABEL_214;
        }
        v116 = " + $$";
        if (!v115 && !*((void *)v76 + 11))
        {
          uint64_t v117 = *((void *)v76 + 13);
LABEL_214:
          if (v117) {
            v116 = " + $$";
          }
          else {
            v116 = "$$";
          }
        }
        size_t v118 = strlen(v116);
        if (v118 <= v157 - (unsigned char *)v158)
        {
          if (v118)
          {
            memcpy(v158, v116, v118);
            v158 = (char *)v158 + v118;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v116, v118);
        }
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__p, *((void *)v76 + 7));
LABEL_223:
        if (!v76[48]) {
          goto LABEL_248;
        }
        if (v157 != v158)
        {
          uint64_t v94 = 0;
          *(unsigned char *)v158 = 93;
          v100 = (char *)v158 + 1;
LABEL_167:
          v158 = v100;
LABEL_249:
          int v34 = (unsigned char *)(v78 + *((unsigned int *)v76 + 4) + v94);
          goto LABEL_250;
        }
        v85 = "]";
        size_t v86 = 1;
        goto LABEL_247;
      default:
        goto LABEL_248;
    }
  }
LABEL_29:
  if (v34 != v141)
  {
    if (v141 - v34 <= (unint64_t)(v157 - (unsigned char *)v158))
    {
      memcpy(v158, v34, v141 - v34);
      v158 = (char *)v158 + v141 - v34;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v34, v141 - v34);
    }
  }
  std::string::operator=(a2, __str);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
  if (v161 == 1 && __p.__r_.__value_.__r.__words[2]) {
    MEMORY[0x1D25D9CB0](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  }
  if (SHIBYTE(v145) < 0) {
    operator delete(__dst);
  }
  uint64_t v127 = 0;
LABEL_295:
  if (v169 != v171) {
    free(v169);
  }
  if (__base != v174) {
    free(__base);
  }
  sub_1CC076978((void **)&v175);
  sub_1CC076978((void **)&v178);
  if (v150 != &v152) {
    free(v150);
  }
  if (v153 != &v155) {
    free(v153);
  }
  if (v181 != (void *)v183) {
    free(v181);
  }
  if (v184 != v186) {
    free(v184);
  }
  return v127;
}

uint64_t sub_1CD397BB0(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  sub_1CD8F4AC0(a1);
  v11[0] = a4;
  v11[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 3, a3, v11, 1, 0, 0, 1u);
  return sub_1CD3B757C(a1);
}

uint64_t sub_1CD397C34(uint64_t a1, char *a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  sub_1CB906B78((uint64_t)v13, (uint64_t *)(*(void *)(a1 + 8) + 80));
  char v10 = v13[0];
  uint64_t v23 = (void **)v22;
  sub_1CB8338B8(&v23);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0)
  {
    operator delete(v14);
    if ((v10 & 8) != 0) {
      return 0;
    }
  }
  else if ((v10 & 8) != 0)
  {
    return 0;
  }
  sub_1CB906B78((uint64_t)v13, (uint64_t *)(*(void *)(a1 + 8) + 80));
  char v12 = v13[0];
  uint64_t v23 = (void **)v22;
  sub_1CB8338B8(&v23);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0)
  {
    operator delete(v14);
    if ((v12 & 4) == 0) {
      goto LABEL_19;
    }
  }
  else if ((v12 & 4) == 0)
  {
LABEL_19:
    v13[0] = a4;
    v13[1] = a5;
    llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 1, a3, v13, 1, 0, 0, 1u);
    sub_1CD3B757C(a1);
    return 0;
  }
  return llvm::MCAsmParser::Error(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
}

uint64_t sub_1CD397DD8(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  *(unsigned char *)(a1 + 32) = 1;
  v7[0] = a4;
  v7[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 0, a3, v7, 1, 0, 0, 1u);
  sub_1CD3B757C(a1);
  return 1;
}

uint64_t sub_1CD397E40(uint64_t a1)
{
  return sub_1CD3AD454(a1, 0);
}

uint64_t sub_1CD397E48(_DWORD **a1, unsigned __int8 **a2)
{
  return sub_1CD3A799C(a1, a2, 0);
}

uint64_t sub_1CD397E50(_DWORD **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 5);
  uint64_t v3 = *(void *)(*(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) + 8);
  while (1)
  {
    int v4 = *a1[6];
    if (!v4 || v4 == 9) {
      break;
    }
    sub_1CD8F38F8(v2);
  }
  (*((void (**)(_DWORD **))*a1 + 5))(a1);
  return v3;
}

uint64_t sub_1CD397F00(llvm::MCAsmParser *a1, std::string *a2)
{
  int v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  v16[0] = "expected string";
  __int16 v17 = 259;
  llvm::MCAsmParser::check(a1, v4 != 3, (const llvm::Twine *)v16);
  if (v4 != 3) {
    return 1;
  }
  MEMORY[0x1D25D9630](a2, "");
  int v6 = **(unsigned __int8 **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8)
                            + 8);
  uint64_t v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
  unint64_t v8 = *(void *)(*(void *)(v7 + 8) + 16);
  unint64_t v9 = v8 != 0;
  if (v8) {
    uint64_t v10 = *(void *)(*(void *)(v7 + 8) + 8) + 1;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(v7 + 8) + 8);
  }
  if (v9 <= v8 - 1) {
    unint64_t v11 = v8 - 1;
  }
  else {
    unint64_t v11 = v8 != 0;
  }
  if (v8 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v7 + 8) + 16);
  }
  std::string::reserve(a2, v12 - v9);
  unint64_t v13 = v12 - v9;
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      std::string::push_back(a2, *(unsigned char *)(v10 + i));
      if (*(unsigned __int8 *)(v10 + i) == v6)
      {
        if (i + 1 == v13)
        {
          uint64_t v15 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8)
                          + 8);
          v16[0] = "missing quotation mark in string";
          __int16 v17 = 259;
          return llvm::MCAsmParser::Error((uint64_t)a1, v15, (uint64_t)v16, 0, 0);
        }
        if (*(unsigned __int8 *)(v10 + i + 1) == v6) {
          ++i;
        }
      }
    }
  }
  (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
  return 0;
}

BOOL sub_1CD39810C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
  while (1)
  {
    uint64_t v6 = *(unsigned __int8 *)(v5 + v4);
    if (v6 > 0x3E) {
      goto LABEL_6;
    }
    if (v6 == 33)
    {
      ++v4;
      goto LABEL_6;
    }
    if (((1 << v6) & 0x4000000000002401) != 0) {
      break;
    }
LABEL_6:
    ++v4;
  }
  if (v6 == 62)
  {
    sub_1CD3AE658(a1, v5 + v4 + 1, *(_DWORD *)(a1 + 272), (*(void *)(*(void *)(a1 + 336) + 8 * ((*(_DWORD *)(a1 + 400) - 1) >> 6)) >> (*(unsigned char *)(a1 + 400) - 1)) & 1);
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    memset(&v12, 0, sizeof(v12));
    unint64_t v7 = v4 - 1;
    if (v4 != 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v5 + 1;
      do
      {
        if (*(unsigned char *)(v9 + v8) == 33) {
          uint64_t v10 = v8 + 1;
        }
        else {
          uint64_t v10 = v8;
        }
        std::string::push_back(&v12, *(unsigned char *)(v9 + v10));
        uint64_t v8 = v10 + 1;
      }
      while (v10 + 1 < v7);
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v12;
  }
  return v6 != 62;
}

uint64_t sub_1CD398278(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 40;
  uint64_t v3 = (uint64_t *)(result + 336);
  while (1)
  {
    int v4 = **(_DWORD **)(v1 + 48);
    if (v4) {
      break;
    }
    unint64_t v5 = *(void *)(**(void **)(v1 + 240) + 24 * (*(_DWORD *)(v1 + 272) - 1) + 16);
    if (!v5) {
      return result;
    }
    int v6 = *(_DWORD *)(v1 + 400);
    uint64_t v7 = *(unsigned int *)(v1 + 344);
    if ((v6 & 0x3F) != 0)
    {
      uint64_t v19 = *(void *)(v1 + 336) + 8 * v7;
      *(void *)(v19 - 8) &= ~(-1 << (v6 & 0x3F));
    }
    unsigned int v8 = v7;
    int v9 = v6 - 1;
    *(_DWORD *)(v1 + 400) = v6 - 1;
    unsigned int v10 = v6 + 62;
    if (v7 != v10 >> 6)
    {
      uint64_t v11 = v10 >> 6;
      if (v7 > v11)
      {
        *(_DWORD *)(v1 + 344) = v11;
        unsigned int v8 = v10 >> 6;
      }
      else
      {
        if (v11 > *(_DWORD *)(v1 + 348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v11 != v7) {
          bzero((void *)(*v3 + 8 * v7), 8 * (v11 - v7));
        }
        unsigned int v8 = v11;
        *(_DWORD *)(v1 + 344) = v11;
        int v9 = *(_DWORD *)(v1 + 400);
      }
    }
    uint64_t v12 = *v3;
    if ((v9 & 0x3F) != 0) {
      *(void *)(v12 + 8 * v8 - 8) &= ~(-1 << (v9 & 0x3F));
    }
    uint64_t v13 = *(void *)(v12 + 8 * ((v9 - 1) >> 6)) >> (v9 - 1);
    int v14 = *(uint64_t **)(v1 + 240);
    int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v14, v5);
    *(_DWORD *)(v1 + 272) = BufferContainingLoc;
    uint64_t v16 = *(void *)(*v14 + 24 * (BufferContainingLoc - 1));
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16) - v17;
    *(void *)(v1 + 192) = v17;
    *(void *)(v1 + 200) = v18;
    *(void *)(v1 + 184) = v5;
    *(void *)(v1 + 136) = 0;
    *(unsigned char *)(v1 + 211) = v13 & 1;
LABEL_15:
    uint64_t result = sub_1CD8F38F8(v2);
  }
  if (v4 != 9) {
    goto LABEL_15;
  }

  return sub_1CD8F38F8(v2);
}

uint64_t sub_1CD398464(void **a1, uint64_t *a2, uint64_t a3)
{
  *a2 = 0;
  uint64_t v6 = 1;
  if (((*(uint64_t (**)(void *))(*a1[1] + 24))(a1[1]) & 1) == 0
    && !sub_1CD3B7614((uint64_t)a1, 1u, (unint64_t *)a2, a3))
  {
    uint64_t v16 = 0;
    if (llvm::MCExpr::evaluateAsAbsolute(*a2, &v16, 0, 0, 0, 0))
    {
      uint64_t v7 = v16;
      uint64_t v8 = ((uint64_t (*)(void **))(*a1)[6])(a1);
      uint64_t v9 = v8;
      *(void *)(v8 + 272) += 24;
      uint64_t v10 = *(void *)(v8 + 192);
      if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v8 + 200) - v10)
      {
        unsigned int v13 = *(_DWORD *)(v8 + 216) >> 7;
        if (v13 >= 0x1E) {
          LOBYTE(v13) = 30;
        }
        uint64_t v14 = 4096 << v13;
        unint64_t v11 = (unint64_t)operator new(4096 << v13, (std::align_val_t)8uLL);
        unsigned int v15 = *(_DWORD *)(v9 + 216);
        if (v15 >= *(_DWORD *)(v9 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v9 + 208) + 8 * v15) = v11;
        ++*(_DWORD *)(v9 + 216);
        *(void *)(v9 + 200) = v11 + v14;
      }
      else
      {
        unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v9 + 192) = v11 + 24;
      *(unsigned char *)unint64_t v11 = 1;
      *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = v7;
      *a2 = v11;
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1CD398614(uint64_t a1, unint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v312 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v9 = **(unsigned int **)(a1 + 48);
  uint64_t v10 = *(void *)(v8 + 96);
  uint64_t v11 = 1;
  switch((int)v9)
  {
    case 1:
      return v11;
    case 2:
    case 26:
    case 45:
      long long v309 = 0uLL;
      if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 192))(a1, &v309)
        && **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 26)
      {
        if (*(unsigned char *)(*(void *)(a1 + 176) + 32))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
          unsigned int v13 = *(llvm::MCContext **)(a1 + 216);
          *(void *)v310 = "tmp";
          *(_WORD *)&v310[32] = 259;
          uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v13, (const llvm::Twine *)v310, 1);
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 224) + 192))(*(void *)(a1 + 224), TempSymbol, 0);
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          uint64_t v16 = v15;
          *(void *)(v15 + 272) += 24;
          uint64_t v17 = *(void *)(v15 + 192);
          if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 24 > *(void *)(v15 + 200) - v17)
          {
            unsigned int v249 = *(_DWORD *)(v15 + 216) >> 7;
            if (v249 >= 0x1E) {
              LOBYTE(v249) = 30;
            }
            uint64_t v250 = 4096 << v249;
            unint64_t v18 = (unint64_t)operator new(4096 << v249, (std::align_val_t)8uLL);
            unsigned int v251 = *(_DWORD *)(v16 + 216);
            if (v251 >= *(_DWORD *)(v16 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v16 + 208) + 8 * v251) = v18;
            ++*(_DWORD *)(v16 + 216);
            *(void *)(v16 + 200) = v18 + v250;
          }
          else
          {
            unint64_t v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v11 = 0;
          *(void *)(v16 + 192) = v18 + 24;
          int v19 = *(unsigned __int8 *)(*(void *)(v16 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v18 = 2;
          *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
          *(void *)(v18 + 8) = 0;
          *(void *)(v18 + 16) = TempSymbol;
          *a2 = v18;
          *a3 = v10;
          return v11;
        }
        *(void *)v310 = "invalid token in expression";
        *(_WORD *)&v310[32] = 259;
        v231 = (void **)v310;
        uint64_t v232 = a1;
        uint64_t v230 = v10;
        return llvm::MCAsmParser::Error(v232, v230, (uint64_t)v231, 0, 0);
      }
      v293 = (char *)v10;
      unint64_t v20 = *((void *)&v309 + 1);
      if (*((void *)&v309 + 1) == 3
        && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v309, "not", 3uLL))
      {
        if ((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 240))(a1, a2, a3, 0))return v11; {
        unint64_t v25 = *a2;
        }
        uint64_t v227 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
        uint64_t v228 = v227;
        *(void *)(v227 + 272) += 24;
        uint64_t v229 = *(void *)(v227 + 192);
        if (((v229 + 7) & 0xFFFFFFFFFFFFFFF8) - v229 + 24 > *(void *)(v227 + 200) - v229)
        {
          unsigned int v283 = *(_DWORD *)(v227 + 216) >> 7;
          if (v283 >= 0x1E) {
            LOBYTE(v283) = 30;
          }
          uint64_t v284 = 4096 << v283;
          unint64_t v29 = (unint64_t)operator new(4096 << v283, (std::align_val_t)8uLL);
          unsigned int v285 = *(_DWORD *)(v228 + 216);
          if (v285 >= *(_DWORD *)(v228 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v228 + 208) + 8 * v285) = v29;
          ++*(_DWORD *)(v228 + 216);
          *(void *)(v228 + 200) = v29 + v284;
        }
        else
        {
          unint64_t v29 = (v229 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v11 = 0;
        *(void *)(v228 + 192) = v29 + 24;
        *(unsigned char *)unint64_t v29 = 3;
        *(_DWORD *)(v29 + 1) = (*(unsigned __int8 *)(v29 + 4) << 24) | 2;
        *(void *)(v29 + 8) = v293;
LABEL_62:
        *(void *)(v29 + 16) = v25;
LABEL_63:
        *a2 = v29;
        return v11;
      }
      v294 = a4;
      long long v307 = 0u;
      long long v308 = 0u;
      if (*(unsigned char *)(*(void *)(a1 + 232) + 429))
      {
        if (**(_DWORD **)(a1 + 48) != 17) {
          goto LABEL_117;
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        __p[0] = 0;
        __p[1] = 0;
        (*(void (**)(uint64_t, void **))(*(void *)a1 + 192))(a1, __p);
        *(void *)v310 = "unexpected token in variant, expected ')'";
        *(_WORD *)&v310[32] = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v310)) {
          return v11;
        }
LABEL_97:
        long long v307 = v309;
        long long v308 = *(_OWORD *)__p;
        goto LABEL_117;
      }
      if (v9 == 3)
      {
        if (**(_DWORD **)(a1 + 48) != 45) {
          goto LABEL_117;
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        uint64_t v86 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 96);
        __p[0] = 0;
        __p[1] = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 192))(a1, __p))
        {
          *(void *)v310 = "expected symbol variant after '@'";
          *(_WORD *)&v310[32] = 259;
          v231 = (void **)v310;
          uint64_t v232 = a1;
          uint64_t v230 = v86;
          return llvm::MCAsmParser::Error(v232, v230, (uint64_t)v231, 0, 0);
        }
        goto LABEL_97;
      }
      v310[0] = 64;
      unint64_t v87 = llvm::StringRef::find((uint64_t *)&v309, v310, 1uLL, 0);
      if (v87 == -1)
      {
        uint64_t v91 = 0;
        unint64_t v92 = 0;
        uint64_t v89 = v309;
      }
      else
      {
        if (v20 >= v87) {
          unint64_t v88 = v87;
        }
        else {
          unint64_t v88 = v20;
        }
        uint64_t v89 = v309;
        if (v20 >= v87 + 1) {
          unint64_t v90 = v87 + 1;
        }
        else {
          unint64_t v90 = v20;
        }
        uint64_t v91 = v309 + v90;
        unint64_t v92 = v20 - v90;
        unint64_t v20 = v88;
      }
      *(void *)&long long v307 = v89;
      *((void *)&v307 + 1) = v20;
      *(void *)&long long v308 = v91;
      *((void *)&v308 + 1) = v92;
LABEL_117:
      *a3 = v309 + *((void *)&v309 + 1);
      long long v306 = v309;
      if (!*((void *)&v309 + 1))
      {
        uint64_t v230 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 96);
        *(void *)v310 = "expected a symbol reference";
        *(_WORD *)&v310[32] = 259;
        v231 = (void **)v310;
LABEL_296:
        uint64_t v232 = a1;
        return llvm::MCAsmParser::Error(v232, v230, (uint64_t)v231, 0, 0);
      }
      v291 = a3;
      unint64_t v110 = *((void *)&v308 + 1);
      if (!*((void *)&v308 + 1)) {
        goto LABEL_122;
      }
      uint64_t v111 = v308;
      int VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName(v308, *((uint64_t *)&v308 + 1));
      if (VariantKindForName == 1)
      {
        uint64_t v113 = *(void *)(a1 + 232);
        if (*(unsigned char *)(v113 + 180) && !*(unsigned char *)(v113 + 429))
        {
LABEL_122:
          int v114 = 0;
          goto LABEL_124;
        }
        __int16 v305 = 1283;
        __p[0] = "invalid variant '";
        v303 = (unsigned char *)v111;
        unint64_t v304 = v110;
        *(void *)v310 = __p;
        *(void *)&v310[16] = "'";
        *(_WORD *)&v310[32] = 770;
        v231 = (void **)v310;
        uint64_t v232 = a1;
        uint64_t v230 = v111;
        return llvm::MCAsmParser::Error(v232, v230, (uint64_t)v231, 0, 0);
      }
      int v114 = VariantKindForName;
      long long v306 = v307;
LABEL_124:
      memset(v310, 0, 28);
      *(_DWORD *)&v310[32] = 0;
      LOBYTE(__p[0]) = 46;
      unint64_t v115 = llvm::StringRef::find((uint64_t *)&v306, (char *)__p, 1uLL, 0);
      v300 = a2;
      int v292 = v114;
      if (v115 == -1)
      {
        long long v307 = v306;
        long long v308 = 0uLL;
      }
      else
      {
        if (*((void *)&v306 + 1) >= v115) {
          unint64_t v116 = v115;
        }
        else {
          unint64_t v116 = *((void *)&v306 + 1);
        }
        if (*((void *)&v306 + 1) >= v115 + 1) {
          unint64_t v117 = v115 + 1;
        }
        else {
          unint64_t v117 = *((void *)&v306 + 1);
        }
        unint64_t v118 = *((void *)&v306 + 1) - v117;
        uint64_t v119 = v306 + v117;
        *(void *)&long long v307 = v306;
        *((void *)&v307 + 1) = v116;
        *(void *)&long long v308 = v306 + v117;
        *((void *)&v308 + 1) = *((void *)&v306 + 1) - v117;
        if (*((void *)&v306 + 1) > v115 + 1)
        {
          long long v306 = v307;
          if ((*(unsigned int (**)(uint64_t, void, void, uint64_t, unint64_t, unsigned char *))(*(void *)a1 + 136))(a1, v307, *((void *)&v307 + 1), v119, v118, v310))
          {
            LOBYTE(__p[0]) = 46;
            unint64_t v120 = llvm::StringRef::find((uint64_t *)&v308, (char *)__p, 1uLL, 0);
            if (v118 >= v120) {
              unint64_t v121 = v120;
            }
            else {
              unint64_t v121 = v118;
            }
            if (v118 >= v120 + 1) {
              unint64_t v122 = v120 + 1;
            }
            else {
              unint64_t v122 = v118;
            }
            uint64_t v123 = v119 + v122;
            unint64_t v124 = v118 - v122;
            if (v120 == -1) {
              unint64_t v125 = v118;
            }
            else {
              unint64_t v125 = v121;
            }
            if (v120 == -1) {
              uint64_t v126 = 0;
            }
            else {
              uint64_t v126 = v123;
            }
            if (v120 == -1) {
              unint64_t v127 = 0;
            }
            else {
              unint64_t v127 = v124;
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unsigned char *))(*(void *)a1 + 136))(a1, v119, v125, v126, v127, v310);
          }
          else
          {
            llvm::StringRef::lower((llvm::StringRef *)&v306, __p);
            v287 = __p[0];
            if (SHIBYTE(v303) >= 0) {
              v140 = __p;
            }
            else {
              v140 = (void **)__p[0];
            }
            if (SHIBYTE(v303) >= 0) {
              size_t v141 = HIBYTE(v303) & 0x7F;
            }
            else {
              size_t v141 = (size_t)__p[1];
            }
            uint64_t v142 = *(unsigned int *)(a1 + 624);
            int v296 = SHIBYTE(v303);
            if (v142)
            {
              int v143 = 0;
              if (v141)
              {
                size_t v144 = v141;
                unint64_t v145 = v140;
                do
                {
                  int v146 = *(unsigned __int8 *)v145;
                  unint64_t v145 = (void **)((char *)v145 + 1);
                  int v143 = 33 * v143 + v146;
                  --v144;
                }
                while (v144);
              }
              uint64_t v147 = *(void *)(a1 + 616);
              int v148 = 1;
              int v149 = v143;
              while (1)
              {
                uint64_t v150 = v149 & (v142 - 1);
                long long v151 = *(void **)(v147 + 8 * v150);
                if (v151 != (void *)-8)
                {
                  if (!v151)
                  {
                    uint64_t v152 = v142;
                    goto LABEL_181;
                  }
                  if (*(_DWORD *)(v147 + 8 * v142 + 8 + 4 * v150) == v143
                    && v141 == *v151
                    && (!v141 || !memcmp(v140, (char *)v151 + *(unsigned int *)(a1 + 636), v141)))
                  {
                    break;
                  }
                }
                int v149 = v148 + v150;
                ++v148;
              }
              if (v150 == -1) {
                uint64_t v152 = v142;
              }
              else {
                uint64_t v152 = (int)v150;
              }
            }
            else
            {
              uint64_t v142 = 0;
              uint64_t v152 = 0;
            }
LABEL_181:
            if (v296 < 0) {
              operator delete(v287);
            }
            BOOL v153 = v152 == v142;
            a2 = v300;
            if (!v153)
            {
              uint64_t v154 = *(unsigned int *)&v310[32];
              uint64_t v155 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
              uint64_t v156 = v155;
              *(void *)(v155 + 272) += 24;
              uint64_t v157 = *(void *)(v155 + 192);
              if (((v157 + 7) & 0xFFFFFFFFFFFFFFF8) - v157 + 24 > *(void *)(v155 + 200) - v157)
              {
                unsigned int v276 = *(_DWORD *)(v155 + 216) >> 7;
                if (v276 >= 0x1E) {
                  LOBYTE(v276) = 30;
                }
                uint64_t v277 = 4096 << v276;
                unint64_t v29 = (unint64_t)operator new(4096 << v276, (std::align_val_t)8uLL);
                unsigned int v278 = *(_DWORD *)(v156 + 216);
                if (v278 >= *(_DWORD *)(v156 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v156 + 208) + 8 * v278) = v29;
                ++*(_DWORD *)(v156 + 216);
                *(void *)(v156 + 200) = v29 + v277;
                a2 = v300;
              }
              else
              {
                unint64_t v29 = (v157 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v11 = 0;
              *(void *)(v156 + 192) = v29 + 24;
              *(unsigned char *)unint64_t v29 = 1;
              *(_DWORD *)(v29 + 1) = *(unsigned __int8 *)(v29 + 4) << 24;
              *(void *)(v29 + 8) = 0;
              *(void *)(v29 + 16) = v154;
              goto LABEL_63;
            }
          }
        }
      }
      uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      unint64_t v295 = *(unsigned int *)(v128 + 1152);
      if (!v295) {
        goto LABEL_190;
      }
      long long v129 = v306;
      int v130 = 0;
      if (*((void *)&v306 + 1))
      {
        uint64_t v131 = *((void *)&v306 + 1);
        v132 = (unsigned __int8 *)v306;
        do
        {
          int v133 = *v132++;
          int v130 = 33 * v130 + v133;
          --v131;
        }
        while (v131);
      }
      uint64_t v134 = *(void *)(v128 + 1144);
      uint64_t v135 = *(unsigned int *)(v128 + 1164);
      int v136 = 1;
      int v137 = v130;
      while (1)
      {
        uint64_t v138 = v137 & (v295 - 1);
        unsigned int v139 = *(void **)(v134 + 8 * v138);
        if (v139 != (void *)-8)
        {
          if (!v139) {
            goto LABEL_190;
          }
          if (*(_DWORD *)(v134 + 8 * v295 + 8 + 4 * v138) == v130
            && *((void *)&v129 + 1) == *v139
            && (!*((void *)&v129 + 1) || !memcmp((const void *)v129, (char *)v139 + v135, *((size_t *)&v129 + 1))))
          {
            break;
          }
        }
        int v137 = v136 + v138;
        ++v136;
      }
      if (v138 == -1
        || (int)v138 == v295
        || (uint64_t Symbol = *(void *)(*(void *)(v134 + 8 * (int)v138) + 8)) == 0)
      {
LABEL_190:
        llvm::StringRef::lower((llvm::StringRef *)&v306, __p);
        int v297 = SHIBYTE(v303);
        v288 = __p[0];
        if (SHIBYTE(v303) >= 0) {
          char v159 = __p;
        }
        else {
          char v159 = (void **)__p[0];
        }
        if (SHIBYTE(v303) >= 0) {
          size_t v160 = HIBYTE(v303) & 0x7F;
        }
        else {
          size_t v160 = (size_t)__p[1];
        }
        uint64_t v161 = *(unsigned int *)(a1 + 1144);
        if (v161)
        {
          int v162 = 0;
          if (v160)
          {
            size_t v163 = v160;
            char v164 = v159;
            do
            {
              int v165 = *(unsigned __int8 *)v164;
              char v164 = (void **)((char *)v164 + 1);
              int v162 = 33 * v162 + v165;
              --v163;
            }
            while (v163);
          }
          uint64_t v166 = *(void *)(a1 + 1136);
          int v167 = 1;
          int v168 = v162;
          while (1)
          {
            uint64_t v169 = v168 & (v161 - 1);
            size_t v170 = *(void **)(v166 + 8 * v169);
            if (v170 != (void *)-8)
            {
              if (!v170)
              {
                uint64_t v171 = v161;
                goto LABEL_209;
              }
              if (*(_DWORD *)(v166 + 8 * v161 + 8 + 4 * v169) == v162
                && v160 == *v170
                && (!v160 || !memcmp(v159, (char *)v170 + *(unsigned int *)(a1 + 1156), v160)))
              {
                break;
              }
            }
            int v168 = v167 + v169;
            ++v167;
          }
          uint64_t v171 = (int)v169;
          if (v169 == -1) {
            uint64_t v171 = v161;
          }
        }
        else
        {
          uint64_t v171 = 0;
          uint64_t v166 = *(void *)(a1 + 1136);
        }
LABEL_209:
        uint64_t v172 = v166 + 8 * v171;
        if (v297 < 0)
        {
          operator delete(v288);
          uint64_t v166 = *(void *)(a1 + 1136);
          LODWORD(v161) = *(_DWORD *)(a1 + 1144);
        }
        if (v172 == v166 + 8 * v161) {
          goto LABEL_214;
        }
        int v173 = *(_DWORD *)(*(void *)v172 + 8);
        if (v173 == 3)
        {
          uint64_t LineAndColumn = 1427;
          v192 = v300;
        }
        else
        {
          if (v173 != 6)
          {
LABEL_214:
            llvm::StringRef::lower((llvm::StringRef *)&v306, __p);
            if (SHIBYTE(v303) >= 0) {
              v174 = __p;
            }
            else {
              v174 = (void **)__p[0];
            }
            if (SHIBYTE(v303) >= 0) {
              size_t v175 = HIBYTE(v303) & 0x7F;
            }
            else {
              size_t v175 = (size_t)__p[1];
            }
            uint64_t v176 = *(unsigned int *)(a1 + 480);
            v289 = __p[0];
            int v298 = SHIBYTE(v303);
            if (v176)
            {
              int v177 = 0;
              if (v175)
              {
                size_t v178 = v175;
                uint64_t v179 = v174;
                do
                {
                  int v180 = *(unsigned __int8 *)v179;
                  uint64_t v179 = (void **)((char *)v179 + 1);
                  int v177 = 33 * v177 + v180;
                  --v178;
                }
                while (v178);
              }
              uint64_t v181 = *(void *)(a1 + 472);
              int v182 = 1;
              int v183 = v177;
              while (1)
              {
                uint64_t v184 = v183 & (v176 - 1);
                uint64_t v185 = *(void **)(v181 + 8 * v184);
                if (v185 != (void *)-8)
                {
                  if (!v185)
                  {
                    uint64_t v186 = v176;
                    goto LABEL_233;
                  }
                  if (*(_DWORD *)(v181 + 8 * v176 + 8 + 4 * v184) == v177
                    && v175 == *v185
                    && (!v175 || !memcmp(v174, (char *)v185 + *(unsigned int *)(a1 + 492), v175)))
                  {
                    break;
                  }
                }
                int v183 = v182 + v184;
                ++v182;
              }
              uint64_t v186 = (int)v184;
              if (v184 == -1) {
                uint64_t v186 = v176;
              }
            }
            else
            {
              uint64_t v186 = 0;
              uint64_t v181 = *(void *)(a1 + 472);
            }
LABEL_233:
            uint64_t v187 = v181 + 8 * v186;
            if (v298 < 0)
            {
              operator delete(v289);
              uint64_t v181 = *(void *)(a1 + 472);
              LODWORD(v176) = *(_DWORD *)(a1 + 480);
            }
            if (v187 != v181 + 8 * v176) {
              long long v306 = *(_OWORD *)(*(void *)v187 + 8);
            }
            v188 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
            __int16 v305 = 261;
            *(_OWORD *)std::string __p = v306;
            uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v188, (unsigned __int8 ***)__p);
            goto LABEL_238;
          }
          v233 = *(uint64_t **)(a1 + 680);
          if (v233 == *(uint64_t **)(a1 + 688))
          {
            int v234 = *(_DWORD *)(a1 + 272);
            v235 = v293;
          }
          else
          {
            uint64_t v236 = *v233;
            v235 = *(char **)v236;
            int v234 = *(_DWORD *)(v236 + 8);
          }
          v192 = v300;
          uint64_t LineAndColumn = llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), v235, v234);
        }
        uint64_t v193 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
        uint64_t v194 = v193;
        *(void *)(v193 + 272) += 24;
        uint64_t v195 = *(void *)(v193 + 192);
        if (((v195 + 7) & 0xFFFFFFFFFFFFFFF8) - v195 + 24 > *(void *)(v193 + 200) - v195)
        {
          unsigned int v258 = *(_DWORD *)(v193 + 216) >> 7;
          if (v258 >= 0x1E) {
            LOBYTE(v258) = 30;
          }
          uint64_t v259 = 4096 << v258;
          unint64_t v196 = (unint64_t)operator new(4096 << v258, (std::align_val_t)8uLL);
          unsigned int v260 = *(_DWORD *)(v194 + 216);
          if (v260 >= *(_DWORD *)(v194 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v194 + 208) + 8 * v260) = v196;
          ++*(_DWORD *)(v194 + 216);
          *(void *)(v194 + 200) = v196 + v259;
        }
        else
        {
          unint64_t v196 = (v195 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v11 = 0;
        *(void *)(v194 + 192) = v196 + 24;
        *(unsigned char *)unint64_t v196 = 1;
        *(_DWORD *)(v196 + 1) = *(unsigned __int8 *)(v196 + 4) << 24;
        *(void *)(v196 + 8) = 0;
        *(void *)(v196 + 16) = LineAndColumn;
        unint64_t *v192 = v196;
        return v11;
      }
LABEL_238:
      if ((*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
      {
        v189 = *(unsigned __int8 **)(Symbol + 24);
        int v190 = *v189;
        if (v190 == 4)
        {
          if ((*(uint64_t (**)(void))(*((void *)v189 - 1) + 48))())
          {
            if (!v292)
            {
              v189 = *(unsigned __int8 **)(Symbol + 24);
LABEL_249:
              uint64_t v11 = 0;
              unint64_t *v300 = (unint64_t)v189;
              return v11;
            }
            uint64_t v230 = *v291;
            __p[0] = "unexpected modifier on variable reference";
            __int16 v305 = 259;
            v231 = __p;
            goto LABEL_296;
          }
        }
        else if (!v292 && v190 == 1)
        {
          goto LABEL_249;
        }
      }
      uint64_t v197 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v198 = v197;
      *(void *)(v197 + 272) += 24;
      uint64_t v199 = *(void *)(v197 + 192);
      if (((v199 + 7) & 0xFFFFFFFFFFFFFFF8) - v199 + 24 > *(void *)(v197 + 200) - v199)
      {
        unsigned int v246 = *(_DWORD *)(v197 + 216) >> 7;
        if (v246 >= 0x1E) {
          LOBYTE(v246) = 30;
        }
        uint64_t v247 = 4096 << v246;
        unint64_t v200 = (unint64_t)operator new(4096 << v246, (std::align_val_t)8uLL);
        unsigned int v248 = *(_DWORD *)(v198 + 216);
        if (v248 >= *(_DWORD *)(v198 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v198 + 208) + 8 * v248) = v200;
        ++*(_DWORD *)(v198 + 216);
        *(void *)(v198 + 200) = v200 + v247;
      }
      else
      {
        unint64_t v200 = (v199 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v198 + 192) = v200 + 24;
      int v201 = v292 | (*(unsigned __int8 *)(*(void *)(v198 + 152) + 18) << 16);
      *(unsigned char *)unint64_t v200 = 2;
      *(_DWORD *)(v200 + 1) = v201 | (*(unsigned __int8 *)(v200 + 4) << 24);
      *(void *)(v200 + 8) = v293;
      *(void *)(v200 + 16) = Symbol;
      uint64_t v202 = *(unsigned int *)&v310[32];
      if (*(_DWORD *)&v310[32])
      {
        uint64_t v203 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
        uint64_t v204 = v203;
        *(void *)(v203 + 272) += 24;
        uint64_t v205 = *(void *)(v203 + 192);
        if (((v205 + 7) & 0xFFFFFFFFFFFFFFF8) - v205 + 24 > *(void *)(v203 + 200) - v205)
        {
          unsigned int v252 = *(_DWORD *)(v203 + 216) >> 7;
          if (v252 >= 0x1E) {
            LOBYTE(v252) = 30;
          }
          uint64_t v253 = 4096 << v252;
          unint64_t v206 = (unint64_t)operator new(4096 << v252, (std::align_val_t)8uLL);
          unsigned int v254 = *(_DWORD *)(v204 + 216);
          if (v254 >= *(_DWORD *)(v204 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v204 + 208) + 8 * v254) = v206;
          ++*(_DWORD *)(v204 + 216);
          *(void *)(v204 + 200) = v206 + v253;
        }
        else
        {
          unint64_t v206 = (v205 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v204 + 192) = v206 + 24;
        *(unsigned char *)unint64_t v206 = 1;
        *(_DWORD *)(v206 + 1) = *(unsigned __int8 *)(v206 + 4) << 24;
        *(void *)(v206 + 8) = 0;
        *(void *)(v206 + 16) = v202;
        uint64_t v207 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
        uint64_t v208 = v207;
        *(void *)(v207 + 272) += 32;
        uint64_t v209 = *(void *)(v207 + 192);
        if (((v209 + 7) & 0xFFFFFFFFFFFFFFF8) - v209 + 32 > *(void *)(v207 + 200) - v209)
        {
          unsigned int v255 = *(_DWORD *)(v207 + 216) >> 7;
          if (v255 >= 0x1E) {
            LOBYTE(v255) = 30;
          }
          uint64_t v256 = 4096 << v255;
          unint64_t v210 = (unint64_t)operator new(4096 << v255, (std::align_val_t)8uLL);
          unsigned int v257 = *(_DWORD *)(v208 + 216);
          if (v257 >= *(_DWORD *)(v208 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v208 + 208) + 8 * v257) = v210;
          ++*(_DWORD *)(v208 + 216);
          *(void *)(v208 + 200) = v210 + v256;
        }
        else
        {
          unint64_t v210 = (v209 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v208 + 192) = v210 + 32;
        *(unsigned char *)unint64_t v210 = 0;
        *(_DWORD *)(v210 + 1) = *(unsigned __int8 *)(v210 + 4) << 24;
        *(void *)(v210 + 8) = 0;
        *(void *)(v210 + 16) = v200;
        *(void *)(v210 + 24) = v206;
        unint64_t v200 = v210;
      }
      v211 = v294;
      unint64_t *v300 = v200;
      if (!v294) {
        return 0;
      }
      if (!*(void *)&v310[8])
      {
        llvm::StringRef::lower((llvm::StringRef *)&v309, __p);
        if (SHIBYTE(v303) >= 0) {
          v212 = __p;
        }
        else {
          v212 = (void **)__p[0];
        }
        if (SHIBYTE(v303) >= 0) {
          size_t v213 = HIBYTE(v303) & 0x7F;
        }
        else {
          size_t v213 = (size_t)__p[1];
        }
        uint64_t v214 = *(unsigned int *)(a1 + 656);
        v299 = __p[0];
        int v301 = SHIBYTE(v303);
        if (v214)
        {
          int v215 = 0;
          if (v213)
          {
            size_t v216 = v213;
            v217 = v212;
            do
            {
              int v218 = *(unsigned __int8 *)v217;
              v217 = (void **)((char *)v217 + 1);
              int v215 = 33 * v215 + v218;
              --v216;
            }
            while (v216);
          }
          uint64_t v219 = *(void *)(a1 + 648);
          int v220 = 1;
          int v221 = v215;
          while (1)
          {
            uint64_t v222 = v221 & (v214 - 1);
            v223 = *(void **)(v219 + 8 * v222);
            if (v223 != (void *)-8)
            {
              if (!v223)
              {
                uint64_t v224 = v214;
                goto LABEL_279;
              }
              if (*(_DWORD *)(v219 + 8 * v214 + 8 + 4 * v222) == v215
                && v213 == *v223
                && (!v213 || !memcmp(v212, (char *)v223 + *(unsigned int *)(a1 + 668), v213)))
              {
                break;
              }
            }
            int v221 = v220 + v222;
            ++v220;
          }
          uint64_t v224 = (int)v222;
          if (v222 == -1) {
            uint64_t v224 = v214;
          }
        }
        else
        {
          uint64_t v224 = 0;
          uint64_t v219 = *(void *)(a1 + 648);
        }
LABEL_279:
        uint64_t v225 = v219 + 8 * v224;
        v211 = v294;
        if (v301 < 0)
        {
          operator delete(v299);
          uint64_t v219 = *(void *)(a1 + 648);
          LODWORD(v214) = *(_DWORD *)(a1 + 656);
        }
        if (v225 != v219 + 8 * v214)
        {
          long long v226 = *(_OWORD *)(*(void *)v225 + 8);
          *(_OWORD *)&v310[12] = *(_OWORD *)(*(void *)v225 + 20);
          *(_OWORD *)v310 = v226;
        }
      }
      uint64_t v11 = 0;
      _OWORD *v211 = *(_OWORD *)v310;
      *(_OWORD *)((char *)v211 + 12) = *(_OWORD *)&v310[12];
      return v11;
    case 3:
      uint64_t v69 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
      __p[0] = 0;
      __p[1] = 0;
      v303 = 0;
      if (((*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 208))(a1, __p) & 1) == 0)
      {
        unint64_t v70 = HIBYTE(v303) & 0x7F;
        if (SHIBYTE(v303) < 0) {
          unint64_t v70 = (unint64_t)__p[1];
        }
        if (v70 >= 9)
        {
          *(void *)v310 = "literal value out of range";
          *(_WORD *)&v310[32] = 259;
          uint64_t v11 = llvm::MCAsmParser::Error(a1, v69, (uint64_t)v310, 0, 0);
        }
        else
        {
          uint64_t v71 = __p;
          if (SHIBYTE(v303) < 0) {
            uint64_t v71 = (void **)__p[0];
          }
          for (unint64_t i = 0; v70; --v70)
          {
            unsigned int v73 = *(unsigned __int8 *)v71;
            uint64_t v71 = (void **)((char *)v71 + 1);
            unint64_t i = v73 | (i << 8);
          }
          uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          uint64_t v75 = v74;
          *(void *)(v74 + 272) += 24;
          uint64_t v76 = *(void *)(v74 + 192);
          if (((v76 + 7) & 0xFFFFFFFFFFFFFFF8) - v76 + 24 > *(void *)(v74 + 200) - v76)
          {
            unsigned int v273 = *(_DWORD *)(v74 + 216) >> 7;
            if (v273 >= 0x1E) {
              LOBYTE(v273) = 30;
            }
            uint64_t v274 = 4096 << v273;
            unint64_t v77 = (unint64_t)operator new(4096 << v273, (std::align_val_t)8uLL);
            unsigned int v275 = *(_DWORD *)(v75 + 216);
            if (v275 >= *(_DWORD *)(v75 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v75 + 208) + 8 * v275) = v77;
            ++*(_DWORD *)(v75 + 216);
            *(void *)(v75 + 200) = v77 + v274;
          }
          else
          {
            unint64_t v77 = (v76 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v11 = 0;
          *(void *)(v75 + 192) = v77 + 24;
          *(unsigned char *)unint64_t v77 = 1;
          *(_DWORD *)(v77 + 1) = *(unsigned __int8 *)(v77 + 4) << 24;
          *(void *)(v77 + 8) = 0;
          *(void *)(v77 + 16) = i;
          *a2 = v77;
        }
      }
      if (SHIBYTE(v303) < 0) {
        operator delete(__p[0]);
      }
      return v11;
    case 4:
      uint64_t v43 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
      uint64_t v44 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      uint64_t v47 = *(uint64_t **)(v44 + 24);
      uint64_t v45 = (uint64_t *)(v44 + 24);
      uint64_t v46 = v47;
      if (*((_DWORD *)v45 + 2) >= 0x41u) {
        uint64_t v45 = v46;
      }
      uint64_t v48 = *v45;
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v50 = v49;
      *(void *)(v49 + 272) += 24;
      uint64_t v51 = *(void *)(v49 + 192);
      if (((v51 + 7) & 0xFFFFFFFFFFFFFFF8) - v51 + 24 > *(void *)(v49 + 200) - v51)
      {
        unsigned int v240 = *(_DWORD *)(v49 + 216) >> 7;
        if (v240 >= 0x1E) {
          LOBYTE(v240) = 30;
        }
        uint64_t v241 = 4096 << v240;
        unint64_t v52 = (unint64_t)operator new(4096 << v240, (std::align_val_t)8uLL);
        unsigned int v242 = *(_DWORD *)(v50 + 216);
        if (v242 >= *(_DWORD *)(v50 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v50 + 208) + 8 * v242) = v52;
        ++*(_DWORD *)(v50 + 216);
        *(void *)(v50 + 200) = v52 + v241;
      }
      else
      {
        unint64_t v52 = (v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v50 + 192) = v52 + 24;
      *(unsigned char *)unint64_t v52 = 1;
      *(_DWORD *)(v52 + 1) = *(unsigned __int8 *)(v52 + 4) << 24;
      *(void *)(v52 + 8) = 0;
      *(void *)(v52 + 16) = v48;
      *a2 = v52;
      *a3 = *(void *)(*(void *)(a1 + 48) + 8) + *(void *)(*(void *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) != 2) {
        return 0;
      }
      v290 = a3;
      uint64_t v53 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      v55 = *(unsigned char **)(v53 + 8);
      unint64_t v54 = *(void *)(v53 + 16);
      *(void *)&long long v307 = v55;
      *((void *)&v307 + 1) = v54;
      v310[0] = 64;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v307, v310, 1uLL, 0);
      if (v56 == -1
        || (v54 >= v56 + 1 ? (unint64_t v57 = v56 + 1) : (unint64_t v57 = v54), v54 >= v56 ? (v58 = v56) : (v58 = v54), v54 <= v56))
      {
        int v62 = 0;
      }
      else
      {
        unint64_t v59 = v54 - v57;
        int v60 = &v55[v57];
        int v61 = llvm::MCSymbolRefExpr::getVariantKindForName((uint64_t)&v55[v57], v54 - v57);
        if (v61 == 1)
        {
          __int16 v305 = 1283;
          __p[0] = "invalid variant '";
          v303 = v60;
          unint64_t v304 = v59;
          *(void *)v310 = __p;
          *(void *)&v310[16] = "'";
          __int16 v22 = 770;
          goto LABEL_18;
        }
        int v62 = v61;
        unint64_t v54 = v58;
      }
      if (v54 != 1) {
        return 0;
      }
      int v93 = *v55;
      if ((v93 | 4) != 0x66) {
        return 0;
      }
      uint64_t DirectionalLocalSymbol = llvm::MCContext::getDirectionalLocalSymbol(*(llvm::MCContext **)(a1 + 216), v48, v93 == 98);
      uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v96 = v95;
      *(void *)(v95 + 272) += 24;
      uint64_t v97 = *(void *)(v95 + 192);
      if (((v97 + 7) & 0xFFFFFFFFFFFFFFF8) - v97 + 24 > *(void *)(v95 + 200) - v97)
      {
        v279 = v55;
        unsigned int v280 = *(_DWORD *)(v95 + 216) >> 7;
        if (v280 >= 0x1E) {
          LOBYTE(v280) = 30;
        }
        uint64_t v281 = 4096 << v280;
        unint64_t v98 = (unint64_t)operator new(4096 << v280, (std::align_val_t)8uLL);
        unsigned int v282 = *(_DWORD *)(v96 + 216);
        if (v282 >= *(_DWORD *)(v96 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v96 + 208) + 8 * v282) = v98;
        ++*(_DWORD *)(v96 + 216);
        *(void *)(v96 + 200) = v98 + v281;
        v55 = v279;
      }
      else
      {
        unint64_t v98 = (v97 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v96 + 192) = v98 + 24;
      int v99 = v62 | (*(unsigned __int8 *)(*(void *)(v96 + 152) + 18) << 16);
      *(unsigned char *)unint64_t v98 = 2;
      *(_DWORD *)(v98 + 1) = v99 | (*(unsigned __int8 *)(v98 + 4) << 24);
      *(void *)(v98 + 8) = 0;
      *(void *)(v98 + 16) = DirectionalLocalSymbol;
      *a2 = v98;
      v100 = v290;
      if (*v55 == 98)
      {
        unint64_t AssociatedFragment = *(void *)DirectionalLocalSymbol & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment)
        {
          if ((*(_DWORD *)(DirectionalLocalSymbol + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(DirectionalLocalSymbol + 8) |= 4u;
            unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(DirectionalLocalSymbol + 24));
            *(void *)uint64_t DirectionalLocalSymbol = *(void *)DirectionalLocalSymbol & 7 | AssociatedFragment;
          }
          v100 = v290;
          if (!AssociatedFragment)
          {
            *(void *)v310 = "directional label undefined";
            *(_WORD *)&v310[32] = 259;
            v231 = (void **)v310;
            uint64_t v232 = a1;
            uint64_t v230 = v43;
            return llvm::MCAsmParser::Error(v232, v230, (uint64_t)v231, 0, 0);
          }
        }
      }
      *(void *)v310 = v43;
      uint64_t v102 = *(void *)(a1 + 792);
      long long v103 = *(_OWORD *)(a1 + 776);
      *(_OWORD *)&v310[8] = *(_OWORD *)(a1 + 760);
      *(_OWORD *)&v310[24] = v103;
      *(void *)&v310[40] = v102;
      uint64_t v311 = DirectionalLocalSymbol;
      unsigned int v104 = *(_DWORD *)(a1 + 824);
      unint64_t v105 = *(void *)(a1 + 816);
      if (v104 >= *(_DWORD *)(a1 + 828))
      {
        BOOL v286 = v105 + 56 * v104 > (unint64_t)v310;
        if (v105 > (unint64_t)v310 || !v286) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v106 = v105 + 56 * *(unsigned int *)(a1 + 824);
      long long v107 = *(_OWORD *)v310;
      long long v108 = *(_OWORD *)&v310[16];
      long long v109 = *(_OWORD *)&v310[32];
      *(void *)(v106 + 48) = v311;
      *(_OWORD *)(v106 + 16) = v108;
      *(_OWORD *)(v106 + 32) = v109;
      *(_OWORD *)uint64_t v106 = v107;
      ++*(_DWORD *)(a1 + 824);
      uint64_t *v100 = *(void *)(*(void *)(a1 + 48) + 8) + *(void *)(*(void *)(a1 + 48) + 16);
LABEL_32:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      return 0;
    case 5:
      char v21 = "literal value out of range for directive";
      goto LABEL_17;
    case 6:
      uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      llvm::APFloat::APFloat((uint64_t)v310, &unk_1CFB2E31C, *(unsigned __int8 **)(*(void *)(v79 + 8) + 8), *(void *)(*(void *)(v79 + 8) + 16));
      if (*(_UNKNOWN **)&v310[8] == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v310[8], (llvm::APInt *)__p);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v310[8], (uint64_t)__p);
      }
      if (LODWORD(__p[1]) >= 0x41) {
        v80 = (void **)__p[0];
      }
      else {
        v80 = __p;
      }
      uint64_t v81 = *v80;
      if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
        MEMORY[0x1D25D9CB0]();
      }
      uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v83 = v82;
      *(void *)(v82 + 272) += 24;
      uint64_t v84 = *(void *)(v82 + 192);
      if (((v84 + 7) & 0xFFFFFFFFFFFFFFF8) - v84 + 24 > *(void *)(v82 + 200) - v84)
      {
        unsigned int v243 = *(_DWORD *)(v82 + 216) >> 7;
        if (v243 >= 0x1E) {
          LOBYTE(v243) = 30;
        }
        uint64_t v244 = 4096 << v243;
        unint64_t v85 = (unint64_t)operator new(4096 << v243, (std::align_val_t)8uLL);
        unsigned int v245 = *(_DWORD *)(v83 + 216);
        if (v245 >= *(_DWORD *)(v83 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v83 + 208) + 8 * v245) = v85;
        ++*(_DWORD *)(v83 + 216);
        *(void *)(v83 + 200) = v85 + v244;
      }
      else
      {
        unint64_t v85 = (v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v83 + 192) = v85 + 24;
      *(unsigned char *)unint64_t v85 = 1;
      *(_DWORD *)(v85 + 1) = *(unsigned __int8 *)(v85 + 4) << 24;
      *(void *)(v85 + 8) = 0;
      *(void *)(v85 + 16) = v81;
      *a2 = v85;
      *a3 = *(void *)(*(void *)(a1 + 48) + 8) + *(void *)(*(void *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if (*(_UNKNOWN **)&v310[8] == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v310[16]);
      }
      else if ((*(_DWORD *)(*(void *)&v310[8] + 8) - 64) <= 0xFFFFFF7F && *(void *)&v310[16])
      {
        MEMORY[0x1D25D9CB0](*(void *)&v310[16], 0x1000C8000313F17);
      }
      return 0;
    case 12:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if ((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 240))(a1, a2, a3, 0))return v11; {
      unint64_t v25 = *a2;
      }
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v40 = v39;
      *(void *)(v39 + 272) += 24;
      uint64_t v41 = *(void *)(v39 + 192);
      if (((v41 + 7) & 0xFFFFFFFFFFFFFFF8) - v41 + 24 > *(void *)(v39 + 200) - v41)
      {
        unsigned int v264 = *(_DWORD *)(v39 + 216) >> 7;
        if (v264 >= 0x1E) {
          LOBYTE(v264) = 30;
        }
        uint64_t v265 = 4096 << v264;
        unint64_t v29 = (unint64_t)operator new(4096 << v264, (std::align_val_t)8uLL);
        unsigned int v266 = *(_DWORD *)(v40 + 216);
        if (v266 >= *(_DWORD *)(v40 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v40 + 208) + 8 * v266) = v29;
        ++*(_DWORD *)(v40 + 216);
        *(void *)(v40 + 200) = v29 + v265;
      }
      else
      {
        unint64_t v29 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = 0;
      *(void *)(v40 + 192) = v29 + 24;
      *(unsigned char *)unint64_t v29 = 3;
      int v42 = (*(unsigned __int8 *)(v29 + 4) << 24) | 3;
      goto LABEL_61;
    case 13:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if ((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 240))(a1, a2, a3, 0))return v11; {
      unint64_t v25 = *a2;
      }
      uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v64 = v63;
      *(void *)(v63 + 272) += 24;
      uint64_t v65 = *(void *)(v63 + 192);
      if (((v65 + 7) & 0xFFFFFFFFFFFFFFF8) - v65 + 24 > *(void *)(v63 + 200) - v65)
      {
        unsigned int v267 = *(_DWORD *)(v63 + 216) >> 7;
        if (v267 >= 0x1E) {
          LOBYTE(v267) = 30;
        }
        uint64_t v268 = 4096 << v267;
        unint64_t v29 = (unint64_t)operator new(4096 << v267, (std::align_val_t)8uLL);
        unsigned int v269 = *(_DWORD *)(v64 + 216);
        if (v269 >= *(_DWORD *)(v64 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v64 + 208) + 8 * v269) = v29;
        ++*(_DWORD *)(v64 + 216);
        *(void *)(v64 + 200) = v29 + v268;
      }
      else
      {
        unint64_t v29 = (v65 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = 0;
      *(void *)(v64 + 192) = v29 + 24;
      *(unsigned char *)unint64_t v29 = 3;
      int v30 = *(unsigned __int8 *)(v29 + 4);
      int v31 = 1;
      goto LABEL_56;
    case 14:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if ((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 240))(a1, a2, a3, 0))return v11; {
      unint64_t v25 = *a2;
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v27 = v26;
      *(void *)(v26 + 272) += 24;
      uint64_t v28 = *(void *)(v26 + 192);
      if (((v28 + 7) & 0xFFFFFFFFFFFFFFF8) - v28 + 24 > *(void *)(v26 + 200) - v28)
      {
        unsigned int v261 = *(_DWORD *)(v26 + 216) >> 7;
        if (v261 >= 0x1E) {
          LOBYTE(v261) = 30;
        }
        uint64_t v262 = 4096 << v261;
        unint64_t v29 = (unint64_t)operator new(4096 << v261, (std::align_val_t)8uLL);
        unsigned int v263 = *(_DWORD *)(v27 + 216);
        if (v263 >= *(_DWORD *)(v27 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v27 + 208) + 8 * v263) = v29;
        ++*(_DWORD *)(v27 + 216);
        *(void *)(v27 + 200) = v29 + v262;
      }
      else
      {
        unint64_t v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = 0;
      *(void *)(v27 + 192) = v29 + 24;
      *(unsigned char *)unint64_t v29 = 3;
      int v30 = *(unsigned __int8 *)(v29 + 4);
      int v31 = 2;
LABEL_56:
      int v42 = v31 | (v30 << 24);
      goto LABEL_61;
    case 17:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      return sub_1CD3821A4((llvm::MCAsmParser *)a1, (uint64_t)a2, a3);
    case 19:
      if (!*(unsigned char *)(*(void *)(a1 + 264) + 16))
      {
        char v21 = "brackets expression not supported on this target";
        goto LABEL_17;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      *(void *)v310 = 0;
      if ((*(uint64_t (**)(uint64_t, unint64_t *, unsigned char *))(*(void *)a1 + 232))(a1, a2, v310)) {
        return v11;
      }
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      *a3 = *(void *)(*(void *)(v78 + 8) + 8) + *(void *)(*(void *)(v78 + 8) + 16);
      *(void *)v310 = "expected ']' in brackets expression";
      *(_WORD *)&v310[32] = 259;
      return llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 20, (llvm::Twine *)v310);
    case 24:
      uint64_t v32 = *(llvm::MCContext **)(a1 + 216);
      *(void *)v310 = "tmp";
      *(_WORD *)&v310[32] = 259;
      uint64_t v33 = llvm::MCContext::createTempSymbol(v32, (const llvm::Twine *)v310, 1);
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 224) + 192))(*(void *)(a1 + 224), v33, 0);
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v35 = v34;
      *(void *)(v34 + 272) += 24;
      uint64_t v36 = *(void *)(v34 + 192);
      if (((v36 + 7) & 0xFFFFFFFFFFFFFFF8) - v36 + 24 > *(void *)(v34 + 200) - v36)
      {
        unsigned int v237 = *(_DWORD *)(v34 + 216) >> 7;
        if (v237 >= 0x1E) {
          LOBYTE(v237) = 30;
        }
        uint64_t v238 = 4096 << v237;
        unint64_t v37 = (unint64_t)operator new(4096 << v237, (std::align_val_t)8uLL);
        unsigned int v239 = *(_DWORD *)(v35 + 216);
        if (v239 >= *(_DWORD *)(v35 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v35 + 208) + 8 * v239) = v37;
        ++*(_DWORD *)(v35 + 216);
        *(void *)(v35 + 200) = v37 + v238;
      }
      else
      {
        unint64_t v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v35 + 192) = v37 + 24;
      int v38 = *(unsigned __int8 *)(*(void *)(v35 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v37 = 2;
      *(_DWORD *)(v37 + 1) = v38 | (*(unsigned __int8 *)(v37 + 4) << 24);
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 16) = v33;
      *a2 = v37;
      *a3 = *(void *)(*(void *)(a1 + 48) + 8) + *(void *)(*(void *)(a1 + 48) + 16);
      goto LABEL_32;
    case 34:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if ((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 240))(a1, a2, a3, 0))return v11; {
      unint64_t v25 = *a2;
      }
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      uint64_t v67 = v66;
      *(void *)(v66 + 272) += 24;
      uint64_t v68 = *(void *)(v66 + 192);
      if (((v68 + 7) & 0xFFFFFFFFFFFFFFF8) - v68 + 24 > *(void *)(v66 + 200) - v68)
      {
        unsigned int v270 = *(_DWORD *)(v66 + 216) >> 7;
        if (v270 >= 0x1E) {
          LOBYTE(v270) = 30;
        }
        uint64_t v271 = 4096 << v270;
        unint64_t v29 = (unint64_t)operator new(4096 << v270, (std::align_val_t)8uLL);
        unsigned int v272 = *(_DWORD *)(v67 + 216);
        if (v272 >= *(_DWORD *)(v67 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v67 + 208) + 8 * v272) = v29;
        ++*(_DWORD *)(v67 + 216);
        *(void *)(v67 + 200) = v29 + v271;
      }
      else
      {
        unint64_t v29 = (v68 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = 0;
      *(void *)(v67 + 192) = v29 + 24;
      *(unsigned char *)unint64_t v29 = 3;
      int v42 = *(unsigned __int8 *)(v29 + 4) << 24;
LABEL_61:
      *(_DWORD *)(v29 + 1) = v42;
      *(void *)(v29 + 8) = v10;
      goto LABEL_62;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) == 17)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *))(*(void *)a1 + 232))(a1, a2, a3) & 1) == 0)
        {
          *(void *)v310 = "expected ')'";
          *(_WORD *)&v310[32] = 259;
          if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v310))
          {
            uint64_t v24 = (*(uint64_t (**)(void, unint64_t, uint64_t, void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), *a2, v9, *(void *)(a1 + 216));
            *a2 = v24;
            return v24 == 0;
          }
        }
        return v11;
      }
      char v21 = "expected '(' after operator";
LABEL_17:
      *(void *)v310 = v21;
      __int16 v22 = 259;
LABEL_18:
      *(_WORD *)&v310[32] = v22;
      return llvm::MCAsmParser::TokError(a1, (uint64_t)v310, 0, 0);
    default:
      char v21 = "unknown token in expression";
      goto LABEL_17;
  }
}

BOOL sub_1CD39AE20(llvm::MCAsmParser *a1, unint64_t *a2, void *a3)
{
  *a2 = 0;
  if (sub_1CD3821A4(a1, (uint64_t)a2, a3)) {
    return 1;
  }

  return sub_1CD3B7614((uint64_t)a1, 1u, a2, (uint64_t)a3);
}

uint64_t sub_1CD39AE90(void *a1, void *a2)
{
  uint64_t v14 = 0;
  uint64_t v4 = a1[17];
  *(void *)&long long v10 = 0;
  if ((*(uint64_t (**)(void *, uint64_t *, long long *))(*a1 + 232))(a1, &v14, &v10)) {
    return 1;
  }
  uint64_t v6 = v14;
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
  long long v10 = 0uLL;
  int v12 = 0;
  uint64_t v11 = 0;
  if (*(unsigned char *)v6 == 1)
  {
    uint64_t result = 0;
    *a2 = *(void *)(v6 + 16);
  }
  else
  {
    char v9 = llvm::MCExpr::evaluateAsRelocatableImpl(v6, (uint64_t)&v10, v8, 0, 0, 0, 0);
    *a2 = v11;
    if ((v9 & 1) != 0 && v10 == 0)
    {
      return 0;
    }
    else
    {
      *(void *)&long long v10 = "expected absolute expression";
      __int16 v13 = 259;
      return llvm::MCAsmParser::Error((uint64_t)a1, v4, (uint64_t)&v10, 0, 0);
    }
  }
  return result;
}

uint64_t sub_1CD39AFEC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1061)) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v3 = *(unsigned int *)(v2 + 120);
  if (v3)
  {
    if (*(void *)(*(void *)(v2 + 112) + 32 * v3 - 32)) {
      return 0;
    }
  }
  (*(void (**)(void, void, void))(**(void **)(a1 + 224) + 176))(*(void *)(a1 + 224), 0, *(void *)(*(void *)(a1 + 8) + 240));
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
  uint64_t v6 = "expected section directive before assembly directive";
  __int16 v7 = 259;
  return llvm::MCAsmParser::Error(a1, v5, (uint64_t)&v6, 0, 0);
}

uint64_t sub_1CD39B0EC(llvm::MCAsmParser *a1, int a2, unint64_t *a3, void *a4)
{
  if (sub_1CD3821A4(a1, (uint64_t)a3, a4)) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  BOOL v8 = 1;
  while (!sub_1CD3B7614((uint64_t)a1, 1u, a3, (uint64_t)a4))
  {
    BOOL v8 = --a2 != 0;
    if (!a2) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    *a4 = *(void *)(*(void *)(v9 + 8) + 8) + *(void *)(*(void *)(v9 + 8) + 16);
    uint64_t v11 = "expected ')'";
    __int16 v12 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v11)) {
      break;
    }
  }
  return v8;
}

void **sub_1CD39B200(void **a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*a1)
  {
    uint64_t v3 = (void ***)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 18;
        sub_1CD39B268(v3 - 16);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_1CD39B268(void ***a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 2)
  {
    sub_1CD61201C((uint64_t)(a1 + 12));
    sub_1CD39B200(a1 + 9);
    sub_1CD39B2E4(a1 + 1);
  }
  else if (v2 == 1)
  {
    sub_1CD480C18((char **)a1 + 1);
  }
  else if (!v2)
  {
    uint64_t v3 = (int *)a1[1];
    if (v3 != (int *)(a1 + 3)) {
      free(v3);
    }
  }
  return a1;
}

void ***sub_1CD39B2E4(void ***a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        __int16 v7 = *(v5 - 3);
        v5 -= 3;
        uint64_t v6 = v7;
        if (v7)
        {
          uint64_t v8 = (uint64_t)*(v3 - 2);
          uint64_t v9 = v6;
          if ((void *)v8 != v6)
          {
            do
              uint64_t v8 = sub_1CD39B268(v8 - 128);
            while ((void *)v8 != v6);
            uint64_t v9 = *v5;
          }
          *(v3 - 2) = v6;
          operator delete(v9);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

size_t sub_1CD39B384(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void **)a1;
  uint64_t v1087 = *MEMORY[0x1E4F143B8];
  __int16 v7 = (int **)(a1 + 48);
  while (1)
  {
    int v8 = **v7;
    if (v8 != 11) {
      break;
    }
    ((void (*)(void **))(*v6)[23])(v6);
  }
  if (v8 == 9)
  {
    if (!*(void *)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 16)
      || **(unsigned char **)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 8) == 13
      || **(unsigned char **)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 8) == 10)
    {
      (*(void (**)(void *))(*v6[28] + 152))(v6[28]);
    }
    ((void (*)(void **))(*v6)[23])(v6);
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  long long v10 = v6 + 5;
  if (**(_DWORD **)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) == 36)
  {
    ((void (*)(void **))(*v6)[5])(v6);
    v1057[0] = "unexpected token";
    __int16 v1059 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)v6, 36, (llvm::Twine *)v1057)) {
      goto LABEL_342;
    }
    v1016 = v6 + 5;
    sub_1CD3A8F78(&v1045, (uint64_t)v6);
    v1040 = *(llvm::MCAsmParser **)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 8);
    long long v1084 = 0uLL;
    unint64_t v1085 = 0;
    v1081 = 0;
    v1082 = 0;
    unint64_t v1083 = 0;
    *(_OWORD *)&v1055.__r_.__value_.__l.__data_ = 0uLL;
    v1055.__r_.__value_.__r.__words[2] = 0x2000000000;
    uint64_t v71 = *((unsigned int *)v6 + 286);
    __na = v7;
    uint64_t v72 = v6[142];
    if (v71)
    {
      while (1)
      {
        BOOL v73 = !*v72 || *v72 == -8;
        if (!v73) {
          break;
        }
        ++v72;
      }
    }
    uint64_t v74 = (uint64_t)&v6[142][v71];
    uint64_t v1003 = a2;
    v1008 = a3;
    if (v72 == (uint64_t *)v74)
    {
      std::string::size_type v122 = 0;
      unsigned int v123 = 0;
      unint64_t i = 0;
    }
    else
    {
      uint64_t v75 = *v72;
      do
      {
        sub_1CD3AC728((uint64_t)__dst, (uint64_t)v6, *(_DWORD *)(v75 + 8));
        if (__dst[24])
        {
          std::string::size_type v78 = *(void *)v75;
          __str[0].__r_.__value_.__r.__words[0] = v75 + 16;
          __str[0].__r_.__value_.__l.__size_ = v78;
          llvm::StringRef::lower((llvm::StringRef *)__str, __c);
          if (__c[23] >= 0) {
            uint64_t v79 = __c;
          }
          else {
            uint64_t v79 = *(unsigned __int8 **)__c;
          }
          if (__c[23] >= 0) {
            size_t v80 = __c[23] & 0x7F;
          }
          else {
            size_t v80 = *(void *)&__c[8];
          }
          uint64_t v81 = sub_1CD5D600C((uint64_t)&v1055, v79, v80);
          uint64_t v82 = (uint64_t)(*v81 + 1);
          if (*((char *)*v81 + 31) < 0) {
            operator delete(*(void **)v82);
          }
          *(void *)(v82 + 16) = *(void *)&__dst[16];
          *(_OWORD *)uint64_t v82 = *(_OWORD *)__dst;
          __dst[23] = 0;
          __dst[0] = 0;
          if ((__c[23] & 0x80000000) != 0) {
            operator delete(*(void **)__c);
          }
        }
        do
        {
          uint64_t v76 = v72[1];
          ++v72;
          uint64_t v75 = v76;
          if (v76) {
            BOOL v77 = v75 == -8;
          }
          else {
            BOOL v77 = 1;
          }
        }
        while (v77);
      }
      while (v72 != (uint64_t *)v74);
      std::string::size_type v122 = v1055.__r_.__value_.__r.__words[0];
      unsigned int v123 = v1055.__r_.__value_.__r.__words[1];
      if (LODWORD(v1055.__r_.__value_.__r.__words[1]))
      {
        for (unint64_t i = (void *)v1055.__r_.__value_.__r.__words[0]; !*i || *i == -8; ++i)
          ;
      }
      else
      {
        unint64_t i = (void *)v1055.__r_.__value_.__r.__words[0];
      }
    }
    BOOL v153 = (void *)(v122 + 8 * v123);
    if (i != v153)
    {
      uint64_t v154 = (void *)*i;
      do
      {
        memset(__dst, 0, 42);
        memset(__str, 0, 24);
        *(void *)&__dst[8] = *v154;
        __dst[40] = 1;
        uint64_t v157 = (void *)v154[1];
        uint64_t v155 = v154 + 1;
        uint64_t v156 = v157;
        *(void *)__dst = v155 + 3;
        char v158 = *((unsigned char *)v155 + 23);
        if (v158 >= 0) {
          char v159 = v155;
        }
        else {
          char v159 = v156;
        }
        uint64_t v160 = v155[1];
        if (v158 >= 0) {
          uint64_t v161 = v158 & 0x7F;
        }
        else {
          uint64_t v161 = v160;
        }
        *(void *)&long long v1076 = (char *)&__str[0].__r_.__value_.__l + 16;
        int v162 = operator new(0x28uLL);
        *(_DWORD *)int v162 = 3;
        v162[1] = v159;
        v162[2] = v161;
        *((_DWORD *)v162 + 8) = 64;
        v162[3] = 0;
        std::string::size_type v163 = (std::string::size_type)(v162 + 5);
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
        __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v162 + 5);
        __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v162 + 5);
        memset(__c, 0, sizeof(__c));
        sub_1CD8F3EEC((uint64_t)__c);
        __str[0].__r_.__value_.__l.__size_ = v163;
        uint64_t v164 = *((void *)&v1084 + 1);
        if (*((void *)&v1084 + 1) >= v1085)
        {
          uint64_t v165 = sub_1CD381324((uint64_t *)&v1084, (uint64_t)__dst);
        }
        else
        {
          **((_OWORD **)&v1084 + 1) = *(_OWORD *)__dst;
          *(void *)(v164 + 24) = 0;
          *(void *)(v164 + 32) = 0;
          *(void *)(v164 + 16) = 0;
          *(_OWORD *)(v164 + 16) = *(_OWORD *)&__dst[16];
          *(void *)(v164 + 32) = *(void *)&__dst[32];
          memset(&__dst[16], 0, 24);
          *(_WORD *)(v164 + 40) = *(_WORD *)&__dst[40];
          uint64_t v165 = v164 + 48;
        }
        *((void *)&v1084 + 1) = v165;
        uint64_t v166 = v1082;
        if ((unint64_t)v1082 >= v1083)
        {
          p_data = sub_1CD3AD180((void ***)&v1081, (uint64_t)__str);
        }
        else
        {
          v1082->__r_.__value_.__r.__words[0] = 0;
          v166->__r_.__value_.__l.__size_ = 0;
          v166->__r_.__value_.__r.__words[2] = 0;
          *uint64_t v166 = __str[0];
          p_data = (void **)&v166[1].__r_.__value_.__l.__data_;
          memset(__str, 0, 24);
        }
        v1082 = (std::string *)p_data;
        *(void *)__c = __str;
        sub_1CCBB926C((void ***)__c);
        *(void *)__c = &__dst[16];
        sub_1CCBB926C((void ***)__c);
        do
        {
          int v168 = (void *)i[1];
          ++i;
          uint64_t v154 = v168;
          if (v168) {
            BOOL v169 = v154 + 1 == 0;
          }
          else {
            BOOL v169 = 1;
          }
        }
        while (v169);
      }
      while (i != v153);
    }
    uint64_t v170 = *((unsigned int *)v6 + 120);
    if (v170)
    {
      for (j = v6[59]; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = v6[59];
    }
    uint64_t v173 = (uint64_t)&v6[59][v170];
    if (j != (uint64_t *)v173)
    {
      uint64_t v174 = *j;
      do
      {
        if (*(unsigned char *)(v174 + 28))
        {
          memset(__dst, 0, 42);
          memset(__str, 0, 24);
          *(_OWORD *)__dst = *(_OWORD *)(v174 + 8);
          __dst[40] = 1;
          uint64_t v179 = *(void *)(v174 + 32);
          uint64_t v177 = v174 + 32;
          uint64_t v178 = v179;
          char v180 = *(unsigned char *)(v177 + 23);
          if (v180 >= 0) {
            uint64_t v181 = v177;
          }
          else {
            uint64_t v181 = v178;
          }
          uint64_t v182 = *(void *)(v177 + 8);
          if (v180 >= 0) {
            uint64_t v183 = v180 & 0x7F;
          }
          else {
            uint64_t v183 = v182;
          }
          *(void *)&long long v1076 = (char *)&__str[0].__r_.__value_.__l + 16;
          uint64_t v184 = operator new(0x28uLL);
          *(_DWORD *)uint64_t v184 = 3;
          v184[1] = v181;
          v184[2] = v183;
          *((_DWORD *)v184 + 8) = 64;
          v184[3] = 0;
          std::string::size_type v185 = (std::string::size_type)(v184 + 5);
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v184;
          __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v184 + 5);
          __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v184 + 5);
          memset(__c, 0, sizeof(__c));
          sub_1CD8F3EEC((uint64_t)__c);
          __str[0].__r_.__value_.__l.__size_ = v185;
          uint64_t v186 = *((void *)&v1084 + 1);
          if (*((void *)&v1084 + 1) >= v1085)
          {
            uint64_t v187 = sub_1CD381324((uint64_t *)&v1084, (uint64_t)__dst);
          }
          else
          {
            **((_OWORD **)&v1084 + 1) = *(_OWORD *)__dst;
            *(void *)(v186 + 24) = 0;
            *(void *)(v186 + 32) = 0;
            *(void *)(v186 + 16) = 0;
            *(_OWORD *)(v186 + 16) = *(_OWORD *)&__dst[16];
            *(void *)(v186 + 32) = *(void *)&__dst[32];
            memset(&__dst[16], 0, 24);
            *(_WORD *)(v186 + 40) = *(_WORD *)&__dst[40];
            uint64_t v187 = v186 + 48;
          }
          *((void *)&v1084 + 1) = v187;
          v188 = v1082;
          if ((unint64_t)v1082 >= v1083)
          {
            v189 = sub_1CD3AD180((void ***)&v1081, (uint64_t)__str);
          }
          else
          {
            v1082->__r_.__value_.__r.__words[0] = 0;
            v188->__r_.__value_.__l.__size_ = 0;
            v188->__r_.__value_.__r.__words[2] = 0;
            std::string *v188 = __str[0];
            v189 = (void **)&v188[1].__r_.__value_.__l.__data_;
            memset(__str, 0, 24);
          }
          v1082 = (std::string *)v189;
          *(void *)__c = __str;
          sub_1CCBB926C((void ***)__c);
          *(void *)__c = &__dst[16];
          sub_1CCBB926C((void ***)__c);
        }
        do
        {
          uint64_t v175 = j[1];
          ++j;
          uint64_t v174 = v175;
          if (v175) {
            BOOL v176 = v174 == -8;
          }
          else {
            BOOL v176 = 1;
          }
        }
        while (v176);
      }
      while (j != (uint64_t *)v173);
    }
    int v190 = v6[90];
    v191 = v6[89];
    uint64_t v192 = 46 * (v190 - v191) - 1;
    if (v190 == v191) {
      uint64_t v192 = 0;
    }
    if ((void *)v192 == (void *)((char *)v6[92] + (void)v6[93]))
    {
      sub_1CD8F4134((uint64_t)(v6 + 88));
      v191 = v6[89];
      int v190 = v6[90];
    }
    if (v190 == v191)
    {
      unint64_t v194 = 0;
    }
    else
    {
      unint64_t v193 = (unint64_t)v6[93] + (void)v6[92];
      unint64_t v194 = v191[v193 / 0x2E] + 88 * (v193 % 0x2E);
    }
    uint64_t v195 = (uint64_t)v6;
    if ((v1045.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v196 = &v1045;
    }
    else {
      unint64_t v196 = (std::string *)v1045.__r_.__value_.__r.__words[0];
    }
    if ((v1045.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v1045.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v1045.__r_.__value_.__l.__size_;
    }
    memset(__dst, 0, 24);
    sub_1CD3AD2BC((int64_t)__dst, v1084, *((uint64_t *)&v1084 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1084 + 1) - v1084) >> 4));
    *(void *)unint64_t v194 = 0;
    *(void *)(v194 + 8) = 0;
    *(void *)(v194 + 16) = v196;
    *(void *)(v194 + 24) = size;
    *(_OWORD *)(v194 + 32) = *(_OWORD *)__dst;
    uint64_t v198 = *(void *)&__dst[16];
    memset(__dst, 0, 24);
    *(void *)(v194 + 48) = v198;
    *(void *)(v194 + 56) = 0;
    *(void *)(v194 + 64) = 0;
    *(void *)(v194 + 72) = 0;
    *(unsigned char *)(v194 + 80) = 0;
    *(void *)__c = __dst;
    sub_1CCBB91F0((void ***)__c);
    uint64_t v199 = *(void *)(v195 + 744);
    *(void *)(v195 + 744) = v199 + 1;
    unint64_t v200 = *(void *)(*(void *)(v195 + 712) + 8 * ((v199 + *(void *)(v195 + 736)) / 0x2EuLL))
         + 88 * ((v199 + *(void *)(v195 + 736)) % 0x2EuLL);
    long long v201 = *(_OWORD *)(v200 + 16);
    *(_OWORD *)__c = *(_OWORD *)v200;
    *(_OWORD *)&__c[16] = v201;
    unint64_t v1077 = 0;
    long long v1076 = 0uLL;
    sub_1CD3AD2BC((int64_t)&v1076, *(void *)(v200 + 32), *(void *)(v200 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v200 + 40) - *(void *)(v200 + 32)) >> 4));
    long long v1078 = 0uLL;
    uint64_t v1079 = 0;
    sub_1CB906CCC(&v1078, *(void *)(v200 + 56), *(void *)(v200 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v200 + 64) - *(void *)(v200 + 56)) >> 3));
    char v1080 = *(unsigned char *)(v200 + 80);
    *(void *)__dst = &__dst[24];
    *(_OWORD *)&__dst[8] = xmmword_1CFB2C4C0;
    LODWORD(__str[0].__r_.__value_.__r.__words[1]) = 0;
    uint64_t v1068 = 0;
    v1070 = __dst;
    int v1069 = 0;
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646FA8;
    memset(&__str[0].__r_.__value_.__r.__words[2], 0, 25);
    char v202 = sub_1CD3ACA20(v195, (llvm::raw_ostream *)__str, *(unsigned __int8 **)&__c[16], *(unint64_t *)&__c[24], v1076, -1431655765 * ((uint64_t)(*((void *)&v1076 + 1) - v1076) >> 4), (uint64_t)v1081, 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - (char *)v1081) >> 3), (uint64_t *)&v1078, (uint64_t)v1040);
    uint64_t v6 = (void **)v195;
    if ((v202 & 1) == 0)
    {
      uint64_t v222 = *(const void **)v1070;
      v223 = (llvm::WritableMemoryBuffer *)*((void *)v1070 + 1);
      *(void *)v1060 = "<expansion>";
      LOWORD(v1061) = 259;
      sub_1CD0963EC(v223, v222, (const void ***)v1060, (uint64_t)&v1063);
      if (v1064) {
        uint64_t v224 = 0;
      }
      else {
        uint64_t v224 = v1063;
      }
      uint64_t v225 = *(void *)(v195 + 240);
      *(void *)v1060 = v224;
      int v226 = sub_1CD452CE0(v225, (uint64_t *)v1060, (uint64_t)v1040);
      *(_DWORD *)(v195 + 272) = v226;
      uint64_t v227 = *(void *)v1060;
      *(void *)v1060 = 0;
      if (v227)
      {
        (*(void (**)(uint64_t))(*(void *)v227 + 8))(v227);
        int v226 = *(_DWORD *)(v195 + 272);
      }
      uint64_t v228 = *(void *)(**(void **)(v195 + 240) + 24 * (v226 - 1));
      uint64_t v229 = *(void *)(v228 + 8);
      uint64_t v230 = *(void *)(v228 + 16) - v229;
      *(void *)(v195 + 192) = v229;
      *(void *)(v195 + 200) = v230;
      *(void *)(v195 + 184) = v229;
      *(void *)(v195 + 136) = 0;
      *(unsigned char *)(v195 + 211) = 1;
      int v231 = *(_DWORD *)(v195 + 400);
      int v232 = v231 + 1;
      uint64_t v233 = *(unsigned int *)(v195 + 344);
      if ((v231 + 1) <= v233 << 6)
      {
        *(_DWORD *)(v195 + 400) = v232;
      }
      else
      {
        int v234 = (void *)(v195 + 336);
        if ((v231 & 0x3F) != 0) {
          *(void *)(*v234 + 8 * v233 - 8) &= ~(-1 << (v231 & 0x3F));
        }
        *((_DWORD *)v6 + 100) = v232;
        unsigned int v235 = v231 + 64;
        if (v233 != v235 >> 6)
        {
          uint64_t v236 = v235 >> 6;
          if (v233 > v236)
          {
            *((_DWORD *)v6 + 86) = v236;
            LODWORD(v233) = v235 >> 6;
          }
          else
          {
            if (v236 > *((_DWORD *)v6 + 87)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v236 != v233) {
              bzero((void *)(*v234 + 8 * v233), 8 * (v236 - v233));
            }
            LODWORD(v233) = v236;
            *((_DWORD *)v6 + 86) = v236;
            int v232 = *((_DWORD *)v6 + 100);
          }
        }
        int v237 = v232 & 0x3F;
        if (v237) {
          *(void *)(*v234 + 8 * v233 - 8) &= ~(-1 << v237);
        }
      }
      ((void (*)(void **))(*v6)[23])(v6);
    }
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
    long long v10 = v1016;
    if (v1069 == 1 && __str[0].__r_.__value_.__r.__words[2]) {
      MEMORY[0x1D25D9CB0](__str[0].__r_.__value_.__r.__words[2], 0x1000C8077774924);
    }
    if (*(unsigned char **)__dst != &__dst[24]) {
      free(*(void **)__dst);
    }
    *(void *)__dst = &v1078;
    sub_1CB8338B8((void ***)__dst);
    *(void *)__dst = &v1076;
    sub_1CCBB91F0((void ***)__dst);
    sub_1CCB7ABD0((uint64_t)&v1055);
    *(void *)__dst = &v1081;
    sub_1CD37EB34((void ***)__dst);
    *(void *)__dst = &v1084;
    sub_1CCBB91F0((void ***)__dst);
    __int16 v7 = __na;
    if (SHIBYTE(v1045.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1045.__r_.__value_.__l.__data_);
    }
    a2 = v1003;
    a3 = v1008;
    if (v202)
    {
LABEL_342:
      LOBYTE(v9) = 1;
      return v9 & 1;
    }
  }
  uint64_t v11 = *(long long **)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8);
  long long v12 = *v11;
  uint64_t v1064 = *((void *)v11 + 2);
  long long v1063 = v12;
  unsigned int v1066 = *((_DWORD *)v11 + 8);
  if (v1066 > 0x40) {
    operator new[]();
  }
  __src = (void *)*((void *)v11 + 3);
  uint64_t v13 = *((void *)&v1063 + 1);
  v1053 = (char *)*((void *)&v1063 + 1);
  long long v1052 = 0uLL;
  int v14 = **v7;
  v1039 = (llvm::MCAsmParser *)v6;
  switch(v14)
  {
    case 21:
      ((void (*)(void **))(*v6)[23])(v6);
      uint64_t v15 = "{";
      goto LABEL_37;
    case 22:
      ((void (*)(void **))(*v6)[23])(v6);
      uint64_t v15 = "}";
      goto LABEL_37;
    case 23:
      if ((*(uint64_t (**)(void *))(*v6[1] + 144))(v6[1]))
      {
        ((void (*)(void **))(*v6)[23])(v6);
        uint64_t v15 = "*";
LABEL_37:
        *(void *)&long long v1052 = v15;
        uint64_t v999 = -1;
        uint64_t v30 = 1;
        goto LABEL_38;
      }
      int v14 = **v7;
      goto LABEL_114;
    case 24:
      ((void (*)(void **))(*v6)[23])(v6);
      uint64_t v15 = ".";
      goto LABEL_37;
    default:
      if (v14 != 4)
      {
        if (v14 == 8)
        {
          ((void (*)(void **))(*v6)[23])(v6);
          uint64_t v16 = *(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8);
          int v19 = *(uint64_t **)(v16 + 24);
          uint64_t v17 = (uint64_t *)(v16 + 24);
          unint64_t v18 = v19;
          if (*((_DWORD *)v17 + 2) >= 0x41u) {
            uint64_t v17 = v18;
          }
          uint64_t v20 = *v17;
          ((void (*)(void **))(*v6)[23])(v6);
          uint64_t v21 = *(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8);
          uint64_t v22 = *(void *)(v21 + 8);
          uint64_t v23 = *(void *)(v21 + 16);
          (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
          unint64_t v24 = v23 - 2;
          if (v23) {
            uint64_t v25 = v22 + 1;
          }
          else {
            uint64_t v25 = v22;
          }
          if (v23 - (unint64_t)(v23 != 0) < v24) {
            unint64_t v24 = v23 - (v23 != 0);
          }
          *((void *)v1039 + 98) = v13;
          *((void *)v1039 + 95) = v25;
          *((void *)v1039 + 96) = v24;
          *((void *)v1039 + 97) = v20;
          *((_DWORD *)v1039 + 198) = *((_DWORD *)v1039 + 68);
          if (!*((void *)v1039 + 101))
          {
            LOBYTE(v9) = 0;
            *((void *)v1039 + 100) = v25;
            *((void *)v1039 + 101) = v24;
            goto LABEL_212;
          }
          goto LABEL_67;
        }
LABEL_114:
        if (v14 == 6)
        {
          long long v1052 = *(_OWORD *)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 8);
          ((void (*)(void **))(*v6)[23])(v6);
          if (!*((void *)&v1052 + 1) || *(unsigned char *)v1052 != 46) {
            goto LABEL_267;
          }
LABEL_121:
          uint64_t v999 = -1;
          goto LABEL_39;
        }
        if (!sub_1CD3A799C((_DWORD **)v6, (unsigned __int8 **)&v1052, 1)) {
          goto LABEL_121;
        }
        if (*((unsigned char *)v6 + 413))
        {
          uint64_t v30 = 0;
          *(void *)&long long v1052 = "";
          uint64_t v999 = -1;
LABEL_38:
          *((void *)&v1052 + 1) = v30;
          goto LABEL_39;
        }
        goto LABEL_266;
      }
      uint64_t v26 = *(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8);
      uint64_t v29 = *(void *)(v26 + 24);
      uint64_t v27 = v26 + 24;
      uint64_t v28 = v29;
      if (*(_DWORD *)(v27 + 8) >= 0x41u) {
        uint64_t v27 = v28;
      }
      uint64_t v999 = *(void *)v27;
      if ((*(void *)v27 & 0x8000000000000000) != 0)
      {
        if (*((unsigned char *)v6 + 413))
        {
          uint64_t v30 = 0;
          *(void *)&long long v1052 = "";
          goto LABEL_38;
        }
LABEL_266:
        ((void (*)(void **))(*v6)[23])(v6);
LABEL_267:
        uint64_t v150 = v1053;
        long long v151 = "unexpected token at start of statement";
LABEL_268:
        *(void *)__dst = v151;
        *(_WORD *)&__dst[32] = 259;
        uint64_t v152 = (uint64_t)v6;
LABEL_269:
        char v70 = llvm::MCAsmParser::Error(v152, (uint64_t)v150, (uint64_t)__dst, 0, 0);
        goto LABEL_211;
      }
      long long v1052 = *(_OWORD *)(*(void *)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) + 8);
      ((void (*)(void **))(*v6)[23])(v6);
      if (*(_DWORD *)v6[6] != 10 && !*((unsigned char *)v6 + 413)) {
        goto LABEL_266;
      }
LABEL_39:
      v1015 = v10;
      llvm::StringRef::lower((llvm::StringRef *)&v1052, __dst);
      int v31 = __dst[23];
      std::string __p = *(void **)__dst;
      if (__dst[23] >= 0) {
        uint64_t v32 = __dst;
      }
      else {
        uint64_t v32 = *(unsigned __int8 **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v33 = __dst[23] & 0x7F;
      }
      else {
        size_t v33 = *(void *)&__dst[8];
      }
      uint64_t v34 = *((unsigned int *)v6 + 270);
      uint64_t v1002 = a2;
      v1006 = a3;
      __n = v7;
      if (v34)
      {
        int v35 = 0;
        if (v33)
        {
          size_t v36 = v33;
          unint64_t v37 = v32;
          do
          {
            int v38 = *v37++;
            int v35 = 33 * v35 + v38;
            --v36;
          }
          while (v36);
        }
        uint64_t v39 = v6[134];
        int v40 = 1;
        int v41 = v35;
        while (1)
        {
          uint64_t v42 = v41 & (v34 - 1);
          uint64_t v43 = (void *)v39[v42];
          if (v43 != (void *)-8)
          {
            if (!v43)
            {
              uint64_t v44 = v34;
              goto LABEL_58;
            }
            if (*((_DWORD *)&v39[v34 + 1] + v42) == v35
              && v33 == *v43
              && (!v33 || !memcmp(v32, (char *)v43 + *((unsigned int *)v1039 + 273), v33)))
            {
              break;
            }
          }
          int v41 = v40 + v42;
          ++v40;
        }
        uint64_t v44 = (int)v42;
        if (v42 == -1) {
          uint64_t v44 = v34;
        }
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v39 = v6[134];
      }
LABEL_58:
      uint64_t v45 = &v39[v44];
      uint64_t v6 = (void **)v1039;
      if (v31 < 0)
      {
        operator delete(__p);
        uint64_t v39 = (void *)*((void *)v1039 + 134);
        LODWORD(v34) = *((_DWORD *)v1039 + 270);
      }
      if (v45 != &v39[v34])
      {
        int v46 = *(_DWORD *)(*v45 + 8);
        switch(v46)
        {
          case '&':
          case '\'':
            uint64_t v48 = (char *)*((void *)v1039 + 53);
            unint64_t v47 = *((void *)v1039 + 54);
            if ((unint64_t)v48 < v47)
            {
              *(void *)uint64_t v48 = *((void *)v1039 + 51);
              uint64_t v49 = v48 + 8;
              goto LABEL_263;
            }
            unint64_t v98 = (unsigned char *)*((void *)v1039 + 52);
            uint64_t v99 = (v48 - v98) >> 3;
            unint64_t v100 = v99 + 1;
            if (!((unint64_t)(v99 + 1) >> 61))
            {
              uint64_t v101 = v47 - (void)v98;
              if (v101 >> 2 > v100) {
                unint64_t v100 = v101 >> 2;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                if (v102 >> 61) {
LABEL_1612:
                }
                  sub_1CB833614();
                long long v103 = (char *)operator new(8 * v102);
              }
              else
              {
                long long v103 = 0;
              }
              int v146 = &v103[8 * v99];
              uint64_t v147 = &v103[8 * v102];
              uint64_t v6 = (void **)v1039;
              *(void *)int v146 = *((void *)v1039 + 51);
              uint64_t v49 = v146 + 8;
              if (v48 != v98)
              {
                do
                {
                  int v148 = *((_DWORD *)v48 - 2);
                  v48 -= 8;
                  __int16 v149 = *((_WORD *)v48 + 2);
                  *((_DWORD *)v146 - 2) = v148;
                  v146 -= 8;
                  *((_WORD *)v146 + 2) = v149;
                }
                while (v48 != v98);
                uint64_t v48 = (char *)*((void *)v1039 + 52);
              }
              *((void *)v1039 + 52) = v146;
              *((void *)v1039 + 53) = v49;
              *((void *)v1039 + 54) = v147;
              if (v48) {
                operator delete(v48);
              }
LABEL_263:
              v6[53] = v49;
              *((_DWORD *)v6 + 102) = 1;
              if (!*((unsigned char *)v6 + 413))
              {
                *(void *)__c = 0;
                if ((((uint64_t (*)(void **, unsigned char *))(*v6)[32])(v6, __c) & 1) == 0)
                {
                  *(void *)__dst = "unexpected token in '.if' directive";
                  *(_WORD *)&__dst[32] = 259;
                  if (!llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)v6, (const llvm::Twine *)__dst))
                  {
                    LOBYTE(v9) = 0;
                    BOOL v143 = *(void *)__c == 0;
                    BOOL v144 = *(void *)__c != 0;
                    BOOL v145 = v46 == 38;
LABEL_407:
                    if (v145) {
                      BOOL v143 = v144;
                    }
                    *((unsigned char *)v6 + 412) = v143;
                    char v240 = !v143;
LABEL_410:
                    *((unsigned char *)v6 + 413) = v240;
                    goto LABEL_212;
                  }
                }
LABEL_265:
                LOBYTE(v9) = 1;
                goto LABEL_212;
              }
              goto LABEL_66;
            }
            break;
          case '(':
            unint64_t v118 = v1039;
            char v119 = 1;
            goto LABEL_203;
          case ')':
            unint64_t v118 = v1039;
            char v119 = 0;
LABEL_203:
            char v70 = sub_1CD3A7BE8(v118, v119);
            goto LABEL_211;
          case '*':
            uint64_t v113 = (uint64_t)v1039;
            char v114 = 1;
            goto LABEL_198;
          case '+':
            uint64_t v113 = (uint64_t)v1039;
            char v114 = 0;
LABEL_198:
            char v70 = sub_1CD3A7DF4(v113, v114);
            goto LABEL_211;
          case ',':
            uint64_t v107 = (uint64_t)v1039;
            int v108 = 0;
            goto LABEL_195;
          case '-':
            uint64_t v107 = (uint64_t)v1039;
            int v108 = 0;
            goto LABEL_189;
          case '.':
            uint64_t v107 = (uint64_t)v1039;
            int v108 = 1;
LABEL_195:
            int v112 = 0;
            goto LABEL_196;
          case '/':
            uint64_t v107 = (uint64_t)v1039;
            int v108 = 1;
LABEL_189:
            int v112 = 1;
LABEL_196:
            char v70 = sub_1CD3A82FC(v107, v108, v112);
            goto LABEL_211;
          case '0':
          case '1':
            if ((*((_DWORD *)v1039 + 102) - 1) >= 2)
            {
              uint64_t v150 = v1053;
              long long v151 = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
              goto LABEL_268;
            }
            *((_DWORD *)v1039 + 102) = 2;
            uint64_t v83 = *((void *)v1039 + 53);
            if (*((void *)v1039 + 52) != v83 && *(unsigned char *)(v83 - 3) || *((unsigned char *)v1039 + 412))
            {
              *((unsigned char *)v1039 + 413) = 1;
              goto LABEL_66;
            }
            *(void *)__c = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, __c) & 1) == 0)
            {
              *(void *)__dst = "unexpected token in '.elseif' directive";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst))
              {
                LOBYTE(v9) = 0;
                BOOL v143 = *(void *)__c == 0;
                BOOL v144 = *(void *)__c != 0;
                BOOL v145 = v46 == 48;
                goto LABEL_407;
              }
            }
            goto LABEL_265;
          case '2':
            unsigned int v104 = v1053;
            unint64_t v105 = v1039;
            int v106 = 1;
            goto LABEL_191;
          case '3':
            unsigned int v104 = v1053;
            unint64_t v105 = v1039;
            int v106 = 0;
LABEL_191:
            char v70 = sub_1CD3A8624(v105, (uint64_t)v104, v106);
            goto LABEL_211;
          case '4':
            long long v109 = v1053;
            uint64_t v110 = (uint64_t)v1039;
            char v111 = 1;
            goto LABEL_205;
          case '5':
            long long v109 = v1053;
            uint64_t v110 = (uint64_t)v1039;
            char v111 = 0;
LABEL_205:
            char v70 = sub_1CD3A87E8(v110, (uint64_t)v109, v111);
            goto LABEL_211;
          case '6':
            unint64_t v115 = v1053;
            uint64_t v116 = (uint64_t)v1039;
            int v117 = 0;
            goto LABEL_209;
          case '7':
            unint64_t v115 = v1053;
            uint64_t v116 = (uint64_t)v1039;
            int v117 = 0;
            goto LABEL_207;
          case '8':
            unint64_t v115 = v1053;
            uint64_t v116 = (uint64_t)v1039;
            int v117 = 1;
LABEL_209:
            int v120 = 0;
            goto LABEL_210;
          case '9':
            unint64_t v115 = v1053;
            uint64_t v116 = (uint64_t)v1039;
            int v117 = 1;
LABEL_207:
            int v120 = 1;
LABEL_210:
            char v70 = sub_1CD3A8C5C(v116, (uint64_t)v115, v117, v120);
            goto LABEL_211;
          case ':':
            uint64_t v238 = v1053;
            *(void *)__dst = "unexpected token in 'else' directive";
            *(_WORD *)&__dst[32] = 259;
            if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
              goto LABEL_265;
            }
            if ((*((_DWORD *)v1039 + 102) - 1) >= 2)
            {
              v343 = "Encountered an else that doesn't follow an if or an elseif";
              goto LABEL_728;
            }
            *((_DWORD *)v1039 + 102) = 3;
            uint64_t v239 = *((void *)v1039 + 53);
            if (*((void *)v1039 + 52) != v239 && *(unsigned char *)(v239 - 3) || *((unsigned char *)v1039 + 412))
            {
              LOBYTE(v9) = 0;
              char v240 = 1;
              goto LABEL_410;
            }
            LOBYTE(v9) = 0;
            *((unsigned char *)v1039 + 413) = 0;
            goto LABEL_212;
          case ';':
            uint64_t v238 = v1053;
            *(void *)__dst = "unexpected token in '.endif' directive";
            *(_WORD *)&__dst[32] = 259;
            if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
              goto LABEL_265;
            }
            if (*((_DWORD *)v1039 + 102))
            {
              uint64_t v241 = *((void *)v1039 + 53);
              if (*((void *)v1039 + 52) != v241)
              {
                LOBYTE(v9) = 0;
                int v243 = *(_DWORD *)(v241 - 8);
                uint64_t v242 = v241 - 8;
                *((_WORD *)v1039 + 206) = *(_WORD *)(v242 + 4);
                *((_DWORD *)v1039 + 102) = v243;
                *((void *)v1039 + 53) = v242;
                goto LABEL_212;
              }
            }
            v343 = "Encountered a .endif that doesn't follow an .if or .else";
LABEL_728:
            *(void *)__dst = v343;
            *(_WORD *)&__dst[32] = 259;
            uint64_t v152 = (uint64_t)v1039;
            goto LABEL_729;
          default:
            goto LABEL_65;
        }
LABEL_1610:
        abort();
      }
      int v46 = 0;
LABEL_65:
      if (*((unsigned char *)v1039 + 413))
      {
LABEL_66:
        ((void (*)(void **))(*v6)[28])(v6);
        goto LABEL_67;
      }
      if (**v7 == 10
        && (*(unsigned int (**)(void, long long *))(**((void **)v1039 + 1) + 136))(*((void *)v1039 + 1), &v1063))
      {
        if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039)) {
          goto LABEL_265;
        }
        (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
        uint64_t v50 = *((void *)&v1052 + 1);
        if (*((void *)&v1052 + 1) != 1 || *(unsigned char *)v1052 != 46)
        {
          if (v999 == -1)
          {
            uint64_t v51 = (uint64_t)v1015;
            if (v1006 && *((unsigned char *)v1039 + 1061))
            {
              uint64_t v259 = v1052;
              uint64_t v260 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 32))(v1039);
              uint64_t v261 = v259;
              __int16 v7 = __n;
              *(void *)__dst = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, char *, uint64_t))(*(void *)v1006 + 24))(v1006, v261, v50, v260, v1053, 1);
              *(void *)&__dst[8] = v262;
              uint64_t v263 = *(void *)(v1002 + 120);
              LODWORD(__str[0].__r_.__value_.__l.__data_) = 7;
              *(void *)__c = *((void *)&v1052 + 1);
              sub_1CD8F3874(v263, (int *)__str, (uint64_t *)&v1053, (uint64_t *)__c, (long long *)__dst);
              long long v1052 = *(_OWORD *)__dst;
            }
            unint64_t v52 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
            *(_WORD *)&__dst[32] = 261;
            *(_OWORD *)__dst = v1052;
            uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v52, (unsigned __int8 ***)__dst);
          }
          else
          {
            uint64_t Symbol = llvm::MCContext::createDirectionalLocalSymbol(*((llvm::MCContext **)v1039 + 27), v999);
            uint64_t v51 = (uint64_t)v1015;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 37)
          {
            sub_1CD3A8F78((std::string *)__c, (uint64_t)v1039);
            sub_1CD8F38F8(v51);
            unsigned int v255 = *(unsigned char **)__c;
            if (__c[23] >= 0) {
              unsigned int v255 = __c;
            }
            unint64_t v256 = __c[23] & 0x7F;
            if (__c[23] < 0) {
              unint64_t v256 = *(void *)&__c[8];
            }
            *(_DWORD *)__dst = 9;
            *(void *)&__dst[8] = v255;
            *(_OWORD *)&__dst[16] = v256;
            *(_DWORD *)&__dst[32] = 64;
            *((unsigned char *)v1039 + 147) = 0;
            sub_1CD45128C((uint64_t)v7, *((void *)v1039 + 6), (unint64_t)__dst);
            if (*(_DWORD *)&__dst[32] >= 0x41u && *(void *)&__dst[24]) {
              MEMORY[0x1D25D9CB0](*(void *)&__dst[24], 0x1000C8000313F17);
            }
            if ((__c[23] & 0x80000000) != 0) {
              operator delete(*(void **)__c);
            }
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 9) {
            (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
          }
          (*(void (**)(void, uint64_t))(**((void **)v1039 + 1) + 160))(*((void *)v1039 + 1), Symbol);
          if (!*(unsigned char *)(*((void *)v1039 + 1) + 64)) {
            (*(void (**)(void, uint64_t, char *))(**((void **)v1039 + 28) + 192))(*((void *)v1039 + 28), Symbol, v1053);
          }
          if (sub_1CD3A9100(v1039))
          {
            uint64_t v257 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
            unsigned int v258 = (uint64_t *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 32))(v1039);
            llvm::MCGenDwarfLabelEntry::Make(Symbol, v257, v258, (unint64_t *)&v1053);
          }
          (*(void (**)(void, uint64_t))(**((void **)v1039 + 1) + 168))(*((void *)v1039 + 1), Symbol);
          goto LABEL_67;
        }
        uint64_t v150 = v1053;
        long long v151 = "invalid use of pseudo-symbol '.' as a label";
        goto LABEL_268;
      }
      uint64_t v54 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
      llvm::StringRef::lower((llvm::StringRef *)&v1052, __dst);
      int v55 = __dst[23];
      if (__dst[23] >= 0) {
        unint64_t v56 = __dst;
      }
      else {
        unint64_t v56 = *(unsigned __int8 **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v57 = __dst[23] & 0x7F;
      }
      else {
        size_t v57 = *(void *)&__dst[8];
      }
      uint64_t v58 = *(unsigned int *)(v54 + 1976);
      int __pa = v46;
      v1000 = *(void **)__dst;
      if (!v58)
      {
        uint64_t v69 = 0;
        goto LABEL_109;
      }
      int v1007 = __dst[23];
      int v59 = 0;
      if (v57)
      {
        size_t v60 = v57;
        int v61 = v56;
        do
        {
          int v62 = *v61++;
          int v59 = 33 * v59 + v62;
          --v60;
        }
        while (v60);
      }
      uint64_t v63 = *(void *)(v54 + 1968);
      uint64_t v64 = *(unsigned int *)(v54 + 1988);
      int v65 = 1;
      int v66 = v59;
      while (1)
      {
        uint64_t v67 = v66 & (v58 - 1);
        uint64_t v68 = *(void **)(v63 + 8 * v67);
        if (v68 == (void *)-8) {
          goto LABEL_103;
        }
        if (!v68)
        {
          uint64_t v69 = 0;
          uint64_t v6 = (void **)v1039;
          int v46 = __pa;
LABEL_108:
          int v55 = v1007;
          goto LABEL_109;
        }
        if (*(_DWORD *)(v63 + 8 * v58 + 8 + 4 * v67) == v59
          && v57 == *v68
          && (!v57 || !memcmp(v56, (char *)v68 + v64, v57)))
        {
          break;
        }
LABEL_103:
        int v66 = v65 + v67;
        ++v65;
      }
      uint64_t v69 = 0;
      uint64_t v6 = (void **)v1039;
      int v46 = __pa;
      if (v67 == -1) {
        goto LABEL_108;
      }
      int v55 = v1007;
      if ((int)v67 != v58) {
        uint64_t v69 = (uint64_t *)(*(void *)(v63 + 8 * (int)v67) + 8);
      }
LABEL_109:
      if (v55 < 0) {
        operator delete(v1000);
      }
      if (v69)
      {
        char v70 = sub_1CD3A963C((uint64_t)v6, v69, (uint64_t)v1053, 9);
LABEL_211:
        LOBYTE(v9) = v70;
        goto LABEL_212;
      }
      if (!v46)
      {
        llvm::StringRef::lower((llvm::StringRef *)&v1052, __dst);
        int v126 = __dst[23];
        __pb = *(void **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v127 = __dst;
        }
        else {
          unint64_t v127 = *(unsigned __int8 **)__dst;
        }
        if (__dst[23] >= 0) {
          size_t v128 = __dst[23] & 0x7F;
        }
        else {
          size_t v128 = *(void *)&__dst[8];
        }
        uint64_t v129 = *((unsigned int *)v6 + 156);
        if (v129)
        {
          int v130 = 0;
          if (v128)
          {
            size_t v131 = v128;
            v132 = v127;
            do
            {
              int v133 = *v132++;
              int v130 = 33 * v130 + v133;
              --v131;
            }
            while (v131);
          }
          uint64_t v134 = v6[77];
          int v135 = 1;
          int v136 = v130;
          while (1)
          {
            uint64_t v137 = v136 & (v129 - 1);
            uint64_t v138 = (void *)v134[v137];
            if (v138 != (void *)-8)
            {
              if (!v138)
              {
                uint64_t v139 = v129;
                goto LABEL_243;
              }
              if (*((_DWORD *)&v134[v129 + 1] + v137) == v130
                && v128 == *v138
                && (!v128 || !memcmp(v127, (char *)v138 + *((unsigned int *)v1039 + 159), v128)))
              {
                break;
              }
            }
            int v136 = v135 + v137;
            ++v135;
          }
          uint64_t v139 = (int)v137;
          if (v137 == -1) {
            uint64_t v139 = v129;
          }
        }
        else
        {
          uint64_t v139 = 0;
          uint64_t v134 = v6[77];
        }
LABEL_243:
        v140 = &v134[v139];
        size_t v141 = v1039;
        if (v126 < 0)
        {
          operator delete(__pb);
          uint64_t v134 = (void *)*((void *)v1039 + 77);
          LODWORD(v129) = *((_DWORD *)v1039 + 156);
        }
        if (v140 != &v134[v129])
        {
          if (*((_DWORD *)v1039 + 128))
          {
            *(_OWORD *)__nb = v1052;
            if (!sub_1CD3B3FDC((uint64_t)v1039, (uint64_t)"", 0, *v140 + 8)) {
              goto LABEL_67;
            }
            *(void *)__c = " in '";
            *(_OWORD *)&__c[16] = *(_OWORD *)__nb;
            LOWORD(v1076) = 1283;
            *(void *)__dst = __c;
            *(void *)&__dst[16] = "' directive";
            *(_WORD *)&__dst[32] = 770;
            uint64_t v142 = v1039;
LABEL_249:
            char v70 = llvm::MCAsmParser::addErrorSuffix(v142, (const llvm::Twine *)__dst);
            goto LABEL_211;
          }
          if (sub_1CD3B3EA4(v1039, (uint64_t *)(*v140 + 8), 0)) {
            goto LABEL_265;
          }
          goto LABEL_67;
        }
        uint64_t v203 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
        uint64_t v205 = *(void *)(v203 + 8);
        uint64_t v204 = *(void *)(v203 + 16);
        if (*(_DWORD *)(v203 + 32) > 0x40u) {
          operator new[]();
        }
        v1054[0] = *(void *)(v203 + 8);
        v1054[1] = v204;
        sub_1CD3ABC8C((uint64_t)&v1045, (uint64_t)v1039, 1);
        uint64_t v206 = *((void *)v1039 + 1);
        uint64_t v207 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v206 + 176))(v206, v207);
        if (v1054[1] == 4
          && !llvm::StringRef::compare_insensitive((unsigned __int8 **)v1054, "ends", 4uLL)
          && *((_DWORD *)v1039 + 128) == 1)
        {
          goto LABEL_538;
        }
        llvm::StringRef::lower((llvm::StringRef *)v1054, __dst);
        int v208 = __dst[23];
        if (__dst[23] >= 0) {
          uint64_t v209 = __dst;
        }
        else {
          uint64_t v209 = *(unsigned __int8 **)__dst;
        }
        if (__dst[23] >= 0) {
          size_t v210 = __dst[23] & 0x7F;
        }
        else {
          size_t v210 = *(void *)&__dst[8];
        }
        uint64_t v211 = *((unsigned int *)v1039 + 112);
        uint64_t v992 = v205;
        __s1 = *(void **)__dst;
        if (!v211) {
          goto LABEL_446;
        }
        int v1010 = __dst[23];
        int v212 = 0;
        if (v210)
        {
          size_t v213 = v210;
          uint64_t v214 = v209;
          do
          {
            int v215 = *v214++;
            int v212 = 33 * v212 + v215;
            --v213;
          }
          while (v213);
        }
        uint64_t v216 = *((void *)v1039 + 55);
        int v217 = 1;
        int v218 = v212;
        while (1)
        {
          uint64_t v219 = v218 & (v211 - 1);
          int v220 = *(void **)(v216 + 8 * v219);
          if (v220 != (void *)-8)
          {
            if (!v220) {
              goto LABEL_452;
            }
            if (*(_DWORD *)(v216 + 8 * v211 + 8 + 4 * v219) == v212
              && v210 == *v220
              && (!v210 || !memcmp(v209, (char *)v220 + *((unsigned int *)v1039 + 115), v210)))
            {
              break;
            }
          }
          int v218 = v217 + v219;
          ++v217;
        }
        if (v219 == -1)
        {
          int v220 = 0;
LABEL_452:
          uint64_t v265 = 0;
          size_t v141 = v1039;
          int v208 = v1010;
        }
        else
        {
          size_t v141 = v1039;
          int v208 = v1010;
          if ((int)v219 == v211)
          {
LABEL_446:
            int v220 = 0;
            uint64_t v265 = 0;
            goto LABEL_453;
          }
          uint64_t v313 = *(void *)(v216 + 8 * (int)v219);
          int v220 = *(void **)(v313 + 8);
          uint64_t v265 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v313 + 16);
        }
LABEL_453:
        if (v208 < 0) {
          operator delete(__s1);
        }
        if (v220)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
          *((unsigned char *)v141 + 147) = 0;
          sub_1CD45128C((uint64_t)__n, *((void *)v141 + 6), (unint64_t)&v1063);
          char v312 = v265(v220, v1054[0], v1054[1], v992);
          goto LABEL_567;
        }
        llvm::StringRef::lower((llvm::StringRef *)v1054, __dst);
        int v266 = __dst[23];
        if (__dst[23] >= 0) {
          unsigned int v267 = __dst;
        }
        else {
          unsigned int v267 = *(unsigned __int8 **)__dst;
        }
        if (__dst[23] >= 0) {
          size_t v268 = __dst[23] & 0x7F;
        }
        else {
          size_t v268 = *(void *)&__dst[8];
        }
        uint64_t v269 = *((unsigned int *)v141 + 270);
        v1011 = *(void **)__dst;
        if (v269)
        {
          int v270 = 0;
          if (v268)
          {
            size_t v271 = v268;
            unsigned int v272 = v267;
            do
            {
              int v273 = *v272++;
              int v270 = 33 * v270 + v273;
              --v271;
            }
            while (v271);
          }
          uint64_t v274 = *((void *)v141 + 134);
          int v275 = 1;
          int v276 = v270;
          while (1)
          {
            uint64_t v277 = v276 & (v269 - 1);
            unsigned int v278 = *(void **)(v274 + 8 * v277);
            if (v278 != (void *)-8)
            {
              if (!v278)
              {
                uint64_t v279 = v269;
                goto LABEL_475;
              }
              if (*(_DWORD *)(v274 + 8 * v269 + 8 + 4 * v277) == v270
                && v268 == *v278
                && (!v268 || !memcmp(v267, (char *)v278 + *((unsigned int *)v1039 + 273), v268)))
              {
                break;
              }
            }
            int v276 = v275 + v277;
            ++v275;
          }
          uint64_t v279 = (int)v277;
          if (v277 == -1) {
            uint64_t v279 = v269;
          }
        }
        else
        {
          uint64_t v279 = 0;
          uint64_t v274 = *((void *)v141 + 134);
        }
LABEL_475:
        uint64_t v280 = v274 + 8 * v279;
        size_t v141 = v1039;
        if (v266 < 0)
        {
          operator delete(v1011);
          uint64_t v274 = *((void *)v1039 + 134);
          LODWORD(v269) = *((_DWORD *)v1039 + 270);
        }
        if (v280 == v274 + 8 * v269) {
          goto LABEL_613;
        }
        int v281 = *(_DWORD *)(*(void *)v280 + 8);
        if (v281 <= 97)
        {
          switch(v281)
          {
            case 2:
            case 3:
            case 4:
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              uint64_t __s1a = v1054[0];
              uint64_t v1004 = v1054[1];
              v1012 = v1053;
              *(_OWORD *)&v1055.__r_.__value_.__l.__data_ = v1052;
              llvm::StringRef::lower((llvm::StringRef *)&v1055, __dst);
              if (__dst[23] >= 0) {
                unsigned int v282 = __dst;
              }
              else {
                unsigned int v282 = *(unsigned __int8 **)__dst;
              }
              if (__dst[23] >= 0) {
                size_t v9 = __dst[23] & 0x7F;
              }
              else {
                size_t v9 = *(void *)&__dst[8];
              }
              uint64_t v283 = *((unsigned int *)v1039 + 286);
              v1017 = *(void **)__dst;
              int __nc = __dst[23];
              if (v283)
              {
                int v284 = 0;
                if (v9)
                {
                  size_t v285 = v9;
                  BOOL v286 = v282;
                  do
                  {
                    int v287 = *v286++;
                    int v284 = 33 * v284 + v287;
                    --v285;
                  }
                  while (v285);
                }
                uint64_t v288 = *((void *)v1039 + 142);
                int v289 = 1;
                int v290 = v284;
                while (1)
                {
                  uint64_t v291 = v290 & (v283 - 1);
                  int v292 = *(void **)(v288 + 8 * v291);
                  if (v292 != (void *)-8)
                  {
                    if (!v292)
                    {
                      uint64_t v293 = v283;
                      goto LABEL_502;
                    }
                    if (*(_DWORD *)(v288 + 8 * v283 + 8 + 4 * v291) == v284
                      && v9 == *v292
                      && (!v9 || !memcmp(v282, (char *)v292 + *((unsigned int *)v1039 + 289), v9)))
                    {
                      break;
                    }
                  }
                  int v290 = v289 + v291;
                  ++v289;
                }
                uint64_t v293 = (int)v291;
                if (v291 == -1) {
                  uint64_t v293 = v283;
                }
              }
              else
              {
                uint64_t v293 = 0;
                uint64_t v288 = *((void *)v1039 + 142);
              }
LABEL_502:
              uint64_t v294 = v288 + 8 * v293;
              if (__nc < 0)
              {
                operator delete(v1017);
                uint64_t v288 = *((void *)v1039 + 142);
                LODWORD(v283) = *((_DWORD *)v1039 + 286);
              }
              if (v294 != v288 + 8 * v283)
              {
                *(void *)__dst = "cannot redefine a built-in symbol";
                *(_WORD *)&__dst[32] = 259;
                uint64_t v342 = (uint64_t)v1039;
                uint64_t v341 = (uint64_t)v1012;
                goto LABEL_1211;
              }
              llvm::StringRef::lower((llvm::StringRef *)&v1055, __dst);
              if (__dst[23] >= 0) {
                unint64_t v295 = __dst;
              }
              else {
                unint64_t v295 = *(unsigned __int8 **)__dst;
              }
              if (__dst[23] >= 0) {
                size_t v296 = __dst[23] & 0x7F;
              }
              else {
                size_t v296 = *(void *)&__dst[8];
              }
              int v297 = (std::string *)sub_1CD3B6A5C((llvm::MCAsmParser *)((char *)v1039 + 472), v295, v296);
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
              if (!v297->__r_.__value_.__l.__size_) {
                *(_OWORD *)&v297->__r_.__value_.__l.__data_ = *(_OWORD *)&v1055.__r_.__value_.__l.__data_;
              }
              int v298 = v1039;
              v299 = (unsigned char *)*((void *)v1039 + 17);
              if ((v281 - 3) > 1) {
                goto LABEL_523;
              }
              memset(__str, 0, 24);
              memset(v1060, 0, 24);
              int v300 = sub_1CD3AE788(v1039, (uint64_t)v1060);
              if (v300) {
                goto LABEL_517;
              }
              if (v1060[23] >= 0) {
                v412 = v1060;
              }
              else {
                v412 = *(const std::string::value_type **)v1060;
              }
              if (v1060[23] >= 0) {
                std::string::size_type v413 = v1060[23] & 0x7F;
              }
              else {
                std::string::size_type v413 = *(void *)&v1060[8];
              }
              std::string::append(__str, v412, v413);
              v1057[0] = v1039;
              v1057[1] = v1060;
              *(void *)&long long v1058 = __str;
              if (llvm::MCAsmParser::parseOptionalToken(v1039, 25)
                && llvm::MCAsmParser::parseMany(v1039, sub_1CD3B6C6C, (uint64_t)v1057, 1))
              {
                *(void *)__c = " in '";
                *(void *)&__c[16] = __s1a;
                *(void *)&__c[24] = v1004;
                LOWORD(v1076) = 1283;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                char v620 = llvm::MCAsmParser::addErrorSuffix(v1039, (const llvm::Twine *)__dst);
                goto LABEL_1223;
              }
              if (!v297->__r_.__value_.__s.__data_[20]) {
                goto LABEL_1175;
              }
              char v414 = HIBYTE(v297[1].__r_.__value_.__r.__words[2]);
              uint64_t v415 = v414 & 0x7F;
              if (v414 >= 0) {
                std::string::size_type v416 = v414 & 0x7F;
              }
              else {
                std::string::size_type v416 = v297[1].__r_.__value_.__l.__size_;
              }
              std::string::size_type v417 = *((unsigned char *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
              if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v417 = __str[0].__r_.__value_.__l.__size_;
              }
              if (v416 != v417) {
                goto LABEL_1175;
              }
              v418 = (const void **)&v297[1].__r_.__value_.__l.__data_;
              if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v419 = __str;
              }
              else {
                v419 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&v297[1].__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (!memcmp(*v418, v419, v297[1].__r_.__value_.__l.__size_)) {
                  goto LABEL_1180;
                }
              }
              else
              {
                if ((v414 & 0x7F) == 0) {
                  goto LABEL_1180;
                }
                while (*(unsigned __int8 *)v418 == v419->__r_.__value_.__s.__data_[0])
                {
                  v418 = (const void **)((char *)v418 + 1);
                  v419 = (std::string *)((char *)v419 + 1);
                  if (!--v415) {
                    goto LABEL_1180;
                  }
                }
              }
LABEL_1175:
              int v618 = v297->__r_.__value_.__r.__words[2];
              if (v618 == 1)
              {
                LOWORD(v1076) = 1283;
                *(void *)__c = "redefining '";
                *(_OWORD *)&__c[16] = *(_OWORD *)&v1055.__r_.__value_.__l.__data_;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "', already defined on the command line";
                *(_WORD *)&__dst[32] = 770;
                if ((*(uint64_t (**)(llvm::MCAsmParser *, char *, unsigned char *, void, void))(*(void *)v1039 + 168))(v1039, v1012, __dst, 0, 0))
                {
                  LOBYTE(v9) = 1;
LABEL_517:
                  if ((v1060[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v1060);
                  }
                  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str[0].__r_.__value_.__l.__data_);
                  }
                  if (!v300) {
                    goto LABEL_692;
                  }
                  int v298 = v1039;
                  if (v281 == 4)
                  {
                    *(void *)__c = "expected <text> in '";
                    *(void *)&__c[16] = __s1a;
                    *(void *)&__c[24] = v1004;
                    LOWORD(v1076) = 1283;
                    *(void *)__dst = __c;
                    *(void *)&__dst[16] = "' directive";
                    *(_WORD *)&__dst[32] = 770;
                    char v312 = llvm::MCAsmParser::TokError((uint64_t)v1039, (uint64_t)__dst, 0, 0);
                    goto LABEL_567;
                  }
LABEL_523:
                  __str[0].__r_.__value_.__r.__words[0] = 0;
                  *(void *)v1060 = 0;
                  if (!(*(unsigned int (**)(llvm::MCAsmParser *, std::string *, unsigned char *))(*(void *)v298 + 232))(v298, __str, v1060))
                  {
                    int v301 = *(unsigned char **)v1060;
                    uint64_t v302 = __str[0].__r_.__value_.__r.__words[0];
                    uint64_t v303 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v298 + 56))(v298);
                    unint64_t v304 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v303 + 72))(v303);
                    memset(__dst, 0, 28);
                    if (*(unsigned char *)v302 == 1)
                    {
                      uint64_t v305 = *(void *)(v302 + 16);
LABEL_528:
                      long long v306 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                      *(_WORD *)&__dst[32] = 261;
                      std::string::size_type v307 = v297->__r_.__value_.__l.__size_;
                      *(void *)__dst = v297->__r_.__value_.__r.__words[0];
                      *(void *)&__dst[8] = v307;
                      uint64_t v308 = llvm::MCContext::getOrCreateSymbol(v306, (unsigned __int8 ***)__dst);
                      uint64_t v309 = v308;
                      if ((*(_DWORD *)(v308 + 8) & 0x1C00) == 0x800)
                      {
                        uint64_t v310 = *(void *)(v308 + 24);
                        if (v310)
                        {
                          if (!v297->__r_.__value_.__s.__data_[20]
                            && *(unsigned char *)v310 == 1
                            && *(void *)(v310 + 16) == v305)
                          {
                            goto LABEL_719;
                          }
                        }
                      }
                      int v311 = v297->__r_.__value_.__r.__words[2];
                      if (v311 != 1)
                      {
                        if (!v311) {
                          goto LABEL_610;
                        }
LABEL_719:
                        v297->__r_.__value_.__s.__data_[20] = 0;
                        if (SHIBYTE(v297[1].__r_.__value_.__r.__words[2]) < 0)
                        {
                          *v297[1].__r_.__value_.__l.__data_ = 0;
                          v297[1].__r_.__value_.__l.__size_ = 0;
                        }
                        else
                        {
                          v297[1].__r_.__value_.__s.__data_[0] = 0;
                          *((unsigned char *)&v297[1].__r_.__value_.__s + 23) = 0;
                        }
                        LOBYTE(v9) = 0;
                        LODWORD(v297->__r_.__value_.__r.__words[2]) = 2 * (v281 == 2);
                        unsigned int v393 = *(_DWORD *)(v309 + 8) & 0xFFFFE3ED | (2 * (v281 == 2));
                        *(void *)(v309 + 24) = __str[0].__r_.__value_.__r.__words[0];
                        *(void *)v309 &= 7uLL;
                        *(_DWORD *)(v309 + 8) = v393 | 0x800;
                        goto LABEL_692;
                      }
                      LOWORD(v1076) = 1283;
                      *(void *)__c = "redefining '";
                      *(_OWORD *)&__c[16] = *(_OWORD *)&v1055.__r_.__value_.__l.__data_;
                      *(void *)__dst = __c;
                      *(void *)&__dst[16] = "', already defined on the command line";
                      *(_WORD *)&__dst[32] = 770;
                      if (((*(uint64_t (**)(llvm::MCAsmParser *, char *, unsigned char *, void, void))(*(void *)v1039 + 168))(v1039, v1012, __dst, 0, 0) & 1) == 0)goto LABEL_719; {
LABEL_691:
                      }
                      LOBYTE(v9) = 1;
                      goto LABEL_692;
                    }
                    if ((llvm::MCExpr::evaluateAsRelocatableImpl(v302, (uint64_t)__dst, v304, 0, 0, 0, 0) & 1) != 0
                      && *(_OWORD *)__dst == 0)
                    {
                      uint64_t v305 = *(void *)&__dst[16];
                      goto LABEL_528;
                    }
                    if (v281 == 2)
                    {
                      *(void *)__dst = "expected absolute expression; not all symbols have known values";
                      *(_WORD *)&__dst[32] = 259;
                      uint64_t v469 = *(void *)v1060;
                      uint64_t v342 = (uint64_t)v1039;
                      uint64_t v341 = (uint64_t)v299;
                      uint64_t v470 = (uint64_t)v299;
LABEL_1212:
                      char v312 = llvm::MCAsmParser::Error(v342, v341, (uint64_t)__dst, v470, v469);
                      goto LABEL_567;
                    }
                    unint64_t v336 = v301 - v299;
                    if (!v297->__r_.__value_.__s.__data_[20]) {
                      goto LABEL_608;
                    }
                    char v337 = HIBYTE(v297[1].__r_.__value_.__r.__words[2]);
                    if (v337 >= 0) {
                      data = v297 + 1;
                    }
                    else {
                      data = (std::string *)v297[1].__r_.__value_.__l.__data_;
                    }
                    std::string::size_type v339 = v297[1].__r_.__value_.__l.__size_;
                    if (v337 >= 0) {
                      std::string::size_type v339 = v337 & 0x7F;
                    }
                    if (v339 != v336 || v299 != v301 && memcmp(data, v299, v301 - v299))
                    {
LABEL_608:
                      int v340 = v297->__r_.__value_.__r.__words[2];
                      if (v340 == 1)
                      {
                        LOWORD(v1076) = 1283;
                        *(void *)__c = "redefining '";
                        *(_OWORD *)&__c[16] = *(_OWORD *)&v1055.__r_.__value_.__l.__data_;
                        *(void *)__dst = __c;
                        *(void *)&__dst[16] = "', already defined on the command line";
                        *(_WORD *)&__dst[32] = 770;
                        if ((*(uint64_t (**)(llvm::MCAsmParser *, char *, unsigned char *, void, void))(*(void *)v1039 + 168))(v1039, v1012, __dst, 0, 0))goto LABEL_691; {
                      }
                        }
                      else if (!v340)
                      {
LABEL_610:
                        uint64_t v341 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                                     + 8)
                                         + 8);
                        *(void *)__dst = "invalid variable redefinition";
                        *(_WORD *)&__dst[32] = 259;
                        uint64_t v342 = (uint64_t)v1039;
LABEL_1211:
                        uint64_t v470 = 0;
                        uint64_t v469 = 0;
                        goto LABEL_1212;
                      }
                    }
                    v297->__r_.__value_.__s.__data_[20] = 1;
                    if (!v299)
                    {
                      memset(__dst, 0, 24);
LABEL_746:
                      v400 = (void **)&v297[1].__r_.__value_.__l.__data_;
                      if (SHIBYTE(v297[1].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(*v400);
                      }
                      LOBYTE(v9) = 0;
                      *(_OWORD *)v400 = *(_OWORD *)__dst;
                      v297[1].__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
                      LODWORD(v297->__r_.__value_.__r.__words[2]) = 2;
                      goto LABEL_692;
                    }
                    if (v336 >= 0x7FFFFFFFFFFFFFF8) {
                      goto LABEL_1610;
                    }
                    if (v336 >= 0x17)
                    {
                      uint64_t v398 = (v336 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v336 | 7) != 0x17) {
                        uint64_t v398 = v336 | 7;
                      }
                      uint64_t v399 = v398 + 1;
                      v391 = operator new(v398 + 1);
                      *(void *)&__dst[16] = v399 | 0x8000000000000000;
                      *(void *)__dst = v391;
                      *(void *)&__dst[8] = v301 - v299;
                    }
                    else
                    {
                      __dst[23] = (_BYTE)v301 - (_BYTE)v299;
                      v391 = __dst;
                      if (v299 == v301) {
                        goto LABEL_745;
                      }
                    }
                    memmove(v391, v299, v301 - v299);
LABEL_745:
                    v391[v336] = 0;
                    goto LABEL_746;
                  }
                  *(void *)__c = " in '";
                  *(void *)&__c[16] = __s1a;
                  *(void *)&__c[24] = v1004;
                  LOWORD(v1076) = 1283;
                  *(void *)__dst = __c;
                  *(void *)&__dst[16] = "' directive";
                  *(_WORD *)&__dst[32] = 770;
                  v392 = v298;
LABEL_765:
                  char v312 = llvm::MCAsmParser::addErrorSuffix(v392, (const llvm::Twine *)__dst);
                  goto LABEL_567;
                }
              }
              else if (!v618)
              {
                uint64_t v619 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                             + 8)
                                 + 8);
                *(void *)__dst = "invalid variable redefinition";
                *(_WORD *)&__dst[32] = 259;
                char v620 = llvm::MCAsmParser::Error((uint64_t)v1039, v619, (uint64_t)__dst, 0, 0);
LABEL_1223:
                LOBYTE(v9) = v620;
                goto LABEL_517;
              }
LABEL_1180:
              v297->__r_.__value_.__s.__data_[20] = 1;
              std::string::operator=(v297 + 1, __str);
              LOBYTE(v9) = 0;
              LODWORD(v297->__r_.__value_.__r.__words[2]) = 2;
              goto LABEL_517;
            case 8:
              if (LODWORD(v1045.__r_.__value_.__l.__data_) != 2
                || (*(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__r.__words[1],
                    v1045.__r_.__value_.__r.__words[2] != 3))
              {
                size_t v141 = v1039;
LABEL_555:
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
                uint64_t v321 = v1054[0];
                uint64_t v322 = v1054[1];
                uint64_t v324 = *((void *)&v1052 + 1);
                v323 = (void *)v1052;
                v325 = v141;
                uint64_t v326 = 1;
                goto LABEL_566;
              }
              size_t v141 = v1039;
              if (llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL)) {
                goto LABEL_555;
              }
              break;
            case 9:
            case 17:
              goto LABEL_555;
            case 10:
              if (LODWORD(v1045.__r_.__value_.__l.__data_) != 2
                || (*(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__r.__words[1],
                    v1045.__r_.__value_.__r.__words[2] != 3))
              {
                size_t v141 = v1039;
LABEL_551:
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
                uint64_t v321 = v1054[0];
                uint64_t v322 = v1054[1];
                uint64_t v324 = *((void *)&v1052 + 1);
                v323 = (void *)v1052;
                v325 = v141;
                uint64_t v326 = 2;
                goto LABEL_566;
              }
              size_t v141 = v1039;
              if (llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL)) {
                goto LABEL_551;
              }
              break;
            case 11:
            case 21:
              goto LABEL_551;
            case 12:
              if (LODWORD(v1045.__r_.__value_.__l.__data_) != 2
                || (*(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__r.__words[1],
                    v1045.__r_.__value_.__r.__words[2] != 3))
              {
                size_t v141 = v1039;
LABEL_561:
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
                uint64_t v321 = v1054[0];
                uint64_t v322 = v1054[1];
                uint64_t v324 = *((void *)&v1052 + 1);
                v323 = (void *)v1052;
                v325 = v141;
                uint64_t v326 = 4;
                goto LABEL_566;
              }
              size_t v141 = v1039;
              if (llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL)) {
                goto LABEL_561;
              }
              break;
            case 13:
            case 18:
              goto LABEL_561;
            case 14:
              if (LODWORD(v1045.__r_.__value_.__l.__data_) != 2
                || (*(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__r.__words[1],
                    v1045.__r_.__value_.__r.__words[2] != 3))
              {
                size_t v141 = v1039;
LABEL_547:
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
                uint64_t v321 = v1054[0];
                uint64_t v322 = v1054[1];
                uint64_t v324 = *((void *)&v1052 + 1);
                v323 = (void *)v1052;
                v325 = v141;
                uint64_t v326 = 6;
                goto LABEL_566;
              }
              size_t v141 = v1039;
              if (llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL)) {
                goto LABEL_547;
              }
              break;
            case 15:
              if (LODWORD(v1045.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__r.__words[1],
                    v1045.__r_.__value_.__r.__words[2] == 3))
              {
                size_t v141 = v1039;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL)) {
                  break;
                }
              }
              else
              {
                size_t v141 = v1039;
              }
LABEL_565:
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
              uint64_t v321 = v1054[0];
              uint64_t v322 = v1054[1];
              uint64_t v324 = *((void *)&v1052 + 1);
              v323 = (void *)v1052;
              v325 = v141;
              uint64_t v326 = 8;
LABEL_566:
              char v312 = sub_1CD3AC384(v325, v321, v322, v326, v323, v324);
              goto LABEL_567;
            case 16:
            case 20:
              goto LABEL_565;
            case 19:
              goto LABEL_547;
            case 22:
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              uint64_t v314 = v1054[0];
              uint64_t v315 = v1054[1];
              uint64_t v317 = *((void *)&v1052 + 1);
              v316 = (void *)v1052;
              v318 = &unk_1CFB2E308;
              v319 = v1039;
              unsigned int v320 = 4;
              goto LABEL_557;
            case 23:
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              uint64_t v314 = v1054[0];
              uint64_t v315 = v1054[1];
              uint64_t v317 = *((void *)&v1052 + 1);
              v316 = (void *)v1052;
              v318 = &unk_1CFB2E31C;
              v319 = v1039;
              unsigned int v320 = 8;
              goto LABEL_557;
            case 24:
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              uint64_t v314 = v1054[0];
              uint64_t v315 = v1054[1];
              uint64_t v317 = *((void *)&v1052 + 1);
              v316 = (void *)v1052;
              v318 = &unk_1CFB2E380;
              v319 = v1039;
              unsigned int v320 = 10;
LABEL_557:
              char v312 = sub_1CD3AC550(v319, v314, v315, (uint64_t)v318, v320, v316, v317);
              goto LABEL_567;
            default:
              break;
          }
LABEL_613:
          llvm::StringRef::lower((llvm::StringRef *)v1054, __dst);
          int v344 = __dst[23];
          if (__dst[23] >= 0) {
            v345 = __dst;
          }
          else {
            v345 = *(unsigned __int8 **)__dst;
          }
          if (__dst[23] >= 0) {
            size_t v346 = __dst[23] & 0x7F;
          }
          else {
            size_t v346 = *(void *)&__dst[8];
          }
          uint64_t v347 = *((unsigned int *)v141 + 156);
          __nd = *(void **)__dst;
          if (v347)
          {
            int v348 = 0;
            if (v346)
            {
              size_t v349 = v346;
              v350 = v345;
              do
              {
                int v351 = *v350++;
                int v348 = 33 * v348 + v351;
                --v349;
              }
              while (v349);
            }
            uint64_t v352 = *((void *)v141 + 77);
            int v353 = 1;
            int v354 = v348;
            while (1)
            {
              uint64_t v355 = v354 & (v347 - 1);
              v356 = *(void **)(v352 + 8 * v355);
              if (v356 != (void *)-8)
              {
                if (!v356)
                {
                  uint64_t v357 = v347;
                  goto LABEL_632;
                }
                if (*(_DWORD *)(v352 + 8 * v347 + 8 + 4 * v355) == v348
                  && v346 == *v356
                  && (!v346 || !memcmp(v345, (char *)v356 + *((unsigned int *)v1039 + 159), v346)))
                {
                  break;
                }
              }
              int v354 = v353 + v355;
              ++v353;
            }
            uint64_t v357 = (int)v355;
            if (v355 == -1) {
              uint64_t v357 = v347;
            }
          }
          else
          {
            uint64_t v357 = 0;
            uint64_t v352 = *((void *)v141 + 77);
          }
LABEL_632:
          v358 = (void *)(v352 + 8 * v357);
          if (v344 < 0)
          {
            operator delete(__nd);
            uint64_t v352 = *((void *)v1039 + 77);
            LODWORD(v347) = *((_DWORD *)v1039 + 156);
          }
          if (v358 != (void *)(v352 + 8 * v347))
          {
            (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
            uint64_t v359 = *v358;
            v360 = (uint64_t *)(*v358 + 8);
            long long v361 = v1052;
            *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v1052;
            if (*((_DWORD *)v1039 + 128))
            {
              *(_OWORD *)__ne = *(_OWORD *)v1054;
              if (sub_1CD3B3FDC((uint64_t)v1039, v1052, *((uint64_t *)&v1052 + 1), (uint64_t)v360))
              {
                *(void *)__c = " in '";
                *(_OWORD *)&__c[16] = *(_OWORD *)__ne;
                LOWORD(v1076) = 1283;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                v392 = v1039;
                goto LABEL_765;
              }
            }
            else
            {
              v370 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(void *)v1039 + 48))(v1039, *(__n128 *)v1054);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = v361;
              uint64_t v371 = llvm::MCContext::getOrCreateSymbol(v370, (unsigned __int8 ***)__dst);
              uint64_t v372 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v372 + 192))(v372, v371, 0);
              *(_DWORD *)__c = 0;
              if (sub_1CD3B3EA4(v1039, v360, __c)) {
                goto LABEL_691;
              }
              uint64_t v373 = *(void *)(v359 + 8);
              uint64_t v374 = *(void *)(v359 + 16);
              int v375 = *(_DWORD *)(v359 + 40);
              int v376 = *(_DWORD *)__c;
              int v377 = *(_DWORD *)__c * v375;
              llvm::StringRef::lower((llvm::StringRef *)__str, __dst);
              if (__dst[23] >= 0) {
                v378 = __dst;
              }
              else {
                v378 = *(unsigned __int8 **)__dst;
              }
              if (__dst[23] >= 0) {
                size_t v379 = __dst[23] & 0x7F;
              }
              else {
                size_t v379 = *(void *)&__dst[8];
              }
              uint64_t v380 = *sub_1CD3B6CF8((llvm::MCAsmParser *)((char *)v1039 + 648), v378, v379);
              *(void *)(v380 + 8) = v373;
              *(void *)(v380 + 16) = v374;
              *(_DWORD *)(v380 + 24) = v377;
              *(_DWORD *)(v380 + 28) = v375;
              *(_DWORD *)(v380 + 32) = v376;
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
            }
LABEL_637:
            LOBYTE(v9) = 0;
            goto LABEL_692;
          }
          if (*((unsigned char *)v1039 + 1061))
          {
            switch(*((void *)&v1052 + 1))
            {
              case 4:
                if (*(_DWORD *)v1052 == 1852143205 || *(_DWORD *)v1052 == 1313166917)
                {
                  uint64_t v411 = *(void *)(v1002 + 120);
                  *(_DWORD *)__dst = 1;
                  *(_DWORD *)__c = 4;
                  sub_1CD8F39B4(v411, (int *)__dst, (uint64_t *)&v1053, (int *)__c);
                }
                break;
              case 6:
                if (*(_DWORD *)v1052 == 1835360095 && *(_WORD *)(v1052 + 4) == 29801) {
                  goto LABEL_684;
                }
                if (*(_DWORD *)v1052 == 1296392031 && *(_WORD *)(v1052 + 4) == 21577) {
                  goto LABEL_684;
                }
                break;
              case 5:
                if ((*(_DWORD *)v1052 != 1768777055 || *(unsigned char *)(v1052 + 4) != 116)
                  && (*(_DWORD *)v1052 != 1229800799 || *(unsigned char *)(v1052 + 4) != 84))
                {
                  if ((*(_DWORD *)v1052 != 1734962273 || *(unsigned char *)(v1052 + 4) != 110)
                    && (*(_DWORD *)v1052 != 1195985985 || *(unsigned char *)(v1052 + 4) != 78))
                  {
                    break;
                  }
                  *(void *)__c = v1053;
                  __str[0].__r_.__value_.__r.__words[0] = 0;
                  uint64_t v366 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 96);
                  *(void *)__dst = 0;
                  if ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *, unsigned char *))(*(void *)v1039 + 232))(v1039, __str, __dst))goto LABEL_691; {
                  if (*__str[0].__r_.__value_.__l.__data_ == 1)
                  }
                  {
                    unint64_t v367 = *(void *)(__str[0].__r_.__value_.__r.__words[0] + 16);
                    uint8x8_t v368 = (uint8x8_t)vcnt_s8((int8x8_t)v367);
                    v368.i16[0] = vaddlv_u8(v368);
                    if (v368.u32[0] == 1)
                    {
                      uint64_t v369 = *(void *)(v1002 + 120);
                      *(_DWORD *)__dst = 0;
                      *(_DWORD *)v1060 = 5;
                      LODWORD(v1057[0]) = 63 - __clz(v367);
                      sub_1CD8F47BC(v369, (int *)__dst, (uint64_t *)__c, (int *)v1060, (unsigned int *)v1057);
                      goto LABEL_637;
                    }
                    v598 = "literal value not a power of two greater then zero";
                  }
                  else
                  {
                    v598 = "unexpected expression in align";
                  }
LABEL_1210:
                  *(void *)__dst = v598;
                  *(_WORD *)&__dst[32] = 259;
                  uint64_t v342 = (uint64_t)v1039;
                  uint64_t v341 = v366;
                  goto LABEL_1211;
                }
LABEL_684:
                *(void *)__c = v1053;
                __str[0].__r_.__value_.__r.__words[0] = *((void *)&v1052 + 1);
                *(void *)v1060 = 0;
                uint64_t v366 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
                *(void *)__dst = 0;
                if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *, unsigned char *))(*(void *)v1039 + 232))(v1039, v1060, __dst))goto LABEL_691; {
                if (**(unsigned char **)v1060 == 1)
                }
                {
                  if ((unint64_t)(*(void *)(*(void *)v1060 + 16) + 128) < 0x180)
                  {
                    uint64_t v383 = *(void *)(v1002 + 120);
                    *(_DWORD *)__dst = 2;
                    sub_1CD8F4680(v383, (int *)__dst, (uint64_t *)__c, (uint64_t *)__str);
                    goto LABEL_637;
                  }
                  v598 = "literal value out of range for directive";
                }
                else
                {
                  v598 = "unexpected expression in _emit";
                }
                goto LABEL_1210;
              default:
                break;
            }
          }
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039) & 1) == 0)
          {
            llvm::StringRef::lower((llvm::StringRef *)&v1052, v1060);
            v1055.__r_.__value_.__r.__words[0] = *(void *)(v1002 + 120);
            uint64_t v384 = *((void *)v1039 + 1);
            if (v1060[23] >= 0) {
              v385 = v1060;
            }
            else {
              v385 = *(unsigned char **)v1060;
            }
            if (v1060[23] >= 0) {
              uint64_t v386 = v1060[23] & 0x7F;
            }
            else {
              uint64_t v386 = *(void *)&v1060[8];
            }
            long long v1041 = v1063;
            uint64_t v1042 = v1064;
            unsigned int v1044 = v1066;
            if (v1066 > 0x40) {
              operator new[]();
            }
            v1043 = __src;
            char v387 = (*(uint64_t (**)(uint64_t, std::string *, unsigned char *, uint64_t, long long *, uint64_t))(*(void *)v384 + 56))(v384, &v1055, v385, v386, &v1041, v1002);
            char v388 = v387;
            if (v1044 >= 0x41 && v1043) {
              MEMORY[0x1D25D9CB0](v1043, 0x1000C8000313F17);
            }
            *(unsigned char *)(v1002 + 84) = v388;
            v389 = v1039;
            if (*((unsigned char *)v1039 + 33))
            {
              *(void *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
              *(_DWORD *)&__c[8] = 0;
              BYTE8(v1076) = 0;
              unint64_t v1077 = 0;
              *((void *)&v1078 + 1) = __dst;
              LODWORD(v1078) = 0;
              *(void *)__c = &unk_1F2646FA8;
              *(_OWORD *)&__c[16] = 0uLL;
              *(void *)&long long v1076 = 0;
              llvm::raw_ostream::write((llvm::raw_ostream *)__c, "parsed instruction: [", 0x15uLL);
              if (*(_DWORD *)(v1002 + 8))
              {
                uint64_t v463 = 0;
                int v464 = 0;
                do
                {
                  if (v464)
                  {
                    if (*(void *)&__c[24] - (void)v1076 > 1uLL)
                    {
                      *(_WORD *)long long v1076 = 8236;
                      *(void *)&long long v1076 = v1076 + 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)__c, ", ", 2uLL);
                    }
                  }
                  (*(void (**)(void, unsigned char *))(**(void **)(*(void *)v1002 + 8 * v463) + 120))(*(void *)(*(void *)v1002 + 8 * v463), __c);
                  uint64_t v463 = (v464 + 1);
                  int v464 = v463;
                }
                while (v463 != *(_DWORD *)(v1002 + 8));
              }
              if (*(void *)&__c[24] == (void)v1076)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)__c, "]", 1uLL);
              }
              else
              {
                *(unsigned char *)long long v1076 = 93;
                *(void *)&long long v1076 = v1076 + 1;
              }
              std::string::size_type v403 = **((void **)&v1078 + 1);
              std::string::size_type v402 = *(void *)(*((void *)&v1078 + 1) + 8);
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 261;
              __str[0].__r_.__value_.__r.__words[0] = v403;
              __str[0].__r_.__value_.__l.__size_ = v402;
              v1057[0] = 0;
              v1057[1] = 0;
              llvm::SourceMgr::PrintMessage(*((llvm **)v1039 + 30), v1053, 3, (llvm::Twine *)__str, (unint64_t *)v1057, 1, 0, 0, 1u);
              *(void *)__c = &unk_1F2646B98;
              if (v1078 == 1 && *(void *)&__c[16]) {
                MEMORY[0x1D25D9CB0](*(void *)&__c[16], 0x1000C8077774924);
              }
              if (*(unsigned char **)__dst != &__dst[24]) {
                free(*(void **)__dst);
              }
              v389 = v1039;
            }
            if (*((_DWORD *)v389 + 6)) {
              char v390 = 1;
            }
            else {
              char v390 = v388;
            }
            if (v390)
            {
              LOBYTE(v9) = 1;
            }
            else
            {
              if (sub_1CD3A9100(v389))
              {
                v459 = (uint64_t *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v389 + 48))(v389) + 1520);
                uint64_t v460 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v389 + 56))(v389);
                uint64_t v461 = *(unsigned int *)(v460 + 120);
                uint64_t v462 = v461 ? *(void *)(*(void *)(v460 + 112) + 32 * v461 - 32) : 0;
                *(void *)__dst = v462;
                *(void *)__c = 0;
                v389 = v1039;
                if (sub_1CD420258(v459, __dst, __c))
                {
                  v595 = (char ***)*((void *)v1039 + 85);
                  if (v595 == *((char ****)v1039 + 86))
                  {
                    v596 = (int *)((char *)v1039 + 272);
                    v597 = &v1053;
                  }
                  else
                  {
                    v597 = *v595;
                    v596 = (int *)(*v595 + 1);
                  }
                  unint64_t LineAndColumn = llvm::SourceMgr::getLineAndColumn(*((uint64_t **)v1039 + 30), *v597, *v596);
                  if (*((void *)v1039 + 96))
                  {
                    uint64_t v785 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    __c[0] = 0;
                    __c[16] = 0;
                    __dst[0] = 0;
                    __dst[16] = 0;
                    (*(void (**)(std::string *__return_ptr))(*(void *)v785 + 688))(__str);
                    int v786 = (int)__str[0].__r_.__value_.__l.__data_;
                    *(_DWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039) + 1516) = v786;
                    unint64_t LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*((uint64_t **)v1039 + 30), *((char **)v1039 + 98), *((_DWORD *)v1039 + 198))+ *((_DWORD *)v1039 + 194)+ LineAndColumn;
                  }
                  v389 = v1039;
                  uint64_t v698 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                  uint64_t v699 = *(unsigned int *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v389 + 48))(v389)
                                         + 1516);
                  (*(void (**)(uint64_t, uint64_t, unint64_t, void, uint64_t, void, void))(*(void *)v698 + 712))(v698, v699, LineAndColumn, 0, 1, 0, 0);
                }
              }
              *(void *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(void, char *, uint64_t, uint64_t, void, unsigned char *, void))(**((void **)v389 + 1) + 72))(*((void *)v389 + 1), v1053, v1002 + 80, v1002, *((void *)v389 + 28), __dst, *(unsigned __int8 *)(*((void *)v389 + 1) + 64));
            }
            if ((v1060[23] & 0x80000000) != 0) {
              operator delete(*(void **)v1060);
            }
            goto LABEL_692;
          }
          goto LABEL_691;
        }
        if (v281 == 98)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
          long long v327 = v1052;
          v1013 = v1053;
          *(_OWORD *)v1086 = v1052;
          long long v1084 = 0uLL;
          unint64_t v1085 = 0;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 9)
          {
LABEL_738:
            sub_1CD8F38F8((uint64_t)v1015);
            memset(v1060, 0, 24);
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v141 + 40))(v141) + 8) == 2)
            {
              uint64_t v394 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              if (*(_DWORD *)v394 == 2)
              {
                uint64_t v395 = *(void *)(v394 + 8);
                unint64_t v396 = *(void *)(v394 + 16);
              }
              else
              {
                uint64_t v395 = *(void *)(v394 + 8);
                unint64_t v424 = *(void *)(v394 + 16);
                unint64_t v425 = v424 - 1;
                unint64_t v426 = v424 != 0;
                if (v424) {
                  ++v395;
                }
                if (v426 > v425) {
                  unint64_t v425 = v424 != 0;
                }
                if (v424 < v425) {
                  unint64_t v425 = v424;
                }
                unint64_t v396 = v425 - v426;
              }
              *(void *)__dst = v395;
              *(void *)&__dst[8] = v396;
              if (v396 == 5
                && !llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "local", 5uLL))
              {
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
                if ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str))
                {
LABEL_827:
                  LOBYTE(v9) = 1;
                  goto LABEL_871;
                }
                while (1)
                {
                  llvm::StringRef::lower((llvm::StringRef *)__str, __c);
                  uint64_t v428 = *(void *)&v1060[16];
                  v427 = *(_OWORD **)&v1060[8];
                  if (*(void *)&v1060[8] >= *(void *)&v1060[16])
                  {
                    v430 = *(_OWORD **)v1060;
                    unint64_t v431 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1060[8] - *(void *)v1060) >> 3);
                    unint64_t v432 = v431 + 1;
                    if (v431 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_1610;
                    }
                    if (0x5555555555555556 * ((uint64_t)(*(void *)&v1060[16] - *(void *)v1060) >> 3) > v432) {
                      unint64_t v432 = 0x5555555555555556 * ((uint64_t)(*(void *)&v1060[16] - *(void *)v1060) >> 3);
                    }
                    unint64_t v433 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1060[16] - *(void *)v1060) >> 3) >= 0x555555555555555
                         ? 0xAAAAAAAAAAAAAAALL
                         : v432;
                    *(void *)&__dst[32] = &v1060[16];
                    if (v433)
                    {
                      if (v433 > 0xAAAAAAAAAAAAAAALL) {
                        goto LABEL_1612;
                      }
                      v434 = (char *)operator new(24 * v433);
                    }
                    else
                    {
                      v434 = 0;
                    }
                    v435 = &v434[24 * v431];
                    *(_OWORD *)v435 = *(_OWORD *)__c;
                    *((void *)v435 + 2) = *(void *)&__c[16];
                    memset(__c, 0, 24);
                    if (v427 == v430)
                    {
                      int64x2_t v436 = vdupq_n_s64((unint64_t)v427);
                      v437 = &v434[24 * v431];
                    }
                    else
                    {
                      v437 = &v434[24 * v431];
                      do
                      {
                        long long v438 = *(_OWORD *)((char *)v427 - 24);
                        *((void *)v437 - 1) = *((void *)v427 - 1);
                        *(_OWORD *)(v437 - 24) = v438;
                        v437 -= 24;
                        *((void *)v427 - 2) = 0;
                        *((void *)v427 - 1) = 0;
                        *((void *)v427 - 3) = 0;
                        v427 = (_OWORD *)((char *)v427 - 24);
                      }
                      while (v427 != v430);
                      int64x2_t v436 = *(int64x2_t *)v1060;
                      uint64_t v428 = *(void *)&v1060[16];
                    }
                    v439 = v435 + 24;
                    *(void *)v1060 = v437;
                    *(void *)&v1060[8] = v435 + 24;
                    *(int64x2_t *)&__dst[8] = v436;
                    *(void *)&v1060[16] = &v434[24 * v433];
                    *(void *)&__dst[24] = v428;
                    *(void *)__dst = v436.i64[0];
                    sub_1CBF4EE0C((uint64_t)__dst);
                    *(void *)&v1060[8] = v439;
                    if ((__c[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__c);
                    }
                  }
                  else
                  {
                    long long v429 = *(_OWORD *)__c;
                    *(void *)(*(void *)&v1060[8] + 16) = *(void *)&__c[16];
                    _OWORD *v427 = v429;
                    *(void *)&v1060[8] = (char *)v427 + 24;
                  }
                  if (!llvm::MCAsmParser::parseOptionalToken(v1039, 25)) {
                    break;
                  }
                  llvm::MCAsmParser::parseOptionalToken(v1039, 9);
                  if ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str))goto LABEL_827; {
                }
                  }
              }
            }
            memset(&__str[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            LODWORD(__str[1].__r_.__value_.__r.__words[1]) = 1;
            uint64_t v440 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
            uint64_t v1005 = *(void *)(v440 + 8);
            if (*(_DWORD *)(v440 + 32) > 0x40u) {
              operator new[]();
            }
            char v441 = 0;
            int v442 = 0;
            for (uint64_t k = (uint64_t)v1039; ; (*(void (**)(uint64_t))(*(void *)k + 224))(k))
            {
              while (**__n == 1)
                sub_1CD8F38F8((uint64_t)v1015);
              if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)k + 40))(k) + 8))
              {
                *(void *)__dst = "no matching 'endm' in definition";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = llvm::MCAsmParser::Error(k, (uint64_t)v1013, (uint64_t)__dst, 0, 0);
                std::string::pointer v457 = 0;
                unsigned int v458 = 1;
                goto LABEL_868;
              }
              if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)k + 40))(k) + 8) == 2)
              {
                uint64_t v444 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)k + 40))(k) + 8);
                if (*(_DWORD *)v444 == 2)
                {
                  uint64_t v445 = *(void *)(v444 + 8);
                  unint64_t v446 = *(void *)(v444 + 16);
                }
                else
                {
                  uint64_t v445 = *(void *)(v444 + 8);
                  unint64_t v447 = *(void *)(v444 + 16);
                  unint64_t v448 = v447 - 1;
                  unint64_t v449 = v447 != 0;
                  if (v447) {
                    ++v445;
                  }
                  if (v449 > v448) {
                    unint64_t v448 = v447 != 0;
                  }
                  if (v447 < v448) {
                    unint64_t v448 = v447;
                  }
                  unint64_t v446 = v448 - v449;
                }
                *(void *)__dst = v445;
                *(void *)&__dst[8] = v446;
                if (v446 != 4
                  || llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "endm", 4uLL))
                {
                  uint64_t v450 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)k + 40))(k) + 8);
                  if (*(_DWORD *)v450 == 2)
                  {
                    uint64_t v451 = *(void *)(v450 + 8);
                    unint64_t v452 = *(void *)(v450 + 16);
                  }
                  else
                  {
                    uint64_t v451 = *(void *)(v450 + 8);
                    unint64_t v453 = *(void *)(v450 + 16);
                    unint64_t v454 = v453 - 1;
                    unint64_t v455 = v453 != 0;
                    if (v453) {
                      ++v451;
                    }
                    if (v455 > v454) {
                      unint64_t v454 = v453 != 0;
                    }
                    if (v453 < v454) {
                      unint64_t v454 = v453;
                    }
                    unint64_t v452 = v454 - v455;
                  }
                  *(void *)__dst = v451;
                  *(void *)&__dst[8] = v452;
                  if (v452 != 5
                    || llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "exitm", 5uLL))
                  {
                    v442 += sub_1CD3B3198(k);
                  }
                  else
                  {
                    if (v442)
                    {
                      BOOL v456 = 0;
                    }
                    else
                    {
                      sub_1CD3ABC8C((uint64_t)__dst, (uint64_t)v1039, 1);
                      BOOL v456 = *(_DWORD *)__dst != 9;
                      if (*(_DWORD *)&__dst[32] >= 0x41u && *(void *)&__dst[24]) {
                        MEMORY[0x1D25D9CB0](*(void *)&__dst[24], 0x1000C8000313F17);
                      }
                    }
                    v441 |= v456;
                    uint64_t k = (uint64_t)v1039;
                  }
                }
                else
                {
                  if (!v442)
                  {
                    uint64_t v634 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)k + 40))(k) + 8);
                    __str[0] = *(std::string *)v634;
                    unsigned int v458 = *(_DWORD *)(v634 + 32);
                    if (v458 > 0x40)
                    {
                      llvm::APInt::reallocate((uint64_t)&__str[1], *(_DWORD *)(v634 + 32));
                      unsigned int v458 = __str[1].__r_.__value_.__r.__words[1];
                      if (LODWORD(__str[1].__r_.__value_.__r.__words[1]) <= 0x40)
                      {
                        std::string::pointer v457 = *(std::string::pointer *)(v634 + 24);
                        __str[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v457;
                      }
                      else
                      {
                        std::string::pointer v457 = __str[1].__r_.__value_.__l.__data_;
                        memcpy(__str[1].__r_.__value_.__l.__data_, *(const void **)(v634 + 24), (((unint64_t)LODWORD(__str[1].__r_.__value_.__r.__words[1]) + 63) >> 3) & 0x3FFFFFF8);
                      }
                    }
                    else
                    {
                      std::string::pointer v457 = *(std::string::pointer *)(v634 + 24);
                      __str[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v457;
                      LODWORD(__str[1].__r_.__value_.__r.__words[1]) = v458;
                    }
                    sub_1CD8F38F8((uint64_t)v1015);
                    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                     + 8) == 9)
                    {
                      uint64_t v701 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                      llvm::StringRef::lower((llvm::StringRef *)v1086, __dst);
                      int v990 = __dst[23];
                      v702 = *(unsigned char **)__dst;
                      v989 = *(void **)__dst;
                      if (__dst[23] >= 0) {
                        v702 = __dst;
                      }
                      __s1b = v702;
                      size_t v703 = __dst[23] & 0x7F;
                      if (__dst[23] < 0) {
                        size_t v703 = *(void *)&__dst[8];
                      }
                      size_t __ng = v703;
                      uint64_t v991 = *(unsigned int *)(v701 + 1976);
                      if (v991)
                      {
                        if (v703)
                        {
                          int v704 = 0;
                          v705 = v702;
                          do
                          {
                            int v706 = *v705++;
                            int v704 = 33 * v704 + v706;
                            --v703;
                          }
                          while (v703);
                        }
                        else
                        {
                          int v704 = 0;
                        }
                        uint64_t v707 = *(void *)(v701 + 1968);
                        uint64_t v993 = *(unsigned int *)(v701 + 1988);
                        int v708 = 1;
                        int v709 = v704;
                        while (1)
                        {
                          uint64_t v710 = v709 & (v991 - 1);
                          v711 = *(void **)(v707 + 8 * v710);
                          if (v711 != (void *)-8)
                          {
                            if (!v711) {
                              goto LABEL_1944;
                            }
                            if (*(_DWORD *)(v707 + 8 * v991 + 8 + 4 * v710) == v704
                              && __ng == *v711
                              && (!__ng || !memcmp(__s1b, (char *)v711 + v993, __ng)))
                            {
                              break;
                            }
                          }
                          int v709 = v708 + v710;
                          ++v708;
                        }
                      }
                      else
                      {
                        uint64_t v991 = 0;
LABEL_1944:
                        LODWORD(v710) = -1;
                      }
                      BOOL v976 = v710 == -1 || v991 == (int)v710;
                      if (v990 < 0) {
                        operator delete(v989);
                      }
                      if (v976)
                      {
                        unint64_t v977 = v1085;
                        char v978 = v441 & 1;
                        long long v979 = v1084;
                        unint64_t v1085 = 0;
                        long long v1084 = 0uLL;
                        uint64_t v980 = *(void *)&v1060[16];
                        long long v994 = *(_OWORD *)v1060;
                        *(_OWORD *)__s1c = v979;
                        memset(v1060, 0, 24);
                        *(_OWORD *)__dst = *(_OWORD *)v1086;
                        *(void *)&__dst[16] = v1005;
                        *(void *)&__dst[24] = __str[0].__r_.__value_.__l.__size_ - v1005;
                        v1057[0] = 0;
                        v1057[1] = 0;
                        *(void *)&long long v1058 = 0;
                        memset(&v1055, 0, sizeof(v1055));
                        char v1074 = v978;
                        v1081 = &v1055;
                        sub_1CB8338B8((void ***)&v1081);
                        v1081 = (std::string *)v1057;
                        sub_1CCBB91F0((void ***)&v1081);
                        uint64_t v981 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                        llvm::StringRef::lower((llvm::StringRef *)v1086, &v1081);
                        if ((v1083 & 0x8000000000000000) == 0) {
                          v982 = (std::string *)&v1081;
                        }
                        else {
                          v982 = v1081;
                        }
                        if ((v1083 & 0x8000000000000000) == 0) {
                          size_t v983 = HIBYTE(v1083) & 0x7F;
                        }
                        else {
                          size_t v983 = (size_t)v1082;
                        }
                        *(_OWORD *)__c = *(_OWORD *)__dst;
                        *(_OWORD *)&__c[16] = *(_OWORD *)&__dst[16];
                        long long v1076 = *(_OWORD *)__s1c;
                        *(void *)&__dst[40] = 0;
                        *(void *)&__dst[32] = 0;
                        memset(v1073, 0, sizeof(v1073));
                        uint64_t v1072 = 0;
                        long long v1078 = v994;
                        unint64_t v1077 = v977;
                        uint64_t v1079 = v980;
                        char v1080 = v978;
                        sub_1CD8F4368(v981, (unsigned __int8 *)v982, v983, (uint64_t)__c);
                        v1062 = (void **)&v1078;
                        sub_1CB8338B8(&v1062);
                        v1062 = (void **)&v1076;
                        sub_1CCBB91F0(&v1062);
                        if (SHIBYTE(v1083) < 0) {
                          operator delete(v1081);
                        }
                        v1081 = (std::string *)v1073;
                        sub_1CB8338B8((void ***)&v1081);
                        v1081 = (std::string *)&__dst[32];
                        sub_1CCBB91F0((void ***)&v1081);
                        LOBYTE(v9) = 0;
LABEL_868:
                        if (v458 >= 0x41 && v457) {
                          MEMORY[0x1D25D9CB0](v457, 0x1000C8000313F17);
                        }
LABEL_871:
                        *(void *)__dst = v1060;
                        sub_1CB8338B8((void ***)__dst);
LABEL_872:
                        *(void *)__dst = &v1084;
                        sub_1CCBB91F0((void ***)__dst);
LABEL_692:
                        if (v1047 >= 0x41 && v1046) {
                          MEMORY[0x1D25D9CB0](v1046, 0x1000C8000313F17);
                        }
                        goto LABEL_212;
                      }
                      LOWORD(v1076) = 1283;
                      *(void *)__c = "macro '";
                      *(_OWORD *)&__c[16] = *(_OWORD *)v1086;
                      *(void *)__dst = __c;
                      *(void *)&__dst[16] = "' is already defined";
                      *(_WORD *)&__dst[32] = 770;
                      char v733 = llvm::MCAsmParser::Error((uint64_t)v1039, (uint64_t)v1013, (uint64_t)__dst, 0, 0);
                    }
                    else
                    {
                      if (LODWORD(__str[0].__r_.__value_.__l.__data_) == 2)
                      {
                        std::string::size_type v713 = __str[0].__r_.__value_.__r.__words[2];
                        std::string::size_type v712 = __str[0].__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        std::string::size_type v730 = __str[0].__r_.__value_.__r.__words[2];
                        std::string::size_type v712 = __str[0].__r_.__value_.__l.__size_;
                        std::string::size_type v731 = __str[0].__r_.__value_.__r.__words[2] - 1;
                        std::string::size_type v732 = __str[0].__r_.__value_.__r.__words[2] != 0;
                        if (__str[0].__r_.__value_.__r.__words[2]) {
                          std::string::size_type v712 = __str[0].__r_.__value_.__l.__size_ + 1;
                        }
                        if (v732 > v731) {
                          std::string::size_type v731 = __str[0].__r_.__value_.__r.__words[2] != 0;
                        }
                        if (__str[0].__r_.__value_.__r.__words[2] >= v731) {
                          std::string::size_type v730 = v731;
                        }
                        std::string::size_type v713 = v730 - v732;
                      }
                      LOWORD(v1076) = 1283;
                      *(void *)__c = "unexpected token in '";
                      *(void *)&__c[16] = v712;
                      *(void *)&__c[24] = v713;
                      *(void *)__dst = __c;
                      *(void *)&__dst[16] = "' directive";
                      *(_WORD *)&__dst[32] = 770;
                      char v733 = llvm::MCAsmParser::TokError((uint64_t)v1039, (uint64_t)__dst, 0, 0);
                    }
                    LOBYTE(v9) = v733;
                    goto LABEL_868;
                  }
                  --v442;
                }
              }
            }
          }
          while (1)
          {
            if ((void)v1084 != *((void *)&v1084 + 1) && *(unsigned char *)(*((void *)&v1084 + 1) - 7))
            {
              uint64_t v410 = *((void *)v141 + 17);
              LOWORD(v1076) = 1283;
              *(void *)__c = "Vararg parameter '";
              *(_OWORD *)&__c[16] = *(_OWORD *)(*((void *)&v1084 + 1) - 48);
              *(void *)__dst = __c;
              *(void *)&__dst[16] = "' should be last in the list of parameters";
              *(_WORD *)&__dst[32] = 770;
              LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v141, v410, (uint64_t)__dst, 0, 0);
              goto LABEL_872;
            }
            memset(__dst, 0, 42);
            if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v141 + 192))(v141, __dst)) {
              break;
            }
            uint64_t v328 = *((void *)&v1084 + 1);
            uint64_t v329 = v1084;
            if ((void)v1084 != *((void *)&v1084 + 1))
            {
              unint64_t v330 = *(void *)&__dst[8];
              v331 = *(unsigned __int8 **)__dst;
              while (*(void *)(v329 + 8) != v330
                   || llvm::StringRef::compare_insensitive((unsigned __int8 **)v329, v331, v330))
              {
                v329 += 48;
                if (v329 == v328) {
                  goto LABEL_579;
                }
              }
              __int16 v1059 = 1283;
              v1057[0] = "macro '";
              long long v1058 = v327;
              *(void *)v1060 = v1057;
              *(void *)&v1060[16] = "' has multiple parameters named '";
              __int16 v397 = 770;
              LOWORD(v1061) = 770;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1060;
              __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v331;
              __str[1].__r_.__value_.__r.__words[0] = v330;
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
              *(void *)__c = __str;
              *(void *)&__c[16] = "'";
              goto LABEL_750;
            }
LABEL_579:
            if (**__n == 10)
            {
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
              if (llvm::MCAsmParser::parseOptionalToken(v141, 27))
              {
                if (sub_1CD3AF0CC((uint64_t)v141, 0, (uint64_t)&__dst[16], 9))
                {
                  LOBYTE(v9) = 1;
                  goto LABEL_753;
                }
              }
              else
              {
                v1081 = 0;
                v1082 = 0;
                uint64_t v334 = *((void *)v141 + 17);
                if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string **))(*(void *)v141 + 192))(v141, &v1081))
                {
                  __int16 v1059 = 1283;
                  v1057[0] = "missing parameter qualifier for '";
                  long long v1058 = *(_OWORD *)__dst;
                  *(void *)v1060 = v1057;
                  *(void *)&v1060[16] = "' in macro '";
                  LOWORD(v1061) = 770;
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1060;
                  *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v327;
                  LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
                  *(void *)__c = __str;
                  *(void *)&__c[16] = "'";
                  LOWORD(v1076) = 770;
                  goto LABEL_1185;
                }
                std::string::size_type v335 = (std::string::size_type)v1082;
                if (v1082 == (std::string *)6)
                {
                  if (llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1081, "vararg", 6uLL)) {
                    goto LABEL_1184;
                  }
                  __dst[41] = 1;
                }
                else
                {
                  if (v1082 != (std::string *)3
                    || llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1081, "req", 3uLL))
                  {
LABEL_1184:
                    __int16 v1056 = 773;
                    v1055.__r_.__value_.__r.__words[0] = (std::string::size_type)v1081;
                    v1055.__r_.__value_.__l.__size_ = v335;
                    v1055.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not a valid parameter qualifier for '";
                    v1057[0] = &v1055;
                    long long v1058 = *(_OWORD *)__dst;
                    __int16 v1059 = 1282;
                    *(void *)v1060 = v1057;
                    *(void *)&v1060[16] = "' in macro '";
                    LOWORD(v1061) = 770;
                    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1060;
                    *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v327;
                    LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
                    *(void *)__c = __str;
                    *(void *)&__c[16] = "'";
                    LOWORD(v1076) = 770;
LABEL_1185:
                    char v401 = llvm::MCAsmParser::Error((uint64_t)v1039, v334, (uint64_t)__c, 0, 0);
LABEL_751:
                    LOBYTE(v9) = v401;
LABEL_753:
                    *(void *)__c = &__dst[16];
                    sub_1CCBB926C((void ***)__c);
                    goto LABEL_872;
                  }
                  __dst[40] = 1;
                }
                size_t v141 = v1039;
              }
            }
            uint64_t v332 = *((void *)&v1084 + 1);
            if (*((void *)&v1084 + 1) >= v1085)
            {
              uint64_t v333 = sub_1CD381324((uint64_t *)&v1084, (uint64_t)__dst);
            }
            else
            {
              **((_OWORD **)&v1084 + 1) = *(_OWORD *)__dst;
              *(void *)(v332 + 24) = 0;
              *(void *)(v332 + 32) = 0;
              *(void *)(v332 + 16) = 0;
              *(_OWORD *)(v332 + 16) = *(_OWORD *)&__dst[16];
              *(void *)(v332 + 32) = *(void *)&__dst[32];
              memset(&__dst[16], 0, 24);
              *(_WORD *)(v332 + 40) = *(_WORD *)&__dst[40];
              uint64_t v333 = v332 + 48;
            }
            *((void *)&v1084 + 1) = v333;
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v141 + 40))(v141) + 8) == 25) {
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
            }
            *(void *)__c = &__dst[16];
            sub_1CCBB926C((void ***)__c);
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v141 + 40))(v141) + 8) == 9) {
              goto LABEL_738;
            }
          }
          *(void *)__c = "expected identifier in 'macro' directive";
          __int16 v397 = 259;
LABEL_750:
          LOWORD(v1076) = v397;
          char v401 = llvm::MCAsmParser::TokError((uint64_t)v141, (uint64_t)__c, 0, 0);
          goto LABEL_751;
        }
        if (v281 == 116)
        {
LABEL_538:
          (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
          char v312 = sub_1CD3ABF8C((uint64_t)v141, (unsigned __int8 *)v1052, *((unint64_t *)&v1052 + 1), (uint64_t)v1053);
LABEL_567:
          LOBYTE(v9) = v312;
          goto LABEL_692;
        }
        if ((v281 - 114) >= 2) {
          goto LABEL_613;
        }
        (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
        uint64_t v405 = v1054[0];
        uint64_t v404 = v1054[1];
        long long v406 = v1052;
        v407 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
        int v408 = *v407;
        uint64_t v409 = *((void *)v407 + 1);
        if (v407[8] > 0x40) {
          operator new[]();
        }
        uint64_t v465 = 1;
        *(void *)v1060 = 1;
        if ((v408 | 0x10) != 0x19)
        {
          if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, v1060))
          {
            v468 = " in alignment value for '";
            goto LABEL_896;
          }
          uint64_t v465 = *(void *)v1060;
        }
        uint8x8_t v466 = (uint8x8_t)vcnt_s8((int8x8_t)v465);
        v466.i16[0] = vaddlv_u8(v466);
        if (v466.u32[0] != 1)
        {
          std::to_string(__str, v465);
          v471 = std::string::insert(__str, 0, "alignment must be a power of two; was ");
          std::string::size_type v472 = v471->__r_.__value_.__r.__words[2];
          *(_OWORD *)__c = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
          *(void *)&__c[16] = v472;
          v471->__r_.__value_.__l.__size_ = 0;
          v471->__r_.__value_.__r.__words[2] = 0;
          v471->__r_.__value_.__r.__words[0] = 0;
          *(_WORD *)&__dst[32] = 260;
          *(void *)__dst = __c;
          LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, v409, (uint64_t)__dst, 0, 0);
          if ((__c[23] & 0x80000000) != 0) {
            operator delete(*(void **)__c);
          }
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_692;
        }
        *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
        if (llvm::MCAsmParser::parseOptionalToken(v1039, 25))
        {
          uint64_t v467 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                       + 8)
                           + 8);
          if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str))
          {
LABEL_887:
            v468 = " in '";
LABEL_896:
            *(void *)__c = v468;
            *(void *)&__c[16] = v405;
            *(void *)&__c[24] = v404;
            LOWORD(v1076) = 1283;
            *(void *)__dst = __c;
            *(void *)&__dst[16] = "' directive";
            *(_WORD *)&__dst[32] = 770;
            char v473 = llvm::MCAsmParser::addErrorSuffix(v1039, (const llvm::Twine *)__dst);
LABEL_1172:
            LOBYTE(v9) = v473;
            goto LABEL_692;
          }
          if (__str[0].__r_.__value_.__l.__size_ != 9
            || llvm::StringRef::compare_insensitive((unsigned __int8 **)__str, "nonunique", 9uLL))
          {
            *(void *)__c = "Unrecognized qualifier for '";
            *(void *)&__c[16] = v405;
            *(void *)&__c[24] = v404;
            LOWORD(v1076) = 1283;
            *(void *)__dst = __c;
            *(void *)&__dst[16] = "' directive; expected none or NONUNIQUE";
            *(_WORD *)&__dst[32] = 770;
            char v473 = llvm::MCAsmParser::Error((uint64_t)v1039, v467, (uint64_t)__dst, 0, 0);
            goto LABEL_1172;
          }
        }
        *(void *)__dst = "unexpected token";
        *(_WORD *)&__dst[32] = 259;
        if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst))
        {
          BOOL v603 = v281 == 115;
          unsigned int v604 = *((_DWORD *)v1039 + 128);
          uint64_t v605 = *((unsigned int *)v1039 + 129);
          if (v604 < v605)
          {
            LOBYTE(v9) = 0;
            uint64_t v606 = *((void *)v1039 + 63) + 96 * v604;
            int v607 = *(_DWORD *)v1060;
            *(_OWORD *)uint64_t v606 = v406;
            *(unsigned char *)(v606 + 16) = v603;
            *(unsigned char *)(v606 + 17) = 1;
            *(_DWORD *)(v606 + 20) = v607;
            *(void *)(v606 + 24) = 0;
            *(_DWORD *)(v606 + 32) = 0;
            *(_OWORD *)(v606 + 40) = 0u;
            *(_OWORD *)(v606 + 56) = 0u;
            *(_OWORD *)(v606 + 68) = 0u;
            *(_DWORD *)(v606 + 84) = 16;
            *((_DWORD *)v1039 + 128) = v604 + 1;
            goto LABEL_692;
          }
          if (v605 != -1)
          {
            if (((2 * v605) | 1uLL) >= 0xFFFFFFFF) {
              uint64_t v886 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v886 = (2 * v605) | 1;
            }
            v887 = (char *)malloc_type_malloc(96 * v886, 0x4065EBACuLL);
            if (v887)
            {
              v888 = v887;
              int v889 = *(_DWORD *)v1060;
              v890 = &v887[96 * *((unsigned int *)v1039 + 128)];
              *(_OWORD *)v890 = v406;
              v890[16] = v603;
              v890[17] = 1;
              *((_DWORD *)v890 + 5) = v889;
              *((void *)v890 + 3) = 0;
              *((_DWORD *)v890 + 8) = 0;
              *(_OWORD *)(v890 + 40) = 0u;
              *(_OWORD *)(v890 + 56) = 0u;
              *(_OWORD *)(v890 + 68) = 0u;
              *((_DWORD *)v890 + 21) = 16;
              sub_1CD3B2908((void **)v1039 + 63, (uint64_t)v887);
              v891 = (char *)*((void *)v1039 + 63);
              if (v891 != (char *)v1039 + 520) {
                free(v891);
              }
              LOBYTE(v9) = 0;
              *((void *)v1039 + 63) = v888;
              *((_DWORD *)v1039 + 129) = v886;
              ++*((_DWORD *)v1039 + 128);
              goto LABEL_692;
            }
            goto LABEL_1992;
          }
          goto LABEL_1991;
        }
        goto LABEL_887;
      }
      uint64_t v84 = v6[1];
      uint64_t v85 = ((uint64_t (*)(void **))(*v6)[7])(v6);
      (*(void (**)(void *, uint64_t))(*v84 + 176))(v84, v85);
      if (*((void *)&v1052 + 1) == 4
        && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1052, "ends", 4uLL)
        && *((_DWORD *)v6 + 128) >= 2u
        && **(_DWORD **)(((uint64_t (*)(void **))(*v6)[5])(v6) + 8) == 9)
      {
        uint64_t v244 = (llvm::MCAsmParser *)v6;
LABEL_404:
        char v70 = sub_1CD3AA35C(v244);
        goto LABEL_211;
      }
      llvm::StringRef::lower((llvm::StringRef *)&v1052, __dst);
      if (__dst[23] >= 0) {
        uint64_t v86 = __dst;
      }
      else {
        uint64_t v86 = *(unsigned __int8 **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v87 = __dst[23] & 0x7F;
      }
      else {
        size_t v87 = *(void *)&__dst[8];
      }
      uint64_t v88 = *((unsigned int *)v6 + 112);
      v1001 = *(void **)__dst;
      if (v88)
      {
        int v1009 = __dst[23];
        int v89 = 0;
        if (v87)
        {
          size_t v90 = v87;
          uint64_t v91 = v86;
          do
          {
            int v92 = *v91++;
            int v89 = 33 * v89 + v92;
            --v90;
          }
          while (v90);
        }
        int v93 = v6[55];
        int v94 = 1;
        int v95 = v89;
        while (1)
        {
          uint64_t v96 = v95 & (v88 - 1);
          uint64_t v97 = (void *)v93[v96];
          if (v97 != (void *)-8)
          {
            if (!v97) {
              goto LABEL_412;
            }
            if (*((_DWORD *)&v93[v88 + 1] + v96) == v89
              && v87 == *v97
              && (!v87 || !memcmp(v86, (char *)v97 + *((unsigned int *)v1039 + 115), v87)))
            {
              break;
            }
          }
          int v95 = v94 + v96;
          ++v94;
        }
        if (v96 == -1)
        {
          uint64_t v97 = 0;
LABEL_412:
          int v221 = 0;
          uint64_t v6 = (void **)v1039;
          goto LABEL_413;
        }
        uint64_t v6 = (void **)v1039;
        if ((int)v96 == v88)
        {
          uint64_t v97 = 0;
          int v221 = 0;
        }
        else
        {
          uint64_t v264 = v93[(int)v96];
          uint64_t v97 = *(void **)(v264 + 8);
          int v221 = *(uint64_t (**)(void *, void, void, char *))(v264 + 16);
        }
LABEL_413:
        if (v1009 < 0) {
LABEL_414:
        }
          operator delete(v1001);
      }
      else
      {
        uint64_t v97 = 0;
        int v221 = 0;
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_414;
        }
      }
      if (v97)
      {
        char v70 = v221(v97, v1052, *((void *)&v1052 + 1), v1053);
        goto LABEL_211;
      }
      uint64_t v245 = ((uint64_t (*)(void **))(*v6)[5])(v6);
      if (v1063 != 2)
      {
        LOBYTE(v9) = *((_DWORD *)v6 + 6) != 0;
        goto LABEL_212;
      }
      uint64_t v246 = *(void *)(*(void *)(v245 + 8) + 8);
      uint64_t v247 = v6[1];
      long long v1048 = v1063;
      uint64_t v1049 = v1064;
      unsigned int v1051 = v1066;
      if (v1066 > 0x40) {
        operator new[]();
      }
      v1050 = __src;
      int v248 = (*(uint64_t (**)(void *, long long *))(*v247 + 64))(v247, &v1048);
      int v249 = v248;
      if (v1051 >= 0x41 && v1050) {
        MEMORY[0x1D25D9CB0](v1050, 0x1000C8000313F17);
      }
      int v250 = *((_DWORD *)v6 + 6);
      LOBYTE(v9) = v250 != 0;
      if (!v250 && ((v249 ^ 1) & 1) == 0)
      {
        if (*(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8)
                       + 8) != v246)
          goto LABEL_265;
        if (*(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8)
                       + 8) == v246)
        {
          switch(__pa)
          {
            case 5:
              uint64_t v421 = *((void *)&v1052 + 1);
              uint64_t v420 = v1052;
              v422 = v1039;
              char v423 = 0;
              goto LABEL_982;
            case 6:
            case 7:
              uint64_t v421 = *((void *)&v1052 + 1);
              uint64_t v420 = v1052;
              v422 = v1039;
              char v423 = 1;
LABEL_982:
              char v70 = sub_1CD3AA9EC(v422, v420, v421, v423);
              goto LABEL_211;
            case 8:
            case 9:
            case 17:
              uint64_t v252 = *((void *)&v1052 + 1);
              uint64_t v251 = v1052;
              uint64_t v253 = v1039;
              uint64_t v254 = 1;
              goto LABEL_794;
            case 10:
            case 11:
            case 21:
              uint64_t v252 = *((void *)&v1052 + 1);
              uint64_t v251 = v1052;
              uint64_t v253 = v1039;
              uint64_t v254 = 2;
              goto LABEL_794;
            case 12:
            case 13:
            case 18:
              uint64_t v252 = *((void *)&v1052 + 1);
              uint64_t v251 = v1052;
              uint64_t v253 = v1039;
              uint64_t v254 = 4;
              goto LABEL_794;
            case 14:
            case 19:
              uint64_t v252 = *((void *)&v1052 + 1);
              uint64_t v251 = v1052;
              uint64_t v253 = v1039;
              uint64_t v254 = 6;
              goto LABEL_794;
            case 15:
            case 16:
            case 20:
              uint64_t v252 = *((void *)&v1052 + 1);
              uint64_t v251 = v1052;
              uint64_t v253 = v1039;
              uint64_t v254 = 8;
LABEL_794:
              char v70 = sub_1CD3AAA94(v253, v251, v252, v254);
              goto LABEL_211;
            case 22:
              uint64_t v542 = *((void *)&v1052 + 1);
              uint64_t v541 = v1052;
              v543 = &unk_1CFB2E308;
              v544 = v1039;
              unsigned int v545 = 4;
              goto LABEL_1032;
            case 23:
              uint64_t v542 = *((void *)&v1052 + 1);
              uint64_t v541 = v1052;
              v543 = &unk_1CFB2E31C;
              v544 = v1039;
              unsigned int v545 = 8;
              goto LABEL_1032;
            case 24:
              uint64_t v542 = *((void *)&v1052 + 1);
              uint64_t v541 = v1052;
              v543 = &unk_1CFB2E380;
              v544 = v1039;
              unsigned int v545 = 10;
LABEL_1032:
              char v70 = sub_1CD3AAB48(v544, v541, v542, (uint64_t)v543, v545);
              goto LABEL_211;
            case 25:
              uint64_t v537 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
              *(void *)v1060 = 0;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 9)
              {
                *(void *)__dst = "align directive with no operand is ignored";
                *(_WORD *)&__dst[32] = 259;
                if (!(*(unsigned int (**)(llvm::MCAsmParser *, uint64_t, unsigned char *, void, void))(*(void *)v1039 + 168))(v1039, v537, __dst, 0, 0))goto LABEL_67; {
                *(void *)__c = "unexpected token";
                }
                LOWORD(v1076) = 259;
                v538 = (const llvm::Twine *)__c;
LABEL_1315:
                char v70 = llvm::MCAsmParser::parseEOL(v1039, v538);
                goto LABEL_211;
              }
              if (((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, v1060) & 1) != 0
                || (*(void *)__dst = "unexpected token",
                    *(_WORD *)&__dst[32] = 259,
                    llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)))
              {
                v505 = " in align directive";
                goto LABEL_1341;
              }
              int8x8_t v728 = *(int8x8_t *)v1060;
              if (!*(void *)v1060)
              {
                int8x8_t v728 = (int8x8_t)1;
                *(void *)v1060 = 1;
              }
              uint8x8_t v729 = (uint8x8_t)vcnt_s8(v728);
              v729.i16[0] = vaddlv_u8(v729);
              if (v729.u32[0] == 1)
              {
                LOBYTE(v9) = 0;
              }
              else
              {
                std::to_string(__str, *(void *)&v728);
                v866 = std::string::insert(__str, 0, "alignment must be a power of 2; was ");
                std::string::size_type v867 = v866->__r_.__value_.__r.__words[2];
                *(_OWORD *)__c = *(_OWORD *)&v866->__r_.__value_.__l.__data_;
                *(void *)&__c[16] = v867;
                v866->__r_.__value_.__l.__size_ = 0;
                v866->__r_.__value_.__r.__words[2] = 0;
                v866->__r_.__value_.__r.__words[0] = 0;
                *(_WORD *)&__dst[32] = 260;
                *(void *)__dst = __c;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, v537, (uint64_t)__dst, 0, 0);
                if ((__c[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__c);
                }
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str[0].__r_.__value_.__l.__data_);
                }
                int8x8_t v728 = *(int8x8_t *)v1060;
              }
              if (sub_1CD3B29C8((uint64_t)v1039, *(void *)&v728))
              {
                *(void *)__dst = " in align directive";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = v9 | llvm::MCAsmParser::addErrorSuffix(v1039, (const llvm::Twine *)__dst);
              }
              goto LABEL_212;
            case 26:
              *(void *)__dst = "unexpected token";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)
                && (sub_1CD3B29C8((uint64_t)v1039, 2uLL) & 1) == 0)
              {
                goto LABEL_67;
              }
              v505 = " in even directive";
              goto LABEL_1341;
            case 27:
              uint64_t v238 = (char *)*((void *)v1039 + 17);
              if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039)) {
                goto LABEL_265;
              }
              *(void *)v1060 = 0;
              *(void *)__dst = 0;
              if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *, unsigned char *))(*(void *)v1039 + 232))(v1039, v1060, __dst))goto LABEL_265; {
              *(void *)__dst = "unexpected token";
              }
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst))
              {
                v860 = " in 'org' directive";
LABEL_1675:
                *(void *)__dst = v860;
                *(_WORD *)&__dst[32] = 259;
                goto LABEL_1343;
              }
              unsigned int v519 = *((_DWORD *)v1039 + 128);
              if (v519)
              {
                uint64_t v520 = *((void *)v1039 + 63);
                uint64_t v521 = *(void *)v1060;
                uint64_t v522 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                v523 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v522 + 72))(v522);
                memset(__dst, 0, 28);
                if (*(unsigned char *)v521 == 1)
                {
                  uint64_t v524 = *(void *)(v521 + 16);
                  if ((v524 & 0x8000000000000000) == 0) {
                    goto LABEL_972;
                  }
                  goto LABEL_1836;
                }
                if ((llvm::MCExpr::evaluateAsRelocatableImpl(v521, (uint64_t)__dst, v523, 0, 0, 0, 0) & 1) != 0
                  && *(_OWORD *)__dst == 0)
                {
                  uint64_t v524 = *(void *)&__dst[16];
                  if ((*(void *)&__dst[16] & 0x8000000000000000) == 0)
                  {
LABEL_972:
                    LOBYTE(v9) = 0;
                    uint64_t v525 = v520 + 96 * v519;
                    *(_DWORD *)(v525 - 68) = v524;
                    *(unsigned char *)(v525 - 79) = 0;
                    goto LABEL_212;
                  }
LABEL_1836:
                  std::to_string(__str, v524);
                  v926 = std::string::insert(__str, 0, "expected non-negative value in struct's 'org' directive; was ");
                  std::string::size_type v927 = v926->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__c = *(_OWORD *)&v926->__r_.__value_.__l.__data_;
                  *(void *)&__c[16] = v927;
                  v926->__r_.__value_.__l.__size_ = 0;
                  v926->__r_.__value_.__r.__words[2] = 0;
                  v926->__r_.__value_.__r.__words[0] = 0;
                  *(_WORD *)&__dst[32] = 260;
                  *(void *)__dst = __c;
                  LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, (uint64_t)v238, (uint64_t)__dst, 0, 0);
                  if ((__c[23] & 0x80000000) != 0)
                  {
                    v928 = *(void **)__c;
                    goto LABEL_1912;
                  }
                  goto LABEL_1387;
                }
                v504 = "expected absolute expression in 'org' directive";
LABEL_1700:
                *(void *)__dst = v504;
                *(_WORD *)&__dst[32] = 259;
                uint64_t v152 = (uint64_t)v1039;
LABEL_729:
                uint64_t v150 = v238;
                goto LABEL_269;
              }
              if (!(*(unsigned int (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039))
              {
                uint64_t v784 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void, void, char *))(*(void *)v784 + 656))(v784, *(void *)v1060, 0, v238);
                goto LABEL_67;
              }
              v505 = " in 'org' directive";
LABEL_1341:
              *(void *)__dst = v505;
              __int16 v695 = 259;
              goto LABEL_1342;
            case 29:
              goto LABEL_998;
            case 30:
              LODWORD(__str[0].__r_.__value_.__l.__data_) = 9;
              *(void *)__c = v1039;
              *(void *)&__c[8] = __str;
              if (!llvm::MCAsmParser::parseMany(v1039, sub_1CD3B2B70, (uint64_t)__c, 1)) {
                goto LABEL_67;
              }
              v505 = " in directive";
              goto LABEL_1341;
            case 31:
              if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039)) {
                goto LABEL_265;
              }
              uint64_t v238 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
              *(void *)&__c[8] = 0;
              *(void *)__c = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c))
              {
                v633 = "expected identifier in directive";
                goto LABEL_1525;
              }
              v532 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
              *(_WORD *)&__dst[32] = 261;
              *(void *)__dst = *(void *)__c;
              *(void *)&__dst[8] = *(void *)&__c[8];
              uint64_t v533 = llvm::MCContext::getOrCreateSymbol(v532, (unsigned __int8 ***)__dst);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 25)
              {
                v633 = "unexpected token in directive";
                goto LABEL_1525;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              __str[0].__r_.__value_.__r.__words[0] = 0;
              v534 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
              if ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str))goto LABEL_265; {
              *(void *)v1060 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 25)
              {
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                v535 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
                if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, v1060)) {
                  goto LABEL_265;
                }
                if (*(unsigned char *)(*((void *)v1039 + 22) + 354))
                {
                  uint8x8_t v536 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v1060);
                  v536.i16[0] = vaddlv_u8(v536);
                  if (v536.u32[0] != 1)
                  {
                    v829 = "alignment must be a power of 2";
                    goto LABEL_1618;
                  }
                  *(void *)v1060 = 63 - __clz(*(unint64_t *)v1060);
                }
              }
              else
              {
                v535 = 0;
              }
              *(void *)__dst = "unexpected token in '.comm' or '.lcomm' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              if ((__str[0].__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
              {
                *(void *)__dst = "invalid '.comm' or '.lcomm' directive size, can't be less than zero";
                *(_WORD *)&__dst[32] = 259;
                uint64_t v152 = (uint64_t)v1039;
                uint64_t v150 = v534;
                goto LABEL_269;
              }
              if ((*(void *)v1060 & 0x8000000000000000) == 0)
              {
                int v772 = *(_DWORD *)(v533 + 8);
                if ((v772 & 2) != 0)
                {
                  if ((*(_DWORD *)(v533 + 8) & 0x1C00) == 0x800)
                  {
                    *(void *)(v533 + 24) = 0;
                    v772 &= 0xFFFFE3FF;
                  }
                  unint64_t v773 = 0;
                  *(void *)v533 &= 7uLL;
                  v772 &= ~2u;
                  *(_DWORD *)(v533 + 8) = v772;
                }
                else
                {
                  unint64_t v773 = *(void *)v533 & 0xFFFFFFFFFFFFFFF8;
                  if (v773) {
                    goto LABEL_1533;
                  }
                }
                if ((v772 & 0x1C00) == 0x800)
                {
                  *(_DWORD *)(v533 + 8) = v772 | 4;
                  unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v533 + 24));
                  *(void *)uint64_t v533 = *(void *)v533 & 7 | AssociatedFragment;
                  if (!AssociatedFragment) {
                    goto LABEL_1534;
                  }
                  goto LABEL_1699;
                }
LABEL_1533:
                if (!v773)
                {
LABEL_1534:
                  uint64_t v787 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                  (*(void (**)(uint64_t, uint64_t, std::string::size_type, void))(*(void *)v787 + 456))(v787, v533, __str[0].__r_.__value_.__r.__words[0], (1 << v1060[0]));
                  goto LABEL_67;
                }
LABEL_1699:
                v504 = "invalid symbol redefinition";
                goto LABEL_1700;
              }
              v829 = "invalid '.comm' or '.lcomm' directive alignment, can't be less than zero";
LABEL_1618:
              *(void *)__dst = v829;
              *(_WORD *)&__dst[32] = 259;
              uint64_t v152 = (uint64_t)v1039;
              uint64_t v150 = v535;
              goto LABEL_269;
            case 32:
              v539 = v1053;
              sub_1CD3A8F78((std::string *)__c, (uint64_t)v1039);
              size_t v680 = __c[23];
              if (__c[23] >= 0) {
                v681 = __c;
              }
              else {
                v681 = *(char **)__c;
              }
              if (__c[23] < 0) {
                size_t v680 = *(void *)&__c[8];
              }
              if (!v680)
              {
                unint64_t v682 = -1;
                goto LABEL_1398;
              }
              v716 = (unsigned __int8 *)&v681[v680];
              v717 = v681;
LABEL_1390:
              uint64_t v718 = 0;
              while (*v717 != asc_1CFC3D794[v718])
              {
                if (++v718 == 7)
                {
                  if (++v717 != (char *)v716) {
                    goto LABEL_1390;
                  }
                  v717 = &v681[v680];
                  break;
                }
              }
              if (v717 == (char *)v716) {
                unint64_t v682 = -1;
              }
              else {
                unint64_t v682 = v717 - v681;
              }
LABEL_1398:
              if (v680 >= v682) {
                size_t v719 = v682;
              }
              else {
                size_t v719 = v680;
              }
              if (v719)
              {
                while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                    + 8))
                {
                  (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                  sub_1CD3A8F78((std::string *)__dst, (uint64_t)v1039);
                  int v721 = __dst[23];
                  v722 = *(void **)__dst;
                  std::string::size_type v723 = *(void *)&__dst[8];
                  if (__dst[23] >= 0) {
                    v724 = __dst;
                  }
                  else {
                    v724 = *(unsigned char **)__dst;
                  }
                  if (__dst[23] >= 0) {
                    std::string::size_type v723 = __dst[23];
                  }
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v724;
                  __str[0].__r_.__value_.__l.__size_ = v723;
                  uint64_t v725 = llvm::StringRef::find((uint64_t *)__str, v681, v719, 0);
                  if (v721 < 0) {
                    operator delete(v722);
                  }
                  if (v725 != -1)
                  {
                    *(void *)__dst = "unexpected token in 'comment' directive";
                    *(_WORD *)&__dst[32] = 259;
                    char v657 = llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst);
                    goto LABEL_1443;
                  }
                }
                v720 = "unmatched delimiter in 'comment' directive";
              }
              else
              {
                v720 = "no delimiter in 'comment' directive";
              }
              *(void *)__dst = v720;
              *(_WORD *)&__dst[32] = 259;
              goto LABEL_1441;
            case 33:
              memset(v1060, 0, 24);
              uint64_t v659 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 216))(v1039, v1060))
              {
                sub_1CD3A8F78((std::string *)__dst, (uint64_t)v1039);
                if ((v1060[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v1060);
                }
                *(_OWORD *)v1060 = *(_OWORD *)__dst;
                *(void *)&v1060[16] = *(void *)&__dst[16];
              }
              if (v1060[23] >= 0) {
                uint64_t v660 = v1060[23] & 0x7F;
              }
              else {
                uint64_t v660 = *(void *)&v1060[8];
              }
              *(void *)__dst = "missing filename in 'include' directive";
              *(_WORD *)&__dst[32] = 259;
              llvm::MCAsmParser::check(v1039, v660 == 0, (const llvm::Twine *)__dst);
              if (!v660
                || (int v808 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                       + 8),
                    *(void *)__c = "unexpected token in 'include' directive",
                    LOWORD(v1076) = 259,
                    llvm::MCAsmParser::check(v1039, v808 != 9, (const llvm::Twine *)__c),
                    v808 != 9))
              {
                LOBYTE(v9) = 1;
                goto LABEL_1325;
              }
              memset(__str, 0, 24);
              int v809 = llvm::SourceMgr::AddIncludeFile(*((void **)v1039 + 30), (uint64_t)v1060, *((void *)v1039 + 17), __str);
              int v810 = v809;
              LOBYTE(v9) = v809 == 0;
              if (v809)
              {
                *((_DWORD *)v1039 + 68) = v809;
                uint64_t v961 = *(void *)(**((void **)v1039 + 30) + 24 * (v809 - 1));
                uint64_t v962 = *(void *)(v961 + 8);
                uint64_t v963 = *(void *)(v961 + 16) - v962;
                *((void *)v1039 + 24) = v962;
                *((void *)v1039 + 25) = v963;
                *((void *)v1039 + 23) = v962;
                *((void *)v1039 + 17) = 0;
                *((unsigned char *)v1039 + 211) = 1;
                sub_1CD73A068((uint64_t)v1039 + 336, 1);
              }
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str[0].__r_.__value_.__l.__data_);
              }
              std::operator+<char>();
              v811 = std::string::append(&v1055, "'");
              std::string::size_type v812 = v811->__r_.__value_.__r.__words[2];
              *(_OWORD *)v1057 = *(_OWORD *)&v811->__r_.__value_.__l.__data_;
              *(void *)&long long v1058 = v812;
              v811->__r_.__value_.__l.__size_ = 0;
              v811->__r_.__value_.__r.__words[2] = 0;
              v811->__r_.__value_.__r.__words[0] = 0;
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 260;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1057;
              if (!v810) {
                llvm::MCAsmParser::Error((uint64_t)v1039, v659, (uint64_t)__str, 0, 0);
              }
              if (SBYTE7(v1058) < 0) {
                operator delete(v1057[0]);
              }
              if ((SHIBYTE(v1055.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_1325;
              }
              v686 = (void *)v1055.__r_.__value_.__r.__words[0];
              goto LABEL_1324;
            case 34:
              v507 = v1053;
              long long v508 = v1052;
              *(void *)v1060 = 0;
              v509 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                          + 8)
                              + 8);
              *(void *)__dst = 0;
              if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *, unsigned char *))(*(void *)v1039 + 232))(v1039, v1060, __dst))goto LABEL_265; {
              uint64_t v510 = *(void *)v1060;
              }
              uint64_t v511 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              v512 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v511 + 72))(v511);
              memset(__dst, 0, 28);
              if (*(unsigned char *)v510 == 1)
              {
                uint64_t v513 = *(void *)(v510 + 16);
              }
              else
              {
                if ((llvm::MCExpr::evaluateAsRelocatableImpl(v510, (uint64_t)__dst, v512, 0, 0, 0, 0) & 1) == 0
                  || *(_OWORD *)__dst != 0)
                {
                  LOWORD(v1076) = 1283;
                  *(void *)__c = "unexpected token in '";
                  *(_OWORD *)&__c[16] = v508;
                  goto LABEL_1426;
                }
                uint64_t v513 = *(void *)&__dst[16];
              }
              *(void *)__dst = "Count is negative";
              *(_WORD *)&__dst[32] = 259;
              if (v513 < 0)
              {
                v500 = (std::string *)__dst;
                goto LABEL_958;
              }
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1283;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '";
              *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v508;
              *(void *)__c = __str;
              *(void *)&__c[16] = "' directive";
              LOWORD(v1076) = 770;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__c)) {
                goto LABEL_265;
              }
              unint64_t v757 = sub_1CD3B2D04((uint64_t)v1039, (uint64_t)v507);
              if (!v757) {
                goto LABEL_265;
              }
              unint64_t v758 = v757;
              *(void *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
              *(_DWORD *)&__c[8] = 0;
              BYTE8(v1076) = 0;
              unint64_t v1077 = 0;
              *((void *)&v1078 + 1) = __dst;
              LODWORD(v1078) = 0;
              v759 = (uint64_t *)(v757 + 56);
              *(void *)__c = &unk_1F2646FA8;
              *(_OWORD *)&__c[16] = 0uLL;
              *(void *)&long long v1076 = 0;
              uint64_t v760 = v513 + 1;
              do
              {
                LOBYTE(v9) = --v760 != 0;
                if (!v760)
                {
                  uint64_t v837 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                  sub_1CD3B33FC((int)v1039, (int)v507, *(void *)(*(void *)(v837 + 8) + 8), (llvm::raw_ostream *)__c);
                }
                v761 = *(unsigned __int8 **)(v758 + 16);
                unint64_t v762 = *(void *)(v758 + 24);
                uint64_t v763 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
              }
              while ((sub_1CD3ACA20((uint64_t)v1039, (llvm::raw_ostream *)__c, v761, v762, 0, 0, 0, 0, v759, *(void *)(*(void *)(v763 + 8) + 8)) & 1) == 0);
              goto LABEL_1215;
            case 35:
              v554 = v1053;
              *(void *)v1060 = 0;
              uint64_t v555 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              *(void *)__dst = 0;
              if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *, unsigned char *))(*(void *)v1039 + 232))(v1039, v1060, __dst))goto LABEL_265; {
              unint64_t v556 = sub_1CD3B2D04((uint64_t)v1039, (uint64_t)v554);
              }
              if (!v556) {
                goto LABEL_265;
              }
              v557 = (void *)v556;
              *(void *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
              *(_DWORD *)&__c[8] = 0;
              BYTE8(v1076) = 0;
              unint64_t v1077 = 0;
              *((void *)&v1078 + 1) = __dst;
              LODWORD(v1078) = 0;
              *(void *)__c = &unk_1F2646FA8;
              *(_OWORD *)&__c[16] = 0uLL;
              *(void *)&long long v1076 = 0;
              uint64_t v558 = *(void *)v1060;
              uint64_t v559 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              v560 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v559 + 72))(v559);
              memset(__str, 0, 28);
              if (*(unsigned char *)v558 == 1)
              {
                if (*(void *)(v558 + 16)) {
                  goto LABEL_1027;
                }
              }
              else
              {
                if ((llvm::MCExpr::evaluateAsRelocatableImpl(v558, (uint64_t)__str, v560, 0, 0, 0, 0) & 1) == 0
                  || *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ != 0)
                {
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected absolute expression in 'while' directive";
                  LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                  LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, v555, (uint64_t)__str, 0, 0);
LABEL_1215:
                  *(void *)__c = &unk_1F2646B98;
                  if (v1078 == 1 && *(void *)&__c[16]) {
                    MEMORY[0x1D25D9CB0](*(void *)&__c[16], 0x1000C8077774924);
                  }
                  if (*(unsigned char **)__dst != &__dst[24]) {
                    free(*(void **)__dst);
                  }
                  goto LABEL_212;
                }
                if (__str[0].__r_.__value_.__r.__words[2])
                {
LABEL_1027:
                  v561 = (unsigned __int8 *)v557[2];
                  unint64_t v562 = v557[3];
                  uint64_t v563 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                  if ((sub_1CD3ACA20((uint64_t)v1039, (llvm::raw_ostream *)__c, v561, v562, 0, 0, 0, 0, v557 + 7, *(void *)(*(void *)(v563 + 8) + 8)) & 1) == 0)sub_1CD3B33FC((int)v1039, (int)v554, (int)v554, (llvm::raw_ostream *)__c); {
                  LOBYTE(v9) = 1;
                  }
                  goto LABEL_1215;
                }
              }
              LOBYTE(v9) = 0;
              goto LABEL_1215;
            case 36:
              v687 = v1053;
              long long v688 = v1052;
              memset(__str, 0, 42);
              memset(&v1045, 0, sizeof(v1045));
              uint64_t v689 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str);
              char v690 = v689;
              LOWORD(v1076) = 1283;
              *(void *)__c = "expected identifier in '";
              *(_OWORD *)&__c[16] = v688;
              *(void *)__dst = __c;
              *(void *)&__dst[16] = "' directive";
              *(_WORD *)&__dst[32] = 770;
              llvm::MCAsmParser::check(v1039, v689, (const llvm::Twine *)__dst);
              if (v690) {
                goto LABEL_1328;
              }
              if (!llvm::MCAsmParser::parseOptionalToken(v1039, 10)) {
                goto LABEL_1586;
              }
              if (llvm::MCAsmParser::parseOptionalToken(v1039, 27))
              {
                if (sub_1CD3AF0CC((uint64_t)v1039, 0, (uint64_t)&__str[0].__r_.__value_.__r.__words[2], 9)) {
                  goto LABEL_1328;
                }
LABEL_1586:
                LOWORD(v1076) = 1283;
                *(void *)__c = "expected comma in '";
                *(_OWORD *)&__c[16] = v688;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)) {
                  goto LABEL_1328;
                }
                __int16 v1059 = 1283;
                v1057[0] = "values in '";
                long long v1058 = v688;
                *(void *)v1060 = v1057;
                *(void *)&v1060[16] = "' directive must be enclosed in angle brackets";
                LOWORD(v1061) = 770;
                if (llvm::MCAsmParser::parseToken(v1039, 38, (llvm::Twine *)v1060)) {
                  goto LABEL_1328;
                }
                unint64_t v813 = 0;
                for (m = 0; ; m = (void *)v1045.__r_.__value_.__l.__size_)
                {
                  if ((unint64_t)m >= v813)
                  {
                    std::string::size_type v816 = v1045.__r_.__value_.__r.__words[0];
                    unint64_t v817 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)m - v1045.__r_.__value_.__r.__words[0]) >> 3);
                    unint64_t v818 = v817 + 1;
                    if (v817 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_1610;
                    }
                    unint64_t v819 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v813 - v1045.__r_.__value_.__r.__words[0]) >> 3);
                    if (2 * v819 > v818) {
                      unint64_t v818 = 2 * v819;
                    }
                    if (v819 >= 0x555555555555555) {
                      unint64_t v820 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v820 = v818;
                    }
                    if (v820 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_1612;
                    }
                    uint64_t v821 = 3 * v820;
                    v822 = (char *)operator new(24 * v820);
                    v823 = &v822[24 * v817];
                    *((void *)v823 + 1) = 0;
                    *((void *)v823 + 2) = 0;
                    std::string::size_type v824 = (std::string::size_type)&v822[8 * v821];
                    std::string::size_type v815 = (std::string::size_type)(v823 + 24);
                    *(void *)v823 = 0;
                    if (m == (void *)v816)
                    {
                      v1045.__r_.__value_.__r.__words[0] = (std::string::size_type)&v822[24 * v817];
                      v1045.__r_.__value_.__l.__size_ = (std::string::size_type)(v823 + 24);
                      v1045.__r_.__value_.__r.__words[2] = v824;
                    }
                    else
                    {
                      v825 = m;
                      do
                      {
                        long long v826 = *(_OWORD *)(v825 - 3);
                        v825 -= 3;
                        *(_OWORD *)(v823 - 24) = v826;
                        v823 -= 24;
                        *((void *)v823 + 2) = v825[2];
                        void *v825 = 0;
                        v825[1] = 0;
                        v825[2] = 0;
                      }
                      while (v825 != (void *)v816);
                      v1045.__r_.__value_.__r.__words[0] = (std::string::size_type)v823;
                      v1045.__r_.__value_.__l.__size_ = v815;
                      v1045.__r_.__value_.__r.__words[2] = v824;
                      do
                      {
                        m -= 3;
                        *(void *)__dst = m;
                        sub_1CCBB926C((void ***)__dst);
                      }
                      while (m != (void *)v816);
                      m = (void *)v816;
                    }
                    if (m) {
                      operator delete(m);
                    }
                  }
                  else
                  {
                    std::string::size_type v815 = (std::string::size_type)(m + 3);
                    void *m = 0;
                    m[1] = 0;
                    m[2] = 0;
                  }
                  v1045.__r_.__value_.__l.__size_ = v815;
                  if (sub_1CD3AF0CC((uint64_t)v1039, (uint64_t *)__str, v815 - 24, 42)) {
                    break;
                  }
                  if (!llvm::MCAsmParser::parseOptionalToken(v1039, 25))
                  {
                    LOWORD(v1076) = 1283;
                    *(void *)__c = "values in '";
                    *(_OWORD *)&__c[16] = v688;
                    *(void *)__dst = __c;
                    *(void *)&__dst[16] = "' directive must be enclosed in angle brackets";
                    *(_WORD *)&__dst[32] = 770;
                    if (!llvm::MCAsmParser::parseToken(v1039, 42, (llvm::Twine *)__dst))
                    {
                      *(void *)v1060 = "expected End of Statement";
                      LOWORD(v1061) = 259;
                      if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)v1060))
                      {
                        unint64_t v965 = sub_1CD3B2D04((uint64_t)v1039, (uint64_t)v687);
                        if (v965)
                        {
                          *(void *)__dst = &__dst[24];
                          *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
                          *(_DWORD *)&__c[8] = 0;
                          BYTE8(v1076) = 0;
                          unint64_t v1077 = 0;
                          *((void *)&v1078 + 1) = __dst;
                          LODWORD(v1078) = 0;
                          *(void *)__c = &unk_1F2646FA8;
                          *(_OWORD *)&__c[16] = 0uLL;
                          *(void *)&long long v1076 = 0;
                          __nuint64_t k = v1045.__r_.__value_.__l.__size_;
                          uint64_t v966 = v1045.__r_.__value_.__r.__words[0];
                          if (v1045.__r_.__value_.__r.__words[0] == v1045.__r_.__value_.__l.__size_)
                          {
LABEL_1933:
                            uint64_t v973 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                            sub_1CD3B33FC((int)v1039, (int)v687, *(void *)(*(void *)(v973 + 8) + 8), (llvm::raw_ostream *)__c);
                          }
                          unint64_t v967 = v965;
                          v968 = (uint64_t *)(v965 + 56);
                          std::string::size_type v969 = v1045.__r_.__value_.__r.__words[0];
                          while (1)
                          {
                            v970 = *(unsigned __int8 **)(v967 + 16);
                            unint64_t v971 = *(void *)(v967 + 24);
                            uint64_t v972 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                            LOBYTE(v9) = 1;
                            if (sub_1CD3ACA20((uint64_t)v1039, (llvm::raw_ostream *)__c, v970, v971, (uint64_t)__str, 1u, v966, 1, v968, *(void *)(*(void *)(v972 + 8) + 8)))break; {
                            v969 += 24;
                            }
                            v966 += 24;
                            if (v969 == __nk) {
                              goto LABEL_1933;
                            }
                          }
                          *(void *)__c = &unk_1F2646B98;
                          if (v1078 == 1 && *(void *)&__c[16]) {
                            MEMORY[0x1D25D9CB0](*(void *)&__c[16], 0x1000C8077774924);
                          }
                          if (*(unsigned char **)__dst != &__dst[24]) {
                            free(*(void **)__dst);
                          }
LABEL_1329:
                          *(void *)__dst = &v1045;
                          sub_1CD37EB34((void ***)__dst);
                          *(void *)__dst = (char *)&__str[0].__r_.__value_.__l + 16;
LABEL_1330:
                          sub_1CCBB926C((void ***)__dst);
                          goto LABEL_212;
                        }
                      }
                    }
LABEL_1328:
                    LOBYTE(v9) = 1;
                    goto LABEL_1329;
                  }
                  llvm::MCAsmParser::parseOptionalToken(v1039, 9);
                  unint64_t v813 = v1045.__r_.__value_.__r.__words[2];
                }
                LOWORD(v1076) = 1283;
                *(void *)__c = " in arguments for '";
                *(_OWORD *)&__c[16] = v688;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                char v925 = llvm::MCAsmParser::addErrorSuffix(v1039, (const llvm::Twine *)__dst);
LABEL_1834:
                LOBYTE(v9) = v925;
                goto LABEL_1329;
              }
              long long v1084 = 0uLL;
              uint64_t v908 = *((void *)v1039 + 17);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, long long *))(*(void *)v1039 + 192))(v1039, &v1084))
              {
                __int16 v1059 = 1283;
                v1057[0] = "missing parameter qualifier for '";
                long long v1058 = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                *(void *)v1060 = v1057;
                *(void *)&v1060[16] = "' in '";
                LOWORD(v1061) = 770;
                *(void *)__c = v1060;
                *(_OWORD *)&__c[16] = v688;
                LOWORD(v1076) = 1282;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
              }
              else
              {
                std::string::size_type v923 = *((void *)&v1084 + 1);
                if (*((void *)&v1084 + 1) == 3
                  && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1084, "req", 3uLL))
                {
                  __str[1].__r_.__value_.__s.__data_[16] = 1;
                  goto LABEL_1586;
                }
                __int16 v1056 = 773;
                v1055.__r_.__value_.__r.__words[0] = v1084;
                v1055.__r_.__value_.__l.__size_ = v923;
                v1055.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not a valid parameter qualifier for '";
                v1057[0] = &v1055;
                long long v1058 = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                __int16 v1059 = 1282;
                *(void *)v1060 = v1057;
                *(void *)&v1060[16] = "' in '";
                LOWORD(v1061) = 770;
                *(void *)__c = v1060;
                *(_OWORD *)&__c[16] = v688;
                LOWORD(v1076) = 1282;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
              }
              char v925 = llvm::MCAsmParser::Error((uint64_t)v1039, v908, (uint64_t)__dst, 0, 0);
              goto LABEL_1834;
            case 37:
              v636 = v1053;
              long long v637 = v1052;
              memset(__str, 0, 42);
              memset(&v1055, 0, sizeof(v1055));
              uint64_t v638 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str);
              char v639 = v638;
              LOWORD(v1076) = 1283;
              *(void *)__c = "expected identifier in '";
              *(_OWORD *)&__c[16] = v637;
              *(void *)__dst = __c;
              *(void *)&__dst[16] = "' directive";
              *(_WORD *)&__dst[32] = 770;
              llvm::MCAsmParser::check(v1039, v638, (const llvm::Twine *)__dst);
              if (v639) {
                goto LABEL_1234;
              }
              __int16 v1059 = 1283;
              v1057[0] = "expected comma in '";
              long long v1058 = v637;
              *(void *)v1060 = v1057;
              *(void *)&v1060[16] = "' directive";
              LOWORD(v1061) = 770;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)v1060)) {
                goto LABEL_1234;
              }
              if (!(*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 216))(v1039, &v1055))goto LABEL_1546; {
              sub_1CD3A8F78((std::string *)__dst, (uint64_t)v1039);
              }
              if (SHIBYTE(v1055.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1055.__r_.__value_.__l.__data_);
              }
              std::string v1055 = *(std::string *)__dst;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 9)
              {
                uint64_t v788 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                std::string::append(&v1055, *(const std::string::value_type **)(*(void *)(v788 + 8) + 8), *(void *)(*(void *)(v788 + 8) + 16));
              }
              std::string::size_type v789 = *((unsigned char *)&v1055.__r_.__value_.__s + 23) & 0x7F;
              std::string::size_type v790 = 0;
              if ((v1055.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v789 = v1055.__r_.__value_.__l.__size_;
              }
              if (!v789) {
                goto LABEL_1545;
              }
              v919 = &v1055;
              if ((v1055.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v919 = (std::string *)v1055.__r_.__value_.__r.__words[0];
              }
              do
              {
                unsigned int v920 = v919->__r_.__value_.__s.__data_[v790];
                BOOL v901 = v920 > 0x20;
                uint64_t v921 = (1 << v920) & 0x100003E00;
                if (!v901 && v921 != 0) {
                  goto LABEL_1545;
                }
                ++v790;
              }
              while (v789 != v790);
              std::string::size_type v790 = v789;
LABEL_1545:
              std::string::resize(&v1055, v790, 0);
LABEL_1546:
              *(void *)__dst = "expected end of statement";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)
                || (unint64_t v791 = sub_1CD3B2D04((uint64_t)v1039, (uint64_t)v636)) == 0)
              {
LABEL_1234:
                LOBYTE(v9) = 1;
              }
              else
              {
                unint64_t v792 = v791;
                std::string::size_type v793 = 0;
                *(void *)__dst = &__dst[24];
                *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
                *(_DWORD *)&__c[8] = 0;
                BYTE8(v1076) = 0;
                unint64_t v1077 = 0;
                *((void *)&v1078 + 1) = __dst;
                LODWORD(v1078) = 0;
                *(void *)__c = &unk_1F2646FA8;
                *(_OWORD *)&__c[16] = 0uLL;
                *(void *)&long long v1076 = 0;
                v794 = &v1055;
                if ((v1055.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v794 = (std::string *)v1055.__r_.__value_.__r.__words[0];
                }
                __nunint64_t i = v794;
                if ((v1055.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v795 = *((unsigned char *)&v1055.__r_.__value_.__s + 23) & 0x7F;
                }
                else {
                  std::string::size_type v795 = v1055.__r_.__value_.__l.__size_;
                }
                v796 = (uint64_t *)(v791 + 56);
                do
                {
                  LOBYTE(v9) = v795 != v793;
                  if (v795 == v793)
                  {
                    uint64_t v918 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                    sub_1CD3B33FC((int)v1039, (int)v636, *(void *)(*(void *)(v918 + 8) + 8), (llvm::raw_ostream *)__c);
                  }
                  std::string::size_type v797 = v793 + 1;
                  if (v795 >= v793) {
                    std::string::size_type v798 = v793;
                  }
                  else {
                    std::string::size_type v798 = v795;
                  }
                  if (v798 <= v797) {
                    std::string::size_type v799 = v793 + 1;
                  }
                  else {
                    std::string::size_type v799 = v798;
                  }
                  if (v795 < v799) {
                    std::string::size_type v799 = v795;
                  }
                  v800 = (char *)__ni + v798;
                  std::string::size_type v801 = v799 - v798;
                  v1061 = &v1058;
                  v802 = operator new(0x28uLL);
                  *(_DWORD *)v802 = 2;
                  v802[1] = v800;
                  v802[2] = v801;
                  *((_DWORD *)v802 + 8) = 64;
                  v802[3] = 0;
                  v803 = v802 + 5;
                  v1057[0] = v802;
                  v1057[1] = v802 + 5;
                  *(void *)&long long v1058 = v802 + 5;
                  memset(v1060, 0, sizeof(v1060));
                  sub_1CD8F3EEC((uint64_t)v1060);
                  v1057[1] = v803;
                  v804 = *(unsigned __int8 **)(v792 + 16);
                  unint64_t v805 = *(void *)(v792 + 24);
                  uint64_t v806 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
                  LOBYTE(v804) = sub_1CD3ACA20((uint64_t)v1039, (llvm::raw_ostream *)__c, v804, v805, (uint64_t)__str, 1u, (uint64_t)v1057, 1, v796, *(void *)(*(void *)(v806 + 8) + 8));
                  *(void *)v1060 = v1057;
                  sub_1CCBB926C((void ***)v1060);
                  std::string::size_type v793 = v797;
                }
                while ((v804 & 1) == 0);
                *(void *)__c = &unk_1F2646B98;
                if (v1078 == 1 && *(void *)&__c[16]) {
                  MEMORY[0x1D25D9CB0](*(void *)&__c[16], 0x1000C8077774924);
                }
                if (*(unsigned char **)__dst != &__dst[24]) {
                  free(*(void **)__dst);
                }
              }
              if (SHIBYTE(v1055.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1055.__r_.__value_.__l.__data_);
              }
              *(void *)__dst = (char *)&__str[0].__r_.__value_.__l + 16;
              goto LABEL_1330;
            case 60:
              v661 = v1053;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 4)
              {
                uint64_t v662 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
                uint64_t v665 = *(void *)(v662 + 24);
                uint64_t v663 = v662 + 24;
                uint64_t v664 = v665;
                if (*(_DWORD *)(v663 + 8) >= 0x41u) {
                  uint64_t v663 = v664;
                }
                uint64_t v666 = *(void *)v663;
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                if (v666 < 0)
                {
                  v633 = "negative file number";
                  goto LABEL_1525;
                }
              }
              else
              {
                uint64_t v666 = -1;
              }
              memset(__str, 0, 24);
              int v715 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              *(void *)__dst = "unexpected token in '.file' directive";
              *(_WORD *)&__dst[32] = 259;
              llvm::MCAsmParser::check(v1039, v715 != 3, (const llvm::Twine *)__dst);
              if (v715 != 3
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 208))(v1039, __str) & 1) != 0)
              {
                LOBYTE(v9) = 1;
                goto LABEL_1387;
              }
              memset(v1060, 0, 24);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 3)
              {
                *(void *)__dst = "explicit path specified, but no file number";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v666 == -1, (const llvm::Twine *)__dst);
                if (v666 == -1
                  || ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 208))(v1039, v1060) & 1) != 0)
                {
                  LOBYTE(v9) = 1;
                  goto LABEL_1910;
                }
                if (v1060[23] >= 0) {
                  v875 = (std::string *)v1060;
                }
                else {
                  v875 = *(std::string **)v1060;
                }
                std::string::size_type v936 = v1060[23] & 0x7F;
                if (v1060[23] < 0) {
                  std::string::size_type v936 = *(void *)&v1060[8];
                }
                std::string::size_type __nj = v936;
                v937 = __str;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v937 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
                }
                std::string::size_type v938 = *((unsigned char *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v938 = __str[0].__r_.__value_.__l.__size_;
                }
                v1014 = (void *)v938;
                v1019 = v937;
              }
              else
              {
                v1014 = 0;
                v1019 = 0;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v875 = __str;
                }
                else {
                  v875 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
                }
                std::string::size_type v876 = *((unsigned char *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v876 = __str[0].__r_.__value_.__l.__size_;
                }
                std::string::size_type __nj = v876;
              }
              v1057[0] = 0;
              v1057[1] = 0;
              *(void *)&long long v1058 = 0;
              if (llvm::MCAsmParser::parseOptionalToken(v1039, 9))
              {
                unint64_t v878 = 0;
                unint64_t __pe = 0;
                std::string::size_type v879 = 0;
                char v880 = 0;
LABEL_1710:
                if (v666 == -1)
                {
                  if (*(unsigned char *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039)
                                            + 152)
                                + 364))
                  {
                    uint64_t v907 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(void *)v907 + 664))(v907, v875, __nj);
                  }
                  goto LABEL_1897;
                }
                uint64_t v881 = *((void *)v1039 + 27);
                if (*(unsigned char *)(v881 + 1513))
                {
                  v940 = *(uint64_t **)(v881 + 1480);
                  if (v940)
                  {
                    while (1)
                    {
                      v941 = (uint64_t **)v940;
                      if (!*((_DWORD *)v940 + 8)) {
                        break;
                      }
                      v940 = (uint64_t *)*v940;
                      if (!*v941) {
                        goto LABEL_1984;
                      }
                    }
                    v942 = (char *)v940;
                  }
                  else
                  {
                    v941 = (uint64_t **)(v881 + 1480);
LABEL_1984:
                    v942 = (char *)operator new(0x228uLL);
                    *((_DWORD *)v942 + 8) = 0;
                    *(_OWORD *)(v942 + 56) = 0u;
                    *(_OWORD *)(v942 + 72) = 0u;
                    *(_OWORD *)(v942 + 88) = 0u;
                    *(_OWORD *)(v942 + 104) = 0u;
                    *(_OWORD *)(v942 + 120) = 0u;
                    *(_OWORD *)(v942 + 136) = 0u;
                    *(_OWORD *)(v942 + 168) = 0u;
                    *(_OWORD *)(v942 + 184) = 0u;
                    *(_OWORD *)(v942 + 200) = 0u;
                    *(_OWORD *)(v942 + 216) = 0u;
                    *(_OWORD *)(v942 + 232) = 0u;
                    *(_OWORD *)(v942 + 248) = 0u;
                    *((void *)v942 + 65) = 0;
                    *(_OWORD *)(v942 + 264) = 0u;
                    *(_OWORD *)(v942 + 280) = 0u;
                    *(_OWORD *)(v942 + 40) = 0u;
                    *(_OWORD *)(v942 + 296) = 0u;
                    *(_OWORD *)(v942 + 312) = 0u;
                    *(_OWORD *)(v942 + 328) = 0u;
                    *(_OWORD *)(v942 + 344) = 0u;
                    *(_OWORD *)(v942 + 360) = 0u;
                    *(_OWORD *)(v942 + 376) = 0u;
                    *(_OWORD *)(v942 + 392) = 0u;
                    *(_OWORD *)(v942 + 408) = 0u;
                    *(_OWORD *)(v942 + 424) = 0u;
                    *(_OWORD *)(v942 + 440) = 0u;
                    *(_OWORD *)(v942 + 456) = 0u;
                    *(_OWORD *)(v942 + 472) = 0u;
                    *(_OWORD *)(v942 + 152) = 0u;
                    *(_OWORD *)(v942 + 488) = 0u;
                    *(_OWORD *)(v942 + 504) = 0u;
                    *((void *)v942 + 6) = v942 + 64;
                    *((_DWORD *)v942 + 15) = 3;
                    *((void *)v942 + 17) = v942 + 152;
                    *((_DWORD *)v942 + 37) = 3;
                    *((void *)v942 + 47) = 0;
                    *((void *)v942 + 46) = 0;
                    *((void *)v942 + 48) = 0x1000000000;
                    *((_OWORD *)v942 + 25) = 0u;
                    *((_OWORD *)v942 + 26) = 0u;
                    *((_OWORD *)v942 + 27) = 0u;
                    *(void *)(v942 + 445) = 0;
                    v942[497] = 1;
                    *((void *)v942 + 64) = 0;
                    *((void *)v942 + 63) = 0;
                    *((_DWORD *)v942 + 130) = 0;
                    *((void *)v942 + 66) = 0;
                    *((void *)v942 + 68) = 0;
                    *((void *)v942 + 67) = 0;
                    *(void *)v942 = 0;
                    *((void *)v942 + 1) = 0;
                    *((void *)v942 + 2) = v941;
                    *v941 = (uint64_t *)v942;
                    v987 = (uint64_t *)v942;
                    uint64_t v988 = **(void **)(v881 + 1472);
                    if (v988)
                    {
                      *(void *)(v881 + 1472) = v988;
                      v987 = *v941;
                    }
                    sub_1CB8358B8(*(uint64_t **)(v881 + 1480), v987);
                    ++*(void *)(v881 + 1488);
                  }
                  sub_1CD8F42AC((uint64_t)(v942 + 40));
                  uint64_t v881 = *((void *)v1039 + 27);
                  *(unsigned char *)(v881 + 1513) = 0;
                  if (v880) {
                    goto LABEL_1713;
                  }
                }
                else if (v880)
                {
LABEL_1713:
                  uint64x2_t v882 = (uint64x2_t)vdupq_n_s64(__pe);
                  uint64x2_t v883 = (uint64x2_t)vdupq_n_s64(v878);
                  *(int8x8_t *)v882.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v882, (uint64x2_t)xmmword_1CFB33B40), (int32x4_t)vshlq_u64(v882, (uint64x2_t)xmmword_1CFB33B30)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v882, (uint64x2_t)xmmword_1CFB33B60), (int32x4_t)vshlq_u64(v882, (uint64x2_t)xmmword_1CFB33B50))));
                  int8x8_t v3 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v883, (uint64x2_t)xmmword_1CFB33B40), (int32x4_t)vshlq_u64(v883, (uint64x2_t)xmmword_1CFB33B30)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v883, (uint64x2_t)xmmword_1CFB33B60), (int32x4_t)vshlq_u64(v883, (uint64x2_t)xmmword_1CFB33B50))));
                  __int8 v884 = v882.i8[0];
                  int8x8_t __pf = vext_s8(*(int8x8_t *)v882.i8, *(int8x8_t *)v882.i8, 1uLL);
                  char v885 = 1;
LABEL_1869:
                  if (v879)
                  {
                    if ((SBYTE7(v1058) & 0x80u) == 0) {
                      unsigned int v943 = BYTE7(v1058) & 0x7F;
                    }
                    else {
                      unsigned int v943 = v1057[1];
                    }
                    v944 = (void *)sub_1CB906F34((uint64_t *)(v881 + 192), v943, 3);
                    std::string::size_type v945 = (std::string::size_type)v944;
                    if ((SBYTE7(v1058) & 0x80u) == 0) {
                      v946 = v1057;
                    }
                    else {
                      v946 = (void **)v1057[0];
                    }
                    if ((SBYTE7(v1058) & 0x80u) == 0) {
                      size_t v947 = BYTE7(v1058) & 0x7F;
                    }
                    else {
                      size_t v947 = (size_t)v1057[1];
                    }
                    memcpy(v944, v946, v947);
                    if ((SBYTE7(v1058) & 0x80u) == 0) {
                      std::string::size_type v879 = BYTE7(v1058) & 0x7F;
                    }
                    else {
                      std::string::size_type v879 = (std::string::size_type)v1057[1];
                    }
                    std::string::value_type v948 = 1;
                  }
                  else
                  {
                    std::string::value_type v948 = 0;
                    std::string::size_type v945 = 0;
                  }
                  if (v666)
                  {
                    uint64_t v949 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    LOBYTE(v1081) = v884;
                    HIBYTE(v1081) = __pf.i8[6];
                    *(_WORD *)((char *)&v1081 + 5) = __pf.i16[2];
                    *(_DWORD *)((char *)&v1081 + 1) = __pf.i32[0];
                    v1082 = (std::string *)v3;
                    LOBYTE(v1083) = v885;
                    v1045.__r_.__value_.__r.__words[0] = v945;
                    v1045.__r_.__value_.__l.__size_ = v879;
                    v1045.__r_.__value_.__s.__data_[16] = v948;
                    *(_DWORD *)((char *)&v1045.__r_.__value_.__r.__words[2] + 1) = v1054[0];
                    HIDWORD(v1045.__r_.__value_.__r.__words[2]) = *(_DWORD *)((char *)v1054 + 3);
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v949 + 688))(v1086);
                    if (v1086[1])
                    {
                      v950 = (void **)v1086[0];
                      v1086[0] = 0;
                      v1062 = v950;
                      sub_1CD4FB504((uint64_t *)&v1062, (std::string *)__c);
                      *(_WORD *)&__dst[32] = 260;
                      *(void *)__dst = __c;
                      LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, (uint64_t)v661, (uint64_t)__dst, 0, 0);
                      if ((__c[23] & 0x80000000) != 0) {
                        operator delete(*(void **)__c);
                      }
                      if (v1062) {
                        (*((void (**)(void **))*v1062 + 1))(v1062);
                      }
                      if (v1086[1])
                      {
                        uint64_t v951 = v1086[0];
                        v1086[0] = 0;
                        if (v951) {
                          (*(void (**)(uint64_t))(*(void *)v951 + 8))(v951);
                        }
                      }
                      goto LABEL_1908;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)(*((void *)v1039 + 27) + 1624) <= 4u)
                    {
                      *(void *)__dst = "file 0 not supported prior to DWARF-5";
                      *(_WORD *)&__dst[32] = 259;
                      v952 = v1039;
LABEL_1906:
                      char v956 = (*(uint64_t (**)(llvm::MCAsmParser *, char *, unsigned char *, void, void))(*(void *)v952 + 168))(v952, v661, __dst, 0, 0);
                      goto LABEL_1907;
                    }
                    uint64_t v953 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    BYTE7(v1084) = __pf.i8[6];
                    LOBYTE(v1084) = v884;
                    *(_WORD *)((char *)&v1084 + 5) = __pf.i16[2];
                    *(_DWORD *)((char *)&v1084 + 1) = __pf.i32[0];
                    *((int8x8_t *)&v1084 + 1) = v3;
                    LOBYTE(v1085) = v885;
                    v1055.__r_.__value_.__r.__words[0] = v945;
                    v1055.__r_.__value_.__l.__size_ = v879;
                    v1055.__r_.__value_.__s.__data_[16] = v948;
                    *(_DWORD *)((char *)&v1055.__r_.__value_.__r.__words[2] + 1) = v1054[0];
                    HIDWORD(v1055.__r_.__value_.__r.__words[2]) = *(_DWORD *)((char *)v1054 + 3);
                    (*(void (**)(uint64_t, std::string *, void *, std::string *, std::string::size_type, long long *, std::string *, void))(*(void *)v953 + 696))(v953, v1019, v1014, v875, __nj, &v1084, &v1055, 0);
                  }
                  if (!*((unsigned char *)v1039 + 1062))
                  {
                    v954 = (void *)(*((void *)v1039 + 27) + 1480);
                    do
                    {
                      uint64_t v955 = (uint64_t)v954;
                      v954 = (void *)*v954;
                    }
                    while (v954);
                    if (v955 == *((void *)v1039 + 27) + 1480 || *(_DWORD *)(v955 + 32)) {
                      uint64_t v955 = *((void *)v1039 + 27) + 1480;
                    }
                    if (*(_DWORD *)(v955 + 144) && *(unsigned __int8 *)(v955 + 497) != *(unsigned __int8 *)(v955 + 498))
                    {
                      v952 = v1039;
                      *((unsigned char *)v1039 + 1062) = 1;
                      *(void *)__dst = "inconsistent use of MD5 checksums";
                      *(_WORD *)&__dst[32] = 259;
                      goto LABEL_1906;
                    }
                  }
LABEL_1897:
                  LOBYTE(v9) = 0;
                  goto LABEL_1908;
                }
                char v885 = 0;
                __int8 v884 = 0;
                int8x8_t __pf = v877;
                goto LABEL_1869;
              }
              char v880 = 0;
              std::string::size_type v879 = 0;
              unint64_t __pe = 0;
              unint64_t v878 = 0;
              while (1)
              {
                v1054[0] = 0;
                v1054[1] = 0;
                int v892 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8);
                *(void *)__dst = "unexpected token in '.file' directive";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v892 != 2, (const llvm::Twine *)__dst);
                if (v892 != 2
                  || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)v1039 + 192))(v1039, v1054) & 1) != 0)
                {
LABEL_1782:
                  LOBYTE(v9) = 1;
                  goto LABEL_1908;
                }
                if (v1054[1] != 6) {
                  break;
                }
                if (*(_DWORD *)v1054[0] != 1920298867 || *(_WORD *)(v1054[0] + 4) != 25955)
                {
LABEL_1913:
                  *(void *)__dst = "unexpected token in '.file' directive";
                  *(_WORD *)&__dst[32] = 259;
                  char v956 = llvm::MCAsmParser::TokError((uint64_t)v1039, (uint64_t)__dst, 0, 0);
LABEL_1907:
                  LOBYTE(v9) = v956;
LABEL_1908:
                  if (SBYTE7(v1058) < 0) {
                    operator delete(v1057[0]);
                  }
LABEL_1910:
                  if ((v1060[23] & 0x80000000) != 0)
                  {
                    v928 = *(void **)v1060;
LABEL_1912:
                    operator delete(v928);
                  }
LABEL_1387:
                  if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_212;
                  }
                  v602 = (char *)__str[0].__r_.__value_.__r.__words[0];
LABEL_1794:
                  operator delete(v602);
                  goto LABEL_212;
                }
                *(void *)__dst = "source specified, but no file number";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v666 == -1, (const llvm::Twine *)__dst);
                if (v666 == -1) {
                  goto LABEL_1782;
                }
                int v897 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8);
                *(void *)__c = "unexpected token in '.file' directive";
                LOWORD(v1076) = 259;
                llvm::MCAsmParser::check(v1039, v897 != 3, (const llvm::Twine *)__c);
                if (v897 != 3) {
                  goto LABEL_1782;
                }
                LOBYTE(v9) = 1;
                std::string::size_type v879 = 1;
                if ((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(void *)v1039 + 208))(v1039, v1057)) {
                  goto LABEL_1908;
                }
LABEL_1776:
                if (llvm::MCAsmParser::parseOptionalToken(v1039, 9)) {
                  goto LABEL_1710;
                }
              }
              if (v1054[1] != 3) {
                goto LABEL_1913;
              }
              if (*(_WORD *)v1054[0] != 25709 || *(unsigned char *)(v1054[0] + 2) != 53) {
                goto LABEL_1913;
              }
              *(void *)__c = "MD5 checksum specified, but no file number";
              LOWORD(v1076) = 259;
              llvm::MCAsmParser::check(v1039, v666 == -1, (const llvm::Twine *)__c);
              if (v666 == -1) {
                goto LABEL_1782;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 4
                && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 5)
              {
                *(void *)__dst = "unknown token in expression";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = 1;
                char v880 = 1;
                if (llvm::MCAsmParser::TokError((uint64_t)v1039, (uint64_t)__dst, 0, 0)) {
                  goto LABEL_1908;
                }
                goto LABEL_1776;
              }
              uint64_t v894 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              uint64_t v895 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              LODWORD(v1086[1]) = *(_DWORD *)(v895 + 32);
              if (LODWORD(v1086[1]) > 0x40) {
                operator new[]();
              }
              v1086[0] = *(void *)(v895 + 24);
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              if (LODWORD(v1086[1]) >= 0x41)
              {
                int v899 = 0;
                v898 = (uint64_t *)v1086[0];
                int64_t v900 = ((unint64_t)LODWORD(v1086[1]) + 63) >> 6;
                do
                {
                  BOOL v901 = v900-- < 1;
                  if (v901) {
                    break;
                  }
                  unint64_t v902 = *(void *)(v1086[0] + 8 * v900);
                  v899 += __clz(v902);
                }
                while (!v902);
                unsigned int v903 = LODWORD(v1086[1]) | 0xFFFFFFC0;
                if ((v1086[1] & 0x3F) == 0) {
                  unsigned int v903 = 0;
                }
                unsigned int v904 = LODWORD(v1086[1]) - v899 - v903;
                if (v904 >= 0x81)
                {
                  *(void *)__dst = "out of range literal value";
                  *(_WORD *)&__dst[32] = 259;
                  char v905 = llvm::MCAsmParser::Error((uint64_t)v1039, v894, (uint64_t)__dst, 0, 0);
                  goto LABEL_1764;
                }
                if (v904 >= 0x41)
                {
                  llvm::APInt::getHiBits((llvm::APInt *)v1086, LODWORD(v1086[1]) - 64, (uint64_t)__dst);
                  v906 = (unint64_t *)__dst;
                  if (*(_DWORD *)&__dst[8] >= 0x41u) {
                    v906 = *(unint64_t **)__dst;
                  }
                  unint64_t __pe = *v906;
                  if (*(_DWORD *)&__dst[8] >= 0x41u && *(void *)__dst) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  if (LODWORD(v1086[1]) > 0x40) {
                    operator new[]();
                  }
                  unint64_t v878 = v1086[0];
                  char v880 = 1;
                  goto LABEL_1776;
                }
              }
              else
              {
                v898 = v1086;
              }
              unint64_t __pe = 0;
              char v905 = 0;
              unint64_t v878 = *v898;
LABEL_1764:
              if (LODWORD(v1086[1]) >= 0x41 && v1086[0]) {
                MEMORY[0x1D25D9CB0](v1086[0], 0x1000C8000313F17);
              }
              LOBYTE(v9) = 1;
              char v880 = 1;
              if (v905) {
                goto LABEL_1908;
              }
              goto LABEL_1776;
            case 61:
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 4)
              {
                *(void *)__dst = "unexpected token in '.line' directive";
                *(_WORD *)&__dst[32] = 259;
                if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)__c, (const llvm::Twine *)__dst)) {
                  goto LABEL_265;
                }
              }
              *(void *)__dst = "unexpected token in '.line' directive";
              *(_WORD *)&__dst[32] = 259;
              v538 = (const llvm::Twine *)__dst;
              goto LABEL_1315;
            case 62:
              *(void *)v1060 = 0;
              v509 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                          + 8)
                              + 8);
              *(void *)__dst = "unexpected token in '.loc' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)v1060, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              uint64_t v678 = *(void *)v1060;
              if (*(uint64_t *)v1060 <= 0)
              {
                unsigned int v679 = *(unsigned __int16 *)(*((void *)v1039 + 27) + 1624);
                *(void *)__c = "file number less than one in '.loc' directive";
                LOWORD(v1076) = 259;
                if (v679 <= 4)
                {
                  v500 = (std::string *)__c;
LABEL_958:
                  uint64_t v501 = (uint64_t)v1039;
                  uint64_t v502 = (uint64_t)v509;
                  goto LABEL_1220;
                }
              }
              v830 = (uint64_t **)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
              BOOL isValidDwarfFileNumber = llvm::MCContext::isValidDwarfFileNumber(v830, v678, 0);
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unassigned file number in '.loc' directive";
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
              if (!isValidDwarfFileNumber)
              {
                v500 = __str;
                goto LABEL_958;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 4)
              {
                uint64_t v832 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
                v835 = *(uint64_t **)(v832 + 24);
                v833 = (uint64_t *)(v832 + 24);
                v834 = v835;
                if (*((_DWORD *)v833 + 2) >= 0x41u) {
                  v833 = v834;
                }
                uint64_t v836 = *v833;
                if (*v833 < 0)
                {
                  v633 = "line number less than zero in '.loc' directive";
LABEL_1525:
                  *(void *)__dst = v633;
                  __int16 v696 = 259;
LABEL_1526:
                  *(_WORD *)&__dst[32] = v696;
                  uint64_t v684 = (uint64_t)v1039;
LABEL_1527:
                  char v70 = llvm::MCAsmParser::TokError(v684, (uint64_t)__dst, 0, 0);
                  goto LABEL_211;
                }
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              }
              else
              {
                uint64_t v836 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 4)
              {
                uint64_t v872 = 0;
LABEL_1695:
                LODWORD(__str[0].__r_.__value_.__l.__data_) = *(unsigned char *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039)
                                                                       + 1506) & 1;
                LODWORD(v1057[0]) = 0;
                *(void *)__c = 0;
                *(void *)__dst = v1039;
                *(void *)&__dst[8] = __str;
                *(void *)&__dst[16] = v1057;
                *(void *)&__dst[24] = __c;
                LOBYTE(v9) = llvm::MCAsmParser::parseMany(v1039, sub_1CD3B36A4, (uint64_t)__dst, 0);
                if ((v9 & 1) == 0)
                {
                  uint64_t v873 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v873 + 712))(v873, v678, v836, v872, LODWORD(__str[0].__r_.__value_.__l.__data_), LODWORD(v1057[0]), *(unsigned int *)__c);
                }
                goto LABEL_212;
              }
              uint64_t v868 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              v871 = *(uint64_t **)(v868 + 24);
              v869 = (uint64_t *)(v868 + 24);
              v870 = v871;
              if (*((_DWORD *)v869 + 2) >= 0x41u) {
                v869 = v870;
              }
              uint64_t v872 = *v869;
              if ((*v869 & 0x8000000000000000) == 0)
              {
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                goto LABEL_1695;
              }
              v633 = "column position less than zero in '.loc' directive";
              goto LABEL_1525;
            case 63:
              *(void *)__dst = "unsupported directive '.stabs'";
              *(_WORD *)&__dst[32] = 259;
              uint64_t v684 = (uint64_t)v1039;
              goto LABEL_1527;
            case 64:
              uint64_t v685 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              v1055.__r_.__value_.__r.__words[0] = 0;
              memset(v1060, 0, 24);
              v1057[0] = 0;
              v1057[1] = 0;
              *(void *)&long long v1058 = 0;
              v1045.__r_.__value_.__r.__words[0] = 0;
              *(void *)__dst = "expected file number in '.cv_file' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)&v1055, (const llvm::Twine *)__dst)) {
                goto LABEL_1321;
              }
              *(void *)__c = "file number less than one";
              LOWORD(v1076) = 259;
              if ((uint64_t)v1055.__r_.__value_.__l.__data_ <= 0)
              {
                llvm::MCAsmParser::Error((uint64_t)v1039, v685, (uint64_t)__c, 0, 0);
LABEL_1321:
                LOBYTE(v9) = 1;
                goto LABEL_1322;
              }
              int v838 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
              llvm::MCAsmParser::check(v1039, v838 != 3, (const llvm::Twine *)__str);
              if (v838 != 3
                || ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 208))(v1039, v1060) & 1) != 0)
              {
                goto LABEL_1321;
              }
              if (llvm::MCAsmParser::parseOptionalToken(v1039, 9))
              {
                v839 = 0;
                v840 = 0;
                char v841 = 0;
              }
              else
              {
                int v974 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8);
                *(void *)__dst = "unexpected token in '.cv_file' directive";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v974 != 3, (const llvm::Twine *)__dst);
                if (v974 != 3) {
                  goto LABEL_1321;
                }
                if ((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(void *)v1039 + 208))(v1039, v1057)) {
                  goto LABEL_1321;
                }
                *(void *)__c = "expected checksum kind in '.cv_file' directive";
                LOWORD(v1076) = 259;
                if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)&v1045, (const llvm::Twine *)__c)) {
                  goto LABEL_1321;
                }
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__str)) {
                  goto LABEL_1321;
                }
                char v841 = BYTE7(v1058);
                v840 = (void **)v1057[0];
                v839 = v1057[1];
              }
              int v842 = v841;
              if (v841 >= 0) {
                v843 = v1057;
              }
              else {
                v843 = v840;
              }
              unint64_t v844 = v841 & 0x7F;
              if (v842 >= 0) {
                unint64_t v845 = v844;
              }
              else {
                unint64_t v845 = (unint64_t)v839;
              }
              memset(__dst, 0, 24);
              if (!v845) {
                goto LABEL_1656;
              }
              std::string::resize((std::string *)__dst, (v845 + 1) >> 1, 0);
              v846 = *(unsigned char **)__dst;
              if (__dst[23] >= 0) {
                v847 = __dst;
              }
              else {
                v847 = *(unsigned char **)__dst;
              }
              if ((v845 & 1) == 0) {
                goto LABEL_1649;
              }
              int v848 = (unsigned __int16)word_1CFAC4A4C[*(unsigned __int8 *)v843];
              if (v848 != 0xFFFF)
              {
                if (__dst[23] >= 0) {
                  v846 = __dst;
                }
                unsigned char *v847 = v848;
                v847 = v846 + 1;
                v849 = v1057;
                if (v842 < 0) {
                  v849 = v840;
                }
                v843 = (void **)((char *)v849 + 1);
                --v845;
LABEL_1649:
                if (v845 >= 2)
                {
                  unint64_t v850 = v845 >> 1;
                  v851 = (unsigned __int8 *)v843 + 1;
                  do
                  {
                    int v852 = (unsigned __int16)word_1CFAC4A4C[*(v851 - 1)];
                    int v853 = (unsigned __int16)word_1CFAC4A4C[*v851];
                    if (v852 == 0xFFFF || v853 == 0xFFFF) {
                      break;
                    }
                    v851 += 2;
                    *v847++ = v853 | (16 * v852);
                    --v850;
                  }
                  while (v850);
                }
              }
LABEL_1656:
              if (SBYTE7(v1058) < 0) {
                operator delete(v1057[0]);
              }
              *(void *)&long long v1058 = *(void *)&__dst[16];
              *(_OWORD *)v1057 = *(_OWORD *)__dst;
              if (__dst[23] >= 0) {
                unsigned int v855 = __dst[23] & 0x7F;
              }
              else {
                unsigned int v855 = *(_DWORD *)&__dst[8];
              }
              v856 = (void *)sub_1CB906F34((uint64_t *)(*((void *)v1039 + 27) + 192), v855, 0);
              if ((SBYTE7(v1058) & 0x80u) == 0) {
                v857 = v1057;
              }
              else {
                v857 = (void **)v1057[0];
              }
              if ((SBYTE7(v1058) & 0x80u) == 0) {
                size_t v858 = BYTE7(v1058) & 0x7F;
              }
              else {
                size_t v858 = (size_t)v1057[1];
              }
              memcpy(v856, v857, v858);
              uint64_t v859 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              if ((*(uint64_t (**)(void))(*(void *)v859 + 720))())
              {
                LOBYTE(v9) = 0;
              }
              else
              {
                *(void *)__dst = "file number already allocated";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, v685, (uint64_t)__dst, 0, 0);
              }
LABEL_1322:
              if (SBYTE7(v1058) < 0)
              {
                v686 = v1057[0];
LABEL_1324:
                operator delete(v686);
              }
LABEL_1325:
              if ((v1060[23] & 0x80000000) == 0) {
                goto LABEL_212;
              }
              v602 = *(char **)v1060;
              goto LABEL_1794;
            case 65:
              uint64_t v238 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                          + 8)
                              + 8);
              *(void *)__c = 0;
              if (sub_1CD380D30(v1039, (uint64_t *)__c, (uint64_t)".cv_func_id", 11)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in '.cv_func_id' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              uint64_t v503 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              if (((*(uint64_t (**)(uint64_t, void))(*(void *)v503 + 728))(v503, *(unsigned int *)__c) & 1) == 0) {
                goto LABEL_946;
              }
              goto LABEL_67;
            case 66:
              uint64_t v238 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                          + 8)
                              + 8);
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              *(void *)v1060 = 0;
              v1057[0] = 0;
              if (sub_1CD380D30(v1039, (uint64_t *)__c, (uint64_t)".cv_inline_site_id", 18)) {
                goto LABEL_265;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 2) {
                goto LABEL_1499;
              }
              uint64_t v526 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
              if (*(_DWORD *)v526 == 2)
              {
                uint64_t v527 = *(void *)(v526 + 8);
                unint64_t v528 = *(void *)(v526 + 16);
              }
              else
              {
                uint64_t v527 = *(void *)(v526 + 8);
                unint64_t v764 = *(void *)(v526 + 16);
                unint64_t v765 = v764 - 1;
                unint64_t v766 = v764 != 0;
                if (v764) {
                  ++v527;
                }
                if (v766 > v765) {
                  unint64_t v765 = v764 != 0;
                }
                if (v764 < v765) {
                  unint64_t v765 = v764;
                }
                unint64_t v528 = v765 - v766;
              }
              if (v528 == 6)
              {
                int v767 = *(_DWORD *)v527 ^ 0x68746977 | *(unsigned __int16 *)(v527 + 4) ^ 0x6E69;
                *(void *)__dst = "expected 'within' identifier in '.cv_inline_site_id' directive";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v767 != 0, (const llvm::Twine *)__dst);
                if (v767) {
                  goto LABEL_265;
                }
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                if (sub_1CD380D30(v1039, (uint64_t *)__str, (uint64_t)".cv_inline_site_id", 18)) {
                  goto LABEL_265;
                }
                if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 2)
                {
                  uint64_t v768 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8);
                  if (*(_DWORD *)v768 == 2)
                  {
                    uint64_t v769 = *(void *)(v768 + 8);
                    unint64_t v770 = *(void *)(v768 + 16);
                  }
                  else
                  {
                    uint64_t v769 = *(void *)(v768 + 8);
                    unint64_t v909 = *(void *)(v768 + 16);
                    unint64_t v910 = v909 - 1;
                    unint64_t v911 = v909 != 0;
                    if (v909) {
                      ++v769;
                    }
                    if (v911 > v910) {
                      unint64_t v910 = v909 != 0;
                    }
                    if (v909 < v910) {
                      unint64_t v910 = v909;
                    }
                    unint64_t v770 = v910 - v911;
                  }
                  if (v770 == 10)
                  {
                    uint64_t v912 = *(void *)v769 ^ 0x5F64656E696C6E69 | *(unsigned __int16 *)(v769 + 8) ^ 0x7461;
                    *(void *)__dst = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
                    *(_WORD *)&__dst[32] = 259;
                    llvm::MCAsmParser::check(v1039, v912 != 0, (const llvm::Twine *)__dst);
                    if (v912) {
                      goto LABEL_265;
                    }
                    (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                    if (sub_1CD380E34((llvm::MCContext **)v1039, (uint64_t *)v1060, (uint64_t)".cv_inline_site_id", 18))goto LABEL_265; {
                    *(void *)__dst = "expected line number after 'inlined_at'";
                    }
                    *(_WORD *)&__dst[32] = 259;
                    if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)v1057, (const llvm::Twine *)__dst)) {
                      goto LABEL_265;
                    }
                    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                     + 8) == 4)
                    {
                      uint64_t v913 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                       + 8);
                      v916 = *(unsigned int **)(v913 + 24);
                      v914 = (unsigned int *)(v913 + 24);
                      v915 = v916;
                      if (v914[2] >= 0x41) {
                        v914 = v915;
                      }
                      uint64_t v917 = *v914;
                      (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                    }
                    else
                    {
                      uint64_t v917 = 0;
                    }
                    *(void *)__dst = "unexpected token in '.cv_inline_site_id' directive";
                    *(_WORD *)&__dst[32] = 259;
                    if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                      goto LABEL_265;
                    }
                    uint64_t v986 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    if (((*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, char *))(*(void *)v986 + 736))(v986, *(unsigned int *)__c, LODWORD(__str[0].__r_.__value_.__l.__data_), *(unsigned int *)v1060, LODWORD(v1057[0]), v917, v238) & 1) == 0)
                    {
LABEL_946:
                      v504 = "function id already allocated";
                      goto LABEL_1700;
                    }
                    goto LABEL_67;
                  }
                }
                v771 = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
              }
              else
              {
LABEL_1499:
                v771 = "expected 'within' identifier in '.cv_inline_site_id' directive";
              }
              *(void *)__dst = v771;
              *(_WORD *)&__dst[32] = 259;
              LOBYTE(v9) = 1;
              llvm::MCAsmParser::check(v1039, 1, (const llvm::Twine *)__dst);
              goto LABEL_212;
            case 67:
              (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1CD380D30(v1039, (uint64_t *)__c, (uint64_t)".cv_loc", 7) & 1) != 0
                || (sub_1CD380E34((llvm::MCContext **)v1039, (uint64_t *)__str, (uint64_t)".cv_loc", 7) & 1) != 0)
              {
                goto LABEL_265;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 4)
              {
                uint64_t v565 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
                v568 = *(uint64_t **)(v565 + 24);
                v566 = (uint64_t *)(v565 + 24);
                v567 = v568;
                if (*((_DWORD *)v566 + 2) >= 0x41u) {
                  v566 = v567;
                }
                uint64_t v569 = *v566;
                if (*v566 < 0)
                {
                  v633 = "line number less than zero in '.cv_loc' directive";
                  goto LABEL_1525;
                }
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              }
              else
              {
                uint64_t v569 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 4)
              {
                uint64_t v623 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
                v626 = *(uint64_t **)(v623 + 24);
                v624 = (uint64_t *)(v623 + 24);
                v625 = v626;
                if (*((_DWORD *)v624 + 2) >= 0x41u) {
                  v624 = v625;
                }
                uint64_t v627 = *v624;
                if (*v624 < 0)
                {
                  v633 = "column position less than zero in '.cv_loc' directive";
                  goto LABEL_1525;
                }
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              }
              else
              {
                uint64_t v627 = 0;
              }
              LOBYTE(v1057[0]) = 0;
              *(void *)v1060 = 0;
              *(void *)__dst = v1039;
              *(void *)&__dst[8] = v1057;
              *(void *)&__dst[16] = v1060;
              LOBYTE(v9) = llvm::MCAsmParser::parseMany(v1039, sub_1CD3B3AF0, (uint64_t)__dst, 0);
              if ((v9 & 1) == 0)
              {
                uint64_t v629 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, void, BOOL))(*(void *)v629 + 744))(v629, *(unsigned int *)__c, LODWORD(__str[0].__r_.__value_.__l.__data_), v569, v627, LOBYTE(v1057[0]), *(void *)v1060 != 0);
              }
              goto LABEL_212;
            case 68:
              v1045.__r_.__value_.__r.__words[0] = 0;
              v1057[0] = 0;
              v1057[1] = 0;
              *(_OWORD *)&v1055.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
              if (sub_1CD380D30(v1039, (uint64_t *)&v1045, (uint64_t)".cv_linetable", 13)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in '.cv_linetable' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              uint64_t v549 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              int v550 = (*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(void *)v1039 + 192))(v1039, v1057);
              *(void *)__c = "expected identifier in directive";
              LOWORD(v1076) = 259;
              if (v550)
              {
                v500 = (std::string *)__c;
              }
              else
              {
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_linetable' directive";
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__str)) {
                  goto LABEL_265;
                }
                uint64_t v549 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                             + 8)
                                 + 8);
                int v861 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, &v1055);
                *(void *)v1060 = "expected identifier in directive";
                LOWORD(v1061) = 259;
                if (!v861)
                {
                  v862 = v1039;
                  v863 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                  *(_WORD *)&__dst[32] = 261;
                  *(void **)__dst = v1057[0];
                  *(void **)&__dst[8] = v1057[1];
                  llvm::MCContext::getOrCreateSymbol(v863, (unsigned __int8 ***)__dst);
                  v864 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v862 + 48))(v862);
                  *(_WORD *)&__dst[32] = 261;
                  *(_OWORD *)__dst = *(_OWORD *)&v1055.__r_.__value_.__l.__data_;
                  llvm::MCContext::getOrCreateSymbol(v864, (unsigned __int8 ***)__dst);
                  uint64_t v865 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v862 + 56))(v862);
                  (*(void (**)(void))(v865 + 752))();
                  goto LABEL_67;
                }
                v500 = (std::string *)v1060;
              }
              uint64_t v501 = (uint64_t)v1039;
              uint64_t v502 = v549;
              goto LABEL_1220;
            case 69:
              v1081 = 0;
              v1086[0] = 0;
              v1054[0] = 0;
              *(_OWORD *)&v1045.__r_.__value_.__l.__data_ = 0uLL;
              long long v1084 = 0uLL;
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
              if (sub_1CD380D30(v1039, (uint64_t *)&v1081, (uint64_t)".cv_inline_linetable", 20)) {
                goto LABEL_265;
              }
              uint64_t v499 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              *(void *)__dst = "expected SourceField in '.cv_inline_linetable' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1039, v1086, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              *(void *)__c = "File id less than zero in '.cv_inline_linetable' directive";
              LOWORD(v1076) = 259;
              if (v1086[0] < 1)
              {
                v500 = (std::string *)__c;
LABEL_942:
                uint64_t v501 = (uint64_t)v1039;
                uint64_t v502 = v499;
                goto LABEL_1220;
              }
              uint64_t v499 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected SourceLineNum in '.cv_inline_line"
                                                                              "table' directive";
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
              if (llvm::MCAsmParser::parseIntToken(v1039, v1054, (const llvm::Twine *)__str)) {
                goto LABEL_265;
              }
              *(void *)v1060 = "Line number less than zero in '.cv_inline_linetable' directive";
              LOWORD(v1061) = 259;
              if (v1054[0] < 0)
              {
                v500 = (std::string *)v1060;
                goto LABEL_942;
              }
              uint64_t v499 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              char v924 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, &v1045);
              v1057[0] = "expected identifier in directive";
              __int16 v1059 = 259;
              if (v924)
              {
                v500 = (std::string *)v1057;
                goto LABEL_942;
              }
              uint64_t v499 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                           + 8)
                               + 8);
              int v935 = (*(uint64_t (**)(llvm::MCAsmParser *, long long *))(*(void *)v1039 + 192))(v1039, &v1084);
              v1055.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier in directive";
              __int16 v1056 = 259;
              if (v935)
              {
                v500 = &v1055;
                goto LABEL_942;
              }
              *(void *)__dst = "Expected End of Statement";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              v957 = v1039;
              v958 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = *(_OWORD *)&v1045.__r_.__value_.__l.__data_;
              llvm::MCContext::getOrCreateSymbol(v958, (unsigned __int8 ***)__dst);
              v959 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v957 + 48))(v957);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = v1084;
              llvm::MCContext::getOrCreateSymbol(v959, (unsigned __int8 ***)__dst);
              uint64_t v960 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v957 + 56))(v957);
              (*(void (**)(void))(v960 + 760))();
              goto LABEL_67;
            case 70:
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 2)
              {
                v640 = 0;
                v641 = 0;
                v642 = 0;
                while (1)
                {
                  uint64_t v643 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 96);
                  *(void *)&__c[8] = 0;
                  *(void *)__c = 0;
                  if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c))
                  {
                    break;
                  }
                  v644 = v1039;
                  v645 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                  *(_WORD *)&__dst[32] = 261;
                  *(void *)__dst = *(void *)__c;
                  *(void *)&__dst[8] = *(void *)&__c[8];
                  uint64_t v646 = llvm::MCContext::getOrCreateSymbol(v645, (unsigned __int8 ***)__dst);
                  uint64_t v643 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v644 + 40))(v644) + 96);
                  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
                  if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(void *)v644 + 192))(v644, __str))
                  {
                    break;
                  }
                  v647 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                  *(_WORD *)&__dst[32] = 261;
                  *(_OWORD *)__dst = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                  uint64_t v648 = llvm::MCContext::getOrCreateSymbol(v647, (unsigned __int8 ***)__dst);
                  uint64_t v649 = v648;
                  if (v641 >= v640)
                  {
                    uint64_t v650 = ((char *)v641 - v642) >> 4;
                    unint64_t v651 = v650 + 1;
                    if ((unint64_t)(v650 + 1) >> 60) {
                      goto LABEL_1610;
                    }
                    if (((char *)v640 - v642) >> 3 > v651) {
                      unint64_t v651 = ((char *)v640 - v642) >> 3;
                    }
                    if ((unint64_t)((char *)v640 - v642) >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v652 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v652 = v651;
                    }
                    if (v652)
                    {
                      if (v652 >> 60) {
                        goto LABEL_1612;
                      }
                      v653 = (char *)operator new(16 * v652);
                    }
                    else
                    {
                      v653 = 0;
                    }
                    v654 = (uint64_t *)&v653[16 * v650];
                    uint64_t *v654 = v646;
                    v654[1] = v649;
                    if (v641 == (uint64_t *)v642)
                    {
                      v656 = v641;
                      v642 = &v653[16 * v650];
                    }
                    else
                    {
                      v655 = &v653[16 * v650];
                      do
                      {
                        *((_OWORD *)v655 - 1) = *((_OWORD *)v641 - 1);
                        v655 -= 16;
                        v641 -= 2;
                      }
                      while (v641 != (uint64_t *)v642);
                      v656 = (uint64_t *)v642;
                      v642 = v655;
                    }
                    v640 = (uint64_t *)&v653[16 * v652];
                    v641 = v654 + 2;
                    if (v656) {
                      operator delete(v656);
                    }
                  }
                  else
                  {
                    uint64_t *v641 = v646;
                    v641[1] = v648;
                    v641 += 2;
                  }
                  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                   + 8) != 2)
                    goto LABEL_1380;
                }
                v714 = "expected identifier in directive";
              }
              else
              {
                v642 = 0;
                uint64_t v643 = 0;
LABEL_1380:
                *(void *)&__c[8] = 0;
                *(void *)__c = 0;
                *(void *)__dst = "expected comma before def_range type in .cv_def_range directive";
                *(_WORD *)&__dst[32] = 259;
                if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                  || ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c) & 1) != 0)
                {
                  v714 = "expected def_range type in directive";
                }
                else
                {
                  uint64_t __pd = *((unsigned int *)v1039 + 278);
                  if (__pd)
                  {
                    size_t v774 = *(void *)&__c[8];
                    __nh = *(const void **)__c;
                    int v775 = 0;
                    if (*(void *)&__c[8])
                    {
                      uint64_t v776 = *(void *)&__c[8];
                      v777 = *(unsigned __int8 **)__c;
                      do
                      {
                        int v778 = *v777++;
                        int v775 = 33 * v775 + v778;
                        --v776;
                      }
                      while (v776);
                    }
                    uint64_t v779 = *((void *)v1039 + 138);
                    int v780 = 1;
                    int v781 = v775;
                    while (1)
                    {
                      uint64_t v782 = v781 & (__pd - 1);
                      v783 = *(void **)(v779 + 8 * v782);
                      if (v783 != (void *)-8)
                      {
                        if (!v783) {
                          goto LABEL_1791;
                        }
                        if (*(_DWORD *)(v779 + 8 * __pd + 8 + 4 * v782) == v775
                          && v774 == *v783
                          && (!v774 || !memcmp(__nh, (char *)v783 + *((unsigned int *)v1039 + 281), v774)))
                        {
                          break;
                        }
                      }
                      int v781 = v780 + v782;
                      ++v780;
                    }
                    if (v782 != -1 && (int)v782 != __pd)
                    {
                      switch(*(_DWORD *)(*(void *)(v779 + 8 * (int)v782) + 8))
                      {
                        case 1:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(void *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
                          {
                            goto LABEL_1921;
                          }
                          uint64_t v939 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                          (*(void (**)(void))(v939 + 792))();
                          goto LABEL_1975;
                        case 2:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(void *)__dst = "expected comma before offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
                          {
                            goto LABEL_1971;
                          }
                          uint64_t v964 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                          (*(void (**)(void))(v964 + 800))();
                          goto LABEL_1975;
                        case 3:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(void *)v1060 = 0;
                          *(void *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
                          {
LABEL_1921:
                            v714 = "expected register number";
                            goto LABEL_1792;
                          }
                          *(void *)__dst = "expected comma before offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (!llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            && ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, v1060) & 1) == 0)
                          {
                            uint64_t v984 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                            (*(void (**)(void))(v984 + 784))();
                            goto LABEL_1975;
                          }
LABEL_1971:
                          v714 = "expected offset value";
                          goto LABEL_1792;
                        case 4:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(void *)v1060 = 0;
                          v1057[0] = 0;
                          *(void *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
                          {
                            v714 = "expected register value";
                            goto LABEL_1792;
                          }
                          *(void *)__dst = "expected comma before flag value in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, v1060) & 1) != 0)
                          {
                            v714 = "expected flag value";
                            goto LABEL_1792;
                          }
                          *(void *)__dst = "expected comma before base pointer offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(void *)v1039 + 256))(v1039, v1057) & 1) != 0)
                          {
                            v714 = "expected base pointer offset value";
                            goto LABEL_1792;
                          }
                          uint64_t v985 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                          (*(void (**)(void))(v985 + 776))();
LABEL_1975:
                          LOBYTE(v9) = 1;
                          if (!v642) {
                            goto LABEL_212;
                          }
                          goto LABEL_1793;
                        default:
                          break;
                      }
                    }
                  }
LABEL_1791:
                  v714 = "unexpected def_range type in .cv_def_range directive";
                }
              }
LABEL_1792:
              *(void *)__dst = v714;
              *(_WORD *)&__dst[32] = 259;
              LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, v643, (uint64_t)__dst, 0, 0);
              if (!v642) {
                goto LABEL_212;
              }
LABEL_1793:
              v602 = v642;
              goto LABEL_1794;
            case 71:
              uint64_t v529 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v529 + 808))(v529);
              goto LABEL_67;
            case 72:
              memset(__c, 0, 24);
              if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 264))(v1039) & 1) != 0
                || (*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 208))(v1039, __c))
              {
                *(void *)__dst = " in '.cv_string' directive";
                *(_WORD *)&__dst[32] = 259;
                char v657 = llvm::MCAsmParser::addErrorSuffix(v1039, (const llvm::Twine *)__dst);
                goto LABEL_1443;
              }
              CVContext = (llvm::CodeViewContext *)llvm::MCContext::getCVContext(*((llvm::MCContext **)v1039 + 27));
              if (__c[23] >= 0) {
                v735 = __c;
              }
              else {
                v735 = *(unsigned __int8 **)__c;
              }
              if (__c[23] >= 0) {
                size_t v736 = __c[23] & 0x7F;
              }
              else {
                size_t v736 = *(void *)&__c[8];
              }
              llvm::CodeViewContext::addToStringTable(CVContext, v735, v736, (uint64_t)__dst);
              uint64_t v737 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(void))(v737 + 520))();
              LOBYTE(v9) = 0;
              goto LABEL_1444;
            case 73:
              uint64_t v570 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v570 + 816))(v570);
              goto LABEL_67;
            case 74:
              *(void *)__c = 0;
              *(void *)__dst = "expected identifier in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1039, (uint64_t *)__c, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              *(void *)__dst = "Expected End of Statement";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              uint64_t v683 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, void))(*(void *)v683 + 824))(v683, *(unsigned int *)__c);
              goto LABEL_67;
            case 75:
              (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039);
              *(void *)&__c[8] = 0;
              *(void *)__c = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c))
              {
                v633 = "expected symbol name";
                goto LABEL_1525;
              }
              *(void *)__dst = "unexpected tokens";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst))
              {
                v726 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                *(_WORD *)&__dst[32] = 261;
                *(void *)__dst = *(void *)__c;
                *(void *)&__dst[8] = *(void *)&__c[8];
                llvm::MCContext::getOrCreateSymbol(v726, (unsigned __int8 ***)__dst);
                uint64_t v727 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(void))(v727 + 832))();
                goto LABEL_67;
              }
              v860 = " in '.cv_fpo_data' directive";
              goto LABEL_1675;
            case 76:
              *(void *)&__c[8] = 0;
              *(void *)__c = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c)) {
                goto LABEL_1218;
              }
              if (*(void *)&__c[8] == 12)
              {
                uint64_t v553 = 0;
                uint64_t v551 = **(void **)__c == 0x665F67756265642ELL && *(_DWORD *)(*(void *)__c + 8) == 1701667186;
              }
              else if (*(void *)&__c[8] == 9)
              {
                uint64_t v551 = 0;
                uint64_t v553 = **(void **)__c == 0x6D6172665F68652ELL && *(unsigned char *)(*(void *)__c + 8) == 101;
              }
              else
              {
                uint64_t v553 = 0;
                uint64_t v551 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 25) {
                goto LABEL_1192;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 192))(v1039, __c))
              {
LABEL_1218:
                v633 = "Expected an identifier";
                goto LABEL_1525;
              }
              if (*(void *)&__c[8] == 12)
              {
                if (**(void **)__c == 0x665F67756265642ELL && *(_DWORD *)(*(void *)__c + 8) == 1701667186) {
                  uint64_t v551 = 1;
                }
                else {
                  uint64_t v551 = v551;
                }
              }
              else if (*(void *)&__c[8] == 9)
              {
                if (**(void **)__c == 0x6D6172665F68652ELL && *(unsigned char *)(*(void *)__c + 8) == 101) {
                  uint64_t v553 = 1;
                }
                else {
                  uint64_t v553 = v553;
                }
              }
LABEL_1192:
              uint64_t v622 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v622 + 864))(v622, v553, v551);
              goto LABEL_67;
            case 77:
              *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
              if (llvm::MCAsmParser::parseOptionalToken(v1039, 9)) {
                goto LABEL_1267;
              }
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str) & 1) != 0|| __str[0].__r_.__value_.__l.__size_ != 6)
              {
                *(void *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, 1, (const llvm::Twine *)__dst);
              }
              else
              {
                int v807 = *(_DWORD *)__str[0].__r_.__value_.__l.__data_ ^ 0x706D6973 | *(unsigned __int16 *)(__str[0].__r_.__value_.__r.__words[0] + 4) ^ 0x656C;
                *(void *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::check(v1039, v807 != 0, (const llvm::Twine *)__dst);
                if (!v807)
                {
                  *(void *)__c = "unexpected token";
                  LOWORD(v1076) = 259;
                  if (!llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__c))
                  {
LABEL_1267:
                    uint64_t v658 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                    llvm::MCStreamer::emitCFIStartProc(v658, __str[0].__r_.__value_.__l.__size_ != 0, *((void *)v1039 + 17));
                    goto LABEL_67;
                  }
                }
              }
              v505 = " in '.cfi_startproc' directive";
              goto LABEL_1341;
            case 78:
              v531 = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              llvm::MCStreamer::emitCFIEndProc(v531);
              goto LABEL_67;
            case 79:
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if (sub_1CD3811E4((void **)v1039, __c, (uint64_t)v1053)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
              {
                goto LABEL_265;
              }
              uint64_t v485 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, void, std::string::size_type))(*(void *)v485 + 872))(v485, *(void *)__c, __str[0].__r_.__value_.__r.__words[0]);
              goto LABEL_67;
            case 80:
              *(void *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, __dst);
              if ((v9 & 1) == 0)
              {
                uint64_t v487 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v487 + 880))(v487, *(void *)__dst);
              }
              goto LABEL_212;
            case 81:
              *(void *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, __dst);
              if ((v9 & 1) == 0)
              {
                uint64_t v573 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v573 + 968))(v573, *(void *)__dst);
              }
              goto LABEL_212;
            case 82:
              *(void *)__dst = 0;
              LOBYTE(v9) = sub_1CD3811E4((void **)v1039, __dst, (uint64_t)v1053);
              if ((v9 & 1) == 0)
              {
                uint64_t v530 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v530 + 888))(v530, *(void *)__dst);
              }
              goto LABEL_212;
            case 83:
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if (sub_1CD3811E4((void **)v1039, __c, (uint64_t)v1053)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
              {
                goto LABEL_265;
              }
              uint64_t v488 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, void, std::string::size_type))(*(void *)v488 + 904))(v488, *(void *)__c, __str[0].__r_.__value_.__r.__words[0]);
              goto LABEL_67;
            case 84:
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if (sub_1CD3811E4((void **)v1039, __c, (uint64_t)v1053)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 256))(v1039, __str) & 1) != 0)
              {
                goto LABEL_265;
              }
              uint64_t v564 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, void, std::string::size_type))(*(void *)v564 + 960))(v564, *(void *)__c, __str[0].__r_.__value_.__r.__words[0]);
              goto LABEL_67;
            case 85:
              v483 = v1039;
              int v484 = 1;
              goto LABEL_1006;
            case 86:
              v483 = v1039;
              int v484 = 0;
LABEL_1006:
              char v70 = sub_1CD3AABF8(v483, v484);
              goto LABEL_211;
            case 87:
              uint64_t v482 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v482 + 928))(v482);
              goto LABEL_67;
            case 88:
              uint64_t v498 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v498 + 936))(v498);
              goto LABEL_67;
            case 89:
              *(void *)__dst = 0;
              LOBYTE(v9) = sub_1CD3811E4((void **)v1039, __dst, (uint64_t)v1053);
              if ((v9 & 1) == 0)
              {
                uint64_t v481 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v481 + 944))(v481, *(void *)__dst);
              }
              goto LABEL_212;
            case 90:
              *(void *)__dst = 0;
              LOBYTE(v9) = sub_1CD3811E4((void **)v1039, __dst, (uint64_t)v1053);
              if ((v9 & 1) == 0)
              {
                uint64_t v572 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v572 + 952))(v572, *(void *)__dst);
              }
              goto LABEL_212;
            case 91:
              memset(__dst, 0, 24);
              *(void *)__c = 0;
              if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, __c)) {
                goto LABEL_1003;
              }
              std::string::push_back((std::string *)__dst, __c[0]);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 25) {
                goto LABEL_1122;
              }
              while (1)
              {
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
                if ((*(uint64_t (**)(llvm::MCAsmParser *, unsigned char *))(*(void *)v1039 + 256))(v1039, __c)) {
                  break;
                }
                std::string::push_back((std::string *)__dst, __c[0]);
                if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 25)
                {
LABEL_1122:
                  uint64_t v599 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                  if (__dst[23] >= 0) {
                    v600 = __dst;
                  }
                  else {
                    v600 = *(unsigned char **)__dst;
                  }
                  if (__dst[23] >= 0) {
                    uint64_t v601 = __dst[23] & 0x7F;
                  }
                  else {
                    uint64_t v601 = *(void *)&__dst[8];
                  }
                  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v599 + 976))(v599, v600, v601);
                  LOBYTE(v9) = 0;
                  goto LABEL_1129;
                }
              }
LABEL_1003:
              LOBYTE(v9) = 1;
LABEL_1129:
              if ((__dst[23] & 0x80000000) == 0) {
                goto LABEL_212;
              }
              v602 = *(char **)__dst;
              goto LABEL_1794;
            case 92:
              *(void *)__dst = 0;
              LOBYTE(v9) = sub_1CD3811E4((void **)v1039, __dst, (uint64_t)v1053);
              if ((v9 & 1) == 0)
              {
                uint64_t v506 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v506 + 984))(v506, *(void *)__dst);
              }
              goto LABEL_212;
            case 93:
              *(void *)__dst = "unexpected token in '.cfi_signal_frame'";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              uint64_t v635 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v635 + 1000))(v635);
              goto LABEL_67;
            case 94:
              *(void *)__dst = 0;
              LOBYTE(v9) = sub_1CD3811E4((void **)v1039, __dst, (uint64_t)v1053);
              if ((v9 & 1) == 0)
              {
                uint64_t v480 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
                (*(void (**)(uint64_t, void))(*(void *)v480 + 1008))(v480, *(void *)__dst);
              }
              goto LABEL_212;
            case 95:
              v517 = v1053;
              *(void *)__c = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if (sub_1CD3811E4((void **)v1039, __c, (uint64_t)v1053)) {
                goto LABEL_265;
              }
              *(void *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1039, 25, (llvm::Twine *)__dst)
                || (sub_1CD3811E4((void **)v1039, __str, (uint64_t)v517) & 1) != 0)
              {
                goto LABEL_265;
              }
              uint64_t v518 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t, void, std::string::size_type))(*(void *)v518 + 1016))(v518, *(void *)__c, __str[0].__r_.__value_.__r.__words[0]);
              goto LABEL_67;
            case 96:
              uint64_t v486 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 56))(v1039);
              (*(void (**)(uint64_t))(*(void *)v486 + 1024))(v486);
              goto LABEL_67;
            case 99:
              v574 = (void **)(v1002 + 88);
              if (*(unsigned char *)(v1002 + 112))
              {
                if (*(char *)(v1002 + 111) < 0) {
                  operator delete(*v574);
                }
                *(void *)(v1002 + 88) = 0;
                *(unsigned char *)(v1002 + 111) = 0;
              }
              else
              {
                *(void *)(v1002 + 88) = 0;
                *(_WORD *)(v1002 + 111) = 256;
              }
              long long v609 = v1052;
              v509 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                          + 8)
                              + 8);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 9
                && sub_1CD3AE788(v1039, (uint64_t)v574))
              {
                LOWORD(v1076) = 1283;
                *(void *)__c = "unable to parse text item in '";
                *(_OWORD *)&__c[16] = v609;
LABEL_1426:
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                uint64_t v152 = (uint64_t)v1039;
                uint64_t v150 = v509;
                goto LABEL_269;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 224))(v1039);
              uint64_t v610 = *((void *)v1039 + 86);
              if (*((void *)v1039 + 85) == v610)
              {
                LOWORD(v1076) = 1283;
                *(void *)__c = "unexpected '";
                *(_OWORD *)&__c[16] = v609;
                goto LABEL_1345;
              }
              uint64_t v612 = *((void *)v1039 + 52);
              uint64_t v611 = *((void *)v1039 + 53);
              if (*(void *)(*(void *)(v610 - 8) + 24) != (v611 - v612) >> 3)
              {
                v613 = (int *)(v611 - 8);
                uint64_t v614 = (uint64_t)v613 - v612;
                do
                {
                  int v615 = *v613;
                  *((_WORD *)v1039 + 206) = *((_WORD *)v613 + 2);
                  *((_DWORD *)v1039 + 102) = v615;
                  *((void *)v1039 + 53) = v613;
                  BOOL v73 = *(void *)(*(void *)(v610 - 8) + 24) == v614 >> 3;
                  v614 -= 8;
                  v613 -= 2;
                }
                while (!v73);
              }
              goto LABEL_1149;
            case 100:
              if (*(unsigned char *)(v1002 + 112))
              {
                if (*(char *)(v1002 + 111) < 0) {
                  operator delete(*(void **)(v1002 + 88));
                }
                *(void *)(v1002 + 88) = 0;
                *(unsigned char *)(v1002 + 111) = 0;
              }
              else
              {
                *(void *)(v1002 + 88) = 0;
                *(_WORD *)(v1002 + 111) = 256;
              }
              long long v608 = v1052;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) != 9)
              {
                LOWORD(v1076) = 1283;
                *(void *)__c = "unexpected token in '";
                *(_OWORD *)&__c[16] = v608;
                goto LABEL_1338;
              }
              if (*((void *)v1039 + 85) != *((void *)v1039 + 86))
              {
LABEL_1149:
                sub_1CD3B3D10((uint64_t)v1039);
                goto LABEL_67;
              }
              LOWORD(v1076) = 1283;
              *(void *)__c = "unexpected '";
              *(_OWORD *)&__c[16] = v608;
LABEL_1345:
              v694 = "' in file, no current macro definition";
              goto LABEL_1346;
            case 101:
              *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
              while (2)
              {
                v1018 = *(char **)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039)
                                             + 8)
                                 + 8);
                int v575 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(void *)v1039 + 192))(v1039, __str);
                *(void *)__dst = "expected identifier in 'purge' directive";
                *(_WORD *)&__dst[32] = 259;
                if (v575)
                {
                  v500 = (std::string *)__dst;
                  uint64_t v501 = (uint64_t)v1039;
                  uint64_t v502 = (uint64_t)v1018;
LABEL_1220:
                  llvm::MCAsmParser::Error(v501, v502, (uint64_t)v500, 0, 0);
                  goto LABEL_265;
                }
                uint64_t v576 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                llvm::StringRef::lower((llvm::StringRef *)__str, __dst);
                int __nf = __dst[23];
                __pc = *(void **)__dst;
                if (__dst[23] >= 0) {
                  v577 = __dst;
                }
                else {
                  v577 = *(unsigned __int8 **)__dst;
                }
                if (__dst[23] >= 0) {
                  size_t v578 = __dst[23] & 0x7F;
                }
                else {
                  size_t v578 = *(void *)&__dst[8];
                }
                uint64_t v579 = *(unsigned int *)(v576 + 1976);
                if (!v579)
                {
                  uint64_t v579 = 0;
LABEL_1078:
                  LODWORD(v588) = -1;
                  goto LABEL_1079;
                }
                int v580 = 0;
                if (v578)
                {
                  size_t v581 = v578;
                  v582 = v577;
                  do
                  {
                    int v583 = *v582++;
                    int v580 = 33 * v580 + v583;
                    --v581;
                  }
                  while (v581);
                }
                uint64_t v584 = *(void *)(v576 + 1968);
                uint64_t v585 = *(unsigned int *)(v576 + 1988);
                int v586 = 1;
                int v587 = v580;
                while (1)
                {
                  uint64_t v588 = v587 & (v579 - 1);
                  v589 = *(void **)(v584 + 8 * v588);
                  if (v589 != (void *)-8)
                  {
                    if (!v589) {
                      goto LABEL_1078;
                    }
                    if (*(_DWORD *)(v584 + 8 * v579 + 8 + 4 * v588) == v580
                      && v578 == *v589
                      && (!v578 || !memcmp(v577, (char *)v589 + v585, v578)))
                    {
                      break;
                    }
                  }
                  int v587 = v586 + v588;
                  ++v586;
                }
LABEL_1079:
                BOOL v591 = v588 == -1 || v579 == (int)v588;
                if (__nf < 0) {
                  operator delete(__pc);
                }
                if (v591)
                {
                  LOWORD(v1076) = 1283;
                  *(void *)__c = "macro '";
                  *(_OWORD *)&__c[16] = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                  *(void *)__dst = __c;
                  *(void *)&__dst[16] = "' is not defined";
                  *(_WORD *)&__dst[32] = 770;
                  uint64_t v152 = (uint64_t)v1039;
                  uint64_t v150 = v1018;
                  goto LABEL_269;
                }
                uint64_t v592 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 48))(v1039);
                llvm::StringRef::lower((llvm::StringRef *)__str, __dst);
                if (__dst[23] >= 0) {
                  v593 = __dst;
                }
                else {
                  v593 = *(unsigned __int8 **)__dst;
                }
                if (__dst[23] >= 0) {
                  size_t v594 = __dst[23] & 0x7F;
                }
                else {
                  size_t v594 = *(void *)&__dst[8];
                }
                sub_1CD381458(v592 + 1968, v593, v594);
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                if (llvm::MCAsmParser::parseOptionalToken(v1039, 25))
                {
                  llvm::MCAsmParser::parseOptionalToken(v1039, 9);
                  continue;
                }
                goto LABEL_67;
              }
            case 102:
              v539 = v1053;
              uint64_t v540 = *((void *)v1039 + 53);
              if (*((void *)v1039 + 52) != v540 && *(unsigned char *)(v540 - 3))
              {
LABEL_998:
                (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 224))(v1039);
                goto LABEL_67;
              }
              v630 = (char *)operator new(0x28uLL);
              *(void *)__c = v630;
              *(_OWORD *)&__c[8] = xmmword_1CFB33BE0;
              strcpy(v630, ".err directive invoked in source file");
              if (**__n != 9)
              {
                v631 = v630;
                sub_1CD3A8F78((std::string *)__dst, (uint64_t)v1039);
                operator delete(v631);
                *(_OWORD *)__c = *(_OWORD *)__dst;
                *(void *)&__c[16] = *(void *)&__dst[16];
              }
              (*(void (**)(llvm::MCAsmParser *))(*(void *)v1039 + 184))(v1039);
              *(_WORD *)&__dst[32] = 260;
              *(void *)__dst = __c;
              uint64_t v632 = (uint64_t)v1039;
              goto LABEL_1442;
            case 103:
              v474 = v1053;
              v475 = v1039;
              int v476 = 1;
              goto LABEL_1030;
            case 104:
              v474 = v1053;
              v475 = v1039;
              int v476 = 0;
LABEL_1030:
              char v70 = sub_1CD3AAE54(v475, (uint64_t)v474, v476);
              goto LABEL_211;
            case 105:
              v514 = v1053;
              uint64_t v515 = (uint64_t)v1039;
              int v516 = 1;
              goto LABEL_1099;
            case 106:
              v514 = v1053;
              uint64_t v515 = (uint64_t)v1039;
              int v516 = 0;
LABEL_1099:
              char v70 = sub_1CD3AB0B0(v515, (uint64_t)v514, v516);
              goto LABEL_211;
            case 107:
              v477 = v1053;
              uint64_t v478 = (uint64_t)v1039;
              int v479 = 0;
              goto LABEL_1048;
            case 108:
              v477 = v1053;
              uint64_t v478 = (uint64_t)v1039;
              int v479 = 0;
              goto LABEL_1101;
            case 109:
              v477 = v1053;
              uint64_t v478 = (uint64_t)v1039;
              int v479 = 1;
LABEL_1048:
              int v571 = 0;
              goto LABEL_1102;
            case 110:
              v477 = v1053;
              uint64_t v478 = (uint64_t)v1039;
              int v479 = 1;
LABEL_1101:
              int v571 = 1;
LABEL_1102:
              char v70 = sub_1CD3AB5DC(v478, (uint64_t)v477, v479, v571);
              goto LABEL_211;
            case 111:
              v546 = v1053;
              v547 = v1039;
              int v548 = 1;
              goto LABEL_1038;
            case 112:
              v546 = v1053;
              v547 = v1039;
              int v548 = 0;
LABEL_1038:
              char v70 = sub_1CD3ABA68(v547, (uint64_t)v546, v548);
              goto LABEL_211;
            case 113:
              sub_1CD3A8F78((std::string *)__dst, (uint64_t)v1039);
              v490 = (llvm::raw_ostream *)llvm::outs(v489);
              if (__dst[23] >= 0) {
                v491 = __dst;
              }
              else {
                v491 = *(const char **)__dst;
              }
              if (__dst[23] >= 0) {
                size_t v492 = __dst[23] & 0x7F;
              }
              else {
                size_t v492 = *(void *)&__dst[8];
              }
              v493 = llvm::raw_ostream::write(v490, v491, v492);
              uint64_t v494 = __dst[23] & 0x7F;
              if (__dst[23] < 0) {
                uint64_t v494 = *(void *)&__dst[8];
              }
              if (!v494 || (__dst[23] >= 0 ? (v495 = __dst) : (v495 = *(unsigned char **)__dst), v495[v494 - 1] != 10))
              {
                v496 = (llvm::raw_ostream *)llvm::outs(v493);
                v497 = (unsigned char *)*((void *)v496 + 4);
                if ((unint64_t)v497 >= *((void *)v496 + 3))
                {
                  llvm::raw_ostream::write(v496, 10);
                }
                else
                {
                  *((void *)v496 + 4) = v497 + 1;
                  unsigned char *v497 = 10;
                }
              }
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
              goto LABEL_67;
            case 114:
            case 115:
              long long v628 = v1052;
              if (!*((_DWORD *)v1039 + 128))
              {
                *(void *)__c = "missing name in top-level '";
                *(_OWORD *)&__c[16] = v1052;
                LOWORD(v1076) = 1283;
LABEL_1338:
                v694 = "' directive";
LABEL_1346:
                *(void *)__dst = __c;
                *(void *)&__dst[16] = v694;
                __int16 v696 = 770;
                goto LABEL_1526;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8) == 2)
              {
                uint64_t v691 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 8);
                if (*(_DWORD *)v691 == 2)
                {
                  uint64_t v692 = *(void *)(v691 + 8);
                  unint64_t v693 = *(void *)(v691 + 16);
                }
                else
                {
                  uint64_t v740 = v691 + 8;
                  uint64_t v738 = *(void *)(v691 + 8);
                  unint64_t v739 = *(void *)(v740 + 8);
                  unint64_t v741 = v739 != 0;
                  if (v739) {
                    uint64_t v692 = v738 + 1;
                  }
                  else {
                    uint64_t v692 = v738;
                  }
                  if (v741 <= v739 - 1) {
                    unint64_t v742 = v739 - 1;
                  }
                  else {
                    unint64_t v742 = v739 != 0;
                  }
                  if (v739 < v742) {
                    unint64_t v742 = v739;
                  }
                  unint64_t v693 = v742 - v741;
                }
                *(void *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::parseToken(v1039, 2, (llvm::Twine *)__dst);
              }
              else
              {
                uint64_t v692 = 0;
                unint64_t v693 = 0;
              }
              *(void *)__dst = "unexpected token";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst))
              {
                *(void *)__c = " in '";
                *(_OWORD *)&__c[16] = v628;
                LOWORD(v1076) = 1283;
                *(void *)__dst = __c;
                *(void *)&__dst[16] = "' directive";
                __int16 v695 = 770;
LABEL_1342:
                *(_WORD *)&__dst[32] = v695;
LABEL_1343:
                uint64_t v142 = v1039;
                goto LABEL_249;
              }
              v743 = (void **)((char *)v1039 + 504);
              uint64_t v744 = *((unsigned int *)v1039 + 128);
              uint64_t v745 = *((unsigned int *)v1039 + 129);
              if (v744 >= v745)
              {
                unint64_t v747 = v744 + 1;
                if (v744 == -1) {
                  sub_1CD0A88F0(v747);
                }
                if (v745 == -1) {
                  break;
                }
                unint64_t v748 = (2 * v745) | 1;
                if (v748 <= v747) {
                  unint64_t v748 = v747;
                }
                if (v748 >= 0xFFFFFFFF) {
                  uint64_t v745 = 0xFFFFFFFFLL;
                }
                else {
                  uint64_t v745 = v748;
                }
                v749 = (char *)malloc_type_malloc(96 * v745, 0x4065EBACuLL);
                if (!v749) {
                  goto LABEL_1992;
                }
                v746 = v749;
                sub_1CD3B2908(v743, (uint64_t)v749);
                v750 = (char *)*((void *)v1039 + 63);
                if (v750 != (char *)v1039 + 520) {
                  free(v750);
                }
                *((void *)v1039 + 63) = v746;
                *((_DWORD *)v1039 + 129) = v745;
                LODWORD(v744) = *((_DWORD *)v1039 + 128);
              }
              else
              {
                v746 = (char *)*v743;
              }
              BOOL v751 = __pa == 115;
              v752 = &v746[96 * v744];
              if (v744 < v745)
              {
                LOBYTE(v9) = 0;
                int v753 = *((_DWORD *)v752 - 19);
                *(void *)v752 = v692;
                *((void *)v752 + 1) = v693;
                v754 = &v746[96 * v744];
                v754[16] = v751;
                v754[17] = 1;
                *((_DWORD *)v754 + 5) = v753;
                *((void *)v754 + 3) = 0;
                *((_DWORD *)v754 + 8) = 0;
                *(_OWORD *)(v754 + 40) = 0u;
                *(_OWORD *)(v754 + 56) = 0u;
                *(_OWORD *)(v754 + 68) = 0u;
                *((_DWORD *)v754 + 21) = 16;
                int v755 = v744 + 1;
                v756 = v1039;
LABEL_1479:
                *((_DWORD *)v756 + 128) = v755;
                goto LABEL_212;
              }
              if (v745 != -1)
              {
                if (((2 * v745) | 1uLL) >= 0xFFFFFFFF) {
                  uint64_t v929 = 0xFFFFFFFFLL;
                }
                else {
                  uint64_t v929 = (2 * v745) | 1;
                }
                v930 = (char *)malloc_type_malloc(96 * v929, 0x4065EBACuLL);
                if (v930)
                {
                  v931 = v930;
                  int v932 = *((_DWORD *)v752 - 19);
                  v933 = &v930[96 * *((unsigned int *)v1039 + 128)];
                  *(void *)v933 = v692;
                  *((void *)v933 + 1) = v693;
                  v933[16] = v751;
                  v933[17] = 1;
                  *((_DWORD *)v933 + 5) = v932;
                  *((void *)v933 + 3) = 0;
                  *((_DWORD *)v933 + 8) = 0;
                  *(_OWORD *)(v933 + 40) = 0u;
                  *(_OWORD *)(v933 + 56) = 0u;
                  *(_OWORD *)(v933 + 68) = 0u;
                  *((_DWORD *)v933 + 21) = 16;
                  sub_1CD3B2908(v743, (uint64_t)v930);
                  v934 = (char *)*((void *)v1039 + 63);
                  if (v934 != (char *)v1039 + 520) {
                    free(v934);
                  }
                  LOBYTE(v9) = 0;
                  v756 = v1039;
                  *((void *)v1039 + 63) = v931;
                  *((_DWORD *)v1039 + 129) = v929;
                  int v755 = *((_DWORD *)v1039 + 128) + 1;
                  goto LABEL_1479;
                }
LABEL_1992:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              }
              return result;
            case 116:
              uint64_t v244 = v1039;
              goto LABEL_404;
            case 117:
              *(void *)__dst = "unexpected token in 'end' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1039, (const llvm::Twine *)__dst)) {
                goto LABEL_265;
              }
              if (!**__n) {
                goto LABEL_67;
              }
              do
              {
                sub_1CD8F38F8((uint64_t)v1015);
                LOBYTE(v9) = 0;
              }
              while (**__n);
              goto LABEL_212;
            case 123:
              v539 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 96);
              sub_1CD3A8F78((std::string *)__c, (uint64_t)v1039);
              v667 = *(unsigned char **)__c;
              if (__c[23] >= 0) {
                v667 = __c;
              }
              uint64_t v668 = __c[23] & 0x7F;
              if (__c[23] < 0) {
                uint64_t v668 = *(void *)&__c[8];
              }
              *(void *)__dst = v667;
              *(void *)&__dst[8] = v668;
              uint64_t v669 = sub_1CD5A69D0(__dst, " \t\n\v\f\r", 6);
              if (!v670) {
                goto LABEL_1522;
              }
              unint64_t v671 = 0;
              v672 = (unsigned __int8 *)v669;
              uint64_t v673 = v670;
              do
              {
                int v674 = *v672;
                if ((v674 - 48) >= 0xA)
                {
                  if ((v674 - 97) >= 0x1A)
                  {
                    if ((v674 - 65) > 0x19) {
                      goto LABEL_1522;
                    }
                    int v675 = -55;
                  }
                  else
                  {
                    int v675 = -87;
                  }
                }
                else
                {
                  int v675 = -48;
                }
                unsigned int v676 = v675 + v674;
                if (v676 > 9) {
                  goto LABEL_1522;
                }
                unint64_t v677 = 10 * v671 + v676;
                if (v671 > v677 / 0xA) {
                  goto LABEL_1522;
                }
                ++v672;
                unint64_t v671 = v677;
                --v673;
              }
              while (v673);
              if (v677 >= 0x100000000) {
                unsigned int v700 = 0;
              }
              else {
                unsigned int v700 = v677;
              }
              if (HIDWORD(v677))
              {
LABEL_1522:
                *(_WORD *)&__dst[32] = 1283;
                *(void *)__dst = "radix must be a decimal number in the range 2 to 16; was ";
                *(void *)&__dst[16] = v669;
                *(void *)&__dst[24] = v670;
LABEL_1441:
                uint64_t v632 = (uint64_t)v1039;
LABEL_1442:
                char v657 = llvm::MCAsmParser::Error(v632, (uint64_t)v539, (uint64_t)__dst, 0, 0);
LABEL_1443:
                LOBYTE(v9) = v657;
              }
              else if (v700 - 17 <= 0xFFFFFFF0)
              {
                std::to_string((std::string *)v1060, v700);
                v827 = std::string::insert((std::string *)v1060, 0, "radix must be in the range 2 to 16; was ");
                std::string::size_type v828 = v827->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v827->__r_.__value_.__l.__data_;
                __str[0].__r_.__value_.__r.__words[2] = v828;
                v827->__r_.__value_.__l.__size_ = 0;
                v827->__r_.__value_.__r.__words[2] = 0;
                v827->__r_.__value_.__r.__words[0] = 0;
                *(_WORD *)&__dst[32] = 260;
                *(void *)__dst = __str;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1039, (uint64_t)v539, (uint64_t)__dst, 0, 0);
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str[0].__r_.__value_.__l.__data_);
                }
                if ((v1060[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v1060);
                }
              }
              else
              {
                LOBYTE(v9) = 0;
                *(_DWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v1039 + 40))(v1039) + 116) = v700;
              }
LABEL_1444:
              if ((__c[23] & 0x80000000) == 0) {
                goto LABEL_212;
              }
              v602 = *(char **)__c;
              goto LABEL_1794;
            default:
              uint64_t v150 = v1053;
              *(void *)__dst = "unknown directive";
              *(_WORD *)&__dst[32] = 259;
              uint64_t v152 = (uint64_t)v1039;
              goto LABEL_269;
          }
LABEL_1991:
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
LABEL_67:
        LOBYTE(v9) = 0;
      }
LABEL_212:
      if (v1066 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      return v9 & 1;
  }
}

uint64_t sub_1CD3A799C(_DWORD **a1, unsigned __int8 **a2, int a3)
{
  int v5 = *a1[6];
  if ((v5 - 2) < 2)
  {
    uint64_t v10 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
    if (*(_DWORD *)v10 == 2)
    {
      uint64_t v11 = *(unsigned __int8 **)(v10 + 8);
      long long v12 = *(unsigned __int8 **)(v10 + 16);
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 **)(v10 + 8);
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v15 = v14 - 1;
      unint64_t v16 = v14 != 0;
      if (v14) {
        ++v11;
      }
      if (v16 > v15) {
        unint64_t v15 = v14 != 0;
      }
      if (v14 < v15) {
        unint64_t v15 = v14;
      }
      long long v12 = (unsigned __int8 *)(v15 - v16);
    }
    *a2 = v11;
    a2[1] = v12;
    if (a3 == 1)
    {
      uint64_t v25 = v11;
      uint64_t v26 = v12;
      __int16 v27 = 0;
      if (v12 == (unsigned __int8 *)4 && !llvm::StringRef::compare_insensitive(&v25, "echo", 4uLL)) {
        __int16 v27 = 257;
      }
      sub_1CD8F6A2C((uint64_t)&v25);
      if (HIBYTE(v27)) {
        BOOL v24 = v27 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      int v17 = !v24;
    }
    else
    {
      int v17 = 0;
    }
    sub_1CD3AD454((uint64_t)a1, v17);
    return 0;
  }
  else if (v5 == 45 || v5 == 26)
  {
    __int16 v7 = *(unsigned __int8 **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 96);
    sub_1CD3ABC8C((uint64_t)&v25, (uint64_t)a1, 0);
    BOOL v8 = v25 == 2 && v7 + 1 == v26;
    uint64_t v13 = !v8;
    if (v8)
    {
      sub_1CD8F38F8((uint64_t)(a1 + 5));
      int v19 = *(int **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      int v20 = *v19;
      unint64_t v21 = *((void *)v19 + 2);
      if (v20 != 2)
      {
        unint64_t v22 = v21 - 1;
        unint64_t v23 = v21 != 0;
        if (v23 > v21 - 1) {
          unint64_t v22 = v21 != 0;
        }
        if (v21 >= v22) {
          unint64_t v21 = v22;
        }
        v21 -= v23;
      }
      *a2 = v7;
      a2[1] = (unsigned __int8 *)(v21 + 1);
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
    }
    if (v29 >= 0x41 && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
  }
  else
  {
    return 1;
  }
  return v13;
}

uint64_t sub_1CD3A7BE8(void *a1, char a2)
{
  uint64_t v3 = (uint64_t)a1;
  int v5 = (char *)a1[53];
  unint64_t v4 = a1[54];
  if ((unint64_t)v5 >= v4)
  {
    __int16 v7 = (char *)a1[52];
    uint64_t v8 = (v5 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      long long v12 = (char *)operator new(8 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *(void *)(v3 + 408);
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        int v14 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        __int16 v15 = *((_WORD *)v5 + 2);
        *((_DWORD *)v13 - 2) = v14;
        v13 -= 8;
        *((_WORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      int v5 = *(char **)(v3 + 416);
    }
    *(void *)(v3 + 416) = v13;
    *(void *)(v3 + 424) = v6;
    *(void *)(v3 + 432) = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)int v5 = a1[51];
    uint64_t v6 = v5 + 8;
  }
  *(void *)(v3 + 424) = v6;
  *(_DWORD *)(v3 + 408) = 1;
  if (*(unsigned char *)(v3 + 413))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 224))(v3);
LABEL_20:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  std::string __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (sub_1CD3AE788((llvm::MCAsmParser *)v3, (uint64_t)&__p))
  {
    v20[0] = "expected text item parameter for 'ifb' directive";
    __int16 v21 = 259;
    LOBYTE(v3) = llvm::MCAsmParser::TokError(v3, (uint64_t)v20, 0, 0);
    int v17 = 0;
  }
  else
  {
    v20[0] = "unexpected token in 'ifb' directive";
    __int16 v21 = 259;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)v3, (const llvm::Twine *)v20))
    {
      int v17 = 0;
      LOBYTE(v3) = 1;
    }
    else
    {
      uint64_t v18 = HIBYTE(v24) & 0x7F;
      if (v24 < 0) {
        uint64_t v18 = v23;
      }
      char v19 = (v18 == 0) ^ a2;
      *(unsigned char *)(v3 + 412) = v19 ^ 1;
      *(unsigned char *)(v3 + 413) = v19;
      int v17 = 1;
    }
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v17) {
    goto LABEL_20;
  }
  return v3 & 1;
}

uint64_t sub_1CD3A7DF4(uint64_t a1, char a2)
{
  int v5 = *(char **)(a1 + 424);
  unint64_t v4 = *(void *)(a1 + 432);
  if ((unint64_t)v5 >= v4)
  {
    __int16 v7 = *(char **)(a1 + 416);
    uint64_t v8 = (v5 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      long long v12 = (char *)operator new(8 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *(void *)(a1 + 408);
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        int v14 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        __int16 v15 = *((_WORD *)v5 + 2);
        *((_DWORD *)v13 - 2) = v14;
        v13 -= 8;
        *((_WORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      int v5 = *(char **)(a1 + 416);
    }
    *(void *)(a1 + 416) = v13;
    *(void *)(a1 + 424) = v6;
    *(void *)(a1 + 432) = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)int v5 = *(void *)(a1 + 408);
    uint64_t v6 = v5 + 8;
  }
  *(void *)(a1 + 424) = v6;
  *(_DWORD *)(a1 + 408) = 1;
  if (*(unsigned char *)(a1 + 413))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    return 0;
  }
  int v72 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  if (!(*(unsigned int (**)(void, int *, uint64_t *, uint64_t *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), &v72, &v71, &v70))goto LABEL_21; {
  v69[0] = 0;
  }
  v69[1] = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 192))(a1, v69);
  char v20 = v19;
  int v65 = (void **)"expected identifier after 'ifdef'";
  __int16 v68 = 259;
  llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v19, (const llvm::Twine *)&v65);
  if ((v20 & 1) == 0)
  {
    v62[0] = "unexpected token in 'ifdef'";
    __int16 v64 = 259;
    if (!llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)v62))
    {
      llvm::StringRef::lower((llvm::StringRef *)v69, &v65);
      std::string __p = v65;
      if (v67 >= 0) {
        __int16 v21 = &v65;
      }
      else {
        __int16 v21 = (void ***)v65;
      }
      if (v67 >= 0) {
        size_t v22 = v67 & 0x7F;
      }
      else {
        size_t v22 = v66;
      }
      uint64_t v23 = *(unsigned int *)(a1 + 1144);
      int v60 = v67;
      if (v23)
      {
        int v24 = 0;
        if (v22)
        {
          size_t v25 = v22;
          uint64_t v26 = v21;
          do
          {
            int v27 = *(unsigned __int8 *)v26;
            uint64_t v26 = (void ***)((char *)v26 + 1);
            int v24 = 33 * v24 + v27;
            --v25;
          }
          while (v25);
        }
        unsigned int v28 = v23 - 1;
        uint64_t v29 = *(void *)(a1 + 1136);
        uint64_t v58 = *(unsigned int *)(a1 + 1144);
        uint64_t v30 = v29 + 8 * v23 + 8;
        int v31 = 1;
        int v32 = v24;
        while (1)
        {
          uint64_t v33 = v32 & v28;
          uint64_t v34 = *(void **)(v29 + 8 * v33);
          if (v34 != (void *)-8)
          {
            if (!v34)
            {
              uint64_t v35 = v58;
              uint64_t v36 = v58;
              goto LABEL_45;
            }
            if (*(_DWORD *)(v30 + 4 * v33) == v24
              && v22 == *v34
              && (!v22 || !memcmp(v21, (char *)v34 + *(unsigned int *)(a1 + 1156), v22)))
            {
              break;
            }
          }
          int v32 = v31 + v33;
          ++v31;
        }
        uint64_t v35 = v58;
        if (v33 == -1) {
          uint64_t v36 = v58;
        }
        else {
          uint64_t v36 = (int)v33;
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
      }
LABEL_45:
      if (v60 < 0) {
        operator delete(__p);
      }
      if (v36 == v35)
      {
        llvm::StringRef::lower((llvm::StringRef *)v69, &v65);
        unint64_t v37 = v67 >= 0 ? &v65 : (void ***)v65;
        size_t v38 = v67 >= 0 ? v67 & 0x7F : v66;
        uint64_t v39 = *(unsigned int *)(a1 + 480);
        int __pa = v65;
        int v61 = v67;
        if (v39)
        {
          int v40 = 0;
          if (v38)
          {
            size_t v41 = v38;
            uint64_t v42 = v37;
            do
            {
              int v43 = *(unsigned __int8 *)v42;
              uint64_t v42 = (void ***)((char *)v42 + 1);
              int v40 = 33 * v40 + v43;
              --v41;
            }
            while (v41);
          }
          unsigned int v44 = v39 - 1;
          uint64_t v45 = *(void *)(a1 + 472);
          uint64_t v59 = *(unsigned int *)(a1 + 480);
          uint64_t v46 = v45 + 8 * v39 + 8;
          int v47 = 1;
          int v48 = v40;
          while (1)
          {
            uint64_t v49 = v48 & v44;
            uint64_t v50 = *(void **)(v45 + 8 * v49);
            if (v50 != (void *)-8)
            {
              if (!v50)
              {
                uint64_t v51 = v59;
                uint64_t v52 = v59;
                goto LABEL_67;
              }
              if (*(_DWORD *)(v46 + 4 * v49) == v40
                && v38 == *v50
                && (!v38 || !memcmp(v37, (char *)v50 + *(unsigned int *)(a1 + 492), v38)))
              {
                break;
              }
            }
            int v48 = v47 + v49;
            ++v47;
          }
          uint64_t v51 = v59;
          uint64_t v52 = v49 == -1 ? v59 : (int)v49;
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = 0;
        }
LABEL_67:
        if (v61 < 0) {
          operator delete(__pa);
        }
        if (v52 == v51)
        {
          uint64_t v53 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          llvm::StringRef::lower((llvm::StringRef *)v69, v62);
          __int16 v68 = 260;
          int v65 = v62;
          uint64_t v54 = llvm::MCContext::lookupSymbol(v53, (const llvm::Twine *)&v65);
          if (v63 < 0) {
            operator delete(v62[0]);
          }
          if (v54)
          {
            unint64_t AssociatedFragment = *(void *)v54 & 0xFFFFFFFFFFFFFFF8;
            if (!AssociatedFragment && (*(_DWORD *)(v54 + 8) & 0x1C00) == 0x800)
            {
              unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v54 + 24));
              *(void *)uint64_t v54 = *(void *)v54 & 7 | AssociatedFragment;
            }
            BOOL v17 = AssociatedFragment != 0;
          }
          else
          {
            BOOL v17 = 0;
          }
          goto LABEL_22;
        }
      }
LABEL_21:
      BOOL v17 = 1;
LABEL_22:
      uint64_t result = 0;
      char v18 = v17 ^ a2;
      *(unsigned char *)(a1 + 412) = v18 ^ 1;
      *(unsigned char *)(a1 + 413) = v18;
      return result;
    }
  }
  return 1;
}

uint64_t sub_1CD3A82FC(uint64_t a1, int a2, int a3)
{
  __s1 = 0;
  size_t __n = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (sub_1CD3AE788((llvm::MCAsmParser *)a1, (uint64_t)&__s1)) {
    goto LABEL_50;
  }
  if (**(_DWORD **)(a1 + 48) != 25)
  {
    if (a2) {
      uint64_t v35 = "expected comma after first string for 'ifidn' directive";
    }
    else {
      uint64_t v35 = "expected comma after first string for 'ifdif' directive";
    }
    goto LABEL_65;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (sub_1CD3AE788((llvm::MCAsmParser *)a1, (uint64_t)&__p))
  {
LABEL_50:
    if (a2) {
      uint64_t v35 = "expected text item parameter for 'ifidn' directive";
    }
    else {
      uint64_t v35 = "expected text item parameter for 'ifdif' directive";
    }
LABEL_65:
    v40[0] = (unsigned __int8 *)v35;
    __int16 v41 = 259;
    uint64_t v37 = llvm::MCAsmParser::TokError(a1, (uint64_t)v40, 0, 0);
    goto LABEL_59;
  }
  __int16 v7 = *(char **)(a1 + 424);
  unint64_t v6 = *(void *)(a1 + 432);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(char **)(a1 + 416);
    uint64_t v10 = (v7 - v9) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1CB833614();
      }
      int v14 = (char *)operator new(8 * v13);
    }
    else
    {
      int v14 = 0;
    }
    __int16 v15 = &v14[8 * v10];
    *(void *)__int16 v15 = *(void *)(a1 + 408);
    uint64_t v8 = v15 + 8;
    if (v7 != v9)
    {
      do
      {
        int v16 = *((_DWORD *)v7 - 2);
        v7 -= 8;
        __int16 v17 = *((_WORD *)v7 + 2);
        *((_DWORD *)v15 - 2) = v16;
        v15 -= 8;
        *((_WORD *)v15 + 2) = v17;
      }
      while (v7 != v9);
      __int16 v7 = *(char **)(a1 + 416);
    }
    *(void *)(a1 + 416) = v15;
    *(void *)(a1 + 424) = v8;
    *(void *)(a1 + 432) = &v14[8 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)__int16 v7 = *(void *)(a1 + 408);
    uint64_t v8 = v7 + 8;
  }
  *(void *)(a1 + 424) = v8;
  *(_DWORD *)(a1 + 408) = 1;
  if (a3)
  {
    p_s1 = (unsigned __int8 *)&__s1;
    if (v47 >= 0)
    {
      unint64_t v19 = HIBYTE(v47) & 0x7F;
    }
    else
    {
      p_s1 = (unsigned __int8 *)__s1;
      unint64_t v19 = __n;
    }
    v40[0] = p_s1;
    v40[1] = (unsigned __int8 *)v19;
    uint64_t v20 = HIBYTE(v44) & 0x7F;
    if (v44 < 0) {
      uint64_t v20 = v43;
    }
    if (v19 == v20)
    {
      if (v44 >= 0) {
        p_p = (unsigned __int8 *)&__p;
      }
      else {
        p_p = (unsigned __int8 *)__p;
      }
      BOOL v21 = llvm::StringRef::compare_insensitive(v40, p_p, v19) == 0;
    }
    else
    {
      BOOL v21 = 0;
    }
    char v22 = v21 ^ a2;
  }
  else
  {
    if (v47 >= 0) {
      size_t v23 = HIBYTE(v47) & 0x7F;
    }
    else {
      size_t v23 = __n;
    }
    uint64_t v24 = HIBYTE(v44) & 0x7F;
    if (v44 < 0) {
      uint64_t v24 = v43;
    }
    if (v23 == v24)
    {
      if (v44 >= 0) {
        size_t v25 = (unsigned __int8 *)&__p;
      }
      else {
        size_t v25 = (unsigned __int8 *)__p;
      }
      if (v47 < 0)
      {
        BOOL v34 = memcmp(__s1, v25, __n) == 0;
      }
      else if ((v47 & 0x7F00000000000000) != 0)
      {
        uint64_t v26 = (HIBYTE(v47) & 0x7F) - 1;
        int v27 = &__s1;
        do
        {
          int v29 = *(unsigned __int8 *)v27;
          int v27 = (void **)((char *)v27 + 1);
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v33 = v26-- != 0;
          BOOL v34 = v28 == v30;
        }
        while (v34 && v33);
      }
      else
      {
        BOOL v34 = 1;
      }
    }
    else
    {
      BOOL v34 = 0;
    }
    char v22 = v34 ^ a2;
  }
  char v36 = v22 ^ 1;
  *(unsigned char *)(a1 + 412) = v36;
  uint64_t v37 = 0;
  *(unsigned char *)(a1 + 413) = v36 ^ 1;
LABEL_59:
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(__s1);
  }
  return v37;
}

uint64_t sub_1CD3A8624(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t)a1;
  if ((*((_DWORD *)a1 + 102) - 1) >= 2)
  {
    v12[0] = "Encountered an elseif that doesn't follow an if or an elseif";
    __int16 v13 = 259;
    LOBYTE(v3) = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)v12, 0, 0);
    return v3 & 1;
  }
  *((_DWORD *)a1 + 102) = 2;
  uint64_t v5 = *((void *)a1 + 53);
  if (*((void *)a1 + 52) != v5 && *(unsigned char *)(v5 - 3) || *((unsigned char *)a1 + 412))
  {
    *((unsigned char *)a1 + 413) = 1;
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 224))(a1);
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (sub_1CD3AE788(a1, (uint64_t)&__p))
  {
    if (a3)
    {
      v12[0] = "expected text item parameter for 'elseifb' directive";
      __int16 v13 = 259;
      LOBYTE(v3) = llvm::MCAsmParser::TokError(v3, (uint64_t)v12, 0, 0);
      a3 = 0;
    }
    else
    {
      v12[0] = "expected text item parameter for 'elseifnb' directive";
      __int16 v13 = 259;
      LOBYTE(v3) = llvm::MCAsmParser::TokError(v3, (uint64_t)v12, 0, 0);
    }
  }
  else
  {
    v12[0] = "unexpected token in 'elseifb' directive";
    __int16 v13 = 259;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)v3, (const llvm::Twine *)v12))
    {
      a3 = 0;
      LOBYTE(v3) = 1;
    }
    else
    {
      uint64_t v7 = HIBYTE(v11) & 0x7F;
      if (v11 < 0) {
        uint64_t v7 = v10;
      }
      char v8 = (v7 == 0) ^ a3;
      *(unsigned char *)(v3 + 412) = v8 ^ 1;
      *(unsigned char *)(v3 + 413) = v8;
      a3 = 1;
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  if (a3) {
    goto LABEL_6;
  }
  return v3 & 1;
}

uint64_t sub_1CD3A87E8(uint64_t a1, uint64_t a2, char a3)
{
  if ((*(_DWORD *)(a1 + 408) - 1) >= 2)
  {
    int v60 = "Encountered an elseif that doesn't follow an if or an elseif";
    __int16 v63 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v60, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 408) = 2;
    uint64_t v5 = *(void *)(a1 + 424);
    if (*(void *)(a1 + 416) != v5 && *(unsigned char *)(v5 - 3) || *(unsigned char *)(a1 + 412))
    {
      *(unsigned char *)(a1 + 413) = 1;
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
      return 0;
    }
    int v59 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    if (!(*(unsigned int (**)(void, int *, uint64_t *, uint64_t *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), &v59, &v58, &v57))goto LABEL_7; {
    int v55 = 0;
    }
    size_t v56 = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, const char **))(*(void *)a1 + 192))(a1, &v55);
    char v10 = v9;
    int v60 = "expected identifier after 'elseifdef'";
    __int16 v63 = 259;
    llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9, (const llvm::Twine *)&v60);
    if ((v10 & 1) == 0)
    {
      uint64_t v53 = "unexpected token in 'elseifdef'";
      __int16 v54 = 259;
      if (!llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)&v53))
      {
        llvm::StringRef::lower((llvm::StringRef *)&v55, &v60);
        std::string __p = (char *)v60;
        if (v62 >= 0) {
          uint64_t v11 = &v60;
        }
        else {
          uint64_t v11 = (const char **)v60;
        }
        if (v62 >= 0) {
          size_t v12 = v62 & 0x7F;
        }
        else {
          size_t v12 = v61;
        }
        uint64_t v13 = *(unsigned int *)(a1 + 1144);
        int v51 = v62;
        if (v13)
        {
          int v14 = 0;
          if (v12)
          {
            size_t v15 = v12;
            int v16 = v11;
            do
            {
              int v17 = *(unsigned __int8 *)v16;
              int v16 = (const char **)((char *)v16 + 1);
              int v14 = 33 * v14 + v17;
              --v15;
            }
            while (v15);
          }
          unsigned int v18 = v13 - 1;
          uint64_t v19 = *(void *)(a1 + 1136);
          uint64_t v49 = *(unsigned int *)(a1 + 1144);
          uint64_t v20 = v19 + 8 * v13 + 8;
          int v21 = 1;
          int v22 = v14;
          while (1)
          {
            uint64_t v23 = v22 & v18;
            uint64_t v24 = *(void **)(v19 + 8 * v23);
            if (v24 != (void *)-8)
            {
              if (!v24)
              {
                uint64_t v25 = v49;
                uint64_t v26 = v49;
                goto LABEL_32;
              }
              if (*(_DWORD *)(v20 + 4 * v23) == v14
                && v12 == *v24
                && (!v12 || !memcmp(v11, (char *)v24 + *(unsigned int *)(a1 + 1156), v12)))
              {
                break;
              }
            }
            int v22 = v21 + v23;
            ++v21;
          }
          uint64_t v25 = v49;
          if (v23 == -1) {
            uint64_t v26 = v49;
          }
          else {
            uint64_t v26 = (int)v23;
          }
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
        }
LABEL_32:
        if (v51 < 0) {
          operator delete(__p);
        }
        if (v26 == v25)
        {
          llvm::StringRef::lower((llvm::StringRef *)&v55, &v60);
          int v52 = v62;
          int __pa = (char *)v60;
          int v27 = v62 >= 0 ? &v60 : (const char **)v60;
          size_t v28 = v62 >= 0 ? v62 & 0x7F : v61;
          uint64_t v29 = *(unsigned int *)(a1 + 480);
          if (v29)
          {
            int v30 = 0;
            if (v28)
            {
              size_t v31 = v28;
              int v32 = v27;
              do
              {
                int v33 = *(unsigned __int8 *)v32;
                int v32 = (const char **)((char *)v32 + 1);
                int v30 = 33 * v30 + v33;
                --v31;
              }
              while (v31);
            }
            unsigned int v34 = v29 - 1;
            uint64_t v35 = *(void *)(a1 + 472);
            uint64_t v50 = *(unsigned int *)(a1 + 480);
            uint64_t v36 = v35 + 8 * v29 + 8;
            int v37 = 1;
            int v38 = v30;
            while (1)
            {
              uint64_t v39 = v38 & v34;
              int v40 = *(void **)(v35 + 8 * v39);
              if (v40 != (void *)-8)
              {
                if (!v40)
                {
                  uint64_t v41 = v50;
                  uint64_t v42 = v50;
                  goto LABEL_54;
                }
                if (*(_DWORD *)(v36 + 4 * v39) == v30
                  && v28 == *v40
                  && (!v28 || !memcmp(v27, (char *)v40 + *(unsigned int *)(a1 + 492), v28)))
                {
                  break;
                }
              }
              int v38 = v37 + v39;
              ++v37;
            }
            uint64_t v41 = v50;
            uint64_t v42 = v39 == -1 ? v50 : (int)v39;
          }
          else
          {
            uint64_t v41 = 0;
            uint64_t v42 = 0;
          }
LABEL_54:
          if (v52 < 0) {
            operator delete(__pa);
          }
          if (v42 == v41)
          {
            uint64_t v43 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
            __int16 v63 = 261;
            int v60 = v55;
            size_t v61 = v56;
            uint64_t v44 = (unint64_t *)llvm::MCContext::lookupSymbol(v43, (const llvm::Twine *)&v60);
            if (v44)
            {
              uint64_t v45 = v44;
              unint64_t AssociatedFragment = *v44 & 0xFFFFFFFFFFFFFFF8;
              if (!AssociatedFragment && (v45[1] & 0x1C00) == 0x800)
              {
                unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v45[3]);
                *uint64_t v45 = *v45 & 7 | AssociatedFragment;
              }
              BOOL v7 = AssociatedFragment != 0;
            }
            else
            {
              BOOL v7 = 0;
            }
            goto LABEL_8;
          }
        }
LABEL_7:
        BOOL v7 = 1;
LABEL_8:
        uint64_t result = 0;
        char v8 = v7 ^ a3;
        *(unsigned char *)(a1 + 412) = v8 ^ 1;
        *(unsigned char *)(a1 + 413) = v8;
        return result;
      }
    }
    return 1;
  }
}

uint64_t sub_1CD3A8C5C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = a1;
  if ((*(_DWORD *)(a1 + 408) - 1) >= 2)
  {
    v36[0] = "Encountered an elseif that doesn't follow an if or an elseif";
    __int16 v37 = 259;
    LOBYTE(v4) = llvm::MCAsmParser::Error(a1, a2, (uint64_t)v36, 0, 0);
    return v4 & 1;
  }
  *(_DWORD *)(a1 + 408) = 2;
  uint64_t v7 = *(void *)(a1 + 424);
  if ((*(void *)(a1 + 416) == v7 || !*(unsigned char *)(v7 - 3)) && !*(unsigned char *)(a1 + 412))
  {
    __s1 = 0;
    size_t __n = 0;
    uint64_t v35 = 0;
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (!sub_1CD3AE788((llvm::MCAsmParser *)a1, (uint64_t)&__s1))
    {
      if (**(_DWORD **)(v4 + 48) != 25)
      {
        if (a3)
        {
          uint64_t v26 = "expected comma after first string for 'elseifidn' directive";
          goto LABEL_46;
        }
        int v27 = "expected comma after first string for 'elseifdif' directive";
LABEL_59:
        v36[0] = (unsigned __int8 *)v27;
        __int16 v37 = 259;
        LOBYTE(v4) = llvm::MCAsmParser::TokError(v4, (uint64_t)v36, 0, 0);
        goto LABEL_51;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 184))(v4);
      if (!sub_1CD3AE788((llvm::MCAsmParser *)v4, (uint64_t)&__p))
      {
        if (a4)
        {
          p_s1 = (unsigned __int8 *)&__s1;
          if (v35 >= 0)
          {
            unint64_t v10 = HIBYTE(v35) & 0x7F;
          }
          else
          {
            p_s1 = (unsigned __int8 *)__s1;
            unint64_t v10 = __n;
          }
          v36[0] = p_s1;
          v36[1] = (unsigned __int8 *)v10;
          uint64_t v11 = HIBYTE(v32) & 0x7F;
          if (v32 < 0) {
            uint64_t v11 = v31;
          }
          if (v10 == v11)
          {
            if (v32 >= 0) {
              p_p = (unsigned __int8 *)&__p;
            }
            else {
              p_p = (unsigned __int8 *)__p;
            }
            BOOL v12 = llvm::StringRef::compare_insensitive(v36, p_p, v10) == 0;
          }
          else
          {
            BOOL v12 = 0;
          }
          char v13 = v12 ^ a3;
        }
        else
        {
          if (v35 >= 0) {
            size_t v14 = HIBYTE(v35) & 0x7F;
          }
          else {
            size_t v14 = __n;
          }
          uint64_t v15 = HIBYTE(v32) & 0x7F;
          if (v32 < 0) {
            uint64_t v15 = v31;
          }
          if (v14 == v15)
          {
            if (v32 >= 0) {
              int v16 = (unsigned __int8 *)&__p;
            }
            else {
              int v16 = (unsigned __int8 *)__p;
            }
            if (v35 < 0)
            {
              BOOL v25 = memcmp(__s1, v16, __n) == 0;
            }
            else if ((v35 & 0x7F00000000000000) != 0)
            {
              uint64_t v17 = (HIBYTE(v35) & 0x7F) - 1;
              unsigned int v18 = &__s1;
              do
              {
                int v20 = *(unsigned __int8 *)v18;
                unsigned int v18 = (void **)((char *)v18 + 1);
                int v19 = v20;
                int v22 = *v16++;
                int v21 = v22;
                BOOL v24 = v17-- != 0;
                BOOL v25 = v19 == v21;
              }
              while (v25 && v24);
            }
            else
            {
              BOOL v25 = 1;
            }
          }
          else
          {
            BOOL v25 = 0;
          }
          char v13 = v25 ^ a3;
        }
        char v28 = v13 ^ 1;
        *(unsigned char *)(v4 + 412) = v28;
        *(unsigned char *)(v4 + 413) = v28 ^ 1;
        a3 = 1;
LABEL_51:
        if (SHIBYTE(v32) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v35) < 0)
        {
          operator delete(__s1);
          if (!a3) {
            return v4 & 1;
          }
        }
        else if (!a3)
        {
          return v4 & 1;
        }
        goto LABEL_6;
      }
    }
    if (a3)
    {
      uint64_t v26 = "expected text item parameter for 'elseifidn' directive";
LABEL_46:
      v36[0] = (unsigned __int8 *)v26;
      __int16 v37 = 259;
      LOBYTE(v4) = llvm::MCAsmParser::TokError(v4, (uint64_t)v36, 0, 0);
      a3 = 0;
      goto LABEL_51;
    }
    int v27 = "expected text item parameter for 'elseifdif' directive";
    goto LABEL_59;
  }
  *(unsigned char *)(a1 + 413) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
LABEL_6:
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1CD3A8F78(std::string *a1, uint64_t a2)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  sub_1CD3AED64(&v20, a2, 9);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = (const void **)v20;
  if (!v21) {
    goto LABEL_24;
  }
  uint64_t v4 = (const void **)((char *)v20 + 16 * v21);
  do
  {
    uint64_t v5 = *v3;
    if (!*v3)
    {
      std::string::size_type v8 = 0;
      uint64_t v9 = 0;
      char v10 = 0;
      std::string __p = 0;
      size_t v18 = 0;
      unint64_t v19 = 0;
      goto LABEL_14;
    }
    size_t v6 = (size_t)v3[1];
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v6 >= 0x17)
    {
      uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v11 = v6 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_p = operator new(v11 + 1);
      size_t v18 = v6;
      unint64_t v19 = v12 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v19) = v3[1];
      p_p = &__p;
      if (!v6) {
        goto LABEL_13;
      }
    }
    memmove(p_p, v5, v6);
LABEL_13:
    *((unsigned char *)p_p + v6) = 0;
    char v10 = HIBYTE(v19);
    uint64_t v9 = (void **)__p;
    std::string::size_type v8 = v18;
LABEL_14:
    int v13 = v10;
    if (v10 >= 0) {
      size_t v14 = &__p;
    }
    else {
      size_t v14 = v9;
    }
    std::string::size_type v15 = v10 & 0x7F;
    if (v13 >= 0) {
      std::string::size_type v16 = v15;
    }
    else {
      std::string::size_type v16 = v8;
    }
    std::string::append(a1, (const std::string::value_type *)v14, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    v3 += 2;
  }
  while (v3 != v4);
  uint64_t v3 = (const void **)v20;
LABEL_24:
  if (v3 != v22) {
    free(v3);
  }
}

BOOL sub_1CD3A9100(void *a1)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  int v3 = *(unsigned __int8 *)(v2 + 1513);
  if (*(unsigned char *)(v2 + 1513) && !*(_DWORD *)((*(uint64_t (**)(void *))(*a1 + 48))(a1) + 1516))
  {
    if (a1[101])
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
      uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
      uint64_t v7 = *(void **)(v6 + 1272);
      size_t v8 = *(void *)(v6 + 1280);
      uint64_t v9 = (void *)a1[100];
      size_t v10 = a1[101];
      uint64_t v11 = *(uint64_t **)(v5 + 1480);
      if (v11)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v11;
          if (!*((_DWORD *)v11 + 8)) {
            break;
          }
          uint64_t v11 = (uint64_t *)*v11;
          if (!*v12) {
            goto LABEL_28;
          }
        }
        int v13 = (char *)v11;
      }
      else
      {
        uint64_t v12 = (uint64_t **)(v5 + 1480);
LABEL_28:
        int v13 = (char *)operator new(0x228uLL);
        *((_DWORD *)v13 + 8) = 0;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 72) = 0u;
        *(_OWORD *)(v13 + 88) = 0u;
        *(_OWORD *)(v13 + 104) = 0u;
        *(_OWORD *)(v13 + 120) = 0u;
        *(_OWORD *)(v13 + 136) = 0u;
        *(_OWORD *)(v13 + 168) = 0u;
        *(_OWORD *)(v13 + 184) = 0u;
        *(_OWORD *)(v13 + 200) = 0u;
        *(_OWORD *)(v13 + 216) = 0u;
        *(_OWORD *)(v13 + 232) = 0u;
        *(_OWORD *)(v13 + 248) = 0u;
        *((void *)v13 + 65) = 0;
        *(_OWORD *)(v13 + 264) = 0u;
        *(_OWORD *)(v13 + 280) = 0u;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 296) = 0u;
        *(_OWORD *)(v13 + 312) = 0u;
        *(_OWORD *)(v13 + 328) = 0u;
        *(_OWORD *)(v13 + 344) = 0u;
        *(_OWORD *)(v13 + 360) = 0u;
        *(_OWORD *)(v13 + 376) = 0u;
        *(_OWORD *)(v13 + 392) = 0u;
        *(_OWORD *)(v13 + 408) = 0u;
        *(_OWORD *)(v13 + 424) = 0u;
        *(_OWORD *)(v13 + 440) = 0u;
        *(_OWORD *)(v13 + 456) = 0u;
        *(_OWORD *)(v13 + 472) = 0u;
        *(_OWORD *)(v13 + 152) = 0u;
        *(_OWORD *)(v13 + 488) = 0u;
        *(_OWORD *)(v13 + 504) = 0u;
        *((void *)v13 + 6) = v13 + 64;
        *((_DWORD *)v13 + 15) = 3;
        *((void *)v13 + 17) = v13 + 152;
        *((_DWORD *)v13 + 37) = 3;
        *((void *)v13 + 47) = 0;
        *((void *)v13 + 46) = 0;
        *((void *)v13 + 48) = 0x1000000000;
        *((_OWORD *)v13 + 25) = 0u;
        *((_OWORD *)v13 + 26) = 0u;
        *((_OWORD *)v13 + 27) = 0u;
        *(void *)(v13 + 445) = 0;
        v13[497] = 1;
        *((void *)v13 + 64) = 0;
        *((void *)v13 + 63) = 0;
        *((_DWORD *)v13 + 130) = 0;
        *((void *)v13 + 66) = 0;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 67) = 0;
        *(void *)int v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = v12;
        *uint64_t v12 = (uint64_t *)v13;
        uint64_t v32 = (uint64_t *)v13;
        uint64_t v33 = **(void **)(v5 + 1472);
        if (v33)
        {
          *(void *)(v5 + 1472) = v33;
          uint64_t v32 = *v12;
        }
        sub_1CB8358B8(*(uint64_t **)(v5 + 1480), v32);
        ++*(void *)(v5 + 1488);
      }
      LOBYTE(v36) = 0;
      char v37 = 0;
      v34.n128_u8[0] = 0;
      LOBYTE(v35) = 0;
      __n128 v4 = sub_1CCBB0D74((uint64_t)(v13 + 40), v7, v8, v9, v10, &v36, &v34);
    }
    uint64_t v14 = (*(uint64_t (**)(void *, __n128))(*a1 + 48))(a1, v4);
    uint64_t v15 = v14;
    std::string::size_type v16 = *(uint64_t **)(v14 + 1480);
    if (v16)
    {
      while (1)
      {
        uint64_t v17 = (uint64_t **)v16;
        if (!*((_DWORD *)v16 + 8)) {
          break;
        }
        std::string::size_type v16 = (uint64_t *)*v16;
        if (!*v17) {
          goto LABEL_24;
        }
      }
      size_t v18 = (char *)v16;
    }
    else
    {
      uint64_t v17 = (uint64_t **)(v14 + 1480);
LABEL_24:
      size_t v18 = (char *)operator new(0x228uLL);
      *((_DWORD *)v18 + 8) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_OWORD *)(v18 + 248) = 0u;
      *((void *)v18 + 65) = 0;
      *(_OWORD *)(v18 + 264) = 0u;
      *(_OWORD *)(v18 + 280) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 296) = 0u;
      *(_OWORD *)(v18 + 312) = 0u;
      *(_OWORD *)(v18 + 328) = 0u;
      *(_OWORD *)(v18 + 344) = 0u;
      *(_OWORD *)(v18 + 360) = 0u;
      *(_OWORD *)(v18 + 376) = 0u;
      *(_OWORD *)(v18 + 392) = 0u;
      *(_OWORD *)(v18 + 408) = 0u;
      *(_OWORD *)(v18 + 424) = 0u;
      *(_OWORD *)(v18 + 440) = 0u;
      *(_OWORD *)(v18 + 456) = 0u;
      *(_OWORD *)(v18 + 472) = 0u;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 488) = 0u;
      *(_OWORD *)(v18 + 504) = 0u;
      *((void *)v18 + 6) = v18 + 64;
      *((_DWORD *)v18 + 15) = 3;
      *((void *)v18 + 17) = v18 + 152;
      *((_DWORD *)v18 + 37) = 3;
      *((void *)v18 + 47) = 0;
      *((void *)v18 + 46) = 0;
      *((void *)v18 + 48) = 0x1000000000;
      *((_OWORD *)v18 + 25) = 0u;
      *((_OWORD *)v18 + 26) = 0u;
      *((_OWORD *)v18 + 27) = 0u;
      *(void *)(v18 + 445) = 0;
      v18[497] = 1;
      *((void *)v18 + 64) = 0;
      *((void *)v18 + 63) = 0;
      *((_DWORD *)v18 + 130) = 0;
      *((void *)v18 + 66) = 0;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 67) = 0;
      *(void *)size_t v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v17;
      uint64_t *v17 = (uint64_t *)v18;
      int v30 = (uint64_t *)v18;
      uint64_t v31 = **(void **)(v15 + 1472);
      if (v31)
      {
        *(void *)(v15 + 1472) = v31;
        int v30 = *v17;
      }
      sub_1CB8358B8(*(uint64_t **)(v15 + 1480), v30);
      ++*(void *)(v15 + 1488);
    }
    uint64_t v19 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
    uint64_t v20 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    uint64_t v21 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
    uint64_t v22 = *(void *)(v21 + 1272);
    uint64_t v23 = *(void *)(v21 + 1280);
    char v24 = v18[447];
    BOOL v25 = v24 < 0;
    if (v24 >= 0) {
      uint64_t v26 = v18 + 424;
    }
    else {
      uint64_t v26 = (char *)*((void *)v18 + 53);
    }
    uint64_t v27 = v24 & 0x7F;
    if (v25) {
      uint64_t v28 = *((void *)v18 + 54);
    }
    else {
      uint64_t v28 = v27;
    }
    long long v36 = *(_OWORD *)(v18 + 452);
    char v37 = v18[468];
    __n128 v34 = *(__n128 *)(v18 + 472);
    uint64_t v35 = *((void *)v18 + 61);
    (*(void (**)(void *__return_ptr, uint64_t, void, uint64_t, uint64_t, char *, uint64_t, long long *, __n128 *, _DWORD))(*(void *)v20 + 688))(v38, v20, 0, v22, v23, v26, v28, &v36, &v34, 0);
    *(_DWORD *)(v19 + 1516) = v38[0];
  }
  return v3 != 0;
}

uint64_t sub_1CD3A963C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (dword_1EBD0DC30 == (uint64_t)(*(void *)(a1 + 688) - *(void *)(a1 + 680)) >> 3)
  {
    sub_1CBF4C1CC((uint64_t)&v84);
    sub_1CBF435C4(&v84, (uint64_t)"macros cannot be nested more than ", 34);
    uint64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = sub_1CBF435C4(v5, (uint64_t)" levels deep.", 13);
    sub_1CBF435C4(v6, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
    std::stringbuf::str();
    LOWORD(v65[1]) = 260;
    __n[0] = (size_t)&__p;
    uint64_t v7 = llvm::MCAsmParser::TokError(a1, (uint64_t)__n, 0, 0);
    if (SHIBYTE(v81) < 0) {
      operator delete((void *)__p);
    }
    sub_1CD45577C((uint64_t)&v84, MEMORY[0x1E4FBA418]);
    MEMORY[0x1D25D9C00](&v87);
    return v7;
  }
  LODWORD(v9) = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  if (a2) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 4);
  }
  uint64_t v84 = (char *)&v85 + 8;
  *(void *)&long long v85 = 0x400000000;
  sub_1CD8F3C00(&v69, v9);
  sub_1CD8F3E70((uint64_t)&v84, v9);
  int v10 = 0;
  char v63 = 0;
  int v11 = a4;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 136);
    *(_OWORD *)size_t __n = 0u;
    memset(v65, 0, 26);
    if (**(_DWORD **)(a1 + 48) == 2)
    {
      sub_1CD3ABC8C((uint64_t)&__p, a1, 1);
      int v13 = __p;
      if (v83 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v13 == 27)
      {
        if ((*(unsigned int (**)(uint64_t, size_t *))(*(void *)a1 + 192))(a1, __n))
        {
          uint64_t v43 = "invalid argument identifier for formal argument";
          goto LABEL_95;
        }
        if (**(_DWORD **)(a1 + 48) != 27)
        {
          *(void *)&long long __p = "expected '=' after formal parameter identifier";
          LOWORD(v83) = 259;
          char v61 = llvm::MCAsmParser::TokError(a1, (uint64_t)&__p, 0, 0);
          goto LABEL_96;
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        char v63 = 1;
      }
    }
    size_t v14 = __n[1];
    if ((v63 & 1) != 0 && !__n[1])
    {
      uint64_t v43 = "cannot mix positional and keyword arguments";
LABEL_95:
      *(void *)&long long __p = v43;
      LOWORD(v83) = 259;
      char v61 = llvm::MCAsmParser::Error(a1, v12, (uint64_t)&__p, 0, 0);
LABEL_96:
      char v44 = v61;
      goto LABEL_77;
    }
    LODWORD(v15) = v10;
    if (__n[1])
    {
      if (!v9)
      {
        std::string::size_type v16 = (const void *)__n[0];
LABEL_76:
        __int16 v76 = 1283;
        v73[0] = "parameter named '";
        uint64_t v74 = v16;
        size_t v75 = v14;
        v77[0] = v73;
        std::string::size_type v78 = "' does not exist for macro '";
        __int16 v79 = 770;
        uint64_t v46 = *a2;
        uint64_t v45 = a2[1];
        v88[0] = v77;
        uint64_t v89 = v46;
        uint64_t v90 = v45;
        __int16 v91 = 1282;
        *(void *)&long long __p = v88;
        uint64_t v81 = "'";
        LOWORD(v83) = 770;
        char v44 = llvm::MCAsmParser::Error(a1, v12, (uint64_t)&__p, 0, 0);
        goto LABEL_77;
      }
      uint64_t v15 = 0;
      std::string::size_type v16 = (const void *)__n[0];
      uint64_t v17 = (void *)(a2[4] + 8);
      while (*v17 != v14 || memcmp((const void *)*(v17 - 1), v16, v14))
      {
        ++v15;
        v17 += 6;
        if (v9 == v15) {
          goto LABEL_76;
        }
      }
      int v11 = a4;
    }
    size_t v18 = 0;
    if (a2 && v15 < v9) {
      size_t v18 = (uint64_t *)(a2[4] + 48 * v15);
    }
    uint64_t v19 = *(void *)(a1 + 136);
    uint64_t v72 = 0;
    if (**(_DWORD **)(a1 + 48) != 36)
    {
      if (!sub_1CD3AF0CC(a1, v18, (uint64_t)v65, v11)) {
        goto LABEL_45;
      }
      if (!a2)
      {
        char v44 = 1;
        goto LABEL_77;
      }
      __int16 v91 = 1283;
      uint64_t v59 = *a2;
      uint64_t v60 = a2[1];
      v88[0] = " in '";
      uint64_t v89 = v59;
      uint64_t v90 = v60;
      *(void *)&long long __p = v88;
      uint64_t v81 = "' macro";
      LOWORD(v83) = 770;
      char v58 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
LABEL_93:
      char v44 = v58;
      goto LABEL_77;
    }
    v88[0] = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v18);
    if ((*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)a1 + 232))(a1, v88, &v72)) {
      goto LABEL_71;
    }
    uint64_t v20 = v88[0];
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 72))(v21);
    long long __p = 0uLL;
    LODWORD(__src) = 0;
    uint64_t v81 = 0;
    if (*(unsigned char *)v20 == 1)
    {
      uint64_t v23 = *(char **)(v20 + 16);
      goto LABEL_35;
    }
    if ((llvm::MCExpr::evaluateAsRelocatableImpl(v20, (uint64_t)&__p, v22, 0, 0, 0, 0) & 1) == 0 || __p != 0)
    {
      *(void *)&long long __p = "expected absolute expression";
      LOWORD(v83) = 259;
      char v58 = llvm::MCAsmParser::Error(a1, v19, (uint64_t)&__p, 0, 0);
      goto LABEL_93;
    }
    uint64_t v23 = (char *)v81;
LABEL_35:
    LODWORD(__p) = 4;
    *((void *)&__p + 1) = v19;
    uint64_t v81 = (const char *)(v72 - v19);
    unsigned int v83 = 64;
    __src = v23;
    uint64_t v24 = *((void *)&v65[0] + 1);
    if (*((void *)&v65[0] + 1) >= *(void *)&v65[1])
    {
      uint64_t v27 = sub_1CD37E5E8((char **)v65, (uint64_t)&__p);
    }
    else
    {
      long long v25 = __p;
      *(void *)(*((void *)&v65[0] + 1) + 16) = v81;
      *(_OWORD *)uint64_t v24 = v25;
      unsigned int v26 = v83;
      *(_DWORD *)(v24 + 32) = v83;
      if (v26 > 0x40) {
        operator new[]();
      }
      *(void *)(v24 + 24) = __src;
      uint64_t v27 = (char *)(v24 + 40);
    }
    *((void *)&v65[0] + 1) = v27;
    if (v83 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
LABEL_45:
    if (*(void *)&v65[0] != *((void *)&v65[0] + 1))
    {
      uint64_t v28 = v69;
      if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3) <= v15)
      {
        sub_1CD8F3C00(&v69, (v15 + 1));
        uint64_t v28 = v69;
      }
      uint64_t v29 = (_OWORD *)(v28 + 24 * v15);
      if (v29 != v65) {
        sub_1CD37E798((uint64_t)v29, *(uint64_t *)&v65[0], *((uint64_t *)&v65[0] + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v65[0] + 1) - *(void *)&v65[0]) >> 3));
      }
      if (v85 <= v15) {
        sub_1CD8F3E70((uint64_t)&v84, (v15 + 1));
      }
      *((void *)v84 + v15) = *(void *)(a1 + 136);
    }
    int v30 = **(_DWORD **)(a1 + 48);
    if (v30 == v11) {
      break;
    }
    if (v30 == 25) {
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    }
    *(void *)&long long __p = v65;
    sub_1CCBB926C((void ***)&__p);
    if ((int)v9 - 1 < ++v10)
    {
      __n[0] = (size_t)"too many positional arguments";
      LOWORD(v65[1]) = 259;
      char v44 = llvm::MCAsmParser::TokError(a1, (uint64_t)__n, 0, 0);
      goto LABEL_78;
    }
  }
  if (!v9)
  {
LABEL_71:
    char v44 = 0;
    goto LABEL_77;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  char v44 = 0;
  do
  {
    if (*(void *)(v69 + v32) == *(void *)(v69 + v32 + 8))
    {
      uint64_t v34 = a2[4];
      if (*(unsigned char *)(v34 + v33 + 40))
      {
        uint64_t v39 = *(void *)((char *)v84 + v31);
        if (!v39) {
          uint64_t v39 = *(void *)(a1 + 136);
        }
        int v40 = (const void **)(v34 + v33);
        __int16 v76 = 1283;
        v73[0] = "missing value for required parameter '";
        uint64_t v74 = *v40;
        size_t v75 = (size_t)v40[1];
        v77[0] = v73;
        std::string::size_type v78 = "' in macro '";
        __int16 v79 = 770;
        uint64_t v42 = *a2;
        uint64_t v41 = a2[1];
        v88[0] = v77;
        uint64_t v89 = v42;
        uint64_t v90 = v41;
        __int16 v91 = 1282;
        *(void *)&long long __p = v88;
        uint64_t v81 = "'";
        LOWORD(v83) = 770;
        llvm::MCAsmParser::Error(a1, v39, (uint64_t)&__p, 0, 0);
        uint64_t v34 = a2[4];
        char v44 = 1;
      }
      uint64_t v35 = v34 + v33;
      uint64_t v36 = *(void *)(v35 + 16);
      uint64_t v37 = *(void *)(v35 + 24);
      uint64_t v38 = v35 + 16;
      if (v36 != v37 && v38 != v69 + v32) {
        sub_1CD37E798(v69 + v32, v36, v37, 0xCCCCCCCCCCCCCCCDLL * ((v37 - v36) >> 3));
      }
    }
    v33 += 48;
    v32 += 24;
    v31 += 8;
  }
  while (48 * v9 != v33);
LABEL_77:
  *(void *)&long long __p = v65;
  sub_1CCBB926C((void ***)&__p);
LABEL_78:
  if (v84 != (char *)&v85 + 8) {
    free(v84);
  }
  if (v44)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v84 = v86;
    long long v85 = xmmword_1CD96DBF0;
    uint64_t v47 = (unsigned __int8 *)a2[2];
    unint64_t v48 = a2[3];
    LODWORD(__n[1]) = 0;
    uint64_t v66 = 0;
    __int16 v68 = &v84;
    int v67 = 0;
    __n[0] = (size_t)&unk_1F2646FA8;
    memset(v65, 0, 25);
    uint64_t v49 = a2[4];
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - v49) >> 4);
    uint64_t v51 = v69;
    uint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3);
    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v7 = sub_1CD3ACA20(a1, (llvm::raw_ostream *)__n, v47, v48, v49, v50, v51, v52, a2 + 7, *(void *)(*(void *)(v53 + 8) + 8));
    if ((v7 & 1) == 0)
    {
      int v55 = *(_DWORD **)&v65[1];
      if (*((void *)&v65[0] + 1) - *(void *)&v65[1] > 4uLL)
      {
        *(unsigned char *)(*(void *)&v65[1] + 4) = 10;
        _DWORD *v55 = 1835298405;
        *(void *)&v65[1] += 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__n, "endm\n", 5uLL);
      }
      size_t v56 = *v68;
      uint64_t v57 = (llvm::WritableMemoryBuffer *)v68[1];
      *(void *)&long long __p = "<instantiation>";
      LOWORD(v83) = 259;
      sub_1CD0963EC(v57, v56, (const void ***)&__p, (uint64_t)v88);
      operator new();
    }
    __n[0] = (size_t)&unk_1F2646B98;
    if (v67 == 1 && *(void *)&v65[0]) {
      MEMORY[0x1D25D9CB0](*(void *)&v65[0], 0x1000C8077774924);
    }
    if (v84 != v86) {
      free(v84);
    }
  }
  uint64_t v84 = &v69;
  sub_1CD37EB34((void ***)&v84);
  return v7;
}

uint64_t sub_1CD3AA35C(llvm::MCAsmParser *this)
{
  int v2 = *((_DWORD *)this + 128);
  if (v2 == 1)
  {
    int v3 = "missing name in top-level ENDS directive";
    goto LABEL_5;
  }
  if (!v2)
  {
    int v3 = "ENDS directive without matching STRUC/STRUCT/UNION";
LABEL_5:
    *(void *)&long long v81 = v3;
    LOWORD(v84) = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)&v81, 0, 0);
  }
  *(void *)&long long v81 = "unexpected token";
  LOWORD(v84) = 259;
  if (llvm::MCAsmParser::parseEOL(this, (const llvm::Twine *)&v81))
  {
    *(void *)&long long v81 = " in nested ENDS directive";
    LOWORD(v84) = 259;
    return llvm::MCAsmParser::addErrorSuffix(this, (const llvm::Twine *)&v81);
  }
  sub_1CD3AF8A0((uint64_t)&v81, (uint64_t)this + 504);
  unsigned int v84 = (v84 + (unint64_t)v82 - 1) / v82 * v82;
  uint64_t v5 = *((void *)this + 63) + 96 * *((unsigned int *)this + 128);
  if (!*((void *)&v81 + 1))
  {
    uint64_t v14 = *(void *)(v5 - 56);
    unint64_t v15 = *(void *)(v5 - 48);
    uint64_t v16 = (uint64_t)(v15 - v14) / 144;
    uint64_t v17 = (int ***)__p;
    size_t v18 = v86;
    if (v86 - (unsigned char *)__p >= 1)
    {
      uint64_t v19 = (v86 - (unsigned char *)__p) / 144;
      uint64_t v20 = (void ***)(v14 + 144 * v16);
      uint64_t v21 = *(void *)(v5 - 40);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v21 - v15) >> 4)) >= v19)
      {
        uint64_t v26 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - (void)v20) >> 4);
        if (v26 >= v19)
        {
          uint64_t v31 = (uint64_t **)((char *)__p + 144 * v19);
          uint64_t v29 = *(void ****)(v5 - 48);
          uint64_t v26 = (v86 - (unsigned char *)__p) / 144;
        }
        else
        {
          uint64_t v27 = (uint64_t **)((char *)__p + 16 * ((uint64_t)(v15 - (void)v20) >> 4));
          BOOL v77 = v27;
          if (v27 == (uint64_t **)v86)
          {
            uint64_t v29 = *(void ****)(v5 - 48);
          }
          else
          {
            uint64_t v28 = v15 + 16;
            uint64_t v29 = *(void ****)(v5 - 48);
            do
            {
              *(_OWORD *)(v28 - 16) = *(_OWORD *)v27;
              uint64_t v30 = sub_1CD3B011C(v28, v27 + 2);
              v27 += 18;
              v29 += 18;
              uint64_t v28 = v30 + 144;
            }
            while (v27 != (uint64_t **)v18);
          }
          *(void *)(v5 - 48) = v29;
          uint64_t v31 = v77;
        }
        BOOL v47 = v26 < 1;
        uint64_t v16 = (uint64_t)(v15 - v14) / 144;
        if (!v47)
        {
          __int16 v79 = (int ***)v31;
          uint64_t v48 = 9 * v19;
          uint64_t v49 = &v20[18 * v19];
          unint64_t v50 = (uint64_t **)&v29[-2 * v48];
          uint64_t v51 = v29;
          if ((unint64_t)v50 < v15)
          {
            uint64_t v51 = v29;
            do
            {
              *(_OWORD *)uint64_t v51 = *(_OWORD *)v50;
              sub_1CD3B011C((uint64_t)(v51 + 2), v50 + 2);
              v50 += 18;
              v51 += 18;
            }
            while ((unint64_t)v50 < v15);
          }
          *(void *)(v5 - 48) = v51;
          if (v29 != v49)
          {
            unint64_t v52 = 0x8E38E38E38E38E39 * (((char *)v29 - (char *)v49) >> 4);
            uint64_t v53 = (int *)(v29 - 18);
            uint64_t v54 = 18 * v52;
            do
            {
              *(_OWORD *)uint64_t v53 = *(_OWORD *)&v20[v54 - 18];
              sub_1CD3B0630(v53 + 4, (int ***)&v20[v54 - 16]);
              v53 -= 36;
              v54 -= 18;
            }
            while (v54 * 8);
          }
          uint64_t v16 = (uint64_t)(v15 - v14) / 144;
          if (v17 != v79)
          {
            int v55 = (int *)(v14 + 144 * ((uint64_t)(v15 - v14) / 144) + 16);
            do
            {
              *((_OWORD *)v55 - 1) = *(_OWORD *)v17;
              size_t v56 = sub_1CD3B0630(v55, v17 + 2);
              v17 += 18;
              int v55 = v56 + 36;
            }
            while (v17 != v79);
          }
        }
      }
      else
      {
        unint64_t v22 = v19 + v16;
        if ((unint64_t)(v19 + v16) > 0x1C71C71C71C71C7) {
          abort();
        }
        unint64_t v23 = 0x8E38E38E38E38E39 * ((v21 - v14) >> 4);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0xE38E38E38E38E3) {
          unint64_t v24 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 > 0x1C71C71C71C71C7) {
            sub_1CB833614();
          }
          long long v25 = (char *)operator new(144 * v24);
        }
        else
        {
          long long v25 = 0;
        }
        uint64_t v32 = v16;
        uint64_t v33 = &v25[144 * v16];
        size_t v80 = &v33[144 * v19];
        uint64_t v34 = 144 * v19;
        uint64_t v35 = (uint64_t)(v33 + 16);
        uint64_t v36 = (uint64_t **)(v17 + 2);
        do
        {
          *(_OWORD *)(v35 - 16) = *((_OWORD *)v36 - 1);
          uint64_t v35 = sub_1CD3B011C(v35, v36) + 144;
          v36 += 18;
          v34 -= 144;
        }
        while (v34);
        uint64_t v37 = *(void ****)(v5 - 56);
        if (v20 != v37)
        {
          uint64_t v78 = v5;
          uint64_t v38 = 144 * v32;
          uint64_t v39 = v25;
          uint64_t v40 = v14;
          do
          {
            *(_OWORD *)&v39[v38 - 144] = *(_OWORD *)(v40 + v38 - 144);
            sub_1CD3B011C((uint64_t)&v39[v38 - 128], (uint64_t **)(v40 + v38 - 128));
            v40 -= 144;
            v39 -= 144;
          }
          while ((void ***)(v40 + v38) != v37);
          uint64_t v33 = &v39[144 * v32];
          uint64_t v5 = v78;
        }
        uint64_t v41 = &v25[144 * v24];
        uint64_t v42 = *(void ****)(v5 - 48);
        uint64_t v43 = v80;
        if (v20 != v42)
        {
          uint64_t v44 = 144 * v32;
          uint64_t v45 = &v25[144 * v19];
          do
          {
            *(_OWORD *)&v45[144 * v32] = *(_OWORD *)(v14 + 144 * v32);
            sub_1CD3B011C((uint64_t)&v45[v44 + 16], (uint64_t **)(v14 + v44 + 16));
            v14 += 144;
            v45 += 144;
          }
          while ((void ***)(v14 + v44) != v42);
          uint64_t v20 = *(void ****)(v5 - 48);
          uint64_t v43 = &v45[144 * v32];
        }
        uint64_t v46 = *(void ****)(v5 - 56);
        *(void *)(v5 - 56) = v33;
        *(void *)(v5 - 48) = v43;
        for (*(void *)(v5 - 40) = v41; v20 != v46; v20 -= 18)
          sub_1CD39B268(v20 - 16);
        uint64_t v16 = v32;
        if (v46) {
          operator delete(v46);
        }
      }
    }
    if (v88)
    {
      for (unint64_t i = v87; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      unint64_t i = v87;
    }
    uint64_t v59 = &v87[v88];
    if (i != v59)
    {
      uint64_t v60 = *i;
      do
      {
        size_t v61 = *(void *)(v60 + 8) + v16;
        (*sub_1CD5CF708(v5 - 32, (unsigned __int8 *)(v60 + 16), *(void *)v60))[1] = v61;
        do
        {
          uint64_t v62 = i[1];
          ++i;
          uint64_t v60 = v62;
          if (v62) {
            BOOL v63 = v60 == -8;
          }
          else {
            BOOL v63 = 1;
          }
        }
        while (v63);
      }
      while (i != v59);
    }
    int v64 = *(unsigned __int8 *)(v5 - 80);
    if (__p != v86 && v64 == 0)
    {
      unsigned int v67 = *(_DWORD *)(v5 - 76);
      if (v83 >= v67) {
        unint64_t v68 = v67;
      }
      else {
        unint64_t v68 = v83;
      }
      int v64 = (*(unsigned int *)(v5 - 68) + v68 - 1) / v68 * v68;
    }
    else if (*(unsigned char *)(v5 - 80))
    {
      unsigned int v66 = *(_DWORD *)(v5 - 64);
      if (v66 <= v84) {
        unsigned int v66 = v84;
      }
      *(_DWORD *)(v5 - 64) = v66;
      goto LABEL_96;
    }
    uint64_t v69 = *(_DWORD **)(v5 - 48);
    for (j = (_DWORD *)(*(void *)(v5 - 56) + 144 * v16); j != v69; j += 36)
      *j += v64;
    unsigned int v71 = v84 + v64;
    unsigned int v72 = *(_DWORD *)(v5 - 64);
    if (v72 <= v71) {
      unsigned int v72 = v71;
    }
    *(_DWORD *)(v5 - 68) = v71;
    *(_DWORD *)(v5 - 64) = v72;
    goto LABEL_96;
  }
  uint64_t v6 = sub_1CD3AF930(v5 - 96, v81, *((uint64_t *)&v81 + 1), 2, v83);
  uint64_t v7 = v6;
  size_t v8 = (void ***)(v6 + 6);
  unsigned int v9 = v84;
  v6[2] = 1;
  v6[3] = v9;
  v6[1] = v9;
  unsigned int v10 = *v6 + v9;
  if (!*(unsigned char *)(v5 - 80)) {
    *(_DWORD *)(v5 - 68) = v10;
  }
  if (*(_DWORD *)(v5 - 64) > v10) {
    unsigned int v10 = *(_DWORD *)(v5 - 64);
  }
  *(_DWORD *)(v5 - 64) = v10;
  sub_1CD3AFBA0((uint64_t)(v6 + 12), &v81);
  sub_1CD3AFE68(v8);
  int v11 = (int *)__p;
  uint64_t v12 = (int *)v86;
  if (__p != v86)
  {
    int v13 = (uint64_t ***)(*((void *)v7 + 4) - 24);
    do
    {
      sub_1CD3AFFF4(v13, v11 + 4);
      v11 += 36;
    }
    while (v11 != v12);
  }
LABEL_96:
  sub_1CD61201C((uint64_t)&v87);
  BOOL v73 = (char *)__p;
  if (__p)
  {
    uint64_t v74 = (void ***)v86;
    size_t v75 = __p;
    if (v86 != __p)
    {
      do
      {
        __int16 v76 = v74 - 18;
        sub_1CD39B268(v74 - 16);
        uint64_t v74 = v76;
      }
      while (v76 != (void ***)v73);
      size_t v75 = __p;
    }
    uint64_t v86 = v73;
    operator delete(v75);
  }
  return 0;
}

uint64_t sub_1CD3AA9EC(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  uint64_t result = llvm::MCAsmParser::parseMany(a1, (uint64_t (*)(uint64_t))sub_1CD3B0CF4, (uint64_t)v12, 1);
  if (result)
  {
    v8[0] = " in '";
    v8[2] = a2;
    v8[3] = a3;
    __int16 v9 = 1283;
    v10[0] = v8;
    v10[2] = "' directive";
    __int16 v11 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_1CD3AAA94(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((_DWORD *)a1 + 128))
  {
    sub_1CD3B0FB0((uint64_t)a1, (uint64_t)"", 0, a4);
    return 0;
  }
  else
  {
    uint64_t result = sub_1CD3B0E94(a1, a4, 0);
    if (result)
    {
      v8[0] = " in '";
      v8[2] = a2;
      v8[3] = a3;
      __int16 v9 = 1283;
      v10[0] = v8;
      v10[2] = "' directive";
      __int16 v11 = 770;
      return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v10);
    }
  }
  return result;
}

uint64_t sub_1CD3AAB48(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (*((_DWORD *)a1 + 128))
  {
    uint64_t result = sub_1CD3B1B88((uint64_t)a1, (uint64_t)"", 0, a4, a5);
    if (!result) {
      return result;
    }
LABEL_5:
    v9[0] = " in '";
    v9[2] = a2;
    v9[3] = a3;
    __int16 v10 = 1283;
    v11[0] = v9;
    unint64_t v11[2] = "' directive";
    __int16 v12 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v11);
  }
  uint64_t result = sub_1CD3B199C(a1, a4, 0);
  if (result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1CD3AABF8(llvm::MCAsmParser *a1, int a2)
{
  unint64_t v19 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, unint64_t *))(*(void *)a1 + 256))(a1, &v19)) {
    return 1;
  }
  if (v19 != 255)
  {
    uint64_t v17 = 0;
    size_t v18 = 0;
    if (v19 > 0xFF
      || (v19 & 0xD) != 0 && ((v19 & 0xF) <= 0xC ? (BOOL v5 = ((1 << (v19 & 0xF)) & 0x1D18) == 0) : (BOOL v5 = 1), v5))
    {
      v15[0] = (unsigned __int8 **)"unsupported encoding.";
      __int16 v16 = 259;
      llvm::MCAsmParser::check(a1, 1, (const llvm::Twine *)v15);
    }
    else
    {
      unint64_t v6 = v19 & 0x60;
      v15[0] = (unsigned __int8 **)"unsupported encoding.";
      __int16 v16 = 259;
      llvm::MCAsmParser::check(a1, v6 != 0, (const llvm::Twine *)v15);
      if (!v6)
      {
        char v13 = "unexpected token in directive";
        __int16 v14 = 259;
        if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v13))
        {
          uint64_t v7 = (*(uint64_t (**)(llvm::MCAsmParser *, unsigned __int8 ***))(*(void *)a1 + 192))(a1, &v17);
          char v8 = v7;
          __int16 v11 = "expected identifier in directive";
          __int16 v12 = 259;
          llvm::MCAsmParser::check(a1, v7, (const llvm::Twine *)&v11);
          if ((v8 & 1) == 0)
          {
            __int16 v9 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
            __int16 v16 = 261;
            v15[0] = v17;
            v15[1] = v18;
            llvm::MCContext::getOrCreateSymbol(v9, v15);
            uint64_t v10 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
            if (a2) {
              (*(void (**)(void))(v10 + 912))();
            }
            else {
              (*(void (**)(void))(v10 + 920))();
            }
            return 0;
          }
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1CD3AAE54(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  unint64_t v6 = (_DWORD *)*((void *)a1 + 53);
  if (*((_DWORD **)a1 + 52) != v6 && *((unsigned char *)v6 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 224))(a1);
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!sub_1CD3AE788(a1, (uint64_t)&v17))
  {
    char v8 = (char *)operator new(0x28uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CFB33BF0;
    strcpy(v8, ".errb directive invoked in source file");
    if (**((_DWORD **)a1 + 6) != 9)
    {
      __int16 v12 = v8;
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
      __int16 v16 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v15))
      {
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.errb' directive";
        __int16 v16 = 259;
        uint64_t v13 = llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v15);
        goto LABEL_19;
      }
      sub_1CD3A8F78(&v15, (uint64_t)a1);
      operator delete(v12);
      std::string __p = v15;
    }
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
    uint64_t v9 = HIBYTE(v19) & 0x7F;
    if (v19 < 0) {
      uint64_t v9 = v18;
    }
    if (((v9 == 0) ^ a3))
    {
      uint64_t v7 = 0;
      goto LABEL_10;
    }
    __int16 v16 = 260;
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v13 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v15, 0, 0);
LABEL_19:
    uint64_t v7 = v13;
LABEL_10:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"missing text item in '.errb' directive";
  __int16 v16 = 259;
  uint64_t v7 = llvm::MCAsmParser::Error((uint64_t)a1, v11, (uint64_t)&v15, 0, 0);
LABEL_12:
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
  return v7;
}

uint64_t sub_1CD3AB0B0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 424);
  if (*(void *)(a1 + 416) != v6 && *(unsigned char *)(v6 - 3))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    return 0;
  }
  int v67 = 0;
  uint64_t v66 = 0;
  uint64_t v65 = 0;
  if (!(*(unsigned int (**)(void, int *, uint64_t *, uint64_t *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), &v67, &v66, &v65))goto LABEL_5; {
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 192))(a1, &__p);
  char v12 = v11;
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier after '.errdef'";
  __int16 v64 = 259;
  llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v11, (const llvm::Twine *)&v63);
  if (v12) {
    return 1;
  }
  llvm::StringRef::lower((llvm::StringRef *)&__p, &v63);
  std::string v15 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &v63
      : (std::string *)v63.__r_.__value_.__r.__words[0];
  __s1 = v15;
  size_t v16 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? *((unsigned char *)&v63.__r_.__value_.__s + 23) & 0x7F
      : v63.__r_.__value_.__l.__size_;
  uint64_t v17 = *(unsigned int *)(a1 + 1144);
  uint64_t v54 = (void *)v63.__r_.__value_.__r.__words[0];
  int v58 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
  if (v17)
  {
    int v18 = 0;
    if (v16)
    {
      size_t v19 = v16;
      uint64_t v20 = __s1;
      do
      {
        int v21 = v20->__r_.__value_.__s.__data_[0];
        uint64_t v20 = (std::string *)((char *)v20 + 1);
        int v18 = 33 * v18 + v21;
        --v19;
      }
      while (v19);
    }
    unsigned int v22 = v17 - 1;
    uint64_t v23 = *(void *)(a1 + 1136);
    uint64_t v56 = *(unsigned int *)(a1 + 1144);
    uint64_t v24 = v23 + 8 * v17 + 8;
    int v25 = 1;
    int v26 = v18;
    while (1)
    {
      uint64_t v27 = v26 & v22;
      uint64_t v28 = *(void **)(v23 + 8 * v27);
      if (v28 != (void *)-8)
      {
        if (!v28)
        {
          uint64_t v29 = v56;
          uint64_t v30 = v56;
          goto LABEL_37;
        }
        if (*(_DWORD *)(v24 + 4 * v27) == v18
          && v16 == *v28
          && (!v16 || !memcmp(__s1, (char *)v28 + *(unsigned int *)(a1 + 1156), v16)))
        {
          break;
        }
      }
      int v26 = v25 + v27;
      ++v25;
    }
    uint64_t v51 = (int)v27;
    BOOL v52 = v27 == -1;
    uint64_t v29 = v56;
    uint64_t v30 = v52 ? v56 : v51;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
LABEL_37:
  if (v58 < 0) {
    operator delete(v54);
  }
  if (v30 != v29) {
    goto LABEL_5;
  }
  llvm::StringRef::lower((llvm::StringRef *)&__p, &v63);
  int v59 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
  uint64_t v31 = (std::string *)v63.__r_.__value_.__r.__words[0];
  int v55 = (void *)v63.__r_.__value_.__r.__words[0];
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &v63;
  }
  uint64_t __s1a = v31;
  size_t v32 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? *((unsigned char *)&v63.__r_.__value_.__s + 23) & 0x7F
      : v63.__r_.__value_.__l.__size_;
  uint64_t v33 = *(unsigned int *)(a1 + 480);
  if (v33)
  {
    int v34 = 0;
    if (v32)
    {
      size_t v35 = v32;
      uint64_t v36 = v31;
      do
      {
        int v37 = v36->__r_.__value_.__s.__data_[0];
        uint64_t v36 = (std::string *)((char *)v36 + 1);
        int v34 = 33 * v34 + v37;
        --v35;
      }
      while (v35);
    }
    unsigned int v38 = v33 - 1;
    uint64_t v39 = *(void *)(a1 + 472);
    uint64_t v57 = *(unsigned int *)(a1 + 480);
    uint64_t v40 = v39 + 8 * v33 + 8;
    int v41 = 1;
    int v42 = v34;
    while (1)
    {
      uint64_t v43 = v42 & v38;
      uint64_t v44 = *(void **)(v39 + 8 * v43);
      if (v44 != (void *)-8)
      {
        if (!v44)
        {
          uint64_t v45 = v57;
          uint64_t v46 = v57;
          goto LABEL_58;
        }
        if (*(_DWORD *)(v40 + 4 * v43) == v34
          && v32 == *v44
          && (!v32 || !memcmp(__s1a, (char *)v44 + *(unsigned int *)(a1 + 492), v32)))
        {
          break;
        }
      }
      int v42 = v41 + v43;
      ++v41;
    }
    uint64_t v53 = (int)v43;
    BOOL v52 = v43 == -1;
    uint64_t v45 = v57;
    uint64_t v46 = v52 ? v57 : v53;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
LABEL_58:
  if (v59 < 0) {
    operator delete(v55);
  }
  if (v46 == v45)
  {
    BOOL v47 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    __int16 v64 = 261;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    uint64_t v48 = (unint64_t *)llvm::MCContext::lookupSymbol(v47, (const llvm::Twine *)&v63);
    if (v48)
    {
      uint64_t v49 = v48;
      unint64_t AssociatedFragment = *v48 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (v49[1] & 0x1C00) == 0x800)
      {
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v49[3]);
        *uint64_t v49 = *v49 & 7 | AssociatedFragment;
      }
      int v8 = AssociatedFragment != 0;
    }
    else
    {
      int v8 = 0;
    }
  }
  else
  {
LABEL_5:
    int v8 = 1;
  }
  uint64_t v9 = (char *)operator new(0x30uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CD96D870;
  strcpy(v9, ".errdef directive invoked in source file");
  if (**(_DWORD **)(a1 + 48) != 9)
  {
    uint64_t v13 = v9;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
    __int16 v64 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)&v63))
    {
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.errdef' directive";
      __int16 v64 = 259;
      uint64_t v14 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&v63);
      goto LABEL_17;
    }
    sub_1CD3A8F78(&v63, a1);
    operator delete(v13);
    std::string __p = v63;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (v8 != a3)
  {
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  __int16 v64 = 260;
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v14 = llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v63, 0, 0);
LABEL_17:
  uint64_t v7 = v14;
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

uint64_t sub_1CD3AB5DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 424);
  if (*(void *)(a1 + 416) != v8 && *(unsigned char *)(v8 - 3))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    return 0;
  }
  __s1 = 0;
  size_t __n = 0;
  uint64_t v47 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (!sub_1CD3AE788((llvm::MCAsmParser *)a1, (uint64_t)&__s1))
  {
    if (**(_DWORD **)(a1 + 48) != 25)
    {
      if (a3) {
        uint64_t v31 = "expected comma after first string for '.erridn' directive";
      }
      else {
        uint64_t v31 = "expected comma after first string for '.errdif' directive";
      }
      goto LABEL_80;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    if (!sub_1CD3AE788((llvm::MCAsmParser *)a1, (uint64_t)&v42))
    {
      memset(&__p, 0, sizeof(__p));
      if (a3) {
        uint64_t v10 = ".erridn directive invoked in source file";
      }
      else {
        uint64_t v10 = ".errdif directive invoked in source file";
      }
      MEMORY[0x1D25D9630](&__p, v10);
      if (**(_DWORD **)(a1 + 48) != 9)
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
        __int16 v41 = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)&v40))
        {
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erridn' directive";
          __int16 v41 = 259;
          uint64_t v38 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&v40);
          goto LABEL_95;
        }
        sub_1CD3A8F78(&v40, a1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v40;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if (a4)
      {
        char v11 = HIBYTE(v47);
        size_t v12 = __n;
        if (v47 >= 0) {
          p_s1 = &__s1;
        }
        else {
          p_s1 = __s1;
        }
        size_t v14 = HIBYTE(v47) & 0x7F;
        if (v47 >= 0) {
          std::string::size_type v15 = HIBYTE(v47) & 0x7F;
        }
        else {
          std::string::size_type v15 = __n;
        }
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
        v40.__r_.__value_.__l.__size_ = v15;
        int v16 = SHIBYTE(v44);
        if (v44 >= 0) {
          uint64_t v17 = HIBYTE(v44) & 0x7F;
        }
        else {
          uint64_t v17 = v43;
        }
        if (v15 == v17)
        {
          if (v44 >= 0) {
            uint64_t v36 = (unsigned __int8 *)&v42;
          }
          else {
            uint64_t v36 = (unsigned __int8 *)v42;
          }
          BOOL v18 = llvm::StringRef::compare_insensitive((unsigned __int8 **)&v40, v36, v15) == 0;
        }
        else
        {
          BOOL v18 = 0;
        }
        char v19 = v18 ^ a3;
        *(unsigned char *)(a1 + 412) = v19 ^ 1;
        *(unsigned char *)(a1 + 413) = v19;
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
        v40.__r_.__value_.__l.__size_ = v15;
        if (v15 == v17)
        {
          if (v16 >= 0) {
            int v37 = (unsigned __int8 *)&v42;
          }
          else {
            int v37 = (unsigned __int8 *)v42;
          }
          if ((llvm::StringRef::compare_insensitive((unsigned __int8 **)&v40, v37, v15) == 0) == a3) {
            goto LABEL_94;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_94;
        }
      }
      else
      {
        char v11 = HIBYTE(v47);
        size_t v14 = HIBYTE(v47) & 0x7F;
        size_t v12 = __n;
        if (v47 >= 0) {
          size_t v20 = HIBYTE(v47) & 0x7F;
        }
        else {
          size_t v20 = __n;
        }
        int v16 = SHIBYTE(v44);
        if (v44 >= 0) {
          uint64_t v17 = HIBYTE(v44) & 0x7F;
        }
        else {
          uint64_t v17 = v43;
        }
        if (v20 == v17)
        {
          if (v44 >= 0) {
            int v21 = (unsigned __int8 *)&v42;
          }
          else {
            int v21 = (unsigned __int8 *)v42;
          }
          if (v47 < 0)
          {
            BOOL v30 = memcmp(__s1, v21, __n) == 0;
          }
          else if ((v47 & 0x7F00000000000000) != 0)
          {
            size_t v22 = v14 - 1;
            uint64_t v23 = &__s1;
            do
            {
              int v25 = *(unsigned __int8 *)v23;
              uint64_t v23 = (void **)((char *)v23 + 1);
              int v24 = v25;
              int v27 = *v21++;
              int v26 = v27;
              BOOL v29 = v22-- != 0;
              BOOL v30 = v24 == v26;
            }
            while (v30 && v29);
          }
          else
          {
            BOOL v30 = 1;
          }
        }
        else
        {
          BOOL v30 = 0;
        }
        *(unsigned char *)(a1 + 412) = v30 ^ a3 ^ 1;
        *(unsigned char *)(a1 + 413) = v30 ^ a3;
      }
      if (v11 >= 0) {
        size_t v32 = v14;
      }
      else {
        size_t v32 = v12;
      }
      if (v32 != v17) {
        goto LABEL_73;
      }
      if (v16 >= 0) {
        uint64_t v33 = (unsigned __int8 *)&v42;
      }
      else {
        uint64_t v33 = (unsigned __int8 *)v42;
      }
      if (v11 < 0)
      {
        if ((((memcmp(__s1, v33, v12) == 0) ^ a3) & 1) == 0)
        {
LABEL_94:
          __int16 v41 = 260;
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          uint64_t v38 = llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v40, 0, 0);
LABEL_95:
          uint64_t v9 = v38;
LABEL_77:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_81;
        }
      }
      else
      {
        if (v14)
        {
          int v34 = &__s1;
          while (*(unsigned __int8 *)v34 == *v33)
          {
            int v34 = (void **)((char *)v34 + 1);
            ++v33;
            if (!--v14) {
              goto LABEL_71;
            }
          }
LABEL_73:
          if ((a3 & 1) == 0) {
            goto LABEL_94;
          }
          goto LABEL_76;
        }
LABEL_71:
        if (a3) {
          goto LABEL_94;
        }
      }
LABEL_76:
      uint64_t v9 = 0;
      goto LABEL_77;
    }
  }
  if (a3) {
    uint64_t v31 = "expected string parameter for '.erridn' directive";
  }
  else {
    uint64_t v31 = "expected string parameter for '.errdif' directive";
  }
LABEL_80:
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  __int16 v41 = 259;
  uint64_t v9 = llvm::MCAsmParser::TokError(a1, (uint64_t)&v40, 0, 0);
LABEL_81:
  if (SHIBYTE(v44) < 0) {
    operator delete(v42);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(__s1);
  }
  return v9;
}

uint64_t sub_1CD3ABA68(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (_DWORD *)*((void *)a1 + 53);
  if (*((_DWORD **)a1 + 52) != v6 && *((unsigned char *)v6 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 224))(a1);
    return 0;
  }
  uint64_t v15 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v15))
  {
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erre' directive";
    __int16 v14 = 259;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v13);
  }
  uint64_t v8 = (char *)operator new(0x28uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CFB33BF0;
  strcpy(v8, ".erre directive invoked in source file");
  if (**((_DWORD **)a1 + 6) != 9)
  {
    uint64_t v10 = v8;
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
    __int16 v14 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v13))
    {
      v13.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erre' directive";
      __int16 v14 = 259;
      uint64_t v11 = llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v13);
      goto LABEL_15;
    }
    sub_1CD3A8F78(&v13, (uint64_t)a1);
    operator delete(v10);
    std::string __p = v13;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
  if ((v15 != 0) == a3)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  __int16 v14 = 260;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v11 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v13, 0, 0);
LABEL_15:
  uint64_t v7 = v11;
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1CD3ABC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v32 + 1) = 0;
  uint64_t v33 = 0;
  unsigned int v35 = 1;
  uint64_t v34 = 0;
  if (llvm::AsmLexer::peekTokens(a2 + 40, (uint64_t)&v32, 1, a3))
  {
LABEL_13:
    *(_OWORD *)a1 = v32;
    *(_DWORD *)(a1 + 32) = v35;
    uint64_t v15 = v34;
    *(void *)(a1 + 16) = v33;
    *(void *)(a1 + 24) = v15;
    return;
  }
  unint64_t v6 = *(void *)(**(void **)(a2 + 240) + 24 * (*(_DWORD *)(a2 + 272) - 1) + 16);
  if (!v6)
  {
    int v7 = *(_DWORD *)(a2 + 400);
    int v8 = v7 - 1;
    uint64_t v9 = *(unsigned int *)(a2 + 344);
    if ((v7 & 0x3F) != 0)
    {
      uint64_t v30 = *(void *)(a2 + 336) + 8 * v9;
      *(void *)(v30 - 8) &= ~(-1 << (v7 & 0x3F));
    }
    unsigned int v10 = v9;
    uint64_t v11 = (void *)(a2 + 336);
    *(_DWORD *)(a2 + 400) = v8;
    unsigned int v12 = v7 + 62;
    if (v9 != v12 >> 6)
    {
      uint64_t v13 = v12 >> 6;
      if (v9 > v13)
      {
        *(_DWORD *)(a2 + 344) = v13;
        unsigned int v10 = v12 >> 6;
      }
      else
      {
        if (v13 > *(_DWORD *)(a2 + 348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v13 != v9) {
          bzero((void *)(*v11 + 8 * v9), 8 * (v13 - v9));
        }
        unsigned int v10 = v13;
        *(_DWORD *)(a2 + 344) = v13;
        int v8 = *(_DWORD *)(a2 + 400);
      }
    }
    int v14 = v8 & 0x3F;
    if (v14) {
      *(void *)(*v11 + 8 * v10 - 8) &= ~(-1 << v14);
    }
    goto LABEL_13;
  }
  int v16 = *(_DWORD *)(a2 + 400);
  int v17 = v16 - 1;
  uint64_t v18 = *(unsigned int *)(a2 + 344);
  if ((v16 & 0x3F) != 0)
  {
    uint64_t v31 = *(void *)(a2 + 336) + 8 * v18;
    *(void *)(v31 - 8) &= ~(-1 << (v16 & 0x3F));
  }
  unsigned int v19 = v18;
  size_t v20 = (uint64_t *)(a2 + 336);
  *(_DWORD *)(a2 + 400) = v17;
  unsigned int v21 = v16 + 62;
  if (v18 != v21 >> 6)
  {
    uint64_t v22 = v21 >> 6;
    if (v18 > v22)
    {
      *(_DWORD *)(a2 + 344) = v22;
      unsigned int v19 = v21 >> 6;
    }
    else
    {
      if (v22 > *(_DWORD *)(a2 + 348)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v22 != v18) {
        bzero((void *)(*v20 + 8 * v18), 8 * (v22 - v18));
      }
      unsigned int v19 = v22;
      *(_DWORD *)(a2 + 344) = v22;
      int v17 = *(_DWORD *)(a2 + 400);
    }
  }
  uint64_t v23 = *v20;
  if ((v17 & 0x3F) != 0) {
    *(void *)(v23 + 8 * v19 - 8) &= ~(-1 << (v17 & 0x3F));
  }
  uint64_t v24 = *(void *)(v23 + 8 * ((v17 - 1) >> 6)) >> (v17 - 1);
  int v25 = *(uint64_t **)(a2 + 240);
  int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v25, v6);
  *(_DWORD *)(a2 + 272) = BufferContainingLoc;
  uint64_t v27 = *(void *)(*v25 + 24 * (BufferContainingLoc - 1));
  uint64_t v28 = *(void *)(v27 + 8);
  uint64_t v29 = *(void *)(v27 + 16) - v28;
  *(void *)(a2 + 192) = v28;
  *(void *)(a2 + 200) = v29;
  *(void *)(a2 + 184) = v6;
  *(void *)(a2 + 136) = 0;
  *(unsigned char *)(a2 + 211) = v24 & 1;
  sub_1CD3ABC8C(a1, a2, a3);
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
}

uint64_t sub_1CD3ABF8C(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  v51[0] = a2;
  v51[1] = a3;
  int v6 = *(_DWORD *)(a1 + 512);
  if (v6 != 1)
  {
    if (v6) {
      int v7 = "unexpected name in nested ENDS directive";
    }
    else {
      int v7 = "ENDS directive without matching STRUC/STRUCT/UNION";
    }
    *(void *)&long long v40 = v7;
    __int16 v25 = 259;
    goto LABEL_30;
  }
  uint64_t v8 = *(void *)(a1 + 504);
  if (llvm::StringRef::compare_insensitive((unsigned __int8 **)v8, a2, a3))
  {
    __int16 v50 = 1283;
    __p[0] = "mismatched name in ENDS directive; expected '";
    uint64_t v48 = *(unsigned __int8 **)v8;
    uint64_t v49 = *(void *)(v8 + 8);
    *(void *)&long long v40 = __p;
    __int16 v41 = "'";
    __int16 v25 = 770;
LABEL_30:
    LOWORD(v43) = v25;
    return llvm::MCAsmParser::Error(a1, a4, (uint64_t)&v40, 0, 0);
  }
  sub_1CD3AF8A0((uint64_t)&v40, a1 + 504);
  if (v42 >= HIDWORD(v41)) {
    unint64_t v9 = HIDWORD(v41);
  }
  else {
    unint64_t v9 = v42;
  }
  unsigned int v43 = (v43 + v9 - 1) / v9 * v9;
  llvm::StringRef::lower((llvm::StringRef *)v51, __p);
  unsigned int v10 = (void **)__p[0];
  if (SHIBYTE(v48) >= 0) {
    unsigned int v10 = __p;
  }
  __s1 = v10;
  if (SHIBYTE(v48) >= 0) {
    size_t v11 = HIBYTE(v48) & 0x7F;
  }
  else {
    size_t v11 = (size_t)__p[1];
  }
  unsigned int v12 = *(_DWORD *)(a1 + 624);
  if (!v12)
  {
    *(void *)(a1 + 628) = 0;
    uint64_t v38 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v38) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v38[16] = 2;
    *(void *)(a1 + 616) = v38;
    unsigned int v12 = 16;
    *(_DWORD *)(a1 + 624) = 16;
  }
  int v13 = 0;
  if (v11)
  {
    size_t v14 = v11;
    uint64_t v15 = __s1;
    do
    {
      int v16 = *(unsigned __int8 *)v15;
      uint64_t v15 = (void **)((char *)v15 + 1);
      int v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  uint64_t v17 = *(void *)(a1 + 616);
  unsigned int v18 = v12 - 1;
  uint64_t v19 = v17 + 8 * v12 + 8;
  int v20 = -1;
  int v21 = 1;
  int v22 = v13;
  while (1)
  {
    uint64_t v23 = v22 & v18;
    uint64_t v24 = *(void **)(v17 + 8 * v23);
    if (!v24) {
      break;
    }
    if (v24 == (void *)-8)
    {
      if (v20 == -1) {
        int v20 = v22 & v18;
      }
    }
    else if (*(_DWORD *)(v19 + 4 * v23) == v13 {
           && v11 == *v24
    }
           && (!v11 || !memcmp(__s1, (char *)v24 + *(unsigned int *)(a1 + 636), v11)))
    {
      goto LABEL_37;
    }
    int v22 = v21 + v23;
    ++v21;
  }
  uint64_t v28 = v20;
  if (v20 == -1)
  {
    uint64_t v28 = v23;
    uint64_t v23 = v23;
  }
  else
  {
    uint64_t v23 = v20;
  }
  *(_DWORD *)(v19 + 4 * v28) = v13;
  uint64_t v24 = *(void **)(v17 + 8 * v23);
LABEL_37:
  if (v24 == (void *)-8)
  {
    --*(_DWORD *)(a1 + 632);
    goto LABEL_41;
  }
  if (!v24)
  {
LABEL_41:
    uint64_t v29 = (char *)operator new(v11 + 105, (std::align_val_t)8uLL);
    uint64_t v30 = v29;
    uint64_t v31 = v29 + 104;
    if (v11) {
      memcpy(v29 + 104, __s1, v11);
    }
    v31[v11] = 0;
    *(void *)uint64_t v30 = v11;
    *(_OWORD *)(v30 + 24) = 0u;
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 56) = 0u;
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 8) = 0u;
    v30[25] = 1;
    *(void *)(v30 + 28) = 0;
    *(void *)(v30 + 36) = 0;
    *((_OWORD *)v30 + 3) = 0u;
    *((_OWORD *)v30 + 4) = 0u;
    *(_OWORD *)(v30 + 76) = 0u;
    *((_DWORD *)v30 + 23) = 16;
    *(void *)(v17 + 8 * v23) = v30;
    ++*(_DWORD *)(a1 + 628);
    for (unint64_t i = (void **)(*(void *)(a1 + 616)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 616), v23));
          ;
          ++i)
    {
      uint64_t v24 = *i;
      if (*i && v24 + 1 != 0) {
        break;
      }
    }
  }
  sub_1CD3AFBA0((uint64_t)(v24 + 1), &v40);
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = "unexpected token";
  __int16 v50 = 259;
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)__p))
  {
    __p[0] = " in ENDS directive";
    __int16 v50 = 259;
    uint64_t v26 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)__p);
  }
  else
  {
    uint64_t v26 = 0;
  }
  sub_1CD61201C((uint64_t)&v46);
  uint64_t v34 = (void ***)v44;
  if (v44)
  {
    unsigned int v35 = v45;
    uint64_t v36 = v44;
    if (v45 != v44)
    {
      do
      {
        int v37 = v35 - 18;
        sub_1CD39B268(v35 - 16);
        unsigned int v35 = v37;
      }
      while (v37 != v34);
      uint64_t v36 = v44;
    }
    uint64_t v45 = v34;
    operator delete(v36);
  }
  return v26;
}

uint64_t sub_1CD3AC384(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v29[0] = a5;
  v29[1] = a6;
  if (a1[128])
  {
    sub_1CD3B0FB0((uint64_t)a1, (uint64_t)a5, a6, a4);
  }
  else
  {
    unsigned int v12 = (llvm::MCContext *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
    __int16 v28 = 261;
    std::string __p = a5;
    size_t v26 = a6;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v12, (unsigned __int8 ***)&__p);
    uint64_t v14 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v14 + 192))(v14, Symbol, 0);
    int v24 = 0;
    if (sub_1CD3B0E94((llvm::MCAsmParser *)a1, a4, &v24))
    {
      v22[0] = " in '";
      v22[2] = a2;
      void v22[3] = a3;
      __int16 v23 = 1283;
      std::string __p = v22;
      uint64_t v27 = "' directive";
      __int16 v28 = 770;
      return llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
    }
    int v15 = v24;
    int v16 = v24 * a4;
    uint64_t v17 = (llvm::StringMapImpl *)(a1 + 162);
    llvm::StringRef::lower((llvm::StringRef *)v29, &__p);
    if (SHIBYTE(v27) >= 0) {
      p_p = (unsigned __int8 *)&__p;
    }
    else {
      p_p = (unsigned __int8 *)__p;
    }
    if (SHIBYTE(v27) >= 0) {
      size_t v19 = HIBYTE(v27) & 0x7F;
    }
    else {
      size_t v19 = v26;
    }
    uint64_t v20 = *sub_1CD3B6CF8(v17, p_p, v19);
    *(void *)(v20 + 8) = a2;
    *(void *)(v20 + 16) = a3;
    *(_DWORD *)(v20 + 24) = v16;
    *(_DWORD *)(v20 + 28) = a4;
    *(_DWORD *)(v20 + 32) = v15;
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
  }
  return 0;
}

uint64_t sub_1CD3AC550(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, uint64_t a7)
{
  v31[0] = a6;
  v31[1] = a7;
  if (a1[128])
  {
    uint64_t result = sub_1CD3B1B88((uint64_t)a1, (uint64_t)a6, a7, a4, a5);
    if (result) {
      goto LABEL_15;
    }
  }
  else
  {
    int v15 = (llvm::MCContext *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
    __int16 v30 = 261;
    std::string __p = a6;
    size_t v28 = a7;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v15, (unsigned __int8 ***)&__p);
    uint64_t v17 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v17 + 192))(v17, Symbol, 0);
    int v26 = 0;
    if (sub_1CD3B199C((llvm::MCAsmParser *)a1, a4, &v26))
    {
LABEL_15:
      __int16 v25 = 1283;
      v24[0] = " in '";
      v24[2] = a2;
      v24[3] = a3;
      std::string __p = v24;
      uint64_t v29 = "' directive";
      __int16 v30 = 770;
      return llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
    }
    int v18 = v26;
    int v19 = v26 * a5;
    uint64_t v20 = (llvm::StringMapImpl *)(a1 + 162);
    llvm::StringRef::lower((llvm::StringRef *)v31, &__p);
    if (SHIBYTE(v29) >= 0) {
      p_p = (unsigned __int8 *)&__p;
    }
    else {
      p_p = (unsigned __int8 *)__p;
    }
    if (SHIBYTE(v29) >= 0) {
      size_t v22 = HIBYTE(v29) & 0x7F;
    }
    else {
      size_t v22 = v28;
    }
    uint64_t v23 = *sub_1CD3B6CF8(v20, p_p, v22);
    *(void *)(v23 + 8) = a2;
    *(void *)(v23 + 16) = a3;
    *(_DWORD *)(v23 + 24) = v19;
    *(_DWORD *)(v23 + 28) = a5;
    *(_DWORD *)(v23 + 32) = v18;
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  return result;
}

double sub_1CD3AC728(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 1:
      __n128 v4 = (const tm *)(a2 + 280);
      BOOL v5 = "%D";
      goto LABEL_4;
    case 2:
      __n128 v4 = (const tm *)(a2 + 280);
      BOOL v5 = "%T";
LABEL_4:
      size_t v6 = strftime(__src, 9uLL, v5, v4);
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      size_t v7 = v6;
      if (v6 >= 0x17)
      {
        uint64_t v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v19 = v6 | 7;
        }
        uint64_t v20 = v19 + 1;
        uint64_t v8 = (long long *)operator new(v19 + 1);
        *((void *)&v27 + 1) = v7;
        unint64_t v28 = v20 | 0x8000000000000000;
        *(void *)&long long v27 = v8;
      }
      else
      {
        HIBYTE(v28) = v6;
        uint64_t v8 = &v27;
        if (!v6) {
          goto LABEL_19;
        }
      }
      memcpy(v8, __src, v7);
LABEL_19:
      *((unsigned char *)v8 + v7) = 0;
      goto LABEL_33;
    case 4:
      unsigned int v10 = *(void **)(a2 + 680);
      if (v10 == *(void **)(a2 + 688)) {
        size_t v11 = (_DWORD *)(a2 + 272);
      }
      else {
        size_t v11 = (_DWORD *)(*v10 + 8);
      }
      uint64_t v21 = *(void *)(**(void **)(a2 + 240) + 24 * (*v11 - 1));
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
      if (!v22) {
        goto LABEL_27;
      }
      size_t v18 = v23;
      if (v23 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      uint64_t v17 = (const void *)v22;
      goto LABEL_24;
    case 5:
      uint64_t v12 = (*(uint64_t (**)(void))(****(void ****)(a2 + 240) + 16))(***(void ***)(a2 + 240));
      *(void *)__src = llvm::sys::path::stem(v12, v13, 0);
      uint64_t v30 = v14;
      llvm::StringRef::upper((llvm::StringRef *)__src, &v27);
      goto LABEL_33;
    case 7:
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
      uint64_t v16 = *(void *)(*(void *)(v15 + 112) + 32 * *(unsigned int *)(v15 + 120) - 32);
      uint64_t v17 = *(const void **)(v16 + 200);
      if (!v17)
      {
LABEL_27:
        long long v27 = 0uLL;
        unint64_t v28 = 0;
        goto LABEL_33;
      }
      size_t v18 = *(void *)(v16 + 208);
      if (v18 > 0x7FFFFFFFFFFFFFF7) {
LABEL_35:
      }
        abort();
LABEL_24:
      if (v18 >= 0x17)
      {
        uint64_t v25 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v25 = v18 | 7;
        }
        uint64_t v26 = v25 + 1;
        int v24 = (long long *)operator new(v25 + 1);
        *((void *)&v27 + 1) = v18;
        unint64_t v28 = v26 | 0x8000000000000000;
        *(void *)&long long v27 = v24;
      }
      else
      {
        HIBYTE(v28) = v18;
        int v24 = &v27;
        if (!v18) {
          goto LABEL_32;
        }
      }
      memmove(v24, v17, v18);
LABEL_32:
      *((unsigned char *)v24 + v18) = 0;
LABEL_33:
      double result = *(double *)&v27;
      *(_OWORD *)a1 = v27;
      *(void *)(a1 + 16) = v28;
      *(unsigned char *)(a1 + 24) = 1;
      return result;
    default:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
  }
}

uint64_t sub_1CD3ACA20(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v86 = a6;
  if (a6 != a8)
  {
    uint64_t v101 = "Wrong number of arguments";
    LOWORD(v105) = 259;
    return llvm::MCAsmParser::Error(a1, a10, (uint64_t)&v101, 0, 0);
  }
  uint64_t v11 = a8;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0x2000000000;
  memset(&v110, 0, sizeof(v110));
  std::string::reserve(&v110, 6uLL);
  uint64_t v13 = *a9;
  uint64_t v14 = a9[1];
  if (*a9 != v14)
  {
    do
    {
      char v15 = *(unsigned char *)(v13 + 23);
      BOOL v16 = v15 < 0;
      if (v15 >= 0) {
        uint64_t v17 = (unsigned __int8 *)v13;
      }
      else {
        uint64_t v17 = *(unsigned __int8 **)v13;
      }
      size_t v18 = v15 & 0x7F;
      if (v16) {
        size_t v19 = *(void *)(v13 + 8);
      }
      else {
        size_t v19 = v18;
      }
      LODWORD(v102) = 0;
      char v106 = 0;
      uint64_t v107 = 0;
      uint64_t v101 = &unk_1F2646F30;
      long long v109 = &v110;
      int v108 = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      uint64_t v103 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "??", 2uLL);
      uint64_t v20 = (const char *)*(unsigned __int16 *)(a1 + 1068);
      *(_WORD *)(a1 + 1068) = (_WORD)v20 + 1;
      uint64_t v96 = v20;
      size_t v97 = 0;
      int v98 = 4;
      __int16 v99 = 257;
      char v100 = 0;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v101, (uint64_t)&v96);
      if (SHIBYTE(v109->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__p, v109->__r_.__value_.__l.__data_, v109->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v21 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        std::string::size_type v95 = v109->__r_.__value_.__r.__words[2];
        long long __p = v21;
      }
      sub_1CCCCF758((llvm::StringMapImpl *)&v111, v17, v19, (uint64_t)&__p);
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      {
        *v110.__r_.__value_.__l.__data_ = 0;
        v110.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v110.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v110.__r_.__value_.__s + 23) = 0;
      }
      uint64_t v101 = &unk_1F2646B98;
      if (v108 == 1 && v103) {
        MEMORY[0x1D25D9CB0](v103, 0x1000C8077774924);
      }
      v13 += 24;
    }
    while (v13 != v14);
  }
  uint64_t v22 = a3;
  unint64_t v23 = a2;
  if (!a4) {
    goto LABEL_150;
  }
  int v24 = 0;
  int v25 = 0;
  uint64_t v84 = v11;
  do
  {
    unint64_t v26 = 0;
    unint64_t v27 = a4;
    while (1)
    {
      int v28 = v22[v26];
      if (v28 == 38) {
        break;
      }
      BOOL v29 = (v28 - 48) >= 0xA && (v28 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v29
        || ((v28 - 36) <= 0x3B
          ? (BOOL v30 = ((1 << (v28 - 36)) & 0x800000018000001) == 0)
          : (BOOL v30 = 1),
            !v30))
      {
        if (!v24) {
          break;
        }
        if (v27 == a4) {
          unint64_t v27 = v26;
        }
LABEL_38:
        if (v28 == v25)
        {
          if (v26 + 1 == a4 || v22[v26 + 1] != v25) {
            int v24 = 0;
          }
          else {
            ++v26;
          }
        }
        goto LABEL_43;
      }
      unint64_t v27 = a4;
      if (v24) {
        goto LABEL_38;
      }
      if (v28 == 39 || v28 == 34)
      {
        int v24 = 1;
        unint64_t v27 = a4;
        int v25 = v22[v26];
      }
      else
      {
        int v24 = 0;
        unint64_t v27 = a4;
      }
LABEL_43:
      if (++v26 == a4)
      {
        unint64_t v26 = a4;
        break;
      }
    }
    if (v27 == a4) {
      size_t v31 = v26;
    }
    else {
      size_t v31 = v27;
    }
    if (a4 >= v31) {
      size_t v32 = v31;
    }
    else {
      size_t v32 = a4;
    }
    uint64_t v33 = (void *)*((void *)v23 + 4);
    if (v32 <= *((void *)v23 + 3) - (void)v33)
    {
      if (v32)
      {
        memcpy(v33, v22, v32);
        *((void *)v23 + 4) += v32;
      }
    }
    else
    {
      llvm::raw_ostream::write(v23, (const char *)v22, v32);
    }
    if (v31 == a4) {
      break;
    }
    int v91 = v24;
    int v34 = v22[v31];
    if (v34 == 38) {
      unint64_t v35 = (v31 + 1);
    }
    else {
      unint64_t v35 = v31;
    }
    if (v34 == 38) {
      uint64_t v36 = (char *)(v31 + 1);
    }
    else {
      uint64_t v36 = (char *)v31;
    }
    if (a4 > v35)
    {
      unsigned int v37 = (v34 == 38) + v31 + 1;
      do
      {
        int v38 = v22[v35];
        if ((v38 - 48) >= 0xA && (v38 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          unsigned int v40 = v38 - 36;
          BOOL v16 = v40 > 0x3B;
          uint64_t v41 = (1 << v40) & 0x800000018000001;
          if (v16 || v41 == 0) {
            break;
          }
        }
        unint64_t v35 = v37;
        BOOL v16 = a4 > v37++;
      }
      while (v16);
    }
    int v90 = v25;
    __s1 = v36;
    uint64_t v96 = &v36[(void)v22];
    size_t v97 = v35 - (void)v36;
    llvm::StringRef::lower((llvm::StringRef *)&v96, &v101);
    uint64_t v43 = v86;
    if (v86)
    {
      uint64_t v44 = 0;
      if (v103 >= 0) {
        unint64_t v45 = HIBYTE(v103) & 0x7F;
      }
      else {
        unint64_t v45 = v102;
      }
      if (v103 >= 0) {
        uint64_t v46 = (unsigned __int8 *)&v101;
      }
      else {
        uint64_t v46 = (unsigned __int8 *)v101;
      }
      uint64_t v47 = a5;
      while (*(void *)(v47 + 8) != v45
           || llvm::StringRef::compare_insensitive((unsigned __int8 **)v47, v46, v45))
      {
        ++v44;
        v47 += 48;
        if (v11 == v44) {
          goto LABEL_93;
        }
      }
      uint64_t v43 = v44;
    }
    if (v43 == v86)
    {
LABEL_93:
      if (v34 == 38)
      {
        uint64_t v48 = (unsigned char *)*((void *)v23 + 4);
        if ((unint64_t)v48 >= *((void *)v23 + 3))
        {
          llvm::raw_ostream::write(v23, 38);
        }
        else
        {
          *((void *)v23 + 4) = v48 + 1;
          *uint64_t v48 = 38;
        }
      }
      uint64_t v56 = (unsigned __int8 *)v101;
      if (v103 >= 0) {
        uint64_t v56 = (unsigned __int8 *)&v101;
      }
      uint64_t __s1a = v56;
      size_t v57 = v103 >= 0 ? HIBYTE(v103) & 0x7F : v102;
      uint64_t v87 = v112;
      __srca = v22;
      if (!v112) {
        goto LABEL_156;
      }
      int v58 = 0;
      if (v57)
      {
        size_t v59 = v57;
        do
        {
          int v60 = *v56++;
          int v58 = 33 * v58 + v60;
          --v59;
        }
        while (v59);
      }
      unsigned int v61 = v112 - 1;
      uint64_t v62 = v111;
      uint64_t v63 = v111 + 8 * v112 + 8;
      uint64_t v64 = HIDWORD(v113);
      int v65 = 1;
      int v66 = v58;
      while (1)
      {
        uint64_t v67 = v66 & v61;
        unint64_t v68 = *(void **)(v62 + 8 * v67);
        if (v68 != (void *)-8)
        {
          if (!v68) {
            goto LABEL_138;
          }
          if (*(_DWORD *)(v63 + 4 * v67) == v58 && v57 == *v68 && (!v57 || !memcmp(__s1a, (char *)v68 + v64, v57))) {
            break;
          }
        }
        int v66 = v65 + v67;
        ++v65;
      }
      if (v67 == -1 || (int)v67 == v87)
      {
LABEL_156:
      {
LABEL_138:
        uint64_t v74 = v96;
        size_t v78 = v97;
        unint64_t v23 = a2;
        __int16 v79 = (void *)*((void *)a2 + 4);
        if (v97 > *((void *)a2 + 3) - (void)v79)
        {
          BOOL v77 = a2;
          size_t v76 = v97;
          goto LABEL_140;
        }
      }
        uint64_t v22 = __srca;
        int v25 = v90;
        int v24 = v91;
        if (v97)
        {
          memcpy(v79, v96, v97);
          *((void *)a2 + 4) += v78;
        }
        uint64_t v11 = v84;
      }
      else
      {
        uint64_t v69 = *(void *)(v62 + 8 * (int)v67);
        uint64_t v72 = *(void *)(v69 + 8);
        uint64_t v70 = v69 + 8;
        uint64_t v71 = v72;
        char v73 = *(unsigned char *)(v70 + 23);
        uint64_t v74 = (const char *)(v73 >= 0 ? v70 : v71);
        uint64_t v75 = *(void *)(v70 + 8);
        size_t v76 = v73 >= 0 ? v73 & 0x7F : v75;
        unint64_t v23 = a2;
        BOOL v77 = a2;
LABEL_140:
        llvm::raw_ostream::write(v77, v74, v76);
        uint64_t v11 = v84;
        uint64_t v22 = __srca;
        int v25 = v90;
        int v24 = v91;
      }
    }
    else
    {
      uint64_t v49 = (uint64_t *)(a7 + 24 * v43);
      uint64_t v50 = *v49;
      uint64_t v51 = v49[1];
      int v24 = v91;
      if (*v49 != v51)
      {
        do
        {
          BOOL v52 = *(unsigned char **)(v50 + 8);
          if (*v52 == 37 && *(_DWORD *)v50 == 4)
          {
            uint64_t v53 = (unint64_t *)(v50 + 24);
            if (*(_DWORD *)(v50 + 32) >= 0x41u) {
              uint64_t v53 = (unint64_t *)*v53;
            }
            llvm::raw_ostream::operator<<(v23, *v53);
          }
          else
          {
            unint64_t v54 = *(void *)(v50 + 16);
            int v55 = (void *)*((void *)v23 + 4);
            if (v54 <= *((void *)v23 + 3) - (void)v55)
            {
              if (v54)
              {
                memcpy(v55, v52, *(void *)(v50 + 16));
                *((void *)v23 + 4) += v54;
              }
            }
            else
            {
              llvm::raw_ostream::write(v23, v52, *(void *)(v50 + 16));
            }
          }
          v50 += 40;
        }
        while (v50 != v51);
      }
      unint64_t v35 = (unint64_t)__s1 + v97;
      if ((unint64_t)__s1 + v97 < a4 && v22[v35] == 38) {
        ++v35;
      }
      int v25 = v90;
    }
    if (a4 >= v35) {
      unint64_t v80 = v35;
    }
    else {
      unint64_t v80 = a4;
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(v101);
    }
    v22 += v80;
    a4 -= v80;
  }
  while (a4);
LABEL_150:
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  sub_1CCB7ABD0((uint64_t)&v111);
  return 0;
}

void **sub_1CD3AD180(void ***a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v3) {
    unint64_t v3 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  uint64_t v7 = 3 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  unint64_t v9 = &v8[24 * v2];
  unsigned int v10 = (void **)&v8[8 * v7];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  uint64_t v11 = (void **)(v9 + 24);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = v13[2];
      char *v13 = 0;
      v13[1] = 0;
      unint64_t v13[2] = 0;
    }
    while (v13 != v12);
    uint64_t v13 = *a1;
    char v15 = a1[1];
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v15 -= 3;
      uint64_t v17 = v15;
      sub_1CCBB926C(&v17);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

int64_t sub_1CD3AD2BC(int64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
LABEL_15:
    }
      abort();
    size_t v6 = (void *)result;
    uint64_t v7 = 3 * a4;
    double result = (int64_t)operator new(48 * a4);
    int64_t v8 = result;
    void *v6 = result;
    v6[1] = result;
    for (v6[2] = result + 16 * v7; a2 != a3; v8 += 48)
    {
      *(_OWORD *)int64_t v8 = *(_OWORD *)a2;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 16) = 0;
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      double result = v10 - v9;
      if (v10 != v9)
      {
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (result >> 3);
        if (v11 >= 0x666666666666667) {
          goto LABEL_15;
        }
        double result = (int64_t)operator new(result);
        uint64_t v12 = 0;
        *(void *)(v8 + 16) = result;
        *(void *)(v8 + 24) = result;
        *(void *)(v8 + 32) = result + 40 * v11;
        do
        {
          uint64_t v13 = v9 + v12;
          uint64_t v14 = result + v12;
          long long v15 = *(_OWORD *)(v9 + v12);
          *(void *)(v14 + 16) = *(void *)(v9 + v12 + 16);
          *(_OWORD *)uint64_t v14 = v15;
          unsigned int v16 = *(_DWORD *)(v9 + v12 + 32);
          *(_DWORD *)(v14 + 32) = v16;
          if (v16 > 0x40) {
            operator new[]();
          }
          *(void *)(v14 + 24) = *(void *)(v13 + 24);
          v12 += 40;
        }
        while (v13 + 40 != v10);
        *(void *)(v8 + 24) = result + v12;
      }
      *(_WORD *)(v8 + 40) = *(_WORD *)(a2 + 40);
      a2 += 48;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1CD3AD454(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v139 = (_DWORD **)(a1 + 48);
  uint64_t v144 = a1 + 40;
  if (**(_DWORD **)(a1 + 48) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 104);
    LOWORD(v167) = 260;
    long long __p = (void *)(a1 + 112);
    llvm::MCAsmParser::Error(a1, v4, (uint64_t)&__p, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8) == 9
    && *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8) + 16)
    && **(unsigned char **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8) + 8) != 10
    && **(unsigned char **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8) + 8) != 13
    && *(unsigned char *)(*(void *)(v3 + 232) + 466))
  {
    uint64_t v5 = *(void *)(v3 + 224);
    uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8);
    int64_t v8 = *(void **)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 16);
    LOWORD(v167) = 261;
    long long __p = v8;
    *(void *)&long long v165 = v7;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 136))(v5, &__p);
  }
  uint64_t v9 = (_DWORD *)sub_1CD8F38F8(v144);
  uint64_t v10 = (uint64_t)v9;
  int v11 = *v9;
  if (a2 || v11 != 2) {
    goto LABEL_214;
  }
  int v143 = *(unsigned __int8 *)(v3 + 147);
  uint64_t v138 = (void *)(v3 + 336);
  v140 = v9;
  size_t v141 = (llvm::MCAsmParser *)v3;
  while (1)
  {
    if (!v143) {
      goto LABEL_22;
    }
    long long v165 = 0uLL;
    unsigned int v167 = 1;
    uint64_t v166 = 0;
    if (!llvm::AsmLexer::peekTokens(v144, (uint64_t)&__p, 1, 1) || __p != 2) {
      goto LABEL_17;
    }
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v165;
    if (*((void *)&v165 + 1) == 3)
    {
      __int16 v79 = &v155;
      unint64_t v80 = "equ";
      unint64_t v81 = 3;
    }
    else
    {
      long long v168 = v165;
      if (*((void *)&v165 + 1) != 7) {
        goto LABEL_17;
      }
      __int16 v79 = (std::string *)&v168;
      unint64_t v80 = "textequ";
      unint64_t v81 = 7;
    }
    if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)v79, (unsigned __int8 *)v80, v81))
    {
      char v12 = 0;
      goto LABEL_18;
    }
LABEL_17:
    char v12 = 1;
LABEL_18:
    if (v167 >= 0x41 && v166) {
      MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
    }
    if ((v12 & 1) == 0) {
      break;
    }
LABEL_22:
    uint64_t v13 = *(int **)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 8);
    if (*v13 == 2)
    {
      uint64_t v14 = (char *)*((void *)v13 + 1);
      unint64_t v15 = *((void *)v13 + 2);
    }
    else
    {
      uint64_t v14 = (char *)*((void *)v13 + 1);
      unint64_t v16 = *((void *)v13 + 2);
      unint64_t v17 = v16 - 1;
      unint64_t v18 = v16 != 0;
      if (v16) {
        ++v14;
      }
      if (v18 > v17) {
        unint64_t v17 = v16 != 0;
      }
      if (v16 >= v17) {
        unint64_t v16 = v17;
      }
      unint64_t v15 = v16 - v18;
    }
    long long __p = v14;
    *(void *)&long long v165 = v15;
    llvm::StringRef::lower((llvm::StringRef *)&__p, &v149);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
    char v20 = v151;
    long long v21 = (void **)v149;
    size_t v22 = v150;
    if (v151 >= 0) {
      unint64_t v23 = (unsigned __int8 *)&v149;
    }
    else {
      unint64_t v23 = (unsigned __int8 *)v149;
    }
    size_t v24 = v151 & 0x7F;
    if (v151 >= 0) {
      size_t v25 = v151 & 0x7F;
    }
    else {
      size_t v25 = v150;
    }
    uint64_t v26 = *(unsigned int *)(v19 + 1976);
    uint64_t v142 = v13;
    if (!v26)
    {
LABEL_58:
      v155.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v156) = 0;
      if (v20 >= 0) {
        uint64_t v39 = &v149;
      }
      else {
        uint64_t v39 = v21;
      }
      if (v20 >= 0) {
        size_t v40 = v24;
      }
      else {
        size_t v40 = v22;
      }
      uint64_t v41 = *(unsigned int *)(v3 + 1144);
      if (!v41) {
        goto LABEL_78;
      }
      int v42 = 0;
      if (v40)
      {
        size_t v43 = v40;
        uint64_t v44 = v39;
        do
        {
          int v45 = *(unsigned __int8 *)v44;
          uint64_t v44 = (void **)((char *)v44 + 1);
          int v42 = 33 * v42 + v45;
          --v43;
        }
        while (v43);
      }
      uint64_t v46 = *(void *)(v3 + 1136);
      int v47 = 1;
      int v48 = v42;
      while (1)
      {
        uint64_t v49 = v48 & (v41 - 1);
        uint64_t v50 = *(void **)(v46 + 8 * v49);
        if (v50 != (void *)-8)
        {
          if (!v50) {
            goto LABEL_78;
          }
          if (*(_DWORD *)(v46 + 8 * v41 + 8 + 4 * v49) == v42
            && v40 == *v50
            && (!v40 || !memcmp(v39, (char *)v50 + *(unsigned int *)(v3 + 1156), v40)))
          {
            break;
          }
        }
        int v48 = v47 + v49;
        ++v47;
      }
      if (v49 == -1 || (int)v49 == v41)
      {
LABEL_78:
        uint64_t v51 = *(unsigned int *)(v3 + 480);
        if (v51)
        {
          int v52 = 0;
          if (v40)
          {
            size_t v53 = v40;
            unint64_t v54 = v39;
            do
            {
              int v55 = *(unsigned __int8 *)v54;
              unint64_t v54 = (void **)((char *)v54 + 1);
              int v52 = 33 * v52 + v55;
              --v53;
            }
            while (v53);
          }
          uint64_t v56 = *(void *)(v3 + 472);
          int v57 = 1;
          int v58 = v52;
          while (1)
          {
            uint64_t v59 = v58 & (v51 - 1);
            int v60 = *(void **)(v56 + 8 * v59);
            if (v60 != (void *)-8)
            {
              if (!v60) {
                goto LABEL_97;
              }
              if (*(_DWORD *)(v56 + 8 * v51 + 8 + 4 * v59) == v52
                && v40 == *v60
                && (!v40 || !memcmp(v39, (char *)v60 + *(unsigned int *)(v3 + 492), v40)))
              {
                break;
              }
            }
            int v58 = v57 + v59;
            ++v57;
          }
          if (v59 != -1 && (int)v59 != v51)
          {
            uint64_t v61 = *(void *)(v56 + 8 * (int)v59);
            if (*(unsigned char *)(v61 + 28)) {
              sub_1CCB8EC08(&v155, (const std::string *)(v61 + 32));
            }
          }
        }
      }
      else
      {
        sub_1CD3AC728((uint64_t)&__p, v3, *(_DWORD *)(*(void *)(v46 + 8 * (int)v49) + 8));
        sub_1CD3AE6DC((uint64_t)&v155, (long long *)&__p);
        if ((_BYTE)v166 && SHIBYTE(v165) < 0) {
          operator delete(__p);
        }
      }
LABEL_97:
      BOOL v62 = (_BYTE)v156 == 0;
      uint64_t v10 = (uint64_t)v140;
      if ((_BYTE)v156)
      {
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v64 = &v155;
        }
        else {
          uint64_t v64 = (std::string *)v155.__r_.__value_.__r.__words[0];
        }
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v155.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v155.__r_.__value_.__l.__size_;
        }
        long long __p = "<instantiation>";
        LOWORD(v167) = 259;
        sub_1CD0963EC((llvm::WritableMemoryBuffer *)size, v64, (const void ***)&__p, (uint64_t)&v168);
        if (v169) {
          int v66 = 0;
        }
        else {
          int v66 = (void *)v168;
        }
        uint64_t v67 = *(void *)(v3 + 240);
        long long __p = v66;
        int v68 = sub_1CD452CE0(v67, (uint64_t *)&__p, *((void *)v142 + 1) + *((void *)v142 + 2));
        *(_DWORD *)(v3 + 272) = v68;
        uint64_t v69 = __p;
        long long __p = 0;
        if (v69)
        {
          (*(void (**)(void *))(*(void *)v69 + 8))(v69);
          int v68 = *(_DWORD *)(v3 + 272);
        }
        uint64_t v70 = *(void *)(**(void **)(v3 + 240) + 24 * (v68 - 1));
        uint64_t v71 = *(void *)(v70 + 8);
        uint64_t v72 = *(void *)(v70 + 16) - v71;
        *(void *)(v3 + 192) = v71;
        *(void *)(v3 + 200) = v72;
        *(void *)(v3 + 184) = v71;
        *(void *)(v3 + 136) = 0;
        *(unsigned char *)(v3 + 211) = 0;
        int v73 = *(_DWORD *)(v3 + 400);
        int v74 = v73 + 1;
        uint64_t v75 = *(unsigned int *)(v3 + 344);
        if ((v73 + 1) <= v75 << 6)
        {
          *(_DWORD *)(v3 + 400) = v74;
        }
        else
        {
          if ((v73 & 0x3F) != 0) {
            *(void *)(*v138 + 8 * v75 - 8) &= ~(-1 << (v73 & 0x3F));
          }
          *(_DWORD *)(v3 + 400) = v74;
          unsigned int v76 = v73 + 64;
          if (v75 != v76 >> 6)
          {
            uint64_t v77 = v76 >> 6;
            if (v75 > v77)
            {
              *(_DWORD *)(v3 + 344) = v77;
              LODWORD(v75) = v76 >> 6;
            }
            else
            {
              if (v77 > *(_DWORD *)(v3 + 348)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v77 != v75) {
                bzero((void *)(*v138 + 8 * v75), 8 * (v77 - v75));
              }
              LODWORD(v75) = v77;
              *(_DWORD *)(v3 + 344) = v77;
              int v74 = *(_DWORD *)(v3 + 400);
            }
          }
          int v78 = v74 & 0x3F;
          if (v78) {
            *(void *)(*v138 + 8 * v75 - 8) &= ~(-1 << v78);
          }
        }
        sub_1CD8F38F8(v144);
        if ((_BYTE)v156 && SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_98;
    }
    uint64_t v147 = (void **)v149;
    char v148 = v151;
    size_t v145 = v151 & 0x7F;
    size_t v146 = v150;
    int v27 = 0;
    if (v25)
    {
      size_t v28 = v25;
      BOOL v29 = v23;
      do
      {
        int v30 = *v29++;
        int v27 = 33 * v27 + v30;
        --v28;
      }
      while (v28);
    }
    uint64_t v31 = *(void *)(v19 + 1968);
    uint64_t v32 = *(unsigned int *)(v19 + 1988);
    int v33 = 1;
    int v34 = v27;
    while (1)
    {
      uint64_t v35 = v34 & (v26 - 1);
      uint64_t v36 = *(void **)(v31 + 8 * v35);
      if (v36 != (void *)-8)
      {
        if (!v36) {
          goto LABEL_57;
        }
        if (*(_DWORD *)(v31 + 8 * v26 + 8 + 4 * v35) == v27
          && v25 == *v36
          && (!v25 || !memcmp(v23, (char *)v36 + v32, v25)))
        {
          break;
        }
      }
      int v34 = v33 + v35;
      ++v33;
    }
    if (v35 == -1 || (int)v35 == v26)
    {
LABEL_57:
      uint64_t v3 = (uint64_t)v141;
      long long v21 = v147;
      char v20 = v148;
      size_t v24 = v145;
      size_t v22 = v146;
      goto LABEL_58;
    }
    uint64_t v37 = *(void *)(v31 + 8 * (int)v35);
    uint64_t v3 = (uint64_t)v141;
    long long v21 = v147;
    char v20 = v148;
    size_t v24 = v145;
    size_t v22 = v146;
    if (!*(unsigned char *)(v37 + 88)) {
      goto LABEL_58;
    }
    sub_1CD3ABC8C((uint64_t)&__p, (uint64_t)v141, 1);
    int v38 = (int)__p;
    if (v167 >= 0x41 && v166) {
      MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
    }
    if (v38 != 17)
    {
      char v20 = v151;
      long long v21 = (void **)v149;
      size_t v22 = v150;
      size_t v24 = v151 & 0x7F;
      goto LABEL_58;
    }
    int v82 = *v142;
    uint64_t v84 = *((void *)v142 + 1);
    unint64_t v83 = *((void *)v142 + 2);
    unint64_t v85 = v83 - 1;
    unint64_t v86 = v83 != 0;
    if (v83) {
      uint64_t v87 = v84 + 1;
    }
    else {
      uint64_t v87 = *((void *)v142 + 1);
    }
    if (v86 > v85) {
      unint64_t v85 = v83 != 0;
    }
    if (v83 < v85) {
      unint64_t v85 = *((void *)v142 + 2);
    }
    unint64_t v88 = v85 - v86;
    if (v82 == 2) {
      uint64_t v89 = *((void *)v142 + 1);
    }
    else {
      uint64_t v89 = v87;
    }
    if (v82 == 2) {
      unint64_t v90 = *((void *)v142 + 2);
    }
    else {
      unint64_t v90 = v88;
    }
    sub_1CD8F38F8(v144);
    if (*(unsigned char *)(v37 + 88))
    {
      __int16 v157 = 1283;
      std::string::size_type v91 = *(void *)(v37 + 8);
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)"invoking macro function '";
      v155.__r_.__value_.__r.__words[2] = v91;
      uint64_t v156 = *(void *)(v37 + 16);
      long long __p = &v155;
      *((void *)&v165 + 1) = "' requires arguments in parentheses";
      LOWORD(v167) = 770;
      uint64_t v10 = (uint64_t)v140;
      if (llvm::MCAsmParser::parseToken(v141, 17, (llvm::Twine *)&__p)
        || (sub_1CD3A963C((uint64_t)v141, (uint64_t *)(v37 + 8), v84, 18) & 1) != 0)
      {
        goto LABEL_153;
      }
      v153[0] = 0;
      v153[1] = 0;
      uint64_t v154 = 0;
      long long __p = (char *)&v165 + 8;
      *(void *)&long long v165 = 0x400000000;
      while (**v139)
      {
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
        v155.__r_.__value_.__l.__size_ = 0x800000000;
        int v158 = -1;
        char v159 = 0;
        LOBYTE(v160) = 0;
        char v162 = 0;
        p_p = &__p;
        if (sub_1CD39B384(v141, &v155, 0))
        {
          if (!*((_DWORD *)v141 + 6) && **v139 == 1) {
            (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
          }
          sub_1CD8F4AC0((uint64_t)v141);
          if (!*(unsigned char *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v141 + 40))(v141) + 107)) {
            (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 224))(v141);
          }
        }
        else
        {
          if (v162)
          {
            if (SHIBYTE(v154) < 0)
            {
              operator delete(v153[0]);
              *(_OWORD *)BOOL v153 = v160;
              uint64_t v154 = v161;
              HIBYTE(v161) = 0;
              LOBYTE(v160) = 0;
              if (!v162) {
                goto LABEL_178;
              }
            }
            else
            {
              *(_OWORD *)BOOL v153 = v160;
              uint64_t v154 = v161;
              HIBYTE(v161) = 0;
              LOBYTE(v160) = 0;
            }
            char v162 = 0;
LABEL_178:
            sub_1CD381630(&v155.__r_.__value_.__l.__data_);
            break;
          }
          sub_1CD8F4AC0((uint64_t)v141);
        }
        if (v162)
        {
          if (SHIBYTE(v161) < 0) {
            operator delete((void *)v160);
          }
          char v162 = 0;
        }
        sub_1CD381630(&v155.__r_.__value_.__l.__data_);
      }
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected ')'";
      __int16 v157 = 259;
      BOOL v92 = llvm::MCAsmParser::parseToken(v141, 18, (llvm::Twine *)&v155);
      if (!v92)
      {
        if (v154 >= 0) {
          int v93 = v153;
        }
        else {
          int v93 = (void **)v153[0];
        }
        if (v154 >= 0) {
          int v94 = (llvm::WritableMemoryBuffer *)(HIBYTE(v154) & 0x7F);
        }
        else {
          int v94 = (llvm::WritableMemoryBuffer *)v153[1];
        }
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)"<macro-value>";
        __int16 v157 = 259;
        sub_1CD0963EC(v94, v93, (const void ***)&v155, (uint64_t)&v168);
        if (v169) {
          uint64_t v95 = 0;
        }
        else {
          uint64_t v95 = v168;
        }
        uint64_t v96 = *((void *)v141 + 30);
        uint64_t v152 = v95;
        int v97 = sub_1CD452CE0(v96, &v152, *((void *)v141 + 17));
        *((_DWORD *)v141 + 68) = v97;
        uint64_t v98 = v152;
        uint64_t v152 = 0;
        if (v98)
        {
          (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
          int v97 = *((_DWORD *)v141 + 68);
        }
        uint64_t v99 = *(void *)(**((void **)v141 + 30) + 24 * (v97 - 1));
        uint64_t v100 = *(void *)(v99 + 8);
        uint64_t v101 = *(void *)(v99 + 16) - v100;
        *((void *)v141 + 24) = v100;
        *((void *)v141 + 25) = v101;
        *((void *)v141 + 23) = v100;
        *((void *)v141 + 17) = 0;
        *((unsigned char *)v141 + 211) = 0;
        int v102 = *((_DWORD *)v141 + 100);
        int v103 = v102 + 1;
        uint64_t v104 = *((unsigned int *)v141 + 86);
        if ((v102 + 1) <= v104 << 6)
        {
          *((_DWORD *)v141 + 100) = v103;
        }
        else
        {
          if ((v102 & 0x3F) != 0) {
            *(void *)(*v138 + 8 * v104 - 8) &= ~(-1 << (v102 & 0x3F));
          }
          *((_DWORD *)v141 + 100) = v103;
          unsigned int v105 = v102 + 64;
          if (v104 != v105 >> 6)
          {
            uint64_t v106 = v105 >> 6;
            if (v104 > v106)
            {
              *((_DWORD *)v141 + 86) = v106;
              LODWORD(v104) = v105 >> 6;
            }
            else
            {
              if (v106 > *((_DWORD *)v141 + 87)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v106 != v104) {
                bzero((void *)(*v138 + 8 * v104), 8 * (v106 - v104));
              }
              LODWORD(v104) = v106;
              *((_DWORD *)v141 + 86) = v106;
              int v103 = *((_DWORD *)v141 + 100);
            }
          }
          int v107 = v103 & 0x3F;
          if (v107) {
            *(void *)(*v138 + 8 * v104 - 8) &= ~(-1 << v107);
          }
        }
        (*(void (**)(llvm::MCAsmParser *))(*(void *)v141 + 184))(v141);
        uint64_t v10 = (uint64_t)v140;
      }
      if (__p != (char *)&v165 + 8) {
        free(__p);
      }
      if (SHIBYTE(v154) < 0) {
        operator delete(v153[0]);
      }
      if (v92)
      {
LABEL_153:
        LODWORD(__p) = 1;
        *(void *)&long long v165 = v89;
        *((void *)&v165 + 1) = v90;
        unsigned int v167 = 64;
        uint64_t v166 = 0;
        uint64_t v3 = (uint64_t)v141;
        *((unsigned char *)v141 + 147) = 0;
        sub_1CD45128C((uint64_t)v139, *((void *)v141 + 6), (unint64_t)&__p);
        if (v167 >= 0x41 && v166) {
          MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
        }
        sub_1CD8F38F8(v144);
        BOOL v62 = 0;
        goto LABEL_98;
      }
    }
    else
    {
      long long __p = "cannot invoke macro procedure as function";
      LOWORD(v167) = 259;
      uint64_t v10 = (uint64_t)v140;
      if (llvm::MCAsmParser::Error((uint64_t)v141, v84, (uint64_t)&__p, 0, 0)) {
        goto LABEL_153;
      }
    }
    BOOL v62 = 0;
    uint64_t v3 = (uint64_t)v141;
LABEL_98:
    if (v151 < 0) {
      operator delete(v149);
    }
    int v11 = *(_DWORD *)v10;
    int v63 = *(_DWORD *)v10 != 2 || v62;
    if (v63 == 1) {
      goto LABEL_214;
    }
  }
  int v11 = *(_DWORD *)v10;
LABEL_214:
  if (v11 == 7)
  {
    do
    {
      if (*(unsigned char *)(*(void *)(v3 + 232) + 466))
      {
        uint64_t v108 = *(void *)(v3 + 224);
        long long v109 = *(void **)(v10 + 8);
        uint64_t v110 = *(void *)(v10 + 16);
        LOWORD(v167) = 261;
        long long __p = v109;
        *(void *)&long long v165 = v110;
        (*(void (**)(uint64_t, void **))(*(void *)v108 + 136))(v108, &__p);
      }
      uint64_t v10 = sub_1CD8F38F8(v144);
      int v11 = *(_DWORD *)v10;
    }
    while (*(_DWORD *)v10 == 7);
  }
  while (1)
  {
    if (v11 != 16)
    {
      if (v11) {
        return v10;
      }
      goto LABEL_228;
    }
    sub_1CD3ABC8C((uint64_t)&__p, v3, 1);
    int v111 = (int)__p;
    if (v167 >= 0x41 && v166) {
      MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
    }
    if (v111 != 9) {
      break;
    }
    sub_1CD8F38F8(v144);
    uint64_t v10 = sub_1CD8F38F8(v144);
    int v11 = *(_DWORD *)v10;
  }
  if (*(_DWORD *)v10) {
    return v10;
  }
LABEL_228:
  unint64_t v112 = *(void *)(**(void **)(v3 + 240) + 24 * (*(_DWORD *)(v3 + 272) - 1) + 16);
  if (v112)
  {
    int v122 = *(_DWORD *)(v3 + 400);
    int v123 = v122 - 1;
    uint64_t v124 = *(unsigned int *)(v3 + 344);
    if ((v122 & 0x3F) != 0)
    {
      uint64_t v137 = *(void *)(v3 + 336) + 8 * v124;
      *(void *)(v137 - 8) &= ~(-1 << (v122 & 0x3F));
    }
    unsigned int v125 = v124;
    int v126 = (uint64_t *)(v3 + 336);
    *(_DWORD *)(v3 + 400) = v123;
    unsigned int v127 = v122 + 62;
    if (v124 != v127 >> 6)
    {
      uint64_t v128 = v127 >> 6;
      if (v124 > v128)
      {
        *(_DWORD *)(v3 + 344) = v128;
        unsigned int v125 = v127 >> 6;
      }
      else
      {
        if (v128 > *(_DWORD *)(v3 + 348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v128 != v124) {
          bzero((void *)(*v126 + 8 * v124), 8 * (v128 - v124));
        }
        unsigned int v125 = v128;
        *(_DWORD *)(v3 + 344) = v128;
        int v123 = *(_DWORD *)(v3 + 400);
      }
    }
    uint64_t v129 = *v126;
    if ((v123 & 0x3F) != 0) {
      *(void *)(v129 + 8 * v125 - 8) &= ~(-1 << (v123 & 0x3F));
    }
    uint64_t v130 = *(void *)(v129 + 8 * ((v123 - 1) >> 6)) >> (v123 - 1);
    size_t v131 = *(uint64_t **)(v3 + 240);
    int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v131, v112);
    *(_DWORD *)(v3 + 272) = BufferContainingLoc;
    uint64_t v133 = *(void *)(*v131 + 24 * (BufferContainingLoc - 1));
    uint64_t v134 = *(void *)(v133 + 8);
    uint64_t v135 = *(void *)(v133 + 16) - v134;
    *(void *)(v3 + 192) = v134;
    *(void *)(v3 + 200) = v135;
    *(void *)(v3 + 184) = v112;
    *(void *)(v3 + 136) = 0;
    *(unsigned char *)(v3 + 211) = v130 & 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 184))(v3);
  }
  else
  {
    int v113 = *(_DWORD *)(v3 + 400);
    int v114 = v113 - 1;
    uint64_t v115 = *(unsigned int *)(v3 + 344);
    if ((v113 & 0x3F) != 0)
    {
      uint64_t v136 = *(void *)(v3 + 336) + 8 * v115;
      *(void *)(v136 - 8) &= ~(-1 << (v113 & 0x3F));
    }
    unsigned int v116 = v115;
    int v117 = (void *)(v3 + 336);
    *(_DWORD *)(v3 + 400) = v114;
    unsigned int v118 = v113 + 62;
    if (v115 != v118 >> 6)
    {
      uint64_t v119 = v118 >> 6;
      if (v115 > v119)
      {
        *(_DWORD *)(v3 + 344) = v119;
        unsigned int v116 = v118 >> 6;
      }
      else
      {
        if (v119 > *(_DWORD *)(v3 + 348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v119 != v115) {
          bzero((void *)(*v117 + 8 * v115), 8 * (v119 - v115));
        }
        unsigned int v116 = v119;
        *(_DWORD *)(v3 + 344) = v119;
        int v114 = *(_DWORD *)(v3 + 400);
      }
    }
    int v120 = v114 & 0x3F;
    if (v120) {
      *(void *)(*v117 + 8 * v116 - 8) &= ~(-1 << v120);
    }
  }
  return v10;
}

uint64_t sub_1CD3AE658(uint64_t result, unint64_t a2, int a3, char a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void **)(result + 240);
  if (!a3)
  {
    double result = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(result + 240), a2);
    a3 = result;
  }
  *(_DWORD *)(v6 + 272) = a3;
  uint64_t v8 = *(void *)(*v7 + 24 * (a3 - 1));
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v10 = *(void *)(v8 + 16) - v9;
  *(void *)(v6 + 192) = v9;
  *(void *)(v6 + 200) = v10;
  if (a2) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = v9;
  }
  *(void *)(v6 + 184) = v11;
  *(void *)(v6 + 136) = 0;
  *(unsigned char *)(v6 + 211) = a4;
  return result;
}

uint64_t sub_1CD3AE6DC(uint64_t a1, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
    else
    {
      long long v3 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v3;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CD3AE788(llvm::MCAsmParser *a1, uint64_t a2)
{
  int v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  if ((v4 - 38) < 4)
  {
    long long v5 = *(uint64_t (**)(llvm::MCAsmParser *, uint64_t))(*(void *)a1 + 216);
    return v5(a1, a2);
  }
  if (v4 == 2)
  {
    __val[0] = 0;
    __val[1] = 0;
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 192))(a1, __val)) {
      return 1;
    }
    uint64_t v7 = (const void *)__val[0];
    if (!__val[0])
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_25:
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      char v52 = 0;
      *(std::string *)a2 = __dst;
      uint64_t v51 = (std::string *)a2;
      while (1)
      {
        llvm::StringRef::lower((llvm::StringRef *)__val, &__dst);
        int v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = __dst.__r_.__value_.__l.__size_;
        }
        uint64_t v15 = *((unsigned int *)a1 + 286);
        long long __p = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v15)
        {
          int v55 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          int v16 = 0;
          if (size)
          {
            size_t v17 = size;
            unint64_t v18 = p_dst;
            do
            {
              int v19 = v18->__r_.__value_.__s.__data_[0];
              unint64_t v18 = (std::string *)((char *)v18 + 1);
              int v16 = 33 * v16 + v19;
              --v17;
            }
            while (v17);
          }
          uint64_t v20 = *((void *)a1 + 142);
          int v21 = 1;
          int v22 = v16;
          while (1)
          {
            uint64_t v23 = v22 & (v15 - 1);
            size_t v24 = *(void **)(v20 + 8 * v23);
            if (v24 != (void *)-8)
            {
              if (!v24)
              {
                uint64_t v25 = v15;
                goto LABEL_47;
              }
              if (*(_DWORD *)(v20 + 8 * v15 + 8 + 4 * v23) == v16
                && size == *v24
                && (!size || !memcmp(p_dst, (char *)v24 + *((unsigned int *)a1 + 289), size)))
              {
                break;
              }
            }
            int v22 = v21 + v23;
            ++v21;
          }
          if (v23 == -1) {
            uint64_t v25 = v15;
          }
          else {
            uint64_t v25 = (int)v23;
          }
LABEL_47:
          int v12 = v55;
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v20 = *((void *)a1 + 142);
        }
        uint64_t v26 = v20;
        if (v12 < 0)
        {
          operator delete(__p);
          uint64_t v26 = *((void *)a1 + 142);
          LODWORD(v15) = *((_DWORD *)a1 + 286);
        }
        uint64_t v27 = v20 + 8 * v25;
        if (v27 == v26 + 8 * v15)
        {
          llvm::StringRef::lower((llvm::StringRef *)__val, &__dst);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v30 = &__dst;
          }
          else {
            int v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v31 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            size_t v31 = __dst.__r_.__value_.__l.__size_;
          }
          uint64_t v32 = *((unsigned int *)a1 + 120);
          int __pa = (void *)__dst.__r_.__value_.__r.__words[0];
          int v56 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v32)
          {
            int v33 = 0;
            if (v31)
            {
              size_t v34 = v31;
              uint64_t v35 = v30;
              do
              {
                int v36 = v35->__r_.__value_.__s.__data_[0];
                uint64_t v35 = (std::string *)((char *)v35 + 1);
                int v33 = 33 * v33 + v36;
                --v34;
              }
              while (v34);
            }
            uint64_t v37 = *((void *)a1 + 59);
            int v38 = 1;
            int v39 = v33;
            while (1)
            {
              uint64_t v40 = v39 & (v32 - 1);
              uint64_t v41 = *(void **)(v37 + 8 * v40);
              if (v41 != (void *)-8)
              {
                if (!v41)
                {
                  uint64_t v42 = v32;
                  goto LABEL_74;
                }
                if (*(_DWORD *)(v37 + 8 * v32 + 8 + 4 * v40) == v33
                  && v31 == *v41
                  && (!v31 || !memcmp(v30, (char *)v41 + *((unsigned int *)a1 + 123), v31)))
                {
                  break;
                }
              }
              int v39 = v38 + v40;
              ++v38;
            }
            if (v40 == -1) {
              uint64_t v42 = v32;
            }
            else {
              uint64_t v42 = (int)v40;
            }
          }
          else
          {
            uint64_t v42 = 0;
            uint64_t v37 = *((void *)a1 + 59);
          }
LABEL_74:
          uint64_t v43 = v37;
          if (v56 < 0)
          {
            operator delete(__pa);
            uint64_t v43 = *((void *)a1 + 59);
            LODWORD(v32) = *((_DWORD *)a1 + 120);
          }
          uint64_t v44 = v37 + 8 * v42;
          if (v44 == v43 + 8 * v32 || !*(unsigned char *)(*(void *)v44 + 28))
          {
LABEL_92:
            if (v52) {
              return 0;
            }
            uint64_t v49 = (*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(void *)a1 + 40))(a1, v28);
            LODWORD(__dst.__r_.__value_.__l.__data_) = 2;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)__val;
            unsigned int v60 = 64;
            uint64_t v59 = 0;
            uint64_t v50 = *(void *)(v49 + 8);
            v49 += 8;
            *(unsigned char *)(v49 + 99) = 0;
            sub_1CD45128C(v49, v50, (unint64_t)&__dst);
            if (v60 >= 0x41 && v59) {
              MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
            }
            return 1;
          }
          BOOL v29 = v51;
          std::string::operator=(v51, (const std::string *)(*(void *)v44 + 32));
        }
        else
        {
          v28.n128_f64[0] = sub_1CD3AC728((uint64_t)&__dst, (uint64_t)a1, *(_DWORD *)(*(void *)v27 + 8));
          if (!(_BYTE)v59) {
            goto LABEL_92;
          }
          BOOL v29 = v51;
          if (SHIBYTE(v51->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51->__r_.__value_.__l.__data_);
          }
          *uint64_t v51 = __dst;
        }
        char v45 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
        BOOL v46 = v45 < 0;
        uint64_t v47 = v29->__r_.__value_.__r.__words[0];
        if (v45 >= 0) {
          uint64_t v47 = (uint64_t)v29;
        }
        uint64_t v48 = v45 & 0x7F;
        if (v46) {
          uint64_t v48 = v29->__r_.__value_.__l.__size_;
        }
        __val[0] = v47;
        __val[1] = v48;
        char v52 = 1;
      }
    }
    std::string::size_type v8 = __val[1];
    if (__val[1] >= 0x7FFFFFFFFFFFFFF8uLL) {
      abort();
    }
    if (__val[1] >= 0x17uLL)
    {
      uint64_t v10 = (__val[1] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__val[1] | 7) != 0x17) {
        uint64_t v10 = __val[1] | 7;
      }
      uint64_t v11 = v10 + 1;
      unint64_t v9 = operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __val[1];
      unint64_t v9 = &__dst;
      if (!__val[1]) {
        goto LABEL_24;
      }
    }
    memmove(v9, v7, v8);
LABEL_24:
    *((unsigned char *)v9 + v8) = 0;
    goto LABEL_25;
  }
  if (v4 != 36) {
    return 1;
  }
  __val[0] = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
  LOWORD(v60) = 259;
  if (llvm::MCAsmParser::parseToken(a1, 36, (llvm::Twine *)&__dst)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, __val) & 1) != 0)
  {
    return 1;
  }
  std::to_string(&__dst, __val[0]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t result = 0;
  *(std::string *)a2 = __dst;
  return result;
}

uint64_t sub_1CD3AED64(void *a1, uint64_t a2, int a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  uint64_t v6 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) + 8) + 8);
  int v7 = **(_DWORD **)(a2 + 48);
  if (v7 != a3)
  {
    uint64_t v10 = (uint64_t *)(a2 + 336);
    do
    {
      if (v7)
      {
        sub_1CD8F38F8(a2 + 40);
      }
      else
      {
        unint64_t v11 = *(void *)(**(void **)(a2 + 240) + 24 * (*(_DWORD *)(a2 + 272) - 1) + 16);
        if (!v11) {
          break;
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
        sub_1CD3AF050((uint64_t)a1, v6, *(void *)(*(void *)(v12 + 8) + 8) - v6);
        int v13 = *(_DWORD *)(a2 + 400);
        uint64_t v14 = *(unsigned int *)(a2 + 344);
        if ((v13 & 0x3F) != 0)
        {
          uint64_t v26 = *(void *)(a2 + 336) + 8 * v14;
          *(void *)(v26 - 8) &= ~(-1 << (v13 & 0x3F));
        }
        unsigned int v15 = v14;
        int v16 = v13 - 1;
        *(_DWORD *)(a2 + 400) = v13 - 1;
        unsigned int v17 = v13 + 62;
        if (v14 != v17 >> 6)
        {
          uint64_t v18 = v17 >> 6;
          if (v14 > v18)
          {
            *(_DWORD *)(a2 + 344) = v18;
            unsigned int v15 = v17 >> 6;
          }
          else
          {
            if (v18 > *(_DWORD *)(a2 + 348)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v18 != v14) {
              bzero((void *)(*v10 + 8 * v14), 8 * (v18 - v14));
            }
            unsigned int v15 = v18;
            *(_DWORD *)(a2 + 344) = v18;
            int v16 = *(_DWORD *)(a2 + 400);
          }
        }
        uint64_t v19 = *v10;
        if ((v16 & 0x3F) != 0) {
          *(void *)(v19 + 8 * v15 - 8) &= ~(-1 << (v16 & 0x3F));
        }
        uint64_t v20 = *(void *)(v19 + 8 * ((v16 - 1) >> 6)) >> (v16 - 1);
        int v21 = *(uint64_t **)(a2 + 240);
        int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v21, v11);
        *(_DWORD *)(a2 + 272) = BufferContainingLoc;
        uint64_t v23 = *(void *)(*v21 + 24 * (BufferContainingLoc - 1));
        uint64_t v24 = *(void *)(v23 + 8);
        uint64_t v25 = *(void *)(v23 + 16) - v24;
        *(void *)(a2 + 192) = v24;
        *(void *)(a2 + 200) = v25;
        *(void *)(a2 + 184) = v11;
        *(void *)(a2 + 136) = 0;
        *(unsigned char *)(a2 + 211) = v20 & 1;
        sub_1CD8F38F8(a2 + 40);
        uint64_t v6 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) + 8) + 8);
      }
      int v7 = **(_DWORD **)(a2 + 48);
    }
    while (v7 != a3);
  }
  uint64_t v8 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) + 8) + 8) - v6;

  return sub_1CD3AF050((uint64_t)a1, v6, v8);
}

uint64_t sub_1CD3AF050(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v4 = (void *)(*(void *)result + 16 * v3);
  void *v4 = a2;
  v4[1] = a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_1CD3AF0CC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a2 && *((unsigned char *)a2 + 41))
  {
    if (**(_DWORD **)(a1 + 48) != a4)
    {
      sub_1CD3AED64(&v75, a1, a4);
      uint64_t v8 = (char *)v75;
      if (v76)
      {
        unint64_t v9 = (uint64_t *)(a3 + 16);
        uint64_t v10 = *(char **)(a3 + 8);
        unint64_t v11 = (char *)v75 + 16 * v76;
        do
        {
          uint64_t v13 = *(void *)v8;
          uint64_t v12 = *((void *)v8 + 1);
          unint64_t v14 = *v9;
          if ((unint64_t)v10 >= *v9)
          {
            unsigned int v15 = *(char **)a3;
            unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-*(void *)a3] >> 3);
            unint64_t v17 = v16 + 1;
            if (v16 + 1 > 0x666666666666666) {
              goto LABEL_110;
            }
            if (0x999999999999999ALL * ((uint64_t)(v14 - (void)v15) >> 3) > v17) {
              unint64_t v17 = 0x999999999999999ALL * ((uint64_t)(v14 - (void)v15) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)v15) >> 3) >= 0x333333333333333) {
              unint64_t v17 = 0x666666666666666;
            }
            uint64_t v74 = a3 + 16;
            if (v17 > 0x666666666666666) {
              goto LABEL_111;
            }
            unint64_t v69 = v17;
            uint64_t v18 = (char *)operator new(40 * v17);
            uint64_t v19 = &v18[40 * v16];
            *(_DWORD *)uint64_t v19 = 3;
            *((void *)v19 + 1) = v13;
            *((void *)v19 + 2) = v12;
            *((_DWORD *)v19 + 8) = 64;
            *((void *)v19 + 3) = 0;
            uint64_t v20 = v19;
            if (v10 != v15)
            {
              uint64_t v21 = 0;
              do
              {
                int v22 = &v19[v21];
                long long v23 = *(_OWORD *)&v10[v21 - 40];
                *((void *)v22 - 3) = *(void *)&v10[v21 - 24];
                *(_OWORD *)(v22 - 40) = v23;
                *((_DWORD *)v22 - 2) = *(_DWORD *)&v10[v21 - 8];
                *((void *)v22 - 2) = *(void *)&v10[v21 - 16];
                *(_DWORD *)&v10[v21 - 8] = 0;
                v21 -= 40;
              }
              while (&v10[v21] != v15);
              uint64_t v20 = &v19[v21];
            }
            uint64_t v24 = v19 + 40;
            *(void *)a3 = v20;
            *(void *)(a3 + 8) = v19 + 40;
            *(void *)(a3 + 16) = &v18[40 * v69];
            uint64_t v72 = v10;
            unint64_t v73 = v14;
            uint64_t v70 = (void **)v15;
            uint64_t v71 = v15;
            sub_1CD8F3EEC((uint64_t)&v70);
            uint64_t v10 = v24;
          }
          else
          {
            *(_DWORD *)uint64_t v10 = 3;
            *((void *)v10 + 1) = v13;
            *((void *)v10 + 2) = v12;
            *((_DWORD *)v10 + 8) = 64;
            *((void *)v10 + 3) = 0;
            v10 += 40;
          }
          *(void *)(a3 + 8) = v10;
          v8 += 16;
        }
        while (v8 != v11);
        uint64_t v8 = (char *)v75;
      }
      if (v8 != (char *)v77) {
        free(v8);
      }
    }
    return 0;
  }
  int v25 = **(_DWORD **)(a1 + 48);
  if (v25 == 38)
  {
    for (unint64_t i = *(unsigned char **)(a1 + 136); ; ++i)
    {
      unsigned int v27 = *i;
      if (v27 <= 0x20)
      {
        if (*i) {
          BOOL v28 = v27 == 10;
        }
        else {
          BOOL v28 = 1;
        }
        if (v28 || v27 == 13) {
          break;
        }
      }
      else if (v27 == 33)
      {
        ++i;
      }
      else if (v27 == 62)
      {
        uint64_t v50 = *(void *)(a1 + 136) + 1;
        sub_1CD3AE658(a1, (unint64_t)(i + 1), *(_DWORD *)(a1 + 272), (*(void *)(*(void *)(a1 + 336) + 8 * ((*(_DWORD *)(a1 + 400) - 1) >> 6)) >> (*(unsigned char *)(a1 + 400) - 1)) & 1);
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        uint64_t v51 = &i[-v50];
        unint64_t v52 = *(void *)(a3 + 16);
        unint64_t v53 = *(void *)(a3 + 8);
        if (v53 >= v52)
        {
          uint64_t v59 = *(char **)a3;
          unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - *(void *)a3) >> 3);
          unint64_t v61 = v60 + 1;
          if (v60 + 1 > 0x666666666666666) {
LABEL_110:
          }
            abort();
          if (0x999999999999999ALL * ((uint64_t)(v52 - (void)v59) >> 3) > v61) {
            unint64_t v61 = 0x999999999999999ALL * ((uint64_t)(v52 - (void)v59) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - (void)v59) >> 3) >= 0x333333333333333) {
            unint64_t v62 = 0x666666666666666;
          }
          else {
            unint64_t v62 = v61;
          }
          uint64_t v74 = a3 + 16;
          if (v62 > 0x666666666666666) {
LABEL_111:
          }
            sub_1CB833614();
          int v63 = (char *)operator new(40 * v62);
          uint64_t v64 = &v63[40 * v60];
          *(_DWORD *)uint64_t v64 = 3;
          *((void *)v64 + 1) = v50;
          *((void *)v64 + 2) = v51;
          *((_DWORD *)v64 + 8) = 64;
          *((void *)v64 + 3) = 0;
          int v65 = v64;
          if ((char *)v53 != v59)
          {
            uint64_t v66 = 0;
            do
            {
              uint64_t v67 = &v64[v66];
              long long v68 = *(_OWORD *)(v53 + v66 - 40);
              *((void *)v67 - 3) = *(void *)(v53 + v66 - 24);
              *(_OWORD *)(v67 - 40) = v68;
              *((_DWORD *)v67 - 2) = *(_DWORD *)(v53 + v66 - 8);
              *((void *)v67 - 2) = *(void *)(v53 + v66 - 16);
              *(_DWORD *)(v53 + v66 - 8) = 0;
              v66 -= 40;
            }
            while ((char *)(v53 + v66) != v59);
            int v65 = &v64[v66];
          }
          unint64_t v54 = v64 + 40;
          *(void *)a3 = v65;
          *(void *)(a3 + 8) = v64 + 40;
          *(void *)(a3 + 16) = &v63[40 * v62];
          uint64_t v72 = (const char *)v53;
          unint64_t v73 = v52;
          uint64_t v70 = (void **)v59;
          uint64_t v71 = v59;
          sub_1CD8F3EEC((uint64_t)&v70);
        }
        else
        {
          *(_DWORD *)unint64_t v53 = 3;
          *(void *)(v53 + 8) = v50;
          *(void *)(v53 + 16) = v51;
          *(_DWORD *)(v53 + 32) = 64;
          unint64_t v54 = (char *)(v53 + 40);
          *(void *)(v53 + 24) = 0;
        }
        uint64_t result = 0;
        *(void *)(a3 + 8) = v54;
        return result;
      }
    }
  }
  int v30 = 0;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 1060);
  while (1)
  {
    if (v25 == 27 || !v25)
    {
      int v55 = "unexpected token";
      goto LABEL_94;
    }
    if (v30)
    {
      if (a4 != 18 && v25 == a4)
      {
        int v55 = "unbalanced parentheses in argument";
LABEL_94:
        uint64_t v70 = (void **)v55;
        __int16 v56 = 259;
LABEL_95:
        LOWORD(v74) = v56;
        uint64_t result = llvm::MCAsmParser::TokError(a1, (uint64_t)&v70, 0, 0);
        goto LABEL_96;
      }
      goto LABEL_58;
    }
    if (v25 == 25) {
      goto LABEL_81;
    }
    if (v25 == 11) {
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    }
    if (*(unsigned char *)(a1 + 1060)) {
      break;
    }
    unsigned int v31 = **(_DWORD **)(a1 + 48);
    BOOL v32 = v31 > 0x2C || ((1 << v31) & 0x1FCFF980F000) == 0;
    if (v32 || v31 == a4) {
      break;
    }
    uint64_t v44 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
    unint64_t v45 = *(void *)(a3 + 8);
    if (v45 >= *(void *)(a3 + 16))
    {
      uint64_t v48 = sub_1CD37E5E8((char **)a3, v44);
    }
    else
    {
      long long v46 = *(_OWORD *)v44;
      *(void *)(v45 + 16) = *(void *)(v44 + 16);
      *(_OWORD *)unint64_t v45 = v46;
      unsigned int v47 = *(_DWORD *)(v44 + 32);
      *(_DWORD *)(v45 + 32) = v47;
      if (v47 > 0x40) {
        operator new[]();
      }
      *(void *)(v45 + 24) = *(void *)(v44 + 24);
      uint64_t v48 = (char *)(v45 + 40);
    }
    *(void *)(a3 + 8) = v48;
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    int v30 = 0;
    int v43 = 0;
    int v25 = **(_DWORD **)(a1 + 48);
    if (v25 == 11)
    {
LABEL_73:
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      int v25 = **(_DWORD **)(a1 + 48);
      int v30 = v43;
    }
  }
  if (v25 != 11)
  {
    int v25 = **(_DWORD **)(a1 + 48);
    if (v25 != a4)
    {
LABEL_58:
      int v35 = v25 == 18 && v30 != 0;
      int v36 = v35 << 31 >> 31;
      if (v25 == 17) {
        int v37 = 1;
      }
      else {
        int v37 = v36;
      }
      uint64_t v38 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      unint64_t v39 = *(void *)(a3 + 8);
      if (v39 >= *(void *)(a3 + 16))
      {
        uint64_t v42 = sub_1CD37E5E8((char **)a3, v38);
      }
      else
      {
        long long v40 = *(_OWORD *)v38;
        *(void *)(v39 + 16) = *(void *)(v38 + 16);
        *(_OWORD *)unint64_t v39 = v40;
        unsigned int v41 = *(_DWORD *)(v38 + 32);
        *(_DWORD *)(v39 + 32) = v41;
        if (v41 > 0x40) {
          operator new[]();
        }
        *(void *)(v39 + 24) = *(void *)(v38 + 24);
        uint64_t v42 = (char *)(v39 + 40);
      }
      int v43 = v37 + v30;
      *(void *)(a3 + 8) = v42;
      goto LABEL_73;
    }
  }
LABEL_81:
  uint64_t result = 0;
  if (!a2 || *(void *)a3 != *(void *)(a3 + 8)) {
    goto LABEL_96;
  }
  if (*((unsigned char *)a2 + 40))
  {
    __int16 v78 = 1283;
    uint64_t v57 = *a2;
    uint64_t v58 = a2[1];
    uint64_t v75 = "missing value for required parameter '";
    v77[0] = v57;
    v77[1] = v58;
    uint64_t v70 = &v75;
    uint64_t v72 = "'";
    __int16 v56 = 770;
    goto LABEL_95;
  }
  if (a2 + 2 != (uint64_t *)a3) {
    sub_1CD37E798(a3, a2[2], a2[3], 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - a2[2]) >> 3));
  }
  uint64_t result = 0;
LABEL_96:
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

void **sub_1CD3AF8A0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)a2 + 96 * v2;
  long long v4 = *(_OWORD *)(v3 - 80);
  *(_OWORD *)a1 = *(_OWORD *)(v3 - 96);
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 - 64);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 - 56);
  *(void *)(v3 - 56) = 0;
  *(void *)(v3 - 48) = 0;
  uint64_t v5 = *(void *)(v3 - 32);
  *(void *)(a1 + 56) = *(void *)(v3 - 40);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v3 - 24);
  --v2;
  *(void *)(v3 - 40) = 0;
  *(void *)(v3 - 32) = 0;
  *(void *)(v3 - 24) = 0;
  *(_DWORD *)(v3 - 16) = 0;
  *(_DWORD *)(a2 + 8) = v2;
  uint64_t v6 = *(void *)a2 + 96 * v2;
  sub_1CD61201C(v6 + 64);

  return sub_1CD39B200((void **)(v6 + 40));
}

unsigned int *sub_1CD3AF930(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  v34[0] = a2;
  v34[1] = a3;
  if (a3)
  {
    unint64_t v29 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
    llvm::StringRef::lower((llvm::StringRef *)v34, __p);
    int v30 = v33 >= 0 ? (unsigned __int8 *)__p : (unsigned __int8 *)__p[0];
    unsigned int v31 = v33 >= 0 ? (void *)(v33 & 0x7F) : __p[1];
    (*sub_1CD5CF708(a1 + 64, v30, (size_t)v31))[1] = v29;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v9 = *(char **)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  if ((unint64_t)v9 < v8)
  {
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    sub_1CD3B0C70((uint64_t)(v9 + 16), a4);
    uint64_t v10 = v9 + 144;
    goto LABEL_20;
  }
  unint64_t v11 = *(char **)(a1 + 40);
  unint64_t v12 = 0x8E38E38E38E38E39 * ((v9 - v11) >> 4) + 1;
  if (v12 > 0x1C71C71C71C71C7) {
    abort();
  }
  unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - (void)v11) >> 4);
  if (2 * v13 > v12) {
    unint64_t v12 = 2 * v13;
  }
  if (v13 >= 0xE38E38E38E38E3) {
    unint64_t v14 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 > 0x1C71C71C71C71C7) {
      sub_1CB833614();
    }
    unsigned int v15 = (char *)operator new(144 * v14);
  }
  else
  {
    unsigned int v15 = 0;
  }
  unint64_t v16 = &v15[16 * ((v9 - v11) >> 4)];
  unint64_t v17 = &v15[144 * v14];
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  sub_1CD3B0C70((uint64_t)(v16 + 16), a4);
  uint64_t v10 = v16 + 144;
  if (v9 == v11)
  {
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v17;
    if (v9) {
LABEL_19:
    }
      operator delete(v9);
  }
  else
  {
    do
    {
      *((_OWORD *)v16 - 9) = *((_OWORD *)v9 - 9);
      uint64_t v18 = (uint64_t)(v16 - 128);
      v16 -= 144;
      sub_1CD3B011C(v18, (uint64_t **)v9 - 16);
      v9 -= 144;
    }
    while (v9 != v11);
    unint64_t v9 = *(char **)(a1 + 40);
    uint64_t v19 = *(void ****)(a1 + 48);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v17;
    if (v19 != (void ***)v9)
    {
      do
      {
        uint64_t v20 = (char *)(v19 - 18);
        sub_1CD39B268(v19 - 16);
        uint64_t v19 = (void ***)v20;
      }
      while (v20 != v9);
    }
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_20:
  uint64_t v21 = (unsigned int *)(a1 + 28);
  uint64_t v22 = *(unsigned int *)(a1 + 28);
  *(void *)(a1 + 48) = v10;
  LODWORD(v23) = *(_DWORD *)(a1 + 20);
  if (v23 >= a5) {
    unint64_t v23 = a5;
  }
  else {
    unint64_t v23 = v23;
  }
  unsigned int v24 = (v22 + v23 - 1) / v23 * v23;
  *((_DWORD *)v10 - 36) = v24;
  int v25 = (unsigned int *)(v10 - 18);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (*v21 >= v24) {
      uint64_t v26 = (unsigned int *)(a1 + 28);
    }
    else {
      uint64_t v26 = v25;
    }
    *uint64_t v21 = *v26;
  }
  unsigned int v27 = *(_DWORD *)(a1 + 24);
  if (v27 <= a5) {
    unsigned int v27 = a5;
  }
  *(_DWORD *)(a1 + 24) = v27;
  return v25;
}

uint64_t sub_1CD3AFBA0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if ((long long *)a1 != a2)
  {
    uint64_t v7 = *((void *)a2 + 5);
    uint64_t v6 = *((void *)a2 + 6);
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void ****)(a1 + 40);
    if (0x8E38E38E38E38E39 * ((v9 - (uint64_t)v10) >> 4) < v8)
    {
      if (v10)
      {
        unint64_t v11 = (void **)(a1 + 40);
        unint64_t v12 = *(void ****)(a1 + 48);
        unint64_t v13 = *(void **)(a1 + 40);
        if (v12 != v10)
        {
          do
          {
            unint64_t v14 = v12 - 18;
            sub_1CD39B268(v12 - 16);
            unint64_t v12 = v14;
          }
          while (v14 != v10);
          unint64_t v13 = *v11;
        }
        *(void *)(a1 + 48) = v10;
        operator delete(v13);
        uint64_t v9 = 0;
        *unint64_t v11 = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
      }
      if (v8 > 0x1C71C71C71C71C7) {
        goto LABEL_35;
      }
      unint64_t v15 = 0x8E38E38E38E38E39 * (v9 >> 4);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v8) {
        uint64_t v16 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
      }
      unint64_t v17 = v15 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v16;
      if (v17 > 0x1C71C71C71C71C7) {
LABEL_35:
      }
        abort();
      uint64_t v18 = 9 * v17;
      uint64_t v10 = (void ***)operator new(144 * v17);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 56) = &v10[2 * v18];
      while (v7 != v6)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v7;
        sub_1CD3B0398((uint64_t)(v10 + 2), (int *)(v7 + 16));
        v7 += 144;
        v10 += 18;
      }
LABEL_33:
      *(void *)(a1 + 48) = v10;
      goto LABEL_34;
    }
    uint64_t v19 = *(void ****)(a1 + 48);
    if (0x8E38E38E38E38E39 * (((char *)v19 - (char *)v10) >> 4) >= v8)
    {
      if (v7 != v6)
      {
        unsigned int v27 = (int *)(v10 + 2);
        do
        {
          *((_OWORD *)v27 - 1) = *(_OWORD *)v7;
          BOOL v28 = sub_1CD3B0630(v27, (int ***)(v7 + 16));
          v7 += 144;
          v10 += 18;
          unsigned int v27 = v28 + 36;
        }
        while (v7 != v6);
        uint64_t v19 = *(void ****)(a1 + 48);
      }
      if (v19 != v10)
      {
        do
        {
          unint64_t v29 = v19 - 18;
          sub_1CD39B268(v19 - 16);
          uint64_t v19 = v29;
        }
        while (v29 != v10);
      }
      goto LABEL_33;
    }
    uint64_t v20 = v7 + 16 * (((char *)v19 - (char *)v10) >> 4);
    if (v19 != v10)
    {
      uint64_t v21 = (int *)(v10 + 2);
      uint64_t v22 = 16 * (((char *)v19 - (char *)v10) >> 4);
      unint64_t v23 = (int ***)(v7 + 16);
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v23 - 1);
        uint64_t v21 = sub_1CD3B0630(v21, v23) + 36;
        v23 += 18;
        v22 -= 144;
      }
      while (v22);
      uint64_t v10 = *(void ****)(a1 + 48);
    }
    unsigned int v24 = v10;
    if (v20 != v6)
    {
      uint64_t v25 = (uint64_t)(v10 + 2);
      unsigned int v24 = v10;
      do
      {
        *(_OWORD *)(v25 - 16) = *(_OWORD *)v20;
        uint64_t v26 = sub_1CD3B0398(v25, (int *)(v20 + 16));
        v20 += 144;
        v24 += 18;
        uint64_t v25 = v26 + 144;
      }
      while (v20 != v6);
    }
    *(void *)(a1 + 48) = v24;
  }
LABEL_34:
  sub_1CD3B0510(&v33, (uint64_t)(a2 + 4));
  uint64_t v30 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v33;
  uint64_t v33 = v30;
  uint64_t v31 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v34;
  uint64_t v34 = v31;
  LODWORD(v30) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v35;
  int v35 = v30;
  sub_1CD61201C((uint64_t)&v33);
  return a1;
}

void sub_1CD3AFE68(void ***a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    long long v4 = v3 + 3;
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    goto LABEL_25;
  }
  long long v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v3 - *a1);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(24 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v6];
  unint64_t v12 = (void **)&v10[24 * v9];
  long long v4 = (void **)(v11 + 24);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  if (v3 == v5)
  {
    *a1 = (void **)v11;
    a1[1] = v4;
    a1[2] = v12;
    if (!v3) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  do
  {
    unint64_t v13 = v11;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    long long v14 = *(_OWORD *)(v3 - 3);
    v3 -= 3;
    *(_OWORD *)(v11 - 24) = v14;
    v11 -= 24;
    *((void *)v13 - 1) = v3[2];
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  while (v3 != v5);
  uint64_t v3 = *a1;
  unint64_t v15 = a1[1];
  *a1 = (void **)v11;
  a1[1] = v4;
  a1[2] = v12;
  if (v15 != v3)
  {
    uint64_t v16 = v15;
    do
    {
      uint64_t v18 = (void ***)*(v16 - 3);
      v16 -= 3;
      unint64_t v17 = v18;
      if (v18)
      {
        uint64_t v19 = (void ***)*(v15 - 2);
        uint64_t v20 = v17;
        if (v19 != v17)
        {
          do
            uint64_t v19 = sub_1CD39B268(v19 - 16);
          while (v19 != v17);
          uint64_t v20 = *v16;
        }
        *(v15 - 2) = v17;
        operator delete(v20);
      }
      unint64_t v15 = v16;
    }
    while (v16 != v3);
  }
  if (v3) {
LABEL_24:
  }
    operator delete(v3);
LABEL_25:
  a1[1] = v4;
}

void sub_1CD3AFFF4(uint64_t ***a1, int *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (uint64_t)(v4 - (void)*a1) >> 7;
    if ((unint64_t)(v7 + 1) >> 57) {
      abort();
    }
    uint64_t v8 = v5 - (void)*a1;
    uint64_t v9 = v8 >> 6;
    if (v8 >> 6 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 57) {
        sub_1CB833614();
      }
      unint64_t v11 = (char *)operator new(v10 << 7);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v12 = (uint64_t **)&v11[128 * v10];
    uint64_t v13 = sub_1CD3B0398((uint64_t)&v11[128 * v7], a2);
    uint64_t v6 = v13 + 128;
    unint64_t v15 = *a1;
    long long v14 = a1[1];
    if (v14 == *a1)
    {
      *a1 = (uint64_t **)v13;
      a1[1] = (uint64_t **)v6;
      a1[2] = v12;
    }
    else
    {
      do
      {
        v14 -= 16;
        uint64_t v13 = sub_1CD3B011C(v13 - 128, v14);
      }
      while (v14 != v15);
      long long v14 = *a1;
      uint64_t v16 = (void ***)a1[1];
      *a1 = (uint64_t **)v13;
      a1[1] = (uint64_t **)v6;
      a1[2] = v12;
      while (v16 != (void ***)v14)
      {
        v16 -= 16;
        sub_1CD39B268(v16);
      }
    }
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    uint64_t v6 = sub_1CD3B0398(v4, a2) + 128;
  }
  a1[1] = (uint64_t **)v6;
}

uint64_t sub_1CD3B011C(uint64_t a1, uint64_t **a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  switch(v4)
  {
    case 2:
      sub_1CD3B0294((void *)(a1 + 8), a2 + 1);
      long long v6 = *((_OWORD *)a2 + 2);
      long long v7 = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)(a1 + 48) = v7;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 72) = 0;
      uint64_t v8 = a2[9];
      uint64_t v9 = a2[10];
      int64_t v10 = (char *)v9 - (char *)v8;
      if (v9 != v8)
      {
        unint64_t v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
        if (v11 >= 0x1C71C71C71C71C8) {
          abort();
        }
        unint64_t v12 = (char *)operator new(v10);
        uint64_t v13 = 0;
        *(void *)(a1 + 72) = v12;
        *(void *)(a1 + 80) = v12;
        *(void *)(a1 + 88) = &v12[144 * v11];
        do
        {
          *(_OWORD *)&v12[v13 * 8] = *(_OWORD *)&v8[v13];
          sub_1CD3B0398((uint64_t)&v12[v13 * 8 + 16], (int *)&v8[v13 + 2]);
          v13 += 18;
        }
        while (&v8[v13] != v9);
        *(void *)(a1 + 80) = &v12[v13 * 8];
      }
      sub_1CD3B0510((void *)(a1 + 96), (uint64_t)(a2 + 12));
      break;
    case 1:
      *(void *)(a1 + 8) = a1 + 24;
      uint64_t v14 = a1 + 8;
      *(void *)(a1 + 16) = 0x100000000;
      if (*((_DWORD *)a2 + 4)) {
        sub_1CD65BE9C(v14, (uint64_t)(a2 + 1));
      }
      break;
    case 0:
      *(void *)(a1 + 8) = a1 + 24;
      uint64_t v5 = a1 + 8;
      *(void *)(a1 + 16) = 0x100000000;
      if (*((_DWORD *)a2 + 4)) {
        sub_1CBB10328(v5, (uint64_t)(a2 + 1));
      }
      break;
  }
  return a1;
}

void *sub_1CD3B0294(void *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  int v4 = a2[1];
  int64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
LABEL_12:
    }
      abort();
    long long v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      unint64_t v7[2] = 0;
      uint64_t v8 = *v3;
      uint64_t v9 = v3[1];
      int64_t v10 = v9 - *v3;
      if (v9 != *v3)
      {
        if (v10 < 0) {
          goto LABEL_12;
        }
        uint64_t v11 = v10 >> 7;
        unint64_t v12 = (char *)operator new(v10);
        uint64_t v13 = 0;
        void *v7 = v12;
        v7[1] = v12;
        unint64_t v7[2] = &v12[128 * v11];
        do
        {
          sub_1CD3B0398((uint64_t)&v12[v13], (int *)(v8 + v13));
          v13 += 128;
        }
        while (v8 + v13 != v9);
        v7[1] = &v12[v13];
      }
      v3 += 3;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t sub_1CD3B0398(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_DWORD *)a1 = *a2;
  switch(v4)
  {
    case 2:
      sub_1CD3B0294(a1 + 8, a2 + 2);
      long long v6 = *((_OWORD *)a2 + 2);
      long long v7 = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = a2[16];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)(a1 + 48) = v7;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 72) = 0;
      uint64_t v8 = *((void *)a2 + 9);
      uint64_t v9 = *((void *)a2 + 10);
      int64_t v10 = v9 - v8;
      if (v9 != v8)
      {
        unint64_t v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
        if (v11 >= 0x1C71C71C71C71C8) {
          abort();
        }
        unint64_t v12 = (char *)operator new(v10);
        uint64_t v13 = 0;
        *(void *)(a1 + 72) = v12;
        *(void *)(a1 + 80) = v12;
        *(void *)(a1 + 88) = &v12[144 * v11];
        do
        {
          *(_OWORD *)&v12[v13] = *(_OWORD *)(v8 + v13);
          sub_1CD3B0398(&v12[v13 + 16], v8 + v13 + 16);
          v13 += 144;
        }
        while (v8 + v13 != v9);
        *(void *)(a1 + 80) = &v12[v13];
      }
      sub_1CD3B0510((void *)(a1 + 96), (uint64_t)(a2 + 24));
      break;
    case 1:
      *(void *)(a1 + 8) = a1 + 24;
      uint64_t v14 = a1 + 8;
      *(void *)(a1 + 16) = 0x100000000;
      if (a2[4]) {
        sub_1CD65BE9C(v14, (uint64_t)(a2 + 2));
      }
      break;
    case 0:
      *(void *)(a1 + 8) = a1 + 24;
      uint64_t v5 = a1 + 8;
      *(void *)(a1 + 16) = 0x100000000;
      if (a2[4]) {
        sub_1CBB10328(v5, (uint64_t)(a2 + 2));
      }
      break;
  }
  return a1;
}

void *sub_1CD3B0510(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x1000000000;
  if (*(_DWORD *)(a2 + 12))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 16;
    }
    *((_DWORD *)a1 + 4) = 0;
    long long v6 = (char *)sub_1CC248524((v5 + 1), 0xCuLL);
    uint64_t v7 = 0;
    uint64_t v8 = &v6[8 * v5];
    *(void *)uint64_t v8 = 2;
    uint64_t v9 = v8 + 8;
    *a1 = v6;
    *((_DWORD *)a1 + 2) = v5;
    uint64_t v10 = *(void *)a2 + 8 * v5 + 8;
    *(void *)((char *)a1 + 12) = *(void *)(a2 + 12);
    do
    {
      unint64_t v11 = *(size_t **)(*(void *)a2 + 8 * v7);
      if (v11) {
        BOOL v12 = v11 + 1 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        *(void *)(*a1 + 8 * v7) = v11;
      }
      else
      {
        size_t v13 = *v11;
        uint64_t v14 = operator new(*v11 + 17, (std::align_val_t)8uLL);
        unint64_t v15 = v14;
        uint64_t v16 = (char *)(v14 + 2);
        if (v13) {
          memcpy(v14 + 2, v11 + 2, v13);
        }
        v16[v13] = 0;
        *unint64_t v15 = v13;
        v15[1] = v11[1];
        *(void *)(*a1 + 8 * v7) = v15;
        *((_DWORD *)v9 + v7) = *(_DWORD *)(v10 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
  }
  return a1;
}

int *sub_1CD3B0630(int *a1, int ***a2)
{
  int v4 = *a1;
  int v5 = *(_DWORD *)a2;
  if (*a1 == *(_DWORD *)a2)
  {
    int v5 = *a1;
    goto LABEL_11;
  }
  if (v4 == 2)
  {
    sub_1CD61201C((uint64_t)(a1 + 24));
    sub_1CD39B200((void **)a1 + 9);
    sub_1CD39B2E4((void ***)a1 + 1);
  }
  else if (v4 == 1)
  {
    sub_1CD480C18((char **)a1 + 1);
  }
  else
  {
    if (v4) {
      goto LABEL_11;
    }
    long long v6 = (int *)*((void *)a1 + 1);
    if (v6 != a1 + 6) {
      free(v6);
    }
  }
  int v5 = *(_DWORD *)a2;
LABEL_11:
  *a1 = v5;
  if (v5)
  {
    if (v5 == 2)
    {
      if (a1 != (int *)a2) {
        sub_1CD3B0728((uint64_t)(a1 + 2), a2[1], a2[2]);
      }
      sub_1CD3AFBA0(a1 + 8, a2 + 4);
    }
    else if (v5 == 1)
    {
      sub_1CD65BE9C((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
    }
  }
  else
  {
    sub_1CBB10328((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
  }
  return a1;
}

void sub_1CD3B0728(uint64_t a1, int **a2, int **a3)
{
  int v4 = a2;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a1) >> 3) >= v6)
  {
    unsigned int v27 = *(void ***)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (v27 - v8) >= v6)
    {
      if (a2 == a3)
      {
        int v37 = *(void ***)a1;
      }
      else
      {
        int v37 = *(void ***)a1;
        do
        {
          if (v4 != (int **)v8) {
            sub_1CD3B0A70(v8, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 7);
          }
          v4 += 3;
          v8 += 3;
          v37 += 3;
        }
        while (v4 != a3);
        unsigned int v27 = *(void ***)(a1 + 8);
      }
      if (v27 != v37)
      {
        uint64_t v38 = v27;
        do
        {
          long long v40 = (void ***)*(v38 - 3);
          v38 -= 3;
          unint64_t v39 = v40;
          if (v40)
          {
            unsigned int v41 = (void ***)*(v27 - 2);
            uint64_t v42 = v39;
            if (v41 != v39)
            {
              do
                unsigned int v41 = sub_1CD39B268(v41 - 16);
              while (v41 != v39);
              uint64_t v42 = *v38;
            }
            *(v27 - 2) = v39;
            operator delete(v42);
          }
          unsigned int v27 = v38;
        }
        while (v38 != v37);
      }
      *(void *)(a1 + 8) = v37;
    }
    else
    {
      BOOL v28 = &a2[v27 - v8];
      if (v27 != v8)
      {
        uint64_t v29 = 8 * (v27 - v8);
        do
        {
          if (v4 != (int **)v8) {
            sub_1CD3B0A70(v8, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 7);
          }
          v4 += 3;
          v8 += 3;
          v29 -= 24;
        }
        while (v29);
        uint64_t v8 = *(void ***)(a1 + 8);
      }
      uint64_t v30 = v8;
      if (v28 != a3)
      {
        uint64_t v30 = v8;
        do
        {
          *uint64_t v30 = 0;
          v30[1] = 0;
          v30[2] = 0;
          uint64_t v31 = *v28;
          BOOL v32 = v28[1];
          int64_t v33 = (char *)v32 - (char *)*v28;
          if (v32 != *v28)
          {
            if (v33 < 0) {
              goto LABEL_61;
            }
            uint64_t v34 = v33 >> 7;
            int v35 = (char *)operator new(v33);
            uint64_t v36 = 0;
            *uint64_t v30 = v35;
            v30[1] = v35;
            v30[2] = &v35[128 * v34];
            do
            {
              sub_1CD3B0398((uint64_t)&v35[v36 * 4], &v31[v36]);
              v36 += 32;
            }
            while (&v31[v36] != v32);
            v30[1] = &v35[v36 * 4];
          }
          v28 += 3;
          v30 += 3;
        }
        while (v28 != a3);
      }
      *(void *)(a1 + 8) = v30;
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = *(void ***)(a1 + 8);
      uint64_t v10 = *(void ***)a1;
      if (v9 != v8)
      {
        unint64_t v11 = *(void ***)(a1 + 8);
        do
        {
          size_t v13 = (void ***)*(v11 - 3);
          v11 -= 3;
          BOOL v12 = v13;
          if (v13)
          {
            uint64_t v14 = (void ***)*(v9 - 2);
            unint64_t v15 = v12;
            if (v14 != v12)
            {
              do
                uint64_t v14 = sub_1CD39B268(v14 - 16);
              while (v14 != v12);
              unint64_t v15 = *v11;
            }
            *(v9 - 2) = v12;
            operator delete(v15);
          }
          uint64_t v9 = v11;
        }
        while (v11 != v8);
        uint64_t v10 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v8;
      operator delete(v10);
      uint64_t v7 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_61;
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v6) {
      uint64_t v17 = v6;
    }
    unint64_t v18 = v16 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v17;
    if (v18 > 0xAAAAAAAAAAAAAAALL) {
LABEL_61:
    }
      abort();
    uint64_t v19 = 3 * v18;
    uint64_t v20 = operator new(24 * v18);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v20;
    *(void *)(a1 + 16) = &v20[v19];
    while (v4 != a3)
    {
      *uint64_t v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      uint64_t v21 = *v4;
      uint64_t v22 = v4[1];
      int64_t v23 = (char *)v22 - (char *)*v4;
      if (v22 != *v4)
      {
        if (v23 < 0) {
          goto LABEL_61;
        }
        uint64_t v24 = v23 >> 7;
        uint64_t v25 = (char *)operator new(v23);
        uint64_t v26 = 0;
        *uint64_t v20 = v25;
        v20[1] = v25;
        v20[2] = &v25[128 * v24];
        do
        {
          sub_1CD3B0398((uint64_t)&v25[v26 * 4], &v21[v26]);
          v26 += 32;
        }
        while (&v21[v26] != v22);
        v20[1] = &v25[v26 * 4];
      }
      v4 += 3;
      v20 += 3;
    }
    *(void *)(a1 + 8) = v20;
  }
}

void ***sub_1CD3B0A70(void **a1, int *a2, int *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = (char *)*a1;
  if (a4 <= ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 7)
  {
    uint64_t result = (void ***)a1[1];
    unint64_t v14 = ((char *)result - v8) >> 7;
    if (v14 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v19 = v8;
      }
      else
      {
        uint64_t v19 = v8;
        do
        {
          sub_1CD3B0630(v8, v6);
          v6 += 32;
          v8 += 128;
          v19 += 128;
        }
        while (v6 != a3);
        uint64_t result = (void ***)a1[1];
      }
      while (result != (void ***)v19)
        uint64_t result = sub_1CD39B268(result - 16);
      a1[1] = v19;
    }
    else
    {
      unint64_t v15 = &a2[32 * v14];
      if (result != (void ***)v8)
      {
        unint64_t v16 = v14 << 7;
        do
        {
          uint64_t result = (void ***)sub_1CD3B0630(v8, v6);
          v6 += 32;
          v8 += 128;
          v16 -= 128;
        }
        while (v16);
        uint64_t v8 = (char *)a1[1];
      }
      uint64_t v17 = v8;
      if (v15 != a3)
      {
        uint64_t v17 = v8;
        uint64_t result = (void ***)v8;
        do
        {
          uint64_t v18 = sub_1CD3B0398((uint64_t)result, v15);
          v15 += 32;
          uint64_t result = (void ***)(v18 + 128);
          v17 += 128;
        }
        while (v15 != a3);
      }
      a1[1] = v17;
    }
  }
  else
  {
    sub_1CD3B0C10(a1);
    if (a4 >> 57) {
      goto LABEL_30;
    }
    uint64_t v9 = (unsigned char *)a1[2] - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 6;
    if (v9 >> 6 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFF80 ? 0x1FFFFFFFFFFFFFFLL : v10;
    if (v11 >> 57) {
LABEL_30:
    }
      abort();
    uint64_t result = (void ***)operator new(v11 << 7);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    while (v6 != a3)
    {
      uint64_t v13 = sub_1CD3B0398((uint64_t)result, v6);
      v6 += 32;
      uint64_t result = (void ***)(v13 + 128);
    }
    a1[1] = result;
  }
  return result;
}

void sub_1CD3B0C10(void **a1)
{
  uint64_t v1 = (void ***)*a1;
  if (*a1)
  {
    uint64_t v3 = (void ***)a1[1];
    int v4 = v1;
    if (v3 != v1)
    {
      do
        uint64_t v3 = sub_1CD39B268(v3 - 16);
      while (v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double sub_1CD3B0C70(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  switch(a2)
  {
    case 2:
      double result = 0.0;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(void *)(a1 + 120) = 0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(unsigned char *)(a1 + 49) = 1;
      *(void *)(a1 + 52) = 0;
      *(void *)(a1 + 60) = 0;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 100) = 0u;
      *(_DWORD *)(a1 + 116) = 16;
      break;
    case 1:
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      uint64_t v2 = a1 + 24;
      goto LABEL_8;
    case 0:
      *(void *)(a1 + 24) = 0;
      uint64_t v2 = a1 + 24;
LABEL_8:
      *(void *)(v2 - 16) = v2;
      *(void *)&double result = 0x100000000;
      *(void *)(v2 - 8) = 0x100000000;
      break;
  }
  return result;
}

uint64_t sub_1CD3B0CF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  long long __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 208))(v2, &__p) & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    if (v11 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v11 >= 0) {
      uint64_t v6 = HIBYTE(v11) & 0x7F;
    }
    else {
      uint64_t v6 = v10;
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 488))(v4, p_p, v6);
    if (*(unsigned char *)a1[1])
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 488))(v7, &unk_1CFB33C00, 1);
    }
    uint64_t v3 = 0;
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  return v3;
}

uint64_t sub_1CD3B0E94(llvm::MCAsmParser *a1, uint64_t a2, _DWORD *a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x100000000;
  uint64_t v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1);
  if ((v6 & 1) == 0)
  {
    sub_1CD3B104C(a1, a2, (uint64_t)&v11, 9);
    if (v12)
    {
      uint64_t v7 = (unsigned __int8 **)v11;
      uint64_t v8 = 8 * v12;
      do
      {
        uint64_t v9 = *v7++;
        sub_1CD3B1144((uint64_t)a1, v9, a2);
        v8 -= 8;
      }
      while (v8);
    }
    if (a3) {
      *a3 = v12;
    }
  }
  if (v11 != v13) {
    free(v11);
  }
  return v6;
}

uint64_t sub_1CD3B0FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  uint64_t v7 = sub_1CD3AF930(v6 - 96, a2, a3, 0, a4);
  v7[3] = a4;
  uint64_t result = sub_1CD3B104C((llvm::MCAsmParser *)a1, a4, (uint64_t)(v7 + 6), 9);
  unsigned int v9 = v7[8];
  int v10 = v9 * v7[3];
  v7[1] = v10;
  unint64_t v7[2] = v9;
  unsigned int v11 = *v7 + v10;
  if (!*(unsigned char *)(v6 - 80)) {
    *(_DWORD *)(v6 - 68) = v11;
  }
  if (*(_DWORD *)(v6 - 64) > v11) {
    unsigned int v11 = *(_DWORD *)(v6 - 64);
  }
  *(_DWORD *)(v6 - 64) = v11;
  return result;
}

uint64_t sub_1CD3B104C(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, int a4)
{
  for (unint64_t i = *(uint64_t (**)(void))(*(void *)a1 + 40); ; unint64_t i = *(uint64_t (**)(void))(*(void *)a1 + 40))
  {
    uint64_t result = i();
    if (**(_DWORD **)(result + 8) == a4) {
      break;
    }
    if (a4 == 42)
    {
      uint64_t result = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
      if (**(_DWORD **)(result + 8) == 44) {
        break;
      }
    }
    sub_1CD3B132C(a1, a2, a3, 0);
    uint64_t result = llvm::MCAsmParser::parseOptionalToken(a1, 25);
    if (!result) {
      break;
    }
    llvm::MCAsmParser::parseOptionalToken(a1, 9);
  }
  return result;
}

uint64_t sub_1CD3B1144(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = *a2;
  if (v5 == 2)
  {
    unsigned int v9 = (unsigned char *)*((void *)a2 + 2);
    if ((*v9 & 4) != 0)
    {
      uint64_t v10 = *((void *)v9 - 1);
      if (*(void *)v10 == 1 && *(unsigned char *)(v10 + 16) == 63) {
        goto LABEL_7;
      }
    }
LABEL_11:
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, void))(*(void *)v11 + 512))(v11, a2, a3, *((void *)a2 + 1));
    return 0;
  }
  if (v5 != 1) {
    goto LABEL_11;
  }
  int64_t v6 = *((void *)a2 + 2);
  if ((8 * a3) > 0x3F
    || 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3) >= v6
    || (uint64_t v7 = -1 << (8 * a3 - 1), v7 <= v6) && v6 <= ~v7)
  {
LABEL_7:
    uint64_t v8 = *(void (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 520);
    v8();
    return 0;
  }
  uint64_t v13 = *((void *)a2 + 1);
  unint64_t v14 = "out of range literal value";
  __int16 v15 = 259;
  return llvm::MCAsmParser::Error(a1, v13, (uint64_t)&v14, 0, 0);
}

uint64_t sub_1CD3B132C(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v53[1] = *MEMORY[0x1E4F143B8];
  if (a2 == 1
    && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) == 3)
  {
    long long __p = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    char v8 = (*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(void *)a1 + 208))(a1, &__p);
    if ((v8 & 1) == 0)
    {
      char v9 = HIBYTE(v49);
      unint64_t v10 = v48;
      if (v49 >= 0) {
        p_p = (unsigned __int8 *)&__p;
      }
      else {
        p_p = (unsigned __int8 *)__p;
      }
      unint64_t v12 = HIBYTE(v49) & 0x7F;
      if (v49 >= 0) {
        unint64_t v13 = HIBYTE(v49) & 0x7F;
      }
      else {
        unint64_t v13 = v48;
      }
      if (v13)
      {
        do
        {
          uint64_t v14 = *p_p;
          uint64_t v15 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
          uint64_t v16 = v15;
          *(void *)(v15 + 272) += 24;
          uint64_t v17 = *(void *)(v15 + 192);
          if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 24 > *(void *)(v15 + 200) - v17)
          {
            unsigned int v20 = *(_DWORD *)(v15 + 216) >> 7;
            if (v20 >= 0x1E) {
              LOBYTE(v20) = 30;
            }
            uint64_t v43 = 4096 << v20;
            unint64_t v18 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
            unint64_t v21 = *(unsigned int *)(v16 + 216);
            if (v21 >= *(unsigned int *)(v16 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v16 + 208) + 8 * v21) = v18;
            ++*(_DWORD *)(v16 + 216);
            *(void *)(v16 + 200) = v18 + v43;
          }
          else
          {
            unint64_t v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v16 + 192) = v18 + 24;
          *(unsigned char *)unint64_t v18 = 1;
          *(_DWORD *)(v18 + 1) = *(unsigned __int8 *)(v18 + 4) << 24;
          *(void *)(v18 + 8) = 0;
          *(void *)(v18 + 16) = v14;
          unint64_t v19 = *(unsigned int *)(a3 + 8);
          if (v19 >= *(unsigned int *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v19) = v18;
          ++*(_DWORD *)(a3 + 8);
          ++p_p;
          --v13;
        }
        while (v13);
        char v9 = HIBYTE(v49);
        unint64_t v10 = v48;
        unint64_t v12 = HIBYTE(v49) & 0x7F;
      }
      if (v9 >= 0) {
        unint64_t v26 = v12;
      }
      else {
        unint64_t v26 = v10;
      }
      unint64_t v27 = a4 - v26;
      if (a4 > v26)
      {
        do
        {
          uint64_t v28 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
          uint64_t v29 = v28;
          *(void *)(v28 + 272) += 24;
          uint64_t v30 = *(void *)(v28 + 192);
          if (((v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v30 + 24 > *(void *)(v28 + 200) - v30)
          {
            unsigned int v33 = *(_DWORD *)(v28 + 216) >> 7;
            if (v33 >= 0x1E) {
              LOBYTE(v33) = 30;
            }
            uint64_t v34 = 4096 << v33;
            unint64_t v31 = (unint64_t)operator new(4096 << v33, (std::align_val_t)8uLL);
            unint64_t v35 = *(unsigned int *)(v29 + 216);
            if (v35 >= *(unsigned int *)(v29 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v29 + 208) + 8 * v35) = v31;
            ++*(_DWORD *)(v29 + 216);
            *(void *)(v29 + 200) = v31 + v34;
          }
          else
          {
            unint64_t v31 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v29 + 192) = v31 + 24;
          *(unsigned char *)unint64_t v31 = 1;
          *(_DWORD *)(v31 + 1) = *(unsigned __int8 *)(v31 + 4) << 24;
          *(void *)(v31 + 8) = 0;
          *(void *)(v31 + 16) = 32;
          unint64_t v32 = *(unsigned int *)(a3 + 8);
          if (v32 >= *(unsigned int *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v32) = v31;
          ++*(_DWORD *)(a3 + 8);
          --v27;
        }
        while (v27);
      }
    }
    if (SHIBYTE(v49) < 0)
    {
      operator delete(__p);
      if (v8) {
        return 1;
      }
    }
    else if (v8)
    {
      return 1;
    }
    return 0;
  }
  uint64_t v46 = 0;
  long long __p = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, void **))(*(void *)a1 + 232))(a1, &v46, &__p)) {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) != 2
    || (uint64_t v22 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8),
        uint64_t v24 = *(void **)(v22 + 8),
        unint64_t v23 = *(void *)(v22 + 16),
        long long __p = v24,
        unint64_t v48 = v23,
        v23 != 3)
    || llvm::StringRef::compare_insensitive((unsigned __int8 **)&__p, "dup", 3uLL))
  {
    unsigned int v25 = *(_DWORD *)(a3 + 8);
    if (v25 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a3 + 8 * v25) = v46;
    ++*(_DWORD *)(a3 + 8);
    return 0;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
  if (*(unsigned char *)v46 != 1)
  {
    uint64_t v38 = *(void *)(v46 + 8);
    unint64_t v39 = "cannot repeat value a non-constant number of times";
    goto LABEL_52;
  }
  uint64_t v37 = *(void *)(v46 + 16);
  if ((v37 & 0x8000000000000000) == 0)
  {
    __src = v53;
    uint64_t v52 = 0x100000000;
    uint64_t v44 = "parentheses required for 'dup' contents";
    __int16 v45 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v44)
      || (sub_1CD3B104C(a1, a2, &__src, 9),
          long long __p = "expected ')'",
          __int16 v50 = 259,
          llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&__p)))
    {
      char v40 = 0;
    }
    else if (v37)
    {
      unsigned int v41 = *(_DWORD *)(a3 + 8);
      do
      {
        int v42 = v52;
        if (v52 + (unint64_t)v41 > *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v52)
        {
          memcpy((void *)(*(void *)a3 + 8 * v41), __src, 8 * v52);
          unsigned int v41 = *(_DWORD *)(a3 + 8);
        }
        v41 += v42;
        *(_DWORD *)(a3 + 8) = v41;
        char v40 = 1;
        --v37;
      }
      while (v37);
    }
    else
    {
      char v40 = 1;
    }
    if (__src != v53) {
      free(__src);
    }
    return (v40 & 1) == 0;
  }
  uint64_t v38 = *(void *)(v46 + 8);
  unint64_t v39 = "cannot repeat value a negative number of times";
LABEL_52:
  long long __p = v39;
  __int16 v50 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v38, (uint64_t)&__p, 0, 0);
}

uint64_t sub_1CD3B199C(llvm::MCAsmParser *a1, uint64_t a2, _DWORD *a3)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1)) {
    return 1;
  }
  unint64_t v13 = (char *)v15;
  uint64_t v14 = 0x100000000;
  uint64_t v6 = sub_1CD3B1C34(a1, a2, (uint64_t)&v13, 9);
  if ((v6 & 1) == 0)
  {
    if (v14)
    {
      uint64_t v7 = v13;
      uint64_t v8 = 16 * v14;
      do
      {
        uint64_t v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
        unsigned int v12 = *((_DWORD *)v7 + 2);
        if (v12 > 0x40) {
          operator new[]();
        }
        uint64_t v11 = *(void *)v7;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 528))(v9, &v11);
        if (v12 >= 0x41 && v11) {
          MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
        }
        v7 += 16;
        v8 -= 16;
      }
      while (v8);
    }
    if (a3) {
      *a3 = v14;
    }
  }
  sub_1CD480C18(&v13);
  return v6;
}

uint64_t sub_1CD3B1B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7 = *(void *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  uint64_t v8 = sub_1CD3AF930(v7 - 96, a2, a3, 1, a5);
  v8[1] = 0;
  uint64_t result = sub_1CD3B1C34((llvm::MCAsmParser *)a1, a4, (uint64_t)(v8 + 6), 9);
  if ((result & 1) == 0)
  {
    uint64_t v10 = v8[8];
    unsigned int v11 = *(_DWORD *)(*((void *)v8 + 3) + 16 * v10 - 8) >> 3;
    v8[2] = v10;
    v8[3] = v11;
    unsigned int v12 = v11 * v10;
    v8[1] = v12;
    unsigned int v13 = *v8 + v12;
    if (!*(unsigned char *)(v7 - 80)) {
      *(_DWORD *)(v7 - 68) = v13;
    }
    if (*(_DWORD *)(v7 - 64) > v13) {
      unsigned int v13 = *(_DWORD *)(v7 - 64);
    }
    *(_DWORD *)(v7 - 64) = v13;
  }
  return result;
}

uint64_t sub_1CD3B1C34(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, int a4)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) != a4
       || a4 == 42
       && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) != 44)
  {
    sub_1CD3ABC8C((uint64_t)&v37, (uint64_t)a1, 1);
    if (v37 != 2
      || (int v42 = (const char *)v38, v43 = v39, v39 != 3)
      || llvm::StringRef::compare_insensitive((unsigned __int8 **)&v42, "dup", 3uLL))
    {
      uint64_t v9 = 1;
      LODWORD(v43) = 1;
      int v42 = 0;
      char v10 = sub_1CD3B2170((_DWORD **)a1, a2, (uint64_t)&v42);
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = *(unsigned int *)(a3 + 8);
        unint64_t v12 = *(void *)a3;
        if (v11 < *(_DWORD *)(a3 + 12)) {
          goto LABEL_9;
        }
        unint64_t v17 = v11 + 1;
        BOOL v18 = v12 + 16 * v11 > (unint64_t)&v42;
        if (v12 <= (unint64_t)&v42 && v18)
        {
          uint64_t v29 = (char *)&v42 - v12;
          sub_1CBFC6948(a3, v17);
          unint64_t v12 = *(void *)a3;
          unsigned int v13 = (const char **)&v29[*(void *)a3];
        }
        else
        {
          sub_1CBFC6948(a3, v17);
          unint64_t v12 = *(void *)a3;
LABEL_9:
          unsigned int v13 = &v42;
        }
        uint64_t v14 = v12 + 16 * *(unsigned int *)(a3 + 8);
        unsigned int v15 = *((_DWORD *)v13 + 2);
        *(_DWORD *)(v14 + 8) = v15;
        if (v15 > 0x40) {
          operator new[]();
        }
        *(void *)uint64_t v14 = *v13;
        ++*(_DWORD *)(a3 + 8);
        uint64_t v9 = v4;
      }
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v4 = v9;
LABEL_23:
        if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
        {
          llvm::MCAsmParser::parseOptionalToken(a1, 9);
          int v16 = 0;
        }
        else
        {
          int v16 = 3;
        }
        goto LABEL_17;
      }
      int v16 = 1;
      uint64_t v4 = v9;
      goto LABEL_17;
    }
    uint64_t v36 = 0;
    int v42 = 0;
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(void *)a1 + 232))(a1, &v36, &v42) & 1) != 0|| (int v42 = "unexpected token", v44 = 259, llvm::MCAsmParser::parseToken(a1, 2, (llvm::Twine *)&v42)))
    {
      uint64_t v4 = 1;
LABEL_28:
      int v16 = 1;
      goto LABEL_17;
    }
    if (*(unsigned char *)v36 != 1)
    {
      uint64_t v20 = *(void *)(v36 + 8);
      unint64_t v21 = "cannot repeat value a non-constant number of times";
      goto LABEL_38;
    }
    uint64_t v19 = *(void *)(v36 + 16);
    if (v19 < 0)
    {
      uint64_t v20 = *(void *)(v36 + 8);
      unint64_t v21 = "cannot repeat value a negative number of times";
LABEL_38:
      int v42 = v21;
      __int16 v44 = 259;
      uint64_t v4 = llvm::MCAsmParser::Error((uint64_t)a1, v20, (uint64_t)&v42, 0, 0);
      goto LABEL_28;
    }
    __int16 v45 = (char *)v47;
    uint64_t v46 = 0x100000000;
    uint64_t v34 = "parentheses required for 'dup' contents";
    __int16 v35 = 259;
    if (!llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v34) && (sub_1CD3B1C34(a1, a2, &v45, 9) & 1) == 0)
    {
      int v42 = "expected ')'";
      __int16 v44 = 259;
      if (!llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v42))
      {
        if (v19)
        {
          uint64_t v32 = 0;
          unsigned int v22 = *(_DWORD *)(a3 + 8);
          do
          {
            unint64_t v31 = v45;
            uint64_t v33 = v46;
            unint64_t v23 = v46 + (unint64_t)v22;
            if (v23 <= *(unsigned int *)(a3 + 12))
            {
              uint64_t v24 = v22;
            }
            else
            {
              sub_1CBFC6948(a3, v23);
              uint64_t v24 = *(unsigned int *)(a3 + 8);
              unsigned int v22 = *(_DWORD *)(a3 + 8);
            }
            if (v33)
            {
              unsigned int v25 = (unsigned int *)(*(void *)a3 + 16 * v24 + 8);
              uint64_t v26 = 16 * v33;
              unint64_t v27 = v31;
              do
              {
                unsigned int v28 = *((_DWORD *)v27 + 2);
                *unsigned int v25 = v28;
                if (v28 > 0x40) {
                  operator new[]();
                }
                *((void *)v25 - 1) = *(void *)v27;
                v27 += 16;
                v25 += 4;
                v26 -= 16;
              }
              while (v26);
              unsigned int v22 = *(_DWORD *)(a3 + 8);
            }
            v22 += v33;
            *(_DWORD *)(a3 + 8) = v22;
            ++v32;
          }
          while (v32 != v19);
        }
        sub_1CD480C18(&v45);
        goto LABEL_23;
      }
    }
    sub_1CD480C18(&v45);
    int v16 = 1;
    uint64_t v4 = 1;
LABEL_17:
    if (v41 >= 0x41 && v40) {
      MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    }
    if (v16)
    {
      if (v16 != 3) {
        return v4 & 1;
      }
      break;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t sub_1CD3B2170(_DWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v6 = **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
  if (v6 == 13) {
    goto LABEL_43;
  }
  if (**(_DWORD **)(v7 + 8) == 12)
  {
    uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
LABEL_43:
    uint64_t v8 = *(void *)(v7 + 96);
    uint64_t v7 = sub_1CD8F38F8((uint64_t)(a1 + 5));
    goto LABEL_4;
  }
  uint64_t v8 = 0;
LABEL_4:
  switch(*a1[6])
  {
    case 1:
      __int16 v34 = 260;
      uint64_t v29 = (const char *)(a1 + 14);
      return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v29, 0, 0);
    case 2:
    case 4:
    case 6:
      if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v25, (uint64_t)&unk_1CFB2E344);
      }
      uint64_t v25 = a2;
      int v9 = *(_DWORD *)(a2 + 8);
      if ((v9 + 64) >= 0x80) {
        operator new[]();
      }
      char v28 = 3;
      int v27 = *(_DWORD *)(a2 + 4) - 1;
      if ((v9 - 64) < 0xFFFFFF80)
      {
        *(void *)uint64_t v7 = 0;
        bzero((void *)(v7 + 8), 8 * (((v9 + 64) >> 6) - 2) + 8);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v10 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      uint64_t v11 = *(unsigned __int8 **)(v10 + 8);
      unint64_t v12 = *(unsigned __int8 **)(v10 + 16);
      v22[0] = v11;
      v22[1] = v12;
      if (**(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 2)
      {
        if (v12 == (unsigned __int8 *)1)
        {
          if (!llvm::StringRef::compare_insensitive(v22, "?", 1uLL))
          {
            if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v30, (uint64_t)&unk_1CFB2E344);
            }
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v30, a2);
            if (v30 == (_DWORD *)&unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v30, 0);
            }
            else
            {
              char v33 = v33 & 0xF0 | 3;
              int v32 = v30[1] - 1;
              int v20 = v30[2];
              if ((v20 - 64) < 0xFFFFFF80)
              {
                unint64_t v21 = v31;
                *unint64_t v31 = 0;
                bzero(v21 + 1, 8 * (((v20 + 64) >> 6) - 2) + 8);
              }
              else
              {
                unint64_t v31 = 0;
              }
            }
            sub_1CB9190C0(&v25, (void **)&v30);
            uint64_t v19 = v30;
            if (v30 == (_DWORD *)&unk_1CFB2E344) {
              goto LABEL_78;
            }
            goto LABEL_60;
          }
        }
        else
        {
          if (v12 != (unsigned __int8 *)3)
          {
            if (v12 != (unsigned __int8 *)8
              || llvm::StringRef::compare_insensitive(v22, "infinity", 8uLL))
            {
              goto LABEL_49;
            }
LABEL_51:
            if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v30, (uint64_t)&unk_1CFB2E344);
            }
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v30, a2);
            sub_1CB87E790((uint64_t)&v29, 0);
            sub_1CB9190C0(&v25, (void **)&v30);
            uint64_t v19 = v30;
            if (v30 == (_DWORD *)&unk_1CFB2E344) {
              goto LABEL_78;
            }
            goto LABEL_60;
          }
          if (!llvm::StringRef::compare_insensitive(v22, "inf", 3uLL)) {
            goto LABEL_51;
          }
          if (!llvm::StringRef::compare_insensitive(v22, "nan", 3uLL))
          {
            sub_1CC56781C(a2, 0, (unsigned char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v29);
            sub_1CB9190C0(&v25, (void **)&v30);
            uint64_t v19 = v30;
            if (v30 == (_DWORD *)&unk_1CFB2E344)
            {
LABEL_78:
              sub_1CB845718((uint64_t *)&v31);
              goto LABEL_24;
            }
LABEL_60:
            if ((v19[2] - 64) <= 0xFFFFFF7F && v31) {
              MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
            }
            goto LABEL_24;
          }
        }
LABEL_49:
        uint64_t v29 = "invalid floating point literal";
        __int16 v34 = 259;
        uint64_t v16 = llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v29, 0, 0);
        goto LABEL_21;
      }
      if (!v12 || (v12[(void)v11 - 1] | 0x20) != 0x72)
      {
        llvm::APFloat::convertFromString((uint64_t)v24, v11, (unint64_t)v12, 1, (llvm *)&v29);
        if ((v30 & 1) != 0 && v29)
        {
          unint64_t v23 = (char *)v29;
          sub_1CD4515D0((void **)&v23);
          if (v23) {
            (*(void (**)(char *))(*(void *)v23 + 8))(v23);
          }
          goto LABEL_49;
        }
LABEL_24:
        if (v6 == 13)
        {
          if ((_UNKNOWN *)v25 == &unk_1CFB2E344)
          {
            sub_1CBFC6FB8(v26);
            sub_1CBFC6FB8(v26 + 32);
          }
          else
          {
            v28 ^= 8u;
          }
        }
        (*((void (**)(_DWORD **))*a1 + 23))(a1);
        if ((_UNKNOWN *)v25 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v25, (llvm::APInt *)&v29);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v25, (uint64_t)&v29);
        }
        if (*(_DWORD *)(a3 + 8) >= 0x41u && *(void *)a3) {
          MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
        }
        uint64_t v17 = 0;
        *(void *)a3 = v29;
        *(_DWORD *)(a3 + 8) = v30;
        goto LABEL_33;
      }
      if (v12 >= v12 - 1) {
        uint64_t v13 = (uint64_t)(v12 - 1);
      }
      else {
        uint64_t v13 = (uint64_t)v12;
      }
      uint64_t v14 = *(unsigned int *)(a2 + 12);
      if (v14 != 4 * v13) {
        goto LABEL_49;
      }
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
      LODWORD(v30) = v14;
      llvm::APInt::fromString((uint64_t)&v29, v15, (char *)v11, v13, 0x10u);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(void *)a3) {
        MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
      }
      *(void *)a3 = v29;
      *(_DWORD *)(a3 + 8) = v30;
      if (v8)
      {
        uint64_t v29 = "MASM-style hex floats ignore explicit sign";
        __int16 v34 = 259;
        uint64_t v16 = (*((uint64_t (**)(_DWORD **, uint64_t, const char **, void, void))*a1 + 21))(a1, v8, &v29, 0, 0);
LABEL_21:
        uint64_t v17 = v16;
        goto LABEL_33;
      }
      uint64_t v17 = 0;
LABEL_33:
      if ((_UNKNOWN *)v25 == &unk_1CFB2E344)
      {
        sub_1CB845718(&v26);
      }
      else if ((*(_DWORD *)(v25 + 8) - 64) <= 0xFFFFFF7F && v26)
      {
        MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      }
      return v17;
    default:
      uint64_t v29 = "unexpected token in directive";
      __int16 v34 = 259;
      return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v29, 0, 0);
  }
}

void **sub_1CD3B2908(void **result, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    uint64_t v3 = *result;
    uint64_t v4 = (uint64_t)*result + 96 * v2;
    do
    {
      long long v5 = *v3;
      long long v6 = v3[1];
      *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
      *(_OWORD *)a2 = v5;
      *(_OWORD *)(a2 + 16) = v6;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 40) = 0;
      *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v3 + 40);
      *(void *)(a2 + 56) = *((void *)v3 + 7);
      *((void *)v3 + 6) = 0;
      *((void *)v3 + 7) = 0;
      *((void *)v3 + 5) = 0;
      *(void *)(a2 + 64) = *((void *)v3 + 8);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)v3 + 72);
      *((void *)v3 + 8) = 0;
      *((void *)v3 + 9) = 0;
      *((_DWORD *)v3 + 20) = 0;
      v3 += 6;
      a2 += 96;
    }
    while (v3 != (_OWORD *)v4);
    uint64_t v7 = *((unsigned int *)result + 2);
    if (v7)
    {
      uint64_t v8 = (char *)*result;
      uint64_t v9 = 96 * v7;
      do
      {
        sub_1CD61201C((uint64_t)&v8[v9 - 32]);
        uint64_t result = sub_1CD39B200((void **)&v8[v9 - 56]);
        v9 -= 96;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CD3B29C8(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 512);
  if (v4)
  {
    uint64_t result = 0;
    uint64_t v6 = *(void *)(a1 + 504) + 96 * v4;
    *(_DWORD *)(v6 - 68) = (a2 + *(unsigned int *)(v6 - 68) - 1) / a2 * a2;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1))
  {
    return 1;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v8 = *(void *)(*(void *)(v7 + 112) + 32 * *(unsigned int *)(v7 + 120) - 32);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v9) {
      (*(void (**)(uint64_t, unint64_t, void, void))(*(void *)v10 + 648))(v10, a2, *(void *)(*(void *)(a1 + 8) + 240), 0);
    }
    else {
      (*(void (**)(uint64_t, unint64_t, void, uint64_t, void))(*(void *)v10 + 640))(v10, a2, 0, 1, 0);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CD3B2B70(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, unsigned __int8 ***))(*(void *)v2 + 192))(v2, &v12))
  {
    int v9 = "expected identifier";
LABEL_9:
    v10[0] = (unsigned __int8 **)v9;
    __int16 v11 = 259;
    return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v10, 0, 0);
  }
  unsigned int v4 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  __int16 v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v4, v10);
  if (*(unsigned char *)(Symbol + 8))
  {
    int v9 = "non-local symbol required";
    goto LABEL_9;
  }
  uint64_t v6 = Symbol;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v7 + 304))(v7, v6, **(unsigned int **)(a1 + 8)) & 1) == 0)
  {
    int v9 = "unable to emit symbol attribute";
    goto LABEL_9;
  }
  return 0;
}

unint64_t sub_1CD3B2D04(uint64_t a1, uint64_t a2)
{
  *((void *)&v25 + 1) = 0;
  uint64_t v26 = 0;
  unsigned int v28 = 1;
  std::string __dst = 0;
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  if (*(_DWORD *)(v4 + 32) > 0x40u) {
    operator new[]();
  }
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8))
  {
    int v6 = 0;
    do
    {
      v6 += sub_1CD3B3198(a1);
      if (**(_DWORD **)(a1 + 48) == 2)
      {
        uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
        if (*(_DWORD *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v7 + 16);
        }
        else
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v10 = *(void *)(v7 + 16);
          unint64_t v11 = v10 - 1;
          unint64_t v12 = v10 != 0;
          if (v10) {
            ++v8;
          }
          if (v12 > v11) {
            unint64_t v11 = v10 != 0;
          }
          if (v10 < v11) {
            unint64_t v11 = v10;
          }
          unint64_t v9 = v11 - v12;
        }
        *(void *)&long long v22 = v8;
        *((void *)&v22 + 1) = v9;
        if (v9 == 4 && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v22, "endm", 4uLL))
        {
          if (!v6)
          {
            uint64_t v17 = *(long long **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
            long long v25 = *v17;
            uint64_t v26 = *((void *)v17 + 2);
            unsigned int v15 = *((_DWORD *)v17 + 8);
            if (v15 > 0x40)
            {
              llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)v17 + 8));
              unsigned int v15 = v28;
              if (v28 <= 0x40)
              {
                uint64_t v13 = (void *)*((void *)v17 + 3);
                std::string __dst = v13;
              }
              else
              {
                uint64_t v13 = __dst;
                memcpy(__dst, *((const void **)v17 + 3), (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              uint64_t v13 = (void *)*((void *)v17 + 3);
              std::string __dst = v13;
              unsigned int v28 = v15;
            }
            (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
            if (**(_DWORD **)(a1 + 48) == 9)
            {
              *(void *)&long long v21 = v5;
              *((void *)&v21 + 1) = *((void *)&v25 + 1) - v5;
              long long v20 = 0uLL;
              long long v22 = 0uLL;
              uint64_t v23 = 0;
              sub_1CD8F3FF0((void *)(a1 + 704), &v20, &v21, &v22);
              uint64_t v29 = (void **)&v22;
              sub_1CCBB91F0(&v29);
              unint64_t v19 = *(void *)(a1 + 744) + *(void *)(a1 + 736) - 1;
              unint64_t v14 = *(void *)(*(void *)(a1 + 712) + 8 * (v19 / 0x2E)) + 88 * (v19 % 0x2E);
            }
            else
            {
              uint64_t v18 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
              *(void *)&long long v22 = "unexpected token in 'endm' directive";
              __int16 v24 = 259;
              (*(void (**)(uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 176))(a1, v18, &v22, 0, 0);
              unint64_t v14 = 0;
            }
            goto LABEL_22;
          }
          --v6;
        }
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    }
    while (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8));
  }
  *(void *)&long long v22 = "no matching 'endm' in definition";
  __int16 v24 = 259;
  (*(void (**)(uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 176))(a1, a2, &v22, 0, 0);
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unsigned int v15 = 1;
LABEL_22:
  if (v15 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t sub_1CD3B3198(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) != 2) {
    goto LABEL_2;
  }
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  if (*(_DWORD *)v9 == 2)
  {
    unint64_t v10 = *(unsigned __int8 **)(v9 + 8);
    unint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unint64_t v10 = *(unsigned __int8 **)(v9 + 8);
    unint64_t v12 = *(void *)(v9 + 16);
    unint64_t v13 = v12 - 1;
    unint64_t v14 = v12 != 0;
    if (v12) {
      ++v10;
    }
    if (v14 > v13) {
      unint64_t v13 = v12 != 0;
    }
    if (v12 < v13) {
      unint64_t v13 = v12;
    }
    unint64_t v11 = v13 - v14;
  }
  long long v21 = v10;
  unint64_t v22 = v11;
  __int16 v23 = 0;
  sub_1CD8F6B14((uint64_t)&v21, "repeat", 6uLL, "rept", 4uLL);
  if (!HIBYTE(v23) && v22 == 5 && !llvm::StringRef::compare_insensitive(&v21, "while", 5uLL)) {
    __int16 v23 = 257;
  }
  sub_1CD8F6B14((uint64_t)&v21, "for", 3uLL, "irp", 3uLL);
  sub_1CD8F6B14((uint64_t)&v21, "forc", 4uLL, "irpc", 4uLL);
  if (HIBYTE(v23))
  {
    if ((_BYTE)v23) {
      return 1;
    }
  }
LABEL_2:
  sub_1CD3ABC8C((uint64_t)&v21, a1, 1);
  if (v21 == 2)
  {
    sub_1CD3ABC8C((uint64_t)&v15, a1, 1);
    if (v15 == 2)
    {
      uint64_t v2 = v16;
      uint64_t v3 = v17;
    }
    else
    {
      uint64_t v2 = v16;
      uint64_t v5 = v17;
      int v6 = v17 - 1;
      unint64_t v7 = v17 != 0;
      if (v17) {
        uint64_t v2 = v16 + 1;
      }
      if (v7 > (unint64_t)v6) {
        int v6 = (unsigned __int8 *)(v17 != 0);
      }
      if (v17 >= v6) {
        uint64_t v5 = v6;
      }
      uint64_t v3 = &v5[-v7];
    }
    v20[0] = v2;
    v20[1] = v3;
    BOOL v4 = v3 == (unsigned __int8 *)5 && llvm::StringRef::compare_insensitive(v20, "macro", 5uLL) == 0;
    if (v19 >= 0x41 && v18) {
      MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  return v4;
}

void sub_1CD3B33FC(int a1, int a2, int a3, llvm::raw_ostream *this)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 10;
    *(_DWORD *)uint64_t v5 = 1835298405;
    *((void *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "endm\n", 5uLL);
  }
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(const void **)v6;
  uint64_t v8 = *(llvm::WritableMemoryBuffer **)(v6 + 8);
  uint64_t v9 = (const void **)"<instantiation>";
  __int16 v10 = 259;
  sub_1CD0963EC(v8, v7, &v9, (uint64_t)v11);
  operator new();
}

uint64_t sub_1CD3B36A4(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 192))(v2, &v19))
  {
    v17[0] = "unexpected token in '.loc' directive";
    __int16 v18 = 259;
    return llvm::MCAsmParser::TokError(v2, (uint64_t)v17, 0, 0);
  }
  switch(v20)
  {
    case 3:
      if (*(_WORD *)v19 != 29545 || *(unsigned char *)(v19 + 2) != 97) {
        goto LABEL_50;
      }
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
      uint64_t v16 = 0;
      v17[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v16, v17)) {
        return 1;
      }
      if (*(unsigned char *)v16 == 1)
      {
        int v5 = *(_DWORD *)(v16 + 16);
        if ((v5 & 0x80000000) == 0)
        {
          **(_DWORD **)(a1 + 16) = v5;
          return 0;
        }
        int v15 = "isa number less than zero";
      }
      else
      {
        int v15 = "isa number not a constant value";
      }
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v19 != 1935635305 || *(_DWORD *)(v19 + 3) != 1953330291) {
        goto LABEL_50;
      }
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
      uint64_t v16 = 0;
      v17[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v16, v17)) {
        return 1;
      }
      if (*(unsigned char *)v16 != 1)
      {
        int v15 = "is_stmt value not the constant value of 0 or 1";
        goto LABEL_51;
      }
      int v7 = *(_DWORD *)(v16 + 16);
      if (v7 != 1)
      {
        if (!v7)
        {
          uint64_t v8 = *(unsigned int **)(a1 + 8);
          unsigned int v9 = *v8 & 0xFFFFFFFE;
          goto LABEL_47;
        }
        int v15 = "is_stmt value not 0 or 1";
LABEL_51:
        v17[0] = v15;
        __int16 v18 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v17, 0, 0);
      }
      uint64_t v8 = *(unsigned int **)(a1 + 8);
      unsigned int v9 = *v8 | 1;
LABEL_47:
      *uint64_t v8 = v9;
      return 0;
    case 11:
      if (*(void *)v19 != 0x6C625F6369736162 || *(void *)(v19 + 3) != 0x6B636F6C625F6369) {
        goto LABEL_50;
      }
      uint64_t v8 = *(unsigned int **)(a1 + 8);
      unsigned int v9 = *v8 | 2;
      goto LABEL_47;
    case 12:
      if (*(void *)v19 != 0x6575676F6C6F7270 || *(_DWORD *)(v19 + 8) != 1684956511) {
        goto LABEL_50;
      }
      uint64_t v8 = *(unsigned int **)(a1 + 8);
      unsigned int v9 = *v8 | 4;
      goto LABEL_47;
    case 13:
      if (*(void *)v19 != 0x696D697263736964 || *(void *)(v19 + 5) != 0x726F74616E696D69) {
        goto LABEL_50;
      }
      return ((*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 256))(v2, *(void *)(a1 + 24)) & 1) != 0;
    case 14:
      if (*(void *)v19 != 0x6575676F6C697065 || *(void *)(v19 + 6) != 0x6E696765625F6575) {
        goto LABEL_50;
      }
      uint64_t v8 = *(unsigned int **)(a1 + 8);
      unsigned int v9 = *v8 | 8;
      goto LABEL_47;
    default:
LABEL_50:
      int v15 = "unknown sub-directive in '.loc' directive";
      goto LABEL_51;
  }
}

uint64_t sub_1CD3B3AF0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, _DWORD **))(*(void *)v2 + 192))(v2, &v13))
  {
    v11[0] = "unexpected token in '.cv_loc' directive";
    __int16 v12 = 259;
    return llvm::MCAsmParser::TokError(v2, (uint64_t)v11, 0, 0);
  }
  if (v14 == 7)
  {
    if (*v13 == 1935635305 && *(_DWORD *)((char *)v13 + 3) == 1953330291)
    {
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
      uint64_t v10 = 0;
      v11[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v10, v11)) {
        return 1;
      }
      int v7 = *(unint64_t **)(a1 + 16);
      unint64_t *v7 = -1;
      if (*(unsigned char *)v10 == 1)
      {
        unint64_t v8 = *(void *)(v10 + 16);
        unint64_t *v7 = v8;
        if (v8 < 2) {
          return 0;
        }
      }
      unsigned int v9 = "is_stmt value not 0 or 1";
      goto LABEL_23;
    }
  }
  else if (v14 == 12 && *(void *)v13 == 0x6575676F6C6F7270 && v13[2] == 1684956511)
  {
    uint64_t result = 0;
    **(unsigned char **)(a1 + 8) = 1;
    return result;
  }
  unsigned int v9 = "unknown sub-directive in '.cv_loc' directive";
LABEL_23:
  v11[0] = v9;
  __int16 v12 = 259;
  return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v11, 0, 0);
}

uint64_t sub_1CD3B3D10(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 400);
  int v3 = v2 - 1;
  uint64_t v4 = *(unsigned int *)(a1 + 344);
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 336) + 8 * v4;
    *(void *)(v12 - 8) &= ~(-1 << (v2 & 0x3F));
  }
  unsigned int v5 = v4;
  uint64_t v6 = (uint64_t *)(a1 + 336);
  *(_DWORD *)(a1 + 400) = v3;
  unsigned int v7 = v2 + 62;
  if (v4 != v7 >> 6)
  {
    uint64_t v8 = v7 >> 6;
    if (v4 > v8)
    {
      *(_DWORD *)(a1 + 344) = v8;
      unsigned int v5 = v7 >> 6;
    }
    else
    {
      if (v8 > *(_DWORD *)(a1 + 348)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v8 != v4) {
        bzero((void *)(*v6 + 8 * v4), 8 * (v8 - v4));
      }
      unsigned int v5 = v8;
      *(_DWORD *)(a1 + 344) = v8;
      int v3 = *(_DWORD *)(a1 + 400);
    }
  }
  uint64_t v9 = *v6;
  if ((v3 & 0x3F) != 0) {
    *(void *)(v9 + 8 * v5 - 8) &= ~(-1 << (v3 & 0x3F));
  }
  sub_1CD3AE658(a1, *(void *)(*(void *)(*(void *)(a1 + 688) - 8) + 16), *(_DWORD *)(*(void *)(*(void *)(a1 + 688) - 8) + 8), (*(void *)(v9 + 8 * ((v3 - 1) >> 6)) >> (v3 - 1)) & 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v10 = *(void *)(a1 + 688);
  uint64_t result = *(void *)(v10 - 8);
  if (result)
  {
    uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1050C4073F788CFLL);
    uint64_t v10 = *(void *)(a1 + 688);
  }
  *(void *)(a1 + 688) = v10 - 8;
  return result;
}

uint64_t sub_1CD3B3EA4(llvm::MCAsmParser *a1, uint64_t *a2, _DWORD *a3)
{
  long long __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v6 = sub_1CD3B40AC(a1, a2, &__p, 9);
  unsigned int v7 = (uint64_t *)__p;
  if (v6)
  {
    uint64_t v8 = 1;
    if (!__p) {
      return v8;
    }
    goto LABEL_11;
  }
  uint64_t v9 = v19;
  if (__p == v19)
  {
LABEL_8:
    uint64_t v8 = 0;
    if (a3) {
      *a3 = -1431655765 * ((unint64_t)((char *)v19 - (char *)v7) >> 3);
    }
    if (!v7) {
      return v8;
    }
LABEL_11:
    uint64_t v10 = (void **)v19;
    unint64_t v11 = v7;
    if (v19 != v7)
    {
      uint64_t v12 = (void **)v19;
      do
      {
        uint64_t v14 = (void ***)*(v12 - 3);
        v12 -= 3;
        unint64_t v13 = v14;
        if (v14)
        {
          int v15 = (void ***)*(v10 - 2);
          uint64_t v16 = v13;
          if (v15 != v13)
          {
            do
              int v15 = sub_1CD39B268(v15 - 16);
            while (v15 != v13);
            uint64_t v16 = *v12;
          }
          *(v10 - 2) = v13;
          operator delete(v16);
        }
        uint64_t v10 = v12;
      }
      while (v12 != (void **)v7);
      unint64_t v11 = __p;
    }
    uint64_t v19 = v7;
    operator delete(v11);
    return v8;
  }
  while ((sub_1CD3B47F0((uint64_t)a1, a2, v7) & 1) == 0)
  {
    v7 += 3;
    if (v7 == v9)
    {
      unsigned int v7 = (uint64_t *)__p;
      goto LABEL_8;
    }
  }
  uint64_t v8 = 1;
  unsigned int v7 = (uint64_t *)__p;
  if (__p) {
    goto LABEL_11;
  }
  return v8;
}

uint64_t sub_1CD3B3FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  unsigned int v7 = sub_1CD3AF930(v6 - 96, a2, a3, 2, *(_DWORD *)(a4 + 24));
  sub_1CD3AFBA0((uint64_t)(v7 + 12), (long long *)a4);
  v7[3] = *(_DWORD *)(a4 + 32);
  uint64_t result = sub_1CD3B40AC((llvm::MCAsmParser *)a1, (void *)a4, (void *)v7 + 3, 9);
  if ((result & 1) == 0)
  {
    unsigned int v9 = -1431655765 * ((*((void *)v7 + 4) - *((void *)v7 + 3)) >> 3);
    int v10 = v7[3] * v9;
    v7[1] = v10;
    unint64_t v7[2] = v9;
    unsigned int v11 = v10 + *v7;
    if (!*(unsigned char *)(v6 - 80)) {
      *(_DWORD *)(v6 - 68) = v11;
    }
    if (*(_DWORD *)(v6 - 64) > v11) {
      unsigned int v11 = *(_DWORD *)(v6 - 64);
    }
    *(_DWORD *)(v6 - 64) = v11;
  }
  return result;
}

uint64_t sub_1CD3B40AC(llvm::MCAsmParser *a1, void *a2, void *a3, int a4)
{
  uint64_t v57 = a3 + 2;
  while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) != a4
       || a4 == 42
       && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) != 44)
  {
    sub_1CD3ABC8C((uint64_t)&v64, (uint64_t)a1, 1);
    if (v64 == 2
      && (unint64_t v69 = (char *)v65, v70 = v66, v66 == (unsigned __int8 *)3)
      && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v69, "dup", 3uLL))
    {
      uint64_t v63 = 0;
      unint64_t v69 = 0;
      if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, char **))(*(void *)a1 + 232))(a1, &v63, &v69) & 1) != 0
        || (unint64_t v69 = "unexpected token", LOWORD(v73) = 259, llvm::MCAsmParser::parseToken(a1, 2, (llvm::Twine *)&v69)))
      {
        char v4 = 1;
LABEL_17:
        int v9 = 1;
        goto LABEL_9;
      }
      if (*(unsigned char *)v63 != 1)
      {
        uint64_t v10 = *(void *)(v63 + 8);
        unint64_t v69 = "cannot repeat value a non-constant number of times";
        goto LABEL_23;
      }
      if ((*(void *)(v63 + 16) & 0x8000000000000000) != 0)
      {
        uint64_t v10 = *(void *)(v63 + 8);
        unint64_t v69 = "cannot repeat value a negative number of times";
LABEL_23:
        LOWORD(v73) = 259;
        char v4 = llvm::MCAsmParser::Error((uint64_t)a1, v10, (uint64_t)&v69, 0, 0);
        goto LABEL_17;
      }
      uint64_t v50 = *(void *)(v63 + 16);
      long long __p = 0;
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v58 = "parentheses required for 'dup' contents";
      __int16 v59 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v58)
        || (sub_1CD3B40AC(a1, a2, &__p, 9) & 1) != 0
        || (unint64_t v69 = "expected ')'", LOWORD(v73) = 259, llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v69)))
      {
        char v11 = 0;
        char v4 = 1;
      }
      else if (v50)
      {
        for (uint64_t i = 0; i != v50; ++i)
        {
          unint64_t v53 = v61;
          if ((char *)v61 - (unsigned char *)__p >= 1)
          {
            int v55 = __p;
            unint64_t v48 = (void *)a3[1];
            int64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (unsigned char *)__p) >> 3);
            if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v57 - (void)v48) >> 3)) >= v46)
            {
              if (v46 > 0)
              {
                if (__p == v61)
                {
                  unsigned int v25 = (void *)a3[1];
                }
                else
                {
                  uint64_t v24 = (void **)__p;
                  unsigned int v25 = (void *)a3[1];
                  do
                  {
                    *unsigned int v25 = 0;
                    v25[1] = 0;
                    v25[2] = 0;
                    uint64_t v26 = (char *)*v24;
                    int v27 = (char *)v24[1];
                    int64_t v28 = v27 - (unsigned char *)*v24;
                    if (v27 != *v24)
                    {
                      uint64_t v51 = v24;
                      if (v28 < 0) {
                        goto LABEL_96;
                      }
                      uint64_t v49 = v28 >> 7;
                      uint64_t v29 = (char *)operator new(v28);
                      uint64_t v30 = 0;
                      *unsigned int v25 = v29;
                      v25[1] = v29;
                      v25[2] = &v29[128 * v49];
                      do
                      {
                        sub_1CD3B0398((uint64_t)&v29[v30], (int *)&v26[v30]);
                        v30 += 128;
                      }
                      while (&v26[v30] != v27);
                      v25[1] = &v29[v30];
                      uint64_t v24 = v51;
                    }
                    v24 += 3;
                    v25 += 3;
                  }
                  while (v24 != v53);
                }
                a3[1] = v25;
              }
            }
            else
            {
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *a3) >> 3);
              unint64_t v21 = v20 - 0x5555555555555555 * (((char *)v61 - (unsigned char *)__p) >> 3);
              if (v21 > 0xAAAAAAAAAAAAAAALL) {
LABEL_96:
              }
                abort();
              if (0x5555555555555556 * ((uint64_t)(*v57 - *a3) >> 3) > v21) {
                unint64_t v21 = 0x5555555555555556 * ((uint64_t)(*v57 - *a3) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v57 - *a3) >> 3) >= 0x555555555555555) {
                unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v22 = v21;
              }
              unint64_t v73 = v57;
              if (v22)
              {
                if (v22 > 0xAAAAAAAAAAAAAAALL) {
                  sub_1CB833614();
                }
                __int16 v23 = (unsigned __int8 *)operator new(24 * v22);
              }
              else
              {
                __int16 v23 = 0;
              }
              unint64_t v31 = &v23[24 * v20];
              unint64_t v69 = (char *)v23;
              uint64_t v70 = v31;
              uint64_t v72 = &v23[24 * v22];
              uint64_t v52 = &v31[24 * v46];
              int v32 = v55;
              do
              {
                *(void *)unint64_t v31 = 0;
                *((void *)v31 + 1) = 0;
                *((void *)v31 + 2) = 0;
                uint64_t v34 = *v32;
                uint64_t v33 = v32[1];
                int64_t v35 = v33 - *v32;
                if (v33 != *v32)
                {
                  __int16 v56 = v32;
                  if (v35 < 0) {
                    goto LABEL_96;
                  }
                  uint64_t v54 = v35 >> 7;
                  uint64_t v36 = (char *)operator new(v35);
                  uint64_t v37 = 0;
                  *(void *)unint64_t v31 = v36;
                  *((void *)v31 + 1) = v36;
                  *((void *)v31 + 2) = &v36[128 * v54];
                  do
                  {
                    sub_1CD3B0398((uint64_t)&v36[v37], (int *)(v34 + v37));
                    v37 += 128;
                  }
                  while (v34 + v37 != v33);
                  *((void *)v31 + 1) = &v36[v37];
                  int v32 = v56;
                }
                v31 += 24;
                v32 += 3;
              }
              while (v31 != v52);
              uint64_t v71 = (void **)v52;
              sub_1CD3B6354(a3, &v69, v48);
              uint64_t v38 = (void **)v70;
              uint64_t v39 = v71;
              if (v71 != (void **)v70)
              {
                uint64_t v40 = v71;
                do
                {
                  int v42 = (void ***)*(v40 - 3);
                  v40 -= 3;
                  unsigned int v41 = v42;
                  uint64_t v71 = v40;
                  if (v42)
                  {
                    uint64_t v43 = (void ***)*(v39 - 2);
                    if (v43 == v41)
                    {
                      __int16 v44 = v41;
                    }
                    else
                    {
                      do
                        uint64_t v43 = sub_1CD39B268(v43 - 16);
                      while (v43 != v41);
                      __int16 v44 = *v40;
                      uint64_t v40 = v71;
                    }
                    *(v39 - 2) = v41;
                    operator delete(v44);
                  }
                  uint64_t v39 = v40;
                }
                while (v40 != v38);
              }
              if (v69) {
                operator delete(v69);
              }
            }
          }
          char v11 = 1;
        }
      }
      else
      {
        char v11 = 1;
      }
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        unint64_t v13 = v61;
        uint64_t v14 = __p;
        if (v61 != __p)
        {
          int v15 = v61;
          do
          {
            uint64_t v17 = (void ***)*(v15 - 3);
            v15 -= 3;
            uint64_t v16 = v17;
            if (v17)
            {
              __int16 v18 = (void ***)*(v13 - 2);
              uint64_t v19 = v16;
              if (v18 != v16)
              {
                do
                  __int16 v18 = sub_1CD39B268(v18 - 16);
                while (v18 != v16);
                uint64_t v19 = *v15;
              }
              *(v13 - 2) = v16;
              operator delete(v19);
            }
            unint64_t v13 = v15;
          }
          while (v15 != v12);
          uint64_t v14 = __p;
        }
        unint64_t v61 = v12;
        operator delete(v14);
      }
      if (v11)
      {
LABEL_40:
        if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
        {
          llvm::MCAsmParser::parseOptionalToken(a1, 9);
          int v9 = 0;
        }
        else
        {
          int v9 = 3;
        }
        goto LABEL_9;
      }
      int v9 = 1;
    }
    else
    {
      sub_1CD3AFE68((void ***)a3);
      if ((sub_1CD3B4BB4(a1, a2, (uint64_t ***)(a3[1] - 24)) & 1) == 0) {
        goto LABEL_40;
      }
      int v9 = 1;
      char v4 = 1;
    }
LABEL_9:
    if (v68 >= 0x41 && v67) {
      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
    }
    if (v9)
    {
      if (v9 != 3) {
        return v4 & 1;
      }
      break;
    }
  }
  char v4 = 0;
  return v4 & 1;
}

uint64_t sub_1CD3B47F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*((unsigned char *)a2 + 17))
  {
    uint64_t v43 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 96);
    __int16 v48 = 1283;
    uint64_t v44 = *a2;
    uint64_t v45 = a2[1];
    v47[0] = "cannot initialize a value of type '";
    v47[2] = v44;
    v47[3] = v45;
    v49[0] = v47;
    v49[2] = "'; 'org' was used in the type's declaration";
    __int16 v50 = 770;
    return llvm::MCAsmParser::Error(a1, v43, (uint64_t)v49, 0, 0);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v14 = *a3;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (unsigned int *)(a2[5] + v8);
      char v11 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      llvm::MCStreamer::emitZeros(v11, *v10 - v9);
      int v12 = *v10;
      unsigned int v13 = v10[1];
      if (sub_1CD3B6748(a1, (uint64_t)v10, v6)) {
        return 1;
      }
      uint64_t v9 = v13 + v12;
      v6 += 128;
      v8 += 144;
    }
    while (v6 != v7);
    uint64_t v6 = *a3;
    uint64_t v14 = a3[1];
  }
  int v15 = (unsigned int *)(a2[5] + 144 * ((v14 - v6) >> 7));
  if (v15 == (unsigned int *)a2[6])
  {
LABEL_36:
    if (v9 != *((_DWORD *)a2 + 8))
    {
      unsigned int v41 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      llvm::MCStreamer::emitZeros(v41, *((unsigned int *)a2 + 8) - v9);
    }
    return 0;
  }
  while (1)
  {
    uint64_t v16 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    llvm::MCStreamer::emitZeros(v16, *v15 - v9);
    unsigned int v17 = v15[1];
    unsigned int v46 = *v15;
    unsigned int v18 = v15[4];
    if (v18 == 2)
    {
      unint64_t v31 = (void *)*((void *)v15 + 3);
      int v32 = (void *)*((void *)v15 + 4);
      while (v31 != v32)
      {
        uint64_t v33 = (unsigned int *)*((void *)v15 + 11);
        uint64_t v34 = (unsigned int *)*((void *)v15 + 12);
        if (v33 != v34)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            llvm::MCStreamer::emitZeros(v37, *v33 - v36);
            uint64_t v36 = v33[1] + *v33;
            sub_1CD3B6748(a1, (uint64_t)v33, *v31 + v35);
            v35 += 128;
            v33 += 36;
          }
          while (v33 != v34);
        }
        v31 += 3;
      }
      goto LABEL_35;
    }
    if (v18 != 1) {
      break;
    }
    uint64_t v19 = v15[8];
    if (v19)
    {
      uint64_t v20 = *((void *)v15 + 3);
      uint64_t v21 = v20 + 16 * v19;
      while (1)
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        uint64_t v23 = *(unsigned int *)(v20 + 8);
        uint64_t v24 = (uint64_t *)v20;
        if (v23 < 0x41) {
          goto LABEL_22;
        }
        int v25 = 0;
        int64_t v26 = (unint64_t)(v23 + 63) >> 6;
        do
        {
          if (v26-- < 1) {
            break;
          }
          unint64_t v28 = *(void *)(*(void *)v20 + 8 * v26);
          v25 += __clz(v28);
        }
        while (!v28);
        int v29 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          int v29 = 0;
        }
        if ((v23 - v25 - v29) <= 0x40) {
          break;
        }
        uint64_t v30 = -1;
LABEL_23:
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 520))(v22, v30, v23 >> 3);
        v20 += 16;
        if (v20 == v21) {
          goto LABEL_35;
        }
      }
      uint64_t v24 = *(uint64_t **)v20;
LABEL_22:
      uint64_t v30 = *v24;
      goto LABEL_23;
    }
LABEL_35:
    uint64_t v9 = v17 + v46;
    v15 += 36;
    if (v15 == (unsigned int *)a2[6]) {
      goto LABEL_36;
    }
  }
  uint64_t v38 = v15[8];
  if (!v38) {
    goto LABEL_35;
  }
  uint64_t v39 = (unsigned __int8 **)*((void *)v15 + 3);
  uint64_t v40 = 8 * v38;
  while ((sub_1CD3B1144(a1, *v39, v15[3]) & 1) == 0)
  {
    ++v39;
    v40 -= 8;
    if (!v40) {
      goto LABEL_35;
    }
  }
  return 1;
}

uint64_t sub_1CD3B4BB4(llvm::MCAsmParser *a1, void *a2, uint64_t ***a3)
{
  unsigned int v5 = a1;
  v227[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  int v7 = *v6;
  uint64_t v8 = (unsigned char *)*((void *)v6 + 1);
  uint64_t v9 = *((void *)v6 + 2);
  uint64_t v10 = v6[8];
  if (v10 > 0x40) {
    operator new[]();
  }
  uint64_t v11 = *((void *)v6 + 3);
  BOOL v12 = llvm::MCAsmParser::parseOptionalToken(v5, 21);
  BOOL v13 = v12;
  if (v12)
  {
    int v14 = 22;
LABEL_8:
    v197[1] = !v13;
    v197[0] = v14;
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v5 + 40))(v5) + 8) == v14)
    {
      LOBYTE(v15) = 0;
      goto LABEL_10;
    }
    unint64_t v16 = 0;
    uint64_t v198 = v5;
    while (1)
    {
      uint64_t v17 = a2[5];
      if (v16 >= 0x8E38E38E38E38E39 * ((a2[6] - v17) >> 4))
      {
        LOBYTE(v15) = 0;
        goto LABEL_263;
      }
      uint64_t v199 = a3;
      uint64_t v195 = v11;
      uint64_t v196 = v10;
      unint64_t v194 = v16 + 1;
      BOOL v18 = llvm::MCAsmParser::parseOptionalToken(v5, 25);
      uint64_t v19 = v17 + 144 * v16;
      uint64_t v20 = (int *)(v19 + 16);
      if (v18)
      {
        sub_1CD3AFFF4(v199, (int *)(v19 + 16));
        unint64_t v44 = v16 + 1;
        goto LABEL_175;
      }
      uint64_t v22 = v199[1];
      unint64_t v21 = (unint64_t)v199[2];
      if ((unint64_t)v22 < v21)
      {
        v23.n128_f64[0] = sub_1CD3B0C70((uint64_t)v199[1], *v20);
        uint64_t v24 = v22 + 16;
        goto LABEL_37;
      }
      uint64_t v25 = ((char *)v22 - (char *)*v199) >> 7;
      if ((unint64_t)(v25 + 1) >> 57) {
        goto LABEL_284;
      }
      uint64_t v26 = v21 - (void)*v199;
      uint64_t v27 = v26 >> 6;
      if (v26 >> 6 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28)
      {
        if (v28 >> 57) {
          goto LABEL_285;
        }
        int v29 = (char *)operator new(v28 << 7);
      }
      else
      {
        int v29 = 0;
      }
      uint64_t v30 = (uint64_t **)&v29[128 * v28];
      v23.n128_f64[0] = sub_1CD3B0C70((uint64_t)&v29[128 * v25], *v20);
      uint64_t v24 = (uint64_t **)(v31 + 128);
      int v32 = *v199;
      if (v22 == *v199)
      {
        *uint64_t v199 = (uint64_t **)v31;
        v199[1] = v24;
        v199[2] = v30;
        unsigned int v5 = v198;
        if (v22) {
          goto LABEL_36;
        }
      }
      else
      {
        do
        {
          v22 -= 16;
          uint64_t v31 = sub_1CD3B011C(v31 - 128, v22);
        }
        while (v22 != v32);
        uint64_t v22 = *v199;
        uint64_t v33 = (void ***)v199[1];
        *uint64_t v199 = (uint64_t **)v31;
        v199[1] = v24;
        v199[2] = v30;
        if (v33 == (void ***)v22)
        {
          unsigned int v5 = v198;
        }
        else
        {
          unsigned int v5 = v198;
          do
          {
            v33 -= 16;
            sub_1CD39B268(v33);
          }
          while (v33 != (void ***)v22);
        }
        if (v22) {
LABEL_36:
        }
          operator delete(v22);
      }
LABEL_37:
      v199[1] = v24;
      uint64_t v34 = (int *)(v24 - 16);
      if (*v20 != 2)
      {
        if (*v20 != 1)
        {
          uint64_t v45 = v34;
          uint64_t v46 = v17 + 144 * v16;
          uint64_t v47 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(void *)v5 + 40))(v5, v23)+ 8)+ 8);
          *(void *)&long long v221 = &v222;
          *((void *)&v221 + 1) = 0x100000000;
          __int16 v48 = (unsigned int *)(v46 + 12);
          if (llvm::MCAsmParser::parseOptionalToken(v5, 21))
          {
            uint64_t v162 = *v48;
            if (*(_DWORD *)(v17 + 144 * v16 + 8) == 1 && v162 >= 2) {
              goto LABEL_229;
            }
            sub_1CD3B104C(v5, v162, (uint64_t)&v221, 22);
            long long __p = "unexpected token";
            *(_WORD *)&v210[8] = 259;
            if (!llvm::MCAsmParser::parseToken(v5, 22, (llvm::Twine *)&__p)) {
              goto LABEL_63;
            }
          }
          else
          {
            int v49 = sub_1CD3B6414((uint64_t *)v5);
            unsigned int v50 = *(_DWORD *)(v17 + 144 * v16 + 8);
            uint64_t v51 = *v48;
            if (v49)
            {
              if (v50 != 1 || v51 < 2)
              {
                sub_1CD3B104C(v5, v51, (uint64_t)&v221, 42);
                long long __p = "expected '>'";
                *(_WORD *)&v210[8] = 259;
                if (sub_1CD3B65C4((uint64_t *)v5, (llvm::Twine *)&__p)) {
                  goto LABEL_53;
                }
LABEL_63:
                unsigned int v55 = *(_DWORD *)(v17 + 144 * v16 + 8);
                if (DWORD2(v221) > v55)
                {
                  std::to_string(&v218, v55);
                  uint64_t v166 = std::string::insert(&v218, 0, "Initializer too long for field; expected at most ");
                  std::string::size_type v167 = v166->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
                  v219.__r_.__value_.__r.__words[2] = v167;
                  v166->__r_.__value_.__l.__size_ = 0;
                  v166->__r_.__value_.__r.__words[2] = 0;
                  v166->__r_.__value_.__r.__words[0] = 0;
                  long long v168 = std::string::append(&v219, " elements, got ");
                  std::string::size_type v169 = v168->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                  v220.__r_.__value_.__r.__words[2] = v169;
                  v168->__r_.__value_.__l.__size_ = 0;
                  v168->__r_.__value_.__r.__words[2] = 0;
                  v168->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v217, DWORD2(v221));
                  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v170 = &v217;
                  }
                  else {
                    uint64_t v170 = (std::string *)v217.__r_.__value_.__r.__words[0];
                  }
                  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = *((unsigned char *)&v217.__r_.__value_.__s + 23) & 0x7F;
                  }
                  else {
                    std::string::size_type size = v217.__r_.__value_.__l.__size_;
                  }
                  uint64_t v172 = std::string::append(&v220, (const std::string::value_type *)v170, size);
                  std::string::size_type v173 = v172->__r_.__value_.__r.__words[2];
                  *(_OWORD *)unint64_t v200 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
                  *(void *)&long long v201 = v173;
                  v172->__r_.__value_.__l.__size_ = 0;
                  v172->__r_.__value_.__r.__words[2] = 0;
                  v172->__r_.__value_.__r.__words[0] = 0;
                  *(_WORD *)&v210[8] = 260;
                  long long __p = v200;
                  char v53 = llvm::MCAsmParser::Error((uint64_t)v5, v47, (uint64_t)&__p, 0, 0);
                  if (SBYTE7(v201) < 0) {
                    operator delete(v200[0]);
                  }
                  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v217.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v220.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v219.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v218.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  __int16 v56 = (const void *)(*(void *)(v46 + 24) + 8 * DWORD2(v221));
                  uint64_t v57 = *(unsigned int *)(v46 + 32);
                  uint64_t v58 = 8 * v57 - 8 * DWORD2(v221);
                  int v59 = DWORD2(v221);
                  if ((unint64_t)DWORD2(v221) + (v58 >> 3) > HIDWORD(v221)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (DWORD2(v221) != v57)
                  {
                    memcpy((void *)(v221 + 8 * DWORD2(v221)), v56, 8 * v57 - 8 * DWORD2(v221));
                    int v59 = DWORD2(v221);
                  }
                  DWORD2(v221) = v59 + ((unint64_t)v58 >> 3);
                  LODWORD(__p) = 0;
                  *(void *)&long long v209 = v210;
                  *((void *)&v209 + 1) = 0x100000000;
                  sub_1CBB10328((uint64_t)&v209, (uint64_t)&v221);
                  sub_1CD3B0630(v45, (int ***)&__p);
                  sub_1CD39B268((void ***)&__p);
                  char v53 = 0;
                }
LABEL_69:
                if ((long long *)v221 != &v222) {
                  free((void *)v221);
                }
                goto LABEL_211;
              }
LABEL_229:
              uint64_t v164 = "Cannot initialize scalar field with array value";
LABEL_232:
              long long __p = v164;
              *(_WORD *)&v210[8] = 259;
              char v53 = llvm::MCAsmParser::Error((uint64_t)v5, v47, (uint64_t)&__p, 0, 0);
              goto LABEL_69;
            }
            if (v50 >= 2 && v51 >= 2)
            {
              uint64_t v164 = "Cannot initialize array field with scalar value";
              goto LABEL_232;
            }
            if ((sub_1CD3B132C(v5, v51, (uint64_t)&v221, v50) & 1) == 0) {
              goto LABEL_63;
            }
          }
LABEL_53:
          char v53 = 1;
          goto LABEL_69;
        }
        uint64_t v41 = v17 + 144 * v16;
        int v42 = *(_DWORD *)(v41 + 12);
        if (v42 == 4)
        {
          uint64_t v43 = &unk_1CFB2E308;
        }
        else if (v42 == 10)
        {
          uint64_t v43 = &unk_1CFB2E380;
        }
        else
        {
          uint64_t v43 = &unk_1CFB2E31C;
        }
        uint64_t v136 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(void *)v5 + 40))(v5, v23)+ 8)+ 8);
        *(void *)&long long v221 = &v222;
        *((void *)&v221 + 1) = 0x100000000;
        if (llvm::MCAsmParser::parseOptionalToken(v5, 21))
        {
          if (*(_DWORD *)(v17 + 144 * v16 + 8) != 1)
          {
            if (sub_1CD3B1C34(v5, (uint64_t)v43, (uint64_t)&v221, 22)) {
              goto LABEL_280;
            }
            long long __p = "unexpected token";
            *(_WORD *)&v210[8] = 259;
            if (llvm::MCAsmParser::parseToken(v5, 22, (llvm::Twine *)&__p)) {
              goto LABEL_280;
            }
            goto LABEL_193;
          }
          goto LABEL_230;
        }
        int v137 = sub_1CD3B6414((uint64_t *)v5);
        unsigned int v138 = *(_DWORD *)(v17 + 144 * v16 + 8);
        if (v137)
        {
          if (v138 != 1)
          {
            if (sub_1CD3B1C34(v5, (uint64_t)v43, (uint64_t)&v221, 42)) {
              goto LABEL_280;
            }
            long long __p = "expected '>'";
            *(_WORD *)&v210[8] = 259;
            if (sub_1CD3B65C4((uint64_t *)v5, (llvm::Twine *)&__p)) {
              goto LABEL_280;
            }
            goto LABEL_193;
          }
LABEL_230:
          long long v165 = "Cannot initialize scalar field with array value";
        }
        else
        {
          if (v138 <= 1)
          {
            if (DWORD2(v221) >= HIDWORD(v221))
            {
              uint64_t v193 = v136;
              if (HIDWORD(v221) == -1) {
                sub_1CD0A89A8(0xFFFFFFFFuLL);
              }
              uint64_t v175 = v34;
              if (((2 * HIDWORD(v221)) | 1uLL) >= 0xFFFFFFFF) {
                uint64_t v176 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v176 = (2 * HIDWORD(v221)) | 1;
              }
              uint64_t v177 = (char *)malloc_type_malloc(16 * v176, 0x4065EBACuLL);
              if (!v177) {
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              }
              size_t v141 = v177;
              uint64_t v178 = &v177[16 * DWORD2(v221)];
              *((_DWORD *)v178 + 2) = 1;
              *(void *)uint64_t v178 = 0;
              sub_1CBFC6A04((uint64_t)&v221, (uint64_t)v177);
              if ((long long *)v221 != &v222) {
                free((void *)v221);
              }
              *(void *)&long long v221 = v141;
              HIDWORD(v221) = v176;
              int v140 = DWORD2(v221);
              unsigned int v5 = v198;
              uint64_t v34 = v175;
              uint64_t v136 = v193;
            }
            else
            {
              uint64_t v139 = v221 + 16 * DWORD2(v221);
              *(_DWORD *)(v139 + 8) = 1;
              *(void *)uint64_t v139 = 0;
              int v140 = DWORD2(v221);
              size_t v141 = (char *)v221;
            }
            DWORD2(v221) = v140 + 1;
            if (sub_1CD3B2170((_DWORD **)v5, (uint64_t)v43, (uint64_t)&v141[16 * (v140 + 1) - 16]))
            {
LABEL_280:
              sub_1CD480C18((char **)&v221);
              return 1;
            }
LABEL_193:
            uint64_t v142 = DWORD2(v221);
            unsigned int v143 = *(_DWORD *)(v17 + 144 * v16 + 8);
            if (DWORD2(v221) <= v143)
            {
              uint64_t v152 = v34;
              uint64_t v153 = *(void *)(v41 + 24) + 16 * DWORD2(v221);
              uint64_t v154 = *(unsigned int *)(v41 + 32);
              uint64_t v155 = 16 * v154 - 16 * DWORD2(v221);
              unint64_t v156 = DWORD2(v221) + (v155 >> 4);
              uint64_t v157 = DWORD2(v221);
              int v158 = DWORD2(v221);
              if (v156 > HIDWORD(v221))
              {
                sub_1CBFC6948((uint64_t)&v221, v156);
                uint64_t v157 = DWORD2(v221);
                int v158 = DWORD2(v221);
              }
              if (v142 != v154)
              {
                char v159 = (unsigned int *)(v221 + 16 * v157 + 8);
                uint64_t v160 = 16 * v154 - 16 * v142;
                do
                {
                  unsigned int v161 = *(_DWORD *)(v153 + 8);
                  *char v159 = v161;
                  if (v161 > 0x40) {
                    operator new[]();
                  }
                  *((void *)v159 - 1) = *(void *)v153;
                  v153 += 16;
                  v159 += 4;
                  v160 -= 16;
                }
                while (v160);
                int v158 = DWORD2(v221);
              }
              DWORD2(v221) = v158 + ((unint64_t)v155 >> 4);
              LODWORD(__p) = 1;
              *(void *)&long long v209 = v210;
              *((void *)&v209 + 1) = 0x100000000;
              sub_1CD65BE9C((uint64_t)&v209, (uint64_t)&v221);
              sub_1CD3B0630(v152, (int ***)&__p);
              sub_1CD39B268((void ***)&__p);
              sub_1CD480C18((char **)&v221);
              goto LABEL_173;
            }
            std::to_string(&v218, v143);
            uint64_t v144 = std::string::insert(&v218, 0, "Initializer too long for field; expected at most ");
            std::string::size_type v145 = v144->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
            v219.__r_.__value_.__r.__words[2] = v145;
            v144->__r_.__value_.__l.__size_ = 0;
            v144->__r_.__value_.__r.__words[2] = 0;
            v144->__r_.__value_.__r.__words[0] = 0;
            size_t v146 = std::string::append(&v219, " elements, got ");
            std::string::size_type v147 = v146->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v220.__r_.__value_.__l.__data_ = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
            v220.__r_.__value_.__r.__words[2] = v147;
            v146->__r_.__value_.__l.__size_ = 0;
            v146->__r_.__value_.__r.__words[2] = 0;
            v146->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v217, DWORD2(v221));
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v148 = &v217;
            }
            else {
              char v148 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v149 = *((unsigned char *)&v217.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              std::string::size_type v149 = v217.__r_.__value_.__l.__size_;
            }
            size_t v150 = std::string::append(&v220, (const std::string::value_type *)v148, v149);
            std::string::size_type v151 = v150->__r_.__value_.__r.__words[2];
            *(_OWORD *)unint64_t v200 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
            *(void *)&long long v201 = v151;
            v150->__r_.__value_.__l.__size_ = 0;
            v150->__r_.__value_.__r.__words[2] = 0;
            v150->__r_.__value_.__r.__words[0] = 0;
            *(_WORD *)&v210[8] = 260;
            long long __p = v200;
            char v53 = llvm::MCAsmParser::Error((uint64_t)v5, v136, (uint64_t)&__p, 0, 0);
            if (SBYTE7(v201) < 0) {
              operator delete(v200[0]);
            }
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v217.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v220.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v219.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v218.__r_.__value_.__l.__data_);
            }
            sub_1CD480C18((char **)&v221);
LABEL_211:
            if (v53) {
              return 1;
            }
            goto LABEL_173;
          }
          long long v165 = "Cannot initialize array field with scalar value";
        }
        long long __p = v165;
        *(_WORD *)&v210[8] = 259;
        char v174 = llvm::MCAsmParser::Error((uint64_t)v5, v136, (uint64_t)&__p, 0, 0);
        sub_1CD480C18((char **)&v221);
        if (v174) {
          return 1;
        }
        goto LABEL_173;
      }
      uint64_t v192 = v34;
      uint64_t v35 = v17 + 144 * v16;
      uint64_t v36 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(void *)v5 + 40))(v5, v23)+ 8)+ 8);
      memset(&v220, 0, sizeof(v220));
      unsigned int v38 = *(_DWORD *)(v35 + 8);
      uint64_t v37 = (unsigned int *)(v35 + 8);
      uint64_t v39 = v37 + 4;
      if (v38 >= 2)
      {
        if (llvm::MCAsmParser::parseOptionalToken(v5, 21))
        {
          if (sub_1CD3B40AC(v5, v37 + 10, &v220, 22)) {
            goto LABEL_40;
          }
          long long __p = "unexpected token";
          *(_WORD *)&v210[8] = 259;
          if (llvm::MCAsmParser::parseToken(v5, 22, (llvm::Twine *)&__p)) {
            goto LABEL_40;
          }
        }
        else
        {
          if (!sub_1CD3B6414((uint64_t *)v5))
          {
            long long __p = "Cannot initialize array field with scalar value";
            *(_WORD *)&v210[8] = 259;
            char v40 = llvm::MCAsmParser::Error((uint64_t)v5, v36, (uint64_t)&__p, 0, 0);
            goto LABEL_161;
          }
          if ((sub_1CD3B40AC(v5, v37 + 10, &v220, 42) & 1) != 0
            || (long long __p = "expected '>'",
                *(_WORD *)&v210[8] = 259,
                (sub_1CD3B65C4((uint64_t *)v5, (llvm::Twine *)&__p) & 1) != 0))
          {
LABEL_40:
            char v40 = 1;
            goto LABEL_161;
          }
        }
      }
      else
      {
        sub_1CD3AFE68((void ***)&v220);
        if (sub_1CD3B4BB4(v5, v37 + 10, v220.__r_.__value_.__l.__size_ - 24)) {
          goto LABEL_40;
        }
      }
      std::string::size_type v60 = v220.__r_.__value_.__l.__size_;
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v62 = *v37;
      if (v61 > v62)
      {
        std::to_string(&v217, v62);
        int v97 = std::string::insert(&v217, 0, "Initializer too long for field; expected at most ");
        std::string::size_type v98 = v97->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v218.__r_.__value_.__r.__words[2] = v98;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        uint64_t v99 = std::string::append(&v218, " elements, got ");
        std::string::size_type v100 = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v219.__r_.__value_.__r.__words[2] = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v207, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3));
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v101 = &v207;
        }
        else {
          uint64_t v101 = (std::string *)v207.__r_.__value_.__r.__words[0];
        }
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v102 = *((unsigned char *)&v207.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v102 = v207.__r_.__value_.__l.__size_;
        }
        int v103 = std::string::append(&v219, (const std::string::value_type *)v101, v102);
        std::string::size_type v104 = v103->__r_.__value_.__r.__words[2];
        long long v221 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        *(void *)&long long v222 = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        *(_WORD *)&v210[8] = 260;
        long long __p = &v221;
        char v40 = llvm::MCAsmParser::Error((uint64_t)v5, v36, (uint64_t)&__p, 0, 0);
        if (SBYTE7(v222) < 0) {
          operator delete((void *)v221);
        }
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v207.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v218.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v63 = (char *)*((void *)v37 + 3);
        int v64 = (int **)(*(void *)v39
                     + 8 * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3));
        if (v63 - (char *)v64 >= 1)
        {
          int64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
          uint64_t v66 = (void **)(v220.__r_.__value_.__r.__words[0]
                        + 8 * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3));
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(v220.__r_.__value_.__r.__words[2] - v220.__r_.__value_.__l.__size_) >> 3)) >= v65)
          {
            int64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220.__r_.__value_.__l.__size_ - (void)v66) >> 3);
            if (v70 >= v65)
            {
              uint64_t v71 = &v64[(v63 - (char *)v64) >> 3];
              int64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
            }
            else
            {
              std::string::size_type v187 = v220.__r_.__value_.__r.__words[0]
                   + 8 * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3);
              std::string::size_type v188 = v220.__r_.__value_.__l.__size_;
              unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
              uint64_t v71 = &v64[(uint64_t)(v220.__r_.__value_.__l.__size_ - (void)v66) >> 3];
              if (v71 == (int **)v63)
              {
                unint64_t v73 = (void *)v220.__r_.__value_.__l.__size_;
              }
              else
              {
                unint64_t v185 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220.__r_.__value_.__l.__size_ - (void)v66) >> 3);
                uint64_t v186 = &v64[(uint64_t)(v220.__r_.__value_.__l.__size_ - (void)v66) >> 3];
                v191 = v39;
                uint64_t v72 = v186;
                unint64_t v73 = (void *)v220.__r_.__value_.__l.__size_;
                do
                {
                  *unint64_t v73 = 0;
                  v73[1] = 0;
                  void v73[2] = 0;
                  uint64_t v75 = *v72;
                  uint64_t v74 = v72[1];
                  int64_t v76 = (char *)v74 - (char *)*v72;
                  if (v74 != *v72)
                  {
                    if (v76 < 0) {
                      goto LABEL_284;
                    }
                    uint64_t v77 = a2;
                    __int16 v78 = v63;
                    uint64_t v79 = v76 >> 7;
                    unint64_t v80 = (char *)operator new(v76);
                    uint64_t v81 = 0;
                    *unint64_t v73 = v80;
                    v73[1] = v80;
                    void v73[2] = &v80[128 * v79];
                    do
                    {
                      sub_1CD3B0398((uint64_t)&v80[v81 * 4], &v75[v81]);
                      v81 += 32;
                    }
                    while (&v75[v81] != v74);
                    v73[1] = &v80[v81 * 4];
                    uint64_t v63 = v78;
                    a2 = v77;
                  }
                  v72 += 3;
                  v73 += 3;
                }
                while (v72 != (int **)v63);
                unsigned int v5 = v198;
                uint64_t v39 = v191;
                int64_t v70 = v185;
                uint64_t v71 = v186;
              }
              v220.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
              std::string::size_type v60 = v188;
              int64_t v65 = v189;
              uint64_t v66 = (void **)v187;
            }
            if (v70 >= 1)
            {
              sub_1CD3B6278((uint64_t)&v220, (uint64_t)v66, v60, (uint64_t)&v66[3 * v65]);
              while (v64 != v71)
              {
                if (v64 != (int **)v66) {
                  sub_1CD3B0A70(v66, *v64, v64[1], ((char *)v64[1] - (char *)*v64) >> 7);
                }
                v64 += 3;
                v66 += 3;
              }
            }
          }
          else
          {
            if ((unint64_t)(v65
                                  - 0x5555555555555555
                                  * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3)) > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_284;
            unint64_t v67 = 0x5555555555555556
                * ((uint64_t)(v220.__r_.__value_.__r.__words[2] - v220.__r_.__value_.__r.__words[0]) >> 3);
            if (v67 <= v65
                      - 0x5555555555555555
                      * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3))
              unint64_t v67 = v65
                  - 0x5555555555555555
                  * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v220.__r_.__value_.__r.__words[2] - v220.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
            else {
              unint64_t v68 = v67;
            }
            *(void *)&v210[8] = (char *)&v220.__r_.__value_.__l + 16;
            int v190 = v37 + 4;
            if (v68)
            {
              if (v68 > 0xAAAAAAAAAAAAAAALL) {
LABEL_285:
              }
                sub_1CB833614();
              unint64_t v69 = (char *)operator new(24 * v68);
            }
            else
            {
              unint64_t v69 = 0;
            }
            int v82 = &v69[24 * v61];
            long long __p = v69;
            *(void *)&long long v209 = v82;
            *(void *)size_t v210 = &v69[24 * v68];
            unint64_t v83 = &v82[24 * v65];
            do
            {
              *(void *)int v82 = 0;
              *((void *)v82 + 1) = 0;
              *((void *)v82 + 2) = 0;
              unint64_t v85 = *v64;
              uint64_t v84 = v64[1];
              int64_t v86 = (char *)v84 - (char *)*v64;
              if (v84 != *v64)
              {
                if (v86 < 0) {
                  goto LABEL_284;
                }
                uint64_t v87 = v86 >> 7;
                unint64_t v88 = (char *)operator new(v86);
                uint64_t v89 = 0;
                *(void *)int v82 = v88;
                *((void *)v82 + 1) = v88;
                *((void *)v82 + 2) = &v88[128 * v87];
                do
                {
                  sub_1CD3B0398((uint64_t)&v88[v89 * 4], &v85[v89]);
                  v89 += 32;
                }
                while (&v85[v89] != v84);
                *((void *)v82 + 1) = &v88[v89 * 4];
                unsigned int v5 = v198;
              }
              v82 += 24;
              v64 += 3;
            }
            while (v82 != v83);
            *((void *)&v209 + 1) = v83;
            sub_1CD3B6354(&v220, &__p, v66);
            std::string::size_type v91 = (void **)*((void *)&v209 + 1);
            unint64_t v90 = (void **)v209;
            if (*((void *)&v209 + 1) != (void)v209)
            {
              BOOL v92 = (void **)*((void *)&v209 + 1);
              do
              {
                int v94 = (void ***)*(v92 - 3);
                v92 -= 3;
                int v93 = v94;
                *((void *)&v209 + 1) = v92;
                if (v94)
                {
                  uint64_t v95 = (void ***)*(v91 - 2);
                  if (v95 == v93)
                  {
                    uint64_t v96 = v93;
                  }
                  else
                  {
                    do
                      uint64_t v95 = sub_1CD39B268(v95 - 16);
                    while (v95 != v93);
                    uint64_t v96 = *v92;
                    BOOL v92 = (void **)*((void *)&v209 + 1);
                  }
                  *(v91 - 2) = v93;
                  operator delete(v96);
                }
                std::string::size_type v91 = v92;
              }
              while (v92 != v90);
            }
            uint64_t v39 = v190;
            if (__p) {
              operator delete(__p);
            }
          }
        }
        long long v105 = *(_OWORD *)(v39 + 6);
        long long v106 = *(_OWORD *)(v39 + 10);
        unsigned int v202 = v39[14];
        *(_OWORD *)unint64_t v200 = v105;
        long long v201 = v106;
        uint64_t v204 = 0;
        uint64_t v205 = 0;
        uint64_t v203 = 0;
        uint64_t v107 = *((void *)v39 + 8);
        uint64_t v108 = *((void *)v39 + 9);
        int64_t v109 = v108 - v107;
        if (v108 != v107)
        {
          unint64_t v110 = 0x8E38E38E38E38E39 * (v109 >> 4);
          if (v110 > 0x1C71C71C71C71C7) {
            goto LABEL_284;
          }
          int v111 = (char *)operator new(v109);
          uint64_t v112 = 0;
          uint64_t v203 = v111;
          uint64_t v204 = v111;
          uint64_t v205 = &v111[144 * v110];
          do
          {
            *(_OWORD *)&v111[v112] = *(_OWORD *)(v107 + v112);
            sub_1CD3B0398((uint64_t)&v111[v112 + 16], (int *)(v107 + v112 + 16));
            v112 += 144;
          }
          while (v107 + v112 != v108);
          uint64_t v204 = &v111[v112];
        }
        sub_1CD3B0510(v206, (uint64_t)(v39 + 22));
        LODWORD(__p) = 2;
        long long v221 = *(_OWORD *)v200;
        long long v222 = v201;
        unsigned int v223 = v202;
        uint64_t v225 = 0;
        int v226 = 0;
        uint64_t v224 = 0;
        int v113 = (char *)v203;
        int v114 = v204;
        int64_t v115 = v204 - (unsigned char *)v203;
        if (v204 != v203)
        {
          unint64_t v116 = 0x8E38E38E38E38E39 * (v115 >> 4);
          if (v116 > 0x1C71C71C71C71C7) {
LABEL_284:
          }
            abort();
          int v117 = (char *)operator new(v115);
          uint64_t v118 = 0;
          uint64_t v224 = v117;
          uint64_t v225 = v117;
          int v226 = &v117[144 * v116];
          do
          {
            *(_OWORD *)&v117[v118] = *(_OWORD *)&v113[v118];
            sub_1CD3B0398((uint64_t)&v117[v118 + 16], (int *)&v113[v118 + 16]);
            v118 += 144;
          }
          while (&v113[v118] != v114);
          uint64_t v225 = &v117[v118];
        }
        sub_1CD3B0510(v227, (uint64_t)v206);
        long long v209 = 0u;
        memset(v210, 0, sizeof(v210));
        char v211 = 1;
        uint64_t v212 = 0;
        uint64_t v213 = 0;
        long long v214 = 0u;
        memset(v215, 0, sizeof(v215));
        int v216 = 16;
        sub_1CD3B0728((uint64_t)&v209, (int **)v220.__r_.__value_.__l.__data_, (int **)v220.__r_.__value_.__l.__size_);
        sub_1CD3AFBA0((uint64_t)&v210[8], &v221);
        sub_1CD61201C((uint64_t)v227);
        uint64_t v119 = v224;
        if (v224)
        {
          int v120 = v225;
          unint64_t v121 = v224;
          if (v225 != v224)
          {
            do
            {
              int v122 = v120 - 144;
              sub_1CD39B268((void ***)v120 - 16);
              int v120 = v122;
            }
            while (v122 != v119);
            unint64_t v121 = v224;
          }
          uint64_t v225 = v119;
          operator delete(v121);
        }
        sub_1CD3B0630(v192, (int ***)&__p);
        sub_1CD39B268((void ***)&__p);
        sub_1CD61201C((uint64_t)v206);
        int v123 = (char *)v203;
        if (v203)
        {
          uint64_t v124 = (void ***)v204;
          unsigned int v125 = v203;
          if (v204 != v203)
          {
            do
            {
              int v126 = v124 - 18;
              sub_1CD39B268(v124 - 16);
              uint64_t v124 = v126;
            }
            while (v126 != (void ***)v123);
            unsigned int v125 = v203;
          }
          uint64_t v204 = v123;
          operator delete(v125);
        }
        char v40 = 0;
      }
LABEL_161:
      std::string::size_type v127 = v220.__r_.__value_.__r.__words[0];
      if (v220.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v128 = v220.__r_.__value_.__l.__size_;
        uint64_t v129 = (void *)v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__l.__size_ != v220.__r_.__value_.__r.__words[0])
        {
          uint64_t v130 = (void **)v220.__r_.__value_.__l.__size_;
          do
          {
            v132 = (void ***)*(v130 - 3);
            v130 -= 3;
            size_t v131 = v132;
            if (v132)
            {
              uint64_t v133 = *(void ****)(v128 - 16);
              uint64_t v134 = v131;
              if (v133 != v131)
              {
                do
                  uint64_t v133 = sub_1CD39B268(v133 - 16);
                while (v133 != v131);
                uint64_t v134 = *v130;
              }
              *(void *)(v128 - 16) = v131;
              operator delete(v134);
            }
            std::string::size_type v128 = (std::string::size_type)v130;
          }
          while (v130 != (void **)v127);
          uint64_t v129 = (void *)v220.__r_.__value_.__r.__words[0];
        }
        v220.__r_.__value_.__l.__size_ = v127;
        operator delete(v129);
      }
      if (v40) {
        return 1;
      }
LABEL_173:
      uint64_t v135 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v5 + 40))(v5) + 8)
                       + 8);
      if (!llvm::MCAsmParser::parseOptionalToken(v5, 25))
      {
        LOBYTE(v15) = 0;
        unint64_t v16 = v194;
        a3 = v199;
        goto LABEL_263;
      }
      unint64_t v44 = v194;
      int v14 = v197[0];
      if (v194 == 0x8E38E38E38E38E39 * ((uint64_t)(a2[6] - a2[5]) >> 4))
      {
        LOWORD(v223) = 1283;
        uint64_t v183 = *a2;
        uint64_t v184 = a2[1];
        *(void *)&long long v221 = "'";
        *(void *)&long long v222 = v183;
        *((void *)&v222 + 1) = v184;
        long long __p = &v221;
        *((void *)&v209 + 1) = "' initializer initializes too many fields";
        *(_WORD *)&v210[8] = 770;
        return llvm::MCAsmParser::Error((uint64_t)v5, v135, (uint64_t)&__p, 0, 0);
      }
LABEL_175:
      llvm::MCAsmParser::parseOptionalToken(v5, 9);
      unint64_t v16 = v44;
      uint64_t v11 = v195;
      uint64_t v10 = v196;
      a3 = v199;
      if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)v5 + 40))(v5) + 8) == v14)
      {
        LOBYTE(v15) = 0;
        unint64_t v16 = v44;
        goto LABEL_263;
      }
    }
  }
  if (sub_1CD3B6414((uint64_t *)v5))
  {
    ++*((_DWORD *)v5 + 266);
    int v14 = 42;
    goto LABEL_8;
  }
  BOOL v181 = v7 == 2 && v9 == 1;
  if (!v181 || *v8 != 63)
  {
    long long __p = "Expected struct initializer";
    *(_WORD *)&v210[8] = 259;
    return llvm::MCAsmParser::Error((uint64_t)v5, (uint64_t)v8, (uint64_t)&__p, 0, 0);
  }
  long long __p = "unexpected token";
  *(_WORD *)&v210[8] = 259;
  uint64_t v15 = 1;
  if (llvm::MCAsmParser::parseToken(v5, 2, (llvm::Twine *)&__p)) {
    return v15;
  }
  *(void *)uint64_t v197 = 0;
LABEL_10:
  unint64_t v16 = 0;
LABEL_263:
  for (uint64_t i = a2[5] + 144 * v16; i != a2[6]; i += 144)
    sub_1CD3AFFF4(a3, (int *)(i + 16));
  if ((v15 & 1) == 0)
  {
    if (v197[1])
    {
      long long __p = "expected '>'";
      *(_WORD *)&v210[8] = 259;
      return sub_1CD3B65C4((uint64_t *)v5, (llvm::Twine *)&__p);
    }
    else
    {
      long long __p = "unexpected token";
      *(_WORD *)&v210[8] = 259;
      return llvm::MCAsmParser::parseToken(v5, v197[0], (llvm::Twine *)&__p);
    }
  }
  return 0;
}

__n128 sub_1CD3B6278(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    int v7 = *(__n128 **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (__n128 *)(a2 + v4 - a4);
    int v7 = *(__n128 **)(a1 + 8);
    do
    {
      v7->n128_u64[0] = 0;
      v7->n128_u64[1] = 0;
      v7[1].n128_u64[0] = 0;
      __n128 result = *v6;
      __n128 *v7 = *v6;
      v7[1].n128_u64[0] = v6[1].n128_u64[0];
      int v7 = (__n128 *)((char *)v7 + 24);
      v6->n128_u64[0] = 0;
      v6->n128_u64[1] = 0;
      v6[1].n128_u64[0] = 0;
      uint64_t v6 = (__n128 *)((char *)v6 + 24);
    }
    while ((unint64_t)v6 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = -8 * ((v4 - a4) >> 3);
    do
    {
      uint64_t v11 = v5 + v9;
      uint64_t v12 = v4 + v9;
      sub_1CD3B0C10((void **)(v4 + v9 - 24));
      __n128 result = *(__n128 *)(v5 + v9 - 24);
      *(__n128 *)(v12 - 24) = result;
      *(void *)(v12 - 8) = *(void *)(v5 + v9 - 8);
      *(void *)(v11 - 24) = 0;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      v9 -= 24;
    }
    while (v10 != v9);
  }
  return result;
}

void *sub_1CD3B6354(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = (void *)*result;
  if ((void *)*result != a3)
  {
    unint64_t v5 = a3;
    do
    {
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      v3 -= 24;
      *(void *)(v3 + 16) = 0;
      long long v6 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)uint64_t v3 = v6;
      *(void *)(v3 + 16) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v4);
  }
  a2[1] = v3;
  int v7 = (void *)result[1];
  uint64_t v8 = (void *)a2[2];
  if (v7 != a3)
  {
    do
    {
      *uint64_t v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
      v8[2] = a3[2];
      v8 += 3;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3 += 3;
    }
    while (a3 != v7);
    uint64_t v3 = a2[1];
  }
  a2[2] = v8;
  uint64_t v9 = (void *)*result;
  *__n128 result = v3;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD3B6414(uint64_t *a1)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1) + 8);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (*(_DWORD *)(v2 + 32) > 0x40u) {
    operator new[]();
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 40))
  {
    ++*((_DWORD *)a1 + 266);
    BOOL v6 = v4 == 0;
    int v7 = 38;
LABEL_8:
    int v14 = v7;
    uint64_t v8 = !v6;
    if (v6) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    uint64_t v15 = v9;
    uint64_t v16 = v4 - v8;
    unsigned int v18 = 64;
    uint64_t v17 = 0;
    uint64_t v11 = a1[6];
    uint64_t v10 = (uint64_t)(a1 + 6);
    *(unsigned char *)(v10 + 99) = 0;
    sub_1CD45128C(v10, v11, (unint64_t)&v14);
    if (v18 >= 0x41 && v17) {
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
    return 1;
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 41))
  {
    ++*((_DWORD *)a1 + 266);
    BOOL v6 = v4 == 0;
    int v7 = 42;
    goto LABEL_8;
  }
  if (!llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 38)) {
    return 0;
  }
  ++*((_DWORD *)a1 + 266);
  return 1;
}

uint64_t sub_1CD3B65C4(uint64_t *a1, llvm::Twine *a2)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1) + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  if (*(_DWORD *)(v4 + 32) > 0x40u) {
    operator new[]();
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 44))
  {
    int v12 = 42;
    if (v6) {
      uint64_t v8 = v5 + 1;
    }
    else {
      uint64_t v8 = v5;
    }
    uint64_t v13 = v8;
    uint64_t v14 = v6 - (v6 != 0);
    unsigned int v16 = 64;
    uint64_t v15 = 0;
    uint64_t v9 = a1[6];
    *((unsigned char *)a1 + 147) = 0;
    sub_1CD45128C((uint64_t)(a1 + 6), v9, (unint64_t)&v12);
    if (v16 >= 0x41 && v15) {
      MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
    goto LABEL_13;
  }
  if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 42, a2))
  {
LABEL_13:
    uint64_t v10 = 0;
    --*((_DWORD *)a1 + 266);
    return v10;
  }
  return 1;
}

uint64_t sub_1CD3B6748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      uint64_t v7 = *(unsigned int *)(a3 + 16);
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(a3 + 8);
      uint64_t v9 = v8 + 16 * v7;
      while (1)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        uint64_t v11 = *(unsigned int *)(v8 + 8);
        int v12 = (uint64_t *)v8;
        if (v11 < 0x41) {
          goto LABEL_14;
        }
        int v13 = 0;
        int64_t v14 = (unint64_t)(v11 + 63) >> 6;
        do
        {
          BOOL v15 = v14-- < 1;
          if (v15) {
            break;
          }
          unint64_t v16 = *(void *)(*(void *)v8 + 8 * v14);
          v13 += __clz(v16);
        }
        while (!v16);
        int v17 = v11 | 0xFFFFFFC0;
        if ((v11 & 0x3F) == 0) {
          int v17 = 0;
        }
        if ((v11 - v13 - v17) <= 0x40) {
          break;
        }
        uint64_t v18 = -1;
LABEL_15:
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 520))(v10, v18, v11 >> 3);
        v8 += 16;
        if (v8 == v9)
        {
          LODWORD(v7) = *(_DWORD *)(a3 + 16);
LABEL_17:
          if (v7 != *(_DWORD *)(a2 + 32))
          {
            uint64_t v19 = *(void *)(a2 + 24) + 16 * v7;
            while (1)
            {
              uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
              uint64_t v21 = *(unsigned int *)(v19 + 8);
              uint64_t v22 = (uint64_t *)v19;
              if (v21 < 0x41) {
                goto LABEL_28;
              }
              int v23 = 0;
              int64_t v24 = (unint64_t)(v21 + 63) >> 6;
              do
              {
                BOOL v15 = v24-- < 1;
                if (v15) {
                  break;
                }
                unint64_t v25 = *(void *)(*(void *)v19 + 8 * v24);
                v23 += __clz(v25);
              }
              while (!v25);
              int v26 = v21 | 0xFFFFFFC0;
              if ((v21 & 0x3F) == 0) {
                int v26 = 0;
              }
              if ((v21 - v23 - v26) <= 0x40) {
                break;
              }
              uint64_t v27 = -1;
LABEL_29:
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v20 + 520))(v20, v27, v21 >> 3);
              v19 += 16;
              if (v19 == *(void *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 32)) {
                return 0;
              }
            }
            uint64_t v22 = *(uint64_t **)v19;
LABEL_28:
            uint64_t v27 = *v22;
            goto LABEL_29;
          }
          return 0;
        }
      }
      int v12 = *(uint64_t **)v8;
LABEL_14:
      uint64_t v18 = *v12;
      goto LABEL_15;
    }
    uint64_t v31 = *(unsigned int *)(a3 + 16);
    if (!v31)
    {
LABEL_40:
      if (v31 == *(_DWORD *)(a2 + 32)) {
        return 0;
      }
      uint64_t v34 = (unsigned __int8 **)(*(void *)(a2 + 24) + 8 * v31);
      do
      {
        uint64_t result = sub_1CD3B1144(a1, *v34, *(unsigned int *)(a2 + 12));
        if (result) {
          break;
        }
        ++v34;
      }
      while (v34 != (unsigned __int8 **)(*(void *)(a2 + 24) + 8 * *(unsigned int *)(a2 + 32)));
      return result;
    }
    int v32 = *(unsigned __int8 ***)(a3 + 8);
    uint64_t v33 = 8 * v31;
    while ((sub_1CD3B1144(a1, *v32, *(unsigned int *)(a2 + 12)) & 1) == 0)
    {
      ++v32;
      v33 -= 8;
      if (!v33)
      {
        LODWORD(v31) = *(_DWORD *)(a3 + 16);
        goto LABEL_40;
      }
    }
    return 1;
  }
  uint64_t v28 = *(void *)(a3 + 8);
  uint64_t v29 = *(void *)(a3 + 16);
  if (v28 != v29)
  {
    while ((sub_1CD3B47F0(a1, a2 + 48, v28) & 1) == 0)
    {
      v28 += 24;
      if (v28 == v29)
      {
        uint64_t v28 = *(void *)(a3 + 8);
        uint64_t v30 = *(void *)(a3 + 16);
        goto LABEL_47;
      }
    }
    return 1;
  }
  uint64_t v30 = *(void *)(a3 + 8);
LABEL_47:
  uint64_t v36 = *(void *)(a2 + 24) + v30 - v28;
  if (v36 == *(void *)(a2 + 32)) {
    return 0;
  }
  do
  {
    uint64_t result = sub_1CD3B47F0(a1, a2 + 48, v36);
    if (result) {
      break;
    }
    v36 += 24;
  }
  while (v36 != *(void *)(a2 + 32));
  return result;
}

void *sub_1CD3B6A5C(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)a1 = v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    int v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  int v17 = *(void **)(v10 + 8 * v16);
LABEL_20:
  if (v17 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return v17 + 1;
  }
  uint64_t v19 = operator new(__n + 57, (std::align_val_t)8uLL);
  uint64_t v20 = v19;
  uint64_t v21 = (char *)(v19 + 7);
  if (__n) {
    memcpy(v19 + 7, a2, __n);
  }
  v21[__n] = 0;
  v20[2] = 0;
  v20[3] = 0;
  *uint64_t v20 = __n;
  v20[1] = 0;
  *((_DWORD *)v20 + 6) = 2;
  v20[5] = 0;
  v20[6] = 0;
  void v20[4] = 0;
  *(void *)(v10 + 8 * v16) = v20;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16)); ; ++i)
  {
    int v17 = *i;
    if (*i && v17 + 1 != 0) {
      break;
    }
  }
  return v17 + 1;
}

uint64_t sub_1CD3B6C6C(uint64_t a1)
{
  uint64_t v2 = *(llvm::MCAsmParser **)a1;
  if (sub_1CD3AE788(*(llvm::MCAsmParser **)a1, *(void *)(a1 + 8)))
  {
    uint64_t v8 = "expected text item";
    __int16 v9 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)v2, (uint64_t)&v8, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    char v4 = *(unsigned char *)(v3 + 23);
    if (v4 >= 0) {
      unsigned int v5 = *(const std::string::value_type **)(a1 + 8);
    }
    else {
      unsigned int v5 = *(const std::string::value_type **)v3;
    }
    if (v4 >= 0) {
      std::string::size_type v6 = v4 & 0x7F;
    }
    else {
      std::string::size_type v6 = *(void *)(v3 + 8);
    }
    std::string::append(*(std::string **)(a1 + 16), v5, v6);
    return 0;
  }
}

void *sub_1CD3B6CF8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)a1 = v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    int v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  int v17 = *(void **)(v10 + 8 * v16);
LABEL_20:
  uint64_t i = (void *)(v10 + 8 * v16);
  if (v17 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  uint64_t v21 = (char *)operator new(__n + 41, (std::align_val_t)8uLL);
  uint64_t v22 = v21;
  int v23 = v21 + 40;
  if (__n) {
    memcpy(v21 + 40, a2, __n);
  }
  v23[__n] = 0;
  *(void *)uint64_t v22 = __n;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  void *i = v22;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CD3B6EF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v69[0] = a3;
  v69[1] = a4;
  if (!a4)
  {
    uint64_t result = 0;
    *(_OWORD *)a5 = *(_OWORD *)a2;
    int v31 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a5 + 16) = v31;
    *(_DWORD *)(a5 + 20) = v31;
    *(_DWORD *)(a5 + 24) = 1;
    return result;
  }
  LOBYTE(v65) = 46;
  unint64_t v9 = llvm::StringRef::find(v69, (char *)&v65, 1uLL, 0);
  if (a4 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = a4;
  }
  if (a4 >= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = a4;
  }
  unint64_t v12 = a3 + v11;
  unint64_t v13 = a4 - v11;
  if (v9 == -1)
  {
    unint64_t v10 = a4;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (v9 == -1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  v68[0] = a3;
  v68[1] = v10;
  llvm::StringRef::lower((llvm::StringRef *)v68, &v65);
  long long __p = v65;
  unint64_t v59 = v14;
  if (v67 >= 0) {
    uint64_t v16 = &v65;
  }
  else {
    uint64_t v16 = (void **)v65;
  }
  if (v67 >= 0) {
    size_t v17 = v67 & 0x7F;
  }
  else {
    size_t v17 = v66;
  }
  uint64_t v18 = *(unsigned int *)(a1 + 624);
  uint64_t v61 = a5;
  unint64_t v62 = v15;
  int v63 = v67;
  if (v18)
  {
    int v19 = 0;
    if (v17)
    {
      size_t v20 = v17;
      uint64_t v21 = v16;
      do
      {
        int v22 = *(unsigned __int8 *)v21;
        uint64_t v21 = (void **)((char *)v21 + 1);
        int v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    uint64_t v23 = *(void *)(a1 + 616);
    int v24 = 1;
    int v25 = v19;
    while (1)
    {
      uint64_t v26 = v25 & (v18 - 1);
      uint64_t v27 = *(void **)(v23 + 8 * v26);
      if (v27 != (void *)-8)
      {
        if (!v27)
        {
          uint64_t v28 = v18;
          goto LABEL_33;
        }
        if (*(_DWORD *)(v23 + 8 * v18 + 8 + 4 * v26) == v19
          && v17 == *v27
          && (!v17 || !memcmp(v16, (char *)v27 + *(unsigned int *)(a1 + 636), v17)))
        {
          break;
        }
      }
      int v25 = v24 + v26;
      ++v24;
    }
    uint64_t v28 = (int)v26;
    if (v26 == -1) {
      uint64_t v28 = v18;
    }
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v23 = *(void *)(a1 + 616);
  }
LABEL_33:
  uint64_t v29 = (void *)(v23 + 8 * v28);
  if (v63 < 0)
  {
    operator delete(__p);
    uint64_t v23 = *(void *)(a1 + 616);
    LODWORD(v18) = *(_DWORD *)(a1 + 624);
  }
  if (v29 != (void *)(v23 + 8 * v18)) {
    return sub_1CD3B6EF8(a1, *v29 + 8, v59);
  }
  llvm::StringRef::lower((llvm::StringRef *)v68, &v65);
  int v32 = v67;
  __int16 v56 = v65;
  if (v67 >= 0) {
    uint64_t v33 = &v65;
  }
  else {
    uint64_t v33 = (void **)v65;
  }
  if (v67 >= 0) {
    size_t v34 = v67 & 0x7F;
  }
  else {
    size_t v34 = v66;
  }
  uint64_t v35 = *(unsigned int *)(a2 + 72);
  if (v35)
  {
    int __pa = v67;
    int v36 = 0;
    if (v34)
    {
      size_t v37 = v34;
      unsigned int v38 = v33;
      do
      {
        int v39 = *(unsigned __int8 *)v38;
        unsigned int v38 = (void **)((char *)v38 + 1);
        int v36 = 33 * v36 + v39;
        --v37;
      }
      while (v37);
    }
    unsigned int v40 = v35 - 1;
    uint64_t v41 = *(void *)(a2 + 64);
    uint64_t v64 = *(unsigned int *)(a2 + 72);
    uint64_t v42 = v41 + 8 * v35 + 8;
    uint64_t v43 = *(unsigned int *)(a2 + 84);
    int v44 = 1;
    for (int i = v36; ; int i = v46 + v44++)
    {
      uint64_t v46 = i & v40;
      uint64_t v47 = *(void **)(v41 + 8 * v46);
      if (v47 != (void *)-8)
      {
        if (!v47) {
          goto LABEL_61;
        }
        if (*(_DWORD *)(v42 + 4 * v46) == v36 && v34 == *v47 && (!v34 || !memcmp(v33, (char *)v47 + v43, v34))) {
          break;
        }
      }
    }
    if (v46 != -1)
    {
      uint64_t v48 = (int)v46;
      uint64_t v49 = a2;
      uint64_t v50 = v64;
      int v32 = __pa;
      goto LABEL_63;
    }
LABEL_61:
    uint64_t v50 = v64;
    int v32 = __pa;
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v41 = *(void *)(a2 + 64);
  }
  uint64_t v48 = v50;
  uint64_t v49 = a2;
LABEL_63:
  uint64_t v51 = v41 + 8 * v48;
  if (v32 < 0)
  {
    operator delete(v56);
    uint64_t v41 = *(void *)(v49 + 64);
    uint64_t v50 = *(unsigned int *)(v49 + 72);
  }
  if (v51 == v41 + 8 * v50) {
    return 1;
  }
  uint64_t v52 = *(void *)(*(void *)v51 + 8);
  uint64_t v53 = *(void *)(v49 + 40);
  uint64_t v54 = (_DWORD *)(v53 + 144 * v52);
  if (v62)
  {
    if (*(_DWORD *)(v53 + 144 * v52 + 16) != 2 || (sub_1CD3B6EF8(a1, v53 + 144 * v52 + 48, v59) & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    *(_DWORD *)(v61 + 32) += *v54;
  }
  else
  {
    *(_DWORD *)(v61 + 32) += *v54;
    unsigned int v55 = (int32x2_t *)(v53 + 144 * v52);
    *(_DWORD *)(v61 + 16) = v55->i32[1];
    *(int32x2_t *)(v61 + 20) = vrev64_s32(v55[1]);
    uint64_t result = 0;
    if (v55[2].i32[0] == 2)
    {
      *(_OWORD *)uint64_t v61 = *(_OWORD *)(v53 + 144 * v52 + 48);
    }
    else
    {
      *(void *)uint64_t v61 = "";
      *(void *)(v61 + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_1CD3B7300(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, unint64_t a7, int a8)
{
  if (!*(unsigned char *)(a1 + 20)
    && *(void *)(a1 + 8) == a3
    && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a2, a3))
  {
    *(_DWORD *)(a1 + 16) = a8;
    *(unsigned char *)(a1 + 20) = 1;
  }

  return sub_1CD3B739C(a1, a4, a5, a6, a7, a8);
}

uint64_t sub_1CD3B739C(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  if (!*(unsigned char *)(a1 + 20))
  {
    if ((uint64_t v10 = *(void *)(a1 + 8), v10 == a3)
      && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a2, a3)
      || v10 == a5 && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a4, a5))
    {
      *(_DWORD *)(a1 + 16) = a6;
      *(unsigned char *)(a1 + 20) = 1;
    }
  }
  return a1;
}

unint64_t sub_1CD3B742C(unint64_t result, int a2, uint64_t a3, int a4)
{
  unint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    int v14 = a2;
    uint64_t v15 = a3;
    int v16 = a4;
    char v17 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    char v21 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    int v26 = 1;
    char v27 = 0;
    uint64_t result = sub_1CD8F3AF8(result, (unint64_t)&v14, 1);
    size_t v7 = (_OWORD *)(*(void *)v4 + ((unint64_t)*(unsigned int *)(v4 + 8) << 7));
    long long v9 = *(_OWORD *)(result + 32);
    long long v8 = *(_OWORD *)(result + 48);
    long long v10 = *(_OWORD *)(result + 16);
    _OWORD *v7 = *(_OWORD *)result;
    v7[1] = v10;
    unint64_t v7[2] = v9;
    v7[3] = v8;
    long long v11 = *(_OWORD *)(result + 112);
    long long v12 = *(_OWORD *)(result + 64);
    long long v13 = *(_OWORD *)(result + 80);
    v7[6] = *(_OWORD *)(result + 96);
    v7[7] = v11;
    v7[4] = v12;
    v7[5] = v13;
  }
  else
  {
    uint64_t v6 = *(void *)result + (v5 << 7);
    *(_DWORD *)uint64_t v6 = a2;
    *(void *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = a4;
    *(unsigned char *)(v6 + 20) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(unsigned char *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(void *)(v6 + 104) = 0;
    *(_DWORD *)(v6 + 112) = 1;
    *(unsigned char *)(v6 + 120) = 0;
  }
  ++*(_DWORD *)(v4 + 8);
  return result;
}

uint64_t sub_1CD3B752C(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2 = *((void *)a1 + 1);
  unint64_t v3 = *((void *)a2 + 1);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v3 < v2) {
    return 1;
  }
  if (byte_1CFB33C02[*a1] > byte_1CFB33C02[*a2]) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t sub_1CD3B757C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 688);
  uint64_t v2 = *(void *)(result + 680);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      unint64_t v4 = *(char ***)(v1 - 8);
      v1 -= 8;
      uint64_t v5 = *v4;
      uint64_t v6 = "while in macro instantiation";
      __int16 v7 = 259;
      v8[0] = 0;
      v8[1] = 0;
      uint64_t result = llvm::SourceMgr::PrintMessage(*(llvm **)(v3 + 240), v5, 3, (llvm::Twine *)&v6, v8, 1, 0, 0, 1u);
    }
    while (v1 != v2);
  }
  return result;
}

BOOL sub_1CD3B7614(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 136);
  while (1)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 == 2)
    {
      long long v12 = *(unsigned __int8 **)(v9 + 8);
      long long v11 = *(unsigned __int8 **)(v9 + 16);
      v30[0] = v12;
      v30[1] = v11;
      v30[2] = 0;
      if (v11 == (unsigned __int8 *)2)
      {
        if (!llvm::StringRef::compare_insensitive(v30, "or", 2uLL))
        {
          int v10 = 29;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "eq", 2uLL))
        {
          int v10 = 28;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "ne", 2uLL))
        {
          int v10 = 35;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "lt", 2uLL))
        {
          int v10 = 38;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "le", 2uLL))
        {
          int v10 = 39;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "gt", 2uLL))
        {
          int v10 = 42;
          goto LABEL_6;
        }
        int v23 = 43;
        long long v24 = "ge";
        unint64_t v25 = 2;
      }
      else
      {
        if (v11 != (unsigned __int8 *)3)
        {
          int v10 = 2;
          goto LABEL_6;
        }
        if (!llvm::StringRef::compare_insensitive(v30, "and", 3uLL))
        {
          int v10 = 32;
          goto LABEL_6;
        }
        int v23 = 34;
        long long v24 = "not";
        unint64_t v25 = 3;
      }
      if (llvm::StringRef::compare_insensitive(v30, (unsigned __int8 *)v24, v25)) {
        int v10 = 2;
      }
      else {
        int v10 = v23;
      }
    }
LABEL_6:
    int v29 = 0;
    unsigned int v13 = sub_1CD3B7988(*(unsigned char *)(*(void *)(a1 + 232) + 472), *(_DWORD *)(a1 + 1064), v10, &v29);
    if (v13 < a2) {
      break;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    v30[0] = 0;
    if ((*(unsigned int (**)(void, unsigned __int8 **, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v30, a4)|| v13 < sub_1CD3B7988(*(unsigned char *)(*(void *)(a1 + 232) + 472), *(_DWORD *)(a1 + 1064), **(_DWORD **)(a1 + 48), &v28)&& sub_1CD3B7614(a1, v13 + 1, v30, a4))
    {
      break;
    }
    int v14 = v29;
    unint64_t v15 = *a3;
    int v16 = v30[0];
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    uint64_t v18 = v17;
    *(void *)(v17 + 272) += 32;
    uint64_t v19 = *(void *)(v17 + 192);
    if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 32 > *(void *)(v17 + 200) - v19)
    {
      unsigned int v21 = *(_DWORD *)(v17 + 216) >> 7;
      if (v21 >= 0x1E) {
        LOBYTE(v21) = 30;
      }
      uint64_t v27 = 4096 << v21;
      unint64_t v20 = (unint64_t)operator new(4096 << v21, (std::align_val_t)8uLL);
      unint64_t v22 = *(unsigned int *)(v18 + 216);
      if (v22 >= *(unsigned int *)(v18 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v18 + 208) + 8 * v22) = v20;
      ++*(_DWORD *)(v18 + 216);
      *(void *)(v18 + 200) = v20 + v27;
    }
    else
    {
      unint64_t v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v18 + 192) = v20 + 32;
    *(unsigned char *)unint64_t v20 = 0;
    *(_DWORD *)(v20 + 1) = v14 & 0xFFFFFF | (*(unsigned __int8 *)(v20 + 4) << 24);
    *(void *)(v20 + 8) = v8;
    *(void *)(v20 + 16) = v15;
    *(void *)(v20 + 24) = v16;
    *a3 = v20;
  }
  return v13 >= a2;
}

uint64_t sub_1CD3B7988(char a1, int a2, int a3, int *a4)
{
  uint64_t result = 0;
  uint64_t v6 = 2;
  int v7 = 6;
  switch(a3)
  {
    case 12:
      int v7 = 0;
      uint64_t v6 = 4;
      goto LABEL_25;
    case 13:
      uint64_t v6 = 4;
      int v7 = 18;
      goto LABEL_25;
    case 15:
      uint64_t v6 = 6;
      int v7 = 2;
      goto LABEL_25;
    case 23:
      uint64_t v6 = 6;
      int v7 = 11;
      goto LABEL_25;
    case 28:
      int v7 = 3;
      uint64_t v6 = 3;
      goto LABEL_25;
    case 29:
      uint64_t v6 = 5;
      int v7 = 13;
      goto LABEL_25;
    case 30:
      uint64_t v6 = 1;
      int v7 = 7;
      goto LABEL_25;
    case 31:
      uint64_t v6 = 5;
      int v7 = 19;
      goto LABEL_25;
    case 32:
      uint64_t v6 = 5;
      int v7 = 1;
      goto LABEL_25;
    case 33:
      goto LABEL_25;
    case 35:
    case 41:
      uint64_t v6 = 3;
      int v7 = 12;
      goto LABEL_25;
    case 36:
      uint64_t v6 = 6;
      int v7 = 10;
      goto LABEL_25;
    case 38:
      uint64_t v6 = 3;
      int v7 = 8;
      goto LABEL_25;
    case 39:
      uint64_t v6 = 3;
      int v7 = 9;
      goto LABEL_25;
    case 40:
      uint64_t v6 = 6;
      int v7 = 15;
      goto LABEL_25;
    case 42:
      if (a2) {
        return 0;
      }
      uint64_t v6 = 3;
      int v7 = 4;
      goto LABEL_25;
    case 43:
      uint64_t v6 = 3;
      int v7 = 5;
      goto LABEL_25;
    case 44:
      if (a2) {
        return 0;
      }
      if (a1) {
        int v7 = 17;
      }
      else {
        int v7 = 16;
      }
      uint64_t v6 = 6;
LABEL_25:
      *a4 = v7;
      return v6;
    default:
      return result;
  }
}

void sub_1CD3B7B38()
{
}

uint64_t sub_1CD3B7B4C(void *a1, uint64_t a2)
{
  a1[3] = a2;
  a1[4] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v3 = a1[3];
  a1[1] = v3;
  (*(void (**)(uint64_t, const char *, uint64_t, void *, uint64_t (*)()))(*(void *)v3 + 16))(v3, ".text", 5, a1, sub_1CD3B7E5C);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".data", 5, a1, sub_1CD3B7E64);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".section", 8, a1, sub_1CD3B7F0C);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".size", 5, a1, sub_1CD3B8974);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".type", 5, a1, sub_1CD3B8B1C);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".ident", 6, a1, sub_1CD3B8DF8);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".weak", 5, a1, sub_1CD3B8FE4);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".local", 6, a1, sub_1CD3B8FE4);
  (*(void (**)(void, const char *, uint64_t, void *, uint64_t (*)(uint64_t)))(*(void *)a1[1] + 16))(a1[1], ".internal", 9, a1, sub_1CD3B8FE4);
  unint64_t v4 = *(uint64_t (**)(void))(*(void *)a1[1] + 16);

  return v4();
}

uint64_t sub_1CD3B7E5C()
{
  return 0;
}

uint64_t sub_1CD3B7E64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8))
                             + 168)
                 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v3 + 168))(v3, v2, 0);
  return 0;
}

uint64_t sub_1CD3B7F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v60))
  {
    unint64_t v20 = "expected identifier in directive";
    goto LABEL_58;
  }
  if (sub_1CD3B8818(a1, 25, ",")) {
    return 1;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)v6 != 3)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(v6 + 8);
    uint64_t v24 = *(void *)(v6 + 16);
    unint64_t v62 = "expected string in directive, instead got: ";
    uint64_t v63 = 43;
    *(void *)&long long v64 = v23;
    *((void *)&v64 + 1) = v24;
    __int16 v65 = 1285;
    return llvm::MCAsmParser::Error(v22, v23, (uint64_t)&v62, 0, 0);
  }
  if (v61 < 5)
  {
    int v7 = 0;
    int v8 = 0;
LABEL_17:
    BOOL v11 = v61 < 7;
    goto LABEL_18;
  }
  if (*(_DWORD *)v60 == 1952539694 && *(unsigned char *)(v60 + 4) == 97)
  {
    int v8 = 19;
    int v7 = 1;
    goto LABEL_17;
  }
  if (v61 < 6)
  {
    BOOL v10 = *(_DWORD *)v60 == 1935832110 && *(unsigned char *)(v60 + 4) == 115;
    BOOL v11 = 1;
    if (!v10)
    {
LABEL_15:
      int v7 = 0;
      int v8 = 0;
      goto LABEL_18;
    }
LABEL_61:
    int v8 = 12;
    goto LABEL_66;
  }
  if (*(_DWORD *)v60 == 1633973294 && *(_WORD *)(v60 + 4) == 24948)
  {
    int v8 = 13;
    goto LABEL_66;
  }
  if (*(_DWORD *)v60 == 1935832110 && *(unsigned char *)(v60 + 4) == 115) {
    goto LABEL_61;
  }
  if (v61 >= 7)
  {
    if (*(_DWORD *)v60 == 1685025326 && *(_DWORD *)(v60 + 3) == 1635017060)
    {
      int v8 = 4;
      goto LABEL_66;
    }
    BOOL v11 = 0;
    goto LABEL_15;
  }
  int v7 = 0;
  int v8 = 0;
  BOOL v11 = 1;
LABEL_18:
  if (v61 >= 5 && !v7 && (*(_DWORD *)v60 == 2019914798 ? (BOOL v12 = *(unsigned char *)(v60 + 4) == 116) : (BOOL v12 = 0), v12))
  {
    int v8 = 2;
  }
  else if (v61 >= 0xF {
         && !v7
  }
         && (*(void *)v60 == 0x5F6D6F747375632ELL ? (BOOL v13 = *(void *)(v60 + 7) == 0x6E6F69746365735FLL) : (BOOL v13 = 0),
             v13))
  {
    int v8 = 0;
  }
  else if (v61 >= 4 && !v7 && *(_DWORD *)v60 == 1936941614)
  {
    int v8 = 15;
  }
  else
  {
    if (v61 < 0xB
      || v7
      || (*(void *)v60 == 0x72615F74696E692ELL ? (BOOL v14 = *(void *)(v60 + 3) == 0x79617272615F7469) : (BOOL v14 = 0), !v14))
    {
      if (v7) {
        char v15 = 1;
      }
      else {
        char v15 = v11;
      }
      if ((v15 & 1) == 0)
      {
        BOOL v16 = *(_DWORD *)(v60 + 3) == 1600615778;
        BOOL v17 = *(_DWORD *)v60 == 1650811950;
        LOBYTE(v7) = v17 && v16;
        if (v17 && v16) {
          int v8 = 0;
        }
      }
      goto LABEL_67;
    }
    int v8 = 19;
  }
LABEL_66:
  LOBYTE(v7) = 1;
LABEL_67:
  uint64_t v25 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  unint64_t v26 = *(void *)(v25 + 16);
  unint64_t v27 = v26 - 1;
  unint64_t v28 = v26 != 0;
  if (v28 > v26 - 1) {
    unint64_t v27 = v26 != 0;
  }
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  unint64_t v29 = v26 - v28;
  if (!v29)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
LABEL_84:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    if (sub_1CD3B8818(a1, 25, ",") & 1) != 0 || (sub_1CD3B8818(a1, 45, "@")) {
      return 1;
    }
    long long v59 = 0uLL;
    if (!v30) {
      goto LABEL_99;
    }
    if (**(_DWORD **)(*(void *)(a1 + 32) + 8) != 25)
    {
      uint64_t v43 = "expected group name";
      goto LABEL_123;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    if (**(_DWORD **)(*(void *)(a1 + 32) + 8) == 4)
    {
      long long v59 = *(_OWORD *)(*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8))
                                  + 8)
                      + 8);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    }
    else if ((*(unsigned int (**)(void, long long *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v59))
    {
      uint64_t v43 = "invalid group name";
      goto LABEL_123;
    }
    if (**(_DWORD **)(*(void *)(a1 + 32) + 8) != 25) {
      goto LABEL_99;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    long long v56 = 0uLL;
    if (((*(uint64_t (**)(void, long long *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v56) & 1) == 0)
    {
      if (*((void *)&v56 + 1) != 6
        || (*(_DWORD *)v56 == 1684893539 ? (BOOL v35 = *(unsigned __int16 *)(v56 + 4) == 29793) : (BOOL v35 = 0), !v35))
      {
        uint64_t v43 = "Linkage must be 'comdat'";
        goto LABEL_123;
      }
LABEL_99:
      if (sub_1CD3B8818(a1, 9, "eol")) {
        return 1;
      }
      size_t v37 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v65 = 261;
      unint64_t v62 = (const char *)v60;
      uint64_t v63 = v61;
      __int16 v58 = 261;
      long long v56 = v59;
      if ((_BYTE)v7) {
        int v38 = v8;
      }
      else {
        int v38 = 19;
      }
      uint64_t WasmSection = llvm::MCContext::getWasmSection(v37, (llvm::Twine *)&v62, v38, v32, (llvm::Twine *)&v56, -1);
      unint64_t v40 = *(unsigned int *)(WasmSection + 256);
      if (v40 != v32)
      {
        uint64_t v44 = *(void *)(a1 + 24);
        __int16 v55 = 1283;
        v54[0] = "changed section flags for ";
        v54[2] = v60;
        v54[3] = v61;
        *(void *)&long long v56 = v54;
        uint64_t v57 = ", expected: 0x";
        __int16 v58 = 770;
        if (v40)
        {
          uint64_t v45 = (char *)&v64 + 1;
          do
          {
            *--uint64_t v45 = a0123456789abcd_6[v40 & 0xF];
            BOOL v46 = v40 > 0xF;
            v40 >>= 4;
          }
          while (v46);
        }
        else
        {
          uint64_t v45 = (char *)&v64;
          LOBYTE(v64) = 48;
        }
        sub_1CC028D80(__p, v45, (char *)&v64 + 1, (char *)&v64 + 1 - v45);
        char v47 = v58;
        if (v58 == 1)
        {
          unint64_t v62 = (const char *)__p;
          long long v64 = v53;
          __int16 v65 = 260;
          int v66 = v51;
          __int16 v67 = v52;
        }
        else if ((_BYTE)v58)
        {
          if (HIBYTE(v58) != 1) {
            char v47 = 2;
          }
          uint64_t v48 = (const char *)&v56;
          if (HIBYTE(v58) == 1) {
            uint64_t v48 = (const char *)v56;
          }
          unint64_t v62 = v48;
          uint64_t v63 = *((void *)&v56 + 1);
          *(void *)&long long v64 = __p;
          LOBYTE(v65) = v47;
          HIBYTE(v65) = 4;
        }
        else
        {
          __int16 v65 = 256;
        }
        llvm::MCAsmParser::Error(v44, a4, (uint64_t)&v62, 0, 0);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }
      if (!v31)
      {
LABEL_116:
        uint64_t v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v42 + 168))(v42, WasmSection, 0);
        return 0;
      }
      int v41 = *(unsigned __int8 *)(WasmSection + 220);
      if ((v41 - 15) < 6 || (v41 & 0xFC) == 4 || (v41 & 0xFC) == 8 || (v41 - 12) < 3)
      {
        *(unsigned char *)(WasmSection + 252) = 1;
        goto LABEL_116;
      }
      uint64_t v22 = *(void *)(a1 + 24);
      unint64_t v62 = "Only data sections can be passive";
      __int16 v65 = 259;
      uint64_t v23 = a4;
      return llvm::MCAsmParser::Error(v22, v23, (uint64_t)&v62, 0, 0);
    }
    uint64_t v43 = "invalid linkage";
LABEL_123:
    unint64_t v62 = v43;
    __int16 v65 = 259;
    if (llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (uint64_t)&v62, 0, 0)) {
      return 1;
    }
    goto LABEL_99;
  }
  int v32 = 0;
  int v31 = 0;
  int v30 = 0;
  uint64_t v33 = (char *)(*(void *)(v25 + 8) + v28);
  while (1)
  {
    int v34 = *v33;
    if (v34 > 83) {
      break;
    }
    if (v34 == 71)
    {
      int v30 = 1;
    }
    else
    {
      if (v34 != 83) {
        goto LABEL_119;
      }
      v32 |= 1u;
    }
LABEL_83:
    ++v33;
    if (!--v29) {
      goto LABEL_84;
    }
  }
  if (v34 == 84)
  {
    v32 |= 2u;
    goto LABEL_83;
  }
  if (v34 == 112)
  {
    int v31 = 1;
    goto LABEL_83;
  }
LABEL_119:
  unint64_t v20 = "unknown flag";
LABEL_58:
  unint64_t v62 = v20;
  __int16 v65 = 259;
  return llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (uint64_t)&v62, 0, 0);
}

uint64_t sub_1CD3B8818(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (**(_DWORD **)(*(void *)(a1 + 32) + 8) == a2)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  else
  {
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v16, "Expected ");
    uint64_t v6 = std::string::append(&v16, __s);
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ", instead got: ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    uint64_t v19 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    BOOL v10 = __p;
    if (v19 < 0) {
      BOOL v10 = (void **)__p[0];
    }
    BOOL v11 = (void *)(HIBYTE(v19) & 0x7F);
    if (v19 < 0) {
      BOOL v11 = __p[1];
    }
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
    v20[0] = v10;
    v20[1] = v11;
    v20[2] = v14;
    v20[3] = v15;
    __int16 v21 = 1285;
    uint64_t v4 = llvm::MCAsmParser::Error(v12, v14, (uint64_t)v20, 0, 0);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

uint64_t sub_1CD3B8974(uint64_t a1)
{
  int v8 = 0;
  std::string::size_type v9 = 0;
  if ((*(unsigned int (**)(void, unsigned __int8 ***))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v8))
  {
    v6[0] = (unsigned __int8 **)"expected identifier in directive";
    __int16 v7 = 259;
    return llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (uint64_t)v6, 0, 0);
  }
  else
  {
    uint64_t v2 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v7 = 261;
    v6[0] = v8;
    v6[1] = v9;
    llvm::MCContext::getOrCreateSymbol(v2, v6);
    if (sub_1CD3B8818(a1, 25, ",")) {
      return 1;
    }
    uint64_t v5 = 0;
    v6[0] = 0;
    if ((*(uint64_t (**)(void, uint64_t *, unsigned __int8 ***))(**(void **)(a1 + 24) + 232))(*(void *)(a1 + 24), &v5, v6) & 1) != 0|| (sub_1CD3B8818(a1, 9, "eol"))
    {
      return 1;
    }
    else
    {
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 424))();
      return 0;
    }
  }
}

uint64_t sub_1CD3B8B1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    uint64_t v3 = *(llvm::MCContext **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8))
                             + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(unsigned __int8 ***)(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    __int16 v24 = 261;
    unint64_t v20 = v6;
    uint64_t v21 = v5;
    uint64_t v7 = llvm::MCContext::getOrCreateSymbol(v3, &v20);
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(_DWORD *)v8 == 25)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(_DWORD *)v8 == 45)
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
        if (*(_DWORD *)v8 == 2)
        {
          uint64_t v9 = *(void *)(v8 + 8);
          uint64_t v10 = *(void *)(v8 + 16);
          if (v10 != 6)
          {
            if (v10 == 8 && *(void *)v9 == 0x6E6F6974636E7566)
            {
              if (!*(unsigned char *)(v7 + 36)) {
                *(unsigned char *)(v7 + 36) = 1;
              }
              *(_DWORD *)(v7 + 32) = 0;
              uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
              if (*(void *)(*(void *)(*(void *)(v11 + 112) + 32 * *(unsigned int *)(v11 + 120) - 32) + 232)) {
                *(unsigned char *)(v7 + 42) = 1;
              }
              goto LABEL_26;
            }
            goto LABEL_28;
          }
          if (*(_DWORD *)v9 == 1651469415 && *(_WORD *)(v9 + 4) == 27745)
          {
            int v18 = *(unsigned __int8 *)(v7 + 36);
            *(_DWORD *)(v7 + 32) = 2;
            if (!v18) {
LABEL_25:
            }
              *(unsigned char *)(v7 + 36) = 1;
          }
          else
          {
            if (*(_DWORD *)v9 != 1701470831 || *(_WORD *)(v9 + 4) != 29795)
            {
LABEL_28:
              uint64_t v15 = *(void *)(a1 + 24);
              std::string v16 = "Unknown WASM symbol type: ";
              uint64_t v17 = 26;
              goto LABEL_29;
            }
            int v14 = *(unsigned __int8 *)(v7 + 36);
            *(_DWORD *)(v7 + 32) = 1;
            if (!v14) {
              goto LABEL_25;
            }
          }
LABEL_26:
          (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
          return sub_1CD3B8818(a1, 9, "EOL");
        }
      }
    }
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 16);
    std::string v16 = "Expected label,@type declaration, got: ";
    uint64_t v17 = 39;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t v10 = *(void *)(v2 + 16);
    std::string v16 = "Expected label after .type directive, got: ";
    uint64_t v17 = 43;
  }
LABEL_29:
  unint64_t v20 = (unsigned __int8 **)v16;
  uint64_t v21 = v17;
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  __int16 v24 = 1285;
  return llvm::MCAsmParser::Error(v15, v9, (uint64_t)&v20, 0, 0);
}

uint64_t sub_1CD3B8DF8(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 3
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)),
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8)),
        **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9))
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v2 + 680))();
    return 0;
  }
  else
  {
    uint64_t v4 = "unexpected token in '.ident' directive";
    __int16 v5 = 259;
    return llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
}

uint64_t sub_1CD3B8FE4(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
LABEL_2:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  uint64_t v8 = 0;
  for (int i = 0;
        ((*(uint64_t (**)(void, unsigned __int8 ***))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v8) & 1) == 0;
        int i = 0)
  {
    uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v7 = 261;
    v6[0] = v8;
    v6[1] = i;
    llvm::MCContext::getOrCreateSymbol(v3, v6);
    uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v4 + 304))();
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9) {
      goto LABEL_2;
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
    {
      __int16 v5 = "unexpected token in directive";
      goto LABEL_9;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v8 = 0;
  }
  __int16 v5 = "expected identifier in directive";
LABEL_9:
  v6[0] = (unsigned __int8 **)v5;
  __int16 v7 = 259;
  return llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (uint64_t)v6, 0, 0);
}

void sub_1CD3B93C0()
{
}

uint64_t sub_1CD3B93D4(void *a1, uint64_t a2)
{
  a1[3] = a2;
  a1[4] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v3 = a1[3];
  a1[1] = v3;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);

  return v4();
}

void sub_1CD3B947C()
{
}

void sub_1CD3B9498()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

BOOL sub_1CD3BA4C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    BOOL v2 = *(_DWORD *)(v1 + 8) == 9;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 **)(v1 + 48);
  if (!v4) {
    uint64_t v4 = (unsigned __int16 *)(*(void *)(v1 + 56) + 6);
  }
  return *v4 == 332;
}

uint64_t sub_1CD3BA504(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    BOOL v2 = *(_DWORD *)(v1 + 8) == 9;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 64);
  if (v4) {
    return *(unsigned int *)(v4 + 28);
  }
  uint64_t v5 = *(void *)(v1 + 72);
  if (!v5) {
    return 0;
  }
  return *(void *)(v5 + 24);
}

uint64_t sub_1CD3BA540(void *a1, unint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5] - (void)v6;
  if (!v7) {
    return 0;
  }
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
  int v14 = (void *)a1[4];
  do
  {
    unint64_t v15 = v13 >> 1;
    std::string v16 = &v14[5 * (v13 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 5;
    v13 += ~(v13 >> 1);
    if (v18 > a2) {
      unint64_t v13 = v15;
    }
    else {
      int v14 = v17;
    }
  }
  while (v13);
  if (v14 == v6) {
    return 0;
  }
  uint64_t v19 = *(v14 - 4);
  if (v19)
  {
    if (*(v14 - 5) + v19 <= a2) {
      return 0;
    }
  }
  unint64_t v20 = (const void *)*(v14 - 3);
  if (!v20)
  {
    long long __dst = 0uLL;
    unint64_t v39 = 0;
    goto LABEL_22;
  }
  size_t v21 = *(v14 - 2);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_48;
  }
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (long long *)operator new(v24 + 1);
    *((void *)&__dst + 1) = v21;
    unint64_t v39 = v25 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v39) = *(v14 - 2);
    p_dst = &__dst;
    if (!v21) {
      goto LABEL_21;
    }
  }
  memmove(p_dst, v20, v21);
LABEL_21:
  *((unsigned char *)p_dst + v21) = 0;
LABEL_22:
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = __dst;
  *(void *)(a3 + 16) = v39;
  *a4 = *(v14 - 5);
  *a5 = *(v14 - 4);
  unsigned int v26 = *((_DWORD *)v14 - 2);
  if (!v26) {
    return 1;
  }
  unint64_t v27 = (_DWORD *)a1[7];
  uint64_t v28 = a1[8] - (void)v27;
  if (!v28) {
    return 1;
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
  int v30 = (_DWORD *)a1[7];
  do
  {
    unint64_t v31 = v29 >> 1;
    int v32 = &v30[6 * (v29 >> 1)];
    if (v26 >= *v32 && (*v32 < v26 || !*(void *)&v30[6 * v31 + 4]))
    {
      int v30 = v32 + 6;
      unint64_t v31 = v29 + ~v31;
    }
    unint64_t v29 = v31;
  }
  while (v31);
  if (v30 == v27) {
    return 1;
  }
  uint64_t v33 = (const void *)*((void *)v30 - 2);
  if (v33)
  {
    size_t v34 = *((void *)v30 - 1);
    if (v34 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v34 >= 0x17)
      {
        uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17) {
          uint64_t v36 = v34 | 7;
        }
        uint64_t v37 = v36 + 1;
        BOOL v35 = (long long *)operator new(v36 + 1);
        *((void *)&__dst + 1) = v34;
        unint64_t v39 = v37 | 0x8000000000000000;
        *(void *)&long long __dst = v35;
      }
      else
      {
        HIBYTE(v39) = *((void *)v30 - 1);
        BOOL v35 = &__dst;
        if (!v34) {
          goto LABEL_43;
        }
      }
      memmove(v35, v33, v34);
LABEL_43:
      *((unsigned char *)v35 + v34) = 0;
      goto LABEL_44;
    }
LABEL_48:
    abort();
  }
  long long __dst = 0uLL;
  unint64_t v39 = 0;
LABEL_44:
  if (*(char *)(a6 + 23) < 0) {
    operator delete(*(void **)a6);
  }
  *(_OWORD *)a6 = __dst;
  *(void *)(a6 + 16) = v39;
  return 1;
}

void sub_1CD3BA7DC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, const void **a6@<X8>)
{
  if (a3 == -1) {
    a3 = sub_1CD3BA984(*(void *)(a1 + 8), a2);
  }
  (*(void (**)(void, unint64_t, uint64_t, unint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, a4);
  if (HIDWORD(a4) == 2 && a5 && !*(_DWORD *)(*(void *)(a1 + 16) + 8))
  {
    memset(&__str, 0, sizeof(__str));
    memset(&v19, 0, sizeof(v19));
    unint64_t v18 = 0;
    if (sub_1CD3BA540((void *)a1, a2, (uint64_t)&__str, &v18, &v17, (uint64_t)&v19))
    {
      std::string::operator=((std::string *)a6 + 1, &__str);
      uint64_t v11 = v18;
      if (!*((unsigned char *)a6 + 120)) {
        *((unsigned char *)a6 + 120) = 1;
      }
      a6[14] = v11;
      unint64_t v12 = *((unsigned __int8 *)a6 + 23);
      if ((v12 & 0x80u) == 0) {
        unint64_t v13 = v12 & 0x7F;
      }
      else {
        unint64_t v13 = (unint64_t)a6[1];
      }
      if (v13 == 9)
      {
        int v14 = a6;
        if ((v12 & 0x80) != 0)
        {
          int v14 = *a6;
          unint64_t v12 = (unint64_t)a6[1];
        }
        if (v12 >= 9) {
          size_t v15 = 9;
        }
        else {
          size_t v15 = v12;
        }
        if (!memcmp(v14, "<invalid>", v15) && v12 == 9)
        {
          std::string::size_type size = *((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x7F;
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v19.__r_.__value_.__l.__size_;
          }
          if (size) {
            std::string::operator=((std::string *)a6, &v19);
          }
        }
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_1CD3BA984(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1);
  uint64_t v15 = v4;
  uint64_t v16 = v6;
  if (v6 == v8 && v4 == v7) {
    return -1;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 192))(v6, v4))
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 216))(v6, v4) & 1) == 0
        && (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 144))(v6, v4) <= a2)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 144))(v6, v4);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 160))(v6, v4) + v12 > a2) {
          break;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 128))(v16, &v15);
    uint64_t v4 = v15;
    uint64_t v6 = v16;
    if (v16 == v11 && v15 == v10) {
      return -1;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, v4);
}

void sub_1CD3BABA8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (a3 == -1) {
    a3 = sub_1CD3BA984(*(void *)(a1 + 8), a2);
  }
  (*(void (**)(void, unint64_t, uint64_t, unint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a2, a3, a4);
  if (!*(_DWORD *)(a6 + 8))
  {
    strcpy(&__str_16.__r_.__value_.__s.__data_[7], "\t<invalid>");
    strcpy((char *)&__str, "<invalid>");
    strcpy(v37, "\t<invalid>");
    __int16 v38 = 9;
    char v39 = 0;
    uint64_t v40 = 0;
    int v41 = 0;
    char v42 = 0;
    char v43 = 0;
    int v44 = 0;
    unint64_t v11 = sub_1CC6838F0(a6, (unint64_t)&__str, 1);
    uint64_t v12 = *(void *)a6;
    unsigned int v13 = *(_DWORD *)(a6 + 8);
    uint64_t v14 = *(void *)a6 + 136 * v13;
    if (*(char *)(v11 + 23) < 0)
    {
      sub_1CB8BDF7C(v14, *(const void **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)v11;
      *(void *)(v14 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v14 = v15;
    }
    uint64_t v16 = (_OWORD *)(v12 + 136 * v13 + 24);
    if (*(char *)(v11 + 47) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v16, *(const void **)(v11 + 24), *(void *)(v11 + 32));
    }
    else
    {
      long long v17 = *(_OWORD *)(v11 + 24);
      *(void *)(v12 + 136 * v13 + 40) = *(void *)(v11 + 40);
      *uint64_t v16 = v17;
    }
    unint64_t v18 = (_OWORD *)(v12 + 136 * v13 + 48);
    if (*(char *)(v11 + 71) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v18, *(const void **)(v11 + 48), *(void *)(v11 + 56));
    }
    else
    {
      long long v19 = *(_OWORD *)(v11 + 48);
      *(void *)(v12 + 136 * v13 + 64) = *(void *)(v11 + 64);
      *unint64_t v18 = v19;
    }
    uint64_t v20 = v12 + 136 * v13;
    long long v21 = *(_OWORD *)(v11 + 72);
    long long v22 = *(_OWORD *)(v11 + 88);
    long long v23 = *(_OWORD *)(v11 + 104);
    *(_OWORD *)(v20 + 116) = *(_OWORD *)(v11 + 116);
    *(_OWORD *)(v20 + 104) = v23;
    *(_OWORD *)(v20 + 88) = v22;
    *(_OWORD *)(v20 + 72) = v21;
    ++*(_DWORD *)(a6 + 8);
    if ((char)v38 < 0) {
      operator delete(*(void **)&v37[1]);
    }
    if (v37[0] < 0) {
      operator delete((void *)__str_16.__r_.__value_.__l.__size_);
    }
    if (__str_16.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__str);
    }
  }
  if (HIDWORD(a4) == 2 && a5 && !*(_DWORD *)(*(void *)(a1 + 16) + 8))
  {
    long long __str = 0uLL;
    __str_16.__r_.__value_.__r.__words[0] = 0;
    memset(&v34, 0, sizeof(v34));
    uint64_t v33 = 0;
    if (sub_1CD3BA540((void *)a1, a2, (uint64_t)&__str, &v33, &v32, (uint64_t)&v34))
    {
      uint64_t v24 = *(void *)a6 + 136 * (*(_DWORD *)(a6 + 8) - 1);
      std::string::operator=((std::string *)(v24 + 24), (const std::string *)&__str);
      uint64_t v25 = v33;
      if (!*(unsigned char *)(v24 + 120)) {
        *(unsigned char *)(v24 + 120) = 1;
      }
      *(void *)(v24 + 112) = v25;
      unint64_t v26 = *(unsigned __int8 *)(v24 + 23);
      if ((v26 & 0x80u) == 0) {
        unint64_t v27 = v26 & 0x7F;
      }
      else {
        unint64_t v27 = *(void *)(v24 + 8);
      }
      if (v27 == 9)
      {
        uint64_t v28 = (const void *)v24;
        if ((v26 & 0x80) != 0)
        {
          uint64_t v28 = *(const void **)v24;
          unint64_t v26 = *(void *)(v24 + 8);
        }
        if (v26 >= 9) {
          size_t v29 = 9;
        }
        else {
          size_t v29 = v26;
        }
        if (!memcmp(v28, "<invalid>", v29) && v26 == 9)
        {
          std::string::size_type size = *((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x7F;
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v34.__r_.__value_.__l.__size_;
          }
          if (size) {
            std::string::operator=((std::string *)v24, &v34);
          }
        }
      }
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (__str_16.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__str);
    }
  }
}

void sub_1CD3BAEE4(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 23) = 9;
  strcpy((char *)a3, "<invalid>");
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  sub_1CD3BA540(a1, a2, a3, (void *)(a3 + 24), (void *)(a3 + 32), (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
  {
    uint64_t v3 = __p[0];
    operator delete(v3);
  }
}

uint64_t sub_1CD3BAF6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 == -1) {
    sub_1CD3BA984(*(void *)(a1 + 8), a2);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v4();
}

void *sub_1CD3BAFF0(void *a1)
{
  *a1 = &unk_1F264CAD0;
  BOOL v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_1CD3BB080(void *a1)
{
  *a1 = &unk_1F264CAD0;
  BOOL v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x1D25D9CE0);
}

__n128 sub_1CD3BB130(uint64_t a1, int64x2_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      unint64_t v8 = a2[-3].u64[1];
      uint64_t v9 = &a2[-3].u64[1];
      BOOL v10 = v8 == *(void *)a1;
      BOOL v11 = v8 < *(void *)a1;
      if (v10) {
        BOOL v11 = a2[-2].i64[0] < *(void *)(a1 + 8);
      }
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t result = *(__n128 *)a1;
        int64x2_t v13 = *(int64x2_t *)(a1 + 16);
        __int32 v14 = a2[-1].i32[2];
        long long v15 = *(long long *)((char *)&a2[-2] + 8);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 32) = v14;
        *(__n128 *)uint64_t v9 = result;
        *(int64x2_t *)((char *)a2 - 24) = v13;
        a2[-1].i32[2] = v12;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v32 = a4;
      unint64_t v33 = a3 >> 1;
      std::string v34 = (unint64_t *)(a1 + 40 * (a3 >> 1));
      unint64_t v35 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v36 = sub_1CD3BB440((long long *)a1, v34, v35, a4, result);
        uint64_t v37 = v32 + 40 * v33;
        result.n128_u64[0] = sub_1CD3BB440((long long *)(v7 + 40 * (a3 >> 1)), (unint64_t *)a2, a3 - (a3 >> 1), v37, v36).n128_u64[0];
        unint64_t v38 = v32 + 40 * a3;
        uint64_t v39 = v37;
        while (v39 != v38)
        {
          BOOL v40 = *(void *)v39 < *(void *)v32;
          if (*(void *)v39 == *(void *)v32) {
            BOOL v40 = *(void *)(v39 + 8) < *(void *)(v32 + 8);
          }
          if (v40)
          {
            uint64_t result = *(__n128 *)v39;
            long long v41 = *(_OWORD *)(v39 + 16);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v39 + 32);
            *(__n128 *)uint64_t v7 = result;
            *(_OWORD *)(v7 + 16) = v41;
            v39 += 40;
          }
          else
          {
            uint64_t result = *(__n128 *)v32;
            long long v42 = *(_OWORD *)(v32 + 16);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v32 + 32);
            *(__n128 *)uint64_t v7 = result;
            *(_OWORD *)(v7 + 16) = v42;
            v32 += 40;
          }
          v7 += 40;
          if (v32 == v37)
          {
            if (v39 != v38)
            {
              uint64_t v43 = 0;
              do
              {
                uint64_t v44 = v7 + v43;
                uint64_t result = *(__n128 *)(v39 + v43);
                long long v45 = *(_OWORD *)(v39 + v43 + 16);
                *(_DWORD *)(v44 + 32) = *(_DWORD *)(v39 + v43 + 32);
                *(__n128 *)uint64_t v44 = result;
                *(_OWORD *)(v44 + 16) = v45;
                v43 += 40;
              }
              while (v39 + v43 != v38);
            }
            return result;
          }
        }
        if (v32 != v37)
        {
          uint64_t v46 = 0;
          do
          {
            uint64_t v47 = v7 + v46;
            uint64_t result = *(__n128 *)(v32 + v46);
            long long v48 = *(_OWORD *)(v32 + v46 + 16);
            *(_DWORD *)(v47 + 32) = *(_DWORD *)(v32 + v46 + 32);
            *(__n128 *)uint64_t v47 = result;
            *(_OWORD *)(v47 + 16) = v48;
            v46 += 40;
          }
          while (v32 + v46 != v37);
        }
      }
      else
      {
        sub_1CD3BB130(a1, v34, v35, a4, a5);
        sub_1CD3BB130(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v32, a5);
        sub_1CD3BB730((int64x2_t *)v7, (int64x2_t *)(v7 + 40 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v32, a5);
      }
    }
    else if ((int64x2_t *)a1 != a2)
    {
      long long v17 = (unint64_t *)(a1 + 40);
      if ((int64x2_t *)(a1 + 40) != a2)
      {
        uint64_t v18 = 0;
        long long v19 = (unint64_t *)a1;
        do
        {
          uint64_t v20 = v17;
          unint64_t v21 = *v17;
          unint64_t v22 = v19[6];
          BOOL v23 = v21 < *v19;
          if (v21 == *v19) {
            BOOL v23 = v22 < v19[1];
          }
          if (v23)
          {
            __n128 v49 = *(__n128 *)(v19 + 7);
            unint64_t v50 = v19[9];
            uint64_t v24 = v18;
            while (1)
            {
              uint64_t v25 = a1 + v24;
              long long v26 = *(_OWORD *)(a1 + v24 + 16);
              *(_OWORD *)(v25 + 40) = *(_OWORD *)(a1 + v24);
              *(_OWORD *)(v25 + 56) = v26;
              *(_DWORD *)(v25 + 72) = *(_DWORD *)(a1 + v24 + 32);
              if (!v24) {
                break;
              }
              unint64_t v27 = *(void *)(v25 - 40);
              BOOL v28 = v22 < *(void *)(v25 - 32);
              BOOL v10 = v21 == v27;
              BOOL v29 = v21 < v27;
              if (!v10) {
                BOOL v28 = v29;
              }
              v24 -= 40;
              if (!v28)
              {
                uint64_t v30 = a1 + v24 + 40;
                goto LABEL_21;
              }
            }
            uint64_t v30 = a1;
LABEL_21:
            *(void *)uint64_t v30 = v21;
            *(void *)(v30 + 8) = v22;
            uint64_t result = v49;
            *(__n128 *)(v30 + 16) = v49;
            *(_DWORD *)(v30 + 32) = v50;
          }
          long long v17 = v20 + 5;
          v18 += 40;
          long long v19 = v20;
        }
        while (v20 + 5 != (unint64_t *)a2);
      }
    }
  }
  return result;
}

__n128 sub_1CD3BB440(long long *a1, unint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    unint64_t v8 = (unint64_t *)a1;
    if (a3 == 2)
    {
      unint64_t v10 = *(a2 - 5);
      BOOL v11 = (__n128 *)(a2 - 5);
      BOOL v12 = *(a2 - 4) < *((void *)a1 + 1);
      BOOL v13 = v10 == *(void *)a1;
      BOOL v14 = v10 < *(void *)a1;
      if (!v13) {
        BOOL v12 = v14;
      }
      if (v12)
      {
        __n128 v15 = *v11;
        long long v16 = *(_OWORD *)(a2 - 3);
        *(void *)(a4 + 32) = *(a2 - 1);
        *(__n128 *)a4 = v15;
        *(_OWORD *)(a4 + 16) = v16;
        uint64_t result = (__n128)*a1;
        long long v17 = a1[1];
        uint64_t v18 = *((void *)a1 + 4);
      }
      else
      {
        long long v35 = *a1;
        long long v36 = a1[1];
        *(void *)(a4 + 32) = *((void *)a1 + 4);
        *(_OWORD *)a4 = v35;
        *(_OWORD *)(a4 + 16) = v36;
        uint64_t result = *v11;
        long long v17 = *(_OWORD *)(a2 - 3);
        uint64_t v18 = *(a2 - 1);
      }
      *(void *)(a4 + 72) = v18;
      *(__n128 *)(a4 + 40) = result;
      *(_OWORD *)(a4 + 56) = v17;
    }
    else if (a3 == 1)
    {
      uint64_t result = (__n128)*a1;
      long long v9 = a1[1];
      *(void *)(a4 + 32) = *((void *)a1 + 4);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v37 = (unint64_t *)a1 + 5 * (a3 >> 1);
      sub_1CD3BB130(a1, v37, a3 >> 1, a4, a3 >> 1);
      sub_1CD3BB130(&v8[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 40 * (a3 >> 1), a3 - (a3 >> 1));
      unint64_t v38 = &v8[5 * (a3 >> 1)];
      while (v38 != a2)
      {
        BOOL v39 = *v38 < *v8;
        if (*v38 == *v8) {
          BOOL v39 = v38[1] < v8[1];
        }
        if (v39)
        {
          uint64_t result = *(__n128 *)v38;
          long long v40 = *((_OWORD *)v38 + 1);
          *(void *)(v5 + 32) = v38[4];
          *(__n128 *)uint64_t v5 = result;
          *(_OWORD *)(v5 + 16) = v40;
          v38 += 5;
        }
        else
        {
          uint64_t result = *(__n128 *)v8;
          long long v41 = *((_OWORD *)v8 + 1);
          *(void *)(v5 + 32) = v8[4];
          *(__n128 *)uint64_t v5 = result;
          *(_OWORD *)(v5 + 16) = v41;
          v8 += 5;
        }
        v5 += 40;
        if (v8 == v37)
        {
          if (v38 != a2)
          {
            uint64_t v42 = 0;
            do
            {
              uint64_t v43 = v5 + v42 * 8;
              uint64_t result = *(__n128 *)&v38[v42];
              long long v44 = *(_OWORD *)&v38[v42 + 2];
              *(void *)(v43 + 32) = v38[v42 + 4];
              *(__n128 *)uint64_t v43 = result;
              *(_OWORD *)(v43 + 16) = v44;
              v42 += 5;
            }
            while (&v38[v42] != a2);
          }
          return result;
        }
      }
      if (v8 != v37)
      {
        uint64_t v45 = 0;
        do
        {
          uint64_t v46 = v5 + v45 * 8;
          uint64_t result = *(__n128 *)&v8[v45];
          long long v47 = *(_OWORD *)&v8[v45 + 2];
          *(void *)(v46 + 32) = v8[v45 + 4];
          *(__n128 *)uint64_t v46 = result;
          *(_OWORD *)(v46 + 16) = v47;
          v45 += 5;
        }
        while (&v8[v45] != v37);
      }
    }
    else if (a1 != (long long *)a2)
    {
      uint64_t result = (__n128)*a1;
      long long v19 = a1[1];
      *(void *)(a4 + 32) = *((void *)a1 + 4);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v19;
      uint64_t v20 = (unint64_t *)a1 + 5;
      if ((unint64_t *)((char *)a1 + 40) != a2)
      {
        uint64_t v21 = 0;
        unint64_t v22 = (_OWORD *)a4;
        do
        {
          BOOL v23 = v20;
          uint64_t v24 = (_OWORD *)((char *)v22 + 40);
          unint64_t v25 = *v20;
          BOOL v13 = v25 == *(void *)v22;
          BOOL v26 = v25 < *(void *)v22;
          if (v13) {
            BOOL v26 = v8[6] < *((void *)v22 + 1);
          }
          if (v26)
          {
            long long v27 = v22[1];
            *uint64_t v24 = *v22;
            *(_OWORD *)((char *)v22 + 56) = v27;
            *((void *)v22 + 9) = *((void *)v22 + 4);
            uint64_t v28 = a4;
            if (v22 != (_OWORD *)a4)
            {
              uint64_t v29 = v21;
              while (1)
              {
                uint64_t v28 = a4 + v29;
                unint64_t v30 = *(void *)(a4 + v29 - 40);
                BOOL v13 = *v23 == v30;
                BOOL v31 = *v23 < v30;
                if (v13) {
                  BOOL v31 = v8[6] < *(void *)(a4 + v29 - 32);
                }
                if (!v31) {
                  break;
                }
                long long v32 = *(_OWORD *)(a4 + v29 - 24);
                *(_OWORD *)uint64_t v28 = *(_OWORD *)(a4 + v29 - 40);
                *(_OWORD *)(v28 + 16) = v32;
                *(_DWORD *)(v28 + 32) = *(_DWORD *)(a4 + v29 - 8);
                v29 -= 40;
                if (!v29)
                {
                  uint64_t v28 = a4;
                  break;
                }
              }
            }
            uint64_t result = *(__n128 *)v23;
            long long v33 = *((_OWORD *)v23 + 1);
            *(_DWORD *)(v28 + 32) = *((_DWORD *)v23 + 8);
            *(__n128 *)uint64_t v28 = result;
            *(_OWORD *)(v28 + 16) = v33;
          }
          else
          {
            uint64_t result = *(__n128 *)v23;
            long long v34 = *((_OWORD *)v23 + 1);
            *((void *)v22 + 9) = v23[4];
            *uint64_t v24 = result;
            *(_OWORD *)((char *)v22 + 56) = v34;
          }
          uint64_t v20 = v23 + 5;
          v21 += 40;
          unint64_t v22 = v24;
          unint64_t v8 = v23;
        }
        while (v23 + 5 != a2);
      }
    }
  }
  return result;
}

int64x2_t *sub_1CD3BB730(int64x2_t *result, int64x2_t *a2, int64x2_t *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    long long v9 = result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v10 = 0;
      unint64_t v11 = a2->i64[0];
      uint64_t v12 = -a4;
      while (1)
      {
        BOOL v13 = (int64x2_t *)((char *)v9 + v10);
        unint64_t v14 = v9->u64[v10 / 8];
        BOOL v42 = v11 == v14;
        BOOL v15 = v11 < v14;
        if (v42) {
          BOOL v15 = a2->i64[1] < (unint64_t)v9->i64[v10 / 8 + 1];
        }
        if (v15) {
          break;
        }
        v10 += 40;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v12;
      __src = a6;
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          std::string::size_type v104 = (int64x2_t *)((char *)v9 + v10);
          uint64_t v130 = v9[2].i64[v10 / 8];
          int64x2_t v122 = *(int64x2_t *)((char *)v9 + v10);
          int64x2_t v126 = *(int64x2_t *)((char *)&v9[1] + v10);
          int64x2_t v105 = *a2;
          int64x2_t v106 = a2[1];
          v104[2].i32[0] = a2[2].i32[0];
          int64x2_t *v104 = v105;
          v104[1] = v106;
          a2[2].i32[0] = v130;
          *a2 = v122;
          a2[1] = v126;
          return result;
        }
        if (v12 > 0) {
          uint64_t v17 = 1 - v12;
        }
        uint64_t v31 = v17 >> 1;
        BOOL v23 = (int64x2_t *)((char *)v9 + 40 * (v17 >> 1) + v10);
        uint64_t v20 = a3;
        if (a3 != a2)
        {
          unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
          int64x2_t v33 = *v23;
          uint64_t v20 = a2;
          do
          {
            unint64_t v34 = v32 >> 1;
            long long v35 = (int64x2_t *)((char *)v20 + 40 * (v32 >> 1));
            int64x2_t v37 = *v35;
            long long v36 = (int64x2_t *)((char *)v35 + 40);
            int32x2_t v38 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v33, (uint64x2_t)v37));
            if (vmovn_s64(vceqq_s64(v37, v33)).u32[0]) {
              __int8 v39 = v38.i8[4];
            }
            else {
              __int8 v39 = v38.i8[0];
            }
            v32 += ~(v32 >> 1);
            if (v39) {
              uint64_t v20 = v36;
            }
            else {
              unint64_t v32 = v34;
            }
          }
          while (v32);
        }
        uint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3);
        unint64_t v30 = (int64x2_t *)((char *)v9 + 40 * v31 + v10);
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = a5 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = (int64x2_t *)((char *)a2 + 40 * (v18 >> 1));
        if (v13 == a2)
        {
          unint64_t v30 = a2;
          BOOL v23 = a2;
        }
        else
        {
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((char *)a2 - (char *)v9 - v10) >> 3);
          int64x2_t v22 = *v20;
          BOOL v23 = (int64x2_t *)((char *)v9 + v10);
          do
          {
            unint64_t v24 = v21 >> 1;
            unint64_t v25 = (int64x2_t *)((char *)v23 + 40 * (v21 >> 1));
            int64x2_t v27 = *v25;
            BOOL v26 = &v25[2].i8[8];
            int32x2_t v28 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v27, (uint64x2_t)v22));
            if (vmovn_s64(vceqq_s64(v22, v27)).u32[0]) {
              __int8 v29 = v28.i8[4];
            }
            else {
              __int8 v29 = v28.i8[0];
            }
            v21 += ~(v21 >> 1);
            if (v29) {
              unint64_t v21 = v24;
            }
            else {
              BOOL v23 = (int64x2_t *)v26;
            }
          }
          while (v21);
          unint64_t v30 = v23;
        }
        uint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((char *)v30 - (char *)v9 - v10) >> 3);
      }
      long long v40 = v20;
      if (v23 != a2)
      {
        long long v40 = v30;
        if (a2 != v20)
        {
          if (&v23[2].u64[1] == (unint64_t *)a2)
          {
            uint64_t v127 = v23[2].i64[0];
            int64x2_t v119 = *v23;
            int64x2_t v123 = v23[1];
            unint64_t v50 = (char *)((char *)v20 - (char *)a2);
            uint64_t v114 = v19;
            unint64_t v116 = a3;
            uint64_t v51 = a7;
            uint64_t v111 = a5;
            uint64_t v112 = v31;
            memmove(v23, a2, (char *)v20 - (char *)a2 - 4);
            uint64_t v31 = v112;
            uint64_t v19 = v114;
            a5 = v111;
            a7 = v51;
            a3 = v116;
            long long v40 = (int64x2_t *)&v50[(void)v23];
            *long long v40 = v119;
            v40[1] = v123;
            v40[2].i32[0] = v127;
          }
          else if (&a2[2].u64[1] == (unint64_t *)v20)
          {
            uint64_t v128 = v20[-1].i64[1];
            int64x2_t v120 = *(int64x2_t *)((char *)v20 - 40);
            int64x2_t v124 = *(int64x2_t *)((char *)v20 - 24);
            long long v40 = (int64x2_t *)((char *)v30 + 40);
            if (&v20[-3].u64[1] != (unint64_t *)v23)
            {
              uint64_t v115 = v19;
              int v117 = a3;
              uint64_t v52 = a7;
              uint64_t v53 = a5;
              uint64_t v113 = v31;
              memmove(&v30[2].u64[1], v23, (char *)&v20[-3].u64[1] - (char *)v30 - 4);
              long long v40 = (int64x2_t *)((char *)v30 + 40);
              uint64_t v31 = v113;
              uint64_t v19 = v115;
              a3 = v117;
              a5 = v53;
              a7 = v52;
            }
            v23[2].i32[0] = v128;
            int64x2_t *v23 = v120;
            v23[1] = v124;
          }
          else
          {
            unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v30) >> 3);
            if (v41 == 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3))
            {
              BOOL v42 = a2 == v20 || v30 == a2;
              if (!v42)
              {
                uint64_t v43 = (int64x2_t *)((char *)v30 + 40);
                long long v44 = (int64x2_t *)((char *)a2 + 40);
                do
                {
                  uint64_t v45 = v43[-1].i64[1];
                  int64x2_t v46 = *(int64x2_t *)((char *)v43 - 40);
                  int64x2_t v47 = *(int64x2_t *)((char *)v43 - 24);
                  __int32 v48 = v44[-1].i32[2];
                  int64x2_t v49 = *(int64x2_t *)((char *)v44 - 24);
                  *(int64x2_t *)((char *)v43 - 40) = *(int64x2_t *)((char *)v44 - 40);
                  *(int64x2_t *)((char *)v43 - 24) = v49;
                  v43[-1].i32[2] = v48;
                  *(int64x2_t *)((char *)v44 - 24) = v47;
                  *(int64x2_t *)((char *)v44 - 40) = v46;
                  v44[-1].i32[2] = v45;
                  if (v43 == a2) {
                    break;
                  }
                  uint64_t v43 = (int64x2_t *)((char *)v43 + 40);
                  BOOL v42 = v44 == v20;
                  long long v44 = (int64x2_t *)((char *)v44 + 40);
                }
                while (!v42);
              }
              long long v40 = a2;
            }
            else
            {
              uint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3);
              unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v30) >> 3);
              do
              {
                uint64_t v56 = v55;
                unint64_t v55 = v54;
                uint64_t v54 = v56 % v54;
              }
              while (v54);
              if (v55)
              {
                uint64_t v57 = &v30->i8[40 * v55];
                do
                {
                  long long v58 = *(_OWORD *)(v57 - 40);
                  long long v59 = *(_OWORD *)(v57 - 24);
                  uint64_t v60 = *((void *)v57 - 1);
                  v57 -= 40;
                  long long v121 = v58;
                  long long v125 = v59;
                  int v129 = v60;
                  unint64_t v61 = &v57[8 * (((char *)a2 - (char *)v30) >> 3)];
                  unint64_t v62 = v57;
                  do
                  {
                    uint64_t v63 = v61;
                    long long v64 = *(_OWORD *)v61;
                    long long v65 = *((_OWORD *)v61 + 1);
                    *((_DWORD *)v62 + 8) = *((_DWORD *)v61 + 8);
                    *(_OWORD *)unint64_t v62 = v64;
                    *((_OWORD *)v62 + 1) = v65;
                    unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - v61) >> 3);
                    v61 += 8 * (((char *)a2 - (char *)v30) >> 3);
                    BOOL v67 = __OFSUB__(v41, v66);
                    uint64_t v69 = v41 - v66;
                    char v68 = (v69 < 0) ^ v67;
                    int64_t v70 = &v30->i8[40 * v69];
                    if (!v68) {
                      unint64_t v61 = v70;
                    }
                    unint64_t v62 = v63;
                  }
                  while (v61 != v57);
                  *((_DWORD *)v63 + 8) = v129;
                  *(_OWORD *)uint64_t v63 = v121;
                  *((_OWORD *)v63 + 1) = v125;
                }
                while (v57 != (char *)v30);
              }
              long long v40 = (int64x2_t *)((char *)v30 + 8 * (((char *)v20 - (char *)a2) >> 3));
            }
          }
        }
      }
      a4 = -(v31 + v12);
      uint64_t v71 = a5 - v19;
      if (v31 + v19 >= a5 - (v31 + v19) - v12)
      {
        uint64_t v77 = v31;
        uint64_t v78 = -(v31 + v12);
        a6 = __src;
        uint64_t v79 = a7;
        uint64_t v71 = v19;
        unint64_t v80 = v40;
        uint64_t result = (int64x2_t *)sub_1CD3BB730(v40, v20, a3, v78, a5 - v19, __src);
        a7 = v79;
        uint64_t v20 = v23;
        a4 = v77;
        a3 = v80;
      }
      else
      {
        uint64_t v72 = &v9->i8[v10];
        unint64_t v73 = v30;
        uint64_t v74 = a3;
        a6 = __src;
        uint64_t v75 = a7;
        int64_t v76 = v40;
        uint64_t result = (int64x2_t *)sub_1CD3BB730(v72, v73, v40, v31, v19, __src);
        a7 = v75;
        a3 = v74;
        BOOL v13 = v76;
      }
      a5 = v71;
      long long v9 = v13;
      a2 = v20;
      if (!v71) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (v9 != a2)
      {
        unint64_t v94 = 0;
        do
        {
          uint64_t v95 = &a6[v94];
          long long v96 = *(long long *)((char *)v9 + v94);
          long long v97 = *(long long *)((char *)&v9[1] + v94);
          *((void *)v95 + 4) = v9[2].i64[v94 / 8];
          *(_OWORD *)uint64_t v95 = v96;
          *((_OWORD *)v95 + 1) = v97;
          v94 += 40;
        }
        while (&v9->i8[v94] != (__int8 *)a2);
        if (v94)
        {
          std::string::size_type v98 = a6;
          while (a2 != a3)
          {
            BOOL v99 = a2->i64[0] < *(void *)v98;
            if (a2->i64[0] == *(void *)v98) {
              BOOL v99 = a2->i64[1] < *((void *)v98 + 1);
            }
            if (v99)
            {
              int64x2_t v100 = *a2;
              int64x2_t v101 = a2[1];
              v9[2].i32[0] = a2[2].i32[0];
              int64x2_t *v9 = v100;
              v9[1] = v101;
              a2 = (int64x2_t *)((char *)a2 + 40);
            }
            else
            {
              int64x2_t v102 = *(int64x2_t *)v98;
              int64x2_t v103 = *((int64x2_t *)v98 + 1);
              v9[2].i32[0] = *((_DWORD *)v98 + 8);
              int64x2_t *v9 = v102;
              v9[1] = v103;
              v98 += 40;
            }
            long long v9 = (int64x2_t *)((char *)v9 + 40);
            if (&a6[v94] == v98) {
              return result;
            }
          }
          return (int64x2_t *)memmove(v9, v98, a6 - v98 + v94 - 4);
        }
      }
    }
    else if (a2 != a3)
    {
      unint64_t v81 = 0;
      do
      {
        int v82 = &a6[v81];
        long long v83 = *(long long *)((char *)a2 + v81);
        long long v84 = *(long long *)((char *)&a2[1] + v81);
        *((void *)v82 + 4) = a2[2].i64[v81 / 8];
        *(_OWORD *)int v82 = v83;
        *((_OWORD *)v82 + 1) = v84;
        v81 += 40;
      }
      while (&a2->i8[v81] != (__int8 *)a3);
      if (v81)
      {
        unint64_t v85 = &a6[v81];
        int64_t v86 = &a3[-3].i8[8];
        while (a2 != v9)
        {
          unint64_t v87 = *((void *)v85 - 5);
          unint64_t v88 = a2[-3].u64[1];
          BOOL v42 = v87 == v88;
          BOOL v89 = v87 < v88;
          if (v42) {
            BOOL v89 = *((void *)v85 - 4) < a2[-2].i64[0];
          }
          BOOL v90 = !v89;
          if (v89) {
            std::string::size_type v91 = &a2[-3].i8[8];
          }
          else {
            std::string::size_type v91 = v85 - 40;
          }
          if (v90) {
            v85 -= 40;
          }
          else {
            a2 = (int64x2_t *)((char *)a2 - 40);
          }
          long long v92 = *(_OWORD *)v91;
          long long v93 = *((_OWORD *)v91 + 1);
          *((_DWORD *)v86 + 8) = *((_DWORD *)v91 + 8);
          *(_OWORD *)int64_t v86 = v92;
          *((_OWORD *)v86 + 1) = v93;
          v86 -= 40;
          if (v85 == a6) {
            return result;
          }
        }
        if (v85 != a6)
        {
          uint64_t v107 = 0;
          do
          {
            uint64_t v108 = &v86[v107];
            long long v109 = *(_OWORD *)&v85[v107 - 40];
            long long v110 = *(_OWORD *)&v85[v107 - 24];
            *((_DWORD *)v108 + 8) = *(_DWORD *)&v85[v107 - 8];
            *(_OWORD *)uint64_t v108 = v109;
            *((_OWORD *)v108 + 1) = v110;
            v107 -= 40;
          }
          while (&v85[v107] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD3BBE00(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t *sub_1CD3BBE1C(uint64_t *a1, llvm::Module *this)
{
  v6[0] = "air.visible";
  __int16 v7 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, v6);
  *a1 = NamedMetadata;
  if (!NamedMetadata)
  {
    v6[0] = "agx.visible";
    __int16 v7 = 259;
    *a1 = llvm::Module::getNamedMetadata(this, v6);
  }
  return a1;
}

BOOL sub_1CD3BBE9C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 48);
  uint64_t v4 = *((unsigned int *)v3 + 2);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *v3;
    while (1)
    {
      uint64_t v7 = *(void *)(*(void *)(v6 + 8 * v5) - 8 * *(unsigned int *)(*(void *)(v6 + 8 * v5) + 8));
      if (v7)
      {
        if (*(unsigned char *)v7 == 1)
        {
          uint64_t v7 = *(void *)(v7 + 128);
          if (*(unsigned char *)(v7 + 16)) {
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
      }
      if (v7 == a2) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = v4;
        return v5 != v4;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  return v5 != v4;
}

void sub_1CD3BBF24()
{
}

uint64_t sub_1CD3BBF6C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1CD3BBF9C(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD3BBFD4()
{
  return "llvm.codeview";
}

void sub_1CD3BBFE0(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      uint64_t v5 = (char *)operator new(0x48uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_1CFB33C10;
      qmemcpy(v5, "The buffer is not large enough to read the requested number of bytes.", 69);
      uint64_t v4 = v5 + 69;
      break;
    case 3:
      uint64_t v6 = (char *)operator new(0x30uLL);
      *(void *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_1CFB1B7C0;
      qmemcpy(v6, "The requested operation is not supported.", 41);
      uint64_t v4 = v6 + 41;
      break;
    case 4:
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(void *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_1CFAC7E80;
      qmemcpy(v7, "The CodeView record is corrupted.", 33);
      uint64_t v4 = v7 + 33;
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 21;
      qmemcpy((void *)a2, "There are no records.", 21);
      uint64_t v4 = (unsigned char *)(a2 + 21);
      break;
    case 6:
      unint64_t v8 = (char *)operator new(0x30uLL);
      *(void *)a2 = v8;
      *(_OWORD *)(a2 + 8) = xmmword_1CD96D870;
      qmemcpy(v8, "The member record is of an unknown type.", 40);
      uint64_t v4 = v8 + 40;
      break;
    default:
      uint64_t v3 = (char *)operator new(0x28uLL);
      *(void *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_1CFB287C0;
      qmemcpy(v3, "An unknown CodeView error has occurred.", 39);
      uint64_t v4 = v3 + 39;
      break;
  }
  unsigned char *v4 = 0;
}

void sub_1CD3BC184()
{
}

uint64_t sub_1CD3BC238(uint64_t a1)
{
  *(void *)(a1 + 144) = &unk_1F264D0C0;
  BOOL v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176)) {
    free(v2);
  }
  sub_1CD049224((void *)(a1 + 80));
  *(void *)(a1 + 40) = &unk_1F264CBB8;
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_1CD3BC2DC(uint64_t *a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  sub_1CD8F6FF0((uint64_t)(a1 + 20), &v33);
  if (!v33)
  {
    if (*((unsigned char *)a1 + 154)) {
      *((unsigned char *)a1 + 154) = 0;
    }
    uint64_t v33 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1CD8F8AA0((uint64_t)a3, *((unsigned int *)a1 + 2));
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (v6)
  {
    unsigned int v7 = 0;
    LOBYTE(v8) = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = *a1 + 4 * v6;
    unsigned int v11 = *((_DWORD *)a1 + 34);
    char v12 = 1;
    uint64_t v31 = *a1;
    do
    {
      unsigned __int8 v13 = v8;
      unsigned int v14 = v11;
      unsigned int v15 = *(_DWORD *)(v10 - 4);
      v10 -= 4;
      unsigned int v11 = v15;
      int v8 = a2;
      uint64_t v16 = v14 - v15;
      uint64_t v17 = (_WORD *)(a1[6] + v15);
      _WORD *v17 = v14 - v15 - 2;
      if ((v12 & 1) == 0)
      {
        int v18 = v13 | v7;
        uint64_t v19 = (uint64_t)v17 + v16 - 8;
        if (v16 <= 8) {
          uint64_t v19 = (uint64_t)v17;
        }
        *(_DWORD *)(v19 + 4) = v18;
      }
      unint64_t v21 = a3[1];
      unint64_t v20 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v20)
      {
        BOOL v23 = *a3;
        uint64_t v24 = (v21 - *a3) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          abort();
        }
        uint64_t v26 = v20 - (void)v23;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        uint64_t v32 = v10;
        if (v27)
        {
          if (v27 >> 60) {
            sub_1CB833614();
          }
          int32x2_t v28 = (char *)operator new(16 * v27);
        }
        else
        {
          int32x2_t v28 = 0;
        }
        __int8 v29 = &v28[16 * v24];
        *(void *)__int8 v29 = v17;
        *((void *)v29 + 1) = v16;
        unint64_t v30 = v29;
        if (v21 != v23)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
            v30 -= 16;
            v21 -= 16;
          }
          while (v21 != v23);
          unint64_t v21 = *a3;
        }
        int64x2_t v22 = v29 + 16;
        *a3 = v30;
        a3[2] = &v28[16 * v27];
        if (v21) {
          operator delete(v21);
        }
        uint64_t v9 = v31;
        uint64_t v10 = v32;
      }
      else
      {
        *(void *)unint64_t v21 = v17;
        *((void *)v21 + 1) = v16;
        int64x2_t v22 = v21 + 16;
      }
      char v12 = 0;
      a3[1] = v22;
      a2 = v8 + 1;
      unsigned int v7 = v8 & 0xFFFFFF00;
    }
    while (v10 != v9);
  }
  if (*((unsigned char *)a1 + 36)) {
    *((unsigned char *)a1 + 36) = 0;
  }
}

uint64_t sub_1CD3BC4BC(uint64_t result)
{
  if ((*(_DWORD *)(result + 56) & 3) != 0)
  {
    uint64_t v1 = result;
    int v2 = 5 - (*(_DWORD *)(result + 56) & 3);
    do
    {
      unsigned int v3 = v2 - 1;
      char v4 = v2 - 17;
      (*(void (**)(void))(**(void **)(v1 + 24) + 16))(*(void *)(v1 + 24));
      char v6 = v4;
      uint64_t result = llvm::BinaryStreamWriter::writeBytes(v1, 1, &v5);
      int v2 = v3;
    }
    while (v3 > 1);
  }
  return result;
}

void sub_1CD3BC554()
{
  qword_1EBD0DC70 = 0xB0C0B0C000001404;
  word_1EBD0DC7A = 4611;
  qword_1EBD0DC7C = 0xB0C0B0C000001404;
  word_1EBD0DC86 = 4614;
}

void *sub_1CD3BC58C(void *a1, void *a2, int a3)
{
  *a1 = &unk_1F264CC10;
  a1[1] = 0;
  char v4 = a1 + 2;
  a1[2] = &unk_1F264A718;
  a1[3] = 0;
  if (a3) {
    char v4 = a2;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = v4;
  if (!a3)
  {
    char v6 = operator new(0x10uLL);
    void *v6 = a1;
    v6[1] = a2;
    a1[3] = v6;
    a1[4] = v6 + 2;
    a1[5] = v6 + 2;
  }
  return a1;
}

void *sub_1CD3BC61C(void *a1)
{
  a1[2] = &unk_1F264A718;
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[1];
  *a1 = &unk_1F264CC10;
  a1[1] = 0;
  if (v3) {
    sub_1CD3BC8A8(v3);
  }
  return a1;
}

uint64_t sub_1CD3BC698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F2632A10;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  uint64_t v8 = a1 + 32;
  *(void *)(a1 + 32) = &unk_1F2632A58;
  llvm::BinaryStreamRef::BinaryStreamRef(a1 + 40, a1);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_1F264CD80;
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = &unk_1F264D0C0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 122) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 126) = 0;
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x200000000;
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  int v14 = 302186498;
  v13[0] = &v14;
  v13[1] = 4;
  sub_1CD8FB9DC(a1 + 112, v13, &v12);
  sub_1CD4515D0(&v12);
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v9 = a1 + 208;
  *(void *)(a1 + 208) = &unk_1F264A718;
  *(void *)(a1 + 216) = 0;
  if (a5) {
    uint64_t v9 = a2;
  }
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = v9;
  if (!a5)
  {
    uint64_t v10 = operator new(0x10uLL);
    *uint64_t v10 = a1 + 96;
    v10[1] = a2;
    *(void *)(a1 + 216) = v10;
    *(void *)(a1 + 224) = v10 + 2;
    *(void *)(a1 + 232) = v10 + 2;
  }
  return a1;
}

void *sub_1CD3BC844(void *a1)
{
  a1[26] = &unk_1F264A718;
  int v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  sub_1CD3BD524((uint64_t)(a1 + 12));
  sub_1CCC22DBC(a1 + 4);
  return a1;
}

void sub_1CD3BC8A8(void *a1)
{
  a1[12] = &unk_1F264D0C0;
  int v2 = (void *)a1[14];
  if (v2 != a1 + 16) {
    free(v2);
  }
  sub_1CCC22DBC(a1 + 4);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3BC928()
{
}

void sub_1CD3BCA18(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2[1] < 4uLL) {
    goto LABEL_2;
  }
  unsigned int v8 = *(unsigned __int16 *)(*a2 + 2);
  if (v8 > 0x1502)
  {
    if (*(unsigned __int16 *)(*a2 + 2) <= 0x151Cu)
    {
      switch(*(_WORD *)(*a2 + 2))
      {
        case 0x1503:
          uint64_t v9 = *a1;
          *(_WORD *)unint64_t v30 = 5379;
          *(void *)&v30[2] = 0;
          memset(&v30[16], 0, 24);
          (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v9 + 128))(v9, a2, v30);
          goto LABEL_47;
        case 0x1504:
        case 0x1505:
          goto LABEL_26;
        case 0x1506:
          uint64_t v17 = *a1;
          *(_WORD *)unint64_t v30 = 5382;
          *(void *)&v30[2] = 0;
          memset(&v30[16], 0, 32);
          uint64_t v31 = 0;
          (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v17 + 144))(v17, a2, v30);
          goto LABEL_47;
        case 0x1507:
          uint64_t v18 = *a1;
          *(_WORD *)unint64_t v30 = 5383;
          *(void *)&v30[2] = 0;
          memset(&v30[16], 0, 32);
          LODWORD(v31) = 0;
          (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v18 + 152))(v18, a2, v30);
          goto LABEL_47;
        case 0x1508:
          goto LABEL_2;
        case 0x1509:
          uint64_t v19 = *a1;
          *(_WORD *)unint64_t v30 = 5385;
          memset(&v30[4], 0, 28);
          (*(void (**)(uint64_t, void *, unsigned char *, uint64_t))(*(void *)v19 + 336))(v19, a2, v30, a3);
          goto LABEL_47;
        default:
          if (v8 == 5397)
          {
            uint64_t v26 = *a1;
            *(_WORD *)unint64_t v30 = 5397;
            *(void *)&v30[10] = 0;
            *(void *)&v30[2] = 0;
            memset(&v30[20], 0, 20);
            (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v26 + 160))(v26, a2, v30);
            goto LABEL_47;
          }
          if (v8 != 5401) {
            goto LABEL_2;
          }
LABEL_26:
          sub_1CD3BD48C(a4, (uint64_t)a2, *a1);
          break;
      }
      goto LABEL_3;
    }
    switch(*(_WORD *)(*a2 + 2))
    {
      case 0x1601:
        uint64_t v11 = *a1;
        *(_WORD *)unint64_t v30 = 5633;
        *(void *)&v30[2] = 0;
        *(void *)&v30[16] = 0;
        *(void *)&v30[24] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *, uint64_t))(*(void *)v11 + 272))(v11, a2, v30, a3);
        goto LABEL_47;
      case 0x1602:
        uint64_t v20 = *a1;
        *(_WORD *)unint64_t v30 = 5634;
        *(void *)&v30[2] = 0;
        *(void *)&v30[16] = 0;
        *(void *)&v30[24] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *, uint64_t))(*(void *)v20 + 280))(v20, a2, v30, a3);
        goto LABEL_47;
      case 0x1603:
        uint64_t v21 = *a1;
        *(_WORD *)unint64_t v30 = 5635;
        *(void *)&v30[8] = &v30[24];
        *(void *)&v30[16] = 0x500000000;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v21 + 288))(v21, a2, v30);
        uint64_t v7 = *a4;
        if (!*a4) {
          *a4 = 0;
        }
        if (*(unsigned char **)&v30[8] == &v30[24]) {
          goto LABEL_4;
        }
        free(*(void **)&v30[8]);
        goto LABEL_3;
      case 0x1604:
        uint64_t v22 = *a1;
        *(_WORD *)unint64_t v30 = 5636;
        memset(&v30[8], 0, 24);
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v22 + 296))(v22, a2, v30);
        goto LABEL_53;
      case 0x1605:
        uint64_t v23 = *a1;
        *(_WORD *)unint64_t v30 = 5637;
        *(_DWORD *)&v30[2] = 0;
        *(void *)&v30[8] = 0;
        *(void *)&v30[16] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v23 + 304))(v23, a2, v30);
        goto LABEL_47;
      case 0x1606:
        uint64_t v24 = *a1;
        *(_WORD *)unint64_t v30 = 5638;
        *(void *)&v30[2] = 0;
        *(_DWORD *)&v30[12] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v24 + 312))(v24, a2, v30);
        goto LABEL_47;
      case 0x1607:
        uint64_t v25 = *a1;
        *(_WORD *)unint64_t v30 = 5639;
        *(void *)&v30[2] = 0;
        *(_DWORD *)&v30[12] = 0;
        *(_WORD *)&v30[16] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v25 + 320))(v25, a2, v30);
        goto LABEL_47;
      default:
        if (v8 != 5405) {
          goto LABEL_2;
        }
        uint64_t v16 = *a1;
        *(_WORD *)unint64_t v30 = 5405;
        *(void *)&v30[2] = 0;
        memset(&v30[12], 0, 28);
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v16 + 168))(v16, a2, v30);
        uint64_t v7 = *a4;
        if (!*a4) {
          *a4 = 0;
        }
        int v14 = *(void **)&v30[16];
        if (!*(void *)&v30[16]) {
          goto LABEL_4;
        }
        *(void *)&v30[24] = *(void *)&v30[16];
        break;
    }
    goto LABEL_57;
  }
  if (*(unsigned __int16 *)(*a2 + 2) > 0x1000u)
  {
    switch(*(_WORD *)(*a2 + 2))
    {
      case 0x1201:
        uint64_t v12 = *a1;
        *(_WORD *)unint64_t v30 = 4609;
        memset(&v30[8], 0, 24);
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v12 + 112))(v12, a2, v30);
        break;
      case 0x1203:
        uint64_t v27 = *a1;
        *(_WORD *)unint64_t v30 = 4611;
        *(void *)&v30[8] = 0;
        *(void *)&v30[16] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v27 + 120))(v27, a2, v30);
        goto LABEL_47;
      case 0x1205:
        uint64_t v28 = *a1;
        *(_WORD *)unint64_t v30 = 4613;
        *(_DWORD *)&v30[2] = 0;
        *(_WORD *)&v30[6] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v28 + 184))(v28, a2, v30);
        goto LABEL_47;
      case 0x1206:
        uint64_t v29 = *a1;
        *(_WORD *)unint64_t v30 = 4614;
        memset(&v30[8], 0, 24);
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v29 + 328))(v29, a2, v30);
        break;
      default:
        goto LABEL_2;
    }
LABEL_53:
    uint64_t v7 = *a4;
    if (!*a4) {
      *a4 = 0;
    }
    int v14 = *(void **)&v30[8];
    if (*(void *)&v30[8])
    {
      *(void *)&v30[16] = *(void *)&v30[8];
      goto LABEL_57;
    }
LABEL_4:
    if (v7) {
      return;
    }
    goto LABEL_49;
  }
  switch(v8)
  {
    case 0xAu:
      uint64_t v13 = *a1;
      strcpy(v30, "\n");
      memset(&v30[8], 0, 40);
      (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v13 + 176))(v13, a2, v30);
      uint64_t v7 = *a4;
      if (!*a4) {
        *a4 = 0;
      }
      int v14 = *(void **)&v30[24];
      if (*(void *)&v30[24])
      {
        *(void *)&v30[32] = *(void *)&v30[24];
LABEL_57:
        operator delete(v14);
        goto LABEL_3;
      }
      goto LABEL_4;
    case 0xEu:
      uint64_t v15 = *a1;
      *(_DWORD *)unint64_t v30 = 14;
      (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v15 + 104))(v15, a2, v30);
      break;
    case 0x14u:
      uint64_t v10 = *a1;
      *(_WORD *)unint64_t v30 = 20;
      *(_DWORD *)&v30[4] = 0;
      (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v10 + 344))(v10, a2, v30);
      break;
    default:
LABEL_2:
      (*(void (**)(void))(*(void *)*a1 + 16))();
LABEL_3:
      uint64_t v7 = *a4;
      goto LABEL_4;
  }
LABEL_47:
  if (*a4) {
    return;
  }
  *a4 = 0;
LABEL_49:
  (*(void (**)(uint64_t, void *))(*(void *)*a1 + 40))(*a1, a2);
  if (!*a4) {
    *a4 = 0;
  }
}

uint64_t sub_1CD3BD48C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 136))(a3);
  if (!*a1) {
    *a1 = 0;
  }
  return result;
}

uint64_t sub_1CD3BD524(uint64_t a1)
{
  *(void *)a1 = &unk_1F264CD80;
  sub_1CD8F6FF0(a1 + 32, &v4);
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 26)) {
      *(unsigned char *)(a1 + 26) = 0;
    }
    char v4 = 0;
  }
  sub_1CD4515D0(&v4);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  *(void *)(a1 + 16) = &unk_1F264D0C0;
  int v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD3BD5F8@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *))(*(void *)a2 + 56))(a2, a1);
  if (!*a3)
  {
    switch(*a1)
    {
      case 0x150D:
        *(_WORD *)uint64_t v10 = 5389;
        memset(&v10[2], 0, 30);
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 232))(a2, a1, v10);
        goto LABEL_27;
      case 0x150E:
        *(_WORD *)uint64_t v10 = 5390;
        memset(&v10[2], 0, 22);
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 216))(a2, a1, v10);
        goto LABEL_27;
      case 0x150F:
        *(_WORD *)uint64_t v10 = 5391;
        memset(&v10[2], 0, 22);
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 224))(a2, a1, v10);
        goto LABEL_27;
      case 0x1510:
        *(_WORD *)uint64_t v10 = 5392;
        *(_DWORD *)&v10[2] = 0;
        *(_OWORD *)&v10[8] = 0uLL;
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 240))(a2, a1, v10);
        goto LABEL_27;
      case 0x1511:
        *(_WORD *)uint64_t v10 = 5393;
        *(_DWORD *)&v10[2] = 0;
        *(_WORD *)&v10[6] = 0;
        *(_DWORD *)&v10[8] = 0;
        *(_OWORD *)&v10[16] = 0uLL;
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 248))(a2, a1, v10);
        goto LABEL_27;
      case 0x1512:
      case 0x1513:
      case 0x1514:
      case 0x1515:
      case 0x1516:
      case 0x1517:
      case 0x1518:
      case 0x1519:
LABEL_12:
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *))(*(void *)a2 + 48))(a2, a1);
        goto LABEL_13;
      case 0x151A:
        uint64_t v7 = 5402;
LABEL_21:
        *(void *)uint64_t v10 = v7;
        *(void *)&v10[8] = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 192))(a2, a1, v10);
LABEL_27:
        if (*a3) {
          return result;
        }
        *a3 = 0;
LABEL_29:
        uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *))(*(void *)a2 + 64))(a2, a1);
        if (!*a3) {
          *a3 = 0;
        }
        break;
      default:
        switch(*a1)
        {
          case 0x1400:
            uint64_t v7 = 5120;
            goto LABEL_21;
          case 0x1401:
            unsigned int v9 = 5121;
            goto LABEL_24;
          case 0x1402:
            unsigned int v9 = 5122;
LABEL_24:
            *(_DWORD *)&v10[8] = 0;
            *(void *)uint64_t v10 = v9;
            *(_OWORD *)&v10[16] = 0uLL;
            uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 200))(a2, a1, v10);
            goto LABEL_27;
          case 0x1403:
          case 0x1405:
          case 0x1406:
          case 0x1407:
          case 0x1408:
            goto LABEL_12;
          case 0x1404:
            *(_WORD *)uint64_t v10 = 5124;
            *(_DWORD *)&v10[2] = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 264))(a2, a1, v10);
            goto LABEL_27;
          case 0x1409:
            *(_WORD *)uint64_t v10 = 5129;
            *(_DWORD *)&v10[2] = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 208))(a2, a1, v10);
            goto LABEL_27;
          default:
            if (*a1 != 5378) {
              goto LABEL_12;
            }
            *(_DWORD *)uint64_t v10 = 5378;
            *(_DWORD *)&v10[16] = 1;
            *(void *)&v10[8] = 0;
            v10[20] = 0;
            *(void *)&v10[24] = 0;
            uint64_t v11 = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, _WORD *, unsigned char *))(*(void *)a2 + 256))(a2, a1, v10);
            uint64_t v8 = *a3;
            if (!*a3) {
              *a3 = 0;
            }
            if (*(_DWORD *)&v10[16] < 0x41u) {
              goto LABEL_14;
            }
            uint64_t result = *(void *)&v10[8];
            if (!*(void *)&v10[8]) {
              goto LABEL_14;
            }
            uint64_t result = MEMORY[0x1D25D9CB0](*(void *)&v10[8], 0x1000C8000313F17);
            break;
        }
LABEL_13:
        uint64_t v8 = *a3;
LABEL_14:
        if (!v8) {
          goto LABEL_29;
        }
        return result;
    }
  }
  return result;
}

void *sub_1CD3BDAE8(void *a1)
{
  *a1 = &unk_1F264CF50;
  int v2 = (void *)a1[3];
  if (v2 != a1 + 6) {
    free(v2);
  }
  return a1;
}

void sub_1CD3BDB3C(void *a1)
{
  *a1 = &unk_1F264CF50;
  int v2 = (void *)a1[3];
  if (v2 != a1 + 6) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3BDBB4@<X0>(uint64_t result@<X0>, int a2@<W2>, void *a3@<X8>)
{
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 16) = a2;
  *a3 = 0;
  return result;
}

void sub_1CD3BDBC4(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BDBCC(uint64_t a1@<X0>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  v41[32] = *MEMORY[0x1E4F143B8];
  if ((a2[2] & 0xC0) == 0x40)
  {
    uint64_t v21 = a2[3];
    v29[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)((char *)a2 + 2));
    v29[1] = v22;
    v28[0] = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v21);
    v28[1] = v23;
    v24[0] = "{0} {1}::*";
    v24[1] = 10;
    v24[2] = v27;
    v24[3] = 2;
    v25[0] = &unk_1F2617F90;
    v25[1] = v29;
    v26[0] = &unk_1F2617F90;
    v26[1] = v28;
    v27[0] = v25;
    v27[1] = v26;
    int32x2_t v38 = &v39;
    __int8 v39 = v41;
    long long v40 = xmmword_1CD96DBF0;
    int v31 = 0;
    char v35 = 0;
    uint64_t v36 = 0;
    int v37 = 0;
    unint64_t v30 = &unk_1F2646FA8;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    sub_1CD862C68((uint64_t)v24, (llvm::raw_ostream *)&v30);
    unint64_t v30 = &unk_1F2646B98;
    if (v37 == 1 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
    }
    sub_1CC1B8518(a1 + 24, (uint64_t)&v39);
    if (v39 != v41) {
      free(v39);
    }
    goto LABEL_29;
  }
  char v6 = (uint64_t *)(a1 + 24);
  uint64_t v8 = (const void *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)((char *)a2 + 2));
  size_t v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) < v7 + v10) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v7)
  {
    memcpy((void *)(*(void *)(a1 + 24) + v10), v8, v7);
    uint64_t v10 = *(void *)(a1 + 32);
  }
  uint64_t v11 = v10 + v9;
  *(void *)(a1 + 32) = v11;
  int v12 = a2[2];
  int v13 = v12 >> 5;
  if (!(v12 >> 5))
  {
    if (*(void *)(a1 + 40) < (unint64_t)(v11 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v14 = *v6;
    char v15 = 42;
LABEL_19:
    *(unsigned char *)(v14 + v11) = v15;
    uint64_t v16 = 1;
    goto LABEL_20;
  }
  if (v13 != 4)
  {
    if (v13 != 1)
    {
      if ((v12 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
    if (*(void *)(a1 + 40) < (unint64_t)(v11 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v14 = *v6;
    char v15 = 38;
    goto LABEL_19;
  }
  if (*(void *)(a1 + 40) < (unint64_t)(v11 + 2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(_WORD *)(*v6 + v11) = 9766;
  uint64_t v16 = 2;
LABEL_20:
  uint64_t v11 = *(void *)(a1 + 32) + v16;
  *(void *)(a1 + 32) = v11;
  int v12 = a2[2];
  if ((v12 & 0x400) == 0)
  {
LABEL_9:
    if ((v12 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_23:
    if (*(void *)(a1 + 40) < (unint64_t)(v11 + 9)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v18 = *(void *)(a1 + 24) + v11;
    *(void *)uint64_t v18 = *(void *)" volatile";
    *(unsigned char *)(v18 + 8) = 101;
    uint64_t v11 = *(void *)(a1 + 32) + 9;
    *(void *)(a1 + 32) = v11;
    int v12 = a2[2];
    if ((v12 & 0x800) == 0)
    {
LABEL_11:
      if ((v12 & 0x1000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    goto LABEL_25;
  }
LABEL_21:
  if (*(void *)(a1 + 40) < (unint64_t)(v11 + 6)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v17 = *(void *)(a1 + 24) + v11;
  *(_WORD *)(v17 + 4) = 29811;
  *(_DWORD *)uint64_t v17 = 1852793632;
  uint64_t v11 = *(void *)(a1 + 32) + 6;
  *(void *)(a1 + 32) = v11;
  int v12 = a2[2];
  if ((v12 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_10:
  if ((v12 & 0x800) == 0) {
    goto LABEL_11;
  }
LABEL_25:
  if (*(void *)(a1 + 40) < (unint64_t)(v11 + 12)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v19 = *(void *)(a1 + 24) + v11;
  *(void *)uint64_t v19 = *(void *)" __unaligned";
  *(_DWORD *)(v19 + 8) = 1684368999;
  uint64_t v11 = *(void *)(a1 + 32) + 12;
  *(void *)(a1 + 32) = v11;
  if ((a2[2] & 0x1000) != 0)
  {
LABEL_27:
    if (*(void *)(a1 + 40) < (unint64_t)(v11 + 11)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v20 = *(void *)(a1 + 24) + v11;
    *(void *)uint64_t v20 = *(void *)" __restrict";
    *(_DWORD *)(v20 + 7) = 1952672114;
    *(void *)(a1 + 32) += 11;
  }
LABEL_29:
  *a3 = 0;
}

void *sub_1CD3BE0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  __int16 v5 = *(_WORD *)(a2 + 6);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40) < (unint64_t)(v6 + 6)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v7 = *(void *)(a1 + 24) + v6;
    *(_WORD *)(v7 + 4) = 8308;
    *(_DWORD *)uint64_t v7 = 1936617315;
    *(void *)(a1 + 32) += 6;
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) < (unint64_t)(v8 + 9)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v9 = *(void *)(a1 + 24) + v8;
  *(void *)uint64_t v9 = *(void *)"volatile ";
  *(unsigned char *)(v9 + 8) = 32;
  *(void *)(a1 + 32) += 9;
  if ((v5 & 4) != 0)
  {
LABEL_9:
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40) < (unint64_t)(v10 + 12)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v11 = *(void *)(a1 + 24) + v10;
    *(void *)uint64_t v11 = *(void *)"__unaligned ";
    *(_DWORD *)(v11 + 8) = 543450478;
    *(void *)(a1 + 32) += 12;
  }
LABEL_11:
  uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 2));
  size_t v14 = v13;
  uint64_t v15 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) < v13 + v15) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v13)
  {
    uint64_t result = memcpy((void *)(*(void *)(a1 + 24) + v15), result, v13);
    uint64_t v15 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 32) = v15 + v14;
  *a3 = 0;
  return result;
}

void sub_1CD3BE298(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v25[32] = *MEMORY[0x1E4F143B8];
  v13[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 2));
  v13[1] = v6;
  v12[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 10));
  v12[1] = v7;
  v8[0] = "{0} {1}";
  v8[1] = 7;
  unint64_t v8[2] = v11;
  v8[3] = 2;
  v9[0] = &unk_1F2617F90;
  v9[1] = v13;
  v10[0] = &unk_1F2617F90;
  v10[1] = v12;
  v11[0] = v9;
  v11[1] = v10;
  uint64_t v22 = &v23;
  uint64_t v23 = v25;
  long long v24 = xmmword_1CD96DBF0;
  int v15 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  size_t v14 = &unk_1F2646FA8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_1CD862C68((uint64_t)v8, (llvm::raw_ostream *)&v14);
  size_t v14 = &unk_1F2646B98;
  if (v21 == 1 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8077774924);
  }
  sub_1CC1B8518(a1 + 24, (uint64_t)&v23);
  if (v23 != v25) {
    free(v23);
  }
  *a3 = 0;
}

void sub_1CD3BE494(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v28[32] = *MEMORY[0x1E4F143B8];
  v16[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 2));
  v16[1] = v6;
  v15[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 6));
  v15[1] = v7;
  v14[0] = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 18));
  v14[1] = v8;
  v9[0] = "{0} {1}::{2}";
  v9[1] = 12;
  void v9[2] = v13;
  v9[3] = 3;
  v10[0] = &unk_1F2617F90;
  v10[1] = v16;
  v11[0] = &unk_1F2617F90;
  v11[1] = v15;
  v12[0] = &unk_1F2617F90;
  v12[1] = v14;
  v13[0] = v10;
  v13[1] = v11;
  void v13[2] = v12;
  uint64_t v25 = &v26;
  uint64_t v26 = v28;
  long long v27 = xmmword_1CD96DBF0;
  int v18 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v17 = &unk_1F2646FA8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_1CD862C68((uint64_t)v9, (llvm::raw_ostream *)&v17);
  uint64_t v17 = &unk_1F2646B98;
  if (v24 == 1 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8077774924);
  }
  sub_1CC1B8518(a1 + 24, (uint64_t)&v26);
  if (v26 != v28) {
    free(v26);
  }
  *a3 = 0;
}

void sub_1CD3BE6E8(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BE6F0(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16) - v6;
  *(void *)(a1 + 32) = 0;
  if (!*(void *)(a1 + 40)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  **(unsigned char **)(a1 + 24) = 40;
  uint64_t v8 = *(void *)(a1 + 32) + 1;
  *(void *)(a1 + 32) = v8;
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v26 = a3;
    uint64_t v9 = 0;
    uint64_t v27 = v6;
    uint64_t v10 = (v7 >> 2);
    while (1)
    {
      unint64_t v11 = *(unsigned int *)(v6 + 4 * v9);
      if (v11 >= *(_DWORD *)(a1 + 16))
      {
        if (v11)
        {
          uint64_t v16 = (char *)v31 + 1;
          do
          {
            *--uint64_t v16 = a0123456789abcd_6[v11 & 0xF];
            BOOL v17 = v11 > 0xF;
            v11 >>= 4;
          }
          while (v17);
        }
        else
        {
          LOBYTE(v31[0]) = 48;
          uint64_t v16 = (char *)v31;
        }
        sub_1CC028D80(&v28, v16, (char *)v31 + 1, (char *)v31 + 1 - v16);
        int v18 = std::string::insert(&v28, 0, "<unknown 0x");
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        uint64_t v20 = std::string::append(&v29, ">");
        v31[0] = *((void *)&v20->__r_.__value_.__l + 2);
        long long v30 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[0] = 0;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        int v21 = SHIBYTE(v31[0]);
        char v22 = (void *)v30;
        if (v31[0] >= 0) {
          uint64_t v23 = &v30;
        }
        else {
          uint64_t v23 = (long long *)v30;
        }
        if (v31[0] >= 0) {
          size_t v24 = HIBYTE(v31[0]) & 0x7F;
        }
        else {
          size_t v24 = *((void *)&v30 + 1);
        }
        uint64_t v25 = *(void *)(a1 + 32);
        if (*(void *)(a1 + 40) < v25 + v24) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v24)
        {
          memcpy((void *)(*(void *)(a1 + 24) + v25), v23, v24);
          uint64_t v25 = *(void *)(a1 + 32);
        }
        *(void *)(a1 + 32) = v25 + v24;
        if (v21 < 0) {
          operator delete(v22);
        }
        uint64_t v6 = v27;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v11;
        size_t v13 = (const void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v3);
        size_t v14 = v12;
        uint64_t v15 = *(void *)(a1 + 32);
        if (*(void *)(a1 + 40) < v12 + v15) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v12)
        {
          memcpy((void *)(*(void *)(a1 + 24) + v15), v13, v12);
          uint64_t v15 = *(void *)(a1 + 32);
        }
        *(void *)(a1 + 32) = v15 + v14;
      }
      ++v9;
      uint64_t v8 = *(void *)(a1 + 32);
      if (v9 == v10) {
        break;
      }
      if (*(void *)(a1 + 40) < (unint64_t)(v8 + 2)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_WORD *)(*(void *)(a1 + 24) + v8) = 8236;
      *(void *)(a1 + 32) += 2;
    }
    a3 = v26;
  }
  if ((unint64_t)(v8 + 1) > *(void *)(a1 + 40)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*(void *)(a1 + 24) + v8) = 41;
  ++*(void *)(a1 + 32);
  *a3 = 0;
}

void *sub_1CD3BEA5C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  result[4] = 0;
  if (result[5] <= 0xBuLL) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v3 = result[3];
  *(void *)uint64_t v3 = *(void *)"<field list>";
  *(_DWORD *)(v3 + 8) = 1047819113;
  result[4] += 12;
  *a2 = 0;
  return result;
}

void **sub_1CD3BEAE4@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 24);
  size_t v6 = *(void *)(a2 + 32);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BEB70@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BEBFC@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BEC88@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BED14@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 24);
  size_t v6 = *(void *)(a2 + 32);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BEDA0@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  __int16 v5 = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(const void **)v6;
  size_t v7 = *(void *)(v6 + 8);
  result[4] = 0;
  if ((unint64_t)result[5] < v7) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v7)
  {
    uint64_t result = (void **)memcpy(result[3], v8, v7);
    __int16 v5 = (char *)v3[4];
  }
  v3[4] = &v5[v7];
  *a3 = 0;
  return result;
}

void sub_1CD3BEE30(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v21[32] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    LODWORD(v5) = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  }
  v6[0] = "<vftable {0} methods>";
  v6[1] = 21;
  v6[2] = &v9;
  v6[3] = 1;
  size_t v7 = &unk_1F2619290;
  int v8 = v5;
  uint64_t v9 = &v7;
  int v18 = &v19;
  std::string::size_type v19 = v21;
  long long v20 = xmmword_1CD96DBF0;
  int v11 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v10 = &unk_1F2646FA8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_1CD862C68((uint64_t)v6, (llvm::raw_ostream *)&v10);
  uint64_t v10 = &unk_1F2646B98;
  if (v17 == 1 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8077774924);
  }
  sub_1CC1B8518(a1 + 24, (uint64_t)&v19);
  if (v19 != v21) {
    free(v19);
  }
  *a3 = 0;
}

void sub_1CD3BEFBC(void *a1@<X8>)
{
  *a1 = 0;
}

void **sub_1CD3BEFC4@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = 0;
  size_t v7 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    uint64_t v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void **sub_1CD3BF050@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = 0;
  size_t v7 = *(const void **)(a2 + 16);
  size_t v6 = *(void *)(a2 + 24);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    uint64_t v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void sub_1CD3BF0DC(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1CD3BF0E4@<X0>(void *result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  char v4 = result;
  size_t v6 = *(unsigned int **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16) - (void)v6;
  result[4] = 0;
  if (!result[5]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)result[3] = 34;
  uint64_t v8 = result[4] + 1;
  result[4] = v8;
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    for (uint64_t i = (v7 >> 2) - 1; ; --i)
    {
      unsigned int v10 = *v6++;
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v10;
      uint64_t result = (void *)(*(uint64_t (**)(void, unint64_t))(*(void *)v4[1] + 40))(v4[1], v3);
      size_t v12 = v11;
      uint64_t v13 = v4[4];
      if (v4[5] < v11 + v13) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v11)
      {
        uint64_t result = memcpy((void *)(v4[3] + v13), result, v11);
        uint64_t v13 = v4[4];
      }
      uint64_t v8 = v13 + v12;
      v4[4] = v8;
      if (!i) {
        break;
      }
      if (v4[5] < (unint64_t)(v8 + 3)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v14 = v4[3] + v8;
      *(unsigned char *)(v14 + 2) = 34;
      *(_WORD *)uint64_t v14 = 8226;
      v4[4] += 3;
    }
  }
  if ((unint64_t)(v8 + 1) > v4[5]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(v4[3] + v8) = 34;
  ++v4[4];
  *a3 = 0;
  return result;
}

void **sub_1CD3BF2C0@<X0>(void **result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v3 = result;
  uint64_t v5 = 0;
  unint64_t v7 = *(const void **)(a2 + 8);
  size_t v6 = *(void *)(a2 + 16);
  result[4] = 0;
  if ((unint64_t)result[5] < v6) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v6)
  {
    uint64_t result = (void **)memcpy(result[3], v7, v6);
    uint64_t v5 = (char *)v3[4];
  }
  v3[4] = &v5[v6];
  *a3 = 0;
  return result;
}

void sub_1CD3BF34C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BF354(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BF35C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BF364(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BF36C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CD3BF3A0()
{
}

_WORD *sub_1CD3BF460(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FCCBC(&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BF630(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FBFD4((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BF800(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FC1C0(&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BF9D0(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FC4EC(&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BFBA0(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FC7A4((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BFD70(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FD244((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3BFF40(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FD338((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0110(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FD50C((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C02E0(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FD688((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C04B0(void *a1, void *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *(_WORD *)a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD3C2C18(&v22, a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0680(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FD804((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0850(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FDDF4((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0A20(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FDEC0((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0BF0(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FDF8C((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0DC0(void *a1, __int16 *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FDB98((uint64_t)&v22, (uint64_t)a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C0F90(void *a1, unsigned int *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *(_WORD *)a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FDC34((uint64_t)&v22, a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

_WORD *sub_1CD3C1160(void *a1, uint64_t *a2)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  char v4 = (_WORD *)*a1;
  uint64_t v5 = a1[1] - *a1;
  std::string::size_type v19 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v20, v4, v5, 1);
  uint64_t v21 = 0;
  char v22 = &unk_1F264D0C0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[3] = 0;
  v28[4] = &v19;
  v28[5] = 0;
  v28[6] = 0;
  __int16 v6 = *(_WORD *)a2;
  __int16 v17 = 2;
  __int16 v18 = v6;
  llvm::BinaryStreamWriter::writeBytes((uint64_t)&v19, 4, &v16);
  unint64_t v7 = (_WORD *)*a1;
  uint64_t v14 = (_WORD *)*a1;
  unint64_t v15 = 4;
  sub_1CD8FB9DC((uint64_t)&v22, &v14, &v13);
  sub_1CD8FE234((uint64_t)&v22, a2, &v12);
  sub_1CD8F6FF0((uint64_t)v27, &v11);
  if (!v11)
  {
    if (v24) {
      char v24 = 0;
    }
    uint64_t v11 = 0;
  }
  sub_1CD3BC4BC((uint64_t)&v19);
  if (v15 >= 4) {
    __int16 v8 = v14[1];
  }
  else {
    __int16 v8 = 0;
  }
  v7[1] = v8;
  _WORD *v7 = v21 - 2;
  uint64_t v9 = (_WORD *)*a1;
  char v22 = &unk_1F264D0C0;
  if (v27[0] != v28) {
    free(v27[0]);
  }
  sub_1CD049224(&v19);
  return v9;
}

unsigned __int8 *sub_1CD3C1330(unsigned __int8 *result, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v6 = result;
  uint64_t v7 = 0;
  int v8 = 2;
  if (a3 > 5400)
  {
    switch(a3)
    {
      case 5633:
        int v8 = 1;
        sub_1CB839378(a4, 1, 1);
LABEL_65:
        uint64_t v7 = 0x400000000;
        goto LABEL_71;
      case 5634:
        goto LABEL_71;
      case 5635:
        int v8 = *(unsigned __int16 *)result;
        if (!*(_WORD *)result) {
          return result;
        }
        uint64_t v7 = 0x200000001;
        goto LABEL_71;
      case 5636:
        int v8 = *(_DWORD *)result;
        if (*(_DWORD *)result) {
          goto LABEL_68;
        }
        return result;
      case 5637:
        uint64_t v7 = 1;
        goto LABEL_70;
      case 5638:
        int v8 = 1;
        sub_1CB839378(a4, 0, 1);
LABEL_68:
        uint64_t v7 = 0x400000001;
        goto LABEL_71;
      case 5639:
LABEL_53:
        uint64_t v7 = 0;
LABEL_70:
        int v8 = 1;
        goto LABEL_71;
      default:
        if (a3 == 5401)
        {
LABEL_58:
          uint64_t v7 = 0x400000000;
          int v8 = 3;
        }
        else if (a3 != 5405)
        {
          return result;
        }
LABEL_71:
        uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, v7, v8);
        break;
    }
  }
  else
  {
    switch(a3)
    {
      case 4609:
        int v8 = *(_DWORD *)result;
        if (*(_DWORD *)result) {
          goto LABEL_65;
        }
        return result;
      case 4610:
      case 4612:
        return result;
      case 4611:
        if (!a2) {
          return result;
        }
        int v9 = 0;
        break;
      case 4613:
        goto LABEL_53;
      case 4614:
        if (a2)
        {
          int v20 = 0;
          do
          {
            __int16 v21 = *(_WORD *)v6;
            uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, (unint64_t)(v20 + 4) << 32, 1);
            if ((v21 & 0x14) == 0x10) {
              unsigned int v22 = 12;
            }
            else {
              unsigned int v22 = 8;
            }
            v20 += v22;
            a2 -= v22;
            v6 += v22;
          }
          while (a2);
        }
        return result;
      default:
        if (a3 > 0x1518)
        {
          switch(a3)
          {
            case 4097:
              goto LABEL_53;
            case 4098:
              int v8 = 1;
              uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, 0, 1);
              if ((*((_DWORD *)v6 + 1) & 0xC0) == 0x40) {
                goto LABEL_62;
              }
              return result;
            case 4104:
              int v8 = 1;
              sub_1CB839378(a4, 0, 1);
LABEL_62:
              uint64_t v7 = 0x800000000;
              goto LABEL_71;
            case 4105:
              sub_1CB839378(a4, 0, 3);
              uint64_t v7 = 0x1000000000;
              goto LABEL_70;
            default:
              return result;
          }
        }
        switch(a3)
        {
          case 5379:
            goto LABEL_71;
          case 5380:
          case 5381:
            goto LABEL_58;
          case 5382:
            uint64_t v7 = 0x400000000;
            goto LABEL_70;
          case 5383:
            uint64_t v7 = 0x400000000;
            int v8 = 2;
            goto LABEL_71;
          default:
            JUMPOUT(0);
        }
    }
    while (*(_WORD *)v6 == 5378)
    {
      if (*((__int16 *)v6 + 2) < 0) {
        unsigned int v10 = dword_1CFB33C20[*((unsigned __int16 *)v6 + 2) - 0x8000] + 6;
      }
      else {
        unsigned int v10 = 6;
      }
LABEL_19:
      uint64_t result = (unsigned __int8 *)strlen((const char *)&v6[v10]);
      unsigned int v12 = v10 + result + 1;
LABEL_20:
      if (a2 != v12)
      {
        int v13 = v12 + v9;
        uint64_t v14 = &v6[v12];
        unsigned int v15 = *v14;
        uint64_t v16 = v15 <= 0xEF ? 0 : v15 & 0xFu;
        uint64_t v17 = a2 - v12;
        __int16 v6 = &v14[v16];
        int v9 = v13 + v16;
        a2 = v17 - v16;
        if (v17 != v16) {
          continue;
        }
      }
      return result;
    }
    switch(*(_WORD *)v6)
    {
      case 0x1400:
        uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 1);
        if (*((__int16 *)v6 + 4) < 0) {
          unsigned int v12 = dword_1CFB33C20[*((unsigned __int16 *)v6 + 4) - 0x8000] + 10;
        }
        else {
          unsigned int v12 = 10;
        }
        goto LABEL_20;
      case 0x1401:
      case 0x1402:
        uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 2);
        if (*((__int16 *)v6 + 6) < 0) {
          unsigned int v11 = dword_1CFB33C20[*((unsigned __int16 *)v6 + 6) - 0x8000] + 14;
        }
        else {
          unsigned int v11 = 14;
        }
        if (*(__int16 *)&v6[v11] < 0) {
          int v19 = dword_1CFB33C20[*(unsigned __int16 *)&v6[v11] - 0x8000] + 2;
        }
        else {
          int v19 = 2;
        }
        unsigned int v12 = v19 + v11;
        goto LABEL_20;
      case 0x1403:
      case 0x1405:
      case 0x1406:
      case 0x1407:
      case 0x1408:
        return result;
      case 0x1404:
      case 0x1409:
        uint64_t result = (unsigned __int8 *)sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 1);
        unsigned int v12 = 8;
        goto LABEL_20;
      default:
        switch(*(_WORD *)v6)
        {
          case 0x150D:
            sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 1);
            if (*((__int16 *)v6 + 4) < 0) {
              unsigned int v10 = dword_1CFB33C20[*((unsigned __int16 *)v6 + 4) - 0x8000] + 10;
            }
            else {
              unsigned int v10 = 10;
            }
            goto LABEL_19;
          case 0x150E:
          case 0x150F:
          case 0x1510:
            sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 1);
            uint64_t result = (unsigned __int8 *)strlen((const char *)v6 + 8);
            unsigned int v12 = result + 9;
            goto LABEL_20;
          case 0x1511:
            sub_1CB839378(a4, (unint64_t)(v9 + 4) << 32, 1);
            if ((*((_WORD *)v6 + 1) & 0x14) == 0x10) {
              unsigned int v18 = 12;
            }
            else {
              unsigned int v18 = 8;
            }
            uint64_t result = (unsigned __int8 *)strlen((const char *)&v6[v18]);
            unsigned int v12 = (v18 | 1) + result;
            goto LABEL_20;
          default:
            return result;
        }
    }
  }
  return result;
}

void sub_1CD3C18BC()
{
  qword_1EA61F368 = 0;
  unk_1EA61F370 = 0;
  qword_1EA61F378 = 0;
  qword_1EBD0DC90 = 0;
  unk_1EBD0DC98 = 0;
  qword_1EBD0DC88 = -1;
  qword_1EA61F380 = 0;
  qword_1EBD0DCA0 = 255;
}

uint64_t sub_1CD3C18F8(void *a1, void *a2, unsigned int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1[9] || a1[7] || a1[8]) {
    return (*(uint64_t (**)(void *, void *))(*a1 + 24))(a1, a2);
  }
  if (a2[1] >= 4uLL) {
    int v6 = *(unsigned __int16 *)(*a2 + 2);
  }
  else {
    int v6 = 0;
  }
  __int16 v25 = 1283;
  v24[0] = " ";
  v24[2] = sub_1CD3C1B80(v6);
  v24[3] = v7;
  v26[0] = v24;
  void v26[2] = " (0x";
  __int16 v27 = 770;
  unint64_t v8 = a3;
  if (a3)
  {
    int v9 = (char *)v35 + 1;
    do
    {
      *--int v9 = a0123456789abcd_6[v8 & 0xF];
      BOOL v10 = v8 > 0xF;
      v8 >>= 4;
    }
    while (v10);
  }
  else
  {
    int v9 = (char *)v35;
    LOBYTE(v35[0]) = 48;
  }
  unsigned int v11 = __p;
  sub_1CC028D80(__p, v9, (char *)v35 + 1, (char *)v35 + 1 - v9);
  char v12 = v27;
  if (v27 == 1)
  {
    std::string v28 = __p;
    long long v30 = v23;
    __int16 v31 = 260;
    int v32 = v21;
    __int16 v33 = v22;
    char v13 = 4;
    uint64_t v15 = v29;
  }
  else
  {
    if (!(_BYTE)v27)
    {
      char v13 = 0;
      __int16 v31 = 256;
      char v14 = 1;
      goto LABEL_20;
    }
    uint64_t v16 = (void **)v26[0];
    char v13 = 2;
    if (HIBYTE(v27) != 1)
    {
      char v12 = 2;
      uint64_t v16 = (void **)v26;
    }
    std::string v28 = v16;
    uint64_t v29 = v26[1];
    *(void *)&long long v30 = __p;
    LOBYTE(v31) = v12;
    uint64_t v15 = 4;
    HIBYTE(v31) = 4;
    unsigned int v11 = (void **)&v28;
  }
  v34[0] = v11;
  v34[1] = v15;
  v35[0] = ")";
  char v14 = 3;
LABEL_20:
  char v36 = v13;
  char v37 = v14;
  uint64_t v17 = a1[9];
  if (v17 && !a1[7] && !a1[8] && (*(unsigned int (**)(uint64_t))(*(void *)v17 + 40))(v17)) {
    (*(void (**)(void, void *))(*(void *)a1[9] + 32))(a1[9], v34);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(void *, void *))(*a1 + 24))(a1, a2);
}

const char *sub_1CD3C1B80(int a1)
{
  if (a1 <= 5377)
  {
    if (a1 <= 4608)
    {
      if (a1 <= 4096)
      {
        switch(a1)
        {
          case 10:
            return "VFTableShape";
          case 14:
            return "Label";
          case 20:
            return "EndPrecomp";
          default:
            return "UnknownLeaf";
        }
      }
      else
      {
        int v2 = a1 - 4097;
        uint64_t result = "Pointer";
        switch(v2)
        {
          case 0:
            uint64_t result = "Modifier";
            break;
          case 1:
            return result;
          case 7:
            uint64_t result = "Procedure";
            break;
          case 8:
            uint64_t result = "MemberFunction";
            break;
          default:
            return "UnknownLeaf";
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 5120:
          uint64_t result = "BaseClass";
          break;
        case 5121:
          uint64_t result = "VirtualBaseClass";
          break;
        case 5122:
          uint64_t result = "IndirectVirtualBaseClass";
          break;
        case 5123:
        case 5125:
        case 5126:
        case 5127:
        case 5128:
          return "UnknownLeaf";
        case 5124:
          uint64_t result = "ListContinuation";
          break;
        case 5129:
          uint64_t result = "VFPtr";
          break;
        default:
          switch(a1)
          {
            case 4609:
              uint64_t result = "ArgList";
              break;
            case 4611:
              uint64_t result = "FieldList";
              break;
            case 4613:
              uint64_t result = "BitField";
              break;
            case 4614:
              uint64_t result = "MethodOverloadList";
              break;
            default:
              return "UnknownLeaf";
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 5378:
        uint64_t result = "Enumerator";
        break;
      case 5379:
        uint64_t result = "Array";
        break;
      case 5380:
        uint64_t result = "Class";
        break;
      case 5381:
        uint64_t result = "Struct";
        break;
      case 5382:
        uint64_t result = "Union";
        break;
      case 5383:
        uint64_t result = "Enum";
        break;
      case 5384:
      case 5386:
      case 5387:
      case 5388:
      case 5394:
      case 5395:
      case 5396:
      case 5398:
      case 5399:
      case 5400:
      case 5403:
      case 5404:
        return "UnknownLeaf";
      case 5385:
        uint64_t result = "Precomp";
        break;
      case 5389:
        uint64_t result = "DataMember";
        break;
      case 5390:
        uint64_t result = "StaticDataMember";
        break;
      case 5391:
        uint64_t result = "OverloadedMethod";
        break;
      case 5392:
        uint64_t result = "NestedType";
        break;
      case 5393:
        uint64_t result = "OneMethod";
        break;
      case 5397:
        uint64_t result = "TypeServer2";
        break;
      case 5401:
        uint64_t result = "Interface";
        break;
      case 5402:
        uint64_t result = "BaseInterface";
        break;
      case 5405:
        uint64_t result = "VFTable";
        break;
      default:
        switch(a1)
        {
          case 5633:
            uint64_t result = "FuncId";
            break;
          case 5634:
            uint64_t result = "MemberFuncId";
            break;
          case 5635:
            uint64_t result = "BuildInfo";
            break;
          case 5636:
            uint64_t result = "StringList";
            break;
          case 5637:
            uint64_t result = "StringId";
            break;
          case 5638:
            uint64_t result = "UdtSourceLine";
            break;
          case 5639:
            uint64_t result = "UdtModSourceLine";
            break;
          default:
            return "UnknownLeaf";
        }
        break;
    }
  }
  return result;
}

void sub_1CD3C1FB0(void *a1@<X0>, __int16 a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  v59[50] = *MEMORY[0x1E4F143B8];
  if (a1[7]) {
    BOOL v7 = a1[5] == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7 || a1[6] != 0)
  {
    *(unsigned char *)(a5 + 23) = 0;
    *(unsigned char *)a5 = 0;
    return;
  }
  uint64_t v57 = v59;
  a6.n128_u64[0] = 0xA00000000;
  uint64_t v58 = 0xA00000000;
  if (a4)
  {
    unsigned int v9 = 0;
    uint64_t v13 = 40 * a4;
    do
    {
      if (*(_WORD *)(a3 + 32)) {
        BOOL v14 = (unsigned __int16)(*(_WORD *)(a3 + 32) & a2) == *(unsigned __int16 *)(a3 + 32);
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = sub_1CC47EC6C((uint64_t)&v57, a3);
        uint64_t v16 = (__n128 *)((char *)v57 + 40 * v58);
        unint64_t v17 = *(void *)(v15 + 32);
        a6 = *(__n128 *)(v15 + 16);
        *uint64_t v16 = *(__n128 *)v15;
        v16[1] = a6;
        v16[2].n128_u64[0] = v17;
        unsigned int v9 = v58 + 1;
        LODWORD(v58) = v58 + 1;
      }
      a3 += 40;
      v13 -= 40;
    }
    while (v13);
    BOOL v10 = v57;
  }
  else
  {
    unsigned int v9 = 0;
    BOOL v10 = v59;
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CD3C38A0;
  unint64_t v18 = 126 - 2 * __clz(v9);
  if (v9) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  sub_1CD8FF1AC((uint64_t)v10, (__n128 *)&v10[5 * v9], (uint64_t (**)(long long *, long long *))&v54, v19, 1, a6);
  memset(&v54, 0, sizeof(v54));
  if (!v58)
  {
LABEL_83:
    *(std::string *)a5 = v54;
    memset(&v54, 0, sizeof(v54));
    goto LABEL_84;
  }
  char v20 = (char *)v57;
  int v21 = (char *)v57 + 40 * v58;
  char v22 = 1;
  long long v23 = " (0x";
  do
  {
    if ((v22 & 1) == 0) {
      std::string::append(&v54, " | ");
    }
    char v24 = *(const void **)v20;
    if (!*(void *)v20)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_38;
    }
    std::string::size_type v25 = *((void *)v20 + 1);
    if (v25 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v25 >= 0x17)
    {
      uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v27 = v25 | 7;
      }
      std::string v28 = v23;
      uint64_t v29 = v27 + 1;
      p_dst = (std::string *)operator new(v27 + 1);
      unint64_t v30 = v29 | 0x8000000000000000;
      long long v23 = v28;
      __dst.__r_.__value_.__l.__size_ = v25;
      __dst.__r_.__value_.__r.__words[2] = v30;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *((void *)v20 + 1);
      p_dst = &__dst;
      if (!v25) {
        goto LABEL_37;
      }
    }
    memmove(p_dst, v24, v25);
LABEL_37:
    p_dst->__r_.__value_.__s.__data_[v25] = 0;
LABEL_38:
    __int16 v31 = std::string::append(&__dst, v23);
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v33 = *((unsigned __int16 *)v20 + 16);
    uint64_t v34 = (char *)v56 + 1;
    if (*((_WORD *)v20 + 16))
    {
      do
      {
        *--uint64_t v34 = a0123456789abcd_6[v33 & 0xF];
        BOOL v35 = v33 > 0xF;
        v33 >>= 4;
      }
      while (v35);
    }
    else
    {
      LOBYTE(v56[0]) = 48;
      uint64_t v34 = (char *)v56;
    }
    sub_1CC028D80(v49, v34, (char *)v56 + 1, (char *)v56 + 1 - v34);
    if (v50 >= 0) {
      char v36 = v49;
    }
    else {
      char v36 = (void **)v49[0];
    }
    if (v50 >= 0) {
      std::string::size_type v37 = v50 & 0x7F;
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v49[1];
    }
    uint64_t v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    long long v40 = std::string::append(&v53, ")");
    std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56[0] = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (v56[0] >= 0) {
      BOOL v42 = __p;
    }
    else {
      BOOL v42 = (void **)__p[0];
    }
    if (v56[0] >= 0) {
      std::string::size_type v43 = HIBYTE(v56[0]) & 0x7F;
    }
    else {
      std::string::size_type v43 = (std::string::size_type)__p[1];
    }
    std::string::append(&v54, (const std::string::value_type *)v42, v43);
    if (SHIBYTE(v56[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    char v22 = 0;
    v20 += 40;
  }
  while (v20 != v21);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_83;
  }
  *(unsigned char *)(a5 + 23) = 3;
  *(_DWORD *)a5 = 2107424;
  sub_1CB907098((uint64_t)__p, size + 2);
  if (v56[0] >= 0) {
    uint64_t v45 = __p;
  }
  else {
    uint64_t v45 = (void **)__p[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v46 = &v54;
  }
  else {
    int64x2_t v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  memmove(v45, v46, size);
  strcpy((char *)v45 + size, ")");
  if (v56[0] >= 0) {
    int64x2_t v47 = __p;
  }
  else {
    int64x2_t v47 = (void **)__p[0];
  }
  if (v56[0] >= 0) {
    std::string::size_type v48 = HIBYTE(v56[0]) & 0x7F;
  }
  else {
    std::string::size_type v48 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a5, (const std::string::value_type *)v47, v48);
  if (SHIBYTE(v56[0]) < 0) {
    operator delete(__p[0]);
  }
LABEL_84:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v57 != v59) {
    free(v57);
  }
}

void sub_1CD3C2454(uint64_t a1, void *a2, char a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  v59[50] = *MEMORY[0x1E4F143B8];
  if (a2[7]) {
    BOOL v7 = a2[5] == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7 || a2[6] != 0)
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return;
  }
  uint64_t v57 = v59;
  a6.n128_u64[0] = 0xA00000000;
  uint64_t v58 = 0xA00000000;
  if (a5)
  {
    unsigned int v9 = 0;
    uint64_t v13 = 40 * a5;
    do
    {
      if (*(unsigned char *)(a4 + 32)) {
        BOOL v14 = (*(unsigned char *)(a4 + 32) & a3) == *(unsigned __int8 *)(a4 + 32);
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = sub_1CC47EC6C((uint64_t)&v57, a4);
        uint64_t v16 = (__n128 *)((char *)v57 + 40 * v58);
        unint64_t v17 = *(void *)(v15 + 32);
        a6 = *(__n128 *)(v15 + 16);
        *uint64_t v16 = *(__n128 *)v15;
        v16[1] = a6;
        v16[2].n128_u64[0] = v17;
        unsigned int v9 = v58 + 1;
        LODWORD(v58) = v58 + 1;
      }
      a4 += 40;
      v13 -= 40;
    }
    while (v13);
    BOOL v10 = v57;
  }
  else
  {
    unsigned int v9 = 0;
    BOOL v10 = v59;
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CD3C4548;
  unint64_t v18 = 126 - 2 * __clz(v9);
  if (v9) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  sub_1CD8FF694((uint64_t)v10, (__n128 *)&v10[5 * v9], (uint64_t (**)(long long *, long long *))&v54, v19, 1, a6);
  memset(&v54, 0, sizeof(v54));
  if (!v58)
  {
LABEL_83:
    *(std::string *)a1 = v54;
    memset(&v54, 0, sizeof(v54));
    goto LABEL_84;
  }
  char v20 = (char *)v57;
  int v21 = (char *)v57 + 40 * v58;
  char v22 = 1;
  long long v23 = " (0x";
  do
  {
    if ((v22 & 1) == 0) {
      std::string::append(&v54, " | ");
    }
    char v24 = *(const void **)v20;
    if (!*(void *)v20)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_38;
    }
    std::string::size_type v25 = *((void *)v20 + 1);
    if (v25 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v25 >= 0x17)
    {
      uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v27 = v25 | 7;
      }
      std::string v28 = v23;
      uint64_t v29 = v27 + 1;
      p_dst = (std::string *)operator new(v27 + 1);
      unint64_t v30 = v29 | 0x8000000000000000;
      long long v23 = v28;
      __dst.__r_.__value_.__l.__size_ = v25;
      __dst.__r_.__value_.__r.__words[2] = v30;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *((void *)v20 + 1);
      p_dst = &__dst;
      if (!v25) {
        goto LABEL_37;
      }
    }
    memmove(p_dst, v24, v25);
LABEL_37:
    p_dst->__r_.__value_.__s.__data_[v25] = 0;
LABEL_38:
    __int16 v31 = std::string::append(&__dst, v23);
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v33 = v20[32];
    uint64_t v34 = (char *)v56 + 1;
    if (v20[32])
    {
      do
      {
        *--uint64_t v34 = a0123456789abcd_6[v33 & 0xF];
        BOOL v35 = v33 > 0xF;
        v33 >>= 4;
      }
      while (v35);
    }
    else
    {
      LOBYTE(v56[0]) = 48;
      uint64_t v34 = (char *)v56;
    }
    sub_1CC028D80(v49, v34, (char *)v56 + 1, (char *)v56 + 1 - v34);
    if (v50 >= 0) {
      char v36 = v49;
    }
    else {
      char v36 = (void **)v49[0];
    }
    if (v50 >= 0) {
      std::string::size_type v37 = v50 & 0x7F;
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v49[1];
    }
    uint64_t v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    long long v40 = std::string::append(&v53, ")");
    std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56[0] = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (v56[0] >= 0) {
      BOOL v42 = __p;
    }
    else {
      BOOL v42 = (void **)__p[0];
    }
    if (v56[0] >= 0) {
      std::string::size_type v43 = HIBYTE(v56[0]) & 0x7F;
    }
    else {
      std::string::size_type v43 = (std::string::size_type)__p[1];
    }
    std::string::append(&v54, (const std::string::value_type *)v42, v43);
    if (SHIBYTE(v56[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    char v22 = 0;
    v20 += 40;
  }
  while (v20 != v21);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_83;
  }
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 2107424;
  sub_1CB907098((uint64_t)__p, size + 2);
  if (v56[0] >= 0) {
    uint64_t v45 = __p;
  }
  else {
    uint64_t v45 = (void **)__p[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64x2_t v46 = &v54;
  }
  else {
    int64x2_t v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  memmove(v45, v46, size);
  strcpy((char *)v45 + size, ")");
  if (v56[0] >= 0) {
    int64x2_t v47 = __p;
  }
  else {
    int64x2_t v47 = (void **)__p[0];
  }
  if (v56[0] >= 0) {
    std::string::size_type v48 = HIBYTE(v56[0]) & 0x7F;
  }
  else {
    std::string::size_type v48 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v47, v48);
  if (SHIBYTE(v56[0]) < 0) {
    operator delete(__p[0]);
  }
LABEL_84:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v57 != v59) {
    free(v57);
  }
}

void sub_1CD3C28F8(size_t *a1@<X1>, uint64_t a2@<X0>, size_t *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 48)) {
    BOOL v10 = *(void *)(a2 + 56) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10 || *(void *)(a2 + 40) != 0)
  {
    BOOL v42 = "Name";
    __int16 v45 = 259;
    sub_1CD8F8380((llvm::StringRef *)a1, a2, (uint64_t)&v42, a5);
    if (*a5) {
      return;
    }
    if (!a4)
    {
LABEL_41:
      *a5 = 0;
      return;
    }
    BOOL v42 = "LinkageName";
    __int16 v45 = 259;
LABEL_46:
    char v26 = a5;
    uint64_t v27 = a2;
    std::string::size_type v25 = (llvm::StringRef *)a3;
    goto LABEL_40;
  }
  unsigned int v12 = sub_1CD8F70CC((unsigned int *)a2);
  uint64_t v13 = v12;
  if (a4)
  {
    size_t v14 = a3[1];
    if (a1[1] + v14 + 2 > v12)
    {
      BOOL v42 = (char *)&v44;
      long long v43 = xmmword_1CDC7F9D0;
      sub_1CD3C3814((int *)*a3, v14, &v42);
      __int16 v33 = 1283;
      __p[0] = "??@";
      __int16 v31 = v42;
      uint64_t v32 = v43;
      uint64_t v34 = __p;
      char v36 = "@";
      __int16 v38 = 770;
      llvm::Twine::str((llvm::Twine *)&v34, &v39);
      uint64_t v15 = v41 & 0x7F;
      if (v41 < 0) {
        uint64_t v15 = v40;
      }
      unint64_t v16 = v13 - v15 - 2;
      if (v16 >= 0x1000) {
        unint64_t v16 = 4096;
      }
      unint64_t v17 = v16 - 32;
      sub_1CD3C3814((int *)*a1, a1[1], &v42);
      size_t v18 = a1[1];
      if (v18 >= v17) {
        size_t v18 = v17;
      }
      uint64_t v34 = (void **)*a1;
      unint64_t v35 = v18;
      char v36 = v42;
      uint64_t v37 = v43;
      __int16 v38 = 1285;
      llvm::Twine::str((llvm::Twine *)&v34, __p);
      uint64_t v19 = (void **)__p[0];
      if (SHIBYTE(v31) >= 0) {
        uint64_t v19 = __p;
      }
      char v20 = (void *)(HIBYTE(v31) & 0x7F);
      if (SHIBYTE(v31) < 0) {
        char v20 = __p[1];
      }
      v29[0] = v19;
      v29[1] = v20;
      int v21 = v39;
      if (v41 >= 0) {
        int v21 = &v39;
      }
      uint64_t v22 = v41 & 0x7F;
      if (v41 < 0) {
        uint64_t v22 = v40;
      }
      v28[0] = v21;
      v28[1] = v22;
      __int16 v38 = 257;
      sub_1CD8F8380((llvm::StringRef *)v29, a2, (uint64_t)&v34, a5);
      if (*a5)
      {
        BOOL v23 = 1;
      }
      else
      {
        __int16 v38 = 257;
        sub_1CD8F8380((llvm::StringRef *)v28, a2, (uint64_t)&v34, a5);
        BOOL v23 = *a5 != 0;
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (v41 < 0) {
        operator delete(v39);
      }
      if (v42 != (char *)&v44) {
        free(v42);
      }
      if (!v23) {
        goto LABEL_41;
      }
      return;
    }
    __int16 v45 = 257;
    sub_1CD8F8380((llvm::StringRef *)a1, a2, (uint64_t)&v42, a5);
    if (*a5) {
      return;
    }
    __int16 v45 = 257;
    goto LABEL_46;
  }
  unint64_t v24 = a1[1];
  if (v24 >= (unint64_t)v12 - 1) {
    unint64_t v24 = v12 - 1;
  }
  uint64_t v34 = (void **)*a1;
  unint64_t v35 = v24;
  __int16 v45 = 257;
  std::string::size_type v25 = (llvm::StringRef *)&v34;
  char v26 = a5;
  uint64_t v27 = a2;
LABEL_40:
  sub_1CD8F8380(v25, v27, (uint64_t)&v42, v26);
  if (!*a5) {
    goto LABEL_41;
  }
}

void sub_1CD3C2C18(void *a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  unsigned __int16 v42 = 0;
  uint64_t v5 = a1 + 2;
  if (a1[7] && !a1[9] && !a1[8])
  {
    __int16 v41 = 257;
    sub_1CD8FB560(a1 + 2, &v42, (uint64_t)v40, a3);
    if (*a3) {
      return;
    }
    if (v42)
    {
      unsigned int v6 = 0;
      do
      {
        unsigned __int8 v39 = 0;
        __int16 v41 = 257;
        sub_1CD8F85DC(v5, &v39, (uint64_t)v40, a3);
        if (*a3) {
          return;
        }
        char v7 = v39 & 0xF;
        unsigned int v9 = (unsigned char *)a2[4];
        unint64_t v8 = a2[5];
        if ((unint64_t)v9 >= v8)
        {
          unint64_t v11 = a2[3];
          unsigned int v12 = &v9[-v11];
          uint64_t v13 = (uint64_t)&v9[-v11 + 1];
          if (v13 < 0) {
            goto LABEL_61;
          }
          unint64_t v14 = v8 - v11;
          if (2 * v14 > v13) {
            uint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v15 = v13;
          }
          if (v15) {
            unint64_t v16 = (char *)operator new(v15);
          }
          else {
            unint64_t v16 = 0;
          }
          unint64_t v17 = &v12[(void)v16];
          v12[(void)v16] = v7;
          BOOL v10 = &v12[(void)v16 + 1];
          if (v9 != (unsigned char *)v11)
          {
            size_t v18 = &v9[~v11];
            do
            {
              char v19 = *--v9;
              (v18--)[(void)v16] = v19;
            }
            while (v9 != (unsigned char *)v11);
            unint64_t v17 = v16;
          }
          a2[3] = v17;
          a2[4] = v10;
          a2[5] = &v16[v15];
          if (v11) {
            operator delete((void *)v11);
          }
        }
        else
        {
          unsigned char *v9 = v7;
          BOOL v10 = v9 + 1;
        }
        a2[4] = v10;
        unsigned int v20 = v42;
        if (v6 + 1 < v42)
        {
          int v21 = v39 >> 4;
          unint64_t v22 = a2[5];
          if ((unint64_t)v10 >= v22)
          {
            unint64_t v24 = a2[3];
            std::string::size_type v25 = &v10[-v24];
            uint64_t v26 = (uint64_t)&v10[-v24 + 1];
            if (v26 < 0) {
LABEL_61:
            }
              abort();
            unint64_t v27 = v22 - v24;
            if (2 * v27 > v26) {
              uint64_t v26 = 2 * v27;
            }
            if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v28 = v26;
            }
            if (v28) {
              uint64_t v29 = (char *)operator new(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            unint64_t v30 = &v25[(void)v29];
            __int16 v31 = &v25[(void)v29];
            *__int16 v31 = v21;
            BOOL v23 = v31 + 1;
            if (v10 != (unsigned char *)v24)
            {
              uint64_t v32 = &v10[~v24];
              do
              {
                char v33 = *--v10;
                (v32--)[(void)v29] = v33;
              }
              while (v10 != (unsigned char *)v24);
              unint64_t v30 = v29;
            }
            a2[3] = v30;
            a2[4] = v23;
            a2[5] = &v29[v28];
            if (v24)
            {
              operator delete((void *)v24);
              unsigned int v20 = v42;
            }
          }
          else
          {
            *BOOL v10 = v21;
            BOOL v23 = v10 + 1;
          }
          a2[4] = v23;
        }
        unsigned int v6 = (unsigned __int16)(v6 + 2);
      }
      while (v6 < v20);
    }
LABEL_59:
    *a3 = 0;
    return;
  }
  uint64_t v34 = a2[2];
  if (v34) {
    unint64_t v35 = a2[2];
  }
  else {
    unint64_t v35 = a2[4] - a2[3];
  }
  if (v34) {
    uint64_t v36 = a2[1];
  }
  else {
    uint64_t v36 = a2[3];
  }
  unsigned __int16 v42 = v35;
  v40[0] = "VFEntryCount";
  __int16 v41 = 259;
  sub_1CD8FB560(a1 + 2, &v42, (uint64_t)v40, a3);
  if (*a3) {
    return;
  }
  if (!v35) {
    goto LABEL_59;
  }
  unint64_t v37 = 0;
  while (1)
  {
    unsigned __int8 v38 = 16 * *(unsigned char *)(v36 + v37);
    unsigned __int8 v39 = v38;
    if (v37 + 1 < v35) {
      unsigned __int8 v39 = *(unsigned char *)(v36 + v37 + 1) | v38;
    }
    __int16 v41 = 257;
    sub_1CD8F85DC(v5, &v39, (uint64_t)v40, a3);
    if (*a3) {
      break;
    }
    v37 += 2;
    if (v37 >= v35) {
      goto LABEL_59;
    }
  }
}

void sub_1CD3C2F20(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  v75[50] = *MEMORY[0x1E4F143B8];
  if (a2[7]) {
    BOOL v6 = a2[5] == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 || a2[6] != 0)
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return;
  }
  uint64_t v11 = 0;
  while (1)
  {
    unsigned int v12 = &(&off_1E685CAF8)[v11];
    if (LOBYTE((&off_1E685CAF8)[v11 + 4]) == a3) {
      break;
    }
    v11 += 5;
    if (v11 == 20)
    {
      size_t v13 = 0;
      HIBYTE(v64) = 0;
      p_dst = &__dst;
      goto LABEL_21;
    }
  }
  size_t v13 = (size_t)v12[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_142;
  }
  size_t v15 = *v12;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (long long *)operator new(v16 + 1);
    *((void *)&__dst + 1) = v13;
    unint64_t v64 = v17 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v64) = v12[1];
  p_dst = &__dst;
  if (v13) {
LABEL_20:
  }
    memmove(p_dst, v15, v13);
LABEL_21:
  *((unsigned char *)p_dst + v13) = 0;
  if (SHIBYTE(v64) < 0)
  {
    sub_1CB8BDF7C(a1, (const void *)__dst, *((unint64_t *)&__dst + 1));
    if (!a4) {
      goto LABEL_48;
    }
  }
  else
  {
    v18.n128_u64[1] = *((void *)&__dst + 1);
    *(_OWORD *)a1 = __dst;
    *(void *)(a1 + 16) = v64;
    if (!a4) {
      goto LABEL_48;
    }
  }
  if (!a2[7] || a2[5] || (uint64_t v19 = a2[6]) != 0)
  {
LABEL_30:
    size_t v21 = 0;
    HIBYTE(v75[0]) = 0;
    unint64_t v22 = &v73;
    goto LABEL_39;
  }
  while (1)
  {
    unsigned int v20 = (char *)&off_1E685CC60 + v19;
    if (*(unsigned __int16 *)((char *)&off_1E685CC60 + v19 + 32) == a4) {
      break;
    }
    v19 += 40;
    if (v19 == 280) {
      goto LABEL_30;
    }
  }
  size_t v21 = *((void *)v20 + 1);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
LABEL_142:
  }
    abort();
  BOOL v23 = *(const void **)v20;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    unint64_t v22 = operator new(v24 + 1);
    uint64_t v74 = v21;
    v75[0] = v25 | 0x8000000000000000;
    unint64_t v73 = v22;
    goto LABEL_38;
  }
  HIBYTE(v75[0]) = *((void *)v20 + 1);
  unint64_t v22 = &v73;
  if (v21) {
LABEL_38:
  }
    memmove(v22, v23, v21);
LABEL_39:
  *((unsigned char *)v22 + v21) = 0;
  std::operator+<char>();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v75[0]) & 0x80000000) == 0)
  {
LABEL_48:
    if (!a5) {
      goto LABEL_64;
    }
    goto LABEL_49;
  }
  operator delete(v73);
  if (!a5) {
    goto LABEL_64;
  }
LABEL_49:
  if (!a2[7] || a2[5] || (size_t v28 = (__n128 *)a2[6]) != 0)
  {
    *((unsigned char *)&v69.__r_.__value_.__s + 23) = 0;
    v69.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_53;
  }
  uint64_t v31 = 0;
  unint64_t v73 = v75;
  v18.n128_u64[0] = 0xA00000000;
  uint64_t v74 = 0xA00000000;
  do
  {
    if (LOWORD((&off_1E685CB98)[v31 + 4])) {
      BOOL v32 = (unsigned __int16)(LOWORD((&off_1E685CB98)[v31 + 4]) & a5) == LOWORD((&off_1E685CB98)[v31 + 4]);
    }
    else {
      BOOL v32 = 0;
    }
    if (v32)
    {
      unint64_t v33 = sub_1CC47EC6C((uint64_t)&v73, (unint64_t)&(&off_1E685CB98)[v31]);
      size_t v28 = (__n128 *)((char *)v73 + 40 * v74);
      unint64_t v34 = *(void *)(v33 + 32);
      __n128 v18 = *(__n128 *)(v33 + 16);
      *size_t v28 = *(__n128 *)v33;
      v28[1] = v18;
      v28[2].n128_u64[0] = v34;
      LODWORD(v28) = v74 + 1;
      LODWORD(v74) = v74 + 1;
    }
    v31 += 5;
  }
  while (v31 != 25);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1CD3C38A0;
  unint64_t v35 = 126 - 2 * __clz(v28);
  if (v28) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  sub_1CD8FF1AC((uint64_t)v73, (__n128 *)((char *)v73 + 40 * v28), (uint64_t (**)(long long *, long long *))&__p, v36, 1, v18);
  memset(&__p, 0, sizeof(__p));
  if (!v74)
  {
LABEL_137:
    std::string v69 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_138;
  }
  unint64_t v37 = (char *)v73;
  unsigned __int8 v38 = (char *)v73 + 40 * v74;
  char v39 = 1;
  do
  {
    if ((v39 & 1) == 0) {
      std::string::append(&__p, " | ");
    }
    uint64_t v40 = *(const void **)v37;
    if (!*(void *)v37)
    {
      memset(&v67, 0, sizeof(v67));
      goto LABEL_92;
    }
    std::string::size_type v41 = *((void *)v37 + 1);
    if (v41 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_142;
    }
    if (v41 >= 0x17)
    {
      uint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v43 = v41 | 7;
      }
      uint64_t v44 = v43 + 1;
      unsigned __int16 v42 = operator new(v43 + 1);
      v67.__r_.__value_.__l.__size_ = v41;
      v67.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    }
    else
    {
      *((unsigned char *)&v67.__r_.__value_.__s + 23) = *((void *)v37 + 1);
      unsigned __int16 v42 = &v67;
      if (!v41) {
        goto LABEL_91;
      }
    }
    memmove(v42, v40, v41);
LABEL_91:
    *((unsigned char *)v42 + v41) = 0;
LABEL_92:
    __int16 v45 = std::string::append(&v67, " (0x");
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    unint64_t v47 = *((unsigned __int16 *)v37 + 16);
    std::string::size_type v48 = (char *)v72 + 1;
    if (*((_WORD *)v37 + 16))
    {
      do
      {
        *--std::string::size_type v48 = a0123456789abcd_6[v47 & 0xF];
        BOOL v49 = v47 > 0xF;
        v47 >>= 4;
      }
      while (v49);
    }
    else
    {
      LOBYTE(v72[0]) = 48;
      std::string::size_type v48 = (char *)v72;
    }
    sub_1CC028D80(v65, v48, (char *)v72 + 1, (char *)v72 + 1 - v48);
    if (v66 >= 0) {
      char v50 = v65;
    }
    else {
      char v50 = (void **)v65[0];
    }
    if (v66 >= 0) {
      std::string::size_type v51 = v66 & 0x7F;
    }
    else {
      std::string::size_type v51 = (std::string::size_type)v65[1];
    }
    std::string v52 = std::string::append(&v68, (const std::string::value_type *)v50, v51);
    std::string::size_type v53 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string v54 = std::string::append(&v69, ")");
    std::string::size_type v55 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v71 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v72[0] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (v72[0] >= 0) {
      uint64_t v56 = v71;
    }
    else {
      uint64_t v56 = (void **)v71[0];
    }
    if (v72[0] >= 0) {
      std::string::size_type v57 = HIBYTE(v72[0]) & 0x7F;
    }
    else {
      std::string::size_type v57 = (std::string::size_type)v71[1];
    }
    std::string::append(&__p, (const std::string::value_type *)v56, v57);
    if (SHIBYTE(v72[0]) < 0) {
      operator delete(v71[0]);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    char v39 = 0;
    v37 += 40;
  }
  while (v37 != v38);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
  }
  if (!v58) {
    goto LABEL_137;
  }
  *((unsigned char *)&v69.__r_.__value_.__s + 23) = 3;
  LODWORD(v69.__r_.__value_.__l.__data_) = 2107424;
  sub_1CB907098((uint64_t)v71, v58 + 2);
  if (v72[0] >= 0) {
    long long v59 = v71;
  }
  else {
    long long v59 = (void **)v71[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v60 = &__p;
  }
  else {
    uint64_t v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  memmove(v59, v60, v58);
  strcpy((char *)v59 + v58, ")");
  if (v72[0] >= 0) {
    unint64_t v61 = v71;
  }
  else {
    unint64_t v61 = (void **)v71[0];
  }
  if (v72[0] >= 0) {
    std::string::size_type v62 = HIBYTE(v72[0]) & 0x7F;
  }
  else {
    std::string::size_type v62 = (std::string::size_type)v71[1];
  }
  std::string::append(&v69, (const std::string::value_type *)v61, v62);
  if (SHIBYTE(v72[0]) < 0) {
    operator delete(v71[0]);
  }
LABEL_138:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v73 != v75) {
    free(v73);
  }
LABEL_53:
  std::operator+<char>();
  if (v75[0] >= 0) {
    uint64_t v29 = (const std::string::value_type *)&v73;
  }
  else {
    uint64_t v29 = (const std::string::value_type *)v73;
  }
  if (v75[0] >= 0) {
    std::string::size_type v30 = HIBYTE(v75[0]) & 0x7F;
  }
  else {
    std::string::size_type v30 = v74;
  }
  std::string::append((std::string *)a1, v29, v30);
  if (SHIBYTE(v75[0]) < 0) {
    operator delete(v73);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_64:
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_1CD3C3644(void *a1, unsigned char *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = (_WORD *)(a4 + 6);
  sub_1CD3C2F20((uint64_t)&v13, a3, *(_WORD *)(a4 + 6) & 3, (*(unsigned __int16 *)(a4 + 6) >> 2) & 7, *(_WORD *)(a4 + 6) & 0xFFE0);
  std::operator+<char>();
  __int16 v12 = 260;
  v11[0] = (uint64_t)__p;
  sub_1CD8FB560(a3, v8, (uint64_t)v11, a1);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (!*a1)
  {
    if (!*a2 || (LOWORD(__p[0]) = 0, __int16 v12 = 257, sub_1CD8FB560(a3, __p, (uint64_t)v11, a1), !*a1))
    {
      v11[0] = (uint64_t)"Type";
      __int16 v12 = 259;
      sub_1CD8F7480(a3, (unsigned int *)(a4 + 2), v11, a1);
      if (!*a1)
      {
        if ((*v8 & 0x14) == 0x10)
        {
          v11[0] = (uint64_t)"VFTableOffset";
          __int16 v12 = 259;
          sub_1CD8FB410(a3, (unsigned int *)(a4 + 8), (uint64_t)v11, a1);
          if (*a1) {
            goto LABEL_13;
          }
        }
        else if (a3[5] && !a3[7] && !a3[6])
        {
          *(_DWORD *)(a4 + 8) = -1;
        }
        if (*a2
          || (v11[0] = (uint64_t)"Name",
              __int16 v12 = 259,
              sub_1CD8F8380((llvm::StringRef *)(a4 + 16), (uint64_t)a3, (uint64_t)v11, a1),
              !*a1))
        {
          *a1 = 0;
        }
      }
    }
  }
LABEL_13:
  if (v14 < 0) {
    operator delete(v13);
  }
}

uint64_t sub_1CD3C3814(int *__src, size_t __n, void *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v6 = xmmword_1CFAC4320;
  uint64_t v7 = 0;
  llvm::MD5::update((int *)&v6, __src, __n);
  llvm::MD5::final((int *)&v6, v5);
  return llvm::MD5::stringifyResult((unsigned __int8 *)v5, a3);
}

BOOL sub_1CD3C38A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 >= v2) {
    size_t v4 = *(void *)(a1 + 8);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  if (v4 && (int v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    int v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3) {
      int v6 = -1;
    }
    else {
      int v6 = 1;
    }
    if (v2 == v3) {
      int v6 = 0;
    }
  }
  return v6 == -1;
}

uint64_t sub_1CD3C391C(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 4);
      long long v11 = *a1;
      long long v12 = a1[1];
      __int16 v13 = *((_WORD *)a3 + 16);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_WORD *)a1 + 16) = v13;
    }
    else
    {
      uint64_t v25 = *((void *)a1 + 4);
      long long v26 = *a1;
      long long v27 = a1[1];
      __int16 v28 = *((_WORD *)a2 + 16);
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_WORD *)a1 + 16) = v28;
      *a2 = v26;
      a2[1] = v27;
      *((_WORD *)a2 + 16) = v25;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 4);
      long long v11 = *a2;
      long long v12 = a2[1];
      __int16 v30 = *((_WORD *)a3 + 16);
      long long v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_WORD *)a2 + 16) = v30;
    }
    *a3 = v11;
    a3[1] = v12;
    *((_WORD *)a3 + 16) = v10;
  }
  else if (result)
  {
    uint64_t v15 = *((void *)a2 + 4);
    long long v16 = *a2;
    long long v17 = a2[1];
    __int16 v18 = *((_WORD *)a3 + 16);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_WORD *)a2 + 16) = v18;
    *a3 = v16;
    a3[1] = v17;
    *((_WORD *)a3 + 16) = v15;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v20 = *((void *)a1 + 4);
      long long v21 = *a1;
      long long v22 = a1[1];
      __int16 v23 = *((_WORD *)a2 + 16);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_WORD *)a1 + 16) = v23;
      *a2 = v21;
      a2[1] = v22;
      *((_WORD *)a2 + 16) = v20;
    }
  }
  return result;
}

long long *sub_1CD3C3A58(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  size_t v4 = a2;
  long long v6 = a1[1];
  long long v22 = *a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if ((*a3)(&v22, (long long *)((char *)a2 - 40)))
  {
    uint64_t v7 = a1;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (((*a3)(&v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = (long long *)((char *)a1 + 40);
    do
    {
      uint64_t v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v22, v8);
      char v8 = (long long *)((char *)v7 + 40);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      size_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *v7;
    long long v11 = v7[1];
    uint64_t v27 = *((void *)v7 + 4);
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *v4;
    long long v13 = v4[1];
    *((_WORD *)v7 + 16) = *((_WORD *)v4 + 16);
    long long *v7 = v12;
    v7[1] = v13;
    long long v14 = v25;
    long long v15 = v26;
    *((_WORD *)v4 + 16) = v27;
    long long *v4 = v14;
    v4[1] = v15;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (!(*a3)(&v22, v7));
    do
      size_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  long long v16 = (long long *)((char *)v7 - 40);
  if ((long long *)((char *)v7 - 40) != a1)
  {
    long long v17 = *v16;
    long long v18 = *(long long *)((char *)v7 - 24);
    *((_WORD *)a1 + 16) = *((_WORD *)v7 - 4);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *((_WORD *)v7 - 4) = v24;
  *long long v16 = v19;
  *(long long *)((char *)v7 - 24) = v20;
  return v7;
}

uint64_t sub_1CD3C3BB8(long long *a1, char *a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while (((*a3)((char *)a1 + v6, &v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)(a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    long long v10 = (long long *)((char *)a1 + v6);
    long long v11 = (long long *)a2;
    do
    {
      long long v13 = v10[1];
      long long v25 = *v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *((void *)v10 + 4);
      __int16 v14 = v27;
      long long v16 = *v11;
      long long v15 = v11[1];
      *((_WORD *)v10 + 16) = *((_WORD *)v11 + 16);
      *long long v10 = v16;
      v10[1] = v15;
      *((_WORD *)v11 + 16) = v14;
      *long long v11 = v12;
      v11[1] = v13;
      do
        long long v10 = (long long *)((char *)v10 + 40);
      while (((*a3)((char *)v10, &v22) & 1) != 0);
      do
        long long v11 = (long long *)((char *)v11 - 40);
      while (!(*a3)((char *)v11, &v22));
    }
    while (v10 < v11);
    uint64_t v9 = (uint64_t)v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((_WORD *)a1 + 16) = *(_WORD *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(_WORD *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_1CD3C3D18(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      long long v10 = *(_OWORD *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      __int16 v12 = *(_WORD *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_WORD *)(a1 + 32) = v12;
      *unint64_t v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      BOOL result = 1;
      *(_WORD *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1CD3C391C((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1CD3C3F30(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1CD3C401C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      __int16 v14 = (long long *)(a1 + 80);
      sub_1CD3C391C((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_WORD *)(v20 + 152) = *(_WORD *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_WORD *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    __int16 v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CD3C3F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1CD3C391C((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 32);
    long long v12 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    __int16 v14 = *(_WORD *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_WORD *)(a3 + 32) = v14;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v13;
    *(_WORD *)(a4 + 32) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v16 = *(void *)(a2 + 32);
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      __int16 v19 = *(_WORD *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_WORD *)(a2 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      *(_WORD *)(a3 + 32) = v16;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        __n128 result = *(__n128 *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        __int16 v23 = *(_WORD *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_WORD *)(a1 + 32) = v23;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v22;
        *(_WORD *)(a2 + 32) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1CD3C401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1CD3C3F30(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 32);
    long long v15 = *(_OWORD *)a4;
    long long v16 = *(_OWORD *)(a4 + 16);
    __int16 v17 = *(_WORD *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_WORD *)(a4 + 32) = v17;
    *(_OWORD *)a5 = v15;
    *(_OWORD *)(a5 + 16) = v16;
    *(_WORD *)(a5 + 32) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v19 = *(void *)(a3 + 32);
      long long v20 = *(_OWORD *)a3;
      long long v21 = *(_OWORD *)(a3 + 16);
      __int16 v22 = *(_WORD *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_WORD *)(a3 + 32) = v22;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v21;
      *(_WORD *)(a4 + 32) = v19;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v24 = *(void *)(a2 + 32);
        __n128 v25 = *(__n128 *)a2;
        long long v26 = *(_OWORD *)(a2 + 16);
        __int16 v27 = *(_WORD *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_WORD *)(a2 + 32) = v27;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v26;
        *(_WORD *)(a3 + 32) = v24;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          long long v30 = *(_OWORD *)(a1 + 16);
          __int16 v31 = *(_WORD *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_WORD *)(a1 + 32) = v31;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v30;
          *(_WORD *)(a2 + 32) = v29;
        }
      }
    }
  }
  return result;
}

void sub_1CD3C4148(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v48 = v5;
    uint64_t v49 = v6;
    uint64_t v9 = a2;
    uint64_t v11 = (uint64_t)a2 - a1;
    uint64_t v12 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v13 = (unint64_t)(v12 - 2) >> 1;
      unint64_t v14 = v13 + 1;
      long long v15 = (__n128 *)(a1 + 40 * v13);
      do
      {
        a5 = sub_1CD3C43DC(a1, a4, v12, v15);
        long long v15 = (__n128 *)((char *)v15 - 40);
        --v14;
      }
      while (v14);
    }
    if (v9 != a3)
    {
      long long v16 = v9;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v16, a1, a5))
        {
          unint64_t v17 = v16[2].n128_u64[0];
          __n128 v18 = *v16;
          __n128 v19 = v16[1];
          unsigned __int16 v20 = *(_WORD *)(a1 + 32);
          __n128 v21 = *(__n128 *)(a1 + 16);
          *long long v16 = *(__n128 *)a1;
          v16[1] = v21;
          v16[2].n128_u16[0] = v20;
          *(__n128 *)a1 = v18;
          *(__n128 *)(a1 + 16) = v19;
          *(_WORD *)(a1 + 32) = v17;
          a5 = sub_1CD3C43DC(a1, a4, v12, (__n128 *)a1);
        }
        long long v16 = (__n128 *)((char *)v16 + 40);
      }
      while (v16 != a3);
    }
    if (v11 >= 41)
    {
      do
      {
        std::string::size_type v41 = v9;
        uint64_t v22 = 0;
        __n128 v42 = *(__n128 *)a1;
        __n128 v43 = *(__n128 *)(a1 + 16);
        uint64_t v44 = *(void *)(a1 + 32);
        uint64_t v23 = a1;
        do
        {
          uint64_t v24 = v23 + 40 * v22 + 40;
          uint64_t v25 = (2 * v22) | 1;
          uint64_t v26 = 2 * v22 + 2;
          if (v26 < v12 && (*a4)(v23 + 40 * v22 + 40, v23 + 40 * v22 + 80))
          {
            v24 += 40;
            uint64_t v25 = v26;
          }
          long long v27 = *(_OWORD *)v24;
          long long v28 = *(_OWORD *)(v24 + 16);
          *(_WORD *)(v23 + 32) = *(_WORD *)(v24 + 32);
          *(_OWORD *)uint64_t v23 = v27;
          *(_OWORD *)(v23 + 16) = v28;
          uint64_t v23 = v24;
          uint64_t v22 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        uint64_t v9 = (__n128 *)((char *)v41 - 40);
        if ((__int8 *)v24 == &v41[-3].n128_i8[8])
        {
          *(_WORD *)(v24 + 32) = v44;
          *(__n128 *)uint64_t v24 = v42;
          *(__n128 *)(v24 + 16) = v43;
        }
        else
        {
          __n128 v29 = *v9;
          long long v30 = *(long long *)((char *)&v41[-2] + 8);
          *(_WORD *)(v24 + 32) = v41[-1].n128_u16[4];
          *(__n128 *)uint64_t v24 = v29;
          *(_OWORD *)(v24 + 16) = v30;
          __n128 *v9 = v42;
          *(__n128 *)((char *)v41 - 24) = v43;
          v41[-1].n128_u16[4] = v44;
          uint64_t v31 = v24 - a1 + 40;
          if (v31 >= 41)
          {
            unint64_t v32 = (v31 / 0x28uLL - 2) >> 1;
            int64_t v33 = a1 + 40 * v32;
            if ((*a4)(v33, v24))
            {
              long long v34 = *(_OWORD *)v24;
              long long v35 = *(_OWORD *)(v24 + 16);
              uint64_t v47 = *(void *)(v24 + 32);
              long long v45 = v34;
              long long v46 = v35;
              do
              {
                uint64_t v36 = v33;
                long long v37 = *(_OWORD *)v33;
                long long v38 = *(_OWORD *)(v33 + 16);
                *(_WORD *)(v24 + 32) = *(_WORD *)(v33 + 32);
                *(_OWORD *)uint64_t v24 = v37;
                *(_OWORD *)(v24 + 16) = v38;
                if (!v32) {
                  break;
                }
                unint64_t v32 = (v32 - 1) >> 1;
                int64_t v33 = a1 + 40 * v32;
                uint64_t v24 = v36;
              }
              while ((((uint64_t (*)(int64_t, long long *))*a4)(v33, &v45) & 1) != 0);
              long long v39 = v46;
              *(_OWORD *)uint64_t v36 = v45;
              *(_OWORD *)(v36 + 16) = v39;
              *(_WORD *)(v36 + 32) = v47;
            }
          }
        }
      }
      while (v12-- > 2);
    }
  }
}

__n128 sub_1CD3C43DC(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, (uint64_t)v13 + 40))
      {
        unint64_t v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          unint64_t v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u16[0] = *((_WORD *)v13 + 16);
          __n128 *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          unint64_t v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if ((*a2)(a1 + 40 * v20, (uint64_t)v13 + 40))
            {
              unint64_t v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          long long v7 = v17;
          int64_t v12 = v20;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u16[0] = v25;
        __n128 *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

BOOL sub_1CD3C4548(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 >= v2) {
    size_t v4 = *(void *)(a1 + 8);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  if (v4 && (int v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    int v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3) {
      int v6 = -1;
    }
    else {
      int v6 = 1;
    }
    if (v2 == v3) {
      int v6 = 0;
    }
  }
  return v6 == -1;
}

BOOL sub_1CD3C45C4(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      long long v10 = *(_OWORD *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      char v12 = *(unsigned char *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(unsigned char *)(a1 + 32) = v12;
      *unint64_t v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      BOOL result = 1;
      *(unsigned char *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1CC695088((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1CC69569C(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1CC695788(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      int64_t v14 = (long long *)(a1 + 80);
      sub_1CC695088((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(unsigned char *)(v20 + 152) = *(unsigned char *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(unsigned char *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    int64_t v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

void sub_1CD3C47DC()
{
  dword_1EBD021A0 = 7;
}

llvm *sub_1CD3C47EC(llvm *a1)
{
  unint64_t v2 = llvm::dbgs(a1);
  unint64_t v3 = llvm::LLT::print(a1, v2);
  BOOL result = llvm::dbgs(v3);
  int v5 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v5 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v5 + 1;
    unsigned char *v5 = 10;
  }
  return result;
}

void LLVMInitializeAGX1AsmPrinter()
{
  qword_1EBD02490 = (uint64_t)sub_1CD3C52C0;
}

uint64_t sub_1CD3C4880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1CD27A534(a1, a2);
  llvm::GPUMetadataEmitter::doInitialization((llvm::GPUMetadataEmitter *)(a1 + 928));
  return v3;
}

uint64_t sub_1CD3C48B4(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3 = sub_1CD2819C0(a1, a2);
  llvm::GPUMetadataEmitter::doFinalization((llvm::GPUMetadataEmitter *)(a1 + 928));
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  uint64_t v4 = *(void *)(a1 + 264);
  *(_DWORD *)(v4 + 144) = 0;
  *(unsigned char *)(v4 + 148) = 0;
  return v3;
}

void sub_1CD3C4910(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v5[0] = *(void *)(a1 + 264);
  v5[1] = a1;
  v6[0] = 0;
  v6[1] = 0;
  long long v7 = v9;
  uint64_t v8 = 0x800000000;
  v9[128] = 0;
  sub_1CD3EE778(v5, a2, (uint64_t)v6);
  uint64_t v3 = *(void *)(a1 + 272);
  uint64_t v4 = sub_1CD27A528(a1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v3 + 1192))(v3, v6, v4);
  if (v7 != v9) {
    free(v7);
  }
}

uint64_t sub_1CD3C4A00(uint64_t a1, llvm::MachineFunction *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  sub_1CD27DA04(a1);
  uint64_t v4 = *((void *)a2 + 7);
  int v5 = (void **)*((void *)a2 + 43);
  ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v5)[1])(v5, 11, *(unsigned int *)(v4 + 48), 1, 0, 1, 3);
  (*(void (**)(void *, void, void))(*v5[1] + 96))(v5[1], *(void *)a2, *(unsigned int *)(v4 + 48));
  (*(void (**)(void *, void, void))(*v5[1] + 112))(v5[1], *(void *)a2, 0);
  uint64_t AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a1 + 8), &llvm::MachineLoopInfo::ID);
  if (AnalysisIfAvailable) {
    long long v7 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisIfAvailable
  }
                                                                                   + 96))(AnalysisIfAvailable, &llvm::MachineLoopInfo::ID);
  else {
    long long v7 = 0;
  }
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 928), a2, v7, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  return 0;
}

uint64_t sub_1CD3C4B60(llvm::MCContext **a1, llvm::Module *a2)
{
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 116), a2, a1[33], a1[34]);
}

void sub_1CD3C4B70(void *a1)
{
  *a1 = &unk_1F25E9238;
  sub_1CB833728((uint64_t)(a1 + 116));
}

void sub_1CD3C4BA8()
{
  sub_1CD89D63C(v0);
}

void sub_1CD3C4BC8(void *a1)
{
  *a1 = &unk_1F25E9238;
  sub_1CB833728((uint64_t)(a1 + 116));
}

void sub_1CD3C4C00()
{
  sub_1CD89D63C(v0);
  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD3C4C34()
{
  return "AGX1 Assembly Printer";
}

uint64_t sub_1CD3C4C48()
{
  return 0;
}

void sub_1CD3C4C5C()
{
}

uint64_t sub_1CD3C4C7C(uint64_t a1)
{
  uint64_t v3 = *(void ****)(a1 + 272);
  unint64_t v2 = *(void ****)(a1 + 280);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      long long v7 = *v3;
      sub_1CB8338B8(&v7);
      MEMORY[0x1D25D9CE0](v4, 0x1020C4016EE4530);
      unint64_t v2 = *(void ****)(a1 + 280);
    }
    ++v3;
  }
  long long v7 = (void **)(a1 + 1176);
  sub_1CB8337C4(&v7);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*(void **)(a1 + 1152));
  }
  sub_1CD3C4DF4(a1 + 728);
  sub_1CB833850(a1 + 704, *(char **)(a1 + 712));
  long long v7 = (void **)(a1 + 680);
  sub_1CB8338B8(&v7);
  sub_1CD3C4F20(a1 + 656, *(char **)(a1 + 664));
  sub_1CB833944(a1 + 632, *(void **)(a1 + 640));
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  sub_1CD3C4FE8(a1 + 432);
  sub_1CB8339A4((void *)(a1 + 336));
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  int v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(void *)(a1 + 280) = v5;
    operator delete(v5);
  }
  sub_1CD3C50A0(a1 + 224);
  sub_1CD3C522C(a1 + 176);
  sub_1CB833EA8(a1 + 128);
  sub_1CB8340D0(a1 + 80);
  long long v7 = (void **)(a1 + 56);
  sub_1CB8338B8(&v7);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_1CD3C4DF4(uint64_t a1)
{
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  uint64_t v3 = (void **)(a1 + 264);
  sub_1CB8338B8(&v3);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1CD3C4F20(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CD3C4F20(a1, *(void *)a2);
    sub_1CD3C4F20(a1, *((void *)a2 + 1));
    sub_1CB833850((uint64_t)(a2 + 56), *((char **)a2 + 8));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t sub_1CD3C4FA4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CD3C4FE8(uint64_t a1)
{
  sub_1CD3C5048(a1 + 96, *(void **)(a1 + 104));
  sub_1CD3C5048(a1 + 64, *(void **)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1CD3C5048(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CD3C5048(a1, *a2);
    sub_1CD3C5048(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_1CD3C50A0(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v6 = *v3;
      if (*v3)
      {
        sub_1CD3C5148(v6 + 152);
        uint64_t v5 = sub_1CB833C60(v6);
        MEMORY[0x1D25D9CE0](v5, 0x10B2C401A85D49FLL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CB833D70(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1CD3C5148(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        uint64_t v4 = sub_1CB833C60(*v3);
        MEMORY[0x1D25D9CE0](v4, 0x10B2C40EE200C30);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CD3C51C8(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1CD3C51C8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CD3C51C8(a1, *(void *)a2);
    sub_1CD3C51C8(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t sub_1CD3C522C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_1CB833DE8(v4 + 184);
        uint64_t v5 = sub_1CB833C60(v4);
        MEMORY[0x1D25D9CE0](v5, 0x10B2C409EE52067);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CD3C51C8(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1CD3C52C0()
{
}

uint64_t sub_1CD3C5358(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  sub_1CD89D51C(a1, a2, &v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  *(void *)a1 = &unk_1F25E9238;
  *(void *)(a1 + 792) = &unk_1F25E9418;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 928);
  return a1;
}

uint64_t sub_1CD3C5420(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v140[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)a2[41];
  long long v125 = a2 + 40;
  if (v5 != a2 + 40)
  {
    uint64_t v6 = 0;
    uint64_t v128 = a1 + 25;
    int v129 = a1 + 24;
    int64x2_t v124 = a1 + 10;
    int64x2_t v122 = (uint64_t *)(a3 + 248);
    int64x2_t v123 = a1 + 8;
    int64x2_t v126 = a1 + 7;
    uint64_t v127 = a1 + 9;
    char v7 = 1;
    while (1)
    {
      if (!byte_1EBD07020
        || (v135 = (unint64_t)v5, uint64_t v133 = 0, (sub_1CB834D78(v122, &v135, &v133) & 1) != 0) && v133[1])
      {
        uint64_t v8 = v5[7];
        if ((uint64_t *)v8 != v5 + 6) {
          break;
        }
      }
LABEL_85:
      uint64_t v5 = (uint64_t *)v5[1];
      if (v5 == v125) {
        goto LABEL_88;
      }
    }
    char v9 = 0;
    int v10 = 0;
    uint64_t v11 = v6;
    while ((sub_1CB834754(v8) & 1) != 0)
    {
      uint64_t v6 = v11;
      if (!v8) {
        goto LABEL_69;
      }
LABEL_66:
      if ((*(unsigned char *)v8 & 4) == 0)
      {
LABEL_69:
        while ((*(_WORD *)(v8 + 44) & 8) != 0)
          uint64_t v8 = *(void *)(v8 + 8);
      }
      uint64_t v8 = *(void *)(v8 + 8);
      uint64_t v11 = v6;
      if ((uint64_t *)v8 == v5 + 6) {
        goto LABEL_85;
      }
    }
    char v12 = *(unsigned __int16 **)(v8 + 16);
    uint64_t v6 = *((void *)v12 + 2);
    if (!(v7 & 1 | (((v11 ^ v6) & 1) == 0))) {
      ++a1[11];
    }
    uint64_t v13 = 12;
    if (v6) {
      uint64_t v13 = 3;
    }
    ++a1[v13];
    int v14 = *v12;
    if (v14 == 13430)
    {
      char v9 = 0;
      a1[4] += v10;
      int v10 = 0;
    }
    else if ((v6 & 0x10120) != 0)
    {
      int v10 = 0;
      char v9 = 1;
    }
    else
    {
      v10 += v9 & 1;
    }
    if (v6)
    {
      unint64_t v135 = 1;
      uint64_t v136 = (llvm *)-1;
      uint64_t v137 = -1;
      unsigned int v138 = v140;
      uint64_t v139 = 0x400000000;
      if (llvm::MachineInstr::getNumExplicitOperands(v8))
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = *(void *)(v8 + 32);
          int v18 = *(_DWORD *)(v17 + v15);
          if (v18 == 7 && (v18 & 0xFFF00u) <= 0x400)
          {
            LODWORD(v133) = 0;
            LODWORD(v133) = (uint64_t)(*(unsigned int *)(v17 + v15 + 4) | ((unint64_t)*(unsigned int *)(v17 + v15 + 24) << 32))
                          / 2;
            sub_1CB834798(&v135, &v133);
          }
          ++v16;
          v15 += 32;
        }
        while (v16 < llvm::MachineInstr::getNumExplicitOperands(v8));
      }
      uint64_t v19 = v138;
      if (v139 == 2)
      {
        int v20 = *((_DWORD *)v138 + 1);
        if (*(_DWORD *)v138 != v20 && ((v20 ^ *(_DWORD *)v138) & 0xC) == 0) {
          ++a1[5];
        }
      }
      if (v19 != v140) {
        free(v19);
      }
      if ((v135 & 1) == 0) {
        llvm::deallocate_buffer(v136, (void *)(4 * v137));
      }
      char v12 = *(unsigned __int16 **)(v8 + 16);
      int v14 = *v12;
    }
    if (v14 == 13430) {
      ++a1[13];
    }
    __int16 v22 = *(_WORD *)(v8 + 44);
    if ((v22 & 0xC) == 0 || (v22 & 4) != 0)
    {
      if ((*((unsigned char *)v12 + 9) & 4) == 0) {
        goto LABEL_42;
      }
    }
    else if (!llvm::MachineInstr::hasPropertyInBundle(v8, 1024, 1))
    {
LABEL_42:
      long long v23 = *(unsigned __int16 **)(v8 + 16);
      uint64_t v24 = *((void *)v23 + 2);
      if ((v24 & 0x20) != 0) {
        ++a1[15];
      }
      if ((v24 - 12440) < 0x30 || (v24 - 12868) <= 3) {
        ++a1[16];
      }
      if ((v24 & 0x200) != 0) {
        ++a1[17];
      }
      if ((v24 & 0x100) != 0) {
        ++a1[18];
      }
      if ((v24 & 0x2000) != 0) {
        ++a1[19];
      }
      if ((v24 & 0x4000) != 0) {
        ++a1[20];
      }
      if ((v24 & 0x8000) != 0) {
        ++a1[21];
      }
      if ((v24 & 0x10000) != 0) {
        ++a1[22];
      }
      if ((v24 & 0x20000) != 0) {
        ++a1[23];
      }
      int v25 = *v23;
      uint64_t v26 = v129;
      if ((v25 - 2502) < 0x28 || (uint64_t v26 = v128, (v25 - 11867) <= 7)) {
        ++*v26;
      }
      if ((v24 & 0x80000) != 0)
      {
        ++a1[6];
        int v27 = sub_1CB8348A8(a2[2], v8);
        long long v28 = v127;
        if (v27 != 2)
        {
          if (v27 != 4) {
            goto LABEL_64;
          }
          long long v28 = v124;
        }
        ++*v28;
      }
LABEL_64:
      if ((*(unsigned char *)(*(void *)(v8 + 16) + 18) & 0x10) == 0)
      {
LABEL_65:
        char v7 = 0;
        ++a1[2];
        goto LABEL_66;
      }
      ++a1[6];
      int v29 = sub_1CB8348A8(a2[2], v8);
      long long v30 = v126;
      if (v29 != 2)
      {
        if (v29 != 4) {
          goto LABEL_65;
        }
        long long v30 = v123;
      }
      ++*v30;
      goto LABEL_65;
    }
    ++a1[14];
    goto LABEL_42;
  }
LABEL_88:
  unsigned int v31 = sub_1CB8349E8((uint64_t)a2);
  unsigned int v32 = a1[26];
  if (v32 <= v31) {
    unsigned int v32 = v31;
  }
  a1[26] = v32;
  uint64_t v33 = a2[43];
  sub_1CB8352D8(&v133, v33, 3);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  unsigned int v34 = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131))
  {
    uint64_t v35 = a4;
  }
  else
  {
    uint64_t v35 = a4;
    do
    {
      uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
      uint64_t v37 = *v36;
      int v38 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v36);
      unint64_t v135 = (unint64_t)(sub_1CB83544C(a4, *(void *)(v37 + 24)) + 7) >> 3;
      uint64_t v136 = (llvm *)(v39 == 1);
      unsigned int v40 = v38 + ((llvm::TypeSize::operator unsigned long long(&v135, v39) + 3) >> 2);
      if (v40 > v34) {
        unsigned int v34 = v40;
      }
      (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0);
  }
  uint64_t v41 = v131;
  uint64_t v131 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = v132;
  uint64_t v132 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 0);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    __n128 v43 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v44 = *v43;
    int v45 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v43);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v44 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v46 == 1);
    unsigned int v47 = v45 + ((llvm::TypeSize::operator unsigned long long(&v135, v46) + 3) >> 2);
    if (v47 > v34) {
      unsigned int v34 = v47;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v48 = v131;
  uint64_t v131 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = v132;
  uint64_t v132 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 1);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    char v50 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v51 = *v50;
    int v52 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v50);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v51 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v53 == 1);
    unsigned int v54 = v52 + ((llvm::TypeSize::operator unsigned long long(&v135, v53) + 3) >> 2);
    if (v54 > v34) {
      unsigned int v34 = v54;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v55 = v131;
  uint64_t v131 = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = v132;
  uint64_t v132 = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 5);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    std::string::size_type v57 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v58 = *v57;
    int v59 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v57);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v58 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v60 == 1);
    unsigned int v61 = v59 + ((llvm::TypeSize::operator unsigned long long(&v135, v60) + 3) >> 2);
    if (v61 > v34) {
      unsigned int v34 = v61;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v62 = v131;
  uint64_t v131 = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  uint64_t v63 = v132;
  uint64_t v132 = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 4);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    unint64_t v64 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v65 = *v64;
    int v66 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v64);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v65 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v67 == 1);
    unsigned int v68 = v66 + ((llvm::TypeSize::operator unsigned long long(&v135, v67) + 3) >> 2);
    if (v68 > v34) {
      unsigned int v34 = v68;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v69 = v131;
  uint64_t v131 = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = v132;
  uint64_t v132 = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 6);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    uint64_t v71 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v72 = *v71;
    int v73 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v71);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v72 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v74 == 1);
    unsigned int v75 = v73 + ((llvm::TypeSize::operator unsigned long long(&v135, v74) + 3) >> 2);
    if (v75 > v34) {
      unsigned int v34 = v75;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v76 = v131;
  uint64_t v131 = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  uint64_t v77 = v132;
  uint64_t v132 = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  sub_1CB8352D8(&v133, v33, 7);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    uint64_t v78 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v79 = *v78;
    int v80 = (*(uint64_t (**)(uint64_t, void))(*(void *)v33 + 400))(v33, *v78);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v79 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v81 == 1);
    unsigned int v82 = v80 + ((llvm::TypeSize::operator unsigned long long(&v135, v81) + 3) >> 2);
    if (v82 > v34) {
      unsigned int v34 = v82;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v83 = v131;
  uint64_t v131 = 0;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  uint64_t v84 = v132;
  uint64_t v132 = 0;
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  a1[27] = v34;
  uint64_t v85 = a2[43];
  uint64_t v86 = sub_1CD1138B8(v85, 9, 0);
  uint64_t GlobalResource = llvm::FunctionGroup::getGlobalResource(v85, 20);
  if (GlobalResource)
  {
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v85 + 400))(v85, GlobalResource);
    if (v86 <= v88 + 1) {
      uint64_t v86 = (v88 + 1);
    }
    else {
      uint64_t v86 = v86;
    }
  }
  uint64_t v89 = llvm::FunctionGroup::getGlobalResource(v85, 21);
  if (v89)
  {
    int v90 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v85 + 400))(v85, v89);
    if (v86 <= v90 + 1) {
      uint64_t v86 = (v90 + 1);
    }
    else {
      uint64_t v86 = v86;
    }
  }
  uint64_t v91 = llvm::FunctionGroup::getGlobalResource(v85, 22);
  if (v91)
  {
    int v92 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v85 + 400))(v85, v91);
    if (v86 <= v92 + 1) {
      uint64_t v86 = (v92 + 1);
    }
    else {
      uint64_t v86 = v86;
    }
  }
  uint64_t v93 = llvm::FunctionGroup::getGlobalResource(v85, 23);
  if (v93)
  {
    int v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v85 + 400))(v85, v93);
    if (v86 <= v94 + 1) {
      uint64_t v86 = (v94 + 1);
    }
    else {
      uint64_t v86 = v86;
    }
  }
  uint64_t v95 = sub_1CD1138B8(v85, 13, v86);
  a1[29] = sub_1CD1138B8(v85, 12, v95);
  uint64_t v96 = a2[43];
  sub_1CB8352D8(&v133, v96, 0);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  unsigned int v97 = 0;
  unsigned int v98 = -1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    BOOL v99 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v100 = *v99;
    unsigned int v101 = (*(uint64_t (**)(uint64_t, void))(*(void *)v96 + 400))(v96, *v99);
    if (v98 >= v101) {
      unsigned int v98 = v101;
    }
    int v102 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v96 + 400))(v96, v100);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v100 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v103 == 1);
    unsigned int v104 = v102 + ((llvm::TypeSize::operator unsigned long long(&v135, v103) + 3) >> 2);
    if (v104 > v97) {
      unsigned int v97 = v104;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v105 = v131;
  uint64_t v131 = 0;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  uint64_t v106 = v132;
  uint64_t v132 = 0;
  if (v106) {
    (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  if (v133) {
    (*(void (**)(void *))(*v133 + 8))(v133);
  }
  int v107 = 4 * (v97 - v98);
  if (!v97) {
    int v107 = 0;
  }
  a1[30] = v107;
  uint64_t v108 = a2[43];
  sub_1CB8352D8(&v133, v108, 0);
  sub_1CB835378(&v132, (uint64_t)&v133);
  sub_1CB835378(&v131, (uint64_t)&v134);
  unsigned int v109 = 0;
  unsigned int v110 = -1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v132 + 24))(v132, v131) & 1) == 0)
  {
    uint64_t v111 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
    uint64_t v112 = *v111;
    unsigned int v113 = (*(uint64_t (**)(uint64_t, void))(*(void *)v108 + 400))(v108, *v111);
    if (v110 >= v113) {
      unsigned int v110 = v113;
    }
    int v114 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v108 + 400))(v108, v112);
    unint64_t v135 = (unint64_t)(sub_1CB83544C(v35, *(void *)(v112 + 24)) + 7) >> 3;
    uint64_t v136 = (llvm *)(v115 == 1);
    unsigned int v116 = v114 + ((llvm::TypeSize::operator unsigned long long(&v135, v115) + 3) >> 2);
    if (v116 > v109) {
      unsigned int v109 = v116;
    }
    (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
  }
  uint64_t v117 = v131;
  uint64_t v131 = 0;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  uint64_t v118 = v132;
  uint64_t v132 = 0;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
  }
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  uint64_t result = (uint64_t)v133;
  if (v133) {
    uint64_t result = (*(uint64_t (**)(void *))(*v133 + 8))(v133);
  }
  int v120 = 4 * (v109 - v110);
  if (!v109) {
    int v120 = 0;
  }
  a1[31] = v120;
  return result;
}

uint64_t sub_1CD3C6CE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1CD3C6CEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1CD3C6CF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1CD3C6CFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1CD3C6D04()
{
  return 0;
}

uint64_t sub_1CD3C6D0C()
{
  return 0;
}

uint64_t sub_1CD3C6D14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1CD3C6D1C()
{
  return 0;
}

uint64_t sub_1CD3C6D24()
{
  return 0;
}

uint64_t sub_1CD3C6D2C()
{
  return 0;
}

uint64_t sub_1CD3C6D34()
{
  return 0;
}

uint64_t sub_1CD3C6D3C()
{
  return 0;
}

uint64_t sub_1CD3C6D44()
{
  return 0;
}

uint64_t sub_1CD3C6D4C()
{
  return 0;
}

uint64_t sub_1CD3C6D54()
{
  return 0;
}

uint64_t sub_1CD3C6D5C()
{
  return 0;
}

uint64_t sub_1CD3C6D64()
{
  return 0;
}

uint64_t sub_1CD3C6D6C()
{
  return 0;
}

uint64_t sub_1CD3C6D74()
{
  return 0;
}

uint64_t sub_1CD3C6D7C()
{
  return 0;
}

uint64_t sub_1CD3C6D84()
{
  return 0;
}

uint64_t sub_1CD3C6D8C()
{
  return 0;
}

uint64_t sub_1CD3C6D94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1CD3C6D9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1CD3C6DA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1CD3C6DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD3C6DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1CD3C6DBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1CD3C6DC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1CD3C6DCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1CD3C6DD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1CD3C6DDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1CD3C6DE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1CD3C6DEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1CD3C6DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1CD3C6DFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1CD3C6E04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CD3C6E0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1CD3C6E14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1CD3C6E1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1CD3C6E24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1CD3C6E2C()
{
  return 0;
}

uint64_t sub_1CD3C6E34()
{
  return 0;
}

uint64_t sub_1CD3C6E3C()
{
  return 0;
}

uint64_t sub_1CD3C6E44()
{
  return 0;
}

uint64_t sub_1CD3C6E4C()
{
  return 0;
}

uint64_t sub_1CD3C6E54()
{
  return 0;
}

uint64_t sub_1CD3C6E5C()
{
  return 0;
}

uint64_t sub_1CD3C6E64()
{
  return 0;
}

uint64_t sub_1CD3C6E6C()
{
  return 0;
}

uint64_t sub_1CD3C6E74()
{
  return 0;
}

uint64_t sub_1CD3C6E7C()
{
  return 0;
}

uint64_t sub_1CD3C6E84()
{
  return 0;
}

double sub_1CD3C6E8C()
{
  return 0.0;
}

uint64_t sub_1CD3C6E94()
{
  return 0;
}

void sub_1CD3C6E9C(_DWORD *a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  int v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v5 = a1[3];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v6 = a1[4];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "LatencyHidingInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v7 = a1[5];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "SharedBankConflicts");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v8 = a1[6];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v9 = a1[7];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v10 = a1[8];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v11 = a1[9];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v12 = a1[10];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v13 = a1[11];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlDataSwitches");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v14 = a1[12];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v15 = a1[13];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "WDFInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v16 = a1[14];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v17 = a1[15];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v18 = a1[16];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v19 = a1[17];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "IterateInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v20 = a1[18];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v21 = a1[19];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v22 = a1[20];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v23 = a1[21];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v24 = a1[22];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v25 = a1[23];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v26 = a1[25];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A430;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v27 = a1[24];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v28 = a1[26];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TempRegisterCount");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v29 = a1[27];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "SharedRegisterCount");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v30 = a1[28];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "VIRegisterCount");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v31 = a1[29];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "CoeffRegisterCount");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v32 = a1[30];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "ImageStateBindingsBytes");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v33 = a1[31];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "SamplerStateBindingsBytes");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v34 = a1[32];
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "StackBytes");
  uint64_t v36 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

double sub_1CD3C7A94@<D0>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  *(void *)&double result = 0x800000000;
  a1[1] = 0x800000000;
  return result;
}

uint64_t sub_1CD3C7AAC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 99) = 0u;
  uint64_t v2 = *(void *)(a1 + 328);
  if (v2 != a1 + 320)
  {
    uint64_t result = 4294955549;
    do
    {
      for (uint64_t i = *(void *)(v2 + 56); i != v2 + 48; uint64_t i = *(void *)(i + 8))
      {
        unsigned int v5 = **(unsigned __int16 **)(i + 16);
        if (v5 > 0x2EC3)
        {
          switch(**(_WORD **)(i + 16))
          {
            case 0x343E:
            case 0x343F:
              unsigned int v6 = 2047;
              goto LABEL_27;
            case 0x3440:
            case 0x3441:
              unsigned int v6 = 0x1FFF;
              goto LABEL_27;
            case 0x3442:
            case 0x3443:
              unsigned int v6 = 0x7FFF;
              goto LABEL_27;
            case 0x3444:
            case 0x3445:
              unsigned int v6 = 1;
              goto LABEL_27;
            case 0x3446:
            case 0x3447:
              unsigned int v6 = 7;
              goto LABEL_27;
            case 0x3448:
            case 0x3449:
              unsigned int v6 = 31;
              goto LABEL_27;
            case 0x344A:
            case 0x344B:
              unsigned int v6 = 127;
              goto LABEL_27;
            case 0x344C:
            case 0x344D:
              unsigned int v6 = 511;
              goto LABEL_27;
            case 0x344E:
            case 0x344F:
              unsigned int v6 = 3;
              goto LABEL_27;
            case 0x3450:
            case 0x3451:
              unsigned int v6 = 15;
              goto LABEL_27;
            case 0x3452:
            case 0x3453:
              unsigned int v6 = 63;
              goto LABEL_27;
            case 0x3454:
            case 0x3455:
              unsigned int v6 = 255;
              goto LABEL_27;
            case 0x3456:
            case 0x3457:
              unsigned int v6 = 1023;
              goto LABEL_27;
            case 0x3458:
            case 0x3459:
              unsigned int v6 = 4095;
              goto LABEL_27;
            case 0x345A:
            case 0x345B:
              unsigned int v6 = 0x3FFF;
              goto LABEL_27;
            case 0x345C:
            case 0x345D:
              unsigned int v6 = 0xFFFF;
LABEL_27:
              int v7 = (void *)(a2 + 88);
              int v8 = (void *)(a2 + 96);
              goto LABEL_28;
            default:
              if (v5 - 11972 < 2) {
                *(unsigned char *)(a2 + 113) = 1;
              }
              continue;
          }
        }
        unsigned int v6 = 1;
        int v7 = (void *)(a2 + 72);
        int v8 = (void *)(a2 + 80);
        switch(**(_WORD **)(i + 16))
        {
          case 0x2DE3:
          case 0x2DE4:
            unsigned int v6 = 2047;
            goto LABEL_47;
          case 0x2DE5:
          case 0x2DE6:
            unsigned int v6 = 0x1FFF;
            goto LABEL_47;
          case 0x2DE7:
          case 0x2DE8:
            unsigned int v6 = 0x7FFF;
            goto LABEL_47;
          case 0x2DE9:
          case 0x2DEA:
            goto LABEL_28;
          case 0x2DEB:
          case 0x2DEC:
            unsigned int v6 = 7;
            goto LABEL_47;
          case 0x2DED:
          case 0x2DEE:
            unsigned int v6 = 31;
            goto LABEL_47;
          case 0x2DEF:
          case 0x2DF0:
            unsigned int v6 = 127;
            goto LABEL_47;
          case 0x2DF1:
          case 0x2DF2:
            unsigned int v6 = 511;
            goto LABEL_47;
          case 0x2DF3:
          case 0x2DF4:
            unsigned int v6 = 3;
            goto LABEL_47;
          case 0x2DF5:
          case 0x2DF6:
            unsigned int v6 = 15;
            goto LABEL_47;
          case 0x2DF7:
          case 0x2DF8:
            unsigned int v6 = 63;
            goto LABEL_47;
          case 0x2DF9:
          case 0x2DFA:
            unsigned int v6 = 255;
            goto LABEL_47;
          case 0x2DFB:
          case 0x2DFC:
            unsigned int v6 = 1023;
            goto LABEL_47;
          case 0x2DFD:
          case 0x2DFE:
            unsigned int v6 = 4095;
            goto LABEL_47;
          case 0x2DFF:
          case 0x2E00:
            unsigned int v6 = 0x3FFF;
            goto LABEL_47;
          case 0x2E01:
          case 0x2E02:
            unsigned int v6 = 0xFFFF;
LABEL_47:
            int v7 = (void *)(a2 + 72);
            int v8 = (void *)(a2 + 80);
LABEL_28:
            unsigned int v9 = *(_DWORD *)(*(void *)(i + 32) + 48);
            if (v9 <= 0x3F) {
              *v7 |= v6 << v9;
            }
            if (__clz(v6) + v9 >= 0x41) {
              *v8 |= v6 >> -(char)v9;
            }
            break;
          default:
            if (v5 == 813) {
              *(unsigned char *)(a2 + 114) = 1;
            }
            break;
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a1 + 320);
  }
  return result;
}

uint64_t sub_1CD3C7D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 16);
}

uint64_t sub_1CD3C7D78()
{
  return 0;
}

uint64_t sub_1CD3C7D80()
{
  return 0;
}

uint64_t sub_1CD3C7D88()
{
  return 0;
}

uint64_t sub_1CD3C7D90()
{
  return 0;
}

uint64_t sub_1CD3C7D98(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, void, uint64_t, uint64_t))
{
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 24);
  uint64_t result = (**a3)(a3, 11, 0, 1, 4);
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  if (v5 <= result) {
    unsigned int v5 = result;
  }
  *(_DWORD *)(a1 + 128) = v5;
  return result;
}

void sub_1CD3C7E08()
{
}

void sub_1CD3C7E1C()
{
}

uint64_t sub_1CD3C7F60()
{
  return 0;
}

_DWORD *sub_1CD3C7F68(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD3C8060(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

void sub_1CD3C7FB8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1CD3C810C(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 72 * a2;
    while (v3 != v7)
    {
      unsigned int v9 = *(void **)(v3 - 72);
      v3 -= 72;
      int v8 = v9;
      if ((void *)(v3 + 16) != v9) {
        free(v8);
      }
    }
    a1[1] = v7;
  }
}

_DWORD *sub_1CD3C8060(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      unint64_t v6 = *(void **)result;
      uint64_t v7 = 16 * v2;
      do
      {
        void *v6 = -4096;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CB837D60(v1, v5);
  }
  return result;
}

void sub_1CD3C810C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) < a2)
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      abort();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    int v24 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x38E38E38E38E38ELL) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(72 * v11);
    }
    else
    {
      int v12 = 0;
    }
    int v13 = &v12[72 * v8];
    std::string __p = v12;
    int v21 = v13;
    int v23 = &v12[72 * v11];
    int v14 = &v13[72 * a2];
    uint64_t v15 = 72 * a2;
    do
    {
      *(void *)int v13 = v13 + 16;
      *((void *)v13 + 1) = 0x600000000;
      *((_DWORD *)v13 + 16) = 0;
      v13 += 72;
      v15 -= 72;
    }
    while (v15);
    int v22 = v14;
    sub_1CD3C82C8(a1, &__p);
    int v16 = v21;
LABEL_21:
    int v17 = v22;
    while (v17 != v16)
    {
      int v19 = (char *)*((void *)v17 - 9);
      v17 -= 72;
      int v18 = v19;
      int v22 = v17;
      if (v19 != v17 + 16)
      {
        free(v18);
        goto LABEL_21;
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (a2)
    {
      uint64_t v6 = v5 + 72 * a2;
      uint64_t v7 = 72 * a2;
      do
      {
        *(void *)uint64_t v5 = v5 + 16;
        *(void *)(v5 + 8) = 0x600000000;
        *(_DWORD *)(v5 + 64) = 0;
        v5 += 72;
        v7 -= 72;
      }
      while (v7);
      uint64_t v5 = v6;
    }
    a1[1] = v5;
  }
}

uint64_t *sub_1CD3C82C8(uint64_t *result, void *a2)
{
  int v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(v6 + v7 - 72) = v6 + v7 - 56;
      uint64_t result = (uint64_t *)(v6 + v7 - 72);
      uint64_t v8 = v4 + v7;
      *(void *)(v6 + v7 - 64) = 0x600000000;
      if (*(_DWORD *)(v4 + v7 - 64)) {
        uint64_t result = (uint64_t *)sub_1CB837F14((uint64_t)result, v8 - 72);
      }
      *(_DWORD *)(v6 + v7 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 72;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v9 = *v3;
  *int v3 = v6;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_1CD3C83A4(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 2);
    if (v8 >> 62) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 62) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(4 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v12 = &v11[4 * (v7 >> 2)];
    int v13 = &v11[4 * v10];
    bzero(v12, 4 * a2);
    while (v5 != v6)
    {
      int v14 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *a1 = v12;
    a1[1] = &v11[4 * a2 + v7];
    a1[2] = v13;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void *sub_1CD3C84D0(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD3C8538(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD3C85D4((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1CD3C8538(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CD3C85D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD3C8684(a1, v7);
  uint64_t v9 = 0;
  sub_1CD3C8538((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD3C8684(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD3C8750(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD3C8750(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD3C8538((uint64_t *)v5, (void *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

unint64_t sub_1CD3C8808(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = 12 * v1;
  uint64_t v4 = (int *)(*(void *)a1 + 4);
  do
  {
    int v6 = *v4;
    v4 += 3;
    int v5 = v6;
    if ((v6 - 3) >= 0x100)
    {
      if ((v5 - 1283) >= 0x100) {
        int v8 = -4104;
      }
      else {
        int v8 = -5128;
      }
      if ((v5 - 1539) >= 0x100) {
        int v9 = v8;
      }
      else {
        int v9 = -6152;
      }
      if ((v5 - 1795) >= 0x100) {
        int v10 = v9;
      }
      else {
        int v10 = -7176;
      }
      if ((v5 - 18559) >= 0xFF) {
        int v11 = v10;
      }
      else {
        int v11 = -74232;
      }
      if ((v5 - 9299) >= 0xFF) {
        int v12 = v11;
      }
      else {
        int v12 = -37192;
      }
      if ((v5 - 771) >= 0x100) {
        int v7 = v12;
      }
      else {
        int v7 = -3080;
      }
    }
    else
    {
      int v7 = -8;
    }
    unsigned int v13 = v7 + 4 * v5;
    if (v2 <= v13) {
      uint64_t v2 = v13;
    }
    else {
      uint64_t v2 = v2;
    }
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

void *sub_1CD3C88DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a3;
  v9[39] = *MEMORY[0x1E4F143B8];
  llvm::CCState::CCState(v9, a3, 0, a1, a5, a2);
  if (v6 == 105) {
    int v7 = sub_1CB8390A8;
  }
  else {
    int v7 = sub_1CB838F0C;
  }
  llvm::CCState::AnalyzeReturn((uint64_t)v9, a4, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))v7);
  return sub_1CB8393F0(v9);
}

void *sub_1CD3C898C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a3;
  v8[39] = *MEMORY[0x1E4F143B8];
  llvm::CCState::CCState(v8, a3, 0, a1, a5, a2);
  llvm::CCState::AnalyzeFormalArguments((uint64_t)v8, a4, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))off_1F25E98B8[v6 - 102]);
  return sub_1CB8393F0(v8);
}

void sub_1CD3C8A2C()
{
}

void sub_1CD3C8A98()
{
}

void sub_1CD3C8AF4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBE840, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB8397C0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBE840, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

llvm::Instruction *sub_1CD3C8B64(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  Int64Ty = (llvm::ConstantInt *)llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  v22[0] = (uint64_t)llvm::ConstantInt::get(Int64Ty, a4, 0);
  int v14 = (llvm::ConstantInt *)llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), v13);
  v22[1] = (uint64_t)llvm::ConstantInt::get(v14, a5, 0);
  uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::LLVMContext *, uint64_t *, uint64_t *, uint64_t, void))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72), a2, a3, v22, 2, 0);
  if (!result)
  {
    __int16 v21 = 257;
    int v16 = operator new(0xB0uLL);
    uint64_t v17 = 0;
    int v18 = (llvm::Instruction *)(v16 + 24);
    v16[29] = v16[29] & 0x38000000 | 3;
    do
    {
      int v19 = &v16[v17];
      void *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v18;
      v17 += 8;
    }
    while (v17 != 24);
    sub_1CB845960((uint64_t)(v16 + 24), (uint64_t)a2, a3, v22, 2, 3, &v20, 0);
    return sub_1CB844E0C((uint64_t *)a1, v18, a6);
  }
  return result;
}

void sub_1CD3C8CC4()
{
}

uint64_t sub_1CD3C8D18(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    int v5 = (_OWORD *)(*(void *)result + 32 * v4);
    do
    {
      long long v6 = *(_OWORD *)v3;
      long long v7 = *((_OWORD *)v3 + 1);
      v3 += 32;
      _OWORD *v5 = v6;
      v5[1] = v7;
      v5 += 2;
    }
    while (v3 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 5);
  return result;
}

unint64_t sub_1CD3C8DA0(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 40))
  {
    sub_1CB84AEB8((uint64_t **)(a1 + 24), a2, a2);
    return ((unint64_t)v10 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (v4)
    {
      uint64_t v6 = 4 * v4;
      long long v7 = *(_DWORD **)a1;
      while (*v7 != v5)
      {
        ++v7;
        v6 -= 4;
        if (!v6) {
          goto LABEL_6;
        }
      }
      if (v6) {
        return 1;
      }
LABEL_6:
      if (v4 <= 1) {
        goto LABEL_7;
      }
      do
      {
        int v9 = (unsigned int *)(*(void *)a1 + 4 * v4 - 4);
        sub_1CB84AEB8((uint64_t **)(a1 + 24), v9, v9);
        LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
      }
      while (v4);
      sub_1CB84AEB8((uint64_t **)(a1 + 24), a2, a2);
    }
    else
    {
LABEL_7:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

llvm::MachineFunction *sub_1CD3C8EB4(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  int v9 = *(llvm::MachineFunction **)(a1 + 32);
  unsigned __int8 v10 = *a3;
  unsigned int v13 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
  }
  int v11 = llvm::MachineFunction::CreateMachineInstr(v9, a4, &v13, 0);
  if (v13) {
    llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
  }
  llvm::MachineBasicBlock::insert(a1, a2, (uint64_t)v11);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v14[0] = 0x1000000;
  v14[1] = a5;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)v14);
  return v9;
}

uint64_t (***sub_1CD3C8F78())()
{
  return off_1EC7DF9B0;
}

uint64_t sub_1CD3C8F84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  unsigned int v5 = *(void **)(*(void *)(a2 + 24) + 160);
  uint64_t v6 = sub_1CB84B218(a2);
  uint64_t v7 = v6;
  int v8 = (void *)(v4 + 8);
  if (!v4) {
    int v8 = 0;
  }
  unint64_t v9 = *(unsigned int *)(*v8 + 24 * v6 + 16);
  unsigned __int8 v10 = (_WORD *)(v8[6] + ((v9 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v11 = *v10 + (v9 & 0xF) * v6;
  do
  {
    uint64_t v12 = v5[5];
    uint64_t v13 = v11;
    uint64_t v14 = 4 * v11;
    int v15 = *(unsigned __int16 *)(v12 + v14);
    if (*(_WORD *)(v12 + v14))
    {
      int v16 = *(unsigned __int16 *)(v12 + 4 * v13 + 2);
      do
      {
        int v17 = v15;
        int v15 = v16;
        uint64_t v18 = v5[6];
        if (v18)
        {
          int v19 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(*v5 + 24 * (unsigned __int16)v17 + 8));
          do
          {
            llvm::MachineRegisterInfo::clearKillFlags(v3, (unsigned __int16)v17);
            int v20 = *v19++;
            v17 += v20;
          }
          while (v20);
        }
        int v16 = 0;
      }
      while ((_WORD)v15);
    }
    int v21 = (unsigned __int16)v10[1];
    ++v10;
    unsigned __int16 v11 = v21 + v13;
  }
  while (v21);
  return v7;
}

uint64_t sub_1CD3C90B8()
{
  return 0;
}

llvm::MachineFunction **sub_1CD3C90C0(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, uint64_t a6, unsigned __int8 **a7, int a8, void *a9)
{
  (*(void (**)(void *, uint64_t, void))(*a9 + 264))(a9, a2, 0);
  uint64_t v16 = a9[1];
  int v17 = (unint64_t *)(a2 + 48);
  if (a4)
  {
    uint64_t v18 = 34656;
    if (a5) {
      uint64_t v18 = 33888;
    }
    int v19 = sub_1CB84B588(a2, v17, a7, v16 + v18);
    int v21 = v20;
    *((void *)&v29 + 1) = 0;
    long long v30 = 0uLL;
    LODWORD(v29) = 0x1000000;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 1;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
  }
  else
  {
    uint64_t v22 = 34464;
    if (a5) {
      uint64_t v22 = 33696;
    }
    int v19 = sub_1CB84B588(a2, v17, a7, v16 + v22);
    int v21 = v23;
    *((void *)&v29 + 1) = 0;
    long long v30 = 0uLL;
    LODWORD(v29) = 0x1000000;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v23, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    *((void *)&v29 + 1) = 0;
    long long v30 = 0uLL;
    LODWORD(v29) = 0;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = 1;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
  }
  *((void *)&v29 + 1) = 0;
  *(void *)&long long v30 = 2;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
  long long v29 = 0u;
  long long v30 = 0u;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
  int v28 = (unint64_t *)a3[7];
  uint64_t result = (llvm::MachineFunction **)sub_1CB84B430(a3, a6, &v28);
  if (result)
  {
    int v25 = sub_1CB84B588((uint64_t)a3, v28, a7, a9[1] + 19056);
    int v27 = v26;
    *((void *)&v29 + 1) = 0;
    *(void *)&long long v30 = a6;
    LODWORD(v29) = 4;
    llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v29);
    *(void *)&long long v29 = v25;
    *((void *)&v29 + 1) = v27;
    return sub_1CB84B704((llvm::MachineFunction **)&v29);
  }
  return result;
}

llvm::MachineFunction **sub_1CD3C9340(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 **a5, int a6, void *a7)
{
  (*(void (**)(void *, uint64_t, void))(*a7 + 264))(a7, a2, 0);
  uint64_t v12 = (unint64_t *)a3[7];
  uint64_t v13 = sub_1CB84B760((uint64_t)a3, (uint64_t)v12, a5, a7[1] + 25248);
  int v15 = v14;
  *((void *)&v21 + 1) = 0;
  long long v22 = 0uLL;
  LODWORD(v21) = 0x1000000;
  DWORD1(v21) = a6;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((void *)&v21 + 1) = 0;
  *(void *)&long long v22 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  *((void *)&v21 + 1) = 0;
  long long v22 = 0uLL;
  LODWORD(v21) = 0;
  DWORD1(v21) = a6;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((void *)&v21 + 1) = 0;
  *(void *)&long long v22 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((void *)&v21 + 1) = 0;
  *(void *)&long long v22 = 1;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((void *)&v21 + 1) = 0;
  *(void *)&long long v22 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  long long v21 = 0u;
  long long v22 = 0u;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  int v20 = v12;
  uint64_t result = (llvm::MachineFunction **)sub_1CB84B430(a3, a4, &v20);
  if (result)
  {
    int v17 = sub_1CB84B588((uint64_t)a3, v20, a5, a7[1] + 19056);
    int v19 = v18;
    *((void *)&v21 + 1) = 0;
    *(void *)&long long v22 = a4;
    LODWORD(v21) = 4;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v21);
    *(void *)&long long v21 = v17;
    *((void *)&v21 + 1) = v19;
    return sub_1CB84B704((llvm::MachineFunction **)&v21);
  }
  return result;
}

void sub_1CD3C9514(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, int a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a6 + 264))(a6, a2, 0);

  sub_1CD3CA198(a3, 0, a4, a5, a6, 1);
}

void sub_1CD3C95A4(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4, int a5, void *a6)
{
  (*(void (**)(void *, uint64_t, void))(*a6 + 264))(a6, a2, 0);
  uint64_t v11 = a6[1];
  uint64_t v12 = (unint64_t *)(a2 + 48);
  if (a3)
  {
    uint64_t v13 = sub_1CB84B588(a2, v12, a4, v11 + 35424);
    int v15 = v14;
    *((void *)&v17 + 1) = 0;
    long long v18 = 0uLL;
    LODWORD(v17) = 0x1000000;
    DWORD1(v17) = a5;
    llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v17);
    LODWORD(v17) = 1;
    *((void *)&v17 + 1) = 0;
    *(void *)&long long v18 = 0;
  }
  else
  {
    uint64_t v13 = sub_1CB84B588(a2, v12, a4, v11 + 35232);
    int v15 = v16;
    *((void *)&v17 + 1) = 0;
    long long v18 = 0uLL;
    LODWORD(v17) = 0x1000000;
    DWORD1(v17) = a5;
    llvm::MachineInstr::addOperand(v16, v13, (const llvm::MachineOperand *)&v17);
    LODWORD(v17) = 1;
    *((void *)&v17 + 1) = 0;
    *(void *)&long long v18 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
    *((void *)&v17 + 1) = 0;
    long long v18 = 0uLL;
    LODWORD(v17) = 0;
    DWORD1(v17) = a5;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((void *)&v17 + 1) = 0;
  *(void *)&long long v18 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((void *)&v17 + 1) = 0;
  *(void *)&long long v18 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((void *)&v17 + 1) = 0;
  *(void *)&long long v18 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  long long v17 = 0u;
  long long v18 = 0u;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
}

void sub_1CD3C979C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, int a6, int a7, int a8, int a9, void *a10)
{
  (*(void (**)(void *, uint64_t, void))(*a10 + 264))(a10, a2, 0);
  if (a7)
  {
    uint64_t v17 = a10[1];
    if (a9)
    {
      uint64_t v22 = 33696;
      if (a8) {
        uint64_t v22 = 34464;
      }
      int v23 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, v17 + v22);
      int v25 = v24;
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      LODWORD(v37) = 0;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 1;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 2;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      long long v37 = 0u;
      long long v38 = 0u;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      int v26 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, a10[1] + 32352);
      int v28 = v27;
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = (a9 + 3);
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 2;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      long long v37 = 0u;
      long long v38 = 0u;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      sub_1CD3CA198(a2, 0, a5, a6, (uint64_t)a10, 0);
    }
    else
    {
      uint64_t v18 = 31392;
      if (a8) {
        uint64_t v18 = 30624;
      }
      int v19 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, v17 + v18);
      long long v21 = v20;
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      LODWORD(v37) = 0;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 0;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 2;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((void *)&v37 + 1) = 0;
      *(void *)&long long v38 = 2;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      long long v37 = 0u;
      long long v38 = 0u;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
    }
  }
  long long v29 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, a10[1] + 18960);
  int v31 = v30;
  *((void *)&v37 + 1) = 0;
  *(void *)&long long v38 = a3;
  LODWORD(v37) = 4;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v37);
  *(void *)&long long v37 = v29;
  *((void *)&v37 + 1) = v31;
  sub_1CB84B704((llvm::MachineFunction **)&v37);
  if (a4)
  {
    uint64_t v32 = a4;
    int v33 = a5;
    int v34 = a6;
    uint64_t v35 = (uint64_t)a10;
    int v36 = 1;
  }
  else
  {
    uint64_t v32 = a2;
    int v33 = a5;
    int v34 = a6;
    uint64_t v35 = (uint64_t)a10;
    int v36 = 0;
  }
  sub_1CD3CA198(v32, 1, v33, v34, v35, v36);
}

void sub_1CD3C9B88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned __int8 **a5, int a6, int a7, int a8, void *a9)
{
  (*(void (**)(void *, uint64_t, void))(*a9 + 264))(a9, a2, 0);
  uint64_t v16 = a9[1];
  if (a8)
  {
    uint64_t v24 = 33696;
    if (a7) {
      uint64_t v24 = 34464;
    }
    int v25 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, v16 + v24);
    int v27 = v26;
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    LODWORD(v32) = 0x1000000;
    DWORD1(v32) = a6;
    llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    LODWORD(v32) = 0;
    DWORD1(v32) = a6;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 1;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 2;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    long long v32 = 0u;
    long long v33 = 0u;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v32);
    int v28 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, a9[1] + 32352);
    long long v30 = v29;
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    LODWORD(v32) = 0x1000000;
    DWORD1(v32) = a6;
    llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = (a8 + 3);
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 2;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v32);
    long long v32 = 0u;
    long long v33 = 0u;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v32);
    sub_1CD3CA198(a2, 0, a5, a6, (uint64_t)a9, 0);
  }
  else
  {
    uint64_t v17 = 31392;
    if (a7) {
      uint64_t v17 = 30624;
    }
    uint64_t v18 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a5, v16 + v17);
    int v20 = v19;
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    LODWORD(v32) = 0x1000000;
    DWORD1(v32) = a6;
    llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    LODWORD(v32) = 0;
    DWORD1(v32) = a6;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 2;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    LODWORD(v32) = 1;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 2;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    long long v32 = 0u;
    long long v33 = 0u;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v32);
    int v31 = (unint64_t *)a4[7];
    if (a3)
    {
      if (sub_1CB84B430(a4, a3, &v31))
      {
        long long v21 = sub_1CB84B588((uint64_t)a4, v31, a5, a9[1] + 19056);
        int v23 = v22;
        *((void *)&v32 + 1) = 0;
        *(void *)&long long v33 = a3;
        LODWORD(v32) = 4;
        llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v32);
        *(void *)&long long v32 = v21;
        *((void *)&v32 + 1) = v23;
        sub_1CB84B704((llvm::MachineFunction **)&v32);
      }
    }
  }
}

BOOL sub_1CD3C9F44(uint64_t a1, int a2)
{
  return a2 == 11576;
}

BOOL sub_1CD3C9F54(uint64_t a1, int a2)
{
  return a2 == 11575;
}

uint64_t sub_1CD3C9F64(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

BOOL sub_1CD3C9F6C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 32) + 48) != 0;
}

void sub_1CD3C9F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a2 + 320);
  uint64_t v4 = *(void **)(a2 + 328);
  if (v4 != (void *)(a2 + 320))
  {
    uint64_t v5 = v4[1];
    if ((void *)v5 != v3 && *(void **)(v5 + 8) != v3)
    {
      int v8 = 0;
      unint64_t v9 = *(void **)(a2 + 328);
      do
      {
        int v10 = v8;
        for (uint64_t i = v9[7]; (void *)i != v9 + 6; uint64_t i = *(void *)(i + 8))
        {
          int v12 = **(unsigned __int16 **)(i + 16);
          unsigned int v13 = v12 - 532;
          unsigned int v14 = v12 - 676;
          if (v12 == 606) {
            int v15 = -2;
          }
          else {
            int v15 = 0;
          }
          if (v14 < 0x40) {
            int v15 = 1;
          }
          if (v13 < 0x40) {
            int v15 = -1;
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
          v8 += v15;
        }
        uint64_t v16 = v9;
        if (v10 == 1)
        {
          do
          {
            if (v16 == v4) {
              break;
            }
            uint64_t v17 = (void *)*v16;
            int v18 = -1;
            uint64_t v19 = *v16 + 48;
            do
            {
              uint64_t v19 = *(void *)(v19 + 8);
              ++v18;
            }
            while (v19 != *v16 + 48);
            if (v18 != 1) {
              break;
            }
            uint64_t v20 = v16[7];
            if ((void *)v20 == v16 + 6) {
              break;
            }
            if (**(_WORD **)(v20 + 16) != 590) {
              break;
            }
            if (*(void *)(*(void *)(v20 + 32) + 144) != 1) {
              break;
            }
            uint64_t v21 = v17[7];
            if (**(_WORD **)(v21 + 16) != 590 || *(void *)(*(void *)(v21 + 32) + 144) != 1) {
              break;
            }
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v21);
            *(void *)(*(void *)(v20 + 32) + 144) = 2;
            *(void *)(v20 + 16) = *(void *)(a3 + 8) + 29088;
            uint64_t v4 = *(void **)(a2 + 328);
            if (v17 == v4)
            {
              uint64_t v4 = v17;
              break;
            }
            uint64_t v16 = (void *)*v17;
            int v22 = -1;
            uint64_t v23 = *v17 + 48;
            do
            {
              uint64_t v23 = *(void *)(v23 + 8);
              ++v22;
            }
            while (v23 != *v17 + 48);
          }
          while (v22 == 1);
        }
        unint64_t v9 = (void *)v9[1];
      }
      while (v9 != v3);
    }
  }
}

uint64_t sub_1CD3CA158()
{
  return 0;
}

void sub_1CD3CA160(llvm::GPUConditionalizer *a1)
{
  llvm::GPUConditionalizer::~GPUConditionalizer(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3CA198(uint64_t a1, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6)
{
  if (a6) {
    uint64_t v8 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v8 = a1 + 48;
  }
  unint64_t v9 = sub_1CB84B760(a1, v8, a3, *(void *)(a5 + 8) + 28320);
  uint64_t v11 = v10;
  *((void *)&v13 + 1) = 0;
  long long v14 = 0uLL;
  LODWORD(v13) = 0x1000000;
  DWORD1(v13) = a4;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  *((void *)&v13 + 1) = 0;
  long long v14 = 0uLL;
  LODWORD(v13) = 0;
  DWORD1(v13) = a4;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  if (a2) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = 1;
  }
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = v12;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 2;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  long long v13 = 0u;
  long long v14 = 0u;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
}

void sub_1CD3CA2C0()
{
}

BOOL sub_1CD3CA314(int a1, uint64_t a2, char *__s, _DWORD *a4)
{
  uint64_t v12 = *(void *)(a2 + 112);
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v12, -1, __s, v6);
  BOOL result = llvm::Attribute::isStringAttribute((llvm::Attribute *)&AttributeAtIndex);
  if (result)
  {
    ValueAsString = (unsigned __int8 *)llvm::Attribute::getValueAsString((llvm::Attribute *)&AttributeAtIndex);
    unint64_t v13 = 0;
    char AsUnsignedInteger = llvm::getAsUnsignedInteger(ValueAsString, v9, 0, &v13);
    BOOL result = 0;
    if ((AsUnsignedInteger & 1) == 0)
    {
      if (HIDWORD(v13))
      {
        return 0;
      }
      else
      {
        *a4 = v13;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1CD3CA3C4(int a1, int a2, int a3, int a4)
{
  switch(a1)
  {
    case -1:
      uint64_t v7 = "Unspecified SampleMode for G4Itr";
      goto LABEL_12;
    case 0:
      uint64_t v4 = (unsigned int *)&unk_1CD91C260;
      uint64_t v5 = (unsigned int *)&unk_1CD91C240;
      goto LABEL_6;
    case 1:
      uint64_t v4 = (unsigned int *)&unk_1CD91C220;
      uint64_t v5 = (unsigned int *)&unk_1CD91C200;
      goto LABEL_6;
    case 2:
      uint64_t v4 = (unsigned int *)&unk_1CD91C1E0;
      uint64_t v5 = (unsigned int *)&unk_1CD91C1C0;
LABEL_6:
      if (a3) {
        uint64_t v4 = v5;
      }
      uint64_t result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      uint64_t v7 = "Flat SampleMode not implemented for G4Itr";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CD3CA474(int a1, int a2, int a3, int a4)
{
  switch(a1)
  {
    case -1:
      uint64_t v7 = "Unspecified SampleMode for G5Itr";
      goto LABEL_12;
    case 0:
      uint64_t v4 = (unsigned int *)&unk_1CD91C320;
      uint64_t v5 = (unsigned int *)&unk_1CD91C300;
      goto LABEL_6;
    case 1:
      uint64_t v4 = (unsigned int *)&unk_1CD91C2E0;
      uint64_t v5 = (unsigned int *)&unk_1CD91C2C0;
      goto LABEL_6;
    case 2:
      uint64_t v4 = (unsigned int *)&unk_1CD91C2A0;
      uint64_t v5 = (unsigned int *)&unk_1CD91C280;
LABEL_6:
      if (a3) {
        uint64_t v4 = v5;
      }
      uint64_t result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      uint64_t v7 = "Flat SampleMode not implemented for G5Itr";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CD3CA524(int a1, int a2, int a3, int a4)
{
  switch(a1)
  {
    case -1:
      uint64_t v7 = "Unspecified SampleMode for G5ItrProj";
      goto LABEL_12;
    case 0:
      uint64_t v4 = (unsigned int *)&unk_1CD91C3E0;
      uint64_t v5 = (unsigned int *)&unk_1CD91C3C0;
      goto LABEL_6;
    case 1:
      uint64_t v4 = (unsigned int *)&unk_1CD91C3A0;
      uint64_t v5 = (unsigned int *)&unk_1CD91C380;
      goto LABEL_6;
    case 2:
      uint64_t v4 = (unsigned int *)&unk_1CD91C360;
      uint64_t v5 = (unsigned int *)&unk_1CD91C340;
LABEL_6:
      if (a3) {
        uint64_t v4 = v5;
      }
      uint64_t result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      uint64_t v7 = "Flat SampleMode not implemented for G5ItrProj";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

llvm::ConstantFP ***sub_1CD3CA5D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (llvm::ConstantFP ***)a2;
  v8[3] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*a2 + 8))
  {
    sub_1CB87DDC4((uint64_t)v8, a2 + 4);
    char v6 = 0;
    if (!llvm::APFloat::convert((uint64_t)v7, &unk_1CFB2E2E0, 1, &v6)
      && !v6
      && !sub_1CB8456FC((uint64_t)v7))
    {
      if ((_UNKNOWN *)v8[0] == &unk_1CFB2E344) {
        uint64_t v4 = (unsigned char *)v8[1];
      }
      else {
        uint64_t v4 = v7;
      }
      if ((v4[28] & 7) != 0) {
        uint64_t v2 = (llvm::ConstantFP ***)llvm::ConstantFP::get(**v2, (llvm::LLVMContext *)v7, v3);
      }
    }
    sub_1CB87DEE4(v8);
  }
  return v2;
}

uint64_t sub_1CD3CA6C8(uint64_t a1, uint64_t a2, int *a3)
{
  v59[2] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  unsigned int v52 = 0;
  uint64_t VirtualRegister = 0;
  if (!sub_1CB85A994(a1, *(void *)a2, (int *)&v52)) {
    return VirtualRegister;
  }
  unint64_t v7 = v52;
  if ((int)v52 > 32)
  {
    int v9 = v52 & 0x1F;
    if (a3) {
      *a3 = v9;
    }
    if (v9)
    {
      if (v9 == 16 && v7 == 48)
      {
        int v10 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
        if (v10)
        {
          int v11 = v10;
          if (!a3)
          {
            uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A46D8, "", 0);
            if (VirtualRegister)
            {
              uint64_t v48 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 864, VirtualRegister);
              char v50 = v49;
              for (uint64_t i = 1; i != 4; ++i)
              {
                *(_DWORD *)&v54[8] = 0;
                int v53 = 0;
                *(void *)unsigned int v54 = (v11 + i - 1);
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v53);
                int v53 = 1;
                *(void *)&void v54[4] = 0;
                uint64_t v55 = i;
                llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v53);
              }
            }
            return VirtualRegister;
          }
          int v12 = *a3;
          unint64_t v13 = (48 - *a3);
          if (v13 < 0x21)
          {
            long long v14 = &off_1E66A43C8;
LABEL_16:
            uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v14, "", 0);
            if (VirtualRegister)
            {
              int v15 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 864, VirtualRegister);
              if (v13 >= 0x10)
              {
                uint64_t v17 = v15;
                int v18 = v16;
                uint64_t v19 = 0;
                uint64_t v20 = v13 >> 4;
                do
                {
                  *(_DWORD *)&v54[8] = 0;
                  int v53 = 0;
                  *(void *)unsigned int v54 = (v11 + v19);
                  uint64_t v55 = 0;
                  uint64_t v56 = 0;
                  llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v53);
                  ++v19;
                  int v53 = 1;
                  *(void *)&void v54[4] = 0;
                  uint64_t v55 = v19;
                  llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v53);
                }
                while (v20 != v19);
              }
            }
            return VirtualRegister;
          }
          if (!v12)
          {
            long long v14 = &off_1E66A4690;
            goto LABEL_16;
          }
          uint64_t VirtualRegister = 0;
          if (v13 <= 0x21F && (v13 & 0x1F) == 0)
          {
            long long v14 = off_1E66A3B08[(v13 >> 5) + 1];
            goto LABEL_16;
          }
          return VirtualRegister;
        }
      }
      return 0;
    }
    std::string::size_type v57 = v59;
    uint64_t v58 = 0x400000000;
    if (*(unsigned char *)(a2 + 16) == 15)
    {
      if (llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)a2))
      {
        unsigned int v21 = 0;
        while (1)
        {
          ElementAsConstant = (unsigned __int8 *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)a2, v21);
          int v23 = sub_1CD3CAD7C((uint64_t *)a1, ElementAsConstant);
          if (!v23) {
            break;
          }
          if (v58 >= (unint64_t)HIDWORD(v58)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v57 + v58) = v23;
          LODWORD(v58) = v58 + 1;
          if (++v21 >= llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)a2)) {
            goto LABEL_29;
          }
        }
        uint64_t VirtualRegister = 0;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v41 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
      uint64_t VirtualRegister = v41;
      if (!v41) {
        goto LABEL_41;
      }
      uint64_t v42 = *(void **)(a1 + 48);
      unint64_t v43 = *(void *)(v42[3] + 16 * (v41 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(*v42 + 16) + 176))(*(void *)(*v42 + 16));
      unsigned int v45 = *(_DWORD *)(*(void *)(v44 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(void *)v43 + 24)
                       + *(_DWORD *)(v44 + 272) * ((*(void *)(v44 + 248) - *(void *)(v44 + 240)) >> 3)));
      if (v45 <= v7)
      {
        unsigned int v46 = v58;
        unsigned int v47 = v7 / v45;
        do
        {
          if (v46 >= HIDWORD(v58)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v57 + v46) = VirtualRegister;
          unsigned int v46 = v58 + 1;
          LODWORD(v58) = v58 + 1;
          LODWORD(VirtualRegister) = VirtualRegister + 1;
          --v47;
        }
        while (v47);
      }
    }
LABEL_29:
    if (v7 == 48)
    {
      uint64_t v24 = &off_1E66A4690;
LABEL_31:
      uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v24, "", 0);
      if (VirtualRegister)
      {
        int v25 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 864, VirtualRegister);
        uint64_t v27 = v58;
        if (v58)
        {
          int v28 = v25;
          long long v29 = v26;
          uint64_t v30 = 0;
          unsigned int v31 = 34;
          do
          {
            long long v32 = *(void **)(a1 + 48);
            unint64_t v33 = *(void *)(v32[3] + 16 * (*((_DWORD *)v57 + v30) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(*v32 + 16) + 176))(*(void *)(*v32 + 16));
            int v35 = *(_DWORD *)(*(void *)(v34 + 264)
                            + 24
                            * (*(unsigned __int16 *)(*(void *)v33 + 24)
                             + *(_DWORD *)(v34 + 272)
                             * ((*(void *)(v34 + 248) - *(void *)(v34 + 240)) >> 3)));
            if (v35 == 64)
            {
              int v38 = *((_DWORD *)v57 + v30);
              *(void *)&void v54[4] = 0;
              uint64_t v55 = 0;
              uint64_t v56 = 0;
              int v53 = 8448;
              *(_DWORD *)unsigned int v54 = v38;
              llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
              int v53 = 1;
              *(void *)&void v54[4] = 0;
              uint64_t v55 = v31 - 1;
              llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
              int v39 = *((_DWORD *)v57 + v30);
              *(void *)&void v54[4] = 0;
              uint64_t v55 = 0;
              uint64_t v56 = 0;
              int v53 = 8704;
              *(_DWORD *)unsigned int v54 = v39;
              llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
              int v53 = 1;
              uint64_t v37 = v31;
            }
            else
            {
              if (v35 == 32)
              {
                int v36 = *((_DWORD *)v57 + v30);
                *(void *)&void v54[4] = 0;
                int v53 = 0;
                *(_DWORD *)unsigned int v54 = v36;
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
                uint64_t v37 = (v30 + 33);
              }
              else
              {
                int v40 = *((_DWORD *)v57 + v30);
                *(void *)&void v54[4] = 0;
                int v53 = 0;
                *(_DWORD *)unsigned int v54 = v40;
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
                uint64_t v37 = v30 + 1;
              }
              int v53 = 1;
            }
            *(void *)&void v54[4] = 0;
            uint64_t v55 = v37;
            llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v53);
            ++v30;
            v31 += 2;
          }
          while (v27 != v30);
        }
      }
      goto LABEL_41;
    }
    uint64_t VirtualRegister = 0;
    if (v7 <= 0x21F && (v7 & 0x1F) == 0)
    {
      uint64_t v24 = off_1E66A3B08[(v7 >> 5) + 1];
      goto LABEL_31;
    }
LABEL_41:
    if (v57 != v59) {
      free(v57);
    }
    return VirtualRegister;
  }

  return sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
}

uint64_t sub_1CD3CAD7C(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned int v4 = a2[16];
  if (v4 >= 0x1C)
  {
    if (v4 != 59) {
      return sub_1CD3CD784(a1[4], (const llvm::Value *)a2);
    }
    uint64_t v5 = a1[4] + 176;
    uint64_t v10 = 0;
    int v11 = a2;
    if ((sub_1CB87DF68(v5, &v11, &v10) & 1) == 0) {
      return sub_1CD3CD784(a1[4], (const llvm::Value *)a2);
    }
  }
  unsigned __int8 v6 = sub_1CB87DC14(a1[13], a1[11], *(llvm::EVT **)a2, (llvm::Type *)1);
  if (!v6) {
    return 0;
  }
  uint64_t v9 = sub_1CD7893EC((uint64_t)a1);
  uint64_t v7 = sub_1CD3CD7E8((uint64_t)a1, (llvm::Constant *)a2, v6);
  sub_1CD7894D0((uint64_t)a1, v9);
  return v7;
}

uint64_t sub_1CD3CAE48(uint64_t a1, int a2, int a3)
{
  unsigned int v4 = &off_1E66A4180;
  if (a3) {
    unsigned int v4 = &off_1E66A41C8;
  }
  if (a2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = &off_1E66A43C8;
  }
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v5, "", 0);
  if (VirtualRegister) {
    sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 480, VirtualRegister);
  }
  return VirtualRegister;
}

uint64_t sub_1CD3CAED4(uint64_t a1, uint64_t a2)
{
  int v20 = 0;
  uint64_t v4 = 0;
  if (sub_1CB85A908(a1, a2, &v20))
  {
    uint64_t v5 = *(llvm::Type *****)(a1 + 32);
    Int64Ty = (llvm::LLVMContext **)llvm::Type::getInt64Ty(***v5, v3);
    uint64_t v7 = sub_1CD78C110((uint64_t)v5, Int64Ty);
    uint64_t v4 = v7;
    if (v7)
    {
      if (*(unsigned char *)(*(void *)(a1 + 256) + 280))
      {
        int v8 = v7 + 1;
        int v9 = v7;
      }
      else
      {
        int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A4340, "", 0);
        if (!VirtualRegister) {
          return 0;
        }
        int v8 = VirtualRegister;
        int v19 = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A4340, "", 0);
        if (!v19) {
          return 0;
        }
        int v9 = v19;
      }
      sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 480, v8);
      uint64_t v10 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 69360, v9);
      int v12 = v11;
      LODWORD(v21) = 1;
      *((void *)&v21 + 1) = 0;
      *(void *)&long long v22 = 0;
      llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
      int v13 = v20;
      LODWORD(v21) = 5;
      *((void *)&v21 + 1) = 0;
      LODWORD(v22) = v20;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 5;
      *((void *)&v21 + 1) = 0;
      LODWORD(v22) = v13;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 5;
      *((void *)&v21 + 1) = 0;
      LODWORD(v22) = v13;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      long long v21 = 0u;
      long long v22 = 0u;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 1;
      *((void *)&v21 + 1) = 0;
      *(void *)&long long v22 = 0;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      long long v21 = 0u;
      long long v22 = 0u;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      if (v9 != v4)
      {
        long long v14 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 864, v4);
        uint64_t v16 = v15;
        *((void *)&v21 + 1) = 0;
        long long v22 = 0uLL;
        LODWORD(v21) = 0;
        DWORD1(v21) = v9;
        llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v21);
        LODWORD(v21) = 1;
        *((void *)&v21 + 1) = 0;
        *(void *)&long long v22 = 33;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
        *((void *)&v21 + 1) = 0;
        long long v22 = 0uLL;
        LODWORD(v21) = 0;
        DWORD1(v21) = v8;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
        LODWORD(v21) = 1;
        *((void *)&v21 + 1) = 0;
        *(void *)&long long v22 = 34;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
      }
    }
  }
  return v4;
}

uint64_t sub_1CD3CB184(void ****a1, llvm::LLVMContext *a2, unsigned __int8 a3, int a4, unint64_t a5)
{
  if (a4 != 11 || a2 - 3 > 3 || a3 - 3 > 3) {
    return 0;
  }
  int v8 = (llvm::Type *)***a1[4];
  if (a3 == 5)
  {
    Int64Ty = (llvm::ConstantInt *)(*(void *)v8 + 1960);
  }
  else if (a3 == 6)
  {
    Int64Ty = (llvm::ConstantInt *)llvm::Type::getInt64Ty(v8, a2);
  }
  else
  {
    Int64Ty = (llvm::ConstantInt *)(*(void *)v8 + 1936);
  }
  int v11 = llvm::ConstantInt::get(Int64Ty, a5, 0);
  int v12 = (*a1)[13];
  return ((uint64_t (*)(void ****, void *))v12)(a1, v11);
}

uint64_t sub_1CD3CB258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  if (!sub_1CB85A994((uint64_t)a1, *a2, (int *)&v13 + 1)) {
    return 0;
  }
  if (!sub_1CB85A994((uint64_t)a1, *(void *)a3, (int *)&v13)) {
    return 0;
  }
  unsigned int v6 = HIDWORD(v13);
  if (HIDWORD(v13) != v13) {
    return 0;
  }
  int v7 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v7) {
    return 0;
  }
  int v8 = v7;
  if (*(unsigned __int8 *)(a3 + 16) - 11 >= 2)
  {
    int v11 = sub_1CB87DFFC(a1, (unsigned __int8 *)a3);
    if (v11)
    {
      int v9 = v11;
      int v12 = (void *)a1[6];
      if ((_UNKNOWN ***)(*(void *)(v12[3] + 16 * (v9 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4340) {
        sub_1CC38D61C(v12, v9, (uint64_t)&off_1E66A4340, (uint64_t)&off_1E66A43C8, 0);
      }
      goto LABEL_7;
    }
    return 0;
  }
  int v9 = 0;
LABEL_7:

  return sub_1CB85D99C(a1, v8, v9, v6);
}

uint64_t sub_1CD3CB380(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(**(void **)(a1 + 48) + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v8 = 16 * (a2 & 0x7FFFFFFF);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v7 + 200))(v7, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + v8) & 0xFFFFFFFFFFFFFFF8, a3);
  uint64_t v10 = *(void **)(a1 + 48);
  unint64_t v11 = *(void *)(v10[3] + v8) & 0xFFFFFFFFFFFFFFF8;

  return sub_1CC38D61C(v10, a2, v11, v9, 0);
}

uint64_t sub_1CD3CB450(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  unsigned int ItrKind = llvm::GetItrKind((llvm *)*(unsigned int *)(*(void *)(a2 - 32) + 36));
  BOOL v19 = ItrKind < 0xA;
  if (a5 == -1) {
    return 0;
  }
  char v20 = ItrKind;
  unsigned int v21 = sub_1CB859FD0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(void *)(a1 + 272), v15, v16, v17, v18);
  if (v21 == -1) {
    return 0;
  }
  unsigned int v26 = v21;
  unsigned int v27 = v19 & (0x38Eu >> v20);
  if (v27)
  {
    unsigned int v28 = sub_1CB859FD0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), *(void *)(a1 + 272), v22, v23, v24, v25);
    if (v28 == -1) {
      return 0;
    }
    uint64_t v29 = v28 >> 2;
  }
  else
  {
    uint64_t v29 = 0;
  }
  unsigned int v30 = sub_1CB859A78(a1, a2, a7, a6);
  if (!v30) {
    return 0;
  }
  unsigned int v31 = v30;
  if (a6 == 1) {
    char v32 = 4;
  }
  else {
    char v32 = 5;
  }
  unint64_t v33 = a4 << v32;
  uint64_t v34 = (v33 >> 3) + 0xFFFFFFFF;
  if (v33 >= 0x20) {
    uint64_t v34 = (v33 >> 5) + 1;
  }
  if (v33 == 16) {
    goto LABEL_17;
  }
  if (v33 == 48)
  {
    int v35 = &off_1E66A4690;
    goto LABEL_21;
  }
  if ((v33 & 0x10) == 0)
  {
LABEL_17:
    if (v34 <= 0x11uLL)
    {
      if (v34 == 1) {
        int v35 = &off_1E66A41C8;
      }
      else {
        int v35 = off_1E66A3B08[v34];
      }
      goto LABEL_21;
    }
  }
  int v35 = 0;
LABEL_21:
  BOOL v36 = a4 != 1 || a6 == 1;
  int v37 = v36;
  int v56 = v37;
  int v38 = a3;
  if (!v36)
  {
LABEL_37:
    int v54 = v38;
    uint64_t v55 = v29;
    unsigned int v40 = v27;
    uint64_t v44 = a4;
    uint64_t v45 = (a3 & ~(a3 >> 31)) - a3;
    int v46 = a3;
    while (v45)
    {
      sub_1CC38D61C(*(void **)(a1 + 48), v46, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v46 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
      ++v46;
      --v45;
      if (!--v44) {
        goto LABEL_40;
      }
    }
    return 0;
  }
  int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v35, "", 0);
  if (!VirtualRegister) {
    return 0;
  }
  int v38 = VirtualRegister;
  if (a6 == 1)
  {
    if (a4)
    {
      int v54 = VirtualRegister;
      uint64_t v55 = v29;
      unsigned int v40 = v27;
      uint64_t v41 = a4;
      uint64_t v42 = (a3 & ~(a3 >> 31)) - a3;
      int v43 = a3;
      while (v42)
      {
        sub_1CC38D61C(*(void **)(a1 + 48), v43, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v43 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A4180, 0);
        ++v43;
        --v42;
        if (!--v41)
        {
LABEL_40:
          unsigned int v27 = v40;
          uint64_t v29 = v55;
          int v38 = v54;
          goto LABEL_41;
        }
      }
      return 0;
    }
  }
  else if (a4)
  {
    goto LABEL_37;
  }
LABEL_41:
  uint64_t v47 = v26 >> 2;
  int v48 = v38;
  uint64_t v49 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * v31, v38);
  uint64_t v51 = v50;
  int v58 = 1;
  uint64_t v59 = 0;
  uint64_t v60 = v47;
  llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v58);
  v57[0] = v49;
  v57[1] = v51;
  if (v27)
  {
    int v58 = 1;
    uint64_t v59 = 0;
    uint64_t v60 = v29;
    llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v58);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 256) + 280))
  {
    int v58 = 1;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v58);
    int v58 = 1;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v58);
  }
  uint64_t v52 = 1;
  int v58 = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v58);
  sub_1CB84B704(v57);
  if (v56) {
    return sub_1CB85D99C((void *)a1, a3, v48, v33);
  }
  return v52;
}

uint64_t sub_1CD3CB7E4(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t *a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  int v9 = *(unsigned __int8 *)(*a2 + 8);
  if ((v9 | 2) != 2) {
    return 0;
  }
  if (a4)
  {
    if (*((unsigned char *)a4 + 16) == 17) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (v16) {
    int v17 = 1;
  }
  else {
    int v17 = a8;
  }
  int v18 = v17;
  if (v17 == 1)
  {
    if ((a8 & 1) != 0
      || v16 && ((_UNKNOWN *)v16[4] == &unk_1CFB2E344 ? (unsigned int v30 = (unsigned char *)v16[5]) : (unsigned int v30 = v16 + 3), (v30[28] & 7) == 3))
    {
      int v61 = 0;
      uint64_t v62 = 0;
    }
    else
    {
      sub_1CB87DDC4((uint64_t)&v68 + 8, v16 + 4);
      sub_1CB867534((uint64_t)&v68, (uint64_t)&v66);
      if (v67 >= 0x41) {
        unsigned int v31 = v66;
      }
      else {
        unsigned int v31 = (llvm::MachineFunction **)&v66;
      }
      uint64_t v32 = (uint64_t)*v31;
      if (v67 >= 0x41 && v66) {
        MEMORY[0x1D25D9CB0]();
      }
      sub_1CB87DEE4((uint64_t *)&v68 + 1);
      int v61 = 0;
      int v9 = *(unsigned __int8 *)(v8 + 8);
      uint64_t v33 = v32 | 0x100000000;
      if (*(unsigned char *)(v8 + 8)) {
        uint64_t v33 = v32;
      }
      uint64_t v62 = v33;
    }
  }
  else
  {
    int v52 = sub_1CD789230((uint64_t *)a1, (uint64_t)a4);
    if (!v52) {
      return 0;
    }
    int v61 = v52;
    uint64_t v62 = 0;
    int v9 = *(unsigned __int8 *)(v8 + 8);
  }
  if (a6 == 1) {
    BOOL v19 = &off_1E66A4180;
  }
  else {
    BOOL v19 = &off_1E66A4340;
  }
  if (a7)
  {
    uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v19, "", 0);
    if (!sub_1CB85EDF4(a1, a2, VirtualRegister, a6))
    {
      int v53 = sub_1CD789230((uint64_t *)a1, (uint64_t)a3);
      if (!v53) {
        return 0;
      }
      int v60 = v53;
      unsigned int v54 = dword_1CD91C1A0[2 * (a6 == 1) + (v9 == 0)];
      LODWORD(VirtualRegister) = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v19, "", 0);
      uint64_t v55 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * v54, VirtualRegister);
      std::string::size_type v57 = v56;
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 0;
      llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v68);
      int v66 = (llvm::MachineFunction **)v55;
      std::string v67 = v57;
      if ((sub_1CB8843D8(a1, a3, *(unsigned char *)(v8 + 8) == 0, (llvm::MachineFunction **)&v66, 0) & 1) == 0)
      {
        *((void *)&v68 + 1) = 0;
        long long v69 = 0uLL;
        LODWORD(v68) = 0;
        DWORD1(v68) = v60;
        llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      }
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 0;
      llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 0x100008000;
      llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      sub_1CB84B704((llvm::MachineFunction **)&v66);
      goto LABEL_18;
    }
    if (VirtualRegister)
    {
LABEL_18:
      int v21 = 0;
      goto LABEL_19;
    }
  }
  int v50 = sub_1CD789230((uint64_t *)a1, (uint64_t)a3);
  if (!v50) {
    return 0;
  }
  LODWORD(VirtualRegister) = v50;
  int v21 = 1;
LABEL_19:
  char v22 = v18;
  if (a6 == 1)
  {
    uint64_t v23 = 48144;
    if (v18) {
      uint64_t v23 = 48192;
    }
    uint64_t v24 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + v23, a5);
    unsigned int v26 = v25;
    LODWORD(v68) = 1;
    *((void *)&v68 + 1) = 0;
    *(void *)&long long v69 = 0;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v68);
    int v66 = (llvm::MachineFunction **)v24;
    std::string v67 = v26;
    int v27 = 3;
    do
    {
      if (!v21 || (sub_1CB8843D8(a1, a3, 1, (llvm::MachineFunction **)&v66, 0) & 1) == 0)
      {
        *((void *)&v68 + 1) = 0;
        LODWORD(v68) = 0;
        DWORD1(v68) = VirtualRegister;
        long long v69 = 0uLL;
        llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      }
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 2 * (v27 == 3);
      llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      --v27;
    }
    while (v27);
    if (v22)
    {
      uint64_t v29 = (llvm::MachineFunction *)v66;
      unsigned int v28 = v67;
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = v62;
    }
    else
    {
      if ((sub_1CB8843D8(a1, a4, 1, (llvm::MachineFunction **)&v66, 0) & 1) == 0)
      {
        *((void *)&v68 + 1) = 0;
        long long v69 = 0uLL;
        LODWORD(v68) = 0;
        DWORD1(v68) = v61;
        llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      }
      uint64_t v29 = (llvm::MachineFunction *)v66;
      unsigned int v28 = v67;
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 0;
    }
    llvm::MachineInstr::addOperand(v28, v29, (const llvm::MachineOperand *)&v68);
LABEL_57:
    long long v68 = 0u;
    long long v69 = 0u;
    llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
    sub_1CB84B704((llvm::MachineFunction **)&v66);
    return 1;
  }
  if (v62) {
    int v34 = 0;
  }
  else {
    int v34 = v18;
  }
  if (v34 == 1)
  {
    int v35 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 66336, a5);
    int v37 = v36;
    LODWORD(v68) = 1;
    *((void *)&v68 + 1) = 0;
    *(void *)&long long v69 = 0;
    llvm::MachineInstr::addOperand(v36, v35, (const llvm::MachineOperand *)&v68);
    int v66 = (llvm::MachineFunction **)v35;
    std::string v67 = v37;
    int v38 = 3;
    do
    {
      if (!v21 || (sub_1CB8843D8(a1, a3, 0, (llvm::MachineFunction **)&v66, 0) & 1) == 0)
      {
        *((void *)&v68 + 1) = 0;
        LODWORD(v68) = 0;
        DWORD1(v68) = VirtualRegister;
        long long v69 = 0uLL;
        llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      }
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      *(void *)&long long v69 = 2 * (v38 == 3);
      llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
      --v38;
    }
    while (v38);
    goto LABEL_57;
  }
  int v40 = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A4340, "", 0);
  if (!v40) {
    return 0;
  }
  int v59 = v40;
  uint64_t v41 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 66288, v40);
  int v43 = v42;
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v68);
  int v66 = (llvm::MachineFunction **)v41;
  std::string v67 = v43;
  int v44 = 3;
  do
  {
    if (!v21 || (sub_1CB8843D8(a1, a3, 0, (llvm::MachineFunction **)&v66, 0) & 1) == 0)
    {
      *((void *)&v68 + 1) = 0;
      LODWORD(v68) = 0;
      DWORD1(v68) = VirtualRegister;
      long long v69 = 0uLL;
      llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
    }
    LODWORD(v68) = 1;
    *((void *)&v68 + 1) = 0;
    *(void *)&long long v69 = 2 * (v44 == 3);
    llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
    --v44;
  }
  while (v44);
  long long v69 = 0uLL;
  long long v68 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v67, (llvm::MachineFunction *)v66, (const llvm::MachineOperand *)&v68);
  sub_1CB84B704((llvm::MachineFunction **)&v66);
  char v45 = v18;
  uint64_t v46 = 2;
  if (!v18) {
    uint64_t v46 = 0;
  }
  uint64_t v47 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * dword_1CD923568[v46], a5);
  uint64_t v49 = v48;
  *((void *)&v68 + 1) = 0;
  long long v69 = 0uLL;
  LODWORD(v68) = 0;
  DWORD1(v68) = v59;
  llvm::MachineInstr::addOperand(v48, v47, (const llvm::MachineOperand *)&v68);
  unint64_t v64 = v47;
  uint64_t v65 = v49;
  if (v45)
  {
    LODWORD(v68) = 1;
    *((void *)&v68 + 1) = 0;
    *(void *)&long long v69 = v62;
    llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v68);
  }
  else
  {
    char v51 = sub_1CB8843D8(a1, a4, 0, &v64, 0);
    uint64_t v47 = v64;
    uint64_t v49 = v65;
    if ((v51 & 1) == 0)
    {
      *((void *)&v68 + 1) = 0;
      long long v69 = 0uLL;
      LODWORD(v68) = 0;
      DWORD1(v68) = v61;
      llvm::MachineInstr::addOperand(v65, v64, (const llvm::MachineOperand *)&v68);
      uint64_t v47 = v64;
      uint64_t v49 = v65;
    }
  }
  uint64_t v39 = 1;
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 3;
  llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v68);
  long long v69 = 0uLL;
  long long v68 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v65, v64, (const llvm::MachineOperand *)&v68);
  return v39;
}

uint64_t sub_1CD3CBF94(uint64_t *a1, uint64_t a2)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  }
  if ((*(unsigned __int8 *)(**(void **)v5 + 8) | 2) != 2) {
    return 0;
  }
  int v8 = sub_1CD789230(a1, a2);
  if (!v8) {
    return 0;
  }
  int v10 = v8;
  HalfTy = (llvm::ConstantFP **)llvm::Type::getHalfTy(**(llvm::Type ***)a2, v9);
  int v12 = *(unsigned __int8 **)(a2 - 64);
  uint64_t v13 = *(llvm::ConstantFP ****)(a2 - 32);
  sub_1CB87E68C((uint64_t)v19, (uint64_t)&unk_1CFB2E2E0);
  sub_1CD3CDFC0((uint64_t)v18, 0);
  uint64_t v15 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v18, v14);
  int v17 = (llvm::Type **)llvm::ConstantFP::get(HalfTy, v16, 0.0);
  uint64_t v6 = sub_1CB88D14C((uint64_t)a1, v17, a2, v12, v13, (uint64_t)v15, (uint64_t)v17, v10);
  sub_1CB87DEE4(v19);
  return v6;
}

BOOL sub_1CD3CC0E8(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  }
  if (*(unsigned char *)(**(void **)v5 + 8) != 13) {
    return 0;
  }
  int v7 = sub_1CD789230(a1, a2);
  if (!v7) {
    return 0;
  }
  int v8 = v7;
  uint64_t v9 = *(void *)(a2 - 64);
  int v10 = *(llvm::Type **)v9;
  if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
    int v10 = (llvm::Type *)**((void **)v10 + 2);
  }
  if (llvm::Type::getPrimitiveSizeInBits(v10) > 0x20) {
    return 0;
  }
  unint64_t v11 = (llvm::ConstantInt *)(***(void ***)a2 + 1936);
  uint64_t v12 = *(void *)(a2 - 32);
  uint64_t v13 = llvm::ConstantInt::get(v11, 1uLL, 0);
  long long v14 = llvm::ConstantInt::get(v11, 0, 0);

  return sub_1CB88F21C(a1, v14, a2, v9, v12, (uint64_t)v13, (uint64_t)v14, v8);
}

uint64_t sub_1CD3CC218(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 > 0x10)
  {
    if (a3 != 32) {
      return 0;
    }
    uint64_t v6 = &off_1E66A4340;
    unsigned int v7 = 4802;
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else
  {
    if (a3 == 16) {
      uint64_t v5 = 0x10000FFFFLL;
    }
    else {
      uint64_t v5 = 0x1000000FFLL;
    }
    uint64_t v6 = &off_1E66A4180;
    unsigned int v7 = 4942;
  }
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v6, "", 0);
  if (VirtualRegister)
  {
    uint64_t v9 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * v7, VirtualRegister);
    unint64_t v11 = v10;
    LODWORD(v14) = 1;
    *((void *)&v14 + 1) = 0;
    *(void *)&long long v15 = 0;
    llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v14);
    *((void *)&v14 + 1) = 0;
    long long v15 = 0uLL;
    LODWORD(v14) = 0;
    DWORD1(v14) = a2;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    LODWORD(v14) = 1;
    *((void *)&v14 + 1) = 0;
    *(void *)&long long v15 = 0;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    LODWORD(v14) = 1;
    *((void *)&v14 + 1) = 0;
    *(void *)&long long v15 = 0x100000001;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    v13[0] = v9;
    v13[1] = v11;
    LODWORD(v14) = 1;
    *((void *)&v14 + 1) = 0;
    *(void *)&long long v15 = v5;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    long long v14 = 0u;
    long long v15 = 0u;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    sub_1CB84B704(v13);
  }
  return VirtualRegister;
}

uint64_t sub_1CD3CC398(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v4 = a2 - 32 * (v3 & 0x7FFFFFF);
  }
  if ((*(unsigned __int8 *)(**(void **)v4 + 8) | 2) == 2)
  {
    int v5 = *(unsigned __int8 *)(a2 + 16);
    int v6 = *(_DWORD *)(*(void *)a2 + 8);
    int v7 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
    if (v6 == 13 && v7 == 32)
    {
      BOOL v8 = v5 == 70;
      int v9 = 8;
      goto LABEL_8;
    }
    if (v6 == 13 && v7 == 16)
    {
      BOOL v8 = v5 == 70;
      int v9 = 4;
LABEL_8:
      if (v8) {
        unsigned int v10 = v9 + 1;
      }
      else {
        unsigned int v10 = v9;
      }
      return sub_1CB866D40(a1, a2, a3, v10, 0, 0);
    }
    if (v6 == 13 && v7 == 8)
    {
      unsigned int v10 = v5 == 70;
      return sub_1CB866D40(a1, a2, a3, v10, 0, 0);
    }
  }
  return 0;
}

uint64_t sub_1CD3CC440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  uint64_t v5 = *(void *)(a2 - 32 * v4);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 16) == 16;
  }
  else {
    BOOL v6 = 0;
  }
  char v7 = !v6;
  if (v6)
  {
    uint64_t v10 = -v4;
    uint64_t v13 = (unsigned __int16 *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      uint64_t v13 = *(unsigned __int16 **)v13;
    }
    int v9 = 0;
    uint64_t v11 = *v13 | 0x100000000;
    unsigned int v12 = 467;
  }
  else
  {
    int v8 = sub_1CD789230((uint64_t *)a1, v5);
    if ((v8 & 0x80000000) == 0) {
      return 0;
    }
    int v9 = v8;
    uint64_t v10 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    uint64_t v11 = 0x100000000;
    unsigned int v12 = 466;
  }
  int v14 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 + 32 * v10 + 32));
  if ((v14 & 0x80000000) == 0) {
    return 0;
  }
  int v17 = v14;
  int v18 = sub_1CD789230((uint64_t *)a1, a2);
  if (!v18) {
    return 0;
  }
  BOOL v19 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * v12, v18);
  int v21 = v20;
  v22[0] = v19;
  v22[1] = v20;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v23);
  if (v7)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v23 = 0;
    int v24 = v9;
    uint64_t v27 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    int v23 = 1;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    int v23 = 1;
    uint64_t v25 = 0;
    uint64_t v26 = v11;
  }
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v23 = 0;
  int v24 = v17;
  uint64_t v27 = 0;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
  uint64_t v15 = 1;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
  sub_1CB84B704(v22);
  return v15;
}

uint64_t sub_1CD3CC604(uint64_t *a1, uint64_t a2)
{
  int v4 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v10 = *(_DWORD *)(v9 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
  }
  unsigned int v11 = v10 >> 8;
  if (v11)
  {
    if (v11 == 64)
    {
      return sub_1CB86B3C8((uint64_t)a1, a2, v4, 0, 0, 0, v8);
    }
    return 0;
  }

  return sub_1CB86D9D0((uint64_t)a1, a2, v4, v5, v6, v7, v8);
}

uint64_t sub_1CD3CC6CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 256) + 280))
  {
    uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A46D8, "", 0);
    if (VirtualRegister
      && (uint64_t v5 = VirtualRegister,
          (int v6 = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A4180, "", 0)) != 0))
    {
      int v7 = v6;
      uint64_t v8 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48720, v6);
      unsigned int v10 = v9;
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      long long v15 = 0u;
      long long v16 = 0u;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      long long v15 = 0u;
      long long v16 = 0u;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      unsigned int v11 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 864, v5);
      uint64_t v13 = v12;
      *((void *)&v15 + 1) = 0;
      long long v16 = 0uLL;
      LODWORD(v15) = 0;
      DWORD1(v15) = a2;
      llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 33;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      *((void *)&v15 + 1) = 0;
      long long v16 = 0uLL;
      LODWORD(v15) = 0;
      DWORD1(v15) = v7;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 3;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

uint64_t sub_1CD3CC908(uint64_t *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1[32] + 280)) {
    return 0;
  }
  uint64_t v2 = **(void **)(a2 - 32);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**(void **)(v2 + 16) + 8);
  }
  unsigned int v4 = v3 >> 8;
  if (v4 - 1 < 2) {
    return sub_1CB86F64C(a1, a2);
  }
  if (v4 != 64)
  {
    if (!v4) {
      return sub_1CB870594(a1, a2);
    }
    return 0;
  }
  return sub_1CB8716F4(a1, a2);
}

uint64_t sub_1CD3CC968(uint64_t *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1[32] + 281)) {
    return 0;
  }
  uint64_t v2 = **(void **)(a2 - 32);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**(void **)(v2 + 16) + 8);
  }
  unsigned int v4 = v3 >> 8;
  if (v4 != 64)
  {
    if (!v4) {
      return sub_1CB870594(a1, a2);
    }
    return 0;
  }
  return sub_1CB8716F4(a1, a2);
}

uint64_t sub_1CD3CC9B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[32];
  if (*(unsigned char *)(v2 + 280)) {
    return sub_1CD3CC908(a1, a2);
  }
  if (*(unsigned char *)(v2 + 281)) {
    return sub_1CD3CC968(a1, a2);
  }
  return 0;
}

uint64_t sub_1CD3CC9DC(uint64_t a1, unsigned __int8 *a2)
{
  char v45 = a2;
  unsigned int v4 = *(llvm::Type **)a2;
  uint64_t v5 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = (llvm::Type *)**((void **)v4 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
  unsigned int v44 = PrimitiveSizeInBits;
  int v7 = *((_DWORD *)a2 + 5);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = (unsigned __int8 *)*((void *)a2 - 1);
  }
  else {
    uint64_t v8 = &a2[-32 * (v7 & 0x7FFFFFF)];
  }
  uint64_t v9 = *((unsigned int *)v4 + 8);
  uint64_t v10 = **(void **)v8;
  int v43 = *(_DWORD *)(v10 + 32);
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
    uint64_t v10 = **(void **)(v10 + 16);
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10)
    && (PrimitiveSizeInBits == 32 || PrimitiveSizeInBits == 16))
  {
    int v11 = sub_1CB87DFFC((uint64_t *)a1, a2);
    if (v11)
    {
      int v12 = v11;
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = (_UNKNOWN ***)(*(void *)(*(void *)(v13 + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      if (v14 == &off_1E66A41C8 || v14 == &off_1E66A4180) {
        unsigned int v16 = 16;
      }
      else {
        unsigned int v16 = 32;
      }
      v41[0] = 0;
      v41[1] = 0;
      int v42 = 0;
      v40[0] = v41;
      v40[1] = a1;
      v39[0] = (uint64_t *)&v45;
      v39[1] = (uint64_t *)&v43;
      v39[2] = v40;
      v39[3] = (uint64_t *)a1;
      v39[4] = (uint64_t *)&v44;
      if (v16 / PrimitiveSizeInBits == 2)
      {
        if (v9)
        {
          unsigned int v17 = 0;
          uint64_t v18 = 1;
          do
          {
            uint64_t v19 = sub_1CD3CAE48(a1, 0, 0);
            uint64_t v20 = sub_1CB874650(v39, (void *)a1, v19, v17, 1u);
            int v21 = sub_1CB874650(v39, (void *)a1, v20, v17 + 1, 2u);
            char v22 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 912, v12 + (v17 >> 1));
            uint64_t v48 = 0;
            int v46 = 0;
            int v47 = v21;
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v46);
            v17 += 2;
          }
          while (v17 < v9);
        }
        else
        {
          uint64_t v18 = 1;
        }
        goto LABEL_27;
      }
      if (PrimitiveSizeInBits >= 0x20)
      {
        uint64_t v25 = off_1E66A3B08[(PrimitiveSizeInBits >> 5) + 1];
        int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v13, (uint64_t)v25, "", 0);
        if (VirtualRegister)
        {
          int v27 = VirtualRegister;
          if (v9 < 2)
          {
LABEL_33:
            int v37 = v27;
            if (!v9)
            {
LABEL_50:
              uint64_t v18 = sub_1CB85D99C((void *)a1, v12, v37, v44 * v9);
              goto LABEL_27;
            }
            uint64_t v29 = 0;
            int v30 = 0;
            while (1)
            {
              uint64_t v38 = 0;
              if (!sub_1CB874980(v39, v29, (const llvm::APFloat *)((char *)&v38 + 4), &v38)) {
                break;
              }
              int v31 = HIDWORD(v38);
              if (!(HIDWORD(v38) | v30))
              {
                int v34 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                BOOL v36 = v34 == &off_1E66A4180 || v34 == &off_1E66A41C8;
                int v30 = sub_1CD3CAE48(a1, v36, 1);
              }
              uint64_t v33 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 912, v37 + (int)v29);
              uint64_t v48 = 0;
              if (v31)
              {
                uint64_t v49 = 0;
                uint64_t v50 = 0;
                int v46 = (v38 & 0xFFF) << 8;
                int v47 = v31;
              }
              else
              {
                int v46 = 0;
                int v47 = v30;
                uint64_t v49 = 0;
                uint64_t v50 = 0;
              }
              llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v46);
              if (v9 == ++v29) {
                goto LABEL_50;
              }
            }
          }
          else
          {
            int v28 = v9 - 1;
            while (llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)v25, "", 0))
            {
              if (!--v28) {
                goto LABEL_33;
              }
            }
          }
        }
      }
      uint64_t v18 = 0;
LABEL_27:
      MEMORY[0x1D25D9CD0](v41[0], 8);
      return v18;
    }
  }
  return 0;
}

void sub_1CD3CCDB0(uint64_t a1, uint64_t a2)
{
  v33[12] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 272);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 592))(v4, 103);
  if (v5 || (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 592))(v4, 104)) != 0)
  {
    uint64_t v6 = 583152;
    if ((*(_WORD *)(v5 + 18) & 0x3FF0) == 0x680) {
      uint64_t v6 = 583248;
    }
    int v7 = sub_1CB84B588(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + v6);
    uint64_t v9 = v8;
    uint64_t v28 = 0;
    uint64_t v29 = v5;
    LODWORD(v30) = 0;
    int v27 = (void *)10;
    llvm::MachineInstr::addOperand(v8, v7, (const llvm::MachineOperand *)&v27);
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
    {
      int v31 = v33;
      uint64_t v32 = 0x800000000;
      uint64_t v10 = **(void **)(a1 + 32);
      uint64_t v11 = (*(unsigned __int16 *)(v10 + 18) >> 4) & 0x3FF;
      int v27 = &v29;
      uint64_t v28 = 0x800000000;
      llvm::GetReturnInfo(v11, **(void ***)(*(void *)(v10 + 24) + 16), *(void *)(v10 + 112), (uint64_t)&v27, *(unsigned __int8 **)(a1 + 104), *(llvm::DataLayout **)(a1 + 88));
      sub_1CD3C88DC(*(void *)(*(void *)(a1 + 32) + 8), **(void **)a2, 105, (uint64_t)&v27, (uint64_t)&v31);
      if (v27 != &v29) {
        free(v27);
      }
      unsigned int v12 = sub_1CD3C8808((unsigned int *)&v31);
      (*(void (**)(void, void, void, uint64_t, void, uint64_t, uint64_t))(**(void **)(a1 + 272) + 8))(*(void *)(a1 + 272), 0, 4 * v12, 1, 0, 1, 1);
      LODWORD(v27) = 1;
      uint64_t v28 = 0;
      uint64_t v29 = v12;
      llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v27);
      int v13 = *(_DWORD *)(a2 + 20);
      if ((v13 & 0x40000000) != 0) {
        int v14 = *(unsigned __int8 ***)(a2 - 8);
      }
      else {
        int v14 = (unsigned __int8 **)(a2 - 32 * (v13 & 0x7FFFFFF));
      }
      int v19 = sub_1CB87DFFC((uint64_t *)a1, *v14);
      uint64_t v20 = v31;
      if (v32)
      {
        int v21 = v19;
        char v22 = (_DWORD *)v31 + 3 * v32;
        do
        {
          int v23 = *v20 + v21;
          int v24 = sub_1CD3C8EB4(*(void *)(*(void *)(a1 + 32) + 640), (uint64_t)v9, (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 912, v20[1]);
          uint64_t v28 = 0;
          LODWORD(v27) = 0;
          HIDWORD(v27) = v23;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v27);
          int v26 = v20[1];
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          LODWORD(v27) = 0x2000000;
          HIDWORD(v27) = v26;
          llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v27);
          v20 += 3;
        }
        while (v20 != v22);
        uint64_t v20 = v31;
      }
      if (v20 != (_DWORD *)v33) {
        free(v20);
      }
    }
    else
    {
      LODWORD(v27) = 1;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v27);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(v15 + 640);
    unsigned int v17 = *(unint64_t **)(v15 + 648);
    uint64_t v18 = *(void *)(*(void *)(a1 + 96) + 8) + 582960;
    sub_1CB84B588(v16, v17, (unsigned __int8 **)(a1 + 72), v18);
  }
}

void sub_1CD3CD174(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (((1 << ((*(unsigned __int16 *)(*(void *)v2 + 18) >> 4) - 100)) & 0xDB) != 0)
  {
    sub_1CB84B588(*(void *)(v2 + 640), *(unint64_t **)(v2 + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 582960);
  }
  else if (((*(unsigned __int16 *)(*(void *)v2 + 18) >> 4) & 0x3FF) == 0x66)
  {
    sub_1CB84B588(*(void *)(v2 + 640), *(unint64_t **)(v2 + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 644352);
  }
  else
  {
    sub_1CD3CCDB0(a1, a2);
  }
}

void sub_1CD3CD1EC()
{
}

uint64_t sub_1CD3CD240(uint64_t a1, llvm::Function *this, int a3)
{
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v5 = (llvm::EVT ***)((char *)this + 88);
    uint64_t v6 = (llvm::EVT **)*((void *)this + 11);
LABEL_3:
    int v7 = v6;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v5 = (llvm::EVT ***)((char *)this + 88);
  uint64_t v6 = (llvm::EVT **)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_3;
  }
  llvm::Function::BuildLazyArguments(this);
  int v7 = (llvm::EVT **)*((void *)this + 11);
LABEL_4:
  uint64_t v8 = &v7[5 * *((void *)this + 12)];
  if (v6 == v8)
  {
LABEL_10:
    if (a3 == 771) {
      int v13 = 1539;
    }
    else {
      int v13 = 1027;
    }
    int v34 = v13;
    if (a3 == 771) {
      int v14 = 1795;
    }
    else {
      int v14 = 1283;
    }
    if (*((_WORD *)this + 9))
    {
      llvm::Function::BuildLazyArguments(this);
      uint64_t v15 = (llvm::EVT **)*((void *)this + 11);
      if (*((_WORD *)this + 9))
      {
        llvm::Function::BuildLazyArguments(this);
        uint64_t v16 = (llvm::EVT **)*((void *)this + 11);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v15 = *v5;
    }
    uint64_t v16 = v15;
LABEL_19:
    unsigned int v17 = &v16[5 * *((void *)this + 12)];
    if (v15 == v17)
    {
      unsigned int v18 = 0;
    }
    else
    {
      unsigned int v18 = 0;
      unsigned int v19 = -1;
      do
      {
        unsigned __int8 v20 = sub_1CB87DC14(*(void *)(a1 + 104), *(void *)(a1 + 88), *v15, 0);
        uint64_t v21 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 104) + 424))(*(void *)(a1 + 104), v20, 0);
        if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 112) + 264)
                        + 24
                        * (*(unsigned __int16 *)(*(void *)v21 + 24)
                         + *(_DWORD *)(*(void *)(a1 + 112) + 272)
                         * ((*(void *)(*(void *)(a1 + 112) + 248)
                                         - *(void *)(*(void *)(a1 + 112) + 240)) >> 3))
                        + 4) & 0xFFFFFFF8) == 0x20)
        {
          unsigned int v22 = a3 + ((v18 + 1) >> 1);
          if (v18) {
            unsigned int v19 = v18;
          }
          v18 += (v18 & 1) + 2;
        }
        else
        {
          int v23 = v34;
          if (v18) {
            int v24 = v34;
          }
          else {
            int v24 = v14;
          }
          unsigned int v22 = v24 + (v18 >> 1);
          if ((v19 & 1) == 0) {
            int v23 = v14;
          }
          unsigned int v25 = v23 + (v19 >> 1);
          BOOL v26 = v19 == -1;
          if (v19 == -1) {
            ++v18;
          }
          unsigned int v19 = -1;
          if (!v26) {
            unsigned int v22 = v25;
          }
        }
        int v27 = llvm::MachineFunction::addLiveIn(*(void *)(*(void *)(a1 + 32) + 8), v22, v21);
        int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), v21, (unsigned __int8 *)&unk_1CFC22BC5, 0);
        uint64_t v29 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 912, VirtualRegister);
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        v36[0] = 0x4000000;
        v36[1] = v27;
        llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)v36);
        sub_1CD78997C(a1, (uint64_t)v15, VirtualRegister, 1);
        v15 += 5;
      }
      while (v15 != v17);
    }
    if (a3 == 771)
    {
      uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v32 = *(void *)(v31 + 48);
      if (!v32)
      {
        uint64_t v32 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v31 + 8) + 216))(*(void *)(v31 + 8), v31 + 128, v31);
        *(void *)(v31 + 48) = v32;
      }
      *(_DWORD *)(v32 + 16) = (((v18 + 1) >> 1) + 7) & 0xFFFFFFF8;
    }
    return 1;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(a1 + 104);
    unsigned __int8 v10 = sub_1CB87DC14(v9, *(void *)(a1 + 88), *v6, 0);
    if (!v10) {
      return 0;
    }
    if (!*(void *)(v9 + 8 * v10 + 96)) {
      return 0;
    }
    uint64_t v11 = sub_1CB87DC14(*(void *)(a1 + 104), *(void *)(a1 + 88), *v6, 0);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 112);
    if ((((*(_DWORD *)(*(void *)(v12 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 104) + 424))(*(void *)(a1 + 104), v11, 0)+ 24)+ *(_DWORD *)(v12 + 272) * ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3))) >> 3)- 2) & 0xFFFFFFFD) != 0)return 0;
    v6 += 5;
    if (v6 == v8) {
      goto LABEL_10;
    }
  }
}

uint64_t sub_1CD3CD628(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (!v1[48]) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int16 **)v1;
  if (*(_DWORD *)(*(void *)(*(void *)v1 + 24) + 8) > 0xFFu) {
    return 0;
  }
  unsigned int v4 = ((v2[9] >> 4) & 0x3FF) - 100;
  if (v4 > 7) {
    return 0;
  }
  int v5 = 1 << v4;
  if ((v5 & 0xA3) != 0) {
    return 1;
  }
  if ((v5 & 0x18) != 0) {
    int v6 = 3;
  }
  else {
    int v6 = 771;
  }
  return sub_1CD3CD240(a1, (llvm::Function *)v2, v6);
}

void *sub_1CD3CD698(void *a1)
{
  *a1 = &unk_1F25E9C40;
  uint64_t v2 = (void *)a1[21];
  if (v2 != (void *)a1[20]) {
    free(v2);
  }

  return sub_1CD78BD10(a1);
}

void sub_1CD3CD6FC(void *a1)
{
  *a1 = &unk_1F25E9C40;
  uint64_t v2 = (void *)a1[21];
  if (v2 != (void *)a1[20]) {
    free(v2);
  }
  sub_1CD78BD10(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3CD774()
{
  return 0;
}

uint64_t sub_1CD3CD77C()
{
  return 0;
}

uint64_t sub_1CD3CD784(uint64_t a1, const llvm::Value *a2)
{
  int v5 = a2;
  if (*(unsigned char *)(*(void *)a2 + 8) == 12) {
    return 0;
  }
  unsigned int v4 = sub_1CD3CDD24((uint64_t *)(a1 + 80), &v5);
  uint64_t result = sub_1CD78C35C(a1, v5);
  *((_DWORD *)v4 + 2) = result;
  return result;
}

uint64_t sub_1CD3CD7E8(uint64_t a1, llvm::Constant *this, unsigned __int8 a3)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = this;
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  if (!this || v6 != 16)
  {
    if (v6 == 59)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, llvm::Constant *))(*(void *)a1 + 112))(a1, this);
    }
    else
    {
      if (v6 != 19)
      {
        if (this && v6 == 17)
        {
          if (llvm::Constant::isNullValue(this)) {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, llvm::Constant *))(*(void *)a1 + 120))(a1, this);
          }
          else {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, llvm::Constant *))(*(void *)a1 + 96))(a1, a3, a3, 12, this);
          }
          uint64_t v10 = v11;
          if (v11) {
            goto LABEL_10;
          }
          uint64_t v21 = *(void *)(a1 + 104);
          uint64_t DataLayout = llvm::MachineFunction::getDataLayout(*(llvm::MachineFunction **)(a1 + 40));
          v36[0] = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 32))(v21, DataLayout, 0);
          uint64_t v37 = 0;
          if (v36[0]) {
            uint64_t ExtendedSizeInBits = sub_1CB87E200(v36);
          }
          else {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v36);
          }
          uint64_t v25 = ExtendedSizeInBits;
          if (v24 == 1) {
          char v35 = 0;
          }
          sub_1CB87E144((uint64_t)this + 24, v39, 2, v25, 1, 0, &v35);
          uint64_t v10 = 0;
          if (v35)
          {
            llvm::APInt::APInt((uint64_t)&v33, v25, v39);
            int v27 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)this, (llvm::LLVMContext *)&v33, v26);
            uint64_t v28 = sub_1CD789230((uint64_t *)a1, (uint64_t)v27);
            if (v28) {
              uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v36[0], a3, 202, v28);
            }
            else {
              uint64_t v10 = 0;
            }
            if (v34 >= 0x41 && v33) {
              MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
            }
          }
        }
        else
        {
          int v12 = v6 - 28;
          BOOL v14 = v6 < 0x1C && v6 != 5;
          if (this && !v14)
          {
            if (v6 <= 0x1B) {
              int v12 = *((unsigned __int16 *)this + 9);
            }
            if ((sub_1CCF68718((uint64_t *)a1, (uint64_t)this, v12) & 1) == 0
              && (*((unsigned __int8 *)this + 16) < 0x1Cu
               || !(*(unsigned int (**)(uint64_t, llvm::Constant *))(*(void *)a1 + 24))(a1, this)))
            {
              return 0;
            }
            uint64_t v9 = sub_1CD789364(a1, (uint64_t)this);
            goto LABEL_5;
          }
          if (v6 - 11 > 1)
          {
LABEL_8:
            if (v6 <= 0x14) {
              goto LABEL_9;
            }
            return 0;
          }
          unsigned __int8 v16 = sub_1CB87E160(*(void *)(a1 + 104), **(llvm::LLVMContext ***)this, a3, 0);
          int v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 584))();
          if (!v17)
          {
LABEL_7:
            unsigned int v6 = *((unsigned __int8 *)this + 16);
            goto LABEL_8;
          }
          int v18 = v17;
          LODWORD(v10) = 0;
          do
          {
            uint64_t v19 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 104) + 424))(*(void *)(a1 + 104), v16, 0);
            unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), v19, (unsigned __int8 *)&unk_1CFC22BC5, 0);
            if (v10) {
              uint64_t v10 = v10;
            }
            else {
              uint64_t v10 = VirtualRegister;
            }
            sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 480, VirtualRegister);
            --v18;
          }
          while (v18);
        }
LABEL_6:
        if (v10)
        {
LABEL_10:
          *((_DWORD *)sub_1CD3CDD24((uint64_t *)(a1 + 8), &v38) + 2) = v10;
          *(void *)(a1 + 136) = llvm::MachineRegisterInfo::getVRegDef(*(void *)(a1 + 48), v10);
          return v10;
        }
        goto LABEL_7;
      }
      IntPtrType = (llvm::Constant *)llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 88), **(llvm::LLVMContext ***)this, 0);
      NullValue = llvm::Constant::getNullValue(IntPtrType, v30, v31);
      uint64_t v9 = sub_1CD789230((uint64_t *)a1, (uint64_t)NullValue);
    }
LABEL_5:
    uint64_t v10 = v9;
    goto LABEL_6;
  }
  int v7 = (void *)((char *)this + 24);
  unsigned int v8 = *((_DWORD *)this + 8);
  if (v8 < 0x41)
  {
LABEL_4:
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(*(void *)a1 + 88))(a1, a3, a3, 11, *v7);
    goto LABEL_5;
  }
  if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) <= 0x40)
  {
    int v7 = (void *)*v7;
    goto LABEL_4;
  }
LABEL_9:
  uint64_t v10 = (*(uint64_t (**)(uint64_t, llvm::Constant *))(*(void *)a1 + 104))(a1, this);
  if (v10) {
    goto LABEL_10;
  }
  return v10;
}

void *sub_1CD3CDD24(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CD3C8538(a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD3CDD8C((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CD3CDD8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD3CDE3C(a1, v7);
  uint64_t v9 = 0;
  sub_1CD3C8538((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD3CDE3C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD3CDF08(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD3CDF08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD3C8538((uint64_t *)v5, (void *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD3CDFC0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::makeSmallest(v2, a2);
  }
  else {
    llvm::detail::IEEEFloat::makeSmallest(v2, a2);
  }
}

void sub_1CD3CDFDC()
{
}

uint64_t sub_1CD3CDFF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3CDFF8(uint64_t a1, uint64_t a2)
{
  return sub_1CD789230(*(uint64_t **)(a1 + 56), a2);
}

uint64_t sub_1CD3CE000(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 352))(*(void *)(a1 + 8))) {
    return a2;
  }
  uint64_t v5 = *(void *)(a1 + 56);

  return sub_1CD3CE294(v5, a2);
}

uint64_t sub_1CD3CE080(uint64_t a1, int a2)
{
  return sub_1CD3CE3D4(*(void *)(a1 + 56), a2);
}

uint64_t sub_1CD3CE088(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (*(unsigned char *)(*(void *)(v4 + 256) + 280)) {
    return 0;
  }
  int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(v4 + 48), (uint64_t)&off_1E66A4F00, "", 0);
  *a4 = VirtualRegister;
  uint64_t v11 = *(uint64_t **)(a1 + 56);
  unsigned int v12 = *(_DWORD *)(a3 + 44);

  return sub_1CB8605EC(v11, a2, v12, VirtualRegister);
}

uint64_t sub_1CD3CE120(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (*(unsigned char *)(*(void *)(v5 + 256) + 280)) {
    return 0;
  }
  *a4 = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(v5 + 48), (uint64_t)&off_1E66A4F00, "", 0);
  int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(*(void *)(a1 + 56) + 48), (uint64_t)&off_1E66A5470, "", 0);
  *a5 = VirtualRegister;
  int v13 = *(uint64_t **)(a1 + 56);
  int v14 = *a4;

  return sub_1CB85F514(v13, a2, a3, v14, VirtualRegister);
}

uint64_t sub_1CD3CE1F0(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1CB87DFFC(*(uint64_t **)(a1 + 56), a2);
}

uint64_t sub_1CD3CE1F8(uint64_t a1, int a2, int a3)
{
  if (a2) {
    return (a3 + 1);
  }
  else {
    return (a3 + 33);
  }
}

uint64_t sub_1CD3CE208(uint64_t a1, int a2)
{
  return sub_1CD3CAE48(*(void *)(a1 + 56), a2, 1);
}

llvm::MachineFunction **sub_1CD3CE214(uint64_t a1, llvm::MachineFunction **a2)
{
  return sub_1CB84B704(a2);
}

_UNKNOWN ***sub_1CD3CE21C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) + 0xFFFFFFFF;
  if (a2 >= 0x20) {
    uint64_t v2 = (a2 >> 5) + 1;
  }
  if (a2 != 8 && a2 != 16)
  {
    if (a2 == 48) {
      return &off_1E66A4690;
    }
    if ((a2 & 0x1F) != 0) {
      return 0;
    }
  }
  if (v2 > 0x11uLL) {
    return 0;
  }
  if (v2 == 1) {
    return &off_1E66A41C8;
  }
  return off_1E66A3B08[v2];
}

uint64_t sub_1CD3CE294(uint64_t a1, int a2)
{
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A43C8, "", 0);
  if (VirtualRegister)
  {
    uint64_t v5 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 594192, VirtualRegister);
    int v7 = v6;
    v9[0] = v5;
    v9[1] = v6;
    v10[0] = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    v10[0] = 0;
    v10[1] = a2;
    uint64_t v13 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0x100000010;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    sub_1CB84B704(v9);
  }
  return VirtualRegister;
}

uint64_t sub_1CD3CE3D4(uint64_t a1, int a2)
{
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(a1 + 48), (uint64_t)&off_1E66A43C8, "", 0);
  if (VirtualRegister)
  {
    uint64_t v5 = 136560;
    if (!*(unsigned char *)(*(void *)(a1 + 256) + 281)) {
      uint64_t v5 = 132960;
    }
    uint64_t v6 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + v5, VirtualRegister);
    uint64_t v8 = v7;
    v10[0] = v6;
    v10[1] = v7;
    v11[0] = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    llvm::MachineInstr::addOperand(v7, v6, (const llvm::MachineOperand *)v11);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    v11[0] = 0;
    v11[1] = a2;
    uint64_t v14 = 0;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    v11[0] = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    v11[0] = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0x100000000;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    sub_1CB84B704(v10);
  }
  return VirtualRegister;
}

uint64_t sub_1CD3CE4FC(unsigned char *a1, uint64_t a2, char *a3)
{
  if (a1[307])
  {
    unsigned int v3 = 1;
  }
  else if (a1[308])
  {
    unsigned int v3 = 2;
  }
  else if (a1[309])
  {
    unsigned int v3 = 3;
  }
  else
  {
    unsigned int v3 = 0;
  }
  unsigned int v7 = 0;
  BOOL v4 = sub_1CD3CA314((int)a1, a2, a3, &v7);
  unsigned int v5 = v7;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 == -1) {
    return v3;
  }
  else {
    return v5;
  }
}

uint64_t sub_1CD3CE570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1CD78BBDC(a1, a2, a3, 1);
  *(void *)uint64_t v5 = &unk_1F25E9C40;
  *(void *)(v5 + 160) = v5 + 192;
  *(void *)(v5 + 168) = v5 + 192;
  *(void *)(v5 + 176) = 8;
  *(_DWORD *)(v5 + 184) = 0;
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(v5 + 80) + 16))(*(void *)(v5 + 80), **(void **)(a2 + 8));
  uint64_t v7 = ***(void ***)a2;
  *(void *)(a1 + 256) = v6;
  *(void *)(a1 + 264) = v7;
  *(void *)(a1 + 272) = *(void *)(*(void *)(a2 + 8) + 344);
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

void sub_1CD3CE624(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCBE850, 0, 0);
  dword_1EBCBE8D0 = 0;
  qword_1EBCBE8D8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCBE8E0 = 0;
  qword_1EBCBE850 = (uint64_t)&unk_1F2643F00;
  qword_1EBCBE8E8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCBE8F0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCBE908 = (uint64_t)&qword_1EBCBE8F0;
  sub_1CD3CE714(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBE850);
}

__n128 sub_1CD3CE714(_WORD *a1, __n128 *a2, int **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCBE850, "max-agx1-fast-isel", 0x12uLL);
  word_1EBCBE85A = (32 * (*a1 & 3)) | word_1EBCBE85A & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBCBE870 = (__int128)*a2;
  uint64_t v7 = *a3;
  dword_1EBCBE8D0 = **a3;
  byte_1EBCBE8E4 = 1;
  dword_1EBCBE8E0 = *v7;
  return result;
}

BOOL sub_1CD3CE79C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD3CE7CC()
{
}

void *sub_1CD3CE7E0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25EA168;
  return result;
}

void sub_1CD3CE818(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25EA168;
}

void *sub_1CD3CE844(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB883B0C((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CB883BA0(a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD3CE8A4(uint64_t *a1, uint64_t *a2, _DWORD *a3, llvm::Type **a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14 = (llvm::Type **)*a2;
  unsigned int v15 = *(unsigned __int8 *)(*a2 + 16);
  if (v15 <= 0x1B) {
    unsigned __int8 v16 = 0;
  }
  else {
    unsigned __int8 v16 = (llvm::Type **)*a2;
  }
  int v17 = *v14;
  BOOL v18 = v15 == 16;
  if (v15 == 16) {
    uint64_t v19 = *a2;
  }
  else {
    uint64_t v19 = 0;
  }
  BOOL v20 = !v18 || a6 == 0;
  if (!v20 && *(_DWORD *)(*(void *)v19 + 8) == 16397)
  {
    uint64_t v21 = *(unsigned int *)(v19 + 32);
    if (v21 > 0x40)
    {
      unint64_t v25 = **(void **)(v19 + 24);
      if (v25 < 0xFFFFFFFF80000000) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v19 + 24);
      uint64_t v23 = -v21;
      uint64_t v24 = v22 << -(char)v21;
      if ((v24 & 0x8000000000000000) == 0) {
        goto LABEL_18;
      }
      unint64_t v25 = v24 >> v23;
      if ((unint64_t)(v24 >> v23) <= 0xFFFFFFFF7FFFFFFFLL) {
        goto LABEL_18;
      }
    }
    uint64_t v14 = (llvm::Type **)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)v17 + 1960), v25, 0);
    *a2 = (uint64_t)v14;
  }
LABEL_18:
  if (a7)
  {
    int v47 = 0;
    if (sub_1CB8841A8((uint64_t)v14, a5, &v47))
    {
      *a3 |= v47 << 6;
      int v26 = *((_DWORD *)v16 + 5);
      if ((v26 & 0x40000000) != 0) {
        int v27 = (uint64_t *)*(v16 - 1);
      }
      else {
        int v27 = (uint64_t *)&v16[-4 * (v26 & 0x7FFFFFF)];
      }
      uint64_t v14 = (llvm::Type **)*v27;
      *a2 = *v27;
      if (*((unsigned __int8 *)v14 + 16) <= 0x1Bu) {
        unsigned __int8 v16 = 0;
      }
      else {
        unsigned __int8 v16 = v14;
      }
    }
  }
  if (v16
    && v16[5] == (llvm::Type *)a5
    && ((BOOL v28 = *((unsigned char *)v16 + 16) == 67) || (*((unsigned char *)v16 + 16) == 68 ? (v36 = a6 == 0) : (v36 = 1), !v36)))
  {
    int v37 = *((_DWORD *)v16 + 5);
    if ((v37 & 0x40000000) != 0) {
      uint64_t v38 = (uint64_t *)*(v16 - 1);
    }
    else {
      uint64_t v38 = (uint64_t *)&v16[-4 * (v37 & 0x7FFFFFF)];
    }
    uint64_t v14 = (llvm::Type **)*v38;
    *a2 = *v38;
  }
  else
  {
    BOOL v28 = 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *v14;
  *a4 = *v14;
  LODWORD(v30) = *((_DWORD *)v30 + 2);
  int v31 = v30;
  unsigned int v32 = v30 >> 8;
  BOOL v33 = v30 >> 8 == 64;
  if (v31 == 13)
  {
    uint16x4_t v34 = (uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v32), (int32x4_t)xmmword_1CD91C120));
    v34.i16[0] = vmaxv_u16(v34);
    if ((v34.i32[0] | v33))
    {
      uint64_t v29 = sub_1CD789230(a1, *a2);
      if (v29)
      {
        if ((*((_DWORD *)v17 + 2) & 0xFE) == 0x12) {
          int v17 = (llvm::Type *)**((void **)v17 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v17);
        int v40 = *a4;
        unsigned int v41 = *((_DWORD *)*a4 + 2);
        if ((v41 & 0xFE) == 0x12) {
          int v40 = (llvm::Type *)**((void **)v40 + 2);
        }
        unsigned int v42 = llvm::Type::getPrimitiveSizeInBits(v40);
        unsigned int v43 = v41 >> 8;
        if (v41 == 13 && v43 == 1)
        {
          char v44 = PrimitiveSizeInBits <= v42 || v28;
          if (v44) {
            goto LABEL_52;
          }
          uint64_t v46 = sub_1CD3CC218((uint64_t)a1, v29, 0x10u);
        }
        else
        {
          char v45 = PrimitiveSizeInBits <= v42 || v28;
          if (v41 != 13 || v43 != 8)
          {
            if (v45) {
              return v29;
            }
            goto LABEL_62;
          }
          if (v45)
          {
LABEL_52:
            *a4 = (llvm::Type *)(***(void ***)*a2 + 1936);
            return v29;
          }
          uint64_t v46 = sub_1CB86665C(a1, v29, 16);
        }
        uint64_t v29 = v46;
        *a4 = (llvm::Type *)(***(void ***)*a2 + 1936);
LABEL_62:
        *a3 |= 8u;
      }
    }
  }
  return v29;
}

uint64_t sub_1CD3CEBB0(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned char *a4, uint64_t a5, char a6)
{
  uint64_t v11 = result;
  LOBYTE(result) = 0;
  do
  {
    if (a6)
    {
      uint64_t v12 = *a3;
      if (*(unsigned char *)(v11 + 280) && *(unsigned char *)(v12 + 16) == 73 && (sub_1CB8840A0(v11, *a3, result & 1) & 1) != 0)
      {
        LOBYTE(result) = 0;
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v12 = *a3;
    }
    __n128 result = 1;
    if (*(unsigned char *)(v12 + 16) != 74) {
      return result;
    }
LABEL_9:
    *a4 = result;
    int v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(uint64_t **)(v12 - 8);
    }
    else {
      uint64_t v14 = (uint64_t *)(v12 - 32 * (v13 & 0x7FFFFFF));
    }
    uint64_t v15 = *v14;
    *a2 = v15;
    if (*(unsigned __int8 *)(v15 + 16) <= 0x1Bu) {
      uint64_t v15 = 0;
    }
    *a3 = v15;
  }
  while (v15 && *(void *)(v15 + 40) == a5);
  return 0;
}

uint64_t sub_1CD3CEC94(uint64_t *a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  }
  uint64_t v8 = *v7;
  unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8) {
    BOOL v10 = v9 >= 0x1C;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10 || *(void *)(v8 + 40) == *(void *)(a2 + 40))
  {
    if (v9 <= 0x1B) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v8;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if ((v6 & 0x40000000) != 0) {
    uint64_t v12 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v12 = a2 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v13 = *(void *)(v12 + 32);
  unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
  if (v13) {
    BOOL v15 = v14 >= 0x1C;
  }
  else {
    BOOL v15 = 0;
  }
  if (!v15 || *(void *)(v13 + 40) == *(void *)(a2 + 40))
  {
    if (v14 <= 0x1B) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v13;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v17 = *(unsigned __int8 *)(a2 + 16);
  if (v11
    && *(unsigned char *)(v11 + 16) == 45
    && ((uint64_t v18 = *(void *)(v11 + 8)) != 0 && !*(void *)(v18 + 8) || (sub_1CB885AD8((_DWORD *)v11) & 1) == 0))
  {
    int v19 = *(_DWORD *)(v11 + 20);
    uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(v11 - 8) : v11 - 32 * (v19 & 0x7FFFFFF);
    uint64_t v21 = *(const llvm::APInt **)v20;
    uint64_t v22 = *(void *)(v20 + 32);
    uint64_t v23 = (v6 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v6 & 0x7FFFFFF);
    if (sub_1CB885B6C(a1, (uint64_t *)a2, v21, v22, *(void *)(v23 + 32), a3)) {
      return 1;
    }
  }
  if (v16
    && *(unsigned char *)(v16 + 16) == 45
    && v17 != 43
    && ((uint64_t v24 = *(void *)(v16 + 8)) != 0 && !*(void *)(v24 + 8) || (sub_1CB885AD8((_DWORD *)v16) & 1) == 0)
    && ((int v25 = *(_DWORD *)(v16 + 20), (v25 & 0x40000000) != 0)
      ? (uint64_t v26 = *(void *)(v16 - 8))
      : (uint64_t v26 = v16 - 32 * (v25 & 0x7FFFFFF)),
        (int v27 = *(const llvm::APInt **)v26,
         uint64_t v28 = *(void *)(v26 + 32),
         int v29 = *(_DWORD *)(a2 + 20),
         (v29 & 0x40000000) != 0)
      ? (uint64_t v30 = *(uint64_t **)(a2 - 8))
      : (uint64_t v30 = (uint64_t *)(a2 - 32 * (v29 & 0x7FFFFFF))),
        (sub_1CB885B6C(a1, (uint64_t *)a2, v27, v28, *v30, a3) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CD3CEE74(uint64_t a1, uint64_t *a2, unsigned char *a3, int a4, int a5, int a6)
{
  int v6 = *(unsigned __int8 *)(*a2 + 8);
  if ((v6 | 2) != 2) {
    return 0;
  }
  BOOL v25 = v6 == 0;
  uint64_t v24 = a3;
  unsigned int v23 = 0;
  char v11 = 1;
  if (a5 == 423 && a6 != 1) {
    char v11 = *(unsigned char *)(*(void *)(a1 + 256) + 294) == 0;
  }
  int v12 = sub_1CB88467C(a1, (uint64_t *)&v24, (int *)&v23, &v25, 0, a2[5], 6, v11);
  if (!v12) {
    return 0;
  }
  int v13 = v12;
  if (a5 > 423)
  {
    if (a5 == 424)
    {
      uint64_t v14 = 2;
      goto LABEL_11;
    }
    if (a5 == 426)
    {
      uint64_t v14 = 5;
      goto LABEL_11;
    }
    if (*(unsigned char *)(*(void *)(a1 + 256) + 280))
    {
      uint64_t v14 = 4;
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v14 = 1;
  uint64_t v15 = 3;
  if (a5 == 234) {
    uint64_t v15 = 0;
  }
  if (a5 != 231) {
    uint64_t v14 = v15;
  }
LABEL_11:
  uint64_t v16 = sub_1CB85AA4C(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 48 * word_1CD91D004[4 * v14 + 2 * (a6 == 1) + v25], a4);
  uint64_t v18 = v17;
  uint64_t v21 = v16;
  uint64_t v22 = v17;
  v26[0] = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)v26);
  if (!v24)
  {
LABEL_14:
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v26[0] = 0;
    v26[1] = v13;
    uint64_t v29 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)v26);
    goto LABEL_15;
  }
  if ((sub_1CB8843D8(a1, v24, 0, &v21, 0) & 1) == 0)
  {
    uint64_t v16 = v21;
    uint64_t v18 = v22;
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v19 = 1;
  v26[0] = 1;
  uint64_t v27 = 0;
  uint64_t v28 = v23;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)v26);
  sub_1CB84B704(&v21);
  return v19;
}

uint64_t sub_1CD3CF060(void *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  if (*(unsigned char *)(*a2 + 8)) {
    return 0;
  }
  int v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0) {
    int v12 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v12 = &a2[-4 * (v11 & 0x7FFFFFF)];
  }
  uint64_t v13 = *v12;
  unsigned int v14 = *(unsigned __int8 *)(*v12 + 16);
  if (v13) {
    BOOL v15 = v14 >= 0x1C;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15 && *(void *)(v13 + 40) != a2[5]) {
    uint64_t v13 = 0;
  }
  if ((v11 & 0x40000000) != 0) {
    uint64_t v16 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v16 = &a2[-4 * (v11 & 0x7FFFFFF)];
  }
  uint64_t v17 = v16[4];
  if (v17) {
    BOOL v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18 && *(void *)(v17 + 40) != a2[5]) {
    uint64_t v17 = 0;
  }
  if (v13)
  {
    if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v13;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v17)
  {
    if (*(unsigned __int8 *)(v17 + 16) <= 0x1Bu) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v19)
  {
    if (*(unsigned char *)(v19 + 16) == 42)
    {
      uint64_t v21 = *(void *)(v19 + 8);
      if (v21)
      {
        if (v17 && !*(void *)(v21 + 8) && *(unsigned char *)(v17 + 16) == 17 && sub_1CB844168(v17, 0.5))
        {
          if (a3)
          {
            int v22 = *(_DWORD *)(v19 + 20);
            if ((v22 & 0x40000000) != 0) {
              unsigned int v23 = *(uint64_t **)(v19 - 8);
            }
            else {
              unsigned int v23 = (uint64_t *)(v19 - 32 * (v22 & 0x7FFFFFF));
            }
            return sub_1CB888D08(a1, a2, *v23, v17, v23[4], 0, a3, 443, 0, a4, a5);
          }
          return 1;
        }
      }
    }
  }
  if (!v20) {
    return 0;
  }
  if (*(unsigned char *)(v20 + 16) != 42) {
    return 0;
  }
  uint64_t v24 = *(void *)(v20 + 8);
  if (!v24) {
    return 0;
  }
  uint64_t result = 0;
  if (!v13 || *(void *)(v24 + 8)) {
    return result;
  }
  if (*(unsigned char *)(v13 + 16) != 17) {
    return 0;
  }
  uint64_t result = sub_1CB844168(v13, 0.5);
  if (result)
  {
    if (a3)
    {
      int v25 = *(_DWORD *)(v20 + 20);
      if ((v25 & 0x40000000) != 0) {
        unsigned int v23 = *(uint64_t **)(v20 - 8);
      }
      else {
        unsigned int v23 = (uint64_t *)(v20 - 32 * (v25 & 0x7FFFFFF));
      }
      uint64_t v17 = v13;
      return sub_1CB888D08(a1, a2, *v23, v17, v23[4], 0, a3, 443, 0, a4, a5);
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CD3CF270(void *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  v50[3] = *(void **)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*a2 + 8)) {
    return 0;
  }
  int v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0) {
    uint64_t v13 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v13 = &a2[-4 * (v12 & 0x7FFFFFF)];
  }
  uint64_t v14 = *v13;
  if (v14) {
    BOOL v15 = *(unsigned __int8 *)(v14 + 16) >= 0x1Cu;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15 && *(void *)(v14 + 40) != a2[5]) {
    uint64_t v14 = 0;
  }
  if ((v12 & 0x40000000) != 0) {
    uint64_t v16 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v16 = &a2[-4 * (v12 & 0x7FFFFFF)];
  }
  uint64_t v17 = v16[4];
  if (v17) {
    BOOL v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18 && *(void *)(v17 + 40) != a2[5]) {
    uint64_t v17 = 0;
  }
  if (v14) {
    uint64_t v19 = *(unsigned __int8 *)(v14 + 16) <= 0x1Bu ? 0 : v14;
  }
  else {
    uint64_t v19 = 0;
  }
  if (!v17) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v20 = *(unsigned __int8 *)(v17 + 16);
  if (v20 <= 0x1B) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v17;
  }
  if (!v19 || v20 < 0x1C) {
    return v5;
  }
  if (*(unsigned char *)(v19 + 16) != 46 || *(unsigned char *)(v21 + 16) != 46) {
    return 0;
  }
  char v22 = 0;
  uint64_t v23 = 0;
  int v24 = *(_DWORD *)(v19 + 20);
  uint64_t v25 = v19 - 32 * (v24 & 0x7FFFFFF);
  while (1)
  {
    char v26 = v22;
    uint64_t v27 = v19 - 32 * (v24 & 0x7FFFFFF);
    if ((v24 & 0x40000000) != 0) {
      uint64_t v27 = *(void *)(v19 - 8);
    }
    uint64_t v28 = *(void *)(v27 + 32 * v23);
    if (v28 && *(unsigned char *)(v28 + 16) == 17) {
      break;
    }
    char v22 = 1;
    uint64_t v23 = 1;
    if (v26)
    {
      uint64_t v28 = 0;
      uint64_t v30 = 0;
      goto LABEL_49;
    }
  }
  uint64_t v31 = v23 ^ 1;
  if ((v24 & 0x40000000) != 0) {
    uint64_t v25 = *(void *)(v19 - 8);
  }
  uint64_t v30 = *(void *)(v25 + 32 * v31);
LABEL_49:
  char v32 = 0;
  uint64_t v33 = 0;
  int v34 = *(_DWORD *)(v21 + 20);
  uint64_t v35 = v21 - 32 * (v34 & 0x7FFFFFF);
  while (1)
  {
    char v36 = v32;
    uint64_t v37 = v21 - 32 * (v34 & 0x7FFFFFF);
    if ((v34 & 0x40000000) != 0) {
      uint64_t v37 = *(void *)(v21 - 8);
    }
    uint64_t v38 = *(void *)(v37 + 32 * v33);
    if (v38 && *(unsigned char *)(v38 + 16) == 17) {
      break;
    }
    uint64_t v5 = 0;
    char v32 = 1;
    uint64_t v33 = 1;
    if (v36) {
      return v5;
    }
  }
  if ((v34 & 0x40000000) != 0) {
    uint64_t v35 = *(void *)(v21 - 8);
  }
  if (!v28) {
    return 0;
  }
  uint64_t v42 = *(void *)(v35 + 32 * (v33 ^ 1));
  uint64_t v43 = v30;
  sub_1CB87DDC4((uint64_t)v50, (uint64_t *)(v28 + 32));
  sub_1CB87DDC4((uint64_t)v48, (uint64_t *)(v38 + 32));
  if (v50[0] == &unk_1CFB2E344) {
    int v40 = (char *)v50[1];
  }
  else {
    int v40 = v49;
  }
  if ((v40[28] & 8) != 0
    || ((_UNKNOWN *)v48[0] != &unk_1CFB2E344 ? (unsigned int v41 = v47) : (unsigned int v41 = (char *)v48[1]),
        (v41[28] & 8) != 0 || sub_1CB88A708((uint64_t)v49, (uint64_t)v47, 1)))
  {
    uint64_t v5 = 0;
  }
  else
  {
    sub_1CB892E1C((uint64_t)v45, 1.0);
    llvm::APFloat::convert((uint64_t)v45, v50[0], 1, &v44);
    if (sub_1CB88A72C((uint64_t)v49, (uint64_t)v45) == 1)
    {
      if (a3) {
        uint64_t v5 = sub_1CB888D08(a1, a2, v43, v38, v42, 0, a3, 443, 0, a4, a5);
      }
      else {
        uint64_t v5 = 1;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_1CB87DEE4(v46);
  }
  sub_1CB87DEE4(v48);
  sub_1CB87DEE4((uint64_t *)v50);
  return v5;
}

uint64_t sub_1CD3CF5B0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 17) {
    return 1;
  }
  if (v2 < 0x1C) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4 || *(void *)(v4 + 8)) {
    return 0;
  }
  return sub_1CB8843D8(a1, (unsigned char *)a2, 1, 0, 0);
}

uint64_t sub_1CD3CF5F4(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned char *a7, unsigned char *a8, unsigned char *a9, char a10)
{
  *a8 = 0;
  *a7 = 1;
  if (*(unsigned char *)(a1 + 280))
  {
    *a7 = 0;
    uint64_t result = *a2;
    if ((result - 8) <= 7)
    {
      *a2 = result - 8;
      uint64_t result = (result - 8);
    }
  }
  else
  {
    uint64_t result = *a2;
    if ((result - 9) <= 5)
    {
      uint64_t result = llvm::CmpInst::getInversePredicate(result);
      *a2 = result;
      if (a10)
      {
        *a8 ^= 1u;
      }
      else
      {
        uint64_t v23 = *a5;
        *a5 = *a6;
        *a6 = v23;
      }
    }
  }
  int v19 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 281);
  if (v19) {
    BOOL v20 = *a9 == 0;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20) {
    goto LABEL_24;
  }
  if (*a7)
  {
    sub_1CB88C5D0(a2, a3, a4, *a5, *a6, 0);
    uint64_t result = *a2;
  }
  if (result > 6 || ((1 << result) & 0x68) == 0) {
    goto LABEL_24;
  }
  if (v19) {
    BOOL v21 = *a7 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    *a9 = 0;
LABEL_24:
    *a7 = 0;
    return result;
  }
  switch(result)
  {
    case 3:
      int v22 = 4;
      goto LABEL_28;
    case 6:
      int v22 = 1;
      goto LABEL_28;
    case 5:
      int v22 = 2;
LABEL_28:
      *a2 = v22;
      break;
  }
  uint64_t v24 = *a5;
  *a5 = *a6;
  *a6 = v24;
  *a8 ^= 1u;
  return result;
}

uint64_t sub_1CD3CF78C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = a2;
    while (!*(void *)(v2 + 8)
         && *(unsigned __int8 *)(v3 + 16) >= 0x1Cu
         && (sub_1CB8843D8(a1, (unsigned char *)v3, 0, 0, 0) & 1) == 0)
    {
      int v5 = *(unsigned __int8 *)(v3 + 16);
      if (v5 != 77)
      {
        if ((v5 - 66) > 0x19 || ((1 << (v5 - 66)) & 0x3800001) == 0)
        {
          if (v5 == 85) {
            return 1;
          }
          else {
            return 2;
          }
        }
        return 0;
      }
      uint64_t v3 = *(void *)(v3 - 32);
      uint64_t v2 = *(void *)(v3 + 8);
      if (!v2) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1CD3CF834(char a1, int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7)
{
  int InversePredicate = llvm::CmpInst::getInversePredicate(*a2);
  int v16 = InversePredicate;
  switch(InversePredicate)
  {
    case 8:
      int InversePredicate = 0;
      int v16 = 0;
      break;
    case 9:
      int InversePredicate = 1;
      goto LABEL_10;
    case 10:
      int InversePredicate = 2;
      goto LABEL_10;
    case 11:
      int InversePredicate = 3;
      goto LABEL_10;
    case 12:
      int InversePredicate = 4;
      goto LABEL_10;
    case 13:
      int InversePredicate = 5;
      goto LABEL_10;
    case 14:
      int InversePredicate = 6;
      goto LABEL_10;
    case 15:
      int InversePredicate = 7;
LABEL_10:
      int v16 = InversePredicate;
      break;
    default:
      break;
  }
  if (a7)
  {
    int InversePredicate = llvm::CmpInst::getSwappedPredicate(InversePredicate);
    int v16 = InversePredicate;
  }
  if (a1) {
    goto LABEL_14;
  }
  uint64_t result = sub_1CB88C5D0(&v16, a3, a4, *a5, *a6, a7);
  if (result)
  {
    int InversePredicate = v16;
LABEL_14:
    *a2 = InversePredicate;
    return 1;
  }
  return result;
}

uint64_t sub_1CD3CF94C(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, int a6)
{
  if (a2[16] >= 0x15u) {
    int v11 = sub_1CB8843D8(a1, a2, a6, 0, 0);
  }
  else {
    int v11 = 1;
  }
  if (a3[16] >= 0x15u) {
    int v12 = sub_1CB8843D8(a1, a3, a6, 0, 0);
  }
  else {
    int v12 = 1;
  }
  if (a4[16] >= 0x15u) {
    int v13 = sub_1CB8843D8(a1, a4, a6, 0, 0);
  }
  else {
    int v13 = 1;
  }
  if (a5[16] >= 0x15u) {
    int v14 = sub_1CB8843D8(a1, a5, a6, 0, 0);
  }
  else {
    int v14 = 1;
  }
  return (v12 + v11 + v13 + v14);
}

uint64_t **sub_1CD3CFA50(uint64_t **result, unint64_t *a2)
{
  uint64_t v3 = result;
  if (result[8])
  {
    uint64_t v8 = result + 6;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)result + 2);
    unint64_t v5 = *a2;
    if (!v4)
    {
LABEL_7:
      if (v4 >= *((_DWORD *)result + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      (*result)[v4] = v5;
      ++*((_DWORD *)result + 2);
      return result;
    }
    uint64_t v6 = 8 * v4;
    uint64_t v7 = *result;
    while (*v7 != v5)
    {
      ++v7;
      v6 -= 8;
      if (!v6) {
        goto LABEL_6;
      }
    }
    if (v6) {
      return result;
    }
LABEL_6:
    if (v4 <= 3) {
      goto LABEL_7;
    }
    do
    {
      unsigned int v9 = (unint64_t *)&(*v3)[v4 - 1];
      sub_1CD3CFB98(v3 + 6, v9, (uint64_t **)v9);
      LODWORD(v4) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v4;
    }
    while (v4);
    uint64_t v8 = v3 + 6;
  }

  return sub_1CD3CFB98(v8, a2, (uint64_t **)a2);
}

BOOL sub_1CD3CFB60(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::isSmallest(v1);
  }
  else {
    return llvm::detail::IEEEFloat::isSmallest(v1);
  }
}

BOOL sub_1CD3CFB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::next(v2, a2);
  }
  return llvm::detail::IEEEFloat::next(v2, a2);
}

uint64_t **sub_1CD3CFB98(uint64_t **a1, unint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)v8;
    uint64_t v8 = (uint64_t **)operator new(0x28uLL);
    uint64_t v8[4] = *a3;
    *uint64_t v8 = 0;
    v8[1] = 0;
    unint64_t v8[2] = v10;
    llvm::MachineFunction *v6 = (uint64_t *)v8;
    int v11 = (uint64_t *)**a1;
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      int v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t (***sub_1CD3CFC7C())()
{
  return off_1EC7DF9B8;
}

uint64_t sub_1CD3CFC88()
{
  return 0;
}

uint64_t sub_1CD3CFC90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1CB892FC4(a2);

  return sub_1CB892E80(a2, v3);
}

uint64_t sub_1CD3CFCD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1CB892FC4(a2) >> 32;

  return sub_1CB892E80(a2, v3);
}

uint64_t sub_1CD3CFD10()
{
  return 1;
}

llvm::MachineFunction **sub_1CD3CFD18(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, uint64_t a4)
{
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)a2 + 48, &v12);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
  uint64_t v8 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v12, *(void *)(a4 + 8) + 48720, a3);
  BOOL v10 = v9;
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  long long v13 = 0u;
  long long v14 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v10;
  uint64_t result = sub_1CB84B704((llvm::MachineFunction **)&v13);
  if (v12) {
    return (llvm::MachineFunction **)llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
  return result;
}

uint64_t sub_1CD3CFE40(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

llvm::MachineFunction **sub_1CD3CFE48(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, llvm::TargetInstrInfo *a4)
{
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)a2 + 48, &v12);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  if (sub_1CB89327C((uint64_t)a2, a4))
  {
    unint64_t FirstTerminator = *(void *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    if (!FirstTerminator || (*(unsigned char *)FirstTerminator & 4) == 0)
    {
      while ((*(_WORD *)(FirstTerminator + 44) & 4) != 0)
        unint64_t FirstTerminator = *(void *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v8 = sub_1CB85AA4C((uint64_t)a2, (unint64_t *)FirstTerminator, &v12, *((void *)a4 + 1) + 48720, a3);
  BOOL v10 = v9;
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  *(void *)&long long v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  long long v13 = 0u;
  long long v14 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v10;
  uint64_t result = sub_1CB84B704((llvm::MachineFunction **)&v13);
  if (v12) {
    return (llvm::MachineFunction **)llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
  return result;
}

uint64_t sub_1CD3CFFAC@<X0>(uint64_t result@<X0>, void *a2@<X1>, llvm::TargetInstrInfo *a3@<X2>, uint64_t a4@<X8>)
{
  if (((a2[12] - a2[11]) & 0x7FFFFFFF8) == 0 || a2 + 6 == (void *)a2[7]) {
    goto LABEL_23;
  }
  uint64_t v7 = result;
  unint64_t v8 = a2[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v8 || (*(unsigned char *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t result = sub_1CB834754(v8);
  if (result)
  {
    while (v8 != a2[7])
    {
      unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v8 || (*(unsigned char *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t result = sub_1CB834754(v8);
      if ((result & 1) == 0) {
        goto LABEL_16;
      }
    }
    goto LABEL_23;
  }
LABEL_16:
  if ((**(_WORD **)(v8 + 16) & 0xFFFE) == 0x182)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    BOOL v11 = 0;
    char v12 = 0;
    char v13 = 1;
    goto LABEL_24;
  }
  uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v8);
  if (!result)
  {
LABEL_23:
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v13 = 0;
    BOOL v11 = 0;
    char v12 = 0;
    goto LABEL_24;
  }
  int v14 = **(unsigned __int16 **)(v8 + 16);
  if (v8 == a2[7]) {
    goto LABEL_39;
  }
  unint64_t v15 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 || (*(unsigned char *)v15 & 4) == 0)
  {
    while ((*(_WORD *)(v15 + 44) & 4) != 0)
      unint64_t v15 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v15);
  if ((result & 1) == 0)
  {
LABEL_39:
    if (v14 == 11576)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 40))(v7, v8);
      uint64_t v10 = 0;
      char v13 = 0;
      char v12 = 0;
      uint64_t v9 = *(void *)(result + 16);
      BOOL v11 = *(void *)(*(void *)(v8 + 32) + 48) != 0;
      goto LABEL_24;
    }
    if (v14 == 11575)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 40))(v7, v8);
      uint64_t v10 = 0;
      char v13 = 0;
      BOOL v11 = 0;
      char v12 = 0;
      uint64_t v9 = *(void *)(result + 16);
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v13 = 0;
    BOOL v11 = 0;
    char v12 = 1;
    goto LABEL_24;
  }
  if (**(_WORD **)(v15 + 16) != 11576 || v14 != 11575) {
    goto LABEL_42;
  }
  uint64_t v17 = *(void *)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 40))(v7, v15) + 16);
  uint64_t v18 = *(void *)(*(void *)(v15 + 32) + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 40))(v7, v8);
  char v13 = 0;
  BOOL v11 = 0;
  char v12 = 0;
  uint64_t v10 = *(void *)(result + 16);
  if (v18) {
    uint64_t v9 = *(void *)(result + 16);
  }
  else {
    uint64_t v9 = v17;
  }
  if (v18) {
    uint64_t v10 = v17;
  }
LABEL_24:
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v10;
  *(unsigned char *)(a4 + 16) = v13;
  *(unsigned char *)(a4 + 17) = v11;
  *(unsigned char *)(a4 + 18) = v12;
  return result;
}

void sub_1CD3D028C(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(*((void *)this + 4) + 40);
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)FirstTerminator, &v21);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 272);
  if (sub_1CB8933AC(v11, v12, a3))
  {
    char v13 = (uint64_t *)(v11 + 16 * (a3 & 0x7FFFFFFF) + 8);
    if (a3 >= 0) {
      char v13 = (uint64_t *)(v12 + 8 * a3);
    }
    uint64_t v14 = *v13;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
        uint64_t v14 = 0;
      }
    }
    llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)(v14 + 8));
    uint64_t v15 = 34656;
    if (a4) {
      uint64_t v15 = 33888;
    }
    int v16 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v21, *(void *)(a5 + 8) + v15);
    uint64_t v18 = v17;
    *((void *)&v22 + 1) = 0;
    long long v23 = 0uLL;
    LODWORD(v22) = 0x1000000;
    DWORD1(v22) = a3;
    llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 1;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
  }
  else
  {
    uint64_t v19 = 34464;
    if (a4) {
      uint64_t v19 = 33696;
    }
    int v16 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v21, *(void *)(a5 + 8) + v19);
    uint64_t v18 = v20;
    *((void *)&v22 + 1) = 0;
    long long v23 = 0uLL;
    LODWORD(v22) = 0x1000000;
    DWORD1(v22) = a3;
    llvm::MachineInstr::addOperand(v20, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    *((void *)&v22 + 1) = 0;
    long long v23 = 0uLL;
    LODWORD(v22) = 0;
    DWORD1(v22) = a3;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 1;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
    LODWORD(v22) = 1;
  }
  *((void *)&v22 + 1) = 0;
  *(void *)&long long v23 = 2;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
  long long v22 = 0u;
  long long v23 = 0u;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v22);
  if (v21) {
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  }
}

void sub_1CD3D04F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 56);
  llvm::MachineBasicBlock::findDebugLoc(a2, v7, &v11);
  unint64_t v8 = sub_1CB84B760(a2, v7, &v11, *(void *)(a4 + 8) + 25248);
  uint64_t v10 = v9;
  *((void *)&v12 + 1) = 0;
  long long v13 = 0uLL;
  LODWORD(v12) = 0x1000000;
  DWORD1(v12) = a3;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  *((void *)&v12 + 1) = 0;
  long long v13 = 0uLL;
  LODWORD(v12) = 0;
  DWORD1(v12) = a3;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = 1;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = 2;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  long long v12 = 0u;
  long long v13 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  if (v11) {
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  }
}

void sub_1CD3D0634(int a1, llvm::MachineBasicBlock *this, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, uint64_t a12)
{
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)FirstTerminator, &v46);
  if ((a7 & 1) != 0 || (a11 & 1) != 0 || a9)
  {
    if (!a7 || (a5 & 1) != 0 || a9) && ((a9 & ~(_BYTE)a5 & 1) != 0 || (a7))
    {
      if (a5) {
        uint64_t v36 = a10;
      }
      else {
        uint64_t v36 = a8;
      }
      uint64_t v44 = v36;
      if (a5) {
        uint64_t v37 = a8;
      }
      else {
        uint64_t v37 = a10;
      }
      uint64_t v45 = v37;
      uint64_t v38 = sub_1CB85AA4C((uint64_t)this, FirstTerminator, &v46, *(void *)(a12 + 8) + 48720, a4);
      int v40 = v39;
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v44;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v44;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      long long v47 = 0u;
      long long v48 = 0u;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 1;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      long long v48 = 0uLL;
      long long v47 = 0x200000000uLL;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v47);
      unsigned int v41 = sub_1CB85AA4C((uint64_t)this, FirstTerminator, &v46, *(void *)(a12 + 8) + 48720, a4);
      uint64_t v43 = v42;
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v45;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v45;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      long long v47 = 0u;
      long long v48 = 0u;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 3;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
      long long v48 = 0uLL;
      long long v47 = 0x200000000uLL;
      llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v47);
    }
    else
    {
      if (a5) {
        uint64_t v28 = a10;
      }
      else {
        uint64_t v28 = a8;
      }
      uint64_t v29 = sub_1CB85AA4C((uint64_t)this, FirstTerminator, &v46, *(void *)(a12 + 8) + 48720, a4);
      uint64_t v31 = v30;
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v28;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = v28;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v47);
      long long v47 = 0u;
      long long v48 = 0u;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v47);
      *(void *)&long long v47 = v29;
      *((void *)&v47 + 1) = v31;
      sub_1CB84B704((llvm::MachineFunction **)&v47);
    }
  }
  uint64_t v20 = *(void *)(a12 + 8);
  if (a6)
  {
    uint64_t v21 = 33696;
    if (a5) {
      uint64_t v21 = 34464;
    }
    long long v22 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v46, v20 + v21);
    uint64_t v24 = v23;
    *((void *)&v47 + 1) = 0;
    long long v48 = 0uLL;
    LODWORD(v47) = 0x1000000;
    DWORD1(v47) = a3;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    *((void *)&v47 + 1) = 0;
    long long v48 = 0uLL;
    LODWORD(v47) = 0;
    DWORD1(v47) = a3;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 1;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 2;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    long long v47 = 0u;
    long long v48 = 0u;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v47);
    uint64_t v25 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v46, *(void *)(a12 + 8) + 32352);
    uint64_t v27 = v26;
    *((void *)&v47 + 1) = 0;
    long long v48 = 0uLL;
    LODWORD(v47) = 0x1000000;
    DWORD1(v47) = a3;
    llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = (a6 + 3);
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 2;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v47);
    long long v47 = 0u;
    long long v48 = 0u;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v47);
    sub_1CB8934B4(this, 0, &v46, a3, a12, 0, -1);
  }
  else
  {
    uint64_t v32 = 31392;
    if (a5) {
      uint64_t v32 = 30624;
    }
    uint64_t v33 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v46, v20 + v32);
    uint64_t v35 = v34;
    *((void *)&v47 + 1) = 0;
    long long v48 = 0uLL;
    LODWORD(v47) = 0x1000000;
    DWORD1(v47) = a3;
    llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
    *((void *)&v47 + 1) = 0;
    long long v48 = 0uLL;
    LODWORD(v47) = 0;
    DWORD1(v47) = a3;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 2;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 2;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
    long long v47 = 0u;
    long long v48 = 0u;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v47);
  }
  if (v46) {
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  }
}

llvm::MachineFunction **sub_1CD3D0C90(int a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, llvm::TargetInstrInfo *a14)
{
  unint64_t v21 = sub_1CB89327C((uint64_t)a2, a14);
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)FirstTerminator, &v58);
  if (v21)
  {
    uint64_t v57 = a3;
    if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
    {
      int v56 = a7;
      if (!a8 || (a6 & 1) != 0 || a10) && ((a10 & ~(_BYTE)a6 & 1) != 0 || (a8))
      {
        if (a6) {
          uint64_t v47 = a11;
        }
        else {
          uint64_t v47 = a9;
        }
        if (a6) {
          uint64_t v48 = a9;
        }
        else {
          uint64_t v48 = a11;
        }
        uint64_t v55 = v48;
        uint64_t v49 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 48720, a5);
        char v51 = v50;
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v47;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v47;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        long long v59 = 0u;
        long long v60 = 0u;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 1;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        long long v60 = 0uLL;
        long long v59 = 0x200000000uLL;
        llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v59);
        int v52 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 48720, a5);
        unsigned int v54 = v53;
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v55;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v55;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        long long v59 = 0u;
        long long v60 = 0u;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 3;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
        long long v60 = 0uLL;
        long long v59 = 0x200000000uLL;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v59);
      }
      else
      {
        if (a6) {
          uint64_t v23 = a11;
        }
        else {
          uint64_t v23 = a9;
        }
        uint64_t v24 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 48720, a5);
        char v26 = v25;
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = 0;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v23;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v59);
        LODWORD(v59) = 1;
        *((void *)&v59 + 1) = 0;
        *(void *)&long long v60 = v23;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v59);
        long long v59 = 0u;
        long long v60 = 0u;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v59);
        *(void *)&long long v59 = v24;
        *((void *)&v59 + 1) = v26;
        sub_1CB84B704((llvm::MachineFunction **)&v59);
      }
      a7 = v56;
    }
    uint64_t v27 = *((void *)a14 + 1);
    if (a7)
    {
      uint64_t v28 = 33696;
      if (a6) {
        uint64_t v28 = 34464;
      }
      uint64_t v29 = sub_1CB84B588((uint64_t)a2, FirstTerminator, &v58, v27 + v28);
      uint64_t v31 = v30;
      *((void *)&v59 + 1) = 0;
      long long v60 = 0uLL;
      LODWORD(v59) = 0x1000000;
      DWORD1(v59) = a4;
      llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      *((void *)&v59 + 1) = 0;
      long long v60 = 0uLL;
      LODWORD(v59) = 0;
      DWORD1(v59) = a4;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 1;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 2;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      long long v59 = 0u;
      long long v60 = 0u;
      llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v59);
      uint64_t v32 = sub_1CB84B588((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 32352);
      int v34 = v33;
      *((void *)&v59 + 1) = 0;
      long long v60 = 0uLL;
      LODWORD(v59) = 0x1000000;
      DWORD1(v59) = a4;
      llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = (a7 + 3);
      llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 2;
      a3 = v57;
      llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v59);
      long long v59 = 0u;
      long long v60 = 0u;
      llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v59);
      sub_1CB8934B4(a2, 0, &v58, a4, (uint64_t)a14, 0, -1);
    }
    else
    {
      uint64_t v42 = 31392;
      if (a6) {
        uint64_t v42 = 30624;
      }
      uint64_t v43 = sub_1CB84B588((uint64_t)a2, FirstTerminator, &v58, v27 + v42);
      uint64_t v45 = v44;
      *((void *)&v59 + 1) = 0;
      long long v60 = 0uLL;
      LODWORD(v59) = 0x1000000;
      DWORD1(v59) = a4;
      llvm::MachineInstr::addOperand(v44, v43, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v59);
      *((void *)&v59 + 1) = 0;
      long long v60 = 0uLL;
      LODWORD(v59) = 0;
      DWORD1(v59) = a4;
      llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 0;
      llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 2;
      llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v59);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      *(void *)&long long v60 = 2;
      llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v59);
      long long v59 = 0u;
      long long v60 = 0u;
      uint64_t v46 = v43;
      a3 = v57;
      llvm::MachineInstr::addOperand(v45, v46, (const llvm::MachineOperand *)&v59);
    }
  }
  if (a5 && (a13 & 1) == 0)
  {
    uint64_t v35 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 48720, a5);
    uint64_t v37 = v36;
    LODWORD(v59) = 1;
    *((void *)&v59 + 1) = 0;
    *(void *)&long long v60 = 0;
    llvm::MachineInstr::addOperand(v36, v35, (const llvm::MachineOperand *)&v59);
    LODWORD(v59) = 1;
    *((void *)&v59 + 1) = 0;
    *(void *)&long long v60 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v59);
    LODWORD(v59) = 1;
    *((void *)&v59 + 1) = 0;
    *(void *)&long long v60 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v59);
    LODWORD(v59) = 1;
    *((void *)&v59 + 1) = 0;
    *(void *)&long long v60 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v59);
    LODWORD(v59) = 1;
    *((void *)&v59 + 1) = 0;
    *(void *)&long long v60 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v59);
    long long v59 = 0u;
    long long v60 = 0u;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v59);
    *(void *)&long long v59 = v35;
    *((void *)&v59 + 1) = v37;
    sub_1CB84B704((llvm::MachineFunction **)&v59);
  }
  uint64_t v38 = sub_1CB84B588((uint64_t)a2, FirstTerminator, &v58, *((void *)a14 + 1) + 18960);
  int v40 = v39;
  *((void *)&v59 + 1) = 0;
  *(void *)&long long v60 = a3;
  LODWORD(v59) = 4;
  llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v59);
  *(void *)&long long v59 = v38;
  *((void *)&v59 + 1) = v40;
  uint64_t result = sub_1CB84B704((llvm::MachineFunction **)&v59);
  if (v58) {
    return (llvm::MachineFunction **)llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  }
  return result;
}

void sub_1CD3D143C(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, a2[7], &v12);
  if (a3 >= 2)
  {
    unsigned int v11 = a3 >> 1;
    do
    {
      sub_1CB8934B4((llvm::MachineBasicBlock *)a2, 0, &v12, a4, a5, a6, 2);
      --v11;
    }
    while (v11);
  }
  if (a3) {
    sub_1CB8934B4((llvm::MachineBasicBlock *)a2, 0, &v12, a4, a5, a6, 1);
  }
  if (v12) {
    llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
}

void sub_1CD3D14FC(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  if (a4) {
    uint64_t FirstInstrTerminator = *((void *)this + 7);
  }
  else {
    uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  }
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, FirstInstrTerminator, &v10);
  sub_1CB8934B4(this, 1, &v10, a3, a5, a4, -1);
  if (v10) {
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  }
}

void sub_1CD3D158C(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(*((void *)this + 4) + 40);
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)FirstTerminator, &v22);
  if (a4 || (v14 = *(void *)(v9 + 24), uint64_t v15 = *(void *)(v9 + 272), !sub_1CB8933AC(v14, v15, a3)))
  {
    unsigned int v11 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v22, *(void *)(a5 + 8) + 35232);
    long long v13 = v12;
    *((void *)&v23 + 1) = 0;
    long long v24 = 0uLL;
    LODWORD(v23) = 0x1000000;
    DWORD1(v23) = a3;
    llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 0;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
    *((void *)&v23 + 1) = 0;
    long long v24 = 0uLL;
    LODWORD(v23) = 0;
    DWORD1(v23) = a3;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 0;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 2;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 2;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
    long long v23 = 0u;
    long long v24 = 0u;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v23);
  }
  else
  {
    int v16 = (uint64_t *)(v14 + 16 * (a3 & 0x7FFFFFFF) + 8);
    if (a3 >= 0) {
      int v16 = (uint64_t *)(v15 + 8 * a3);
    }
    uint64_t v17 = *v16;
    if ((*(unsigned char *)(v17 + 3) & 1) == 0)
    {
      uint64_t v17 = *(void *)(v17 + 24);
      if ((*(unsigned char *)(v17 + 3) & 1) == 0) {
        uint64_t v17 = 0;
      }
    }
    uint64_t v18 = *(llvm::MachineInstr **)(v17 + 8);
    uint64_t v19 = sub_1CB84B588((uint64_t)this, FirstTerminator, &v22, *(void *)(a5 + 8) + 35424);
    unint64_t v21 = v20;
    *((void *)&v23 + 1) = 0;
    long long v24 = 0uLL;
    LODWORD(v23) = 0x1000000;
    DWORD1(v23) = a3;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 2;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    *((void *)&v23 + 1) = 0;
    *(void *)&long long v24 = 2;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    long long v23 = 0u;
    long long v24 = 0u;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    llvm::MachineInstr::eraseFromParent(v18);
  }
  if (v22) {
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  }
}

llvm::MachineInstr *sub_1CD3D1818(int a1, llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a3, uint64_t a4)
{
  uint64_t v7 = (char *)this + 48;
  unint64_t v8 = (unint64_t *)*((void *)this + 7);
  if (v8 != (unint64_t *)((char *)this + 48))
  {
    unsigned int v9 = 0;
    uint64_t v10 = *((void *)this + 7);
    do
    {
      if (sub_1CB834754(v10))
      {
        if (!v10) {
          goto LABEL_20;
        }
      }
      else
      {
        if ((*(_WORD *)(v10 + 44) & 0xC) != 0 && (*(_WORD *)(v10 + 44) & 4) == 0)
        {
          if (llvm::MachineInstr::hasPropertyInBundle(v10, 1024, 1)) {
            goto LABEL_17;
          }
          uint64_t v12 = *(void *)(v10 + 16);
        }
        else
        {
          uint64_t v12 = *(void *)(v10 + 16);
          if ((*(unsigned char *)(v12 + 9) & 4) != 0) {
            goto LABEL_17;
          }
        }
        if ((*(unsigned char *)(v12 + 16) & 1) == 0)
        {
          unint64_t v8 = (unint64_t *)v10;
LABEL_31:
          llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)v8, &v20);
          uint64_t v17 = sub_1CB84B588((uint64_t)this, v8, &v20, *(void *)(a4 + 8) + 19056);
          uint64_t v19 = v18;
          long long v22 = 0;
          long long v23 = a3;
          LODWORD(v21) = 4;
          llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v21);
          unint64_t v21 = v17;
          long long v22 = v19;
          sub_1CB84B704(&v21);
          long long v13 = v22;
          if (v20) {
            llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
          }
          return v13;
        }
        if (v9 >= 4) {
          goto LABEL_31;
        }
        ++v9;
      }
LABEL_17:
      if ((*(unsigned char *)v10 & 4) == 0)
      {
LABEL_20:
        while ((*(_WORD *)(v10 + 44) & 8) != 0)
          uint64_t v10 = *(void *)(v10 + 8);
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while ((char *)v10 != v7);
  }
  if (!llvm::MachineBasicBlock::isSuccessor(this, a3))
  {
    uint64_t v15 = (void *)*((void *)this + 8);
    if (((*((void *)this + 9) - (void)v15) & 0x7FFFFFFF8) != 8) {
      goto LABEL_31;
    }
    int v16 = (void *)*((void *)a3 + 8);
    if (((*((void *)a3 + 9) - (void)v16) & 0x7FFFFFFF8) != 8
      || *v16 != *v15
      || ((*((void *)this + 12) - *((void *)this + 11)) & 0x7FFFFFFF0) != 0)
    {
      goto LABEL_31;
    }
  }
  return 0;
}

uint64_t sub_1CD3D19E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t sub_1CD3D1A28(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 16);
}

void sub_1CD3D1A64(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *this)
{
  unint64_t v12 = sub_1CB89327C((uint64_t)a2, this);
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)FirstTerminator, &v23);
  if (v12)
  {
    uint64_t v14 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v23, *((void *)this + 1) + 48720, a4);
    int v16 = v15;
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a5;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a5;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    long long v24 = 0u;
    long long v25 = 0u;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 1;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    long long v25 = 0uLL;
    long long v24 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    uint64_t v17 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v23, *((void *)this + 1) + 48720, a4);
    uint64_t v19 = v18;
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a6;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a6;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    long long v24 = 0u;
    long long v25 = 0u;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 3;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    long long v25 = 0uLL;
    long long v24 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
  }
  else
  {
    uint64_t v20 = sub_1CB85AA4C((uint64_t)a2, FirstTerminator, &v23, *((void *)this + 1) + 48720, a4);
    long long v22 = v21;
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a5;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((void *)&v24 + 1) = 0;
    *(void *)&long long v25 = a5;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    long long v24 = 0u;
    long long v25 = 0u;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    *(void *)&long long v24 = v20;
    *((void *)&v24 + 1) = v22;
    sub_1CB84B704((llvm::MachineFunction **)&v24);
  }
  if (v23) {
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  }
}

void sub_1CD3D1DC4(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a2 + 32) + 16);
  uint64_t v14 = *(unint64_t **)(a2 + 56);
  llvm::MachineBasicBlock::findDebugLoc(a2, (uint64_t)v14, &v23);
  unsigned int v15 = sub_1CD3D42B4(17, *(unsigned __int8 *)(v13 + 280), 0, 1, 1, 1);
  int v16 = sub_1CB84B588(a2, v14, &v23, *(void *)(a7 + 8) + 48 * v15);
  uint64_t v18 = v17;
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 0;
  llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)&v24);
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  LODWORD(v24) = 0;
  DWORD1(v24) = a4;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 0;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = a5;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  long long v25 = 0uLL;
  long long v24 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 2;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  long long v24 = 0u;
  long long v25 = 0u;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  uint64_t v19 = 34464;
  if (a6) {
    uint64_t v19 = 24480;
  }
  uint64_t v20 = sub_1CB84B588(a2, v14, &v23, *(void *)(a7 + 8) + v19);
  long long v22 = v21;
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  LODWORD(v24) = 0x1000000;
  DWORD1(v24) = a3;
  llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 0;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  LODWORD(v24) = 0;
  DWORD1(v24) = a3;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 0;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 1;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 2;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  long long v24 = 0u;
  long long v25 = 0u;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  if (v23) {
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  }
}

void sub_1CD3D2034()
{
}

uint64_t sub_1CD3D2050()
{
  return 0;
}

void sub_1CD3D2058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v5 != v4)
  {
    int v7 = -858993459 * ((unint64_t)(v4 - v5) >> 3);
    if (v7 - *(_DWORD *)(v3 + 32) > -*(_DWORD *)(v3 + 32))
    {
      unint64_t v8 = (unsigned char *)(v5 + 18);
      do
      {
        uint64_t v9 = *(void *)(v8 - 10);
        if (*v8) {
          BOOL v10 = v9 == -1;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10 && v9 >= 5 && (v9 & 3) != 0) {
          *(void *)(v8 - 10) = (v9 + 2);
        }
        v8 += 40;
        --v7;
      }
      while (v7);
    }
    uint64_t v13 = *(unsigned __int8 **)(a2 + 16);
    int v14 = v13[280];
    uint64_t v15 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 176))(v13);
    if (v14) {
      int v16 = 18;
    }
    else {
      int v16 = 6;
    }
    uint64_t v17 = *(void *)(v15 + 264)
        + 24 * (v16 + *(_DWORD *)(v15 + 272) * ((*(void *)(v15 + 248) - *(void *)(v15 + 240)) >> 3));
    unsigned int StackObject = llvm::MachineFrameInfo::CreateStackObject((unsigned __int8 *)v3, (unint64_t)*(unsigned int *)(v17 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v17 + 8) >> 3), 0, 0, 0);
    unsigned int v19 = *(_DWORD *)(a3 + 56);
    if (v19 >= *(_DWORD *)(a3 + 60)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v20 = (void *)(*(void *)(a3 + 48) + 16 * v19);
    *uint64_t v20 = StackObject;
    v20[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
}

uint64_t sub_1CD3D21CC()
{
  return 0;
}

uint64_t sub_1CD3D21D4()
{
  return 0;
}

void sub_1CD3D21E0(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3D2218()
{
  return 1;
}

uint64_t sub_1CD3D2220()
{
  return 0;
}

uint64_t sub_1CD3D2228(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1CD3D2240()
{
  return 0;
}

uint64_t sub_1CD3D2250(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t sub_1CD3D2274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 232))(a1, a2, a3, &v4);
}

void sub_1CD3D22BC()
{
}

uint64_t sub_1CD3D22DC()
{
  return 1;
}

uint64_t sub_1CD3D22E4()
{
  return 1;
}

uint64_t sub_1CD3D22EC()
{
  return 0;
}

BOOL sub_1CD3D22F4(uint64_t a1, int a2)
{
  return !a2 || a2 == 255;
}

uint64_t sub_1CD3D2308(int a1, unsigned int a2)
{
  __int16 v2 = -1;
  switch(a1)
  {
    case 11351:
    case 11352:
    case 11353:
    case 11354:
    case 11355:
    case 11356:
    case 11357:
    case 11358:
    case 11359:
    case 11360:
    case 11361:
    case 11362:
    case 11363:
    case 11364:
    case 11365:
    case 11366:
    case 11367:
    case 11368:
    case 11369:
    case 11370:
    case 11371:
    case 11372:
    case 11373:
    case 11374:
    case 11375:
    case 11376:
    case 11377:
    case 11378:
    case 11379:
    case 11380:
    case 11381:
    case 11382:
    case 11383:
    case 11384:
    case 11385:
    case 11386:
    case 11387:
    case 11388:
    case 11389:
    case 11390:
    case 11391:
    case 11392:
    case 11393:
    case 11394:
    case 11395:
    case 11396:
    case 11397:
    case 11398:
    case 11399:
    case 11400:
    case 11401:
    case 11402:
    case 11403:
    case 11404:
    case 11405:
    case 11406:
    case 11407:
    case 11408:
    case 11409:
    case 11410:
    case 11411:
    case 11412:
    case 11413:
    case 11414:
    case 11415:
    case 11416:
    case 11417:
    case 11418:
    case 11419:
    case 11420:
    case 11421:
    case 11422:
    case 11423:
    case 11424:
    case 11425:
    case 11426:
    case 11427:
    case 11428:
    case 11429:
    case 11430:
    case 11431:
    case 11432:
    case 11433:
    case 11434:
    case 11435:
    case 11436:
    case 11437:
    case 11438:
    case 11439:
    case 11440:
    case 11441:
    case 11442:
    case 11443:
    case 11444:
    case 11445:
    case 11446:
    case 11447:
    case 11448:
    case 11449:
    case 11450:
    case 11451:
    case 11452:
    case 11453:
    case 11454:
    case 11455:
    case 11456:
    case 11457:
    case 11458:
    case 11459:
    case 11460:
    case 11461:
    case 11462:
      goto LABEL_9;
    case 11463:
    case 11464:
    case 11465:
    case 11466:
    case 11467:
    case 11468:
    case 11469:
    case 11470:
    case 11471:
    case 11472:
    case 11473:
    case 11474:
    case 11475:
    case 11476:
    case 11477:
    case 11478:
    case 11479:
    case 11480:
    case 11481:
    case 11482:
    case 11483:
    case 11484:
    case 11485:
    case 11486:
    case 11487:
    case 11488:
    case 11489:
    case 11490:
    case 11491:
    case 11492:
    case 11493:
    case 11494:
    case 11495:
    case 11496:
    case 11497:
    case 11498:
    case 11499:
    case 11500:
    case 11501:
    case 11502:
    case 11503:
    case 11504:
    case 11505:
    case 11506:
    case 11507:
    case 11508:
    case 11509:
    case 11510:
    case 11511:
    case 11512:
    case 11513:
    case 11514:
    case 11515:
    case 11516:
    case 11517:
    case 11518:
    case 11519:
    case 11520:
    case 11521:
    case 11522:
    case 11523:
    case 11524:
    case 11525:
    case 11526:
    case 11527:
    case 11528:
    case 11529:
    case 11530:
    case 11531:
    case 11532:
    case 11533:
    case 11534:
    case 11535:
    case 11536:
    case 11537:
    case 11538:
    case 11539:
    case 11540:
    case 11541:
    case 11542:
    case 11543:
    case 11544:
    case 11545:
    case 11546:
    case 11547:
    case 11548:
    case 11549:
    case 11550:
    case 11551:
    case 11552:
    case 11553:
    case 11554:
    case 11555:
    case 11556:
    case 11557:
    case 11558:
    case 11559:
    case 11560:
    case 11561:
    case 11562:
    case 11563:
    case 11564:
    case 11565:
    case 11566:
    case 11567:
    case 11568:
    case 11569:
    case 11570:
    case 11571:
    case 11572:
    case 11573:
    case 11574:
      goto LABEL_14;
    case 11575:
    case 11576:
    case 11577:
    case 11578:
    case 11579:
    case 11580:
    case 11581:
    case 11582:
    case 11583:
    case 11584:
    case 11585:
    case 11586:
    case 11587:
    case 11588:
    case 11589:
    case 11590:
    case 11591:
    case 11592:
    case 11593:
    case 11594:
    case 11595:
    case 11596:
    case 11597:
    case 11598:
    case 11599:
    case 11600:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11605:
    case 11606:
    case 11607:
    case 11608:
    case 11609:
    case 11610:
    case 11611:
    case 11612:
    case 11613:
    case 11614:
    case 11615:
    case 11616:
    case 11617:
    case 11618:
    case 11619:
    case 11620:
    case 11621:
    case 11622:
    case 11623:
    case 11624:
    case 11625:
    case 11626:
    case 11627:
    case 11628:
    case 11629:
    case 11630:
    case 11631:
    case 11632:
    case 11633:
    case 11634:
    case 11635:
    case 11636:
    case 11637:
    case 11638:
    case 11639:
    case 11640:
    case 11641:
    case 11642:
    case 11643:
    case 11644:
    case 11645:
    case 11646:
    case 11647:
    case 11648:
    case 11649:
    case 11650:
    case 11651:
    case 11652:
    case 11653:
    case 11654:
    case 11655:
    case 11656:
    case 11657:
    case 11658:
    case 11659:
    case 11660:
    case 11661:
    case 11662:
    case 11663:
    case 11664:
    case 11665:
    case 11666:
    case 11667:
    case 11668:
    case 11669:
    case 11670:
    case 11671:
    case 11672:
    case 11673:
    case 11674:
    case 11675:
    case 11676:
    case 11677:
    case 11678:
    case 11679:
    case 11680:
    case 11681:
    case 11682:
    case 11683:
    case 11684:
    case 11685:
    case 11686:
    case 11687:
    case 11688:
    case 11689:
    case 11690:
    case 11691:
    case 11692:
    case 11693:
    case 11694:
    case 11695:
    case 11696:
    case 11697:
    case 11698:
    case 11699:
    case 11700:
    case 11701:
    case 11702:
    case 11703:
    case 11704:
    case 11705:
    case 11706:
    case 11707:
    case 11708:
    case 11709:
    case 11710:
    case 11711:
    case 11712:
    case 11713:
    case 11714:
    case 11715:
    case 11716:
    case 11717:
    case 11718:
    case 11719:
    case 11720:
    case 11721:
    case 11722:
    case 11723:
    case 11724:
    case 11725:
    case 11726:
    case 11727:
    case 11728:
    case 11729:
    case 11730:
    case 11731:
    case 11732:
    case 11733:
    case 11734:
    case 11735:
    case 11736:
    case 11737:
    case 11738:
    case 11739:
    case 11740:
    case 11741:
    case 11742:
    case 11743:
    case 11744:
    case 11745:
    case 11746:
    case 11747:
    case 11748:
    case 11749:
    case 11750:
    case 11751:
    case 11752:
    case 11753:
    case 11754:
    case 11755:
    case 11756:
    case 11757:
    case 11758:
    case 11759:
    case 11760:
    case 11761:
    case 11762:
    case 11763:
    case 11764:
    case 11765:
    case 11766:
    case 11767:
    case 11768:
    case 11769:
    case 11770:
    case 11771:
    case 11772:
    case 11773:
    case 11774:
    case 11775:
    case 11776:
    case 11777:
    case 11778:
    case 11779:
    case 11780:
    case 11781:
    case 11782:
    case 11783:
    case 11784:
    case 11785:
    case 11786:
    case 11787:
    case 11788:
    case 11789:
    case 11790:
    case 11791:
    case 11792:
    case 11793:
    case 11794:
    case 11795:
    case 11796:
    case 11797:
    case 11798:
    case 11799:
    case 11800:
    case 11801:
    case 11802:
    case 11803:
    case 11804:
    case 11805:
    case 11806:
    case 11807:
    case 11808:
    case 11809:
    case 11810:
    case 11811:
    case 11812:
    case 11813:
    case 11814:
    case 11815:
    case 11816:
    case 11817:
    case 11818:
    case 11819:
    case 11820:
    case 11821:
    case 11822:
    case 11823:
    case 11824:
    case 11825:
    case 11826:
    case 11827:
    case 11828:
    case 11829:
    case 11830:
    case 11831:
    case 11832:
    case 11833:
    case 11834:
    case 11835:
    case 11836:
    case 11837:
    case 11838:
    case 11839:
    case 11840:
    case 11841:
    case 11842:
    case 11843:
    case 11844:
    case 11845:
    case 11846:
    case 11847:
    case 11848:
    case 11849:
    case 11850:
    case 11851:
    case 11852:
    case 11853:
    case 11854:
    case 11855:
    case 11856:
    case 11857:
    case 11858:
    case 11859:
    case 11860:
    case 11861:
    case 11862:
    case 11863:
    case 11864:
    case 11865:
    case 11866:
    case 11867:
    case 11868:
    case 11869:
    case 11870:
    case 11871:
    case 11872:
    case 11873:
    case 11874:
    case 11875:
    case 11876:
    case 11877:
    case 11878:
    case 11879:
    case 11880:
    case 11881:
    case 11882:
    case 11883:
    case 11884:
    case 11885:
    case 11886:
    case 11887:
    case 11888:
    case 11889:
    case 11890:
    case 11891:
    case 11892:
    case 11893:
    case 11894:
    case 11895:
    case 11896:
    case 11897:
    case 11898:
    case 11899:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11906:
    case 11907:
    case 11908:
    case 11909:
    case 11910:
    case 11911:
    case 11912:
    case 11913:
    case 11914:
    case 11915:
    case 11916:
    case 11917:
    case 11918:
    case 11919:
    case 11920:
    case 11921:
    case 11922:
    case 11923:
    case 11924:
    case 11925:
    case 11926:
    case 11927:
    case 11928:
    case 11929:
    case 11930:
    case 11931:
    case 11932:
    case 11933:
    case 11934:
    case 11935:
    case 11936:
    case 11937:
    case 11938:
    case 11939:
    case 11940:
    case 11941:
    case 11942:
    case 11943:
    case 11944:
    case 11945:
    case 11946:
    case 11947:
    case 11948:
    case 11949:
    case 11950:
    case 11951:
    case 11952:
    case 11953:
    case 11954:
    case 11955:
    case 11956:
    case 11957:
    case 11958:
    case 11959:
    case 11960:
    case 11961:
    case 11962:
    case 11963:
    case 11964:
    case 11965:
    case 11966:
    case 11967:
    case 11968:
    case 11969:
    case 11970:
    case 11971:
    case 11972:
    case 11973:
    case 11974:
    case 11975:
    case 11976:
    case 11977:
    case 11978:
    case 11979:
    case 11980:
    case 11981:
    case 11982:
    case 11983:
    case 11984:
    case 11985:
    case 11986:
    case 11987:
    case 11988:
    case 11989:
    case 11990:
    case 11991:
    case 11992:
    case 11993:
    case 11994:
    case 11995:
    case 11996:
    case 11997:
    case 11998:
    case 11999:
    case 12000:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12013:
    case 12014:
    case 12015:
    case 12016:
    case 12017:
    case 12018:
    case 12019:
    case 12020:
    case 12021:
    case 12022:
    case 12023:
    case 12024:
    case 12025:
    case 12026:
    case 12027:
    case 12028:
    case 12029:
    case 12030:
    case 12031:
    case 12032:
    case 12033:
    case 12034:
    case 12035:
    case 12036:
    case 12037:
    case 12038:
    case 12039:
    case 12040:
    case 12041:
    case 12042:
    case 12043:
    case 12044:
    case 12045:
    case 12046:
    case 12047:
    case 12048:
    case 12049:
    case 12050:
    case 12051:
    case 12052:
    case 12053:
    case 12054:
    case 12055:
    case 12056:
    case 12057:
    case 12058:
    case 12059:
    case 12060:
    case 12061:
    case 12062:
    case 12063:
    case 12064:
    case 12065:
    case 12066:
    case 12067:
    case 12068:
    case 12069:
    case 12070:
    case 12071:
    case 12072:
    case 12073:
    case 12074:
    case 12075:
    case 12076:
    case 12077:
    case 12078:
    case 12079:
    case 12080:
    case 12081:
    case 12082:
    case 12083:
    case 12084:
    case 12085:
    case 12086:
    case 12087:
    case 12088:
    case 12089:
    case 12090:
    case 12091:
    case 12092:
    case 12093:
    case 12094:
    case 12095:
    case 12096:
    case 12097:
    case 12098:
    case 12099:
    case 12100:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12109:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12115:
    case 12116:
    case 12117:
    case 12118:
    case 12119:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12125:
    case 12126:
    case 12127:
    case 12128:
    case 12129:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12135:
    case 12136:
    case 12137:
    case 12138:
    case 12139:
    case 12140:
    case 12141:
    case 12142:
    case 12143:
    case 12144:
    case 12145:
    case 12146:
    case 12147:
    case 12148:
    case 12149:
    case 12150:
    case 12151:
    case 12152:
    case 12153:
    case 12154:
    case 12155:
    case 12156:
    case 12157:
    case 12158:
    case 12159:
    case 12160:
    case 12161:
    case 12162:
    case 12163:
    case 12164:
    case 12165:
    case 12166:
    case 12167:
    case 12168:
    case 12169:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12174:
    case 12175:
    case 12176:
    case 12177:
    case 12178:
    case 12179:
    case 12180:
    case 12181:
    case 12182:
    case 12183:
    case 12184:
    case 12185:
    case 12186:
    case 12187:
    case 12188:
    case 12189:
    case 12190:
    case 12191:
    case 12192:
    case 12193:
    case 12194:
    case 12195:
    case 12196:
    case 12197:
    case 12198:
    case 12199:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12205:
    case 12206:
    case 12207:
    case 12208:
    case 12209:
    case 12210:
    case 12211:
    case 12212:
    case 12213:
    case 12214:
    case 12215:
    case 12216:
    case 12217:
    case 12218:
    case 12219:
    case 12220:
    case 12221:
    case 12222:
    case 12223:
    case 12224:
    case 12225:
    case 12226:
    case 12227:
    case 12228:
    case 12229:
    case 12230:
    case 12231:
    case 12232:
    case 12233:
    case 12234:
    case 12235:
    case 12236:
    case 12237:
    case 12238:
    case 12239:
    case 12240:
    case 12241:
    case 12242:
    case 12243:
    case 12244:
    case 12245:
    case 12246:
    case 12247:
    case 12248:
    case 12249:
    case 12250:
    case 12251:
    case 12252:
    case 12253:
    case 12254:
    case 12255:
    case 12256:
    case 12257:
    case 12258:
    case 12259:
    case 12260:
    case 12261:
    case 12262:
    case 12263:
    case 12264:
    case 12265:
    case 12266:
    case 12267:
    case 12268:
    case 12269:
    case 12270:
    case 12271:
    case 12272:
    case 12273:
    case 12274:
    case 12275:
    case 12276:
    case 12277:
    case 12278:
    case 12279:
    case 12280:
    case 12281:
    case 12282:
    case 12283:
    case 12284:
    case 12285:
    case 12286:
    case 12287:
    case 12288:
    case 12289:
    case 12290:
    case 12291:
    case 12292:
    case 12293:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12298:
    case 12299:
    case 12300:
    case 12301:
    case 12302:
    case 12303:
    case 12304:
    case 12305:
    case 12306:
    case 12307:
    case 12308:
    case 12309:
    case 12310:
    case 12311:
    case 12312:
    case 12313:
    case 12314:
    case 12315:
    case 12316:
    case 12317:
    case 12318:
    case 12319:
    case 12320:
    case 12321:
    case 12322:
    case 12323:
    case 12324:
    case 12325:
    case 12326:
    case 12327:
    case 12328:
    case 12329:
    case 12330:
    case 12331:
    case 12332:
    case 12333:
    case 12334:
    case 12335:
    case 12336:
    case 12337:
    case 12338:
    case 12339:
    case 12340:
    case 12341:
    case 12342:
    case 12343:
    case 12344:
    case 12345:
    case 12346:
    case 12347:
    case 12348:
    case 12349:
    case 12350:
    case 12351:
    case 12352:
    case 12353:
    case 12354:
    case 12355:
    case 12356:
    case 12357:
    case 12358:
    case 12359:
    case 12360:
    case 12361:
    case 12362:
    case 12363:
    case 12364:
    case 12365:
    case 12366:
    case 12367:
    case 12368:
    case 12369:
    case 12370:
    case 12371:
    case 12372:
    case 12373:
    case 12374:
    case 12375:
    case 12376:
    case 12377:
    case 12378:
    case 12379:
    case 12380:
    case 12381:
    case 12382:
    case 12383:
    case 12384:
    case 12385:
    case 12386:
    case 12387:
    case 12388:
    case 12389:
    case 12390:
    case 12391:
    case 12392:
    case 12393:
    case 12394:
    case 12395:
    case 12396:
    case 12397:
    case 12398:
    case 12399:
    case 12400:
    case 12401:
    case 12402:
    case 12403:
    case 12404:
    case 12405:
    case 12406:
    case 12407:
    case 12408:
    case 12409:
    case 12410:
    case 12411:
    case 12412:
    case 12413:
    case 12414:
    case 12415:
    case 12416:
    case 12417:
    case 12418:
    case 12419:
    case 12420:
    case 12421:
    case 12422:
    case 12423:
    case 12424:
    case 12425:
    case 12426:
    case 12427:
    case 12428:
    case 12429:
    case 12430:
    case 12431:
    case 12432:
    case 12433:
    case 12434:
    case 12435:
    case 12436:
    case 12437:
    case 12438:
    case 12439:
    case 12488:
    case 12490:
    case 12492:
    case 12494:
    case 12536:
    case 12538:
    case 12580:
    case 12582:
    case 12624:
    case 12626:
    case 12668:
    case 12670:
    case 12672:
    case 12674:
    case 12676:
    case 12678:
    case 12680:
    case 12682:
    case 12684:
    case 12686:
    case 12688:
    case 12690:
    case 12732:
    case 12734:
    case 12776:
    case 12778:
    case 12820:
    case 12822:
    case 12864:
    case 12866:
    case 12868:
    case 12870:
    case 12872:
    case 12874:
    case 12876:
    case 12878:
    case 12880:
    case 12882:
      return v2;
    case 12440:
    case 12443:
    case 12446:
    case 12449:
    case 12452:
    case 12455:
    case 12458:
    case 12461:
    case 12464:
    case 12467:
    case 12470:
    case 12473:
    case 12476:
    case 12479:
    case 12482:
    case 12485:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 462);
      return *v3;
    case 12441:
    case 12442:
    case 12444:
    case 12445:
    case 12447:
    case 12448:
    case 12450:
    case 12451:
    case 12453:
    case 12454:
    case 12456:
    case 12457:
    case 12459:
    case 12460:
    case 12462:
    case 12463:
    case 12465:
    case 12466:
    case 12468:
    case 12469:
    case 12471:
    case 12472:
    case 12474:
    case 12475:
    case 12477:
    case 12478:
    case 12480:
    case 12481:
    case 12483:
    case 12484:
    case 12486:
    case 12487:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 528);
      return *v3;
    case 12489:
    case 12491:
    case 12493:
    case 12495:
    case 12537:
    case 12539:
    case 12581:
    case 12583:
    case 12625:
    case 12627:
    case 12669:
    case 12671:
    case 12673:
    case 12675:
    case 12677:
    case 12679:
    case 12681:
    case 12683:
    case 12685:
    case 12687:
    case 12689:
    case 12691:
    case 12733:
    case 12735:
    case 12777:
    case 12779:
    case 12821:
    case 12823:
    case 12865:
    case 12867:
    case 12873:
    case 12875:
    case 12877:
    case 12879:
    case 12881:
    case 12883:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 330);
      return *v3;
    case 12496:
    case 12506:
    case 12516:
    case 12526:
    case 12540:
    case 12550:
    case 12560:
    case 12570:
    case 12584:
    case 12594:
    case 12604:
    case 12614:
    case 12628:
    case 12638:
    case 12648:
    case 12658:
    case 12692:
    case 12702:
    case 12712:
    case 12722:
    case 12736:
    case 12746:
    case 12756:
    case 12766:
    case 12780:
    case 12790:
    case 12800:
    case 12810:
    case 12824:
    case 12834:
    case 12844:
    case 12854:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 66);
      return *v3;
    case 12497:
    case 12499:
    case 12502:
    case 12504:
    case 12507:
    case 12509:
    case 12512:
    case 12514:
    case 12517:
    case 12519:
    case 12522:
    case 12524:
    case 12527:
    case 12529:
    case 12532:
    case 12534:
    case 12541:
    case 12543:
    case 12546:
    case 12548:
    case 12551:
    case 12553:
    case 12556:
    case 12558:
    case 12561:
    case 12563:
    case 12566:
    case 12568:
    case 12571:
    case 12573:
    case 12576:
    case 12578:
    case 12585:
    case 12587:
    case 12590:
    case 12592:
    case 12595:
    case 12597:
    case 12600:
    case 12602:
    case 12605:
    case 12607:
    case 12610:
    case 12612:
    case 12615:
    case 12617:
    case 12620:
    case 12622:
    case 12629:
    case 12631:
    case 12634:
    case 12636:
    case 12639:
    case 12641:
    case 12644:
    case 12646:
    case 12649:
    case 12651:
    case 12654:
    case 12656:
    case 12659:
    case 12661:
    case 12664:
    case 12666:
    case 12693:
    case 12695:
    case 12698:
    case 12700:
    case 12703:
    case 12705:
    case 12708:
    case 12710:
    case 12713:
    case 12715:
    case 12718:
    case 12720:
    case 12723:
    case 12725:
    case 12728:
    case 12730:
    case 12737:
    case 12739:
    case 12742:
    case 12744:
    case 12747:
    case 12749:
    case 12752:
    case 12754:
    case 12757:
    case 12759:
    case 12762:
    case 12764:
    case 12767:
    case 12769:
    case 12772:
    case 12774:
    case 12781:
    case 12783:
    case 12786:
    case 12788:
    case 12791:
    case 12793:
    case 12796:
    case 12798:
    case 12801:
    case 12803:
    case 12806:
    case 12808:
    case 12811:
    case 12813:
    case 12816:
    case 12818:
    case 12825:
    case 12827:
    case 12830:
    case 12832:
    case 12835:
    case 12837:
    case 12840:
    case 12842:
    case 12845:
    case 12847:
    case 12850:
    case 12852:
    case 12855:
    case 12857:
    case 12860:
    case 12862:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 132);
      return *v3;
    case 12498:
    case 12500:
    case 12503:
    case 12505:
    case 12508:
    case 12510:
    case 12513:
    case 12515:
    case 12518:
    case 12520:
    case 12523:
    case 12525:
    case 12528:
    case 12530:
    case 12533:
    case 12535:
    case 12542:
    case 12544:
    case 12547:
    case 12549:
    case 12552:
    case 12554:
    case 12557:
    case 12559:
    case 12562:
    case 12564:
    case 12567:
    case 12569:
    case 12572:
    case 12574:
    case 12577:
    case 12579:
    case 12586:
    case 12588:
    case 12591:
    case 12593:
    case 12596:
    case 12598:
    case 12601:
    case 12603:
    case 12606:
    case 12608:
    case 12611:
    case 12613:
    case 12616:
    case 12618:
    case 12621:
    case 12623:
    case 12630:
    case 12632:
    case 12635:
    case 12637:
    case 12640:
    case 12642:
    case 12645:
    case 12647:
    case 12650:
    case 12652:
    case 12655:
    case 12657:
    case 12660:
    case 12662:
    case 12665:
    case 12667:
    case 12694:
    case 12696:
    case 12699:
    case 12701:
    case 12704:
    case 12706:
    case 12709:
    case 12711:
    case 12714:
    case 12716:
    case 12719:
    case 12721:
    case 12724:
    case 12726:
    case 12729:
    case 12731:
    case 12738:
    case 12740:
    case 12743:
    case 12745:
    case 12748:
    case 12750:
    case 12753:
    case 12755:
    case 12758:
    case 12760:
    case 12763:
    case 12765:
    case 12768:
    case 12770:
    case 12773:
    case 12775:
    case 12782:
    case 12784:
    case 12787:
    case 12789:
    case 12792:
    case 12794:
    case 12797:
    case 12799:
    case 12802:
    case 12804:
    case 12807:
    case 12809:
    case 12812:
    case 12814:
    case 12817:
    case 12819:
    case 12826:
    case 12828:
    case 12831:
    case 12833:
    case 12836:
    case 12838:
    case 12841:
    case 12843:
    case 12846:
    case 12848:
    case 12851:
    case 12853:
    case 12856:
    case 12858:
    case 12861:
    case 12863:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 264);
      return *v3;
    case 12501:
    case 12511:
    case 12521:
    case 12531:
    case 12545:
    case 12555:
    case 12565:
    case 12575:
    case 12589:
    case 12599:
    case 12609:
    case 12619:
    case 12633:
    case 12643:
    case 12653:
    case 12663:
    case 12697:
    case 12707:
    case 12717:
    case 12727:
    case 12741:
    case 12751:
    case 12761:
    case 12771:
    case 12785:
    case 12795:
    case 12805:
    case 12815:
    case 12829:
    case 12839:
    case 12849:
    case 12859:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 198);
      return *v3;
    case 12869:
    case 12871:
      uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 594);
      return *v3;
    default:
      if ((a1 - 10409) < 0xE)
      {
LABEL_9:
        uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2 + 396);
        return *v3;
      }
      if ((a1 - 10407) <= 1)
      {
LABEL_14:
        uint64_t v3 = (__int16 *)((char *)&unk_1CD91D2F0 + 2 * a2);
        return *v3;
      }
      return v2;
  }
}

void sub_1CD3D242C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (const llvm::MachineOperand *)(v8 + 64);
  BOOL v10 = sub_1CD3C8EB4(*(void *)(a2 + 24), *(void *)(a2 + 8), (unsigned __int8 **)(a2 + 56), a1 + 48 * a3, *(_DWORD *)(v8 + 4));
  unint64_t v12 = v11;
  LODWORD(v16) = 1;
  *((void *)&v16 + 1) = 0;
  *(void *)&long long v17 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v16);
  llvm::MachineInstr::addOperand(v12, v10, v9);
  if (a4)
  {
    llvm::MachineInstr::addOperand(v12, v10, v9);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    if (a5)
    {
      uint64_t v13 = v12;
      int v14 = v10;
      uint64_t v15 = v9;
LABEL_6:
      llvm::MachineInstr::addOperand(v13, v14, v15);
    }
  }
  else
  {
    LODWORD(v16) = 1;
    *((void *)&v16 + 1) = 0;
    *(void *)&long long v17 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    LODWORD(v16) = 1;
    *((void *)&v16 + 1) = 0;
    *(void *)&long long v17 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    LODWORD(v16) = 1;
    *((void *)&v16 + 1) = 0;
    *(void *)&long long v17 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
    if (a5)
    {
      llvm::MachineInstr::addOperand(v12, v10, v9);
      LODWORD(v16) = 1;
      *((void *)&v16 + 1) = 0;
      *(void *)&long long v17 = 0;
      uint64_t v15 = (const llvm::MachineOperand *)&v16;
      uint64_t v13 = v12;
      int v14 = v10;
      goto LABEL_6;
    }
  }
  long long v16 = 0u;
  long long v17 = 0u;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 1;
  *((void *)&v16 + 1) = 0;
  *(void *)&long long v17 = 3;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
  long long v17 = 0uLL;
  long long v16 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v16);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1CD3D2604(uint64_t a1, llvm::MachineInstr *this)
{
  uint64_t v2 = 0;
  switch(**((_WORD **)this + 2))
  {
    case 0x123:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564624;
      goto LABEL_34;
    case 0x124:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564672;
      goto LABEL_34;
    case 0x125:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564720;
      goto LABEL_34;
    case 0x126:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564768;
      goto LABEL_34;
    case 0x127:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564816;
      goto LABEL_34;
    case 0x128:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564864;
      goto LABEL_34;
    case 0x129:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564912;
      goto LABEL_34;
    case 0x12A:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 564960;
      goto LABEL_34;
    case 0x12B:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565008;
      goto LABEL_34;
    case 0x12C:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565056;
      goto LABEL_34;
    case 0x12D:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565104;
      goto LABEL_34;
    case 0x12E:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565152;
      goto LABEL_34;
    case 0x12F:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565200;
      goto LABEL_34;
    case 0x130:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565248;
      goto LABEL_34;
    case 0x131:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565296;
      goto LABEL_34;
    case 0x132:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 565344;
      goto LABEL_34;
    case 0x134:
      sub_1CD3D242C(*(void *)(a1 + 8), (uint64_t)this, 0x565u, 0, 0);
      goto LABEL_35;
    case 0x135:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v2 = 1;
      unsigned int v8 = 1445;
      int v9 = 1;
      char v10 = 0;
      goto LABEL_42;
    case 0x136:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v2 = 1;
      unsigned int v8 = 1003;
      int v9 = 0;
      goto LABEL_41;
    case 0x137:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v2 = 1;
      unsigned int v8 = 1015;
      int v9 = 1;
LABEL_41:
      char v10 = 1;
LABEL_42:
      sub_1CD3D242C(v7, (uint64_t)this, v8, v9, v10);
      return v2;
    case 0x13A:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642720;
      goto LABEL_34;
    case 0x13B:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642768;
      goto LABEL_34;
    case 0x13C:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642816;
      goto LABEL_34;
    case 0x13D:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642864;
      goto LABEL_34;
    case 0x13E:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642912;
      goto LABEL_34;
    case 0x13F:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 642960;
      goto LABEL_34;
    case 0x140:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643008;
      goto LABEL_34;
    case 0x141:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643056;
      goto LABEL_34;
    case 0x142:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643104;
      goto LABEL_34;
    case 0x143:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643152;
      goto LABEL_34;
    case 0x144:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643200;
      goto LABEL_34;
    case 0x145:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643248;
      goto LABEL_34;
    case 0x146:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643296;
      goto LABEL_34;
    case 0x147:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643344;
      goto LABEL_34;
    case 0x148:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643392;
      goto LABEL_34;
    case 0x149:
      llvm::MachineInstr::removeOperand((char *)this, 2u);
      uint64_t v5 = *(void *)(a1 + 8) + 643440;
LABEL_34:
      *((void *)this + 2) = v5;
LABEL_35:
      uint64_t v2 = 1;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_1CD3D2A5C(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1CD3D2A64()
{
  return &unk_1E66A3C70;
}

void *sub_1CD3D2A74()
{
  return &unk_1E66A3CD0;
}

llvm::MachineInstr *sub_1CD3D2A84(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 1288))(a1);
  uint64_t v15 = *(unint64_t **)(a2 + 56);
  if (v15 == a3) {
    return 0;
  }
  unsigned int v16 = 0;
  unint64_t v17 = (unint64_t)a3;
  while (1)
  {
    unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    if (!v17 || (*(unsigned char *)v17 & 4) == 0)
    {
      while ((*(_WORD *)(v17 + 44) & 4) != 0)
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((*(unsigned char *)(*(void *)(v17 + 16) + 9) & 0x20) != 0 && *(_DWORD *)(*(void *)(v17 + 32) + 4) == a6) {
      break;
    }
    uint64_t v18 = *(unsigned int *)(v17 + 40);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(v17 + 32);
      while ((*(_DWORD *)(v20 + 32 * v19) & 0x30000FF) != 0x1000000)
      {
LABEL_18:
        if (++v19 == v18) {
          goto LABEL_19;
        }
      }
      uint64_t v21 = *(void *)(v14 + 8);
      uint64_t v22 = *(void *)(v14 + 56);
      uint64_t v23 = v21 + 24 * a6;
      unsigned int v24 = *(_DWORD *)(v20 + 32 * v19 + 4);
      unint64_t v25 = *(unsigned int *)(v21 + 24 * v24 + 16);
      __int16 v26 = v25 & 0xF;
      uint64_t v27 = (_WORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFE));
      __int16 v28 = *v27 + v26 * v24;
      unint64_t v29 = *(unsigned int *)(v23 + 16);
      uint64_t v30 = (_WORD *)(v22 + ((v29 >> 3) & 0x1FFFFFFE));
      __int16 v32 = *v30;
      uint64_t v31 = v30 + 1;
      __int16 v33 = v32 + (v29 & 0xF) * a6;
LABEL_14:
      ++v27;
      int v34 = v31;
      __int16 v35 = v33;
      while (v28 != v35)
      {
        int v36 = *v34++;
        v35 += v36;
        if (!v36)
        {
          v28 += *v27;
          if (*v27) {
            goto LABEL_14;
          }
          goto LABEL_18;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v37 = 0;
    if ((unint64_t *)v17 != v15 && v16++ < 0xF) {
      continue;
    }
    return v37;
  }
  if (*(void *)(*(void *)(v17 + 32)
                 + 32 * llvm::MachineInstr::findFirstPredOperandIdx((llvm::MachineInstr *)v17)
                 + 16))
    return 0;
  uint64_t v40 = a1[1];
  if (a7)
  {
    unsigned int v41 = sub_1CB85AA4C(a2, a3, a4, v40 + 69360, a5);
    uint64_t v37 = v42;
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    uint64_t v43 = (const llvm::MachineOperand *)&v46;
    uint64_t v44 = v42;
  }
  else
  {
    unsigned int v41 = sub_1CB85AA4C(a2, a3, a4, v40 + 48720, a5);
    uint64_t v37 = v45;
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v45, v41, (const llvm::MachineOperand *)&v46);
    uint64_t v43 = (const llvm::MachineOperand *)(*(void *)(v17 + 32) + 64);
    uint64_t v44 = v37;
  }
  llvm::MachineInstr::addOperand(v44, v41, v43);
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)(*(void *)(v17 + 32) + 64));
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)(*(void *)(v17 + 32) + 64));
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)(*(void *)(v17 + 32) + 64));
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)&v46);
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v37, v41, (const llvm::MachineOperand *)&v46);
  return v37;
}

llvm::MachineInstr *sub_1CD3D2D88(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  uint64_t v14 = *a4;
  __int16 v35 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v35, v14, 2);
  }
  uint64_t v15 = sub_1CD3D2A84(a1, a2, a3, &v35, a5, a6, 1);
  if (v35) {
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  }
  if (!v15)
  {
    v34[0] = sub_1CB85AA4C(a2, a3, a4, a1[1] + 66288, a5);
    v34[1] = v16;
    LODWORD(v36) = 1;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    llvm::MachineInstr::addOperand(v16, v34[0], (const llvm::MachineOperand *)&v36);
    if (a7) {
      unsigned int v17 = 8;
    }
    else {
      unsigned int v17 = 0;
    }
    uint64_t v18 = sub_1CB89517C(v34, a6, v17, 0);
    uint64_t v19 = v18[1];
    uint64_t v20 = *v18;
    LODWORD(v36) = 1;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)&v36);
    uint64_t v21 = sub_1CB89517C(v18, a6, v17, 0);
    uint64_t v22 = v21[1];
    uint64_t v23 = *v21;
    LODWORD(v36) = 1;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    llvm::MachineInstr::addOperand(v22, v23, (const llvm::MachineOperand *)&v36);
    unsigned int v24 = sub_1CB89517C(v21, a6, v17, 0);
    unint64_t v25 = v24[1];
    __int16 v26 = *v24;
    LODWORD(v36) = 1;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    llvm::MachineInstr::addOperand(v25, v26, (const llvm::MachineOperand *)&v36);
    __int16 v28 = *v24;
    uint64_t v27 = v24[1];
    long long v36 = 0u;
    long long v37 = 0u;
    llvm::MachineInstr::addOperand(v27, v28, (const llvm::MachineOperand *)&v36);
    uint64_t v30 = *v24;
    unint64_t v29 = v24[1];
    LODWORD(v36) = 1;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v36);
    __int16 v32 = *v24;
    uint64_t v31 = v24[1];
    long long v36 = 0u;
    long long v37 = 0u;
    llvm::MachineInstr::addOperand(v31, v32, (const llvm::MachineOperand *)&v36);
    return v24[1];
  }
  return v15;
}

llvm::MachineInstr *sub_1CD3D2F58(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  uint64_t v14 = *a4;
  uint64_t v38 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v38, v14, 2);
  }
  uint64_t v15 = sub_1CD3D2A84(a1, a2, a3, &v38, a5, a6, 0);
  if (v38) {
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  }
  if (!v15)
  {
    v37[0] = sub_1CB85AA4C(a2, a3, a4, a1[1] + 48144, a5);
    v37[1] = v16;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v16, v37[0], (const llvm::MachineOperand *)&v39);
    if (a7) {
      unsigned int v17 = 8;
    }
    else {
      unsigned int v17 = 0;
    }
    uint64_t v18 = sub_1CB89517C(v37, a6, v17, 0);
    uint64_t v19 = v18[1];
    uint64_t v20 = *v18;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)&v39);
    uint64_t v21 = sub_1CB89517C(v18, a6, v17, 0);
    uint64_t v22 = v21[1];
    uint64_t v23 = *v21;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v22, v23, (const llvm::MachineOperand *)&v39);
    unsigned int v24 = sub_1CB89517C(v21, a6, v17, 0);
    unint64_t v25 = v24[1];
    __int16 v26 = *v24;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v25, v26, (const llvm::MachineOperand *)&v39);
    uint64_t v27 = sub_1CB89517C(v24, a6, v17, 0);
    __int16 v28 = v27[1];
    unint64_t v29 = *v27;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v28, v29, (const llvm::MachineOperand *)&v39);
    uint64_t v31 = *v27;
    uint64_t v30 = v27[1];
    long long v39 = 0u;
    long long v40 = 0u;
    llvm::MachineInstr::addOperand(v30, v31, (const llvm::MachineOperand *)&v39);
    __int16 v33 = *v27;
    __int16 v32 = v27[1];
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v39);
    __int16 v35 = *v27;
    int v34 = v27[1];
    long long v39 = 0u;
    long long v40 = 0u;
    llvm::MachineInstr::addOperand(v34, v35, (const llvm::MachineOperand *)&v39);
    return v27[1];
  }
  return v15;
}

uint64_t sub_1CD3D3158(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (**(unsigned __int16 **)(a2 + 16) - 12157 > 0x31) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)v3 || *(unsigned char *)(v3 + 32) != 5 || *(unsigned char *)(v3 + 64) != 1 || *(void *)(v3 + 80)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v3 + 48);
  return *(unsigned int *)(v3 + 4);
}

uint64_t sub_1CD3D31B4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (**(unsigned __int16 **)(a2 + 16) - 12884 > 0x31) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)v3 || *(unsigned char *)(v3 + 32) != 5 || *(unsigned char *)(v3 + 64) != 1 || *(void *)(v3 + 80)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v3 + 48);
  return *(unsigned int *)(v3 + 4);
}

void sub_1CD3D3210(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, llvm::MachineFunction *a6, uint64_t a7)
{
  uint64_t v48 = 0;
  if (a2 + 48 != a3) {
    sub_1CB896804(&v48, (unsigned __int8 **)(a3 + 56));
  }
  uint64_t v14 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a2 + 32) + 8) + 16))(*(void *)(*(void *)(a2 + 32) + 8), **(void **)(a2 + 32));
  int v15 = *(unsigned __int8 *)(v14 + 280);
  unint64_t v16 = *(unsigned __int16 *)(*(void *)a7 + 24);
  unint64_t v17 = v16 >> 5;
  int v18 = dword_1CD936E10[v16 >> 5];
  int v19 = 1 << v16;
  uint64_t v42 = (unsigned char *)v14;
  if ((v19 & v18) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12892;
    goto LABEL_5;
  }
  if ((dword_1CD938618[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12910;
    goto LABEL_5;
  }
  if ((dword_1CD939EF0[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12922;
    goto LABEL_5;
  }
  if ((dword_1CD93B768[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12926;
    goto LABEL_5;
  }
  if ((dword_1CD93C968[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12928;
    goto LABEL_5;
  }
  if ((dword_1CD93E000[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12932;
    goto LABEL_5;
  }
  if ((dword_1CD93F080[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12884;
    goto LABEL_5;
  }
  if ((dword_1CD940538[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12886;
    goto LABEL_5;
  }
  if ((dword_1CD941438[v17] & v19) != 0)
  {
    int v20 = a4;
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12888;
    goto LABEL_5;
  }
  int v20 = a4;
  if ((dword_1CD942710[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12890;
    goto LABEL_5;
  }
  if ((dword_1CD943490[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12894;
    goto LABEL_5;
  }
  if ((dword_1CD944588[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12896;
    goto LABEL_5;
  }
  if ((dword_1CD945188[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12898;
    goto LABEL_5;
  }
  if ((dword_1CD9460A0[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12900;
    goto LABEL_5;
  }
  if ((dword_1CD946B20[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12902;
    goto LABEL_5;
  }
  if ((dword_1CD947858[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12904;
    goto LABEL_5;
  }
  if ((dword_1CD948110[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12906;
    goto LABEL_5;
  }
  if ((dword_1CD948398[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12908;
    goto LABEL_5;
  }
  if ((dword_1CD9485D8[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12912;
    goto LABEL_5;
  }
  if ((dword_1CD9487D0[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12914;
    goto LABEL_5;
  }
  if ((dword_1CD948980[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12916;
    goto LABEL_5;
  }
  if ((dword_1CD948AE8[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12918;
    goto LABEL_5;
  }
  if ((dword_1CD948C08[v17] & v19) != 0)
  {
    BOOL v21 = v15 == 0;
    uint64_t v22 = 12920;
LABEL_5:
    if (v21) {
      uint64_t v23 = v22 + 1;
    }
    else {
      uint64_t v23 = v22;
    }
    goto LABEL_8;
  }
  int v40 = dword_1CD948CE0[v17];
  uint64_t v41 = 12924;
  if (!*(unsigned char *)(v14 + 280)) {
    uint64_t v41 = 12925;
  }
  if ((v40 & v19) != 0) {
    uint64_t v23 = v41;
  }
  else {
    uint64_t v23 = 0;
  }
LABEL_8:
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = *(void *)(v24 + 56);
  llvm::MachinePointerInfo::getFixedStack((uint64_t ***)v24, a6, 0, (uint64_t)&v46);
  uint64_t v26 = *(void *)(v25 + 8) + 40 * (*(_DWORD *)(v25 + 32) + a6);
  uint64_t v27 = *(unsigned int *)(v26 + 8);
  char v28 = *(unsigned char *)(v26 + 16);
  long long v44 = v46;
  uint64_t v45 = v47;
  long long v49 = 0u;
  long long v50 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v24, (uint64_t)&v44, 2, v27, v28, &v49, 0, 1, 0, 0, 0);
  v43[0] = sub_1CB84B588(a2, (unint64_t *)a3, &v48, *(void *)(a1 + 8) + 48 * v23);
  v43[1] = v30;
  if (a5) {
    unsigned int v31 = 8;
  }
  else {
    unsigned int v31 = 0;
  }
  __int16 v32 = sub_1CB89517C(v43, v20, v31, 0);
  __int16 v33 = v32[1];
  int v34 = *v32;
  LODWORD(v49) = 5;
  *((void *)&v49 + 1) = 0;
  LODWORD(v50) = a6;
  llvm::MachineInstr::addOperand(v33, v34, (const llvm::MachineOperand *)&v49);
  long long v36 = *v32;
  __int16 v35 = v32[1];
  LODWORD(v49) = 1;
  *((void *)&v49 + 1) = 0;
  *(void *)&long long v50 = 0;
  llvm::MachineInstr::addOperand(v35, v36, (const llvm::MachineOperand *)&v49);
  long long v37 = *v32;
  uint64_t v38 = v32[1];
  if (v15)
  {
    LODWORD(v49) = 1;
    *((void *)&v49 + 1) = 0;
    *(void *)&long long v50 = 0;
    llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
    LODWORD(v49) = 1;
  }
  else
  {
    if (v42[310])
    {
      uint64_t v39 = 1;
    }
    else if (v42[311])
    {
      uint64_t v39 = 2;
    }
    else
    {
      uint64_t v39 = 3;
      if (!v42[312]) {
        uint64_t v39 = 0;
      }
    }
    LODWORD(v49) = 1;
    *((void *)&v49 + 1) = 0;
    *(void *)&long long v50 = v39;
    llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
    LODWORD(v49) = 1;
    *((void *)&v49 + 1) = 0;
    *(void *)&long long v50 = 0;
    llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
    LODWORD(v49) = 1;
  }
  *((void *)&v49 + 1) = 0;
  *(void *)&long long v50 = 0;
  llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  *((void *)&v49 + 1) = 0;
  *(void *)&long long v50 = 0;
  llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  *((void *)&v49 + 1) = 0;
  *(void *)&long long v50 = 0;
  llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
  long long v49 = 0u;
  long long v50 = 0u;
  llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v49);
  llvm::MachineInstr::addMemOperand(v38, v37, MachineMemOperand);
  if (v48) {
    llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
  }
}

void sub_1CD3D3800(uint64_t a1, uint64_t a2, uint64_t a3, int a4, llvm::MachineFunction *a5, uint64_t a6)
{
  uint64_t v45 = 0;
  if (a2 + 48 != a3) {
    sub_1CB896804(&v45, (unsigned __int8 **)(a3 + 56));
  }
  uint64_t v12 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a2 + 32) + 8) + 16))(*(void *)(*(void *)(a2 + 32) + 8), **(void **)(a2 + 32));
  int v13 = *(unsigned __int8 *)(v12 + 280);
  unint64_t v14 = *(unsigned __int16 *)(*(void *)a6 + 24);
  unint64_t v15 = v14 >> 5;
  int v16 = dword_1CD936E10[v14 >> 5];
  int v17 = 1 << v14;
  uint64_t v39 = (unsigned char *)v12;
  int v40 = a4;
  if ((v17 & v16) != 0)
  {
    if (*(unsigned char *)(v12 + 280)) {
      uint64_t v18 = 12165;
    }
    else {
      uint64_t v18 = 12166;
    }
    int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(*(void *)(a2 + 32) + 40), (uint64_t)&off_1E66A43C8, "", 0);
    goto LABEL_8;
  }
  if ((dword_1CD938618[v15] & v17) == 0)
  {
    if ((dword_1CD939EF0[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12195;
      goto LABEL_17;
    }
    if ((dword_1CD93B768[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12199;
      goto LABEL_17;
    }
    if ((dword_1CD93C968[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12201;
      goto LABEL_17;
    }
    if ((dword_1CD93E000[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12205;
      goto LABEL_17;
    }
    if ((dword_1CD93F080[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12157;
      goto LABEL_17;
    }
    if ((dword_1CD940538[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12159;
      goto LABEL_17;
    }
    if ((dword_1CD941438[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12161;
      goto LABEL_17;
    }
    if ((dword_1CD942710[v15] & v17) != 0)
    {
      BOOL v32 = v13 == 0;
      uint64_t v33 = 12163;
      goto LABEL_17;
    }
    if ((dword_1CD943490[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12167;
    }
    else if ((dword_1CD944588[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12169;
    }
    else if ((dword_1CD945188[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12171;
    }
    else if ((dword_1CD9460A0[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12173;
    }
    else if ((dword_1CD946B20[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12175;
    }
    else if ((dword_1CD947858[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12177;
    }
    else if ((dword_1CD948110[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12179;
    }
    else if ((dword_1CD948398[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12181;
    }
    else if ((dword_1CD9485D8[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12185;
    }
    else if ((dword_1CD9487D0[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12187;
    }
    else if ((dword_1CD948980[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12189;
    }
    else if ((dword_1CD948AE8[v15] & v17) != 0)
    {
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12191;
    }
    else
    {
      if ((dword_1CD948C08[v15] & v17) == 0)
      {
        int v37 = dword_1CD948CE0[v15];
        uint64_t v38 = 12197;
        if (!*(unsigned char *)(v12 + 280)) {
          uint64_t v38 = 12198;
        }
        if ((v37 & v17) != 0) {
          uint64_t v18 = v38;
        }
        else {
          uint64_t v18 = 0;
        }
        goto LABEL_50;
      }
      BOOL v35 = v13 == 0;
      uint64_t v36 = 12193;
    }
    if (v35) {
      uint64_t v18 = v36 + 1;
    }
    else {
      uint64_t v18 = v36;
    }
LABEL_50:
    int VirtualRegister = a4;
    goto LABEL_8;
  }
  BOOL v32 = v13 == 0;
  uint64_t v33 = 12183;
LABEL_17:
  if (v32) {
    uint64_t v18 = v33 + 1;
  }
  else {
    uint64_t v18 = v33;
  }
  int VirtualRegister = a4;
LABEL_8:
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(v20 + 56);
  llvm::MachinePointerInfo::getFixedStack((uint64_t ***)v20, a5, 0, (uint64_t)&v43);
  uint64_t v22 = *(void *)(v21 + 8) + 40 * (*(_DWORD *)(v21 + 32) + a5);
  uint64_t v23 = *(unsigned int *)(v22 + 8);
  char v24 = *(unsigned char *)(v22 + 16);
  long long v41 = v43;
  uint64_t v42 = v44;
  long long v46 = 0u;
  long long v47 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v20, (uint64_t)&v41, 1, v23, v24, &v46, 0, 1, 0, 0, 0);
  uint64_t v26 = a1;
  uint64_t v27 = sub_1CB85AA4C(a2, (unint64_t *)a3, &v45, *(void *)(a1 + 8) + 48 * v18, VirtualRegister);
  unint64_t v29 = v28;
  LODWORD(v46) = 5;
  *((void *)&v46 + 1) = 0;
  LODWORD(v47) = a5;
  llvm::MachineInstr::addOperand(v28, v27, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
  if (v13)
  {
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
  }
  else
  {
    if (v39[310])
    {
      uint64_t v34 = 1;
    }
    else if (v39[311])
    {
      uint64_t v34 = 2;
    }
    else
    {
      uint64_t v34 = 3;
      if (!v39[312]) {
        uint64_t v34 = 0;
      }
    }
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = v34;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
  }
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v46);
  llvm::MachineInstr::addMemOperand(v29, v27, MachineMemOperand);
  if (VirtualRegister != v40)
  {
    uint64_t v30 = sub_1CB85AA4C(a2, (unint64_t *)a3, &v45, *(void *)(v26 + 8) + 912, v40);
    *((void *)&v46 + 1) = 0;
    long long v47 = 0uLL;
    LODWORD(v46) = 256;
    DWORD1(v46) = VirtualRegister;
    llvm::MachineInstr::addOperand(v31, v30, (const llvm::MachineOperand *)&v46);
  }
  if (v45) {
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  }
}

uint64_t sub_1CD3D3E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 + 48);
  if (a2 + 48 == *(void *)(a2 + 56)) {
    return 0;
  }
  unint64_t v4 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (*(unsigned char *)v4 & 4) == 0)
  {
    while ((*(_WORD *)(v4 + 44) & 4) != 0)
      unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (sub_1CB834754(v4))
  {
    while (v4 != *(void *)(a2 + 56))
    {
      unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      if (!v4 || (*(unsigned char *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 4) != 0)
          unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((sub_1CB834754(v4) & 1) == 0) {
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  if (**(unsigned __int16 **)(v4 + 16) - 11575 > 1) {
    return 0;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v4);
  if (v2 == *(void **)(a2 + 56)) {
    return 1;
  }
  unint64_t v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v5 + 16) != 11576) {
    return 1;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v5);
  return 2;
}

uint64_t sub_1CD3D3F60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, char a10, char a11)
{
  int v11 = 0;
  switch(a1)
  {
    case 2:
    case 3:
      int v11 = a1;
      break;
    case 4:
      int v11 = 1;
      break;
    case 5:
      int v11 = 4;
      break;
    case 6:
      int v11 = 5;
      break;
    default:
      break;
  }
  if (!a7 && a9 == 1 || a7 == 1 && !a9)
  {
    if (a2) {
      int v12 = 32;
    }
    else {
      int v12 = 0;
    }
    int v13 = v12 | (v11 << 6);
    if (a3) {
      int v14 = 16;
    }
    else {
      int v14 = 0;
    }
    if (a4) {
      int v15 = 8;
    }
    else {
      int v15 = 0;
    }
    int v16 = v14 | v15;
    if (a5) {
      int v17 = 4;
    }
    else {
      int v17 = 0;
    }
    int v18 = v13 | v16 | v17;
    if (a6) {
      int v19 = 2;
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (char *)&unk_1CD91ED84 + 4 * (v18 | v19 | (a7 == 0));
  }
  else
  {
    if (a2) {
      int v22 = 64;
    }
    else {
      int v22 = 0;
    }
    int v23 = v22 | (v11 << 7);
    if (a3) {
      int v24 = 32;
    }
    else {
      int v24 = 0;
    }
    if (a4) {
      int v25 = 16;
    }
    else {
      int v25 = 0;
    }
    int v26 = v24 | v25;
    if (a5) {
      int v27 = 8;
    }
    else {
      int v27 = 0;
    }
    int v28 = v23 | v26 | v27;
    if (a6) {
      int v29 = 4;
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = v28 | v29 | (2 * (a7 != 3)) | a8;
    if (a9 || (a11 & 1) != 0)
    {
      if (a11) {
        unsigned int v31 = (char *)&unk_1CD91F384;
      }
      else {
        unsigned int v31 = (char *)&unk_1CD91D584;
      }
    }
    else
    {
      unsigned int v31 = (char *)&unk_1CD91E184;
    }
    uint64_t v20 = &v31[4 * v30];
  }
  return *(unsigned int *)v20;
}

uint64_t sub_1CD3D40C8(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, int a10)
{
  int v10 = dword_1CD923590[a1 - 10];
  if (!a8 && a10 == 1 || a8 == 1 && !a10)
  {
    if (a3) {
      int v11 = 32;
    }
    else {
      int v11 = 0;
    }
    int v12 = v11 | (v10 << 6);
    if (a4) {
      int v13 = 16;
    }
    else {
      int v13 = 0;
    }
    if (a5) {
      int v14 = 8;
    }
    else {
      int v14 = 0;
    }
    int v15 = v13 | v14;
    if (a6) {
      int v16 = 4;
    }
    else {
      int v16 = 0;
    }
    int v17 = v15 | v16;
    if (a7) {
      int v18 = 2;
    }
    else {
      int v18 = 0;
    }
    int v19 = (unsigned int *)((char *)&unk_1CD922784 + 4 * (v12 | v17 | v18 | (a8 == 0)));
  }
  else
  {
    if (a3) {
      int v21 = 64;
    }
    else {
      int v21 = 0;
    }
    int v22 = v21 | (v10 << 7);
    if (a4) {
      int v23 = 32;
    }
    else {
      int v23 = 0;
    }
    if (a5) {
      int v24 = 16;
    }
    else {
      int v24 = 0;
    }
    int v25 = v23 | v24;
    if (a6) {
      int v26 = 8;
    }
    else {
      int v26 = 0;
    }
    int v27 = v25 | v26;
    if (a7) {
      int v28 = 4;
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = v22 | v27 | v28 | (2 * (a8 != 3)) | a9;
    uint64_t v30 = (char *)&unk_1CD91FF84 + 4 * v29;
    unsigned int v31 = (char *)&unk_1CD921384 + 4 * v29;
    if (a10) {
      int v19 = (unsigned int *)v30;
    }
    else {
      int v19 = (unsigned int *)v31;
    }
  }
  return *v19;
}

uint64_t sub_1CD3D41EC(int a1, int a2, unsigned int a3, int a4, unsigned int a5)
{
  unint64_t v5 = (char *)&unk_1CD923184;
  uint64_t v6 = (char *)&unk_1CD923204;
  if (a1 != 2) {
    uint64_t v6 = (char *)&unk_1CD9231C4;
  }
  if (a1 != 1) {
    unint64_t v5 = v6;
  }
  uint64_t v7 = 2;
  if (a2) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8 | a3;
  if (!a4) {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)&v5[(4 * (v7 | a5)) | (16 * v9)];
}

uint64_t sub_1CD3D4248(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6 = dword_1CD923578[a1 - 1];
  if (a4) {
    int v7 = 4;
  }
  else {
    int v7 = 0;
  }
  if (a5) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = (char *)&unk_1CD923268 + 4 * (v8 | v7 | a6 | (8 * v6));
  if (a4) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  int v11 = (unsigned int *)((char *)&unk_1CD923328 + 4 * (v10 | a6 | (4 * v6)));
  if (!a3) {
    int v11 = (unsigned int *)v9;
  }
  return *v11;
}

uint64_t sub_1CD3D42B4(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6 = dword_1CD923590[a1 - 10];
  if (a4) {
    int v7 = 4;
  }
  else {
    int v7 = 0;
  }
  if (a5) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = (char *)&unk_1CD923388 + 4 * (v8 | v7 | a6 | (8 * v6));
  if (a4) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  int v11 = (unsigned int *)((char *)&unk_1CD9234C8 + 4 * (v10 | a6 | (4 * v6)));
  if (!a3) {
    int v11 = (unsigned int *)v9;
  }
  return *v11;
}

BOOL sub_1CD3D4320(uint64_t a1, unsigned int a2)
{
  return (*(unsigned char *)(*(void *)(a1 + 8) + 48 * a2 + 16) & 1) == 0;
}

uint64_t sub_1CD3D433C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, unsigned char *a6)
{
  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 308) >= 4u) {
    llvm::report_fatal_error((llvm *)"Unknown select opcode!", (const llvm::Twine *)1);
  }
  unsigned int v9 = 0x10001u >> (8 * (**(unsigned char **)(a2 + 16) - 52));
  *a4 = 1;
  *a5 = 2;
  int v10 = (_OWORD *)sub_1CB8968D4(a3, *(void *)(a2 + 32) + 96, 1);
  int v11 = (_OWORD *)(*(void *)a3 + 32 * *(unsigned int *)(a3 + 8));
  long long v12 = v10[1];
  *int v11 = *v10;
  v11[1] = v12;
  ++*(_DWORD *)(a3 + 8);
  int v13 = (_OWORD *)sub_1CB8968D4(a3, *(void *)(a2 + 32) + 128, 1);
  int v14 = (_OWORD *)(*(void *)a3 + 32 * *(unsigned int *)(a3 + 8));
  long long v15 = v13[1];
  *int v14 = *v13;
  v14[1] = v15;
  ++*(_DWORD *)(a3 + 8);
  *a6 = v9;
  return 0;
}

llvm::MachineInstr *sub_1CD3D4420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((**(unsigned __int16 **)(a2 + 16) | 2) != 0x136) {
    llvm::report_fatal_error((llvm *)"Unknown select opcode!", (const llvm::Twine *)1);
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v6 = sub_1CB895984(*(_DWORD *)(*(void *)(a2 + 32) + 64), *(_DWORD *)(*(void *)(a2 + 32) + 68), *(void *)(v5 + 24));
  int v7 = (uint64_t *)v6;
  if (!v6)
  {
    int v7 = (uint64_t *)sub_1CB895984(*(_DWORD *)(*(void *)(a2 + 32) + 32), *(_DWORD *)(*(void *)(a2 + 32) + 36), *(void *)(v5 + 24));
    if (!v7) {
      return 0;
    }
  }
  int v8 = sub_1CB84B030(*(void *)(a2 + 24), a2, (unsigned __int8 **)(a2 + 56), v7[2], *(_DWORD *)(*(void *)(a2 + 32) + 4));
  int v10 = v9;
  uint64_t v11 = v7[2];
  int v12 = *(unsigned __int16 *)(v11 + 2);
  if (v12 != 1)
  {
    unsigned int v20 = 1;
    do
    {
      if ((*(unsigned char *)(*(void *)(v11 + 40) + 6 * v20 + 2) & 2) != 0) {
        break;
      }
      unsigned int v21 = v20;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)(v7[4] + 32 * v20));
      unsigned int v20 = v21 + 1;
    }
    while (v12 != v21 + 1);
  }
  if (v6)
  {
    uint64_t v13 = 1;
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 3;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
  }
  else
  {
    LODWORD(v22) = 1;
    *((void *)&v22 + 1) = 0;
    *(void *)&long long v23 = 1;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
    uint64_t v13 = 2;
  }
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 128));
  int v14 = (long long *)(*(void *)(a2 + 32) + 32 * v13);
  long long v15 = v14[1];
  long long v22 = *v14;
  long long v23 = v15;
  LODWORD(v22) = v22 | 0x2000000;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
  llvm::MachineInstr::tieOperands((uint64_t)v10, 0, *((_DWORD *)v10 + 10) - 1);
  sub_1CB89694C((llvm::SmallPtrSetImplBase *)a3, (uint64_t)v10);
  int v16 = sub_1CB896AE8(a3, (uint64_t)v7);
  uint64_t v17 = *(void *)(a3 + 8);
  if (v17 == *(void *)a3) {
    int v18 = (unsigned int *)(a3 + 20);
  }
  else {
    int v18 = (unsigned int *)(a3 + 16);
  }
  if (v16 != (void *)(v17 + 8 * *v18))
  {
    *int v16 = -2;
    ++*(_DWORD *)(a3 + 24);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
  return v10;
}

BOOL sub_1CD3D463C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  unint64_t v2 = *((void *)v1 + 2);
  if ((v2 & 0x20) == 0) {
    return (v2 >> 12) & 1;
  }
  unsigned int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 32 * sub_1CD3D2308(*v1, 0xAu) + 16);
  BOOL result = 1;
  if (v4 > 5 || ((1 << v4) & 0x23) == 0) {
    return (v4 & 0xFFFFFFFB) == 2;
  }
  return result;
}

uint64_t sub_1CD3D46B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  int v8 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a7, *(void *)(a1 + 8) + 555600);
  uint64_t v12 = 0;
  uint64_t v13 = a3;
  int v11 = 4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v11);
  return 1;
}

uint64_t sub_1CD3D4720(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  uint64_t result = 0;
  unsigned int v6 = **(unsigned __int16 **)(a2 + 16);
  if (v6 <= 0xAF4)
  {
    if (v6 != 2770)
    {
      if (v6 != 2797) {
        return result;
      }
      uint64_t v7 = *(void *)(a2 + 32);
      if (*(void *)(v7 + 144) == 0x100000000 && !*(unsigned char *)(v7 + 64))
      {
        int v8 = 33;
LABEL_13:
        *a3 = *(_DWORD *)(v7 + 68);
        *a4 = *(_DWORD *)(v7 + 4);
        *a5 = v8;
        return 1;
      }
      return 0;
    }
LABEL_9:
    uint64_t v7 = *(void *)(a2 + 32);
    if (*(void *)(v7 + 144) == 0x100000000 && !*(unsigned char *)(v7 + 64))
    {
      int v8 = 1;
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 == 2805 || v6 == 2845) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1CD3D47BC(uint64_t a1, int *a2, _DWORD *a3, int *a4)
{
  uint64_t v4 = 0;
  unsigned int v5 = **(unsigned __int16 **)(a1 + 16);
  int v6 = 2;
  int v7 = 2;
  int v8 = 1;
  int v9 = 1;
  if (v5 <= 0x2E20)
  {
    if (**(unsigned __int16 **)(a1 + 16) <= 0x30Au)
    {
      if (**(unsigned __int16 **)(a1 + 16) <= 0x1BDu)
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x192:
LABEL_28:
            int v6 = 16;
            goto LABEL_32;
          case 0x193:
          case 0x195:
          case 0x197:
          case 0x199:
          case 0x19A:
          case 0x19B:
          case 0x19C:
          case 0x19D:
          case 0x19F:
          case 0x1A1:
          case 0x1A3:
            return v4;
          case 0x194:
            goto LABEL_44;
          case 0x196:
LABEL_34:
            int v7 = 16;
            goto LABEL_61;
          case 0x198:
            goto LABEL_43;
          case 0x19E:
            goto LABEL_62;
          case 0x1A0:
            goto LABEL_80;
          case 0x1A2:
LABEL_66:
            int v7 = 2;
            goto LABEL_61;
          case 0x1A4:
            goto LABEL_79;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x1AE:
              case 0x1B2:
                goto LABEL_60;
              case 0x1B0:
              case 0x1B4:
                goto LABEL_19;
              default:
                return v4;
            }
        }
      }
      else
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x2EF:
            goto LABEL_28;
          case 0x2F1:
            goto LABEL_44;
          case 0x2F3:
            goto LABEL_34;
          case 0x2F5:
            goto LABEL_43;
          case 0x2FB:
            goto LABEL_62;
          case 0x2FD:
            goto LABEL_80;
          case 0x2FF:
            goto LABEL_66;
          case 0x301:
            goto LABEL_79;
          default:
            return v4;
        }
      }
      return v4;
    }
    if (**(unsigned __int16 **)(a1 + 16) <= 0x2D83u)
    {
      if (**(unsigned __int16 **)(a1 + 16) <= 0x2D43u)
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x31B:
            goto LABEL_31;
          case 0x31C:
          case 0x31E:
          case 0x320:
          case 0x322:
          case 0x323:
          case 0x324:
          case 0x326:
          case 0x328:
          case 0x32A:
            return v4;
          case 0x31D:
            goto LABEL_87;
          case 0x31F:
            goto LABEL_63;
          case 0x321:
            goto LABEL_51;
          case 0x325:
            goto LABEL_64;
          case 0x327:
            goto LABEL_85;
          case 0x329:
            goto LABEL_65;
          case 0x32B:
            goto LABEL_84;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x30B:
              case 0x30F:
                goto LABEL_60;
              case 0x30D:
              case 0x311:
                goto LABEL_19;
              default:
                return v4;
            }
        }
        return v4;
      }
      if (**(unsigned __int16 **)(a1 + 16) <= 0x2D55u)
      {
        if (v5 != 11588)
        {
          if (v5 != 11590) {
            return v4;
          }
          goto LABEL_43;
        }
        goto LABEL_44;
      }
      if (v5 != 11606)
      {
        if (v5 != 11608) {
          return v4;
        }
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    if (**(unsigned __int16 **)(a1 + 16) > 0x2DCEu)
    {
      switch(**(_WORD **)(a1 + 16))
      {
        case 0x2E05:
          goto LABEL_28;
        case 0x2E06:
        case 0x2E08:
        case 0x2E0A:
        case 0x2E0C:
        case 0x2E0D:
        case 0x2E0E:
        case 0x2E0F:
        case 0x2E10:
        case 0x2E12:
        case 0x2E14:
        case 0x2E16:
          return v4;
        case 0x2E07:
          goto LABEL_44;
        case 0x2E09:
          goto LABEL_34;
        case 0x2E0B:
          goto LABEL_43;
        case 0x2E11:
          goto LABEL_62;
        case 0x2E13:
          goto LABEL_80;
        case 0x2E15:
          goto LABEL_66;
        case 0x2E17:
          goto LABEL_79;
        default:
          if (v5 == 11727) {
            goto LABEL_85;
          }
          int v16 = 11729;
          goto LABEL_83;
      }
    }
    if (**(unsigned __int16 **)(a1 + 16) <= 0x2DBAu)
    {
      if (v5 != 11652 && v5 != 11654)
      {
        if (v5 != 11705) {
          return v4;
        }
        goto LABEL_87;
      }
LABEL_19:
      int v8 = 4;
LABEL_20:
      int v9 = v8;
      goto LABEL_53;
    }
    if (v5 != 11707)
    {
      if (v5 == 11716) {
        goto LABEL_53;
      }
      if (v5 != 11718) {
        return v4;
      }
      goto LABEL_50;
    }
LABEL_51:
    int v9 = 8;
    goto LABEL_52;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x2E81u)
  {
    switch(**(_WORD **)(a1 + 16))
    {
      case 0x2E31:
LABEL_31:
        int v6 = 8;
        goto LABEL_32;
      case 0x2E32:
      case 0x2E34:
      case 0x2E36:
      case 0x2E38:
      case 0x2E3A:
      case 0x2E3C:
      case 0x2E3E:
      case 0x2E40:
      case 0x2E41:
      case 0x2E42:
      case 0x2E44:
      case 0x2E46:
      case 0x2E48:
        return v4;
      case 0x2E33:
        goto LABEL_87;
      case 0x2E35:
LABEL_63:
        int v7 = 8;
        goto LABEL_61;
      case 0x2E37:
        goto LABEL_51;
      case 0x2E39:
LABEL_30:
        int v6 = 1;
LABEL_32:
        int v7 = v6;
        goto LABEL_62;
      case 0x2E3B:
        goto LABEL_53;
      case 0x2E3D:
LABEL_76:
        int v7 = 1;
        goto LABEL_61;
      case 0x2E3F:
        goto LABEL_50;
      case 0x2E43:
LABEL_64:
        int v7 = 12;
        int v6 = 16;
        goto LABEL_62;
      case 0x2E45:
        goto LABEL_85;
      case 0x2E47:
LABEL_65:
        int v7 = 12;
LABEL_61:
        int v6 = 4;
LABEL_62:
        *a4 = v7;
        *a2 = 0;
        uint64_t v13 = (_DWORD *)(*(void *)(a1 + 32) + 48);
        goto LABEL_57;
      case 0x2E49:
        goto LABEL_84;
      default:
        JUMPOUT(0);
    }
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x339Cu)
  {
    switch(**(_WORD **)(a1 + 16))
    {
      case 0x2E92:
        goto LABEL_31;
      case 0x2E93:
      case 0x2E95:
      case 0x2E97:
      case 0x2E99:
      case 0x2E9B:
      case 0x2E9D:
      case 0x2E9F:
      case 0x2EA1:
      case 0x2EA2:
      case 0x2EA3:
      case 0x2EA5:
      case 0x2EA7:
      case 0x2EA9:
        return v4;
      case 0x2E94:
        goto LABEL_87;
      case 0x2E96:
        goto LABEL_63;
      case 0x2E98:
        goto LABEL_51;
      case 0x2E9A:
        goto LABEL_30;
      case 0x2E9C:
        goto LABEL_53;
      case 0x2E9E:
        goto LABEL_76;
      case 0x2EA0:
        goto LABEL_50;
      case 0x2EA4:
        goto LABEL_64;
      case 0x2EA6:
        goto LABEL_85;
      case 0x2EA8:
        goto LABEL_65;
      case 0x2EAA:
        goto LABEL_84;
      default:
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x2E82:
          case 0x2E86:
LABEL_60:
            int v7 = 4;
            goto LABEL_61;
          case 0x2E84:
          case 0x2E88:
            goto LABEL_19;
          default:
            return v4;
        }
    }
    return v4;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x3411u)
  {
    if (**(unsigned __int16 **)(a1 + 16) <= 0x33B0u)
    {
      if (v5 == 13213)
      {
LABEL_44:
        int v8 = 16;
        goto LABEL_20;
      }
      if (v5 == 13215)
      {
LABEL_43:
        int v9 = 16;
LABEL_52:
        int v8 = 4;
        goto LABEL_53;
      }
      if (v5 != 13231) {
        return v4;
      }
LABEL_80:
      int v9 = 2;
      int v8 = 2;
      goto LABEL_53;
    }
    if (v5 == 13233)
    {
LABEL_79:
      int v9 = 2;
      goto LABEL_52;
    }
    if (v5 != 13277 && v5 != 13279) {
      return v4;
    }
    goto LABEL_19;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x341Eu)
  {
    if (v5 == 13330)
    {
LABEL_87:
      int v8 = 8;
      goto LABEL_20;
    }
    if (v5 != 13332)
    {
      if (v5 != 13341) {
        return v4;
      }
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  if (v5 == 13343)
  {
LABEL_50:
    int v9 = 1;
    goto LABEL_52;
  }
  if (v5 != 13352)
  {
    int v16 = 13354;
LABEL_83:
    if (v5 != v16) {
      return v4;
    }
LABEL_84:
    int v9 = 12;
    goto LABEL_52;
  }
LABEL_85:
  int v9 = 12;
  int v8 = 16;
LABEL_53:
  *a4 = v9;
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v11 + 32)) {
    int v12 = *(_DWORD *)(v11 + 36) | 0x40000000;
  }
  else {
    int v12 = *(_DWORD *)(v11 + 36);
  }
  *a2 = v12;
  uint64_t v13 = (_DWORD *)(v11 + 80);
  int v6 = v8;
LABEL_57:
  *a3 = *v13 * v6;
  return 1;
}

uint64_t sub_1CD3D4CBC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 5) & 1;
}

void sub_1CD3D4CD0(void *a1)
{
}

void sub_1CD3D4CE0()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3D4D08(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_1CD3D4D30(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t sub_1CD3D4D58()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CD3D4D60()
{
  return 1;
}

uint64_t sub_1CD3D4D68()
{
  return 1;
}

uint64_t sub_1CD3D4D70()
{
  return 0;
}

uint64_t sub_1CD3D4D78()
{
  return 0;
}

uint64_t sub_1CD3D4D8C()
{
  return 1;
}

uint64_t sub_1CD3D4D94()
{
  return 1;
}

void sub_1CD3D4D9C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CD3D4DA4()
{
  return 1;
}

uint64_t sub_1CD3D4DB0()
{
  return 1;
}

uint64_t sub_1CD3D4DB8()
{
  return 0;
}

uint64_t sub_1CD3D4DC0()
{
  return 0;
}

uint64_t sub_1CD3D4DC8()
{
  return 0;
}

uint64_t sub_1CD3D4DD0()
{
  return 0;
}

uint64_t sub_1CD3D4DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t sub_1CD3D4DFC()
{
  return 0;
}

uint64_t sub_1CD3D4E04()
{
  return 0;
}

uint64_t sub_1CD3D4E10()
{
  return 0;
}

void sub_1CD3D4E18(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t sub_1CD3D4E24()
{
  return 0;
}

uint64_t sub_1CD3D4E2C()
{
  return 0;
}

uint64_t sub_1CD3D4E38()
{
  return 0;
}

uint64_t sub_1CD3D4E40()
{
  return 0;
}

uint64_t sub_1CD3D4E4C()
{
  return 0;
}

uint64_t sub_1CD3D4E54()
{
  return 0;
}

uint64_t sub_1CD3D4E5C()
{
  return 0;
}

uint64_t sub_1CD3D4E64()
{
  return 0;
}

uint64_t sub_1CD3D4E6C()
{
  return 0;
}

uint64_t sub_1CD3D4E74()
{
  return 0;
}

uint64_t sub_1CD3D4E7C()
{
  return 0;
}

uint64_t sub_1CD3D4E84()
{
  return 0;
}

uint64_t sub_1CD3D4E8C()
{
  return 0;
}

uint64_t sub_1CD3D4E94()
{
  return 0;
}

uint64_t sub_1CD3D4E9C()
{
  return 0;
}

uint64_t sub_1CD3D4EA4()
{
  return 0;
}

uint64_t sub_1CD3D4EAC()
{
  return 0;
}

void sub_1CD3D4EB4(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1CD3D4EC0()
{
  return 0;
}

uint64_t sub_1CD3D4EC8()
{
  return 0;
}

uint64_t sub_1CD3D4ED4()
{
  return 1;
}

double sub_1CD3D4EDC@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1CD91D2D0;
  *(void *)(a1 + 16) = a1 + 32;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 12022;
  *(_OWORD *)(a1 + 48) = xmmword_1CD91D2D0;
  *(_OWORD *)(a1 + 64) = xmmword_1CD91D2D0;
  *(_OWORD *)(a1 + 80) = xmmword_1CD91D2E0;
  *(void *)&double result = 0x800000004;
  *(void *)(a1 + 24) = 0x800000004;
  return result;
}

uint64_t sub_1CD3D4F20()
{
  return 0;
}

BOOL sub_1CD3D4F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  return (*(unsigned char *)(v2 + 10) & 0x40) != 0
      && (*(void *)(*(void *)(a2 + 32) + 32 * (*(unsigned __int16 *)(v2 + 2) - 2) + 16) & 0xFFFFFFFDLL) == 1;
}

uint64_t sub_1CD3D4F64()
{
  return 0;
}

uint64_t sub_1CD3D4F6C()
{
  return 0;
}

uint64_t sub_1CD3D4F78()
{
  return 0;
}

uint64_t sub_1CD3D4F80()
{
  return 0;
}

uint64_t sub_1CD3D4F88(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 10) >> 6) & 1;
}

uint64_t sub_1CD3D4F98()
{
  return 0;
}

uint64_t sub_1CD3D4FA0()
{
  return 0;
}

uint64_t sub_1CD3D4FA8()
{
  return 0;
}

uint64_t sub_1CD3D4FB0()
{
  return 0;
}

uint64_t sub_1CD3D4FB8()
{
  return 0;
}

uint64_t sub_1CD3D4FC0()
{
  return 1;
}

uint64_t sub_1CD3D4FC8()
{
  return 0;
}

uint64_t sub_1CD3D4FD4()
{
  return 0;
}

uint64_t sub_1CD3D4FDC()
{
  return 0;
}

uint64_t sub_1CD3D4FE8()
{
  return 0;
}

uint64_t sub_1CD3D4FF0()
{
  return 0;
}

uint64_t sub_1CD3D4FFC()
{
  return 0;
}

double sub_1CD3D5010@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[2] = *(void *)(a1 + 56);
  *a2 = a2 + 2;
  a2[3] = a1 + 48;
  *(void *)&double result = 0x300000001;
  a2[1] = 0x300000001;
  return result;
}

uint64_t sub_1CD3D5044()
{
  return 0;
}

uint64_t sub_1CD3D504C()
{
  return 0;
}

uint64_t sub_1CD3D5054(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t sub_1CD3D50EC(uint64_t a1)
{
  return *(void *)(a1 + 440);
}

uint64_t sub_1CD3D50F4(uint64_t a1, int a2)
{
  if (a2 <= 2) {
    return 2;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CD3D5108(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_1CD3D5110(uint64_t a1)
{
  return a1 + 80;
}

void sub_1CD3D511C(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3D5154()
{
  return 0;
}

uint64_t sub_1CD3D515C()
{
  return 0;
}

uint64_t sub_1CD3D5164()
{
  return 0;
}

uint64_t sub_1CD3D516C()
{
  return 1;
}

uint64_t sub_1CD3D517C()
{
  return 1;
}

uint64_t sub_1CD3D5194()
{
  return 0;
}

uint64_t sub_1CD3D519C()
{
  return 0;
}

uint64_t sub_1CD3D51A4()
{
  return 0;
}

uint64_t sub_1CD3D51AC()
{
  return 0;
}

uint64_t sub_1CD3D51B4()
{
  return 0;
}

uint64_t sub_1CD3D51C0()
{
  return 0;
}

uint64_t sub_1CD3D51C8()
{
  return 0;
}

uint64_t sub_1CD3D51D4()
{
  return 0;
}

void sub_1CD3D51DC(void *a1)
{
  *a1 = &unk_1F25EA498;
  uint64_t v2 = a1[55];
  a1[55] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[54];
  a1[54] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[10] = &unk_1F25ECEA0;
  uint64_t v4 = (void *)a1[45];
  if (v4 != a1 + 47) {
    free(v4);
  }
  llvm::TargetRegisterInfo::~TargetRegisterInfo((llvm::TargetRegisterInfo *)(a1 + 10));
}

void sub_1CD3D52A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::TargetInstrInfo::~TargetInstrInfo(v12);
}

void sub_1CD3D52CC()
{
}

llvm::raw_ostream *sub_1CD3D52E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return llvm::raw_ostream::operator<<(a2, a5);
}

uint64_t sub_1CD3D52F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void))
{
  return (**a4)(a4);
}

uint64_t sub_1CD3D531C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  LODWORD(v9) = a3;
  int v12 = *(unsigned __int16 *)(a2 + 24);
  if ((v12 - 198) <= 2)
  {
    uint64_t v13 = *(uint64_t **)(a2 + 32);
    if (*(unsigned char *)(*(void *)(*v13 + 40) + 16 * *((unsigned int *)v13 + 2)) == 4)
    {
      if (v12 == 198) {
        unsigned int v14 = a6 | 8;
      }
      else {
        unsigned int v14 = a6;
      }
      return sub_1CB896BAC(a1, *v13, v13[1], a4, a5, 0, 1, 0, 0, 0, v14);
    }
  }
  if (v12 != 171) {
    return 0;
  }
  int v16 = *(uint64_t **)(a2 + 32);
  uint64_t v17 = v16[5];
  int v18 = *(unsigned __int16 *)(v17 + 24);
  if (v18 != 35 && v18 != 11) {
    return 0;
  }
  uint64_t v20 = *(void *)(v17 + 80);
  if (*(_DWORD *)(v20 + 32) > 0x40u)
  {
    unint64_t v21 = **(void **)(v20 + 24);
    if (v21 >> 16) {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(v20 + 24);
    if (v21 >= 0x10000) {
      return 0;
    }
  }
  uint64_t v22 = a2;
  if (v21 == 0xFFFF)
  {
    uint64_t v22 = *v16;
    uint64_t v9 = v16[1];
  }
  uint64_t v23 = *(void *)(a1 + 296);
  int v24 = *(unsigned __int8 **)(a2 + 64);
  int v28 = v24;
  if (v24) {
    llvm::MetadataTracking::track((uint64_t)&v28, v24, 2);
  }
  int v29 = *(_DWORD *)(a2 + 60);
  int v25 = sub_1CD8015C0(v23, 1, (const llvm::APInt *)&v28, (llvm *)4, 0, v22, v9);
  unsigned int v27 = v26;
  if (v28) {
    llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
  }
  return sub_1CB896BAC(a1, (uint64_t)v25, v27, a4, a5, 0, 1, 0, 0, 0, a6);
}

uint64_t sub_1CD3D54B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v8) = a3;
  int v11 = *(unsigned __int16 *)(a2 + 24);
  if ((v11 - 198) <= 2)
  {
    int v12 = *(uint64_t **)(a2 + 32);
    if (*(unsigned char *)(*(void *)(*v12 + 40) + 16 * *((unsigned int *)v12 + 2)) == 4) {
      return sub_1CB896BAC(a1, *v12, v12[1], a4, a5, 0, 1, 0, 0, 0, 8 * (v11 == 198));
    }
  }
  if (v11 != 171) {
    goto LABEL_12;
  }
  unsigned int v14 = *(uint64_t **)(a2 + 32);
  uint64_t v15 = v14[5];
  int v16 = *(unsigned __int16 *)(v15 + 24);
  if (v16 != 35 && v16 != 11) {
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(v15 + 80);
  if (*(_DWORD *)(v18 + 32) > 0x40u)
  {
    unint64_t v19 = **(void **)(v18 + 24);
    if (v19 >> 16) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v19 = *(void *)(v18 + 24);
    if (v19 >= 0x10000)
    {
LABEL_12:
      return sub_1CD3D5680(a1, a2, a3, a4, a5, 16, a6);
    }
  }
  uint64_t v20 = a2;
  if (v19 == 0xFFFF)
  {
    uint64_t v20 = *v14;
    uint64_t v8 = v14[1];
  }
  uint64_t v21 = *(void *)(a1 + 296);
  uint64_t v22 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v26 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v26, v22, 2);
  }
  int v27 = *(_DWORD *)(a2 + 60);
  uint64_t v23 = sub_1CD8015C0(v21, 1, (const llvm::APInt *)&v26, (llvm *)4, 0, v20, v8);
  unsigned int v25 = v24;
  if (v26) {
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  }
  return sub_1CB896BAC(a1, (uint64_t)v23, v25, a4, a5, 0, 1, 0, 0, 0, 0);
}

uint64_t sub_1CD3D5680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  v52[16] = *MEMORY[0x1E4F143B8];
  int v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 != 35 && v7 != 11) {
    return 0;
  }
  uint64_t v15 = *(void *)(a2 + 80);
  unsigned int v16 = *(_DWORD *)(v15 + 32);
  if (v16 > 0x40) {
    unint64_t v17 = **(void **)(v15 + 24);
  }
  else {
    unint64_t v17 = (uint64_t)(*(void *)(v15 + 24) << -(char)v16) >> -(char)v16;
  }
  unint64_t v19 = *(unsigned __int8 **)(a2 + 64);
  long long v46 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v46, v19, 2);
  }
  int v47 = *(_DWORD *)(a2 + 60);
  if (a6 == 32)
  {
    if (v17 > 0xFFFFFFFF7FFFFFFFLL || a7 != 0)
    {
      *(void *)&long long v45 = sub_1CD7EBF14(*(void *)(a1 + 296), v17, (const llvm::APInt *)&v46, (llvm *)6, 0, 1, 0);
      *((void *)&v45 + 1) = v33;
      uint64_t v34 = *(void *)(a1 + 296);
      uint64_t v39 = v46;
      uint64_t v35 = v34;
      if (v46)
      {
        llvm::MetadataTracking::track((uint64_t)&v39, v46, 2);
        uint64_t v35 = *(void *)(a1 + 296);
      }
      int v40 = v47;
      *(void *)&long long v42 = sub_1CD7EEB94(v35, 0, (llvm *)5, 0);
      *((void *)&v42 + 1) = v36;
      uint64_t v41 = 0;
      long long v50 = v52;
      uint64_t v51 = 0x700000000;
      uint64_t v48 = 0;
      char v49 = 6;
      sub_1CD3D5EA0(v34, (uint64_t)&v50, (uint64_t)&v48);
      sub_1CB896FF0(v34, (uint64_t)&v50, &v45, &v45, &v45, &v42, (uint64_t)&v41);
      int v37 = sub_1CD801450(v34, 1445, (uint64_t)&v39, (llvm *)5, 0, (uint64_t *)v50, v51);
      if (v50 != v52) {
        free(v50);
      }
      *(void *)a4 = v37;
      *(_DWORD *)(a4 + 8) = 0;
      if (v39) {
        llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
      }
      uint64_t v29 = *(void *)(a1 + 296);
      uint64_t v18 = 1;
      uint64_t v30 = 8;
      goto LABEL_41;
    }
LABEL_30:
    uint64_t v18 = 0;
    goto LABEL_31;
  }
  if (a6 != 16) {
    goto LABEL_30;
  }
  if (v17 <= 0xFFFFFFFFFFFF7FFFLL && a7 == 0) {
    goto LABEL_30;
  }
  uint64_t v21 = sub_1CD7EBF14(*(void *)(a1 + 296), (unsigned __int16)v17 | 0x100000000, (const llvm::APInt *)&v46, (llvm *)6, 0, 1, 0);
  uint64_t v23 = v22;
  *(void *)&long long v45 = v21;
  *((void *)&v45 + 1) = v22;
  uint64_t v24 = *(void *)(a1 + 296);
  long long v43 = v46;
  uint64_t v25 = v24;
  if (v46)
  {
    llvm::MetadataTracking::track((uint64_t)&v43, v46, 2);
    uint64_t v25 = *(void *)(a1 + 296);
  }
  int v44 = v47;
  *(void *)&long long v42 = sub_1CD7EEB94(v25, 0, (llvm *)5, 0);
  *((void *)&v42 + 1) = v26;
  uint64_t v41 = 0;
  long long v50 = v52;
  uint64_t v51 = 0x800000000;
  uint64_t v48 = 0;
  char v49 = 6;
  sub_1CD3D5EA0(v24, (uint64_t)&v50, (uint64_t)&v48);
  if (v51 >= HIDWORD(v51)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v27 = (uint64_t **)((char *)v50 + 16 * v51);
  llvm::MachineFunction *v27 = v21;
  v27[1] = v23;
  LODWORD(v51) = v51 + 1;
  sub_1CB896FF0(v24, (uint64_t)&v50, &v45, &v45, &v45, &v42, (uint64_t)&v41);
  int v28 = sub_1CD801450(v24, 1015, (uint64_t)&v43, (llvm *)4, 0, (uint64_t *)v50, v51);
  if (v50 != v52) {
    free(v50);
  }
  *(void *)a4 = v28;
  *(_DWORD *)(a4 + 8) = 0;
  if (v43) {
    llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
  }
  uint64_t v29 = *(void *)(a1 + 296);
  uint64_t v18 = 1;
  uint64_t v30 = 8 * (v17 > 0xFFFFFFFFFFFF7FFFLL);
LABEL_41:
  *(void *)a5 = sub_1CD7EBF14(v29, v30, (const llvm::APInt *)&v46, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v38;
LABEL_31:
  if (v46) {
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  }
  return v18;
}

uint64_t sub_1CD3D5A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) <= 2
    && (int v7 = *(uint64_t **)(a2 + 32), *(unsigned char *)(*(void *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) == 4))
  {
    if (v6 == 198) {
      unsigned int v8 = a6 | 8;
    }
    else {
      unsigned int v8 = a6;
    }
    return sub_1CB896BAC(a1, *v7, v7[1], a4, a5, 0, 0, 0, 0, 0, v8);
  }
  else
  {
    return sub_1CD3D5680(a1, a2, a3, a4, a5, 16, 0);
  }
}

uint64_t sub_1CD3D5AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1CD3D5B68(&v9);
  if (result) {
    return sub_1CB896BAC(a1, v9, v10, a4, a5, 0, 1, 0, 0, 0, result);
  }
  return result;
}

uint64_t sub_1CD3D5B68(_DWORD *a1)
{
  uint64_t v1 = *(void *)a1;
  int v2 = *(unsigned __int16 *)(*(void *)a1 + 24);
  if (v2 == 58)
  {
    uint64_t v9 = *(uint64_t **)(v1 + 32);
    uint64_t v10 = v9[5];
    int v11 = *(unsigned __int16 *)(v10 + 24);
    if (v11 != 35 && v11 != 11) {
      return 0;
    }
    uint64_t v13 = *(void *)(v10 + 80);
    if (*(_DWORD *)(v13 + 32) > 0x40u)
    {
      unint64_t v14 = **(void **)(v13 + 24);
      if (v14 > 0x10) {
        return 0;
      }
    }
    else
    {
      unint64_t v14 = *(void *)(v13 + 24);
      if (v14 >= 0x11) {
        return 0;
      }
    }
    unsigned int v17 = 31 - __clz(v14);
    if (1 << v17 == v14)
    {
      uint64_t v18 = *v9;
      a1[2] = *((_DWORD *)v9 + 2);
      *(void *)a1 = v18;
      return v17 << 6;
    }
    return 0;
  }
  if (v2 != 175) {
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(v1 + 32);
  uint64_t v4 = v3[5];
  int v5 = *(unsigned __int16 *)(v4 + 24);
  if (v5 != 35 && v5 != 11) {
    return 0;
  }
  uint64_t v7 = *(void *)(v4 + 80);
  if (*(_DWORD *)(v7 + 32) <= 0x40u)
  {
    unint64_t v8 = *(void *)(v7 + 24);
    if (v8 >= 5) {
      return 0;
    }
    goto LABEL_20;
  }
  unint64_t v8 = **(void **)(v7 + 24);
  if (v8 > 4) {
    return 0;
  }
LABEL_20:
  uint64_t v15 = (v8 << 6);
  uint64_t v16 = *v3;
  a1[2] = *((_DWORD *)v3 + 2);
  *(void *)a1 = v16;
  return v15;
}

uint64_t sub_1CD3D5C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1CD3D5B68(&v9);
  if (result) {
    return sub_1CD3D531C(a1, v9, v10, a4, a5, result);
  }
  return result;
}

uint64_t sub_1CD3D5CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1CD3D5B68(&v9);
  if (result) {
    return sub_1CD3D5A5C(a1, v9, v10, a4, a5, result);
  }
  return result;
}

uint64_t sub_1CD3D5D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) <= 2
    && (uint64_t v7 = *(uint64_t **)(a2 + 32), *(unsigned char *)(*(void *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) == 5))
  {
    if (v6 == 198) {
      unsigned int v8 = a6 | 8;
    }
    else {
      unsigned int v8 = a6;
    }
    return sub_1CB896BAC(a1, *v7, v7[1], a4, a5, 0, 0, 0, 0, 0, v8);
  }
  else
  {
    return sub_1CD3D5680(a1, a2, a3, a4, a5, 32, 0);
  }
}

uint64_t sub_1CD3D5DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1CD3D5B68(&v9);
  if (result) {
    return sub_1CB896BAC(a1, v9, v10, a4, a5, 0, 0, 0, 0, 0, result);
  }
  return result;
}

uint64_t sub_1CD3D5E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = sub_1CD3D5B68(&v9);
  if (result) {
    return sub_1CD3D5D30(a1, v9, v10, a4, a5, result);
  }
  return result;
}

uint64_t *sub_1CD3D5EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a3;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t result = sub_1CD7EBF14(a1, v4, (const llvm::APInt *)v9, (llvm *)*(unsigned __int8 *)(a3 + 8), 0, 1, 0);
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v8 = (uint64_t **)(*(void *)a2 + 16 * v7);
  *unsigned int v8 = result;
  v8[1] = v6;
  ++*(_DWORD *)(a2 + 8);
  if (v9[0]) {
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)v9, v9[0]);
  }
  return result;
}

void sub_1CD3D5F48(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a2 + 16 * v3) = *a3;
  ++*(_DWORD *)(a2 + 8);
}

void sub_1CD3D5FB8()
{
}

const char *sub_1CD3D6024()
{
  return "AGX1 Instruction Selection";
}

uint64_t sub_1CD3D603C()
{
  return 1;
}

uint64_t sub_1CD3D6050()
{
  return 0;
}

uint64_t *sub_1CD3D6058(void *a1, const llvm::APInt *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned int a12)
{
  uint64_t v18 = *(void *)(a7 + 40) + 16 * a8;
  unint64_t v19 = *(llvm **)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  uint64_t v21 = sub_1CD7EE368(a1, a12);
  return sub_1CD7F6564(a1, (const char *)0xC0, a2, v19, v20, a3, a4, v23, a5, a6, a7, a8, a9, a10, v21, v22);
}

uint64_t sub_1CD3D60FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 28) == -1 || (v6 = sub_1CD808B84(a4), uint64_t result = sub_1CD808B84(a2), v6 > (int)result))
  {
    uint64_t v8 = a4 + 8;
    if (!a4) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 - 8;
    if (!a4) {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(void *)(v9 + 8);
    int v12 = *(void **)(v9 + 16);
    uint64_t v10 = (void *)(v9 + 8);
    *int v12 = v11;
    *(void *)(v11 + 8) = v12;
    *uint64_t v10 = 0;
    v10[1] = 0;
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = a2 + 8;
    *uint64_t v10 = v14;
    v10[1] = v13;
    *(void *)(v14 + 8) = v10;
    *(void *)uint64_t v13 = v10;
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(v13 + 20);
    return sub_1CD808B74(a4);
  }
  return result;
}

unsigned int *sub_1CD3D61B4(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  unsigned int v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 4) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 16 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 4);
  return result;
}

void sub_1CD3D6238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CCFCC50C(*(void *)(a1 + 296), a2, a3);
  sub_1CD808A6C(a3);
  int v6 = *(void **)(a1 + 296);

  sub_1CD7EA438(v6, a2);
}

uint64_t sub_1CD3D6290(uint64_t a1, long long *a2)
{
  sub_1CB8BDEEC((uint64_t)v4, a2);
  llvm::DiagnosticInfoOptimizationBase::insert(a1, (long long *)v4);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  return a1;
}

uint64_t *sub_1CD3D62F0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 11 || v6 == 35)
  {
    long long v16 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
    if ((_BYTE)v16) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v16);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v16);
    }
    uint64_t v9 = ExtendedSizeInBits;
    if (v8 == 1) {
    uint64_t v10 = *(void *)(a2 + 80);
    }
    uint64_t v11 = (void *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u) {
      uint64_t v11 = (void *)*v11;
    }
    unint64_t v12 = *v11 | ((unint64_t)(v9 == 16) << 32);
    uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v16 = v13;
    if (v13) {
      llvm::MetadataTracking::track((uint64_t)&v16, v13, 2);
    }
    DWORD2(v16) = *(_DWORD *)(a2 + 60);
    uint64_t v14 = sub_1CD7EBF14(a1, v12, (const llvm::APInt *)&v16, (llvm *)6, 0, 1, 0);
    if ((void)v16) {
      llvm::MetadataTracking::untrack((uint64_t)&v16, (unsigned __int8 *)v16);
    }
    return v14;
  }
  else
  {
    return sub_1CD3D6758(a1, a2, a3, a4);
  }
}

uint64_t *sub_1CD3D6434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _OWORD *a6, _OWORD *a7, _OWORD *a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD3D6C90(a1, (uint64_t)&v14, a5, a6, a7, a8);
  unint64_t v12 = sub_1CD801044(a1, 11085, a2, a3, a4, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3D650C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD3D6D20(a1, (uint64_t)&v14, a5, a6, a7, a8);
  unint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t sub_1CD3D65E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1CD3D60FC(a1, a2, a3, a4);
  if (*(_WORD *)(a4 + 56))
  {
    uint64_t v9 = 40 * *(unsigned __int16 *)(a4 + 56);
    uint64_t v10 = *(void *)(a4 + 32) + 8;
    do
    {
      uint64_t v11 = *(void *)(v10 - 8);
      if (*(_DWORD *)(v11 + 28) == -1) {
        uint64_t result = sub_1CD3D60FC(a1, a4, a5, v11);
      }
      v10 += 40;
      v9 -= 40;
    }
    while (v9);
  }
  return result;
}

uint64_t *sub_1CD3D6670(void *a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, llvm *a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = sub_1CD7F95FC((uint64_t)a1, (uint64_t)a6, a7, 1, 0);
  uint64_t v16 = v15;
  uint64_t v19 = a2;
  int v20 = a3;
  uint64_t v21 = sub_1CD7EEB94((uint64_t)a1, a5, a6, a7);
  uint64_t v22 = v17;
  return sub_1CD7F9A00(a1, (const char *)0x32, a4, v14, v16, &v19, 2);
}

uint64_t *sub_1CD3D6758(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 36 && v4 != 12) {
    return 0;
  }
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
  sub_1CB867534(*(void *)(a2 + 80) + 24, (uint64_t)&v18);
  if (v19 >= 0x41) {
    unint64_t v12 = (unsigned __int8 **)v18;
  }
  else {
    unint64_t v12 = &v18;
  }
  unint64_t v13 = (unint64_t)*v12 | ((unint64_t)(v11 == 9) << 32);
  if (v19 >= 0x41 && v18 != 0) {
    MEMORY[0x1D25D9CB0]();
  }
  uint64_t v15 = 0x80000000;
  if (v11 == 9) {
    uint64_t v15 = 0x8000;
  }
  if (!a4) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v13 ^ v15;
  uint64_t v17 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v18 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v18, v17, 2);
  }
  unsigned int v19 = *(_DWORD *)(a2 + 60);
  int v6 = sub_1CD7EBF14(a1, v16, (const llvm::APInt *)&v18, (llvm *)6, 0, 1, 0);
  if (v18) {
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  }
  return v6;
}

uint64_t sub_1CD3D6894(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 2176) + 480) + 281);
}

void sub_1CD3D68A4(void *a1)
{
  sub_1CD3D6BE0(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3D68DC(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  v37[18] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(a1 + 1648);
  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 1640) + 32 * v6;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    uint64_t v13 = 32 * v6;
    uint64_t v14 = *(void *)(a1 + 1640);
LABEL_3:
    uint64_t v15 = v13;
    uint64_t v16 = *(void *)(a1 + 1640);
    while (1)
    {
      if (v12 == *(_DWORD *)(v16 + 16) + *(_DWORD *)(v14 + 16))
      {
        int v17 = *(_DWORD *)(v16 + 20);
        if (*(_DWORD *)(v14 + 20) != v17) {
          break;
        }
      }
      v16 += 32;
      v15 -= 32;
      if (!v15)
      {
        v14 += 32;
        if (v14 != v11) {
          goto LABEL_3;
        }
        return 0;
      }
    }
    if (v17) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = v14;
    }
    if (v17) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v16;
    }
    if (!v12) {
      goto LABEL_34;
    }
    uint64_t v20 = 0;
    char v21 = 0;
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = 4 * v12;
    do
    {
      if (*(_DWORD *)(v22 + 20) != 1
        || (*(void *)v19 != *(void *)v22
         || *(_DWORD *)(v19 + 8) != *(_DWORD *)(v22 + 8)
         || *(_DWORD *)(*(void *)(a1 + 944) + v20) != *(_DWORD *)(v19 + 20)
         || *(_DWORD *)(*(void *)(a1 + 800) + v20) != *(_DWORD *)(v19 + 16))
        && (*(void *)v18 != *(void *)v22
         || *(_DWORD *)(v18 + 8) != *(_DWORD *)(v22 + 8)
         || *(_DWORD *)(*(void *)(a1 + 944) + v20) != *(_DWORD *)(v18 + 20)
         || *(_DWORD *)(*(void *)(a1 + 800) + v20) != *(_DWORD *)(v18 + 16)))
      {
        char v21 = 1;
      }
      v20 += 4;
      v22 += 24;
    }
    while (v23 != v20);
    if ((v21 & 1) == 0)
    {
LABEL_34:
      if (a6) {
        ++*a6;
      }
      if (a2 == 5) {
        int v25 = 835;
      }
      else {
        int v25 = 912;
      }
      uint64_t v26 = *(void *)(a1 + 2168);
      int v27 = *(unsigned __int8 **)a4;
      unsigned int v31 = v27;
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v31, v27, 2);
      }
      int v32 = *(_DWORD *)(a4 + 8);
      int v30 = 0;
      uint64_t v29 = 0;
      uint64_t v35 = v37;
      uint64_t v36 = 0x900000000;
      uint64_t v33 = 0;
      char v34 = 6;
      sub_1CD3D5EA0(v26, (uint64_t)&v35, (uint64_t)&v33);
      sub_1CD3D5F48(v26, (uint64_t)&v35, (_OWORD *)v19);
      uint64_t v33 = 0;
      char v34 = 6;
      sub_1CD3D5EA0(v26, (uint64_t)&v35, (uint64_t)&v33);
      sub_1CD3D5F48(v26, (uint64_t)&v35, (_OWORD *)v18);
      uint64_t v33 = 0;
      char v34 = 6;
      sub_1CD3D5EA0(v26, (uint64_t)&v35, (uint64_t)&v33);
      sub_1CB8BD0B0(v26, (uint64_t)&v35, *(_DWORD *)(v19 + 16), &v30, (uint64_t)&v29);
      int v28 = sub_1CD801450(v26, v25, (uint64_t)&v31, a2, a3, (uint64_t *)v35, v36);
      if (v35 != v37) {
        free(v35);
      }
      *(void *)a5 = v28;
      *(_DWORD *)(a5 + 8) = 0;
      if (v31) {
        llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
      }
      return 1;
    }
  }
  return 0;
}

void *sub_1CD3D6BE0(void *a1)
{
  *a1 = &unk_1F25EAB20;
  int v2 = (void *)a1[205];
  if (v2 != a1 + 207) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[202], 8);
  unsigned int v3 = (void *)a1[136];
  if (v3 != a1 + 138) {
    free(v3);
  }
  int v4 = (void *)a1[118];
  if (v4 != a1 + 120) {
    free(v4);
  }
  char v5 = (void *)a1[100];
  if (v5 != a1 + 102) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6 != a1 + 3) {
    free(v6);
  }
  return a1;
}

void sub_1CD3D6C90(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

void sub_1CD3D6D20(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);

  sub_1CD3D5F48(a1, a2, a6);
}

void sub_1CD3D6DA0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 24 * v2), 24 * ((-24 * v2 + 24 * a2 - 24) / 0x18) + 24);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t *sub_1CD3D6E40(uint64_t *a1, uint64_t a2)
{
  int v2 = **(unsigned __int8 **)(a2 + 40);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(**(void **)(a2 + 32) + 40)
                          + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
  if ((v2 == 4 || v2 == 9) && v3 == 9) {
    return sub_1CB8BFAB0(a1, a2);
  }
  if ((v3 - 9) <= 1) {
    return sub_1CD3D6E84(a1, a2);
  }
  return sub_1CB8BFFB8(a1, a2);
}

uint64_t *sub_1CD3D6E84(uint64_t *a1, uint64_t a2)
{
  int v4 = *(long long **)(a2 + 32);
  long long v5 = *v4;
  long long v46 = *(long long *)((char *)v4 + 40);
  v47[0] = v5;
  long long v6 = v4[5];
  long long v44 = *(long long *)((char *)v4 + 120);
  long long v45 = v6;
  uint64_t v7 = *(unsigned int *)(*((void *)v4 + 20) + 76);
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v41 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v41, v8, 2);
  }
  int v42 = *(_DWORD *)(a2 + 60);
  __int16 v40 = 0;
  __int16 v9 = *(_WORD *)(*(void *)a1[1] + 1020);
  if ((v7 - 7) > 1)
  {
    int v26 = v9 & 1;
    int v43 = sub_1CD3D75A0((void **)a1, v7, (unsigned int *)v47, (uint64_t)&v46, &v45, (uint64_t)&v44, (unsigned char *)&v40 + 1, &v40, 1);
    sub_1CB8C14AC((uint64_t)a1, (unsigned int *)&v43, (unsigned int *)v47, &v46, (uint64_t *)&v45, (uint64_t *)&v44, v26);
    int v27 = v43;
    long long v28 = v47[0];
    long long v29 = v46;
    long long v30 = v45;
    long long v31 = v44;
    int v38 = v41;
    if (v41) {
      llvm::MetadataTracking::track((uint64_t)&v38, v41, 2);
    }
    int v39 = v42;
    uint64_t v11 = sub_1CB8C2108(a1, v27, v28, *((uint64_t *)&v28 + 1), 0, v29, *((uint64_t *)&v29 + 1), 1, v30, v31, (const llvm::APInt *)&v38);
    if (v38) {
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    }
    int v10 = HIBYTE(v40);
  }
  else
  {
    int v10 = (v9 & 1) == 0;
    if (v7 == 7)
    {
      uint64_t v11 = (uint64_t *)v45;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v44;
      LOBYTE(v40) = 1;
    }
  }
  if (v10)
  {
    char v12 = &v45;
    if (!(_BYTE)v40) {
      char v12 = &v44;
    }
    uint64_t v13 = *(uint64_t **)v12;
    uint64_t v14 = *((void *)v12 + 1);
    uint64_t v15 = *(void *)&v47[0];
    int v16 = *(unsigned __int16 *)(*(void *)&v47[0] + 24);
    if (v16 == 36 || v16 == 12)
    {
      uint64_t v17 = *(void *)(*(void *)&v47[0] + 80);
      if (*(_UNKNOWN **)(v17 + 32) == &unk_1CFB2E344) {
        uint64_t v18 = *(void *)(v17 + 40);
      }
      else {
        uint64_t v18 = v17 + 24;
      }
      if ((*(unsigned char *)(v18 + 28) & 7) == 1)
      {
        uint64_t v11 = v13;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = *((void *)&v47[0] + 1);
      uint64_t v36 = v41;
      if (v41) {
        llvm::MetadataTracking::track((uint64_t)&v36, v41, 2);
      }
      int v37 = v42;
      *((void *)&v32 + 1) = v14;
      *(void *)&long long v32 = v13;
      uint64_t v11 = sub_1CB8C2108(a1, 1, v15, v19, 0, v15, v19, 1, (unint64_t)v11, v32, (const llvm::APInt *)&v36);
      if (v36) {
        llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
      }
    }
    uint64_t v20 = v46;
    int v21 = *(unsigned __int16 *)(v46 + 24);
    if (v21 == 36 || v21 == 12)
    {
      uint64_t v22 = *(void *)(v46 + 80);
      if (*(_UNKNOWN **)(v22 + 32) == &unk_1CFB2E344) {
        uint64_t v23 = *(void *)(v22 + 40);
      }
      else {
        uint64_t v23 = v22 + 24;
      }
      if ((*(unsigned char *)(v23 + 28) & 7) == 1) {
        uint64_t v11 = v13;
      }
    }
    else
    {
      uint64_t v25 = *((void *)&v46 + 1);
      char v34 = v41;
      if (v41) {
        llvm::MetadataTracking::track((uint64_t)&v34, v41, 2);
      }
      int v35 = v42;
      *((void *)&v33 + 1) = v14;
      *(void *)&long long v33 = v13;
      uint64_t v11 = sub_1CB8C2108(a1, 1, v20, v25, 0, v20, v25, 1, (unint64_t)v11, v33, (const llvm::APInt *)&v34);
      if (v34) {
        llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
      }
    }
  }
LABEL_26:
  if (v41) {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
  return v11;
}

uint64_t sub_1CD3D71D0(uint64_t a1, int *a2, unsigned int *a3, int a4)
{
  int v5 = a4;
  int v9 = 0;
  void v38[3] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)a3;
  unsigned int v11 = *(unsigned __int16 *)(*(void *)a3 + 24);
  if (v11 <= 0x22)
  {
    if (v11 != 11)
    {
      if (v11 != 12) {
        return v9 & v4;
      }
LABEL_9:
      sub_1CB87DDC4((uint64_t)v38, (uint64_t *)(*(void *)(v10 + 80) + 32));
      if ((_UNKNOWN *)v38[0] == &unk_1CFB2E344) {
        uint64_t v14 = (uint64_t *)v38[1];
      }
      else {
        uint64_t v14 = &v37;
      }
      if ((*((unsigned char *)v14 + 28) & 6) == 0) {
        goto LABEL_15;
      }
      uint64_t v15 = (*a2 == 5) ^ v5;
      if (v15 == 1)
      {
        if (sub_1CD3CFB60((uint64_t)&v37)) {
          goto LABEL_15;
        }
      }
      else if (sub_1CB8C0DF4((uint64_t)&v37))
      {
        goto LABEL_15;
      }
      sub_1CD3CFB7C((uint64_t)&v37, v15);
      if (!sub_1CB8456FC((uint64_t)&v37))
      {
        if (*a2 == 3)
        {
          int v28 = 2;
        }
        else
        {
          if (*a2 != 5) {
            goto LABEL_15;
          }
          int v28 = 4;
        }
        *a2 = v28;
        uint64_t v29 = *(void *)(a1 + 8);
        uint64_t v30 = *(void *)a3;
        long long v31 = *(unsigned __int8 **)(*(void *)a3 + 64);
        int v35 = v31;
        uint64_t v32 = v30;
        if (v31)
        {
          llvm::MetadataTracking::track((uint64_t)&v35, v31, 2);
          uint64_t v32 = *(void *)a3;
        }
        int v36 = *(_DWORD *)(v30 + 60);
        uint64_t v33 = *(void *)(v32 + 40) + 16 * a3[2];
        *(void *)a3 = sub_1CD7ECA8C(v29, (llvm::LLVMContext *)&v37, (const llvm::APFloat *)&v35, *(llvm **)v33, *(void *)(v33 + 8), 0);
        a3[2] = v34;
        if (v35) {
          llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
        }
        int v4 = 1;
        goto LABEL_16;
      }
LABEL_15:
      int v4 = 0;
LABEL_16:
      sub_1CB87DEE4(v38);
LABEL_17:
      int v9 = 1;
      return v9 & v4;
    }
    goto LABEL_7;
  }
  if (v11 == 36) {
    goto LABEL_9;
  }
  if (v11 == 35)
  {
LABEL_7:
    uint64_t v12 = *(void *)(v10 + 80);
    uint64_t v13 = (const llvm::APInt *)(v12 + 24);
    LODWORD(v38[0]) = *(_DWORD *)(v12 + 32);
    if (LODWORD(v38[0]) > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v37, v13);
    }
    uint64_t v37 = *(void *)v13;
    int v17 = *a2;
    if (*a2 == 21 || v17 == 13) {
      int v5 = a4 ^ 1;
    }
    if ((v17 - 18) <= 3)
    {
      if (v5)
      {
        if (sub_1CB8C0D18((uint64_t)&v37)) {
          goto LABEL_42;
        }
        goto LABEL_26;
      }
      if (sub_1CB8C0D84((llvm::APInt *)&v37)) {
        goto LABEL_42;
      }
LABEL_50:
      uint64_t v18 = (const llvm::APInt *)llvm::APInt::operator++((uint64_t)&v37);
      goto LABEL_27;
    }
    if (v5)
    {
      if (v37)
      {
LABEL_26:
        uint64_t v18 = (const llvm::APInt *)llvm::APInt::operator--((uint64_t)&v37);
LABEL_27:
        if (LODWORD(v38[0]) > 0x40 || (unsigned int v19 = *((_DWORD *)v18 + 2), v19 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v37, v18);
        }
        else
        {
          uint64_t v37 = *(void *)v18;
          LODWORD(v38[0]) = v19;
        }
        HIDWORD(v21) = *a2 - 11;
        LODWORD(v21) = HIDWORD(v21);
        unsigned int v20 = v21 >> 1;
        if (v20 <= 5 && ((0x33u >> v20) & 1) != 0)
        {
          *a2 = dword_1CD935E48[v20];
          uint64_t v22 = *(void *)(a1 + 8);
          uint64_t v23 = *(void *)a3;
          uint64_t v24 = *(unsigned __int8 **)(*(void *)a3 + 64);
          int v35 = v24;
          if (v24)
          {
            llvm::MetadataTracking::track((uint64_t)&v35, v24, 2);
            uint64_t v25 = *(void *)a3;
          }
          else
          {
            uint64_t v25 = v23;
          }
          int v36 = *(_DWORD *)(v23 + 60);
          int v26 = (uint64_t *)(*(void *)(v25 + 40) + 16 * a3[2]);
          *(void *)a3 = sub_1CD7EBB14(v22, (llvm::LLVMContext *)&v37, (const llvm::APInt *)&v35, *v26, v26[1], 0, 0);
          a3[2] = v27;
          if (v35) {
            llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
          }
          int v4 = 1;
          goto LABEL_43;
        }
LABEL_42:
        int v4 = 0;
LABEL_43:
        if (LODWORD(v38[0]) >= 0x41 && v37) {
          MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
        }
        goto LABEL_17;
      }
    }
    else if (LODWORD(v38[0]))
    {
      if (v37 == 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v38[0])) {
        goto LABEL_42;
      }
      goto LABEL_50;
    }
    int v4 = 0;
    goto LABEL_17;
  }
  return v9 & v4;
}

uint64_t sub_1CD3D75A0(void **a1, uint64_t a2, unsigned int *a3, uint64_t a4, long long *a5, uint64_t a6, unsigned char *a7, unsigned char *a8, char a9)
{
  unsigned int v23 = a2;
  __int16 v16 = *(_WORD *)(*a1[1] + 1020);
  *a7 = 0;
  *a8 = 0;
  int v17 = *(unsigned __int8 *)((*a1)[60] + 281);
  switch((int)a2)
  {
    case 17:
      uint64_t v18 = 1;
      goto LABEL_24;
    case 18:
      uint64_t v18 = 2;
      goto LABEL_24;
    case 19:
      uint64_t v18 = 3;
      goto LABEL_24;
    case 20:
      uint64_t v18 = 4;
      goto LABEL_24;
    case 21:
      uint64_t v18 = 5;
      goto LABEL_24;
    case 22:
      uint64_t v18 = 6;
LABEL_24:
      unsigned int v23 = v18;
      break;
    default:
      uint64_t v18 = a2;
      *a7 = 1;
      break;
  }
  if (v16)
  {
    *a7 = 0;
    switch((int)v18)
    {
      case 9:
        uint64_t v18 = 1;
        goto LABEL_33;
      case 10:
        uint64_t v18 = 2;
        goto LABEL_33;
      case 11:
        uint64_t v18 = 3;
        goto LABEL_33;
      case 12:
        uint64_t v18 = 4;
        goto LABEL_33;
      case 13:
        uint64_t v18 = 5;
        goto LABEL_33;
      case 14:
        uint64_t v18 = 6;
LABEL_33:
        unsigned int v23 = v18;
        break;
      default:
        break;
    }
  }
  else if ((v18 - 9) <= 5)
  {
    unint64_t v21 = (void *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
    uint64_t v18 = sub_1CD7E9F74(v18, *v21, v21[1]);
    unsigned int v23 = v18;
    long long v24 = *a5;
    int v22 = *(_DWORD *)(a6 + 8);
    *(void *)a5 = *(void *)a6;
    *((_DWORD *)a5 + 2) = v22;
    *(void *)a6 = v24;
    *(_DWORD *)(a6 + 8) = DWORD2(v24);
  }
  if (v17 && (a9 & 1) != 0) {
    goto LABEL_9;
  }
  if (*a7)
  {
    sub_1CD3D77F0((uint64_t)a1, (int *)&v23, (uint64_t)a3, a4, *(void *)a5, *((void *)a5 + 1), *(void *)a6, *(void *)(a6 + 8), 0);
    uint64_t v18 = v23;
  }
  switch(v18)
  {
    case 3:
      uint64_t v18 = 4;
      goto LABEL_27;
    case 6:
      uint64_t v18 = 1;
      goto LABEL_27;
    case 5:
      uint64_t v18 = 2;
LABEL_27:
      long long v24 = *a5;
      int v20 = *(_DWORD *)(a6 + 8);
      *(void *)a5 = *(void *)a6;
      *((_DWORD *)a5 + 2) = v20;
      *(void *)a6 = v24;
      *(_DWORD *)(a6 + 8) = DWORD2(v24);
      *a8 = 1;
      return v18;
  }
LABEL_9:
  *a7 = 0;
  return v18;
}

uint64_t sub_1CD3D77F0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  if (!sub_1CB8C0EC0(*(void *)a3) && !sub_1CB8C0EC0(*(void *)a4)) {
    goto LABEL_34;
  }
  int v17 = *(_DWORD *)(a3 + 8);
  uint64_t v18 = *(void *)a4;
  if (*(void *)a3 == a5 && v17 == a6)
  {
    int v20 = *(_DWORD *)(a4 + 8);
    if (v18 == a7 && v20 == a8) {
      goto LABEL_19;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a4 + 8);
  }
  if (v18 == a5 && v20 == a6 && *(void *)a3 == a7 && v17 == a8)
  {
LABEL_19:
    uint64_t result = 0;
    HIDWORD(v25) = *a2 - 3;
    LODWORD(v25) = HIDWORD(v25);
    switch((v25 >> 1))
    {
      case 0u:
        int v26 = 2;
        goto LABEL_32;
      case 1u:
        int v26 = 4;
        goto LABEL_32;
      case 4u:
        int v26 = 10;
        goto LABEL_32;
      case 5u:
        int v26 = 12;
        goto LABEL_32;
      case 8u:
        int v26 = 18;
        goto LABEL_32;
      case 9u:
        int v26 = 20;
LABEL_32:
        *a2 = v26;
        return 1;
      default:
        return result;
    }
  }
LABEL_34:
  if (sub_1CD3D71D0(a1, a2, (unsigned int *)a4, a9 ^ 1u)) {
    return 1;
  }

  return sub_1CD3D71D0(a1, a2, (unsigned int *)a3, a9);
}

unint64_t sub_1CD3D796C(llvm::EVT *this, uint64_t a2, BOOL a3)
{
  if (*(unsigned char *)this)
  {
    if (*(unsigned __int8 *)this - 15 >= 0x9C)
    {
      unsigned __int8 v7 = *(unsigned char *)this;
      LOBYTE(v4) = sub_1CD3D9200(&v7);
      unint64_t v5 = 0;
      return v5 | v4;
    }
    goto LABEL_6;
  }
  if (llvm::EVT::isExtendedVector(this))
  {
LABEL_6:
    unint64_t v4 = sub_1CD3D91B4(this, a2, a3);
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF00;
    return v5 | v4;
  }
  unint64_t v4 = llvm::EVT::changeExtendedTypeToInteger(this);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF00;
  return v5 | v4;
}

uint64_t *sub_1CD3D79F0(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, long long a9, long long a10, const llvm::APInt *a11)
{
  unsigned int v12 = a7;
  v172[24] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v169 = a3;
  *((void *)&v169 + 1) = a4;
  *(void *)&long long v168 = a6;
  *((void *)&v168 + 1) = a7;
  long long v167 = a9;
  long long v166 = a10;
  int v165 = a2;
  unsigned int v143 = a4;
  uint64_t v158 = (uint64_t)sub_1CD3D6758(a1[1], a3, a4, a5);
  unint64_t v16 = v15;
  uint64_t v161 = a6;
  unsigned int v142 = v12;
  int v152 = a8;
  int v17 = sub_1CD3D6758(a1[1], a6, v12, a8);
  unint64_t v19 = v18;
  int v20 = sub_1CD3D62F0(a1[1], a9, DWORD2(a9), 0);
  uint64_t v22 = v21;
  unsigned int v23 = sub_1CD3D62F0(a1[1], a10, DWORD2(a10), 0);
  unint64_t v25 = v24;
  uint64_t v144 = a1[1];
  unint64_t v146 = v16;
  __int16 v159 = *(_WORD *)(*(void *)v144 + 1020);
  uint64_t v150 = (uint64_t)v23;
  uint64_t v151 = (uint64_t)v17;
  unint64_t v147 = v19;
  uint64_t v148 = v22;
  uint64_t v149 = (uint64_t)v20;
  int v26 = sub_1CD3D8A90(v158, v16, (uint64_t)v17, v19, (uint64_t)v20, v22, (uint64_t)v23, v24);
  int v27 = v26;
  int v28 = *(unsigned __int16 *)(a3 + 24);
  int v29 = v28;
  int v30 = v28;
  uint64_t v31 = a3;
  if (v28 == 215)
  {
    uint64_t v31 = **(void **)(a3 + 32);
    int v30 = *(unsigned __int16 *)(v31 + 24);
  }
  if (v30 == 222)
  {
    uint64_t v31 = **(void **)(v31 + 32);
    int v30 = *(unsigned __int16 *)(v31 + 24);
  }
  if (v30 == 223) {
    int v30 = *(unsigned __int16 *)(**(void **)(v31 + 32) + 24);
  }
  int v32 = v30 == 395;
  int v33 = *(unsigned __int16 *)(v161 + 24);
  int v34 = v33;
  uint64_t v35 = v161;
  if (v33 == 215)
  {
    uint64_t v35 = **(void **)(v161 + 32);
    int v34 = *(unsigned __int16 *)(v35 + 24);
  }
  if (v34 == 222)
  {
    uint64_t v35 = **(void **)(v35 + 32);
    int v34 = *(unsigned __int16 *)(v35 + 24);
  }
  if (v34 == 223) {
    int v34 = *(unsigned __int16 *)(**(void **)(v35 + 32) + 24);
  }
  if (v34 == 395) {
    ++v32;
  }
  int v36 = *(unsigned __int16 *)(a9 + 24);
  int v37 = v36;
  uint64_t v38 = a9;
  if (v36 == 215)
  {
    uint64_t v38 = **(void **)(a9 + 32);
    int v37 = *(unsigned __int16 *)(v38 + 24);
  }
  if (v37 == 222)
  {
    uint64_t v38 = **(void **)(v38 + 32);
    int v37 = *(unsigned __int16 *)(v38 + 24);
  }
  unint64_t v154 = v25;
  if (v37 == 223) {
    int v37 = *(unsigned __int16 *)(**(void **)(v38 + 32) + 24);
  }
  if (v37 == 395) {
    ++v32;
  }
  int v39 = *(unsigned __int16 *)(a10 + 24);
  int v40 = v39;
  uint64_t v41 = a10;
  if (v39 == 215)
  {
    uint64_t v41 = **(void **)(a10 + 32);
    int v40 = *(unsigned __int16 *)(v41 + 24);
  }
  if (v40 == 222)
  {
    uint64_t v41 = **(void **)(v41 + 32);
    int v40 = *(unsigned __int16 *)(v41 + 24);
  }
  if (v40 == 223) {
    int v40 = *(unsigned __int16 *)(**(void **)(v41 + 32) + 24);
  }
  if (v40 == 395) {
    int v42 = v32 + 1;
  }
  else {
    int v42 = v32;
  }
  uint64_t v43 = a3;
  if (v28 == 212)
  {
    uint64_t v43 = **(void **)(a3 + 32);
    int v29 = *(unsigned __int16 *)(v43 + 24);
  }
  if (v29 == 222)
  {
    uint64_t v43 = **(void **)(v43 + 32);
    int v29 = *(unsigned __int16 *)(v43 + 24);
  }
  if (v29 == 223) {
    int v29 = *(unsigned __int16 *)(**(void **)(v43 + 32) + 24);
  }
  int v44 = v29 == 395;
  int v45 = *(unsigned __int16 *)(v161 + 24);
  uint64_t v46 = v161;
  if (v33 == 212)
  {
    uint64_t v46 = **(void **)(v161 + 32);
    int v45 = *(unsigned __int16 *)(v46 + 24);
  }
  if (v45 == 222)
  {
    uint64_t v46 = **(void **)(v46 + 32);
    int v45 = *(unsigned __int16 *)(v46 + 24);
  }
  if (v45 == 223) {
    int v45 = *(unsigned __int16 *)(**(void **)(v46 + 32) + 24);
  }
  if (v45 == 395) {
    ++v44;
  }
  int v47 = *(unsigned __int16 *)(a9 + 24);
  uint64_t v48 = a9;
  if (v36 == 212)
  {
    uint64_t v48 = **(void **)(a9 + 32);
    int v47 = *(unsigned __int16 *)(v48 + 24);
  }
  if (v47 == 222)
  {
    uint64_t v48 = **(void **)(v48 + 32);
    int v47 = *(unsigned __int16 *)(v48 + 24);
  }
  if (v47 == 223) {
    int v47 = *(unsigned __int16 *)(**(void **)(v48 + 32) + 24);
  }
  if (v47 == 395) {
    ++v44;
  }
  int v49 = *(unsigned __int16 *)(a10 + 24);
  uint64_t v50 = a10;
  if (v39 == 212)
  {
    uint64_t v50 = **(void **)(a10 + 32);
    int v49 = *(unsigned __int16 *)(v50 + 24);
  }
  if (v49 == 222)
  {
    uint64_t v50 = **(void **)(v50 + 32);
    int v49 = *(unsigned __int16 *)(v50 + 24);
  }
  if (v49 == 223) {
    int v49 = *(unsigned __int16 *)(**(void **)(v50 + 32) + 24);
  }
  if (v49 == 395) {
    int v51 = v44 + 1;
  }
  else {
    int v51 = v44;
  }
  if ((v51 + v26) >= 3)
  {
    uint64_t v71 = v158;
    if (v158
      && v149
      && (v28 == 36 || v28 == 12)
      && ((uint64_t v72 = *(void *)(a3 + 80), *(_UNKNOWN **)(v72 + 32) != &unk_1CFB2E344)
        ? (uint64_t v73 = v72 + 24)
        : (uint64_t v73 = *(void *)(v72 + 40)),
          (*(unsigned char *)(v73 + 28) & 7) == 3
       && (v36 == 36 || v36 == 12)
       && ((uint64_t v120 = *(void *)(a9 + 80), *(_UNKNOWN **)(v120 + 32) != &unk_1CFB2E344)
         ? (uint64_t v121 = v120 + 24)
         : (uint64_t v121 = *(void *)(v120 + 40)),
           (*(unsigned char *)(v121 + 28) & 7) == 3)))
    {
      uint64_t v71 = v149;
      unint64_t v122 = v146 & 0xFFFFFFFF00000000 | v148;
    }
    else if (v158 {
           && v150
    }
           && (v28 == 36 || v28 == 12)
           && ((uint64_t v123 = *(void *)(a3 + 80), *(_UNKNOWN **)(v123 + 32) != &unk_1CFB2E344)
             ? (uint64_t v124 = v123 + 24)
             : (uint64_t v124 = *(void *)(v123 + 40)),
               (*(unsigned char *)(v124 + 28) & 7) == 3
            && (v39 == 36 || v39 == 12)
            && ((uint64_t v125 = *(void *)(a10 + 80), *(_UNKNOWN **)(v125 + 32) != &unk_1CFB2E344)
              ? (uint64_t v126 = v125 + 24)
              : (uint64_t v126 = *(void *)(v125 + 40)),
                (*(unsigned char *)(v126 + 28) & 7) == 3)))
    {
      unint64_t v122 = v146 & 0xFFFFFFFF00000000 | v154;
      uint64_t v71 = v150;
    }
    else
    {
      if (v17
        && v149
        && (v33 == 36 || v33 == 12)
        && ((uint64_t v127 = *(void *)(v161 + 80), *(_UNKNOWN **)(v127 + 32) != &unk_1CFB2E344)
          ? (uint64_t v128 = v127 + 24)
          : (uint64_t v128 = *(void *)(v127 + 40)),
            (*(unsigned char *)(v128 + 28) & 7) == 3
         && (v36 == 36 || v36 == 12)
         && ((uint64_t v129 = *(void *)(a9 + 80), *(_UNKNOWN **)(v129 + 32) != &unk_1CFB2E344)
           ? (uint64_t v130 = v129 + 24)
           : (uint64_t v130 = *(void *)(v129 + 40)),
             (*(unsigned char *)(v130 + 28) & 7) == 3)))
      {
        unint64_t v147 = v147 & 0xFFFFFFFF00000000 | v148;
        uint64_t v151 = v149;
      }
      else if (v17)
      {
        unint64_t v122 = v146;
        if (v150 && (v33 == 36 || v33 == 12))
        {
          uint64_t v131 = *(void *)(v161 + 80);
          uint64_t v132 = *(_UNKNOWN **)(v131 + 32) == &unk_1CFB2E344 ? *(void *)(v131 + 40) : v131 + 24;
          if ((*(unsigned char *)(v132 + 28) & 7) == 3 && (v39 == 36 || v39 == 12))
          {
            uint64_t v134 = *(void *)(a10 + 80);
            uint64_t v135 = *(_UNKNOWN **)(v134 + 32) == &unk_1CFB2E344 ? *(void *)(v134 + 40) : v134 + 24;
            if ((*(unsigned char *)(v135 + 28) & 7) == 3)
            {
              unint64_t v147 = v147 & 0xFFFFFFFF00000000 | v154;
              uint64_t v151 = v150;
            }
          }
        }
        goto LABEL_222;
      }
      unint64_t v122 = v146;
    }
LABEL_222:
    uint64_t v158 = v71;
    unint64_t v146 = v122;
    int v133 = sub_1CD3D8A90(v71, v122, v151, v147, v149, v148, v150, v154);
    if ((v133 + v51) >= 3)
    {
      if (v151)
      {
        int v137 = v146;
        uint64_t v138 = v158;
        if (v33 == 36 || v33 == 12)
        {
          uint64_t v139 = *(void *)(v161 + 80);
          if (*(_UNKNOWN **)(v139 + 32) == &unk_1CFB2E344) {
            uint64_t v140 = *(void *)(v139 + 40);
          }
          else {
            uint64_t v140 = v139 + 24;
          }
          unint64_t v141 = v147;
          uint64_t v136 = v151;
          if ((*(unsigned char *)(v140 + 28) & 7) == 3)
          {
            uint64_t v136 = 0;
            unint64_t v141 = v147 & 0xFFFFFFFF00000000;
          }
          unint64_t v147 = v141;
        }
        else
        {
          uint64_t v136 = v151;
        }
      }
      else
      {
        uint64_t v136 = 0;
        int v137 = v146;
        uint64_t v138 = v158;
      }
      uint64_t v151 = v136;
      int v133 = sub_1CD3D8A90(v138, v137, v136, v147, v149, v148, v150, v154);
    }
    int v27 = v133;
  }
  BOOL v52 = a2 != 1 && (v158 | v151) != 0;
  if (v159)
  {
    if (*(unsigned char *)(*(void *)(*a1 + 480) + 281)) {
      char v53 = 1;
    }
    else {
      char v53 = v52;
    }
  }
  else
  {
    char v53 = 0;
  }
  if (sub_1CB8C2014(a9))
  {
    BOOL v54 = 1;
  }
  else
  {
    if (v36 == 36 || v36 == 12)
    {
      uint64_t v59 = *(void *)(a9 + 80);
      if (*(_UNKNOWN **)(v59 + 32) == &unk_1CFB2E344) {
        uint64_t v60 = *(void *)(v59 + 40);
      }
      else {
        uint64_t v60 = v59 + 24;
      }
      unsigned int v55 = DWORD2(a10);
      BOOL v54 = (*(unsigned char *)(v60 + 28) & 7) == 3;
      goto LABEL_75;
    }
    BOOL v54 = 0;
  }
  unsigned int v55 = DWORD2(a10);
LABEL_75:
  if (sub_1CB8C2014(a10))
  {
    BOOL v56 = 1;
  }
  else if (v39 == 36 || v39 == 12)
  {
    uint64_t v61 = *(void *)(a10 + 80);
    if (*(_UNKNOWN **)(v61 + 32) == &unk_1CFB2E344) {
      uint64_t v62 = *(void *)(v61 + 40);
    }
    else {
      uint64_t v62 = v61 + 24;
    }
    BOOL v56 = (*(unsigned char *)(v62 + 28) & 7) == 3;
  }
  else
  {
    BOOL v56 = 0;
  }
  if ((v42 + v27) < 3) {
    goto LABEL_81;
  }
  if (v54)
  {
    if ((v53 & 1) == 0 && !sub_1CB8C208C(a10) && !v56) {
      goto LABEL_81;
    }
  }
  else if (!v56)
  {
LABEL_81:
    if (v27 == 3)
    {
      unint64_t v57 = v154;
      if (v150)
      {
        uint64_t v150 = 0;
        unint64_t v57 = v154 & 0xFFFFFFFF00000000;
      }
      else if (v149)
      {
        v148 &= 0xFFFFFFFF00000000;
        uint64_t v149 = 0;
      }
      else if (v151)
      {
        uint64_t v151 = 0;
        v147 &= 0xFFFFFFFF00000000;
      }
      else
      {
        uint64_t v151 = 0;
        unint64_t v58 = v146;
        if (v158) {
          unint64_t v58 = v146 & 0xFFFFFFFF00000000;
        }
        unint64_t v146 = v58;
        uint64_t v158 = 0;
      }
    }
    else
    {
      unint64_t v57 = v154;
    }
    uint64_t v74 = sub_1CD7EBF14(v144, 0, a11, (llvm *)5, 0, 1, 0);
    uint64_t v76 = v75;
    uint64_t v155 = sub_1CD7EEB94(a1[1], 0, (llvm *)5, 0);
    uint64_t v145 = v77;
    uint64_t v170 = v172;
    v172[0] = v74;
    v172[1] = v76;
    uint64_t v171 = 0xC00000001;
    uint64_t v78 = v158 | v146;
    BOOL v160 = v78 != 0;
    if (v78)
    {
      v172[2] = v158;
      v172[3] = v146;
      unsigned int v79 = 2;
      LODWORD(v171) = 2;
      uint64_t v80 = v151;
    }
    else
    {
      *(void *)&long long v162 = v74;
      *((void *)&v162 + 1) = v76;
      int v81 = ((void)a9 != a3 || v143 != DWORD2(a9)) && (a3 != (void)a10 || v143 != v55);
      if (a5) {
        unsigned int v83 = 2;
      }
      else {
        unsigned int v83 = 0;
      }
      sub_1CB896BAC(*a1, a3, v143, (uint64_t)&v169, (uint64_t)&v162, 0, v81, 1, 1, 1, v83);
      if (v171 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v170 + v171) = v169;
      unsigned int v84 = v171 + 1;
      LODWORD(v171) = v84;
      uint64_t v80 = v151;
      if (v84 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v170 + v84) = v162;
      unsigned int v79 = v171 + 1;
      LODWORD(v171) = v171 + 1;
    }
    uint64_t v85 = v80 | v147;
    BOOL v86 = v85 != 0;
    if (v85)
    {
      if (v79 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v87 = (uint64_t *)((char *)v170 + 16 * v79);
      *unint64_t v87 = v80;
      v87[1] = v147;
      unsigned int v88 = v171 + 1;
      LODWORD(v171) = v171 + 1;
      uint64_t v89 = a1;
    }
    else
    {
      *(void *)&long long v162 = v74;
      *((void *)&v162 + 1) = v76;
      int v90 = *(unsigned __int16 *)(v161 + 24);
      uint64_t v89 = a1;
      if ((v90 == 36 || v90 == 12)
        && ((uint64_t v91 = *(void *)(v161 + 80), *(_UNKNOWN **)(v91 + 32) != &unk_1CFB2E344)
          ? (uint64_t v92 = v91 + 24)
          : (uint64_t v92 = *(void *)(v91 + 40)),
            (*(unsigned char *)(v92 + 28) & 7) == 3))
      {
        *(void *)&long long v168 = v169;
        DWORD2(v168) = DWORD2(v169);
        *(void *)&long long v162 = sub_1CD7EBF14(a1[1], 7, a11, (llvm *)5, 0, 1, 0);
        DWORD2(v162) = v93;
      }
      else
      {
        int v94 = ((void)a9 != v161 || v142 != DWORD2(a9)) && (v161 != (void)a10 || v142 != v55);
        if (v152) {
          unsigned int v96 = 2;
        }
        else {
          unsigned int v96 = 0;
        }
        sub_1CB896BAC(*a1, v161, v142, (uint64_t)&v168, (uint64_t)&v162, 0, v94, 1, 1, 1, v96);
      }
      if (v171 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v170 + v171) = v168;
      unsigned int v97 = v171 + 1;
      LODWORD(v171) = v97;
      if (v97 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v170 + v97) = v162;
      unsigned int v88 = v171 + 1;
      LODWORD(v171) = v171 + 1;
    }
    uint64_t v98 = v149 | v148;
    BOOL v99 = v98 != 0;
    if (v98)
    {
      unsigned int v100 = v86;
      if (v88 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v101 = v76;
      int v102 = (uint64_t *)((char *)v170 + 16 * v88);
      *int v102 = v149;
      v102[1] = v148;
    }
    else
    {
      *(void *)&long long v162 = v74;
      *((void *)&v162 + 1) = v76;
      sub_1CB896BAC(*v89, a9, DWORD2(a9), (uint64_t)&v167, (uint64_t)&v162, 0, 1, 0, 0, 1, 0);
      if (v171 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v100 = v86;
      *((_OWORD *)v170 + v171) = v167;
      unsigned int v103 = v171 + 1;
      LODWORD(v171) = v103;
      if (v103 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v104 = (uint64_t **)((char *)v170 + 16 * v103);
      int64x2_t *v104 = v74;
      v104[1] = v76;
      unsigned int v101 = v76;
    }
    unsigned int v105 = v171 + 1;
    LODWORD(v171) = v171 + 1;
    uint64_t v106 = v150 | v57;
    unsigned int v107 = v106 != 0;
    if (v106)
    {
      if (v105 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v108 = v160;
      uint64_t v109 = v155;
      uint64_t v110 = v145;
      uint64_t v111 = (uint64_t *)((char *)v170 + 16 * v105);
      uint64_t *v111 = v150;
      v111[1] = v57;
      unsigned int v112 = v171 + 1;
      LODWORD(v171) = v171 + 1;
    }
    else
    {
      *(void *)&long long v162 = v74;
      *((void *)&v162 + 1) = v101;
      sub_1CB896BAC(*v89, a10, v55, (uint64_t)&v166, (uint64_t)&v162, 0, 1, 0, 0, 1, 0);
      if (v171 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v170 + v171) = v166;
      unsigned int v113 = v171 + 1;
      LODWORD(v171) = v113;
      if (v113 >= HIDWORD(v171)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v114 = (uint64_t **)((char *)v170 + 16 * v113);
      char *v114 = v74;
      v114[1] = v101;
      unsigned int v112 = v171 + 1;
      LODWORD(v171) = v171 + 1;
      int v108 = v160;
      uint64_t v109 = v155;
      uint64_t v110 = v145;
    }
    if (v112 >= HIDWORD(v171)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v115 = (uint64_t *)((char *)v170 + 16 * v112);
    *uint64_t v115 = v109;
    v115[1] = v110;
    LODWORD(v171) = v171 + 1;
    sub_1CB8C2E38(v89[1], (uint64_t)&v170, 0);
    uint64_t v116 = *(void *)(v167 + 40) + 16 * DWORD2(v167);
    uint64_t v117 = *(llvm **)v116;
    uint64_t v118 = *(void *)(v116 + 8);
    int v119 = sub_1CD3D41EC(a2, v108, v100, v99, v107);
    long long v69 = sub_1CD801450(v89[1], v119, (uint64_t)a11, v117, v118, (uint64_t *)v170, v171);
    if (v170 != v172) {
      free(v170);
    }
    return v69;
  }
  sub_1CB8C14AC((uint64_t)a1, (unsigned int *)&v165, (unsigned int *)&v169, &v168, (uint64_t *)&v167, (uint64_t *)&v166, v159 & 1);
  int v63 = v165;
  long long v64 = v169;
  long long v65 = v168;
  long long v66 = v167;
  long long v67 = v166;
  long long v68 = *(unsigned __int8 **)a11;
  std::string::size_type v163 = v68;
  if (v68) {
    llvm::MetadataTracking::track((uint64_t)&v163, v68, 2);
  }
  int v164 = *((_DWORD *)a11 + 2);
  long long v69 = sub_1CB8C2108(a1, v63, v64, *((uint64_t *)&v64 + 1), a5, v65, *((uint64_t *)&v65 + 1), v152, v66, v67, (const llvm::APInt *)&v163);
  if (v163) {
    llvm::MetadataTracking::untrack((uint64_t)&v163, v163);
  }
  return v69;
}

uint64_t sub_1CD3D8A90(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  unsigned int v8 = a1 && (a1 != a3 || a2 != a4) && (a1 != a5 || a2 != a6) && (a1 != a7 || a2 != a8);
  if (a3 && (a3 != a5 || a4 != a6) && (a3 != a7 || a4 != a8)) {
    ++v8;
  }
  if (a5 == a7 && a6 == a8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = v8 + 1;
  }
  if (a5) {
    unsigned int v8 = v11;
  }
  if (a7) {
    return v8 + 1;
  }
  else {
    return v8;
  }
}

uint64_t *sub_1CD3D8B08(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, const llvm::APInt *a10)
{
  unsigned int v10 = a7;
  v81[24] = *MEMORY[0x1E4F143B8];
  uint64_t v77 = a3;
  uint64_t v78 = a4;
  *(void *)&long long v76 = a6;
  *((void *)&v76 + 1) = a7;
  long long v75 = a9;
  unsigned int v79 = v81;
  uint64_t v80 = 0xC00000000;
  uint64_t v14 = sub_1CD7EBF14(a1[1], 0, a10, (llvm *)5, 0, 1, 0);
  uint64_t v16 = v15;
  v81[0] = v14;
  v81[1] = v15;
  LODWORD(v80) = 1;
  unsigned int v63 = v10;
  long long v69 = sub_1CD3D62F0(a1[1], a6, v10, 0);
  uint64_t v70 = v17;
  unint64_t v18 = (unint64_t)sub_1CD3D62F0(a1[1], a9, DWORD2(a9), 0);
  uint64_t v20 = v19;
  *(void *)&long long v74 = v14;
  *((void *)&v74 + 1) = v16;
  if (a5) {
    unsigned int v21 = 2;
  }
  else {
    unsigned int v21 = 0;
  }
  sub_1CB896BAC(*a1, v77, v78, (uint64_t)&v77, (uint64_t)&v74, 0, 0, 1, 1, 0, v21);
  uint64_t v22 = v78;
  uint64_t v67 = *(unsigned __int8 *)(*(void *)(v77 + 40) + 16 * v78);
  if (v80 >= HIDWORD(v80)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v23 = (char *)v79 + 16 * v80;
  void *v23 = v77;
  v23[1] = v22;
  unsigned int v24 = v80 + 1;
  LODWORD(v80) = v24;
  if (v24 >= HIDWORD(v80)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v79 + v24) = v74;
  unsigned int v25 = v80 + 1;
  LODWORD(v80) = v80 + 1;
  v73[0] = v14;
  v73[1] = v16;
  uint64_t v64 = v20;
  unint64_t v26 = v18 | v20;
  if (v26) {
    int v27 = 2;
  }
  else {
    int v27 = 3;
  }
  int v65 = v27;
  unint64_t v28 = (unint64_t)v69 | v70;
  BOOL v29 = v28 == 0;
  if (v28) {
    int v30 = 2;
  }
  else {
    int v30 = 3;
  }
  int v66 = v30;
  if (v26)
  {
    unint64_t v33 = v18;
    if (v25 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v34 = (char *)v79 + 16 * v25;
    *(void *)int v34 = v18;
  }
  else
  {
    long long v72 = *(_OWORD *)(*(void *)(a9 + 40) + 16 * DWORD2(a9));
    if ((_BYTE)v72) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v72);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v72);
    }
    uint64_t v35 = ExtendedSizeInBits;
    if (v32 == 1) {
    sub_1CB896BAC(*a1, a9, DWORD2(a9), (uint64_t)&v75, (uint64_t)v73, 0, v35 != 32, 0, 0, 0, 0);
    }
    if (v80 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v79 + v80) = v75;
    unsigned int v36 = v80 + 1;
    LODWORD(v80) = v36;
    unint64_t v33 = v18;
    if (v36 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v34 = (char *)v79 + 16 * v36;
    *(void *)int v34 = v14;
    uint64_t v20 = v16;
  }
  *((void *)v34 + 1) = v20;
  unsigned int v37 = v80 + 1;
  LODWORD(v80) = v80 + 1;
  *(void *)&long long v72 = v14;
  *((void *)&v72 + 1) = v16;
  if (v29)
  {
    long long v71 = *(_OWORD *)(*(void *)(a6 + 40) + 16 * v63);
    if ((_BYTE)v71) {
      uint64_t v38 = sub_1CB87E200((unsigned __int8 *)&v71);
    }
    else {
      uint64_t v38 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v71);
    }
    uint64_t v41 = v38;
    if (v39 == 1) {
    sub_1CB896BAC(*a1, a6, v63, (uint64_t)&v76, (uint64_t)&v72, 0, v41 != 32, 0, 0, 0, 0);
    }
    if (v80 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v79 + v80) = v76;
    unsigned int v42 = v80 + 1;
    LODWORD(v80) = v42;
    if (v42 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v40 = (char *)v79 + 16 * v42;
    *(void *)int v40 = v14;
  }
  else
  {
    if (v37 >= HIDWORD(v80)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v40 = (char *)v79 + 16 * v37;
    uint64_t v16 = v70;
    *(void *)int v40 = v69;
  }
  *((void *)v40 + 1) = v16;
  LODWORD(v80) = v80 + 1;
  uint64_t v44 = sub_1CD7EEB94(a1[1], 0, (llvm *)5, 0);
  if (v80 >= HIDWORD(v80)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v45 = (uint64_t *)((char *)v79 + 16 * v80);
  *int v45 = v44;
  v45[1] = v43;
  LODWORD(v80) = v80 + 1;
  sub_1CB8C2E38(a1[1], (uint64_t)&v79, 0);
  long long v71 = *(_OWORD *)(*(void *)(v76 + 40) + 16 * DWORD2(v76));
  if ((_BYTE)v71) {
    uint64_t v46 = sub_1CB87E200((unsigned __int8 *)&v71);
  }
  else {
    uint64_t v46 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v71);
  }
  uint64_t v48 = v46;
  if (v47 == 1) {
  uint64_t v49 = *(unsigned __int8 *)(*(void *)(v76 + 40) + 16 * DWORD2(v76));
  }
  unsigned int v51 = v49 == 9 || v49 == 4;
  uint64_t v52 = *(unsigned __int8 *)(*(void *)(v75 + 40) + 16 * DWORD2(v75));
  BOOL v54 = v52 == 9 || v52 == 4;
  int v55 = sub_1CD3D3F60(a2, v48 == 16, 0, v67 == 9, (v33 | v64) != 0, v54, v66, v51, v65, 1, 1);
  uint64_t v56 = a1[1];
  unint64_t v57 = (uint64_t *)v79;
  uint64_t v58 = v80;
  uint64_t v59 = sub_1CD7F95FC(v56, v71, *((uint64_t *)&v71 + 1), 172, 0);
  uint64_t v61 = sub_1CD801044(v56, v55, (uint64_t)a10, v59, v60, v57, v58);
  if (v79 != v81) {
    free(v79);
  }
  return v61;
}

unint64_t sub_1CD3D91B4(llvm::EVT *a1, uint64_t a2, BOOL a3)
{
  if (*(unsigned char *)a1)
  {
    unsigned __int8 v6 = *(unsigned char *)a1;
    LOBYTE(v3) = sub_1CD3D92C0(&v6);
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = llvm::EVT::changeExtendedVectorElementTypeToInteger(a1, a2, a3);
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFF00;
  }
  return v4 | v3;
}

unint64_t sub_1CD3D9200(unsigned __int8 *a1)
{
  if (*a1 - 15 <= 0x9B)
  {
    return sub_1CD3D92C0(a1);
  }
  else
  {
    int v1 = sub_1CB87E200(a1);
    if (v2 == 1)
    {
      int v10 = v1;
      int v1 = v10;
    }
    if (v1 == 128) {
      int v3 = 7;
    }
    else {
      int v3 = 0;
    }
    if (v1 == 64) {
      int v4 = 6;
    }
    else {
      int v4 = v3;
    }
    if (v1 == 32) {
      unsigned int v5 = 5;
    }
    else {
      unsigned int v5 = v4;
    }
    if (v1 == 16) {
      int v6 = 4;
    }
    else {
      int v6 = 0;
    }
    if (v1 == 8) {
      int v7 = 3;
    }
    else {
      int v7 = v6;
    }
    if (v1 == 1) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = v7;
    }
    if (v1 <= 31) {
      return v8;
    }
    else {
      return v5;
    }
  }
}

unint64_t sub_1CD3D92C0(unsigned __int8 *a1)
{
  unsigned __int8 v14 = sub_1CB8C2FBC(a1);
  int v2 = sub_1CB87E200(&v14);
  if (v3 == 1)
  {
    int v13 = v2;
    int v2 = v13;
  }
  char v4 = 5;
  char v5 = 6;
  char v6 = 7;
  if (v2 != 128) {
    char v6 = 0;
  }
  if (v2 != 64) {
    char v5 = v6;
  }
  if (v2 != 32) {
    char v4 = v5;
  }
  char v7 = 2;
  char v8 = 3;
  char v9 = 4;
  if (v2 != 16) {
    char v9 = 0;
  }
  if (v2 != 8) {
    char v8 = v9;
  }
  if (v2 != 1) {
    char v7 = v8;
  }
  if (v2 <= 31) {
    char v10 = v7;
  }
  else {
    char v10 = v4;
  }
  int v11 = sub_1CB8C32B0(a1);
  if (*a1 - 120 > 0x32) {
    return sub_1CB883124(v10, v11);
  }
  else {
    return sub_1CB882CA4(v10, v11);
  }
}

uint64_t sub_1CD3D9398(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 184288;
  uint64_t v5 = a1 + 173976;
  char v6 = (unsigned char *)(a1 + 40959);
  uint64_t v7 = a1 + 33514;
  uint64_t v8 = a1 + 23028;
  uint64_t v9 = a1 + 18738;
  uint64_t v10 = a1 + 14448;
  uint64_t v11 = a1 + 4509;
  *(void *)sub_1CD80D0B0((llvm::TargetLoweringBase *)a1, (const llvm::TargetMachine *)a2) = &unk_1F25EAE88;
  *(void *)(v4 + 8) = a2 + 1328;
  int v12 = a2[1608];
  if (!a2[1608])
  {
    *(void *)(a1 + 144) = &off_1E66A4990;
    *(void *)(a1 + 488) = &off_1E66A4990;
  }
  *(void *)(a1 + 704) = &off_1E66A4340;
  *(void *)(a1 + 400) = &off_1E66A4340;
  *(void *)(a1 + 128) = &off_1E66A4180;
  *(void *)(a1 + 136) = &off_1E66A4340;
  *(void *)(a1 + 312) = &off_1E66A4180;
  *(void *)(a1 + 320) = &off_1E66A4340;
  *(void *)(a1 + 168) = &off_1E66A4180;
  *(void *)(a1 + 176) = &off_1E66A4340;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v5 + 10284) = 4096;
  *(_DWORD *)(v5 + 10304) = 4096;
  *(_DWORD *)(v5 + 10276) = 4096;
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v13 = 178;
  uint64_t v14 = 4402;
  *(void *)(a1 + 52) = 0x100000001;
  do
  {
    *(unsigned char *)(a1 + v14) = 2;
    v14 += 390;
    --v13;
  }
  while (v13);
  *(unsigned char *)(v11 + 1875) = 2;
  *(unsigned char *)(v11 + 1485) = 0;
  *(unsigned char *)(v11 + 1095) = 2;
  *(unsigned char *)(v8 + 126) = 2;
  *(unsigned char *)(v9 + 906) = 2;
  *(unsigned char *)(v9 + 126) = 2;
  *(unsigned char *)(v7 + 129) = 2;
  *(unsigned char *)(v11 + 2960) = 2;
  *(unsigned char *)(v11 + 3350) = 2;
  *(unsigned char *)(v11 + 3104) = 0;
  *(unsigned char *)(v11 + 3494) = 0;
  *(unsigned char *)(v7 + 229) = 2;
  *(unsigned char *)(v11 + 2962) = 4;
  *(unsigned char *)(v11 + 3352) = 4;
  *(_DWORD *)(v7 + 84) = 33686018;
  *(unsigned char *)(v11 + 3092) = 4;
  *(unsigned char *)(v11 + 3482) = 4;
  *(unsigned char *)(v11 + 3115) = 2;
  *(unsigned char *)(v11 + 3505) = 2;
  *(unsigned char *)(v11 + 2875) = 0;
  *(unsigned char *)(v11 + 3265) = 0;
  *(unsigned char *)uint64_t v7 = 0;
  *(_WORD *)(v11 + 731) = 1028;
  *(_WORD *)(v9 + 152) = 514;
  *(_WORD *)(v8 + 152) = 514;
  *(_WORD *)(v10 + 146) = 514;
  *(_WORD *)(v9 + 146) = 514;
  *(_WORD *)(v8 + 146) = 514;
  *(_WORD *)(v11 + 1895) = 1028;
  *(_WORD *)(v11 + 1498) = 1028;
  *(unsigned char *)(v11 + 1500) = 4;
  *(unsigned char *)(v10 + 97) = 4;
  *(unsigned char *)(v10 + 487) = 4;
  *(unsigned char *)(v9 + 97) = 4;
  *(unsigned char *)(v7 + 141) = 4;
  *(unsigned char *)(v8 + 97) = 4;
  if (v12)
  {
    char v15 = 0;
    char v16 = 4;
  }
  else
  {
    *(unsigned char *)(v11 + 1885) = 4;
    *(unsigned char *)(v8 + 136) = 4;
    *(unsigned char *)(v11 + 1495) = 4;
    *(unsigned char *)(v11 + 3445) = 4;
    *(unsigned char *)(v11 + 1105) = 4;
    *(unsigned char *)(v10 + 136) = 4;
    char v16 = 2;
    char v15 = 4;
    *(unsigned char *)(v11 + 3055) = 4;
  }
  *(unsigned char *)(v7 + 180) = 4;
  *(unsigned char *)(v9 + 136) = v15;
  *(unsigned char *)(v11 + 3053) = 2;
  *(unsigned char *)(v11 + 1103) = 2;
  *(unsigned char *)(v10 + 134) = 2;
  *(unsigned char *)(v7 + 178) = 2;
  *(unsigned char *)(v9 + 134) = 2;
  *(unsigned char *)(v11 + 1493) = 2;
  *(unsigned char *)(v11 + 3443) = 2;
  *(unsigned char *)(v11 + 1882) = 4;
  *(unsigned char *)(v11 + 1877) = 4;
  *(_WORD *)(v11 + 711) = 514;
  *(_WORD *)(v11 + 1101) = 514;
  *(_WORD *)(v11 + 1491) = 514;
  *(_WORD *)(v11 + 706) = 514;
  *(_WORD *)(v11 + 1096) = 514;
  *(_WORD *)(v11 + 1486) = 514;
  *(unsigned char *)(v11 + 708) = 2;
  *(unsigned char *)(v11 + 1106) = 2;
  *(unsigned char *)(v11 + 3056) = 2;
  *(unsigned char *)(v10 + 137) = 2;
  *(unsigned char *)(v11 + 1496) = 2;
  *(unsigned char *)(v11 + 3446) = 2;
  *(unsigned char *)(v7 + 181) = 2;
  *(unsigned char *)(v9 + 137) = 2;
  *(unsigned char *)(v11 + 1886) = 4;
  *(unsigned char *)(v11 + 1361) = 4;
  *(unsigned char *)(v11 + 1751) = 4;
  *(_WORD *)(v11 + 1366) = 1028;
  *(unsigned char *)(v11 + 1463) = v16;
  *(unsigned char *)(v11 + 1462) = v16;
  *(unsigned char *)(v11 + 1371) = 2;
  *(_WORD *)(v11 + 1091) = 258;
  *(_WORD *)(v11 + 1481) = 1026;
  *(_WORD *)(v11 + 1871) = 514;
  *(unsigned char *)(v10 + 482) = 4;
  *(unsigned char *)(v10 + 92) = 4;
  *(unsigned char *)(v10 + 481) = 4;
  *(unsigned char *)(v10 + 91) = 4;
  *(_WORD *)(v9 + 91) = 1028;
  *(_WORD *)(v7 + 135) = 1028;
  *(_WORD *)(v11 + 1840) = 1028;
  *(unsigned char *)(v10 + 483) = 4;
  *(unsigned char *)(v11 + 1844) = 4;
  *(unsigned char *)(v10 + 95) = 4;
  *(unsigned char *)(v7 + 139) = 4;
  *(unsigned char *)(v9 + 95) = 4;
  *(unsigned char *)(v11 + 3087) = 4;
  *(unsigned char *)(v11 + 3477) = 4;
  *(_WORD *)(v11 + 3096) = 4;
  *(_WORD *)(v11 + 3486) = 4;
  *(_WORD *)(v11 + 3093) = 4;
  *(_WORD *)(v11 + 3483) = 4;
  *(unsigned char *)(v11 + 2) = 2;
  *(unsigned char *)(v11 + 783) = 1;
  *(unsigned char *)(v11 + 1173) = 0;
  *(unsigned char *)(v11 + 1563) = 0;
  *(unsigned char *)(v11 + 3123) = 0;
  *(unsigned char *)(v11 + 3513) = 0;
  *(unsigned char *)(v11 + 1953) = 4;
  *(_WORD *)uint64_t v11 = 514;
  *(unsigned char *)(v11 + 1316) = 4;
  *(unsigned char *)(v11 + 1706) = 4;
  *(unsigned char *)(v11 + 1740) = 4;
  *(unsigned char *)(v7 + 35) = 4;
  *(unsigned char *)(v7 + 815) = 4;
  unsigned char *v6 = 4;
  v6[780] = 4;
  *(unsigned char *)(v8 + 771) = 4;
  *(unsigned char *)(v9 + 771) = 4;
  *(unsigned char *)(v11 + 959) = 4;
  *(unsigned char *)(v11 + 3396) = 0;
  *(unsigned char *)(v11 + 3006) = 0;
  *(unsigned char *)(v11 + 3099) = 4;
  *(unsigned char *)(v11 + 3489) = 4;
  v6[99] = 4;
  v6[879] = 4;
  *(unsigned char *)uint64_t v10 = 2;
  *(unsigned char *)(v10 + 390) = 2;
  *(unsigned char *)uint64_t v9 = 2;
  *(unsigned char *)uint64_t v8 = 2;
  *(unsigned char *)(v10 + 1) = 2;
  *(unsigned char *)(v10 + 391) = 2;
  *(unsigned char *)(v9 + 1) = 2;
  *(unsigned char *)(v8 + 1) = 2;
  *(unsigned char *)(v11 + 1762) = 2;
  *(unsigned char *)(v11 + 1372) = 2;
  *(unsigned char *)(v11 + 982) = 2;
  *(unsigned char *)(v10 + 2) = 2;
  *(unsigned char *)(v10 + 392) = 2;
  *(unsigned char *)(v9 + 2) = 2;
  *(unsigned char *)(v8 + 2) = 2;
  *(unsigned char *)(v11 + 1480) = 0;
  *(unsigned char *)(v10 + 121) = 2;
  *(unsigned char *)(v10 + 511) = 2;
  *(unsigned char *)(v9 + 121) = 2;
  *(unsigned char *)(v8 + 121) = 2;
  *(unsigned char *)(v10 + 120) = 2;
  *(unsigned char *)(v10 + 510) = 2;
  *(unsigned char *)(v9 + 120) = 2;
  *(unsigned char *)(v8 + 120) = 2;
  *(unsigned char *)(v10 + 119) = 2;
  *(unsigned char *)(v10 + 509) = 2;
  *(unsigned char *)(v9 + 119) = 2;
  *(unsigned char *)(v8 + 119) = 2;
  *(unsigned char *)(v10 + 137) = 2;
  *(unsigned char *)(v10 + 527) = 2;
  *(unsigned char *)(v9 + 137) = 2;
  *(unsigned char *)(v8 + 137) = 2;
  *(unsigned char *)(v10 + 148) = 2;
  *(unsigned char *)(v10 + 538) = 2;
  *(unsigned char *)(v9 + 148) = 2;
  *(unsigned char *)(v8 + 148) = 2;
  *(unsigned char *)(v11 + 337) = 4;
  *(unsigned char *)(v11 + 727) = 4;
  *(unsigned char *)(v11 + 1117) = 4;
  *(unsigned char *)(v11 + 1507) = 4;
  *(unsigned char *)(v11 + 1897) = 4;
  *(_DWORD *)(v10 + 142) = 33686018;
  *(_DWORD *)(a1 + 14980) = 33686018;
  *(_DWORD *)(v9 + 142) = 33686018;
  *(_DWORD *)(v8 + 142) = 33686018;
  uint64_t v17 = *(unsigned char **)(v4 + 8);
  if (v17[280])
  {
    *(unsigned char *)(v11 + 1868) = 4;
    *(unsigned char *)(v11 + 1870) = 4;
    unint64_t v18 = (unsigned char *)(v11 + 1869);
  }
  else
  {
    *(_WORD *)(v8 + 91) = 1028;
    *(_WORD *)(v11 + 1864) = 1028;
    *(unsigned char *)(v11 + 1866) = 4;
    *(_WORD *)(v11 + 1072) = 514;
    *(_WORD *)(v11 + 1891) = 514;
    unint64_t v18 = (unsigned char *)(v11 + 1356);
    *(unsigned char *)(v11 + 1883) = 2;
  }
  *unint64_t v18 = 4;
  *(unsigned char *)(v10 + 115) = 4;
  *(unsigned char *)(v10 + 505) = 4;
  *(unsigned char *)(v9 + 115) = 4;
  *(unsigned char *)(v8 + 115) = 2;
  *(_WORD *)(v10 + 116) = 1028;
  *(_WORD *)(v10 + 506) = 1028;
  *(_WORD *)(v9 + 116) = 1028;
  *(_WORD *)(v8 + 116) = 514;
  *(_WORD *)(v11 + 3499) = 0;
  *(_WORD *)(v11 + 3109) = 0;
  *(unsigned char *)(v7 + 84) = 2;
  *(unsigned char *)(v7 + 86) = 2;
  *(_WORD *)(v7 + 210) = 514;
  *(unsigned char *)(v7 + 129) = 2;
  uint64_t v19 = 177;
  uint64_t v20 = 74032;
  *(unsigned char *)(v11 + 27) = 0;
  do
  {
    *(unsigned char *)(a1 + v20 + 1) = 34;
    v20 += 360;
    --v19;
  }
  while (v19);
  uint64_t v21 = 170;
  uint64_t v22 = 137934;
  *(void *)&long long v23 = 0x202020202020202;
  *((void *)&v23 + 1) = 0x202020202020202;
  do
  {
    unsigned int v24 = (_OWORD *)(a1 + v22);
    *(_OWORD *)((char *)v24 + 154) = v23;
    unsigned char v24[8] = v23;
    v24[9] = v23;
    v24[6] = v23;
    v24[7] = v23;
    void v24[4] = v23;
    v24[5] = v23;
    v24[2] = v23;
    v24[3] = v23;
    v22 += 179;
    *unsigned int v24 = v23;
    v24[1] = v23;
    --v21;
  }
  while (v21);
  unsigned int v25 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(unsigned char *))(*(void *)v17 + 176))(v17);
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v25);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  *(unsigned char *)(v5 + 6) |= 7u;
  uint64_t v26 = *(void *)(v4 + 8);
  char v27 = *(unsigned char *)(v5 + 17);
  char v28 = *(unsigned char *)(v5 + 37) | 3;
  char v29 = *(unsigned char *)(v5 + 36) | 0xFB;
  char v30 = *(unsigned char *)(v5 + 30) | 0x60;
  char v31 = *(unsigned char *)(v5 + 35) | 0xEC;
  char v32 = *(unsigned char *)(v5 + 18) | 2;
  char v33 = *(unsigned char *)(v5 + 5) | 1;
  char v34 = *(unsigned char *)(v5 + 4) | 0xC0;
  char v35 = *(unsigned char *)(v5 + 28) | 4;
  char v36 = *(unsigned char *)v5 | 0x80;
  char v37 = *(unsigned char *)(v5 + 11) | 0xD;
  int8x8_t v38 = *(int8x8_t *)(v5 + 20);
  char v39 = *(unsigned char *)(v5 + 16) | 0x20;
  *(unsigned char *)(v5 + 20) = v38.i8[0] | 0x38;
  if (*(unsigned char *)(v26 + 280)) {
    char v40 = v27;
  }
  else {
    char v40 = v27 | 0x98;
  }
  *(unsigned char *)(v5 + 37) = v28;
  *(unsigned char *)(v5 + 36) = v29;
  *(unsigned char *)(v5 + 30) = v30;
  *(unsigned char *)(v5 + 35) = v31;
  *(unsigned char *)(v5 + 18) = v32;
  *(unsigned char *)(v5 + 5) = v33;
  *(unsigned char *)(v5 + 4) = v34;
  *(unsigned char *)(v5 + 28) = v35;
  *(unsigned char *)uint64_t v5 = v36;
  *(unsigned char *)(v5 + 16) = v39;
  *(unsigned char *)(v5 + 11) = v37;
  *(unsigned char *)(v5 + 17) = v40 | 4;
  *(int8x8_t *)(v5 + 20) = vorr_s8(v38, (int8x8_t)0x81C1901E038003B8);
  return a1;
}

const char *sub_1CD3D99DC(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 391:
      uint64_t result = "AGX1ISD::VRET";
      break;
    case 392:
      uint64_t result = "AGX1ISD::FRET";
      break;
    case 393:
      uint64_t result = "AGX1ISD::PHASE_SEL";
      break;
    case 394:
      uint64_t result = "AGX1ISD::PHASE_SMP";
      break;
    case 395:
      uint64_t result = "AGX1ISD::READ_SHARED";
      break;
    case 396:
      uint64_t result = "AGX1ISD::READ_COEFF";
      break;
    case 397:
      uint64_t result = "AGX1ISD::FITR";
      break;
    case 398:
      uint64_t result = "AGX1ISD::FITR_PROJ";
      break;
    case 399:
      uint64_t result = "AGX1ISD::FITR_CEM";
      break;
    case 400:
      uint64_t result = "AGX1ISD::FITR_SAT";
      break;
    case 401:
      uint64_t result = "AGX1ISD::FITR_PROJ_SAT";
      break;
    case 402:
      uint64_t result = "AGX1ISD::FITR_CEM_SAT";
      break;
    case 403:
      uint64_t result = "AGX1ISD::FITR_TMP";
      break;
    case 404:
      uint64_t result = "AGX1ISD::FITR_PROJ_TMP";
      break;
    case 405:
      uint64_t result = "AGX1ISD::FITR_CEM_TMP";
      break;
    case 406:
      uint64_t result = "AGX1ISD::FITR_CEMGRAD_TMP";
      break;
    case 407:
      uint64_t result = "AGX1ISD::FITR_TMP_SAT";
      break;
    case 408:
      uint64_t result = "AGX1ISD::FITR_PROJ_TMP_SAT";
      break;
    case 409:
      uint64_t result = "AGX1ISD::FITR_CEM_TMP_SAT";
      break;
    case 410:
      uint64_t result = "AGX1ISD::FITR_CEMGRAD_TMP_SAT";
      break;
    case 411:
      uint64_t result = "AGX1ISD::FITR_16x2";
      break;
    case 412:
      uint64_t result = "AGX1ISD::FITR_PROJ_16x2";
      break;
    case 413:
      uint64_t result = "AGX1ISD::FITR_3D";
      break;
    case 414:
      uint64_t result = "AGX1ISD::FITR_PROJ_16x3";
      break;
    case 415:
      uint64_t result = "AGX1ISD::FITR_4D";
      break;
    case 416:
      uint64_t result = "AGX1ISD::FITR_PROJ_16x4";
      break;
    case 417:
      uint64_t result = "AGX1ISD::FITR_32x2";
      break;
    case 418:
      uint64_t result = "AGX1ISD::FITR_PROJ_32x2";
      break;
    case 419:
      uint64_t result = "AGX1ISD::FITR_32x3";
      break;
    case 420:
      uint64_t result = "AGX1ISD::FITR_PROJ_32x3";
      break;
    case 421:
      uint64_t result = "AGX1ISD::FITR_32x4";
      break;
    case 422:
      uint64_t result = "AGX1ISD::FITR_PROJ_32x4";
      break;
    case 423:
      uint64_t result = "AGX1ISD::RCP";
      break;
    case 424:
      uint64_t result = "AGX1ISD::RSQRT";
      break;
    case 425:
      uint64_t result = "AGX1ISD::QREFL";
      break;
    case 426:
      uint64_t result = "AGX1ISD::RSQRTFROMSQRT";
      break;
    case 427:
      uint64_t result = "AGX1ISD::ADDH";
      break;
    case 428:
      uint64_t result = "AGX1ISD::SUBH";
      break;
    case 429:
    case 444:
    case 445:
      return result;
    case 430:
      uint64_t result = "AGX1ISD::GAMMA_CMP_G5";
      break;
    case 431:
      uint64_t result = "AGX1ISD::GAMMA_EXP_G5";
      break;
    case 432:
      uint64_t result = "AGX1ISD::IMADH";
      break;
    case 433:
      uint64_t result = "AGX1ISD::IMSUBH";
      break;
    case 434:
      uint64_t result = "AGX1ISD::IMADHS";
      break;
    case 435:
      uint64_t result = "AGX1ISD::IMSUBHS";
      break;
    case 436:
      uint64_t result = "AGX1ISD::INSERT";
      break;
    case 437:
      uint64_t result = "AGX1ISD::EXTRACT";
      break;
    case 438:
      uint64_t result = "AGX1ISD::FPTOU8";
      break;
    case 439:
      uint64_t result = "AGX1ISD::FPTOS8";
      break;
    case 440:
      uint64_t result = "AGX1ISD::FPTOU8_SCALE";
      break;
    case 441:
      uint64_t result = "AGX1ISD::FPTOS8_SCALE";
      break;
    case 442:
      uint64_t result = "AGX1ISD::LADDR";
      break;
    case 443:
      uint64_t result = "AGX1ISD::FMIX";
      break;
    case 446:
      uint64_t result = "AGX1ISD::BIT_EXTRACT";
      break;
    case 447:
      uint64_t result = "AGX1ISD::ATOMIC_LOCAL_G4";
      break;
    case 448:
      uint64_t result = "AGX1ISD::ATOMIC_LOCAL_G5";
      break;
    case 449:
      uint64_t result = "AGX1ISD::ATOMIC_LOCAL_CMPXCHG_G4";
      break;
    case 450:
      uint64_t result = "AGX1ISD::ATOMIC_LOCAL_CMPXCHG_G5";
      break;
    case 451:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_CMPXCHG_G4";
      break;
    case 452:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_CMPXCHG_G5";
      break;
    case 453:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_ADD";
      break;
    case 454:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_SUB";
      break;
    case 455:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_XCHG";
      break;
    case 456:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_UMIN";
      break;
    case 457:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_IMIN";
      break;
    case 458:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_UMAX";
      break;
    case 459:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_IMAX";
      break;
    case 460:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_AND";
      break;
    case 461:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_OR";
      break;
    case 462:
      uint64_t result = "AGX1ISD::ATOMIC_GLOBAL_XOR";
      break;
    default:
      switch(a2)
      {
        case 890:
          uint64_t result = "AGX1ISD::SPILL8";
          break;
        case 891:
          uint64_t result = "AGX1ISD::SPILL16";
          break;
        case 892:
          uint64_t result = "AGX1ISD::SPILL32";
          break;
        case 893:
          uint64_t result = "AGX1ISD::SPILL64";
          break;
        case 894:
          uint64_t result = "AGX1ISD::SPILL96";
          break;
        case 895:
          uint64_t result = "AGX1ISD::SPILL128";
          break;
        case 899:
          uint64_t result = "AGX1ISD::SPILL256";
          break;
        case 902:
          uint64_t result = "AGX1ISD::RELOAD8";
          break;
        case 903:
          uint64_t result = "AGX1ISD::RELOAD16";
          break;
        case 904:
          uint64_t result = "AGX1ISD::RELOAD32";
          break;
        case 905:
          uint64_t result = "AGX1ISD::RELOAD64";
          break;
        case 906:
          uint64_t result = "AGX1ISD::RELOAD96";
          break;
        case 907:
          uint64_t result = "AGX1ISD::RELOAD128";
          break;
        case 908:
          uint64_t result = "AGX1ISD::RELOAD160";
          break;
        case 909:
          uint64_t result = "AGX1ISD::RELOAD192";
          break;
        case 910:
          uint64_t result = "AGX1ISD::RELOAD224";
          break;
        case 911:
          uint64_t result = "AGX1ISD::RELOAD256";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t *sub_1CD3D9E40(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(unsigned __int8 **)a7;
  char v16 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v16, v13, 2);
  }
  int v17 = *(_DWORD *)(a7 + 8);
  uint64_t v14 = sub_1CD3F8144(a2, a3, a4, a5, a6, (const llvm::APInt *)&v16);
  if (v16) {
    llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
  }
  return v14;
}

uint64_t sub_1CD3D9EE8(uint64_t **a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7, uint64_t a8, uint64_t *a9, char a10, unsigned __int8 a11, char a12)
{
  int v20 = a11;
  uint64_t v21 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v131 = v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&v131, v21, 2);
  }
  int v132 = *(_DWORD *)(a2 + 60);
  if (a10)
  {
    uint64_t v22 = *(void *)(a5 + 48);
    if (!v22) {
      goto LABEL_11;
    }
    int v23 = 1;
    do
    {
      if (*(_DWORD *)(v22 + 8) == a6)
      {
        if (!v23) {
          goto LABEL_11;
        }
        --v23;
      }
      uint64_t v22 = *(void *)(v22 + 32);
    }
    while (v22);
    if (v23) {
      goto LABEL_11;
    }
    if (*(_WORD *)(a5 + 24) == 222)
    {
      uint64_t v64 = *(_DWORD **)(a5 + 32);
      a5 = *(void *)v64;
      uint64_t v65 = *(void *)(*(void *)v64 + 48);
      if (!v65) {
        goto LABEL_11;
      }
      int v20 = a11 ^ 1;
      a6 = v64[2];
      int v66 = 1;
      do
      {
        if (*(_DWORD *)(v65 + 8) == a6)
        {
          if (!v66) {
            goto LABEL_11;
          }
          --v66;
        }
        uint64_t v65 = *(void *)(v65 + 32);
      }
      while (v65);
      if (v66) {
        goto LABEL_11;
      }
    }
  }
  else if (*(_WORD *)(a5 + 24) == 222)
  {
    uint64_t v26 = *(uint64_t **)(a5 + 32);
    a5 = *v26;
    a6 = *((_DWORD *)v26 + 2);
    int v20 = a11 ^ 1;
  }
  uint64_t v27 = a9[2];
  if (*(_WORD *)(*(void *)v27 + 1020))
  {
    while (1)
    {
      int v39 = *(unsigned __int16 *)(a5 + 24);
      if (v39 != 215 && v39 != 212) {
        break;
      }
      char v40 = *(uint64_t **)(a5 + 32);
      a5 = *v40;
      a6 = *((_DWORD *)v40 + 2);
      if (a10)
      {
        uint64_t v41 = *(void *)(a5 + 48);
        if (!v41) {
          goto LABEL_11;
        }
        int v42 = 1;
        do
        {
          if (*(_DWORD *)(v41 + 8) == a6)
          {
            if (!v42) {
              goto LABEL_11;
            }
            --v42;
          }
          uint64_t v41 = *(void *)(v41 + 32);
        }
        while (v41);
        if (v42) {
          goto LABEL_11;
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a5 + 40) + 16 * a6) == 10
    || (uint64_t v28 = (uint64_t)a3, v29 = a4, *(unsigned char *)(a7[5] + 16 * a8) == 10))
  {
    uint64_t v29 = 0;
    uint64_t v28 = 10;
  }
  int v30 = *(unsigned __int16 *)(a5 + 24);
  if (v30 == 96)
  {
    if (*((_WORD *)a7 + 12) == 98) {
      goto LABEL_11;
    }
    uint64_t v43 = *(void *)(a5 + 32);
    char v32 = *(uint64_t **)v43;
    if (*(void *)v43 != *(void *)(v43 + 40)) {
      goto LABEL_11;
    }
    uint64_t v121 = v29;
    uint64_t v125 = (llvm *)v28;
    unsigned int v33 = *(_DWORD *)(v43 + 8);
    if (v33 != *(_DWORD *)(v43 + 48)) {
      goto LABEL_11;
    }
    char v34 = sub_1CD7ECDC4(v27, (uint64_t)&v131, v28, v29, 0, 2.0);
    uint64_t v35 = v44;
  }
  else
  {
    if (v30 != 98)
    {
      uint64_t v24 = 0;
      if (v30 != 192 || !a12 || !a10) {
        goto LABEL_12;
      }
      int v45 = *(uint64_t **)(a5 + 32);
      uint64_t v46 = *v45;
      uint64_t v47 = v45[1];
      uint64_t v49 = v45[5];
      uint64_t v48 = v45[6];
      uint64_t v50 = v45[10];
      uint64_t v51 = v45[15];
      uint64_t v52 = v45[16];
      unsigned int v53 = *(_DWORD *)(v45[20] + 76);
      int v54 = *(unsigned __int16 *)(v51 + 24);
      BOOL v55 = v54 == 36 || v54 == 12;
      if (v55
        && ((uint64_t v56 = *(void *)(v51 + 80), *(_UNKNOWN **)(v56 + 32) == &unk_1CFB2E344)
          ? (uint64_t v57 = *(void *)(v56 + 40))
          : (uint64_t v57 = v56 + 24),
            (*(unsigned char *)(v57 + 28) & 7) == 3))
      {
        uint64_t v120 = v45[6];
        int v124 = v45[1];
        uint64_t v127 = *v45;
        uint64_t v115 = v45[11];
        uint64_t v128 = 0;
        unsigned int v129 = 0;
        *(_WORD *)((char *)&v116 + 1) = v20;
        LOBYTE(v116) = 1;
        uint64_t v24 = sub_1CD3D9EE8(&v128, a2, a3, a4, v50, v115, a7, a8, a9, v116);
        if (!v24) {
          goto LABEL_12;
        }
        uint64_t v62 = sub_1CD3D6058((void *)a9[2], (const llvm::APInt *)&v131, v127, v124, v49, v120, v128, v129, (uint64_t)a7, a8, SHIDWORD(a8), v53);
      }
      else
      {
        int v58 = *(unsigned __int16 *)(v50 + 24);
        if (v58 != 36 && v58 != 12) {
          goto LABEL_11;
        }
        uint64_t v60 = *(void *)(v50 + 80);
        uint64_t v61 = *(_UNKNOWN **)(v60 + 32) == &unk_1CFB2E344 ? *(void *)(v60 + 40) : v60 + 24;
        if ((*(unsigned char *)(v61 + 28) & 7) != 3) {
          goto LABEL_11;
        }
        int v118 = v48;
        int v122 = v47;
        uint64_t v126 = v46;
        uint64_t v128 = 0;
        unsigned int v129 = 0;
        *(_WORD *)((char *)&v116 + 1) = v20;
        LOBYTE(v116) = 1;
        uint64_t v24 = sub_1CD3D9EE8(&v128, a2, a3, a4, v51, v52, a7, a8, a9, v116);
        if (!v24) {
          goto LABEL_12;
        }
        uint64_t v62 = sub_1CD3D6058((void *)a9[2], (const llvm::APInt *)&v131, v126, v122, v49, v118, (uint64_t)a7, a8, v128, v129, v130, v53);
      }
      *a1 = v62;
      *((_DWORD *)a1 + 2) = v63;
      goto LABEL_12;
    }
    uint64_t v121 = v29;
    uint64_t v125 = (llvm *)v28;
    uint64_t v31 = *(void *)(a5 + 32);
    char v32 = *(uint64_t **)v31;
    unsigned int v33 = *(_DWORD *)(v31 + 8);
    char v34 = *(uint64_t **)(v31 + 40);
    uint64_t v35 = *(unsigned int *)(v31 + 48);
  }
  unint64_t v36 = v33;
  BOOL v37 = v32 == v34 && v33 == v35;
  if (v37 || v32 == a7 && v33 == a8 || v34 == a7 && v35 == a8) {
    goto LABEL_98;
  }
  unsigned int v38 = *((unsigned __int16 *)v32 + 12);
  if (v38 > 0xD3)
  {
    if (v38 != 395 && (v38 != 212 || *(_WORD *)(*(void *)v32[4] + 24) != 395)) {
      goto LABEL_98;
    }
  }
  else if (v38 != 12 && v38 != 36)
  {
    goto LABEL_98;
  }
  unsigned int v67 = *((unsigned __int16 *)v34 + 12);
  if (v67 > 0xD3)
  {
    if (v67 != 395 && (v67 != 212 || *(_WORD *)(*(void *)v34[4] + 24) != 395)) {
      goto LABEL_98;
    }
  }
  else if (v67 != 12 && v67 != 36)
  {
    goto LABEL_98;
  }
  uint64_t v24 = 0;
  unsigned int v68 = *((unsigned __int16 *)a7 + 12);
  if (v68 <= 0xD3)
  {
    if (v68 == 12 || v68 == 36) {
      goto LABEL_12;
    }
    goto LABEL_98;
  }
  if (v68 == 395) {
    goto LABEL_12;
  }
  if (v68 == 212 && *(_WORD *)(*(void *)a7[4] + 24) == 395)
  {
LABEL_11:
    uint64_t v24 = 0;
    goto LABEL_12;
  }
LABEL_98:
  uint64_t v69 = v36;
  uint64_t v117 = v35;
  uint64_t v119 = (uint64_t)v34;
  uint64_t v70 = *(void *)(a5 + 48);
  if (v70)
  {
    int v77 = 2;
    uint64_t v78 = v70;
    do
    {
      if (!*(_DWORD *)(v78 + 8))
      {
        if (!v77) {
          goto LABEL_99;
        }
        --v77;
      }
      uint64_t v78 = *(void *)(v78 + 32);
    }
    while (v78);
    if (!v77)
    {
      do
      {
        uint64_t v81 = *(void *)(v70 + 16);
        if (v81 != a2) {
          sub_1CCEF0788(*a9, v81);
        }
        uint64_t v70 = *(void *)(v70 + 32);
      }
      while (v70);
    }
  }
LABEL_99:
  if (v20)
  {
    long long v71 = (llvm::APFloatBase *)a9[2];
    uint64_t v72 = v32[5] + 16 * v69;
    uint64_t v73 = *(llvm **)v72;
    uint64_t v74 = *(void *)(v72 + 8);
    uint64_t v75 = *((void *)v71 + 104);
    if (v75) {
      __int16 v76 = *(_WORD *)(v75 + 8);
    }
    else {
      __int16 v76 = 0;
    }
    uint64_t v79 = v121;
    char v32 = sub_1CD7F3564(v71, (const char *)0xDE, (uint64_t)&v131, v73, v74, (uint64_t)v32, (void *)v69, v76);
    uint64_t v80 = v82;
  }
  else
  {
    uint64_t v79 = v121;
    uint64_t v80 = v69;
  }
  unsigned int v83 = (unsigned __int8 *)(v32[5] + 16 * v80);
  int v84 = *v83;
  if (v84 != v125 || ((v85 = *((void *)v83 + 1), !v84) ? (BOOL v86 = v79 == v85) : (BOOL v86 = 1), !v86))
  {
    unint64_t v87 = (llvm::APFloatBase *)a9[2];
    uint64_t v88 = *((void *)v87 + 104);
    if (v88) {
      __int16 v89 = *(_WORD *)(v88 + 8);
    }
    else {
      __int16 v89 = 0;
    }
    char v32 = sub_1CD7F3564(v87, (const char *)0xD7, (uint64_t)&v131, v125, v79, (uint64_t)v32, (void *)v80, v89);
    uint64_t v80 = v90;
  }
  uint64_t v123 = v80;
  uint64_t v91 = (unsigned __int8 *)(*(void *)(v119 + 40) + 16 * v117);
  if (*v91 != v125 || !(_BYTE)v125 && v79 != *((void *)v91 + 1))
  {
    uint64_t v92 = (llvm::APFloatBase *)a9[2];
    uint64_t v93 = *((void *)v92 + 104);
    if (v93) {
      __int16 v94 = *(_WORD *)(v93 + 8);
    }
    else {
      __int16 v94 = 0;
    }
    uint64_t v95 = sub_1CD7F3564(v92, (const char *)0xD7, (uint64_t)&v131, v125, v79, v119, (void *)v117, v94);
    uint64_t v117 = v96;
    uint64_t v119 = (uint64_t)v95;
  }
  unsigned int v97 = (unsigned __int8 *)(a7[5] + 16 * a8);
  if (*v97 == v125 && ((_BYTE)v125 || v79 == *((void *)v97 + 1)))
  {
    uint64_t v102 = a8;
  }
  else
  {
    uint64_t v98 = (llvm::APFloatBase *)a9[2];
    uint64_t v99 = *((void *)v98 + 104);
    if (v99) {
      __int16 v100 = *(_WORD *)(v99 + 8);
    }
    else {
      __int16 v100 = 0;
    }
    a7 = sub_1CD7F3564(v98, (const char *)0xD7, (uint64_t)&v131, v125, v79, (uint64_t)a7, (void *)a8, v100);
    uint64_t v102 = v101;
  }
  unsigned int v103 = (void *)a9[2];
  unint64_t v104 = v102 | a8 & 0xFFFFFFFF00000000;
  uint64_t v105 = v103[104];
  if (v105) {
    LOWORD(v105) = *(_WORD *)(v105 + 8);
  }
  uint64_t v106 = sub_1CD7F5D38(v103, (const char *)0x8D, (const llvm::APInt *)&v131, v125, v79, (uint64_t)v32, v123, a8, v119, v117, (uint64_t)a7, v104, SHIDWORD(v104), v105);
  *a1 = v106;
  *((_DWORD *)a1 + 2) = v107;
  if (v125 != a3 || (uint64_t v24 = 1, !(_BYTE)v125) && v79 != a4)
  {
    uint64_t v108 = a9[2];
    uint64_t v109 = (uint64_t)a1[1];
    uint64_t v110 = sub_1CD7EBF14(v108, 0, (const llvm::APInt *)&v131, (llvm *)5, 0, 0, 0);
    uint64_t v113 = *(void *)(v108 + 832);
    if (v113) {
      LOWORD(v113) = *(_WORD *)(v113 + 8);
    }
    *a1 = sub_1CCFDED5C(v108, 212, (const llvm::APInt *)&v131, a3, a4, (uint64_t)v106, v109, v112, (uint64_t)v110, v111, v113);
    *((_DWORD *)a1 + 2) = v114;
    uint64_t v24 = 1;
  }
LABEL_12:
  if (v131) {
    llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
  }
  return v24;
}

uint64_t sub_1CD3DA6BC(uint64_t a1, char a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, void *a13)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a2 != 9 || (*(_WORD *)(*a13 + 1020) & 1) == 0) {
    return 0;
  }
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v54 = a5;
  int v55 = a6;
  uint64_t v56 = a7;
  int v57 = a8;
  while (1)
  {
    char v19 = v17;
    uint64_t v20 = *(&v54 + 2 * v18);
    int v21 = *(unsigned __int16 *)(v20 + 24);
    if (v21 == 36 || v21 == 12) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v19)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v20 = 0;
      goto LABEL_13;
    }
  }
  unsigned int v25 = &v54 + 2 * (v18 ^ 1);
  uint64_t v23 = *v25;
  uint64_t v24 = *((unsigned int *)v25 + 2);
LABEL_13:
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v50 = a9;
  int v51 = a10;
  uint64_t v52 = a11;
  int v53 = a12;
  while (1)
  {
    uint64_t v28 = *(&v50 + 2 * v27);
    int v29 = *(unsigned __int16 *)(v28 + 24);
    if (v29 == 12 || v29 == 36) {
      break;
    }
    char v30 = v26;
    char v26 = 1;
    uint64_t v27 = 1;
    if (v30) {
      return 0;
    }
  }
  if (!v20) {
    return 0;
  }
  uint64_t v42 = *((unsigned int *)&v50 + 4 * v27 + 2);
  uint64_t v31 = &v50 + 2 * (v27 ^ 1);
  uint64_t v40 = *((unsigned int *)v31 + 2);
  uint64_t v41 = *v31;
  sub_1CB87DDC4((uint64_t)v49, (uint64_t *)(*(void *)(v20 + 80) + 32));
  sub_1CB87DDC4((uint64_t)v47, (uint64_t *)(*(void *)(v28 + 80) + 32));
  char v32 = v49[0] == &unk_1CFB2E344 ? v49[1] : v48;
  if ((v32[28] & 8) != 0
    || ((_UNKNOWN *)v47[0] != &unk_1CFB2E344 ? (unsigned int v33 = v46) : (unsigned int v33 = (unsigned char *)v47[1]), (v33[28] & 8) != 0))
  {
    uint64_t v13 = 0;
    int v37 = 1;
  }
  else
  {
    int v34 = sub_1CB88A708((uint64_t)v48, (uint64_t)v46, 1);
    sub_1CB892E1C((uint64_t)v44, 1.0);
    llvm::APFloat::convert((uint64_t)v44, v49[0], 1, &v43);
    int v35 = sub_1CB88A72C((uint64_t)v48, (uint64_t)v44);
    int v37 = 0;
    if (!v34 && v35 == 1)
    {
      uint64_t v38 = a13[104];
      if (v38) {
        LOWORD(v38) = *(_WORD *)(v38 + 8);
      }
      *(void *)a1 = sub_1CD7F5D38(a13, (const char *)0x1BB, a4, (llvm *)9, 0, v23, v24, v36, v28, v42, v41, v40, SHIDWORD(v40), v38);
      *(_DWORD *)(a1 + 8) = v39;
      int v37 = 1;
    }
    sub_1CB87DEE4(v45);
    uint64_t v13 = 1;
  }
  sub_1CB87DEE4(v47);
  sub_1CB87DEE4((uint64_t *)v49);
  if (!v37) {
    return 0;
  }
  return v13;
}

uint64_t *sub_1CD3DA974(llvm *a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  v156[8] = *MEMORY[0x1E4F143B8];
  unsigned int v143 = a1;
  uint64_t v144 = a2;
  if ((_BYTE)a1)
  {
    unint64_t v135 = 0;
    unsigned __int8 v137 = sub_1CB8C2FBC((unsigned __int8 *)&v143);
    uint64_t v142 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a2 + 24), 0, a3);
    uint64_t v142 = (uint64_t)v15;
    unint64_t v135 = EVT & 0xFFFFFFFFFFFFFF00;
    unsigned __int8 v137 = EVT;
  }
  uint64_t v140 = a7;
  unint64_t v141 = (const llvm::APInt *)a3;
  unint64_t v154 = v156;
  uint64_t v155 = 0x400000000;
  uint64_t v151 = v153;
  uint64_t v152 = 0x400000000;
  uint64_t v148 = v150;
  uint64_t v149 = 0x400000000;
  int v17 = *(unsigned __int16 *)(a4 + 24);
  if (v17 != 146)
  {
    if (v17 == 193)
    {
      uint64_t v18 = *(void *)(**(void **)(a4 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a4 + 32) + 8);
      uint64_t v20 = *(void **)v18;
      uint64_t v19 = *(void *)(v18 + 8);
      uint64_t v145 = v20;
      uint64_t v146 = v19;
      if ((_BYTE)v20)
      {
        unsigned __int8 v23 = sub_1CB8C2FBC((unsigned __int8 *)&v145);
        unint64_t v25 = 0;
        uint64_t v24 = 0;
      }
      else
      {
        unint64_t v21 = llvm::EVT::getEVT(*(llvm::EVT **)(v19 + 24), 0, v16);
        unsigned __int8 v23 = v21;
        uint64_t v24 = (uint64_t)v22;
        unint64_t v25 = v21 & 0xFFFFFFFFFFFFFF00;
      }
      unsigned int v94 = sub_1CD3DB440((llvm::EVT *)&v143, v22);
      if (v94)
      {
        uint64_t v95 = 0;
        unsigned int v96 = (llvm *)(v25 | v23);
        uint64_t v97 = v94;
        do
        {
          if (v149 >= (unint64_t)HIDWORD(v149)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v148 + v149) = *(_DWORD *)(*(void *)(*(void *)(a4 + 32) + 80) + 76);
          LODWORD(v149) = v149 + 1;
          uint64_t v98 = a11[2];
          uint64_t v99 = *(uint64_t **)(a4 + 32);
          uint64_t v100 = *v99;
          uint64_t v101 = v99[1];
          uint64_t v102 = sub_1CD7EBF14(v98, v95, v141, (llvm *)5, 0, 0, 0);
          __int16 v105 = 0;
          uint64_t v106 = *(void *)(v98 + 832);
          if (v106) {
            __int16 v105 = *(_WORD *)(v106 + 8);
          }
          uint64_t v108 = sub_1CCFDED5C(v98, 148, v141, v96, v24, v100, v101, v104, (uint64_t)v102, v103, v105);
          if (v155 >= (unint64_t)HIDWORD(v155)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v109 = (uint64_t **)&v154[v155];
          *uint64_t v109 = v108;
          v109[1] = v107;
          LODWORD(v155) = v155 + 1;
          uint64_t v110 = a11[2];
          uint64_t v111 = *(void *)(a4 + 32);
          uint64_t v112 = *(void *)(v111 + 40);
          uint64_t v113 = *(void *)(v111 + 48);
          int v114 = sub_1CD7EBF14(v110, v95, v141, (llvm *)5, 0, 0, 0);
          __int16 v117 = 0;
          uint64_t v118 = *(void *)(v110 + 832);
          if (v118) {
            __int16 v117 = *(_WORD *)(v118 + 8);
          }
          uint64_t v120 = sub_1CCFDED5C(v110, 148, v141, v96, v24, v112, v113, v116, (uint64_t)v114, v115, v117);
          if (v152 >= (unint64_t)HIDWORD(v152)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v121 = (uint64_t **)((char *)v151 + 16 * v152);
          char *v121 = v120;
          v121[1] = v119;
          LODWORD(v152) = v152 + 1;
          sub_1CCEF0788(*a11, (uint64_t)v108);
          sub_1CCEF0788(*a11, (uint64_t)v120);
          ++v95;
        }
        while (v97 != v95);
      }
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  if (!*(_WORD *)(a4 + 56))
  {
LABEL_9:
    uint64_t v26 = *(void *)(a4 + 40) + 16 * a5;
    uint64_t v28 = *(void **)v26;
    uint64_t v27 = *(void *)(v26 + 8);
    uint64_t v145 = v28;
    uint64_t v146 = v27;
    if ((_BYTE)v28)
    {
      unsigned __int8 v31 = sub_1CB8C2FBC((unsigned __int8 *)&v145);
      unint64_t v33 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      unint64_t v29 = llvm::EVT::getEVT(*(llvm::EVT **)(v27 + 24), 0, v16);
      unsigned __int8 v31 = v29;
      uint64_t v32 = (uint64_t)v30;
      unint64_t v33 = v29 & 0xFFFFFFFFFFFFFF00;
    }
    unsigned int v34 = sub_1CD3DB440((llvm::EVT *)&v143, v30);
    if (v34)
    {
      uint64_t v35 = 0;
      uint64_t v36 = (llvm *)(v33 | v31);
      uint64_t v37 = v34;
      do
      {
        uint64_t v38 = a11[2];
        int v39 = sub_1CD7EBF14(v38, v35, v141, (llvm *)5, 0, 0, 0);
        __int16 v42 = 0;
        uint64_t v43 = *(void *)(v38 + 832);
        if (v43) {
          __int16 v42 = *(_WORD *)(v43 + 8);
        }
        unsigned int v44 = sub_1CCFDED5C(v38, 148, v141, v36, v32, a4, a5, v41, (uint64_t)v39, v40, v42);
        uint64_t v46 = v45;
        uint64_t v47 = sub_1CD7EBF14(a11[2], 0, v141, v36, v32, 0, 0);
        if (v155 >= (unint64_t)HIDWORD(v155)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v48 = (uint64_t **)&v154[v155];
        *uint64_t v48 = v44;
        v48[1] = v46;
        LODWORD(v155) = v155 + 1;
        if (v152 >= (unint64_t)HIDWORD(v152)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v49 = (uint64_t **)((char *)v151 + 16 * v152);
        *uint64_t v49 = v47;
        v49[1] = (uint64_t *)v15;
        LODWORD(v152) = v152 + 1;
        if (v149 >= (unint64_t)HIDWORD(v149)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v148 + v149) = 22;
        LODWORD(v149) = v149 + 1;
        ++v35;
      }
      while (v37 != v35);
    }
    goto LABEL_20;
  }
  int v122 = *(uint64_t **)(a4 + 32);
  uint64_t v123 = 40 * *(unsigned __int16 *)(a4 + 56);
  do
  {
    uint64_t v124 = *v122;
    int v125 = *(unsigned __int16 *)(*v122 + 24);
    if (v125 == 11 || v125 == 35)
    {
      uint64_t v126 = *(void *)(v124 + 80);
      uint64_t v127 = (void *)(v126 + 24);
      if (*(_DWORD *)(v126 + 32) >= 0x41u) {
        uint64_t v127 = (void *)*v127;
      }
      if (*v127)
      {
        if (v149 >= (unint64_t)HIDWORD(v149)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v148 + v149) = 15;
      }
      else
      {
        if (v149 >= (unint64_t)HIDWORD(v149)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v148 + v149) = 0;
      }
      LODWORD(v149) = v149 + 1;
      if (v155 >= (unint64_t)HIDWORD(v155)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v128 = &v154[v155];
      *uint64_t v128 = 0;
      v128[1] = 0;
      LODWORD(v155) = v155 + 1;
      if (v152 >= (unint64_t)HIDWORD(v152)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v129 = (char *)v151 + 16 * v152;
      *unsigned int v129 = 0;
      v129[1] = 0;
    }
    else
    {
      if (v125 != 193) {
        goto LABEL_9;
      }
      if (v149 >= (unint64_t)HIDWORD(v149)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v148 + v149) = *(_DWORD *)(*(void *)(*(void *)(v124 + 32) + 80) + 76);
      LODWORD(v149) = v149 + 1;
      if (v155 >= (unint64_t)HIDWORD(v155)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v154[v155] = *(_OWORD *)*(void *)(*v122 + 32);
      LODWORD(v155) = v155 + 1;
      if (v152 >= (unint64_t)HIDWORD(v152)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v151 + v152) = *(_OWORD *)(*(void *)(*v122 + 32) + 40);
    }
    LODWORD(v152) = v152 + 1;
    v122 += 5;
    v123 -= 40;
  }
  while (v123);
LABEL_20:
  uint64_t v145 = v147;
  uint64_t v146 = 0x400000000;
  unsigned int v50 = sub_1CD3DB440((llvm::EVT *)&v143, v15);
  int v51 = v141;
  uint64_t v52 = a6;
  int v53 = a11;
  if (v50)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = a10;
    int v57 = (llvm *)(v135 | v137);
    uint64_t v136 = v50;
    uint64_t v138 = v57;
    do
    {
      uint64_t v58 = v53[2];
      uint64_t v59 = sub_1CD7EBF14(v58, v55, v51, (llvm *)5, 0, 0, 0);
      __int16 v62 = 0;
      uint64_t v63 = *(void *)(v58 + 832);
      if (v63) {
        __int16 v62 = *(_WORD *)(v63 + 8);
      }
      uint64_t v64 = sub_1CCFDED5C(v58, 148, v51, v57, v142, v52, v140, v61, (uint64_t)v59, v60, v62);
      int v66 = v65;
      uint64_t v67 = v53[2];
      unsigned int v68 = sub_1CD7EBF14(v67, v55, v51, (llvm *)5, 0, 0, 0);
      __int16 v71 = 0;
      uint64_t v72 = *(void *)(v67 + 832);
      if (v72) {
        __int16 v71 = *(_WORD *)(v72 + 8);
      }
      uint64_t v73 = sub_1CCFDED5C(v67, 148, v51, v57, v142, a9, v56, v70, (uint64_t)v68, v69, v71);
      uint64_t v75 = v74;
      sub_1CCEF0788(*v53, (uint64_t)v64);
      sub_1CCEF0788(*v53, (uint64_t)v73);
      unsigned int v76 = *((_DWORD *)v148 + v55);
      if (v76)
      {
        if (v76 == 15)
        {
          if (v146 >= (unint64_t)HIDWORD(v146)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v57 = v138;
          int v77 = (uint64_t **)((char *)v145 + 16 * v146);
          *int v77 = v64;
          v77[1] = v66;
          LODWORD(v146) = v146 + 1;
          goto LABEL_35;
        }
        uint64_t v79 = (void *)v53[2];
        uint64_t v133 = *((void *)&v154[v54] + 1);
        uint64_t v134 = *(void *)&v154[v54];
        uint64_t v80 = *(void *)((char *)v151 + v54 * 16 + 8);
        uint64_t v81 = v64[5] + 16 * v66;
        unsigned int v82 = *(llvm **)v81;
        uint64_t v131 = *(void *)(v81 + 8);
        uint64_t v132 = *(void *)((char *)v151 + v54 * 16);
        uint64_t v83 = sub_1CD7EE368(v79, v76);
        unint64_t v87 = sub_1CD7F6564(v79, (const char *)0xC0, v51, v82, v131, v134, v133, v85, v132, v80, (uint64_t)v64, (int)v66, (uint64_t)v73, (int)v75, v83, v84);
        if (v146 >= (unint64_t)HIDWORD(v146)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v88 = (uint64_t **)((char *)v145 + 16 * v146);
        char *v88 = v87;
        v88[1] = v86;
        LODWORD(v146) = v146 + 1;
        int v53 = a11;
        sub_1CCEF0788(*a11, (uint64_t)v87);
        int v51 = v141;
        uint64_t v56 = a10;
        uint64_t v52 = a6;
      }
      else
      {
        if (v146 >= (unint64_t)HIDWORD(v146)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v78 = (uint64_t **)((char *)v145 + 16 * v146);
        *uint64_t v78 = v73;
        v78[1] = v75;
        LODWORD(v146) = v146 + 1;
      }
      int v57 = v138;
LABEL_35:
      ++v55;
      ++v54;
    }
    while (v136 != v55);
  }
  __int16 v89 = (void *)v53[2];
  uint64_t v90 = v89[104];
  if (v90) {
    uint64_t v91 = *(unsigned __int16 *)(v90 + 8);
  }
  else {
    uint64_t v91 = 0;
  }
  uint64_t v92 = sub_1CD7FF4E8(v89, (const char *)0x92, v51, v143, v144, (uint64_t *)v145, v146, v91);
  if (v145 != v147) {
    free(v145);
  }
  if (v148 != v150) {
    free(v148);
  }
  if (v151 != v153) {
    free(v151);
  }
  if (v154 != (_OWORD *)v156) {
    free(v154);
  }
  return v92;
}

uint64_t sub_1CD3DB440(llvm::EVT *this, const char *a2)
{
  int v3 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    if ((v3 - 120) >= 0x33) {
      goto LABEL_3;
    }
  }
  else if (!llvm::EVT::isExtendedScalableVector(this))
  {
    goto LABEL_11;
  }
  llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of EVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use EVT::getVectorElementCount() instead", a2);
  int v3 = *(unsigned __int8 *)this;
LABEL_3:
  if (v3)
  {
    if ((v3 - 120) <= 0x32) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", a2);
    }
    return sub_1CB8C32B0((unsigned __int8 *)this);
  }
LABEL_11:

  return llvm::EVT::getExtendedVectorNumElements(this);
}

uint64_t *sub_1CD3DB4E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v170 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v170, v6, 2);
  }
  int v171 = *(_DWORD *)(a2 + 60);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 == 291) {
    uint64_t v8 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 80) + 40)
  }
                   + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 88));
  else {
    uint64_t v8 = *(uint64_t **)(a2 + 40);
  }
  uint64_t v9 = *v8;
  if (*v8 != 5)
  {
    uint64_t v152 = "Atomic operations only support i32";
    goto LABEL_73;
  }
  uint64_t v10 = v8[1];
  uint64_t v11 = *(long long **)(a2 + 32);
  long long v12 = *v11;
  long long v168 = *(long long *)((char *)v11 + 40);
  long long v169 = v12;
  if (v7 == 290)
  {
    uint64_t v13 = sub_1CD7EBF14(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    LODWORD(v15) = v14;
  }
  else
  {
    uint64_t v13 = (uint64_t *)*((void *)v11 + 10);
    uint64_t v15 = *((void *)v11 + 11);
  }
  int v16 = *(_DWORD *)(*(void *)(a2 + 96) + 16);
  if ((v16 & 0xFFFFFFFD) != 1)
  {
    uint64_t v152 = "Unsupported address space for atomic operation";
LABEL_73:
    llvm::report_fatal_error((llvm *)v152, (const llvm::Twine *)1);
  }
  uint64_t v17 = *(__int16 *)(a2 + 24) - 290;
  if (v16 == 1)
  {
    uint64_t v161 = v10;
    std::string::size_type v163 = v13;
    int v156 = v15;
    unsigned int v18 = dword_1CD9360B0[v17];
    uint64_t v19 = v168;
    uint64_t v20 = (uint64_t *)(a1 + 184296);
    if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
    {
      int v43 = DWORD2(v168);
      uint64_t v41 = (uint64_t *)v168;
    }
    else
    {
      uint64_t v21 = a3[2];
      uint64_t v22 = sub_1CD7EBF14(v21, 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      __int16 v25 = 0;
      uint64_t v26 = *(void *)(v21 + 832);
      if (v26) {
        __int16 v25 = *(_WORD *)(v26 + 8);
      }
      uint64_t v27 = sub_1CCFDED5C(v21, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, v168, *((uint64_t *)&v168 + 1), v24, (uint64_t)v22, v23, v25);
      int v29 = v28;
      uint64_t v30 = a3[2];
      unsigned __int8 v31 = sub_1CD7EBF14(v30, 1, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      __int16 v34 = 0;
      uint64_t v35 = *(void *)(v30 + 832);
      if (v35) {
        __int16 v34 = *(_WORD *)(v35 + 8);
      }
      uint64_t v36 = (uint64_t)sub_1CCFDED5C(v30, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, v168, *((uint64_t *)&v168 + 1), v33, (uint64_t)v31, v32, v34);
      uint64_t v37 = v36;
      int v39 = v38;
      uint64_t v40 = a3[2];
      long long v166 = v170;
      if (v170) {
        uint64_t v36 = llvm::MetadataTracking::track((uint64_t)&v166, v170, 2);
      }
      int v167 = v171;
      uint64_t v41 = sub_1CD3D9E40(v36, (uint64_t)v27, v29, v37, v39, v40, (uint64_t)&v166);
      int v43 = v42;
      if (v166) {
        llvm::MetadataTracking::untrack((uint64_t)&v166, v166);
      }
    }
    unsigned int v159 = v18;
    uint64_t v157 = sub_1CD7EBF14(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    int v158 = v57;
    if (*(unsigned char *)(*v20 + 280))
    {
      uint64_t v79 = sub_1CD7EEB94(a3[2], 0, (llvm *)0xAE, 0);
      int v81 = v80;
      int v154 = v43;
      unsigned int v82 = v41;
      if (*(unsigned char *)(*v20 + 287) && *(unsigned char *)(*v20 + 288))
      {
        uint64_t v121 = a3[2];
        uint64_t v122 = *((void *)&v168 + 1);
        uint64_t v123 = sub_1CD7EBF14(v121, -64, (const llvm::APInt *)&v170, (llvm *)6, 0, 0, 0);
        __int16 v126 = 0;
        uint64_t v127 = *(void *)(v121 + 832);
        if (v127) {
          __int16 v126 = *(_WORD *)(v127 + 8);
        }
        uint64_t v128 = sub_1CCFDED5C(v121, 171, (const llvm::APInt *)&v170, (llvm *)6, 0, v19, v122, v125, (uint64_t)v123, v124, v126);
        uint64_t v130 = v129;
        uint64_t v131 = a3[2];
        uint64_t v132 = sub_1CD7EBF14(v131, 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
        __int16 v135 = 0;
        uint64_t v136 = *(void *)(v131 + 832);
        if (v136) {
          __int16 v135 = *(_WORD *)(v136 + 8);
        }
        unsigned __int8 v137 = sub_1CCFDED5C(v131, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, (uint64_t)v128, v130, v134, (uint64_t)v132, v133, v135);
        int v139 = v138;
        uint64_t v140 = a3[2];
        unint64_t v141 = sub_1CD7EBF14(v140, 1, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
        __int16 v144 = 0;
        uint64_t v145 = *(void *)(v140 + 832);
        if (v145) {
          __int16 v144 = *(_WORD *)(v145 + 8);
        }
        uint64_t v146 = (uint64_t)sub_1CCFDED5C(v140, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, (uint64_t)v128, v130, v143, (uint64_t)v141, v142, v144);
        uint64_t v147 = v146;
        int v149 = v148;
        uint64_t v150 = a3[2];
        int v164 = v170;
        if (v170) {
          uint64_t v146 = llvm::MetadataTracking::track((uint64_t)&v164, v170, 2);
        }
        int v165 = v171;
        uint64_t v79 = (uint64_t)sub_1CD3D9E40(v146, (uint64_t)v137, v139, v147, v149, v150, (uint64_t)&v164);
        int v81 = v151;
        if (v164) {
          llvm::MetadataTracking::untrack((uint64_t)&v164, v164);
        }
      }
      uint64_t v83 = a3[2];
      int v84 = *(uint64_t **)(v83 + 40);
      uint64_t v85 = *v20;
      uint64_t v86 = *v84;
      LODWORD(v181) = 0;
      if (sub_1CD3CA314(v85, v86, "GAtomCMode", &v181)) {
        uint64_t v87 = v181;
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v88 = sub_1CD7EBF14(v83, v87, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      int v90 = v89;
      uint64_t v91 = a3[2];
      uint64_t v92 = *v20;
      uint64_t v93 = *v84;
      LODWORD(v181) = 0;
      if (sub_1CD3CA314(v92, v93, "GAtomSLCMode", &v181)) {
        uint64_t v94 = v181;
      }
      else {
        uint64_t v94 = 0;
      }
      uint64_t v95 = sub_1CD7EBF14(v91, v94, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      uint64_t v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      uint64_t v183 = v82;
      int v184 = v154;
      uint64_t v185 = v79;
      LODWORD(v186) = v81;
      std::string::size_type v187 = v163;
      LODWORD(v188) = v156;
      *(void *)&long long v189 = v88;
      DWORD2(v189) = v90;
      int v190 = v95;
      int v191 = v96;
      uint64_t v192 = v157;
      int v193 = v158;
      uint64_t v97 = sub_1CD7F95FC(a3[2], v9, v161, 1, 0);
      uint64_t v99 = v98;
      __int16 v100 = 0;
      uint64_t v101 = (void *)a3[2];
      uint64_t v102 = v101[104];
      if (v102) {
        __int16 v100 = *(_WORD *)(v102 + 8);
      }
      uint64_t v103 = (const char *)v159;
      uint64_t v104 = 7;
    }
    else
    {
      uint64_t v58 = sub_1CD7EBF14(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      uint64_t v59 = *v20;
      uint64_t v155 = v9;
      int v153 = v60;
      if (*(unsigned char *)(*v20 + 310))
      {
        uint64_t v63 = v41;
        int v64 = v43;
        uint64_t v65 = 1;
        int v61 = v156;
        __int16 v62 = v163;
      }
      else
      {
        int v61 = v156;
        __int16 v62 = v163;
        uint64_t v63 = v41;
        int v64 = v43;
        if (*(unsigned char *)(v59 + 311))
        {
          uint64_t v65 = 2;
        }
        else if (*(unsigned char *)(v59 + 312))
        {
          uint64_t v65 = 3;
        }
        else
        {
          uint64_t v65 = 0;
        }
      }
      __int16 v105 = sub_1CD7EBF14(a3[2], v65, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      int v107 = v106;
      uint64_t v108 = sub_1CD7EBF14(a3[2], 1, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      int v110 = v109;
      uint64_t v111 = sub_1CD7EBF14(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      uint64_t v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      uint64_t v183 = v63;
      int v184 = v64;
      uint64_t v185 = (uint64_t)v58;
      LODWORD(v186) = v153;
      std::string::size_type v187 = v62;
      LODWORD(v188) = v61;
      *(void *)&long long v189 = v105;
      DWORD2(v189) = v107;
      int v190 = v108;
      int v191 = v110;
      uint64_t v192 = v111;
      int v193 = v112;
      unint64_t v194 = v157;
      int v195 = v158;
      uint64_t v97 = sub_1CD7F95FC(a3[2], v155, v161, 1, 0);
      uint64_t v99 = v113;
      __int16 v100 = 0;
      uint64_t v101 = (void *)a3[2];
      uint64_t v114 = v101[104];
      if (v114) {
        __int16 v100 = *(_WORD *)(v114 + 8);
      }
      uint64_t v103 = (const char *)v159;
      uint64_t v104 = 8;
    }
    uint64_t v56 = sub_1CD7FF854(v101, v103, (const llvm::APInt *)&v170, v97, v99, &v181, v104, v100);
  }
  else
  {
    unsigned int v44 = sub_1CD7EBF14(a3[2], qword_1CD9360F0[v17], (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    int v46 = v45;
    uint64_t v47 = sub_1CD7F95FC(a3[2], v9, v10, 1, 0);
    uint64_t v49 = v47;
    uint64_t v50 = v48;
    if (*(unsigned char *)(*(void *)(a1 + 184296) + 280))
    {
      uint64_t v160 = v48;
      uint64_t v162 = v47;
      uint64_t v66 = *(void *)(v168 + 40) + 16 * DWORD2(v168);
      uint64_t v67 = *(llvm **)v66;
      uint64_t v68 = *(void *)(v66 + 8);
      uint64_t v69 = a3[2];
      uint64_t v70 = sub_1CD7EBF14(v69, 1, (const llvm::APInt *)&v170, *(llvm **)v66, v68, 0, 0);
      uint64_t v73 = *(void *)(v69 + 832);
      if (v73) {
        LOWORD(v73) = *(_WORD *)(v73 + 8);
      }
      uint64_t v74 = sub_1CCFDED5C(v69, 177, (const llvm::APInt *)&v170, v67, v68, v168, *((uint64_t *)&v168 + 1), v72, (uint64_t)v70, v71, v73);
      DWORD2(v168) = v75;
      unsigned int v76 = (llvm::APFloatBase *)a3[2];
      uint64_t v77 = *((void *)v76 + 104);
      if (v77) {
        __int16 v78 = *(_WORD *)(v77 + 8);
      }
      else {
        __int16 v78 = 0;
      }
      uint64_t v115 = sub_1CD7F3564(v76, (const char *)0xC9, (uint64_t)&v170, (llvm *)4, 0, (uint64_t)v74, *((void **)&v168 + 1), v78);
      __int16 v116 = 0;
      uint64_t v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      *(void *)&long long v168 = v115;
      DWORD2(v168) = v117;
      uint64_t v183 = v44;
      int v184 = v46;
      uint64_t v185 = (uint64_t)v115;
      LODWORD(v186) = v117;
      std::string::size_type v187 = v13;
      LODWORD(v188) = v15;
      uint64_t v118 = (void *)a3[2];
      uint64_t v119 = v118[104];
      if (v119) {
        __int16 v116 = *(_WORD *)(v119 + 8);
      }
      uint64_t v56 = sub_1CD7FF854(v118, (const char *)0x1BF, (const llvm::APInt *)&v170, v162, v160, &v181, 4, v116);
    }
    else
    {
      uint64_t v182 = 0;
      LODWORD(v183) = 0;
      LOBYTE(v185) = 0;
      uint64_t v186 = 0;
      LOBYTE(v187) = 0;
      int v190 = 0;
      int v191 = 0;
      uint64_t v188 = 0;
      *(void *)&long long v189 = 0;
      DWORD2(v189) = 0;
      uint64_t v192 = a3;
      sub_1CD3ED174((uint64_t)&v181, (uint64_t *)&v168, 4, 0, 4, 0, 4, 0, 0);
      uint64_t v172 = v169;
      int v173 = DWORD2(v169);
      char v174 = v44;
      int v175 = v46;
      long long v176 = v189;
      int v51 = sub_1CD3DBEEC((uint64_t)&v181);
      __int16 v52 = 0;
      uint64_t v177 = v51;
      uint64_t v178 = v53;
      uint64_t v179 = v13;
      int v180 = v15;
      uint64_t v54 = (void *)a3[2];
      uint64_t v55 = v54[104];
      if (v55) {
        __int16 v52 = *(_WORD *)(v55 + 8);
      }
      uint64_t v56 = sub_1CD7FF854(v54, (const char *)0x1C0, (const llvm::APInt *)&v170, v49, v50, &v172, 5, v52);
      if (v182) {
        llvm::MetadataTracking::untrack((uint64_t)&v182, v182);
      }
    }
  }
  if (v170) {
    llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
  }
  return v56;
}

uint64_t *sub_1CD3DBEEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2)) {
    return *(uint64_t **)(a1 + 80);
  }
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(*(void *)(a1 + 96) + 16);
  uint64_t v6 = *(void *)(v4 + 80);
  int v7 = (uint64_t *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    int v7 = (uint64_t *)*v7;
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(unsigned __int8 **)(v4 + 64);
  uint64_t v10 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v10, v9, 2);
  }
  int v11 = *(_DWORD *)(v4 + 60);
  int v2 = sub_1CD7EBF14(v5, v8, (const llvm::APInt *)&v10, *(llvm **)(a1 + 48), *(void *)(a1 + 56), 1, 0);
  if (v10) {
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  }
  return v2;
}

uint64_t *sub_1CD3DBFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  __int16 v100 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v100, v6, 2);
  }
  int v101 = *(_DWORD *)(a2 + 60);
  int v7 = *(uint64_t **)(a2 + 40);
  uint64_t v8 = *v7;
  if (*v7 != 5)
  {
    uint64_t v92 = "Atomic operations only support i32";
    goto LABEL_41;
  }
  uint64_t v9 = v7[1];
  uint64_t v10 = *(long long **)(a2 + 32);
  long long v11 = *v10;
  long long v98 = *(long long *)((char *)v10 + 40);
  long long v99 = v11;
  uint64_t v13 = *((void *)v10 + 10);
  uint64_t v12 = *((void *)v10 + 11);
  long long v97 = *(long long *)((char *)v10 + 120);
  int v14 = *(_DWORD *)(*(void *)(a2 + 96) + 16);
  if ((v14 & 0xFFFFFFFD) != 1)
  {
    uint64_t v92 = "Unsupported address space for atomic operation";
LABEL_41:
    llvm::report_fatal_error((llvm *)v92, (const llvm::Twine *)1);
  }
  if (v14 != 1)
  {
    if (!*(unsigned char *)(*(void *)(a1 + 184296) + 280))
    {
      int v112 = 0;
      LODWORD(v113) = 0;
      LOBYTE(v115) = 0;
      uint64_t v116 = 0;
      LOBYTE(v117) = 0;
      uint64_t v120 = 0;
      int v121 = 0;
      uint64_t v118 = 0;
      *(void *)&long long v119 = 0;
      DWORD2(v119) = 0;
      uint64_t v122 = a3;
      sub_1CD3ED174((uint64_t)&v111, (uint64_t *)&v98, 4, 0, 4, 0, 4, 0, 0);
      uint64_t v27 = sub_1CD7F95FC(*(void *)(a3 + 16), v8, v9, 1, 0);
      uint64_t v29 = v28;
      uint64_t v30 = *(void **)(a3 + 16);
      uint64_t v102 = v99;
      int v103 = DWORD2(v99);
      long long v104 = v119;
      unsigned __int8 v31 = sub_1CD3DBEEC((uint64_t)&v111);
      __int16 v20 = 0;
      __int16 v105 = v31;
      uint64_t v106 = v32;
      uint64_t v107 = v97;
      int v108 = DWORD2(v97);
      uint64_t v109 = v13;
      int v110 = v12;
      uint64_t v33 = v30[104];
      if (v33) {
        __int16 v20 = *(_WORD *)(v33 + 8);
      }
      uint64_t v23 = v30;
      uint64_t v24 = 450;
      uint64_t v25 = v27;
      uint64_t v26 = v29;
      goto LABEL_14;
    }
    uint64_t v94 = v12;
    uint64_t v67 = v13;
    uint64_t v68 = *(void *)(v98 + 40) + 16 * DWORD2(v98);
    uint64_t v69 = *(llvm **)v68;
    uint64_t v70 = *(void *)(v68 + 8);
    uint64_t v71 = *(void *)(a3 + 16);
    uint64_t v72 = sub_1CD7EBF14(v71, 1, (const llvm::APInt *)&v100, *(llvm **)v68, v70, 0, 0);
    uint64_t v75 = *(void *)(v71 + 832);
    if (v75) {
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    }
    uint64_t v77 = sub_1CCFDED5C(v71, 177, (const llvm::APInt *)&v100, v69, v70, v98, *((uint64_t *)&v98 + 1), v74, (uint64_t)v72, v73, v75);
    __int16 v78 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v79 = *((void *)v78 + 104);
    if (v79) {
      __int16 v80 = *(_WORD *)(v79 + 8);
    }
    else {
      __int16 v80 = 0;
    }
    uint64_t v13 = v67;
    int v81 = sub_1CD7F3564(v78, (const char *)0xC9, (uint64_t)&v100, (llvm *)4, 0, (uint64_t)v77, v76, v80);
    int v83 = v82;
    uint64_t v60 = sub_1CD7F95FC(*(void *)(a3 + 16), v8, v9, 1, 0);
    uint64_t v62 = v84;
    __int16 v63 = 0;
    uint64_t v111 = v99;
    LODWORD(v112) = DWORD2(v99);
    int v64 = *(void **)(a3 + 16);
    uint64_t v113 = v81;
    int v114 = v83;
    uint64_t v115 = v97;
    LODWORD(v116) = DWORD2(v97);
    uint64_t v117 = v67;
    uint64_t v12 = v94;
    LODWORD(v118) = v94;
    uint64_t v85 = v64[104];
    if (v85) {
      __int16 v63 = *(_WORD *)(v85 + 8);
    }
    uint64_t v66 = 449;
LABEL_35:
    __int16 v34 = sub_1CD7FF854(v64, (const char *)v66, (const llvm::APInt *)&v100, v60, v62, &v111, 4, v63);
    unsigned int v36 = v86;
    goto LABEL_36;
  }
  if (*(unsigned char *)(*(void *)(a1 + 184296) + 280))
  {
    uint64_t v93 = v13;
    uint64_t v37 = *(void *)(a3 + 16);
    int v38 = sub_1CD7EBF14(v37, 0, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
    __int16 v41 = 0;
    uint64_t v42 = *(void *)(v37 + 832);
    if (v42) {
      __int16 v41 = *(_WORD *)(v42 + 8);
    }
    int v43 = sub_1CCFDED5C(v37, 53, (const llvm::APInt *)&v100, (llvm *)5, 0, v98, *((uint64_t *)&v98 + 1), v40, (uint64_t)v38, v39, v41);
    int v45 = v44;
    uint64_t v46 = *(void *)(a3 + 16);
    uint64_t v47 = sub_1CD7EBF14(v46, 1, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
    __int16 v50 = 0;
    uint64_t v51 = *(void *)(v46 + 832);
    if (v51) {
      __int16 v50 = *(_WORD *)(v51 + 8);
    }
    uint64_t v52 = (uint64_t)sub_1CCFDED5C(v46, 53, (const llvm::APInt *)&v100, (llvm *)5, 0, v98, *((uint64_t *)&v98 + 1), v49, (uint64_t)v47, v48, v50);
    uint64_t v53 = v52;
    int v55 = v54;
    uint64_t v56 = *(void *)(a3 + 16);
    uint64_t v95 = v100;
    if (v100) {
      uint64_t v52 = llvm::MetadataTracking::track((uint64_t)&v95, v100, 2);
    }
    int v96 = v101;
    int v57 = sub_1CD3D9E40(v52, (uint64_t)v43, v45, v53, v55, v56, (uint64_t)&v95);
    int v59 = v58;
    if (v95) {
      llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
    }
    uint64_t v60 = sub_1CD7F95FC(*(void *)(a3 + 16), v8, v9, 1, 0);
    uint64_t v62 = v61;
    __int16 v63 = 0;
    uint64_t v111 = v99;
    LODWORD(v112) = DWORD2(v99);
    int v64 = *(void **)(a3 + 16);
    uint64_t v113 = v57;
    int v114 = v59;
    uint64_t v115 = v97;
    LODWORD(v116) = DWORD2(v97);
    uint64_t v13 = v93;
    uint64_t v117 = v93;
    LODWORD(v118) = v12;
    uint64_t v65 = v64[104];
    if (v65) {
      __int16 v63 = *(_WORD *)(v65 + 8);
    }
    uint64_t v66 = 451;
    goto LABEL_35;
  }
  int v112 = 0;
  LODWORD(v113) = 0;
  LOBYTE(v115) = 0;
  uint64_t v116 = 0;
  LOBYTE(v117) = 0;
  uint64_t v120 = 0;
  int v121 = 0;
  uint64_t v118 = 0;
  *(void *)&long long v119 = 0;
  DWORD2(v119) = 0;
  uint64_t v122 = a3;
  sub_1CD3ED174((uint64_t)&v111, (uint64_t *)&v98, 4, 0, 6, 0, 5, 0, 0);
  uint64_t v15 = sub_1CD7F95FC(*(void *)(a3 + 16), v8, v9, 1, 0);
  uint64_t v17 = v16;
  unsigned int v18 = *(void **)(a3 + 16);
  uint64_t v102 = v99;
  int v103 = DWORD2(v99);
  long long v104 = v119;
  uint64_t v19 = sub_1CD3DBEEC((uint64_t)&v111);
  __int16 v20 = 0;
  __int16 v105 = v19;
  uint64_t v106 = v21;
  uint64_t v107 = v97;
  int v108 = DWORD2(v97);
  uint64_t v109 = v13;
  int v110 = v12;
  uint64_t v22 = v18[104];
  if (v22) {
    __int16 v20 = *(_WORD *)(v22 + 8);
  }
  uint64_t v23 = v18;
  uint64_t v24 = 452;
  uint64_t v25 = v15;
  uint64_t v26 = v17;
LABEL_14:
  __int16 v34 = sub_1CD7FF854(v23, (const char *)v24, (const llvm::APInt *)&v100, v25, v26, &v102, 5, v20);
  unsigned int v36 = v35;
  if (v112) {
    llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
  }
LABEL_36:
  uint64_t v87 = sub_1CD3DC614(*(void **)(a3 + 16), (const llvm::APInt *)&v100, *(llvm **)(*(void *)(a2 + 40) + 16), *(void *)(*(void *)(a2 + 40) + 24), (uint64_t)v34, v36, v13, v12, 0x11u, 0, 0, 0, 0);
  int v90 = sub_1CD7FFB94(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v100, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v34, 0, v89, (uint64_t)v87, v88, (uint64_t)v34, 1);
  if (v100) {
    llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
  }
  return v90;
}

uint64_t *sub_1CD3DC614(void *a1, const llvm::APInt *a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a10)
  {
    if (a13) {
      uint64_t v26 = 139;
    }
    else {
      uint64_t v26 = 138;
    }
    v36[0] = (uint64_t)a3;
    v36[1] = a4;
    char v37 = 1;
    uint64_t v38 = 0;
    uint64_t v28 = a10;
    int v29 = a11;
    uint64_t v30 = a5;
    int v31 = a6;
    uint64_t v32 = a7;
    int v33 = a8;
    uint64_t v34 = sub_1CD7EE368(a1, a9);
    uint64_t v35 = v27;
    return sub_1CD7EB5F0(a1, (const char *)v26, a2, v36, 2, &v28, 4);
  }
  else
  {
    uint64_t v21 = sub_1CD7EE368(a1, a9);
    uint64_t v24 = a1[104];
    if (v24) {
      LOWORD(v24) = *(_WORD *)(v24 + 8);
    }
    return sub_1CD7F5D38(a1, (const char *)0xC1, a2, a3, a4, a5, a6, v23, a7, a8, v21, v22, SHIDWORD(v22), v24);
  }
}

uint64_t *sub_1CD3DC75C(uint64_t a1, uint64_t a2, llvm::APFloatBase *a3)
{
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v93 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v93, v6, 2);
  }
  int v94 = *(_DWORD *)(a2 + 60);
  int v7 = *(unsigned char **)(a2 + 80);
  int v8 = *(_DWORD *)(*(void *)v7 + 8) >> 8;
  if (v8 == 64 || v8 == 3)
  {
    uint64_t v12 = *(void *)(*((void *)a3 + 5) + 344);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 400))(v12);
    uint64_t v15 = v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 336))(v12);
    uint64_t v17 = *(_DWORD *)(a2 + 88)
        + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v15) * v13;
    if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
    {
      uint64_t v32 = sub_1CD7EBF14((uint64_t)a3, v17, (const llvm::APInt *)&v93, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), 0, 0);
LABEL_28:
      uint64_t v10 = v32;
      goto LABEL_11;
    }
    uint64_t v10 = sub_1CD7EBF14((uint64_t)a3, v17, (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
    unint64_t v19 = v18;
    __int16 v20 = *(llvm::GlobalValue **)(a2 + 80);
    uint64_t v21 = *(llvm::Module **)(**((void **)a3 + 5) + 40);
    v95[0] = "agx.driver_bindings";
    __int16 v96 = 259;
    uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v21, v95);
    if (NamedMetadata)
    {
      uint64_t v23 = NamedMetadata;
      int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
      if (NumOperands)
      {
        int v25 = NumOperands;
        unsigned int v26 = 0;
        while (1)
        {
          uint64_t Operand = llvm::NamedMDNode::getOperand(v23, v26);
          LOBYTE(v95[0]) = 0;
          if (sub_1CB8F0C74(Operand, v20, (BOOL *)v95)) {
            break;
          }
          if (v25 == ++v26) {
            goto LABEL_20;
          }
        }
LABEL_49:
        if (LOBYTE(v95[0]))
        {
          uint64_t v10 = sub_1CD7ED9FC((uint64_t)a3, v17, (llvm *)5, 0, 1, 0);
          unint64_t v19 = v19 & 0xFFFFFFFF00000000 | v92;
        }
      }
    }
    else
    {
      v95[0] = "agx.compute_driver_bindings";
      __int16 v96 = 259;
      uint64_t v85 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v21, v95);
      if (v85)
      {
        uint64_t v86 = llvm::NamedMDNode::getOperand(v85, 0);
        unint64_t v87 = *(unsigned int *)(v86 + 8);
        if (v87)
        {
          uint64_t v88 = v86;
          for (unint64_t i = 0; i < v87; ++i)
          {
            uint64_t v90 = v88 - 8 * v87;
            uint64_t v91 = *(void *)(v90 + 8 * i);
            if (v91)
            {
              if (sub_1CB8F0DA8(*(unsigned char **)(v90 + 8 * i)))
              {
                LOBYTE(v95[0]) = 0;
                if (sub_1CB8F0C74(v91, v20, (BOOL *)v95)) {
                  goto LABEL_49;
                }
              }
            }
            unint64_t v87 = *(unsigned int *)(v88 + 8);
          }
        }
      }
    }
LABEL_20:
    if (**(unsigned char **)(a2 + 40) != 6) {
      goto LABEL_11;
    }
    uint64_t v28 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
    uint64_t v31 = *((void *)a3 + 104);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v32 = sub_1CCFDED5C((uint64_t)a3, 54, (const llvm::APInt *)&v93, (llvm *)6, 0, (uint64_t)v10, v19, v30, (uint64_t)v28, v29, v31);
    goto LABEL_28;
  }
  if (v7[16] != 3 || llvm::GlobalValue::isDeclaration(*(llvm::GlobalValue **)(a2 + 80)))
  {
    if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
    {
      uint64_t v10 = 0;
      goto LABEL_11;
    }
    int v33 = sub_1CD7ECF00((uint64_t)a3, *(void *)(a2 + 80), (uint64_t)&v93, (llvm *)0xAE, 0, *(void *)(a2 + 88), 0, 0);
    int v35 = v34;
    unsigned int v36 = sub_1CD8015C0((uint64_t)a3, 33, (const llvm::APInt *)&v93, (llvm *)5, 0, (uint64_t)v33, v34);
    uint64_t v38 = v37;
    uint64_t v39 = sub_1CD8015C0((uint64_t)a3, 34, (const llvm::APInt *)&v93, (llvm *)5, 0, (uint64_t)v33, v35);
    uint64_t v42 = *((void *)a3 + 104);
    if (v42) {
      LOWORD(v42) = *(_WORD *)(v42 + 8);
    }
    uint64_t v32 = sub_1CCFDED5C((uint64_t)a3, 54, (const llvm::APInt *)&v93, (llvm *)6, 0, (uint64_t)v36, v38, v41, (uint64_t)v39, v40, v42);
    goto LABEL_28;
  }
  uint64_t v43 = *(void *)(*((void *)a3 + 5) + 344);
  uint64_t GlobalResource = llvm::FunctionGroup::getGlobalResource(v43, 24);
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v43 + 400))(v43, GlobalResource);
  uint64_t v47 = v46;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 336))(v43);
  uint64_t v49 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v48 + 24))(v48, v47) * v45;
  uint64_t v51 = sub_1CD7EBF14((uint64_t)a3, v49, (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
  __int16 v52 = 0;
  uint64_t v53 = *((void *)a3 + 104);
  if (v53) {
    __int16 v52 = *(_WORD *)(v53 + 8);
  }
  int v54 = sub_1CD7F3564(a3, (const char *)0x18B, (uint64_t)&v93, (llvm *)5, 0, (uint64_t)v51, v50, v52);
  uint64_t v56 = v55;
  int v58 = sub_1CD7EBF14((uint64_t)a3, (v49 + 4), (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
  __int16 v59 = 0;
  uint64_t v60 = *((void *)a3 + 104);
  if (v60) {
    __int16 v59 = *(_WORD *)(v60 + 8);
  }
  uint64_t v61 = sub_1CD7F3564(a3, (const char *)0x18B, (uint64_t)&v93, (llvm *)5, 0, (uint64_t)v58, v57, v59);
  uint64_t v63 = v62;
  uint64_t v64 = *(void *)(*((void *)a3 + 5) + 344);
  int v65 = (*(uint64_t (**)(uint64_t, void))(*(void *)v64 + 400))(v64, *(void *)(a2 + 80));
  uint64_t v67 = v66;
  uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 336))(v64);
  int v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v68 + 24))(v68, v67);
  __int16 v71 = 0;
  uint64_t v72 = (*(_DWORD *)(a2 + 88) + v69 * v65);
  uint64_t v73 = *((void *)a3 + 104);
  if (v73) {
    __int16 v71 = *(_WORD *)(v73 + 8);
  }
  uint64_t v75 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v93, (llvm *)0x31, 0, (uint64_t)v54, v56, v70, (uint64_t)v61, v63, v71);
  unint64_t v76 = (unint64_t)v74;
  __int16 v77 = 0;
  uint64_t v78 = *((void *)a3 + 104);
  if (v78) {
    __int16 v77 = *(_WORD *)(v78 + 8);
  }
  uint64_t v10 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v93, (llvm *)6, 0, (uint64_t)v75, v74, v77);
  unint64_t v80 = v76 & 0xFFFFFFFF00000000 | v79;
  if (v72)
  {
    int v81 = sub_1CD7EBF14((uint64_t)a3, v72, (const llvm::APInt *)&v93, (llvm *)6, 0, 0, 0);
    uint64_t v84 = *((void *)a3 + 104);
    if (v84) {
      LOWORD(v84) = *(_WORD *)(v84 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v93, (llvm *)6, 0, (uint64_t)v10, v80, v83, (uint64_t)v81, v82, v84);
  }
LABEL_11:
  if (v93) {
    llvm::MetadataTracking::untrack((uint64_t)&v93, v93);
  }
  return v10;
}

uint64_t sub_1CD3DCE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v11 = *(uint64_t **)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *v11;
  int v14 = *((_DWORD *)v11 + 2);
  uint64_t v15 = v11[5];
  uint64_t v16 = v11[6];
  uint64_t v17 = *(llvm **)v12;
  uint64_t v18 = *(void *)(v12 + 8);
  unint64_t v19 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v56 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v56, v19, 2);
  }
  int v57 = *(_DWORD *)(a2 + 60);
  int v20 = *(unsigned __int16 *)(v15 + 24);
  if (v20 != 35 && v20 != 11) {
    goto LABEL_16;
  }
  if (*(_WORD *)(v13 + 24) != 192) {
    goto LABEL_16;
  }
  uint64_t v22 = *(void *)(v13 + 48);
  if (!v22) {
    goto LABEL_16;
  }
  uint64_t v23 = *(unsigned __int16 *)(a2 + 24);
  int v24 = 1;
  do
  {
    if (*(_DWORD *)(v22 + 8) == v14)
    {
      if (!v24) {
        goto LABEL_16;
      }
      --v24;
    }
    uint64_t v22 = *(void *)(v22 + 32);
  }
  while (v22);
  if (v24) {
    goto LABEL_16;
  }
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
  uint64_t v28 = (void *)(v27 + 24);
  if (*(_DWORD *)(v27 + 32) >= 0x41u) {
    uint64_t v28 = (void *)*v28;
  }
  if (*v28 != 1) {
    goto LABEL_16;
  }
  uint64_t v29 = *(void **)(v13 + 32);
  uint64_t v30 = v29[10];
  uint64_t v31 = v29[11];
  uint64_t v32 = v29[15];
  uint64_t v33 = v29[16];
  int v34 = *(unsigned __int16 *)(v30 + 24);
  if (v34 == 35 || v34 == 11)
  {
    int v36 = *(unsigned __int16 *)(v32 + 24);
  }
  else
  {
    int v36 = *(unsigned __int16 *)(v32 + 24);
    if (v36 != 35 && v36 != 11) {
      goto LABEL_16;
    }
    uint64_t v52 = *(void *)(v30 + 48);
    if (!v52) {
      goto LABEL_16;
    }
    int v53 = 1;
    do
    {
      if (*(_DWORD *)(v52 + 8) == v31)
      {
        if (!v53) {
          goto LABEL_16;
        }
        --v53;
      }
      uint64_t v52 = *(void *)(v52 + 32);
    }
    while (v52);
    if (v53) {
      goto LABEL_16;
    }
  }
  if (v36 != 11 && v36 != 35)
  {
    uint64_t v37 = *(void *)(v32 + 48);
    if (!v37) {
      goto LABEL_16;
    }
    int v38 = 1;
    do
    {
      if (*(_DWORD *)(v37 + 8) == v33)
      {
        if (!v38) {
          goto LABEL_16;
        }
        --v38;
      }
      uint64_t v37 = *(void *)(v37 + 32);
    }
    while (v37);
    if (v38)
    {
LABEL_16:
      uint64_t v25 = 0;
      goto LABEL_17;
    }
  }
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(v39 + 832);
  if (v40) {
    LOWORD(v40) = *(_WORD *)(v40 + 8);
  }
  uint64_t v41 = sub_1CCFDED5C(v39, v23, (const llvm::APInt *)&v56, v17, v18, v30, v31, a8, v15, v16, v40);
  int v54 = v43;
  uint64_t v55 = (uint64_t)v41;
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v45 = *(void *)(v44 + 832);
  if (v45) {
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  }
  uint64_t v46 = sub_1CCFDED5C(v44, v23, (const llvm::APInt *)&v56, v17, v18, v32, v33, v42, v15, v16, v45);
  uint64_t v47 = *(uint64_t **)(v13 + 32);
  *(void *)a1 = sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v56, v17, v18, *v47, v47[1], v49, v47[5], v47[6], v55, v54, (uint64_t)v46, v48, v47[20], v47[21]);
  *(_DWORD *)(a1 + 8) = v50;
  uint64_t v25 = 1;
LABEL_17:
  if (v56) {
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  }
  return v25;
}

uint64_t sub_1CD3DD0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(unsigned char **)(a2 + 40) != 2) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  int v58 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v58, v6, 2);
  }
  int v59 = *(_DWORD *)(a2 + 60);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)v7;
  int v9 = *(_DWORD *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(_WORD *)(v10 + 24) != 193) {
    goto LABEL_13;
  }
  if (*(_WORD *)(v8 + 24) != 193) {
    goto LABEL_26;
  }
  uint64_t v12 = *(void *)(v10 + 48);
  if (!v12) {
    goto LABEL_13;
  }
  int v13 = 1;
  do
  {
    if (*(_DWORD *)(v12 + 8) == v11)
    {
      if (!v13) {
        goto LABEL_13;
      }
      --v13;
    }
    uint64_t v12 = *(void *)(v12 + 32);
  }
  while (v12);
  if (!v13)
  {
LABEL_26:
    int v15 = v9;
    uint64_t v14 = v8;
  }
  else
  {
LABEL_13:
    uint64_t v14 = v10;
    int v15 = v11;
    uint64_t v10 = v8;
    LODWORD(v11) = v9;
  }
  if (*(_WORD *)(v10 + 24) != 193) {
    goto LABEL_52;
  }
  uint64_t v16 = *(void *)(v10 + 32);
  uint64_t v17 = *(void *)v16;
  if (*(_WORD *)(*(void *)v16 + 24) == 171)
  {
    uint64_t v18 = *(void *)(*(void *)(v17 + 32) + 40);
    int v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      uint64_t v21 = *(void *)(v18 + 80);
      uint64_t v22 = (llvm::APInt *)(v21 + 24);
      unsigned int v23 = *(_DWORD *)(v21 + 32);
      if (v23 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v22) == v23 - 1) {
          goto LABEL_52;
        }
      }
      else if (*(void *)v22 == 1)
      {
        goto LABEL_52;
      }
    }
  }
  if (*(_WORD *)(v14 + 24) != 193) {
    goto LABEL_39;
  }
  uint64_t v26 = **(void **)(v14 + 32);
  if (*(_WORD *)(v26 + 24) != 171) {
    goto LABEL_39;
  }
  uint64_t v27 = *(void *)(*(void *)(v26 + 32) + 40);
  int v28 = *(unsigned __int16 *)(v27 + 24);
  if (v28 != 35 && v28 != 11) {
    goto LABEL_39;
  }
  uint64_t v30 = *(void *)(v27 + 80);
  uint64_t v31 = (llvm::APInt *)(v30 + 24);
  unsigned int v32 = *(_DWORD *)(v30 + 32);
  if (v32 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v31) != v32 - 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v24 = 0;
    goto LABEL_53;
  }
  if (*(void *)v31 == 1) {
    goto LABEL_52;
  }
LABEL_39:
  uint64_t v33 = *(void *)(v10 + 48);
  if (!v33) {
    goto LABEL_46;
  }
  int v34 = 1;
  uint64_t v35 = *(void *)(v10 + 48);
  do
  {
    if (*(_DWORD *)(v35 + 8) == v11)
    {
      if (!v34) {
        goto LABEL_46;
      }
      --v34;
    }
    uint64_t v35 = *(void *)(v35 + 32);
  }
  while (v35);
  if (v34)
  {
LABEL_46:
    for (uint64_t i = *(void *)(a2 + 48); i; uint64_t i = *(void *)(i + 32))
    {
      int v37 = *(unsigned __int16 *)(*(void *)(i + 16) + 24);
      if (v37 == 190 || v37 == 259) {
        goto LABEL_52;
      }
    }
  }
  int v38 = *(unsigned __int16 *)(a2 + 24);
  if (v38 == 172)
  {
    if (!v33) {
      goto LABEL_62;
    }
    int v39 = 1;
    do
    {
      if (*(_DWORD *)(v33 + 8) == v11)
      {
        if (!v39) {
          goto LABEL_62;
        }
        --v39;
      }
      uint64_t v33 = *(void *)(v33 + 32);
    }
    while (v33);
    if (v39) {
      goto LABEL_62;
    }
    uint64_t v49 = *(void *)(v14 + 48);
    if (!v49) {
      goto LABEL_62;
    }
    int v50 = 1;
    do
    {
      if (*(_DWORD *)(v49 + 8) == v15)
      {
        if (!v50) {
          goto LABEL_62;
        }
        --v50;
      }
      uint64_t v49 = *(void *)(v49 + 32);
    }
    while (v49);
    if (v50)
    {
LABEL_62:
      if (*(unsigned char *)(*(void *)(v17 + 40) + 16 * *(unsigned int *)(v16 + 8)) != 9) {
        goto LABEL_52;
      }
    }
    uint64_t v40 = *(void **)(a3 + 16);
    uint64_t v41 = *(void *)(v16 + 8);
    uint64_t v42 = *(void *)(v16 + 40);
    uint64_t v43 = *(void *)(v16 + 48);
    uint64_t v44 = sub_1CD7EBF14((uint64_t)v40, 1, (const llvm::APInt *)&v58, (llvm *)2, 0, 0, 0);
    uint64_t v47 = sub_1CD7F6564(v40, (const char *)0xC0, (const llvm::APInt *)&v58, (llvm *)2, 0, v17, v41, v46, v42, v43, (uint64_t)v44, v45, v14, v15, *(void *)(*(void *)(v10 + 32) + 80), *(void *)(*(void *)(v10 + 32) + 88));
  }
  else
  {
    if (v38 != 171) {
      goto LABEL_52;
    }
    uint64_t v51 = *(void **)(a3 + 16);
    uint64_t v52 = *(void *)(v16 + 8);
    uint64_t v53 = *(void *)(v16 + 40);
    uint64_t v54 = *(void *)(v16 + 48);
    uint64_t v55 = sub_1CD7EBF14((uint64_t)v51, 0, (const llvm::APInt *)&v58, (llvm *)2, 0, 0, 0);
    uint64_t v47 = sub_1CD7F6564(v51, (const char *)0xC0, (const llvm::APInt *)&v58, (llvm *)2, 0, v17, v52, v57, v53, v54, v14, v15, (uint64_t)v55, v56, *(void *)(*(void *)(v10 + 32) + 80), *(void *)(*(void *)(v10 + 32) + 88));
  }
  *(void *)a1 = v47;
  *(_DWORD *)(a1 + 8) = v48;
  uint64_t v24 = 1;
LABEL_53:
  if (v58) {
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  }
  return v24;
}

unint64_t sub_1CD3DD468(unsigned __int8 *a1, uint64_t a2, BOOL a3)
{
  if (*a1)
  {
    if (*a1 - 15 < 0x9C)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC(a1);
      unint64_t v4 = 0;
      return v4 | EVT;
    }
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 1);
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    {
      unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v6 + 24), 0, a3);
      unint64_t v4 = EVT & 0xFFFFFFFFFFFFFF00;
      return v4 | EVT;
    }
  }
  return *(void *)a1;
}

uint64_t *sub_1CD3DD4D8(uint64_t a1, llvm *a2, uint64_t a3)
{
  v5[0] = 0;
  v5[1] = 0;
  int v3 = sub_1CD7F330C(a1, 51, (uint64_t)v5, a2, a3);
  if (v5[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v5, v5[0]);
  }
  return v3;
}

void sub_1CD3DD534(uint64_t a1, llvm::APFloatBase *a2, int a3, uint64_t a4, uint64_t a5)
{
  v175[32] = *MEMORY[0x1E4F143B8];
  sub_1CD431258((uint64_t)v152, a3, 0);
  long long v151 = *(_OWORD *)*(void *)(a1 + 40);
  if (v151 == 174) {
    return;
  }
  int v9 = *(char **)(a1 + 32);
  uint64_t v10 = &v9[40 * *(unsigned __int16 *)(a1 + 56)];
  int v173 = v175;
  uint64_t v174 = 0x1000000000;
  sub_1CD3E560C((uint64_t)&v173, v9, v10);
  uint64_t v11 = *(unsigned __int8 **)(a1 + 64);
  int v149 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v149, v11, 2);
  }
  int v150 = *(_DWORD *)(a1 + 60);
  uint64_t v12 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v155);
  uint64_t v13 = *v12;
  if (*(unsigned __int8 *)(*(void *)(*v12 + 40) + 16 * *((unsigned int *)v12 + 2)) != 174)
  {
    uint64_t v14 = (void *)v12[1];
    uint64_t v15 = *((void *)a2 + 104);
    __int16 v16 = v15 ? *(_WORD *)(v15 + 8) : 0;
    uint64_t v17 = sub_1CD7F3564(a2, (const char *)0xD8, (uint64_t)&v149, (llvm *)0x31, 0, v13, v14, v16);
    int v19 = sub_1CD3F8288((uint64_t)v17, v18, (uint64_t)a2, 2u, 5u);
    int v20 = (char *)v173 + 16 * v155;
    *(void *)int v20 = v19;
    *((_DWORD *)v20 + 2) = v21;
    uint64_t v22 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v156);
    uint64_t v23 = *v22;
    if (*(unsigned __int8 *)(*(void *)(*v22 + 40) + 16 * *((unsigned int *)v22 + 2)) != 174)
    {
      uint64_t v24 = (void *)v22[1];
      uint64_t v25 = *((void *)a2 + 104);
      __int16 v26 = v25 ? *(_WORD *)(v25 + 8) : 0;
      uint64_t v27 = sub_1CD7F3564(a2, (const char *)0xD8, (uint64_t)&v149, (llvm *)0x31, 0, v23, v24, v26);
      uint64_t v29 = sub_1CD3F8288((uint64_t)v27, v28, (uint64_t)a2, 2u, 5u);
      uint64_t v30 = (char *)v173 + 16 * v156;
      *(void *)uint64_t v30 = v29;
      *((_DWORD *)v30 + 2) = v31;
      unsigned int v32 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v157);
      uint64_t v33 = *v32;
      if (*(unsigned __int8 *)(*(void *)(*v32 + 40) + 16 * *((unsigned int *)v32 + 2)) != 174)
      {
        int v34 = (void *)v32[1];
        uint64_t v35 = *((void *)a2 + 104);
        if (v35) {
          __int16 v36 = *(_WORD *)(v35 + 8);
        }
        else {
          __int16 v36 = 0;
        }
        int v37 = sub_1CD7F3564(a2, (const char *)0xD8, (uint64_t)&v149, (llvm *)0x31, 0, v33, v34, v36);
        int v39 = sub_1CD3F8288((uint64_t)v37, v38, (uint64_t)a2, 2u, 5u);
        __int16 v40 = 0;
        uint64_t v41 = (char *)v173 + 16 * v157;
        *(void *)uint64_t v41 = v39;
        *((_DWORD *)v41 + 2) = v42;
        uint64_t v43 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v158);
        uint64_t v44 = *v43;
        int v45 = (void *)v43[1];
        uint64_t v46 = *((void *)a2 + 104);
        if (v46) {
          __int16 v40 = *(_WORD *)(v46 + 8);
        }
        uint64_t v47 = sub_1CD7F3564(a2, (const char *)0xC7, (uint64_t)&v149, (llvm *)5, 0, v44, v45, v40);
        __int16 v48 = 0;
        uint64_t v49 = (char *)v173 + 16 * v158;
        *(void *)uint64_t v49 = v47;
        *((_DWORD *)v49 + 2) = v50;
        uint64_t v51 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v165);
        uint64_t v52 = *v51;
        uint64_t v53 = (void *)v51[1];
        uint64_t v54 = *((void *)a2 + 104);
        if (v54) {
          __int16 v48 = *(_WORD *)(v54 + 8);
        }
        uint64_t v55 = sub_1CD7F3564(a2, (const char *)0xC7, (uint64_t)&v149, (llvm *)5, 0, v52, v53, v48);
        __int16 v56 = 0;
        uint64_t v57 = (char *)v173 + 16 * v165;
        *(void *)uint64_t v57 = v55;
        *((_DWORD *)v57 + 2) = v58;
        int v59 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v166);
        uint64_t v60 = *v59;
        uint64_t v61 = (void *)v59[1];
        uint64_t v62 = *((void *)a2 + 104);
        if (v62) {
          __int16 v56 = *(_WORD *)(v62 + 8);
        }
        uint64_t v63 = sub_1CD7F3564(a2, (const char *)0xC7, (uint64_t)&v149, (llvm *)5, 0, v60, v61, v56);
        __int16 v64 = 0;
        int v65 = (char *)v173 + 16 * v166;
        *(void *)int v65 = v63;
        *((_DWORD *)v65 + 2) = v66;
        uint64_t v67 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v167);
        uint64_t v68 = *v67;
        int v69 = (void *)v67[1];
        uint64_t v70 = *((void *)a2 + 104);
        if (v70) {
          __int16 v64 = *(_WORD *)(v70 + 8);
        }
        __int16 v71 = sub_1CD7F3564(a2, (const char *)0xC7, (uint64_t)&v149, (llvm *)5, 0, v68, v69, v64);
        uint64_t v72 = (char *)v173 + 16 * v167;
        *(void *)uint64_t v72 = v71;
        *((_DWORD *)v72 + 2) = v73;
        if (*(unsigned char *)(a5 + 281))
        {
          uint64_t v124 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v168);
          uint64_t v125 = *v124;
          __int16 v126 = (void *)v124[1];
          uint64_t v127 = *((void *)a2 + 104);
          __int16 v128 = v127 ? *(_WORD *)(v127 + 8) : 0;
          uint64_t v136 = sub_1CD7F3564(a2, (const char *)0xC9, (uint64_t)&v149, (llvm *)4, 0, v125, v126, v128);
          unsigned __int8 v137 = (char *)v173 + 16 * v168;
          *(void *)unsigned __int8 v137 = v136;
          *((_DWORD *)v137 + 2) = v138;
          if (v161 != -1)
          {
            int v139 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v161);
            uint64_t v140 = *v139;
            uint64_t v141 = v139[1];
            uint64_t v142 = sub_1CD7EBF14((uint64_t)a2, 1, (const llvm::APInt *)&v149, (llvm *)5, 0, 0, 0);
            uint64_t v145 = *((void *)a2 + 104);
            if (v145) {
              LOWORD(v145) = *(_WORD *)(v145 + 8);
            }
            uint64_t v146 = sub_1CCFDED5C((uint64_t)a2, 212, (const llvm::APInt *)&v149, (llvm *)9, 0, v140, v141, v144, (uint64_t)v142, v143, v145);
            uint64_t v147 = (char *)v173 + 16 * v161;
            *(void *)uint64_t v147 = v146;
            *((_DWORD *)v147 + 2) = v148;
          }
        }
        if (v153 != 1)
        {
          uint64_t v74 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v159);
          uint64_t v75 = sub_1CD3F8288(*v74, v74[1], (uint64_t)a2, v153, 0xAu);
          unint64_t v76 = (char *)v173 + 16 * v159;
          *(void *)unint64_t v76 = v75;
          *((_DWORD *)v76 + 2) = v77;
        }
        uint64_t v78 = *(void *)(a1 + 32);
        if (v152[0])
        {
          unsigned int v79 = sub_1CD3F8288(*(void *)(v78 + 40 * v162), *(void *)(v78 + 40 * v162 + 8), (uint64_t)a2, 2u, 0xAu);
          int v81 = (char *)v173 + 16 * v162;
          *(void *)int v81 = v79;
          *((_DWORD *)v81 + 2) = v82;
          if (v153 < 2
            || (uint64_t v83 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v163),
                uint64_t v84 = sub_1CD3F8288(*v83, v83[1], (uint64_t)a2, 2u, 0xAu),
                uint64_t v85 = (char *)v173 + 16 * v163,
                *(void *)uint64_t v85 = v84,
                *((_DWORD *)v85 + 2) = v86,
                v153 < 3))
          {
LABEL_37:
            if (v169 != -1)
            {
              unsigned int v92 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v169);
              uint64_t v93 = sub_1CD3F8288(*v92, v92[1], (uint64_t)a2, 4u, 0xAu);
              int v94 = (char *)v173 + 16 * v169;
              *(void *)int v94 = v93;
              *((_DWORD *)v94 + 2) = v95;
            }
            __int16 v96 = *(uint64_t **)(a1 + 40);
            if (v170 == 1)
            {
              if (v154 == 1)
              {
                uint64_t v134 = *v96;
                uint64_t v135 = v96[1];
              }
              else
              {
                uint64_t v135 = 0;
                uint64_t v134 = 174;
              }
              uint64_t v98 = sub_1CD7F95FC((uint64_t)a2, v134, v135, v96[2], v96[3]);
            }
            else
            {
              uint64_t v97 = *(unsigned __int16 *)(a1 + 58);
              if (v154 != 4) {
                goto LABEL_46;
              }
              if (v170 == 4)
              {
                v172[1] = xmmword_1CD936080;
                v172[2] = unk_1CD936090;
                v172[3] = xmmword_1CD9360A0;
                *(_OWORD *)int v171 = xmmword_1CD936060;
                v172[0] = unk_1CD936070;
                uint64_t v98 = sub_1CD7F9A18((uint64_t)a2, (uint64_t *)v171, 5);
              }
              else
              {
                if (v170 != 2) {
                  goto LABEL_46;
                }
                uint64_t v98 = sub_1CD7FAB44((uint64_t)a2, 174, 0, 174, 0, 1, 0);
              }
            }
            __int16 v96 = (uint64_t *)v98;
            uint64_t v97 = v99;
LABEL_46:
            int v101 = sub_1CD7F9CC8((uint64_t)a2, 47, (uint64_t)&v149, (uint64_t)v96, v97, (uint64_t *)v173, v174, v80, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
            unsigned int v102 = 0;
            unsigned int v103 = *(_DWORD *)(a4 + 8);
            do
            {
              if (v103 >= *(_DWORD *)(a4 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              long long v104 = (uint64_t **)(*(void *)a4 + 16 * v103);
              int64x2_t *v104 = v101;
              v104[1] = (uint64_t *)v102;
              unsigned int v103 = *(_DWORD *)(a4 + 8) + 1;
              *(_DWORD *)(a4 + 8) = v103;
              ++v102;
            }
            while (v102 <= v170);
            if (v170 && v154 >= 2)
            {
              for (unsigned int i = 0; i != v170; ++i)
              {
                v171[0] = v172;
                v171[1] = (void *)0x800000000;
                if ((_BYTE)v151)
                {
                  LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v151);
                  unint64_t v109 = 0;
                  uint64_t v108 = 0;
                }
                else
                {
                  unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v151 + 1) + 24), 0, v100);
                  uint64_t v108 = v107;
                  unint64_t v109 = EVT & 0xFFFFFFFFFFFFFF00;
                }
                if (v154)
                {
                  int v113 = 0;
                  int v114 = (llvm *)(v109 | EVT);
                  do
                  {
                    uint64_t v115 = sub_1CD8015C0((uint64_t)a2, v113 + 33, (const llvm::APInt *)&v149, v114, v108, (uint64_t)v101, i);
                    if (LODWORD(v171[1]) >= (unint64_t)HIDWORD(v171[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v117 = (uint64_t **)((char *)v171[0] + 16 * LODWORD(v171[1]));
                    *uint64_t v117 = v115;
                    v117[1] = v116;
                    unsigned int v110 = ++LODWORD(v171[1]);
                    ++v113;
                  }
                  while (v113 != v154);
                  if (v113 == 3)
                  {
                    long long v119 = sub_1CD7F330C((uint64_t)a2, 51, (uint64_t)&v149, v114, v108);
                    if (LODWORD(v171[1]) >= (unint64_t)HIDWORD(v171[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v120 = (uint64_t **)((char *)v171[0] + 16 * LODWORD(v171[1]));
                    uint64_t *v120 = v119;
                    v120[1] = v118;
                    unsigned int v110 = ++LODWORD(v171[1]);
                  }
                }
                else
                {
                  unsigned int v110 = v171[1];
                }
                uint64_t v111 = *((void *)a2 + 104);
                if (v111) {
                  uint64_t v112 = *(unsigned __int16 *)(v111 + 8);
                }
                else {
                  uint64_t v112 = 0;
                }
                int v121 = sub_1CD7FF4E8(a2, (const char *)0x92, (const llvm::APInt *)&v149, (llvm *)v151, *((uint64_t *)&v151 + 1), (uint64_t *)v171[0], v110, v112);
                uint64_t v122 = *(void *)a4 + 16 * i;
                *(void *)uint64_t v122 = v121;
                *(_DWORD *)(v122 + 8) = v123;
                if (v171[0] != v172) {
                  free(v171[0]);
                }
              }
            }
            goto LABEL_6;
          }
          unint64_t v87 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v164);
          uint64_t v88 = sub_1CD3F8288(*v87, v87[1], (uint64_t)a2, 2u, 0xAu);
          uint64_t v90 = v164;
        }
        else
        {
          uint64_t v129 = (uint64_t *)(v78 + 40 * v160);
          uint64_t v130 = *v129;
          uint64_t v131 = (void *)v129[1];
          uint64_t v132 = *((void *)a2 + 104);
          if (v132) {
            __int16 v133 = *(_WORD *)(v132 + 8);
          }
          else {
            __int16 v133 = 0;
          }
          uint64_t v88 = sub_1CD7F3564(a2, (const char *)0xC7, (uint64_t)&v149, (llvm *)5, 0, v130, v131, v133);
          uint64_t v90 = v160;
        }
        uint64_t v91 = (char *)v173 + 16 * v90;
        *(void *)uint64_t v91 = v88;
        *((_DWORD *)v91 + 2) = v89;
        goto LABEL_37;
      }
    }
  }
LABEL_6:
  if (v149) {
    llvm::MetadataTracking::untrack((uint64_t)&v149, v149);
  }
  if (v173 != v175) {
    free(v173);
  }
}

uint64_t *sub_1CD3DDEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  long long v83 = *((_OWORD *)v6 + 5);
  int v9 = *(unsigned __int8 **)(a2 + 64);
  int v81 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v81, v9, 2);
  }
  int v82 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = *(void *)(a1 + 184296);
  if (*(unsigned char *)(v10 + 280))
  {
    uint64_t v79 = v8;
    uint64_t v80 = v7;
    uint64_t v13 = *(uint64_t **)(*(void *)(a3 + 16) + 40);
    uint64_t v14 = *v13;
    LODWORD(v96) = 0;
    BOOL v75 = sub_1CD3CA314(v10, v14, "IDFCMode", &v96);
    uint64_t v76 = v96;
    uint64_t v15 = *(void *)(a1 + 184296);
    uint64_t v16 = *v13;
    LODWORD(v96) = 0;
    BOOL v77 = sub_1CD3CA314(v15, v16, "IDFSLCMode", &v96);
    uint64_t v78 = v96;
    uint64_t v17 = *(void *)(a3 + 16);
    long long v18 = v83;
    int v19 = sub_1CD7EBF14(v17, 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 0, 0);
    __int16 v22 = 0;
    uint64_t v23 = *(void *)(v17 + 832);
    if (v23) {
      __int16 v22 = *(_WORD *)(v23 + 8);
    }
    uint64_t v24 = sub_1CCFDED5C(v17, 53, (const llvm::APInt *)&v81, (llvm *)5, 0, v18, *((uint64_t *)&v18 + 1), v21, (uint64_t)v19, v20, v22);
    int v26 = v25;
    uint64_t v27 = *(void *)(a3 + 16);
    uint64_t v28 = sub_1CD7EBF14(v27, 1, (const llvm::APInt *)&v81, (llvm *)5, 0, 0, 0);
    __int16 v31 = 0;
    uint64_t v32 = *(void *)(v27 + 832);
    if (v32) {
      __int16 v31 = *(_WORD *)(v32 + 8);
    }
    uint64_t v33 = sub_1CCFDED5C(v27, 53, (const llvm::APInt *)&v81, (llvm *)5, 0, v18, *((uint64_t *)&v18 + 1), v30, (uint64_t)v28, v29, v31);
    int v35 = v34;
    __int16 v36 = sub_1CD7EBF14(*(void *)(a3 + 16), 27, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    int v38 = v37;
    int v39 = sub_1CD7EBF14(*(void *)(a3 + 16), 33, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    int v41 = v40;
    int v42 = sub_1CD7EBF14(*(void *)(a3 + 16), 34, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    uint64_t v84 = v36;
    LODWORD(v85) = v38;
    int v86 = v24;
    int v87 = v26;
    uint64_t v88 = v39;
    LODWORD(v89) = v41;
    uint64_t v90 = v33;
    LODWORD(v91) = v35;
    *(void *)&long long v92 = v42;
    DWORD2(v92) = v43;
    uint64_t v44 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v81, (llvm *)0xAE, 0, (uint64_t *)&v84, 5);
    __int16 v96 = v98;
    v98[0] = (unint64_t)v44;
    uint64_t v97 = 0x800000001;
    if (v75) {
      uint64_t v45 = v76;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v47 = sub_1CD7EBF14(*(void *)(a3 + 16), v45, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v48 = (uint64_t **)((char *)v96 + 16 * v97);
    *__int16 v48 = v47;
    v48[1] = v46;
    LODWORD(v97) = v97 + 1;
    if (v77) {
      uint64_t v49 = v78;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v51 = sub_1CD7EBF14(*(void *)(a3 + 16), v49, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v52 = (uint64_t **)((char *)v96 + 16 * v97);
    *uint64_t v52 = v51;
    v52[1] = v50;
    LODWORD(v97) = v97 + 1;
    uint64_t v54 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v55 = (uint64_t **)((char *)v96 + 16 * v97);
    uint64_t *v55 = v54;
    v55[1] = v53;
    LODWORD(v97) = v97 + 1;
    sub_1CD3E5038(a1, (uint64_t)&v96, *(void *)(a3 + 16));
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v56 = (char *)v96 + 16 * v97;
    void *v56 = v79;
    v56[1] = v80;
    LODWORD(v97) = v97 + 1;
    uint64_t v11 = sub_1CD801450(*(void *)(a3 + 16), 2902, (uint64_t)&v81, (llvm *)1, 0, (uint64_t *)v96, v97);
    if (v96 != v98) {
      free(v96);
    }
  }
  else if (*(unsigned char *)(v10 + 281))
  {
    uint64_t v85 = 0;
    LODWORD(v86) = 0;
    LOBYTE(v88) = 0;
    uint64_t v89 = 0;
    LOBYTE(v90) = 0;
    uint64_t v93 = 0;
    int v94 = 0;
    uint64_t v91 = 0;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = 0;
    uint64_t v95 = a3;
    sub_1CD3ED174((uint64_t)&v84, (uint64_t *)&v83, 4, 0, 6, 0, 5, 0, 0);
    __int16 v96 = v98;
    v98[0] = v92;
    uint64_t v97 = 0x800000001;
    int v58 = sub_1CD3DBEEC((uint64_t)&v84);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v59 = (uint64_t **)((char *)v96 + 16 * v97);
    *int v59 = v58;
    v59[1] = v57;
    LODWORD(v97) = v97 + 1;
    uint64_t v61 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v62 = (uint64_t **)((char *)v96 + 16 * v97);
    *uint64_t v62 = v61;
    v62[1] = v60;
    LODWORD(v97) = v97 + 1;
    __int16 v64 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v65 = (uint64_t **)((char *)v96 + 16 * v97);
    char *v65 = v64;
    v65[1] = v63;
    LODWORD(v97) = v97 + 1;
    uint64_t v67 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v68 = (uint64_t **)((char *)v96 + 16 * v97);
    *uint64_t v68 = v67;
    v68[1] = v66;
    LODWORD(v97) = v97 + 1;
    uint64_t v70 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 1, 0);
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v71 = (uint64_t **)((char *)v96 + 16 * v97);
    *__int16 v71 = v70;
    v71[1] = v69;
    LODWORD(v97) = v97 + 1;
    sub_1CD3E5038(a1, (uint64_t)&v96, *(void *)(a3 + 16));
    if (v97 >= HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v72 = (char *)v96 + 16 * v97;
    *uint64_t v72 = v8;
    v72[1] = v7;
    uint64_t v73 = (v97 + 1);
    LODWORD(v97) = v97 + 1;
    if (BYTE2(v84)) {
      int v74 = 2903;
    }
    else {
      int v74 = 2904;
    }
    uint64_t v11 = sub_1CD801450(*(void *)(a3 + 16), v74, (uint64_t)&v81, (llvm *)1, 0, (uint64_t *)v96, v73);
    if (v96 != v98) {
      free(v96);
    }
    if (v85) {
      llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v81) {
    llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
  }
  return v11;
}

uint64_t *sub_1CD3DE658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v8 = *(uint64_t **)v6;
  unint64_t v7 = *(void *)(v6 + 8);
  long long v143 = *(_OWORD *)(v6 + 80);
  int v9 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v141 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v141, v9, 2);
  }
  int v142 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = (uint64_t *)(a1 + 184296);
  uint64_t v11 = *(void *)(a1 + 184296);
  if (*(unsigned char *)(v11 + 280))
  {
    uint64_t v136 = a1;
    uint64_t v13 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v141, (llvm *)5, 0, 0, 0);
    uint64_t v15 = v14;
    uint64_t v16 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v141, (llvm *)5, 0, 0, 0);
    uint64_t v138 = v18;
    uint64_t v140 = (uint64_t)v16;
    __int16 v19 = 0;
    uint64_t v20 = *(void *)(a3 + 16);
    long long v21 = v143;
    uint64_t v22 = *(void *)(v20 + 832);
    if (v22) {
      __int16 v19 = *(_WORD *)(v22 + 8);
    }
    uint64_t v24 = sub_1CCFDED5C(v20, 53, (const llvm::APInt *)&v141, (llvm *)5, 0, v143, *((uint64_t *)&v143 + 1), v17, (uint64_t)v13, v15, v19);
    int v25 = v23;
    __int16 v26 = 0;
    uint64_t v27 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v28 = *((void *)v27 + 104);
    if (v28) {
      __int16 v26 = *(_WORD *)(v28 + 8);
    }
    uint64_t v30 = sub_1CD7F3564(v27, (const char *)0xD8, (uint64_t)&v141, (llvm *)0x26, 0, (uint64_t)v24, v23, v26);
    __int16 v32 = 0;
    uint64_t v33 = *(void *)(a3 + 16);
    uint64_t v34 = *(void *)(v33 + 832);
    if (v34) {
      __int16 v32 = *(_WORD *)(v34 + 8);
    }
    int v35 = sub_1CCFDED5C(v33, 437, (const llvm::APInt *)&v141, (llvm *)4, 0, (uint64_t)v30, v29, v31, (uint64_t)v13, v15, v32);
    uint64_t v37 = v36;
    __int16 v38 = 0;
    int v39 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v40 = *((void *)v39 + 104);
    if (v40) {
      __int16 v38 = *(_WORD *)(v40 + 8);
    }
    int v42 = sub_1CD7F3564(v39, (const char *)0xD8, (uint64_t)&v141, (llvm *)0x26, 0, (uint64_t)v24, v25, v38);
    __int16 v44 = 0;
    uint64_t v45 = *(void *)(a3 + 16);
    uint64_t v46 = *(void *)(v45 + 832);
    if (v46) {
      __int16 v44 = *(_WORD *)(v46 + 8);
    }
    uint64_t v47 = sub_1CCFDED5C(v45, 437, (const llvm::APInt *)&v141, (llvm *)4, 0, (uint64_t)v42, v41, v43, v140, v138, v44);
    uint64_t v134 = v49;
    uint64_t v135 = (uint64_t)v47;
    __int16 v50 = 0;
    uint64_t v51 = *(void *)(a3 + 16);
    uint64_t v52 = *(void *)(v51 + 832);
    if (v52) {
      __int16 v50 = *(_WORD *)(v52 + 8);
    }
    uint64_t v53 = sub_1CCFDED5C(v51, 53, (const llvm::APInt *)&v141, (llvm *)5, 0, v21, *((uint64_t *)&v21 + 1), v48, v140, v138, v50);
    int v132 = v54;
    __int16 v133 = v53;
    uint64_t v55 = sub_1CD7EBF14(*(void *)(a3 + 16), 65295, (const llvm::APInt *)&v141, (llvm *)4, 0, 0, 0);
    uint64_t v58 = *(void *)(a3 + 16);
    uint64_t v59 = *(void *)(v58 + 832);
    if (v59) {
      LOWORD(v59) = *(_WORD *)(v59 + 8);
    }
    uint64_t v60 = sub_1CCFDED5C(v58, 171, (const llvm::APInt *)&v141, (llvm *)4, 0, (uint64_t)v35, v37, v57, (uint64_t)v55, v56, v59);
    uint64_t v130 = v61;
    uint64_t v131 = (uint64_t)v60;
    uint64_t v62 = 0;
    unint64_t v137 = v7 & 0xFFFFFFFF00000000;
    do
    {
      uint64_t v63 = sub_1CD7EBF14(*(void *)(a3 + 16), v62, (const llvm::APInt *)&v141, (llvm *)4, 0, 0, 0);
      __int16 v66 = 0;
      uint64_t v67 = *(void *)(a3 + 16);
      uint64_t v68 = *(void *)(v67 + 832);
      if (v68) {
        __int16 v66 = *(_WORD *)(v68 + 8);
      }
      uint64_t v70 = sub_1CCFDED5C(v67, 56, (const llvm::APInt *)&v141, (llvm *)4, 0, v131, v130, v65, (uint64_t)v63, v64, v66);
      __int16 v72 = 0;
      uint64_t v73 = *(void *)(a3 + 16);
      uint64_t v74 = *(void *)(v73 + 832);
      if (v74) {
        __int16 v72 = *(_WORD *)(v74 + 8);
      }
      int v139 = v8;
      uint64_t v76 = sub_1CCFDED5C(v73, 146, (const llvm::APInt *)&v141, (llvm *)0x26, 0, (uint64_t)v70, v69, v71, v135, v134, v72);
      __int16 v77 = 0;
      uint64_t v78 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v79 = *((void *)v78 + 104);
      if (v79) {
        __int16 v77 = *(_WORD *)(v79 + 8);
      }
      uint64_t v80 = sub_1CD7F3564(v78, (const char *)0xD8, (uint64_t)&v141, (llvm *)5, 0, (uint64_t)v76, v75, v77);
      int v82 = v81;
      long long v83 = sub_1CD7EBF14(*(void *)(a3 + 16), 27, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      int v85 = v84;
      int v86 = sub_1CD7EBF14(*(void *)(a3 + 16), 33, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      int v88 = v87;
      uint64_t v89 = sub_1CD7EBF14(*(void *)(a3 + 16), 34, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      uint64_t v144 = v83;
      LODWORD(v145) = v85;
      uint64_t v146 = v80;
      int v147 = v82;
      int v148 = v86;
      LODWORD(v149) = v88;
      int v150 = v133;
      LODWORD(v151) = v132;
      *(void *)&long long v152 = v89;
      DWORD2(v152) = v90;
      uint64_t v91 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v141, (llvm *)0xAE, 0, (uint64_t *)&v144, 5);
      long long v92 = *(uint64_t **)(*(void *)(a3 + 16) + 40);
      uint64_t v93 = *v10;
      uint64_t v94 = *v92;
      LODWORD(v156) = 0;
      LODWORD(v86) = sub_1CD3CA314(v93, v94, "IDFCMode", &v156);
      uint64_t v95 = v156;
      uint64_t v96 = *v10;
      uint64_t v97 = *v92;
      LODWORD(v156) = 0;
      BOOL v98 = sub_1CD3CA314(v96, v97, "IDFSLCMode", &v156);
      uint64_t v99 = v156;
      unsigned int v156 = v158;
      v158[0] = (unint64_t)v91;
      uint64_t v157 = 0x800000001;
      if (v86) {
        uint64_t v100 = v95;
      }
      else {
        uint64_t v100 = 0;
      }
      unsigned int v102 = sub_1CD7EBF14(*(void *)(a3 + 16), v100, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      if (v157 >= (unint64_t)HIDWORD(v157)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v103 = (uint64_t **)((char *)v156 + 16 * v157);
      const char *v103 = v102;
      v103[1] = v101;
      LODWORD(v157) = v157 + 1;
      if (v98) {
        uint64_t v104 = v99;
      }
      else {
        uint64_t v104 = 0;
      }
      uint64_t v106 = sub_1CD7EBF14(*(void *)(a3 + 16), v104, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      if (v157 >= (unint64_t)HIDWORD(v157)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v107 = (uint64_t **)((char *)v156 + 16 * v157);
      uint64_t *v107 = v106;
      v107[1] = v105;
      LODWORD(v157) = v157 + 1;
      unint64_t v109 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
      if (v157 >= (unint64_t)HIDWORD(v157)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v110 = (uint64_t **)((char *)v156 + 16 * v157);
      uint64_t *v110 = v109;
      v110[1] = v108;
      LODWORD(v157) = v157 + 1;
      sub_1CD3E5038(v136, (uint64_t)&v156, *(void *)(a3 + 16));
      if (v157 >= (unint64_t)HIDWORD(v157)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v111 = (uint64_t **)((char *)v156 + 16 * v157);
      uint64_t *v111 = v139;
      v111[1] = (uint64_t *)v7;
      LODWORD(v157) = v157 + 1;
      uint64_t v8 = sub_1CD801450(*(void *)(a3 + 16), 2902, (uint64_t)&v141, (llvm *)1, 0, (uint64_t *)v156, v157);
      if (v156 != v158) {
        free(v156);
      }
      v62 += 16;
      unint64_t v7 = v137;
    }
    while (v62 != 256);
  }
  else if (*(unsigned char *)(v11 + 281))
  {
    uint64_t v145 = 0;
    LODWORD(v146) = 0;
    LOBYTE(v148) = 0;
    uint64_t v149 = 0;
    LOBYTE(v150) = 0;
    uint64_t v153 = 0;
    int v154 = 0;
    uint64_t v151 = 0;
    *(void *)&long long v152 = 0;
    DWORD2(v152) = 0;
    uint64_t v155 = a3;
    sub_1CD3ED174((uint64_t)&v144, (uint64_t *)&v143, 4, 0, 6, 0, 5, 0, 0);
    unsigned int v156 = v158;
    v158[0] = v152;
    uint64_t v157 = 0x800000001;
    int v113 = sub_1CD3DBEEC((uint64_t)&v144);
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v114 = (uint64_t **)((char *)v156 + 16 * v157);
    llvm *v114 = v113;
    v114[1] = v112;
    LODWORD(v157) = v157 + 1;
    uint64_t v116 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v117 = (uint64_t **)((char *)v156 + 16 * v157);
    *uint64_t v117 = v116;
    v117[1] = v115;
    LODWORD(v157) = v157 + 1;
    long long v119 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v120 = (uint64_t **)((char *)v156 + 16 * v157);
    uint64_t *v120 = v119;
    v120[1] = v118;
    LODWORD(v157) = v157 + 1;
    uint64_t v122 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v123 = (uint64_t **)((char *)v156 + 16 * v157);
    *int v123 = v122;
    v123[1] = v121;
    LODWORD(v157) = v157 + 1;
    uint64_t v125 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v141, (llvm *)5, 0, 1, 0);
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v126 = (uint64_t **)((char *)v156 + 16 * v157);
    void *v126 = v125;
    v126[1] = v124;
    LODWORD(v157) = v157 + 1;
    sub_1CD3E5038(a1, (uint64_t)&v156, *(void *)(a3 + 16));
    if (v157 >= HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v127 = (uint64_t **)((char *)v156 + 16 * v157);
    *uint64_t v127 = v8;
    v127[1] = (uint64_t *)v7;
    uint64_t v128 = (v157 + 1);
    LODWORD(v157) = v157 + 1;
    if (BYTE2(v144)) {
      int v129 = 2903;
    }
    else {
      int v129 = 2904;
    }
    uint64_t v8 = sub_1CD801450(*(void *)(a3 + 16), v129, (uint64_t)&v141, (llvm *)1, 0, (uint64_t *)v156, v128);
    if (v156 != v158) {
      free(v156);
    }
    if (v145) {
      llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
    }
  }
  if (v141) {
    llvm::MetadataTracking::untrack((uint64_t)&v141, v141);
  }
  return v8;
}

uint64_t *sub_1CD3DF070(uint64_t a1, llvm::APFloatBase *a2, uint64_t a3)
{
  v108[8] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(unsigned __int8 **)(a3 + 64);
  uint64_t v100 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v100, v4, 2);
  }
  int v101 = *(_DWORD *)(a3 + 60);
  uint64_t v5 = *(uint64_t **)(a3 + 32);
  unint64_t v6 = v5[11];
  uint64_t v7 = v5[15];
  uint64_t v8 = *((void *)a2 + 104);
  if (v8) {
    __int16 v9 = *(_WORD *)(v8 + 8);
  }
  else {
    __int16 v9 = 0;
  }
  uint64_t v95 = v5[16];
  uint64_t v10 = sub_1CD7F3564(a2, (const char *)0xC9, (uint64_t)&v100, (llvm *)4, 0, v5[10], (void *)v6, v9);
  unint64_t v12 = v6 & 0xFFFFFFFF00000000 | v11;
  uint64_t v13 = sub_1CD7EBF14((uint64_t)a2, 1, (const llvm::APInt *)&v100, (llvm *)4, 0, 0, 0);
  __int16 v16 = 0;
  uint64_t v17 = *((void *)a2 + 104);
  if (v17) {
    __int16 v16 = *(_WORD *)(v17 + 8);
  }
  unsigned int v18 = 4;
  __int16 v19 = sub_1CCFDED5C((uint64_t)a2, 177, (const llvm::APInt *)&v100, (llvm *)4, 0, (uint64_t)v10, v12, v15, (uint64_t)v13, v14, v16);
  long long v92 = v20;
  uint64_t v93 = v19;
  uint64_t v21 = *(void *)(*((void *)a2 + 5) + 344);
  int v22 = (*(uint64_t (**)(uint64_t, void))(*(void *)v21 + 400))(v21, *(void *)(v7 + 80));
  uint64_t v24 = v23;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 336))(v21);
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 24))(v25, v24);
  uint64_t v27 = sub_1CD7ED9FC((uint64_t)a2, 64, (llvm *)5, 0, (*(_DWORD *)(v7 + 88) + v26 * v22) >> 1, 24);
  unsigned int v90 = v28;
  uint64_t v91 = v27;
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v106 = (char *)v108;
  uint64_t v107 = 0x400000000;
  uint64_t v31 = a1;
  do
  {
    uint64_t v32 = v31 + 4 * v30;
    int v35 = *(_DWORD *)(v32 + 8);
    uint64_t v34 = (unsigned int *)(v32 + 8);
    int v33 = v35;
    if (v35)
    {
      unsigned int v36 = v18 + 1;
      uint64_t v37 = (uint64_t *)(*(void *)(a3 + 32) + 40 * v18);
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      if (v33 == 1)
      {
        if (v29 >= HIDWORD(v107)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v40 = (uint64_t *)&v106[16 * v29];
        *uint64_t v40 = v38;
        v40[1] = v39;
        unsigned int v29 = v107 + 1;
        LODWORD(v107) = v107 + 1;
        ++v18;
      }
      else
      {
        unint64_t v41 = 0;
        do
        {
          int v42 = sub_1CD7EBF14((uint64_t)a2, v41, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
          uint64_t v45 = *((void *)a2 + 104);
          if (v45) {
            LOWORD(v45) = *(_WORD *)(v45 + 8);
          }
          uint64_t v47 = sub_1CCFDED5C((uint64_t)a2, 148, (const llvm::APInt *)&v100, (llvm *)4, 0, v38, v39, v44, (uint64_t)v42, v43, v45);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v48 = (uint64_t **)&v106[16 * v107];
          *uint64_t v48 = v47;
          v48[1] = v46;
          unsigned int v29 = v107 + 1;
          LODWORD(v107) = v107 + 1;
          ++v41;
        }
        while (v41 < *v34);
        unsigned int v18 = v36;
        uint64_t v31 = a1;
      }
    }
    ++v30;
  }
  while (v30 != 3);
  uint64_t v49 = v106;
  unsigned int v50 = *(_DWORD *)(v31 + 4);
  BOOL v98 = v100;
  if (v100) {
    llvm::MetadataTracking::track((uint64_t)&v98, v100, 2);
  }
  int v99 = v101;
  uint64_t v51 = sub_1CD3F7F0C(v49, v50, 4, (uint64_t)a2, (const llvm::APInt *)&v98);
  uint64_t v53 = v52;
  if (v98) {
    llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
  }
  unsigned int v103 = v105;
  uint64_t v104 = 0xE00000000;
  uint64_t v54 = sub_1CD7FFC1C((llvm *)1, 0);
  uint64_t v55 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v57 = *(void *)(a3 + 32);
    sub_1CB8F0E50((uint64_t)&v103, *(void *)(v57 + 40 * v18), *(void *)(v57 + 40 * v18 + 8), *(void *)(v57 + 40 * (v18 + 1)), *(void *)(v57 + 40 * (v18 + 1) + 8), *(void *)(v57 + 40 * (v18 + 2)), *(void *)(v57 + 40 * (v18 + 2) + 8), (uint64_t)a2);
    uint64_t v94 = sub_1CD7FAB44((uint64_t)a2, 5, 0, 4, 0, 1, 0);
    uint64_t v56 = v58;
    uint64_t v55 = a1;
  }
  else
  {
    uint64_t v94 = v54;
    uint64_t v56 = 1;
  }
  uint64_t v59 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v60 = *(void *)(v55 + 32);
  uint64_t v61 = v55;
  uint64_t v62 = *v59;
  unsigned int v102 = 0;
  BOOL v63 = sub_1CD3CA314(v60, v62, "ImageWriteSLCCohMode", &v102);
  uint64_t v64 = v102;
  unsigned int v65 = sub_1CD3CE4FC(*(unsigned char **)(v61 + 32), *v59, "ImageWritePersist");
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v66 = (uint64_t **)((char *)v103 + 16 * v104);
  *__int16 v66 = v93;
  v66[1] = v92;
  unsigned int v67 = v104 + 1;
  LODWORD(v104) = v67;
  if (v67 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v68 = (uint64_t **)((char *)v103 + 16 * v67);
  *uint64_t v68 = v91;
  v68[1] = (uint64_t *)(v95 & 0xFFFFFFFF00000000 | v90);
  unsigned int v69 = v104 + 1;
  LODWORD(v104) = v69;
  if (v69 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v70 = (uint64_t **)((char *)v103 + 16 * v69);
  *uint64_t v70 = v51;
  v70[1] = v53;
  LODWORD(v104) = v104 + 1;
  if (v63) {
    uint64_t v71 = v64;
  }
  else {
    uint64_t v71 = 0;
  }
  uint64_t v73 = sub_1CD7EBF14((uint64_t)a2, v71, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v74 = (uint64_t **)((char *)v103 + 16 * v104);
  uint64_t *v74 = v73;
  v74[1] = v72;
  LODWORD(v104) = v104 + 1;
  uint64_t v76 = sub_1CD7EBF14((uint64_t)a2, v65, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v77 = (uint64_t **)((char *)v103 + 16 * v104);
  *__int16 v77 = v76;
  v77[1] = v75;
  LODWORD(v104) = v104 + 1;
  uint64_t v79 = sub_1CD7EBF14((uint64_t)a2, 0, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v80 = (uint64_t **)((char *)v103 + 16 * v104);
  uint64_t *v80 = v79;
  v80[1] = v78;
  LODWORD(v104) = v104 + 1;
  int v82 = sub_1CD7EBF14((uint64_t)a2, 0, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v83 = (uint64_t **)((char *)v103 + 16 * v104);
  uint64_t *v83 = v82;
  v83[1] = v81;
  LODWORD(v104) = v104 + 1;
  uint64_t v85 = sub_1CD7EEB94((uint64_t)a2, 0, (llvm *)5, 0);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v86 = (uint64_t *)((char *)v103 + 16 * v104);
  *int v86 = v85;
  v86[1] = v84;
  unsigned int v87 = v104 + 1;
  LODWORD(v104) = v87;
  if (v87 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v103 + v87) = *(_OWORD *)*(void *)(a3 + 32);
  LODWORD(v104) = v104 + 1;
  int v88 = sub_1CD801044((uint64_t)a2, *(_DWORD *)(a1 + 20), (uint64_t)&v100, v94, v56, (uint64_t *)v103, v104);
  if (v103 != v105) {
    free(v103);
  }
  if (v106 != (char *)v108) {
    free(v106);
  }
  if (v100) {
    llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
  }
  return v88;
}

uint64_t sub_1CD3DF8C4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 4;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 16 * v9 == a2)
  {
    sub_1CD3E560C(a1, a3, a4);
    return *(void *)a1 + 16 * v8;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - a3) >> 3);
    if (v10 + v9 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v11 = (char *)(v7 + 16 * v8);
    unint64_t v12 = (char *)(v7 + 16 * v9);
    unint64_t v13 = (v12 - v11) >> 4;
    if (v13 >= v10)
    {
      unsigned int v18 = &v12[0x3333333333333330 * ((a4 - a3) >> 3)];
      sub_1CD3E56A0(a1, v18, (char *)(v7 + 16 * v9));
      if (v18 != v11) {
        memmove(&v12[-(v18 - v11)], v11, v18 - v11 - 4);
      }
      if (v5 != a4)
      {
        __int16 v19 = v11;
        do
        {
          uint64_t v20 = *(void *)v5;
          *((_DWORD *)v19 + 2) = *((_DWORD *)v5 + 2);
          *(void *)__int16 v19 = v20;
          v19 += 16;
          v5 += 40;
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 - 858993459 * ((a4 - a3) >> 3);
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 16 * (v9 - 858993459 * ((a4 - a3) >> 3)) - 16 * v13), v11, v12 - v11);
        uint64_t v14 = v11;
        do
        {
          uint64_t v15 = *(void *)v5;
          *((_DWORD *)v14 + 2) = *((_DWORD *)v5 + 2);
          *(void *)uint64_t v14 = v15;
          v14 += 16;
          v5 += 40;
          --v13;
        }
        while (v13);
      }
      while (v5 != a4)
      {
        long long v16 = *(_OWORD *)v5;
        v5 += 40;
        *(_OWORD *)unint64_t v12 = v16;
        v12 += 16;
      }
    }
  }
  return (uint64_t)v11;
}

void sub_1CD3DFA40(uint64_t a1, uint64_t a2, _DWORD *a3, llvm::APFloatBase *a4)
{
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v41 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v41, v8, 2);
  }
  int v9 = *(_DWORD *)(a2 + 60);
  int v42 = v9;
  unsigned int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 > 0xCF)
  {
    if (v10 == 208)
    {
      if (**(unsigned char **)(a2 + 40) != 3) {
        goto LABEL_18;
      }
      int v22 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v39 = v22;
      if (v22)
      {
        llvm::MetadataTracking::track((uint64_t)&v39, v22, 2);
        int v9 = *(_DWORD *)(a2 + 60);
      }
      int v40 = v9;
      uint64_t v23 = *(uint64_t **)(a2 + 32);
      uint64_t v13 = *v23;
      uint64_t v14 = (void *)v23[1];
      uint64_t v24 = *((void *)a4 + 104);
      if (v24) {
        __int16 v16 = *(_WORD *)(v24 + 8);
      }
      else {
        __int16 v16 = 0;
      }
      unsigned int v28 = a4;
      uint64_t v29 = 439;
    }
    else
    {
      if (v10 != 209 || **(unsigned char **)(a2 + 40) != 3) {
        goto LABEL_18;
      }
      unsigned int v11 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v39 = v11;
      if (v11)
      {
        llvm::MetadataTracking::track((uint64_t)&v39, v11, 2);
        int v9 = *(_DWORD *)(a2 + 60);
      }
      int v40 = v9;
      unint64_t v12 = *(uint64_t **)(a2 + 32);
      uint64_t v13 = *v12;
      uint64_t v14 = (void *)v12[1];
      uint64_t v15 = *((void *)a4 + 104);
      if (v15) {
        __int16 v16 = *(_WORD *)(v15 + 8);
      }
      else {
        __int16 v16 = 0;
      }
      unsigned int v28 = a4;
      uint64_t v29 = 438;
    }
    uint64_t v30 = sub_1CD7F3564(v28, (const char *)v29, (uint64_t)&v39, (llvm *)4, 0, v13, v14, v16);
    uint64_t v32 = v31;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    int v33 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v39 = v33;
    if (v33) {
      llvm::MetadataTracking::track((uint64_t)&v39, v33, 2);
    }
    int v40 = *(_DWORD *)(a2 + 60);
    uint64_t v34 = *((void *)a4 + 104);
    if (v34) {
      __int16 v35 = *(_WORD *)(v34 + 8);
    }
    else {
      __int16 v35 = 0;
    }
    uint64_t v25 = sub_1CD7F3564(a4, (const char *)0xC9, (uint64_t)&v39, (llvm *)3, 0, (uint64_t)v30, v32, v35);
    unsigned int v27 = v36;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
LABEL_46:
    if (v25)
    {
      unsigned int v37 = a3[2];
      if (v37 >= a3[3]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v38 = (uint64_t **)(*(void *)a3 + 16 * v37);
      uint64_t *v38 = v25;
      v38[1] = (uint64_t *)v27;
      ++a3[2];
    }
    goto LABEL_18;
  }
  if (v10 != 47)
  {
    if (v10 != 13) {
      goto LABEL_18;
    }
    uint64_t v25 = sub_1CD3DC75C(a1, a2, a4);
    unsigned int v27 = v26;
    goto LABEL_46;
  }
  uint64_t v17 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
  unsigned int v18 = (unsigned int *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    unsigned int v18 = *(unsigned int **)v18;
  }
  uint64_t v19 = *v18;
  if ((v19 - 1282) >= 0x190)
  {
    switch((int)v19)
    {
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
        goto LABEL_15;
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2030:
      case 2031:
      case 2032:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2046:
      case 2047:
      case 2048:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2062:
      case 2063:
      case 2064:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2078:
      case 2079:
      case 2080:
      case 2083:
      case 2084:
      case 2085:
        sub_1CD3DD534(a2, a4, v19, (uint64_t)a3, *(void *)(a1 + 184296));
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_15:
    uint64_t v20 = *(void *)(a1 + 184296);
    if (*(unsigned char *)(v20 + 281))
    {
      int v21 = 2;
    }
    else if (*(unsigned char *)(v20 + 282))
    {
      int v21 = 3;
    }
    else
    {
      int v21 = 1;
    }
    llvm::GPUSDISel::ExpandIntrinsicSample(a2, a4, v19, a3, v21, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB8C42A4, (void (*)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)))sub_1CB8D7124, 1, 33);
  }
LABEL_18:
  if (v41) {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
}

void *sub_1CD3DFD70(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, llvm::APFloatBase *a8, uint64_t a9)
{
  v56[12] = *MEMORY[0x1E4F143B8];
  if (((1 << (a4 - 101)) & 0x2E) != 0)
  {
    uint64_t v15 = *(unsigned __int8 **)a7;
    uint64_t v52 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v52, v15, 2);
    }
    int v53 = *(_DWORD *)(a7 + 8);
    if (*(_DWORD *)(a6 + 8))
    {
      uint64_t v16 = *((void *)a8 + 5);
      uint64_t v17 = *((void *)a8 + 7);
      uint64_t v54 = v56;
      uint64_t v55 = 0x800000000;
      uint64_t result = sub_1CD3C898C(v16, v17, a4, a6, (uint64_t)&v54);
      if (v55)
      {
        uint64_t v19 = 12 * v55;
        uint64_t v20 = (char *)v54 + 10;
        uint64_t v51 = v16;
        while (2)
        {
          uint64_t v21 = *v20;
          int v22 = &off_1E66A4340;
          switch(*v20)
          {
            case 4:
            case 9:
              int v22 = &off_1E66A4180;
              goto LABEL_11;
            case 5:
            case 0xA:
              goto LABEL_11;
            case 6:
              goto LABEL_10;
            case 7:
            case 8:
              __break(1u);
              return result;
            default:
              if (((1 << (v21 - 28)) & 0x1000000000401) == 0) {
LABEL_10:
              }
                int v22 = &off_1E66A4990;
LABEL_11:
              a6 = a6 & 0xFFFFFFFFFFFFFF00 | v21;
              int v23 = llvm::MachineFunction::addLiveIn(v16, *(_DWORD *)(v20 - 6), (uint64_t)v22);
              uint64_t result = sub_1CD3D6670(a8, a2, a3, (const llvm::APInt *)&v52, v23, (llvm *)a6, 0);
              uint64_t v25 = (uint64_t)result;
              unint64_t v26 = (unint64_t)v24;
              int v27 = *(v20 - 2) >> 2;
              if (!v27) {
                goto LABEL_12;
              }
              uint64_t v30 = *(v20 - 1);
              if (v27 == 1)
              {
                unsigned int v50 = (llvm *)*(v20 - 1);
                uint64_t v35 = sub_1CD7EDE1C((uint64_t)a8, v30, 0);
                __int16 v38 = 0;
                uint64_t v39 = *((void *)a8 + 104);
                if (v39) {
                  __int16 v38 = *(_WORD *)(v39 + 8);
                }
                int v40 = sub_1CCFDED5C((uint64_t)a8, 3, (const llvm::APInt *)&v52, (llvm *)a6, 0, v25, v26, v37, v35, v36, v38);
              }
              else
              {
                if (v27 != 2)
                {
                  uint64_t v47 = *((void *)a8 + 104);
                  if (v47) {
                    __int16 v48 = *(_WORD *)(v47 + 8);
                  }
                  else {
                    __int16 v48 = 0;
                  }
                  uint64_t result = sub_1CD7F3564(a8, (const char *)0xD8, (uint64_t)&v52, (llvm *)v30, 0, (uint64_t)result, v24, v48);
                  uint64_t v25 = (uint64_t)result;
                  unint64_t v26 = v26 & 0xFFFFFFFF00000000 | v49;
                  goto LABEL_12;
                }
                unsigned int v50 = (llvm *)*(v20 - 1);
                uint64_t v42 = sub_1CD7EDE1C((uint64_t)a8, v30, 0);
                __int16 v45 = 0;
                uint64_t v46 = *((void *)a8 + 104);
                if (v46) {
                  __int16 v45 = *(_WORD *)(v46 + 8);
                }
                int v40 = sub_1CCFDED5C((uint64_t)a8, 4, (const llvm::APInt *)&v52, (llvm *)a6, 0, v25, v26, v44, v42, v43, v45);
              }
              __int16 v31 = 0;
              uint64_t v32 = *((void *)a8 + 104);
              if (v32) {
                __int16 v31 = *(_WORD *)(v32 + 8);
              }
              uint64_t result = sub_1CD7F3564(a8, (const char *)0xC9, (uint64_t)&v52, v50, 0, (uint64_t)v40, (void *)(v26 & 0xFFFFFFFF00000000 | v41), v31);
              uint64_t v25 = (uint64_t)result;
              unint64_t v26 = v33 | v26 & 0xFFFFFFFF00000000;
LABEL_12:
              unint64_t v28 = *(unsigned int *)(a9 + 8);
              if (v28 >= *(unsigned int *)(a9 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v29 = (uint64_t *)(*(void *)a9 + 16 * v28);
              uint64_t *v29 = v25;
              v29[1] = v26;
              ++*(_DWORD *)(a9 + 8);
              v20 += 12;
              v19 -= 12;
              uint64_t v16 = v51;
              if (!v19) {
                break;
              }
              continue;
          }
          break;
        }
      }
      if ((a4 - 102) <= 5 && ((1 << (a4 - 102)) & 0x31) != 0)
      {
        uint64_t v34 = *(void *)(v16 + 48);
        if (!v34)
        {
          uint64_t v34 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v16 + 8) + 216))(*(void *)(v16 + 8), v16 + 128, v16);
          *(void *)(v16 + 48) = v34;
        }
        *(_DWORD *)(v34 + 16) = (4 * sub_1CD3C8808((unsigned int *)&v54) + 4) & 0xFFFFFFF8;
      }
      if (v54 != v56) {
        free(v54);
      }
    }
    if (v52) {
      llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
    }
  }
  return (void *)a2;
}

uint64_t *sub_1CD3E0170(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t *a9)
{
  v65[12] = *MEMORY[0x1E4F143B8];
  switch(a4)
  {
    case 'f':
      uint64_t v22 = a9[104];
      if (v22) {
        __int16 v15 = *(_WORD *)(v22 + 8);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v16 = (llvm::APFloatBase *)a9;
      uint64_t v17 = 391;
      goto LABEL_6;
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      uint64_t v14 = a9[104];
      if (v14) {
        __int16 v15 = *(_WORD *)(v14 + 8);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v16 = (llvm::APFloatBase *)a9;
      uint64_t v17 = 392;
LABEL_6:
      return sub_1CD7F3564(v16, (const char *)v17, a8, (llvm *)1, 0, (uint64_t)a2, a3, v15);
    case 'i':
      int v23 = *(unsigned __int8 **)a8;
      uint64_t v51 = v23;
      if (v23) {
        llvm::MetadataTracking::track((uint64_t)&v51, v23, 2);
      }
      int v52 = *(_DWORD *)(a8 + 8);
      uint64_t v24 = *(void *)(a9[5] + 344);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 592))(v24, 103);
      if (!v25)
      {
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 592))(v24, 104);
        if (!v25)
        {
          uint64_t v26 = a9[104];
          if (v26) {
            __int16 v27 = *(_WORD *)(v26 + 8);
          }
          else {
            __int16 v27 = 0;
          }
          uint64_t v37 = sub_1CD7F3564((llvm::APFloatBase *)a9, (const char *)0x188, (uint64_t)&v51, (llvm *)1, 0, (uint64_t)a2, a3, v27);
LABEL_29:
          __int16 v38 = v37;
          goto LABEL_30;
        }
      }
      unint64_t v28 = sub_1CD7ECF00((uint64_t)a9, v25, (uint64_t)&v51, (llvm *)5, 0, 0, 1, 0);
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      if ((*(_WORD *)(v25 + 18) & 0x3FF0) == 0x680) {
        uint64_t v32 = 394;
      }
      else {
        uint64_t v32 = 393;
      }
      if (!*(_DWORD *)(a6 + 8))
      {
        uint64_t v57 = a2;
        LODWORD(v58) = a3;
        uint64_t v59 = v28;
        LODWORD(v60) = v29;
        unsigned int v33 = sub_1CD7EBF14((uint64_t)a9, 0, (const llvm::APInt *)&v51, (llvm *)5, 0, 0, 0);
        uint64_t v34 = 0;
        uint64_t v61 = v33;
        uint64_t v62 = v35;
        uint64_t v36 = a9[104];
        if (v36) {
          uint64_t v34 = *(unsigned __int16 *)(v36 + 8);
        }
        uint64_t v37 = sub_1CD7FF4E8(a9, (const char *)v32, (const llvm::APInt *)&v51, (llvm *)1, 0, (uint64_t *)&v57, 3, v34);
        goto LABEL_29;
      }
      BOOL v63 = v65;
      uint64_t v64 = 0x800000000;
      sub_1CD3C88DC(a9[5], a9[7], 105, a6, (uint64_t)&v63);
      unsigned int v44 = sub_1CD3C8808((unsigned int *)&v63);
      (*(void (**)(uint64_t, void, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v24 + 8))(v24, 0, 4 * v44, 1, 0, 1, 1);
      uint64_t v57 = &v59;
      uint64_t v59 = (uint64_t *)a2;
      uint64_t v60 = a3;
      uint64_t v61 = v30;
      uint64_t v62 = v31;
      uint64_t v58 = 0xC00000002;
      uint64_t v47 = sub_1CD7EBF14((uint64_t)a9, v44, (const llvm::APInt *)&v51, (llvm *)5, 0, 0, 0);
      if (v58 >= HIDWORD(v58)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __int16 v48 = (uint64_t **)((char *)v57 + 16 * v58);
      *__int16 v48 = v47;
      v48[1] = v45;
      LODWORD(v58) = v58 + 1;
      uint64_t v55 = v51;
      if (v51) {
        llvm::MetadataTracking::track((uint64_t)&v55, v51, 2);
      }
      int v56 = v52;
      sub_1CB8F1954((uint64_t)a2, (int)a3, (const llvm::APInt *)&v55, (llvm::APFloatBase *)a9, a7, (uint64_t)&v63, (uint64_t)&v57, v46);
      if (v55) {
        llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      }
      uint64_t v49 = a9[104];
      if (v49) {
        uint64_t v50 = *(unsigned __int16 *)(v49 + 8);
      }
      else {
        uint64_t v50 = 0;
      }
      __int16 v38 = sub_1CD7FF4E8(a9, (const char *)v32, (const llvm::APInt *)&v51, (llvm *)1, 0, (uint64_t *)v57, v58, v50);
      if (v57 != &v59) {
        free(v57);
      }
      if (v63 != v65) {
        free(v63);
      }
LABEL_30:
      uint64_t v39 = v51;
      if (v51)
      {
        int v40 = &v51;
LABEL_51:
        llvm::MetadataTracking::untrack((uint64_t)v40, v39);
      }
      return v38;
    default:
      uint64_t v19 = *(unsigned __int8 **)a8;
      int v53 = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)&v53, v19, 2);
      }
      int v54 = *(_DWORD *)(a8 + 8);
      if (*(_DWORD *)(a6 + 8))
      {
        BOOL v63 = v65;
        uint64_t v64 = 0x800000000;
        sub_1CD3C88DC(a9[5], a9[7], 101, a6, (uint64_t)&v63);
        uint64_t v57 = &v59;
        uint64_t v58 = 0x800000000;
        sub_1CD3E535C((uint64_t *)&v57, 1uLL, (uint64_t)a2, (uint64_t)a3);
        uint64_t v55 = v53;
        if (v53) {
          llvm::MetadataTracking::track((uint64_t)&v55, v53, 2);
        }
        int v56 = v54;
        sub_1CB8F1954((uint64_t)a2, (int)a3, (const llvm::APInt *)&v55, (llvm::APFloatBase *)a9, a7, (uint64_t)&v63, (uint64_t)&v57, v41);
        if (v55) {
          llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
        }
        uint64_t v42 = a9[104];
        if (v42) {
          uint64_t v43 = *(unsigned __int16 *)(v42 + 8);
        }
        else {
          uint64_t v43 = 0;
        }
        __int16 v38 = sub_1CD7FF4E8(a9, (const char *)0x188, (const llvm::APInt *)&v53, (llvm *)1, 0, (uint64_t *)v57, v58, v43);
        if (v57 != &v59) {
          free(v57);
        }
        if (v63 != v65) {
          free(v63);
        }
      }
      else
      {
        uint64_t v20 = a9[104];
        if (v20) {
          __int16 v21 = *(_WORD *)(v20 + 8);
        }
        else {
          __int16 v21 = 0;
        }
        __int16 v38 = sub_1CD7F3564((llvm::APFloatBase *)a9, (const char *)0x188, (uint64_t)&v53, (llvm *)1, 0, (uint64_t)a2, a3, v21);
      }
      uint64_t v39 = v53;
      if (!v53) {
        return v38;
      }
      int v40 = &v53;
      goto LABEL_51;
  }
}

BOOL sub_1CD3E07B0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 == 76 || a3 - 9 < 2;
}

unsigned __int16 *sub_1CD3E07C8(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int *a4, const llvm::APInt *a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a6 + 832);
  if (v10) {
    __int16 v11 = *(_WORD *)(v10 + 8);
  }
  else {
    __int16 v11 = 0;
  }
  unint64_t v12 = sub_1CD7F3564((llvm::APFloatBase *)a6, (const char *)0xD8, (uint64_t)a5, (llvm *)0x31, 0, *(void *)a2, *(void **)(a2 + 8), v11);
  uint64_t v14 = v13;
  __int16 v15 = 0;
  uint64_t v16 = *(void *)(a6 + 832);
  if (v16) {
    __int16 v15 = *(_WORD *)(v16 + 8);
  }
  uint64_t v17 = sub_1CD7F3564((llvm::APFloatBase *)a6, (const char *)0xD8, (uint64_t)a5, (llvm *)0x31, 0, *(void *)a3, *(void **)(a3 + 8), v15);
  uint64_t v19 = v18;
  uint64_t v20 = sub_1CD7EBF14(a6, 0, a5, (llvm *)5, 0, 0, 0);
  __int16 v23 = 0;
  uint64_t v24 = *(void *)(a6 + 832);
  if (v24) {
    __int16 v23 = *(_WORD *)(v24 + 8);
  }
  long long v152 = (uint64_t *)a3;
  uint64_t v25 = sub_1CCFDED5C(a6, 437, a5, (llvm *)5, 0, (uint64_t)v12, v14, v22, (uint64_t)v20, v21, v23);
  unsigned int v27 = v26;
  unint64_t v28 = sub_1CD7EBF14(a6, 1, a5, (llvm *)5, 0, 0, 0);
  __int16 v31 = 0;
  uint64_t v32 = *(void *)(a6 + 832);
  if (v32) {
    __int16 v31 = *(_WORD *)(v32 + 8);
  }
  int v150 = sub_1CCFDED5C(a6, 437, a5, (llvm *)5, 0, (uint64_t)v12, v14, v30, (uint64_t)v28, v29, v31);
  unsigned int v34 = v33;
  uint64_t v35 = sub_1CD7EBF14(a6, 0, a5, (llvm *)5, 0, 0, 0);
  __int16 v38 = 0;
  uint64_t v39 = *(void *)(a6 + 832);
  if (v39) {
    __int16 v38 = *(_WORD *)(v39 + 8);
  }
  uint64_t v40 = v27;
  uint64_t v149 = v34;
  uint64_t v41 = sub_1CCFDED5C(a6, 437, a5, (llvm *)5, 0, (uint64_t)v17, v19, v37, (uint64_t)v35, v36, v38);
  unsigned int v43 = v42;
  uint64_t v147 = v42;
  unsigned int v44 = sub_1CD7EBF14(a6, 1, a5, (llvm *)5, 0, 0, 0);
  uint64_t v47 = *(void *)(a6 + 832);
  if (v47) {
    LOWORD(v47) = *(_WORD *)(v47 + 8);
  }
  uint64_t result = (unsigned __int16 *)sub_1CCFDED5C(a6, 437, a5, (llvm *)5, 0, (uint64_t)v17, v19, v46, (uint64_t)v44, v45, v47);
  uint64_t v51 = result;
  unsigned int v52 = v49;
  uint64_t v53 = v49;
  unsigned int v54 = *a4;
  if (*a4 != 22 && v54 != 17)
  {
    uint64_t v65 = *v152;
    int v66 = *(unsigned __int16 *)(*v152 + 24);
    uint64_t v145 = v49;
    if (v66 == 35 || v66 == 11)
    {
      switch(v54)
      {
        case 0xBu:
        case 0x13u:
          unsigned int v54 = 11;
          goto LABEL_34;
        case 0xCu:
          goto LABEL_34;
        case 0xDu:
        case 0x15u:
          unsigned int v54 = 13;
          goto LABEL_34;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
          __break(1u);
          return result;
        case 0x12u:
          uint64_t v118 = *(void *)(v65 + 80);
          unsigned int v119 = *(_DWORD *)(v118 + 32);
          if (!v119) {
            goto LABEL_89;
          }
          uint64_t result = (unsigned __int16 *)(v118 + 24);
          if (v119 > 0x40)
          {
            long long v143 = v51;
            uint64_t result = (unsigned __int16 *)llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)result);
            uint64_t v51 = v143;
            if (result == v119) {
              goto LABEL_89;
            }
          }
          else if (*(void *)result == 0xFFFFFFFFFFFFFFFFLL >> -(char)v119)
          {
            goto LABEL_89;
          }
LABEL_91:
          unsigned int v54 = 10;
          goto LABEL_34;
        case 0x14u:
          uint64_t v116 = *(void *)(v65 + 80);
          uint64_t result = (unsigned __int16 *)(v116 + 24);
          unsigned int v117 = *(_DWORD *)(v116 + 32);
          if (v117 > 0x40)
          {
            int v142 = v51;
            uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
            uint64_t v51 = v142;
            if (result != v117) {
              goto LABEL_75;
            }
          }
          else if (*(void *)result)
          {
LABEL_75:
            unsigned int v54 = 12;
            goto LABEL_34;
          }
LABEL_89:
          *(void *)a2 = v150;
          *(_DWORD *)(a2 + 8) = v34;
          *long long v152 = (uint64_t)v51;
          *((_DWORD *)v152 + 2) = v52;
          return result;
        default:
          goto LABEL_91;
      }
    }
    unsigned int v54 = dword_1CD936298[v54 - 10];
LABEL_34:
    uint64_t v144 = (uint64_t)v51;
    uint64_t v154 = 0;
    int v155 = 1;
    char v156 = 1;
    uint64_t v157 = a6;
    BOOL v75 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v25[5] + 16 * v40), *(void *)(v25[5] + 16 * v40 + 8));
    __int16 v77 = sub_1CD00C82C(a1, v75, v76, (uint64_t)v25, v40, (uint64_t)v41, (void *)v147, v54, 0, (uint64_t)&v154, a5);
    if (!v77)
    {
      __int16 v133 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v25[5] + 16 * v40), *(void *)(v25[5] + 16 * v40 + 8));
      __int16 v77 = sub_1CD3DC614((void *)a6, a5, v133, v134, (uint64_t)v25, v40, (uint64_t)v41, v147, v54, 0, 0, 0, 0);
    }
    uint64_t v79 = v77;
    unsigned int v148 = v78;
    uint64_t v80 = (uint64_t)v150;
    int v81 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v150[5] + 16 * v149), *(void *)(v150[5] + 16 * v149 + 8));
    uint64_t result = (unsigned __int16 *)sub_1CD00C82C(a1, v81, v82, (uint64_t)v150, v149, v144, (void *)v145, *a4, 0, (uint64_t)&v154, a5);
    if (!result)
    {
      uint64_t v135 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v150[5] + 16 * v149), *(void *)(v150[5] + 16 * v149 + 8));
      uint64_t v137 = v136;
      uint64_t v138 = sub_1CD7EE368((void *)a6, *a4);
      uint64_t v141 = *(void *)(a6 + 832);
      if (v141) {
        LOWORD(v141) = *(_WORD *)(v141 + 8);
      }
      uint64_t result = (unsigned __int16 *)sub_1CD7F5D38((void *)a6, (const char *)0xC1, a5, v135, v137, (uint64_t)v150, v149, v140, v144, v145, v138, v139, SHIDWORD(v139), v141);
    }
    uint64_t v84 = (uint64_t)result;
    int v85 = *((unsigned __int16 *)v79 + 12);
    if (v85 == 35 || v85 == 11) {
      int v86 = v79;
    }
    else {
      int v86 = 0;
    }
    uint64_t v87 = v83;
    int v88 = result[12];
    uint64_t v151 = (uint64_t)v79;
    if (v88 == 35 || v88 == 11) {
      uint64_t v89 = result;
    }
    else {
      uint64_t v89 = 0;
    }
    if (v86)
    {
      uint64_t v90 = v86[10];
      uint64_t result = (unsigned __int16 *)(v90 + 24);
      unsigned int v91 = *(_DWORD *)(v90 + 32);
      if (v91 <= 0x40)
      {
        if (*(void *)result) {
          goto LABEL_46;
        }
LABEL_60:
        uint64_t v100 = v152;
LABEL_61:
        *(void *)a2 = v84;
        *(_DWORD *)(a2 + 8) = v87;
        uint64_t *v100 = 0;
        *((_DWORD *)v100 + 2) = 0;
        return result;
      }
      uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
      if (result == v91) {
        goto LABEL_60;
      }
    }
LABEL_46:
    if (!v89) {
      goto LABEL_80;
    }
    uint64_t v92 = *((void *)v89 + 10);
    uint64_t v93 = (llvm::APInt *)(v92 + 24);
    unsigned int v94 = *(_DWORD *)(v92 + 32);
    if (v94 > 0x40)
    {
      uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v92 + 24));
      if (result != v94) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v95 = *(llvm::APInt **)v93;
      if (*(void *)v93)
      {
LABEL_57:
        if (v95 == (llvm::APInt *)1)
        {
          HIDWORD(v99) = *a4;
          LODWORD(v99) = *a4 - 10;
          unsigned int v98 = v99 >> 1;
          if (v98 <= 5 && ((1 << v98) & 0x33) != 0) {
            goto LABEL_60;
          }
        }
LABEL_80:
        uint64_t v120 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(*(void *)(v80 + 40) + 16 * v149), *(void *)(*(void *)(v80 + 40) + 16 * v149 + 8));
        uint64_t v122 = sub_1CD00C82C(a1, v120, v121, v80, v149, v144, (void *)v145, 0x11u, 0, (uint64_t)&v154, a5);
        *(void *)a2 = v122;
        *(_DWORD *)(a2 + 8) = v124;
        if (!v122)
        {
          uint64_t v125 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(*(void *)(v80 + 40) + 16 * v149), *(void *)(*(void *)(v80 + 40) + 16 * v149 + 8));
          uint64_t v122 = sub_1CD3DC614((void *)a6, a5, v125, v126, v80, v149, v144, v145, 0x11u, 0, 0, 0, 0);
          *(void *)a2 = v122;
          *(_DWORD *)(a2 + 8) = v127;
        }
        uint64_t v128 = *(void *)(v151 + 40) + 16 * v148;
        int v129 = *(llvm **)v128;
        uint64_t v130 = *(void *)(v128 + 8);
        uint64_t v131 = *(void *)(a6 + 832);
        if (v131) {
          LOWORD(v131) = *(_WORD *)(v131 + 8);
        }
        uint64_t v100 = v152;
        uint64_t result = (unsigned __int16 *)sub_1CD7F5D38((void *)a6, (const char *)0xBE, a5, v129, v130, (uint64_t)v122, *(void *)(a2 + 8), v123, v151, v148, v84, v87, SHIDWORD(v87), v131);
        uint64_t v84 = (uint64_t)result;
        LODWORD(v87) = v132;
        goto LABEL_61;
      }
    }
    HIDWORD(v97) = *a4 - 11;
    LODWORD(v97) = HIDWORD(v97);
    unsigned int v96 = v97 >> 1;
    if (v96 <= 5 && ((1 << v96) & 0x33) != 0) {
      goto LABEL_60;
    }
    if (v94 < 0x41)
    {
LABEL_56:
      uint64_t v95 = *(llvm::APInt **)v93;
      goto LABEL_57;
    }
LABEL_54:
    uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase(v93);
    if (v94 - result > 0x40) {
      goto LABEL_80;
    }
    uint64_t v93 = *(llvm::APInt **)v93;
    goto LABEL_56;
  }
  if (v41 != (uint64_t *)result) {
    goto LABEL_23;
  }
  if (v43 != v49) {
    goto LABEL_23;
  }
  int v55 = *((unsigned __int16 *)v41 + 12);
  if (v55 != 35 && v55 != 11) {
    goto LABEL_23;
  }
  uint64_t v56 = v41[10];
  unsigned int v57 = *(_DWORD *)(v56 + 32);
  if (v57)
  {
    uint64_t v58 = (llvm::APInt *)(v56 + 24);
    if (v57 > 0x40)
    {
      unsigned int v67 = v51;
      uint64_t v68 = v49;
      int v69 = llvm::APInt::countTrailingOnesSlowCase(v58);
      uint64_t v53 = v68;
      uint64_t v51 = v67;
      if (v69 != v57) {
        goto LABEL_23;
      }
    }
    else if (*(void *)v58 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v57)
    {
LABEL_23:
      uint64_t v59 = v25[5] + 16 * v40;
      uint64_t v60 = *(llvm **)v59;
      uint64_t v61 = *(void *)(v59 + 8);
      uint64_t v62 = *(void *)(a6 + 832);
      uint64_t v63 = v53;
      uint64_t v64 = (uint64_t)v51;
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      *(void *)a2 = sub_1CCFDED5C(a6, 173, a5, v60, v61, (uint64_t)v25, v40, v50, (uint64_t)v41, v147, v62);
      *(_DWORD *)(a2 + 8) = v102;
      uint64_t v103 = v25[5] + 16 * v40;
      uint64_t v104 = *(llvm **)v103;
      uint64_t v105 = *(void *)(v103 + 8);
      uint64_t v106 = *(void *)(a6 + 832);
      if (v106) {
        LOWORD(v106) = *(_WORD *)(v106 + 8);
      }
      uint64_t v107 = sub_1CCFDED5C(a6, 173, a5, v104, v105, (uint64_t)v150, v149, v101, v64, v63, v106);
      *long long v152 = (uint64_t)v107;
      *((_DWORD *)v152 + 2) = v109;
      uint64_t v111 = *(void *)(a6 + 832);
      if (v111) {
        LOWORD(v111) = *(_WORD *)(v111 + 8);
      }
      uint64_t v110 = *(void *)(*(void *)a2 + 40) + 16 * *(unsigned int *)(a2 + 8);
      uint64_t v112 = sub_1CCFDED5C(a6, 172, a5, *(llvm **)v110, *(void *)(v110 + 8), *(void *)a2, *(void *)(a2 + 8), v108, (uint64_t)v107, v152[1], v111);
      *(void *)a2 = v112;
      *(_DWORD *)(a2 + 8) = v113;
      uint64_t v114 = v112[5] + 16 * v113;
      uint64_t result = (unsigned __int16 *)sub_1CD7EBF14(a6, 0, a5, *(llvm **)v114, *(void *)(v114 + 8), 0, 0);
      *long long v152 = (uint64_t)result;
      *((_DWORD *)v152 + 2) = v115;
      return result;
    }
  }
  uint64_t v70 = v25[5] + 16 * v40;
  uint64_t v71 = *(llvm **)v70;
  uint64_t v72 = *(void *)(v70 + 8);
  uint64_t v73 = *(void *)(a6 + 832);
  if (v73) {
    LOWORD(v73) = *(_WORD *)(v73 + 8);
  }
  uint64_t result = (unsigned __int16 *)sub_1CCFDED5C(a6, 171, a5, v71, v72, (uint64_t)v25, v40, v50, (uint64_t)v150, v149, v73);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v74;
  *long long v152 = (uint64_t)v41;
  *((_DWORD *)v152 + 2) = v43;
  return result;
}

uint64_t *sub_1CD3E1260(void *a1, const llvm::APInt *a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v16 = (unsigned __int8 *)(*(void *)(a5 + 40) + 16 * a6);
  if (*v16) {
    BOOL v17 = *v16 - 15 < 0x9C;
  }
  else {
    BOOL v17 = (*(_DWORD *)(*((void *)v16 + 1) + 8) & 0xFE) == 18;
  }
  uint64_t v18 = a1[104];
  if (v18) {
    LOWORD(v18) = *(_WORD *)(v18 + 8);
  }
  if (v17) {
    uint64_t v19 = 191;
  }
  else {
    uint64_t v19 = 190;
  }
  return sub_1CD7F5D38(a1, (const char *)v19, a2, a3, a4, a5, a6, a8, a7, a8, a9, a10, a11, v18);
}

llvm::Type *sub_1CD3E12F4(unsigned __int8 *a1, uint64_t a2, BOOL a3)
{
  v5[0] = sub_1CD3DD468(a1, a2, a3);
  v5[1] = v3;
  if (LOBYTE(v5[0])) {
    return (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v5);
  }
  else {
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v5);
  }
}

uint64_t sub_1CD3E1334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 1968))(a1, a2, 0);
  if (result)
  {
    uint64_t v6 = *(unsigned __int16 *)(result + 58);
    if (*(_WORD *)(result + 58))
    {
      if (v6 == 1)
      {
        unsigned int v7 = *(_DWORD *)(a3 + 8);
        if (v7 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v8 = (uint64_t *)(*(void *)a3 + 16 * v7);
        *uint64_t v8 = result;
        v8[1] = v5;
        ++*(_DWORD *)(a3 + 8);
      }
      else
      {
        uint64_t v9 = 0;
        unsigned int v10 = *(_DWORD *)(a3 + 8);
        do
        {
          if (v10 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          __int16 v11 = (uint64_t *)(*(void *)a3 + 16 * v10);
          *__int16 v11 = result;
          v11[1] = v9;
          unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v10;
          ++v9;
        }
        while (v6 != v9);
      }
    }
  }
  return result;
}

unint64_t sub_1CD3E144C(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a4;
  v6[1] = a5;
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12) {
      return 4;
    }
    return sub_1CD3D91B4((llvm::EVT *)v6, a2, a3);
  }
  if (a4 - 15 < 0x9C) {
    return sub_1CD3D91B4((llvm::EVT *)v6, a2, a3);
  }
  return 4;
}

void sub_1CD3E14A4(llvm *a1, uint64_t a2)
{
  uint64_t v3 = (llvm::raw_ostream *)llvm::errs(a1);
  unint64_t v4 = sub_1CB8E509C(v3, "This call was not recognized as an intrinsic: ");
  unint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = (llvm::raw_ostream *)llvm::errs(v4);
  sub_1CD806F78(v5, v6, 0);
  __break(1u);
}

uint64_t sub_1CD3E14E4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t sub_1CD3E14F8(int a1, uint64_t a2, llvm::Instruction *this, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  switch((int)a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      uint64_t v9 = (llvm::DataLayout *)(llvm::Instruction::getModule(this) + 272);
      *(_DWORD *)a2 = 47;
      unsigned int v10 = *(llvm::Type **)this;
      unint64_t v11 = (unint64_t)(sub_1CB83544C((uint64_t)v9, *(void *)this) + 7) >> 3;
      BOOL v13 = v12 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v9, v10, 1);
      unint64_t v16 = ((1 << Alignment) + 0x3FFFFFFFFLL + v11) & -(1 << Alignment);
      if (v13) {
      unint64_t v17 = v16 >> 2;
      }
      uint64_t v18 = **(llvm::LLVMContext ***)this;
      uint64_t v19 = 10;
      goto LABEL_8;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      uint64_t v20 = (llvm::DataLayout *)(llvm::Instruction::getModule(this) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v21 = *(llvm::Type **)this;
      unint64_t v22 = (unint64_t)(sub_1CB83544C((uint64_t)v20, *(void *)this) + 7) >> 3;
      BOOL v24 = v23 == 1;
      char v25 = llvm::DataLayout::getAlignment(v20, v21, 1);
      unint64_t v27 = ((1 << v25) + 0x1FFFFFFFFLL + v22) & -(1 << v25);
      if (v24) {
      unint64_t v17 = v27 >> 1;
      }
      uint64_t v18 = **(llvm::LLVMContext ***)this;
      uint64_t v19 = 9;
LABEL_8:
      *(void *)(a2 + 8) = sub_1CB8E5DAC(v18, v19, 0, v17, 0);
      *(void *)(a2 + 16) = v28;
      llvm::SampleInfo::SampleInfo(v59, a5, 1);
      *(void *)(a2 + 24) = *((void *)this + 4 * v60 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 1;
      return 1;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      uint64_t v30 = (llvm::DataLayout *)(llvm::Instruction::getModule(this) + 272);
      *(_DWORD *)a2 = 47;
      __int16 v31 = (llvm::Type *)**((void **)this
                           + 4 * (*((_DWORD *)this + 5) & 0x7FFFFFFu)
                           + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)
                           - 4);
      unint64_t v32 = (unint64_t)(sub_1CB83544C((uint64_t)v30, (uint64_t)v31) + 7) >> 3;
      BOOL v34 = v33 == 1;
      char v35 = llvm::DataLayout::getAlignment(v30, v31, 1);
      unint64_t v37 = ((1 << v35) + 0x3FFFFFFFFLL + v32) & -(1 << v35);
      if (v34) {
      unint64_t v38 = v37 >> 2;
      }
      uint64_t v39 = **(llvm::LLVMContext ***)this;
      uint64_t v40 = 10;
      goto LABEL_16;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      uint64_t v41 = (llvm::DataLayout *)(llvm::Instruction::getModule(this) + 272);
      *(_DWORD *)a2 = 47;
      unsigned int v42 = (llvm::Type *)**((void **)this
                           + 4 * (*((_DWORD *)this + 5) & 0x7FFFFFFu)
                           + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)
                           - 4);
      unint64_t v43 = (unint64_t)(sub_1CB83544C((uint64_t)v41, (uint64_t)v42) + 7) >> 3;
      BOOL v45 = v44 == 1;
      char v46 = llvm::DataLayout::getAlignment(v41, v42, 1);
      unint64_t v48 = ((1 << v46) + 0x1FFFFFFFFLL + v43) & -(1 << v46);
      if (v45) {
      unint64_t v38 = v48 >> 1;
      }
      uint64_t v39 = **(llvm::LLVMContext ***)this;
      uint64_t v40 = 9;
      goto LABEL_16;
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2083:
    case 2084:
    case 2085:
      uint64_t v50 = (llvm::DataLayout *)(llvm::Instruction::getModule(this) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v51 = *(llvm::Type **)this;
      unint64_t v52 = (unint64_t)(sub_1CB83544C((uint64_t)v50, *(void *)this) + 7) >> 3;
      BOOL v54 = v53 == 1;
      uint64_t v5 = 1;
      char v55 = llvm::DataLayout::getAlignment(v50, v51, 1);
      unint64_t v57 = ((1 << v55) + 0x3FFFFFFFFLL + v52) & -(1 << v55);
      if (v54) {
      *(void *)(a2 + 8) = sub_1CB8E5DAC(**(llvm::LLVMContext ***)this, 10, 0, v57 >> 2, 0);
      }
      *(void *)(a2 + 16) = v58;
      *(void *)(a2 + 24) = *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 1;
      return v5;
    case 2029:
    case 2034:
    case 2045:
    case 2050:
    case 2061:
    case 2066:
    case 2077:
    case 2082:
      *(_DWORD *)a2 = 47;
      uint64_t v39 = **(llvm::LLVMContext ***)this;
      uint64_t v40 = 10;
      LODWORD(v38) = 4;
LABEL_16:
      *(void *)(a2 + 8) = sub_1CB8E5DAC(v39, v40, 0, v38, 0);
      *(void *)(a2 + 16) = v49;
      *(void *)(a2 + 24) = *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 2;
      uint64_t v5 = 1;
      break;
    default:
      return v5;
  }
  return v5;
}

void sub_1CD3E1934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if ((*(unsigned char *)(v2 + 8) & 4) != 0)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 40);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 32 * v4;
      uint64_t v7 = 2;
      do
      {
        if ((*(unsigned char *)(*(void *)(v2 + 40) + v7) & 4) != 0)
        {
          uint64_t v8 = *(void *)(a2 + 32) + v5;
          if (*(_DWORD *)(v8 + 4)) {
            llvm::MachineOperand::setIsDef(v8, 1);
          }
        }
        v5 += 32;
        v7 += 6;
      }
      while (v6 != v5);
    }
  }
}

unint64_t *sub_1CD3E19B8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = a3;
  unint64_t v5 = a3[4];
  uint64_t v6 = *(void **)(v5 + 40);
  uint64_t v7 = (uint64_t *)(a1 + 184296);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 184296);
  int v9 = v8[280];
  uint64_t v10 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v8 + 104))(v8);
  unint64_t v11 = *(unsigned __int16 **)(a2 + 16);
  int v12 = *v11;
  if ((v11[8] & 0x20) != 0)
  {
    unsigned int v14 = sub_1CD3D2308(v12, 9u);
    unsigned int v15 = sub_1CD3D2308(v12, 7u);
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = v16 + 32 * v14;
    uint64_t v18 = (unsigned int *)(v16 + 32 * v15);
    int v19 = *(_DWORD *)(v17 + 16);
    uint64_t v20 = (_UNKNOWN ***)(*(void *)(v6[3] + 16 * (v18[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    if (v19 == 1 && v20 == &off_1E66A4990)
    {
      unsigned int v23 = *v18;
      __int16 v24 = 49;
    }
    else
    {
      if ((v19 - 3) > 1 || v20 != &off_1E66A4F00) {
        return v3;
      }
      unsigned int v23 = *v18;
      __int16 v24 = 51;
    }
    *uint64_t v18 = v23 & 0xFFF000FF | ((v24 & 0xFFF) << 8);
  }
  else
  {
    uint64_t v13 = v10;
    if (*v11 <= 0x51Eu)
    {
      switch(*v11)
      {
        case 0x100u:
        case 0x101u:
          int v176 = v9;
          unsigned int v166 = (unsigned char *)*v7;
          uint64_t v167 = v10;
          uint64_t v170 = a2;
          unint64_t v27 = *(unsigned __int8 **)(a2 + 56);
          uint64_t v182 = v27;
          if (v27) {
            llvm::MetadataTracking::track((uint64_t)&v182, v27, 2);
          }
          uint64_t v28 = (const llvm::BasicBlock *)v3[2];
          uint64_t v29 = (llvm::MachineFunction *)v3[4];
          uint64_t v174 = *((void *)v29 + 5);
          unsigned int v171 = ((*(unsigned __int16 *)(*(void *)v29 + 18) >> 4) & 0x3FF) - 102;
          MachineBasicBlocuint64_t k = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          __int16 v31 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          unint64_t v32 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          int v33 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          BOOL v34 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          char v35 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          unint64_t v178 = llvm::MachineFunction::CreateMachineBasicBlock(v29, v28);
          uint64_t v36 = (unint64_t *)v3[1];
          unsigned int v161 = (uint64_t *)v29;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)MachineBasicBlock);
          unint64_t v37 = *v36;
          *MachineBasicBlocuint64_t k = *v36;
          MachineBasicBlock[1] = v36;
          *(void *)(v37 + 8) = MachineBasicBlock;
          uint64_t v179 = MachineBasicBlock;
          unint64_t *v36 = (unint64_t)MachineBasicBlock;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)v31);
          unint64_t v38 = *v36;
          *__int16 v31 = *v36;
          v31[1] = v36;
          *(void *)(v38 + 8) = v31;
          unint64_t *v36 = (unint64_t)v31;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)v32);
          unint64_t v39 = *v36;
          *unint64_t v32 = *v36;
          v32[1] = v36;
          *(void *)(v39 + 8) = v32;
          unint64_t *v36 = (unint64_t)v32;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)v33);
          unint64_t v40 = *v36;
          *int v33 = *v36;
          v33[1] = v36;
          *(void *)(v40 + 8) = v33;
          unint64_t *v36 = (unint64_t)v33;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)v34);
          unint64_t v41 = *v36;
          void *v34 = *v36;
          v34[1] = v36;
          *(void *)(v41 + 8) = v34;
          unint64_t *v36 = (unint64_t)v34;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, (uint64_t)v35);
          unint64_t v42 = *v36;
          *char v35 = *v36;
          v35[1] = v36;
          *(void *)(v42 + 8) = v35;
          uint64_t v177 = v35;
          unint64_t *v36 = (unint64_t)v35;
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v29 + 320, v178);
          unint64_t v43 = *v36;
          *(void *)unint64_t v178 = *v36;
          *(void *)(v178 + 8) = v36;
          *(void *)(v43 + 8) = v178;
          unint64_t *v36 = v178;
          int v44 = *(unint64_t **)(v178 + 56);
          uint64_t v45 = v170;
          if ((*(unsigned char *)v170 & 4) == 0)
          {
            uint64_t v45 = v170;
            if ((*(_WORD *)(v170 + 44) & 8) != 0)
            {
              uint64_t v45 = v170;
              do
                uint64_t v45 = *(void *)(v45 + 8);
              while ((*(_WORD *)(v45 + 44) & 8) != 0);
            }
          }
          char v46 = *(unint64_t **)(v45 + 8);
          uint64_t v47 = v3 + 6;
          if (v46 != v3 + 6 && v44 != v47)
          {
            if ((unint64_t *)v178 != v3)
            {
              unint64_t v158 = *(void *)(v178 + 40);
              uint64_t v159 = v46;
              do
              {
                v159[3] = v158;
                uint64_t v159 = (unint64_t *)v159[1];
              }
              while (v159 != v47);
            }
            sub_1CB8F1D6C(v44, v46, v3 + 6);
          }
          llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v178, (llvm::MachineBasicBlock *)v3);
          llvm::MachineBasicBlock::addSuccessor(v3, MachineBasicBlock, -1);
          llvm::MachineBasicBlock::addSuccessor(MachineBasicBlock, v31, -1);
          llvm::MachineBasicBlock::addSuccessor(v31, v32, -1);
          llvm::MachineBasicBlock::addSuccessor(v31, v33, -1);
          llvm::MachineBasicBlock::addSuccessor(v32, v33, -1);
          llvm::MachineBasicBlock::addSuccessor(v33, v34, -1);
          llvm::MachineBasicBlock::addSuccessor(v34, MachineBasicBlock, -1);
          llvm::MachineBasicBlock::addSuccessor(v34, v35, -1);
          llvm::MachineBasicBlock::addSuccessor(v35, (void *)v178, -1);
          uint64_t v49 = *(void *)(v170 + 32);
          int v160 = *(_DWORD *)(v49 + 36);
          long long v50 = *(_OWORD *)(v49 + 48);
          v181[0] = *(_OWORD *)(v49 + 32);
          v181[1] = v50;
          long long v51 = *(_OWORD *)(v49 + 80);
          v180[0] = *(_OWORD *)(v49 + 64);
          v180[1] = v51;
          uint64_t v52 = 96;
          uint64_t v53 = 64;
          if (!v176) {
            uint64_t v53 = 96;
          }
          int v163 = *(_DWORD *)(v49 + v53 + 4);
          if (!v176) {
            uint64_t v52 = 128;
          }
          int v54 = *(_DWORD *)(v49 + v52 + 4);
          if (!LOBYTE(v181[0])) {
            LODWORD(v181[0]) &= ~0x4000000u;
          }
          int v168 = v54;
          char v162 = (v171 > 5) | (0xEu >> v171);
          if (!LOBYTE(v180[0])) {
            LODWORD(v180[0]) &= ~0x4000000u;
          }
          char v55 = sub_1CB84B588((uint64_t)v3, v3 + 6, &v182, *(void *)(v167 + 8) + 570000);
          unint64_t v57 = v56;
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v183);
          int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A4340, "", 0);
          int v164 = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A4340, "", 0);
          int v173 = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A4340, "", 0);
          uint64_t v58 = sub_1CB84B588((uint64_t)v3, v3 + 6, &v182, *(void *)(v167 + 8) + 245040);
          unsigned int v60 = v59;
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0x1000000;
          DWORD1(v183) = v164;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v183);
          LODWORD(v58) = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A43C8, "", 0);
          int v169 = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A43C8, "", 0);
          int v61 = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A43C8, "", 0);
          int v175 = llvm::MachineRegisterInfo::createVirtualRegister(v174, (uint64_t)&off_1E66A43C8, "", 0);
          sub_1CB85AA4C((uint64_t)v3, v3 + 6, &v182, *(void *)(v167 + 8) + 480, (int)v58);
          uint64_t v62 = sub_1CB85AA4C((uint64_t)MachineBasicBlock, MachineBasicBlock + 6, &v182, *(void *)(v167 + 8), VirtualRegister);
          uint64_t v64 = v63;
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v164;
          llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v3;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v173;
          llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v34;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v183);
          int v165 = v61;
          uint64_t v65 = sub_1CB85AA4C((uint64_t)MachineBasicBlock, MachineBasicBlock + 6, &v182, *(void *)(v167 + 8), v61);
          unsigned int v67 = v66;
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v58;
          llvm::MachineInstr::addOperand(v66, v65, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v3;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v175;
          llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v34;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v183);
          uint64_t v68 = v31 + 6;
          int v69 = sub_1CB84B588((uint64_t)v31, v31 + 6, &v182, *(void *)(v167 + 8) + 239568);
          uint64_t v71 = v70;
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v70, v69, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = VirtualRegister;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          long long v184 = 0uLL;
          long long v183 = 0x11300000000uLL;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          long long v184 = 0uLL;
          long long v183 = 0x201000000uLL;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v183);
          if (v162)
          {
            uint64_t v72 = sub_1CB84B588((uint64_t)v31, v68, &v182, *(void *)(v167 + 8) + 239664);
            int v74 = v73;
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v73, v72, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x11700000000uLL;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x201000000uLL;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x200000000uLL;
            llvm::MachineInstr::addOperand(v74, v72, (const llvm::MachineOperand *)&v183);
          }
          BOOL v75 = sub_1CB84B588((uint64_t)v31, v68, &v182, *(void *)(v167 + 8) + 555648);
          __int16 v77 = v76;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v33;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v76, v75, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 1;
          llvm::MachineInstr::addOperand(v77, v75, (const llvm::MachineOperand *)&v183);
          unsigned int v78 = sub_1CB84B588((uint64_t)v31, v68, &v182, *(void *)(v167 + 8) + 555600);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v32;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v79, v78, (const llvm::MachineOperand *)&v183);
          if (v166[280])
          {
            int v87 = v169;
            int v81 = v32 + 6;
            uint64_t v140 = sub_1CB85AA4C((uint64_t)v32, v32 + 6, &v182, *(void *)(v167 + 8) + 558960, v169);
            int v142 = v141;
            *((void *)&v183 + 1) = 0;
            long long v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v160;
            llvm::MachineInstr::addOperand(v141, v140, (const llvm::MachineOperand *)&v183);
            uint64_t v143 = *v161;
            LODWORD(v183) = 0;
            BOOL v144 = sub_1CD3CA314((int)v166, v143, "LoadCMode", &v183);
            uint64_t v145 = v183;
            LODWORD(v183) = 1;
            if (!v144) {
              uint64_t v145 = 0;
            }
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v145;
            llvm::MachineInstr::addOperand(v142, v140, (const llvm::MachineOperand *)&v183);
            uint64_t v146 = *v161;
            LODWORD(v183) = 0;
            BOOL v147 = sub_1CD3CA314((int)v166, v146, "LoadSLCMode", &v183);
            uint64_t v148 = v183;
            if (!v147) {
              uint64_t v148 = 1;
            }
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v148;
            llvm::MachineInstr::addOperand(v142, v140, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v142, v140, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v142, v140, (const llvm::MachineOperand *)&v183);
            long long v183 = 0u;
            long long v184 = 0u;
            llvm::MachineInstr::addOperand(v142, v140, (const llvm::MachineOperand *)&v183);
            int v86 = v168;
          }
          else
          {
            uint64_t v80 = 559296;
            if (!LOBYTE(v180[0])) {
              uint64_t v80 = 559344;
            }
            int v81 = v32 + 6;
            uint64_t v82 = sub_1CB85AA4C((uint64_t)v32, v32 + 6, &v182, *(void *)(v167 + 8) + v80, v169);
            uint64_t v84 = v83;
            llvm::MachineInstr::addOperand(v83, v82, (const llvm::MachineOperand *)v181);
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)v180);
            if (v166[310])
            {
              uint64_t v85 = 1;
            }
            else if (v166[311])
            {
              uint64_t v85 = 2;
            }
            else
            {
              uint64_t v85 = 3;
              if (!v166[312]) {
                uint64_t v85 = 0;
              }
            }
            int v86 = v168;
            int v87 = v169;
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v85;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
            long long v183 = 0u;
            long long v184 = 0u;
            llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v183);
          }
          int v88 = sub_1CB84B588((uint64_t)v32, v81, &v182, *(void *)(v167 + 8) + 239568);
          uint64_t v90 = v89;
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v87;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v86;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          long long v184 = 0uLL;
          long long v183 = 0x201000000uLL;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v183);
          if (v166[280])
          {
            uint64_t v149 = sub_1CB84B588((uint64_t)v32, v81, &v182, *(void *)(v167 + 8) + 636960);
            uint64_t v151 = v150;
            *((void *)&v183 + 1) = 0;
            long long v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v163;
            llvm::MachineInstr::addOperand(v150, v149, (const llvm::MachineOperand *)&v183);
            *((void *)&v183 + 1) = 0;
            long long v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v160;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            uint64_t v152 = *v161;
            LODWORD(v183) = 0;
            BOOL v153 = sub_1CD3CA314((int)v166, v152, "LoadCMode", &v183);
            uint64_t v154 = v183;
            if (!v153) {
              uint64_t v154 = 0;
            }
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v154;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            uint64_t v155 = *v161;
            LODWORD(v183) = 0;
            BOOL v156 = sub_1CD3CA314((int)v166, v155, "LoadSLCMode", &v183);
            uint64_t v157 = v183;
            if (!v156) {
              uint64_t v157 = 1;
            }
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v157;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x200000000uLL;
            llvm::MachineInstr::addOperand(v151, v149, (const llvm::MachineOperand *)&v183);
            unsigned int v96 = (const llvm::MachineOperand **)v170;
          }
          else
          {
            uint64_t v91 = 637296;
            if (!LOBYTE(v180[0])) {
              uint64_t v91 = 637344;
            }
            uint64_t v92 = sub_1CB84B588((uint64_t)v32, v81, &v182, *(void *)(v167 + 8) + v91);
            unsigned int v94 = v93;
            *((void *)&v183 + 1) = 0;
            long long v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v163;
            llvm::MachineInstr::addOperand(v93, v92, (const llvm::MachineOperand *)&v183);
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)v181);
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)v180);
            if (v166[310])
            {
              uint64_t v95 = 1;
              unsigned int v96 = (const llvm::MachineOperand **)v170;
            }
            else
            {
              unsigned int v96 = (const llvm::MachineOperand **)v170;
              if (v166[311])
              {
                uint64_t v95 = 2;
              }
              else
              {
                uint64_t v95 = 3;
                if (!v166[312]) {
                  uint64_t v95 = 0;
                }
              }
            }
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = v95;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x200000000uLL;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v183);
            *(_DWORD *)(*((void *)v94 + 4) + 32) &= ~0x4000000u;
            uint64_t v97 = *((void *)v94 + 4);
            if (!*(_DWORD *)(v97 + 64)) {
              *(_DWORD *)(v97 + 64) &= ~0x4000000u;
            }
            uint64_t v98 = 139344;
            if (!LOBYTE(v180[0])) {
              uint64_t v98 = 139392;
            }
            unint64_t v99 = sub_1CB84B588((uint64_t)v32, v81, &v182, *(void *)(v167 + 8) + v98);
            uint64_t v101 = v100;
            llvm::MachineInstr::addOperand(v100, v99, (const llvm::MachineOperand *)v181);
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)v180);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 0;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((void *)&v183 + 1) = 0;
            *(void *)&long long v184 = 1;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
            long long v184 = 0uLL;
            long long v183 = 0x200000000uLL;
            llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v183);
          }
          int v102 = sub_1CB85AA4C((uint64_t)v33, v33 + 6, &v182, *(void *)(v167 + 8), v175);
          uint64_t v104 = v103;
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v165;
          llvm::MachineInstr::addOperand(v103, v102, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v31;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v104, v102, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v87;
          llvm::MachineInstr::addOperand(v104, v102, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v32;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v104, v102, (const llvm::MachineOperand *)&v183);
          uint64_t v105 = 136128;
          if (v176) {
            uint64_t v105 = 132768;
          }
          uint64_t v106 = sub_1CB84B588((uint64_t)v34, v34 + 6, &v182, *(void *)(v167 + 8) + v105);
          uint64_t v108 = v107;
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0x1000000;
          DWORD1(v183) = v173;
          llvm::MachineInstr::addOperand(v107, v106, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = VirtualRegister;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 1;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v108, v106, (const llvm::MachineOperand *)&v183);
          int v109 = sub_1CB84B588((uint64_t)v34, v34 + 6, &v182, *(void *)(v167 + 8) + 239664);
          uint64_t v111 = v110;
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v183);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v173;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 32;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          long long v184 = 0uLL;
          long long v183 = 0x201000000uLL;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v183);
          uint64_t v112 = sub_1CB84B588((uint64_t)v34, v34 + 6, &v182, *(void *)(v167 + 8) + 555648);
          uint64_t v114 = v113;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v179;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v113, v112, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 1;
          llvm::MachineInstr::addOperand(v114, v112, (const llvm::MachineOperand *)&v183);
          int v115 = sub_1CB84B588((uint64_t)v34, v34 + 6, &v182, *(void *)(v167 + 8) + 555600);
          uint64_t v116 = (uint64_t)v177;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = v177;
          LODWORD(v183) = 4;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v183);
          uint64_t v118 = sub_1CB84B588(v116, (unint64_t *)(v116 + 48), &v182, *(void *)(v167 + 8) + 583488);
          uint64_t v120 = v119;
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v183);
          LODWORD(v183) = 1;
          *((void *)&v183 + 1) = 0;
          *(void *)&long long v184 = 0;
          llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v183);
          long long v183 = 0u;
          long long v184 = 0u;
          llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v183);
          uint64_t v121 = sub_1CB84B588(v116, *(unint64_t **)(v116 + 56), &v182, *(void *)(v167 + 8) + 912);
          uint64_t v123 = v122;
          llvm::MachineInstr::addOperand(v122, v121, v96[4]);
          *((void *)&v183 + 1) = 0;
          long long v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v175;
          llvm::MachineInstr::addOperand(v123, v121, (const llvm::MachineOperand *)&v183);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v96);
          if (v182) {
            llvm::MetadataTracking::untrack((uint64_t)&v182, v182);
          }
          return (unint64_t *)v178;
        case 0x102u:
        case 0x103u:
        case 0x104u:
        case 0x105u:
          uint64_t v26 = *v7;
          return sub_1CB8E8F88(a2, v3, v10, v26, v9 != 0);
        case 0x106u:
        case 0x107u:
        case 0x108u:
          __break(1u);
          goto LABEL_119;
        case 0x109u:
          int v135 = llvm::MachineRegisterInfo::createVirtualRegister((uint64_t)v6, (uint64_t)&off_1E66A4340, "", 0);
          uint64_t v136 = *(void *)(v13 + 8);
          uint64_t v137 = v136 + 119664;
          uint64_t v138 = 61776;
          goto LABEL_87;
        case 0x10Au:
          int v135 = llvm::MachineRegisterInfo::createVirtualRegister((uint64_t)v6, (uint64_t)&off_1E66A4180, "", 0);
          uint64_t v136 = *(void *)(v13 + 8);
          uint64_t v137 = v136 + 119856;
          uint64_t v138 = 48000;
LABEL_87:
          sub_1CB8E71B4(a2, v137, v136 + v138, v135);
          break;
        default:
LABEL_119:
          JUMPOUT(0);
      }
    }
    else
    {
      switch(*v11)
      {
        case 0x520u:
          uint64_t v126 = *(void *)(a2 + 32);
          if (!*(unsigned char *)(v126 + 64) && (*(_WORD *)(*(void *)(v5 + 8) + 1020) & 1) != 0)
          {
            uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef((uint64_t)v6, *(_DWORD *)(v126 + 68));
            if (VRegDef)
            {
              uint64_t v128 = VRegDef;
              if (**(_WORD **)(VRegDef + 16) == 949)
              {
                uint64_t v129 = *(void *)(VRegDef + 32);
                if (*(unsigned char *)(v129 + 64) == 7 && !*(void *)(v129 + 112) && *(void *)(v129 + 144) == 0x100008000)
                {
                  uint64_t v130 = sub_1CB84B030((uint64_t)v3, a2, (unsigned __int8 **)(a2 + 56), *(void *)(v13 + 8) + 62928, *(_DWORD *)(v126 + 4));
                  int v132 = v131;
                  llvm::MachineInstr::addOperand(v131, v130, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 32));
                  llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)(*(void *)(v128 + 32) + 64));
                  llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 96));
                  llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 128));
                  llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 160));
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                }
              }
            }
          }
          return v3;
        case 0x521u:
        case 0x522u:
        case 0x523u:
        case 0x524u:
        case 0x52Du:
        case 0x530u:
          return v3;
        case 0x525u:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63504;
          goto LABEL_82;
        case 0x526u:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63552;
          goto LABEL_82;
        case 0x527u:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63600;
          goto LABEL_82;
        case 0x528u:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63648;
          goto LABEL_82;
        case 0x529u:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63696;
          goto LABEL_82;
        case 0x52Au:
          uint64_t v124 = *(void *)(v10 + 8);
          uint64_t v125 = 63744;
LABEL_82:
          *(void *)(a2 + 16) = v124 + v125;
          return v3;
        case 0x52Bu:
          if (!*(unsigned char *)(*v7 + 299)) {
            return v3;
          }
          uint64_t v133 = a2;
          unsigned int v134 = 0;
          goto LABEL_90;
        case 0x52Cu:
          if (!*(unsigned char *)(*v7 + 299)) {
            return v3;
          }
          uint64_t v133 = a2;
          unsigned int v134 = 1;
LABEL_90:
          unsigned int v139 = 0;
          goto LABEL_94;
        case 0x52Eu:
          if (!*(unsigned char *)(*v7 + 299)) {
            return v3;
          }
          uint64_t v133 = a2;
          unsigned int v134 = 0;
          goto LABEL_93;
        case 0x52Fu:
          if (!*(unsigned char *)(*v7 + 299)) {
            return v3;
          }
          uint64_t v133 = a2;
          unsigned int v134 = 1;
LABEL_93:
          unsigned int v139 = 1;
LABEL_94:
          sub_1CB8E7940(v133, v134, v139, v6, v13);
          break;
        default:
          if (*(unsigned char *)(*v7 + 294)) {
            sub_1CB8E5EB0((llvm::MachineInstr *)a2, (uint64_t)v3, v10, v6, *(unsigned char *)(*v7 + 298));
          }
          return v3;
      }
    }
  }
  return v3;
}

uint64_t *sub_1CD3E3318(uint64_t a1, uint64_t a2, void *a3, llvm *a4, uint64_t a5, int a6, const llvm::APInt *a7, uint64_t a8)
{
  int v12 = a3;
  uint64_t v13 = (uint64_t *)a2;
  uint64_t v85 = (uint64_t *)a2;
  int v86 = a3;
  if (!a6)
  {
    uint64_t v16 = (unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
    uint64_t v17 = *v16;
    if (v17 == 174 || v17 == a4 && ((_BYTE)a4 || *((void *)v16 + 1) == a5)) {
      return v13;
    }
    uint64_t v18 = *(llvm::APFloatBase **)(a8 + 16);
    uint64_t v19 = *((void *)v18 + 104);
    if (v19) {
      __int16 v20 = *(_WORD *)(v19 + 8);
    }
    else {
      __int16 v20 = 0;
    }
    return sub_1CD7F3564(v18, (const char *)0xD8, (uint64_t)a7, a4, a5, a2, a3, v20);
  }
  if ((_BYTE)a4)
  {
    if (a4 == 10)
    {
      unint64_t v40 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v49 = *((void *)v40 + 104);
      if (v49) {
        __int16 v43 = *(_WORD *)(v49 + 8);
      }
      else {
        __int16 v43 = 0;
      }
      uint64_t v50 = (uint64_t)a7;
      uint64_t v37 = 9;
      uint64_t v39 = 0;
      uint64_t v41 = a2;
LABEL_75:
      uint64_t v13 = sub_1CD7F3564(v40, (const char *)0xD8, v50, (llvm *)v37, v39, v41, v12, v43);
      uint64_t v85 = v13;
      LODWORD(v86) = v51;
      LODWORD(v12) = v51;
      goto LABEL_17;
    }
    if (((_BYTE)a4 - 120) < 0x20u
      || ((_BYTE)a4 - 2) < 6u
      || ((_BYTE)a4 - 15) < 0x3Cu)
    {
LABEL_55:
      BOOL v34 = *(llvm::IntegerType **)(*(void *)(a8 + 16) + 56);
      uint64_t v36 = sub_1CD3E3904((unsigned int *)&v85);
      if (v35 == 1)
      {
        uint64_t v84 = v36;
        uint64_t v36 = v84;
      }
      uint64_t v37 = sub_1CB8E40FC(v34, v36);
      uint64_t v39 = v38;
      unint64_t v40 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v41 = (uint64_t)v85;
      int v12 = v86;
      uint64_t v42 = *((void *)v40 + 104);
      if (v42) {
        __int16 v43 = *(_WORD *)(v42 + 8);
      }
      else {
        __int16 v43 = 0;
      }
      uint64_t v50 = (uint64_t)a7;
      goto LABEL_75;
    }
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v21 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v21 = *(_DWORD *)(a5 + 8);
    }
    if (v21 == 13) {
      goto LABEL_55;
    }
  }
LABEL_17:
  if (a6 != 1)
  {
    if (a6 == 2)
    {
      if (*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
        BOOL v44 = 0;
      }
      else {
        BOOL v44 = a4 == 6;
      }
      if (!v44)
      {
        uint64_t v29 = *(llvm::APFloatBase **)(a8 + 16);
        __int16 v31 = v86;
        uint64_t v45 = *((void *)v29 + 104);
        if (v45) {
          __int16 v33 = *(_WORD *)(v45 + 8);
        }
        else {
          __int16 v33 = 0;
        }
        uint64_t v64 = 198;
        goto LABEL_89;
      }
      uint64_t v52 = (uint64_t)v86;
      if (*(unsigned char *)(v13[5] + 16 * v12) != 5)
      {
        uint64_t v53 = *(llvm::APFloatBase **)(a8 + 16);
        uint64_t v54 = *((void *)v53 + 104);
        if (v54) {
          __int16 v55 = *(_WORD *)(v54 + 8);
        }
        else {
          __int16 v55 = 0;
        }
        uint64_t v13 = sub_1CD7F3564(v53, (const char *)0xC6, (uint64_t)a7, (llvm *)5, 0, (uint64_t)v13, v86, v55);
        uint64_t v85 = v13;
        LODWORD(v86) = v69;
        uint64_t v52 = (uint64_t)v86;
      }
      uint64_t v70 = *(void *)(a8 + 16);
      uint64_t v71 = sub_1CD7EBF14(v70, 31, a7, (llvm *)5, 0, 0, 0);
      uint64_t v74 = *(void *)(v70 + 832);
      if (v74) {
        LOWORD(v74) = *(_WORD *)(v74 + 8);
      }
      __int16 v77 = sub_1CCFDED5C(v70, 176, a7, (llvm *)5, 0, (uint64_t)v13, v52, v73, (uint64_t)v71, v72, v74);
      uint64_t v78 = *(void *)(a8 + 16);
      uint64_t v79 = *(void *)(v78 + 832);
      if (v79) {
        LOWORD(v79) = *(_WORD *)(v79 + 8);
      }
      return sub_1CCFDED5C(v78, 54, a7, (llvm *)6, 0, (uint64_t)v85, (uint64_t)v86, v76, (uint64_t)v77, v75, v79);
    }
    else
    {
      if (a6 != 3) {
        llvm::report_fatal_error((llvm *)"Unexpected ext type for load", (const llvm::Twine *)1);
      }
      uint64_t v29 = *(llvm::APFloatBase **)(a8 + 16);
      if (*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = a4 == 6;
      }
      if (!v30)
      {
        __int16 v31 = v86;
        uint64_t v32 = *((void *)v29 + 104);
        if (v32) {
          __int16 v33 = *(_WORD *)(v32 + 8);
        }
        else {
          __int16 v33 = 0;
        }
        uint64_t v64 = 199;
        goto LABEL_89;
      }
      unint64_t v57 = sub_1CD7EBF14((uint64_t)v29, 0, a7, (llvm *)5, 0, 0, 0);
      uint64_t v59 = v58;
      unsigned int v60 = v85;
      if (*(unsigned char *)(v85[5] + 16 * v86) != 5)
      {
        uint64_t v80 = *(llvm::APFloatBase **)(a8 + 16);
        uint64_t v81 = *((void *)v80 + 104);
        if (v81) {
          __int16 v82 = *(_WORD *)(v81 + 8);
        }
        else {
          __int16 v82 = 0;
        }
        unsigned int v60 = sub_1CD7F3564(v80, (const char *)0xC7, (uint64_t)a7, (llvm *)5, 0, (uint64_t)v85, v86, v82);
        uint64_t v85 = v60;
        LODWORD(v86) = v83;
      }
      uint64_t v61 = *(void *)(a8 + 16);
      uint64_t v62 = *(void *)(v61 + 832);
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      return sub_1CCFDED5C(v61, 54, a7, (llvm *)6, 0, (uint64_t)v60, (uint64_t)v86, v56, (uint64_t)v57, v59, v62);
    }
  }
  if (a4 == 10)
  {
    uint64_t v29 = *(llvm::APFloatBase **)(a8 + 16);
    __int16 v31 = v86;
    uint64_t v46 = *((void *)v29 + 104);
    if (v46) {
      __int16 v33 = *(_WORD *)(v46 + 8);
    }
    else {
      __int16 v33 = 0;
    }
    uint64_t v64 = 215;
    uint64_t v65 = (uint64_t)a7;
    uint64_t v66 = 10;
    uint64_t v67 = 0;
    goto LABEL_90;
  }
  unint64_t v22 = (unsigned __int8 *)(v13[5] + 16 * v12);
  int v23 = *v22;
  if (v23 != a4)
  {
    if ((_BYTE)a4)
    {
      if (((_BYTE)a4 - 120) >= 0x20u
        && ((_BYTE)a4 - 2) >= 6u
        && ((_BYTE)a4 - 15) >= 0x3Cu)
      {
        goto LABEL_37;
      }
      goto LABEL_67;
    }
LABEL_22:
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v25 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v25 = *(_DWORD *)(a5 + 8);
    }
    if (v25 != 13)
    {
      if (v23 != a4) {
        goto LABEL_42;
      }
      uint64_t v24 = *((void *)v22 + 1);
      goto LABEL_27;
    }
LABEL_67:
    uint64_t v29 = *(llvm::APFloatBase **)(a8 + 16);
    __int16 v31 = v86;
    uint64_t v47 = *((void *)v29 + 104);
    if (v47) {
      __int16 v33 = *(_WORD *)(v47 + 8);
    }
    else {
      __int16 v33 = 0;
    }
    uint64_t v64 = 200;
    goto LABEL_89;
  }
  uint64_t v24 = *((void *)v22 + 1);
  if (!(_BYTE)a4 && v24 != a5) {
    goto LABEL_22;
  }
LABEL_27:
  if (*v22) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = v24 == a5;
  }
  if (v26) {
    return v13;
  }
LABEL_37:
  if (!(_BYTE)a4)
  {
LABEL_42:
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      unsigned int v27 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      unsigned int v27 = *(_DWORD *)(a5 + 8);
    }
    if (v27 <= 6) {
      goto LABEL_69;
    }
    return v13;
  }
  if (((_BYTE)a4 + 104) < 0x13u
    || ((_BYTE)a4 - 8) < 7u
    || ((_BYTE)a4 - 75) < 0x2Du)
  {
LABEL_69:
    uint64_t v29 = *(llvm::APFloatBase **)(a8 + 16);
    __int16 v31 = v86;
    uint64_t v48 = *((void *)v29 + 104);
    if (v48) {
      __int16 v33 = *(_WORD *)(v48 + 8);
    }
    else {
      __int16 v33 = 0;
    }
    uint64_t v64 = 215;
LABEL_89:
    uint64_t v65 = (uint64_t)a7;
    uint64_t v66 = (uint64_t)a4;
    uint64_t v67 = a5;
LABEL_90:
    uint64_t v13 = sub_1CD7F3564(v29, (const char *)v64, v65, (llvm *)v66, v67, (uint64_t)v13, v31, v33);
    LODWORD(v86) = v68;
  }
  return v13;
}

llvm::Type *sub_1CD3E3904(unsigned int *a1)
{
  long long v2 = *(_OWORD *)(*(void *)(*(void *)a1 + 40) + 16 * a1[2]);
  if ((_BYTE)v2) {
    return (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v2);
  }
  else {
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v2);
  }
}

uint64_t sub_1CD3E3954(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v2 = 2;
  char v3 = v1 - 53;
  if ((v1 - 309) <= 0x3B)
  {
    if (((1 << v3) & 0xE00000000000001) != 0) {
      return *(void *)(a1 + 32) + 40 * v2;
    }
    if (((1 << v3) & 6) != 0)
    {
      unsigned int v2 = 3;
      return *(void *)(a1 + 32) + 40 * v2;
    }
  }
  if (v1 != 254) {
    unsigned int v2 = 1;
  }
  return *(void *)(a1 + 32) + 40 * v2;
}

uint64_t sub_1CD3E39B8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = *(unsigned __int16 *)(a2 + 24);
  uint64_t result = sub_1CB8F1EEC((uint64_t)&v38, a4[2], 0);
  unsigned int v15 = (uint64_t *)(a4 + 4);
  if (a4[6] >= 0x41)
  {
    uint64_t result = *v15;
    if (*v15) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  uint64_t v16 = v38;
  *((void *)a4 + 2) = v38;
  unsigned int v17 = DWORD2(v38);
  a4[6] = DWORD2(v38);
  DWORD2(v38) = 0;
  if (a4[2] > 0x40 || v17 > 0x40)
  {
    uint64_t result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)a4, (const llvm::APInt *)(a4 + 4));
    if (DWORD2(v38) >= 0x41)
    {
      uint64_t result = v38;
      if ((void)v38) {
        uint64_t result = MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(void *)a4 = v16;
    a4[2] = v17;
  }
  if (v12 == 437)
  {
    uint64_t v18 = *(uint64_t **)(a2 + 32);
    uint64_t v19 = v18[5];
    int v20 = *(unsigned __int16 *)(v19 + 24);
    if (v20 == 35 || v20 == 11)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = v18[1];
      uint64_t v24 = (void *)(*(void *)(*v18 + 40) + 16 * v23);
      uint64_t v25 = v24[1];
      *(void *)&long long v40 = *v24;
      *((void *)&v40 + 1) = v25;
      int v26 = v40;
      if ((_BYTE)v40)
      {
        if (v40 - 15 >= 0x9C)
        {
LABEL_20:
          if (v26)
          {
            if ((v26 - 15) < 0x9C) {
              return result;
            }
LABEL_31:
            long long v38 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
            if ((_BYTE)v38) {
              unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v38);
            }
            else {
              unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v38);
            }
            unsigned int v32 = ExtendedSizeInBits;
            if (v31 == 1) {
            uint64_t v33 = *(void *)(v19 + 80);
            }
            BOOL v34 = (void *)(v33 + 24);
            if (*(_DWORD *)(v33 + 32) >= 0x41u) {
              BOOL v34 = (void *)*v34;
            }
            int v35 = *(_DWORD *)v34;
            sub_1CD7F121C(a6, v22, v23, (a7 + 1), (uint64_t)&v38);
            sub_1CB8F02F4((uint64_t)&v38, v35 * v32, (uint64_t)&v36);
            if (a4[2] >= 0x41 && *(void *)a4) {
              MEMORY[0x1D25D9CB0](*(void *)a4, 0x1000C8000313F17);
            }
            *(void *)a4 = v36;
            a4[2] = v37;
            sub_1CB8F02F4((uint64_t)&v39, v35 * v32, (uint64_t)&v36);
            if (a4[6] >= 0x41 && *v15) {
              MEMORY[0x1D25D9CB0](*v15, 0x1000C8000313F17);
            }
            *((void *)a4 + 2) = v36;
            a4[6] = v37;
            llvm::APInt::trunc((uint64_t)a4, v32, (uint64_t)&v36);
            if (a4[2] >= 0x41 && *(void *)a4) {
              MEMORY[0x1D25D9CB0](*(void *)a4, 0x1000C8000313F17);
            }
            *(void *)a4 = v36;
            a4[2] = v37;
            llvm::APInt::trunc((uint64_t)(a4 + 4), v32, (uint64_t)&v36);
            if (a4[6] >= 0x41)
            {
              if (*v15) {
                MEMORY[0x1D25D9CB0](*v15, 0x1000C8000313F17);
              }
            }
            *((void *)a4 + 2) = v36;
            a4[6] = v37;
            return sub_1CB8F0DC4((uint64_t)&v38);
          }
          int v29 = *(_DWORD *)(*((void *)&v40 + 1) + 8) & 0xFE;
LABEL_29:
          if (v29 == 18) {
            return result;
          }
          goto LABEL_31;
        }
        uint64_t result = sub_1CB8C2FBC((unsigned __int8 *)&v40);
      }
      else
      {
        int v29 = *(_DWORD *)(v25 + 8) & 0xFE;
        if (v29 != 18) {
          goto LABEL_29;
        }
        uint64_t result = llvm::EVT::getEVT(*(llvm::EVT **)(v25 + 24), 0, v14);
      }
      if (result != 3 && *(_WORD *)(v22 + 24) == 216)
      {
        uint64_t v27 = *(void *)(v22 + 32);
        uint64_t v22 = *(void *)v27;
        uint64_t v28 = *(unsigned int *)(v27 + 8);
        unint64_t v23 = v23 & 0xFFFFFFFF00000000 | v28;
        long long v40 = *(_OWORD *)(*(void *)(v22 + 40) + 16 * v28);
      }
      int v26 = v40;
      goto LABEL_20;
    }
  }
  return result;
}

BOOL sub_1CD3E3D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  if ((_BYTE)a2)
  {
    if (a2 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  int v6 = a4;
  if ((_BYTE)a4)
  {
    if (a4 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  if ((_BYTE)a2)
  {
    if (a2 - 2 >= 6) {
      return 0;
    }
  }
  else
  {
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
      int v13 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
    }
    else {
      int v13 = *(_DWORD *)(a3 + 8);
    }
    if (v13 != 13) {
      return 0;
    }
  }
  if ((_BYTE)a4)
  {
    if (a4 - 2 >= 6) {
      return 0;
    }
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v14 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v14 = *(_DWORD *)(a5 + 8);
    }
    if (v14 != 13) {
      return 0;
    }
  }
  if ((_BYTE)a2) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v17);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  }
  unsigned int v9 = ExtendedSizeInBits;
  if (v8 == 1) {
  if (v6)
  }
    unsigned int v10 = sub_1CB87E200((unsigned __int8 *)v16);
  else {
    unsigned int v10 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  }
  if (v11 == 1)
  {
    unsigned int v15 = v10;
    unsigned int v10 = v15;
  }
  return v10 > 0xF && v9 > v10;
}

BOOL sub_1CD3E3EB0(int a1, llvm::Type *this, llvm::Type *a3)
{
  if (*((unsigned char *)this + 8) != 13 || *((unsigned char *)a3 + 8) != 13) {
    return 0;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if (v4 == 1) {
  unsigned int v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  }
  if (v6 == 1) {
  return v7 > 0xF && PrimitiveSizeInBits > v7;
  }
}

BOOL sub_1CD3E3F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  if ((_BYTE)a4)
  {
    if (a4 - 15 >= 0x9C) {
      goto LABEL_7;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5 || *(void *)(v5 + 32)) {
    return 0;
  }
LABEL_7:
  int v7 = *(_DWORD *)(*(void *)(a2 + 96) + 16);
  if (v7 != 64 && v7 != 3) {
    return 1;
  }
  unint64_t v9 = sub_1CB896FB8((unsigned __int8 *)v12);
  if (v10 == 1)
  {
    unint64_t v11 = v9;
    unint64_t v9 = v11;
  }
  return (v9 & 0x1FFFFFFFFFFFFFFELL) != 0;
}

BOOL sub_1CD3E3FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a4;
  v9[1] = a5;
  if ((_BYTE)a4) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v9);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  }
  if (v6 == 1)
  {
    unint64_t v8 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v8;
  }
  return ExtendedSizeInBits > 0x1F;
}

BOOL sub_1CD3E4054(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (!*a3) {
    goto LABEL_20;
  }
  int v4 = *(_DWORD *)(*(void *)v3 + 8);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
  }
  uint64_t v5 = 1;
  if ((v4 & 0xFFFFBF00) != 0 && (v4 & 0xFFFFFF00) != 0x300)
  {
LABEL_20:
    if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
    {
      if (v3) {
        BOOL v6 = *((unsigned char *)a3 + 16) == 0;
      }
      else {
        BOOL v6 = 1;
      }
      return v6 || a3[3] == 0;
    }
    else
    {
      return a3[3] == 0;
    }
  }
  return v5;
}

BOOL sub_1CD3E40D8(int a1, llvm::Type *this, llvm::Type *a3)
{
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  if (ScalarSizeInBits != 32 && ScalarSizeInBits != 16) {
    return 0;
  }
  int v5 = llvm::Type::getScalarSizeInBits(a3);
  return v5 == 32 || v5 == 64;
}

BOOL sub_1CD3E4130(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  return (a2 & 0xFE) == 4 && a4 - 5 < 2;
}

uint64_t sub_1CD3E4158(int a1, llvm::DataLayout *this, unsigned int a3)
{
  int v3 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(this, a3) + 4);
  if (v3 == 128) {
    int v4 = 7;
  }
  else {
    int v4 = 0;
  }
  if (v3 == 64) {
    int v5 = 6;
  }
  else {
    int v5 = v4;
  }
  if (v3 == 32) {
    unsigned int v6 = 5;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v3 == 16) {
    int v7 = 4;
  }
  else {
    int v7 = 0;
  }
  if (v3 == 8) {
    int v8 = 3;
  }
  else {
    int v8 = v7;
  }
  if (v3 == 1) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v3 <= 31) {
    return v9;
  }
  else {
    return v6;
  }
}

uint64_t sub_1CD3E41CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, a2, 0);
}

uint64_t sub_1CD3E41F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3E41FC()
{
  return 5;
}

uint64_t sub_1CD3E4204()
{
  return 5;
}

uint64_t sub_1CD3E420C()
{
  return 1;
}

uint64_t sub_1CD3E4214()
{
  return 1;
}

uint64_t sub_1CD3E421C()
{
  return 0;
}

BOOL sub_1CD3E4224(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return a4 < 3;
}

uint64_t sub_1CD3E4230()
{
  return 0;
}

uint64_t sub_1CD3E4238()
{
  return 1;
}

uint64_t sub_1CD3E4240()
{
  return 0;
}

uint64_t sub_1CD3E4248(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 1;
  if (a2 && (_BYTE)a4)
  {
    if (*(unsigned char *)(a1 + 390 * a2 + 4115) == 1 && sub_1CD3E5538(a1, 0xFDu, a2) == a4)
    {
      return 0;
    }
    else
    {
      char v13 = 0;
      LODWORD(result) = llvm::TargetLoweringBase::allowsMemoryAccess(a1, *(void *)(a6 + 56), *(void *)(**(void **)(a6 + 40) + 40) + 272, a4, a5, a7, (uint64_t)&v13);
      if (v13) {
        return result;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CD3E4318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t sub_1CD3E433C()
{
  return 0;
}

uint64_t sub_1CD3E4344()
{
  return 1;
}

uint64_t sub_1CD3E434C()
{
  return 1;
}

uint64_t sub_1CD3E4354()
{
  return 0;
}

uint64_t sub_1CD3E435C()
{
  return 1;
}

uint64_t sub_1CD3E4364()
{
  return 0;
}

uint64_t sub_1CD3E436C()
{
  return 0;
}

uint64_t sub_1CD3E4374(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  if (a2 > 31)
  {
    switch(a2)
    {
      case 32:
        LODWORD(v2) = 5;
        break;
      case 64:
        LODWORD(v2) = 6;
        break;
      case 128:
        LODWORD(v2) = 7;
        break;
      default:
        return v2;
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        LODWORD(v2) = 2;
        break;
      case 8:
        LODWORD(v2) = 3;
        break;
      case 16:
        LODWORD(v2) = 4;
        break;
      default:
        return v2;
    }
  }
  if (*(void *)(a1 + 8 * v2 + 96)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD3E43F4()
{
  return 0;
}

uint64_t sub_1CD3E43FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
}

uint64_t sub_1CD3E4428()
{
  return 0;
}

uint64_t sub_1CD3E4430()
{
  return 0;
}

uint64_t sub_1CD3E4438()
{
  return 1;
}

uint64_t sub_1CD3E4440()
{
  return 0;
}

BOOL sub_1CD3E4448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a2, a3, a6, a7))
  {
    if (a8 == 175)
    {
      uint64_t v12 = *(void *)(a5 + 80);
      char v13 = (llvm::APInt *)(v12 + 24);
      unsigned int v14 = *(_DWORD *)(v12 + 32);
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) == v14 - 1) {
          return 0;
        }
      }
      else if (*(void *)v13 == 1)
      {
        return 0;
      }
    }
    if (a4 && a9 == 175)
    {
      uint64_t v16 = *(void *)(a4 + 80);
      unsigned int v17 = (llvm::APInt *)(v16 + 24);
      unsigned int v18 = *(_DWORD *)(v16 + 32);
      if (v18 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v17) == v18 - 1) {
          return 1;
        }
      }
      else if (*(void *)v17 == 1)
      {
        return 1;
      }
    }
  }
  return a4 == 0;
}

uint64_t sub_1CD3E4540()
{
  return 1;
}

uint64_t sub_1CD3E4548()
{
  return 0;
}

uint64_t sub_1CD3E4550()
{
  return 0;
}

uint64_t sub_1CD3E4558()
{
  return 0;
}

uint64_t sub_1CD3E4560()
{
  return 0;
}

uint64_t sub_1CD3E4568()
{
  return 0;
}

uint64_t sub_1CD3E4570(uint64_t a1, unsigned __int8 a2)
{
  return *(void *)(a1 + 8 * a2 + 2072);
}

uint64_t sub_1CD3E457C(uint64_t a1, unsigned __int8 a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 3504);
}

uint64_t sub_1CD3E4588()
{
  return 1;
}

uint64_t sub_1CD3E4590(unint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned int *a7, unsigned __int8 *a8)
{
  return llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a4, a5, a6, a7, a8);
}

uint64_t sub_1CD3E45A8()
{
  return 1;
}

uint64_t sub_1CD3E45B0()
{
  return 0;
}

uint64_t sub_1CD3E45B8()
{
  return 0;
}

uint64_t sub_1CD3E45C0()
{
  return 0;
}

uint64_t sub_1CD3E45C8()
{
  return 0;
}

uint64_t sub_1CD3E45D0()
{
  return 0;
}

uint64_t sub_1CD3E45DC(int a1, llvm::Type *a2, llvm::DataLayout *this)
{
  return llvm::DataLayout::getABITypeAlign(this, a2);
}

uint64_t sub_1CD3E45E4()
{
  return 1;
}

uint64_t sub_1CD3E45EC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, a2, 0);
  uint64_t result = sub_1CB87E200(&v5);
  if (v3 == 1)
  {
    uint64_t v4 = result;
    return v4;
  }
  return result;
}

uint64_t sub_1CD3E4660(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184268);
}

BOOL sub_1CD3E4670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unsigned char *a7)
{
  if ((a5 & 0xFE) != 0 && a7) {
    *a7 = 1;
  }
  return (a5 & 0xFE) != 0;
}

uint64_t sub_1CD3E4690()
{
  return 0;
}

uint64_t sub_1CD3E4698()
{
  return 1;
}

uint64_t sub_1CD3E46A4()
{
  return 0;
}

uint64_t sub_1CD3E46AC()
{
  return 1;
}

uint64_t sub_1CD3E46B4()
{
  return 0;
}

uint64_t sub_1CD3E46BC()
{
  return 0;
}

void sub_1CD3E46C4()
{
}

uint64_t sub_1CD3E46E0()
{
  return 0;
}

uint64_t sub_1CD3E46E8()
{
  return 0;
}

uint64_t sub_1CD3E46F0()
{
  return 0;
}

uint64_t sub_1CD3E46F8()
{
  return 0;
}

uint64_t sub_1CD3E4700()
{
  return 0;
}

const char *sub_1CD3E4708()
{
  return "";
}

uint64_t sub_1CD3E4718()
{
  return 0;
}

uint64_t sub_1CD3E4738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_1CD3E4740()
{
  return 1;
}

uint64_t sub_1CD3E4748()
{
  return 0;
}

uint64_t sub_1CD3E4750()
{
  return 0;
}

uint64_t sub_1CD3E4758()
{
  return 0;
}

uint64_t sub_1CD3E4760(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 18) >> 4) - 11 >= 2) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t sub_1CD3E477C()
{
  return 0;
}

uint64_t sub_1CD3E4784()
{
  return 199;
}

uint64_t sub_1CD3E478C()
{
  return 200;
}

BOOL sub_1CD3E4794(uint64_t a1, uint64_t a2, char a3)
{
  return a3 == 9;
}

uint64_t sub_1CD3E47A4()
{
  return 0;
}

uint64_t sub_1CD3E47AC()
{
  return 0;
}

uint64_t sub_1CD3E47B4()
{
  return 0;
}

uint64_t sub_1CD3E47BC()
{
  return 1;
}

uint64_t sub_1CD3E47C4()
{
  return 0;
}

uint64_t sub_1CD3E47CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1064))(a1, a2, a3, a4, a5, 0)- 1;
}

uint64_t sub_1CD3E481C()
{
  return 1;
}

uint64_t sub_1CD3E4824()
{
  return 1;
}

BOOL sub_1CD3E482C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_1CD3E4838()
{
  return 0;
}

BOOL sub_1CD3E4840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 >= 7 && v3 != 13) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a3 + 8);
  return v5 == 13 || v5 < 7;
}

BOOL sub_1CD3E486C(uint64_t a1, int a2)
{
  BOOL result = 1;
  if (((a2 - 159) > 0xE || ((1 << (a2 + 97)) & 0x7F3F) == 0)
    && ((a2 - 56) > 0x2A || ((1 << (a2 - 56)) & 0x5000C305185) == 0))
  {
    return (a2 - 246) < 6;
  }
  return result;
}

BOOL sub_1CD3E48C8(uint64_t a1, int a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1128))(a1)) {
    return 1;
  }
  BOOL result = 1;
  if ((a2 - 57) > 0x2B || ((1 << (a2 - 57)) & 0xD001800003DLL) == 0) {
    return (a2 - 175) < 5;
  }
  return result;
}

uint64_t sub_1CD3E4958()
{
  return 0;
}

uint64_t sub_1CD3E4960(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, llvm::LLVMContext *a5)
{
  unint64_t ApproximateEVTForLLT = llvm::getApproximateEVTForLLT(a2, a4, a5);
  uint64_t v11 = v10;
  unint64_t v13 = llvm::getApproximateEVTForLLT(a3, a4, a5);
  unsigned int v14 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)a1 + 1160);

  return v14(a1, ApproximateEVTForLLT, v11, v13, v12);
}

uint64_t sub_1CD3E4A1C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, llvm::LLVMContext *a5)
{
  unint64_t ApproximateEVTForLLT = llvm::getApproximateEVTForLLT(a2, a4, a5);
  uint64_t v11 = v10;
  unint64_t v13 = llvm::getApproximateEVTForLLT(a3, a4, a5);
  unsigned int v14 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)a1 + 1192);

  return v14(a1, ApproximateEVTForLLT, v11, v13, v12);
}

uint64_t sub_1CD3E4AD8()
{
  return 0;
}

uint64_t sub_1CD3E4AE0()
{
  return 0;
}

uint64_t sub_1CD3E4AE8()
{
  return 0;
}

uint64_t sub_1CD3E4AF0()
{
  return 2;
}

uint64_t sub_1CD3E4AF8()
{
  return 0;
}

uint64_t sub_1CD3E4B00()
{
  return 0;
}

uint64_t sub_1CD3E4B08(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = (void *)(*(void *)(a2 + 40) + 16 * a3);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 1192))(a1, *v3, v3[1]);
}

uint64_t sub_1CD3E4B40()
{
  return 0;
}

uint64_t sub_1CD3E4B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1288))(a1, a4, a5, a6, a7);
}

uint64_t sub_1CD3E4B84()
{
  return 0;
}

uint64_t sub_1CD3E4B8C()
{
  return 1;
}

uint64_t sub_1CD3E4B94()
{
  return 1;
}

uint64_t sub_1CD3E4B9C()
{
  return 1;
}

uint64_t sub_1CD3E4BA4()
{
  return 0;
}

uint64_t sub_1CD3E4BAC()
{
  return 0;
}

BOOL sub_1CD3E4BB4(void *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = (unsigned __int8 *)a1 + 7539;
  int v4 = (unsigned __int16)(a3 >> 3);
  int v5 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0) {
    int v5 = a3 >> 19;
  }
  if ((a3 & 4) != 0) {
    int v4 = v5;
  }
  if (a3) {
    int v4 = a3 >> 3;
  }
  if (v4 == 64)
  {
    if (a1[23])
    {
      unsigned int v3 = (unsigned __int8 *)a1 + 8319;
      return *v3 == 0;
    }
  }
  else
  {
    if (v4 != 32)
    {
      if (v4 != 16 || !a1[21]) {
        return 0;
      }
      return *v3 == 0;
    }
    if (a1[22])
    {
      unsigned int v3 = (unsigned __int8 *)a1 + 7929;
      return *v3 == 0;
    }
  }
  return 0;
}

uint64_t sub_1CD3E4C3C()
{
  return 0;
}

uint64_t sub_1CD3E4C44()
{
  return 0;
}

uint64_t sub_1CD3E4C4C()
{
  return 0;
}

uint64_t sub_1CD3E4C54()
{
  return 0;
}

uint64_t sub_1CD3E4C5C()
{
  return 0;
}

uint64_t sub_1CD3E4C64()
{
  return 0;
}

uint64_t sub_1CD3E4C6C()
{
  return 0;
}

uint64_t sub_1CD3E4C74()
{
  return 0;
}

uint64_t sub_1CD3E4C7C()
{
  return 0;
}

uint64_t sub_1CD3E4C84()
{
  return 0;
}

BOOL sub_1CD3E4C8C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!a5 || a5 != 1 && !*(void *)(a1 + 8 * a5 + 96)) {
    return 0;
  }
  if (a2 > 0x185) {
    return 1;
  }
  return (*(unsigned char *)(a1 + 390 * a5 + a2 + 3862) & 0xFB) == 0;
}

uint64_t sub_1CD3E4CE4()
{
  return 0;
}

uint64_t sub_1CD3E4CEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 48);
  if (v4)
  {
    int v5 = 1;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == a4)
      {
        if (!v5)
        {
          unsigned int v6 = 0;
          goto LABEL_10;
        }
        --v5;
      }
      uint64_t v4 = *(void *)(v4 + 32);
      if (!v4) {
        goto LABEL_9;
      }
    }
  }
  int v5 = 1;
LABEL_9:
  unsigned int v6 = 1;
LABEL_10:
  if (v5) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t sub_1CD3E4D34()
{
  return 0;
}

uint64_t sub_1CD3E4D3C()
{
  return 0;
}

uint64_t sub_1CD3E4D44()
{
  return 0;
}

uint64_t sub_1CD3E4D4C()
{
  return 0;
}

uint64_t sub_1CD3E4D58()
{
  return 1;
}

uint64_t sub_1CD3E4D60()
{
  return 0;
}

uint64_t sub_1CD3E4D68()
{
  return 1;
}

uint64_t sub_1CD3E4D70(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3E4D7C()
{
  return 1;
}

BOOL sub_1CD3E4D84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 && *(void *)(a1 + 8 * a3 + 96) != 0;
}

uint64_t sub_1CD3E4DA8()
{
  return 0;
}

uint64_t sub_1CD3E4DB0()
{
  return 0;
}

uint64_t sub_1CD3E4DB8()
{
  return 0;
}

uint64_t sub_1CD3E4DC0()
{
  return 0;
}

uint64_t sub_1CD3E4DD0()
{
  return 0;
}

uint64_t sub_1CD3E4DD8()
{
  return 0;
}

uint64_t sub_1CD3E4DE8()
{
  return 1;
}

uint64_t sub_1CD3E4DF0()
{
  return 0;
}

const char *sub_1CD3E4DF8()
{
  return "__clear_cache";
}

void sub_1CD3E4E04()
{
}

uint64_t sub_1CD3E4E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a3;
  v7[1] = a4;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 1891);
  if (v4 == a3 && (*(unsigned char *)(a1 + 1891) || a4 == 0)) {
    return a3;
  }
  if (!sub_1CB8F2034((unsigned __int8 *)v7, v4, 0)) {
    return v7[0];
  }
  return v4;
}

BOOL sub_1CD3E4E8C(uint64_t a1, unsigned char *a2)
{
  return *a2 == 0;
}

uint64_t sub_1CD3E4E9C()
{
  return 0;
}

uint64_t sub_1CD3E4EA4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3E4EB0()
{
  return 0;
}

uint64_t sub_1CD3E4EB8()
{
  return 0;
}

void sub_1CD3E4EC0()
{
}

uint64_t sub_1CD3E4ECC()
{
  return 0;
}

uint64_t sub_1CD3E4ED4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3 != 1) {
    return 0;
  }
  int v3 = *a2;
  if (v3 == 88) {
    return 18;
  }
  if (v3 == 112) {
    int v4 = 22;
  }
  else {
    int v4 = 0;
  }
  if (v3 == 111) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v3 == 109) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t sub_1CD3E4F20()
{
  return 0;
}

uint64_t sub_1CD3E4F28()
{
  return 0;
}

uint64_t sub_1CD3E4F34()
{
  return 0;
}

uint64_t *sub_1CD3E4F40(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a3;
  int v7 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v10 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v10, v7, 2);
  }
  int v11 = *(_DWORD *)(a2 + 60);
  int v8 = sub_1CD7ECDC4(a4, (uint64_t)&v10, *(void *)(*(void *)(a2 + 40) + 16 * v6), *(void *)(*(void *)(a2 + 40) + 16 * v6 + 8), 0, 0.0);
  if (v10) {
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  }
  return v8;
}

uint64_t sub_1CD3E4FD8()
{
  return 0;
}

uint64_t *sub_1CD3E4FE4(uint64_t a1, const llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a7 + 832);
  if (v8) {
    LOWORD(v8) = *(_WORD *)(v8 + 8);
  }
  return sub_1CCFDED5C(a7, 257, a2, (llvm *)1, 0, a3, a4, a8, a5, a6, v8);
}

uint64_t sub_1CD3E5038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v6 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)v13, (llvm *)5, 0, 1, 0);
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v8 = (uint64_t **)(*(void *)a2 + 16 * v7);
  *uint64_t v8 = v6;
  v8[1] = v5;
  ++*(_DWORD *)(a2 + 8);
  if (v13[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v13, v13[0]);
  }
  uint64_t result = sub_1CD7EEB94(a3, 0, (llvm *)5, 0);
  unsigned int v11 = *(_DWORD *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v12 = (uint64_t *)(*(void *)a2 + 16 * v11);
  *uint64_t v12 = result;
  v12[1] = v10;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1CD3E5144(uint64_t result, int a2, uint64_t a3)
{
  *(void *)(result + 32) = a3;
  switch(a2)
  {
    case 1861:
    case 1873:
      *(_OWORD *)uint64_t result = xmmword_1CD935F80;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1861;
      *(unsigned char *)(result + 24) = a2 != 1861;
      int v4 = 3766;
      int v5 = 288;
      break;
    case 1862:
    case 1874:
      *(_OWORD *)uint64_t result = xmmword_1CD935F50;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1862;
      *(unsigned char *)(result + 24) = a2 != 1862;
      int v4 = 3755;
      int v5 = 277;
      break;
    case 1863:
    case 1875:
      *(_OWORD *)uint64_t result = xmmword_1CD935F40;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1863;
      *(unsigned char *)(result + 24) = a2 != 1863;
      int v4 = 3767;
      int v5 = 289;
      break;
    case 1864:
    case 1876:
      *(_OWORD *)uint64_t result = xmmword_1CD935F30;
      *(_DWORD *)(result + 16) = 1;
      BOOL v3 = a2 == 1864;
      *(unsigned char *)(result + 24) = a2 != 1864;
      int v4 = 3752;
      int v5 = 274;
      break;
    case 1865:
    case 1877:
      *(_OWORD *)uint64_t result = xmmword_1CD935F20;
      *(_DWORD *)(result + 16) = 1;
      BOOL v3 = a2 == 1865;
      *(unsigned char *)(result + 24) = a2 != 1865;
      int v4 = 3764;
      int v5 = 286;
      break;
    case 1866:
    case 1878:
      *(_OWORD *)uint64_t result = xmmword_1CD935F50;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1866;
      *(unsigned char *)(result + 24) = a2 != 1866;
      int v4 = 3751;
      int v5 = 273;
      break;
    case 1867:
    case 1879:
      *(_OWORD *)uint64_t result = xmmword_1CD935F40;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1867;
      *(unsigned char *)(result + 24) = a2 != 1867;
      int v4 = 3763;
      int v5 = 285;
      break;
    case 1868:
    case 1880:
      *(_OWORD *)uint64_t result = xmmword_1CD935F70;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1868;
      *(unsigned char *)(result + 24) = a2 != 1868;
      int v4 = 3756;
      int v5 = 278;
      break;
    case 1869:
    case 1881:
      *(_OWORD *)uint64_t result = xmmword_1CD935F60;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1869;
      *(unsigned char *)(result + 24) = a2 != 1869;
      int v4 = 3768;
      int v5 = 290;
      break;
    case 1870:
    case 1882:
      *(_OWORD *)uint64_t result = xmmword_1CD935F10;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1870;
      *(unsigned char *)(result + 24) = a2 != 1870;
      int v4 = 3753;
      int v5 = 275;
      break;
    case 1871:
    case 1883:
      *(_OWORD *)uint64_t result = xmmword_1CD935F00;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1871;
      *(unsigned char *)(result + 24) = a2 != 1871;
      int v4 = 3765;
      int v5 = 287;
      break;
    default:
      *(_OWORD *)uint64_t result = xmmword_1CD935F90;
      *(_DWORD *)(result + 16) = 0;
      BOOL v3 = a2 == 1860;
      *(unsigned char *)(result + 24) = a2 != 1860;
      int v4 = 3754;
      int v5 = 276;
      break;
  }
  if (!v3) {
    int v4 = v5;
  }
  *(_DWORD *)(result + 20) = v4;
  return result;
}

uint64_t *sub_1CD3E535C(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = *((unsigned int *)result + 2);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *((unsigned int *)result + 2);
  }
  if (v5)
  {
    uint64_t v6 = *result;
    do
    {
      *(void *)uint64_t v6 = a3;
      *(_DWORD *)(v6 + 8) = a4;
      v6 += 16;
      --v5;
    }
    while (v5);
    unint64_t v4 = *((unsigned int *)result + 2);
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v8 = (void *)(*result + 16 * v4);
    do
    {
      *uint64_t v8 = a3;
      v8[1] = a4;
      v8 += 2;
    }
    while (!__CFADD__(v7++, 1));
  }
  *((_DWORD *)result + 2) = a2;
  return result;
}

uint64_t *sub_1CD3E5420(void *a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = sub_1CD7F95FC((uint64_t)a1, 1, 0, 172, 0);
  uint64_t v18 = v17;
  uint64_t v27 = a2;
  int v28 = a3;
  uint64_t v19 = *(void *)(a6 + 40) + 16 * a7;
  uint64_t v20 = sub_1CD7EEB94((uint64_t)a1, a5, *(llvm **)v19, *(void *)(v19 + 8));
  __int16 v21 = 0;
  uint64_t v29 = v20;
  uint64_t v30 = v22;
  uint64_t v31 = a6;
  unsigned int v32 = a7;
  uint64_t v33 = a9;
  int v34 = a10;
  uint64_t v23 = a1[104];
  if (v23) {
    __int16 v21 = *(_WORD *)(v23 + 8);
  }
  if (a9) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = 3;
  }
  return sub_1CD7FF854(a1, (const char *)0x31, a4, v16, v18, &v27, v24, v21);
}

uint64_t sub_1CD3E5538(uint64_t result, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3 = result;
  LOBYTE(result) = a3;
  unint64_t v4 = *(uint64_t **)(v3 + 174032);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(v3 + 174032);
    do
    {
      unsigned int v6 = *((_DWORD *)v4 + 7);
      if (v6 >= a2)
      {
        if (v6 <= a2)
        {
          if (*((unsigned __int8 *)v4 + 32) < a3) {
            ++v4;
          }
          else {
            unint64_t v5 = v4;
          }
        }
        else
        {
          unint64_t v5 = v4;
        }
      }
      else
      {
        ++v4;
      }
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v5 != (uint64_t *)(v3 + 174032))
    {
      unsigned int v7 = *((_DWORD *)v5 + 7);
      if (v7 <= a2 && (v7 < a2 || *((unsigned __int8 *)v5 + 32) <= a3)) {
        return *((unsigned __int8 *)v5 + 36);
      }
    }
  }
  do
  {
    do
      uint64_t result = result + 1;
    while ((result & 0x100) != 0);
  }
  while (!*(void *)(v3 + 8 * result + 96)
       || a2 <= 0x185 && *(unsigned char *)(v3 + 390 * result + a2 + 3862) == 1);
  return result;
}

uint64_t sub_1CD3E560C(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3) + v4 > *(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    unint64_t v5 = (_OWORD *)(*(void *)result + 16 * v4);
    do
    {
      long long v6 = *(_OWORD *)v3;
      v3 += 40;
      *v5++ = v6;
    }
    while (v3 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 - 858993459 * ((a3 - a2) >> 3);
  return result;
}

uint64_t sub_1CD3E56A0(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 4) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    unint64_t v5 = (_OWORD *)(*(void *)result + 16 * v4);
    do
    {
      long long v6 = *(_OWORD *)v3;
      v3 += 16;
      *v5++ = v6;
    }
    while (v3 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 4);
  return result;
}

uint64_t *sub_1CD3E5728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v64 = *(llvm **)v6;
  uint64_t v65 = *(void *)(v6 + 8);
  unsigned int v61 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  unsigned int v9 = *(llvm **)(a2 + 80);
  unint64_t v10 = sub_1CB8F20C0(v7);
  unsigned int v11 = *(long long **)(a2 + 32);
  uint64_t v13 = *((void *)v11 + 5);
  unint64_t v12 = *((void *)v11 + 6);
  long long v63 = *v11;
  unsigned int v14 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v79 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v79, v14, 2);
  }
  int v80 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v16 = *(void **)(v13 + 64);
  uint64_t v81 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v81, (unsigned __int8 *)v16, 2);
  }
  LODWORD(v82) = *(_DWORD *)(v13 + 60);
  uint64_t v17 = *((void *)v15 + 104);
  if (v17) {
    __int16 v18 = *(_WORD *)(v17 + 8);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t v19 = sub_1CD7F3564(v15, (const char *)0xC9, (uint64_t)&v81, (llvm *)5, 0, v13, (void *)v12, v18);
  unint64_t v21 = v12 & 0xFFFFFFFF00000000 | v20;
  if (v81) {
    llvm::MetadataTracking::untrack((uint64_t)&v81, (unsigned __int8 *)v81);
  }
  uint64_t v84 = (uint64_t *)&v86;
  long long v86 = v63;
  int v87 = v19;
  unint64_t v88 = v21;
  uint64_t v85 = 0x800000002;
  LOBYTE(v68) = 0;
  uint64_t v69 = 0;
  LOBYTE(v70) = 0;
  uint64_t v71 = 0;
  int v72 = -1;
  LOBYTE(v73) = 0;
  uint64_t v74 = 0;
  unsigned int v75 = -1;
  LOBYTE(v76) = 0;
  uint64_t v77 = 0;
  uint64_t v78 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v23 = sub_1CB8F2578(v10);
  sub_1CB8F2120(v5, (uint64_t)&v68, AddrSpace, v23, (uint64_t)v9, v8, (uint64_t)&unk_1EBCBD510);
  uint64_t v24 = sub_1CD7F95FC(*(void *)(a3 + 16), v68, v69, v70, v71);
  int v28 = sub_1CD7F9CC8(*(void *)(a3 + 16), v72, (uint64_t)&v79, v24, v25, v84, v85, v26, (uint64_t)v9, v8, v7);
  int v29 = v27;
  if (v10 < 5)
  {
    __int16 v32 = 0;
    uint64_t v33 = *(llvm::APFloatBase **)(a3 + 16);
    if (v9 == 2) {
      uint64_t v34 = 2;
    }
    else {
      uint64_t v34 = (uint64_t)v73;
    }
    if (v9 == 2) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = v74;
    }
    uint64_t v36 = *((void *)v33 + 104);
    if (v36) {
      __int16 v32 = *(_WORD *)(v36 + 8);
    }
    long long v38 = sub_1CD7F3564(v33, (const char *)0xC9, (uint64_t)&v79, (llvm *)v34, v35, (uint64_t)v28, (void *)v27, v32);
    uint64_t v39 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v40 = *((void *)v39 + 104);
    if (v40) {
      __int16 v41 = *(_WORD *)(v40 + 8);
    }
    else {
      __int16 v41 = 0;
    }
    uint64_t v46 = sub_1CD7F3564(v39, (const char *)0xD8, (uint64_t)&v79, v9, v8, (uint64_t)v38, (void *)v37, v41);
    unint64_t v48 = v47;
    uint64_t v66 = v79;
    if (v79) {
      llvm::MetadataTracking::track((uint64_t)&v66, v79, 2);
    }
    int v67 = v80;
    uint64_t v50 = sub_1CD3E3318(a1, (uint64_t)v46, (void *)v48, v64, v65, (v61 >> 10) & 3, (const llvm::APInt *)&v66, a3);
    int v52 = v51;
    if (v66) {
      llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
    }
  }
  else
  {
    uint64_t v81 = v83;
    uint64_t v82 = 0x1000000000;
    if (v75)
    {
      for (unsigned int i = 0; i < v75; ++i)
      {
        BOOL v44 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v78), (const llvm::APInt *)&v79, v73, v74, (uint64_t)v28, v29);
        if (v82 >= (unint64_t)HIDWORD(v82)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v45 = (uint64_t **)((char *)v81 + 16 * v82);
        *uint64_t v45 = v44;
        v45[1] = v43;
        uint64_t v30 = (v82 + 1);
        LODWORD(v82) = v82 + 1;
      }
      uint64_t v31 = (uint64_t *)v81;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (uint64_t *)v83;
    }
    uint64_t v54 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v79, v76, v77, v31, v30);
    __int16 v55 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v56 = *((void *)v55 + 104);
    if (v56) {
      __int16 v57 = *(_WORD *)(v56 + 8);
    }
    else {
      __int16 v57 = 0;
    }
    uint64_t v50 = sub_1CD7F3564(v55, (const char *)0xD8, (uint64_t)&v79, v64, v65, (uint64_t)v54, (void *)v53, v57);
    int v52 = v58;
    if (v81 != v83) {
      free(v81);
    }
  }
  uint64_t v59 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v79, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v50, v52, v49, (uint64_t)v28, 1);
  if (v84 != (uint64_t *)&v86) {
    free(v84);
  }
  if (v79) {
    llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
  }
  return v59;
}

uint64_t *sub_1CD3E5B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v127[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v101 = *(llvm **)v6;
  unsigned int v95 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v97 = *(void *)(a2 + 80);
  uint64_t v98 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v96 = *(void *)(a2 + 88);
  unint64_t v8 = sub_1CB8F20C0(*(void *)(a2 + 96));
  unsigned int v9 = *(long long **)(a2 + 32);
  uint64_t v10 = *((void *)v9 + 5);
  uint64_t v11 = *((void *)v9 + 6);
  long long v94 = *v9;
  unint64_t v12 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v120 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v120, v12, 2);
  }
  unint64_t v99 = v8;
  int v121 = *(_DWORD *)(a2 + 60);
  uint64_t v13 = *(void *)(a3 + 16);
  unsigned int v14 = sub_1CD7EBF14(v13, 0, (const llvm::APInt *)&v120, (llvm *)5, 0, 0, 0);
  __int16 v17 = 0;
  uint64_t v18 = *(void *)(v13 + 832);
  if (v18) {
    __int16 v17 = *(_WORD *)(v18 + 8);
  }
  uint64_t v19 = sub_1CCFDED5C(v13, 53, (const llvm::APInt *)&v120, (llvm *)5, 0, v10, v11, v16, (uint64_t)v14, v15, v17);
  int v21 = v20;
  uint64_t v22 = *(void *)(a3 + 16);
  unsigned int v23 = sub_1CD7EBF14(v22, 1, (const llvm::APInt *)&v120, (llvm *)5, 0, 0, 0);
  __int16 v26 = 0;
  uint64_t v27 = *(void *)(v22 + 832);
  if (v27) {
    __int16 v26 = *(_WORD *)(v27 + 8);
  }
  int v28 = sub_1CCFDED5C(v22, 53, (const llvm::APInt *)&v120, (llvm *)5, 0, v10, v11, v25, (uint64_t)v23, v24, v26);
  int v30 = v29;
  uint64_t v31 = *(void *)(a3 + 16);
  uint64_t v118 = v120;
  if (v120) {
    llvm::MetadataTracking::track((uint64_t)&v118, v120, 2);
  }
  uint64_t v100 = v7;
  int v119 = v121;
  __int16 v32 = sub_1CD3D9E40(a1, (uint64_t)v19, v21, (uint64_t)v28, v30, v31, (uint64_t)&v118);
  uint64_t v93 = v33;
  if (v118) {
    llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
  }
  uint64_t v34 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v120, (llvm *)5, 0, 1, 0);
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)(a3 + 16);
  long long v38 = *(uint64_t **)(v37 + 40);
  uint64_t v39 = *(void *)(a1 + 184296);
  uint64_t v40 = *v38;
  LODWORD(v122) = 0;
  if (sub_1CD3CA314(v39, v40, "LoadCMode", &v122)) {
    uint64_t v41 = v122;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = sub_1CD7EBF14(v37, v41, (const llvm::APInt *)&v120, (llvm *)5, 0, 1, 0);
  uint64_t v44 = v43;
  uint64_t v102 = a1;
  uint64_t v45 = *(void *)(a3 + 16);
  uint64_t v46 = *(void *)(v102 + 184296);
  uint64_t v47 = *v38;
  LODWORD(v122) = 0;
  if (sub_1CD3CA314(v46, v47, "LoadSLCMode", &v122)) {
    uint64_t v48 = v122;
  }
  else {
    uint64_t v48 = 1;
  }
  uint64_t v49 = sub_1CD7EBF14(v45, v48, (const llvm::APInt *)&v120, (llvm *)5, 0, 1, 0);
  uint64_t v125 = v127;
  v127[0] = v32;
  v127[1] = v93;
  v127[2] = v42;
  v127[3] = v44;
  v127[4] = v49;
  v127[5] = v50;
  uint64_t v51 = *(void *)(a3 + 16);
  v127[6] = v34;
  v127[7] = v36;
  uint64_t v126 = 0x800000004;
  sub_1CD3E5038(v102, (uint64_t)&v125, v51);
  if (v126 >= HIDWORD(v126)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v125[2 * v126] = v94;
  int v52 = (v95 >> 10) & 3;
  LODWORD(v126) = v126 + 1;
  LOBYTE(v107) = 0;
  uint64_t v108 = 0;
  LOBYTE(v109) = 0;
  uint64_t v110 = 0;
  int v111 = -1;
  LOBYTE(v112) = 0;
  uint64_t v113 = 0;
  unsigned int v114 = -1;
  LOBYTE(v115) = 0;
  uint64_t v116 = 0;
  uint64_t v117 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v54 = sub_1CB8F2578(v99);
  sub_1CB8F2120(v98, (uint64_t)&v107, AddrSpace, v54, v97, v96, (uint64_t)&unk_1EBCBD510);
  uint64_t v56 = sub_1CD8014C8(*(void *)(a3 + 16), v111, (uint64_t)&v120, v107, v108, v109, v110, v55, v125, v126);
  __int16 v57 = *(llvm::MachinePointerInfo **)(a2 + 96);
  int v58 = v101;
  if (llvm::MachinePointerInfo::getAddrSpace(v57) == 2) {
    *((_WORD *)v57 + 16) |= 0x20u;
  }
  uint64_t v59 = *(uint64_t **)(a3 + 16);
  uint64_t v122 = v57;
  sub_1CD8005B8(v59, (uint64_t)v56, &v122, 1);
  if (v99 < 5)
  {
    uint64_t v65 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v66 = *((void *)v65 + 104);
    if (v66) {
      __int16 v67 = *(_WORD *)(v66 + 8);
    }
    else {
      __int16 v67 = 0;
    }
    int v72 = sub_1CD7F3564(v65, (const char *)0xC9, (uint64_t)&v120, v112, v113, (uint64_t)v56, 0, v67);
    unint64_t v74 = v73;
    uint64_t v103 = v120;
    if (v120) {
      llvm::MetadataTracking::track((uint64_t)&v103, v120, 2);
    }
    int v104 = v121;
    unsigned int v75 = sub_1CD3E3318(v102, (uint64_t)v72, (void *)v74, v101, v100, v52, (const llvm::APInt *)&v103, a3);
    unint64_t v77 = v76;
    if (v103) {
      llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
    }
    uint64_t v78 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v79 = *((void *)v78 + 104);
    if (v79) {
      __int16 v80 = *(_WORD *)(v79 + 8);
    }
    else {
      __int16 v80 = 0;
    }
    int v87 = sub_1CD7F3564(v78, (const char *)0xD8, (uint64_t)&v120, v101, v100, (uint64_t)v75, (void *)v77, v80);
    int v89 = v88;
  }
  else
  {
    uint64_t v105 = v120;
    if (v120) {
      llvm::MetadataTracking::track((uint64_t)&v105, v120, 2);
    }
    int v106 = v121;
    unsigned int v60 = sub_1CD3E3318(v102, (uint64_t)v56, 0, v101, v100, v52, (const llvm::APInt *)&v105, a3);
    int v62 = v61;
    if (v105) {
      llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
    }
    uint64_t v122 = v124;
    uint64_t v123 = 0x1000000000;
    if (v114)
    {
      for (unsigned int i = 0; i < v114; ++i)
      {
        uint64_t v70 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v117), (const llvm::APInt *)&v120, v112, v113, (uint64_t)v60, v62);
        if (v123 >= (unint64_t)HIDWORD(v123)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v71 = (uint64_t **)((char *)v122 + 16 * v123);
        *uint64_t v71 = v70;
        v71[1] = v69;
        uint64_t v63 = (v123 + 1);
        LODWORD(v123) = v123 + 1;
      }
      uint64_t v64 = (uint64_t *)v122;
      int v58 = v101;
    }
    else
    {
      uint64_t v63 = 0;
      uint64_t v64 = (uint64_t *)v124;
    }
    uint64_t v82 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v120, v115, v116, v64, v63);
    int v83 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v84 = *((void *)v83 + 104);
    if (v84) {
      __int16 v85 = *(_WORD *)(v84 + 8);
    }
    else {
      __int16 v85 = 0;
    }
    int v87 = sub_1CD7F3564(v83, (const char *)0xD8, (uint64_t)&v120, v58, v100, (uint64_t)v82, (void *)v81, v85);
    int v89 = v92;
    if (v122 != v124) {
      free(v122);
    }
  }
  uint64_t v90 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v120, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v87, v89, v86, (uint64_t)v56, 1);
  if (v125 != v127) {
    free(v125);
  }
  if (v120) {
    llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
  }
  return v90;
}

uint64_t *sub_1CD3E6284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v134[16] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v107 = *(llvm **)v6;
  unsigned int v102 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v104 = *(void *)(a2 + 88);
  unint64_t v9 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v10 = *(long long **)(a2 + 32);
  uint64_t v12 = *((void *)v10 + 5);
  unint64_t v11 = *((void *)v10 + 6);
  long long v103 = *v10;
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  int v127 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v127, v13, 2);
  }
  int v128 = *(_DWORD *)(a2 + 60);
  uint64_t v19 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
  int v21 = v20;
  uint64_t v22 = *(unsigned __int8 **)(v12 + 64);
  uint64_t v125 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v125, v22, 2);
  }
  int v126 = *(_DWORD *)(v12 + 60);
  unsigned int v23 = sub_1CB8F266C(v12, v11, *(llvm::APFloatBase **)(a3 + 16), v14, v15, v16, v17, v18);
  int v25 = *((unsigned __int16 *)v23 + 12);
  BOOL v26 = v25 == 35 || v25 == 11;
  uint64_t v101 = (void *)v11;
  uint64_t v105 = v5;
  if (v26)
  {
    int v132 = v134;
    uint64_t v133 = 0x800000000;
    uint64_t v27 = v23[10];
    int v28 = (unsigned int *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u) {
      int v28 = *(unsigned int **)v28;
    }
    int v30 = sub_1CD7EBF14(*(void *)(a3 + 16), *v28, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
    if (v133 >= HIDWORD(v133)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v31 = (uint64_t **)&v132[2 * v133];
    *uint64_t v31 = v30;
    v31[1] = v29;
    unsigned int v50 = v133 + 1;
    LODWORD(v133) = v50;
    if (v50 >= HIDWORD(v133)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v51 = &unk_1EBCBD614;
  }
  else
  {
    int v132 = v134;
    v134[0] = v23;
    v134[1] = v24;
    uint64_t v133 = 0x800000001;
    unsigned int v50 = 1;
    uint64_t v51 = &unk_1EBCBD510;
  }
  __int16 v32 = (uint64_t **)&v132[2 * v50];
  *__int16 v32 = v19;
  v32[1] = v21;
  LODWORD(v133) = v133 + 1;
  uint64_t v33 = a1;
  sub_1CD3E5038(a1, (uint64_t)&v132, *(void *)(a3 + 16));
  if (v133 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v132[2 * v133] = v103;
  LODWORD(v133) = v133 + 1;
  LOBYTE(v114) = 0;
  uint64_t v115 = 0;
  LOBYTE(v116) = 0;
  uint64_t v117 = 0;
  int v118 = -1;
  LOBYTE(v119) = 0;
  uint64_t v120 = 0;
  unsigned int v121 = -1;
  LOBYTE(v122) = 0;
  uint64_t v123 = 0;
  uint64_t v124 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v35 = sub_1CB8F2578(v9);
  sub_1CB8F2120(v105, (uint64_t)&v114, AddrSpace, v35, v8, v104, (uint64_t)v51);
  uint64_t v37 = sub_1CD8014C8(*(void *)(a3 + 16), v118, (uint64_t)&v127, (uint64_t)v114, v115, v116, v117, v36, v132, v133);
  long long v38 = *(uint64_t **)(a3 + 16);
  uint64_t v129 = *(void **)(a2 + 96);
  sub_1CD8005B8(v38, (uint64_t)v37, &v129, 1);
  if (v9 >= 5)
  {
    uint64_t v112 = v127;
    if (v127) {
      llvm::MetadataTracking::track((uint64_t)&v112, v127, 2);
    }
    int v113 = v128;
    int v52 = v107;
    uint64_t v53 = v7;
    unsigned int v54 = sub_1CD3E3318(a1, (uint64_t)v37, 0, v107, v7, (v102 >> 10) & 3, (const llvm::APInt *)&v112, a3);
    int v56 = v55;
    if (v112) {
      llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
    }
    uint64_t v129 = v131;
    uint64_t v130 = 0x1000000000;
    if (v121)
    {
      for (unsigned int i = 0; i < v121; ++i)
      {
        uint64_t v64 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v124), (const llvm::APInt *)&v127, v119, v120, (uint64_t)v54, v56);
        if (v130 >= (unint64_t)HIDWORD(v130)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v65 = (uint64_t **)((char *)v129 + 16 * v130);
        llvm::APFloatBase *v65 = v64;
        v65[1] = v63;
        uint64_t v57 = (v130 + 1);
        LODWORD(v130) = v130 + 1;
      }
      int v58 = (uint64_t *)v129;
      int v52 = v107;
    }
    else
    {
      uint64_t v57 = 0;
      int v58 = (uint64_t *)v131;
    }
    __int16 v67 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v127, v122, v123, v58, v57);
    uint64_t v68 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v69 = *((void *)v68 + 104);
    if (v69) {
      __int16 v70 = *(_WORD *)(v69 + 8);
    }
    else {
      __int16 v70 = 0;
    }
    uint64_t v45 = sub_1CD7F3564(v68, (const char *)0xD8, (uint64_t)&v127, v52, v53, (uint64_t)v67, (void *)v66, v70);
    int v47 = v71;
    if (v129 != v131) {
      free(v129);
    }
  }
  else
  {
    if (v9 == 1)
    {
      uint64_t v59 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v60 = *((void *)v59 + 104);
      int v39 = (v102 >> 10) & 3;
      if (v60) {
        __int16 v61 = *(_WORD *)(v60 + 8);
      }
      else {
        __int16 v61 = 0;
      }
      uint64_t v42 = v7;
      int v106 = sub_1CD7F3564(v59, (const char *)0xC9, (uint64_t)&v127, v114, v115, v12, v101, v61);
      uint64_t v73 = v72;
      uint64_t v74 = *(void *)(a3 + 16);
      unsigned int v75 = v114;
      uint64_t v76 = v115;
      unint64_t v77 = sub_1CD7EBF14(v74, 1, (const llvm::APInt *)&v127, v114, v115, 0, 0);
      uint64_t v80 = *(void *)(v74 + 832);
      if (v80) {
        LOWORD(v80) = *(_WORD *)(v80 + 8);
      }
      uint64_t v43 = v107;
      uint64_t v108 = sub_1CCFDED5C(v74, 171, (const llvm::APInt *)&v127, v75, v76, (uint64_t)v106, v73, v79, (uint64_t)v77, v78, v80);
      uint64_t v82 = v81;
      uint64_t v83 = *(void *)(a3 + 16);
      uint64_t v84 = v114;
      uint64_t v85 = v115;
      uint64_t v86 = sub_1CD7EBF14(v83, 3, (const llvm::APInt *)&v127, v114, v115, 0, 0);
      uint64_t v89 = *(void *)(v83 + 832);
      if (v89) {
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      }
      uint64_t v90 = sub_1CCFDED5C(v83, 175, (const llvm::APInt *)&v127, v84, v85, (uint64_t)v108, v82, v88, (uint64_t)v86, v87, v89);
      uint64_t v93 = *(void *)(a3 + 16);
      uint64_t v94 = *(void *)(v93 + 832);
      if (v94) {
        LOWORD(v94) = *(_WORD *)(v94 + 8);
      }
      uint64_t v33 = a1;
      uint64_t v96 = sub_1CCFDED5C(v93, 177, (const llvm::APInt *)&v127, v114, v115, (uint64_t)v37, 0, v92, (uint64_t)v90, v91, v94);
      __int16 v97 = 0;
      uint64_t v98 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v99 = *((void *)v98 + 104);
      if (v99) {
        __int16 v97 = *(_WORD *)(v99 + 8);
      }
      uint64_t v41 = sub_1CD7F3564(v98, (const char *)0xC9, (uint64_t)&v127, v119, v120, (uint64_t)v96, (void *)v95, v97);
      unint64_t v40 = v100;
    }
    else
    {
      int v39 = (v102 >> 10) & 3;
      unint64_t v40 = 0;
      uint64_t v41 = v37;
      uint64_t v42 = v7;
      uint64_t v43 = v107;
    }
    uint64_t v110 = v127;
    if (v127) {
      llvm::MetadataTracking::track((uint64_t)&v110, v127, 2);
    }
    int v111 = v128;
    uint64_t v45 = sub_1CD3E3318(v33, (uint64_t)v41, (void *)v40, v43, v42, v39, (const llvm::APInt *)&v110, a3);
    int v47 = v46;
    if (v110) {
      llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
    }
  }
  uint64_t v48 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v127, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v45, v47, v44, (uint64_t)v37, 1);
  if (v132 != v134) {
    free(v132);
  }
  if (v125) {
    llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
  }
  if (v127) {
    llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
  }
  return v48;
}

uint64_t *sub_1CD3E69CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v126[16] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v99 = *(llvm **)v6;
  uint64_t v100 = *(void *)(v6 + 8);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 80);
  unint64_t v10 = sub_1CB8F20C0(*(void *)(a2 + 96));
  unint64_t v11 = *(long long **)(a2 + 32);
  uint64_t v12 = *((void *)v11 + 5);
  uint64_t v98 = (void *)*((void *)v11 + 6);
  long long v96 = *v11;
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  int v119 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v119, v13, 2);
  }
  int v120 = *(_DWORD *)(a2 + 60);
  uint64_t v19 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v119, (llvm *)5, 0, 1, 0);
  uint64_t v21 = v20;
  uint64_t v22 = *(unsigned __int8 **)(v12 + 64);
  uint64_t v117 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v117, v22, 2);
  }
  int v97 = (v7 >> 10) & 3;
  int v118 = *(_DWORD *)(v12 + 60);
  unsigned int v23 = sub_1CB8F266C(v12, (unint64_t)v98, *(llvm::APFloatBase **)(a3 + 16), v14, v15, v16, v17, v18);
  uint64_t v124 = v126;
  v126[0] = v23;
  v126[1] = v24;
  v126[2] = v19;
  v126[3] = v21;
  uint64_t v125 = 0x800000002;
  sub_1CD3E5038(a1, (uint64_t)&v124, *(void *)(a3 + 16));
  if (v125 >= HIDWORD(v125)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v124[2 * v125] = v96;
  LODWORD(v125) = v125 + 1;
  LOBYTE(v106) = 0;
  uint64_t v107 = 0;
  LOBYTE(v108) = 0;
  uint64_t v109 = 0;
  int v110 = -1;
  LOBYTE(v111) = 0;
  uint64_t v112 = 0;
  unsigned int v113 = -1;
  LOBYTE(v114) = 0;
  uint64_t v115 = 0;
  uint64_t v116 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v26 = sub_1CB8F2578(v10);
  sub_1CB8F2120(v5, (uint64_t)&v106, AddrSpace, v26, v9, v8, (uint64_t)&unk_1EBCBD510);
  int v28 = sub_1CD8014C8(*(void *)(a3 + 16), v110, (uint64_t)&v119, (uint64_t)v106, v107, v108, v109, v27, v124, v125);
  int v29 = *(_WORD **)(a2 + 96);
  v29[16] |= 0x20u;
  int v30 = *(uint64_t **)(a3 + 16);
  unsigned int v121 = v29;
  sub_1CD8005B8(v30, (uint64_t)v28, &v121, 1);
  uint64_t v31 = v99;
  if (v10 < 5)
  {
    if (v10 == 1)
    {
      long long v38 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v39 = *((void *)v38 + 104);
      if (v39) {
        __int16 v40 = *(_WORD *)(v39 + 8);
      }
      else {
        __int16 v40 = 0;
      }
      int v56 = sub_1CD7F3564(v38, (const char *)0xC9, (uint64_t)&v119, v106, v107, v12, v98, v40);
      uint64_t v58 = v57;
      uint64_t v59 = *(void *)(a3 + 16);
      uint64_t v60 = v106;
      uint64_t v61 = v107;
      int v62 = sub_1CD7EBF14(v59, 1, (const llvm::APInt *)&v119, v106, v107, 0, 0);
      uint64_t v65 = *(void *)(v59 + 832);
      if (v65) {
        LOWORD(v65) = *(_WORD *)(v65 + 8);
      }
      unsigned int v66 = sub_1CCFDED5C(v59, 171, (const llvm::APInt *)&v119, v60, v61, (uint64_t)v56, v58, v64, (uint64_t)v62, v63, v65);
      uint64_t v68 = v67;
      uint64_t v69 = *(void *)(a3 + 16);
      __int16 v70 = v106;
      uint64_t v71 = v107;
      uint64_t v72 = sub_1CD7EBF14(v69, 3, (const llvm::APInt *)&v119, v106, v107, 0, 0);
      uint64_t v75 = *(void *)(v69 + 832);
      if (v75) {
        LOWORD(v75) = *(_WORD *)(v75 + 8);
      }
      uint64_t v76 = sub_1CCFDED5C(v69, 175, (const llvm::APInt *)&v119, v70, v71, (uint64_t)v66, v68, v74, (uint64_t)v72, v73, v75);
      uint64_t v79 = *(void *)(a3 + 16);
      uint64_t v80 = *(void *)(v79 + 832);
      if (v80) {
        LOWORD(v80) = *(_WORD *)(v80 + 8);
      }
      uint64_t v82 = sub_1CCFDED5C(v79, 177, (const llvm::APInt *)&v119, v106, v107, (uint64_t)v28, 0, v78, (uint64_t)v76, v77, v80);
      __int16 v83 = 0;
      uint64_t v84 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v85 = *((void *)v84 + 104);
      if (v85) {
        __int16 v83 = *(_WORD *)(v85 + 8);
      }
      int v46 = sub_1CD7F3564(v84, (const char *)0xC9, (uint64_t)&v119, v111, v112, (uint64_t)v82, (void *)v81, v83);
      unint64_t v45 = v86;
    }
    else
    {
      unint64_t v45 = 0;
      int v46 = v28;
    }
    unsigned int v102 = v119;
    if (v119) {
      llvm::MetadataTracking::track((uint64_t)&v102, v119, 2);
    }
    int v103 = v120;
    uint64_t v87 = sub_1CD3E3318(a1, (uint64_t)v46, (void *)v45, v99, v100, v97, (const llvm::APInt *)&v102, a3);
    unint64_t v89 = v88;
    if (v102) {
      llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
    }
    uint64_t v90 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v91 = *((void *)v90 + 104);
    if (v91) {
      __int16 v92 = *(_WORD *)(v91 + 8);
    }
    else {
      __int16 v92 = 0;
    }
    uint64_t v53 = sub_1CD7F3564(v90, (const char *)0xD8, (uint64_t)&v119, v99, v100, (uint64_t)v87, (void *)v89, v92);
    int v55 = v93;
  }
  else
  {
    uint64_t v104 = v119;
    uint64_t v32 = v100;
    if (v119) {
      llvm::MetadataTracking::track((uint64_t)&v104, v119, 2);
    }
    int v105 = v120;
    uint64_t v33 = sub_1CD3E3318(a1, (uint64_t)v28, 0, v99, v100, v97, (const llvm::APInt *)&v104, a3);
    int v35 = v34;
    if (v104) {
      llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
    }
    unsigned int v121 = v123;
    uint64_t v122 = 0x1000000000;
    if (v113)
    {
      for (unsigned int i = 0; i < v113; ++i)
      {
        uint64_t v43 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v116), (const llvm::APInt *)&v119, v111, v112, (uint64_t)v33, v35);
        if (v122 >= (unint64_t)HIDWORD(v122)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v44 = (uint64_t **)((char *)v121 + 16 * v122);
        *uint64_t v44 = v43;
        v44[1] = v42;
        uint64_t v36 = (v122 + 1);
        LODWORD(v122) = v122 + 1;
      }
      uint64_t v37 = (uint64_t *)v121;
      uint64_t v31 = v99;
      uint64_t v32 = v100;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (uint64_t *)v123;
    }
    uint64_t v48 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v119, v114, v115, v37, v36);
    uint64_t v49 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v50 = *((void *)v49 + 104);
    if (v50) {
      __int16 v51 = *(_WORD *)(v50 + 8);
    }
    else {
      __int16 v51 = 0;
    }
    uint64_t v53 = sub_1CD7F3564(v49, (const char *)0xD8, (uint64_t)&v119, v31, v32, (uint64_t)v48, (void *)v47, v51);
    int v55 = v54;
    if (v121 != v123) {
      free(v121);
    }
  }
  uint64_t v94 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v119, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v53, v55, v52, (uint64_t)v28, 1);
  if (v124 != v126) {
    free(v124);
  }
  if (v117) {
    llvm::MetadataTracking::untrack((uint64_t)&v117, v117);
  }
  if (v119) {
    llvm::MetadataTracking::untrack((uint64_t)&v119, v119);
  }
  return v94;
}

uint64_t *sub_1CD3E7034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v107[16] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v100 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v100, v6, 2);
  }
  int v101 = *(_DWORD *)(a2 + 60);
  unsigned int v7 = *(llvm **)(a2 + 80);
  uint64_t v88 = *(void *)(a2 + 88);
  uint64_t v8 = *(uint64_t **)(a2 + 32);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v12 = (uint64_t *)v8[5];
  unint64_t v11 = v8[6];
  uint64_t v13 = v8[10];
  unint64_t v14 = v8[11];
  if (*(_WORD *)(a2 + 24) != 254 || (*(_WORD *)(a2 + 26) & 0x400) == 0) {
    goto LABEL_5;
  }
  int v33 = *(void *)(a2 + 80);
  if (*(void *)(a2 + 80))
  {
    if ((v33 - 120) < 0x20 || (v33 - 2) < 6 || (v33 - 15) < 0x3C)
    {
LABEL_21:
      int v35 = *(llvm::APFloatBase **)(v3 + 16);
      uint64_t v36 = *((void *)v35 + 104);
      if (v36) {
        __int16 v37 = *(_WORD *)(v36 + 8);
      }
      else {
        __int16 v37 = 0;
      }
      uint64_t v12 = sub_1CD7F3564(v35, (const char *)0xC9, (uint64_t)&v100, v7, v88, (uint64_t)v12, (void *)v11, v37);
      unint64_t v11 = v11 & 0xFFFFFFFF00000000 | v45;
LABEL_5:
      unint64_t v86 = v11;
      goto LABEL_6;
    }
  }
  else
  {
    if ((*(_DWORD *)(v88 + 8) & 0xFE) == 0x12) {
      int v34 = *(unsigned __int8 *)(**(void **)(v88 + 16) + 8);
    }
    else {
      int v34 = *(_DWORD *)(v88 + 8);
    }
    if (v34 == 13) {
      goto LABEL_21;
    }
  }
  uint64_t v85 = v3;
  uint64_t v38 = *(void *)(v3 + 16);
  uint64_t v39 = sub_1CD7EBF14(v38, 0, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
  __int16 v42 = 0;
  uint64_t v43 = *(void *)(v38 + 832);
  if (v43) {
    __int16 v42 = *(_WORD *)(v43 + 8);
  }
  uint64_t v12 = sub_1CCFDED5C(v38, 212, (const llvm::APInt *)&v100, v7, v88, (uint64_t)v12, v11, v41, (uint64_t)v39, v40, v42);
  unint64_t v86 = v11 & 0xFFFFFFFF00000000 | v44;
  uint64_t v3 = v85;
LABEL_6:
  uint64_t v84 = *(void *)(a2 + 96);
  unint64_t v15 = sub_1CB8F20C0(v84);
  uint64_t v16 = *(llvm::APFloatBase **)(v3 + 16);
  uint64_t v17 = *((void *)v16 + 104);
  if (v17) {
    __int16 v18 = *(_WORD *)(v17 + 8);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t v19 = sub_1CD7F3564(v16, (const char *)0xC9, (uint64_t)&v100, (llvm *)5, 0, v13, (void *)v14, v18);
  int v105 = v107;
  v107[0] = v10;
  v107[1] = v9;
  v107[2] = v12;
  v107[3] = v86;
  uint64_t v21 = *(llvm::MachinePointerInfo **)(a2 + 96);
  v107[4] = v19;
  v107[5] = v14 & 0xFFFFFFFF00000000 | v20;
  uint64_t v106 = 0x800000003;
  v89[0] = 0;
  uint64_t v90 = 0;
  char v91 = 0;
  uint64_t v92 = 0;
  int v93 = -1;
  LOBYTE(v94) = 0;
  uint64_t v95 = 0;
  unsigned int v96 = -1;
  LOBYTE(v97) = 0;
  uint64_t v98 = 0;
  uint64_t v99 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(v21);
  unsigned int v23 = sub_1CB8F2578(v15);
  uint64_t v24 = v88;
  sub_1CB8F2120(v5, (uint64_t)v89, AddrSpace, v23, (uint64_t)v7, v88, (uint64_t)&unk_1EBCBD718);
  uint64_t v26 = sub_1CD7EACB0(*(void *)(v3 + 16), (llvm *)1, 0);
  uint64_t v28 = v27;
  if (v15 >= 5)
  {
    int v46 = *(llvm::APFloatBase **)(v3 + 16);
    uint64_t v47 = *((void *)v46 + 104);
    if (v47) {
      __int16 v48 = *(_WORD *)(v47 + 8);
    }
    else {
      __int16 v48 = 0;
    }
    uint64_t v52 = sub_1CD7F3564(v46, (const char *)0xD8, (uint64_t)&v100, v97, v98, (uint64_t)v12, (void *)v86, v48);
    unsigned int v54 = v53;
    unsigned int v102 = v104;
    uint64_t v103 = 0x2100000000;
    int v56 = sub_1CD7EBF14(*(void *)(v3 + 16), v99, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
    if (v103 >= HIDWORD(v103)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v57 = (uint64_t **)((char *)v102 + 16 * v103);
    *uint64_t v57 = v56;
    v57[1] = v55;
    unsigned int v58 = v103 + 1;
    LODWORD(v103) = v103 + 1;
    if (v96)
    {
      unint64_t v59 = 0;
      unint64_t v87 = v86 & 0xFFFFFFFF00000000 | v54;
      do
      {
        uint64_t v60 = *(void *)(v3 + 16);
        uint64_t v61 = v95;
        __int16 v83 = v94;
        int v62 = sub_1CD7EBF14(v60, v59, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
        __int16 v65 = 0;
        uint64_t v66 = *(void *)(v60 + 832);
        if (v66) {
          __int16 v65 = *(_WORD *)(v66 + 8);
        }
        uint64_t v68 = sub_1CCFDED5C(v60, 148, (const llvm::APInt *)&v100, v83, v61, (uint64_t)v52, v87, v64, (uint64_t)v62, v63, v65);
        if (v103 >= (unint64_t)HIDWORD(v103)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v69 = (uint64_t **)((char *)v102 + 16 * v103);
        *uint64_t v69 = v68;
        v69[1] = v67;
        LODWORD(v103) = v103 + 1;
        uint64_t v71 = sub_1CD7EBF14(*(void *)(v3 + 16), (v59 + HIDWORD(v99)), (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
        if (v103 >= (unint64_t)HIDWORD(v103)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v72 = (uint64_t **)((char *)v102 + 16 * v103);
        *uint64_t v72 = v71;
        v72[1] = v70;
        unsigned int v58 = v103 + 1;
        LODWORD(v103) = v103 + 1;
        ++v59;
      }
      while (v59 < v96);
    }
    if (v15 == 6)
    {
      uint64_t v78 = sub_1CD3DD4D8(*(void *)(v3 + 16), (llvm *)9, 0);
      if (v103 >= HIDWORD(v103)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v79 = (uint64_t **)((char *)v102 + 16 * v103);
      *uint64_t v79 = v78;
      v79[1] = v77;
      LODWORD(v103) = v103 + 1;
      unsigned int v81 = sub_1CD7EBF14(*(void *)(v3 + 16), 4, (const llvm::APInt *)&v100, (llvm *)5, 0, 1, 0);
      if (v103 >= HIDWORD(v103)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v82 = (uint64_t **)((char *)v102 + 16 * v103);
      uint64_t *v82 = v81;
      v82[1] = v80;
      unsigned int v58 = v103 + 1;
      LODWORD(v103) = v103 + 1;
      uint64_t v24 = v88;
    }
    uint64_t v73 = sub_1CD801450(*(void *)(v3 + 16), 18, (uint64_t)&v100, (llvm *)0xAE, 0, (uint64_t *)v102, v58);
    uint64_t v74 = v105;
    v105[2] = v73;
    v74[6] = 0;
    if (v102 != v104) {
      free(v102);
    }
  }
  int v29 = v105;
  if (v15 == 1)
  {
    uint64_t v49 = *(llvm::APFloatBase **)(v3 + 16);
    uint64_t v50 = *((void *)v49 + 104);
    uint64_t v30 = v84;
    if (v50) {
      __int16 v51 = *(_WORD *)(v50 + 8);
    }
    else {
      __int16 v51 = 0;
    }
    uint64_t v75 = sub_1CD7F3564(v49, (const char *)0xC8, (uint64_t)&v100, (llvm *)4, 0, v105[2], (void *)v105[3], v51);
    int v29 = v105;
    v105[2] = v75;
    *((_DWORD *)v29 + 6) = v76;
  }
  else
  {
    uint64_t v30 = v84;
  }
  uint64_t v31 = sub_1CD7F9CC8(*(void *)(v3 + 16), v93, (uint64_t)&v100, v26, v28, v29, v106, v25, (uint64_t)v7, v24, v30);
  if (v105 != v107) {
    free(v105);
  }
  if (v100) {
    llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
  }
  return v31;
}

uint64_t *sub_1CD3E76DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v152[16] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  int v6 = *(unsigned __int16 *)(a2 + 24);
  unsigned int v7 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v145 = v7;
  int v8 = v6;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v145, v7, 2);
    int v8 = *(unsigned __int16 *)(a2 + 24);
  }
  int v146 = *(_DWORD *)(a2 + 60);
  uint64_t v9 = *(llvm **)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  int v126 = v5;
  uint64_t v124 = (uint64_t)v9;
  int v121 = v6;
  if (v8 == 254)
  {
    unint64_t v11 = *(uint64_t **)(a2 + 32);
    unsigned int v12 = *((_DWORD *)v11 + 2);
    uint64_t v13 = v11[5];
    uint64_t v128 = *((unsigned int *)v11 + 12);
    uint64_t v14 = v11[10];
    unsigned int v15 = *((_DWORD *)v11 + 22);
    uint64_t v122 = *v11;
    if ((*(_WORD *)(a2 + 26) & 0x400) == 0) {
      goto LABEL_23;
    }
    if ((_BYTE)v9)
    {
      if (v9 - 120 < 0x20
        || v9 - 2 < 6
        || v9 - 15 < 0x3C)
      {
LABEL_9:
        uint64_t v17 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v18 = *((void *)v17 + 104);
        if (v18) {
          __int16 v19 = *(_WORD *)(v18 + 8);
        }
        else {
          __int16 v19 = 0;
        }
        uint64_t v27 = sub_1CD7F3564(v17, (const char *)0xC9, (uint64_t)&v145, v9, v10, v13, (void *)v128, v19);
LABEL_22:
        uint64_t v13 = (uint64_t)v27;
        uint64_t v128 = v28;
        goto LABEL_23;
      }
    }
    else
    {
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        int v16 = *(unsigned __int8 *)(**(void **)(v10 + 16) + 8);
      }
      else {
        int v16 = *(_DWORD *)(v10 + 8);
      }
      if (v16 == 13) {
        goto LABEL_9;
      }
    }
    uint64_t v21 = *(void *)(a3 + 16);
    uint64_t v22 = sub_1CD7EBF14(v21, 0, (const llvm::APInt *)&v145, (llvm *)5, 0, 0, 0);
    __int16 v25 = 0;
    uint64_t v26 = *(void *)(v21 + 832);
    if (v26) {
      __int16 v25 = *(_WORD *)(v26 + 8);
    }
    uint64_t v27 = sub_1CCFDED5C(v21, 212, (const llvm::APInt *)&v145, v9, v10, v13, v128, v24, (uint64_t)v22, v23, v25);
    goto LABEL_22;
  }
  if (v6 == 291)
  {
    unsigned int v20 = *(uint64_t **)(a2 + 32);
    uint64_t v122 = *v20;
    unsigned int v12 = *((_DWORD *)v20 + 2);
    uint64_t v13 = v20[10];
    uint64_t v128 = *((unsigned int *)v20 + 22);
    uint64_t v14 = v20[5];
    unsigned int v15 = *((_DWORD *)v20 + 12);
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    uint64_t v13 = 0;
    uint64_t v128 = 0;
    uint64_t v122 = 0;
    unsigned int v12 = 0;
  }
LABEL_23:
  uint64_t v123 = v10;
  unint64_t v29 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v30 = *(void *)(a3 + 16);
  uint64_t v31 = sub_1CD7EBF14(v30, 0, (const llvm::APInt *)&v145, (llvm *)5, 0, 0, 0);
  __int16 v34 = 0;
  uint64_t v35 = *(void *)(v30 + 832);
  if (v35) {
    __int16 v34 = *(_WORD *)(v35 + 8);
  }
  uint64_t v36 = sub_1CCFDED5C(v30, 53, (const llvm::APInt *)&v145, (llvm *)5, 0, v14, v15, v33, (uint64_t)v31, v32, v34);
  int v38 = v37;
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = sub_1CD7EBF14(v39, 1, (const llvm::APInt *)&v145, (llvm *)5, 0, 0, 0);
  __int16 v43 = 0;
  uint64_t v44 = *(void *)(v39 + 832);
  if (v44) {
    __int16 v43 = *(_WORD *)(v44 + 8);
  }
  uint64_t v125 = a2;
  unsigned int v45 = sub_1CCFDED5C(v39, 53, (const llvm::APInt *)&v145, (llvm *)5, 0, v14, v15, v42, (uint64_t)v40, v41, v43);
  int v47 = v46;
  uint64_t v48 = *(void *)(a3 + 16);
  uint64_t v143 = v145;
  if (v145) {
    llvm::MetadataTracking::track((uint64_t)&v143, v145, 2);
  }
  uint64_t v49 = v13;
  unint64_t v127 = v29;
  int v144 = v146;
  uint64_t v50 = sub_1CD3D9E40(a1, (uint64_t)v36, v38, (uint64_t)v45, v47, v48, (uint64_t)&v143);
  uint64_t v52 = v51;
  if (v143) {
    llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
  }
  uint64_t v53 = v12;
  uint64_t v54 = *(void *)(a3 + 16);
  int v55 = *(uint64_t **)(v54 + 40);
  uint64_t v56 = *(void *)(a1 + 184296);
  uint64_t v57 = *v55;
  LODWORD(v147) = 0;
  if (sub_1CD3CA314(v56, v57, "StoreCMode", &v147)) {
    uint64_t v58 = v147;
  }
  else {
    uint64_t v58 = 2;
  }
  unint64_t v59 = sub_1CD7EBF14(v54, v58, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  unint64_t v61 = v60;
  if (v121 == 291)
  {
    int v62 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
    unint64_t v61 = v61 & 0xFFFFFFFF00000000 | v63;
  }
  else
  {
    int v62 = v59;
  }
  uint64_t v64 = *(void *)(a3 + 16);
  uint64_t v65 = *(void *)(a1 + 184296);
  uint64_t v66 = *v55;
  LODWORD(v147) = 0;
  if (sub_1CD3CA314(v65, v66, "StoreSLCMode", &v147)) {
    uint64_t v67 = v147;
  }
  else {
    uint64_t v67 = 1;
  }
  uint64_t v68 = sub_1CD7EBF14(v64, v67, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  uint64_t v70 = v69;
  uint64_t v71 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  int v150 = (void **)v152;
  v152[0] = v49;
  v152[1] = v128;
  v152[2] = v50;
  v152[3] = v52;
  char v152[4] = v62;
  v152[5] = v61;
  v152[6] = v68;
  v152[7] = v70;
  uint64_t v72 = *(void *)(a3 + 16);
  v152[8] = v71;
  v152[9] = v73;
  uint64_t v151 = 0x800000005;
  sub_1CD3E5038(a1, (uint64_t)&v150, v72);
  if (v151 >= HIDWORD(v151)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v74 = (char *)&v150[2 * v151];
  *(void *)uint64_t v74 = v122;
  *((void *)v74 + 1) = v53;
  LODWORD(v151) = v151 + 1;
  v132[0] = 0;
  uint64_t v133 = 0;
  char v134 = 0;
  uint64_t v135 = 0;
  int v136 = -1;
  LOBYTE(v137) = 0;
  uint64_t v138 = 0;
  unsigned int v139 = -1;
  LOBYTE(v140) = 0;
  uint64_t v141 = 0;
  uint64_t v142 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(v125 + 96));
  unsigned int v76 = sub_1CB8F2578(v127);
  sub_1CB8F2120(v126, (uint64_t)v132, AddrSpace, v76, v124, v123, (uint64_t)&unk_1EBCBD718);
  uint64_t v77 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v79 = v78;
  if (v127 >= 5)
  {
    __int16 v83 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v84 = *((void *)v83 + 104);
    if (v84) {
      __int16 v85 = *(_WORD *)(v84 + 8);
    }
    else {
      __int16 v85 = 0;
    }
    uint64_t v131 = sub_1CD7F3564(v83, (const char *)0xD8, (uint64_t)&v145, v140, v141, v49, (void *)v128, v85);
    unsigned int v90 = v89;
    BOOL v147 = v149;
    uint64_t v148 = 0x2100000000;
    uint64_t v92 = sub_1CD7EBF14(*(void *)(a3 + 16), v142, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
    if (v148 >= HIDWORD(v148)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v93 = (uint64_t **)((char *)v147 + 16 * v148);
    llvm::MachineInstr *v93 = v92;
    v93[1] = v91;
    unsigned int v94 = v148 + 1;
    LODWORD(v148) = v148 + 1;
    if (v139)
    {
      unint64_t v95 = 0;
      uint64_t v129 = v90;
      do
      {
        uint64_t v96 = *(void *)(a3 + 16);
        int v97 = v137;
        uint64_t v98 = v138;
        uint64_t v99 = sub_1CD7EBF14(v96, v95, (const llvm::APInt *)&v145, (llvm *)5, 0, 0, 0);
        __int16 v102 = 0;
        uint64_t v103 = *(void *)(v96 + 832);
        if (v103) {
          __int16 v102 = *(_WORD *)(v103 + 8);
        }
        int v105 = sub_1CCFDED5C(v96, 148, (const llvm::APInt *)&v145, v97, v98, (uint64_t)v131, v129, v101, (uint64_t)v99, v100, v102);
        if (v148 >= (unint64_t)HIDWORD(v148)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v106 = (uint64_t **)((char *)v147 + 16 * v148);
        *uint64_t v106 = v105;
        v106[1] = v104;
        LODWORD(v148) = v148 + 1;
        uint64_t v108 = sub_1CD7EBF14(*(void *)(a3 + 16), (v95 + HIDWORD(v142)), (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
        if (v148 >= (unint64_t)HIDWORD(v148)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v109 = (uint64_t **)((char *)v147 + 16 * v148);
        *uint64_t v109 = v108;
        v109[1] = v107;
        unsigned int v94 = v148 + 1;
        LODWORD(v148) = v148 + 1;
        ++v95;
      }
      while (v95 < v139);
    }
    if (v127 == 6)
    {
      uint64_t v116 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
      if (v148 >= HIDWORD(v148)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v117 = (uint64_t **)((char *)v147 + 16 * v148);
      *uint64_t v117 = v116;
      v117[1] = v115;
      LODWORD(v148) = v148 + 1;
      int v119 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
      if (v148 >= HIDWORD(v148)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v120 = (uint64_t **)((char *)v147 + 16 * v148);
      unsigned __int8 *v120 = v119;
      v120[1] = v118;
      unsigned int v94 = v148 + 1;
      LODWORD(v148) = v148 + 1;
    }
    int v110 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v145, (llvm *)0xAE, 0, (uint64_t *)v147, v94);
    int v111 = v150;
    llvm::MachineInstr *v150 = v110;
    *((_DWORD *)v111 + 2) = 0;
    if (v147 != v149) {
      free(v147);
    }
  }
  if (v127 == 1)
  {
    unint64_t v86 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v87 = *((void *)v86 + 104);
    if (v87) {
      __int16 v88 = *(_WORD *)(v87 + 8);
    }
    else {
      __int16 v88 = 0;
    }
    uint64_t v112 = sub_1CD7F3564(v86, (const char *)0xC8, (uint64_t)&v145, (llvm *)4, 0, (uint64_t)*v150, v150[1], v88);
    unsigned int v113 = v150;
    llvm::MachineInstr *v150 = v112;
    *((_DWORD *)v113 + 2) = v114;
  }
  uint64_t v80 = sub_1CD801044(*(void *)(a3 + 16), v136, (uint64_t)&v145, v77, v79, (uint64_t *)v150, v151);
  unsigned int v81 = *(uint64_t **)(a3 + 16);
  BOOL v147 = *(void **)(v125 + 96);
  sub_1CD8005B8(v81, (uint64_t)v80, &v147, 1);
  if (v150 != v152) {
    free(v150);
  }
  if (v145) {
    llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
  }
  return v80;
}

uint64_t *sub_1CD3E8038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v112[16] = *MEMORY[0x1E4F143B8];
  int v6 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  unsigned int v7 = *(unsigned __int8 **)(a2 + 64);
  int v105 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v105, v7, 2);
  }
  int v106 = *(_DWORD *)(a2 + 60);
  uint64_t v9 = *(llvm **)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(v10 + 40);
  uint64_t v90 = *(unsigned int *)(v10 + 48);
  uint64_t v12 = *(void *)(v10 + 80);
  unint64_t v13 = *(unsigned int *)(v10 + 88);
  uint64_t v87 = *(unsigned int *)(v10 + 8);
  uint64_t v88 = v8;
  uint64_t v85 = (uint64_t)v9;
  uint64_t v86 = *(void *)v10;
  if (*(_WORD *)(a2 + 24) == 254 && (*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    if ((_BYTE)v9)
    {
      if (v9 - 120 < 0x20
        || v9 - 2 < 6
        || v9 - 15 < 0x3C)
      {
LABEL_9:
        unsigned int v15 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v16 = *((void *)v15 + 104);
        if (v16) {
          __int16 v17 = *(_WORD *)(v16 + 8);
        }
        else {
          __int16 v17 = 0;
        }
        uint64_t v24 = sub_1CD7F3564(v15, (const char *)0xC9, (uint64_t)&v105, v9, v8, v11, (void *)v90, v17);
LABEL_19:
        uint64_t v11 = (uint64_t)v24;
        uint64_t v90 = v25;
        goto LABEL_20;
      }
    }
    else
    {
      if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
        int v14 = *(unsigned __int8 *)(**(void **)(v8 + 16) + 8);
      }
      else {
        int v14 = *(_DWORD *)(v8 + 8);
      }
      if (v14 == 13) {
        goto LABEL_9;
      }
    }
    uint64_t v18 = *(void *)(a3 + 16);
    __int16 v19 = sub_1CD7EBF14(v18, 0, (const llvm::APInt *)&v105, (llvm *)5, 0, 0, 0);
    __int16 v22 = 0;
    uint64_t v23 = *(void *)(v18 + 832);
    if (v23) {
      __int16 v22 = *(_WORD *)(v23 + 8);
    }
    uint64_t v24 = sub_1CCFDED5C(v18, 212, (const llvm::APInt *)&v105, v9, v8, v11, v90, v21, (uint64_t)v19, v20, v22);
    goto LABEL_19;
  }
LABEL_20:
  unint64_t v26 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v32 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v105, (llvm *)5, 0, 1, 0);
  __int16 v34 = v33;
  uint64_t v35 = *(unsigned __int8 **)(v12 + 64);
  uint64_t v103 = v35;
  if (v35) {
    llvm::MetadataTracking::track((uint64_t)&v103, v35, 2);
  }
  int v104 = *(_DWORD *)(v12 + 60);
  uint64_t v36 = sub_1CB8F266C(v12, v13, *(llvm::APFloatBase **)(a3 + 16), v27, v28, v29, v30, v31);
  int v38 = *((unsigned __int16 *)v36 + 12);
  if (v38 == 35 || v38 == 11) {
    uint64_t v58 = v36;
  }
  else {
    uint64_t v58 = 0;
  }
  int v110 = v112;
  v112[0] = v11;
  v112[1] = v90;
  uint64_t v111 = 0x800000001;
  if (v58)
  {
    uint64_t v42 = v58[10];
    __int16 v43 = (unsigned int *)(v42 + 24);
    if (*(_DWORD *)(v42 + 32) >= 0x41u) {
      __int16 v43 = *(unsigned int **)v43;
    }
    unsigned int v45 = sub_1CD7EBF14(*(void *)(a3 + 16), *v43, (const llvm::APInt *)&v105, (llvm *)5, 0, 1, 0);
    if (v111 >= HIDWORD(v111)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v46 = (uint64_t **)&v110[2 * v111];
    *int v46 = v45;
    v46[1] = v44;
    unsigned int v40 = v111 + 1;
    LODWORD(v111) = v40;
    if (v40 >= HIDWORD(v111)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v41 = &unk_1EBCBD81C;
  }
  else
  {
    v112[2] = v36;
    v112[3] = v37;
    unsigned int v40 = 2;
    LODWORD(v111) = 2;
    uint64_t v41 = &unk_1EBCBD718;
  }
  uint64_t v47 = v11;
  uint64_t v48 = (uint64_t **)&v110[2 * v40];
  *uint64_t v48 = v32;
  v48[1] = v34;
  LODWORD(v111) = v111 + 1;
  sub_1CD3E5038(a1, (uint64_t)&v110, *(void *)(a3 + 16));
  if (v111 >= HIDWORD(v111)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v49 = &v110[2 * v111];
  *uint64_t v49 = v86;
  v49[1] = v87;
  LODWORD(v111) = v111 + 1;
  v92[0] = 0;
  uint64_t v93 = 0;
  char v94 = 0;
  uint64_t v95 = 0;
  int v96 = -1;
  LOBYTE(v97) = 0;
  uint64_t v98 = 0;
  unsigned int v99 = -1;
  LOBYTE(v100) = 0;
  uint64_t v101 = 0;
  uint64_t v102 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v51 = sub_1CB8F2578(v26);
  sub_1CB8F2120(v6, (uint64_t)v92, AddrSpace, v51, v85, v88, (uint64_t)v41);
  uint64_t v52 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v54 = v53;
  if (v26 >= 5)
  {
    unint64_t v59 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v60 = *((void *)v59 + 104);
    if (v60) {
      __int16 v61 = *(_WORD *)(v60 + 8);
    }
    else {
      __int16 v61 = 0;
    }
    char v91 = sub_1CD7F3564(v59, (const char *)0xD8, (uint64_t)&v105, v100, v101, v47, (void *)v90, v61);
    unsigned int v63 = v62;
    uint64_t v107 = v109;
    uint64_t v108 = 0x2100000000;
    uint64_t v65 = sub_1CD7EBF14(*(void *)(a3 + 16), v102, (const llvm::APInt *)&v105, (llvm *)5, 0, 1, 0);
    if (v108 >= HIDWORD(v108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v66 = (uint64_t **)((char *)v107 + 16 * v108);
    *uint64_t v66 = v65;
    v66[1] = v64;
    unsigned int v67 = v108 + 1;
    LODWORD(v108) = v108 + 1;
    if (v99)
    {
      unint64_t v68 = 0;
      uint64_t v89 = v63;
      do
      {
        uint64_t v69 = *(void *)(a3 + 16);
        uint64_t v70 = v97;
        uint64_t v71 = v98;
        uint64_t v72 = sub_1CD7EBF14(v69, v68, (const llvm::APInt *)&v105, (llvm *)5, 0, 0, 0);
        __int16 v75 = 0;
        uint64_t v76 = *(void *)(v69 + 832);
        if (v76) {
          __int16 v75 = *(_WORD *)(v76 + 8);
        }
        uint64_t v78 = sub_1CCFDED5C(v69, 148, (const llvm::APInt *)&v105, v70, v71, (uint64_t)v91, v89, v74, (uint64_t)v72, v73, v75);
        if (v108 >= (unint64_t)HIDWORD(v108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v79 = (uint64_t **)((char *)v107 + 16 * v108);
        *uint64_t v79 = v78;
        v79[1] = v77;
        LODWORD(v108) = v108 + 1;
        unsigned int v81 = sub_1CD7EBF14(*(void *)(a3 + 16), (v68 + HIDWORD(v102)), (const llvm::APInt *)&v105, (llvm *)5, 0, 1, 0);
        if (v108 >= (unint64_t)HIDWORD(v108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v82 = (uint64_t **)((char *)v107 + 16 * v108);
        uint64_t *v82 = v81;
        v82[1] = v80;
        unsigned int v67 = v108 + 1;
        LODWORD(v108) = v108 + 1;
        ++v68;
      }
      while (v68 < v99);
    }
    __int16 v83 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v105, (llvm *)0xAE, 0, (uint64_t *)v107, v67);
    uint64_t v84 = v110;
    uint64_t *v110 = (uint64_t)v83;
    *((_DWORD *)v84 + 2) = 0;
    if (v107 != v109) {
      free(v107);
    }
  }
  if (v26 == 1) {
    llvm::report_fatal_error((llvm *)"Store of byte to local memory is unsupported", (const llvm::Twine *)1);
  }
  int v55 = sub_1CD801044(*(void *)(a3 + 16), v96, (uint64_t)&v105, v52, v54, v110, v111);
  uint64_t v56 = *(uint64_t **)(a3 + 16);
  uint64_t v107 = *(void **)(a2 + 96);
  sub_1CD8005B8(v56, (uint64_t)v55, &v107, 1);
  if (v110 != v112) {
    free(v110);
  }
  if (v103) {
    llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
  }
  if (v105) {
    llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
  }
  return v55;
}

uint64_t *sub_1CD3E874C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v105[16] = *MEMORY[0x1E4F143B8];
  int v6 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  unsigned int v7 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v98 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v98, v7, 2);
  }
  int v99 = *(_DWORD *)(a2 + 60);
  uint64_t v9 = *(llvm **)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v79 = (uint64_t)v9;
  uint64_t v80 = v6;
  if (*(_WORD *)(a2 + 24) != 254)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v81 = 0;
    uint64_t v83 = 0;
    uint64_t v78 = 0;
    unsigned int v11 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(v10 + 8);
  uint64_t v81 = *(unsigned int *)(v10 + 48);
  uint64_t v83 = *(void *)(v10 + 40);
  uint64_t v12 = *(void *)(v10 + 80);
  unsigned int v13 = *(_DWORD *)(v10 + 88);
  uint64_t v78 = *(void *)v10;
  if ((*(_WORD *)(a2 + 26) & 0x400) == 0)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    goto LABEL_7;
  }
  if (!(_BYTE)v9)
  {
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
      int v39 = *(unsigned __int8 *)(**(void **)(v8 + 16) + 8);
    }
    else {
      int v39 = *(_DWORD *)(v8 + 8);
    }
    if (v39 == 13) {
      goto LABEL_23;
    }
LABEL_28:
    uint64_t v43 = *(void *)(a3 + 16);
    uint64_t v44 = sub_1CD7EBF14(v43, 0, (const llvm::APInt *)&v98, (llvm *)5, 0, 0, 0);
    __int16 v47 = 0;
    uint64_t v48 = *(void *)(v43 + 832);
    if (v48) {
      __int16 v47 = *(_WORD *)(v48 + 8);
    }
    uint64_t v49 = v9;
    uint64_t v14 = v8;
    uint64_t v50 = sub_1CCFDED5C(v43, 212, (const llvm::APInt *)&v98, v49, v8, v83, v81, v46, (uint64_t)v44, v45, v47);
    goto LABEL_33;
  }
  if (v9 - 120 >= 0x20
    && v9 - 2 >= 6
    && v9 - 15 >= 0x3C)
  {
    goto LABEL_28;
  }
LABEL_23:
  unsigned int v40 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v41 = *((void *)v40 + 104);
  if (v41) {
    __int16 v42 = *(_WORD *)(v41 + 8);
  }
  else {
    __int16 v42 = 0;
  }
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v50 = sub_1CD7F3564(v40, (const char *)0xC9, (uint64_t)&v98, *(llvm **)(a2 + 80), v8, v83, (void *)v81, v42);
LABEL_33:
  uint64_t v81 = v51;
  uint64_t v83 = (uint64_t)v50;
LABEL_7:
  uint64_t v15 = v11;
  unint64_t v16 = v13;
  unint64_t v17 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v23 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
  uint64_t v25 = v24;
  unint64_t v26 = *(unsigned __int8 **)(v12 + 64);
  int v96 = v26;
  if (v26) {
    llvm::MetadataTracking::track((uint64_t)&v96, v26, 2);
  }
  int v97 = *(_DWORD *)(v12 + 60);
  uint64_t v27 = sub_1CB8F266C(v12, v16, *(llvm::APFloatBase **)(a3 + 16), v18, v19, v20, v21, v22);
  uint64_t v103 = v105;
  v105[0] = v83;
  v105[1] = v81;
  v105[2] = v27;
  v105[3] = v28;
  uint64_t v29 = *(void *)(a3 + 16);
  v105[4] = v23;
  v105[5] = v25;
  uint64_t v104 = 0x800000003;
  sub_1CD3E5038(a1, (uint64_t)&v103, v29);
  if (v104 >= HIDWORD(v104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v30 = &v103[2 * v104];
  *uint64_t v30 = v78;
  v30[1] = v15;
  LODWORD(v104) = v104 + 1;
  v85[0] = 0;
  uint64_t v86 = 0;
  char v87 = 0;
  uint64_t v88 = 0;
  int v89 = -1;
  LOBYTE(v90) = 0;
  uint64_t v91 = 0;
  unsigned int v92 = -1;
  LOBYTE(v93) = 0;
  uint64_t v94 = 0;
  uint64_t v95 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  unsigned int v32 = sub_1CB8F2578(v17);
  sub_1CB8F2120(v80, (uint64_t)v85, AddrSpace, v32, v79, v14, (uint64_t)&unk_1EBCBD718);
  uint64_t v33 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v35 = v34;
  if (v17 >= 5)
  {
    uint64_t v52 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v53 = *((void *)v52 + 104);
    if (v53) {
      __int16 v54 = *(_WORD *)(v53 + 8);
    }
    else {
      __int16 v54 = 0;
    }
    uint64_t v84 = sub_1CD7F3564(v52, (const char *)0xD8, (uint64_t)&v98, v93, v94, v83, (void *)v81, v54);
    unsigned int v56 = v55;
    uint64_t v100 = v102;
    uint64_t v101 = 0x2100000000;
    uint64_t v58 = sub_1CD7EBF14(*(void *)(a3 + 16), v95, (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
    if (v101 >= HIDWORD(v101)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v59 = (uint64_t **)((char *)v100 + 16 * v101);
    *unint64_t v59 = v58;
    v59[1] = v57;
    unsigned int v60 = v101 + 1;
    LODWORD(v101) = v101 + 1;
    if (v92)
    {
      unint64_t v61 = 0;
      uint64_t v82 = v56;
      do
      {
        uint64_t v62 = *(void *)(a3 + 16);
        unsigned int v63 = v90;
        uint64_t v64 = v91;
        uint64_t v65 = sub_1CD7EBF14(v62, v61, (const llvm::APInt *)&v98, (llvm *)5, 0, 0, 0);
        __int16 v68 = 0;
        uint64_t v69 = *(void *)(v62 + 832);
        if (v69) {
          __int16 v68 = *(_WORD *)(v69 + 8);
        }
        uint64_t v71 = sub_1CCFDED5C(v62, 148, (const llvm::APInt *)&v98, v63, v64, (uint64_t)v84, v82, v67, (uint64_t)v65, v66, v68);
        if (v101 >= (unint64_t)HIDWORD(v101)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v72 = (uint64_t **)((char *)v100 + 16 * v101);
        *uint64_t v72 = v71;
        v72[1] = v70;
        LODWORD(v101) = v101 + 1;
        uint64_t v74 = sub_1CD7EBF14(*(void *)(a3 + 16), (v61 + HIDWORD(v95)), (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
        if (v101 >= (unint64_t)HIDWORD(v101)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        __int16 v75 = (uint64_t **)((char *)v100 + 16 * v101);
        *__int16 v75 = v74;
        v75[1] = v73;
        unsigned int v60 = v101 + 1;
        LODWORD(v101) = v101 + 1;
        ++v61;
      }
      while (v61 < v92);
    }
    uint64_t v76 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v98, (llvm *)0xAE, 0, (uint64_t *)v100, v60);
    uint64_t v77 = v103;
    uint64_t *v103 = (uint64_t)v76;
    *((_DWORD *)v77 + 2) = 0;
    if (v100 != v102) {
      free(v100);
    }
  }
  if (v17 == 1) {
    llvm::report_fatal_error((llvm *)"Store of byte to shared memory is unsupported", (const llvm::Twine *)1);
  }
  uint64_t v36 = sub_1CD801044(*(void *)(a3 + 16), v89, (uint64_t)&v98, v33, v35, v103, v104);
  uint64_t v37 = *(uint64_t **)(a3 + 16);
  uint64_t v100 = *(void **)(a2 + 96);
  sub_1CD8005B8(v37, (uint64_t)v36, &v100, 1);
  if (v103 != v105) {
    free(v103);
  }
  if (v96) {
    llvm::MetadataTracking::untrack((uint64_t)&v96, v96);
  }
  if (v98) {
    llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
  }
  return v36;
}

void sub_1CD3E8D7C(uint64_t a1)
{
}

void sub_1CD3E8D8C()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3E8DB4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2613E58;
  sub_1CB833A08(a1 + 174024, *(void **)(a1 + 174032));
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(8 * *(unsigned int *)(a1 + 40)));
}

uint64_t sub_1CD3E8E08()
{
  return v0;
}

uint64_t *sub_1CD3E8E18(uint64_t a1, const llvm::APInt *a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(unsigned __int16 *)(a3 + 24);
  if (v8 == 35 || v8 == 11)
  {
    uint64_t v10 = *(void *)(a3 + 80);
    unsigned int v11 = *(_DWORD *)(v10 + 32);
    if (v11 > 0x40) {
      uint64_t v12 = **(void **)(v10 + 24);
    }
    else {
      uint64_t v12 = (uint64_t)(*(void *)(v10 + 24) << -(char)v11) >> -(char)v11;
    }
    return sub_1CD7EBF14(a1, v12 >> 1, a2, (llvm *)5, 0, 1, 0);
  }
  else
  {
    unsigned int v13 = sub_1CD7EBF14(a1, 1, a2, (llvm *)4, 0, 0, 0);
    uint64_t v16 = *(void *)(a1 + 832);
    if (v16) {
      LOWORD(v16) = *(_WORD *)(v16 + 8);
    }
    return sub_1CCFDED5C(a1, 177, a2, (llvm *)4, 0, a3, a4, v15, (uint64_t)v13, v14, v16);
  }
}

uint64_t *sub_1CD3E8F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v6 = *(void *)(a2 + 40);
  unsigned int v63 = *(llvm **)v6;
  uint64_t v64 = *(void *)(v6 + 8);
  unsigned int v60 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  uint64_t v9 = *(llvm **)(a2 + 80);
  unint64_t v10 = sub_1CB8F20C0(v7);
  unsigned int v11 = *(long long **)(a2 + 32);
  uint64_t v13 = *((void *)v11 + 5);
  unint64_t v12 = *((void *)v11 + 6);
  long long v62 = *v11;
  uint64_t v14 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v78 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v78, v14, 2);
  }
  int v79 = *(_DWORD *)(a2 + 60);
  uint64_t v15 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v16 = *(void **)(v13 + 64);
  uint64_t v80 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v80, (unsigned __int8 *)v16, 2);
  }
  LODWORD(v81) = *(_DWORD *)(v13 + 60);
  uint64_t v17 = *((void *)v15 + 104);
  if (v17) {
    __int16 v18 = *(_WORD *)(v17 + 8);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t v19 = sub_1CD7F3564(v15, (const char *)0xC9, (uint64_t)&v80, (llvm *)5, 0, v13, (void *)v12, v18);
  unint64_t v21 = v12 & 0xFFFFFFFF00000000 | v20;
  if (v80) {
    llvm::MetadataTracking::untrack((uint64_t)&v80, (unsigned __int8 *)v80);
  }
  uint64_t v83 = (uint64_t *)&v85;
  long long v85 = v62;
  uint64_t v86 = v19;
  unint64_t v87 = v21;
  uint64_t v84 = 0x800000002;
  LOBYTE(v67) = 0;
  uint64_t v68 = 0;
  LOBYTE(v69) = 0;
  uint64_t v70 = 0;
  int v71 = -1;
  LOBYTE(v72) = 0;
  uint64_t v73 = 0;
  unsigned int v74 = -1;
  LOBYTE(v75) = 0;
  uint64_t v76 = 0;
  uint64_t v77 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v5, (uint64_t)&v67, AddrSpace, dword_1CD9362D8[v10 - 1], (uint64_t)v9, v8, (uint64_t)&unk_1EBCBD920);
  uint64_t v23 = sub_1CD7F95FC(*(void *)(a3 + 16), v67, v68, v69, v70);
  uint64_t v27 = sub_1CD7F9CC8(*(void *)(a3 + 16), v71, (uint64_t)&v78, v23, v24, v83, v84, v25, (uint64_t)v9, v8, v7);
  int v28 = v26;
  if (v10 < 5)
  {
    __int16 v31 = 0;
    unsigned int v32 = *(llvm::APFloatBase **)(a3 + 16);
    if (v9 == 2) {
      uint64_t v33 = 2;
    }
    else {
      uint64_t v33 = (uint64_t)v72;
    }
    if (v9 == 2) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = v73;
    }
    uint64_t v35 = *((void *)v32 + 104);
    if (v35) {
      __int16 v31 = *(_WORD *)(v35 + 8);
    }
    uint64_t v37 = sub_1CD7F3564(v32, (const char *)0xC9, (uint64_t)&v78, (llvm *)v33, v34, (uint64_t)v27, (void *)v26, v31);
    int v38 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v39 = *((void *)v38 + 104);
    if (v39) {
      __int16 v40 = *(_WORD *)(v39 + 8);
    }
    else {
      __int16 v40 = 0;
    }
    uint64_t v45 = sub_1CD7F3564(v38, (const char *)0xD8, (uint64_t)&v78, v9, v8, (uint64_t)v37, (void *)v36, v40);
    unint64_t v47 = v46;
    uint64_t v65 = v78;
    if (v78) {
      llvm::MetadataTracking::track((uint64_t)&v65, v78, 2);
    }
    int v66 = v79;
    uint64_t v49 = sub_1CD3E3318(a1, (uint64_t)v45, (void *)v47, v63, v64, (v60 >> 10) & 3, (const llvm::APInt *)&v65, a3);
    int v51 = v50;
    if (v65) {
      llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
    }
  }
  else
  {
    uint64_t v80 = v82;
    uint64_t v81 = 0x1000000000;
    if (v74)
    {
      for (unsigned int i = 0; i < v74; ++i)
      {
        uint64_t v43 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v77), (const llvm::APInt *)&v78, v72, v73, (uint64_t)v27, v28);
        if (v81 >= (unint64_t)HIDWORD(v81)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v44 = (uint64_t **)((char *)v80 + 16 * v81);
        *uint64_t v44 = v43;
        v44[1] = v42;
        uint64_t v29 = (v81 + 1);
        LODWORD(v81) = v81 + 1;
      }
      uint64_t v30 = (uint64_t *)v80;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (uint64_t *)v82;
    }
    uint64_t v53 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v78, v75, v76, v30, v29);
    __int16 v54 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v55 = *((void *)v54 + 104);
    if (v55) {
      __int16 v56 = *(_WORD *)(v55 + 8);
    }
    else {
      __int16 v56 = 0;
    }
    uint64_t v49 = sub_1CD7F3564(v54, (const char *)0xD8, (uint64_t)&v78, v63, v64, (uint64_t)v53, (void *)v52, v56);
    int v51 = v57;
    if (v80 != v82) {
      free(v80);
    }
  }
  uint64_t v58 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v78, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v49, v51, v48, (uint64_t)v27, 1);
  if (v83 != (uint64_t *)&v85) {
    free(v83);
  }
  if (v78) {
    llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
  }
  return v58;
}

uint64_t *sub_1CD3E937C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(v8 + 8);
  int v99 = *(llvm **)v8;
  unsigned int v92 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v94 = *(void *)(a2 + 80);
  uint64_t v95 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v93 = *(void *)(a2 + 88);
  unint64_t v96 = sub_1CB8F20C0(*(void *)(a2 + 96));
  long long v91 = *(_OWORD *)*(void *)(a2 + 32);
  unint64_t v10 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v127 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v127, v10, 2);
  }
  int v128 = *(_DWORD *)(a2 + 60);
  uint64_t v117 = 0;
  int v118 = 0;
  char v119 = 0;
  uint64_t v120 = 0;
  char v121 = 0;
  uint64_t v124 = 0;
  int v125 = 0;
  uint64_t v122 = 0;
  *(void *)&long long v123 = 0;
  DWORD2(v123) = 0;
  uint64_t v126 = a3;
  sub_1CD3ED078((uint64_t)v115, a2, 6, 0, 5, 0, a4);
  unsigned int v11 = *(uint64_t **)(*(void *)(a3 + 16) + 40);
  uint64_t v12 = *(void *)(a1 + 184296);
  uint64_t v13 = *v11;
  LODWORD(v129) = 0;
  BOOL v14 = sub_1CD3CA314(v12, v13, "LoadMCUCohMode", &v129);
  uint64_t v15 = v129;
  uint64_t v16 = *(void *)(a1 + 184296);
  uint64_t v17 = *v11;
  LODWORD(v129) = 0;
  BOOL v18 = sub_1CD3CA314(v16, v17, "LoadSLCCohMode", &v129);
  uint64_t v19 = v129;
  unsigned int v20 = *(unsigned char **)(a1 + 184296);
  uint64_t v97 = a1;
  uint64_t v98 = v9;
  if (v20[310])
  {
    uint64_t v21 = 1;
  }
  else if (v20[311])
  {
    uint64_t v21 = 2;
  }
  else if (v20[312])
  {
    uint64_t v21 = 3;
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = sub_1CD7EBF14(*(void *)(a3 + 16), v21, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
  uint64_t v24 = v23;
  if (v14) {
    uint64_t v25 = v15;
  }
  else {
    uint64_t v25 = 0;
  }
  unsigned int v26 = sub_1CD7EBF14(*(void *)(a3 + 16), v25, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
  int v28 = v27;
  if (v18) {
    uint64_t v29 = v19;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = sub_1CD7EBF14(*(void *)(a3 + 16), v29, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
  unsigned int v32 = v31;
  uint64_t v33 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v127, (llvm *)5, 0, 1, 0);
  int v89 = v34;
  uint64_t v90 = v33;
  int v132 = (uint64_t *)v134;
  v134[0] = v123;
  uint64_t v133 = 0x800000001;
  unsigned int v36 = sub_1CD3DBEEC((uint64_t)v115);
  if (v133 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v37 = (uint64_t **)&v132[2 * v133];
  *uint64_t v37 = v36;
  v37[1] = v35;
  unsigned int v38 = v133 + 1;
  LODWORD(v133) = v38;
  if (v38 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v39 = (uint64_t **)&v132[2 * v38];
  *uint64_t v39 = v22;
  v39[1] = v24;
  unsigned int v40 = v133 + 1;
  LODWORD(v133) = v40;
  if (v40 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v41 = (uint64_t **)&v132[2 * v40];
  void *v41 = v26;
  v41[1] = v28;
  unsigned int v42 = v133 + 1;
  LODWORD(v133) = v42;
  uint64_t v43 = v99;
  if (v42 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v44 = (uint64_t **)&v132[2 * v42];
  *uint64_t v44 = v30;
  v44[1] = v32;
  unsigned int v45 = v133 + 1;
  LODWORD(v133) = v45;
  if (v45 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v46 = (uint64_t **)&v132[2 * v45];
  *unsigned int v46 = v90;
  v46[1] = v89;
  LODWORD(v133) = v133 + 1;
  sub_1CD3E5038(v97, (uint64_t)&v132, *(void *)(a3 + 16));
  if (v133 >= HIDWORD(v133)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v132[2 * v133] = v91;
  int v47 = (v92 >> 10) & 3;
  LODWORD(v133) = v133 + 1;
  uint64_t v48 = &unk_1EBCBD920;
  if (v116) {
    uint64_t v49 = &unk_1EBCBD9AC;
  }
  else {
    uint64_t v49 = &unk_1EBCBDA38;
  }
  if (v116) {
    uint64_t v48 = &unk_1EBCBDAC4;
  }
  if (v115[1]) {
    uint64_t v50 = (uint64_t)v49;
  }
  else {
    uint64_t v50 = (uint64_t)v48;
  }
  LOBYTE(v104) = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  uint64_t v107 = 0;
  int v108 = -1;
  LOBYTE(v109) = 0;
  uint64_t v110 = 0;
  unsigned int v111 = -1;
  LOBYTE(v112) = 0;
  uint64_t v113 = 0;
  uint64_t v114 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v95, (uint64_t)&v104, AddrSpace, dword_1CD9362D8[v96 - 1], v94, v93, v50);
  uint64_t v53 = sub_1CD8014C8(*(void *)(a3 + 16), v108, (uint64_t)&v127, v104, v105, v106, v107, v52, v132, v133);
  __int16 v54 = *(llvm::MachinePointerInfo **)(a2 + 96);
  if (llvm::MachinePointerInfo::getAddrSpace(v54) == 2) {
    *((_WORD *)v54 + 16) |= 0x20u;
  }
  uint64_t v55 = *(uint64_t **)(a3 + 16);
  uint64_t v129 = v54;
  sub_1CD8005B8(v55, (uint64_t)v53, &v129, 1);
  if (v96 < 5)
  {
    unint64_t v61 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v62 = *((void *)v61 + 104);
    if (v62) {
      __int16 v63 = *(_WORD *)(v62 + 8);
    }
    else {
      __int16 v63 = 0;
    }
    uint64_t v68 = sub_1CD7F3564(v61, (const char *)0xC9, (uint64_t)&v127, v109, v110, (uint64_t)v53, 0, v63);
    unint64_t v70 = v69;
    uint64_t v100 = v127;
    if (v127) {
      llvm::MetadataTracking::track((uint64_t)&v100, v127, 2);
    }
    int v101 = v128;
    int v71 = sub_1CD3E3318(v97, (uint64_t)v68, (void *)v70, v99, v98, v47, (const llvm::APInt *)&v100, a3);
    unint64_t v73 = v72;
    if (v100) {
      llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
    }
    unsigned int v74 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v75 = *((void *)v74 + 104);
    if (v75) {
      __int16 v76 = *(_WORD *)(v75 + 8);
    }
    else {
      __int16 v76 = 0;
    }
    uint64_t v83 = sub_1CD7F3564(v74, (const char *)0xD8, (uint64_t)&v127, v99, v98, (uint64_t)v71, (void *)v73, v76);
    int v85 = v84;
  }
  else
  {
    uint64_t v102 = v127;
    if (v127) {
      llvm::MetadataTracking::track((uint64_t)&v102, v127, 2);
    }
    int v103 = v128;
    __int16 v56 = sub_1CD3E3318(v97, (uint64_t)v53, 0, v99, v98, v47, (const llvm::APInt *)&v102, a3);
    int v58 = v57;
    if (v102) {
      llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
    }
    uint64_t v129 = v131;
    uint64_t v130 = 0x1000000000;
    if (v111)
    {
      for (unsigned int i = 0; i < v111; ++i)
      {
        int v66 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v114), (const llvm::APInt *)&v127, v109, v110, (uint64_t)v56, v58);
        if (v130 >= (unint64_t)HIDWORD(v130)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v67 = (uint64_t **)((char *)v129 + 16 * v130);
        *uint64_t v67 = v66;
        v67[1] = v65;
        uint64_t v59 = (v130 + 1);
        LODWORD(v130) = v130 + 1;
      }
      unsigned int v60 = (uint64_t *)v129;
      uint64_t v43 = v99;
    }
    else
    {
      uint64_t v59 = 0;
      unsigned int v60 = (uint64_t *)v131;
    }
    uint64_t v78 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v127, v112, v113, v60, v59);
    int v79 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v80 = *((void *)v79 + 104);
    if (v80) {
      __int16 v81 = *(_WORD *)(v80 + 8);
    }
    else {
      __int16 v81 = 0;
    }
    uint64_t v83 = sub_1CD7F3564(v79, (const char *)0xD8, (uint64_t)&v127, v43, v98, (uint64_t)v78, (void *)v77, v81);
    int v85 = v88;
    if (v129 != v131) {
      free(v129);
    }
  }
  uint64_t v86 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v127, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v83, v85, v82, (uint64_t)v53, 1);
  if (v132 != (uint64_t *)v134) {
    free(v132);
  }
  if (v117) {
    llvm::MetadataTracking::untrack((uint64_t)&v117, v117);
  }
  if (v127) {
    llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
  }
  return v86;
}

uint64_t *sub_1CD3E9B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v98 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v5 = *(void *)(a2 + 40);
  int v99 = *(llvm **)v5;
  uint64_t v100 = *(void *)(v5 + 8);
  unsigned int v6 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 80);
  unint64_t v14 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v15 = *(long long **)(a2 + 32);
  long long v97 = *v15;
  long long v134 = *(long long *)((char *)v15 + 40);
  uint64_t v16 = *(unsigned __int8 **)(a2 + 64);
  int v132 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v132, v16, 2);
  }
  int v133 = *(_DWORD *)(a2 + 60);
  uint64_t v17 = v134;
  BOOL v18 = *(unsigned __int8 **)(v134 + 64);
  uint64_t v130 = v18;
  uint64_t v19 = v134;
  if (v18)
  {
    llvm::MetadataTracking::track((uint64_t)&v130, v18, 2);
    uint64_t v19 = v134;
  }
  int v131 = *(_DWORD *)(v17 + 60);
  uint64_t v120 = 0;
  int v121 = 0;
  char v122 = 0;
  uint64_t v123 = 0;
  char v124 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  uint64_t v125 = 0;
  *(void *)&long long v126 = 0;
  DWORD2(v126) = 0;
  uint64_t v129 = a3;
  *(void *)&long long v134 = sub_1CB8F36E0(v19, *((unint64_t *)&v134 + 1), *(llvm::APFloatBase **)(a3 + 16), v9, v10, v11, v12, v13);
  DWORD2(v134) = v20;
  sub_1CD3ED174((uint64_t)&v117, (uint64_t *)&v134, v14, 1, 4, 0, 4, 0, 0);
  uint64_t v21 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v132, (llvm *)5, 0, 1, 0);
  uint64_t v23 = v22;
  uint64_t v138 = (uint64_t *)v140;
  uint64_t v139 = 0x800000000;
  if (!v117)
  {
    v140[0] = v126;
    LODWORD(v139) = 1;
  }
  uint64_t v25 = sub_1CD3DBEEC((uint64_t)&v117);
  if (v139 >= HIDWORD(v139)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v26 = (uint64_t **)&v138[2 * v139];
  *unsigned int v26 = v25;
  v26[1] = v24;
  unsigned int v27 = v139 + 1;
  LODWORD(v139) = v27;
  if (v27 >= HIDWORD(v139)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v28 = (uint64_t **)&v138[2 * v27];
  *int v28 = v21;
  v28[1] = v23;
  LODWORD(v139) = v139 + 1;
  sub_1CD3E5038(a1, (uint64_t)&v138, *(void *)(a3 + 16));
  if (v139 >= HIDWORD(v139)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v29 = (v6 >> 10) & 3;
  *(_OWORD *)&v138[2 * v139] = v97;
  LODWORD(v139) = v139 + 1;
  if (v117)
  {
    if (v118) {
      uint64_t v30 = (char *)&unk_1EBCBDB50;
    }
    else {
      uint64_t v30 = (char *)&unk_1EBCBDC68;
    }
    goto LABEL_13;
  }
  if (v118)
  {
    uint64_t v30 = (char *)&unk_1EBCBD9AC;
LABEL_13:
    if (v119) {
      __int16 v31 = v30;
    }
    else {
      __int16 v31 = v30 + 140;
    }
    goto LABEL_16;
  }
  if (v119) {
    __int16 v31 = &unk_1EBCBDAC4;
  }
  else {
    __int16 v31 = &unk_1EBCBD920;
  }
LABEL_16:
  LOBYTE(v106) = 0;
  uint64_t v107 = 0;
  LOBYTE(v108) = 0;
  uint64_t v109 = 0;
  int v110 = -1;
  LOBYTE(v111) = 0;
  uint64_t v112 = 0;
  unsigned int v113 = -1;
  LOBYTE(v114) = 0;
  uint64_t v115 = 0;
  uint64_t v116 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v98, (uint64_t)&v106, AddrSpace, dword_1CD9362D8[v14 - 1], v8, v7, (uint64_t)v31);
  uint64_t v34 = sub_1CD8014C8(*(void *)(a3 + 16), v110, (uint64_t)&v132, (uint64_t)v106, v107, v108, v109, v33, v138, v139);
  uint64_t v35 = *(uint64_t **)(a3 + 16);
  uint64_t v135 = *(void **)(a2 + 96);
  sub_1CD8005B8(v35, (uint64_t)v34, &v135, 1);
  if (v14 >= 5)
  {
    uint64_t v104 = v132;
    if (v132) {
      llvm::MetadataTracking::track((uint64_t)&v104, v132, 2);
    }
    int v105 = v133;
    uint64_t v46 = v100;
    int v47 = v99;
    uint64_t v48 = sub_1CD3E3318(a1, (uint64_t)v34, 0, v99, v100, v29, (const llvm::APInt *)&v104, a3);
    int v50 = v49;
    if (v104) {
      llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
    }
    uint64_t v135 = v137;
    uint64_t v136 = 0x1000000000;
    if (v113)
    {
      for (unsigned int i = 0; i < v113; ++i)
      {
        int v58 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v116), (const llvm::APInt *)&v132, v111, v112, (uint64_t)v48, v50);
        if (v136 >= (unint64_t)HIDWORD(v136)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v59 = (uint64_t **)((char *)v135 + 16 * v136);
        *uint64_t v59 = v58;
        v59[1] = v57;
        uint64_t v51 = (v136 + 1);
        LODWORD(v136) = v136 + 1;
      }
      uint64_t v52 = (uint64_t *)v135;
      int v47 = v99;
      uint64_t v46 = v100;
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t *)v137;
    }
    unint64_t v61 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v132, v114, v115, v52, v51);
    uint64_t v62 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v63 = *((void *)v62 + 104);
    if (v63) {
      __int16 v64 = *(_WORD *)(v63 + 8);
    }
    else {
      __int16 v64 = 0;
    }
    uint64_t v41 = sub_1CD7F3564(v62, (const char *)0xD8, (uint64_t)&v132, v47, v46, (uint64_t)v61, (void *)v60, v64);
    int v43 = v65;
    if (v135 != v137) {
      free(v135);
    }
  }
  else
  {
    if (v14 == 1)
    {
      uint64_t v53 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v54 = *((void *)v53 + 104);
      if (v54) {
        __int16 v55 = *(_WORD *)(v54 + 8);
      }
      else {
        __int16 v55 = 0;
      }
      int v66 = sub_1CD7F3564(v53, (const char *)0xC9, (uint64_t)&v132, v106, v107, v134, *((void **)&v134 + 1), v55);
      uint64_t v68 = v67;
      uint64_t v69 = *(void *)(a3 + 16);
      int v71 = v106;
      uint64_t v70 = v107;
      unsigned int v72 = sub_1CD7EBF14(v69, 1, (const llvm::APInt *)&v132, v106, v107, 0, 0);
      uint64_t v75 = *(void *)(v69 + 832);
      if (v75) {
        LOWORD(v75) = *(_WORD *)(v75 + 8);
      }
      __int16 v76 = sub_1CCFDED5C(v69, 171, (const llvm::APInt *)&v132, v71, v70, (uint64_t)v66, v68, v74, (uint64_t)v72, v73, v75);
      uint64_t v78 = v77;
      uint64_t v79 = *(void *)(a3 + 16);
      __int16 v81 = v106;
      uint64_t v80 = v107;
      uint64_t v82 = sub_1CD7EBF14(v79, 3, (const llvm::APInt *)&v132, v106, v107, 0, 0);
      uint64_t v85 = *(void *)(v79 + 832);
      if (v85) {
        LOWORD(v85) = *(_WORD *)(v85 + 8);
      }
      uint64_t v86 = sub_1CCFDED5C(v79, 175, (const llvm::APInt *)&v132, v81, v80, (uint64_t)v76, v78, v84, (uint64_t)v82, v83, v85);
      uint64_t v89 = *(void *)(a3 + 16);
      uint64_t v90 = *(void *)(v89 + 832);
      if (v90) {
        LOWORD(v90) = *(_WORD *)(v90 + 8);
      }
      uint64_t v39 = v99;
      uint64_t v38 = v100;
      unsigned int v92 = sub_1CCFDED5C(v89, 177, (const llvm::APInt *)&v132, v106, v107, (uint64_t)v34, 0, v88, (uint64_t)v86, v87, v90);
      __int16 v93 = 0;
      uint64_t v94 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v95 = *((void *)v94 + 104);
      if (v95) {
        __int16 v93 = *(_WORD *)(v95 + 8);
      }
      uint64_t v37 = sub_1CD7F3564(v94, (const char *)0xC9, (uint64_t)&v132, v111, v112, (uint64_t)v92, (void *)v91, v93);
      unint64_t v36 = v96;
    }
    else
    {
      unint64_t v36 = 0;
      uint64_t v37 = v34;
      uint64_t v39 = v99;
      uint64_t v38 = v100;
    }
    uint64_t v102 = v132;
    if (v132) {
      llvm::MetadataTracking::track((uint64_t)&v102, v132, 2);
    }
    int v103 = v133;
    uint64_t v41 = sub_1CD3E3318(a1, (uint64_t)v37, (void *)v36, v39, v38, v29, (const llvm::APInt *)&v102, a3);
    int v43 = v42;
    if (v102) {
      llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
    }
  }
  uint64_t v44 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v132, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v41, v43, v40, (uint64_t)v34, 1);
  if (v138 != (uint64_t *)v140) {
    free(v138);
  }
  if (v120) {
    llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
  }
  if (v130) {
    llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
  }
  if (v132) {
    llvm::MetadataTracking::untrack((uint64_t)&v132, v132);
  }
  return v44;
}

uint64_t *sub_1CD3EA2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v109 = *(llvm **)v5;
  uint64_t v106 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v107 = *(void *)(v5 + 8);
  unsigned int v6 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v105 = *(void *)(a2 + 88);
  unint64_t v13 = sub_1CB8F20C0(*(void *)(a2 + 96));
  unint64_t v14 = *(long long **)(a2 + 32);
  long long v144 = *(long long *)((char *)v14 + 40);
  long long v104 = *v14;
  uint64_t v15 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v142 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v142, v15, 2);
  }
  int v143 = *(_DWORD *)(a2 + 60);
  uint64_t v16 = v144;
  uint64_t v17 = *(unsigned __int8 **)(v144 + 64);
  uint64_t v140 = v17;
  uint64_t v18 = v144;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v140, v17, 2);
    uint64_t v18 = v144;
  }
  int v141 = *(_DWORD *)(v16 + 60);
  uint64_t v130 = 0;
  int v131 = 0;
  char v132 = 0;
  uint64_t v133 = 0;
  char v134 = 0;
  uint64_t v137 = 0;
  int v138 = 0;
  uint64_t v135 = 0;
  *(void *)&long long v136 = 0;
  DWORD2(v136) = 0;
  uint64_t v139 = a3;
  *(void *)&long long v144 = sub_1CB8F36E0(v18, *((unint64_t *)&v144 + 1), *(llvm::APFloatBase **)(a3 + 16), v8, v9, v10, v11, v12);
  DWORD2(v144) = v19;
  sub_1CD3ED174((uint64_t)&v127, (uint64_t *)&v144, v13, 1, 4, 0, 4, 0, 0);
  int v20 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v142, (llvm *)5, 0, 1, 0);
  uint64_t v22 = v21;
  uint64_t v23 = sub_1CD3DBEEC((uint64_t)&v127);
  unint64_t v25 = v24;
  if (v13 == 1)
  {
    uint64_t v26 = *(void *)(a3 + 16);
    uint64_t v125 = v142;
    if (v142) {
      llvm::MetadataTracking::track((uint64_t)&v125, v142, 2);
    }
    int v126 = v143;
    uint64_t v23 = sub_1CD3E8E18(v26, (const llvm::APInt *)&v125, (uint64_t)v23, v25);
    unint64_t v25 = v25 & 0xFFFFFFFF00000000 | v27;
    if (v125) {
      llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
    }
  }
  uint64_t v148 = (uint64_t *)v151;
  unsigned int v150 = 8;
  if (v127)
  {
    int v28 = 0;
  }
  else
  {
    v151[0] = v136;
    int v28 = 1;
  }
  int v29 = (uint64_t **)&v151[v28];
  uint64_t *v29 = v23;
  v29[1] = (uint64_t *)v25;
  uint64_t v30 = (uint64_t **)&v151[v28 + 1];
  *uint64_t v30 = v20;
  v30[1] = v22;
  unsigned int v149 = v28 | 2;
  sub_1CD3E5038(a1, (uint64_t)&v148, *(void *)(a3 + 16));
  if (v149 >= v150) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v31 = (v6 >> 10) & 3;
  *(_OWORD *)&v148[2 * v149++] = v104;
  if (v127)
  {
    if (v128) {
      uint64_t v33 = (char *)&unk_1EBCBDB50;
    }
    else {
      uint64_t v33 = (char *)&unk_1EBCBDC68;
    }
  }
  else
  {
    if (!v128)
    {
      if (v129) {
        unsigned int v32 = &unk_1EBCBDAC4;
      }
      else {
        unsigned int v32 = &unk_1EBCBD920;
      }
      goto LABEL_26;
    }
    uint64_t v33 = (char *)&unk_1EBCBD9AC;
  }
  if (v129) {
    unsigned int v32 = v33;
  }
  else {
    unsigned int v32 = v33 + 140;
  }
LABEL_26:
  LOBYTE(v114) = 0;
  uint64_t v115 = 0;
  LOBYTE(v116) = 0;
  uint64_t v117 = 0;
  int v118 = -1;
  LOBYTE(v119) = 0;
  uint64_t v120 = 0;
  unsigned int v121 = -1;
  LOBYTE(v122) = 0;
  uint64_t v123 = 0;
  uint64_t v124 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v106, (uint64_t)&v114, AddrSpace, dword_1CD9362D8[v13 - 1], v7, v105, (uint64_t)v32);
  unint64_t v36 = sub_1CD8014C8(*(void *)(a3 + 16), v118, (uint64_t)&v142, (uint64_t)v114, v115, v116, v117, v35, v148, v149);
  uint64_t v37 = *(_WORD **)(a2 + 96);
  v37[16] |= 0x20u;
  uint64_t v38 = *(uint64_t **)(a3 + 16);
  uint64_t v145 = v37;
  sub_1CD8005B8(v38, (uint64_t)v36, &v145, 1);
  if (v13 < 5)
  {
    if (v13 == 1)
    {
      unsigned int v45 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v46 = *((void *)v45 + 104);
      if (v46) {
        __int16 v47 = *(_WORD *)(v46 + 8);
      }
      else {
        __int16 v47 = 0;
      }
      __int16 v64 = sub_1CD7F3564(v45, (const char *)0xC9, (uint64_t)&v142, v114, v115, v144, *((void **)&v144 + 1), v47);
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)(a3 + 16);
      uint64_t v68 = v114;
      uint64_t v69 = v115;
      uint64_t v70 = sub_1CD7EBF14(v67, 1, (const llvm::APInt *)&v142, v114, v115, 0, 0);
      uint64_t v73 = *(void *)(v67 + 832);
      if (v73) {
        LOWORD(v73) = *(_WORD *)(v73 + 8);
      }
      uint64_t v74 = sub_1CCFDED5C(v67, 171, (const llvm::APInt *)&v142, v68, v69, (uint64_t)v64, v66, v72, (uint64_t)v70, v71, v73);
      uint64_t v76 = v75;
      uint64_t v77 = *(void *)(a3 + 16);
      uint64_t v78 = v114;
      uint64_t v79 = v115;
      uint64_t v80 = sub_1CD7EBF14(v77, 3, (const llvm::APInt *)&v142, v114, v115, 0, 0);
      uint64_t v83 = *(void *)(v77 + 832);
      if (v83) {
        LOWORD(v83) = *(_WORD *)(v83 + 8);
      }
      uint64_t v84 = sub_1CCFDED5C(v77, 175, (const llvm::APInt *)&v142, v78, v79, (uint64_t)v74, v76, v82, (uint64_t)v80, v81, v83);
      uint64_t v87 = *(void *)(a3 + 16);
      uint64_t v88 = *(void *)(v87 + 832);
      if (v88) {
        LOWORD(v88) = *(_WORD *)(v88 + 8);
      }
      uint64_t v54 = v107;
      uint64_t v90 = sub_1CCFDED5C(v87, 177, (const llvm::APInt *)&v142, v114, v115, (uint64_t)v36, 0, v86, (uint64_t)v84, v85, v88);
      __int16 v91 = 0;
      unsigned int v92 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v93 = *((void *)v92 + 104);
      if (v93) {
        __int16 v91 = *(_WORD *)(v93 + 8);
      }
      uint64_t v53 = sub_1CD7F3564(v92, (const char *)0xC9, (uint64_t)&v142, v119, v120, (uint64_t)v90, (void *)v89, v91);
      unint64_t v52 = v94;
    }
    else
    {
      unint64_t v52 = 0;
      uint64_t v53 = v36;
      uint64_t v54 = v107;
    }
    int v110 = v142;
    if (v142) {
      llvm::MetadataTracking::track((uint64_t)&v110, v142, 2);
    }
    int v111 = v143;
    uint64_t v95 = sub_1CD3E3318(a1, (uint64_t)v53, (void *)v52, v109, v54, v31, (const llvm::APInt *)&v110, a3);
    unint64_t v97 = v96;
    if (v110) {
      llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
    }
    uint64_t v98 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v99 = *((void *)v98 + 104);
    if (v99) {
      __int16 v100 = *(_WORD *)(v99 + 8);
    }
    else {
      __int16 v100 = 0;
    }
    unint64_t v61 = sub_1CD7F3564(v98, (const char *)0xD8, (uint64_t)&v142, v109, v54, (uint64_t)v95, (void *)v97, v100);
    int v63 = v101;
  }
  else
  {
    uint64_t v112 = v142;
    if (v142) {
      llvm::MetadataTracking::track((uint64_t)&v112, v142, 2);
    }
    int v113 = v143;
    uint64_t v39 = v107;
    uint64_t v40 = sub_1CD3E3318(a1, (uint64_t)v36, 0, v109, v107, (v6 >> 10) & 3, (const llvm::APInt *)&v112, a3);
    int v42 = v41;
    if (v112) {
      llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
    }
    uint64_t v145 = v147;
    uint64_t v146 = 0x1000000000;
    if (v121)
    {
      for (unsigned int i = 0; i < v121; ++i)
      {
        int v50 = sub_1CD8015C0(*(void *)(a3 + 16), i + HIDWORD(v124), (const llvm::APInt *)&v142, v119, v120, (uint64_t)v40, v42);
        if (v146 >= (unint64_t)HIDWORD(v146)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v51 = (uint64_t **)((char *)v145 + 16 * v146);
        *uint64_t v51 = v50;
        v51[1] = v49;
        uint64_t v43 = (v146 + 1);
        LODWORD(v146) = v146 + 1;
      }
      uint64_t v44 = (uint64_t *)v145;
      uint64_t v39 = v107;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = (uint64_t *)v147;
    }
    __int16 v56 = sub_1CD7EC8DC(*(void **)(a3 + 16), (const char *)0x92, (const llvm::APInt *)&v142, v122, v123, v44, v43);
    int v57 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v58 = *((void *)v57 + 104);
    if (v58) {
      __int16 v59 = *(_WORD *)(v58 + 8);
    }
    else {
      __int16 v59 = 0;
    }
    unint64_t v61 = sub_1CD7F3564(v57, (const char *)0xD8, (uint64_t)&v142, v109, v39, (uint64_t)v56, (void *)v55, v59);
    int v63 = v62;
    if (v145 != v147) {
      free(v145);
    }
  }
  uint64_t v102 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v142, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v61, v63, v60, (uint64_t)v36, 1);
  if (v148 != (uint64_t *)v151) {
    free(v148);
  }
  if (v130) {
    llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
  }
  if (v140) {
    llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
  }
  if (v142) {
    llvm::MetadataTracking::untrack((uint64_t)&v142, v142);
  }
  return v102;
}

uint64_t *sub_1CD3EAAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v108[16] = *MEMORY[0x1E4F143B8];
  uint64_t v86 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  unint64_t v89 = sub_1CB8F20C0(*(void *)(a2 + 96));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 64);
  int v101 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v101, v5, 2);
  }
  int v102 = *(_DWORD *)(a2 + 60);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v12 = v8[5];
  unint64_t v11 = v8[6];
  uint64_t v14 = v8[10];
  unint64_t v13 = v8[11];
  if (*(_WORD *)(a2 + 24) == 254 && (*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    int v15 = *(void *)(a2 + 80);
    if (*(void *)(a2 + 80))
    {
      if ((v15 - 120) < 0x20 || (v15 - 2) < 6 || (v15 - 15) < 0x3C)
      {
LABEL_9:
        uint64_t v17 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v18 = *((void *)v17 + 104);
        if (v18) {
          __int16 v19 = *(_WORD *)(v18 + 8);
        }
        else {
          __int16 v19 = 0;
        }
        unsigned int v27 = sub_1CD7F3564(v17, (const char *)0xC9, (uint64_t)&v101, *(llvm **)(a2 + 80), *(void *)(a2 + 88), v12, (void *)v11, v19);
LABEL_19:
        uint64_t v12 = (uint64_t)v27;
        unint64_t v11 = v11 & 0xFFFFFFFF00000000 | v28;
        goto LABEL_20;
      }
    }
    else
    {
      if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
        int v16 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
      }
      else {
        int v16 = *(_DWORD *)(v7 + 8);
      }
      if (v16 == 13) {
        goto LABEL_9;
      }
    }
    uint64_t v84 = *(llvm **)(a2 + 80);
    uint64_t v20 = *(void *)(a3 + 16);
    uint64_t v21 = sub_1CD7EBF14(v20, 0, (const llvm::APInt *)&v101, (llvm *)5, 0, 0, 0);
    __int16 v24 = 0;
    uint64_t v25 = *(void *)(v20 + 832);
    if (v25) {
      __int16 v24 = *(_WORD *)(v25 + 8);
    }
    uint64_t v82 = (uint64_t)v21;
    uint64_t v26 = v20;
    uint64_t v6 = (uint64_t)v84;
    unsigned int v27 = sub_1CCFDED5C(v26, 212, (const llvm::APInt *)&v101, v84, v7, v12, v11, v23, v82, v22, v24);
    goto LABEL_19;
  }
LABEL_20:
  int v29 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v30 = *((void *)v29 + 104);
  if (v30) {
    __int16 v31 = *(_WORD *)(v30 + 8);
  }
  else {
    __int16 v31 = 0;
  }
  unsigned int v32 = sub_1CD7F3564(v29, (const char *)0xC9, (uint64_t)&v101, (llvm *)5, 0, v14, (void *)v13, v31);
  uint64_t v106 = v108;
  v108[0] = v9;
  v108[1] = v10;
  v108[2] = v12;
  v108[3] = v11;
  unint64_t v34 = v11;
  uint64_t v35 = *(llvm::MachinePointerInfo **)(a2 + 96);
  v108[4] = v32;
  v108[5] = v13 & 0xFFFFFFFF00000000 | v33;
  uint64_t v107 = 0x800000003;
  v90[0] = 0;
  uint64_t v91 = 0;
  char v92 = 0;
  uint64_t v93 = 0;
  int v94 = -1;
  LOBYTE(v95) = 0;
  uint64_t v96 = 0;
  unsigned int v97 = -1;
  LOBYTE(v98) = 0;
  uint64_t v99 = 0;
  uint64_t v100 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(v35);
  unint64_t v37 = v89;
  sub_1CB8F345C(v86, (uint64_t)v90, AddrSpace, dword_1CD9362D8[v89 - 1], v6, v7, (uint64_t)&unk_1EBCBDD80);
  uint64_t v38 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v40 = v38;
  uint64_t v42 = v41;
  if (v89 >= 5)
  {
    uint64_t v83 = v38;
    uint64_t v46 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v47 = *((void *)v46 + 104);
    uint64_t v48 = v6;
    if (v47) {
      __int16 v49 = *(_WORD *)(v47 + 8);
    }
    else {
      __int16 v49 = 0;
    }
    uint64_t v85 = sub_1CD7F3564(v46, (const char *)0xD8, (uint64_t)&v101, v98, v99, v12, (void *)v34, v49);
    unsigned int v87 = v53;
    int v103 = v105;
    uint64_t v104 = 0x2100000000;
    unsigned int v55 = sub_1CD7EBF14(*(void *)(a3 + 16), v100, (const llvm::APInt *)&v101, (llvm *)5, 0, 1, 0);
    if (v104 >= HIDWORD(v104)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v56 = (uint64_t **)((char *)v103 + 16 * v104);
    uint64_t *v56 = v55;
    v56[1] = v54;
    unsigned int v57 = v104 + 1;
    LODWORD(v104) = v104 + 1;
    if (v97)
    {
      unint64_t v58 = 0;
      unint64_t v59 = v34 & 0xFFFFFFFF00000000 | v87;
      do
      {
        uint64_t v60 = *(void *)(a3 + 16);
        unint64_t v61 = v95;
        uint64_t v88 = v96;
        int v62 = sub_1CD7EBF14(v60, v58, (const llvm::APInt *)&v101, (llvm *)5, 0, 0, 0);
        __int16 v65 = 0;
        uint64_t v66 = *(void *)(v60 + 832);
        if (v66) {
          __int16 v65 = *(_WORD *)(v66 + 8);
        }
        uint64_t v68 = sub_1CCFDED5C(v60, 148, (const llvm::APInt *)&v101, v61, v88, (uint64_t)v85, v59, v64, (uint64_t)v62, v63, v65);
        if (v104 >= (unint64_t)HIDWORD(v104)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v69 = (uint64_t **)((char *)v103 + 16 * v104);
        *uint64_t v69 = v68;
        v69[1] = v67;
        LODWORD(v104) = v104 + 1;
        uint64_t v71 = sub_1CD7EBF14(*(void *)(a3 + 16), (v58 + HIDWORD(v100)), (const llvm::APInt *)&v101, (llvm *)5, 0, 1, 0);
        if (v104 >= (unint64_t)HIDWORD(v104)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v72 = (uint64_t **)((char *)v103 + 16 * v104);
        *uint64_t v72 = v71;
        v72[1] = v70;
        unsigned int v57 = v104 + 1;
        LODWORD(v104) = v104 + 1;
        ++v58;
      }
      while (v58 < v97);
      unint64_t v37 = v89;
    }
    uint64_t v6 = v48;
    if (v37 == 6)
    {
      uint64_t v77 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
      if (v104 >= HIDWORD(v104)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v78 = (uint64_t **)((char *)v103 + 16 * v104);
      *uint64_t v78 = v77;
      v78[1] = v76;
      LODWORD(v104) = v104 + 1;
      uint64_t v80 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v101, (llvm *)5, 0, 1, 0);
      if (v104 >= HIDWORD(v104)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v81 = (uint64_t **)((char *)v103 + 16 * v104);
      *uint64_t v81 = v80;
      v81[1] = v79;
      unsigned int v57 = v104 + 1;
      LODWORD(v104) = v104 + 1;
      uint64_t v6 = v48;
    }
    uint64_t v73 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v101, (llvm *)0xAE, 0, (uint64_t *)v103, v57);
    uint64_t v43 = v106;
    v106[2] = (uint64_t)v73;
    *((_DWORD *)v43 + 6) = 0;
    if (v103 != v105)
    {
      free(v103);
      uint64_t v43 = v106;
    }
    uint64_t v40 = v83;
  }
  else
  {
    uint64_t v43 = v106;
    if (v89 == 1)
    {
      int v50 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v51 = *((void *)v50 + 104);
      if (v51) {
        __int16 v52 = *(_WORD *)(v51 + 8);
      }
      else {
        __int16 v52 = 0;
      }
      uint64_t v74 = sub_1CD7F3564(v50, (const char *)0xC8, (uint64_t)&v101, (llvm *)4, 0, v106[2], (void *)v106[3], v52);
      uint64_t v43 = v106;
      v106[2] = (uint64_t)v74;
      *((_DWORD *)v43 + 6) = v75;
    }
  }
  uint64_t v44 = sub_1CD7F9CC8(*(void *)(a3 + 16), v94, (uint64_t)&v101, v40, v42, v43, v107, v39, v6, v7, *(void *)(a2 + 96));
  if (v106 != v108) {
    free(v106);
  }
  if (v101) {
    llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
  }
  return v44;
}

uint64_t *sub_1CD3EB140(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v150 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v150, v9, 2);
  }
  int v151 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = *(llvm **)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  unint64_t v123 = sub_1CB8F20C0(*(void *)(a2 + 96));
  int v12 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v121 = (uint64_t)v10;
  char v122 = v8;
  uint64_t v120 = v11;
  if (v12 == 291)
  {
    uint64_t v18 = *(uint64_t **)(a2 + 32);
    uint64_t v118 = *v18;
    unsigned int v117 = *((_DWORD *)v18 + 2);
    uint64_t v126 = v18[10];
    uint64_t v19 = *((unsigned int *)v18 + 22);
LABEL_13:
    uint64_t v125 = v19;
    goto LABEL_14;
  }
  if (v12 == 254)
  {
    unint64_t v13 = *(uint64_t **)(a2 + 32);
    uint64_t v125 = *((unsigned int *)v13 + 12);
    uint64_t v126 = v13[5];
    uint64_t v118 = *v13;
    unsigned int v117 = *((_DWORD *)v13 + 2);
    if ((*(_WORD *)(a2 + 26) & 0x400) == 0) {
      goto LABEL_14;
    }
    if ((_BYTE)v10)
    {
      if (v10 - 120 < 0x20
        || v10 - 2 < 6
        || v10 - 15 < 0x3C)
      {
LABEL_10:
        int v15 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v16 = *((void *)v15 + 104);
        if (v16) {
          __int16 v17 = *(_WORD *)(v16 + 8);
        }
        else {
          __int16 v17 = 0;
        }
        uint64_t v74 = sub_1CD7F3564(v15, (const char *)0xC9, (uint64_t)&v150, v10, v11, v126, (void *)v125, v17);
LABEL_63:
        uint64_t v126 = (uint64_t)v74;
        uint64_t v19 = v75;
        goto LABEL_13;
      }
    }
    else
    {
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
        int v14 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
      }
      else {
        int v14 = *(_DWORD *)(v11 + 8);
      }
      if (v14 == 13) {
        goto LABEL_10;
      }
    }
    uint64_t v68 = *(void *)(a3 + 16);
    uint64_t v69 = sub_1CD7EBF14(v68, 0, (const llvm::APInt *)&v150, (llvm *)5, 0, 0, 0);
    __int16 v72 = 0;
    uint64_t v73 = *(void *)(v68 + 832);
    if (v73) {
      __int16 v72 = *(_WORD *)(v73 + 8);
    }
    uint64_t v74 = sub_1CCFDED5C(v68, 212, (const llvm::APInt *)&v150, v10, v11, v126, v125, v71, (uint64_t)v69, v70, v72);
    goto LABEL_63;
  }
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v118 = 0;
  unsigned int v117 = 0;
LABEL_14:
  uint64_t v140 = 0;
  int v141 = 0;
  char v142 = 0;
  uint64_t v143 = 0;
  char v144 = 0;
  uint64_t v147 = 0;
  int v148 = 0;
  uint64_t v145 = 0;
  *(void *)&long long v146 = 0;
  DWORD2(v146) = 0;
  uint64_t v149 = a3;
  sub_1CD3ED078((uint64_t)v138, a2, 6, 0, 5, 0, a4);
  uint64_t v20 = *(uint64_t **)(*(void *)(a3 + 16) + 40);
  uint64_t v21 = *(void *)(a1 + 184296);
  uint64_t v22 = *v20;
  LODWORD(v152) = 0;
  BOOL v23 = sub_1CD3CA314(v21, v22, "StoreMCUCohMode", &v152);
  uint64_t v24 = v152;
  uint64_t v25 = *(void *)(a1 + 184296);
  uint64_t v26 = *v20;
  LODWORD(v152) = 0;
  BOOL v27 = sub_1CD3CA314(v25, v26, "StoreSLCCohMode", &v152);
  uint64_t v28 = v152;
  int v29 = *(unsigned char **)(a1 + 184296);
  uint64_t v124 = a2;
  uint64_t v119 = a1;
  if (v29[310])
  {
    uint64_t v30 = 1;
  }
  else if (v29[311])
  {
    uint64_t v30 = 2;
  }
  else if (v29[312])
  {
    uint64_t v30 = 3;
  }
  else
  {
    uint64_t v30 = 0;
  }
  __int16 v31 = sub_1CD7EBF14(*(void *)(a3 + 16), v30, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  unsigned int v33 = v32;
  if (v23) {
    uint64_t v34 = v24;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = sub_1CD7EBF14(*(void *)(a3 + 16), v34, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  unint64_t v37 = v36;
  if (v27) {
    uint64_t v38 = v28;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = sub_1CD7EBF14(*(void *)(a3 + 16), v38, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  uint64_t v41 = v40;
  uint64_t v116 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  uint64_t v43 = v42;
  uint64_t v155 = (void **)v157;
  v157[0] = v126;
  v157[1] = v125;
  long long v158 = v146;
  uint64_t v156 = 0x800000002;
  unsigned int v45 = sub_1CD3DBEEC((uint64_t)v138);
  if (v156 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v46 = (uint64_t **)&v155[2 * v156];
  *uint64_t v46 = v45;
  v46[1] = v44;
  unsigned int v47 = v156 + 1;
  LODWORD(v156) = v47;
  if (v47 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v48 = (uint64_t **)&v155[2 * v47];
  *uint64_t v48 = v31;
  v48[1] = v33;
  unsigned int v49 = v156 + 1;
  LODWORD(v156) = v49;
  if (v49 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v50 = (uint64_t **)&v155[2 * v49];
  *int v50 = v35;
  v50[1] = v37;
  unsigned int v51 = v156 + 1;
  LODWORD(v156) = v51;
  if (v51 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v52 = (uint64_t **)&v155[2 * v51];
  *__int16 v52 = v39;
  v52[1] = v41;
  unsigned int v53 = v156 + 1;
  LODWORD(v156) = v53;
  if (v53 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v54 = (uint64_t **)&v155[2 * v53];
  *uint64_t v54 = v116;
  v54[1] = v43;
  LODWORD(v156) = v156 + 1;
  sub_1CD3E5038(v119, (uint64_t)&v155, *(void *)(a3 + 16));
  if (v156 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v55 = (char *)&v155[2 * v156];
  *(void *)unsigned int v55 = v118;
  *((void *)v55 + 1) = v117;
  LODWORD(v156) = v156 + 1;
  __int16 v56 = &unk_1EBCBDD80;
  if (v139) {
    unsigned int v57 = &unk_1EBCBDE0C;
  }
  else {
    unsigned int v57 = &unk_1EBCBDE98;
  }
  if (v139) {
    __int16 v56 = &unk_1EBCBDF24;
  }
  if (v138[1]) {
    uint64_t v58 = (uint64_t)v57;
  }
  else {
    uint64_t v58 = (uint64_t)v56;
  }
  v127[0] = 0;
  uint64_t v128 = 0;
  char v129 = 0;
  uint64_t v130 = 0;
  int v131 = -1;
  LOBYTE(v132) = 0;
  uint64_t v133 = 0;
  unsigned int v134 = -1;
  LOBYTE(v135) = 0;
  uint64_t v136 = 0;
  uint64_t v137 = -1;
  uint64_t v59 = v124;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(v124 + 96));
  unint64_t v61 = v123;
  sub_1CB8F345C(v122, (uint64_t)v127, AddrSpace, dword_1CD9362D8[v123 - 1], v121, v120, v58);
  uint64_t v62 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v64 = v63;
  if (v123 >= 5)
  {
    uint64_t v76 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v77 = *((void *)v76 + 104);
    if (v77) {
      __int16 v78 = *(_WORD *)(v77 + 8);
    }
    else {
      __int16 v78 = 0;
    }
    uint64_t v82 = sub_1CD7F3564(v76, (const char *)0xD8, (uint64_t)&v150, v135, v136, v126, (void *)v125, v78);
    unsigned int v84 = v83;
    uint64_t v152 = v154;
    uint64_t v153 = 0x2100000000;
    uint64_t v86 = sub_1CD7EBF14(*(void *)(a3 + 16), v137, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
    if (v153 >= HIDWORD(v153)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v87 = (uint64_t **)((char *)v152 + 16 * v153);
    *unsigned int v87 = v86;
    v87[1] = v85;
    unsigned int v88 = v153 + 1;
    LODWORD(v153) = v153 + 1;
    if (v134)
    {
      unint64_t v89 = 0;
      uint64_t v90 = v84;
      do
      {
        uint64_t v91 = *(void *)(a3 + 16);
        char v92 = v132;
        uint64_t v93 = v133;
        int v94 = sub_1CD7EBF14(v91, v89, (const llvm::APInt *)&v150, (llvm *)5, 0, 0, 0);
        __int16 v97 = 0;
        uint64_t v98 = *(void *)(v91 + 832);
        if (v98) {
          __int16 v97 = *(_WORD *)(v98 + 8);
        }
        uint64_t v100 = sub_1CCFDED5C(v91, 148, (const llvm::APInt *)&v150, v92, v93, (uint64_t)v82, v90, v96, (uint64_t)v94, v95, v97);
        if (v153 >= (unint64_t)HIDWORD(v153)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v101 = (uint64_t **)((char *)v152 + 16 * v153);
        *int v101 = v100;
        v101[1] = v99;
        LODWORD(v153) = v153 + 1;
        int v103 = sub_1CD7EBF14(*(void *)(a3 + 16), (v89 + HIDWORD(v137)), (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
        if (v153 >= (unint64_t)HIDWORD(v153)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v104 = (uint64_t **)((char *)v152 + 16 * v153);
        unsigned __int8 *v104 = v103;
        v104[1] = v102;
        unsigned int v88 = v153 + 1;
        LODWORD(v153) = v153 + 1;
        ++v89;
      }
      while (v89 < v134);
      unint64_t v61 = v123;
      uint64_t v59 = v124;
    }
    if (v61 == 6)
    {
      int v111 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
      if (v153 >= HIDWORD(v153)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v112 = (uint64_t **)((char *)v152 + 16 * v153);
      unsigned __int8 *v112 = v111;
      v112[1] = v110;
      LODWORD(v153) = v153 + 1;
      uint64_t v114 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
      if (v153 >= HIDWORD(v153)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v115 = (uint64_t **)((char *)v152 + 16 * v153);
      *uint64_t v115 = v114;
      v115[1] = v113;
      unsigned int v88 = v153 + 1;
      LODWORD(v153) = v153 + 1;
    }
    uint64_t v105 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v150, (llvm *)0xAE, 0, (uint64_t *)v152, v88);
    uint64_t v106 = v155;
    *uint64_t v155 = v105;
    *((_DWORD *)v106 + 2) = 0;
    if (v152 != v154) {
      free(v152);
    }
  }
  if (v61 == 1)
  {
    uint64_t v79 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v80 = *((void *)v79 + 104);
    if (v80) {
      __int16 v81 = *(_WORD *)(v80 + 8);
    }
    else {
      __int16 v81 = 0;
    }
    uint64_t v107 = sub_1CD7F3564(v79, (const char *)0xC8, (uint64_t)&v150, (llvm *)4, 0, (uint64_t)*v155, v155[1], v81);
    uint64_t v108 = v155;
    *uint64_t v155 = v107;
    *((_DWORD *)v108 + 2) = v109;
  }
  __int16 v65 = sub_1CD801044(*(void *)(a3 + 16), v131, (uint64_t)&v150, v62, v64, (uint64_t *)v155, v156);
  uint64_t v66 = *(uint64_t **)(a3 + 16);
  uint64_t v152 = *(void **)(v59 + 96);
  sub_1CD8005B8(v66, (uint64_t)v65, &v152, 1);
  if (v155 != v157) {
    free(v155);
  }
  if (v140) {
    llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
  }
  if (v150) {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
  }
  return v65;
}

uint64_t *sub_1CD3EBB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  unint64_t v94 = sub_1CB8F20C0(*(void *)(a2 + 96));
  int v12 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v123 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v123, v12, 2);
  }
  int v124 = *(_DWORD *)(a2 + 60);
  unint64_t v13 = *(llvm **)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v121 = 0;
  LODWORD(v122) = 0;
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v90 = *(void *)v15;
  uint64_t v16 = *(unsigned int *)(v15 + 8);
  uint64_t v17 = *(void *)(v15 + 40);
  uint64_t v18 = *(unsigned int *)(v15 + 48);
  uint64_t v19 = *(uint64_t **)(v15 + 80);
  uint64_t v121 = v19;
  LODWORD(v122) = *(_DWORD *)(v15 + 88);
  uint64_t v20 = (unsigned __int8 *)v19[8];
  uint64_t v119 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v119, v20, 2);
  }
  int v120 = *((_DWORD *)v19 + 15);
  uint64_t v91 = a1;
  uint64_t v92 = (uint64_t)v13;
  if (*(_WORD *)(a2 + 24) != 254 || (*(_WORD *)(a2 + 26) & 0x400) == 0)
  {
    uint64_t v21 = v14;
    goto LABEL_8;
  }
  if (!(_BYTE)v13)
  {
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      int v45 = *(unsigned __int8 *)(**(void **)(v14 + 16) + 8);
    }
    else {
      int v45 = *(_DWORD *)(v14 + 8);
    }
    if (v45 == 13) {
      goto LABEL_36;
    }
LABEL_45:
    uint64_t v49 = *(void *)(a3 + 16);
    int v50 = sub_1CD7EBF14(v49, 0, (const llvm::APInt *)&v123, (llvm *)5, 0, 0, 0);
    __int16 v53 = 0;
    uint64_t v54 = *(void *)(v49 + 832);
    if (v54) {
      __int16 v53 = *(_WORD *)(v54 + 8);
    }
    uint64_t v21 = v14;
    unsigned int v55 = sub_1CCFDED5C(v49, 212, (const llvm::APInt *)&v123, v13, v14, v17, v18, v52, (uint64_t)v50, v51, v53);
    goto LABEL_50;
  }
  if (v13 - 120 >= 0x20
    && v13 - 2 >= 6
    && v13 - 15 >= 0x3C)
  {
    goto LABEL_45;
  }
LABEL_36:
  uint64_t v46 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v47 = *((void *)v46 + 104);
  if (v47) {
    __int16 v48 = *(_WORD *)(v47 + 8);
  }
  else {
    __int16 v48 = 0;
  }
  uint64_t v21 = v14;
  unsigned int v55 = sub_1CD7F3564(v46, (const char *)0xC9, (uint64_t)&v123, v13, v14, v17, (void *)v18, v48);
LABEL_50:
  uint64_t v17 = (uint64_t)v55;
  uint64_t v18 = v56;
LABEL_8:
  int v109 = 0;
  int v110 = 0;
  char v111 = 0;
  uint64_t v112 = 0;
  char v113 = 0;
  uint64_t v116 = 0;
  int v117 = 0;
  uint64_t v114 = 0;
  *(void *)&long long v115 = 0;
  DWORD2(v115) = 0;
  uint64_t v118 = a3;
  uint64_t v121 = sub_1CB8F36E0((uint64_t)v121, v122, *(llvm::APFloatBase **)(a3 + 16), v7, v8, v9, v10, v11);
  LODWORD(v122) = v22;
  sub_1CD3ED174((uint64_t)&v106, (uint64_t *)&v121, v94, 1, 4, 0, 4, 0, 0);
  BOOL v23 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v123, (llvm *)5, 0, 1, 0);
  uint64_t v25 = v24;
  uint64_t v128 = v130;
  uint64_t v26 = v17;
  v130[0] = v17;
  v130[1] = v18;
  uint64_t v129 = 0x800000001;
  if (!v106)
  {
    long long v131 = v115;
    LODWORD(v129) = 2;
  }
  uint64_t v28 = sub_1CD3DBEEC((uint64_t)&v106);
  if (v129 >= HIDWORD(v129)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v29 = (uint64_t **)&v128[2 * v129];
  unsigned char *v29 = v28;
  v29[1] = v27;
  unsigned int v30 = v129 + 1;
  LODWORD(v129) = v30;
  if (v30 >= HIDWORD(v129)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v31 = (uint64_t **)&v128[2 * v30];
  *__int16 v31 = v23;
  v31[1] = v25;
  LODWORD(v129) = v129 + 1;
  sub_1CD3E5038(v91, (uint64_t)&v128, *(void *)(a3 + 16));
  uint64_t v32 = v26;
  if (v129 >= HIDWORD(v129)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v33 = &v128[2 * v129];
  *unsigned int v33 = v90;
  v33[1] = v16;
  LODWORD(v129) = v129 + 1;
  uint64_t v34 = v6;
  if (v106)
  {
    unint64_t v35 = v94;
    if (v107) {
      unint64_t v36 = (char *)&unk_1EBCBDFB0;
    }
    else {
      unint64_t v36 = (char *)&unk_1EBCBE0C8;
    }
    goto LABEL_16;
  }
  unint64_t v35 = v94;
  if (v107)
  {
    unint64_t v36 = (char *)&unk_1EBCBDE0C;
LABEL_16:
    if (v108) {
      unint64_t v37 = v36;
    }
    else {
      unint64_t v37 = v36 + 140;
    }
    goto LABEL_19;
  }
  if (v108) {
    unint64_t v37 = &unk_1EBCBDF24;
  }
  else {
    unint64_t v37 = &unk_1EBCBDD80;
  }
LABEL_19:
  v95[0] = 0;
  uint64_t v96 = 0;
  char v97 = 0;
  uint64_t v98 = 0;
  int v99 = -1;
  LOBYTE(v100) = 0;
  uint64_t v101 = 0;
  unsigned int v102 = -1;
  LOBYTE(v103) = 0;
  uint64_t v104 = 0;
  uint64_t v105 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v34, (uint64_t)v95, AddrSpace, dword_1CD9362D8[v35 - 1], v92, v21, (uint64_t)v37);
  uint64_t v39 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v41 = v40;
  if (v35 >= 5)
  {
    unsigned int v57 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v58 = *((void *)v57 + 104);
    if (v58) {
      __int16 v59 = *(_WORD *)(v58 + 8);
    }
    else {
      __int16 v59 = 0;
    }
    uint64_t v93 = sub_1CD7F3564(v57, (const char *)0xD8, (uint64_t)&v123, v103, v104, v32, (void *)v18, v59);
    unsigned int v61 = v60;
    uint64_t v125 = v127;
    uint64_t v126 = 0x2100000000;
    uint64_t v63 = sub_1CD7EBF14(*(void *)(a3 + 16), v105, (const llvm::APInt *)&v123, (llvm *)5, 0, 1, 0);
    if (v126 >= HIDWORD(v126)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v64 = (uint64_t **)((char *)v125 + 16 * v126);
    *uint64_t v64 = v63;
    v64[1] = v62;
    unsigned int v65 = v126 + 1;
    LODWORD(v126) = v126 + 1;
    if (v102)
    {
      unint64_t v66 = 0;
      uint64_t v67 = v61;
      do
      {
        uint64_t v68 = *(void *)(a3 + 16);
        uint64_t v69 = v100;
        uint64_t v70 = v101;
        uint64_t v71 = sub_1CD7EBF14(v68, v66, (const llvm::APInt *)&v123, (llvm *)5, 0, 0, 0);
        __int16 v74 = 0;
        uint64_t v75 = *(void *)(v68 + 832);
        if (v75) {
          __int16 v74 = *(_WORD *)(v75 + 8);
        }
        uint64_t v77 = sub_1CCFDED5C(v68, 148, (const llvm::APInt *)&v123, v69, v70, (uint64_t)v93, v67, v73, (uint64_t)v71, v72, v74);
        if (v126 >= (unint64_t)HIDWORD(v126)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v35 = v94;
        __int16 v78 = (uint64_t **)((char *)v125 + 16 * v126);
        *__int16 v78 = v77;
        v78[1] = v76;
        LODWORD(v126) = v126 + 1;
        uint64_t v80 = sub_1CD7EBF14(*(void *)(a3 + 16), (v66 + HIDWORD(v105)), (const llvm::APInt *)&v123, (llvm *)5, 0, 1, 0);
        if (v126 >= (unint64_t)HIDWORD(v126)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        __int16 v81 = (uint64_t **)((char *)v125 + 16 * v126);
        *__int16 v81 = v80;
        v81[1] = v79;
        unsigned int v65 = v126 + 1;
        LODWORD(v126) = v126 + 1;
        ++v66;
      }
      while (v66 < v102);
    }
    else
    {
      unint64_t v35 = v94;
    }
    if (v35 == 6)
    {
      uint64_t v85 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
      if (v126 >= HIDWORD(v126)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v86 = (uint64_t **)((char *)v125 + 16 * v126);
      *uint64_t v86 = v85;
      v86[1] = v84;
      LODWORD(v126) = v126 + 1;
      unsigned int v88 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v123, (llvm *)5, 0, 1, 0);
      if (v126 >= HIDWORD(v126)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v89 = (uint64_t **)((char *)v125 + 16 * v126);
      *unint64_t v89 = v88;
      v89[1] = v87;
      unsigned int v65 = v126 + 1;
      LODWORD(v126) = v126 + 1;
    }
    uint64_t v82 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v123, (llvm *)0xAE, 0, (uint64_t *)v125, v65);
    unsigned int v83 = v128;
    *uint64_t v128 = (uint64_t)v82;
    *((_DWORD *)v83 + 2) = 0;
    if (v125 != v127) {
      free(v125);
    }
  }
  if (v35 == 1) {
    llvm::report_fatal_error((llvm *)"Store of byte to local memory is unsupported", (const llvm::Twine *)1);
  }
  uint64_t v42 = sub_1CD801044(*(void *)(a3 + 16), v99, (uint64_t)&v123, v39, v41, v128, v129);
  uint64_t v43 = *(uint64_t **)(a3 + 16);
  uint64_t v125 = *(void **)(a2 + 96);
  sub_1CD8005B8(v43, (uint64_t)v42, &v125, 1);
  if (v128 != v130) {
    free(v128);
  }
  if (v109) {
    llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
  }
  if (v119) {
    llvm::MetadataTracking::untrack((uint64_t)&v119, v119);
  }
  if (v123) {
    llvm::MetadataTracking::untrack((uint64_t)&v123, v123);
  }
  return v42;
}

uint64_t *sub_1CD3EC3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
  unint64_t v11 = sub_1CB8F20C0(*(void *)(a2 + 96));
  int v12 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v125 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v125, v12, 2);
  }
  int v126 = *(_DWORD *)(a2 + 60);
  unint64_t v13 = *(llvm **)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  unint64_t v123 = 0;
  LODWORD(v124) = 0;
  uint64_t v90 = v5;
  if (*(_WORD *)(a2 + 24) != 254)
  {
    uint64_t v91 = 0;
    uint64_t v93 = 0;
    uint64_t v87 = 0;
    unsigned int v17 = 0;
    goto LABEL_12;
  }
  uint64_t v15 = *(uint64_t **)(a2 + 32);
  uint64_t v16 = *v15;
  unsigned int v17 = *((_DWORD *)v15 + 2);
  uint64_t v91 = *((unsigned int *)v15 + 12);
  uint64_t v93 = v15[5];
  unint64_t v123 = (uint64_t *)v15[10];
  LODWORD(v124) = *((_DWORD *)v15 + 22);
  uint64_t v87 = v16;
  if ((*(unsigned char *)(a2 + 27) & 4) == 0) {
    goto LABEL_12;
  }
  if (!(_BYTE)v13)
  {
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      int v18 = *(unsigned __int8 *)(**(void **)(v14 + 16) + 8);
    }
    else {
      int v18 = *(_DWORD *)(v14 + 8);
    }
    if (v18 == 13) {
      goto LABEL_9;
    }
LABEL_49:
    uint64_t v47 = *(void *)(a3 + 16);
    __int16 v48 = sub_1CD7EBF14(v47, 0, (const llvm::APInt *)&v125, (llvm *)5, 0, 0, 0);
    __int16 v51 = 0;
    uint64_t v52 = *(void *)(v47 + 832);
    if (v52) {
      __int16 v51 = *(_WORD *)(v52 + 8);
    }
    __int16 v53 = sub_1CCFDED5C(v47, 212, (const llvm::APInt *)&v125, v13, v14, v93, v91, v50, (uint64_t)v48, v49, v51);
    goto LABEL_54;
  }
  if (v13 - 120 >= 0x20
    && v13 - 2 >= 6
    && v13 - 15 >= 0x3C)
  {
    goto LABEL_49;
  }
LABEL_9:
  uint64_t v19 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v20 = *((void *)v19 + 104);
  if (v20) {
    __int16 v21 = *(_WORD *)(v20 + 8);
  }
  else {
    __int16 v21 = 0;
  }
  __int16 v53 = sub_1CD7F3564(v19, (const char *)0xC9, (uint64_t)&v125, v13, v14, v93, (void *)v91, v21);
LABEL_54:
  uint64_t v91 = v54;
  uint64_t v93 = (uint64_t)v53;
LABEL_12:
  uint64_t v89 = (uint64_t)v13;
  uint64_t v22 = (uint64_t)v123;
  BOOL v23 = (unsigned __int8 *)v123[8];
  uint64_t v121 = v23;
  uint64_t v24 = (uint64_t)v123;
  if (v23)
  {
    llvm::MetadataTracking::track((uint64_t)&v121, v23, 2);
    uint64_t v24 = (uint64_t)v123;
  }
  int v122 = *(_DWORD *)(v22 + 60);
  char v111 = 0;
  int v112 = 0;
  char v113 = 0;
  uint64_t v114 = 0;
  char v115 = 0;
  uint64_t v118 = 0;
  int v119 = 0;
  uint64_t v116 = 0;
  *(void *)&long long v117 = 0;
  DWORD2(v117) = 0;
  uint64_t v120 = a3;
  unint64_t v123 = sub_1CB8F36E0(v24, v124, *(llvm::APFloatBase **)(a3 + 16), v6, v7, v8, v9, v10);
  LODWORD(v124) = v25;
  sub_1CD3ED174((uint64_t)&v108, (uint64_t *)&v123, v11, 1, 4, 0, 4, 0, 0);
  uint64_t v26 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v125, (llvm *)5, 0, 1, 0);
  uint64_t v28 = v27;
  int v29 = sub_1CD3DBEEC((uint64_t)&v108);
  unint64_t v31 = v30;
  if (v11 == 1)
  {
    uint64_t v32 = *(void *)(a3 + 16);
    char v106 = v125;
    if (v125) {
      llvm::MetadataTracking::track((uint64_t)&v106, v125, 2);
    }
    int v107 = v126;
    int v29 = sub_1CD3E8E18(v32, (const llvm::APInt *)&v106, (uint64_t)v29, v31);
    unint64_t v31 = v31 & 0xFFFFFFFF00000000 | v33;
    if (v106) {
      llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
    }
  }
  uint64_t v130 = v133;
  unsigned int v132 = 8;
  v133[0] = v93;
  v133[1] = v91;
  if (v108)
  {
    unsigned int v34 = 1;
  }
  else
  {
    long long v134 = v117;
    unsigned int v34 = 2;
  }
  unint64_t v35 = (uint64_t **)&v133[2 * v34];
  *unint64_t v35 = v29;
  v35[1] = (uint64_t *)v31;
  unint64_t v36 = (uint64_t **)&v133[2 * v34 + 2];
  char *v36 = v26;
  v36[1] = v28;
  unsigned int v131 = v34 + 2;
  sub_1CD3E5038(a1, (uint64_t)&v130, *(void *)(a3 + 16));
  if (v131 >= v132) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v37 = &v130[2 * v131];
  *unint64_t v37 = v87;
  v37[1] = v17;
  ++v131;
  if (v108)
  {
    if (v109) {
      uint64_t v38 = (char *)&unk_1EBCBDFB0;
    }
    else {
      uint64_t v38 = (char *)&unk_1EBCBE0C8;
    }
    goto LABEL_26;
  }
  if (v109)
  {
    uint64_t v38 = (char *)&unk_1EBCBDE0C;
LABEL_26:
    if (v110) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = v38 + 140;
    }
    goto LABEL_29;
  }
  if (v110) {
    uint64_t v39 = &unk_1EBCBDF24;
  }
  else {
    uint64_t v39 = &unk_1EBCBDD80;
  }
LABEL_29:
  v95[0] = 0;
  uint64_t v96 = 0;
  char v97 = 0;
  uint64_t v98 = 0;
  int v99 = -1;
  LOBYTE(v100) = 0;
  uint64_t v101 = 0;
  unsigned int v102 = -1;
  LOBYTE(v103) = 0;
  uint64_t v104 = 0;
  uint64_t v105 = -1;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  sub_1CB8F345C(v90, (uint64_t)v95, AddrSpace, dword_1CD9362D8[v11 - 1], v89, v14, (uint64_t)v39);
  uint64_t v41 = sub_1CD7EACB0(*(void *)(a3 + 16), (llvm *)1, 0);
  uint64_t v43 = v42;
  if (v11 >= 5)
  {
    unsigned int v55 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v56 = *((void *)v55 + 104);
    if (v56) {
      __int16 v57 = *(_WORD *)(v56 + 8);
    }
    else {
      __int16 v57 = 0;
    }
    unint64_t v94 = sub_1CD7F3564(v55, (const char *)0xD8, (uint64_t)&v125, v103, v104, v93, (void *)v91, v57);
    unsigned int v59 = v58;
    char v127 = v129;
    uint64_t v128 = 0x2100000000;
    unsigned int v61 = sub_1CD7EBF14(*(void *)(a3 + 16), v105, (const llvm::APInt *)&v125, (llvm *)5, 0, 1, 0);
    if (v128 >= HIDWORD(v128)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v62 = (uint64_t **)((char *)v127 + 16 * v128);
    *uint64_t v62 = v61;
    v62[1] = v60;
    unsigned int v63 = v128 + 1;
    LODWORD(v128) = v128 + 1;
    if (v102)
    {
      unint64_t v64 = 0;
      uint64_t v92 = v59;
      do
      {
        uint64_t v65 = *(void *)(a3 + 16);
        unint64_t v66 = v100;
        uint64_t v67 = v101;
        uint64_t v68 = sub_1CD7EBF14(v65, v64, (const llvm::APInt *)&v125, (llvm *)5, 0, 0, 0);
        __int16 v71 = 0;
        uint64_t v72 = *(void *)(v65 + 832);
        if (v72) {
          __int16 v71 = *(_WORD *)(v72 + 8);
        }
        __int16 v74 = sub_1CCFDED5C(v65, 148, (const llvm::APInt *)&v125, v66, v67, (uint64_t)v94, v92, v70, (uint64_t)v68, v69, v71);
        if (v128 >= (unint64_t)HIDWORD(v128)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v75 = (uint64_t **)((char *)v127 + 16 * v128);
        *uint64_t v75 = v74;
        v75[1] = v73;
        LODWORD(v128) = v128 + 1;
        uint64_t v77 = sub_1CD7EBF14(*(void *)(a3 + 16), (v64 + HIDWORD(v105)), (const llvm::APInt *)&v125, (llvm *)5, 0, 1, 0);
        if (v128 >= (unint64_t)HIDWORD(v128)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        __int16 v78 = (uint64_t **)((char *)v127 + 16 * v128);
        *__int16 v78 = v77;
        v78[1] = v76;
        unsigned int v63 = v128 + 1;
        LODWORD(v128) = v128 + 1;
        ++v64;
      }
      while (v64 < v102);
    }
    if (v11 == 6)
    {
      uint64_t v82 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
      if (v128 >= HIDWORD(v128)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v83 = (uint64_t **)((char *)v127 + 16 * v128);
      uint64_t *v83 = v82;
      v83[1] = v81;
      LODWORD(v128) = v128 + 1;
      uint64_t v85 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v125, (llvm *)5, 0, 1, 0);
      if (v128 >= HIDWORD(v128)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v86 = (uint64_t **)((char *)v127 + 16 * v128);
      *uint64_t v86 = v85;
      v86[1] = v84;
      unsigned int v63 = v128 + 1;
      LODWORD(v128) = v128 + 1;
    }
    uint64_t v79 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v125, (llvm *)0xAE, 0, (uint64_t *)v127, v63);
    uint64_t v80 = v130;
    *uint64_t v130 = (uint64_t)v79;
    *((_DWORD *)v80 + 2) = 0;
    if (v127 != v129) {
      free(v127);
    }
  }
  if (v11 == 1) {
    llvm::report_fatal_error((llvm *)"Store of byte to shared memory is unsupported", (const llvm::Twine *)1);
  }
  uint64_t v44 = sub_1CD801044(*(void *)(a3 + 16), v99, (uint64_t)&v125, v41, v43, v130, v131);
  int v45 = *(uint64_t **)(a3 + 16);
  char v127 = *(void **)(a2 + 96);
  sub_1CD8005B8(v45, (uint64_t)v44, &v127, 1);
  if (v130 != v133) {
    free(v130);
  }
  if (v111) {
    llvm::MetadataTracking::untrack((uint64_t)&v111, v111);
  }
  if (v121) {
    llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
  }
  if (v125) {
    llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
  }
  return v44;
}

void sub_1CD3ECC4C(uint64_t a1)
{
}

void sub_1CD3ECC5C()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3ECC84()
{
}

uint64_t sub_1CD3ECCD8(uint64_t a1, _DWORD *a2, long long *a3, long long *a4, int a5, int a6)
{
  long long v10 = *a3;
  long long v20 = *a4;
  long long v21 = v10;
  char v19 = 0;
  long long v11 = *a4;
  long long v17 = *a3;
  *(_OWORD *)int v18 = v11;
  int v12 = (unsigned int *)&v21;
  unint64_t v13 = &v20;
  uint64_t v14 = &v19;
  if ((sub_1CB8F5928(a1, a2, (unsigned int *)&v21, (uint64_t *)&v20, &v19, a6) & 1) != 0
    || a5
    && (v16 = 0, int v12 = v18, v13 = &v17, v14 = &v16, (sub_1CB8F5928(a1, a2, v18, (uint64_t *)&v17, &v16, a6) & 1) != 0))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v14 = &v19;
    unint64_t v13 = &v20;
    int v12 = (unsigned int *)&v21;
  }
  *(void *)(a1 + 64) = *(void *)v12;
  *(_DWORD *)(a1 + 72) = v12[2];
  *(void *)(a1 + 80) = *(void *)v13;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)v13 + 2);
  *(unsigned char *)(a1 + 1) = *v14;
  return result;
}

uint64_t sub_1CD3ECDD4(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_1CB8F5164(a1, *a2, a2[1], 0, 0);
  uint64_t v5 = *a2;
  if (!v4)
  {
    if (*(_WORD *)(v5 + 24) != 57)
    {
      *(void *)&long long v31 = *a2;
      DWORD2(v31) = *((_DWORD *)a2 + 2);
      *(void *)&long long v30 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), *(llvm **)(a1 + 32), *(void *)(a1 + 40), 0, 0);
      DWORD2(v30) = v21;
      uint64_t v10 = a1;
      long long v11 = a2;
      int v12 = 0;
      return sub_1CD3ECCD8(v10, v11, &v31, &v30, 1, v12);
    }
    uint64_t v13 = *(void *)(v5 + 32);
    *(void *)&long long v31 = *(void *)v13;
    DWORD2(v31) = *(_DWORD *)(v13 + 8);
    *(void *)&long long v30 = *(void *)(v13 + 40);
    DWORD2(v30) = *(_DWORD *)(v13 + 48);
    uint64_t result = sub_1CD3ECCD8(a1, a2, &v31, &v30, 0, 0);
    uint64_t v14 = *(void *)(a1 + 80);
    int v15 = *(unsigned __int16 *)(v14 + 24);
    if (v15 == 35 || v15 == 11)
    {
      uint64_t v17 = *(void *)(v14 + 80);
      int v18 = (void *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u) {
        int v18 = (void *)*v18;
      }
      char v19 = (void *)*v18;
      if (!v19) {
        return result;
      }
      uint64_t result = (uint64_t)sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), -(int)v19, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
    }
    else
    {
      uint64_t v22 = *(void *)(*(void *)(a1 + 96) + 16);
      uint64_t v23 = *(void *)(v14 + 40) + 16 * *(unsigned int *)(a1 + 88);
      uint64_t v24 = *(llvm **)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      uint64_t v26 = sub_1CD7EBF14(v22, 0, (const llvm::APInt *)(a1 + 8), *(llvm **)v23, v25, 0, 0);
      uint64_t v29 = *(void *)(v22 + 832);
      if (v29) {
        LOWORD(v29) = *(_WORD *)(v29 + 8);
      }
      uint64_t result = (uint64_t)sub_1CCFDED5C(v22, 57, (const llvm::APInt *)(a1 + 8), v24, v25, (uint64_t)v26, v27, v28, *(void *)(a1 + 80), *(void *)(a1 + 88), v29);
    }
    *(void *)(a1 + 80) = result;
    *(_DWORD *)(a1 + 88) = v20;
    return result;
  }
  uint64_t v6 = *(void *)(v5 + 32);
  *(void *)&long long v31 = *(void *)v6;
  DWORD2(v31) = *(_DWORD *)(v6 + 8);
  *(void *)&long long v30 = *(void *)(v6 + 40);
  DWORD2(v30) = *(_DWORD *)(v6 + 48);
  uint64_t result = sub_1CD3ECCD8(a1, a2, &v31, &v30, 1, 0);
  if ((result & 1) == 0)
  {
    uint64_t v8 = *(void *)(*a2 + 32);
    *(void *)&long long v31 = *(void *)v8;
    DWORD2(v31) = *(_DWORD *)(v8 + 8);
    *(void *)&long long v30 = *(void *)(v8 + 40);
    DWORD2(v30) = *(_DWORD *)(v8 + 48);
    uint64_t result = sub_1CD3ECCD8(a1, a2, &v31, &v30, 1, 1);
    if ((result & 1) == 0)
    {
      uint64_t v9 = *(void *)(*a2 + 32);
      *(void *)&long long v31 = *(void *)v9;
      DWORD2(v31) = *(_DWORD *)(v9 + 8);
      *(void *)&long long v30 = *(void *)(v9 + 40);
      DWORD2(v30) = *(_DWORD *)(v9 + 48);
      uint64_t v10 = a1;
      long long v11 = a2;
      int v12 = 2;
      return sub_1CD3ECCD8(v10, v11, &v31, &v30, 1, v12);
    }
  }
  return result;
}

uint64_t *sub_1CD3ED078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  int v14 = *(unsigned __int16 *)(a2 + 24);
  if (v14 != 253 && (v14 - 290) > 0x11)
  {
    if (v14 != 254)
    {
      char v20 = 0;
      unint64_t v19 = 0;
      uint64_t v23 = *(void *)(a2 + 32);
      uint64_t v24 = *(void *)v23;
      int v25 = *(_DWORD *)(v23 + 8);
      return sub_1CD3ED174(a1, &v24, v19, v20, a3, a4, a5, a6, a7);
    }
    uint64_t v22 = *(void *)(a2 + 32);
    uint64_t v24 = *(void *)(v22 + 80);
    int v17 = *(_DWORD *)(v22 + 88);
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v24 = *(void *)(v16 + 40);
    int v17 = *(_DWORD *)(v16 + 48);
  }
  int v25 = v17;
  if (sub_1CD3ED460(a2)) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = sub_1CB8F20C0(*(void *)(v18 + 96));
  char v20 = 1;
  return sub_1CD3ED174(a1, &v24, v19, v20, a3, a4, a5, a6, a7);
}

uint64_t *sub_1CD3ED174(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  unsigned __int8 v10 = a5;
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(unsigned char *)(a1 + 105) = a4;
  *(void *)(a1 + 32) = a5;
  int v14 = (unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  int v15 = (unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 56) = a8;
  uint64_t v16 = *a2;
  int v17 = *(unsigned __int8 **)(*a2 + 64);
  uint64_t v52 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v52, v17, 2);
  }
  int v53 = *(_DWORD *)(v16 + 60);
  sub_1CB8F69CC((unsigned __int8 **)(a1 + 8), &v52);
  *(_DWORD *)(a1 + 16) = v53;
  if (v52) {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  }
  *(void *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t v18 = *a2;
  if (*(_WORD *)(*a2 + 24) == 201)
  {
    unint64_t v19 = *(unsigned __int8 **)(v18 + 40);
    int v20 = *v19;
    if (v20 == v10)
    {
      uint64_t v21 = *((void *)v19 + 1);
      if (v20 || v21 == a6)
      {
        uint64_t v23 = *(void *)(v18 + 32);
        uint64_t v24 = *(void *)v23;
        *((_DWORD *)a2 + 2) = *(_DWORD *)(v23 + 8);
        *a2 = v24;
      }
    }
  }
  sub_1CD3ECDD4(a1, a2);
  if (*(unsigned char *)(a1 + 32)) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200(v14);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v14);
  }
  unsigned int v27 = ExtendedSizeInBits;
  if (v26 == 1) {
  if (*v15)
  }
    unsigned int v28 = sub_1CB87E200(v15);
  else {
    unsigned int v28 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v15);
  }
  unsigned int v30 = v28;
  if (v29 == 1) {
  uint64_t v31 = *(void *)(a1 + 80);
  }
  int v32 = *(unsigned __int16 *)(v31 + 24);
  if (v32 == 35 || v32 == 11)
  {
    uint64_t v33 = *(void *)(v31 + 80);
    unsigned int v34 = *(_DWORD *)(v33 + 32);
    uint64_t v35 = v34 > 0x40 ? **(void **)(v33 + 24) : (uint64_t)(*(void *)(v33 + 24) << -(char)v34) >> -(char)v34;
    if (v35 == (__int16)v35) {
      *(unsigned char *)(a1 + 2) = 1;
    }
  }
  uint64_t v36 = *(void *)(a1 + 64);
  int v37 = *(unsigned __int16 *)(v36 + 24);
  if (v37 == 35 || v37 == 11)
  {
    uint64_t v38 = *(void *)(v36 + 80);
    uint64_t v39 = (void *)(v38 + 24);
    if (*(_DWORD *)(v38 + 32) >= 0x41u) {
      uint64_t v39 = (void *)*v39;
    }
    if (!*v39) {
      *(unsigned char *)a1 = 1;
    }
  }
  uint64_t v40 = *a2;
  uint64_t v41 = *(unsigned __int8 **)(*a2 + 64);
  uint64_t v52 = v41;
  if (v41) {
    llvm::MetadataTracking::track((uint64_t)&v52, v41, 2);
  }
  int v53 = *(_DWORD *)(v40 + 60);
  if (v27 != 64)
  {
    uint64_t v42 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
    uint64_t v43 = *((void *)v42 + 104);
    if (v43) {
      __int16 v44 = *(_WORD *)(v43 + 8);
    }
    else {
      __int16 v44 = 0;
    }
    *(void *)(a1 + 64) = sub_1CD7F3564(v42, (const char *)0xC9, (uint64_t)&v52, (llvm *)4, 0, *(void *)(a1 + 64), *(void **)(a1 + 72), v44);
    *(_DWORD *)(a1 + 72) = v45;
  }
  uint64_t v46 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
  if (v30 == 32) {
    uint64_t v47 = 5;
  }
  else {
    uint64_t v47 = 4;
  }
  uint64_t v48 = *((void *)v46 + 104);
  if (v48) {
    __int16 v49 = *(_WORD *)(v48 + 8);
  }
  else {
    __int16 v49 = 0;
  }
  uint64_t result = sub_1CD7F3564(v46, (const char *)0xC9, (uint64_t)&v52, (llvm *)v47, 0, *(void *)(a1 + 80), *(void **)(a1 + 88), v49);
  *(void *)(a1 + 80) = result;
  *(_DWORD *)(a1 + 88) = v51;
  if (a9 && *(unsigned char *)(a1 + 104)) {
    *a9 = 1;
  }
  if (v52) {
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  }
  return result;
}

BOOL sub_1CD3ED460(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 24);
  BOOL result = 1;
  if ((v2 - 290) >= 0x16 && (v2 - 366) >= 6)
  {
    BOOL v4 = (v2 - 253) > 0x22 || ((1 << (v2 + 3)) & 0x400000003) == 0;
    if (v4 && ((v2 - 47) > 1 || (*(unsigned char *)(a1 + 26) & 2) == 0)) {
      return (__int16)v2 > 889;
    }
  }
  return result;
}

uint64_t (***sub_1CD3ED4D0())()
{
  return off_1EC7DF9C0;
}

uint64_t sub_1CD3ED4DC()
{
  return 0;
}

uint64_t sub_1CD3ED4E4()
{
  return 0;
}

uint64_t sub_1CD3ED4EC(uint64_t a1, uint64_t a2, void *a3)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *a3) + 282);
}

uint64_t sub_1CD3ED534(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, int *a5, int *a6, int *a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *a3);
  *a6 = 0;
  int v12 = 4;
  if (a4 >= 4)
  {
    if (a4 - 4 >= 2) {
      int v16 = 4;
    }
    else {
      int v16 = 8;
    }
    int v15 = 0;
    *a5 = v16;
    int v12 = 2;
    goto LABEL_11;
  }
  unsigned __int8 v13 = *(unsigned char *)(result + 280);
  if (v13) {
    int v14 = 16;
  }
  else {
    int v14 = 4;
  }
  *a5 = v14;
  if (!(*(unsigned char *)(result + 282) | v13))
  {
    int v15 = 1;
LABEL_11:
    *a6 = v15;
  }
  *a7 = v12;
  return result;
}

_UNKNOWN ***sub_1CD3ED5F0(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = off_1E66A4108;
  if (a3 == 16) {
    uint64_t v3 = off_1E66A4090;
  }
  return v3[a2 - 2];
}

void *sub_1CD3ED614(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 25) << 8 == 4096) {
    return &unk_1CD936318;
  }
  else {
    return &unk_1CD936358;
  }
}

uint64_t sub_1CD3ED638(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = *a2;
  unsigned int v8 = **(unsigned __int16 **)(*a2 + 16);
  if (v8 <= 0x2CC6)
  {
    if (**(unsigned __int16 **)(*a2 + 16) > 0x2B48u)
    {
      switch(**(_WORD **)(*a2 + 16))
      {
        case 0x2C57:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A28;
          goto LABEL_22;
        case 0x2C58:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A34;
          goto LABEL_22;
        case 0x2C59:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A40;
          goto LABEL_22;
        case 0x2C5A:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A4C;
          goto LABEL_22;
        case 0x2C5B:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A58;
          goto LABEL_22;
        case 0x2C5C:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A64;
          goto LABEL_22;
        case 0x2C5D:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A70;
          goto LABEL_22;
        case 0x2C5E:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A7C;
          goto LABEL_22;
        case 0x2C5F:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A88;
          goto LABEL_22;
        case 0x2C60:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936A94;
          goto LABEL_22;
        case 0x2C61:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AA0;
          goto LABEL_22;
        case 0x2C62:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AAC;
          goto LABEL_22;
        case 0x2C63:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AB8;
          goto LABEL_22;
        case 0x2C64:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AC4;
          goto LABEL_22;
        case 0x2C65:
        case 0x2C66:
        case 0x2C67:
        case 0x2C68:
        case 0x2C69:
        case 0x2C6A:
        case 0x2C6B:
        case 0x2C6C:
        case 0x2C6D:
        case 0x2C6E:
        case 0x2C6F:
        case 0x2C70:
        case 0x2C71:
        case 0x2C72:
        case 0x2C73:
        case 0x2C74:
        case 0x2C75:
        case 0x2C76:
        case 0x2C77:
        case 0x2C78:
        case 0x2C79:
        case 0x2C7A:
        case 0x2C7B:
        case 0x2C7C:
        case 0x2C7D:
        case 0x2C7E:
        case 0x2C7F:
        case 0x2C80:
        case 0x2C81:
        case 0x2C82:
        case 0x2C83:
        case 0x2C84:
        case 0x2C85:
        case 0x2C86:
        case 0x2C87:
        case 0x2C88:
        case 0x2C89:
        case 0x2C8A:
        case 0x2C8B:
        case 0x2C8C:
        case 0x2C8D:
        case 0x2C8E:
          goto LABEL_109;
        case 0x2C8F:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AD0;
          goto LABEL_22;
        case 0x2C90:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936ADC;
          goto LABEL_22;
        case 0x2C91:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AE8;
          goto LABEL_22;
        case 0x2C92:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936AF4;
          goto LABEL_22;
        case 0x2C93:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B00;
          goto LABEL_22;
        case 0x2C94:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B0C;
          goto LABEL_22;
        case 0x2C95:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B18;
          goto LABEL_22;
        case 0x2C96:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B24;
          goto LABEL_22;
        case 0x2C97:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B30;
          goto LABEL_22;
        case 0x2C98:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B3C;
          goto LABEL_22;
        case 0x2C99:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B48;
          goto LABEL_22;
        case 0x2C9A:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B54;
          goto LABEL_22;
        case 0x2C9B:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B60;
          goto LABEL_22;
        case 0x2C9C:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936B6C;
          goto LABEL_22;
        default:
          switch(**(_WORD **)(*a2 + 16))
          {
            case 0x2B4A:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9365B4;
              break;
            case 0x2B4B:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9365F0;
              break;
            case 0x2B4C:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD93662C;
              break;
            case 0x2B4D:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9369B0;
              break;
            case 0x2B4E:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9369EC;
              break;
            case 0x2B4F:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD936398;
              break;
            case 0x2B50:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9363D4;
              break;
            case 0x2B51:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD936410;
              break;
            case 0x2B52:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD93644C;
              break;
            case 0x2B53:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD936758;
              break;
            case 0x2B54:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD936794;
              break;
            case 0x2B55:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD9367D0;
              break;
            case 0x2B56:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD93680C;
              break;
            default:
              int v9 = a3 - 2;
              unsigned __int8 v10 = (unsigned int *)&unk_1CD936578;
              break;
          }
          goto LABEL_22;
      }
    }
    if (**(unsigned __int16 **)(*a2 + 16) <= 0x13Au)
    {
      if (v8 == 291)
      {
        int v9 = a3 - 2;
        unsigned __int8 v10 = (unsigned int *)&unk_1CD936CE4;
      }
      else if (v8 == 292)
      {
        int v9 = a3 - 2;
        unsigned __int8 v10 = (unsigned int *)&unk_1CD936D60;
      }
      else
      {
        int v9 = a3 - 2;
        unsigned __int8 v10 = (unsigned int *)&unk_1CD936D1C;
      }
    }
    else
    {
      switch(**(_WORD **)(*a2 + 16))
      {
        case 0x297B:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936668;
          break;
        case 0x297C:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD9366A4;
          break;
        case 0x297D:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD9366E0;
          break;
        case 0x297E:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD93671C;
          break;
        case 0x297F:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936938;
          break;
        case 0x2980:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936974;
          break;
        case 0x2981:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936488;
          break;
        case 0x2982:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD9364C4;
          break;
        case 0x2983:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936500;
          break;
        case 0x2984:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD93653C;
          break;
        case 0x2985:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936848;
          break;
        case 0x2986:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936884;
          break;
        case 0x2987:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD9368C0;
          break;
        case 0x2988:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD9368FC;
          break;
        default:
          int v9 = a3 - 2;
          unsigned __int8 v10 = (unsigned int *)&unk_1CD936D98;
          break;
      }
    }
    goto LABEL_22;
  }
  if (**(unsigned __int16 **)(*a2 + 16) > 0x2DF2u)
  {
    if (**(unsigned __int16 **)(*a2 + 16) <= 0x2F77u)
    {
      if (v8 == 11763)
      {
        int v9 = a3 - 2;
        unsigned __int8 v10 = (unsigned int *)&unk_1CD936CC8;
      }
      else
      {
        int v9 = a3 - 2;
        unsigned __int8 v10 = (unsigned int *)&unk_1CD936D38;
      }
    }
    else if (v8 == 12152)
    {
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936D54;
    }
    else if (v8 == 13390)
    {
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936D00;
    }
    else
    {
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936D7C;
    }
LABEL_22:
    *(void *)(v7 + 16) = *(void *)(a6 + 8) + 48 * v10[v9];
    uint64_t result = llvm::MachineOperand::setReg(*(void *)(v7 + 32), a4);
    **(_DWORD **)(v7 + 32) &= 0xFFF000FF;
    *(void *)(*(void *)(v7 + 32) + 48) = a5;
    return result;
  }
  switch(**(_WORD **)(*a2 + 16))
  {
    case 0x2CC8:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936B84;
      goto LABEL_22;
    case 0x2CC9:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936B90;
      goto LABEL_22;
    case 0x2CCA:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936B9C;
      goto LABEL_22;
    case 0x2CCB:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BA8;
      goto LABEL_22;
    case 0x2CCC:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BB4;
      goto LABEL_22;
    case 0x2CCD:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BC0;
      goto LABEL_22;
    case 0x2CCE:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BCC;
      goto LABEL_22;
    case 0x2CCF:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BD8;
      goto LABEL_22;
    case 0x2CD0:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BE4;
      goto LABEL_22;
    case 0x2CD1:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BF0;
      goto LABEL_22;
    case 0x2CD2:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936BFC;
      goto LABEL_22;
    case 0x2CD3:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C08;
      goto LABEL_22;
    case 0x2CD4:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C14;
      goto LABEL_22;
    case 0x2CD5:
    case 0x2CD6:
    case 0x2CD7:
    case 0x2CD8:
    case 0x2CD9:
    case 0x2CDA:
    case 0x2CDB:
    case 0x2CDC:
    case 0x2CDD:
    case 0x2CDE:
    case 0x2CDF:
    case 0x2CE0:
    case 0x2CE1:
    case 0x2CE2:
    case 0x2CE3:
    case 0x2CE4:
    case 0x2CE5:
    case 0x2CE6:
    case 0x2CE7:
    case 0x2CE8:
    case 0x2CE9:
    case 0x2CEA:
    case 0x2CEB:
    case 0x2CEC:
    case 0x2CED:
    case 0x2CEE:
    case 0x2CEF:
    case 0x2CF0:
    case 0x2CF1:
    case 0x2CF2:
    case 0x2CF3:
    case 0x2CF4:
    case 0x2CF5:
    case 0x2CF6:
    case 0x2CF7:
    case 0x2CF8:
    case 0x2CF9:
    case 0x2CFA:
    case 0x2CFB:
    case 0x2CFC:
    case 0x2CFD:
    case 0x2CFE:
LABEL_109:
      __break(1u);
      break;
    case 0x2CFF:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C20;
      goto LABEL_22;
    case 0x2D00:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C2C;
      goto LABEL_22;
    case 0x2D01:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C38;
      goto LABEL_22;
    case 0x2D02:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C44;
      goto LABEL_22;
    case 0x2D03:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C50;
      goto LABEL_22;
    case 0x2D04:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C5C;
      goto LABEL_22;
    case 0x2D05:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C68;
      goto LABEL_22;
    case 0x2D06:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C74;
      goto LABEL_22;
    case 0x2D07:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C80;
      goto LABEL_22;
    case 0x2D08:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C8C;
      goto LABEL_22;
    case 0x2D09:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936C98;
      goto LABEL_22;
    case 0x2D0A:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936CA4;
      goto LABEL_22;
    case 0x2D0B:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936CB0;
      goto LABEL_22;
    case 0x2D0C:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936CBC;
      goto LABEL_22;
    default:
      int v9 = a3 - 2;
      unsigned __int8 v10 = (unsigned int *)&unk_1CD936B78;
      goto LABEL_22;
  }
  return result;
}

void sub_1CD3EDD90(llvm::GPUIterateCombiner *a1)
{
  llvm::GPUIterateCombiner::~GPUIterateCombiner(a1);

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD3EDDCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F25ECA58;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1CD3EDDF4(uint64_t a1, llvm::yaml::IO *a2)
{
  return sub_1CD3EDEB8(a2, (uint64_t)"SampleScratchReg", (unsigned int *)(a1 + 12), 0);
}

double sub_1CD3EDE58(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 16) = result;
  return result;
}

void sub_1CD3EDE68(uint64_t a1)
{
}

void sub_1CD3EDE78()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3EDEA4()
{
}

uint64_t sub_1CD3EDEB8(llvm::yaml::IO *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    sub_1CD3EDF78(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1CD3EDF78(llvm::yaml::IO *a1, unsigned int *a2)
{
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    LODWORD(v16) = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v23 = &v24;
    int v22 = 0;
    int v15 = (const char *)&unk_1F2646F30;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t Context = llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<unsigned int,void>::output(a2, Context, (llvm::raw_ostream *)&v15);
    uint64_t v5 = v23;
    char v6 = *((unsigned char *)v23 + 23);
    BOOL v7 = v6 < 0;
    if (v6 < 0) {
      uint64_t v5 = *v23;
    }
    uint64_t v8 = (void *)(v6 & 0x7F);
    if (v7) {
      uint64_t v8 = v23[1];
    }
    v14[0] = v5;
    v14[1] = v8;
    (*(void (**)(llvm::yaml::IO *, void *, void))(*(void *)a1 + 216))(a1, v14, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
    if (SHIBYTE(v26) < 0) {
      operator delete(v24);
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, void))(*(void *)a1 + 216))(a1, &v24, 0);
    int v9 = (unsigned __int8 *)v24;
    uint64_t v10 = v25;
    uint64_t v11 = llvm::yaml::IO::getContext(a1);
    int v12 = llvm::yaml::ScalarTraits<unsigned int,void>::input(v9, v10, v11, a2);
    if (v13)
    {
      LOWORD(v19) = 261;
      int v15 = v12;
      uint64_t v16 = v13;
      (*(void (**)(llvm::yaml::IO *, const char **))(*(void *)a1 + 248))(a1, &v15);
    }
  }
}

void sub_1CD3EE134(uint64_t a1)
{
  *(void *)a1 = &unk_1F25ECA80;
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
}

void sub_1CD3EE178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::MachineFunctionInfo::~MachineFunctionInfo(v12);
}

uint64_t sub_1CD3EE198()
{
  return 0;
}

void sub_1CD3EE1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 500;
  *(_DWORD *)(a4 + 12) = 500;
  *(unsigned char *)(a4 + 40) = 1;
  *(unsigned char *)(a4 + 42) = 0;
  sub_1CD11042C(a2, a3, (_DWORD *)a4, 5000, 64, 1, 0, *(unsigned __int8 *)(*(void *)(a1 + 24) + 280));
}

uint64_t sub_1CD3EE1E0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 24) + 280)) {
    return 512;
  }
  else {
    return 128;
  }
}

uint64_t sub_1CD3EE1FC(uint64_t a1, llvm::Type **a2)
{
  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12 && llvm::Type::getScalarSizeInBits(*a2) < 0x10) {
    return 0;
  }
  uint64_t v4 = (uint64_t)*(a2 - 4);
  int v5 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  if ((v5 & 0xFFFFFF00) != 0x4000) {
    return 1;
  }
  char v6 = sub_1CD0FF880(v4, 0);
  uint64_t result = 0;
  if ((v6 & 1) == 0) {
    return 1;
  }
  return result;
}

BOOL sub_1CD3EE28C(uint64_t a1, uint64_t a2)
{
  int v2 = **(llvm::Type ***)(a2 - 64);
  return (*((_DWORD *)v2 + 2) & 0xFE) != 0x12 || llvm::Type::getScalarSizeInBits(v2) >= 0x10;
}

BOOL sub_1CD3EE2D0(uint64_t a1, unsigned int a2, char a3, int a4)
{
  if ((a2 & 3) != 0 || ((1 << a3) & 3) != 0 && (1 << a3) % a2) {
    return 0;
  }
  return a2 < 4 || a4 != 1 || ((1 << a3) & 3) == 0;
}

uint64_t sub_1CD3EE310(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (a4 >= 0x11
    && !*(unsigned char *)(*(void *)(a1 + 24) + 281)
    && (a4 - 32 > 0x20 || ((1 << (a4 - 32)) & 0x100010001) == 0))
  {
    if (a4 <= 0x20) {
      int v5 = 128;
    }
    else {
      int v5 = 256;
    }
    if (a4 <= 0x30) {
      int v6 = v5;
    }
    else {
      int v6 = 384;
    }
    if (a4 <= 0x40) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = 512;
    }
    return v7 / a3;
  }
  return a2;
}

unint64_t sub_1CD3EE380(uint64_t a1, int a2, llvm::EVT *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, (llvm::Type *)1) == 1) {
    return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v22);
  uint64_t v10 = v22;
  if (!a6 && (*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
  {
    unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(a3);
    int v14 = v13;
    unint64_t v15 = sub_1CB87E200(v23);
    BOOL v17 = v16 != 1 && v14 == 1;
    if (!v17 && PrimitiveSizeInBits < v15)
    {
      unsigned __int8 v18 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, 0);
      BOOL v19 = v23[0] == 0;
      if (!v18) {
        BOOL v19 = 1;
      }
      if (a2 == 33)
      {
        if (!v19)
        {
          int v20 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 179 * v23[0] + v18 + 137754);
          goto LABEL_18;
        }
      }
      else if (!v19)
      {
        int v20 = *(_WORD *)(*(void *)(a1 + 32) + 358 * v23[0] + 2 * v18 + 73672) >> 4;
LABEL_18:
        if ((v20 & 0xFFFFFFFB) == 0) {
          return v10;
        }
      }
      unint64_t v21 = sub_1CD3EE584(a1, (uint64_t)a3, a2 != 33, a2 == 33);
      if (__OFADD__(v10, v21)) {
        return ((uint64_t)(v10 + v21) >> 63) ^ 0x8000000000000000;
      }
      else {
        v10 += v21;
      }
    }
  }
  return v10;
}

BOOL sub_1CD3EE510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a2 && *(unsigned char *)(a2 + 16) == 84) {
    return !sub_1CB8F8740(a2, 6)
  }
        || llvm::CallBase::getIntrinsicID((llvm::CallBase *)a2) != 1884
        || *(void *)(a2 + 40) == *(void *)(a3 + 40);
  return result;
}

unint64_t sub_1CD3EE584(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_1CB8F1EEC((uint64_t)&v10, *(_DWORD *)(a2 + 32), -1);
  unint64_t v8 = sub_1CD3EE624(a1, a2, (uint64_t)&v10, a3, a4);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  return v8;
}

unint64_t sub_1CD3EE624(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(a2 + 32);
  if (v5 < 1) {
    return 0;
  }
  unsigned int v11 = 0;
  unint64_t v12 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 8) >= 0x41u) {
      int v13 = (void *)(*(void *)a3 + 8 * (v11 >> 6));
    }
    else {
      int v13 = (void *)a3;
    }
    if ((*v13 >> v11))
    {
      if (a4)
      {
        int v14 = (llvm::LLVMContext **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          int v14 = **(llvm::LLVMContext ****)(a2 + 16);
        }
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v14, (uint64_t)&v17);
        if (__OFADD__(v12, v17)) {
          unint64_t v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        }
        else {
          v12 += v17;
        }
      }
      if (a5)
      {
        unint64_t v15 = (llvm::LLVMContext **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          unint64_t v15 = **(llvm::LLVMContext ****)(a2 + 16);
        }
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v17);
        if (__OFADD__(v12, v17)) {
          unint64_t v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        }
        else {
          v12 += v17;
        }
      }
    }
    ++v11;
  }
  while (v5 != v11);
  return v12;
}

void sub_1CD3EE778(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 40);
  if (v3)
  {
    uint64_t v7 = 32 * v3;
    uint64_t v8 = *(void *)(a2 + 32) + 16;
    while (2)
    {
      switch(*(_DWORD *)(v8 - 16))
      {
        case 0u:
          if ((*(_DWORD *)(v8 - 16) & 0x2000000) != 0) {
            goto LABEL_20;
          }
          unint64_t v9 = *(unsigned int *)(v8 - 12);
          uint64_t v10 = 1;
          goto LABEL_18;
        case 1u:
          unint64_t v9 = *(void *)v8;
          uint64_t v10 = 2;
          goto LABEL_18;
        case 4u:
          uint64_t Symbol = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v8);
          goto LABEL_16;
        case 7u:
          unint64_t v11 = llvm::MCConstantExpr::create((llvm::MCConstantExpr *)(*(unsigned int *)(v8 - 12) | ((unint64_t)*(unsigned int *)(v8 + 8) << 32)), *a1, 0, 0);
          if (*(_DWORD *)v8 != 64) {
            llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const llvm::Twine *)1);
          }
          if (*(_DWORD *)(v8 - 16)) {
            int v12 = (*(_DWORD *)(v8 - 16) >> 8) & 0xFFF;
          }
          else {
            int v12 = 0;
          }
          HIDWORD(v13) = v12;
          LODWORD(v13) = v12 - 2;
          uint64_t v14 = sub_1CD431578(dword_1CD936DB4[(int)(v13 >> 1)], v11, *a1);
          if (v14) {
            unint64_t v9 = v14 + 8;
          }
          else {
            unint64_t v9 = 0;
          }
          goto LABEL_17;
        case 0xAu:
          uint64_t Symbol = sub_1CD27B4E0(a1[1], *(const llvm::GlobalValue **)v8);
LABEL_16:
          unint64_t v9 = llvm::MCSymbolRefExpr::create(Symbol, 0, *a1, 0);
LABEL_17:
          uint64_t v10 = 5;
LABEL_18:
          unint64_t v16 = *(unsigned int *)(a3 + 24);
          if (v16 >= *(unsigned int *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v17 = (uint64_t *)(*(void *)(a3 + 16) + 16 * v16);
          uint64_t *v17 = v10;
          v17[1] = v9;
          ++*(_DWORD *)(a3 + 24);
LABEL_20:
          v8 += 32;
          v7 -= 32;
          if (!v7) {
            return;
          }
          continue;
        default:
          llvm::MachineInstr::dump((llvm::MachineInstr *)a2);
          __break(1u);
          return;
      }
    }
  }
}

void sub_1CD3EE934()
{
}

void sub_1CD3EE988()
{
}

uint64_t sub_1CD3EE9E4(uint64_t a1, int a2, int a3)
{
  return word_1CD948ED4[427 * byte_1CD948D28[a2 - 1] + a3 - 1];
}

uint64_t sub_1CD3EEA10(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CD94F63E[a2 - 1];
  uint64_t v4 = qword_1CD962FD8[2 * v3];
  if (!v4) {
    return 0;
  }
  uint64_t result = 0;
  int v6 = &qword_1CD962FD8[2 * v3 + 2];
  do
  {
    uint64_t v7 = v4 & a3;
    uint64_t v8 = __ROR8__(v7, -*((unsigned char *)v6 - 8));
    if (*((unsigned char *)v6 - 8)) {
      uint64_t v7 = v8;
    }
    result |= v7;
    uint64_t v9 = *v6;
    v6 += 2;
    uint64_t v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1CD3EEA70(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CD94F63E[a2 - 1];
  if (!qword_1CD962FD8[2 * v3]) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 232) + 8 * a2) & a3;
  uint64_t v7 = &qword_1CD962FD8[2 * v3 + 2];
  do
  {
    uint64_t v8 = __ROR8__(v6, *((unsigned char *)v7 - 8));
    if (*((unsigned char *)v7 - 8)) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v6;
    }
    result |= v9;
    uint64_t v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1CD3EEAD8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (char *)&unk_1CD94F7E9 + 427 * *(unsigned __int16 *)(*(void *)a2 + 24);
    if (v3[a3 - 1]) {
      return *(void *)(*(void *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    }
    else {
      return 0;
    }
  }
  return a2;
}

char *sub_1CD3EEB1C(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CD960E78 + 8 * *(unsigned __int16 *)(*(void *)a2 + 24);
}

uint64_t sub_1CD3EEB34(uint64_t a1, int a2)
{
  return byte_1CD9613B0[a2];
}

uint64_t sub_1CD3EEB44()
{
  return 9;
}

char *sub_1CD3EEB4C(uint64_t a1, int a2)
{
  return off_1E66A72E0[a2];
}

uint64_t sub_1CD3EEB5C(uint64_t a1, uint64_t a2, int a3)
{
  return word_1CD9619B2[a3];
}

char *sub_1CD3EEB6C(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CD961A6C + 4 * byte_1CD9619C4[*(unsigned __int16 *)(*(void *)a2 + 24)];
}

char *sub_1CD3EEB90(uint64_t a1, int a2)
{
  return (char *)&unk_1CD961A6C + 4 * byte_1CD961AEC[a2];
}

double sub_1CD3EEBAC(uint64_t a1)
{
  uint64_t v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E66A7328, (uint64_t)off_1E66A7340, (uint64_t)off_1E66A7878, (uint64_t)off_1E66A7878, (uint64_t)&unk_1CD9620F0, -1, (uint64_t)&unk_1E66A85D8, 0);
  *(void *)uint64_t v1 = &unk_1F25ECC38;
  *(void *)(v1 + 8) = "P";
  *(void *)(v1 + 16) = 20571;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = &off_1E66AFB78;
  *(void *)(v1 + 64) = &unk_1CDCC9DC0;
  *(void *)(v1 + 72) = "VI85_VI86_VI87_VI88_VI89_VI90_VI91_VI92_VI93_VI94_VI95_VI96_VI97_VI98_VI99_VI100";
  *(void *)(v1 + 48) = &unk_1CDD66F88;
  *(void *)(v1 + 56) = &unk_1CDC9A0B8;
  *(void *)(v1 + 40) = 0x601000000A7;
  *(void *)(v1 + 80) = "GPR32tup10";
  *(void *)(v1 + 88) = &unk_1CDCCA900;
  *(_DWORD *)(v1 + 104) = 428;
  *(void *)(v1 + 96) = &unk_1CDCCC540;
  *(void *)(v1 + 112) = &unk_1CDDD4920;
  *(void *)(v1 + 152) = &unk_1CDDCC8E0;
  *(void *)(v1 + 160) = &unk_1CDDCC8EC;
  *(void *)(v1 + 136) = &unk_1CDDCC8F8;
  *(void *)(v1 + 144) = &unk_1CDDD090C;
  *(void *)&double result = 0x80200000802;
  *(_OWORD *)(v1 + 120) = xmmword_1CD936E00;
  return result;
}

uint64_t sub_1CD3EECDC()
{
  return 0;
}

uint64_t sub_1CD3EECE8()
{
  return 0;
}

uint64_t sub_1CD3EECF0()
{
  return 0;
}

uint64_t sub_1CD3EECF8()
{
  return 0;
}

uint64_t sub_1CD3EED04(uint64_t a1)
{
  sub_1CD3EEBAC(a1);
  *(void *)uint64_t v2 = &unk_1F25ECEA0;
  uint64_t v3 = (void *)(v2 + 280);
  *(void *)(v2 + 280) = v2 + 296;
  *(void *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  sub_1CB8F8DF4(v2 + 280, *(_DWORD *)(v2 + 16), 0);
  uint64_t v4 = *(void *)(a1 + 280);
  *(void *)(v4 + 32) |= 0xFFFFFFFFFFFFFFF8;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *(_OWORD *)(v4 + 40) = v5;
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 72) = v5;
  uint64_t v6 = *(void *)(v4 + 96) | 7;
  *(void *)(v4 + 88) = -1;
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 160) |= 4uLL;
  sub_1CB8FB608((uint64_t)v9, 0x502u, (void *)(a1 + 8), 1);
  while (v11)
  {
LABEL_2:
    *(void *)(*v3 + (((unint64_t)v12 >> 3) & 0x1FF8)) |= 1 << v12;
    while (1)
    {
      sub_1CB8FB704((uint64_t)v9);
      if (v10 || v11 == 0) {
        break;
      }
      if (v9[0] != v12) {
        goto LABEL_2;
      }
    }
  }
  return a1;
}

BOOL sub_1CD3EEE34(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

BOOL sub_1CD3EEE48(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

void sub_1CD3EEE5C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, int a7, int a8, char a9, void *a10)
{
  unsigned int v12 = a6;
  unsigned int v14 = a3;
  uint64_t v16 = *(void *)(a2 + 24);
  if (a7) {
    unsigned int v17 = 0x10000;
  }
  else {
    unsigned int v17 = 1024;
  }
  unsigned int v49 = v17;
  uint64_t v46 = *(void *)(v16 + 32);
  if (v17 <= a5)
  {
    if (a7) {
      BOOL v19 = &off_1E66A4340;
    }
    else {
      BOOL v19 = &off_1E66A46D8;
    }
    unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(*(void *)(v16 + 32) + 40), (uint64_t)v19, "", 0);
    uint64_t v44 = v16;
    uint64_t v22 = sub_1CB84B760(v16, a2, (unsigned __int8 **)(a2 + 56), a10[1] + 69360);
    uint64_t v23 = v21;
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    if (a7) {
      int v24 = 0x1000000;
    }
    else {
      int v24 = 285221120;
    }
    *(void *)&long long v50 = __PAIR64__(VirtualRegister, v24);
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = a5;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = a5;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = a5;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    long long v50 = 0u;
    long long v51 = 0u;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    long long v50 = 0u;
    long long v51 = 0u;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 50331648;
    DWORD1(v50) = VirtualRegister;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v50);
    unsigned int v18 = VirtualRegister;
    if (a7)
    {
      unsigned int v14 = a3;
      uint64_t v16 = v44;
    }
    else
    {
      uint64_t v25 = sub_1CB84B760(v44, a2, (unsigned __int8 **)(a2 + 56), a10[1] + 48720);
      unsigned int v27 = v26;
      *((void *)&v50 + 1) = 0;
      long long v51 = 0uLL;
      LODWORD(v50) = 16777984;
      DWORD1(v50) = VirtualRegister;
      llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      long long v50 = 0u;
      long long v51 = 0u;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      long long v50 = 0u;
      long long v51 = 0u;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      *((void *)&v50 + 1) = 0;
      long long v51 = 0uLL;
      LODWORD(v50) = 50331648;
      DWORD1(v50) = VirtualRegister;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v50);
      *((void *)&v50 + 1) = 0;
      long long v51 = 0uLL;
      LODWORD(v50) = 100663296;
      DWORD1(v50) = VirtualRegister;
      unsigned int v28 = v27;
      uint64_t v16 = v44;
      llvm::MachineInstr::addOperand(v28, v25, (const llvm::MachineOperand *)&v50);
      unsigned int v14 = a3;
    }
    unsigned int v12 = a6;
  }
  else
  {
    unsigned int v18 = -1;
  }
  uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a10 + 184))(a10, v16, a2, a2);
  unsigned int v30 = (unsigned int *)(*(void *)(v29 + 32) + 32 * v12);
  unsigned int v31 = v12 + 1;
  if (v49 <= a5)
  {
    llvm::MachineOperand::ChangeToRegister((uint64_t)v30, v18, 0, 0, 1, 0, 0, 0);
    llvm::MachineInstr::removeOperand((char *)v29, v31);
    unsigned int v32 = 2549;
    if (a8) {
      unsigned int v32 = 2573;
    }
    BOOL v33 = a8 == 0;
    int v34 = 11604;
    int v35 = 13229;
  }
  else
  {
    llvm::MachineOperand::ChangeToImmediate(v30, a5, 0);
    llvm::MachineInstr::removeOperand((char *)v29, v31);
    unsigned int v32 = 2548;
    if (a8) {
      unsigned int v32 = 2572;
    }
    BOOL v33 = a8 == 0;
    int v34 = 11603;
    int v35 = 13228;
  }
  if (!v33) {
    int v34 = v35;
  }
  if ((a7 & 1) == 0) {
    unsigned int v32 = v34;
  }
  *(void *)(v29 + 16) = a10[1] + 48 * v32;
  if (a8)
  {
    uint64_t v36 = *(void *)(v29 + 32);
    unsigned int SubReg = llvm::MCRegisterInfo::getSubReg((void *)(a1 + 8), v14, a4);
    llvm::MachineOperand::setReg(v36, SubReg);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 50331648;
    DWORD1(v50) = v14;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, (const llvm::MachineOperand *)&v50);
    if (a9) {
      return;
    }
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 100663296;
    DWORD1(v50) = v14;
    uint64_t v38 = (llvm::MachineInstr *)v29;
  }
  else
  {
    if (v18 == -1) {
      unsigned int v18 = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(v46 + 40), (uint64_t)&off_1E66A4340, "", 0);
    }
    llvm::MachineOperand::setReg(*(void *)(v29 + 32), v18);
    if (v49 <= a5 && (a7 & 1) == 0) {
      **(_DWORD **)(v29 + 32) = **(_DWORD **)(v29 + 32) & 0xFFF000FF | 0x2100;
    }
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 50331648;
    DWORD1(v50) = v18;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, (const llvm::MachineOperand *)&v50);
    int v39 = llvm::MCRegisterInfo::getSubReg((void *)(a1 + 8), v14, a4);
    uint64_t v40 = sub_1CD3C8EB4(v16, a2, (unsigned __int8 **)(a2 + 56), a10[1] + 48144, v39);
    uint64_t v42 = v41;
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 256;
    DWORD1(v50) = v18;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 256;
    DWORD1(v50) = v18;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 256;
    DWORD1(v50) = v18;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 256;
    DWORD1(v50) = v18;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    long long v50 = 0u;
    long long v51 = 0u;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((void *)&v50 + 1) = 0;
    *(void *)&long long v51 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    long long v50 = 0u;
    long long v51 = 0u;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
    *((void *)&v50 + 1) = 0;
    long long v51 = 0uLL;
    LODWORD(v50) = 100663296;
    DWORD1(v50) = v18;
    uint64_t v38 = v42;
  }
  llvm::MachineInstr::addOperand(v38, (const llvm::MachineOperand *)&v50);
}

void sub_1CD3EF52C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *(uint64_t **)(*(void *)(a2 + 24) + 32);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7[2] + 112))(v7[2]);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7[2] + 104))(v7[2]);
  uint64_t v121 = a4;
  uint64_t v10 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * a4 + 16);
  int v134 = 0;
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *))(*(void *)v8 + 232))(v8, v7, v10, &v134);
  long long v117 = v7;
  int v12 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[1] + 16))(v7[1], *v7) + 281);
  uint64_t v13 = *(void *)(a2 + 24);
  char v14 = 1;
  BOOL v112 = sub_1CB8F9CA0(a2, 1);
  int v15 = 0;
  unint64_t v123 = (llvm::MachineInstr *)a2;
  unsigned int v16 = 8;
  if (v18 || !v17)
  {
    switch(**(_WORD **)(a2 + 16))
    {
      case 0x2F7D:
      case 0x2F7E:
        goto LABEL_5;
      case 0x2F7F:
      case 0x2F80:
        goto LABEL_6;
      case 0x2F81:
      case 0x2F82:
        goto LABEL_7;
      case 0x2F83:
      case 0x2F84:
        goto LABEL_8;
      case 0x2F85:
      case 0x2F86:
        goto LABEL_9;
      case 0x2F87:
      case 0x2F88:
        goto LABEL_10;
      case 0x2F89:
      case 0x2F8A:
        goto LABEL_11;
      case 0x2F8B:
      case 0x2F8C:
        goto LABEL_12;
      case 0x2F8D:
      case 0x2F8E:
        goto LABEL_13;
      case 0x2F8F:
      case 0x2F90:
        goto LABEL_14;
      case 0x2F91:
      case 0x2F92:
        goto LABEL_15;
      case 0x2F93:
      case 0x2F94:
        goto LABEL_16;
      case 0x2F95:
      case 0x2F96:
        goto LABEL_17;
      case 0x2F97:
      case 0x2F98:
        goto LABEL_18;
      case 0x2F99:
      case 0x2F9A:
        goto LABEL_19;
      case 0x2F9B:
      case 0x2F9C:
        goto LABEL_20;
      case 0x2F9D:
      case 0x2F9E:
        goto LABEL_21;
      case 0x2F9F:
      case 0x2FA0:
        goto LABEL_22;
      case 0x2FA1:
      case 0x2FA2:
        goto LABEL_23;
      case 0x2FA3:
      case 0x2FA4:
        goto LABEL_24;
      case 0x2FA5:
      case 0x2FA6:
        goto LABEL_25;
      case 0x2FA7:
      case 0x2FA8:
        goto LABEL_26;
      case 0x2FA9:
      case 0x2FAA:
        goto LABEL_27;
      case 0x2FAB:
      case 0x2FAC:
        goto LABEL_30;
      case 0x2FAD:
      case 0x2FAE:
        goto LABEL_28;
      default:
        JUMPOUT(0);
    }
  }
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x3254:
    case 0x3255:
LABEL_5:
      char v14 = 0;
      unsigned int v16 = 112;
      goto LABEL_29;
    case 0x3256:
    case 0x3257:
LABEL_6:
      char v14 = 0;
      unsigned int v16 = 128;
      goto LABEL_29;
    case 0x3258:
    case 0x3259:
LABEL_7:
      char v14 = 0;
      unsigned int v16 = 144;
      goto LABEL_29;
    case 0x325A:
    case 0x325B:
LABEL_8:
      char v14 = 0;
      unsigned int v16 = 160;
      goto LABEL_29;
    case 0x325C:
    case 0x325D:
LABEL_9:
      unsigned int v16 = 16;
      goto LABEL_29;
    case 0x325E:
    case 0x325F:
LABEL_10:
      char v14 = 0;
      unsigned int v16 = 176;
      goto LABEL_29;
    case 0x3260:
    case 0x3261:
LABEL_11:
      char v14 = 0;
      unsigned int v16 = 192;
      goto LABEL_29;
    case 0x3262:
    case 0x3263:
LABEL_12:
      char v14 = 0;
      unsigned int v16 = 208;
      goto LABEL_29;
    case 0x3264:
    case 0x3265:
LABEL_13:
      char v14 = 0;
      unsigned int v16 = 224;
      goto LABEL_29;
    case 0x3266:
    case 0x3267:
LABEL_14:
      char v14 = 0;
      unsigned int v16 = 240;
      goto LABEL_29;
    case 0x3268:
    case 0x3269:
LABEL_15:
      char v14 = 0;
      unsigned int v16 = 256;
      goto LABEL_29;
    case 0x326A:
    case 0x326B:
LABEL_16:
      char v14 = 0;
      unsigned int v16 = 288;
      goto LABEL_29;
    case 0x326C:
    case 0x326D:
LABEL_17:
      char v14 = 0;
      unsigned int v16 = 320;
      goto LABEL_29;
    case 0x326E:
    case 0x326F:
LABEL_18:
      unsigned int v16 = 32;
      goto LABEL_29;
    case 0x3270:
    case 0x3271:
LABEL_19:
      char v14 = 0;
      unsigned int v16 = 352;
      goto LABEL_29;
    case 0x3272:
    case 0x3273:
LABEL_20:
      char v14 = 0;
      unsigned int v16 = 384;
      goto LABEL_29;
    case 0x3274:
    case 0x3275:
LABEL_21:
      char v14 = 0;
      unsigned int v16 = 416;
      goto LABEL_29;
    case 0x3276:
    case 0x3277:
LABEL_22:
      char v14 = 0;
      unsigned int v16 = 448;
      goto LABEL_29;
    case 0x3278:
    case 0x3279:
LABEL_23:
      char v14 = 0;
      unsigned int v16 = 480;
      goto LABEL_29;
    case 0x327A:
    case 0x327B:
LABEL_24:
      char v14 = 0;
      unsigned int v16 = 48;
      goto LABEL_29;
    case 0x327C:
    case 0x327D:
LABEL_25:
      char v14 = 0;
      unsigned int v16 = 512;
      goto LABEL_29;
    case 0x327E:
    case 0x327F:
LABEL_26:
      char v14 = 0;
      unsigned int v16 = 64;
      goto LABEL_29;
    case 0x3280:
    case 0x3281:
LABEL_27:
      char v14 = 0;
      unsigned int v16 = 80;
      goto LABEL_29;
    case 0x3282:
    case 0x3283:
      goto LABEL_30;
    case 0x3284:
    case 0x3285:
LABEL_28:
      char v14 = 0;
      unsigned int v16 = 96;
LABEL_29:
      int v15 = 1;
LABEL_30:
      int v19 = 0;
      uint64_t v20 = *(void *)(a2 + 32);
      *(void *)uint64_t v120 = a4 + 1;
      int v122 = *(_DWORD *)(v20 + 32 * *(void *)v120 + 16) + v11;
      unint64_t v133 = *(unsigned int *)(v20 + 4);
      char v21 = 1;
      if ((v14 & 1) != 0 || (v16 & 0x18) == 0) {
        goto LABEL_35;
      }
      if (*(_WORD *)(*(void *)(a1 + 112) + 2 * v133))
      {
        if (!v15) {
          goto LABEL_34;
        }
        int v19 = 0;
        int v89 = 1;
        char v90 = 1;
        do
        {
          int v91 = v19;
          sub_1CD3EEE5C(a1, (uint64_t)v123, v133, v89, v122 + v19, a4, v12 != 0, v112, v90 & 1, v9);
          char v90 = 0;
          char v21 = 0;
          int v19 = v91 + 2;
          v16 -= 16;
          ++v89;
        }
        while (v16 > 0xF);
      }
      else
      {
        if (v112)
        {
LABEL_34:
          int v19 = 0;
          goto LABEL_35;
        }
        sub_1CD3EEE5C(a1, a2, v133, (((((v16 + 15) >> 3) & 0xFE) - 2) >> 1) + 1, (((v16 + 15) >> 3) & 0xFE) - 2 + v122, a4, v12 != 0, 0, 1, v9);
        char v21 = 0;
        int v19 = 0;
        v16 -= 16;
      }
LABEL_35:
      uint64_t v124 = v13;
      uint64_t v128 = v9;
      if (v12)
      {
        uint64_t v22 = v123;
        if (!v16) {
          goto LABEL_132;
        }
        int v23 = v19;
        BOOL v24 = v112;
        unint64_t v114 = v133 >> 3;
        int v113 = 1 << (v133 & 7);
        char v115 = (void *)(a1 + 8);
        unsigned int v118 = v133 - 1;
        while (1)
        {
          unsigned int v125 = v16;
          unsigned int v131 = v23;
          uint64_t v25 = (v23 + v122);
          char v129 = v21;
          if (v25 < 0x10000)
          {
            unsigned int VirtualRegister = -1;
            unsigned int v27 = v128;
            uint64_t v28 = v13;
          }
          else
          {
            unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v117[5], (uint64_t)&off_1E66A4340, "", 0);
            unsigned int v27 = v128;
            uint64_t v28 = v13;
            uint64_t v29 = sub_1CB84B760(v13, (uint64_t)v22, (unsigned __int8 **)v123 + 7, v128[1] + 69360);
            unsigned int v31 = v30;
            *((void *)&v135 + 1) = 0;
            long long v136 = 0uLL;
            LODWORD(v135) = 285221120;
            DWORD1(v135) = VirtualRegister;
            llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v135);
            LODWORD(v135) = 1;
            *((void *)&v135 + 1) = 0;
            *(void *)&long long v136 = 0;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            LODWORD(v135) = 1;
            *((void *)&v135 + 1) = 0;
            *(void *)&long long v136 = v25;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            LODWORD(v135) = 1;
            *((void *)&v135 + 1) = 0;
            *(void *)&long long v136 = v25;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            LODWORD(v135) = 1;
            *((void *)&v135 + 1) = 0;
            *(void *)&long long v136 = v25;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            long long v135 = 0u;
            long long v136 = 0u;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            LODWORD(v135) = 1;
            *((void *)&v135 + 1) = 0;
            *(void *)&long long v136 = 0;
            BOOL v24 = v112;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            long long v135 = 0u;
            long long v136 = 0u;
            llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v135);
            *((void *)&v135 + 1) = 0;
            long long v136 = 0uLL;
            LODWORD(v135) = 50331648;
            DWORD1(v135) = VirtualRegister;
            unsigned int v32 = v31;
            uint64_t v22 = v123;
            llvm::MachineInstr::addOperand(v32, v29, (const llvm::MachineOperand *)&v135);
          }
          BOOL v33 = (llvm::MachineInstr *)(*(uint64_t (**)(void *, uint64_t, const llvm::MachineInstr *, const llvm::MachineInstr *))(*v27 + 184))(v27, v28, v22, v22);
          llvm::MachineInstr::copyImplicitOps(v33, (llvm::MachineFunction *)v117, v22);
          int v34 = (unsigned int *)(*((void *)v33 + 4) + 32 * v121);
          if (v25 < 0x10000) {
            llvm::MachineOperand::ChangeToImmediate(v34, v25, 0);
          }
          else {
            llvm::MachineOperand::ChangeToRegister((uint64_t)v34, VirtualRegister, 0, 0, 1, 0, 0, 0);
          }
          llvm::MachineInstr::removeOperand((char *)v33, v120[0]);
          *((void *)&v135 + 1) = 0;
          long long v136 = 0uLL;
          LODWORD(v135) = 50331648;
          DWORD1(v135) = v133;
          llvm::MachineInstr::addOperand(v33, (const llvm::MachineOperand *)&v135);
          if ((v129 & 1) == 0)
          {
            *((void *)&v135 + 1) = 0;
            long long v136 = 0uLL;
            LODWORD(v135) = 100663296;
            DWORD1(v135) = v133;
            llvm::MachineInstr::addOperand(v33, (const llvm::MachineOperand *)&v135);
          }
          unsigned int v35 = v16 - 128;
          if (v16 >= 0x80) {
            break;
          }
          unsigned int v35 = v16 - 96;
          if (v16 >= 0x60)
          {
            if (v118 > 0x4A7E || (v113 & byte_1CDD8209E[v114]) == 0)
            {
              uint64_t v39 = *((void *)v33 + 4);
              unsigned int SubReg = llvm::MCRegisterInfo::getSubReg(v115, v133, dword_1CD96D598[v131 >> 1]);
              uint64_t v41 = v39;
              uint64_t v22 = v123;
              llvm::MachineOperand::setReg(v41, SubReg);
            }
            *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + 8 + ((v25 & 0xFFFF0000) != 0)];
            int v23 = v131 + 12;
            goto LABEL_51;
          }
          unsigned int v35 = v16 - 64;
          if (v16 >= 0x40)
          {
            if (v118 > 0x497E || (v113 & byte_1CDD76C32[v114]) == 0)
            {
              uint64_t v42 = *((void *)v33 + 4);
              unsigned int v43 = llvm::MCRegisterInfo::getSubReg(v115, v133, dword_1CD96D520[v131 >> 1]);
              uint64_t v44 = v42;
              uint64_t v22 = v123;
              llvm::MachineOperand::setReg(v44, v43);
            }
            *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + 6 + ((v25 & 0xFFFF0000) != 0)];
            int v23 = v131 + 8;
            goto LABEL_51;
          }
          unsigned int v35 = v16 - 32;
          if (v16 >= 0x20)
          {
            if (v118 > 0x406 || (v113 & byte_1CDD6BEEA[v114]) == 0)
            {
              uint64_t v45 = *((void *)v33 + 4);
              unsigned int v46 = llvm::MCRegisterInfo::getSubReg(v115, v133, dword_1CD96D4A0[v131 >> 1]);
              uint64_t v47 = v45;
              uint64_t v22 = v123;
              llvm::MachineOperand::setReg(v47, v46);
            }
            *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + 4 + ((v25 & 0xFFFF0000) != 0)];
            int v23 = v131 + 4;
            goto LABEL_51;
          }
          unsigned int v35 = v16 - 16;
          if (v16 >= 0x10)
          {
            if (v112 && (v118 > 0x806 || (v113 & byte_1CDD6A15E[v114]) == 0))
            {
              uint64_t v48 = *((void *)v33 + 4);
              unsigned int v49 = llvm::MCRegisterInfo::getSubReg(v115, v133, (v131 >> 1) + 1);
              uint64_t v50 = v48;
              uint64_t v22 = v123;
              llvm::MachineOperand::setReg(v50, v49);
            }
            *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + 2 + ((v25 & 0xFFFF0000) != 0)];
            int v23 = v131 + 2;
            goto LABEL_51;
          }
          v16 -= 8;
          if (v125 < 8 || v131) {
            goto LABEL_193;
          }
          *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + ((v25 & 0xFFFF0000) != 0)];
          int v23 = 1;
LABEL_52:
          char v21 = 0;
          if (!v16) {
            goto LABEL_132;
          }
        }
        if (v118 > 0x4B7E || (v113 & byte_1CDD8D9FE[v114]) == 0)
        {
          uint64_t v36 = *((void *)v33 + 4);
          unsigned int v37 = llvm::MCRegisterInfo::getSubReg(v115, v133, dword_1CD96D608[v131 >> 1]);
          uint64_t v38 = v36;
          uint64_t v22 = v123;
          llvm::MachineOperand::setReg(v38, v37);
        }
        *((void *)v33 + 2) = v128[1] + 48 * dword_1CD962F70[12 * v24 + 10 + ((v25 & 0xFFFF0000) != 0)];
        int v23 = v131 + 16;
LABEL_51:
        unsigned int v16 = v35;
        goto LABEL_52;
      }
      uint64_t v22 = v123;
      long long v51 = v117;
      if (!v16) {
        goto LABEL_132;
      }
      int v52 = v19;
      char v127 = (unsigned __int8 **)((char *)v123 + 56);
      BOOL v53 = v112;
      unint64_t v119 = v133 >> 3;
      int v116 = 1 << (v133 & 7);
      int v126 = (void *)(a1 + 8);
      unsigned int v54 = v133 - 1;
      break;
    default:
      if (**(_WORD **)(a2 + 16) == 13356)
      {
        llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(a2 + 32) + 32 * a4), (*(_DWORD *)(*(void *)(a2 + 32) + 32 * (a4 + 1) + 16) + v11), 0);
        llvm::MachineInstr::removeOperand((char *)a2, a4 + 1);
        *(void *)(a2 + 16) = v9[1] + 555792;
      }
      else
      {
        llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(a2 + 32) + 32 * a4), v11, 0);
      }
      return;
  }
  while (1)
  {
    unsigned int v132 = v52;
    uint64_t v55 = (v52 + v122);
    char v130 = v21;
    if (v55 < 0x400)
    {
      unsigned int v56 = -1;
      unsigned int v63 = v128;
    }
    else
    {
      unsigned int v56 = llvm::MachineRegisterInfo::createVirtualRegister(v51[5], (uint64_t)&off_1E66A46D8, "", 0);
      __int16 v57 = sub_1CB84B760(v124, (uint64_t)v22, v127, v128[1] + 69360);
      unsigned int v59 = v58;
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 285221120;
      DWORD1(v135) = v56;
      llvm::MachineInstr::addOperand(v58, v57, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = v55;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = v55;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = v55;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      long long v135 = 0u;
      long long v136 = 0u;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      long long v135 = 0u;
      long long v136 = 0u;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 50331648;
      DWORD1(v135) = v56;
      llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v135);
      unsigned int v60 = sub_1CB84B760(v124, (uint64_t)v22, v127, v128[1] + 48720);
      uint64_t v62 = v61;
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 16777984;
      DWORD1(v135) = v56;
      llvm::MachineInstr::addOperand(v61, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      long long v135 = 0u;
      long long v136 = 0u;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      unsigned int v63 = v128;
      unsigned int v54 = v133 - 1;
      *((void *)&v135 + 1) = 0;
      *(void *)&long long v136 = 0;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      long long v135 = 0u;
      long long v136 = 0u;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 50331648;
      DWORD1(v135) = v56;
      llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v135);
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 100663296;
      DWORD1(v135) = v56;
      unint64_t v64 = v60;
      BOOL v53 = v112;
      llvm::MachineInstr::addOperand(v62, v64, (const llvm::MachineOperand *)&v135);
    }
    uint64_t v65 = (llvm::MachineInstr *)(*(uint64_t (**)(void *, uint64_t, const llvm::MachineInstr *, const llvm::MachineInstr *))(*v63 + 184))(v63, v124, v22, v22);
    llvm::MachineInstr::copyImplicitOps(v65, (llvm::MachineFunction *)v117, v22);
    unint64_t v66 = (unsigned int *)(*((void *)v65 + 4) + 32 * v121);
    if (v55 < 0x400) {
      llvm::MachineOperand::ChangeToImmediate(v66, v55, 0);
    }
    else {
      llvm::MachineOperand::ChangeToRegister((uint64_t)v66, v56, 0, 0, 1, 0, 0, 0);
    }
    llvm::MachineInstr::removeOperand((char *)v65, v120[0]);
    *((void *)&v135 + 1) = 0;
    long long v136 = 0uLL;
    LODWORD(v135) = 50331648;
    DWORD1(v135) = v133;
    llvm::MachineInstr::addOperand(v65, (const llvm::MachineOperand *)&v135);
    if ((v130 & 1) == 0)
    {
      *((void *)&v135 + 1) = 0;
      long long v136 = 0uLL;
      LODWORD(v135) = 100663296;
      DWORD1(v135) = v133;
      llvm::MachineInstr::addOperand(v65, (const llvm::MachineOperand *)&v135);
    }
    if (v16 >= 0x200) {
      break;
    }
    unsigned int v67 = v55;
    uint64_t v68 = v63;
    unsigned int v69 = v16 - 480;
    if (v16 < 0x1E0)
    {
      unsigned int v69 = v16 - 448;
      if (v16 < 0x1C0)
      {
        unsigned int v69 = v16 - 416;
        if (v16 < 0x1A0)
        {
          unsigned int v69 = v16 - 384;
          if (v16 < 0x180)
          {
            unsigned int v69 = v16 - 352;
            if (v16 < 0x160)
            {
              unsigned int v69 = v16 - 320;
              if (v16 < 0x140)
              {
                unsigned int v88 = v16 - 288;
                if (v16 >= 0x120)
                {
                  if (v54 > 0x505E || (v116 & byte_1CDDBDEC4[v119]) == 0)
                  {
                    uint64_t v92 = *((void *)v65 + 4);
                    unsigned int v93 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D79C + (v132 & 0xFFFFFFFC)));
                    llvm::MachineOperand::setReg(v92, v93);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 20 + (v67 > 0x3FF)];
                  int v52 = v132 + 36;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 256;
                if (v16 >= 0x100)
                {
                  if (v54 > 0x4F66 || (v116 & byte_1CDDB8F28[v119]) == 0)
                  {
                    uint64_t v94 = *((void *)v65 + 4);
                    unsigned int v95 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D778 + (v132 & 0xFFFFFFFC)));
                    llvm::MachineOperand::setReg(v94, v95);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 18 + (v67 > 0x3FF)];
                  int v52 = v132 + 32;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 224;
                if (v16 >= 0xE0)
                {
                  if (v54 > 0x4E6E || (v116 & byte_1CDDAE2AC[v119]) == 0)
                  {
                    uint64_t v96 = *((void *)v65 + 4);
                    unsigned int v97 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D728[v132 >> 1]);
                    llvm::MachineOperand::setReg(v96, v97);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 16 + (v67 > 0x3FF)];
                  int v52 = v132 + 28;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 192;
                if (v16 >= 0xC0)
                {
                  if (v54 > 0x4D6E || (v116 & byte_1CDDA3B0C[v119]) == 0)
                  {
                    uint64_t v98 = *((void *)v65 + 4);
                    unsigned int v99 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D6D0[v132 >> 1]);
                    llvm::MachineOperand::setReg(v98, v99);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 14 + (v67 > 0x3FF)];
                  int v52 = v132 + 24;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 160;
                if (v16 >= 0xA0)
                {
                  if (v54 > 0x4C76 || (v116 & byte_1CDD9984E[v119]) == 0)
                  {
                    uint64_t v100 = *((void *)v65 + 4);
                    unsigned int v101 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D670[v132 >> 1]);
                    llvm::MachineOperand::setReg(v100, v101);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 12 + (v67 > 0x3FF)];
                  int v52 = v132 + 20;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 128;
                if (v16 >= 0x80)
                {
                  if (v54 > 0x4B7E || (v116 & byte_1CDD8D9FE[v119]) == 0)
                  {
                    uint64_t v102 = *((void *)v65 + 4);
                    unsigned int v103 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D608[v132 >> 1]);
                    llvm::MachineOperand::setReg(v102, v103);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 10 + (v67 > 0x3FF)];
                  int v52 = v132 + 16;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 96;
                if (v16 >= 0x60)
                {
                  if (v54 > 0x4A7E || (v116 & byte_1CDD8209E[v119]) == 0)
                  {
                    uint64_t v104 = *((void *)v65 + 4);
                    unsigned int v105 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D598[v132 >> 1]);
                    llvm::MachineOperand::setReg(v104, v105);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 8 + (v67 > 0x3FF)];
                  int v52 = v132 + 12;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 64;
                if (v16 >= 0x40)
                {
                  if (v54 > 0x497E || (v116 & byte_1CDD76C32[v119]) == 0)
                  {
                    uint64_t v106 = *((void *)v65 + 4);
                    unsigned int v107 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D520[v132 >> 1]);
                    llvm::MachineOperand::setReg(v106, v107);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 6 + (v67 > 0x3FF)];
                  int v52 = v132 + 8;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 32;
                if (v16 >= 0x20)
                {
                  if (v54 > 0x406 || (v116 & byte_1CDD6BEEA[v119]) == 0)
                  {
                    uint64_t v108 = *((void *)v65 + 4);
                    unsigned int v109 = llvm::MCRegisterInfo::getSubReg(v126, v133, dword_1CD96D4A0[v132 >> 1]);
                    llvm::MachineOperand::setReg(v108, v109);
                  }
                  *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 4 + (v67 > 0x3FF)];
                  int v52 = v132 + 4;
                  goto LABEL_123;
                }
                unsigned int v88 = v16 - 16;
                if (v16 < 0x10)
                {
                  BOOL v17 = v16 >= 8;
                  v16 -= 8;
                  if (!v17 || v132) {
                    goto LABEL_193;
                  }
                  *((void *)v65 + 2) = v128[1] + 48 * dword_1CD962E50[36 * v53 + (v67 > 0x3FF)];
                  int v52 = 1;
                }
                else
                {
                  if (v112 && (v54 > 0x806 || (v116 & byte_1CDD6A15E[v119]) == 0))
                  {
                    uint64_t v110 = *((void *)v65 + 4);
                    unsigned int v111 = llvm::MCRegisterInfo::getSubReg(v126, v133, (v132 >> 1) + 1);
                    llvm::MachineOperand::setReg(v110, v111);
                  }
                  *((void *)v65 + 2) = v128[1] + 48 * dword_1CD962E50[36 * v53 + 2 + (v67 > 0x3FF)];
                  int v52 = v132 + 2;
LABEL_123:
                  unsigned int v16 = v88;
                }
                uint64_t v22 = v123;
                goto LABEL_95;
              }
              if (v54 > 0x42CE || (v116 & byte_1CDDC001E[v119]) == 0)
              {
                uint64_t v85 = *((void *)v65 + 4);
                unsigned int v86 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D7BC + (v132 & 0xFFFFFFFC)));
                uint64_t v87 = v85;
                uint64_t v22 = v123;
                llvm::MachineOperand::setReg(v87, v86);
              }
              *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 22 + (v67 > 0x3FF)];
              int v52 = v132 + 40;
            }
            else
            {
              if (v54 > 0x43BE || (v116 & byte_1CDDC1C5A[v119]) == 0)
              {
                uint64_t v82 = *((void *)v65 + 4);
                unsigned int v83 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D7D8 + (v132 & 0xFFFFFFFC)));
                uint64_t v84 = v82;
                uint64_t v22 = v123;
                llvm::MachineOperand::setReg(v84, v83);
              }
              *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 24 + (v67 > 0x3FF)];
              int v52 = v132 + 44;
            }
          }
          else
          {
            if (v54 > 0x44B6 || (v116 & byte_1CDDC38EA[v119]) == 0)
            {
              uint64_t v79 = *((void *)v65 + 4);
              unsigned int v80 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D7F0 + (v132 & 0xFFFFFFFC)));
              uint64_t v81 = v79;
              uint64_t v22 = v123;
              llvm::MachineOperand::setReg(v81, v80);
            }
            *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 26 + (v67 > 0x3FF)];
            int v52 = v132 + 48;
          }
        }
        else
        {
          if (v54 > 0x45AE || (v116 & byte_1CDDC55D0[v119]) == 0)
          {
            uint64_t v76 = *((void *)v65 + 4);
            unsigned int v77 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D804 + (v132 & 0xFFFFFFFC)));
            uint64_t v78 = v76;
            uint64_t v22 = v123;
            llvm::MachineOperand::setReg(v78, v77);
          }
          *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 28 + (v67 > 0x3FF)];
          int v52 = v132 + 52;
        }
      }
      else
      {
        if (v54 > 0x469E || (v116 & byte_1CDDC7308[v119]) == 0)
        {
          uint64_t v73 = *((void *)v65 + 4);
          unsigned int v74 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D814 + (v132 & 0xFFFFFFFC)));
          uint64_t v75 = v73;
          uint64_t v22 = v123;
          llvm::MachineOperand::setReg(v75, v74);
        }
        *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 30 + (v67 > 0x3FF)];
        int v52 = v132 + 56;
      }
    }
    else
    {
      if (v54 > 0x478E || (v116 & byte_1CDDC9092[v119]) == 0)
      {
        uint64_t v70 = *((void *)v65 + 4);
        unsigned int v71 = llvm::MCRegisterInfo::getSubReg(v126, v133, *(_DWORD *)((char *)&unk_1CD96D820 + (v132 & 0xFFFFFFFC)));
        uint64_t v72 = v70;
        uint64_t v22 = v123;
        llvm::MachineOperand::setReg(v72, v71);
      }
      *((void *)v65 + 2) = v68[1] + 48 * dword_1CD962E50[36 * v53 + 32 + (v67 > 0x3FF)];
      int v52 = v132 + 60;
    }
    unsigned int v16 = v69;
LABEL_95:
    char v21 = 0;
    long long v51 = v117;
    if (!v16) {
      goto LABEL_132;
    }
  }
  if (v54 > 0x487E || (v116 & byte_1CDDCAE70[v119]) == 0) {
LABEL_193:
  }
    llvm::report_fatal_error((llvm *)"Unable to materialize spill/reload!", (const llvm::Twine *)1);
  *((void *)v65 + 2) = v63[1] + 48 * dword_1CD962E50[36 * v53 + 34 + (v55 > 0x3FF)];
LABEL_132:
  llvm::MachineInstr::eraseFromParent(v22);
}

void *sub_1CD3F0DDC()
{
  return &unk_1CD962FD0;
}

uint64_t sub_1CD3F0DF0()
{
  return 0;
}

uint64_t sub_1CD3F0DF8()
{
  return 0;
}

uint64_t sub_1CD3F0E04()
{
  return 1;
}

uint64_t sub_1CD3F0E0C()
{
  return 0;
}

uint64_t sub_1CD3F0E14()
{
  return 0;
}

uint64_t sub_1CD3F0E1C()
{
  return 0;
}

uint64_t sub_1CD3F0E2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3F0E34()
{
  return 0;
}

uint64_t sub_1CD3F0E3C()
{
  return 0;
}

uint64_t sub_1CD3F0E44()
{
  return 0;
}

uint64_t sub_1CD3F0E4C()
{
  return 1;
}

uint64_t sub_1CD3F0E54()
{
  return 0;
}

uint64_t sub_1CD3F0E5C()
{
  return 0;
}

uint64_t sub_1CD3F0E64()
{
  return 0;
}

uint64_t sub_1CD3F0E6C()
{
  return 1;
}

uint64_t sub_1CD3F0E74()
{
  return 0;
}

uint64_t sub_1CD3F0E7C()
{
  return 0;
}

uint64_t sub_1CD3F0E90()
{
  return 0;
}

uint64_t sub_1CD3F0E98(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 24 * a2);
  uint64_t v4 = v2 + v3;
  if (v2) {
    strlen((const char *)(v2 + v3));
  }
  return v4;
}

uint64_t sub_1CD3F0EEC()
{
  return 1;
}

uint64_t sub_1CD3F0EF4()
{
  return 1;
}

uint64_t sub_1CD3F0EFC()
{
  return 0;
}

uint64_t sub_1CD3F0F04()
{
  return 0;
}

void sub_1CD3F0F0C(llvm::TargetRegisterInfo *this)
{
  *(void *)this = &unk_1F25ECEA0;
  uint64_t v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }

  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1CD3F0F70(llvm::TargetRegisterInfo *this)
{
  *(void *)this = &unk_1F25ECEA0;
  uint64_t v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1CD3F0FBC()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F0FE8()
{
  return 0;
}

uint64_t sub_1CD3F0FF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD3F0FF8()
{
  return 1;
}

uint64_t sub_1CD3F1000()
{
  return 0;
}

uint64_t sub_1CD3F1008()
{
  return 0;
}

uint64_t sub_1CD3F1010()
{
  return 1;
}

void sub_1CD3F1018()
{
}

uint64_t sub_1CD3F156C()
{
  return 1;
}

_OWORD *sub_1CD3F1574(void *a1, unsigned int a2)
{
  if (a2 <= 0x20)
  {
    *a1 = 1;
    goto LABEL_5;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v3 = a2;
  double result = operator new(24 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v3;
  int v5 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v5)
  {
LABEL_5:
    double result = a1 + 1;
    uint64_t v6 = a1 + 97;
    goto LABEL_6;
  }
  uint64_t v6 = (_OWORD *)((char *)result + 24 * v3);
LABEL_6:
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *double result = v7;
    double result = (_OWORD *)((char *)result + 24);
  }
  while (result != v6);
  return result;
}

_OWORD *sub_1CD3F1608(_OWORD *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v3 = (char *)result + 8;
      uint64_t v4 = (char *)result + 776;
    }
    else
    {
      unsigned int v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return sub_1CD3F18BC(result);
      }
      if (!v2)
      {
        unsigned int v5 = 0;
LABEL_11:
        *(void *)double result = v5;
        return result;
      }
      uint64_t v3 = (char *)*((void *)result + 1);
      uint64_t v4 = &v3[24 * v2];
    }
    do
    {
      *(void *)uint64_t v3 = -4096;
      *((void *)v3 + 1) = -4096;
      v3 += 24;
    }
    while (v3 != v4);
    unsigned int v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

void *sub_1CD3F1684(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  char v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 9)
  {
    uint64_t v6 = result + 1;
    *double result = 1;
    int64x2_t v7 = result + 17;
    do
    {
LABEL_10:
      void *v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *double result = 0;
      if (!v5) {
        return result;
      }
      uint64_t v6 = (void *)result[1];
      int64x2_t v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CB901268(v1, v5);
}

void sub_1CD3F1760(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1CB833614();
    }
    int v4 = operator new(8 * a2);
    unsigned int v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    int64x2_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v10 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v11 >= a2) {
              v11 %= a2;
            }
          }
          else
          {
            v11 &= a2 - 1;
          }
          if (v11 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v11))
            {
              *(void *)(*(void *)a1 + 8 * v11) = v7;
              goto LABEL_15;
            }
            void *v7 = *v10;
            *uint64_t v10 = **(void **)(*(void *)a1 + 8 * v11);
            **(void **)(*(void *)a1 + 8 * v11) = v10;
            uint64_t v10 = v7;
          }
          unint64_t v11 = v8;
LABEL_15:
          int64x2_t v7 = v10;
          uint64_t v10 = (void *)*v10;
          unint64_t v8 = v11;
        }
        while (v10);
      }
    }
  }
  else
  {
    int v12 = *(void **)a1;
    *(void *)a1 = 0;
    if (v12) {
      operator delete(v12);
    }
    *(void *)(a1 + 8) = 0;
  }
}

_OWORD *sub_1CD3F18BC(_OWORD *result)
{
  int v1 = result;
  int v2 = *(_DWORD *)result;
  int v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    unsigned int v5 = (int64x2_t *)((char *)result + 776);
    *(void *)double result = 1;
    uint64_t v6 = (int64x2_t *)((char *)result + 8);
LABEL_7:
    int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      int64x2_t *v6 = v7;
      uint64_t v6 = (int64x2_t *)((char *)v6 + 24);
    }
    while (v6 != v5);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v4 == *((_DWORD *)result + 4))
    {
      *(void *)double result = 0;
      if (!v4) {
        return result;
      }
      uint64_t v6 = (int64x2_t *)*((void *)result + 1);
      unsigned int v5 = (int64x2_t *)((char *)v6 + 24 * v4);
      goto LABEL_7;
    }
    MEMORY[0x1D25D9CD0](*((void *)result + 1), 8);
  }

  return sub_1CD3F1574(v1, v4);
}

uint64_t sub_1CD3F198C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (sub_1CD3F19F0(a1, a2, a3, &v7)) {
    return v7;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = a1 + 8;
    unsigned int v6 = 32;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  return v5 + 24 * v6;
}

uint64_t sub_1CD3F19F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 32;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      int v12 = 0;
      uint64_t result = 0;
      goto LABEL_11;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  int v12 = (void *)(v4 + 24 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -8192;
      }
      if (v19 && v13 == -8192) {
        unsigned int v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      int v12 = (void *)(v4 + 24 * (v21 & v10));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    if (v16) {
      int v12 = v16;
    }
  }
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t sub_1CD3F1AF8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  unsigned int v16 = 0;
  uint64_t result = sub_1CD3F19F0(a2, *a3, a3[1], &v16);
  int v9 = v16;
  if (result)
  {
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      unsigned int v11 = 32;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      unsigned int v11 = *(_DWORD *)(a2 + 16);
    }
    char v12 = 0;
    uint64_t v13 = v10 + 24 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD3F1BD4((_DWORD *)a2, a3, v16);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(void *)(result + 8) = a3[1];
    *(unsigned char *)(result + 16) = *a4;
    uint64_t v14 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      unsigned int v15 = 32;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8);
      unsigned int v15 = *(_DWORD *)(a2 + 16);
    }
    uint64_t v13 = v14 + 24 * v15;
    char v12 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

void *sub_1CD3F1BD4(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 32;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    sub_1CD3F1CA0((uint64_t)a1, v6);
    unint64_t v8 = 0;
    sub_1CD3F19F0((uint64_t)a1, *a2, a2[1], &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*a3 != -4096 || a3[1] != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD3F1CA0(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x20)
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD3F1E74(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v15;
  do
  {
    uint64_t v11 = *(void *)(a1 + v8 + 8);
    uint64_t v10 = *(void *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)int v9 = *(_OWORD *)(a1 + v8 + 8);
      v9[16] = *(unsigned char *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 768);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CD3F1E74(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t sub_1CD3F1E74(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (int64x2_t *)(result + 8);
    int v9 = (int64x2_t *)(result + 776);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(int64x2_t **)(result + 8);
    int v9 = (int64x2_t *)((char *)v8 + 24 * v7);
  }
  int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *uint64_t v8 = v10;
    uint64_t v8 = (int64x2_t *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v12 != -4096) && (v11 != -8192 || v12 != -8192))
    {
      uint64_t v14 = 0;
      uint64_t result = sub_1CD3F19F0((uint64_t)v5, v11, v12, &v14);
      uint64_t v13 = v14;
      *uint64_t v14 = *(void *)a2;
      v13[1] = *(void *)(a2 + 8);
      *((unsigned char *)v13 + 16) = *(unsigned char *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CD3F1F64(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(_DWORD **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD3F20EC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    unsigned int v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      unsigned int *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 64);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD3F20EC(a1, v14, v9);
}

uint64_t sub_1CD3F20EC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_DWORD *)(result + 8);
    int v9 = (_DWORD *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(_DWORD **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CB904770((uint64_t)v5, a2, &v11);
      unsigned int v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD3F21B0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1CD3F223C((uint64_t)a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1CD3F223C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
LABEL_4:
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)&long long v18 = *v5;
    *(void *)(a1 + 8) = v5 + 1;
    sub_1CB904CD8(a1, &v18);
    return;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = v6 - *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = v8 - *(void *)a1;
  if (v7 < v9)
  {
    if (v8 != v6)
    {
      *(void *)&long long v18 = operator new(0x1000uLL);
      sub_1CD3F23B4(a1, &v18);
      return;
    }
    *(void *)&long long v18 = operator new(0x1000uLL);
    sub_1CD3F24DC((void **)a1, &v18);
    goto LABEL_4;
  }
  if (v8 == *(void *)a1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9 >> 2;
  }
  uint64_t v20 = a1 + 24;
  if (v10 >> 61) {
    sub_1CB833614();
  }
  *(void *)&long long v18 = operator new(8 * v10);
  *((void *)&v18 + 1) = v18 + v7;
  *(void *)&long long v19 = v18 + v7;
  *((void *)&v19 + 1) = v18 + 8 * v10;
  int v17 = operator new(0x1000uLL);
  sub_1CD3F23B4((uint64_t)&v18, &v17);
  uint64_t v11 = *(char **)(a1 + 16);
  if (v11 == *(char **)(a1 + 8))
  {
    uint64_t v12 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v11 -= 8;
      sub_1CD3F24DC((void **)&v18, v11);
    }
    while (v11 != *(char **)(a1 + 8));
    uint64_t v12 = *(char **)(a1 + 16);
  }
  uint64_t v13 = *(void **)a1;
  long long v14 = v18;
  long long v15 = v19;
  *(void *)&long long v18 = *(void *)a1;
  *((void *)&v18 + 1) = v11;
  uint64_t v16 = *(void *)(a1 + 24);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(void *)&long long v19 = v12;
  *((void *)&v19 + 1) = v16;
  if (v12 != v11) {
    *(void *)&long long v19 = &v12[(v11 - v12 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v13) {
    operator delete(v13);
  }
}

void sub_1CD3F23B4(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = (v4 - v6) >> 2;
      }
      if (v14 >> 61) {
        sub_1CB833614();
      }
      long long v15 = (char *)operator new(8 * v14);
      uint64_t v16 = &v15[8 * (v14 >> 2)];
      uint64_t v18 = v4 - v5;
      BOOL v17 = v4 == v5;
      unint64_t v4 = v16;
      if (!v17)
      {
        unint64_t v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = &v15[8 * (v14 >> 2)];
        do
        {
          uint64_t v21 = *(void *)v5;
          v5 += 8;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 3;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = v8 >> 1;
      uint64_t v11 = &v5[-8 * v10];
      int64_t v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v13 = &v4[8 * v9];
      unint64_t v4 = &v11[v12];
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = &v11[v12];
    }
  }
  *(void *)unint64_t v4 = *a2;
  *(void *)(a1 + 16) += 8;
}

void sub_1CD3F24DC(void **a1, void *a2)
{
  unint64_t v4 = a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - (unsigned char *)v4;
      BOOL v12 = v13 == 0;
      uint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >> 61) {
        sub_1CB833614();
      }
      uint64_t v16 = (char *)operator new(8 * v15);
      uint64_t v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v17 = v5;
      uint64_t v18 = v7 - (unsigned char *)v4;
      if (v7 != (unsigned char *)v4)
      {
        BOOL v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v21 = v4;
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - (unsigned char *)v4)];
      if (v7 != (unsigned char *)v4)
      {
        memmove(&v11[-(v7 - (unsigned char *)v4)], v4, v7 - (unsigned char *)v4);
        unint64_t v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_1CD3F260C(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
}

long long *sub_1CD3F2684(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const std::string::value_type *a6, std::string::size_type a7, uint64_t a8)
{
  uint64_t result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(void *)(a1 + 192);
  if (v10) {
    *(unsigned char *)(a1 + 295) = 1;
  }
  if ((v10 & 2) != 0) {
    *(unsigned char *)(a1 + 314) = 1;
  }
  if ((v10 & 4) != 0) {
    *(unsigned char *)(a1 + 297) = 1;
  }
  if ((v10 & 8) != 0) {
    *(unsigned char *)(a1 + 288) = 1;
  }
  if ((v10 & 0x10) != 0) {
    *(unsigned char *)(a1 + 283) = 1;
  }
  if ((v10 & 0x20) != 0) {
    *(unsigned char *)(a1 + 280) = 1;
  }
  if ((v10 & 0x40) != 0) {
    *(unsigned char *)(a1 + 281) = 1;
  }
  if ((v10 & 0x80) != 0) {
    *(unsigned char *)(a1 + 282) = 1;
  }
  if ((v10 & 0x100) != 0) {
    *(unsigned char *)(a1 + 315) = 1;
  }
  if ((v10 & 0x200) != 0) {
    *(unsigned char *)(a1 + 286) = 1;
  }
  if ((v10 & 0x400) != 0) {
    *(unsigned char *)(a1 + 310) = 1;
  }
  if ((v10 & 0x800) != 0) {
    *(unsigned char *)(a1 + 311) = 1;
  }
  if ((v10 & 0x1000) != 0) {
    *(unsigned char *)(a1 + 312) = 1;
  }
  if ((v10 & 0x2000) != 0) {
    *(unsigned char *)(a1 + 287) = 1;
  }
  if ((v10 & 0x4000) != 0) {
    *(unsigned char *)(a1 + 305) = 1;
  }
  if ((v10 & 0x8000) != 0) {
    *(unsigned char *)(a1 + 303) = 1;
  }
  if ((v10 & 0x10000) != 0) {
    *(unsigned char *)(a1 + 306) = 1;
  }
  if ((v10 & 0x20000) != 0) {
    *(unsigned char *)(a1 + 284) = 1;
  }
  if ((v10 & 0x40000) != 0) {
    *(unsigned char *)(a1 + 290) = 1;
  }
  if ((v10 & 0x80000) != 0) {
    *(unsigned char *)(a1 + 289) = 1;
  }
  if ((v10 & 0x100000) != 0) {
    *(unsigned char *)(a1 + 291) = 1;
  }
  if ((v10 & 0x200000) != 0) {
    *(unsigned char *)(a1 + 292) = 1;
  }
  if ((v10 & 0x400000) != 0) {
    *(unsigned char *)(a1 + 293) = 1;
  }
  if ((v10 & 0x800000) != 0) {
    *(unsigned char *)(a1 + 299) = 1;
  }
  if ((v10 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 300) = 1;
  }
  if ((v10 & 0x2000000) != 0) {
    *(unsigned char *)(a1 + 301) = 1;
  }
  if ((v10 & 0x4000000) != 0) {
    *(unsigned char *)(a1 + 294) = 1;
  }
  if ((v10 & 0x8000000) != 0) {
    *(unsigned char *)(a1 + 298) = 1;
  }
  if ((v10 & 0x10000000) != 0) {
    *(unsigned char *)(a1 + 302) = 1;
  }
  if ((v10 & 0x20000000) != 0) {
    *(unsigned char *)(a1 + 296) = 1;
  }
  if ((v10 & 0x40000000) != 0) {
    *(unsigned char *)(a1 + 307) = 1;
  }
  if ((v10 & 0x80000000) != 0) {
    *(unsigned char *)(a1 + 308) = 1;
  }
  if ((v10 & 0x100000000) != 0) {
    *(unsigned char *)(a1 + 309) = 1;
  }
  if ((v10 & 0x200000000) != 0) {
    *(unsigned char *)(a1 + 304) = 1;
  }
  if ((v10 & 0x400000000) != 0) {
    *(unsigned char *)(a1 + 285) = 1;
  }
  return result;
}

uint64_t sub_1CD3F28D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 40 || (int v4 = *(_DWORD *)(a4 + 28), v4 != 2) && v4 != 1) {
    llvm::report_fatal_error((llvm *)"Expected a variant SchedClass", (const llvm::Twine *)1);
  }
  uint64_t v5 = *(void *)(a3 + 32);
  if (*(unsigned char *)v5
    || *(unsigned char *)(v5 + 32)
    || (*(_DWORD *)(v5 + 4) - 1) < 0x3FFFFFFF
    || (*(_DWORD *)(v5 + 36) - 1) <= 0x3FFFFFFE)
  {
    return 42;
  }
  else
  {
    return 41;
  }
}

uint64_t sub_1CD3F2960(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD4318BC(a2, a3, a4, a5);
}

void sub_1CD3F2974(uint64_t a1, long long *a2, std::string::value_type *a3, std::string::size_type a4, const std::string::value_type *a5, std::string::size_type a6)
{
  uint64_t v9 = llvm::TargetSubtargetInfo::TargetSubtargetInfo(a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E674EFD8, 35, (uint64_t)&off_1E674F928, 11, (uint64_t)&unk_1CDE0A1EC, (uint64_t)&unk_1CDE0A244, (uint64_t)&unk_1CDE0A25C, 0, 0, 0);
  void *v9 = &unk_1F25ED2C8;
  std::string::__init((std::string *)(v9 + 32), a3, a4);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 1;
  *(void *)(a1 + 305) = 0;
  *(_WORD *)(a1 + 313) = 1;
  *(unsigned char *)(a1 + 315) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_WORD *)(a1 + 332) = 771;
  *(_DWORD *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 340) = 1;
  *(void *)(a1 + 320) = &unk_1F25EA290;
  *(void *)(a1 + 344) = a1;
  sub_1CD3D2428(a1 + 352);
}

uint64_t sub_1CD3F2CE4()
{
  return 0;
}

uint64_t sub_1CD3F2CEC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, 0);
  if ((result & 0xFF00000000) != 0) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD3F2D30()
{
  return 0;
}

uint64_t sub_1CD3F2D38()
{
  return 0;
}

uint64_t sub_1CD3F2D40()
{
  return 0;
}

uint64_t sub_1CD3F2D48()
{
  return 0;
}

uint64_t sub_1CD3F2D50()
{
  return 0;
}

uint64_t sub_1CD3F2D58()
{
  return 0;
}

uint64_t sub_1CD3F2D60()
{
  return 0;
}

uint64_t sub_1CD3F2D68()
{
  return 0;
}

uint64_t sub_1CD3F2D70()
{
  return 0;
}

uint64_t sub_1CD3F2D78()
{
  return 0;
}

uint64_t sub_1CD3F2D80()
{
  return 0;
}

uint64_t sub_1CD3F2D88()
{
  return 0;
}

uint64_t sub_1CD3F2D90()
{
  return 0;
}

uint64_t sub_1CD3F2D98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t sub_1CD3F2DBC()
{
  return 0;
}

uint64_t sub_1CD3F2DC4()
{
  return 1;
}

uint64_t sub_1CD3F2DCC()
{
  return 1;
}

uint64_t sub_1CD3F2DE0()
{
  return 1;
}

uint64_t sub_1CD3F2DE8()
{
  return 2;
}

uint64_t sub_1CD3F2DF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 368))();
}

uint64_t sub_1CD3F2E1C()
{
  return 0;
}

void sub_1CD3F2E24(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CD3F2E2C()
{
  return 0;
}

uint64_t sub_1CD3F2E34()
{
  return 0;
}

void sub_1CD3F2E3C()
{
}

void sub_1CD3F2E5C(void *a1, uint64_t a2)
{
}

void sub_1CD3F2E6C()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F2E94(uint64_t a1)
{
  return a1 + 352;
}

uint64_t sub_1CD3F2E9C(uint64_t a1)
{
  return a1 + 320;
}

uint64_t sub_1CD3F2EA4(uint64_t a1)
{
  return *(void *)(a1 + 808);
}

uint64_t sub_1CD3F2EAC(uint64_t a1)
{
  return a1 + 800;
}

uint64_t sub_1CD3F2EB4(uint64_t a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 1288);

  return v1();
}

uint64_t sub_1CD3F2F24()
{
  return 1;
}

uint64_t sub_1CD3F2F2C()
{
  return 0;
}

uint64_t sub_1CD3F2F34()
{
  return 1;
}

uint64_t sub_1CD3F2F3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 304);
}

void sub_1CD3F2F48()
{
  nullsub_1953();

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F2F80()
{
  return 0;
}

uint64_t sub_1CD3F2F8C()
{
  return 0;
}

uint64_t sub_1CD3F2F98()
{
  return 0;
}

double sub_1CD3F2FA4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1CD3F2FB0@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1CD3F2FBC@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1CD3F2FC8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1CD3F2FD4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1CD3F2FE0@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1CD3F2FEC()
{
  return 0;
}

uint64_t sub_1CD3F2FF8()
{
  return 0;
}

void sub_1CD3F3000(void *a1, uint64_t a2)
{
  *a1 = &unk_1F25ED2C8;
  uint64_t v3 = a1[101];
  a1[101] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  nullsub_1953(a1 + 100, a2);
  sub_1CD3D51DC(a1 + 44);
}

void sub_1CD3F3070()
{
  llvm::TargetFrameLowering::~TargetFrameLowering((llvm::TargetFrameLowering *)(v0 + 320));
  if (*(char *)(v0 + 279) < 0) {
    operator delete(*(void **)(v0 + 256));
  }
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo((llvm::TargetSubtargetInfo *)v0);
}

void LLVMInitializeAGX1Target(llvm::PassRegistry *a1)
{
  qword_1EBD02478 = (uint64_t)sub_1CD3F4A60;
  PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(a1);
  sub_1CD640238(PassRegistry);

  sub_1CD3C8AF4((uint64_t)PassRegistry);
}

void sub_1CD3F30FC(void *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, std::string::size_type a5, const std::string::value_type *a6, std::string::size_type a7, long long *a8, uint64_t a9, uint64_t a10, int a11)
{
  sub_1CB906AA8((uint64_t)v18, a8);
  sub_1CB906564((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)v18, a9, a10, a11);
  sub_1CB906D7C((uint64_t)v18);
  *a1 = &unk_1F25ED500;
  operator new();
}

uint64_t sub_1CD3F3228(int a1, uint64_t *__sz)
{
  uint64_t result = sub_1CB906F34(__sz, 48, 3);
  *(_DWORD *)(result + 8) = -1;
  *(unsigned char *)(result + 12) = 0;
  *(void *)uint64_t result = &unk_1F25ECA80;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

BOOL sub_1CD3F3280(uint64_t a1, unsigned int a2)
{
  return a2 < 4 || a2 == 64;
}

void sub_1CD3F3298()
{
  if (byte_1EBCBEB40) {
    sub_1CD3C7E1C();
  }
  sub_1CD3F1018();
}

size_t sub_1CD3F32B0(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v21 = *((void *)a2 + 14);
  uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v21, -1, "target-cpu", 0xAuLL);
  uint64_t v19 = llvm::AttributeList::getAttributeAtIndex(&v21, -1, "target-features", 0xFuLL);
  if (llvm::Attribute::hasAttribute(&AttributeAtIndex, 0))
  {
    if (*(char *)(a1 + 519) < 0) {
      sub_1CB8BDF7C((uint64_t)&v18, *(const void **)(a1 + 496), *(void *)(a1 + 504));
    }
    else {
      std::string v18 = *(std::string *)(a1 + 496);
    }
  }
  else
  {
    ValueAsString = (const std::string::value_type *)llvm::Attribute::getValueAsString((llvm::Attribute *)&AttributeAtIndex);
    if (ValueAsString) {
      std::string::__init(&v18, ValueAsString, v5);
    }
    else {
      memset(&v18, 0, sizeof(v18));
    }
  }
  if (llvm::Attribute::hasAttribute(&v19, 0))
  {
    if (*(char *)(a1 + 543) < 0) {
      sub_1CB8BDF7C((uint64_t)&v17, *(const void **)(a1 + 520), *(void *)(a1 + 528));
    }
    else {
      std::string v17 = *(std::string *)(a1 + 520);
    }
  }
  else
  {
    uint64_t v6 = (const std::string::value_type *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v19);
    if (v6) {
      std::string::__init(&v17, v6, v7);
    }
    else {
      memset(&v17, 0, sizeof(v17));
    }
  }
  sub_1CB906918((const void **)&v18.__r_.__value_.__l.__data_, (const void **)&v17.__r_.__value_.__l.__data_, (uint64_t)__p);
  if (v14 >= 0) {
    uint64_t v8 = (unsigned __int8 *)__p;
  }
  else {
    uint64_t v8 = (unsigned __int8 *)__p[0];
  }
  if (v14 >= 0) {
    size_t v9 = HIBYTE(v14) & 0x7F;
  }
  else {
    size_t v9 = (size_t)__p[1];
  }
  uint64_t v10 = *sub_1CD3F4C18(a1 + 2144, v8, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  size_t v11 = v10[1];
  if (!v11)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)a1, a2);
    if (*(char *)(a1 + 471) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 448), *(void *)(a1 + 456));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 448);
      uint64_t v14 = *(void *)(a1 + 464);
    }
    uint64_t v16 = *(void *)(a1 + 488);
    long long v15 = *(_OWORD *)(a1 + 472);
    sub_1CB9069EC();
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1CD3F352C(uint64_t a1, uint64_t a2)
{
  llvm::Module::getDataLayout(*(llvm::Module **)(a2 + 40));
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 120))(v4);
  sub_1CB90711C();
}

void sub_1CD3F35F8()
{
}

void sub_1CD3F36B0(llvm::TargetPassConfig *a1)
{
}

void sub_1CD3F36F4(llvm *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::createUnifyFunctionExitNodesPass(a1);
}

void sub_1CD3F3CD0(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::addPass(a1, &unk_1EA61EED0);
  strcpy((char *)__p, "After codegen DCE pass");
  llvm::TargetPassConfig::printAndVerify(a1);
  sub_1CD3C8CC4();
}

void sub_1CD3F3E80()
{
}

void sub_1CD3F3EC4()
{
}

void sub_1CD3F3F08()
{
}

void sub_1CD3F3F4C()
{
}

uint64_t sub_1CD3F3F88()
{
  return 0;
}

void sub_1CD3F3F94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (*(unsigned char *)(v1 + 1624)) {
    sub_1CD3ECC84();
  }
  if (*(unsigned char *)(v1 + 1643))
  {
    sub_1CD3CFC7C();
    llvm::createGPUCFGLoweringPass();
  }
  unint64_t v2 = sub_1CD3C8F78();
  llvm::createGPUConditionalFlattenerPass((llvm *)v2, v3);
}

void sub_1CD3F4048(uint64_t a1)
{
}

void sub_1CD3F408C(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EA61EF50, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EA61EED8, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EA61EF2F, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EA61EF5A, 0, 0);
  unint64_t v2 = (llvm *)llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EA61EED5, 0, 0);
  llvm::createTypeBasedAAWrapperPass(v2);
}

void sub_1CD3F4318()
{
}

void sub_1CD3F4360(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
  }
  operator new();
}

uint64_t sub_1CD3F43EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 96);
  uint64_t v5 = *(void *)(v4 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8) + 216))(*(void *)(v4 + 8), v4 + 128, *(void *)(a3 + 96));
    *(void *)(v4 + 48) = v5;
  }
  sub_1CD3EDE58(v5, a2);
  return 0;
}

void sub_1CD3F445C(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F4498()
{
  return 0;
}

uint64_t sub_1CD3F44A4()
{
  return 1;
}

uint64_t sub_1CD3F44B0()
{
  return 1;
}

uint64_t sub_1CD3F44BC()
{
  return 1;
}

uint64_t sub_1CD3F44C8()
{
  return 1;
}

uint64_t sub_1CD3F44D0()
{
  return 0;
}

uint64_t sub_1CD3F44D8()
{
  return 1;
}

uint64_t sub_1CD3F44E0()
{
  return 0;
}

uint64_t sub_1CD3F44EC()
{
  return 0;
}

uint64_t sub_1CD3F44F4()
{
  return 0;
}

void sub_1CD3F4510(void *a1)
{
}

void sub_1CD3F4520()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F4548(uint64_t a1)
{
  return *(void *)(a1 + 1320);
}

uint64_t sub_1CD3F4550()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CD3F4564()
{
  return 0;
}

uint64_t sub_1CD3F456C()
{
  return 32;
}

void sub_1CD3F4574(llvm *a1)
{
}

uint64_t sub_1CD3F45BC()
{
  return 1;
}

uint64_t sub_1CD3F45C4()
{
  return 0;
}

uint64_t sub_1CD3F45CC()
{
  return 0;
}

uint64_t sub_1CD3F45D4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0) {
    return a2;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CD3F45E8()
{
  return 0;
}

uint64_t sub_1CD3F45F0()
{
  return 0;
}

uint64_t sub_1CD3F45F8()
{
  return 0;
}

uint64_t sub_1CD3F4600()
{
  return 0;
}

uint64_t sub_1CD3F4608()
{
  return 0;
}

uint64_t sub_1CD3F4610()
{
  return 0;
}

void sub_1CD3F4618()
{
}

uint64_t sub_1CD3F462C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_1CD3F4654(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD3F4698(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t sub_1CD3F46C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))();
}

uint64_t sub_1CD3F46E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_1CD3F4710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

uint64_t sub_1CD3F4738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

void sub_1CD3F4760(void *a1)
{
  *a1 = &unk_1F25ED500;
  sub_1CD3F47F0((uint64_t)(a1 + 268));
  sub_1CD3F3000(a1 + 166, v2);
}

void sub_1CD3F47A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *((void *)v12 + 165);
  *((void *)v12 + 165) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  llvm::TargetMachine::~TargetMachine(v12);
}

uint64_t sub_1CD3F47F0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(llvm **)(*(void *)a1 + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
        {
          uint64_t v7 = *(void *)v4;
          uint64_t v6 = *((void *)v4 + 1);
          *((void *)v4 + 1) = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
          llvm::deallocate_buffer(v4, (void *)(v7 + 17));
        }
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CD3F48AC(uint64_t a1, char *a2, _OWORD *a3, unsigned char **a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EDE58;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F26440A0;
  *(void *)(v8 + 152) = &unk_1F2643CC0;
  *(void *)(v8 + 160) = &unk_1F25EDE78;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_OWORD *)(a1 + 32) = *a3;
  uint64_t v10 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

BOOL sub_1CD3F49B8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 9) && *(unsigned char *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void sub_1CD3F49E8()
{
}

void *sub_1CD3F49FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25EDE78;
  return result;
}

void sub_1CD3F4A34(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25EDE78;
}

void sub_1CD3F4A60()
{
}

llvm::cl::Option *sub_1CD3F4B2C(llvm::cl::Option *a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = &unk_1F25EDE58;
  *(void *)(v6 + 144) = 0;
  *(void *)uint64_t v6 = &unk_1F26440A0;
  *(void *)(v6 + 152) = &unk_1F2643CC0;
  *(void *)(v6 + 160) = &unk_1F25EDE78;
  *(void *)(v6 + 184) = v6 + 160;
  size_t v7 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v7);
  *((_OWORD *)a1 + 2) = *a3;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

size_t **sub_1CD3F4C18(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  unsigned int i = (size_t **)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      size_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  size_t v11 = operator new(a3 + 17, (std::align_val_t)8uLL);
  BOOL v12 = v11;
  uint64_t v13 = (char *)(v11 + 2);
  if (a3) {
    memcpy(v11 + 2, a2, a3);
  }
  v13[a3] = 0;
  *BOOL v12 = a3;
  v12[1] = 0;
  void *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (unsigned int i = (size_t **)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

void sub_1CD3F4D0C(llvm::TargetTransformInfo::Concept *a1)
{
  llvm::TargetTransformInfo::Concept::~Concept(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3F4D44(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1CD3F4D4C(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Constant **a4, uint64_t a5)
{
  return sub_1CB9073C8((llvm::DataLayout **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1CD3F4D54()
{
  return 1;
}

uint64_t sub_1CD3F4D5C()
{
  return 0;
}

uint64_t sub_1CD3F4D64()
{
  return 150;
}

uint64_t sub_1CD3F4D6C()
{
  return 4;
}

uint64_t sub_1CD3F4D78(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1CB907A3C(*(void *)(a1 + 16), *(void *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t sub_1CD3F4D98(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CB9084B0(a1 + 16, a2, a3, a4, a5);
}

uint64_t sub_1CD3F4DA0()
{
  llvm::BranchProbability::BranchProbability(&v1, 0x63uLL, 0x64u);
  return v1;
}

uint64_t sub_1CD3F4DD0()
{
  return 0;
}

uint64_t sub_1CD3F4DD8()
{
  return 0;
}

uint64_t sub_1CD3F4DE0()
{
  return 0;
}

uint64_t sub_1CD3F4DE8()
{
  return 0;
}

uint64_t sub_1CD3F4DF0()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CD3F4DF8()
{
  return 0;
}

uint64_t sub_1CD3F4E00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 64))();
}

BOOL sub_1CD3F4E2C(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1CD3F4E38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 72))();
}

uint64_t sub_1CD3F4E64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 80))();
}

uint64_t sub_1CD3F4E90()
{
  return 0;
}

uint64_t sub_1CD3F4E98(uint64_t a1, uint64_t ***a2)
{
  return sub_1CB9091FC(a1 + 16, a2);
}

void sub_1CD3F4EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1CD3F4EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(unsigned char *)(a4 + 6) = 1;
}

uint64_t sub_1CD3F4EBC()
{
  return 0;
}

uint64_t sub_1CD3F4EC4()
{
  return 0;
}

uint64_t sub_1CD3F4ECC()
{
  return 0;
}

uint64_t sub_1CD3F4ED4()
{
  return 0;
}

uint64_t sub_1CD3F4EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v6 = *((_DWORD *)a4 + 2);
  if (v6 > 0x40) {
    operator new[]();
  }
  uint64_t v5 = *a4;
  sub_1CD3F707C((uint64_t)&v5);
  return 0;
}

uint64_t sub_1CD3F4F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1088))();
}

uint64_t sub_1CD3F4FC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1080))();
}

uint64_t sub_1CD3F4FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = a3;
  v9[1] = a4;
  char v10 = a5;
  uint64_t v11 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1064))(*(void *)(a1 + 40), *(void *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1CD3F5068(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1CD3F7118(a1 + 16, v7, v6);
}

uint64_t sub_1CD3F50A4()
{
  return 1;
}

uint64_t sub_1CD3F50AC()
{
  return 0;
}

uint64_t sub_1CD3F50B4()
{
  return 0;
}

uint64_t sub_1CD3F50BC()
{
  return 0;
}

uint64_t sub_1CD3F50C4()
{
  return 2;
}

uint64_t sub_1CD3F50CC()
{
  return 0;
}

uint64_t sub_1CD3F50D4()
{
  return 0;
}

BOOL sub_1CD3F50DC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1CD3F50E8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1CD3F50F4()
{
  return 0;
}

uint64_t sub_1CD3F50FC()
{
  return 0;
}

uint64_t sub_1CD3F5104()
{
  return 0;
}

uint64_t sub_1CD3F510C()
{
  return 0;
}

uint64_t sub_1CD3F5114()
{
  return 0;
}

uint64_t sub_1CD3F511C()
{
  return 0;
}

uint64_t sub_1CD3F5124()
{
  return 0;
}

uint64_t sub_1CD3F512C()
{
  return 0;
}

uint64_t sub_1CD3F5134()
{
  return 0;
}

uint64_t sub_1CD3F513C()
{
  return 0;
}

uint64_t sub_1CD3F5144()
{
  return 1;
}

uint64_t sub_1CD3F514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v8[0] = a3;
  v8[1] = a4;
  char v9 = a5;
  uint64_t v10 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1072))(*(void *)(a1 + 40), *(void *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1CD3F51BC()
{
  return 0;
}

uint64_t sub_1CD3F51C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1144))();
}

uint64_t sub_1CD3F51F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1176))();
}

uint64_t sub_1CD3F5224(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 368))();
}

BOOL sub_1CD3F5254(uint64_t a1, llvm::EVT *this)
{
  unsigned __int8 v3 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), this, 0);
  return v3 && *(void *)(*(void *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1CD3F52AC(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

uint64_t sub_1CD3F52E4()
{
  return sub_1CD3EE198();
}

uint64_t sub_1CD3F52EC()
{
  return 1;
}

unint64_t sub_1CD3F52F4(uint64_t a1)
{
  return sub_1CD3F7240(*(void *)(*(void *)(a1 + 40) + 8));
}

uint64_t sub_1CD3F5300()
{
  return 0;
}

unint64_t sub_1CD3F5308(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1CD3EE624(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD3F5310(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return sub_1CB90C6E8(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD3F5318()
{
  return 0;
}

uint64_t sub_1CD3F5320()
{
  return 0;
}

double sub_1CD3F5328@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)&double result = 0x800000000;
  *(void *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1CD3F5350()
{
  return 0;
}

uint64_t sub_1CD3F5358()
{
  return 0;
}

uint64_t sub_1CD3F5360()
{
  return 0;
}

uint64_t sub_1CD3F5368()
{
  return 0;
}

uint64_t sub_1CD3F5370(uint64_t a1, llvm::IntegerType *a2, llvm::LLVMContext *a3)
{
  sub_1CB8E40FC(a2, a3);
  long long v4 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 648);

  return v4();
}

uint64_t sub_1CD3F540C(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1CD3F541C(uint64_t a1, llvm::EVT *a2)
{
  return sub_1CB90D5AC(*(void *)(a1 + 16), *(void *)(a1 + 40), a2);
}

uint64_t sub_1CD3F5430()
{
  return 1;
}

uint64_t sub_1CD3F5438(uint64_t a1, llvm::EVT *this)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned __int8 v3 = sub_1CB87DC14(v2, *(void *)(a1 + 16), this, 0);
  if (v3 && (v3 == 1 || *(void *)(v2 + 8 * v3 + 96)) && (unint64_t v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4)) {
    return qword_1CD96D890[v4];
  }
  else {
    return 4;
  }
}

uint64_t sub_1CD3F54B8()
{
  return 0;
}

uint64_t sub_1CD3F54C4()
{
  return 1;
}

uint64_t sub_1CD3F54D0()
{
  return 0;
}

uint64_t sub_1CD3F54DC()
{
  return 0;
}

uint64_t sub_1CD3F54E8()
{
  return 8;
}

uint64_t sub_1CD3F54F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1CD3F54F8(uint64_t a1, int a2)
{
  uint64_t v2 = "Generic::Unknown Register Class";
  if (a2 == 1) {
    uint64_t v2 = "Generic::VectorRC";
  }
  if (a2) {
    return v2;
  }
  else {
    return "Generic::ScalarRC";
  }
}

uint64_t sub_1CD3F5524()
{
  return 32;
}

uint64_t sub_1CD3F5530()
{
  return 128;
}

uint64_t sub_1CD3F5538()
{
  return 0;
}

uint64_t sub_1CD3F5540()
{
  return 0;
}

uint64_t sub_1CD3F5548()
{
  return 0;
}

uint64_t sub_1CD3F5550(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD3F5560()
{
  return 0;
}

uint64_t sub_1CD3F5568(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_1CD3F5574(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

uint64_t sub_1CD3F559C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

uint64_t sub_1CD3F55C4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD3F5608(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t sub_1CD3F5630(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 88))();
}

uint64_t sub_1CD3F5658(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))();
}

uint64_t sub_1CD3F5680(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))();
}

uint64_t sub_1CD3F56A8()
{
  return 1;
}

unint64_t sub_1CD3F56B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return sub_1CD3F5A88(a1 + 8, a2, a3, a4, a9, a10);
}

unint64_t sub_1CD3F56BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CD3F6010(a1 + 8, a2, a3, a4, a5, a7);
}

uint64_t sub_1CD3F56C8(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1CB90A01C(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1CD3F56D0(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1CD3F7334(a1 + 8, a2, a3, a4);
}

BOOL sub_1CD3F56D8(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

unint64_t sub_1CD3F56EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1CD3F5E3C(a1 + 8, a2, a3, a4, a6);
}

uint64_t sub_1CD3F56F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::LLVMContext **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1CD3F5744(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1CD3F60EC(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD3F574C(uint64_t a1, int a2, llvm::EVT *a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6) {
    return 1;
  }
  else {
    return sub_1CD3EE380(a1 + 8, a2, a3, a4 | 0x100, a5, a6);
  }
}

uint64_t sub_1CD3F5788()
{
  return 1;
}

unint64_t sub_1CD3F5794(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1CD3F659C(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1CD3F57AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1CD3F659C(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1CD3F57BC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  return sub_1CD3F73E8(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1CD3F57E0(uint64_t a1, uint64_t a2, llvm::FixedVectorType **a3, uint64_t a4, unsigned int a5)
{
  return sub_1CD3F61E8(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD3F57E8(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD3F6204(a1 + 8, a2, a3, a5);
}

unint64_t sub_1CD3F57F4(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, unsigned int a6)
{
  return sub_1CD3F7964(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1CD3F57FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB909674(a1 + 8, a2, a3);
}

uint64_t sub_1CD3F5804()
{
  return 10;
}

uint64_t sub_1CD3F5810(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2]) {
    return 0;
  }
  else {
    return v3[0];
  }
}

uint64_t sub_1CD3F5854()
{
  return 0;
}

uint64_t sub_1CD3F5860()
{
  return 0;
}

uint64_t sub_1CD3F586C()
{
  return 0;
}

uint64_t sub_1CD3F5874()
{
  return 0;
}

uint64_t sub_1CD3F587C()
{
  return 0;
}

uint64_t sub_1CD3F5884(int a1, llvm::IntegerType *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0) {
    return llvm::IntegerType::get(this, (llvm::LLVMContext *)(8 * a8));
  }
  else {
    return llvm::Type::getInt8Ty(this, this);
  }
}

uint64_t sub_1CD3F589C(int a1, uint64_t a2, llvm::IntegerType *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1CD3F7AB0(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1CD3F58AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 16, a2, a3);
}

BOOL sub_1CD3F58B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 16, a2, a3);
}

BOOL sub_1CD3F58BC(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  if (!v5) {
    return 0;
  }
  return *(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1CD3F5934(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1CD3F59A0(uint64_t a1)
{
  return sub_1CD3EE1E0(a1 + 8);
}

uint64_t sub_1CD3F59A8(uint64_t a1, llvm::Type **a2)
{
  return sub_1CD3EE1FC(a1 + 8, a2);
}

BOOL sub_1CD3F59B0(uint64_t a1, uint64_t a2)
{
  return sub_1CD3EE28C(a1 + 8, a2);
}

BOOL sub_1CD3F59B8(uint64_t a1, unsigned int a2, char a3, int a4)
{
  return sub_1CD3EE2D0(a1 + 8, a2, a3, a4);
}

BOOL sub_1CD3F59C4(uint64_t a1, unsigned int a2, char a3, int a4)
{
  return sub_1CD3EE2D0(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD3F59D0()
{
  return 1;
}

uint64_t sub_1CD3F59D8()
{
  return 1;
}

uint64_t sub_1CD3F59E0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_1CD3EE310(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD3F59E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_1CD3EE310(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD3F59F0()
{
  return 0;
}

uint64_t sub_1CD3F59F8()
{
  return 0;
}

uint64_t sub_1CD3F5A00()
{
  return 1;
}

uint64_t sub_1CD3F5A08()
{
  return 1;
}

uint64_t sub_1CD3F5A10()
{
  return 0;
}

uint64_t sub_1CD3F5A18()
{
  return 0;
}

uint64_t sub_1CD3F5A20()
{
  return 0;
}

uint64_t sub_1CD3F5A28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 60) {
    return 4;
  }
  else {
    return sub_1CD3F7B48(a1 + 16, (uint64_t *)a2);
  }
}

uint64_t sub_1CD3F5A5C()
{
  return 0x200000001;
}

uint64_t sub_1CD3F5A68()
{
  return 0;
}

uint64_t sub_1CD3F5A70()
{
  return 1;
}

uint64_t sub_1CD3F5A78()
{
  return 1;
}

BOOL sub_1CD3F5A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD3EE510(a1 + 8, a2, a3);
}

unint64_t sub_1CD3F5A88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  v41[7] = *MEMORY[0x1E4F143B8];
  BOOL v12 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unsigned int v13 = llvm::TargetLoweringBase::InstructionOpcodeToISD(v12, a2);
  if (a4)
  {
    if ((a2 - 19) >= 6) {
      return 1;
    }
    else {
      return 4;
    }
  }
  unsigned int v16 = v13;
  llvm::TargetLoweringBase::getTypeLegalizationCost(v12, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v36);
  int v17 = *(_DWORD *)(a3 + 8);
  int v18 = *(_DWORD *)(a3 + 8) & 0xFE;
  unsigned int v19 = v17;
  if (v18 == 18) {
    unsigned int v19 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
  }
  if (v19 >= 7) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = 2;
  }
  unint64_t v34 = v14;
  LODWORD(v35) = 0;
  if (!v37) {
    goto LABEL_22;
  }
  if (v37 == 1)
  {
    if (v16 <= 0x185) {
      goto LABEL_15;
    }
  }
  else if (v16 <= 0x185 && *((void *)v12 + v37 + 12))
  {
LABEL_15:
    if (*((unsigned __int8 *)v12 + 390 * v37 + v16 + 3862) <= 1u)
    {
      long long v20 = v36;
LABEL_17:
      *(_OWORD *)uint64_t v40 = v20;
      sub_1CB90C9D4((uint64_t)v40, (uint64_t)&v34);
      return (unint64_t)v40[0];
    }
  }
  if (*((void *)v12 + v37 + 12) && (v16 > 0x185 || *((unsigned char *)v12 + 390 * v37 + v16 + 3862) != 2))
  {
    uint64_t v38 = 2;
    int v39 = 0;
    *(_OWORD *)uint64_t v40 = v36;
    sub_1CB90C9D4((uint64_t)v40, (uint64_t)&v38);
    long long v20 = *(_OWORD *)v40;
    goto LABEL_17;
  }
  if (v16 - 61 > 1) {
    goto LABEL_32;
  }
LABEL_22:
  uint64_t v21 = 65;
  if (v16 != 61) {
    uint64_t v21 = 66;
  }
  if (!v37 || v37 != 1 && !*((void *)v12 + v37 + 12)) {
    goto LABEL_32;
  }
  if ((*((unsigned char *)v12 + 390 * v37 + v21 + 3862) & 0xFB) == 0) {
    goto LABEL_37;
  }
  uint64_t v22 = 59;
  if (v16 != 61) {
    uint64_t v22 = 60;
  }
  if ((*((unsigned char *)v12 + 390 * v37 + v22 + 3862) & 0xFB) == 0)
  {
LABEL_37:
    if (v16 == 61) {
      uint64_t v23 = 20;
    }
    else {
      uint64_t v23 = 19;
    }
    uint64_t v24 = sub_1CD3F5A88(a1, v23, a3, 0, 0, 0);
    uint64_t v25 = sub_1CD3F5A88(a1, 17, a3, 0, 0, 0);
    uint64_t v26 = sub_1CD3F5A88(a1, 15, a3, 0, 0, 0);
    unint64_t v27 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      unint64_t v27 = ((v24 + v25) >> 63) ^ 0x8000000000000000;
    }
    BOOL v28 = __OFADD__(v27, v26);
    uint64_t v29 = v27 + v26;
    if (v28) {
      return (v29 >> 63) ^ 0x8000000000000000;
    }
    else {
      return v29;
    }
  }
  else
  {
LABEL_32:
    if (v17 == 19)
    {
      return 0;
    }
    else if (v17 == 18)
    {
      uint64_t v30 = a3;
      if (v18 == 18) {
        uint64_t v30 = **(void **)(a3 + 16);
      }
      v33[0] = sub_1CD3F5A88(a1, a2, v30, 0, a5, a6);
      v33[1] = v31;
      v40[0] = v41;
      v40[1] = (void *)0x600000000;
      sub_1CB90CB08((uint64_t)v40, a6, a3);
      unint64_t v32 = sub_1CD3F6BD8(a1, a3, a5, a6, (uint64_t)v40[0]);
      uint64_t v38 = *(unsigned int *)(a3 + 32);
      int v39 = 0;
      sub_1CB90C9D4((uint64_t)&v38, (uint64_t)v33);
      if (__OFADD__(v32, v38)) {
        unint64_t v14 = ((uint64_t)(v32 + v38) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v14 = v32 + v38;
      }
      if (v40[0] != v41) {
        free(v40[0]);
      }
    }
  }
  return v14;
}

unint64_t sub_1CD3F5E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5) {
    return 1;
  }
  uint64_t v22 = v5;
  uint64_t v23 = v6;
  BOOL v12 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unsigned int v13 = llvm::TargetLoweringBase::InstructionOpcodeToISD(v12, a2);
  if (v13 == 190)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
      unsigned int v13 = 191;
    }
    else {
      unsigned int v13 = 190;
    }
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v12, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v19);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    if (v20 - 15 >= 0x9C) {
      goto LABEL_17;
    }
  }
  else if (!v20)
  {
    return 1;
  }
  if (*((void *)v12 + v20 + 12) && (v13 > 0x185 || *((unsigned char *)v12 + 390 * v20 + v13 + 3862) != 2))
  {
    uint64_t v17 = 1;
    LODWORD(v18) = 0;
    long long v21 = v19;
    sub_1CB90C9D4((uint64_t)&v21, (uint64_t)&v17);
    return v21;
  }
  if ((*(_DWORD *)(a3 + 8) & 0xFE) != 0x12) {
    return 1;
  }
LABEL_17:
  uint64_t v14 = *(unsigned int *)(a3 + 32);
  if (a4 && (*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    a4 = **(void **)(a4 + 16);
  }
  uint64_t v17 = sub_1CD3F5E3C(a1, a2, **(void **)(a3 + 16), a4, 0);
  uint64_t v18 = v15;
  unint64_t v16 = sub_1CD3EE584(a1, a3, 1, 0);
  *(void *)&long long v21 = v14;
  DWORD2(v21) = 0;
  sub_1CB90C9D4((uint64_t)&v21, (uint64_t)&v17);
  if (__OFADD__(v16, (void)v21)) {
    return ((uint64_t)(v16 + v21) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v16 + v21;
  }
}

unint64_t sub_1CD3F6010(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  switch(sub_1CB90D34C(a2, a4, a5))
  {
    case 1u:
    case 2u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
      unint64_t result = 0;
      if (a3)
      {
        if (*(unsigned char *)(a3 + 8) == 18) {
          unint64_t result = sub_1CD3F6D6C(a1, a3);
        }
      }
      break;
    case 4u:
      unint64_t result = sub_1CD3F6F74(a1, a3, a6);
      break;
    case 5u:
      unint64_t result = sub_1CD3F6E6C(a1, a3, a6);
      break;
    default:
      unint64_t result = 0;
      if (a3 && *(unsigned char *)(a3 + 8) == 18) {
        unint64_t result = sub_1CD3F6C8C(a1, a3);
      }
      break;
  }
  return result;
}

unint64_t sub_1CD3F60EC(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  llvm::FixedVectorType::get(this, a4);
  uint64_t v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)(a4 * a3));
  uint64_t v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (uint64_t)&v17);
  unint64_t v14 = sub_1CD3EE624(a1, v11, (uint64_t)&v17, 0, 1);
  unint64_t v15 = sub_1CD3EE624(a1, v13, (uint64_t)a5, 1, 0);
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (__OFADD__(v14, v15)) {
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v14 + v15;
  }
}

unint64_t sub_1CD3F61E8(uint64_t a1, uint64_t a2, llvm::FixedVectorType **a3, uint64_t a4, unsigned int a5)
{
  if (a4 & 0xFF00000000) == 0 || (a4) {
    return sub_1CD3F6878(a1, a2, a3, a5);
  }
  else {
    return sub_1CD3F67A4(a1, a2, (uint64_t)a3, a5);
  }
}

unint64_t sub_1CD3F6204(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = (llvm::Type *)a2;
  uint64_t v6 = a1;
  if ((a2[1] & 0xFE) == 0x12) {
    unsigned int v7 = *(unsigned __int8 *)(*(void *)a2[2] + 8);
  }
  else {
    unsigned int v7 = *((_DWORD *)a2 + 2);
  }
  uint64_t v8 = a2[3];
  char v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7) {
    uint64_t v11 = 53;
  }
  else {
    uint64_t v11 = 54;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v65);
  if (v66[0] - 15 > 0x9B)
  {
    unsigned int v13 = 1;
  }
  else
  {
    if (v66[0] - 120 <= 0x32) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    }
    unsigned int v13 = sub_1CB8C32B0(v66);
  }
  unsigned int v14 = __clz(v10);
  if (v10 <= v13)
  {
    unint64_t v55 = 0;
    int64_t v62 = 0;
    int v15 = 0;
  }
  else
  {
    unsigned int v51 = v14;
    int v15 = 0;
    int v16 = 0;
    int v52 = v9;
    BOOL v53 = v8;
    int64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v56 = v6;
    uint64_t v19 = (uint64_t)v5;
    unint64_t v20 = 0;
    unsigned int v57 = v11;
    unsigned int v54 = v13;
    uint64_t v21 = v6;
    do
    {
      int64_t v61 = v17;
      int v59 = v15;
      uint64_t v22 = v19;
      uint64_t v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v53, v10);
      uint64_t v19 = v23;
      llvm::FixedVectorType::get(v52, v10);
      uint64_t v4 = v24;
      unint64_t v25 = sub_1CD3F6010(v21, 5, v22, 0, 0, v19);
      if (v26 == 1) {
        uint64_t v18 = 1;
      }
      if (__OFADD__(v20, v25)) {
        unint64_t v20 = ((uint64_t)(v20 + v25) >> 63) ^ 0x8000000000000000;
      }
      else {
        v20 += v25;
      }
      int v27 = v16;
      uint64_t v28 = v18;
      unint64_t v29 = sub_1CD3F5E3C(v21, v57, v19, v4, a4);
      int v31 = v30;
      unint64_t v32 = sub_1CD3F5E3C(v21, 57, v19, v4, a4);
      BOOL v34 = __OFADD__(v29, v32);
      int64_t v35 = v29 + v32;
      uint64_t v18 = v28;
      if (v34) {
        int64_t v35 = (v35 >> 63) ^ 0x8000000000000000;
      }
      if (v31 == 1 || v33 == 1) {
        int v16 = 1;
      }
      else {
        int v16 = v27;
      }
      BOOL v34 = __OFADD__(v61, v35);
      int64_t v17 = v61 + v35;
      if (v34) {
        int64_t v17 = (v17 >> 63) ^ 0x8000000000000000;
      }
      int v15 = v59 - 1;
    }
    while (v10 > v54);
    unint64_t v55 = v20;
    int64_t v62 = v17;
    uint64_t v6 = v56;
    uint64_t v11 = v57;
    uint64_t v5 = (llvm::Type *)v19;
    unsigned int v14 = v51;
  }
  uint64_t v37 = v15 - v14 + 31;
  unint64_t v63 = sub_1CD3F6010(v6, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
  unint64_t v64 = v38;
  uint64_t v67 = v37;
  int v68 = 0;
  sub_1CB90C9D4((uint64_t)&v67, (uint64_t)&v63);
  uint64_t v60 = v67;
  unint64_t v39 = sub_1CD3F5E3C(v6, v11, (uint64_t)v5, v4, a4);
  unint64_t v41 = v40;
  unint64_t v42 = sub_1CD3F5E3C(v6, 57, (uint64_t)v5, v4, a4);
  unint64_t v43 = v41 & 0xFFFFFFFF00000000 | 1;
  if (v44 != 1) {
    unint64_t v43 = v41;
  }
  unint64_t v45 = v39 + v42;
  if (__OFADD__(v39, v42)) {
    unint64_t v45 = ((uint64_t)(v39 + v42) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v63 = v45;
  unint64_t v64 = v43;
  uint64_t v67 = v37;
  int v68 = 0;
  sub_1CB90C9D4((uint64_t)&v67, (uint64_t)&v63);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
    uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
  }
  unint64_t v46 = v55 + v60;
  if (__OFADD__(v55, v60)) {
    unint64_t v46 = ((uint64_t)(v55 + v60) >> 63) ^ 0x8000000000000000;
  }
  int64_t v47 = v62 + v67;
  if (__OFADD__(v62, v67)) {
    int64_t v47 = (v47 >> 63) ^ 0x8000000000000000;
  }
  BOOL v34 = __OFADD__(v46, v47);
  uint64_t v48 = v46 + v47;
  if (v34) {
    unint64_t v49 = (v48 >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v49 = v48;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v6 + 32), *(const llvm::DataLayout **)(v6 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v67);
  if (__OFADD__(v49, v67)) {
    return ((uint64_t)(v49 + v67) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v49 + v67;
  }
}

unint64_t sub_1CD3F659C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, int a6, int a7)
{
  if (a6)
  {
    unsigned int v13 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), 0);
    llvm::FixedVectorType::get(v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
    int v15 = (llvm::LLVMContext **)v14;
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      int v15 = **(llvm::LLVMContext ****)(v14 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v38);
    int v16 = v38;
    unint64_t v17 = v39;
  }
  else
  {
    int v16 = 0;
    unint64_t v17 = 0;
  }
  uint64_t v18 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  unint64_t v19 = sub_1CD3EE380(a1, a2, *(llvm::EVT **)(a3 + 24), a4 | 0x100, 0, a7);
  unint64_t v20 = v17 & 0xFFFFFFFF00000000 | 1;
  if (v21 != 1) {
    unint64_t v20 = v17;
  }
  unint64_t v22 = (unint64_t)v16 + v19;
  if (__OFADD__(v16, v19)) {
    unint64_t v22 = ((uint64_t)((uint64_t)v16 + v19) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v36 = v22;
  unint64_t v37 = v20;
  unint64_t v38 = v18;
  LODWORD(v39) = 0;
  sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
  uint64_t v23 = v38;
  unint64_t v24 = sub_1CD3EE584(a1, a3, a2 != 33, a2 == 33);
  if (a5)
  {
    unint64_t v25 = (llvm::Type *)*(unsigned int *)(a3 + 32);
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)a3 + 1888), v25);
    int v27 = (llvm::LLVMContext **)v26;
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      int v27 = **(llvm::LLVMContext ****)(v26 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v27, (uint64_t)&v38);
    uint64_t v28 = (uint64_t)v38 + 1;
    if (__OFADD__(v38, 1)) {
      uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    BOOL v29 = a7 == 0;
    BOOL v30 = __OFADD__(v28, v29);
    uint64_t v31 = v28 + v29;
    if (v30) {
      uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v36 = v31;
    unint64_t v37 = v39;
    unint64_t v38 = v25;
    LODWORD(v39) = 0;
    sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
    unint64_t v32 = v38;
  }
  else
  {
    unint64_t v32 = 0;
  }
  unint64_t v33 = (unint64_t)v23 + v24;
  if (__OFADD__(v23, v24)) {
    unint64_t v33 = ((uint64_t)((uint64_t)v23 + v24) >> 63) ^ 0x8000000000000000;
  }
  BOOL v30 = __OFADD__(v33, v32);
  uint64_t v34 = (uint64_t)v32 + v33;
  if (v30) {
    return (v34 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v34;
  }
}

unint64_t sub_1CD3F67A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a3 + 8) == 19) {
    return 0;
  }
  unint64_t v9 = sub_1CD3EE584(a1, a3, 0, 1);
  v11[0] = sub_1CD3F5A88(a1, a2, *(void *)(a3 + 24), a4, 0, 0);
  v11[1] = v10;
  uint64_t v12 = *(unsigned int *)(a3 + 32);
  int v13 = 0;
  sub_1CB90C9D4((uint64_t)v11, (uint64_t)&v12);
  if (__OFADD__(v9, v11[0])) {
    return ((uint64_t)(v9 + v11[0]) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v9 + v11[0];
  }
}

unint64_t sub_1CD3F6878(uint64_t a1, uint64_t a2, llvm::FixedVectorType **a3, unsigned int a4)
{
  uint64_t v5 = (llvm::Type *)a3;
  uint64_t v8 = a3[3];
  LODWORD(v9) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v8 == (llvm::FixedVectorType *)(*(void *)*a3 + 1888) ? (BOOL v10 = v9 >= 2) : (BOOL v10 = 0), v10))
  {
    unint64_t v33 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    uint64_t v34 = sub_1CB90A01C(a1, 49, v33, (llvm::Type ***)v5, 0, a4, 0);
    sub_1CB90C994(v33);
    unint64_t v36 = sub_1CD3F5E3C(a1, 53, (uint64_t)v33, v35, a4);
    BOOL v30 = __OFADD__(v34, v36);
    uint64_t v31 = v34 + v36;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v42);
    if (v43[0] - 15 > 0x9B)
    {
      unsigned int v12 = 1;
    }
    else
    {
      if (v43[0] - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v11);
      }
      unsigned int v12 = sub_1CB8C32B0(v43);
    }
    unsigned int v13 = __clz(v9);
    if (v9 <= v12)
    {
      uint64_t v22 = a2;
      unint64_t v16 = 0;
      unint64_t v15 = 0;
      int v14 = 0;
    }
    else
    {
      unsigned int v37 = v13;
      unsigned int v39 = a2;
      int v14 = 0;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      unsigned int v38 = v12;
      do
      {
        unint64_t v9 = (llvm::Type *)(v9 >> 1);
        llvm::FixedVectorType::get(v8, v9);
        unint64_t v17 = v15;
        uint64_t v19 = v18;
        unint64_t v20 = sub_1CD3F6010(a1, 5, (uint64_t)v5, 0, 0, v18);
        if (__OFADD__(v16, v20)) {
          unint64_t v16 = ((uint64_t)(v16 + v20) >> 63) ^ 0x8000000000000000;
        }
        else {
          v16 += v20;
        }
        uint64_t v5 = (llvm::Type *)v19;
        unint64_t v21 = sub_1CD3F5A88(a1, v39, v19, a4, 0, 0);
        if (__OFADD__(v17, v21)) {
          unint64_t v15 = ((uint64_t)(v17 + v21) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v15 = v17 + v21;
        }
        --v14;
      }
      while (v9 > v38);
      uint64_t v22 = v39;
      unsigned int v13 = v37;
    }
    uint64_t v23 = v14 - v13 + 31;
    unint64_t v40 = sub_1CD3F6010(a1, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
    uint64_t v41 = v24;
    uint64_t v44 = v23;
    int v45 = 0;
    sub_1CB90C9D4((uint64_t)&v44, (uint64_t)&v40);
    if (__OFADD__(v16, v44)) {
      unint64_t v25 = ((uint64_t)(v16 + v44) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v25 = v16 + v44;
    }
    unint64_t v40 = sub_1CD3F5A88(a1, v22, (uint64_t)v5, a4, 0, 0);
    uint64_t v41 = v26;
    uint64_t v44 = v23;
    int v45 = 0;
    sub_1CB90C9D4((uint64_t)&v44, (uint64_t)&v40);
    unint64_t v27 = v15 + v44;
    if (__OFADD__(v15, v44)) {
      unint64_t v27 = ((uint64_t)(v15 + v44) >> 63) ^ 0x8000000000000000;
    }
    BOOL v30 = __OFADD__(v25, v27);
    uint64_t v28 = v25 + v27;
    if (v30) {
      unint64_t v29 = (v28 >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v29 = v28;
    }
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
      uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v44);
    BOOL v30 = __OFADD__(v29, v44);
    uint64_t v31 = v29 + v44;
  }
  if (v30) {
    return (v31 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v31;
  }
}

unint64_t sub_1CD3F6BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1CD3EE584(a1, a2, 1, 0);
  if (a4) {
    unint64_t v11 = sub_1CB90C6E8(a1, a3, a4, a5);
  }
  else {
    unint64_t v11 = sub_1CD3EE584(a1, a2, 0, 1);
  }
  if (__OFADD__(v10, v11)) {
    return ((uint64_t)(v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD3F6C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::TargetLoweringBase **)(a1 + 32);
  uint64_t v5 = (llvm::LLVMContext **)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(llvm::LLVMContext ****)(a2 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 8), v5, (uint64_t)&v10);
  unint64_t v6 = v10;
  int v7 = *(_DWORD *)(a2 + 32);
  if (v7 >= 1)
  {
    do
    {
      uint64_t v8 = (llvm::LLVMContext **)a2;
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        uint64_t v8 = **(llvm::LLVMContext ****)(a2 + 16);
      }
      llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v10);
      if (__OFADD__(v6, v10)) {
        unint64_t v6 = ((uint64_t)(v6 + v10) >> 63) ^ 0x8000000000000000;
      }
      else {
        v6 += v10;
      }
      --v7;
    }
    while (v7);
  }
  return v6;
}

unint64_t sub_1CD3F6D6C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  if (v2 < 1) {
    return 0;
  }
  unint64_t v5 = 0;
  do
  {
    unint64_t v6 = (llvm::LLVMContext **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
      unint64_t v6 = **(llvm::LLVMContext ****)(a2 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v6, (uint64_t)&v10);
    if (__OFADD__(v5, v10)) {
      unint64_t v7 = ((uint64_t)(v5 + v10) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v7 = v5 + v10;
    }
    uint64_t v8 = (llvm::LLVMContext **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
      uint64_t v8 = **(llvm::LLVMContext ****)(a2 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v10);
    if (__OFADD__(v7, v10)) {
      unint64_t v5 = ((uint64_t)(v7 + v10) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v5 = v7 + v10;
    }
    --v2;
  }
  while (v2);
  return v5;
}

unint64_t sub_1CD3F6E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 32);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = (llvm::LLVMContext **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
      uint64_t v8 = **(llvm::LLVMContext ****)(a2 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v12);
    if (__OFADD__(v7, v12)) {
      unint64_t v9 = ((uint64_t)(v7 + v12) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v9 = v7 + v12;
    }
    uint64_t v10 = (llvm::LLVMContext **)a3;
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
      uint64_t v10 = **(llvm::LLVMContext ****)(a3 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v10, (uint64_t)&v12);
    if (__OFADD__(v9, v12)) {
      unint64_t v7 = ((uint64_t)(v9 + v12) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v7 = v9 + v12;
    }
    --v3;
  }
  while (v3);
  return v7;
}

unint64_t sub_1CD3F6F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 32);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = (llvm::LLVMContext **)a3;
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
      uint64_t v8 = **(llvm::LLVMContext ****)(a3 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v12);
    if (__OFADD__(v7, v12)) {
      unint64_t v9 = ((uint64_t)(v7 + v12) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v9 = v7 + v12;
    }
    uint64_t v10 = (llvm::LLVMContext **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
      uint64_t v10 = **(llvm::LLVMContext ****)(a2 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v10, (uint64_t)&v12);
    if (__OFADD__(v9, v12)) {
      unint64_t v7 = ((uint64_t)(v9 + v12) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v7 = v9 + v12;
    }
    --v3;
  }
  while (v3);
  return v7;
}

uint64_t sub_1CD3F707C(uint64_t result)
{
  if (*(_DWORD *)(result + 8) >= 0x41u) {
    operator new[]();
  }
  return result;
}

BOOL sub_1CD3F7118(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  v7[0] = a2 + 1;
  v7[1] = a2 + 2;
  _OWORD v7[2] = a2 + 3;
  v7[3] = a2 + 4;
  v7[4] = a2 + 7;
  v7[5] = a2 + 5;
  v7[6] = a2 + 6;
  unsigned int v3 = a3[1];
  v6[0] = a3 + 1;
  v6[1] = a3 + 2;
  _OWORD v6[2] = a3 + 3;
  v6[3] = a3 + 4;
  void v6[4] = a3 + 7;
  v6[5] = a3 + 5;
  v6[6] = a3 + 6;
  unsigned int v4 = a2[1];
  if (v4 < v3) {
    return 1;
  }
  if (v3 >= v4) {
    return sub_1CB90D4AC((uint64_t)&v8, v7, v6);
  }
  return 0;
}

BOOL sub_1CD3F71C0(uint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v5 = sub_1CB83544C(*a1, a2) + 7;
  if (v4 == 1)
  {
    unint64_t v8 = v5;
    unint64_t v5 = v8;
  }
  unint64_t v6 = v5 >> 3;
  return 1 << a3 >= (unint64_t)v6 && v6 && (v6 & (v6 - 1)) == 0;
}

unint64_t sub_1CD3F7240(uint64_t a1)
{
  if (!llvm::TargetMachine::isPositionIndependent((llvm::TargetMachine *)a1)
    || llvm::TargetMachine::getCodeModel((llvm::TargetMachine *)a1) == 3
    || llvm::TargetMachine::getCodeModel((llvm::TargetMachine *)a1) == 4)
  {
    return 0;
  }
  if (*(char *)(a1 + 471) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 448), *(void *)(a1 + 456));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 448);
    uint64_t v5 = *(void *)(a1 + 464);
  }
  uint64_t v7 = *(void *)(a1 + 488);
  long long v6 = *(_OWORD *)(a1 + 472);
  if (llvm::Triple::isArch64Bit((llvm::Triple *)__p))
  {
    if (v6 == 3)
    {
      if (HIDWORD(v6) <= 0x21) {
        unint64_t v2 = (0xFFFF777uLL >> SBYTE12(v6)) & 1;
      }
      else {
        unint64_t v2 = 1;
      }
    }
    else
    {
      unint64_t v2 = 1;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

unint64_t sub_1CD3F7334(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  unint64_t v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unint64_t v9 = (llvm::LLVMContext **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    unint64_t v9 = **(llvm::LLVMContext ****)(a4 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  uint64_t v10 = v13;
  uint64_t v11 = sub_1CB90A01C(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11)) {
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD3F73E8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unint64_t v17 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v68[0] = v17 / a4;
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), (llvm::Type *)(v17 / a4));
  uint64_t v65 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    uint64_t v19 = a1;
    unint64_t v23 = sub_1CD3F659C(a1, a2, a3, a7, 1, 0, a9);
    int v22 = v24;
  }
  else
  {
    if (a9)
    {
      int v22 = 0;
      unint64_t v20 = 1;
      uint64_t v19 = a1;
    }
    else
    {
      uint64_t v19 = a1;
      unint64_t v20 = sub_1CD3EE380(a1, a2, (llvm::EVT *)a3, a7 | 0x100, a8, 0);
      int v22 = v21;
    }
    unint64_t v23 = v20;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v19 + 32), *(const llvm::DataLayout **)(v19 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v77);
  unsigned __int8 v76 = v79[0];
  uint64_t v26 = sub_1CB83544C(*(void *)(v19 + 8), a3);
  if (v25 == 1) {
  uint64_t v28 = sub_1CB87E200(&v76);
  }
  if (v27 == 1) {
  if (!v22)
  }
  {
    unint64_t v29 = (unint64_t)(v28 + 7) >> 3;
    if (((unint64_t)(v26 + 7) >> 3) > v29)
    {
      unint64_t v64 = v23;
      unint64_t v30 = (((unint64_t)(v26 + 7) >> 3) + (unint64_t)v29 - 1)
          / ((unint64_t)(v28 + 7) >> 3);
      unsigned int v77 = v79;
      uint64_t v78 = 0x600000000;
      sub_1CB90D610((uint64_t)&v77, (v30 + 63) >> 6, 0);
      int v80 = v30;
      uint64_t v31 = (int8x8_t *)v77;
      if (a6)
      {
        if (v68[0] <= 1) {
          unsigned int v32 = 1;
        }
        else {
          unsigned int v32 = v68[0];
        }
        unint64_t v33 = a5;
        do
        {
          if (v17 >= a4)
          {
            unsigned int v35 = *v33;
            unsigned int v36 = v32;
            do
            {
              unint64_t v34 = ((unint64_t)v17 + v30 - 1) / v30;
              *(void *)&v31[(v35 / v34) >> 6] |= 1 << (v35 / v34);
              v35 += a4;
              --v36;
            }
            while (v36);
          }
          ++v33;
        }
        while (v33 != &a5[(void)a6]);
      }
      if (v78)
      {
        LODWORD(v37) = 0;
        uint64_t v38 = 8 * v78;
        unsigned int v39 = v31;
        do
        {
          int8x8_t v40 = *v39++;
          uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
          v41.i16[0] = vaddlv_u8(v41);
          uint64_t v37 = (v37 + v41.i32[0]);
          v38 -= 8;
        }
        while (v38);
      }
      else
      {
        uint64_t v37 = 0;
      }
      unint64_t v23 = (v30 - 1 + v37 * v64) / v30;
      if (v31 != (int8x8_t *)v79) {
        free(v31);
      }
    }
  }
  sub_1CB8F1EEC((uint64_t)&v74, v68[0], -1);
  sub_1CB8F1EEC((uint64_t)&v72, v17, -1);
  sub_1CB8F1EEC((uint64_t)&v70, v17, 0);
  if (a6)
  {
    unint64_t v42 = &a5[(void)a6];
    unsigned int v43 = v71;
    if (v68[0] <= 1) {
      unsigned int v44 = 1;
    }
    else {
      unsigned int v44 = v68[0];
    }
    do
    {
      if (v17 >= a4)
      {
        unsigned int v45 = *a5;
        unsigned int v46 = v44;
        do
        {
          uint64_t v47 = 1 << v45;
          if (v43 > 0x40) {
            *(void *)(v70 + 8 * (v45 >> 6)) |= v47;
          }
          else {
            v70 |= v47;
          }
          v45 += a4;
          --v46;
        }
        while (v46);
      }
      ++a5;
    }
    while (a5 != v42);
  }
  if (a2 == 32)
  {
    *(void *)&v68[1] = sub_1CD3EE624(v19, v65, (uint64_t)&v74, 1, 0);
    uint64_t v69 = v48;
    unsigned int v77 = a6;
    LODWORD(v78) = 0;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v23, v77)) {
      unint64_t v49 = (char *)(((uint64_t)((uint64_t)v77 + v23) >> 63) ^ 0x8000000000000000);
    }
    else {
      unint64_t v49 = (char *)v77 + v23;
    }
    uint64_t v50 = v19;
    uint64_t v51 = a3;
    int v52 = 0;
    int v53 = 1;
  }
  else
  {
    *(void *)&v68[1] = a6;
    LODWORD(v69) = 0;
    unsigned int v77 = (void *)sub_1CD3EE624(v19, v65, (uint64_t)&v74, 0, 1);
    uint64_t v78 = v54;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v23, v77)) {
      unint64_t v49 = (char *)(((uint64_t)((uint64_t)v77 + v23) >> 63) ^ 0x8000000000000000);
    }
    else {
      unint64_t v49 = (char *)v77 + v23;
    }
    uint64_t v50 = v19;
    uint64_t v51 = a3;
    int v52 = 1;
    int v53 = 0;
  }
  unint64_t v55 = sub_1CD3EE624(v50, v51, (uint64_t)&v70, v52, v53);
  if (__OFADD__(v49, v55)) {
    unint64_t v57 = ((uint64_t)&v49[v55] >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v57 = (unint64_t)&v49[v55];
  }
  if (a10)
  {
    Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(*(llvm::Type **)a3, v56);
    uint64_t v60 = (llvm::APIntOps *)(a11 ? &v70 : &v72);
    unint64_t v61 = sub_1CD3F60EC(a1, Int8Ty, a4, (llvm::Type *)v68[0], v60);
    if (__OFADD__(v57, v61)) {
      unint64_t v57 = ((uint64_t)(v57 + v61) >> 63) ^ 0x8000000000000000;
    }
    else {
      v57 += v61;
    }
    if (a11)
    {
      llvm::FixedVectorType::get(Int8Ty, v17);
      unint64_t v63 = sub_1CD3F5A88(a1, 28, v62, a9, 0, 0);
      if (__OFADD__(v57, v63)) {
        unint64_t v57 = ((uint64_t)(v57 + v63) >> 63) ^ 0x8000000000000000;
      }
      else {
        v57 += v63;
      }
    }
  }
  if (v71 >= 0x41 && v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
  if (v73 >= 0x41 && v72) {
    MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
  }
  if (v75 >= 0x41 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
  }
  return v57;
}

unint64_t sub_1CD3F7964(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, unsigned int a6)
{
  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(unsigned char *)(a5 + 8) == 19) << 32)));
  uint64_t v12 = (llvm::Type ***)v11;
  unint64_t v13 = sub_1CD3F6878(a1, 13, v11, a6);
  if (a3) {
    uint64_t v14 = 39;
  }
  else {
    uint64_t v14 = 40;
  }
  uint64_t v15 = sub_1CB90A01C(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v20[0] = v15;
  v20[1] = v16;
  if (a2)
  {
    unint64_t v17 = sub_1CD3F5A88(a1, 17, (uint64_t)v12, a6, 0, 0);
    uint64_t v21 = 2;
    int v22 = 0;
    sub_1CB90C9D4((uint64_t)v20, (uint64_t)&v21);
    uint64_t v15 = v20[0];
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v18 = v13 + v17;
  if (__OFADD__(v13, v17)) {
    unint64_t v18 = ((uint64_t)(v13 + v17) >> 63) ^ 0x8000000000000000;
  }
  if (__OFADD__(v18, v15)) {
    return ((uint64_t)(v18 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v18 + v15;
  }
}

uint64_t sub_1CD3F7AB0(int a1, uint64_t a2, llvm::IntegerType *this, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((a9 & 0xFF00000000) != 0) {
    int v11 = a9;
  }
  else {
    int v11 = 1;
  }
  uint64_t result = llvm::IntegerType::get(this, (llvm::LLVMContext *)(8 * v11));
  if (a4)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    do
    {
      if (v13 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v13) = result;
      unsigned int v13 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v13;
      a4 -= v11;
    }
    while (a4);
  }
  return result;
}

uint64_t sub_1CD3F7B48(uint64_t a1, uint64_t *a2)
{
  void v20[4] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    long long v6 = (char *)*(a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    long long v6 = (char *)&a2[-4 * v5];
  }
  unint64_t v18 = v20;
  uint64_t v19 = 0x400000000;
  sub_1CB90CA80((uint64_t)&v18, v6, &v6[32 * v5]);
  uint64_t v7 = sub_1CB9084B0(a1, (llvm::ShuffleVectorInst *)a2, (uint64_t)v18, v19, 1);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 60)
  {
    uint64_t v11 = 4;
    goto LABEL_13;
  }
  uint64_t v14 = *a2;
  if (v12 == 84)
  {
    uint64_t v15 = *(a2 - 4);
    if (!v15
      || *(unsigned char *)(v15 + 16)
      || *(void *)(v15 + 24) != a2[9]
      || (sub_1CB9091FC(a1, (uint64_t ***)v15) & 1) != 0)
    {
      uint64_t v11 = 40;
      goto LABEL_13;
    }
    if (*(unsigned char *)(v14 + 8) == 16 && v14) {
      uint64_t v14 = **(void **)(v14 + 16);
    }
  }
  int v16 = *(_DWORD *)(v14 + 8);
  unsigned int v17 = v16;
  if (v14 && (v16 & 0xFE) == 0x12) {
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(v14 + 24) + 8);
  }
  if (v17 >= 7) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 3;
  }
LABEL_13:
  if (v18 != v20) {
    free(v18);
  }
  return v11;
}

void sub_1CD3F7CEC()
{
}

void sub_1CD3F7E1C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)a2);

  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1CD3F7E5C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 < *a1) {
    return 1;
  }
  unsigned int v3 = a1[1];
  unsigned int v4 = a2[1];
  if (v3 >= v4) {
    return v4 < v3;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1CD3F7EA4()
{
}

uint64_t (***sub_1CD3F7EE0())()
{
  return off_1EC7DF9C8;
}

uint64_t sub_1CD3F7EEC()
{
  return 0;
}

uint64_t sub_1CD3F7EF4()
{
  return 0;
}

uint64_t sub_1CD3F7EFC()
{
  return 0;
}

uint64_t sub_1CD3F7F04()
{
  return 0;
}

uint64_t *sub_1CD3F7F0C(_OWORD *a1, unsigned int a2, char a3, uint64_t a4, const llvm::APInt *a5)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  BOOL v9 = &unk_1CD96DBA8;
  int v10 = 33;
  if (a3 == 9)
  {
    BOOL v9 = &unk_1CD96DB88;
    int v10 = 1;
  }
  if (a3 == 4) {
    uint64_t v11 = &unk_1CD96DB88;
  }
  else {
    uint64_t v11 = v9;
  }
  if (a3 == 4) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = v10;
  }
  v22[0] = (uint64_t)sub_1CD7EBF14(a4, v11[(int)a2 - 1], a5, (llvm *)5, 0, 1, 0);
  v22[1] = v13;
  LODWORD(v14) = 1;
  int v20 = 1;
  uint64_t v15 = a2;
  do
  {
    if (v14 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v22[2 * v14] = *a1;
    unsigned int v21 = v20 + 1;
    unsigned int v17 = sub_1CD7EBF14(a4, v12, a5, (llvm *)5, 0, 1, 0);
    if (v21 >= 8uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v18 = &v22[2 * v21];
    *unint64_t v18 = (uint64_t)v17;
    v18[1] = v16;
    uint64_t v14 = v21 + 1;
    int v20 = v21 + 1;
    ++v12;
    ++a1;
    --v15;
  }
  while (v15);
  return sub_1CD801450(a4, 18, (uint64_t)a5, (llvm *)0xAE, 0, v22, v14);
}

uint64_t *sub_1CD3F8144(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = sub_1CD7EBF14(a5, 27, a6, (llvm *)5, 0, 1, 0);
  int v17 = v12;
  uint64_t v18 = a1;
  int v19 = a2;
  int v20 = sub_1CD7EBF14(a5, 33, a6, (llvm *)5, 0, 1, 0);
  int v21 = v13;
  uint64_t v22 = a3;
  int v23 = a4;
  int v24 = sub_1CD7EBF14(a5, 34, a6, (llvm *)5, 0, 1, 0);
  int v25 = v14;
  return sub_1CD801450(a5, 18, (uint64_t)a6, (llvm *)0xAE, 0, (uint64_t *)&v16, 5);
}

uint64_t *sub_1CD3F8288(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a1 + 64);
  int v23 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v23, v10, 2);
  }
  int v24 = *(_DWORD *)(a1 + 60);
  int v25 = v27;
  uint64_t v26 = 0x400000000;
  if (a4)
  {
    uint64_t v12 = 0;
    do
    {
      int v13 = sub_1CD7EBF14(a3, v12, (const llvm::APInt *)&v23, (llvm *)6, 0, 0, 0);
      int v17 = sub_1CD7EB32C(a3, 148, (const llvm::APInt *)&v23, (llvm *)a5, 0, a1, a2, v15, (uint64_t)v13, v14);
      if (v26 >= (unint64_t)HIDWORD(v26)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v18 = (uint64_t **)((char *)v25 + 16 * v26);
      *uint64_t v18 = v17;
      v18[1] = v16;
      LODWORD(v26) = v26 + 1;
      ++v12;
    }
    while (a4 != v12);
    uint64_t v11 = v25;
  }
  else
  {
    uint64_t v11 = v27;
  }
  int v21 = v23;
  if (v23) {
    llvm::MetadataTracking::track((uint64_t)&v21, v23, 2);
  }
  int v22 = v24;
  int v19 = sub_1CD3F7F0C(v11, a4, a5, a3, (const llvm::APInt *)&v21);
  if (v21) {
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v23) {
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  }
  return v19;
}

void sub_1CD3F847C()
{
}

void LLVMInitializeAGX2AsmPrinter()
{
  qword_1EBD025B8 = (uint64_t)sub_1CD3FA2C0;
}

llvm::Constant *sub_1CD3F84D4(uint64_t a1, llvm::GPUMetadataEmitter *this)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    uint64_t ConstSamplerBindNumber = llvm::GPUMetadataEmitter::GetConstSamplerBindNumber(this, this);
    unsigned int v5 = ConstSamplerBindNumber;
    uint64_t v6 = ConstSamplerBindNumber & 0xFF00000000;
    uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
    uint64_t v8 = *(void *)(a1 + 264);
    if (v6)
    {
      unint64_t v9 = llvm::MCSymbolRefExpr::create(Symbol, 153, v8, 0);
      unint64_t v10 = llvm::MCConstantExpr::create((llvm::MCConstantExpr *)v5, v8, 0, 0);
      return (llvm::Constant *)llvm::MCBinaryExpr::create(0, v9, v10, v8, 0);
    }
    else
    {
      return (llvm::Constant *)llvm::MCSymbolRefExpr::create(Symbol, 0, v8, 0);
    }
  }
  else
  {
    return sub_1CD89F988((void *)a1, this);
  }
}

void sub_1CD3F85D4(void *a1)
{
  *a1 = &unk_1F25EE2C8;
  sub_1CB833728((uint64_t)(a1 + 186));
}

void sub_1CD3F860C()
{
  sub_1CD3F86EC((void *)(v0 + 792));
  sub_1CD89D63C(v0);
}

void sub_1CD3F8634(void *a1)
{
  *a1 = &unk_1F25EE2C8;
  sub_1CB833728((uint64_t)(a1 + 186));
}

void sub_1CD3F866C()
{
  sub_1CD3F86EC((void *)(v0 + 792));
  sub_1CD89D63C(v0);
  JUMPOUT(0x1D25D9CE0);
}

llvm::AnalysisUsage *sub_1CD3F86A8(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1CD89D864(a1, a2);

  return llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
}

void *sub_1CD3F86EC(void *a1)
{
  *a1 = &unk_1F25EE4A8;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)(a1 + 78));
  unint64_t v2 = (void *)a1[43];
  if (v2 != a1 + 46) {
    free(v2);
  }
  unsigned int v3 = (void *)a1[34];
  if (v3 != a1 + 36) {
    free(v3);
  }
  return a1;
}

uint64_t sub_1CD3F8764(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252);
}

void sub_1CD3F876C(_DWORD *a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  int v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v5 = a1[3];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "NumFullRateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v6 = a1[4];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "NumHalfRateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v7 = a1[5];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD96DBE0;
  strcpy((char *)__p[0], "NumQuarterRateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v8 = a1[6];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "NumSixthRateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v9 = a1[7];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "NumEighthRateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 216))(a1);
  strcpy((char *)__p, "RateScaledInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v11 = a1[8];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v12 = a1[9];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "MoveInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v13 = a1[10];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ImmInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v14 = a1[11];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v15 = a1[12];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v16 = a1[13];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v17 = a1[14];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v18 = a1[15];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v19 = a1[16];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ComplexInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v20 = a1[17];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "UniformMoveInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v21 = a1[18];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "UniformLoadInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v22 = a1[19];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformMoveBytes");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v23 = a1[20];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformLoadBytes");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v24 = a1[21];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "LatencyHidingInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v25 = a1[22];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalStallCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v26 = a1[23];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "ImmStallCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v27 = a1[24];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F16StallCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v28 = a1[25];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F32StallCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v29 = a1[26];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "ComplexStallCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v30 = a1[27];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "TotalMathCycles");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v31 = a1[28];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalMathClauses");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v32 = a1[29];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "ShortClauseInefficiency");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v33 = a1[30];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "AfterPixwaitInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v34 = a1[31];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "UnpairedMoveInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v35 = a1[32];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlDataSwitches");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v35;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v36 = a1[33];
  strcpy((char *)__p, "RegisterFileWritebacks");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v36;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v37 = a1[34];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "MoveInstructionWritebacks");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v37;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v38 = a1[35];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "RegistersForwarded");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v38;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v39 = a1[36];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v39;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v40 = a1[37];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "WDFInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v40;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v41 = a1[38];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "PixwaitInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v41;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v42 = a1[39];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v42;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v43 = a1[40];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v43;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v44 = a1[52];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v44;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v45 = a1[41];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "IterateInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v45;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v46 = a1[42];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ForwardedIterates");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v46;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v47 = a1[43];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "LoadCoefInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v47;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v48 = a1[44];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v48;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v49 = a1[45];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v49;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v50 = a1[46];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v50;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v51 = a1[47];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v51;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v52 = a1[48];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v52;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v53 = a1[49];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v53;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v54 = a1[50];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v54;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v55 = a1[51];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A430;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v55;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v56 = a1[64];
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "NumLoops");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v56;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v57 = a1[65];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "TotalLoopInsts");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v57;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v58 = a1[66];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "TotalLoopDataInsts");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v58;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v59 = a1[53];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TempRegisterCount");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v59;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v60 = a1[57];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "CoeffRegisterCount");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v60;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v61 = a1[54];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "UniformRegisterCount");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v61;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v62 = a1[55];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "TextureRegisterCount");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v62;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v63 = a1[56];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "SamplerRegisterCount");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v63;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v64 = a1[59];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "ImageStateBindingsBytes");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v64;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v65 = a1[60];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "SamplerStateBindingsBytes");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v65;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v66 = a1[61];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "SpillBufferSize");
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v66;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v67 = a1[63];
  strcpy((char *)__p, "InvalidScheduleClasses");
  HIBYTE(__p[2]) = 22;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v67;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v68 = a1[67];
  HIBYTE(__p[2]) = 3;
  LODWORD(__p[0]) = 5263444;
  uint64_t v70 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v68;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CD3FA034()
{
  return 1;
}

void sub_1CD3FA03C(void *a1)
{
  sub_1CD3F86EC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3FA074(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(_DWORD **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD3FA1FC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    unsigned int v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      unsigned int *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 128);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD3FA1FC(a1, v14, v9);
}

uint64_t sub_1CD3FA1FC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_DWORD *)(result + 8);
    int v9 = (_DWORD *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(_DWORD **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CB91F718((uint64_t)v5, a2, &v11);
      unsigned int v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD3FA2C0()
{
}

uint64_t sub_1CD3FA35C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  sub_1CD89D51C(a1, a2, &v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  *(void *)a1 = &unk_1F25EE2C8;
  sub_1CD3FA40C(a1 + 792);
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 1488);
  *(void *)(a1 + 7856) = 0;
  *(_DWORD *)(a1 + 7864) = 0;
  return a1;
}

uint64_t sub_1CD3FA40C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EE4A8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x600000000;
  sub_1CB90D610(a1 + 272, 4uLL, 0);
  *(_DWORD *)(a1 + 336) = 256;
  *(void *)(a1 + 344) = a1 + 368;
  *(_OWORD *)(a1 + 352) = xmmword_1CD96DBF0;
  *(_DWORD *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 624) = &unk_1F2646FA8;
  *(void *)(a1 + 688) = a1 + 344;
  *(_DWORD *)(a1 + 680) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  return a1;
}

BOOL sub_1CD3FA514(unsigned __int8 *a1)
{
  int v1 = *a1;
  BOOL result = 1;
  if ((v1 - 22) > 0x39 || ((1 << (v1 - 22)) & 0x210080020080101) == 0)
  {
    unsigned int v4 = v1 - 89;
    BOOL v5 = v4 > 0x16;
    int v6 = (1 << v4) & 0x400101;
    return !v5 && v6 != 0;
  }
  return result;
}

void *sub_1CD3FA570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a3;
  v9[39] = *MEMORY[0x1E4F143B8];
  llvm::CCState::CCState(v9, a3, 0, a1, a5, a2);
  uint64_t v7 = sub_1CB920864;
  if (v6 <= 100)
  {
    uint64_t v7 = sub_1CB920A14;
  }
  else if (v6 != 101 && v6 != 108)
  {
    uint64_t v7 = sub_1CB920DE0;
  }
  llvm::CCState::AnalyzeReturn((uint64_t)v9, a4, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))v7);
  return sub_1CB8393F0(v9);
}

void *sub_1CD3FA640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a3;
  v9[39] = *MEMORY[0x1E4F143B8];
  llvm::CCState::CCState(v9, a3, 0, a1, a5, a2);
  uint64_t v7 = sub_1CB921204;
  if (v6 <= 101)
  {
    uint64_t v7 = sub_1CB9213C4;
  }
  else if (v6 == 102)
  {
    uint64_t v7 = sub_1CB921214;
  }
  else if (v6 != 106)
  {
    uint64_t v7 = sub_1CB921844;
  }
  llvm::CCState::AnalyzeFormalArguments((uint64_t)v9, a4, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))v7);
  return sub_1CB8393F0(v9);
}

void *sub_1CD3FA720(void *result, uint64_t a2)
{
  *BOOL result = &unk_1F25EE8D0;
  result[1] = a2;
  return result;
}

void sub_1CD3FA74C()
{
}

uint64_t sub_1CD3FA760()
{
  return 0;
}

uint64_t sub_1CD3FA768()
{
  return 0;
}

void sub_1CD3FA770()
{
}

uint64_t sub_1CD3FA788(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (void *)a1[1];
  int v6 = (*(unsigned __int16 *)(*v5 + 18) >> 4) & 0x3FF;
  if (v6) {
    BOOL v7 = v6 == 8;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 255 || *(unsigned char *)(v5[7] + 62))
  {
    uint64_t v11 = 257;
    int v12 = 0;
    v10[0] = a3;
    void v10[4] = 0;
    v10[6] = sub_1CB925F18((uint64_t)a1, a2);
    v10[10] = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*a1 + 32))(a1, 46, &v11, 1, v10, 2, 0);
    return *(unsigned int *)(*(void *)(v8 + 32) + 4);
  }
  return v3;
}

void sub_1CD3FA880()
{
}

void sub_1CD3FA894(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBA0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB928028;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EBCBEBA0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD3FA904()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD3FAB8C()
{
}

void *sub_1CD3FABA0(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25EECE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD3FABE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25EECE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD3FAC14(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

llvm::Instruction *sub_1CD3FAC20(uint64_t *a1, llvm::BasicBlock *a2)
{
  unsigned int v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  BOOL v5 = (llvm::Instruction *)(v4 + 8);
  *(void *)unsigned int v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v4 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v4 + 8), a2, 0);
  __int16 v8 = 257;
  return sub_1CB844E0C(a1, v5, (uint64_t)v7);
}

void sub_1CD3FACA0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBA8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB9314B4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBEBA8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD3FAD10()
{
}

llvm::Instruction *sub_1CD3FAD7C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Constant *this, uint64_t a5)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(this, (uint64_t)&v11);
  BOOL result = sub_1CB935A74(a1, a2, a3, v11, (llvm::Type *)v12, a5);
  if (v11 != v13)
  {
    unsigned int v10 = result;
    free(v11);
    return v10;
  }
  return result;
}

void sub_1CD3FAE4C()
{
}

void sub_1CD3FAE88()
{
}

void sub_1CD3FAEF8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBC0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB93E16C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBEBC0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD3FAF68()
{
}

uint64_t (***sub_1CD3FAFE4())()
{
  return off_1EC7DF9D0;
}

void sub_1CD3FAFF0()
{
}

uint64_t sub_1CD3FB004(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = a3;
  *(_WORD *)(result + 12) = 1028;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 1;
  *(void *)BOOL result = &unk_1F25EF170;
  *(void *)(result + 24) = a2;
  return result;
}

void sub_1CD3FB044(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3FB07C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBD0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB94CD28;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBEBD0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD3FB0EC()
{
}

void sub_1CD3FB128()
{
}

uint64_t sub_1CD3FB164(uint64_t result, int a2)
{
  switch(a2)
  {
    case 291:
      *(_DWORD *)(result + 12) = 1;
      *(unsigned char *)(result + 21) = 1;
      goto LABEL_9;
    case 292:
      goto LABEL_6;
    case 293:
      *(_DWORD *)(result + 12) = 3;
LABEL_6:
      *(_DWORD *)(result + 8) = 3;
      *(unsigned char *)(result + 22) = 1;
      return result;
    case 294:
LABEL_9:
      int v2 = 2;
      goto LABEL_10;
    case 295:
      *(_DWORD *)(result + 8) = 0;
      return result;
    case 296:
      int v2 = 1;
      goto LABEL_10;
    case 297:
      int v2 = 8;
      goto LABEL_10;
    case 298:
    case 301:
      __break(1u);
      return result;
    case 299:
      int v2 = 9;
      goto LABEL_10;
    case 300:
      int v2 = 10;
      goto LABEL_10;
    case 302:
      int v2 = 5;
      goto LABEL_10;
    case 303:
      int v2 = 7;
      goto LABEL_10;
    case 304:
      int v2 = 4;
      goto LABEL_10;
    case 305:
      int v2 = 6;
LABEL_10:
      *(_DWORD *)(result + 8) = v2;
      break;
    default:
      *(unsigned char *)(result + 20) = 1;
      break;
  }
  return result;
}

void sub_1CD3FB214(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1CD96EED0;
  *(void *)(a1 + 8) = &unk_1E6750D50;
  *(void *)(a1 + 16) = &unk_1CDE91A7C;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = "1000";
  *(_DWORD *)(a1 + 48) = 8350;
  *(void *)a1 = &unk_1F25EF478;
  *(void *)(a1 + 80) = a2;
  sub_1CD413B04(a1 + 88);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  operator new();
}

uint64_t sub_1CD3FB38C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 456);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL sub_1CD3FB424(uint64_t a1, uint64_t a2)
{
  return (*(void *)(*(void *)(a1 + 16) + 16) & 0x1000000001) == 1
      && *(_DWORD *)(*(void *)(a2 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*llvm::TargetRegisterInfo::getMinimalPhysRegClass(a2, *(_DWORD *)(*(void *)(a1 + 32) + 4), 1u)+ 24)+ *(_DWORD *)(a2 + 272) * ((*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 3))) > 0x20u;
}

uint64_t sub_1CD3FB4AC(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1CD3FB4B4()
{
  return &unk_1E66A9580;
}

void *sub_1CD3FB4C4()
{
  return &unk_1E66A9650;
}

void *sub_1CD3FB4D4()
{
  return &unk_1E66A9720;
}

uint64_t sub_1CD3FB4E4(unsigned __int8 a1, int a2)
{
  unsigned __int8 v16 = a1;
  BOOL v3 = (a1 - 75) < 0x2Du || (a1 + 104) < 0x13u;
  int v4 = (a1 - 8) < 7u || v3;
  sub_1CB87E200(&v16);
  if (v5 == 1) {
  uint64_t v7 = sub_1CB87E200(&v16) + 7;
  }
  if (v6 == 1)
  {
    int v15 = v7;
    LODWORD(v7) = v15;
  }
  uint64_t v8 = v7 & 0xFFFFFFF8;
  if (a2 == 4) {
    unsigned int v9 = 4075;
  }
  else {
    unsigned int v9 = 4077;
  }
  if (a2 == 4) {
    int v10 = 4072;
  }
  else {
    int v10 = 4073;
  }
  if (v8 == 16) {
    unsigned int v9 = v10;
  }
  if (a2 == 4) {
    int v11 = 4070;
  }
  else {
    int v11 = 4071;
  }
  if (a2 == 4) {
    int v12 = 4066;
  }
  else {
    int v12 = 4067;
  }
  if (v8 == 16) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v11;
  }
  if (v4) {
    return v13;
  }
  else {
    return v9;
  }
}

uint64_t sub_1CD3FB5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  uint64_t v8 = sub_1CB84B588(a2, (unint64_t *)(a2 + 48), a7, *(void *)(a1 + 8) + 13824);
  uint64_t v12 = 0;
  uint64_t v13 = a3;
  int v11 = 4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v11);
  return 1;
}

uint64_t sub_1CD3FB644(uint64_t a1, uint64_t a2)
{
  v17[0] = a1;
  v17[1] = a2;
  if ((_BYTE)a1)
  {
    if (a1 - 15 >= 0x9C)
    {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v17);
LABEL_4:
      if (v3 == 1)
      {
        unint64_t v14 = ExtendedSizeInBits;
        unint64_t ExtendedSizeInBits = v14;
      }
      uint64_t v4 = 0;
      return dword_1CD96EF10[2 * v4 + (ExtendedSizeInBits > 0x10)];
    }
    LOBYTE(ExtendedVectorElementType) = sub_1CB8C2FBC((unsigned __int8 *)v17);
    unint64_t v9 = 0;
    int v10 = 0;
  }
  else
  {
    if (!llvm::EVT::isExtendedVector((llvm::EVT *)v17))
    {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
      goto LABEL_4;
    }
    unint64_t ExtendedVectorElementType = llvm::EVT::getExtendedVectorElementType((llvm::EVT *)v17, v6, v7);
    unint64_t v9 = ExtendedVectorElementType & 0xFFFFFFFFFFFFFF00;
  }
  int v11 = ExtendedVectorElementType;
  v16[0] = v9 | ExtendedVectorElementType;
  v16[1] = v10;
  int v12 = sub_1CD3DB440((llvm::EVT *)v17, v10);
  if (v11) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v16);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  }
  if (v13 == 1)
  {
    unint64_t v15 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v15;
  }
  uint64_t v4 = qword_1CD971750[v12 - 2];
  return dword_1CD96EF10[2 * v4 + (ExtendedSizeInBits > 0x10)];
}

uint64_t sub_1CD3FB764@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = a2 + 32;
  *(void *)(a2 + 24) = 0x800000000;
  *(unsigned char *)(a2 + 160) = 0;
  uint64_t v2 = *(void *)(result + 80);
  if (*(unsigned char *)(v2 + 318))
  {
    int v3 = 4674;
  }
  else if (*(unsigned char *)(v2 + 327))
  {
    int v3 = 4676;
  }
  else
  {
    int v3 = 4675;
  }
  *(_DWORD *)a2 = v3;
  return result;
}

void sub_1CD3FB7B0()
{
}

void sub_1CD3FB7C8()
{
}

void sub_1CD3FB7E0(void *a1)
{
}

void sub_1CD3FB7F0()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3FB81C(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3FB854(void *a1)
{
  *a1 = &unk_1F25EF478;
  uint64_t v2 = a1[57];
  a1[57] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[56];
  a1[56] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[55];
  a1[55] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[11] = &unk_1F25F39D8;
  BOOL v5 = (void *)a1[46];
  if (v5 != a1 + 48) {
    free(v5);
  }
  llvm::TargetRegisterInfo::~TargetRegisterInfo((llvm::TargetRegisterInfo *)(a1 + 11));
}

void sub_1CD3FB974()
{
}

void sub_1CD3FBB80()
{
}

unsigned int *sub_1CD3FBBF0(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(void *)(a2 + 24) = a2;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 24) + 24))(*(void *)(v5 + 24), a2);
        }
        else
        {
          *(void *)(a2 + 24) = v7;
          *(void *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    uint64_t v8 = v4[2];
    if (v8)
    {
      uint64_t v9 = *(void *)v4;
      uint64_t v10 = 32 * v8;
      uint64_t v11 = v9 - 32;
      do
      {
        uint64_t result = *(unsigned int **)(v11 + v10 + 24);
        if ((unsigned int *)(v11 + v10) == result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v11 + v10) + 32))(v11 + v10);
        }
        else if (result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v10 -= 32;
      }
      while (v10);
    }
  }
  return result;
}

double sub_1CD3FBD14(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 32 * v5;
    uint64_t v7 = v4 - 32;
    do
    {
      uint64_t v8 = *(char **)&v7[v6 + 24];
      if (&v7[v6] == v8)
      {
        (*(void (**)(char *))(*(void *)&v7[v6] + 32))(&v7[v6]);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      v6 -= 32;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void *sub_1CD3FBDEC(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB98BDCC((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD3FBE50(a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CD3FBE50(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 64;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD3FBF10((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CB98BDCC(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != 2) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD3FBF10(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD3FC0A8(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v15;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if (v10 != 2 && v10 != 4)
    {
      *(void *)uint64_t v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CD3FC0A8(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t sub_1CD3FC0A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)double result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 1032);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = 2;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    if (*(void *)a2 != 2 && *(void *)a2 != 4)
    {
      uint64_t v12 = 0;
      double result = sub_1CB98BDCC((uint64_t)v5, (void *)a2, &v12);
      uint64_t v11 = v12;
      *uint64_t v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CD3FC170(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 72), 4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  unint64_t v4 = (void **)a1;
  sub_1CB98BE88(&v4);
  return a1;
}

void *sub_1CD3FC1D4(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }
  return a1;
}

void sub_1CD3FC228(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD3FC2AC(void *a1)
{
  sub_1CD3FC494(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD3FC2E4(uint64_t a1)
{
  return sub_1CD3FC494((void *)(a1 - 8));
}

void sub_1CD3FC2EC(uint64_t a1)
{
  sub_1CD3FC494((void *)(a1 - 8));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD3FC328(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 80);
  if (v2)
  {
    unint64_t v4 = *(uint64_t **)(result + 72);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

llvm::raw_ostream *sub_1CD3FC394(uint64_t a1, llvm::raw_ostream *a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    unint64_t v4 = "constimage(";
  }
  else {
    unint64_t v4 = "image(";
  }
  sub_1CB8E509C(a2, v4);
  uint64_t v5 = *(llvm::Value **)(a1 + 16);
  if (v5) {
    llvm::Value::print(v5, a2, 0);
  }
  else {
    sub_1CB8E509C(a2, "nullptr");
  }

  return sub_1CB8E509C(a2, ")");
}

void sub_1CD3FC424()
{
}

__n128 sub_1CD3FC438@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__int16 ***sub_1CD3FC448(uint64_t a1, uint64_t a2)
{
  *((void *)&v3 + 1) = a2;
  *(void *)&long long v3 = a2 - 16;
  unint64_t v2 = v3 >> 4;
  if (v2 > 0xF) {
    return 0;
  }
  else {
    return off_1E66A9940[v2];
  }
}

void sub_1CD3FC470(int a1@<W1>, unsigned int *a2@<X8>)
{
  unsigned int v2 = *a2;
  *((void *)a2 + 1) = 0;
  a2[4] = 64;
  a2[6] = 0;
  *a2 = v2 & 0xFFF00000 | 0x207;
  a2[1] = a1;
}

void *sub_1CD3FC494(void *a1)
{
  *a1 = &unk_1F25F09C0;
  a1[1] = &unk_1F25F0A18;
  unsigned int v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  a1[1] = &unk_1F25F0A58;
  long long v3 = (void *)a1[3];
  if (v3 != (void *)a1[2]) {
    free(v3);
  }
  return a1;
}

void sub_1CD3FC534(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEC00, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CB9A755C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCBEC00, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD3FC5A4()
{
}

void sub_1CD3FC5F8()
{
}

uint64_t *sub_1CD3FC664(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, unsigned int *a7, unsigned int *a8, _OWORD *a9, _OWORD *a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  int v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD3FD040(a1, (uint64_t)&v21, *a7, a8, a9, a10);
  int v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD3FC77C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7)
{
  uint64_t v19[4] = *MEMORY[0x1E4F143B8];
  int v17 = v19;
  uint64_t v18 = 0x200000000;
  uint64_t v15 = a6;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1CD3D5F48(a1, (uint64_t)&v17, a7);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t sub_1CD3FC878(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v11 = a3;
  v71[3] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  long long v69 = *(_OWORD *)*(void *)(a3 + 40);
  if ((_BYTE)v69) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v69);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v69);
  }
  if (v15 == 1)
  {
    unsigned int v66 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v66;
  }
  *(_DWORD *)(a1 + 40) = ExtendedSizeInBits;
  int v16 = v69;
  if ((_BYTE)v69)
  {
    BOOL v17 = (v69 - 75) < 0x2Du || (v69 + 104) < 0x13u;
    BOOL v18 = v69 - 8 < 7 || v17;
  }
  else
  {
    if ((*(_DWORD *)(*((void *)&v69 + 1) + 8) & 0xFE) == 0x12) {
      unsigned int v30 = *(unsigned __int8 *)(**(void **)(*((void *)&v69 + 1) + 16) + 8);
    }
    else {
      unsigned int v30 = *(_DWORD *)(*((void *)&v69 + 1) + 8);
    }
    BOOL v18 = v30 < 7;
  }
  *(unsigned char *)(a1 + 44) = v18;
  int v19 = *(unsigned __int16 *)(v11 + 24);
  if (v19 == 36 || v19 == 12)
  {
    *(_DWORD *)(a1 + 32) = 5;
    uint64_t v20 = *(void *)(v11 + 80);
    if (*(_UNKNOWN **)(v20 + 32) == &unk_1CFB2E344) {
      char v21 = *(unsigned char *)(*(void *)(v20 + 40) + 28);
    }
    else {
      char v21 = *(unsigned char *)(v20 + 52);
    }
    BOOL v22 = (v21 & 7) == 3 && (v21 & 8) == 0;
    if (!v22 && a5) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v19 == 35 || v19 == 11) {
      int v32 = 4;
    }
    else {
      int v32 = 0;
    }
    *(_DWORD *)(a1 + 32) = v32;
    if (v19 != 11 && v19 != 35)
    {
LABEL_20:
      if (a6)
      {
        int v23 = *(unsigned __int16 *)(v11 + 24);
        if (v23 == 58)
        {
          int v24 = *(uint64_t **)(v11 + 32);
          uint64_t v38 = v24[5];
          int v39 = *(unsigned __int16 *)(v38 + 24);
          if (v39 != 35 && v39 != 11) {
            goto LABEL_27;
          }
          uint64_t v41 = *(void *)(v38 + 80);
          if (*(_DWORD *)(v41 + 32) > 0x40u)
          {
            unint64_t v42 = **(void **)(v41 + 24);
            if (v42 > 0x10) {
              goto LABEL_27;
            }
          }
          else
          {
            unint64_t v42 = *(void *)(v41 + 24);
            if (v42 >= 0x11) {
              goto LABEL_27;
            }
          }
          unsigned int v44 = 31 - __clz(v42);
          if (1 << v44 != v42) {
            goto LABEL_27;
          }
          LODWORD(v28) = v44;
          goto LABEL_83;
        }
        if (v23 == 175)
        {
          int v24 = *(uint64_t **)(v11 + 32);
          uint64_t v25 = v24[5];
          int v26 = *(unsigned __int16 *)(v25 + 24);
          if (v26 == 35 || v26 == 11)
          {
            uint64_t v27 = *(void *)(v25 + 80);
            if (*(_DWORD *)(v27 + 32) > 0x40u)
            {
              unint64_t v28 = **(void **)(v27 + 24);
              if (v28 > 4) {
                goto LABEL_27;
              }
            }
            else
            {
              unint64_t v28 = *(void *)(v27 + 24);
              if (v28 >= 5) {
                goto LABEL_27;
              }
            }
LABEL_83:
            *(_DWORD *)(a1 + 36) = v28;
            uint64_t v11 = *v24;
            a4 = *((_DWORD *)v24 + 2);
          }
        }
      }
LABEL_27:
      if (a7 && *(_WORD *)(v11 + 24) == 395)
      {
        *(void *)a1 = v11;
        *(_DWORD *)(a1 + 8) = a4;
        *(_DWORD *)(a1 + 32) = 2;
      }
      else
      {
        *(void *)a1 = v11;
        *(_DWORD *)(a1 + 8) = a4;
        *(_DWORD *)(a1 + 32) = 0;
      }
      return a1;
    }
  }
  if ((v16 - 4) < 3)
  {
    uint64_t v33 = *(void *)(v11 + 80);
    unsigned int v34 = *(_DWORD *)(v33 + 32);
    if (v34 > 0x40)
    {
      unint64_t v35 = *(void *)(v33 + 24);
      unint64_t v37 = *(void *)v35;
      BOOL v36 = *(void *)v35 < 0x100uLL;
      if (*(void *)v35 >= 0x100uLL && a6 != 0) {
        goto LABEL_71;
      }
    }
    else
    {
      unint64_t v35 = *(void *)(v33 + 24);
      BOOL v36 = v35 < 0x100;
      if (v35 >= 0x100 && a6)
      {
        unint64_t v37 = v35;
LABEL_71:
        if ((v37 & 0xFFFFFFFFFFFFF00FLL) != 0
          && (v37 & 0xFFFFFFFFFFFFF807) != 0
          && (v37 & 0xFFFFFFFFFFFFFC03) != 0
          && (v37 & 0xFFFFFFFFFFFFFE01) != 0)
        {
          *(_DWORD *)(a1 + 36) = 0;
          goto LABEL_20;
        }
        if (v34 >= 0x41) {
          unint64_t v35 = *(void *)v35;
        }
        if (v35 >= 0x100)
        {
          if ((v35 & 0xFFFFFFFFFFFFFE01) != 0)
          {
            if ((v35 & 0xFFFFFFFFFFFFFC03) != 0)
            {
              if ((v35 & 0xFFFFFFFFFFFFF807) != 0)
              {
                if ((v35 & 0xFFFFFFFFFFFFF00FLL) != 0) {
                  int v45 = -1;
                }
                else {
                  int v45 = 4;
                }
              }
              else
              {
                int v45 = 3;
              }
            }
            else
            {
              int v45 = 2;
            }
          }
          else
          {
            int v45 = 1;
          }
        }
        else
        {
          int v45 = 0;
        }
        *(_DWORD *)(a1 + 36) = v45;
        goto LABEL_89;
      }
    }
    if (!v36) {
      goto LABEL_20;
    }
    goto LABEL_89;
  }
  if (v16 == 10)
  {
    if ((sub_1CB9868C0(*(void *)(v11 + 80) + 24) & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if (v16 != 9 || (sub_1CB9867B8(*(void *)(v11 + 80) + 24) & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_89:
  if (v69 == 10)
  {
    sub_1CB87DDC4((uint64_t)v71, (uint64_t *)(*(void *)(v11 + 80) + 32));
    sub_1CB867534((uint64_t)&v70, (uint64_t)&v67);
    unsigned int v46 = v68;
    int v47 = v67;
    if (v68 >= 0x41) {
      int v55 = v67;
    }
    else {
      int v55 = (unsigned int *)&v67;
    }
    unsigned int v56 = *v55;
    unsigned int v57 = (v56 >> 23);
    int v51 = (v56 >> 19) & 0xF;
    unsigned int v58 = v57 - 124;
    unsigned int v59 = (v51 | 0x10u) >> (125 - v57);
    if (v57 > 0x7C) {
      unsigned int v59 = (v56 >> 19) & 0xF;
    }
    else {
      unsigned int v58 = 0;
    }
    if (v57 | v51)
    {
      unsigned int v57 = v58;
      int v51 = v59;
    }
    int v54 = (16 * v57) | (v56 >> 31 << 7);
  }
  else
  {
    if (v69 != 9)
    {
      uint64_t v64 = *(void *)(v11 + 80);
      int v65 = (unint64_t *)(v64 + 24);
      if (*(_DWORD *)(v64 + 32) >= 0x41u) {
        int v65 = (unint64_t *)*v65;
      }
      unint64_t v60 = *v65;
      goto LABEL_113;
    }
    sub_1CB87DDC4((uint64_t)v71, (uint64_t *)(*(void *)(v11 + 80) + 32));
    sub_1CB867534((uint64_t)&v70, (uint64_t)&v67);
    unsigned int v46 = v68;
    int v47 = v67;
    if (v68 >= 0x41) {
      int v48 = v67;
    }
    else {
      int v48 = (unsigned int *)&v67;
    }
    unsigned int v49 = *v48;
    unsigned int v50 = (v49 >> 10) & 0x1F;
    int v51 = (v49 >> 6) & 0xF;
    unsigned int v52 = v50 - 12;
    unsigned int v53 = (v51 | 0x10u) >> (13 - ((v49 >> 10) & 0x1F));
    if (v50 > 0xC) {
      unsigned int v53 = (v49 >> 6) & 0xF;
    }
    else {
      unsigned int v52 = 0;
    }
    if (v50 | v51)
    {
      unsigned int v50 = v52;
      int v51 = v53;
    }
    int v54 = (v49 >> 8) & 0x80 | (16 * v50);
  }
  unint64_t v60 = v54 | v51;
  if (v46 >= 0x41 && v47) {
    MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
  }
  sub_1CB87DEE4(v71);
LABEL_113:
  uint64_t v61 = v60 >> *(_DWORD *)(a1 + 36);
  int v62 = *(unsigned __int8 **)(v11 + 64);
  uint64_t v70 = v62;
  if (v62) {
    llvm::MetadataTracking::track((uint64_t)&v70, v62, 2);
  }
  LODWORD(v71[0]) = *(_DWORD *)(v11 + 60);
  *(void *)a1 = sub_1CD7EBF14(a2, v61, (const llvm::APInt *)&v70, (llvm *)4, 0, 1, 0);
  *(_DWORD *)(a1 + 8) = v63;
  if (v70) {
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  }
  return a1;
}

uint64_t *sub_1CD3FCE48(uint64_t *result, unsigned int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  if (!a6) {
    return result;
  }
  int v9 = *((unsigned __int16 *)result + 12);
  if (v9 == 395)
  {
    uint64_t v10 = *(void *)result[4];
    int v11 = *(unsigned __int16 *)(v10 + 24);
    if (v11 != 35 && v11 != 11) {
      return result;
    }
    uint64_t v13 = (llvm **)(result[5] + 16 * a2);
    uint64_t v14 = *v13;
    uint64_t v15 = (uint64_t)v13[1];
    uint64_t v16 = *(void *)(v10 + 80);
    BOOL v17 = (void *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u) {
      BOOL v17 = (void *)*v17;
    }
    uint64_t v18 = *v17 >> 1;
    *(void *)&long long v46 = v14;
    *((void *)&v46 + 1) = v15;
    goto LABEL_11;
  }
  if (v9 != 201 || a5 == 0)
  {
    if (v9 == 212 && a4 != 0)
    {
      unsigned int v30 = (unsigned int *)result[4];
      uint64_t v31 = *(void *)v30;
      if (*(_WORD *)(*(void *)v30 + 24) == 395)
      {
        uint64_t v32 = **(void **)(v31 + 32);
        int v33 = *(unsigned __int16 *)(v32 + 24);
        if (v33 == 35 || v33 == 11)
        {
          unint64_t v35 = (llvm **)(result[5] + 16 * a2);
          uint64_t v14 = *v35;
          uint64_t v15 = (uint64_t)v35[1];
          uint64_t v36 = *(void *)(v32 + 80);
          unint64_t v37 = (void *)(v36 + 24);
          if (*(_DWORD *)(v36 + 32) >= 0x41u) {
            unint64_t v37 = (void *)*v37;
          }
          uint64_t v18 = *v37 >> 1;
          long long v46 = *(_OWORD *)(*(void *)(v31 + 40) + 16 * v30[2]);
LABEL_11:
          int v19 = sub_1CB896FB8((unsigned __int8 *)&v46);
          if (v20 == 1)
          {
            int v45 = v19;
            int v19 = v45;
          }
          HIDWORD(v21) = v19;
          LODWORD(v21) = v19 - 2;
          int v22 = dword_1CDB0CE78[(int)(v21 >> 1)];
          uint64_t v23 = a7;
          int v24 = v14;
          uint64_t v25 = v15;
          uint64_t v26 = v18;
LABEL_14:
          __n128 result = sub_1CD7ED9FC(v23, 64, v24, v25, v26, v22);
          *(void *)a3 = result;
          *(_DWORD *)(a3 + 8) = v27;
        }
      }
    }
  }
  else
  {
    uint64_t v38 = result[5] + 16 * a2;
    int v24 = *(llvm **)v38;
    if (*(void *)v38 == 4)
    {
      uint64_t v39 = *(void *)result[4];
      if (*(_WORD *)(v39 + 24) == 395)
      {
        uint64_t v40 = **(void **)(v39 + 32);
        int v41 = *(unsigned __int16 *)(v40 + 24);
        if (v41 == 35 || v41 == 11)
        {
          uint64_t v25 = *(void *)(v38 + 8);
          uint64_t v43 = *(void *)(v40 + 80);
          unsigned int v44 = (void *)(v43 + 24);
          if (*(_DWORD *)(v43 + 32) >= 0x41u) {
            unsigned int v44 = (void *)*v44;
          }
          uint64_t v26 = *v44 >> 1;
          uint64_t v23 = a7;
          int v22 = 1;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

void sub_1CD3FD040(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  uint64_t v11 = *a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

uint64_t *sub_1CD3FD0DC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int *a6, uint64_t *a7)
{
  uint64_t v19[4] = *MEMORY[0x1E4F143B8];
  BOOL v17 = v19;
  uint64_t v18 = 0x200000000;
  uint64_t v15 = *a6;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  uint64_t v15 = *a7;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t *sub_1CD3FD1E4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x200000000;
  uint64_t v11 = a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v13, (uint64_t)&v11);
  sub_1CD3D5F48(a1, (uint64_t)&v13, a5);
  int v9 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v13, v14);
  if (v13 != v15) {
    free(v13);
  }
  return v9;
}

uint64_t *sub_1CD3FD2D0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, int *a11, unsigned int *a12)
{
  v25[14] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = v25;
  uint64_t v24 = 0x700000000;
  uint64_t v21 = a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD400CAC(a1, (uint64_t)&v23, a7, a8, a9, a10, a11, a12);
  BOOL v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CD3FD3EC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, int *a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v18 = a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD400ADC(a1, (uint64_t)&v20, a7, a8, a9);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FD500(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD400F7C(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  char v12 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FD5D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, _OWORD *a10)
{
  v17[14] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0x700000000;
  uint64_t v15 = v17;
  sub_1CD401020(a1, (uint64_t)&v15, a4, a5, a6, a7, a8, a9, a10);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v15, v16);
  if (v15 != v17) {
    free(v15);
  }
  return v13;
}

uint64_t *sub_1CD3FD6B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD4010E0(a1, (uint64_t)&v21, a7, a8, a9, a10);
  BOOL v17 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD3FD7C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _OWORD *a8, unsigned int *a9, _OWORD *a10, _OWORD *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD401170(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  uint64_t v16 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD3FD8B0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9, int *a10, int *a11)
{
  v24[14] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x700000000;
  uint64_t v20 = a5;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD401214(a1, (uint64_t)&v22, a6, a7, a8, a9, a10, a11);
  BOOL v17 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD3FD9D4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, int *a7, _OWORD *a8, unsigned int *a9, int *a10)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  sub_1CD40134C(a1, (uint64_t)&v14, a3, a4, a5, a6, a7, a8, a9, a10);
  char v12 = sub_1CD801450(a1, 3576, a2, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FDA94(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  uint64_t v17 = a5;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD400ADC(a1, (uint64_t)&v19, a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD3FDB9C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD4014B4(a1, (uint64_t)&v14, a5, a6, a7, a8);
  char v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FDC74(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, _OWORD *a8, _OWORD *a9, uint64_t a10, int *a11)
{
  v24[12] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x600000000;
  uint64_t v20 = a6;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5EA0(a1, (uint64_t)&v22, a7);
  sub_1CD401550(a1, (uint64_t)&v22, a8, a9, a10, a11);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD3FDDA0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, uint64_t *a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v18 = a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD4015DC(a1, (uint64_t)&v20, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FDEB4(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, _OWORD *a8)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  char v19 = v21;
  uint64_t v20 = 0x300000000;
  uint64_t v17 = a6;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD3D5F48(a1, (uint64_t)&v19, a7);
  sub_1CD3D5F48(a1, (uint64_t)&v19, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD3FDFC4(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  sub_1CD401658(a1, (uint64_t)&v15, a6, a7, a8);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v15, v16);
  if (v15 != v17) {
    free(v15);
  }
  return v13;
}

uint64_t *sub_1CD3FE09C(uint64_t a1, int a2, uint64_t a3, int a4, _OWORD *a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x200000000;
  uint64_t v11 = a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v13, (uint64_t)&v11);
  sub_1CD3D5F48(a1, (uint64_t)&v13, a5);
  int v9 = sub_1CD801450(a1, a2, a3, (llvm *)0xAE, 0, (uint64_t *)v13, v14);
  if (v13 != v15) {
    free(v13);
  }
  return v9;
}

uint64_t *sub_1CD3FE188(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8)
{
  v21[10] = *MEMORY[0x1E4F143B8];
  char v19 = v21;
  uint64_t v20 = 0x500000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD4016E0(a1, (uint64_t)&v19, a5, a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD3FE294(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  char v12 = v14;
  uint64_t v13 = 0x400000000;
  sub_1CD4010E0(a1, (uint64_t)&v12, a4, a5, a6, a7);
  uint64_t v10 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v12, v13);
  if (v12 != v14) {
    free(v12);
  }
  return v10;
}

unint64_t sub_1CD3FE360(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 401:
      BOOL v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      unint64_t v3 = 0x100000000;
      return v3 | v2;
    case 402:
      BOOL v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      unint64_t v3 = 0x100000000;
      return v3 | v2;
    case 403:
      BOOL v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      unint64_t v3 = 0x100000000;
      return v3 | v2;
    case 404:
      BOOL v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      unint64_t v3 = 0x100000000;
      return v3 | v2;
    case 405:
      unint64_t v3 = 0x200000000;
      goto LABEL_12;
    case 406:
      unint64_t v3 = 0x200000000;
      BOOL v2 = 1;
      return v3 | v2;
    case 407:
      unint64_t v3 = 0x300000000;
      goto LABEL_12;
    case 408:
      unint64_t v3 = 0x300000000;
      goto LABEL_14;
    case 409:
      unint64_t v3 = 0x400000000;
LABEL_12:
      BOOL v2 = 1;
      break;
    case 410:
      unint64_t v3 = 0x400000000;
LABEL_14:
      BOOL v2 = 1;
      break;
    case 411:
      BOOL v2 = 0;
      unint64_t v3 = 0x200000000;
      break;
    case 412:
      BOOL v2 = 0;
      unint64_t v3 = 0x200000000;
      break;
    case 413:
      BOOL v2 = 0;
      unint64_t v3 = 0x300000000;
      break;
    case 414:
      BOOL v2 = 0;
      unint64_t v3 = 0x300000000;
      break;
    case 415:
      BOOL v2 = 0;
      unint64_t v3 = 0x400000000;
      break;
    case 416:
      BOOL v2 = 0;
      unint64_t v3 = 0x400000000;
      break;
    default:
      BOOL v2 = 0;
      unint64_t v3 = 0xFFFFFFFF00000000;
      break;
  }
  return v3 | v2;
}

uint64_t *sub_1CD3FE4F8(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, _OWORD *a8, int *a9)
{
  unsigned char v18[8] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  sub_1CD401C88(a1, (uint64_t)&v16, a6, a7, a8, a9);
  uint64_t v14 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD3FE5D8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, _OWORD *a7, int *a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD401C88(a1, (uint64_t)&v14, a5, a6, a7, a8);
  char v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FE6B0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, _OWORD *a8)
{
  v21[10] = *MEMORY[0x1E4F143B8];
  char v19 = v21;
  uint64_t v20 = 0x500000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD400EF0(a1, (uint64_t)&v19, a5, a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)0xA, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t sub_1CD3FE7BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  v18[0] = a3;
  v18[1] = a4;
  v17[0] = a5;
  v17[1] = a6;
  v16[0] = a7;
  v16[1] = a8;
  v15[0] = a9;
  v15[1] = a10;
  int v14 = a2;
  char v13 = a11;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, int *, void *, void *, void *, void *, char *, uint64_t))(*(void *)a1 + 48))(a1, &v14, v18, v17, v16, v15, &v13, a12);
  }
  sub_1CB920400();
  return sub_1CD3FE840();
}

uint64_t sub_1CD3FE840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x200000000;
  uint64_t v6 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a3);
  int v7 = *(_DWORD *)(a1 + 40);
  int v8 = *(_DWORD *)(a2 + 40);
  sub_1CD402444((uint64_t)&v15, *(_DWORD *)(a1 + 32), v7);
  sub_1CD402444((uint64_t)&v15, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40));
  if (v8 == 32 || v7 == 32) {
    int v10 = 48;
  }
  else {
    int v10 = 47;
  }
  if (*(unsigned char *)(a1 + 44)) {
    int v11 = v10;
  }
  else {
    int v11 = 49;
  }
  char v12 = v15;
  uint64_t v13 = sub_1CB951118(v11, v15, v16, v6);
  if (v12 != (_DWORD *)v17) {
    free(v12);
  }
  return v13;
}

uint64_t *sub_1CD3FE968(uint64_t a1, int a2, uint64_t a3, _OWORD *a4, _OWORD *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  char v18 = v20;
  uint64_t v19 = 0x800000000;
  sub_1CD3D5F48(a1, (uint64_t)&v18, a4);
  sub_1CD3D5F48(a1, (uint64_t)&v18, a5);
  sub_1CD4024C8(a1, (uint64_t)&v18, *a6, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD3FEA80(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, unsigned int *a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v18 = a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD402864(a1, (uint64_t)&v20, *a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FEB94(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, unsigned int *a11, int *a12)
{
  v25[14] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = v25;
  uint64_t v24 = 0x700000000;
  uint64_t v21 = a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD4028EC(a1, (uint64_t)&v23, a7, a8, a9, a10, a11, a12);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CD3FECB0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, unsigned int *a7, unsigned int *a8, int *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  int v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD402BC0(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  char v12 = sub_1CD801450(a1, a2, a3, (llvm *)4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FED88(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, int *a7)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v15 = a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1CD402C74(a1, (uint64_t)&v17, a5, a6, a7);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t *sub_1CD3FEE8C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, unsigned int *a9, unsigned int *a10, int *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD402BC0(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD3FEF78(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, unsigned int *a7, _OWORD *a8, unsigned int *a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v18 = a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD401658(a1, (uint64_t)&v20, *a7, a8, a9);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FF08C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, unsigned int *a9, int *a10, unsigned int *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD402CFC(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD3FF178(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD3D5F48(a1, (uint64_t)&v21, a7);
  sub_1CD401658(a1, (uint64_t)&v21, *a8, a9, a10);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD3FF29C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, _OWORD *a8, unsigned int *a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v18 = a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD402DB0(a1, (uint64_t)&v20, *a7, a8, a9);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FF3B0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, _OWORD *a7, unsigned int *a8, int *a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a6);
  sub_1CD400ADC(a1, (uint64_t)&v20, a7, a8, a9);
  char v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FF4D4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, int *a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a6);
  sub_1CD402E34(a1, (uint64_t)&v20, *a7, a8, a9);
  char v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD3FF5F8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9, int *a10)
{
  v18[12] = *MEMORY[0x1E4F143B8];
  char v16 = v18;
  uint64_t v17 = 0x600000000;
  sub_1CD402EBC(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  int v14 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD3FF6E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10)
{
  v17[14] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0x700000000;
  uint64_t v15 = v17;
  sub_1CD405190(a1, (uint64_t)&v15, a4, a5, a6, a7, a8, a9, a10);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v15, v16);
  if (v15 != v17) {
    free(v15);
  }
  return v13;
}

uint64_t *sub_1CD3FF7B8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, _OWORD *a7)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  sub_1CD405250(a1, (uint64_t)&v13, a5, a6, a7);
  int v11 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v13, v14);
  if (v13 != v15) {
    free(v13);
  }
  return v11;
}

uint64_t *sub_1CD3FF88C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5)
{
  void v13[2] = *MEMORY[0x1E4F143B8];
  int v11 = v13;
  uint64_t v12 = 0x100000000;
  sub_1CD3D5F48(a1, (uint64_t)&v11, a5);
  int v9 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v11, v12);
  if (v11 != v13) {
    free(v11);
  }
  return v9;
}

uint64_t *sub_1CD3FF958(uint64_t a1, int a2, uint64_t a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14)
{
  v25[22] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = v25;
  uint64_t v24 = 0xB00000000;
  sub_1CD3D5F48(a1, (uint64_t)&v23, a4);
  sub_1CD4052D8(a1, (uint64_t)&v23, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  char v19 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v19;
}

uint64_t *sub_1CD3FFA7C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, _OWORD *a9)
{
  unsigned char v18[8] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  sub_1CD405438(a1, (uint64_t)&v16, a6, a7, a8, a9);
  uint64_t v14 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD3FFB5C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, unsigned int *a7)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v15 = a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1CD402864(a1, (uint64_t)&v17, *a5, a6, a7);
  uint64_t v13 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t *sub_1CD3FFC60(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, unsigned int *a8, int *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD4057DC(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FFD38(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, _OWORD *a7, unsigned int *a8, int *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD400A28(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD3FFE10(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, int *a10)
{
  v23[14] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v22 = 0x700000000;
  uint64_t v19 = a4;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD405884(a1, (uint64_t)&v21, a5, a6, a7, a8, a9, a10);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD3FFF30(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, int *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD405928(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD400008(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, int *a11)
{
  void v24[16] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x800000000;
  uint64_t v20 = a4;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a5);
  sub_1CD402EBC(a1, (uint64_t)&v22, *a6, a7, a8, a9, a10, a11);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD40013C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9, int *a10)
{
  v23[14] = *MEMORY[0x1E4F143B8];
  char v21 = v23;
  uint64_t v22 = 0x700000000;
  uint64_t v19 = a4;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD4059DC(a1, (uint64_t)&v21, *a5, a6, a7, a8, a9, a10);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD40025C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8)
{
  v21[10] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x500000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD3D5F48(a1, (uint64_t)&v19, a5);
  sub_1CD401658(a1, (uint64_t)&v19, *a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD400374(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, _OWORD *a6, unsigned int *a7)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  sub_1CD405A90(a1, (uint64_t)&v12, a4, a5, a6, a7);
  int v10 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v12, v13);
  if (v12 != v14) {
    free(v12);
  }
  return v10;
}

void sub_1CD400444(void *a1)
{
  sub_1CD400BFC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD40047C(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, int a7)
{
  uint64_t v7 = *(unsigned int *)(a1 + 1648);
  if (v7)
  {
    uint64_t v13 = *(void *)(a1 + 1640) + 32 * v7;
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    uint64_t v15 = 32 * v7;
    uint64_t v16 = *(void *)(a1 + 1640);
LABEL_3:
    uint64_t v17 = v15;
    uint64_t v18 = *(void *)(a1 + 1640);
    while (1)
    {
      if (v14 == *(_DWORD *)(v18 + 16) + *(_DWORD *)(v16 + 16))
      {
        int v19 = *(_DWORD *)(v18 + 20);
        if (*(_DWORD *)(v16 + 20) != v19) {
          break;
        }
      }
      v18 += 32;
      v17 -= 32;
      if (!v17)
      {
        v16 += 32;
        if (v16 != v13) {
          goto LABEL_3;
        }
        return 0;
      }
    }
    if (v19) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = v16;
    }
    if (v19) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = v18;
    }
    if (!v14)
    {
LABEL_35:
      if (a6)
      {
        if (a7) {
          int v27 = *a6 + 4;
        }
        else {
          int v27 = *a6 + 1;
        }
        *a6 = v27;
      }
      if (a2 == 5) {
        int v28 = 242;
      }
      else {
        int v28 = 381;
      }
      int v29 = sub_1CB952700(0, v28, *(unsigned char **)(a1 + 2184));
      uint64_t v30 = *(void *)(a1 + 2168);
      uint64_t v31 = *(unsigned __int8 **)a4;
      unsigned int v34 = v31;
      if (v31) {
        llvm::MetadataTracking::track((uint64_t)&v34, v31, 2);
      }
      int v35 = *(_DWORD *)(a4 + 8);
      uint64_t v33 = 0;
      int v32 = 32;
      *(void *)a5 = sub_1CD3FEB94(v30, v29, (uint64_t)&v34, a2, a3, 0, (_OWORD *)v21, (unsigned int *)&v33 + 1, (_OWORD *)v20, (unsigned int *)&v33, (unsigned int *)(v21 + 16), &v32);
      *(_DWORD *)(a5 + 8) = 0;
      if (v34) {
        llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
      }
      return 1;
    }
    uint64_t v22 = 0;
    char v23 = 0;
LABEL_17:
    uint64_t v24 = *(void *)(a1 + 8) + 24 * v22;
    uint64_t v25 = v22;
    do
    {
      if (*(_DWORD *)(v24 + 20) != 1
        || (*(void *)v21 != *(void *)v24
         || *(_DWORD *)(v21 + 8) != *(_DWORD *)(v24 + 8)
         || *(_DWORD *)(*(void *)(a1 + 944) + 4 * v25) != *(_DWORD *)(v21 + 20)
         || *(_DWORD *)(*(void *)(a1 + 800) + 4 * v25) != *(_DWORD *)(v21 + 16))
        && (*(void *)v20 != *(void *)v24
         || *(_DWORD *)(v20 + 8) != *(_DWORD *)(v24 + 8)
         || *(_DWORD *)(*(void *)(a1 + 944) + 4 * v25) != *(_DWORD *)(v20 + 20)
         || *(_DWORD *)(*(void *)(a1 + 800) + 4 * v25) != *(_DWORD *)(v20 + 16)))
      {
        uint64_t v22 = v25 + 1;
        char v23 = 1;
        if (v14 - 1 != v25) {
          goto LABEL_17;
        }
        return 0;
      }
      v24 += 24;
      ++v25;
    }
    while (v14 != v25);
    if ((v23 & 1) == 0) {
      goto LABEL_35;
    }
  }
  return 0;
}

uint64_t *sub_1CD4006EC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, _OWORD *a9, unsigned int *a10, int *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD400A28(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD4007D8(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, _OWORD *a10, unsigned int *a11, int *a12)
{
  v25[14] = *MEMORY[0x1E4F143B8];
  char v23 = v25;
  uint64_t v24 = 0x700000000;
  uint64_t v21 = a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD400B58(a1, (uint64_t)&v23, a7, a8, a9, a10, a11, a12);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CD4008F4(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, const llvm::APInt *a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v16 = sub_1CD7EBF14(*(void *)(a1 + 2168), a8, a5, a3, a4, 0, 0);
  unint64_t v18 = v17;
  if (a3 == 5 && (a8 - 256) >> 8 <= 0xFE)
  {
    uint64_t v16 = sub_1CB9C3BE8(*(void *)(a1 + 2176), (uint64_t)v16);
    unint64_t v18 = v18 & 0xFFFFFFFF00000000 | v19;
  }
  sub_1CD3D60FC(*(void *)(a1 + 2168), a2, 0, (uint64_t)v16);
  __int16 v21 = 0;
  uint64_t v22 = *(void *)(a1 + 2168);
  uint64_t v23 = *(void *)(v22 + 832);
  if (v23) {
    __int16 v21 = *(_WORD *)(v23 + 8);
  }
  uint64_t v24 = sub_1CCFDED5C(v22, 171, a5, a3, a4, a6, a7, v20, (uint64_t)v16, v18, v21);
  sub_1CD3D60FC(*(void *)(a1 + 2168), a2, 0, (uint64_t)v24);
  return v24;
}

uint64_t *sub_1CD400A28(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD400ADC(a1, a2, a6, a7, a8);
}

uint64_t *sub_1CD400ADC(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, int *a5)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD400B58(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD400ADC(a1, a2, a6, a7, a8);
}

void *sub_1CD400BFC(void *a1)
{
  *a1 = &unk_1F25F0CC0;
  BOOL v2 = (void *)a1[205];
  if (v2 != a1 + 207) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[202], 8);
  unint64_t v3 = (void *)a1[136];
  if (v3 != a1 + 138) {
    free(v3);
  }
  unint64_t v4 = (void *)a1[118];
  if (v4 != a1 + 120) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[100];
  if (v5 != a1 + 102) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6 != a1 + 3) {
    free(v6);
  }
  return a1;
}

uint64_t *sub_1CD400CAC(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, int *a7, unsigned int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD400D50(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD400D50(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD400DE4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, _OWORD *a8)
{
  v21[10] = *MEMORY[0x1E4F143B8];
  unsigned int v19 = v21;
  uint64_t v20 = 0x500000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD400EF0(a1, (uint64_t)&v19, a5, a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

void sub_1CD400EF0(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, _OWORD *a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v11 = *a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

void sub_1CD400F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD3D6D20(a1, a2, a5, a6, a7, a8);
}

void sub_1CD401020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, _OWORD *a9)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD400EF0(a1, a2, a6, a7, a8, a9);
}

void sub_1CD4010E0(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v11 = *a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

void sub_1CD401170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD400EF0(a1, a2, a5, a6, a7, a8);
}

uint64_t *sub_1CD401214(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, int *a7, int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD4012B8(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD4012B8(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD40134C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, int *a7, _OWORD *a8, unsigned int *a9, int *a10)
{
  uint64_t v18 = a3;
  char v19 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v18);
  uint64_t v18 = *a4;
  char v19 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v18);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD401414(a1, a2, *a6, a7, a8, a9, a10);
}

uint64_t *sub_1CD401414(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, unsigned int *a6, int *a7)
{
  uint64_t v14 = a3;
  char v15 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v14);
  uint64_t v14 = *a4;
  char v15 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v14);
  return sub_1CD400ADC(a1, a2, a5, a6, a7);
}

void sub_1CD4014B4(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, unsigned int *a5, _OWORD *a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v11 = *a5;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a6);
}

uint64_t *sub_1CD401550(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, int *a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5EA0(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

uint64_t *sub_1CD4015DC(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, uint64_t *a5)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD401658(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, unsigned int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

void sub_1CD4016E0(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, unsigned int *a5, _OWORD *a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v11 = *a5;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a6);
}

uint64_t *sub_1CD40176C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, _OWORD *a7, _OWORD *a8, int *a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD401880(a1, (uint64_t)&v20, *a6, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD401880(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5, int *a6)
{
  uint64_t v12 = a3;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

uint64_t *sub_1CD401918(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int *a6, _OWORD *a7, unsigned int *a8, int *a9, int *a10)
{
  v18[12] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x600000000;
  sub_1CD4019FC(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  uint64_t v14 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD4019FC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, unsigned int *a6, int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD4012B8(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD401AB0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v19[10] = *MEMORY[0x1E4F143B8];
  char v17 = v19;
  uint64_t v18 = 0x500000000;
  uint64_t v15 = a5;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1CD401BBC(a1, (uint64_t)&v17, a6);
  sub_1CD401BBC(a1, (uint64_t)&v17, a7);
  char v13 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

void sub_1CD401BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a2 + 16 * v3) = *(_OWORD *)a3;
  unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  if (v6 | v5)
  {
    if (v4 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = (void *)(*(void *)a2 + 16 * v4);
    void *v7 = v6;
    v7[1] = v5;
    ++*(_DWORD *)(a2 + 8);
  }
}

uint64_t *sub_1CD401C88(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5, int *a6)
{
  uint64_t v12 = a3;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

uint64_t sub_1CD401D24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  unsigned int v12 = a2;
  int v28 = a1;
  uint64_t v29 = a2;
  uint64_t v14 = a1[5];
  uint64_t v15 = *(unsigned __int8 **)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  if ((_BYTE)v15)
  {
    BOOL v17 = ((_BYTE)v15 - 75) < 0x2Du || ((_BYTE)v15 + 104) < 0x13u;
    BOOL v18 = ((_BYTE)v15 - 8) < 7u || v17;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v26);
  }
  else
  {
    if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12) {
      unsigned int v23 = *(unsigned __int8 *)(**(void **)(v16 + 16) + 8);
    }
    else {
      unsigned int v23 = *(_DWORD *)(v16 + 8);
    }
    BOOL v18 = v23 < 7;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v26);
  }
  if (v20 == 1)
  {
    unsigned int v25 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v25;
  }
  uint64_t v21 = 0;
  if ((a5 & 1) == 0 && v18)
  {
    if (ExtendedSizeInBits == 32 || ExtendedSizeInBits == 16)
    {
      sub_1CD3FCE48(a1, v12, (uint64_t)&v28, 0, 0, a6, a7);
      *(void *)a3 = v28;
      *(_DWORD *)(a3 + 8) = v29;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)a4 = sub_1CD7EBF14(a7, 0, (const llvm::APInt *)&v26, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a4 + 8) = v24;
      if (v26) {
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v21;
}

uint64_t sub_1CD401ECC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  char v16 = a1;
  if (a1) {
    int v11 = 5;
  }
  else {
    int v11 = 2;
  }
  BOOL v17 = v19;
  uint64_t v18 = 0x500000000;
  sub_1CB9CDA9C((uint64_t)&v17, 1uLL, v11);
  unsigned int v12 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8), *(void *)a6);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  char v13 = v17;
  uint64_t v14 = sub_1CB951118(30, v17, v18, v12);
  if (v13 != (_DWORD *)v19) {
    free(v13);
  }
  return v14;
}

uint64_t *sub_1CD402034(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v18[20] = *MEMORY[0x1E4F143B8];
  char v16 = v18;
  uint64_t v17 = 0xA00000000;
  sub_1CD4021B4(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  uint64_t v14 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t sub_1CD402118(uint64_t result, unsigned char *a2, int a3, int a4, char a5)
{
  if (a3 < 4)
  {
    if (a5)
    {
      BOOL v8 = *a2 == 0;
      int v9 = 5;
      int v10 = 2;
    }
    else
    {
      BOOL v8 = a4 == 32;
      int v9 = 2;
      int v10 = 5;
    }
    if (v8) {
      int v7 = v10;
    }
    else {
      int v7 = v9;
    }
    unsigned int v5 = *(_DWORD *)(result + 8);
    unsigned int v6 = *(_DWORD *)(result + 12);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(result + 8);
    unsigned int v6 = *(_DWORD *)(result + 12);
    int v7 = 1;
  }
  if (v5 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v5) = v7;
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1CD4021B4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD40225C(a1, a2, a5, a6, a7, a8);
}

void sub_1CD40225C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1CD401BBC(a1, a2, a3);
  sub_1CD401BBC(a1, a2, a4);
  sub_1CD401BBC(a1, a2, a5);

  sub_1CD401BBC(a1, a2, a6);
}

uint64_t sub_1CD4022DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  char v16 = a1;
  if (a1) {
    int v11 = 5;
  }
  else {
    int v11 = 2;
  }
  uint64_t v17 = v19;
  uint64_t v18 = 0x500000000;
  sub_1CB9CDA9C((uint64_t)&v17, 1uLL, v11);
  unsigned int v12 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8), *(void *)a6);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  char v13 = v17;
  uint64_t v14 = sub_1CB951118(34, v17, v18, v12);
  if (v13 != (_DWORD *)v19) {
    free(v13);
  }
  return v14;
}

uint64_t sub_1CD402444(uint64_t result, int a2, int a3)
{
  if (a2 < 4)
  {
    if (a3 == 32) {
      int v5 = 5;
    }
    else {
      int v5 = 2;
    }
    unsigned int v3 = *(_DWORD *)(result + 8);
    unsigned int v4 = *(_DWORD *)(result + 12);
  }
  else
  {
    unsigned int v3 = *(_DWORD *)(result + 8);
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 1;
  }
  if (v3 >= v4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v3) = v5;
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1CD4024C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD401BBC(a1, a2, a4);
  sub_1CD401BBC(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

uint64_t *sub_1CD402558(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, _OWORD *a6, unsigned int *a7)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v15 = a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1CD401658(a1, (uint64_t)&v17, *a5, a6, a7);
  char v13 = sub_1CD801450(a1, a2, a3, (llvm *)0x1B, 0, (uint64_t *)v17, v18);
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t *sub_1CD40265C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, int *a11, int *a12)
{
  v25[14] = *MEMORY[0x1E4F143B8];
  unsigned int v23 = v25;
  uint64_t v24 = 0x700000000;
  uint64_t v21 = a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD401214(a1, (uint64_t)&v23, a7, a8, a9, a10, a11, a12);
  uint64_t v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CD402778(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, _OWORD *a8, unsigned int *a9, int *a10, int *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD4019FC(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  char v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD402864(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, unsigned int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD4028EC(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD402990(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD402990(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t sub_1CD402A24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  unsigned int v12 = a2;
  int v28 = a1;
  uint64_t v29 = a2;
  uint64_t v14 = a1[5];
  uint64_t v15 = *(unsigned __int8 **)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  if ((_BYTE)v15)
  {
    BOOL v17 = v15 - 120 < 0x20;
    if (v15 - 15 < 0x3C) {
      BOOL v17 = 1;
    }
    BOOL v18 = v15 - 2 < 6 || v17;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v26);
  }
  else
  {
    if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12) {
      int v23 = *(unsigned __int8 *)(**(void **)(v16 + 16) + 8);
    }
    else {
      int v23 = *(_DWORD *)(v16 + 8);
    }
    BOOL v18 = v23 == 13;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v26);
  }
  if (v20 == 1)
  {
    unsigned int v25 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v25;
  }
  uint64_t v21 = 0;
  if ((a5 & 1) == 0 && v18)
  {
    if (ExtendedSizeInBits == 32 || ExtendedSizeInBits == 16)
    {
      sub_1CD3FCE48(a1, v12, (uint64_t)&v28, 0, 1, a6, a7);
      *(void *)a3 = v28;
      *(_DWORD *)(a3 + 8) = v29;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)a4 = sub_1CD7EBF14(a7, 0, (const llvm::APInt *)&v26, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a4 + 8) = v24;
      if (v26) {
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v21;
}

uint64_t *sub_1CD402BC0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD402990(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD402C74(uint64_t a1, uint64_t a2, int *a3, _OWORD *a4, int *a5)
{
  uint64_t v10 = *a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD402CFC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, unsigned int *a6, int *a7, unsigned int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD400D50(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD402DB0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unsigned int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD402E34(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

uint64_t *sub_1CD402EBC(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, unsigned int *a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v16 = *a5;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  return sub_1CD400ADC(a1, a2, a6, a7, a8);
}

uint64_t *sub_1CD402F70(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a6);
  sub_1CD401658(a1, (uint64_t)&v20, *a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD403094(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9, uint64_t a10)
{
  v23[12] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v22 = 0x600000000;
  uint64_t v19 = a5;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD3D5F48(a1, (uint64_t)&v21, a6);
  sub_1CD40359C(a1, (uint64_t)&v21, *a7, a8, a9, a10);
  char v17 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD4031BC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6, _OWORD *a7, unsigned int *a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD403638(a1, (uint64_t)&v14, a5, a6, a7, a8);
  unsigned int v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD403294(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6, _OWORD *a7, unsigned int *a8, uint64_t a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD4036D4(a1, (uint64_t)&v20, a6, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD4033AC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, _OWORD *a6, unsigned int *a7, uint64_t a8)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD40359C(a1, (uint64_t)&v14, a5, a6, a7, a8);
  unsigned int v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD403484(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, _OWORD *a6, unsigned int *a7, uint64_t a8, uint64_t a9)
{
  v22[10] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x500000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD403760(a1, (uint64_t)&v20, a6, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD40359C(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12 = a3;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v12 = *a5;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  return sub_1CD3D5EA0(a1, a2, a6);
}

uint64_t *sub_1CD403638(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _OWORD *a5, unsigned int *a6)
{
  uint64_t v12 = a3;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5EA0(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

uint64_t *sub_1CD4036D4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unsigned int *a5, uint64_t a6)
{
  sub_1CD3D5EA0(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v12 = *a5;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  return sub_1CD3D5EA0(a1, a2, a6);
}

uint64_t *sub_1CD403760(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v12 = *a4;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5EA0(a1, a2, a5);
  return sub_1CD3D5EA0(a1, a2, a6);
}

uint64_t *sub_1CD4037EC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, _OWORD *a11, unsigned int *a12)
{
  v25[14] = *MEMORY[0x1E4F143B8];
  int v23 = v25;
  uint64_t v24 = 0x700000000;
  uint64_t v21 = a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD403E7C(a1, (uint64_t)&v23, a7, a8, a9, a10, a11, a12);
  char v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CD403908(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, uint64_t a11)
{
  v24[12] = *MEMORY[0x1E4F143B8];
  char v22 = v24;
  uint64_t v23 = 0x600000000;
  uint64_t v20 = a6;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a7);
  sub_1CD40359C(a1, (uint64_t)&v22, *a8, a9, a10, a11);
  char v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD403A34(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, uint64_t a9, _OWORD *a10, unsigned int *a11)
{
  v24[12] = *MEMORY[0x1E4F143B8];
  char v22 = v24;
  uint64_t v23 = 0x600000000;
  uint64_t v20 = a6;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a7);
  sub_1CD403638(a1, (uint64_t)&v22, *a8, a9, a10, a11);
  char v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD403B60(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, _OWORD *a7, unsigned int *a8, uint64_t a9, uint64_t a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  char v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD403760(a1, (uint64_t)&v21, a7, a8, a9, a10);
  char v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD403C78(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, _OWORD *a8, unsigned int *a9, _OWORD *a10, unsigned int *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD403F20(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD403D64(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, _OWORD *a8, unsigned int *a9, uint64_t a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  char v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD4036D4(a1, (uint64_t)&v21, a7, a8, a9, a10);
  char v17 = sub_1CD801450(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

uint64_t *sub_1CD403E7C(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD401658(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD403F20(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5EA0(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD401658(a1, a2, *a6, a7, a8);
}

void sub_1CD403FC8()
{
}

void sub_1CD403FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int16 *)(a2 + 56);
  if (v4 != 1)
  {
    unsigned int v5 = *(_DWORD *)(a4 + 8);
    for (unsigned int i = 1; i != v4; i += 2)
    {
      if (v5 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a4 + 16 * v5) = *(_OWORD *)(*(void *)(a2 + 32) + 40 * i);
      unsigned int v5 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v5;
    }
  }
}

uint64_t *sub_1CD404090(uint64_t a1, unsigned int a2)
{
  int v6 = 0;
  if ((*(unsigned int (**)(void, int *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), &v6)) {
    uint64_t v4 = 9;
  }
  else {
    uint64_t v4 = 10;
  }
  return sub_1CD7ED9FC(*(void *)(a1 + 40), 64, (llvm *)v4, 0, a2, v6);
}

uint64_t sub_1CD404114(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1CD404120(uint64_t a1, uint64_t a2, void *a3)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 352))(*(void *)(a1 + 8))) {
    return (uint64_t *)a2;
  }
  BOOL v8 = *(llvm::APFloatBase **)(a1 + 40);
  int v9 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v27 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v27, v9, 2);
  }
  int v28 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = *((void *)v8 + 104);
  if (v10) {
    __int16 v11 = *(_WORD *)(v10 + 8);
  }
  else {
    __int16 v11 = 0;
  }
  uint64_t v12 = sub_1CD7F3564(v8, (const char *)0xC7, (uint64_t)&v27, (llvm *)5, 0, a2, a3, v11);
  uint64_t v14 = v13;
  if (v27) {
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v27 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v27, v16, 2);
    uint64_t v24 = *(unsigned __int8 **)(a2 + 64);
    int v17 = *(_DWORD *)(a2 + 60);
    int v28 = v17;
    uint64_t v18 = *(void *)(a1 + 40);
    unsigned int v25 = v24;
    if (v24)
    {
      llvm::MetadataTracking::track((uint64_t)&v25, v24, 2);
      int v17 = *(_DWORD *)(a2 + 60);
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 60);
    int v28 = v17;
    unsigned int v25 = 0;
    uint64_t v18 = v15;
  }
  int v26 = v17;
  uint64_t v19 = sub_1CD7EBF14(v18, 16, (const llvm::APInt *)&v25, (llvm *)5, 0, 0, 0);
  __int16 v22 = 0;
  uint64_t v23 = *(void *)(v15 + 832);
  if (v23) {
    __int16 v22 = *(_WORD *)(v23 + 8);
  }
  int v6 = sub_1CCFDED5C(v15, 175, (const llvm::APInt *)&v27, (llvm *)5, 0, (uint64_t)v12, v14, v21, (uint64_t)v19, v20, v22);
  if (v25) {
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  }
  if (v27) {
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  sub_1CD3D60FC(*(void *)(a1 + 40), a2, (uint64_t)a3, (uint64_t)v12);
  sub_1CD3D60FC(*(void *)(a1 + 40), a2, (uint64_t)a3, (uint64_t)v6);
  return v6;
}

uint64_t *sub_1CD40432C(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = *(llvm::APFloatBase **)(a1 + 40);
  int v7 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v12 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v12, v7, 2);
  }
  int v13 = *(_DWORD *)(a2 + 60);
  uint64_t v8 = *((void *)v6 + 104);
  if (v8) {
    __int16 v9 = *(_WORD *)(v8 + 8);
  }
  else {
    __int16 v9 = 0;
  }
  uint64_t v10 = sub_1CD7F3564(v6, (const char *)0xC7, (uint64_t)&v12, (llvm *)5, 0, a2, a3, v9);
  if (v12) {
    llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
  sub_1CD3D60FC(*(void *)(a1 + 40), a2, (uint64_t)a3, (uint64_t)v10);
  return v10;
}

void sub_1CD4043FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 48) != -1)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v8, v9);
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    if (v12 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v13 = (uint64_t *)(*(void *)a4 + 16 * v12);
    uint64_t *v13 = v11;
    v13[1] = v10;
    ++*(_DWORD *)(a4 + 8);
  }
  int v14 = *(_DWORD *)(a2 + 52);
  if (*(unsigned char *)(a2 + 1))
  {
    if (v14 != -1)
    {
LABEL_6:
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v15, v16);
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v20 = (uint64_t *)(*(void *)a4 + 16 * v19);
      *uint64_t v20 = v18;
      v20[1] = v17;
      ++*(_DWORD *)(a4 + 8);
    }
LABEL_8:
    if (*(_DWORD *)(a2 + 56) != -1)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v21, v22);
      unsigned int v25 = *(_DWORD *)(a4 + 8);
      if (v25 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v26 = (uint64_t *)(*(void *)a4 + 16 * v25);
      *int v26 = v24;
      v26[1] = v23;
      ++*(_DWORD *)(a4 + 8);
    }
    return;
  }
  if (v14 == -1) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 56) == -1) {
    goto LABEL_6;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
  v37[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v27, v28);
  v37[1] = v29;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 56));
  v37[2] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v30, v31);
  v37[3] = v32;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a3, v37);
  unsigned int v35 = *(_DWORD *)(a4 + 8);
  if (v35 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v36 = (uint64_t *)(*(void *)a4 + 16 * v35);
  uint64_t *v36 = v34;
  v36[1] = v33;
  ++*(_DWORD *)(a4 + 8);
}

uint64_t sub_1CD4048B0(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *a5;
  if (*a5)
  {
    uint64_t v12 = result;
    if (v8 <= 1)
    {
      *a5 = v8 | 2;
      uint64_t v13 = *(void *)(result + 40);
      uint64_t v14 = *(void *)(*a3 + 88);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v15 = sub_1CD7EBF14(v13, v14, (const llvm::APInt *)&v21, (llvm *)4, 0, 0, 0);
      *a3 = (uint64_t)v15;
      *((_DWORD *)a3 + 2) = v16;
      if (v21)
      {
        llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
        uint64_t v15 = (uint64_t *)*a3;
      }
      sub_1CD3D60FC(*(void *)(v12 + 40), a2, 0, (uint64_t)v15);
    }
    __int16 v17 = 0;
    uint64_t v18 = *(void *)(v12 + 40);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v19 = *(void *)(v18 + 832);
    if (v19) {
      __int16 v17 = *(_WORD *)(v19 + 8);
    }
    *a3 = (uint64_t)sub_1CCFDED5C(v18, 146, (const llvm::APInt *)&v21, (llvm *)0x1B, 0, *a3, a3[1], a8, *a4, a4[1], v17);
    *((_DWORD *)a3 + 2) = v20;
    if (v21) {
      llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
    }
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    return sub_1CD3D60FC(*(void *)(v12 + 40), a2, 0, *a3);
  }
  return result;
}

uint64_t sub_1CD4049D4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, _OWORD *a11, _OWORD *a12, uint64_t a13, int a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10)
  {
    uint64_t v27 = 8 * a10;
    do
    {
      LODWORD(v66[0]) = *a9;
      uint64_t v28 = *(void *)(a21 + 24);
      if (!v28) {
        goto LABEL_60;
      }
      uint64_t v30 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v28 + 48))(v28, v66);
      unint64_t v31 = *(unsigned int *)(a20 + 8);
      if (v31 >= *(unsigned int *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v32 = (uint64_t *)(*(void *)a20 + 16 * v31);
      *uint64_t v32 = v30;
      v32[1] = v29;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v27 -= 8;
    }
    while (v27);
  }
  if (a18)
  {
    v66[0] = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[12])(a1, a3, a17, a18);
    v66[1] = v33;
    uint64_t v34 = *(void *)(a22 + 24);
    if (!v34) {
      goto LABEL_60;
    }
    uint64_t v36 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v34 + 48))(v34, v66);
    unsigned int v37 = *(_DWORD *)(a20 + 8);
    if (v37 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v38 = (uint64_t *)(*(void *)a20 + 16 * v37);
    uint64_t *v38 = v36;
    v38[1] = v35;
    unsigned int v39 = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v39;
  }
  else
  {
    unsigned int v39 = *(_DWORD *)(a20 + 8);
  }
  if (v39 >= *(_DWORD *)(a20 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a20 + 16 * v39) = *a5;
  unsigned int v40 = *(_DWORD *)(a20 + 8) + 1;
  *(_DWORD *)(a20 + 8) = v40;
  if (*(unsigned char *)(a6 + 16))
  {
    if (v40 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v40) = *(_OWORD *)a6;
    unsigned int v40 = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v40;
  }
  if (*(_DWORD *)(a2 + 92) == -1 && *(unsigned char *)(a7 + 16))
  {
    if (v40 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v40) = *(_OWORD *)a7;
    unsigned int v40 = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v40;
  }
  if (v40 >= *(_DWORD *)(a20 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a20 + 16 * v40) = *a11;
  ++*(_DWORD *)(a20 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 184))(a1[1]);
  if (result)
  {
    LODWORD(v66[0]) = 0;
    uint64_t v42 = *(void *)(a21 + 24);
    if (!v42) {
      goto LABEL_60;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v42 + 48))(v42, v66);
    unsigned int v44 = *(_DWORD *)(a20 + 8);
    if (v44 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v45 = (uint64_t *)(*(void *)a20 + 16 * v44);
    *int v45 = result;
    v45[1] = v43;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    uint64_t v47 = 16 * a13;
    unsigned int v48 = *(_DWORD *)(a20 + 8);
    do
    {
      if (v48 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a20 + 16 * v48) = *a12;
      unsigned int v48 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v48;
      ++a12;
      v47 -= 16;
    }
    while (v47);
    if (a14 != 7)
    {
      uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 184))(a1[1]);
      if (result)
      {
        if (*(_DWORD *)(a2 + 92) == -1
          || (uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 320))(a1[1]), result))
        {
          LODWORD(v66[0]) = 0;
          uint64_t v49 = *(void *)(a21 + 24);
          if (!v49) {
            goto LABEL_60;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v49 + 48))(v49, v66);
          unsigned int v51 = *(_DWORD *)(a20 + 8);
          if (v51 >= *(_DWORD *)(a20 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v52 = (uint64_t *)(*(void *)a20 + 16 * v51);
          *unsigned int v52 = result;
          v52[1] = v50;
          ++*(_DWORD *)(a20 + 8);
        }
      }
    }
  }
  if (a16)
  {
    unsigned int v54 = *(_DWORD *)(a20 + 8);
    uint64_t v55 = 16 * a16;
    do
    {
      if (v54 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a20 + 16 * v54) = *a15;
      unsigned int v54 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v54;
      ++a15;
      v55 -= 16;
    }
    while (v55);
    if (!a18)
    {
      LODWORD(v66[0]) = 0;
      uint64_t v60 = *(void *)(a21 + 24);
      if (!v60) {
        goto LABEL_60;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v60 + 48))(v60, v66);
      unsigned int v62 = *(_DWORD *)(a20 + 8);
      if (v62 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v63 = (uint64_t *)(*(void *)a20 + 16 * v62);
      uint64_t *v63 = result;
      v63[1] = v61;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (*(_DWORD *)(a2 + 92) != -1) {
    return result;
  }
  LODWORD(v66[0]) = 0;
  uint64_t v56 = *(void *)(a21 + 24);
  if (!v56)
  {
LABEL_60:
    sub_1CB920400();
    return sub_1CD405088();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v56 + 48))(v56, v66);
  unsigned int v58 = *(_DWORD *)(a20 + 8);
  if (v58 >= *(_DWORD *)(a20 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v59 = (uint64_t *)(*(void *)a20 + 16 * v58);
  *unsigned int v59 = result;
  v59[1] = v57;
  ++*(_DWORD *)(a20 + 8);
  return result;
}

uint64_t *sub_1CD405088(uint64_t a1, unsigned int a2)
{
  return sub_1CD7ED9FC(*(void *)(a1 + 40), 64, (llvm *)0x4C, 0, a2, 2);
}

uint64_t *sub_1CD4050A4(uint64_t a1, uint64_t a2, unsigned __int8 a3, _OWORD *a4, unsigned int *a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x200000000;
  sub_1CD3D5F48(a1, (uint64_t)&v13, a4);
  uint64_t v11 = *a5;
  char v12 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v13, (uint64_t)&v11);
  uint64_t v9 = sub_1CD801450(a1, 8, a2, (llvm *)a3, 0, (uint64_t *)v13, v14);
  if (v13 != v15) {
    free(v13);
  }
  return v9;
}

void sub_1CD405190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D6D20(a1, a2, a6, a7, a8, a9);
}

void sub_1CD405250(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, _OWORD *a5)
{
  uint64_t v9 = *a3;
  char v10 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v9);
  uint64_t v9 = *a4;
  char v10 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v9);
  sub_1CD3D5F48(a1, a2, a5);
}

void sub_1CD4052D8(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10, _OWORD *a11, _OWORD *a12)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);

  sub_1CD405398(a1, a2, a6, a7, a8, a9, a10, a11, a12);
}

void sub_1CD405398(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);

  sub_1CD3D6D20(a1, a2, a6, a7, a8, a9);
}

void sub_1CD405438(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  uint64_t v11 = *a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
}

uint64_t *sub_1CD4054D4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD4055E8(a1, (uint64_t)&v19, a5, a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD4055E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  sub_1CD401BBC(a1, a2, a3);
  sub_1CD401BBC(a1, a2, a4);
  sub_1CD401BBC(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

uint64_t sub_1CD405674(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  char v16 = a1;
  if (a1) {
    int v11 = 5;
  }
  else {
    int v11 = 2;
  }
  uint64_t v17 = v19;
  uint64_t v18 = 0x500000000;
  sub_1CB9CDA9C((uint64_t)&v17, 1uLL, v11);
  uint64_t v12 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8), *(void *)a6);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1CD402118((uint64_t)&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  char v13 = v17;
  uint64_t v14 = sub_1CB951118(44, v17, v18, v12);
  if (v13 != (_DWORD *)v19) {
    free(v13);
  }
  return v14;
}

uint64_t *sub_1CD4057DC(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD400ADC(a1, a2, a6, a7, a8);
}

uint64_t *sub_1CD405884(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, int *a8)
{
  sub_1CD3D5F48(a1, a2, a3);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD402E34(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD405928(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  return sub_1CD402E34(a1, a2, *a6, a7, a8);
}

uint64_t *sub_1CD4059DC(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, unsigned int *a5, _OWORD *a6, unsigned int *a7, int *a8)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v16 = *a5;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  return sub_1CD400ADC(a1, a2, a6, a7, a8);
}

uint64_t *sub_1CD405A90(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5, unsigned int *a6)
{
  uint64_t v12 = a3;
  char v13 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  uint64_t v12 = *a6;
  char v13 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v12);
}

const char *sub_1CD405B2C(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 391:
      uint64_t result = "AGX2ISD::VRET";
      break;
    case 392:
      uint64_t result = "AGX2ISD::FRET";
      break;
    case 393:
    case 394:
    case 396:
    case 397:
    case 426:
    case 430:
      return result;
    case 395:
      uint64_t result = "AGX2ISD::READ_SHARED";
      break;
    case 398:
      uint64_t result = "AGX2ISD::READ_COEFF";
      break;
    case 399:
      uint64_t result = "AGX2ISD::WRITE_UNIFORM";
      break;
    case 400:
      uint64_t result = "AGX2ISD::READ_ADDRESS";
      break;
    case 401:
      uint64_t result = "AGX2ISD::ITR";
      break;
    case 402:
      uint64_t result = "AGX2ISD::ITR_PROJ";
      break;
    case 403:
      uint64_t result = "AGX2ISD::ITR_SAT";
      break;
    case 404:
      uint64_t result = "AGX2ISD::ITR_PROJ_SAT";
      break;
    case 405:
      uint64_t result = "AGX2ISD::ITR_16x2";
      break;
    case 406:
      uint64_t result = "AGX2ISD::ITR_PROJ_16x2";
      break;
    case 407:
      uint64_t result = "AGX2ISD::ITR_3D";
      break;
    case 408:
      uint64_t result = "AGX2ISD::ITR_PROJ_16x3";
      break;
    case 409:
      uint64_t result = "AGX2ISD::ITR_4D";
      break;
    case 410:
      uint64_t result = "AGX2ISD::ITR_PROJ_16x4";
      break;
    case 411:
      uint64_t result = "AGX2ISD::ITR_32x2";
      break;
    case 412:
      uint64_t result = "AGX2ISD::ITR_PROJ_32x2";
      break;
    case 413:
      uint64_t result = "AGX2ISD::ITR_32x3";
      break;
    case 414:
      uint64_t result = "AGX2ISD::ITR_PROJ_32x3";
      break;
    case 415:
      uint64_t result = "AGX2ISD::ITR_32x4";
      break;
    case 416:
      uint64_t result = "AGX2ISD::ITR_PROJ_32x4";
      break;
    case 417:
      uint64_t result = "AGX2ISD::RCP";
      break;
    case 418:
      uint64_t result = "AGX2ISD::RSQRT";
      break;
    case 419:
      uint64_t result = "AGX2ISD::SQRTSTEP";
      break;
    case 420:
      uint64_t result = "AGX2ISD::QREFL";
      break;
    case 421:
      uint64_t result = "AGX2ISD::F16DIVSTEP";
      break;
    case 422:
      uint64_t result = "AGX2ISD::FPTOU8";
      break;
    case 423:
      uint64_t result = "AGX2ISD::FPTOS8";
      break;
    case 424:
      uint64_t result = "AGX2ISD::FPTOU8_SCALE";
      break;
    case 425:
      uint64_t result = "AGX2ISD::FPTOS8_SCALE";
      break;
    case 427:
      uint64_t result = "AGX2ISD::BIT_EXTRACT";
      break;
    case 428:
      uint64_t result = "AGX2ISD::SELECT_CC_NNAN";
      break;
    case 429:
      uint64_t result = "AGX2ISD::FLUSH_DENORM";
      break;
    case 431:
      uint64_t result = "AGX2ISD::F16MATMAD4x4";
      break;
    case 432:
      uint64_t result = "AGX2ISD::F16MATMAD8x8";
      break;
    case 433:
      uint64_t result = "AGX2ISD::F32MATMAD4x4";
      break;
    case 434:
      uint64_t result = "AGX2ISD::F32MATMAD8x8";
      break;
    case 435:
      uint64_t result = "AGX2ISD::SIMDSHFFUPI";
      break;
    case 436:
      uint64_t result = "AGX2ISD::SIMDSHFFDNI";
      break;
    case 437:
      uint64_t result = "AGX2ISD::SIMDSHFFUPF";
      break;
    case 438:
      uint64_t result = "AGX2ISD::SIMDSHFFDNF";
      break;
    default:
      switch(a2)
      {
        case 890:
          uint64_t result = "AGX2ISD::SPILL8";
          break;
        case 891:
          uint64_t result = "AGX2ISD::SPILL16";
          break;
        case 892:
          uint64_t result = "AGX2ISD::SPILL32";
          break;
        case 893:
          uint64_t result = "AGX2ISD::SPILL48";
          break;
        case 894:
          uint64_t result = "AGX2ISD::SPILL64";
          break;
        case 895:
          uint64_t result = "AGX2ISD::SPILL96";
          break;
        case 896:
          uint64_t result = "AGX2ISD::SPILL128";
          break;
        case 897:
          uint64_t result = "AGX2ISD::RELOAD8";
          break;
        case 898:
          uint64_t result = "AGX2ISD::RELOAD16";
          break;
        case 899:
          uint64_t result = "AGX2ISD::RELOAD32";
          break;
        case 900:
          uint64_t result = "AGX2ISD::RELOAD48";
          break;
        case 901:
          uint64_t result = "AGX2ISD::RELOAD64";
          break;
        case 902:
          uint64_t result = "AGX2ISD::RELOAD96";
          break;
        case 903:
          uint64_t result = "AGX2ISD::RELOAD128";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t *sub_1CD405E28(uint64_t a1, uint64_t a2, char a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9, int a10, _OWORD *a11, uint64_t a12)
{
  uint64_t v32 = 0;
  uint64_t v33 = a1;
  if (!a5) {
    return 0;
  }
  v31[0] = &v32;
  v31[1] = &v33;
  void v31[2] = &a12;
  v31[3] = a2;
  v31[4] = &a11;
  v30[0] = &v32;
  v30[1] = &v33;
  v30[2] = &a12;
  v30[3] = a2;
  v30[4] = &a11;
  v29[0] = &v32;
  v29[1] = &v33;
  void v29[2] = &a12;
  v29[3] = a2;
  v29[4] = &a11;
  v28[0] = &v32;
  v28[1] = &v33;
  void v28[2] = &a12;
  v28[3] = a2;
  v28[4] = &a11;
  v27[0] = &v32;
  v27[1] = &v33;
  void v27[2] = &a12;
  v27[3] = a2;
  v27[4] = &a11;
  v26[0] = &v32;
  v26[1] = &v33;
  _DWORD v26[2] = &a12;
  v26[3] = a2;
  BOOL v18 = 1;
  void v26[4] = &a11;
  if (a8 != 3 && a10) {
    BOOL v18 = *(unsigned __int8 *)(a12 + 325) != 0;
  }
  if (a4 >= 2)
  {
    if ((a4 & 0xFFFFFFFB) != 3)
    {
      unsigned int v20 = a5 - 4;
      if ((a3 & 1) != 0 && v20 >= 0xFFFFFFFE)
      {
        if (!a7) {
          sub_1CB9D1C4C((uint64_t)v28);
        }
        sub_1CB9D1740((uint64_t)v31, 2u, a4);
        if (a5 == 3) {
          sub_1CB9D1740((uint64_t)v31, 3u, a4);
        }
      }
      if ((a3 & 4) == 0) {
        return v32;
      }
      if (v20 >= 0xFFFFFFFE && !a8) {
        sub_1CB9D1D78((uint64_t)v26);
      }
      sub_1CB9D1AE8((uint64_t)v30, 2u, a4);
      if (!v18) {
        return v32;
      }
LABEL_26:
      sub_1CB9D1AE8((uint64_t)v30, 3u, a4);
      return v32;
    }
    if ((a3 & 1) == 0)
    {
LABEL_11:
      if ((a3 & 4) == 0) {
        return v32;
      }
      if (!a8)
      {
        if (a6) {
          sub_1CB9D1AE8((uint64_t)v30, 1u, a4);
        }
        uint64_t v22 = v33;
        if (*(unsigned char *)(a12 + 327)) {
          int v23 = 2427;
        }
        else {
          int v23 = 2426;
        }
        uint64_t v34 = *(unsigned __int8 **)a2;
        if (v34) {
          llvm::MetadataTracking::track((uint64_t)&v34, v34, 2);
        }
        int v35 = *(_DWORD *)(a2 + 8);
        uint64_t v24 = sub_1CD3FF88C(v22, v23, (uint64_t)&v34, 1u, a11);
        uint64_t v32 = v24;
        if (v34)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
          uint64_t v24 = v32;
        }
        unsigned int v25 = a11;
        *(void *)a11 = v24;
        *((_DWORD *)v25 + 2) = 0;
      }
      sub_1CB9D1AE8((uint64_t)v30, 2u, a4);
      if (!v18) {
        return v32;
      }
      goto LABEL_26;
    }
    if (a5 == 1 || !a7)
    {
      sub_1CB9D1740((uint64_t)v31, 1u, a4);
      if ((a5 - 4) < 0xFFFFFFFE) {
        goto LABEL_11;
      }
      if (a4 == 7) {
        sub_1CB9D1890((uint64_t)v27);
      }
      else {
        sub_1CB9D19BC((uint64_t)v29);
      }
    }
    else if ((a5 - 4) < 0xFFFFFFFE)
    {
      unsigned int v21 = 1;
      goto LABEL_37;
    }
    sub_1CB9D1740((uint64_t)v31, 2u, a4);
    if (a5 != 3) {
      goto LABEL_11;
    }
    unsigned int v21 = 3;
LABEL_37:
    sub_1CB9D1740((uint64_t)v31, v21, a4);
    goto LABEL_11;
  }
  return v32;
}

uint64_t sub_1CD4060D8(uint64_t a1, llvm *a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, char a10, int a11, unsigned __int16 a12, int a13, char a14, unsigned __int8 a15, char a16, int a17)
{
  BOOL v18 = (uint64_t *)a7;
  uint64_t v19 = a5;
  int v22 = a15;
  if (a14)
  {
    uint64_t v23 = *(void *)(a5 + 48);
    if (!v23) {
      return 0;
    }
    int v24 = 1;
    do
    {
      if (*(_DWORD *)(v23 + 8) == a6)
      {
        if (!v24) {
          return 0;
        }
        --v24;
      }
      uint64_t v23 = *(void *)(v23 + 32);
    }
    while (v23);
    if (v24) {
      return 0;
    }
    if (*(_WORD *)(a5 + 24) == 222)
    {
      unsigned int v25 = *(_DWORD **)(a5 + 32);
      uint64_t v19 = *(void *)v25;
      uint64_t v26 = *(void *)(*(void *)v25 + 48);
      if (!v26) {
        return 0;
      }
      int v22 = a15 ^ 1;
      a6 = v25[2];
      int v27 = 1;
      do
      {
        if (*(_DWORD *)(v26 + 8) == a6)
        {
          if (!v27) {
            return 0;
          }
          --v27;
        }
        uint64_t v26 = *(void *)(v26 + 32);
      }
      while (v26);
      if (v27) {
        return 0;
      }
    }
  }
  else if (*(_WORD *)(a5 + 24) == 222)
  {
    uint64_t v28 = *(void *)(a5 + 32);
    uint64_t v19 = *(void *)v28;
    a6 = *(_DWORD *)(v28 + 8);
    int v22 = a15 ^ 1;
  }
  if ((a10 & 1) != 0 || (a12 & 0x7C0) == 0x7C0)
  {
    while (1)
    {
      int v40 = *(unsigned __int16 *)(v19 + 24);
      if (v40 != 215 && v40 != 212) {
        break;
      }
      uint64_t v37 = *(void *)(v19 + 32);
      uint64_t v19 = *(void *)v37;
      a6 = *(_DWORD *)(v37 + 8);
      if (a14)
      {
        uint64_t v38 = *(void *)(v19 + 48);
        if (!v38) {
          return 0;
        }
        int v39 = 1;
        do
        {
          if (*(_DWORD *)(v38 + 8) == a6)
          {
            if (!v39) {
              return 0;
            }
            --v39;
          }
          uint64_t v38 = *(void *)(v38 + 32);
        }
        while (v38);
        if (v39) {
          return 0;
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v19 + 40) + 16 * a6) == 10
    || *(unsigned char *)(*(void *)(a7 + 40) + 16 * a8) == 10)
  {
    uint64_t v29 = 0;
    int v30 = 10;
    unint64_t v31 = (llvm *)((unint64_t)a2 & 0xFFFFFFFFFFFFFF00 | 0xA);
    if (a2 != 10)
    {
      int v34 = 0;
      int v33 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v31 = a2;
    uint64_t v29 = a3;
    int v30 = a2;
  }
  if ((_BYTE)a2) {
    BOOL v32 = 1;
  }
  else {
    BOOL v32 = v29 == a3;
  }
  int v33 = !v32;
  int v34 = 1;
LABEL_32:
  if (v33 && !a14) {
    return 0;
  }
  int v41 = a9;
  int v42 = *(unsigned __int16 *)(v19 + 24);
  if (v42 == a17)
  {
    int v141 = v34;
    int v147 = v30;
    uint64_t v151 = v29;
    uint64_t v154 = (uint64_t)a4;
    char v144 = (uint64_t **)a1;
    if (sub_1CD406998(v19))
    {
      uint64_t v74 = *(void *)(v19 + 48);
      unsigned int v48 = a9;
      if (v74)
      {
        int v75 = 2;
        uint64_t v76 = *(void *)(v19 + 48);
        do
        {
          if (!*(_DWORD *)(v76 + 8))
          {
            if (!v75) {
              goto LABEL_94;
            }
            --v75;
          }
          uint64_t v76 = *(void *)(v76 + 32);
        }
        while (v76);
        if (!v75)
        {
          do
          {
            sub_1CCEF0788(*v48, *(void *)(v74 + 16));
            unsigned int v48 = a9;
            uint64_t v74 = *(void *)(v74 + 32);
          }
          while (v74);
        }
      }
LABEL_94:
      uint64_t v77 = *(void *)(v19 + 32);
      unsigned int v52 = *(uint64_t **)v77;
      unsigned int v45 = *(_DWORD *)(v77 + 8);
      uint64_t v49 = *(uint64_t **)(v77 + 40);
      uint64_t v51 = *(unsigned int *)(v77 + 48);
      goto LABEL_95;
    }
    return 0;
  }
  if (v42 == 96)
  {
    if (*(unsigned __int16 *)(a7 + 24) != a17)
    {
      uint64_t v43 = *(void *)(v19 + 32);
      if (*(void *)v43 == *(void *)(v43 + 40) && *(_DWORD *)(v43 + 8) == *(_DWORD *)(v43 + 48))
      {
        uint64_t v137 = *(uint64_t **)v43;
        int v141 = v34;
        int v147 = v30;
        uint64_t v151 = v29;
        uint64_t v154 = (uint64_t)a4;
        char v144 = (uint64_t **)a1;
        if (sub_1CD406998(v19))
        {
          uint64_t v44 = *(void *)(v19 + 48);
          if (v44)
          {
            int v128 = 2;
            uint64_t v129 = *(void *)(v19 + 48);
            do
            {
              if (!*(_DWORD *)(v129 + 8))
              {
                if (!v128) {
                  goto LABEL_54;
                }
                --v128;
              }
              uint64_t v129 = *(void *)(v129 + 32);
            }
            while (v129);
            if (!v128)
            {
              do
              {
                sub_1CCEF0788(*a9, *(void *)(v44 + 16));
                uint64_t v44 = *(void *)(v44 + 32);
              }
              while (v44);
              uint64_t v43 = *(void *)(v19 + 32);
              uint64_t v137 = *(uint64_t **)v43;
            }
          }
LABEL_54:
          unsigned int v45 = *(_DWORD *)(v43 + 8);
          long long v46 = sub_1CD7ECDC4(a9[2], v154, (BOOL)v31, v151, 0, 2.0);
          unsigned int v48 = a9;
          uint64_t v49 = v46;
          uint64_t v51 = v50;
          unsigned int v52 = v137;
LABEL_95:
          uint64_t v78 = v45;
          if (v22)
          {
            uint64_t v79 = (llvm::APFloatBase *)v48[2];
            uint64_t v80 = v52[5] + 16 * v45;
            uint64_t v81 = *(llvm **)v80;
            uint64_t v82 = *(void *)(v80 + 8);
            uint64_t v83 = *((void *)v79 + 104);
            uint64_t v84 = v48;
            if (v83) {
              __int16 v85 = *(_WORD *)(v83 + 8);
            }
            else {
              __int16 v85 = 0;
            }
            unsigned int v86 = v49;
            unsigned int v52 = sub_1CD7F3564(v79, (const char *)0xDE, v154, v81, v82, (uint64_t)v52, (void *)v78, v85);
            uint64_t v78 = v87;
            unsigned int v48 = v84;
            int v88 = v147;
          }
          else
          {
            int v88 = v147;
            unsigned int v86 = v49;
          }
          int v89 = (unsigned __int8 *)(v52[5] + 16 * v78);
          if (v88 != *v89 || !v88 && v151 != *((void *)v89 + 1))
          {
            char v90 = (llvm::APFloatBase *)v48[2];
            uint64_t v91 = *((void *)v90 + 104);
            int v92 = v88;
            unsigned int v93 = v48;
            if (v91) {
              __int16 v94 = *(_WORD *)(v91 + 8);
            }
            else {
              __int16 v94 = 0;
            }
            unsigned int v52 = sub_1CD7F3564(v90, (const char *)0xD7, v154, v31, v151, (uint64_t)v52, (void *)v78, v94);
            uint64_t v78 = v95;
            unsigned int v48 = v93;
            int v88 = v92;
          }
          uint64_t v96 = (unsigned __int8 *)(v86[5] + 16 * v51);
          uint64_t v135 = v78;
          char v139 = v52;
          if (v88 != *v96 || !v88 && v151 != *((void *)v96 + 1))
          {
            unsigned int v97 = (llvm::APFloatBase *)v48[2];
            uint64_t v98 = *((void *)v97 + 104);
            int v99 = v88;
            uint64_t v100 = v48;
            if (v98) {
              __int16 v101 = *(_WORD *)(v98 + 8);
            }
            else {
              __int16 v101 = 0;
            }
            unsigned int v86 = sub_1CD7F3564(v97, (const char *)0xD7, v154, v31, v151, (uint64_t)v86, (void *)v51, v101);
            uint64_t v51 = v102;
            unsigned int v48 = v100;
            int v88 = v99;
            uint64_t v78 = v135;
            unsigned int v52 = v139;
          }
          unint64_t v103 = a8 & 0xFFFFFFFF00000000;
          uint64_t v104 = (unsigned __int8 *)(v18[5] + 16 * a8);
          int v149 = v88;
          if (v88 == *v104 && (v88 || v151 == *((void *)v104 + 1)))
          {
            uint64_t v112 = a8;
            uint64_t v109 = v151;
            uint64_t v110 = (const llvm::APInt *)v154;
          }
          else
          {
            unsigned int v131 = v86;
            unsigned int v105 = (llvm::APFloatBase *)v48[2];
            uint64_t v106 = *((void *)v105 + 104);
            unsigned int v107 = v48;
            if (v106) {
              __int16 v108 = *(_WORD *)(v106 + 8);
            }
            else {
              __int16 v108 = 0;
            }
            uint64_t v109 = v151;
            uint64_t v110 = (const llvm::APInt *)v154;
            BOOL v18 = sub_1CD7F3564(v105, (const char *)0xD7, v154, v31, v151, (uint64_t)v18, (void *)a8, v108);
            uint64_t v112 = v111;
            unsigned int v48 = v107;
            uint64_t v78 = v135;
            unsigned int v52 = v139;
            unsigned int v86 = v131;
            unint64_t v103 = a8 & 0xFFFFFFFF00000000;
          }
          uint64_t v113 = v109;
          uint64_t v114 = v109;
          char v115 = v48;
          int v116 = sub_1CD7F5D38((void *)v48[2], (const char *)0x8D, v110, v31, v114, (uint64_t)v52, v78, v47, (uint64_t)v86, v51, (uint64_t)v18, v112 | v103, (v112 | v103) >> 32, a12);
          *char v144 = v116;
          *((_DWORD *)v144 + 2) = v117;
          if (!v141 || (uint64_t v35 = 1, !v149) && v113 != a3)
          {
            uint64_t v118 = v115[2];
            uint64_t v119 = (uint64_t)v144[1];
            uint64_t v120 = sub_1CD7EBF14(v118, 0, v110, (llvm *)5, 0, 0, 0);
            uint64_t v123 = *(void *)(v118 + 832);
            if (v123) {
              LOWORD(v123) = *(_WORD *)(v123 + 8);
            }
            *char v144 = sub_1CCFDED5C(v118, 212, v110, a2, a3, (uint64_t)v116, v119, v122, (uint64_t)v120, v121, v123);
            *((_DWORD *)v144 + 2) = v124;
            return 1;
          }
          return v35;
        }
      }
    }
    return 0;
  }
  uint64_t v35 = 0;
  if (v42 == 192 && a16 && a14)
  {
    unsigned int v53 = *(uint64_t **)(v19 + 32);
    uint64_t v54 = *v53;
    uint64_t v55 = v53[1];
    uint64_t v56 = v53[5];
    uint64_t v57 = v53[6];
    uint64_t v58 = v53[10];
    uint64_t v60 = v53[15];
    uint64_t v59 = v53[16];
    unsigned int v61 = *(_DWORD *)(v53[20] + 76);
    int v62 = *(unsigned __int16 *)(v60 + 24);
    BOOL v63 = v62 == 36 || v62 == 12;
    if (v63
      && ((uint64_t v64 = *(void *)(v60 + 80), *(_UNKNOWN **)(v64 + 32) == &unk_1CFB2E344)
        ? (uint64_t v65 = *(void *)(v64 + 40))
        : (uint64_t v65 = v64 + 24),
          (*(unsigned char *)(v65 + 28) & 7) == 3))
    {
      unsigned int v136 = *(_DWORD *)(v53[20] + 76);
      int v140 = v53[6];
      uint64_t v143 = v53[5];
      int v150 = v53[1];
      uint64_t v153 = *v53;
      uint64_t v125 = v53[11];
      uint64_t v161 = 0;
      unsigned int v162 = 0;
      uint64_t v159 = *(unsigned __int8 **)a4;
      uint64_t v156 = a4;
      if (v159)
      {
        uint64_t v133 = v125;
        llvm::MetadataTracking::track((uint64_t)&v159, v159, 2);
        uint64_t v125 = v133;
        int v41 = a9;
        a4 = v156;
      }
      int v160 = *((_DWORD *)a4 + 2);
      *(_WORD *)((char *)&v130 + 1) = v22;
      LOBYTE(v130) = 1;
      int v126 = v41;
      uint64_t v35 = sub_1CD4060D8(&v161, a2, a3, &v159, v58, v125, v18, a8, v41, a10, a12, v130);
      if (v159) {
        llvm::MetadataTracking::untrack((uint64_t)&v159, v159);
      }
      if (v35)
      {
        *(void *)a1 = sub_1CD3D6058((void *)v126[2], v156, v153, v150, v143, v140, v161, v162, (uint64_t)v18, a8, SHIDWORD(a8), v136);
        *(_DWORD *)(a1 + 8) = v127;
      }
    }
    else
    {
      int v66 = *(unsigned __int16 *)(v58 + 24);
      if (v66 != 36 && v66 != 12) {
        return 0;
      }
      uint64_t v68 = *(void *)(v58 + 80);
      uint64_t v69 = *(_UNKNOWN **)(v68 + 32) == &unk_1CFB2E344 ? *(void *)(v68 + 40) : v68 + 24;
      if ((*(unsigned char *)(v69 + 28) & 7) != 3) {
        return 0;
      }
      unsigned int v134 = v61;
      int v138 = v57;
      uint64_t v142 = v56;
      int v148 = v55;
      uint64_t v152 = v54;
      uint64_t v161 = 0;
      unsigned int v162 = 0;
      uint64_t v70 = *(unsigned __int8 **)a4;
      uint64_t v157 = v70;
      if (v70)
      {
        uint64_t v155 = a4;
        uint64_t v132 = v59;
        llvm::MetadataTracking::track((uint64_t)&v157, v70, 2);
        uint64_t v59 = v132;
        int v41 = a9;
        a4 = v155;
      }
      unsigned int v71 = a4;
      int v158 = *((_DWORD *)a4 + 2);
      *(_WORD *)((char *)&v130 + 1) = v22;
      LOBYTE(v130) = 1;
      uint64_t v72 = v41;
      uint64_t v35 = sub_1CD4060D8(&v161, a2, a3, &v157, v60, v59, v18, a8, v41, a10, a12, v130);
      if (v157) {
        llvm::MetadataTracking::untrack((uint64_t)&v157, v157);
      }
      if (v35)
      {
        *(void *)a1 = sub_1CD3D6058((void *)v72[2], v71, v152, v148, v142, v138, (uint64_t)v18, a8, v161, v162, v163, v134);
        *(_DWORD *)(a1 + 8) = v73;
      }
    }
  }
  return v35;
}

uint64_t sub_1CD406998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t result = 0;
    uint64_t v4 = *(void *)(v1 + 16);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 24);
    if (v5 > 0xBF)
    {
      if (v5 - 192 <= 0x1F)
      {
        if (v5 == 192) {
          goto LABEL_7;
        }
        if (((1 << (v5 + 64)) & 0xC0900000) != 0)
        {
LABEL_9:
          if ((sub_1CD406998(*(void *)(v1 + 16)) & 1) == 0) {
            return 0;
          }
          goto LABEL_10;
        }
      }
      if (v5 != 428) {
        return result;
      }
LABEL_7:
      int v6 = *(void **)(v4 + 32);
      if (*v6 == a1 || v6[5] == a1) {
        return 0;
      }
      goto LABEL_9;
    }
    if (v5 != 46) {
      break;
    }
    uint64_t v8 = *(void *)(**(void **)(v4 + 32) + 80);
    uint64_t v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = (void *)*v9;
    }
    if (*v9 != 2131) {
      return 0;
    }
LABEL_10:
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
  if (v5 != 96) {
    return result;
  }
  uint64_t v7 = *(void *)(v4 + 32);
  if (*(void *)v7 != *(void *)(v7 + 40) || *(_DWORD *)(v7 + 8) != *(_DWORD *)(v7 + 48)) {
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_1CD406AAC(int a1)
{
  uint64_t result = 1;
  if (((a1 - 222) > 0x13 || ((1 << (a1 + 34)) & 0x81203) == 0) && (a1 - 417) >= 5)
  {
    unsigned int v3 = a1 - 96;
    if (v3 > 0x2D || ((1 << v3) & 0x200000000007) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD406B10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    while (1)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      int v3 = *(unsigned __int16 *)(v2 + 24);
      if (v3 == 212)
      {
LABEL_5:
        if ((sub_1CD406B10(*(void *)(v1 + 16)) & 1) == 0) {
          return 0;
        }
        goto LABEL_6;
      }
      if (v3 != 222) {
        break;
      }
      uint64_t v4 = *(void *)(v2 + 48);
      if (!v4 || *(void *)(v4 + 32)) {
        goto LABEL_10;
      }
      uint64_t result = sub_1CD406B10(*(void *)(v1 + 16));
      if (!result) {
        return result;
      }
      if ((sub_1CD406BEC(v2) & 1) == 0) {
        return 0;
      }
LABEL_6:
      uint64_t v1 = *(void *)(v1 + 32);
      if (!v1) {
        return 1;
      }
    }
    if (v3 == 215) {
      goto LABEL_5;
    }
LABEL_10:
    if ((sub_1CD406AAC(*(unsigned __int16 *)(v2 + 24)) & 1) == 0)
    {
      if (v3 != 46) {
        return 0;
      }
      uint64_t v5 = *(void *)(**(void **)(v2 + 32) + 80);
      int v6 = (void *)(v5 + 24);
      if (*(_DWORD *)(v5 + 32) >= 0x41u) {
        int v6 = (void *)*v6;
      }
      if (*v6 != 2131) {
        return 0;
      }
    }
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_1CD406BEC(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 48); i; uint64_t i = *(void *)(i + 32))
  {
    uint64_t v3 = *(void *)(i + 16);
    unsigned int v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 > 0xD6)
    {
      if (v4 != 428)
      {
        if (v4 != 215)
        {
LABEL_5:
          uint64_t result = sub_1CD406AAC(*(unsigned __int16 *)(v3 + 24));
          if (!result) {
            return result;
          }
          continue;
        }
        goto LABEL_13;
      }
    }
    else if (v4 != 192)
    {
      if (v4 != 212) {
        goto LABEL_5;
      }
LABEL_13:
      if ((sub_1CD406BEC() & 1) == 0) {
        return 0;
      }
      continue;
    }
    uint64_t v6 = *(void *)(v3 + 32);
    if (*(void *)(v6 + 80) == a1 || *(void *)(v6 + 120) == a1) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CD406C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(unsigned char **)(a2 + 40) != 2) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v54 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v54, v6, 2);
  }
  int v55 = *(_DWORD *)(a2 + 60);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)v7;
  int v9 = *(_DWORD *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(_WORD *)(v10 + 24) != 193) {
    goto LABEL_13;
  }
  if (*(_WORD *)(v8 + 24) != 193) {
    goto LABEL_26;
  }
  uint64_t v12 = *(void *)(v10 + 48);
  if (!v12) {
    goto LABEL_13;
  }
  int v13 = 1;
  do
  {
    if (*(_DWORD *)(v12 + 8) == v11)
    {
      if (!v13) {
        goto LABEL_13;
      }
      --v13;
    }
    uint64_t v12 = *(void *)(v12 + 32);
  }
  while (v12);
  if (!v13)
  {
LABEL_26:
    int v15 = v9;
    uint64_t v14 = v8;
  }
  else
  {
LABEL_13:
    uint64_t v14 = v10;
    int v15 = v11;
    uint64_t v10 = v8;
    LODWORD(v11) = v9;
  }
  if (*(_WORD *)(v10 + 24) != 193) {
    goto LABEL_52;
  }
  uint64_t v16 = *(uint64_t **)(v10 + 32);
  uint64_t v17 = *v16;
  if (*(_WORD *)(*v16 + 24) == 171)
  {
    uint64_t v18 = *(void *)(*(void *)(v17 + 32) + 40);
    int v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      uint64_t v21 = *(void *)(v18 + 80);
      int v22 = (llvm::APInt *)(v21 + 24);
      unsigned int v23 = *(_DWORD *)(v21 + 32);
      if (v23 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v22) == v23 - 1) {
          goto LABEL_52;
        }
      }
      else if (*(void *)v22 == 1)
      {
        goto LABEL_52;
      }
    }
  }
  if (*(_WORD *)(v14 + 24) != 193) {
    goto LABEL_39;
  }
  uint64_t v26 = **(void **)(v14 + 32);
  if (*(_WORD *)(v26 + 24) != 171) {
    goto LABEL_39;
  }
  uint64_t v27 = *(void *)(*(void *)(v26 + 32) + 40);
  int v28 = *(unsigned __int16 *)(v27 + 24);
  if (v28 != 35 && v28 != 11) {
    goto LABEL_39;
  }
  uint64_t v30 = *(void *)(v27 + 80);
  unint64_t v31 = (llvm::APInt *)(v30 + 24);
  unsigned int v32 = *(_DWORD *)(v30 + 32);
  if (v32 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v31) != v32 - 1) {
      goto LABEL_39;
    }
LABEL_52:
    uint64_t v24 = 0;
    goto LABEL_53;
  }
  if (*(void *)v31 == 1) {
    goto LABEL_52;
  }
LABEL_39:
  uint64_t v33 = *(void *)(v10 + 48);
  if (!v33) {
    goto LABEL_46;
  }
  int v34 = 1;
  do
  {
    if (*(_DWORD *)(v33 + 8) == v11)
    {
      if (!v34) {
        goto LABEL_46;
      }
      --v34;
    }
    uint64_t v33 = *(void *)(v33 + 32);
  }
  while (v33);
  if (v34)
  {
LABEL_46:
    for (uint64_t i = *(void *)(a2 + 48); i; uint64_t i = *(void *)(i + 32))
    {
      int v36 = *(unsigned __int16 *)(*(void *)(i + 16) + 24);
      if (v36 == 190 || v36 == 259) {
        goto LABEL_52;
      }
    }
  }
  int v37 = *(unsigned __int16 *)(a2 + 24);
  if (v37 == 172)
  {
    uint64_t v47 = *(void **)(a3 + 16);
    uint64_t v48 = v16[1];
    uint64_t v49 = v16[5];
    uint64_t v50 = v16[6];
    uint64_t v51 = sub_1CD7EBF14((uint64_t)v47, 1, (const llvm::APInt *)&v54, (llvm *)2, 0, 0, 0);
    unsigned int v45 = sub_1CD7F6564(v47, (const char *)0xC0, (const llvm::APInt *)&v54, (llvm *)2, 0, v17, v48, v53, v49, v50, (uint64_t)v51, v52, v14, v15, *(void *)(*(void *)(v10 + 32) + 80), *(void *)(*(void *)(v10 + 32) + 88));
  }
  else
  {
    if (v37 != 171) {
      goto LABEL_52;
    }
    uint64_t v38 = *(void **)(a3 + 16);
    uint64_t v39 = v16[1];
    uint64_t v40 = v16[5];
    uint64_t v41 = v16[6];
    int v42 = sub_1CD7EBF14((uint64_t)v38, 0, (const llvm::APInt *)&v54, (llvm *)2, 0, 0, 0);
    unsigned int v45 = sub_1CD7F6564(v38, (const char *)0xC0, (const llvm::APInt *)&v54, (llvm *)2, 0, v17, v39, v44, v40, v41, v14, v15, (uint64_t)v42, v43, *(void *)(*(void *)(v10 + 32) + 80), *(void *)(*(void *)(v10 + 32) + 88));
  }
  *(void *)a1 = v45;
  *(_DWORD *)(a1 + 8) = v46;
  uint64_t v24 = 1;
LABEL_53:
  if (v54) {
    llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
  }
  return v24;
}

uint64_t sub_1CD406FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    int v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 == 428 || v4 == 192) {
      break;
    }
    uint64_t result = sub_1CD406AAC(v4);
    if (!result) {
      return result;
    }
LABEL_6:
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (*(void *)(v5 + 80) != a1 && *(void *)(v5 + 120) != a1) {
    goto LABEL_6;
  }
  return 0;
}

BOOL sub_1CD407020(uint64_t a1)
{
  int v1 = *(__int16 *)(a1 + 24);
  return (v1 - 101) < 0x27 || (v1 - 220) <= 1;
}

uint64_t sub_1CD40704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  int v128 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v128, v8, 2);
  }
  int v129 = *(_DWORD *)(a2 + 60);
  long long v127 = *(_OWORD *)*(void *)(a2 + 40);
  if (sub_1CD3E12F4((unsigned __int8 *)&v127, (uint64_t)v8, a3) == (llvm::Type *)8
    || sub_1CD3E12F4((unsigned __int8 *)&v127, (uint64_t)v9, v10) == (llvm::Type *)16)
  {
    if ((_BYTE)v127)
    {
      if (v127 - 15 >= 0x9C) {
        goto LABEL_30;
      }
    }
    else if ((*(_DWORD *)(*((void *)&v127 + 1) + 8) & 0xFE) != 0x12)
    {
      goto LABEL_30;
    }
    if (sub_1CD3DB440((llvm::EVT *)&v127, v9) >= 5)
    {
      int v13 = *(uint64_t **)(a2 + 32);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t v16 = v13[5];
      uint64_t v17 = v13[6];
      signed int v19 = 2 * sub_1CD3E12F4((unsigned __int8 *)&v127, v11, v12);
      uint64_t v20 = 5;
      uint64_t v21 = 6;
      uint64_t v22 = 7;
      if (v19 != 128) {
        uint64_t v22 = 0;
      }
      if (v19 != 64) {
        uint64_t v21 = v22;
      }
      if (v19 != 32) {
        uint64_t v20 = v21;
      }
      uint64_t v23 = 3;
      uint64_t v24 = 4;
      if (v19 != 16) {
        uint64_t v24 = 0;
      }
      if (v19 != 8) {
        uint64_t v23 = v24;
      }
      if (v19 <= 31) {
        uint64_t v25 = v23;
      }
      else {
        uint64_t v25 = v20;
      }
      uint64_t v26 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
      unsigned int v27 = sub_1CD3DB440((llvm::EVT *)&v127, v18);
      unint64_t v28 = sub_1CB8E5DAC(v26, v25, 0, v27 >> 1, 0);
      uint64_t v30 = sub_1CD7FAE3C(*(void *)(a3 + 16), v28, v29, (uint64_t)&v128, v14, v15, v16, v17, *(void *)(a2 + 96));
      unint64_t v31 = *(void **)(a3 + 16);
      uint64_t v32 = sub_1CD7F95FC((uint64_t)v31, v127, *((uint64_t *)&v127 + 1), 1, 0);
      uint64_t v34 = v33;
      uint64_t v35 = sub_1CD7EF724(*(void *)(a3 + 16), v127, *((uint64_t *)&v127 + 1), (uint64_t)v30, 0);
      uint64_t v38 = (uint64_t)sub_1CD7FFB18(v31, (const char *)0x37, (const llvm::APInt *)&v128, v32, v34, v35, v36, v37, (uint64_t)v30, 1);
      goto LABEL_27;
    }
  }
LABEL_30:
  sub_1CD40B83C((uint64_t)v124, a2);
  uint64_t v39 = sub_1CD40B748((uint64_t)v124);
  if (!v39) {
    goto LABEL_37;
  }
  int v40 = *(unsigned __int16 *)(v39 + 24);
  if (v40 != 35 && v40 != 11) {
    goto LABEL_37;
  }
  uint64_t v41 = *(void *)(v39 + 80);
  int v42 = (void *)(v41 + 24);
  if (*(_DWORD *)(v41 + 32) >= 0x41u) {
    int v42 = (void *)*v42;
  }
  if (!*v42)
  {
LABEL_37:
    uint64_t v43 = v125;
    unint64_t v44 = v126;
    uint64_t v122 = v128;
    if (v128) {
      llvm::MetadataTracking::track((uint64_t)&v122, v128, 2);
    }
    int v123 = v129;
    sub_1CB9F3460((uint64_t)&v133, v43, v44, (const llvm::APInt *)&v122, *(void *)(a3 + 16));
    uint64_t v45 = (uint64_t)v133;
    uint64_t v46 = v136;
    uint64_t v47 = v137;
    if (v122) {
      llvm::MetadataTracking::untrack((uint64_t)&v122, v122);
    }
    if (!v45 || (*(_DWORD *)(**(void **)(v45 + 80) + 8) & 0xFFFFFF00) == 0x200) {
      goto LABEL_43;
    }
    uint64_t v58 = *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344);
    (*(void (**)(uint64_t))(*(void *)v58 + 400))(v58);
    if ((v59 - 15) > 1)
    {
      if ((*(_DWORD *)(**(void **)(v45 + 80) + 8) & 0xFFFFFF00) != 0x4000)
      {
        int v60 = *(unsigned __int16 *)(v46 + 24);
        if (v60 == 35 || v60 == 11) {
          sub_1CD409DD4(*(llvm::APFloatBase **)(a3 + 16), v45, v46, v47, (uint64_t)v124, a2);
        }
LABEL_43:
        uint64_t v3 = (uint64_t)sub_1CB9F4BE0(a1, (uint64_t)v124, a3);
        uint64_t v49 = v48;
        uint64_t v50 = (unsigned __int8 *)(*(void *)(v3 + 40) + 16 * v48);
        if (*v50 != v127 || !*v50 && *((void *)v50 + 1) != *((void *)&v127 + 1))
        {
          uint64_t v51 = *(void **)(a3 + 16);
          uint64_t v52 = sub_1CD7F95FC((uint64_t)v51, v127, *((uint64_t *)&v127 + 1), 1, 0);
          uint64_t v54 = v53;
          uint64_t v55 = sub_1CD7EF724(*(void *)(a3 + 16), v127, *((uint64_t *)&v127 + 1), v3, v49);
          uint64_t v3 = (uint64_t)sub_1CD7FFB18(v51, (const char *)0x37, (const llvm::APInt *)&v128, v52, v54, v55, v56, v57, v3, 1);
        }
        goto LABEL_28;
      }
      uint64_t v38 = sub_1CB9F36B4(a2, v45, v46, v47, (const char *)0x18B, (uint64_t **)a3);
LABEL_27:
      uint64_t v3 = v38;
      goto LABEL_28;
    }
    unsigned int v61 = *(unsigned __int8 **)(a2 + 64);
    unsigned int v131 = v61;
    if (v61) {
      llvm::MetadataTracking::track((uint64_t)&v131, v61, 2);
    }
    int v132 = *(_DWORD *)(a2 + 60);
    unsigned int v62 = sub_1CD1117B0(*(llvm::GlobalValue **)(v45 + 80), *(void *)(v45 + 88), *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344), 256);
    BOOL v63 = sub_1CD7EBF14(*(void *)(a3 + 16), v62, (const llvm::APInt *)&v131, (llvm *)4, 0, 0, 0);
    uint64_t v65 = v64;
    uint64_t v66 = sub_1CD7EB67C(*(void *)(a3 + 16), v46, v47, (uint64_t)&v131, 4, 0);
    uint64_t v69 = sub_1CB9E7A40(v66, v67, *(void *)(a3 + 16));
    __int16 v71 = 0;
    uint64_t v72 = *(void *)(a3 + 16);
    uint64_t v73 = *(void *)(v72 + 832);
    if (v73) {
      __int16 v71 = *(_WORD *)(v73 + 8);
    }
    uint64_t v74 = sub_1CCFDED5C(v72, 56, (const llvm::APInt *)&v131, (llvm *)4, 0, (uint64_t)v69, v68, v70, (uint64_t)v63, v65, v71);
    unint64_t v76 = v65 & 0xFFFFFFFF00000000 | v75;
    long long v130 = *(_OWORD *)*(void *)(a2 + 40);
    uint64_t v77 = *(void *)(a3 + 16);
    if ((_BYTE)v130) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v130);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v130);
    }
    uint64_t v80 = ExtendedSizeInBits;
    if (v79 == 1) {
    uint64_t v82 = sub_1CD7EBF14(v77, (unint64_t)(v80 + 96) >> 7, (const llvm::APInt *)&v131, (llvm *)3, 0, 1, 0);
    }
    __int16 v84 = 0;
    uint64_t v85 = *(void *)(a3 + 16);
    uint64_t v86 = *(void *)(v85 + 832);
    if (v86) {
      __int16 v84 = *(_WORD *)(v86 + 8);
    }
    int v88 = sub_1CCFDED5C(v85, 398, (const llvm::APInt *)&v131, (llvm *)0xAE, 0, (uint64_t)v82, v81, v83, (uint64_t)v74, v76, v84);
    int v89 = (int)v87;
    if ((_BYTE)v130)
    {
      if (v130 - 15 >= 0x9C)
      {
        uint64_t v90 = *((void *)&v130 + 1);
LABEL_79:
        unsigned int v93 = sub_1CD8015C0(*(void *)(a3 + 16), 25, (const llvm::APInt *)&v131, (llvm *)v130, v90, (uint64_t)v88, (int)v87);
        LODWORD(v95) = v110;
LABEL_80:
        unsigned int v111 = *(uint64_t **)(a2 + 32);
        uint64_t v113 = *v111;
        uint64_t v112 = v111[1];
        uint64_t v114 = *(uint64_t **)a3;
        uint64_t v133 = v93;
        int v134 = v95;
        uint64_t v135 = v113;
        LODWORD(v136) = v112;
        uint64_t v3 = sub_1CCEF083C(v114, a2, (uint64_t *)&v133, 2, 1);
        if (v131) {
          llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
        }
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v90 = *((void *)&v130 + 1);
      if ((*(_DWORD *)(*((void *)&v130 + 1) + 8) & 0xFE) != 0x12) {
        goto LABEL_79;
      }
    }
    unsigned int v91 = sub_1CD3DB440((llvm::EVT *)&v130, v87);
    unsigned int v93 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)v130, *((uint64_t *)&v130 + 1));
    uint64_t v95 = v94;
    if ((_BYTE)v130)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v130);
      unint64_t v97 = 0;
      uint64_t v119 = 0;
    }
    else
    {
      unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v130 + 1) + 24), 0, v92);
      uint64_t v119 = v115;
      unint64_t v97 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    if (v91)
    {
      uint64_t v98 = 0;
      int v116 = (llvm *)(v97 | EVT);
      int v117 = v89;
      uint64_t v99 = v91;
      uint64_t v118 = v88;
      do
      {
        if ((~v98 & 3) != 0)
        {
          uint64_t v120 = v95;
          uint64_t v121 = (uint64_t)v93;
          uint64_t v100 = sub_1CD8015C0(*(void *)(a3 + 16), v98 + 25 - (v98 >> 2), (const llvm::APInt *)&v131, v116, v119, (uint64_t)v88, v89);
          uint64_t v102 = v101;
          unint64_t v103 = *(void **)(a3 + 16);
          long long v104 = v130;
          unsigned int v105 = sub_1CD7EBF14((uint64_t)v103, v98, (const llvm::APInt *)&v131, (llvm *)5, 0, 0, 0);
          uint64_t v108 = v103[104];
          if (v108) {
            LOWORD(v108) = *(_WORD *)(v108 + 8);
          }
          unsigned int v93 = sub_1CD7F5D38(v103, (const char *)0x93, (const llvm::APInt *)&v131, (llvm *)v104, *((uint64_t *)&v104 + 1), v121, v120, v107, (uint64_t)v100, v102, (uint64_t)v105, v106, SHIDWORD(v106), v108);
          uint64_t v95 = v109;
          int v89 = v117;
          int v88 = v118;
        }
        ++v98;
      }
      while (v99 != v98);
    }
    goto LABEL_80;
  }
  uint64_t v3 = 0;
LABEL_28:
  if (v128) {
    llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
  }
  return v3;
}

uint64_t sub_1CD407804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v86[10] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)a2;
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v82 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v82, v8, 2);
  }
  int v83 = *((_DWORD *)v6 + 15);
  int v9 = (uint64_t *)v6[4];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v13 = v9[5];
  uint64_t v12 = v9[6];
  uint64_t v14 = v9[10];
  uint64_t v15 = v9[11];
  long long v81 = *(_OWORD *)(*(void *)(v13 + 40) + 16 * v12);
  __int16 v84 = (void *)sub_1CD3DD468((unsigned __int8 *)&v81, (uint64_t)v8, a3);
  uint64_t v85 = v16;
  if ((_BYTE)v84) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v84);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v84);
  }
  unsigned int v20 = ExtendedSizeInBits;
  uint64_t v76 = v14;
  if (v18 == 1) {
  if (*(_WORD *)(v13 + 24) != 146 || v20 < 0x10)
  }
    goto LABEL_15;
  uint64_t v22 = *(unsigned __int16 *)(v13 + 56);
  unint64_t v23 = ~(-1 << v22);
  if (v22 == 64) {
    unint64_t v23 = -1;
  }
  if (*(_WORD *)(v13 + 56))
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(uint64_t **)(v13 + 32);
    do
    {
      uint64_t v26 = *v25;
      v25 += 5;
      if (*(_WORD *)(v26 + 24) == 51) {
        uint64_t v27 = ~(1 << v24);
      }
      else {
        uint64_t v27 = -1;
      }
      v23 &= v27;
      ++v24;
    }
    while (v22 != v24);
  }
  int v28 = __clz(v23) ^ 0x3F;
  int v29 = v23 ? v28 : -1;
  unsigned int v30 = v29 + 1;
  if (v29 + 1 >= v22) {
    goto LABEL_15;
  }
  if (v30 >= 5)
  {
    if ((((_BYTE)v30 * (_BYTE)v20) & 0x1F) == 0) {
      goto LABEL_43;
    }
LABEL_15:
    if (v20 <= 0x10)
    {
      if (!(_BYTE)v81)
      {
        if ((*(_DWORD *)(*((void *)&v81 + 1) + 8) & 0xFE) != 0x12) {
          goto LABEL_60;
        }
LABEL_39:
        if (sub_1CD3DB440((llvm::EVT *)&v81, v18) >= 5)
        {
          int v36 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
          if ((_BYTE)v81) {
            uint64_t v37 = sub_1CB87E200((unsigned __int8 *)&v81);
          }
          else {
            uint64_t v37 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v81);
          }
          unint64_t v56 = v37;
          if (v38 == 1) {
          unint64_t v57 = sub_1CB8E5DAC(v36, 10, 0, v56 >> 5, 0);
          }
          uint64_t v59 = sub_1CD7EF724(*(void *)(a3 + 16), v57, v58, v13, v12);
          uint64_t v6 = sub_1CD7FB2A8(*(void *)(a3 + 16), v10, v11, (uint64_t)&v82, v59, v60, v76, v15, v6[12]);
        }
        goto LABEL_60;
      }
      if (v81 - 15 < 0x9C) {
        goto LABEL_39;
      }
    }
LABEL_60:
    sub_1CD40B878((uint64_t)&v84, (uint64_t)v6);
    uint64_t v61 = sub_1CD40B748((uint64_t)&v84);
    if (!v61) {
      goto LABEL_94;
    }
    int v62 = *(unsigned __int16 *)(v61 + 24);
    if (v62 != 35 && v62 != 11) {
      goto LABEL_94;
    }
    uint64_t v63 = *(void *)(v61 + 80);
    uint64_t v64 = (void *)(v63 + 24);
    if (*(_DWORD *)(v63 + 32) >= 0x41u) {
      uint64_t v64 = (void *)*v64;
    }
    if (!*v64)
    {
LABEL_94:
      uint64_t v65 = v85;
      unint64_t v66 = v86[0];
      uint64_t v77 = v82;
      if (v82) {
        llvm::MetadataTracking::track((uint64_t)&v77, v82, 2);
      }
      int v78 = v83;
      sub_1CB9F3460((uint64_t)v79, v65, v66, (const llvm::APInt *)&v77, *(void *)(a3 + 16));
      uint64_t v67 = v79[0];
      uint64_t v68 = v79[3];
      uint64_t v69 = v80;
      if (v77) {
        llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
      }
      if (!v67) {
        goto LABEL_76;
      }
      if ((*(_DWORD *)(**(void **)(v67 + 80) + 8) & 0xFFFFFF00) == 0x4000)
      {
        uint64_t v55 = sub_1CB9F36B4((uint64_t)v6, v67, v68, v69, (const char *)0x18F, (uint64_t **)a3);
        goto LABEL_78;
      }
      if ((int v70 = *(unsigned __int16 *)(v68 + 24), v70 != 35) && v70 != 11
        || !sub_1CD409F60(*(llvm::APFloatBase **)(a3 + 16), v67, v68, v69, (uint64_t)&v84, (uint64_t)v6))
      {
LABEL_76:
        if (*(unsigned __int8 *)(*(void *)(v85 + 40) + 16 * LODWORD(v86[0])) != 174)
        {
          uint64_t v55 = (uint64_t)sub_1CB9F567C(a1, (uint64_t)&v84, a3);
          goto LABEL_78;
        }
      }
    }
    uint64_t v3 = 0;
    goto LABEL_79;
  }
  if (v29)
  {
LABEL_43:
    uint64_t v39 = *(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56);
    unint64_t v40 = sub_1CD3DD468((unsigned __int8 *)&v81, (uint64_t)v18, v19);
    unint64_t v42 = sub_1CB8E5DAC(v39, v40, v41, v30, 0);
    *(void *)&long long v81 = v42;
    *((void *)&v81 + 1) = v43;
    __int16 v84 = v86;
    uint64_t v85 = 0x400000000;
    if (v30)
    {
      uint64_t v48 = 0;
      LODWORD(v46) = 0;
      uint64_t v49 = 40 * v30;
      do
      {
        if (v46 >= HIDWORD(v85)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v84 + v46) = *(_OWORD *)(*(void *)(v13 + 32) + v48);
        uint64_t v46 = (v85 + 1);
        LODWORD(v85) = v85 + 1;
        v48 += 40;
      }
      while (v49 != v48);
      uint64_t v45 = *((void *)&v81 + 1);
      unint64_t v44 = (llvm *)v81;
      uint64_t v47 = (uint64_t *)v84;
    }
    else
    {
      unint64_t v44 = (llvm *)v42;
      uint64_t v45 = v43;
      uint64_t v46 = 0;
      uint64_t v47 = v86;
    }
    uint64_t v50 = *(void **)(a3 + 16);
    uint64_t v51 = v50[104];
    uint64_t v52 = v76;
    if (v51) {
      uint64_t v53 = *(unsigned __int16 *)(v51 + 8);
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v32 = sub_1CD7FF4E8(v50, (const char *)0x92, (const llvm::APInt *)&v82, v44, v45, v47, v46, v53);
    LODWORD(v33) = v54;
    if (v84 != v86) {
      free(v84);
    }
    goto LABEL_55;
  }
  uint64_t v31 = *(void *)(v13 + 32);
  uint64_t v32 = *(uint64_t **)v31;
  uint64_t v33 = (void *)(v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(v31 + 8));
  uint64_t v35 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v81, (uint64_t)v18, v19);
  *(void *)&long long v81 = v35;
  *((void *)&v81 + 1) = v34;
  if (!(_BYTE)v35)
  {
    if ((*(_DWORD *)(v34 + 8) & 0xFE) == 0x12) {
      int v71 = *(unsigned __int8 *)(**(void **)(v34 + 16) + 8);
    }
    else {
      int v71 = *(_DWORD *)(v34 + 8);
    }
    if (v71 != 13) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (v35 - 120 < 0x20
    || v35 - 2 < 6
    || v35 - 15 < 0x3C)
  {
LABEL_84:
    uint64_t v72 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v73 = *((void *)v72 + 104);
    if (v73) {
      __int16 v74 = *(_WORD *)(v73 + 8);
    }
    else {
      __int16 v74 = 0;
    }
    uint64_t v32 = sub_1CD7F3564(v72, (const char *)0xC9, (uint64_t)&v82, v35, v34, (uint64_t)v32, v33, v74);
    LODWORD(v33) = v75;
  }
LABEL_87:
  uint64_t v52 = v76;
LABEL_55:
  uint64_t v55 = (uint64_t)sub_1CD7FB2A8(*(void *)(a3 + 16), v10, v11, (uint64_t)&v82, (uint64_t)v32, v33, v52, v15, v6[12]);
LABEL_78:
  uint64_t v3 = v55;
LABEL_79:
  if (v82) {
    llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
  }
  return v3;
}

uint64_t *sub_1CD407E1C(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int *a5, unsigned int *a6, _OWORD *a7, int *a8, unsigned int *a9, unsigned int *a10, _OWORD *a11)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x800000000;
  sub_1CD40ABFC(a1, (uint64_t)&v16, a4, a5, a6, a7, a8, a9, a10, a11);
  uint64_t v14 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD407EFC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, _OWORD *a6, unsigned int *a7, unsigned int *a8, _OWORD *a9)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD40AD6C(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD407FD4(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, _OWORD *a9)
{
  v22[12] = *MEMORY[0x1E4F143B8];
  unsigned int v20 = v22;
  uint64_t v21 = 0x600000000;
  uint64_t v18 = a4;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD40AE20(a1, (uint64_t)&v20, *a5, a6, a7, a8, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CD4080F0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, _OWORD *a8)
{
  v15[10] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x500000000;
  sub_1CD40AE20(a1, (uint64_t)&v13, a4, a5, a6, a7, a8);
  uint64_t v11 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v13, v14);
  if (v13 != v15) {
    free(v13);
  }
  return v11;
}

uint64_t *sub_1CD4081C0(uint64_t a1, uint64_t a2, int *a3, _OWORD *a4, int *a5)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  int v9 = v11;
  uint64_t v10 = 0x300000000;
  sub_1CD402C74(a1, (uint64_t)&v9, a3, a4, a5);
  uint64_t v7 = sub_1CD801450(a1, 2162, a2, (llvm *)4, 0, (uint64_t *)v9, v10);
  if (v9 != v11) {
    free(v9);
  }
  return v7;
}

void sub_1CD408278(uint64_t a1, uint64_t a2, _DWORD *a3, llvm::APFloatBase *a4)
{
  uint64_t v7 = *(unsigned __int8 **)(a2 + 64);
  int v29 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v29, v7, 2);
  }
  int v30 = *(_DWORD *)(a2 + 60);
  unsigned int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0xCF)
  {
    if (v8 == 208)
    {
      if (**(unsigned char **)(a2 + 40) != 3) {
        goto LABEL_27;
      }
      uint64_t v21 = *(uint64_t **)(a2 + 32);
      uint64_t v13 = *v21;
      uint64_t v14 = (void *)v21[1];
      uint64_t v22 = *((void *)a4 + 104);
      if (v22) {
        __int16 v16 = *(_WORD *)(v22 + 8);
      }
      else {
        __int16 v16 = 0;
      }
      uint64_t v17 = a4;
      uint64_t v18 = 423;
    }
    else
    {
      if (v8 != 209 || **(unsigned char **)(a2 + 40) != 3) {
        goto LABEL_27;
      }
      uint64_t v12 = *(uint64_t **)(a2 + 32);
      uint64_t v13 = *v12;
      uint64_t v14 = (void *)v12[1];
      uint64_t v15 = *((void *)a4 + 104);
      if (v15) {
        __int16 v16 = *(_WORD *)(v15 + 8);
      }
      else {
        __int16 v16 = 0;
      }
      uint64_t v17 = a4;
      uint64_t v18 = 422;
    }
    uint64_t v24 = sub_1CD7F3564(v17, (const char *)v18, (uint64_t)&v29, (llvm *)4, 0, v13, v14, v16);
    uint64_t v25 = *((void *)a4 + 104);
    if (v25) {
      __int16 v26 = *(_WORD *)(v25 + 8);
    }
    else {
      __int16 v26 = 0;
    }
    char v19 = sub_1CD7F3564(a4, (const char *)0xC9, (uint64_t)&v29, (llvm *)3, 0, (uint64_t)v24, v23, v26);
  }
  else
  {
    if (v8 != 13)
    {
      if (v8 == 47)
      {
        uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
        uint64_t v10 = (unsigned int *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u) {
          uint64_t v10 = *(unsigned int **)v10;
        }
        uint64_t v11 = *v10;
        if ((v11 - 1282) < 0x190 || (v11 - 1682) < 0x8C) {
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, a4, v11, a3, 4, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB9D1380, 0, 1, 25);
        }
      }
      goto LABEL_27;
    }
    char v19 = sub_1CB9E7754(a2, a4);
  }
  if (v19)
  {
    unsigned int v27 = a3[2];
    if (v27 >= a3[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v28 = (uint64_t **)(*(void *)a3 + 16 * v27);
    *int v28 = v19;
    v28[1] = (uint64_t *)v20;
    ++a3[2];
  }
LABEL_27:
  if (v29) {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  }
}

uint64_t sub_1CD408494(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, llvm::APFloatBase *a8, uint64_t a9)
{
  if ((int)a4 <= 99 || (a4 - 100) > 8) {
    goto LABEL_10;
  }
  int v16 = 1 << (a4 - 100);
  if ((v16 & 0x19B) != 0) {
    return a2;
  }
  if ((v16 & 0x44) != 0)
  {
    uint64_t v18 = *(unsigned __int8 **)a7;
    uint64_t v24 = v18;
    if (v18) {
      llvm::MetadataTracking::track((uint64_t)&v24, v18, 2);
    }
    int v25 = *(_DWORD *)(a7 + 8);
    sub_1CB9E7BFC(a2, a3, (const llvm::APInt *)&v24, a8, a4, a6, a1, a9, 0);
    char v19 = v24;
    if (v24)
    {
      unsigned int v20 = &v24;
LABEL_14:
      llvm::MetadataTracking::untrack((uint64_t)v20, v19);
    }
  }
  else
  {
LABEL_10:
    uint64_t v21 = *(unsigned __int8 **)a7;
    uint64_t v22 = v21;
    if (v21) {
      llvm::MetadataTracking::track((uint64_t)&v22, v21, 2);
    }
    int v23 = *(_DWORD *)(a7 + 8);
    sub_1CB9E7BFC(a2, a3, (const llvm::APInt *)&v22, a8, a4, a6, a1, a9, 1);
    char v19 = v22;
    if (v22)
    {
      unsigned int v20 = &v22;
      goto LABEL_14;
    }
  }
  return a2;
}

uint64_t sub_1CD4085E4(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v16[24] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a5 + 8)) {
    return 1;
  }
  uint64_t v11 = sub_1CB920814(a2);
  v15[0] = v16;
  v15[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)v14, a2, a4, a3, (uint64_t)v15, a6);
  uint64_t v12 = llvm::CCState::CheckReturn((uint64_t)v14, a5, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))v11);
  sub_1CB8393F0(v14);
  if (v15[0] != v16) {
    free(v15[0]);
  }
  return v12;
}

uint64_t *sub_1CD4086E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, const llvm::APInt *a8, uint64_t *a9)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  if ((int)a4 <= 99 || (char v15 = a4 - 100, (a4 - 100) > 8))
  {
LABEL_25:
    int v30 = *(unsigned __int8 **)a8;
    uint64_t v31 = v30;
    if (v30) {
      llvm::MetadataTracking::track((uint64_t)&v31, v30, 2);
    }
    int v32 = *((_DWORD *)a8 + 2);
    uint64_t v17 = sub_1CB9E81B8(a2, (void *)a3, (uint64_t)&v31, a9, a4, a6, a7, 1);
    uint64_t v18 = v31;
    if (!v31) {
      return v17;
    }
    char v19 = &v31;
    goto LABEL_8;
  }
  if (((1 << v15) & 0x11B) != 0)
  {
    int v16 = *(unsigned __int8 **)a8;
    uint64_t v33 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v33, v16, 2);
    }
    int v34 = *((_DWORD *)a8 + 2);
    uint64_t v17 = sub_1CB9E81B8(a2, (void *)a3, (uint64_t)&v33, a9, a4, a6, a7, 0);
    uint64_t v18 = v33;
    if (!v33) {
      return v17;
    }
    char v19 = &v33;
LABEL_8:
    llvm::MetadataTracking::untrack((uint64_t)v19, v18);
    return v17;
  }
  if (((1 << v15) & 0xC0) == 0)
  {
    if (a4 == 102)
    {
      uint64_t v35 = v37;
      uint64_t v36 = 0x200000001;
      v37[0] = sub_1CD7EBF14((uint64_t)a9, 0, a8, (llvm *)6, 0, 1, 0);
      v37[1] = v24;
      v37[2] = a2;
      v37[3] = a3;
      uint64_t v25 = *(void *)(a1 + 184296);
      LODWORD(v36) = 2;
      if (*(unsigned char *)(v25 + 326)) {
        int v26 = 8268;
      }
      else {
        int v26 = 8267;
      }
      unsigned int v27 = sub_1CD801450((uint64_t)a9, v26, (uint64_t)a8, (llvm *)1, 0, (uint64_t *)v35, 2);
      uint64_t v28 = a9[104];
      if (v28) {
        __int16 v29 = *(_WORD *)(v28 + 8);
      }
      else {
        __int16 v29 = 0;
      }
      uint64_t v17 = sub_1CD7F3564((llvm::APFloatBase *)a9, (const char *)0x187, (uint64_t)a8, (llvm *)1, 0, (uint64_t)v27, (void *)(a3 & 0xFFFFFFFF00000000), v29);
      if (v35 != v37) {
        free(v35);
      }
      return v17;
    }
    goto LABEL_25;
  }
  uint64_t v21 = a9[104];
  if (v21) {
    __int16 v22 = *(_WORD *)(v21 + 8);
  }
  else {
    __int16 v22 = 0;
  }

  return sub_1CD7F3564((llvm::APFloatBase *)a9, (const char *)0x188, (uint64_t)a8, (llvm *)1, 0, a2, (void *)a3, v22);
}

uint64_t sub_1CD408A14(uint64_t a1, char *a2, uint64_t a3)
{
  if (a3 != 1) {
    return sub_1CD80FE44(a1, a2, a3);
  }
  unsigned int v3 = *a2 - 102;
  BOOL v4 = v3 > 0xC;
  int v5 = (1 << v3) & 0x1005;
  if (v4 || v5 == 0) {
    return sub_1CD80FE44(a1, a2, a3);
  }
  else {
    return 1;
  }
}

uint64_t sub_1CD408A4C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, unsigned __int8 a5)
{
  if (a4 != 1) {
    return sub_1CD810018(a1, a2, a3, a4, a5);
  }
  uint64_t result = 0;
  int v7 = (char)*a3;
  if (v7 != 114 && v7 != 104)
  {
    if (v7 == 102) {
      return 0;
    }
    return sub_1CD810018(a1, a2, a3, a4, a5);
  }
  return result;
}

BOOL sub_1CD408AA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 == 76 || a3 - 9 < 2;
}

unsigned __int16 *sub_1CD408AB8(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int *a4, const llvm::APInt *a5, uint64_t a6)
{
  uint64_t v9 = (uint64_t *)a2;
  uint64_t v11 = *(void *)(a6 + 832);
  if (v11) {
    __int16 v12 = *(_WORD *)(v11 + 8);
  }
  else {
    __int16 v12 = 0;
  }
  uint64_t v13 = sub_1CD7F3564((llvm::APFloatBase *)a6, (const char *)0xD8, (uint64_t)a5, (llvm *)0x31, 0, *(void *)a2, *(void **)(a2 + 8), v12);
  uint64_t v15 = v14;
  __int16 v16 = 0;
  uint64_t v17 = *(void *)(a6 + 832);
  if (v17) {
    __int16 v16 = *(_WORD *)(v17 + 8);
  }
  uint64_t v152 = a1;
  uint64_t v155 = (uint64_t *)a3;
  uint64_t v18 = sub_1CD7F3564((llvm::APFloatBase *)a6, (const char *)0xD8, (uint64_t)a5, (llvm *)0x31, 0, *(void *)a3, *(void **)(a3 + 8), v16);
  uint64_t v20 = v19;
  uint64_t v21 = sub_1CD7EBF14(a6, 0, a5, (llvm *)5, 0, 0, 0);
  __int16 v24 = 0;
  uint64_t v25 = *(void *)(a6 + 832);
  if (v25) {
    __int16 v24 = *(_WORD *)(v25 + 8);
  }
  int v26 = sub_1CCFDED5C(a6, 148, a5, (llvm *)5, 0, (uint64_t)v13, v15, v23, (uint64_t)v21, v22, v24);
  unsigned int v28 = v27;
  __int16 v29 = sub_1CD7EBF14(a6, 1, a5, (llvm *)5, 0, 0, 0);
  __int16 v32 = 0;
  uint64_t v33 = *(void *)(a6 + 832);
  if (v33) {
    __int16 v32 = *(_WORD *)(v33 + 8);
  }
  uint64_t v153 = sub_1CCFDED5C(a6, 148, a5, (llvm *)5, 0, (uint64_t)v13, v15, v31, (uint64_t)v29, v30, v32);
  unsigned int v35 = v34;
  uint64_t v36 = sub_1CD7EBF14(a6, 0, a5, (llvm *)5, 0, 0, 0);
  __int16 v39 = 0;
  uint64_t v40 = *(void *)(a6 + 832);
  if (v40) {
    __int16 v39 = *(_WORD *)(v40 + 8);
  }
  uint64_t v41 = v28;
  uint64_t v154 = v35;
  unint64_t v42 = sub_1CCFDED5C(a6, 148, a5, (llvm *)5, 0, (uint64_t)v18, v20, v38, (uint64_t)v36, v37, v39);
  unsigned int v44 = v43;
  uint64_t v150 = v43;
  uint64_t v45 = sub_1CD7EBF14(a6, 1, a5, (llvm *)5, 0, 0, 0);
  uint64_t v48 = *(void *)(a6 + 832);
  if (v48) {
    LOWORD(v48) = *(_WORD *)(v48 + 8);
  }
  uint64_t result = (unsigned __int16 *)sub_1CCFDED5C(a6, 148, a5, (llvm *)5, 0, (uint64_t)v18, v20, v47, (uint64_t)v45, v46, v48);
  uint64_t v52 = result;
  unsigned int v53 = v50;
  uint64_t v54 = v50;
  unsigned int v55 = *a4;
  if (*a4 != 22 && v55 != 17)
  {
    uint64_t v67 = *v155;
    int v68 = *(unsigned __int16 *)(*v155 + 24);
    uint64_t v149 = v50;
    if (v68 == 35 || v68 == 11)
    {
      switch(v55)
      {
        case 0xBu:
        case 0x13u:
          unsigned int v55 = 11;
          goto LABEL_34;
        case 0xCu:
          goto LABEL_34;
        case 0xDu:
        case 0x15u:
          unsigned int v55 = 13;
          goto LABEL_34;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
          __break(1u);
          return result;
        case 0x12u:
          uint64_t v123 = *(void *)(v67 + 80);
          unsigned int v124 = *(_DWORD *)(v123 + 32);
          if (!v124) {
            goto LABEL_80;
          }
          uint64_t result = (unsigned __int16 *)(v123 + 24);
          if (v124 > 0x40)
          {
            char v144 = v52;
            uint64_t result = (unsigned __int16 *)llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)result);
            uint64_t v52 = v144;
            if (result == v124) {
              goto LABEL_80;
            }
          }
          else if (*(void *)result == 0xFFFFFFFFFFFFFFFFLL >> -(char)v124)
          {
            goto LABEL_80;
          }
LABEL_91:
          unsigned int v55 = 10;
          goto LABEL_34;
        case 0x14u:
          uint64_t v121 = *(void *)(v67 + 80);
          uint64_t result = (unsigned __int16 *)(v121 + 24);
          unsigned int v122 = *(_DWORD *)(v121 + 32);
          if (v122 > 0x40)
          {
            int v134 = v52;
            uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
            uint64_t v52 = v134;
            if (result != v122) {
              goto LABEL_71;
            }
          }
          else if (*(void *)result)
          {
LABEL_71:
            unsigned int v55 = 12;
            goto LABEL_34;
          }
LABEL_80:
          uint64_t *v9 = (uint64_t)v153;
          *((_DWORD *)v9 + 2) = v35;
          *uint64_t v155 = (uint64_t)v52;
          *((_DWORD *)v155 + 2) = v53;
          return result;
        default:
          goto LABEL_91;
      }
    }
    unsigned int v55 = dword_1CDB0D69C[v55 - 10];
LABEL_34:
    uint64_t v148 = (uint64_t)v52;
    uint64_t v157 = 0;
    int v158 = 1;
    char v159 = 1;
    uint64_t v160 = a6;
    unsigned int v80 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v26[5] + 16 * v41), *(void *)(v26[5] + 16 * v41 + 8));
    uint64_t v82 = sub_1CD00C82C(v152, v80, v81, (uint64_t)v26, v41, (uint64_t)v42, (void *)v150, v55, 0, (uint64_t)&v157, a5);
    if (!v82)
    {
      uint64_t v125 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v26[5] + 16 * v41), *(void *)(v26[5] + 16 * v41 + 8));
      uint64_t v82 = sub_1CD3DC614((void *)a6, a5, v125, v126, (uint64_t)v26, v41, (uint64_t)v42, v150, v55, 0, 0, 0, 0);
    }
    uint64_t v84 = (uint64_t)v82;
    unsigned int v85 = v83;
    uint64_t v86 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v153[5] + 16 * v35), *(void *)(v153[5] + 16 * v35 + 8));
    uint64_t result = (unsigned __int16 *)sub_1CD00C82C(v152, v86, v87, (uint64_t)v153, v35, v148, (void *)v149, *a4, 0, (uint64_t)&v157, a5);
    if (!result)
    {
      long long v127 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v153[5] + 16 * v35), *(void *)(v153[5] + 16 * v35 + 8));
      uint64_t v129 = v128;
      uint64_t v130 = sub_1CD7EE368((void *)a6, *a4);
      uint64_t v133 = *(void *)(a6 + 832);
      if (v133) {
        LOWORD(v133) = *(_WORD *)(v133 + 8);
      }
      uint64_t result = (unsigned __int16 *)sub_1CD7F5D38((void *)a6, (const char *)0xC1, a5, v127, v129, (uint64_t)v153, v154, v132, v148, v149, v130, v131, SHIDWORD(v131), v133);
    }
    uint64_t v89 = (uint64_t)result;
    int v90 = *(unsigned __int16 *)(v84 + 24);
    if (v90 == 35 || v90 == 11) {
      uint64_t v91 = v84;
    }
    else {
      uint64_t v91 = 0;
    }
    uint64_t v151 = v88;
    int v92 = result[12];
    if (v92 == 35 || v92 == 11) {
      unsigned int v93 = result;
    }
    else {
      unsigned int v93 = 0;
    }
    if (v91)
    {
      uint64_t v94 = *(void *)(v91 + 80);
      uint64_t result = (unsigned __int16 *)(v94 + 24);
      unsigned int v95 = *(_DWORD *)(v94 + 32);
      if (v95 > 0x40)
      {
        uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if (result == v95) {
          goto LABEL_60;
        }
      }
      else if (!*(void *)result)
      {
        goto LABEL_60;
      }
    }
    if (!v93) {
      goto LABEL_85;
    }
    uint64_t v96 = *((void *)v93 + 10);
    unint64_t v97 = (llvm::APInt *)(v96 + 24);
    unsigned int v98 = *(_DWORD *)(v96 + 32);
    if (v98 > 0x40)
    {
      uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v96 + 24));
      if (result != v98) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v99 = *(llvm::APInt **)v97;
      if (*(void *)v97)
      {
LABEL_49:
        if (v99 != (llvm::APInt *)1) {
          goto LABEL_85;
        }
        HIDWORD(v101) = *a4;
        LODWORD(v101) = *a4 - 10;
        unsigned int v100 = v101 >> 1;
        if (v100 > 5 || ((1 << v100) & 0x33) == 0) {
          goto LABEL_85;
        }
LABEL_60:
        long long v104 = v155;
        int v105 = v151;
LABEL_61:
        uint64_t *v9 = v89;
        *((_DWORD *)v9 + 2) = v105;
        uint64_t *v104 = 0;
        *((_DWORD *)v104 + 2) = 0;
        return result;
      }
    }
    HIDWORD(v103) = *a4 - 11;
    LODWORD(v103) = HIDWORD(v103);
    unsigned int v102 = v103 >> 1;
    if (v102 <= 5 && ((1 << v102) & 0x33) != 0) {
      goto LABEL_60;
    }
    if (v98 < 0x41) {
      goto LABEL_84;
    }
LABEL_82:
    uint64_t result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase(v97);
    if (v98 - result <= 0x40)
    {
      unint64_t v97 = *(llvm::APInt **)v97;
LABEL_84:
      uint64_t v99 = *(llvm::APInt **)v97;
      goto LABEL_49;
    }
LABEL_85:
    uint64_t v135 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v153[5] + 16 * v154), *(void *)(v153[5] + 16 * v154 + 8));
    unsigned int v137 = sub_1CD00C82C(v152, v135, v136, (uint64_t)v153, v154, v148, (void *)v149, 0x11u, 0, (uint64_t)&v157, a5);
    uint64_t *v9 = (uint64_t)v137;
    *((_DWORD *)v9 + 2) = v139;
    if (!v137)
    {
      uint64_t v145 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, void, void, void))(*(void *)v152 + 400))(v152, *(void *)(**(void **)(a6 + 40) + 40) + 272, *(void *)(a6 + 56), *(void *)(v153[5] + 16 * v154), *(void *)(v153[5] + 16 * v154 + 8));
      unsigned int v137 = sub_1CD3DC614((void *)a6, a5, v145, v146, (uint64_t)v153, v154, v148, v149, 0x11u, 0, 0, 0, 0);
      uint64_t *v9 = (uint64_t)v137;
      *((_DWORD *)v9 + 2) = v147;
    }
    uint64_t v140 = *(void *)(v84 + 40) + 16 * v85;
    int v141 = *(llvm **)v140;
    uint64_t v142 = *(void *)(v140 + 8);
    uint64_t v143 = *(void *)(a6 + 832);
    if (v143) {
      LOWORD(v143) = *(_WORD *)(v143 + 8);
    }
    long long v104 = v155;
    uint64_t result = (unsigned __int16 *)sub_1CD7F5D38((void *)a6, (const char *)0xBE, a5, v141, v142, (uint64_t)v137, v9[1], v138, v84, v85, v89, v151, SHIDWORD(v151), v143);
    uint64_t v89 = (uint64_t)result;
    goto LABEL_61;
  }
  uint64_t v56 = v35;
  if (v42 != (uint64_t *)result) {
    goto LABEL_23;
  }
  if (v44 != v50) {
    goto LABEL_23;
  }
  int v57 = *((unsigned __int16 *)v42 + 12);
  if (v57 != 35 && v57 != 11) {
    goto LABEL_23;
  }
  uint64_t v58 = v42[10];
  unsigned int v59 = *(_DWORD *)(v58 + 32);
  if (v59)
  {
    unsigned int v60 = (llvm::APInt *)(v58 + 24);
    if (v59 > 0x40)
    {
      uint64_t v69 = v52;
      uint64_t v70 = v41;
      int v71 = v26;
      uint64_t v72 = v9;
      uint64_t v73 = v50;
      int v74 = llvm::APInt::countTrailingOnesSlowCase(v60);
      uint64_t v54 = v73;
      uint64_t v9 = v72;
      int v26 = v71;
      uint64_t v41 = v70;
      uint64_t v56 = v154;
      uint64_t v52 = v69;
      if (v74 != v59) {
        goto LABEL_23;
      }
    }
    else if (*(void *)v60 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v59)
    {
LABEL_23:
      uint64_t v61 = v26[5] + 16 * v41;
      int v62 = *(llvm **)v61;
      uint64_t v63 = *(void *)(v61 + 8);
      uint64_t v64 = *(void *)(a6 + 832);
      uint64_t v65 = v54;
      uint64_t v66 = (uint64_t)v52;
      if (v64) {
        LOWORD(v64) = *(_WORD *)(v64 + 8);
      }
      uint64_t *v9 = (uint64_t)sub_1CCFDED5C(a6, 173, a5, v62, v63, (uint64_t)v26, v41, v51, (uint64_t)v42, v150, v64);
      *((_DWORD *)v9 + 2) = v107;
      uint64_t v108 = v26[5] + 16 * v41;
      unsigned int v109 = *(llvm **)v108;
      uint64_t v110 = *(void *)(v108 + 8);
      uint64_t v111 = *(void *)(a6 + 832);
      if (v111) {
        LOWORD(v111) = *(_WORD *)(v111 + 8);
      }
      uint64_t v112 = sub_1CCFDED5C(a6, 173, a5, v109, v110, (uint64_t)v153, v56, v106, v66, v65, v111);
      *uint64_t v155 = (uint64_t)v112;
      *((_DWORD *)v155 + 2) = v114;
      uint64_t v116 = *(void *)(a6 + 832);
      if (v116) {
        LOWORD(v116) = *(_WORD *)(v116 + 8);
      }
      uint64_t v115 = *(void *)(*v9 + 40) + 16 * *((unsigned int *)v9 + 2);
      int v117 = sub_1CCFDED5C(a6, 172, a5, *(llvm **)v115, *(void *)(v115 + 8), *v9, v9[1], v113, (uint64_t)v112, v155[1], v116);
      uint64_t *v9 = (uint64_t)v117;
      *((_DWORD *)v9 + 2) = v118;
      uint64_t v119 = v117[5] + 16 * v118;
      uint64_t result = (unsigned __int16 *)sub_1CD7EBF14(a6, 0, a5, *(llvm **)v119, *(void *)(v119 + 8), 0, 0);
      *uint64_t v155 = (uint64_t)result;
      *((_DWORD *)v155 + 2) = v120;
      return result;
    }
  }
  uint64_t v75 = v26[5] + 16 * v41;
  uint64_t v76 = *(llvm **)v75;
  uint64_t v77 = *(void *)(v75 + 8);
  uint64_t v78 = *(void *)(a6 + 832);
  if (v78) {
    LOWORD(v78) = *(_WORD *)(v78 + 8);
  }
  uint64_t result = (unsigned __int16 *)sub_1CCFDED5C(a6, 171, a5, v76, v77, (uint64_t)v26, v41, v51, (uint64_t)v153, v56, v78);
  uint64_t *v9 = (uint64_t)result;
  *((_DWORD *)v9 + 2) = v79;
  *uint64_t v155 = (uint64_t)v42;
  *((_DWORD *)v155 + 2) = v44;
  return result;
}

uint64_t sub_1CD409590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 1968))(a1, a2, 0);
  if (result)
  {
    uint64_t v6 = *(unsigned __int16 *)(result + 58);
    if (*(_WORD *)(result + 58))
    {
      if (v6 == 1)
      {
        unsigned int v7 = *(_DWORD *)(a3 + 8);
        if (v7 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v8 = (uint64_t *)(*(void *)a3 + 16 * v7);
        *unsigned int v8 = result;
        v8[1] = v5;
        ++*(_DWORD *)(a3 + 8);
      }
      else
      {
        uint64_t v9 = 0;
        unsigned int v10 = *(_DWORD *)(a3 + 8);
        do
        {
          if (v10 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v11 = (uint64_t *)(*(void *)a3 + 16 * v10);
          *uint64_t v11 = result;
          v11[1] = v9;
          unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v10;
          ++v9;
        }
        while (v6 != v9);
      }
    }
  }
  return result;
}

unint64_t sub_1CD4096A8(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a4;
  v6[1] = a5;
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12) {
      return 4;
    }
    return sub_1CD3D91B4((llvm::EVT *)v6, a2, a3);
  }
  if (a4 - 15 < 0x9C) {
    return sub_1CD3D91B4((llvm::EVT *)v6, a2, a3);
  }
  return 4;
}

uint64_t *sub_1CD409700(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = sub_1CD7F95FC((uint64_t)a1, 1, 0, 172, 0);
  uint64_t v14 = v13;
  uint64_t v21 = a2;
  int v22 = a3;
  uint64_t v23 = sub_1CD7EB364((uint64_t)a1, a4, a6, 1);
  uint64_t v24 = v15;
  __int16 v16 = sub_1CD7EB364((uint64_t)a1, a5, a6, 1);
  __int16 v17 = 0;
  uint64_t v25 = v16;
  uint64_t v26 = v18;
  uint64_t v19 = a1[104];
  if (v19) {
    __int16 v17 = *(_WORD *)(v19 + 8);
  }
  return sub_1CD7FF854(a1, (const char *)0x10D, a6, v12, v14, &v21, 3, v17);
}

uint64_t *sub_1CD409804(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::APInt *a11)
{
  unsigned char v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = sub_1CD7F95FC((uint64_t)a1, 1, 0, 172, 0);
  v24[0] = a2;
  v24[1] = a3;
  v24[2] = a4;
  v24[3] = a5;
  void v24[4] = a6;
  v24[5] = a7;
  if (a9)
  {
    v24[6] = a9;
    v24[7] = a10;
    uint64_t v20 = 4;
  }
  else
  {
    uint64_t v20 = 3;
  }
  uint64_t v21 = a1[104];
  if (v21) {
    __int16 v22 = *(_WORD *)(v21 + 8);
  }
  else {
    __int16 v22 = 0;
  }
  return sub_1CD7FF854(a1, (const char *)0x10E, a11, v19, v18, v24, v20, v22);
}

uint64_t sub_1CD40993C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return 4;
  }
  else {
    return 5;
  }
}

void sub_1CD409950(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if ((*(unsigned char *)(v2 + 8) & 4) != 0)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 40);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 32 * v4;
      uint64_t v7 = 2;
      do
      {
        if ((*(unsigned char *)(*(void *)(v2 + 40) + v7) & 4) != 0)
        {
          uint64_t v8 = *(void *)(a2 + 32) + v5;
          if (*(_DWORD *)(v8 + 4)) {
            llvm::MachineOperand::setIsDef(v8, 1);
          }
        }
        v5 += 32;
        v7 += 6;
      }
      while (v6 != v5);
    }
  }
}

uint64_t *sub_1CD4099D4(uint64_t a1, uint64_t a2, void *a3, llvm *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a3;
  uint64_t v14 = (uint64_t *)a2;
  uint64_t v54 = (uint64_t *)a2;
  unsigned int v55 = a3;
  if (!a6)
  {
    uint64_t v27 = (unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
    uint64_t v28 = *v27;
    if (v28 != 174 && (v28 != a4 || !(_BYTE)a4 && *((void *)v27 + 1) != a5))
    {
      __int16 v29 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v30 = *((void *)v29 + 104);
      if (v30) {
        __int16 v31 = *(_WORD *)(v30 + 8);
      }
      else {
        __int16 v31 = 0;
      }
      return sub_1CD7F3564(v29, (const char *)0xD8, a7, a4, a5, a2, a3, v31);
    }
    return v14;
  }
  if ((_BYTE)a4)
  {
    if (a4 == 10)
    {
      uint64_t v15 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v16 = *((void *)v15 + 104);
      if (v16) {
        __int16 v17 = *(_WORD *)(v16 + 8);
      }
      else {
        __int16 v17 = 0;
      }
      uint64_t v18 = a7;
      uint64_t v19 = 9;
      uint64_t v20 = 0;
LABEL_7:
      uint64_t v14 = sub_1CD7F3564(v15, (const char *)0xD8, v18, (llvm *)v19, v20, (uint64_t)v14, v13, v17);
      LODWORD(v13) = v21;
      uint64_t v54 = v14;
      LODWORD(v55) = v21;
      goto LABEL_8;
    }
    if (((_BYTE)a4 - 120) < 0x20u
      || ((_BYTE)a4 - 2) < 6u
      || ((_BYTE)a4 - 15) < 0x3Cu)
    {
LABEL_24:
      uint64_t v33 = *(llvm::IntegerType **)(*(void *)(a8 + 16) + 56);
      unsigned int v35 = sub_1CD3E3904((unsigned int *)&v54);
      if (v34 == 1)
      {
        unsigned int v53 = v35;
        unsigned int v35 = v53;
      }
      uint64_t v19 = sub_1CB8E40FC(v33, v35);
      uint64_t v20 = v36;
      uint64_t v15 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v14 = v54;
      uint64_t v13 = v55;
      uint64_t v37 = *((void *)v15 + 104);
      if (v37) {
        __int16 v17 = *(_WORD *)(v37 + 8);
      }
      else {
        __int16 v17 = 0;
      }
      uint64_t v18 = a7;
      goto LABEL_7;
    }
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v32 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v32 = *(_DWORD *)(a5 + 8);
    }
    if (v32 == 13) {
      goto LABEL_24;
    }
  }
LABEL_8:
  if (a6 != 1)
  {
    if (a6 == 2)
    {
      __int16 v22 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v23 = v55;
      uint64_t v38 = *((void *)v22 + 104);
      if (v38) {
        __int16 v25 = *(_WORD *)(v38 + 8);
      }
      else {
        __int16 v25 = 0;
      }
      uint64_t v26 = 198;
    }
    else
    {
      if (a6 != 3) {
        llvm::report_fatal_error((llvm *)"Unexpected ext type for load", (const llvm::Twine *)1);
      }
      __int16 v22 = *(llvm::APFloatBase **)(a8 + 16);
      uint64_t v23 = v55;
      uint64_t v24 = *((void *)v22 + 104);
      if (v24) {
        __int16 v25 = *(_WORD *)(v24 + 8);
      }
      else {
        __int16 v25 = 0;
      }
      uint64_t v26 = 199;
    }
    goto LABEL_36;
  }
  if (a4 == 10)
  {
    __int16 v22 = *(llvm::APFloatBase **)(a8 + 16);
    uint64_t v23 = v55;
    uint64_t v44 = *((void *)v22 + 104);
    if (v44) {
      __int16 v25 = *(_WORD *)(v44 + 8);
    }
    else {
      __int16 v25 = 0;
    }
    uint64_t v26 = 215;
    uint64_t v39 = a7;
    uint64_t v40 = 10;
    uint64_t v41 = 0;
    goto LABEL_37;
  }
  uint64_t v45 = (unsigned __int8 *)(v14[5] + 16 * v13);
  int v46 = *v45;
  if (v46 != a4)
  {
    if ((_BYTE)a4)
    {
      if (((_BYTE)a4 - 120) < 0x20u
        || ((_BYTE)a4 - 2) < 6u
        || ((_BYTE)a4 - 15) < 0x3Cu)
      {
LABEL_49:
        __int16 v22 = *(llvm::APFloatBase **)(a8 + 16);
        uint64_t v23 = v55;
        uint64_t v49 = *((void *)v22 + 104);
        if (v49) {
          __int16 v25 = *(_WORD *)(v49 + 8);
        }
        else {
          __int16 v25 = 0;
        }
        uint64_t v26 = 200;
LABEL_36:
        uint64_t v39 = a7;
        uint64_t v40 = (uint64_t)a4;
        uint64_t v41 = a5;
LABEL_37:
        uint64_t v14 = sub_1CD7F3564(v22, (const char *)v26, v39, (llvm *)v40, v41, (uint64_t)v14, v23, v25);
        LODWORD(v55) = v42;
        return v14;
      }
      goto LABEL_68;
    }
    goto LABEL_46;
  }
  uint64_t v47 = *((void *)v45 + 1);
  if (!(_BYTE)a4 && v47 != a5)
  {
LABEL_46:
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v48 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v48 = *(_DWORD *)(a5 + 8);
    }
    if (v48 == 13) {
      goto LABEL_49;
    }
    if (v46 != a4)
    {
LABEL_73:
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
        unsigned int v51 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
      }
      else {
        unsigned int v51 = *(_DWORD *)(a5 + 8);
      }
      if (v51 <= 6) {
        goto LABEL_78;
      }
      return v14;
    }
    uint64_t v47 = *((void *)v45 + 1);
  }
  if (*v45) {
    BOOL v50 = 1;
  }
  else {
    BOOL v50 = v47 == a5;
  }
  if (v50) {
    return v14;
  }
LABEL_68:
  if (!(_BYTE)a4) {
    goto LABEL_73;
  }
  if (((_BYTE)a4 + 104) < 0x13u
    || ((_BYTE)a4 - 8) < 7u
    || ((_BYTE)a4 - 75) < 0x2Du)
  {
LABEL_78:
    __int16 v22 = *(llvm::APFloatBase **)(a8 + 16);
    uint64_t v23 = v55;
    uint64_t v52 = *((void *)v22 + 104);
    if (v52) {
      __int16 v25 = *(_WORD *)(v52 + 8);
    }
    else {
      __int16 v25 = 0;
    }
    uint64_t v26 = 215;
    goto LABEL_36;
  }
  return v14;
}

void *sub_1CD409DD4(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1CB9E7754(a2, a1);
  if (result)
  {
    uint64_t v15 = (uint64_t)result;
    uint64_t v16 = v13;
    __int16 v17 = *(unsigned __int8 **)(a6 + 64);
    uint64_t v36 = v17;
    if (v17) {
      llvm::MetadataTracking::track((uint64_t)&v36, v17, 2);
    }
    int v37 = *(_DWORD *)(a6 + 60);
    uint64_t v18 = *(void *)(a2 + 40);
    uint64_t v19 = *(llvm **)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    int v21 = *(unsigned __int16 *)(v15 + 24);
    if (v21 == 35 || v21 == 11)
    {
      uint64_t v23 = *(void *)(v15 + 80);
      uint64_t v24 = (void *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u) {
        uint64_t v24 = (void *)*v24;
      }
      __int16 v25 = (void *)*v24;
      uint64_t v26 = *(void *)(a3 + 80);
      unsigned int v27 = *(_DWORD *)(v26 + 32);
      if (v27 > 0x40) {
        uint64_t v28 = **(void **)(v26 + 24);
      }
      else {
        uint64_t v28 = (uint64_t)(*(void *)(v26 + 24) << -(char)v27) >> -(char)v27;
      }
      uint64_t v30 = sub_1CD7EBF14((uint64_t)a1, (uint64_t)v25 + v28, (const llvm::APInt *)&v36, v19, v20, 0, 0);
    }
    else
    {
      uint64_t v29 = *((void *)a1 + 104);
      if (v29) {
        LOWORD(v29) = *(_WORD *)(v29 + 8);
      }
      uint64_t v30 = sub_1CCFDED5C((uint64_t)a1, 56, (const llvm::APInt *)&v36, v19, v20, v15, v16, v14, a3, a4, v29);
    }
    sub_1CD801F28((uint64_t)a1, *(void *)(a5 + 8), *(void *)(a5 + 16), (uint64_t)v30, v31);
    uint64_t result = sub_1CD40B83C((uint64_t)v34, a6);
    long long v32 = v34[3];
    *(_OWORD *)(a5 + 32) = v34[2];
    *(_OWORD *)(a5 + 48) = v32;
    *(_OWORD *)(a5 + 64) = v35[0];
    *(_OWORD *)(a5 + 76) = *(_OWORD *)((char *)v35 + 12);
    long long v33 = v34[1];
    *(_OWORD *)a5 = v34[0];
    *(_OWORD *)(a5 + 16) = v33;
    if (v36) {
      return (void *)llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
    }
  }
  return result;
}

uint64_t sub_1CD409F60(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  uint64_t v12 = sub_1CB9E7754(a2, a1);
  if (v12)
  {
    uint64_t v16 = (uint64_t)v12;
    uint64_t v17 = v13;
    uint64_t v18 = *(unsigned __int8 **)(a6 + 64);
    int v37 = v18;
    if (v18) {
      llvm::MetadataTracking::track((uint64_t)&v37, v18, 2);
    }
    int v38 = *(_DWORD *)(a6 + 60);
    uint64_t v19 = *(void *)(v10 + 40);
    uint64_t v20 = *(llvm **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    int v22 = *(unsigned __int16 *)(v16 + 24);
    if (v22 == 35 || v22 == 11)
    {
      uint64_t v24 = *(void *)(v16 + 80);
      __int16 v25 = (void *)(v24 + 24);
      if (*(_DWORD *)(v24 + 32) >= 0x41u) {
        __int16 v25 = (void *)*v25;
      }
      uint64_t v26 = (void *)*v25;
      uint64_t v27 = *(void *)(a3 + 80);
      unsigned int v28 = *(_DWORD *)(v27 + 32);
      if (v28 > 0x40) {
        uint64_t v29 = **(void **)(v27 + 24);
      }
      else {
        uint64_t v29 = (uint64_t)(*(void *)(v27 + 24) << -(char)v28) >> -(char)v28;
      }
      int v31 = sub_1CD7EBF14((uint64_t)a1, (uint64_t)v26 + v29, (const llvm::APInt *)&v37, v20, v21, 0, 0);
    }
    else
    {
      uint64_t v30 = *((void *)a1 + 104);
      if (v30) {
        LOWORD(v30) = *(_WORD *)(v30 + 8);
      }
      int v31 = sub_1CCFDED5C((uint64_t)a1, 56, (const llvm::APInt *)&v37, v20, v21, v16, v17, v14, a3, a4, v30);
    }
    sub_1CD801F28((uint64_t)a1, *(void *)(a5 + 8), *(void *)(a5 + 16), (uint64_t)v31, v32);
    sub_1CD40B878((uint64_t)v35, a6);
    long long v33 = v35[3];
    *(_OWORD *)(a5 + 32) = v35[2];
    *(_OWORD *)(a5 + 48) = v33;
    *(_OWORD *)(a5 + 64) = v36[0];
    *(_OWORD *)(a5 + 73) = *(_OWORD *)((char *)v36 + 9);
    long long v34 = v35[1];
    *(_OWORD *)a5 = v35[0];
    *(_OWORD *)(a5 + 16) = v34;
    if (v37) {
      llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
    }
    return 0;
  }
  return v10;
}

BOOL sub_1CD40A0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  if ((_BYTE)a4)
  {
    if (a4 - 15 >= 0x9C) {
      goto LABEL_7;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5 || *(void *)(v5 + 32)) {
    return 0;
  }
LABEL_7:
  int AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  if (AddrSpace != 64 && AddrSpace != 3) {
    return 1;
  }
  unint64_t v9 = sub_1CB896FB8((unsigned __int8 *)v12);
  if (v10 == 1)
  {
    unint64_t v11 = v9;
    unint64_t v9 = v11;
  }
  return (v9 & 0x1FFFFFFFFFFFFFFELL) != 0;
}

BOOL sub_1CD40A1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a4;
  v9[1] = a5;
  if ((_BYTE)a4) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v9);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  }
  if (v6 == 1)
  {
    unint64_t v8 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v8;
  }
  return ExtendedSizeInBits > 0x1F;
}

uint64_t sub_1CD40A20C()
{
  return 0;
}

uint64_t sub_1CD40A214(unint64_t a1, llvm::LLVMContext *a2, BOOL a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  llvm::TargetLoweringBase::getTypeConversion(a1, a2, a3, a4, (uint64_t)v5);
  if (v5[0] <= 6u) {
    return (0x2Bu >> v5[0]) & 1;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CD40A264()
{
  return 0;
}

uint64_t sub_1CD40A26C()
{
  return 1;
}

uint64_t sub_1CD40A274()
{
  return 1;
}

uint64_t sub_1CD40A27C()
{
  return 0;
}

uint64_t *sub_1CD40A284(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, _OWORD *a6)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  sub_1CD40A34C(a1, (uint64_t)&v11, a4, a5, a6);
  unint64_t v9 = sub_1CD801450(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v11, v12);
  if (v11 != v13) {
    free(v11);
  }
  return v9;
}

void sub_1CD40A34C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _OWORD *a5)
{
  uint64_t v9 = a3;
  char v10 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v9);
  uint64_t v9 = *a4;
  char v10 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v9);
  sub_1CD3D5F48(a1, a2, a5);
}

uint64_t *sub_1CD40A3D4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, uint64_t a7, int *a8)
{
  v21[10] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x500000000;
  uint64_t v17 = a5;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD40A7C4(a1, (uint64_t)&v19, *a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD40A4DC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  v16[12] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x600000000;
  sub_1CD40A84C(a1, (uint64_t)&v14, a5, a6, a7, a8);
  uint64_t v12 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

uint64_t *sub_1CD40A5B4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, unsigned int *a7, unsigned int *a8)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  uint64_t v17 = a5;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD40A8E8(a1, (uint64_t)&v19, *a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD40A6BC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  uint64_t v17 = a5;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD402990(a1, (uint64_t)&v19, *a6, a7, a8);
  uint64_t v15 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t *sub_1CD40A7C4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  sub_1CD401BBC(a1, a2, a4);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

void sub_1CD40A84C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a3;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  uint64_t v11 = *a4;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD401BBC(a1, a2, a5);
  sub_1CD401BBC(a1, a2, a6);
}

uint64_t *sub_1CD40A8E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a5;
  char v11 = 6;
  return sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
}

llvm::raw_ostream *sub_1CD40A97C(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unint64_t *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v6 = __clz(__rbit64((v3 >> 1) & ~(-1 << (v3 >> 58))));
    if (((v3 >> 1) & ~(-1 << (v3 >> 58))) != 0) {
      int v5 = v6;
    }
    else {
      int v5 = -1;
    }
  }
  else
  {
    int v5 = sub_1CB9FA0BC(v3);
  }
  sub_1CB8E509C(a2, "libaccess");
  uint64_t v7 = sub_1CB8E509C(a2, "[");
  unint64_t v8 = *v4;
  if (*v4) {
    unint64_t v9 = v8 >> 58;
  }
  else {
    unint64_t v9 = *(unsigned int *)(v8 + 64);
  }
  uint64_t v10 = llvm::raw_ostream::operator<<(v7, v9);
  sub_1CB8E509C(v10, "]: {");
  if (v5 != -1)
  {
    llvm::raw_ostream::operator<<(a2, v5);
    int v11 = sub_1CB9F9DF0(v4, v5);
    if (v11 != -1)
    {
      for (int i = v11; i != -1; int i = sub_1CB9F9DF0(v4, i))
      {
        sub_1CB8E509C(a2, " ");
        llvm::raw_ostream::operator<<(a2, i);
      }
    }
  }

  return sub_1CB8E509C(a2, "}");
}

uint64_t sub_1CD40AAA4(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F1D08;
  sub_1CB9F9ED4((void ***)(a1 + 16));
  return a1;
}

uint64_t *sub_1CD40AAE8(void *a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, llvm *a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = sub_1CD7FAB44((uint64_t)a1, (uint64_t)a6, a7, 1, 0, 172, 0);
  uint64_t v18 = v17;
  uint64_t v26 = a2;
  int v27 = a3;
  uint64_t v19 = sub_1CD7EEB94((uint64_t)a1, a5, a6, a7);
  __int16 v20 = 0;
  uint64_t v28 = v19;
  uint64_t v29 = v21;
  uint64_t v30 = a9;
  int v31 = a10;
  uint64_t v22 = a1[104];
  if (v22) {
    __int16 v20 = *(_WORD *)(v22 + 8);
  }
  if (a9) {
    uint64_t v23 = 3;
  }
  else {
    uint64_t v23 = 2;
  }
  return sub_1CD7FF854(a1, (const char *)0x32, a4, v16, v18, &v26, v23, v20);
}

void sub_1CD40ABFC(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, unsigned int *a5, _OWORD *a6, int *a7, unsigned int *a8, unsigned int *a9, _OWORD *a10)
{
  uint64_t v17 = a3;
  char v18 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v17);
  uint64_t v17 = *a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v17);
  sub_1CD40ACB8(a1, a2, *a5, a6, a7, a8, a9, a10);
}

void sub_1CD40ACB8(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, int *a5, unsigned int *a6, unsigned int *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v15 = *a5;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD40A34C(a1, a2, *a6, a7, a8);
}

void sub_1CD40AD6C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, unsigned int *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD40A34C(a1, a2, *a6, a7, a8);
}

void sub_1CD40AE20(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, _OWORD *a7)
{
  uint64_t v13 = a3;
  char v14 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v13);
  uint64_t v13 = *a4;
  char v14 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v13);
  sub_1CD40A34C(a1, a2, *a5, a6, a7);
}

uint64_t sub_1CD40AEC0(uint64_t result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = 0;
  int v6 = 401;
  int v7 = 1;
  if ((int)result > 2453)
  {
LABEL_4:
    if (result <= 0x995)
    {
      int v8 = 0;
      switch((int)result)
      {
        case 2454:
        case 2455:
          goto LABEL_69;
        case 2456:
          goto LABEL_42;
        case 2457:
          goto LABEL_24;
        case 2458:
          goto LABEL_36;
        case 2459:
          goto LABEL_43;
        case 2460:
          goto LABEL_63;
        case 2461:
          goto LABEL_70;
        case 2462:
        case 2463:
          goto LABEL_9;
        case 2464:
          goto LABEL_25;
        case 2465:
          goto LABEL_16;
        case 2466:
          goto LABEL_17;
        case 2467:
          goto LABEL_19;
        case 2468:
          goto LABEL_37;
        case 2469:
          goto LABEL_44;
        default:
          JUMPOUT(0);
      }
    }
    switch((int)result)
    {
      case 2530:
        goto LABEL_18;
      case 2531:
        goto LABEL_21;
      case 2532:
        goto LABEL_60;
      case 2533:
        goto LABEL_64;
      case 2534:
        goto LABEL_38;
      case 2535:
        goto LABEL_35;
      case 2536:
      case 2537:
        goto LABEL_13;
      case 2538:
        goto LABEL_61;
      case 2539:
        goto LABEL_14;
      case 2540:
        goto LABEL_23;
      case 2541:
        goto LABEL_40;
      case 2542:
        goto LABEL_66;
      case 2543:
        goto LABEL_15;
      default:
        goto LABEL_7;
    }
  }
  int v8 = 0;
  switch((int)result)
  {
    case 2309:
    case 2310:
LABEL_11:
      int v8 = 0;
      goto LABEL_51;
    case 2311:
LABEL_31:
      int v8 = 0;
      int v6 = 411;
      goto LABEL_50;
    case 2312:
LABEL_32:
      int v8 = 0;
      int v6 = 405;
      goto LABEL_50;
    case 2313:
LABEL_33:
      int v8 = 0;
      int v6 = 413;
      goto LABEL_54;
    case 2314:
LABEL_46:
      int v8 = 0;
      int v6 = 407;
      goto LABEL_54;
    case 2315:
LABEL_47:
      int v8 = 0;
      int v6 = 415;
      goto LABEL_58;
    case 2316:
LABEL_34:
      int v8 = 0;
      int v6 = 409;
      goto LABEL_58;
    case 2317:
    case 2318:
      goto LABEL_69;
    case 2319:
LABEL_42:
      int v5 = 0;
      int v8 = 0;
      int v6 = 411;
      goto LABEL_27;
    case 2320:
LABEL_24:
      int v5 = 0;
      int v8 = 0;
      int v6 = 405;
      goto LABEL_27;
    case 2321:
LABEL_36:
      int v5 = 0;
      int v8 = 0;
      int v6 = 413;
      goto LABEL_55;
    case 2322:
LABEL_43:
      int v5 = 0;
      int v8 = 0;
      int v6 = 407;
      goto LABEL_55;
    case 2323:
LABEL_63:
      int v5 = 0;
      int v8 = 0;
      int v6 = 415;
      goto LABEL_59;
    case 2324:
LABEL_70:
      int v5 = 0;
      int v8 = 0;
      int v6 = 409;
      goto LABEL_59;
    case 2325:
    case 2326:
LABEL_7:
      int v8 = 0;
      int v5 = 1;
      goto LABEL_69;
    case 2327:
LABEL_18:
      int v8 = 0;
      int v6 = 411;
      goto LABEL_22;
    case 2328:
LABEL_21:
      int v8 = 0;
      int v6 = 405;
LABEL_22:
      int v5 = 1;
      goto LABEL_27;
    case 2329:
LABEL_60:
      int v8 = 0;
      int v6 = 413;
      goto LABEL_65;
    case 2330:
LABEL_64:
      int v8 = 0;
      int v6 = 407;
LABEL_65:
      int v5 = 1;
      goto LABEL_55;
    case 2331:
LABEL_38:
      int v8 = 0;
      int v6 = 415;
      goto LABEL_39;
    case 2332:
LABEL_35:
      int v8 = 0;
      int v6 = 409;
LABEL_39:
      int v5 = 1;
      goto LABEL_59;
    case 2333:
    case 2334:
    case 2335:
    case 2336:
      __break(1u);
      goto LABEL_4;
    case 2337:
    case 2338:
LABEL_12:
      int v6 = 402;
      int v5 = 2;
      goto LABEL_68;
    case 2339:
LABEL_48:
      int v6 = 412;
      goto LABEL_49;
    case 2340:
LABEL_28:
      int v6 = 406;
LABEL_49:
      int v8 = 1;
LABEL_50:
      int v7 = 2;
LABEL_51:
      int v5 = 2;
      goto LABEL_69;
    case 2341:
LABEL_30:
      int v6 = 414;
      goto LABEL_53;
    case 2342:
LABEL_52:
      int v6 = 408;
LABEL_53:
      int v8 = 1;
LABEL_54:
      int v5 = 2;
      goto LABEL_55;
    case 2343:
LABEL_29:
      int v6 = 416;
      goto LABEL_57;
    case 2344:
LABEL_56:
      int v6 = 410;
LABEL_57:
      int v8 = 1;
LABEL_58:
      int v5 = 2;
      goto LABEL_59;
    case 2345:
    case 2346:
LABEL_9:
      int v5 = 0;
      int v6 = 402;
      goto LABEL_68;
    case 2347:
LABEL_25:
      int v5 = 0;
      int v6 = 412;
      goto LABEL_26;
    case 2348:
LABEL_16:
      int v5 = 0;
      int v6 = 406;
LABEL_26:
      int v8 = 1;
LABEL_27:
      int v7 = 2;
      goto LABEL_69;
    case 2349:
LABEL_17:
      int v5 = 0;
      int v6 = 414;
      goto LABEL_20;
    case 2350:
LABEL_19:
      int v5 = 0;
      int v6 = 408;
LABEL_20:
      int v8 = 1;
LABEL_55:
      int v7 = 3;
      goto LABEL_69;
    case 2351:
LABEL_37:
      int v5 = 0;
      int v6 = 416;
      goto LABEL_45;
    case 2352:
LABEL_44:
      int v5 = 0;
      int v6 = 410;
LABEL_45:
      int v8 = 1;
LABEL_59:
      int v7 = 4;
      goto LABEL_69;
    case 2353:
    case 2354:
LABEL_13:
      int v6 = 402;
      int v5 = 1;
      goto LABEL_68;
    case 2355:
LABEL_61:
      int v6 = 412;
      goto LABEL_62;
    case 2356:
LABEL_14:
      int v6 = 406;
LABEL_62:
      int v5 = 1;
      int v7 = 2;
      goto LABEL_68;
    case 2357:
LABEL_23:
      int v6 = 414;
      goto LABEL_41;
    case 2358:
LABEL_40:
      int v6 = 408;
LABEL_41:
      int v5 = 1;
      int v7 = 3;
      goto LABEL_68;
    case 2359:
LABEL_66:
      int v6 = 416;
      goto LABEL_67;
    case 2360:
LABEL_15:
      int v6 = 410;
LABEL_67:
      int v5 = 1;
      int v7 = 4;
LABEL_68:
      int v8 = 1;
LABEL_69:
      *a2 = v7;
      *a3 = v5;
      *a4 = v8;
      *a5 = v6;
      return result;
    default:
      switch((int)result)
      {
        case 2117:
          goto LABEL_31;
        case 2118:
          goto LABEL_32;
        case 2119:
          goto LABEL_33;
        case 2120:
          goto LABEL_46;
        case 2121:
          goto LABEL_47;
        case 2122:
          goto LABEL_34;
        case 2123:
        case 2124:
          goto LABEL_12;
        case 2125:
          goto LABEL_48;
        case 2126:
          goto LABEL_28;
        case 2127:
          goto LABEL_30;
        case 2128:
          goto LABEL_52;
        case 2129:
          goto LABEL_29;
        case 2130:
          goto LABEL_56;
        default:
          goto LABEL_11;
      }
  }
}

void sub_1CD40B1BC(void *a1)
{
  if (a1)
  {
    sub_1CD40B1BC(*a1);
    sub_1CD40B1BC(a1[1]);
    operator delete(a1);
  }
}

uint64_t **sub_1CD40B208(uint64_t **a1, int *a2)
{
  uint64_t v4 = operator new(0x38uLL);
  int v5 = v4;
  unsigned int v6 = *a2;
  *((_DWORD *)v4 + 8) = *a2;
  *(_OWORD *)(v4 + 5) = *(_OWORD *)(a2 + 2);
  int v7 = a1 + 1;
  int v8 = a1[1];
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v8;
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (v6 >= v10) {
          break;
        }
        int v8 = (uint64_t *)*v8;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= v6) {
        break;
      }
      int v8 = (uint64_t *)v8[1];
      if (!v8)
      {
        int v7 = v9 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v4);
    return v9;
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_9:
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = v9;
    llvm::raw_ostream *v7 = v4;
    int v11 = (uint64_t *)**a1;
    char v12 = v4;
    if (v11)
    {
      *a1 = v11;
      char v12 = *v7;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v5;
}

uint64_t sub_1CD40B2EC(uint64_t a1, char *a2, int a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, int a13, uint64_t a14)
{
  BOOL v17 = a4 == 1 && a3 == 1;
  long long v32 = a12;
  *(void *)(a1 + 24) = a9;
  *(_DWORD *)(a1 + 32) = a13;
  *(unsigned char *)(a1 + 36) = a6;
  *(unsigned char *)(a1 + 37) = 0;
  *(unsigned char *)(a1 + 38) = a7;
  *(unsigned char *)(a1 + 40) = 0;
  char v18 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v19 = (_OWORD *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a10;
  *(void *)(a1 + 80) = a11;
  *(_OWORD *)(a1 + 88) = v32;
  *(_WORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 10) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(void *)a1 = a14;
  if (a3 == 1)
  {
    int v20 = 2;
    *(_WORD *)(a1 + 8) = 2;
    a4 = (a4 + 1) >> 1;
LABEL_6:
    *(_WORD *)(a1 + 10) = a4;
    goto LABEL_7;
  }
  if (a3 == 8)
  {
    int v20 = 4;
    *(_WORD *)(a1 + 8) = 4;
    LOWORD(a4) = 2 * a4;
    goto LABEL_6;
  }
  int v20 = (unsigned __int16)a3;
LABEL_7:
  if (a6)
  {
    if (a3 == 2 && (a8 & 0xF) == 2) {
      llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const llvm::Twine *)1);
    }
    if ((_BYTE)a12)
    {
      if (a12 - 15 >= 0x9C)
      {
LABEL_12:
        uint64_t v21 = 0;
        goto LABEL_29;
      }
    }
    else if ((*(_DWORD *)(*((void *)&a12 + 1) + 8) & 0xFE) != 0x12)
    {
      goto LABEL_12;
    }
    uint64_t v21 = qword_1CDB0D7E8[(int)sub_1CD3DB440((llvm::EVT *)&v32, a2) - 1];
  }
  else
  {
    if (v20 == 2) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    if (v17) {
      int v22 = 0;
    }
    if (a5 == 1 && a7)
    {
      *(_WORD *)(a1 + 8) = 4;
      int v22 = 1;
    }
    uint64_t v23 = 1024;
    if ((unsigned __int16)a4 == 2) {
      uint64_t v23 = 512;
    }
    if ((unsigned __int16)a4 == 1) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v23;
    }
    uint64_t v21 = v24 | v22 | (16 * (~(-1 << a4) & 0xFu));
  }
LABEL_29:
  *(void *)(a1 + 16) = v21 | a8;
  unsigned int v25 = *(unsigned __int16 *)(a1 + 8);
  unsigned int v26 = *(unsigned __int16 *)(a1 + 10);
  int v27 = v26 * v25;
  if (v25 < 3) {
    char v28 = 4;
  }
  else {
    char v28 = 5;
  }
  *(unsigned char *)(a1 + 56) = v28;
  *(void *)(a1 + 64) = 0;
  if (v27 == 4)
  {
    char v29 = 5;
    goto LABEL_36;
  }
  if (v27 == 2)
  {
    char v29 = 4;
LABEL_36:
    *(unsigned char *)(a1 + 56) = v29;
    *(void *)(a1 + 64) = 0;
    *char v18 = *v19;
    return a1;
  }
  if (v26 >= 2)
  {
    *(void *)(a1 + 56) = sub_1CB8E5DAC((llvm::LLVMContext *)a2, *(void *)(a1 + 56), 0, v26, 0);
    *(void *)(a1 + 64) = v31;
    *(unsigned char *)(a1 + 40) = -82;
    *(void *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t sub_1CD40B530(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (void *)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = a1 + 40;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 47) <= 1 && (*(unsigned char *)(a2 + 26) & 2) != 0 || v6 == 287 || (__int16)v6 >= 890)
  {
    if ((*(_WORD *)(*(void *)(a2 + 96) + 32) & 2) != 0) {
      int v7 = 5;
    }
    else {
      int v7 = 2;
    }
    *(_DWORD *)(a1 + 64) = v7;
    goto LABEL_13;
  }
  if ((v6 - 290) <= 0x11)
  {
    *(_DWORD *)(a1 + 64) = 4;
LABEL_24:
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(v19 + 80);
    int v21 = *(_DWORD *)(v19 + 88);
    goto LABEL_29;
  }
  if (v6 == 253)
  {
    *(_DWORD *)(a1 + 64) = 1;
LABEL_26:
    *(void *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_30;
  }
  if (v6 == 254)
  {
    *(_DWORD *)(a1 + 64) = 3;
LABEL_28:
    uint64_t v22 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(v22 + 40);
    int v21 = *(_DWORD *)(v22 + 48);
LABEL_29:
    *(_DWORD *)(a1 + 32) = v21;
    void *v4 = v20;
LABEL_30:
    uint64_t v23 = sub_1CD3E3954(a2);
    uint64_t v24 = *(void *)v23;
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(v23 + 8);
    *(void *)uint64_t v3 = v24;
    uint64_t v25 = 120;
    if (*(_WORD *)(*(void *)a1 + 24) == 253) {
      uint64_t v25 = 80;
    }
    uint64_t v26 = *(void *)(*(void *)a1 + 32) + v25;
    uint64_t v27 = *(void *)v26;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v26 + 8);
    *(void *)uint64_t v5 = v27;
    goto LABEL_17;
  }
  int v7 = *(_DWORD *)(a1 + 64);
LABEL_13:
  switch(v7)
  {
    case 2:
      *(void *)(a1 + 24) = a2;
      *(_DWORD *)(a1 + 32) = 0;
      uint64_t v8 = *(void *)(a2 + 32);
      uint64_t v9 = *(void *)(v8 + 160);
      int v10 = *(_DWORD *)(v8 + 168);
      break;
    case 3:
      goto LABEL_28;
    case 4:
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(v11 + 160);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v11 + 168);
      void *v4 = v12;
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v9 = *(void *)(v13 + 200);
      int v10 = *(_DWORD *)(v13 + 208);
      break;
    default:
      goto LABEL_26;
  }
  *(_DWORD *)(a1 + 16) = v10;
  *(void *)uint64_t v3 = v9;
LABEL_17:
  char v14 = (uint64_t *)(*(void *)(*(void *)(a1 + 24) + 40) + 16 * *(unsigned int *)(a1 + 32));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  v28[0] = v16;
  v28[1] = v15;
  if (!(_BYTE)v16)
  {
    if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12) {
      goto LABEL_19;
    }
LABEL_22:
    int v17 = sub_1CD3DB440((llvm::EVT *)v28, (const char *)a2);
    goto LABEL_20;
  }
  if (v16 - 15 < 0x9C) {
    goto LABEL_22;
  }
LABEL_19:
  int v17 = 1;
LABEL_20:
  *(_DWORD *)(a1 + 68) = v17;
  return a1;
}

uint64_t sub_1CD40B748(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_1CD40B754(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)a1 + 96) + 16);
  if ((result - 64) > 8)
  {
    switch(result)
    {
      case 1:
      case 2:
      case 10:
        return 1;
      case 3:
        return 2;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        __break(1u);
        break;
      default:
        return result;
    }
  }
  else
  {
    int v2 = 1 << (result - 64);
    if ((v2 & 0x1D) != 0)
    {
      return 3;
    }
    else if ((v2 & 0x1C2) != 0)
    {
      return 1;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t sub_1CD40B7CC(_DWORD *a1)
{
  if (a1[16] != 2) {
    return sub_1CB8F20C0(*(void *)(*(void *)a1 + 96));
  }
  long long v4 = *(_OWORD *)*(void *)(*(void *)a1 + 40);
  unint64_t result = sub_1CB896FB8((unsigned __int8 *)&v4);
  if (v2 == 1)
  {
    unint64_t v3 = result;
    return v3;
  }
  return result;
}

_DWORD *sub_1CD40B83C(uint64_t a1, uint64_t a2)
{
  unint64_t result = (_DWORD *)sub_1CD40B530(a1, a2);
  result[22] = 0;
  int v3 = result[16];
  if (v3 != 2 && v3 != 5) {
    result[22] = (*(unsigned __int16 *)(*(void *)result + 26) >> 10) & 3;
  }
  return result;
}

uint64_t sub_1CD40B878(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CD40B530(a1, a2);
  *(unsigned char *)(result + 88) = 0;
  int v3 = *(_DWORD *)(result + 64);
  if (v3 != 2 && v3 != 5) {
    *(unsigned char *)(result + 88) = (*(_WORD *)(*(void *)result + 26) & 0x400) != 0;
  }
  return result;
}

unint64_t sub_1CD40B8B4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64) != 5) {
    return sub_1CB8F20C0(*(void *)(*(void *)a1 + 96));
  }
  long long v4 = *(_OWORD *)(*(void *)(*(void *)(a1 + 24) + 40) + 16 * *(unsigned int *)(a1 + 32));
  unint64_t result = sub_1CB896FB8((unsigned __int8 *)&v4);
  if (v2 == 1)
  {
    unint64_t v3 = result;
    return v3;
  }
  return result;
}

void sub_1CD40B928(unint64_t *a1, llvm::raw_ostream *a2)
{
  unsigned int v4 = sub_1CD40B7CC(a1);
  uint64_t v5 = llvm::raw_ostream::operator<<(a2, v4);
  sub_1CB8E509C(v5, "-byte load from ");

  sub_1CB9FC120(a1, a2);
}

void sub_1CD40B980(unint64_t *a1, llvm::raw_ostream *a2)
{
  unsigned int v4 = sub_1CD40B8B4((uint64_t)a1);
  uint64_t v5 = llvm::raw_ostream::operator<<(a2, v4);
  sub_1CB8E509C(v5, "-byte store to  ");

  sub_1CB9FC120(a1, a2);
}

void sub_1CD40B9D8(llvm *a1)
{
  int v2 = llvm::dbgs(a1);
  sub_1CD40B928((unint64_t *)a1, v2);
}

void sub_1CD40BA24(llvm *a1)
{
  int v2 = llvm::dbgs(a1);
  sub_1CD40B980((unint64_t *)a1, v2);
}

uint64_t *sub_1CD40BA70(uint64_t a1, int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v94[32] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(llvm **)(a5 + 72);
  uint64_t v12 = *(void *)(a5 + 80);
  *(_OWORD *)unsigned int v93 = *(_OWORD *)(a5 + 56);
  if (LOBYTE(v93[0])) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v93);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v93);
  }
  unint64_t v16 = ExtendedSizeInBits;
  if (v15 == 1) {
  if (*(unsigned __int8 *)(a5 + 40) == 174)
  }
  {
    int v17 = *(unsigned __int8 **)a3;
    uint64_t v91 = v17;
    if (v17) {
      llvm::MetadataTracking::track((uint64_t)&v91, v17, 2);
    }
    int v92 = *((_DWORD *)a3 + 2);
    uint64_t v88 = a4;
    char v18 = sub_1CD4099D4(a1, a4, 0, v13, v12, a2, (uint64_t)&v91, a6);
    int v20 = v19;
    if (v91) {
      llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
    }
    v93[0] = v94;
    v93[1] = (void *)0x1000000000;
    unsigned int v21 = *(unsigned __int16 *)(a5 + 10);
    if (*(_WORD *)(a5 + 10))
    {
      unint64_t v86 = v16;
      unsigned int v22 = 0;
      if (*(_WORD *)(a5 + 8) == 2) {
        uint64_t v23 = 4;
      }
      else {
        uint64_t v23 = 5;
      }
      do
      {
        if (*(unsigned __int16 *)(a5 + 8) <= 2u) {
          int v24 = v22 + 1;
        }
        else {
          int v24 = v22 + 25;
        }
        uint64_t v26 = sub_1CD8015C0(*(void *)(a6 + 16), v24, a3, (llvm *)v23, 0, (uint64_t)v18, v20);
        if (LODWORD(v93[1]) >= (unint64_t)HIDWORD(v93[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = (uint64_t **)((char *)v93[0] + 16 * LODWORD(v93[1]));
        unsigned __int8 *v27 = v26;
        v27[1] = v25;
        unsigned int v21 = ++LODWORD(v93[1]);
        ++v22;
      }
      while (v22 < *(unsigned __int16 *)(a5 + 10));
      unint64_t v16 = v86;
    }
    uint64_t v28 = *(void *)(a5 + 56);
    uint64_t v29 = *(void *)(a5 + 64);
    a4 = v88;
    if (!*(unsigned char *)(a5 + 36)) {
      goto LABEL_22;
    }
    if ((v16 >> 3) == 12)
    {
      unsigned int v59 = sub_1CD3DD4D8(*(void *)(a6 + 16), (llvm *)5, 0);
      int v38 = v60;
      if (LODWORD(v93[1]) >= HIDWORD(v93[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v39 = (uint64_t **)((char *)v93[0] + 16 * LODWORD(v93[1]));
      *uint64_t v39 = v59;
      uint64_t v28 = 51;
    }
    else
    {
      if ((v16 >> 3) != 6)
      {
LABEL_22:
        uint64_t v31 = sub_1CD7EC8DC(*(void **)(a6 + 16), (const char *)0x92, a3, (llvm *)v28, v29, (uint64_t *)v93[0], v21);
        long long v32 = *(llvm::APFloatBase **)(a6 + 16);
        uint64_t v33 = *((void *)v32 + 104);
        if (v33) {
          __int16 v34 = *(_WORD *)(v33 + 8);
        }
        else {
          __int16 v34 = 0;
        }
        uint64_t v40 = sub_1CD7F3564(v32, (const char *)0xD8, (uint64_t)a3, v13, v12, (uint64_t)v31, (void *)v30, v34);
        int v42 = v41;
        if (v93[0] != v94) {
          free(v93[0]);
        }
        goto LABEL_39;
      }
      uint64_t v36 = sub_1CD3DD4D8(*(void *)(a6 + 16), (llvm *)4, 0);
      int v38 = v37;
      if (LODWORD(v93[1]) >= HIDWORD(v93[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v39 = (uint64_t **)((char *)v93[0] + 16 * LODWORD(v93[1]));
      *uint64_t v39 = v36;
      uint64_t v28 = 40;
    }
    uint64_t v29 = 0;
    v39[1] = v38;
    unsigned int v21 = ++LODWORD(v93[1]);
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a5 + 36))
  {
    if (a2)
    {
      uint64_t v87 = v12;
      unsigned int v53 = v13;
      uint64_t v54 = sub_1CD40C020(a4, 0);
      int v56 = v55;
      *(_OWORD *)unsigned int v93 = *(_OWORD *)(a5 + 88);
      if (LOBYTE(v93[0])) {
        uint64_t v57 = sub_1CB87E200((unsigned __int8 *)v93);
      }
      else {
        uint64_t v57 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v93);
      }
      BOOL v35 = v54 != (llvm::Type *)v57 || v56 != v58;
      uint64_t v13 = v53;
      uint64_t v12 = v87;
    }
    else
    {
      BOOL v35 = 0;
    }
    *(_OWORD *)unsigned int v93 = *(_OWORD *)(a5 + 88);
    if (LOBYTE(v93[0])) {
      uint64_t v62 = sub_1CB87E200((unsigned __int8 *)v93);
    }
    else {
      uint64_t v62 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v93);
    }
    unint64_t v64 = v62;
    if (v63 == 1) {
    if (v64 <= 8 && **(unsigned char **)(a4 + 40) == 4)
    }
    {
      uint64_t v65 = *(void *)(a6 + 16);
      uint64_t v66 = sub_1CD7EDE1C(v65, 3, 0);
      __int16 v69 = 0;
      uint64_t v70 = *(void *)(v65 + 832);
      if (v70) {
        __int16 v69 = *(_WORD *)(v70 + 8);
      }
      int v71 = sub_1CCFDED5C(v65, 4, a3, (llvm *)4, 0, a4, 0, v68, v66, v67, v69);
      __int16 v72 = 0;
      unint64_t v74 = v73;
      uint64_t v75 = *(llvm::APFloatBase **)(a6 + 16);
      uint64_t v76 = *(llvm **)(a5 + 88);
      uint64_t v77 = *(void *)(a5 + 96);
      uint64_t v78 = *((void *)v75 + 104);
      if (v78) {
        __int16 v72 = *(_WORD *)(v78 + 8);
      }
      uint64_t v79 = (uint64_t)a3;
    }
    else
    {
      if (!v35)
      {
        unint64_t v81 = 0;
        uint64_t v82 = (uint64_t *)a4;
LABEL_72:
        uint64_t v84 = *(unsigned __int8 **)a3;
        uint64_t v89 = v84;
        if (v84) {
          llvm::MetadataTracking::track((uint64_t)&v89, v84, 2);
        }
        int v90 = *((_DWORD *)a3 + 2);
        uint64_t v44 = sub_1CD4099D4(a1, (uint64_t)v82, (void *)v81, v13, v12, a2, (uint64_t)&v89, a6);
        unint64_t v43 = v85;
        if (v89) {
          llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
        }
        goto LABEL_35;
      }
      uint64_t v75 = *(llvm::APFloatBase **)(a6 + 16);
      uint64_t v76 = *(llvm **)(a5 + 88);
      uint64_t v77 = *(void *)(a5 + 96);
      uint64_t v80 = *((void *)v75 + 104);
      if (v80) {
        __int16 v72 = *(_WORD *)(v80 + 8);
      }
      else {
        __int16 v72 = 0;
      }
      uint64_t v79 = (uint64_t)a3;
      int v71 = (uint64_t *)a4;
      unint64_t v74 = 0;
    }
    uint64_t v82 = sub_1CD7F3564(v75, (const char *)0xC9, v79, v76, v77, (uint64_t)v71, (void *)v74, v72);
    unint64_t v81 = v83;
    goto LABEL_72;
  }
  unint64_t v43 = 0;
  uint64_t v44 = (uint64_t *)a4;
LABEL_35:
  uint64_t v45 = *(llvm::APFloatBase **)(a6 + 16);
  uint64_t v46 = *((void *)v45 + 104);
  if (v46) {
    __int16 v47 = *(_WORD *)(v46 + 8);
  }
  else {
    __int16 v47 = 0;
  }
  uint64_t v40 = sub_1CD7F3564(v45, (const char *)0xD8, (uint64_t)a3, v13, v12, (uint64_t)v44, (void *)v43, v47);
  int v42 = v48;
LABEL_39:
  uint64_t v49 = sub_1CD7F95FC(*(void *)(a6 + 16), (uint64_t)v13, v12, 1, 0);
  return sub_1CD7FFB18(*(void **)(a6 + 16), (const char *)0x37, a3, v49, v50, (uint64_t)v40, v42, v51, a4, 1);
}

llvm::Type *sub_1CD40C020(uint64_t a1, unsigned int a2)
{
  long long v3 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v3) {
    return (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v3);
  }
  else {
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3);
  }
}

uint64_t *sub_1CD40C064(const llvm::APInt *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v74[66] = *MEMORY[0x1E4F143B8];
  long long v69 = *(_OWORD *)(a4 + 72);
  long long v10 = *(_OWORD *)(a4 + 56);
  long long v72 = v69;
  *(_OWORD *)unsigned int v73 = v10;
  if ((_BYTE)v10) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v73);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v73);
  }
  unint64_t v13 = ExtendedSizeInBits;
  if (v12 == 1) {
  unint64_t v14 = a3 & 0xFFFFFFFF00000000;
  }
  if (*(unsigned __int8 *)(a4 + 40) != 174)
  {
    if ((_BYTE)v69) {
      uint64_t v15 = sub_1CB87E200((unsigned __int8 *)&v72);
    }
    else {
      uint64_t v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v72);
    }
    unint64_t v17 = v15;
    if (v16 == 1) {
    if (v17 <= 8)
    }
    {
      uint64_t v26 = *(llvm::APFloatBase **)(a5 + 16);
      uint64_t v27 = *((void *)v26 + 104);
      if (v27) {
        __int16 v28 = *(_WORD *)(v27 + 8);
      }
      else {
        __int16 v28 = 0;
      }
      return sub_1CD7F3564(v26, (const char *)0xC8, (uint64_t)a1, (llvm *)4, 0, (uint64_t)a2, (void *)a3, v28);
    }
    return a2;
  }
  unint64_t v19 = v13 >> 3;
  unsigned int v20 = sub_1CD3FB644(*(void *)(a4 + 56), *(void *)(a4 + 64));
  int v70 = v19;
  if (*(unsigned char *)(a4 + 36))
  {
    if (v19 == 12)
    {
      unsigned int v21 = *(llvm::APFloatBase **)(a5 + 16);
      uint64_t v68 = *((void *)v21 + 104);
      if (v68) {
        __int16 v25 = *(_WORD *)(v68 + 8);
      }
      else {
        __int16 v25 = 0;
      }
      uint64_t v30 = (uint64_t)a1;
      uint64_t v22 = 51;
    }
    else
    {
      if (v19 != 6) {
        goto LABEL_28;
      }
      unsigned int v21 = *(llvm::APFloatBase **)(a5 + 16);
      uint64_t v29 = *((void *)v21 + 104);
      if (v29) {
        __int16 v25 = *(_WORD *)(v29 + 8);
      }
      else {
        __int16 v25 = 0;
      }
      uint64_t v30 = (uint64_t)a1;
      uint64_t v22 = 40;
    }
    uint64_t v23 = 0;
  }
  else
  {
    unsigned int v21 = *(llvm::APFloatBase **)(a5 + 16);
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v23 = *(void *)(a4 + 64);
    uint64_t v24 = *((void *)v21 + 104);
    if (v24) {
      __int16 v25 = *(_WORD *)(v24 + 8);
    }
    else {
      __int16 v25 = 0;
    }
    uint64_t v30 = (uint64_t)a1;
  }
  a2 = sub_1CD7F3564(v21, (const char *)0xD8, v30, (llvm *)v22, v23, (uint64_t)a2, (void *)a3, v25);
  LODWORD(a3) = v31;
LABEL_28:
  v73[0] = v74;
  v73[1] = (void *)0x2100000000;
  uint64_t v33 = sub_1CD7EBF14(*(void *)(a5 + 16), v20, a1, (llvm *)5, 0, 1, 0);
  if (LODWORD(v73[1]) >= HIDWORD(v73[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v34 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
  const char *v34 = v33;
  v34[1] = v32;
  unsigned int v35 = ++LODWORD(v73[1]);
  long long v36 = *(_OWORD *)(a2[5] + 16 * a3);
  long long v71 = v36;
  if ((_BYTE)v36)
  {
    int v38 = v19;
    if ((v36 - 8) < 7u || (v36 - 75) < 0x2Du || (v36 + 104) < 0x13u) {
      goto LABEL_31;
    }
  }
  else
  {
    BOOL isExtendedFloatingPoint = llvm::EVT::isExtendedFloatingPoint((llvm::EVT *)&v71);
    int v38 = v19;
    if (isExtendedFloatingPoint)
    {
LABEL_31:
      BOOL v39 = *(unsigned __int16 *)(a4 + 8) == 2;
      char v40 = 9;
      goto LABEL_32;
    }
  }
  BOOL v39 = *(unsigned __int16 *)(a4 + 8) == 2;
  char v40 = 4;
LABEL_32:
  if (v39) {
    unsigned __int8 v41 = v40;
  }
  else {
    unsigned __int8 v41 = v40 + 1;
  }
  if (*(_WORD *)(a4 + 10))
  {
    unint64_t v42 = 0;
    uint64_t v43 = a3 | v14;
    do
    {
      uint64_t v44 = *(void *)(a5 + 16);
      uint64_t v45 = sub_1CD7EBF14(v44, v42, a1, (llvm *)5, 0, 0, 0);
      __int16 v48 = 0;
      uint64_t v49 = *(void *)(v44 + 832);
      if (v49) {
        __int16 v48 = *(_WORD *)(v49 + 8);
      }
      uint64_t v51 = sub_1CCFDED5C(v44, 148, a1, (llvm *)v41, 0, (uint64_t)a2, v43, v47, (uint64_t)v45, v46, v48);
      if (LODWORD(v73[1]) >= (unint64_t)HIDWORD(v73[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v52 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
      *uint64_t v52 = v51;
      v52[1] = v50;
      ++LODWORD(v73[1]);
      if (*(unsigned __int16 *)(a4 + 8) <= 2u) {
        uint64_t v53 = v42 + 1;
      }
      else {
        uint64_t v53 = v42 + 25;
      }
      int v55 = sub_1CD7EBF14(*(void *)(a5 + 16), v53, a1, (llvm *)5, 0, 1, 0);
      if (LODWORD(v73[1]) >= (unint64_t)HIDWORD(v73[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v56 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
      llvm::LLVMContext *v56 = v55;
      v56[1] = v54;
      unsigned int v35 = ++LODWORD(v73[1]);
      ++v42;
    }
    while (v42 < *(unsigned __int16 *)(a4 + 10));
    int v38 = v70;
  }
  if (v38 == 6)
  {
    uint64_t v63 = sub_1CD3DD4D8(*(void *)(a5 + 16), (llvm *)v41, 0);
    if (LODWORD(v73[1]) >= HIDWORD(v73[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v64 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
    *unint64_t v64 = v63;
    v64[1] = v62;
    ++LODWORD(v73[1]);
    uint64_t v60 = *(void *)(a5 + 16);
    uint64_t v61 = 4;
    goto LABEL_56;
  }
  if (v38 == 12)
  {
    int v58 = sub_1CD3DD4D8(*(void *)(a5 + 16), (llvm *)v41, 0);
    if (LODWORD(v73[1]) >= HIDWORD(v73[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v59 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
    *unsigned int v59 = v58;
    v59[1] = v57;
    ++LODWORD(v73[1]);
    uint64_t v60 = *(void *)(a5 + 16);
    uint64_t v61 = 28;
LABEL_56:
    uint64_t v66 = sub_1CD7EBF14(v60, v61, a1, (llvm *)5, 0, 1, 0);
    if (LODWORD(v73[1]) >= HIDWORD(v73[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v67 = (uint64_t **)((char *)v73[0] + 16 * LODWORD(v73[1]));
    *uint64_t v67 = v66;
    v67[1] = v65;
    unsigned int v35 = ++LODWORD(v73[1]);
  }
  a2 = sub_1CD801450(*(void *)(a5 + 16), 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v73[0], v35);
  if (v73[0] != v74) {
    free(v73[0]);
  }
  return a2;
}

uint64_t *sub_1CD40C64C(uint64_t a1, void *a2, uint64_t a3)
{
  v69[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  uint64_t v8 = *a2;
  long long v50 = *(_OWORD *)*(void *)(*a2 + 32);
  uint64_t v9 = *(unsigned __int8 **)(*a2 + 64);
  uint64_t v65 = v9;
  long long v10 = (void *)v8;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v65, v9, 2);
    long long v10 = (void *)*a2;
  }
  int v66 = *(_DWORD *)(v8 + 60);
  uint64_t v11 = v10[10];
  uint64_t v51 = v10[12];
  uint64_t v52 = v10[11];
  uint64_t v67 = v69;
  uint64_t v68 = 0x800000000;
  sub_1CB9FB87C((uint64_t)v59, *(const char **)(*(void *)(a3 + 16) + 56), a2, *(void *)(a1 + 184296), (int8x8_t)0x800000000);
  if (v61 == 3 && *(unsigned char *)(v59[0] + 326)) {
    unint64_t v12 = v60 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
  }
  else {
    unint64_t v12 = v60 & 0xFFFFFFFFFFFFF9FFLL;
  }
  unint64_t v60 = v12;
  unint64_t v13 = *(llvm::APFloatBase **)(a3 + 16);
  unint64_t v14 = *(unsigned __int8 **)(v6 + 64);
  uint64_t v57 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v57, v14, 2);
  }
  int v58 = *(_DWORD *)(v6 + 60);
  uint64_t v15 = *((void *)v13 + 104);
  if (v15) {
    __int16 v16 = *(_WORD *)(v15 + 8);
  }
  else {
    __int16 v16 = 0;
  }
  unint64_t v17 = sub_1CD7F3564(v13, (const char *)0xC9, (uint64_t)&v57, (llvm *)5, 0, v6, (void *)v7, v16);
  unint64_t v19 = v7 & 0xFFFFFFFF00000000 | v18;
  if (v57) {
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 184296) + 381))
  {
    uint64_t v49 = a1;
    uint64_t v20 = *(void *)(a3 + 16);
    unsigned int v21 = (unsigned __int8 *)v17[8];
    uint64_t v57 = v21;
    uint64_t v48 = v11;
    if (v21)
    {
      llvm::MetadataTracking::track((uint64_t)&v57, v21, 2);
      uint64_t v23 = *(void *)(a3 + 16);
      uint64_t v22 = (unsigned __int8 *)v17[8];
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = v20;
    }
    int v24 = *((_DWORD *)v17 + 15);
    int v58 = v24;
    uint64_t v25 = sub_1CB951190(v60);
    int v55 = v22;
    if (v22)
    {
      llvm::MetadataTracking::track((uint64_t)&v55, v22, 2);
      int v24 = *((_DWORD *)v17 + 15);
    }
    int v56 = v24;
    uint64_t v26 = sub_1CD7EBF14(v23, v25, (const llvm::APInt *)&v55, (llvm *)5, 0, 0, 0);
    __int16 v29 = 0;
    uint64_t v30 = *(void *)(v20 + 832);
    if (v30) {
      __int16 v29 = *(_WORD *)(v30 + 8);
    }
    unint64_t v17 = sub_1CCFDED5C(v20, 177, (const llvm::APInt *)&v57, (llvm *)5, 0, (uint64_t)v17, v19, v28, (uint64_t)v26, v27, v29);
    uint64_t v32 = v31;
    uint64_t v11 = v48;
    if (v55) {
      llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
    }
    unint64_t v19 = v32 | v7 & 0xFFFFFFFF00000000;
    if (v57) {
      llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
    }
    a1 = v49;
  }
  __int16 v34 = sub_1CD7EBF14(*(void *)(a3 + 16), v60, (const llvm::APInt *)&v65, (llvm *)6, 0, 1, 0);
  if (v68 >= HIDWORD(v68)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v67[2 * v68] = v50;
  unsigned int v35 = v68 + 1;
  LODWORD(v68) = v35;
  if (v35 >= HIDWORD(v68)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v36 = (uint64_t **)&v67[2 * v35];
  uint64_t *v36 = v17;
  v36[1] = (uint64_t *)v19;
  unsigned int v37 = v68 + 1;
  LODWORD(v68) = v37;
  if (v37 >= HIDWORD(v68)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v38 = (uint64_t **)&v67[2 * v37];
  uint64_t *v38 = v34;
  v38[1] = v33;
  LODWORD(v68) = v68 + 1;
  uint64_t v39 = sub_1CD7F95FC(*(void *)(a3 + 16), v63, v64, 1, 0);
  uint64_t v41 = v40;
  int v42 = sub_1CB950FDC((uint64_t)v59, v61, 1, 0);
  uint64_t v44 = sub_1CD7F9CC8(*(void *)(a3 + 16), v42, (uint64_t)&v65, v39, v41, v67, v68, v43, v11, v52, v51);
  if (v62) {
    int v45 = 0;
  }
  else {
    int v45 = *((_DWORD *)a2 + 22);
  }
  uint64_t v53 = v65;
  if (v65) {
    llvm::MetadataTracking::track((uint64_t)&v53, v65, 2);
  }
  int v54 = v66;
  uint64_t v46 = sub_1CD40BA70(a1, v45, (const llvm::APInt *)&v53, (uint64_t)v44, (uint64_t)v59, a3);
  if (v53) {
    llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
  }
  if (v67 != v69) {
    free(v67);
  }
  if (v65) {
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  }
  return v46;
}

uint64_t *sub_1CD40CAC4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1)) {
    return *(uint64_t **)(a1 + 80);
  }
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(*(void *)(a1 + 96) + 16);
  uint64_t v6 = *(void *)(v4 + 80);
  unint64_t v7 = (uint64_t *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    unint64_t v7 = (uint64_t *)*v7;
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(unsigned __int8 **)(v4 + 64);
  long long v10 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v10, v9, 2);
  }
  int v11 = *(_DWORD *)(v4 + 60);
  int v2 = sub_1CD7EBF14(v5, v8, (const llvm::APInt *)&v10, *(llvm **)(a1 + 48), *(void *)(a1 + 56), 1, 0);
  if (v10) {
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  }
  return v2;
}

void sub_1CD40CB88()
{
}

uint64_t *sub_1CD40CBA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v85[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  unint64_t v7 = *(unsigned __int8 **)(*a2 + 64);
  unint64_t v81 = v7;
  uint64_t v8 = (void *)v6;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v81, v7, 2);
    uint64_t v8 = (void *)*a2;
  }
  int v82 = *(_DWORD *)(v6 + 60);
  uint64_t v9 = v8[11];
  uint64_t v68 = v8[12];
  long long v10 = (llvm *)v8[10];
  long long v66 = *(_OWORD *)v8[4];
  unint64_t v11 = a2[4];
  uint64_t v70 = a2[3];
  uint64_t v13 = a2[1];
  unint64_t v12 = a2[2];
  unsigned int v83 = (char *)v85;
  uint64_t v84 = 0x800000000;
  uint64_t v14 = a1 + 184296;
  sub_1CB9FB87C((uint64_t)v77, *(const char **)(*(void *)(a3 + 16) + 56), a2, *(void *)(a1 + 184296), (int8x8_t)0x800000000);
  if (*((unsigned char *)a2 + 88) && !v80)
  {
    if ((_BYTE)v10)
    {
      if (v10 - 120 < 0x20
        || v10 - 2 < 6
        || v10 - 15 < 0x3C)
      {
LABEL_9:
        __int16 v16 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v17 = *((void *)v16 + 104);
        if (v17) {
          __int16 v18 = *(_WORD *)(v17 + 8);
        }
        else {
          __int16 v18 = 0;
        }
        uint64_t v26 = sub_1CD7F3564(v16, (const char *)0xC9, (uint64_t)&v81, v10, v9, v70, (void *)v11, v18);
LABEL_21:
        uint64_t v70 = (uint64_t)v26;
        unint64_t v11 = v11 & 0xFFFFFFFF00000000 | v27;
        goto LABEL_22;
      }
    }
    else
    {
      if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
        int v15 = *(unsigned __int8 *)(**(void **)(v9 + 16) + 8);
      }
      else {
        int v15 = *(_DWORD *)(v9 + 8);
      }
      if (v15 == 13) {
        goto LABEL_9;
      }
    }
    uint64_t v20 = *(void *)(a3 + 16);
    unsigned int v21 = sub_1CD7EBF14(v20, 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 0, 0);
    __int16 v24 = 0;
    uint64_t v25 = *(void *)(v20 + 832);
    if (v25) {
      __int16 v24 = *(_WORD *)(v25 + 8);
    }
    uint64_t v26 = sub_1CCFDED5C(v20, 212, (const llvm::APInt *)&v81, v10, v9, v70, v11, v23, (uint64_t)v21, v22, v24);
    goto LABEL_21;
  }
  if (v80)
  {
    uint64_t v19 = *(void *)(v70 + 32);
    uint64_t v70 = *(void *)v19;
    unint64_t v11 = v11 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 + 8);
  }
LABEL_22:
  if (v79 == 3 && *(unsigned char *)(v77[0] + 326)) {
    unint64_t v28 = v78 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
  }
  else {
    unint64_t v28 = v78 & 0xFFFFFFFFFFFFF9FFLL;
  }
  unint64_t v78 = v28;
  __int16 v29 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v30 = *(unsigned __int8 **)(v13 + 64);
  uint64_t v75 = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v75, v30, 2);
  }
  int v76 = *(_DWORD *)(v13 + 60);
  uint64_t v31 = *((void *)v29 + 104);
  if (v31) {
    __int16 v32 = *(_WORD *)(v31 + 8);
  }
  else {
    __int16 v32 = 0;
  }
  uint64_t v33 = sub_1CD7F3564(v29, (const char *)0xC9, (uint64_t)&v75, (llvm *)5, 0, v13, (void *)v12, v32);
  unint64_t v35 = v12 & 0xFFFFFFFF00000000 | v34;
  if (v75) {
    llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
  }
  uint64_t v69 = v9;
  unint64_t v67 = v11;
  if (!*(unsigned char *)(*(void *)v14 + 381))
  {
    uint64_t v65 = v10;
    uint64_t v36 = *(void *)(a3 + 16);
    unsigned int v37 = (unsigned __int8 *)v33[8];
    uint64_t v75 = v37;
    if (v37)
    {
      llvm::MetadataTracking::track((uint64_t)&v75, v37, 2);
      uint64_t v39 = *(void *)(a3 + 16);
      int v38 = (unsigned __int8 *)v33[8];
    }
    else
    {
      int v38 = 0;
      uint64_t v39 = v36;
    }
    int v40 = *((_DWORD *)v33 + 15);
    int v76 = v40;
    uint64_t v41 = sub_1CB951190(v78);
    unsigned int v73 = v38;
    if (v38)
    {
      llvm::MetadataTracking::track((uint64_t)&v73, v38, 2);
      int v40 = *((_DWORD *)v33 + 15);
    }
    int v74 = v40;
    int v42 = sub_1CD7EBF14(v39, v41, (const llvm::APInt *)&v73, (llvm *)5, 0, 0, 0);
    __int16 v45 = 0;
    uint64_t v46 = *(void *)(v36 + 832);
    if (v46) {
      __int16 v45 = *(_WORD *)(v46 + 8);
    }
    uint64_t v33 = sub_1CCFDED5C(v36, 177, (const llvm::APInt *)&v75, (llvm *)5, 0, (uint64_t)v33, v35, v44, (uint64_t)v42, v43, v45);
    uint64_t v48 = v47;
    if (v73) {
      llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
    }
    unint64_t v35 = v48 | v12 & 0xFFFFFFFF00000000;
    if (v75) {
      llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
    }
    long long v10 = v65;
  }
  long long v50 = sub_1CD7EBF14(*(void *)(a3 + 16), v78, (const llvm::APInt *)&v81, (llvm *)6, 0, 1, 0);
  if (v84 >= HIDWORD(v84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v83[16 * v84] = v66;
  unsigned int v51 = v84 + 1;
  LODWORD(v84) = v51;
  if (v51 >= HIDWORD(v84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v52 = (uint64_t *)&v83[16 * v51];
  *uint64_t v52 = v70;
  v52[1] = v67;
  unsigned int v53 = v84 + 1;
  LODWORD(v84) = v53;
  if (v53 >= HIDWORD(v84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v54 = (uint64_t **)&v83[16 * v53];
  *int v54 = v33;
  v54[1] = (uint64_t *)v35;
  unsigned int v55 = v84 + 1;
  LODWORD(v84) = v55;
  if (v55 >= HIDWORD(v84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v56 = (uint64_t **)&v83[16 * v55];
  llvm::LLVMContext *v56 = v50;
  v56[1] = v49;
  LODWORD(v84) = v84 + 1;
  uint64_t v57 = sub_1CD7FFC1C((llvm *)1, 0);
  long long v71 = v81;
  if (v81) {
    llvm::MetadataTracking::track((uint64_t)&v71, v81, 2);
  }
  int v72 = v82;
  int v58 = sub_1CD40C064((const llvm::APInt *)&v71, *((uint64_t **)v83 + 2), *((void *)v83 + 3), (uint64_t)v77, a3);
  unsigned int v59 = (uint64_t *)v83;
  *((void *)v83 + 2) = v58;
  *((_DWORD *)v59 + 6) = v60;
  if (v71)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
    unsigned int v59 = (uint64_t *)v83;
  }
  int v61 = sub_1CB950FDC((uint64_t)v77, v79, 1, 0);
  uint64_t v63 = sub_1CD7F9CC8(*(void *)(a3 + 16), v61, (uint64_t)&v81, v57, 1, v59, v84, v62, (uint64_t)v10, v69, v68);
  if (v83 != (char *)v85) {
    free(v83);
  }
  if (v81) {
    llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
  }
  return v63;
}

uint64_t *sub_1CD40D18C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, _OWORD *a8, _OWORD *a9, int *a10, _OWORD *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  __int16 v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD40D7A8(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  __int16 v16 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t *sub_1CD40D278(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  unsigned char v18[8] = *MEMORY[0x1E4F143B8];
  __int16 v16 = v18;
  uint64_t v17 = 0x400000000;
  sub_1CD4010E0(a1, (uint64_t)&v16, a6, a7, a8, a9);
  uint64_t v14 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t *sub_1CD40D358(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10, int *a11, _OWORD *a12)
{
  v21[14] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0x700000000;
  uint64_t v19 = v21;
  sub_1CD40D8DC(a1, (uint64_t)&v19, a6, a7, a8, a9, a10, a11, a12);
  uint64_t v17 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v17;
}

uint64_t *sub_1CD40D444(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10)
{
  v23[10] = *MEMORY[0x1E4F143B8];
  unsigned int v21 = v23;
  uint64_t v22 = 0x500000000;
  uint64_t v19 = a6;
  char v20 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1CD3D6D20(a1, (uint64_t)&v21, a7, a8, a9, a10);
  uint64_t v17 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}