uint64_t sub_1CCF58C10(llvm::APFloatBase *a1, llvm::APFloatBase **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, int a12, unsigned int a13)
{
  __int16 v13;
  uint64_t v14;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  llvm *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  void *v52[2];
  unsigned char v53[32];
  unsigned __int8 *v54;
  void *v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a9 + 24) != 253) {
    return 0;
  }
  v13 = *(_WORD *)(a9 + 26);
  if ((v13 & 0xF80) != 0) {
    return 0;
  }
  v22 = a4;
  if (a6) {
    goto LABEL_11;
  }
  if (!(_BYTE)a4)
  {
    if (*(unsigned char *)(a5 + 8) == 18) {
      goto LABEL_11;
    }
LABEL_10:
    if (!(*(_WORD *)(*(void *)(a9 + 96) + 36) & 0xF00 | v13 & 8)) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (a4 - 15 >= 0x69) {
    goto LABEL_10;
  }
LABEL_11:
  v14 = 0;
  if (!(_BYTE)a4 || !*(unsigned char *)(*(void *)(a9 + 40) + 16 * a10)) {
    return v14;
  }
  if (((*(unsigned __int16 *)(a3
                             + 358 * a4
                             + 2 * *(unsigned __int8 *)(*(void *)(a9 + 40) + 16 * a10)
                             + 73672) >> (4 * a12)) & 0xF) != 0)
    return 0;
LABEL_14:
  v52[0] = v53;
  v52[1] = (void *)0x400000000;
  v23 = *(void *)(a9 + 48);
  if (!v23) {
    goto LABEL_21;
  }
  v24 = 1;
  do
  {
    if (*(_DWORD *)(v23 + 8) == a10)
    {
      if (!v24) {
        goto LABEL_21;
      }
      --v24;
    }
    v23 = *(void *)(v23 + 32);
  }
  while (v23);
  if (!v24)
  {
    v25 = 1;
    if ((_BYTE)a4)
    {
LABEL_22:
      if ((v22 - 15) < 0x9C) {
        goto LABEL_23;
      }
      goto LABEL_27;
    }
  }
  else
  {
LABEL_21:
    v25 = sub_1CCF59EB0(a4, a5, a7, a9, a10, a13, (uint64_t)v52, a3);
    if (v22) {
      goto LABEL_22;
    }
  }
  if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
  {
LABEL_23:
    v14 = 0;
    if ((v25 & (*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a3 + 1312))(a3, a7, 0) & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
LABEL_27:
  if (!v25)
  {
    v14 = 0;
    goto LABEL_29;
  }
LABEL_31:
  v26 = *(unsigned __int8 **)(a9 + 64);
  v54 = v26;
  if (v26) {
    llvm::MetadataTracking::track((uint64_t)&v54, v26, 2);
  }
  LODWORD(v55) = *(_DWORD *)(a9 + 60);
  v27 = (uint64_t *)(*(void *)(a9 + 40) + 16 * a10);
  v28 = sub_1CD7FAFD4((uint64_t)a1, a12, (uint64_t)&v54, a4, a5, **(void **)(a9 + 32), *(void *)(*(void *)(a9 + 32) + 8), a8, *(void *)(*(void *)(a9 + 32) + 40), *(void *)(*(void *)(a9 + 32) + 48), *v27, v27[1], *(void *)(a9 + 96));
  v30 = v29;
  if (v54)
  {
    v31 = *v54;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        v35 = v54;
      }
      else {
        v35 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        v36 = (unint64_t)(v35 + 8);
LABEL_55:
        v51 = &v54;
        sub_1CC5FA668(v36 + 16, &v51);
        goto LABEL_37;
      }
      if (v31 == 3) {
        *((void *)v54 + 1) = 0;
      }
    }
    else if ((v54[1] & 0x7F) == 2 || *((_DWORD *)v54 + 3))
    {
      v49 = *((void *)v54 + 2);
      if ((v49 & 4) != 0)
      {
        v36 = v49 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_55;
        }
      }
    }
  }
LABEL_37:
  sub_1CCF5A0B8(a2, (uint64_t)v52, a9, a10, (uint64_t)v28, (uint64_t)v30, a13);
  v32 = *(void *)(a9 + 48);
  if (v32)
  {
    v33 = 1;
    while (1)
    {
      if (!*(_DWORD *)(v32 + 8))
      {
        if (!v33)
        {
          v34 = 0;
          goto LABEL_46;
        }
        --v33;
      }
      v32 = *(void *)(v32 + 32);
      if (!v32) {
        goto LABEL_45;
      }
    }
  }
  v33 = 1;
LABEL_45:
  v34 = 1;
LABEL_46:
  v54 = (unsigned __int8 *)v28;
  v55 = v30;
  sub_1CCEF083C((uint64_t *)a2, a7, (uint64_t *)&v54, 1, 1);
  if (!v34 || v33)
  {
    v37 = *(unsigned __int8 **)(a9 + 64);
    v54 = v37;
    if (v37) {
      llvm::MetadataTracking::track((uint64_t)&v54, v37, 2);
    }
    LODWORD(v55) = *(_DWORD *)(a9 + 60);
    v38 = *(void *)(a9 + 40) + 16 * a10;
    v39 = *(llvm **)v38;
    v40 = *(void *)(v38 + 8);
    v41 = *((void *)a1 + 104);
    if (v41) {
      v42 = *(_WORD *)(v41 + 8);
    }
    else {
      v42 = 0;
    }
    v43 = sub_1CD7F3564(a1, (const char *)0xC9, (uint64_t)&v54, v39, v40, (uint64_t)v28, v30, v42);
    v45 = v44;
    if (!v54) {
      goto LABEL_68;
    }
    v46 = *v54;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        v47 = v54;
      }
      else {
        v47 = 0;
      }
      if ((v46 - 3) < 0xFFFFFFFE)
      {
        if (v46 == 3) {
          *((void *)v54 + 1) = 0;
        }
        goto LABEL_68;
      }
      v48 = (unint64_t)(v47 + 8);
    }
    else
    {
      if ((v54[1] & 0x7F) != 2 && !*((_DWORD *)v54 + 3)) {
        goto LABEL_68;
      }
      v50 = *((void *)v54 + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_68;
      }
      v48 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        goto LABEL_68;
      }
    }
    v51 = &v54;
    sub_1CC5FA668(v48 + 16, &v51);
LABEL_68:
    v54 = (unsigned __int8 *)v43;
    LODWORD(v55) = v45;
    v56 = v28;
    v57 = 1;
    sub_1CCEF083C((uint64_t *)a2, a9, (uint64_t *)&v54, 2, 1);
    goto LABEL_49;
  }
  sub_1CD800DA0((uint64_t)a1, a9, 1, (uint64_t)v28, 1);
  sub_1CCEF0930((uint64_t *)a2, a9);
LABEL_49:
  v14 = a7;
LABEL_29:
  if (v52[0] != v53) {
    free(v52[0]);
  }
  return v14;
}

uint64_t *sub_1CCF590F4(llvm::APFloatBase *a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, __int16 a8, unsigned int a9)
{
  uint64_t v9 = *(void *)(a6 + 48);
  if (!v9) {
    return 0;
  }
  int v15 = 1;
  do
  {
    if (*(_DWORD *)(v9 + 8) == a7)
    {
      if (!v15) {
        return 0;
      }
      --v15;
    }
    uint64_t v9 = *(void *)(v9 + 32);
  }
  while (v9);
  if (v15) {
    return 0;
  }
  if (!a6) {
    return 0;
  }
  v16 = 0;
  if (*(_WORD *)(a6 + 24) != 308) {
    return v16;
  }
  if ((*(_WORD *)(a6 + 26) & 0xC00) != 0) {
    return 0;
  }
  if (!(_BYTE)a3) {
    return 0;
  }
  v16 = 0;
  if (!**(unsigned char **)(a6 + 40)) {
    return v16;
  }
  int v18 = (*(unsigned __int16 *)(a2 + 358 * a3 + 2 * **(unsigned __int8 **)(a6 + 40) + 73672) >> (4 * a8)) & 0xF;
  if (v18 && v18 != 4) {
    return 0;
  }
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a2 + 1312))(a2, a5, 0))
  {
    v20 = *(unsigned __int8 **)(a6 + 64);
    v33 = v20;
    if (v20) {
      llvm::MetadataTracking::track((uint64_t)&v33, v20, 2);
    }
    int v34 = *(_DWORD *)(a6 + 60);
    uint64_t v21 = *(void *)(a6 + 32);
    uint64_t v22 = *(void *)(v21 + 160);
    v23 = *(void **)(v21 + 168);
    uint64_t v24 = *((void *)a1 + 104);
    __int16 v25 = v24 ? *(_WORD *)(v24 + 8) : 0;
    v26 = sub_1CD7F3564(a1, (const char *)a9, (uint64_t)&v33, a3, a4, v22, v23, v25);
    v27 = *(uint64_t **)(a6 + 32);
    v16 = sub_1CD7FDDF4((uint64_t)a1, (uint64_t)a3, a4, (uint64_t)&v33, *v27, v27[1], v27[5], v27[6], v27[10], v27[11], v27[15], v27[16], (uint64_t)v26, v28, *(void *)(a6 + 80), *(void *)(a6 + 88), *(void *)(a6 + 96), (*(unsigned __int16 *)(a6 + 26) >> 7) & 7, a8,
            HIBYTE(a8));
    sub_1CD800DA0((uint64_t)a1, a6, 1, (uint64_t)v16, 1);
    if (v33)
    {
      int v29 = *v33;
      if ((v29 - 4) > 0x1E)
      {
        if ((v29 - 3) >= 0xFFFFFFFE) {
          v32 = v33;
        }
        else {
          v32 = 0;
        }
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v31 = (unint64_t)(v32 + 8);
LABEL_39:
          v35 = &v33;
          sub_1CC5FA668(v31 + 16, &v35);
          return v16;
        }
        if (v29 == 3) {
          *((void *)v33 + 1) = 0;
        }
      }
      else if ((v33[1] & 0x7F) == 2 || *((_DWORD *)v33 + 3))
      {
        uint64_t v30 = *((void *)v33 + 2);
        if ((v30 & 4) != 0)
        {
          unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
          if (v31) {
            goto LABEL_39;
          }
        }
      }
    }
  }
  return v16;
}

uint64_t sub_1CCF5938C(uint64_t *a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  v2 = *(uint64_t **)(a2 + 32);
  v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  *(void *)&long long v112 = *v3;
  *((void *)&v112 + 1) = v6;
  if (*(_WORD *)(v4 + 24) != 253) {
    return 0;
  }
  __int16 v8 = *(_WORD *)(v4 + 26);
  if ((v8 & 0xF80) != 0) {
    return 0;
  }
  uint64_t v11 = *(void *)(v4 + 48);
  if (!v11) {
    return 0;
  }
  int v14 = 1;
  do
  {
    if (*(_DWORD *)(v11 + 8) == v5)
    {
      if (!v14) {
        return 0;
      }
      --v14;
    }
    uint64_t v11 = *(void *)(v11 + 32);
  }
  while (v11);
  if (v14 || *(_WORD *)(*(void *)(v4 + 96) + 36) & 0xF00 | v8 & 8) {
    return 0;
  }
  if (!(_BYTE)v7)
  {
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
      goto LABEL_17;
    }
    return 0;
  }
  if (v7 - 15 >= 0x9C) {
    return 0;
  }
LABEL_17:
  long long v103 = *(_OWORD *)(*(void *)(v4 + 40) + 16 * v5);
  int v15 = sub_1CC4A0738((llvm::EVT *)&v112);
  if ((v15 & (v15 - 1)) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a1[1] + 1312))(a1[1], a2, 0)) {
    return v9;
  }
  v118[0] = v119;
  v118[1] = (void *)0x400000000;
  if (!sub_1CCF59EB0(v112, *((uint64_t *)&v112 + 1), a2, v4, v5, *(unsigned __int16 *)(a2 + 24), (uint64_t)v118, a1[1]))
  {
    uint64_t v9 = 0;
    goto LABEL_43;
  }
  if (*(_WORD *)(a2 + 24) == 198) {
    int v17 = 2;
  }
  else {
    int v17 = 3;
  }
  int v101 = v17;
  char v18 = 4 * v17;
  long long v110 = v112;
  long long v111 = v103;
  int v19 = 15 << (4 * v17);
  for (LOBYTE(v20) = v103; ; LOBYTE(v20) = v116)
  {
    uint64_t v21 = v110;
    uint64_t v20 = v20;
    if ((_BYTE)v110 && v20 != 0)
    {
      unsigned int v23 = *(unsigned __int16 *)(a1[1] + 358 * v110 + 2 * v20 + 73672);
      int v24 = v19 & v23;
      int v25 = (v23 >> v18) & 0xF;
      if (!v24 || v25 == 4) {
        break;
      }
    }
    if (sub_1CD3DB440((llvm::EVT *)&v111, v16) <= 1)
    {
      uint64_t v21 = v110;
      uint64_t v20 = v111;
      break;
    }
    sub_1CD804190(*a1, (BOOL *)&v110, v27, (unint64_t *)&v116);
    long long v110 = v116;
    sub_1CD804190(*a1, (BOOL *)&v111, v28, (unint64_t *)&v116);
    long long v111 = v116;
  }
  uint64_t v9 = 0;
  if (!v21 || !v20) {
    goto LABEL_43;
  }
  unsigned int v29 = *(unsigned __int16 *)(a1[1] + 358 * v21 + 2 * v20 + 73672);
  int v30 = v19 & v29;
  int v31 = (v29 >> v18) & 0xF;
  if (v30) {
    BOOL v32 = v31 == 4;
  }
  else {
    BOOL v32 = 1;
  }
  if (!v32)
  {
    uint64_t v9 = 0;
    goto LABEL_43;
  }
  v33 = *(unsigned __int8 **)(a2 + 64);
  v108 = v33;
  if (v33) {
    llvm::MetadataTracking::track((uint64_t)&v108, v33, 2);
  }
  int v109 = *(_DWORD *)(a2 + 60);
  unsigned int v34 = sub_1CD3DB440((llvm::EVT *)&v112, (const char *)v33);
  unsigned int v36 = sub_1CD3DB440((llvm::EVT *)&v110, v35);
  unint64_t v96 = sub_1CB896FB8((unsigned __int8 *)&v111);
  if (v37 == 1) {
  *(void *)&long long v116 = v117;
  }
  *((void *)&v116 + 1) = 0x400000000;
  v113 = v115;
  uint64_t v114 = 0x400000000;
  if (v36 > v34)
  {
    uint64_t v38 = 0;
    v39 = (uint64_t *)v115;
    goto LABEL_78;
  }
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(v4 + 32);
  if (v34 / v36 <= 1) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = v34 / v36;
  }
  unint64_t v104 = *(void *)(v41 + 48);
  v102 = *(uint64_t **)(v41 + 40);
  do
  {
    uint64_t v97 = v42;
    uint64_t v43 = *(void *)(v4 + 96);
    char v44 = *(unsigned char *)(v43 + 34);
    uint64_t v45 = *(void *)(v43 + 8);
    uint64_t v99 = *a1;
    v46 = *(unsigned __int8 **)(v4 + 64);
    v106 = (long long *)v46;
    if (v46)
    {
      llvm::MetadataTracking::track((uint64_t)&v106, v46, 2);
      uint64_t v43 = *(void *)(v4 + 96);
    }
    uint64_t v100 = v40;
    uint64_t v47 = v40;
    uint64_t v48 = (1 << (63 - __clz(((1 << v44) | v45) & -((1 << v44) | v45)))) | v40;
    unint64_t v49 = 63 - __clz(v48 & -v48);
    int v107 = *(_DWORD *)(v4 + 60);
    uint64_t v50 = *((void *)&v110 + 1);
    uint64_t v98 = v110;
    v51 = *(uint64_t **)(v4 + 32);
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    sub_1CB8F0264((uint64_t *)v43, v47, (uint64_t)&v105);
    uint64_t v54 = *(void *)(v4 + 96);
    __int16 v55 = *(_WORD *)(v54 + 32);
    long long v56 = *(_OWORD *)(v54 + 56);
    long long v120 = *(_OWORD *)(v54 + 40);
    long long v121 = v56;
    uint64_t v95 = v49 | 0x100;
    uint64_t v57 = (uint64_t)v102;
    v59 = sub_1CD7FAEE8(v99, v101, (uint64_t)&v106, v98, v50, v53, v52, v58, (uint64_t)v102, v104, &v105, v111, *((uint64_t *)&v111 + 1), v95, SHIDWORD(v95), v55, &v120);
    if (v106)
    {
      int v60 = *(unsigned __int8 *)v106;
      if ((v60 - 4) > 0x1E)
      {
        if ((v60 - 3) >= 0xFFFFFFFE) {
          v64 = v106;
        }
        else {
          v64 = 0;
        }
        if ((v60 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v65 = (unint64_t)v64 + 8;
LABEL_70:
          *(void *)&long long v120 = &v106;
          sub_1CC5FA668(v65 + 16, &v120);
          uint64_t v57 = (uint64_t)v102;
          goto LABEL_61;
        }
        if (v60 == 3) {
          *((void *)v106 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v106 + 1) & 0x7F) == 2 || *((_DWORD *)v106 + 3))
      {
        uint64_t v66 = *((void *)v106 + 2);
        if ((v66 & 4) != 0)
        {
          unint64_t v65 = v66 & 0xFFFFFFFFFFFFFFF8;
          if (v65) {
            goto LABEL_70;
          }
        }
      }
    }
LABEL_61:
    v102 = sub_1CD7F6604(*a1, v57, v104, v96, 0, (const llvm::APInt *)&v108, 0);
    if (DWORD2(v116) >= (unint64_t)HIDWORD(v116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v62 = (uint64_t **)(v116 + 16 * DWORD2(v116));
    *v62 = v59;
    v62[1] = 0;
    ++DWORD2(v116);
    if (v114 >= (unint64_t)HIDWORD(v114)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v104 = v104 & 0xFFFFFFFF00000000 | v61;
    v63 = (uint64_t **)((char *)v113 + 16 * v114);
    *v63 = v59;
    v63[1] = (uint64_t *)1;
    uint64_t v38 = (v114 + 1);
    LODWORD(v114) = v114 + 1;
    uint64_t v40 = v100 + v96;
    uint64_t v42 = v97 - 1;
  }
  while (v97 != 1);
  v39 = (uint64_t *)v113;
LABEL_78:
  uint64_t v67 = *(void *)(*a1 + 832);
  if (v67) {
    uint64_t v68 = *(unsigned __int16 *)(v67 + 8);
  }
  else {
    uint64_t v68 = 0;
  }
  v69 = sub_1CD7FF4E8((void *)*a1, (const char *)2, (const llvm::APInt *)&v108, (llvm *)1, 0, v39, v38, v68);
  int v71 = v70;
  uint64_t v72 = 0;
  uint64_t v73 = *(void *)(*a1 + 832);
  if (v73) {
    uint64_t v72 = *(unsigned __int16 *)(v73 + 8);
  }
  v74 = sub_1CD7FF4E8((void *)*a1, (const char *)0x95, (const llvm::APInt *)&v108, (llvm *)v112, *((uint64_t *)&v112 + 1), (uint64_t *)v116, DWORD2(v116), v72);
  v76 = v75;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v69);
  *(void *)&long long v120 = v74;
  *((void *)&v120 + 1) = v76;
  sub_1CCEF083C(a1, a2, (uint64_t *)&v120, 1, 1);
  v77 = (llvm::APFloatBase *)*a1;
  v78 = *(unsigned __int8 **)(v4 + 64);
  *(void *)&long long v120 = v78;
  if (v78) {
    llvm::MetadataTracking::track((uint64_t)&v120, v78, 2);
  }
  DWORD2(v120) = *(_DWORD *)(v4 + 60);
  uint64_t v79 = *(void *)(v4 + 40) + 16 * v5;
  v80 = *(llvm **)v79;
  uint64_t v81 = *(void *)(v79 + 8);
  uint64_t v82 = *((void *)v77 + 104);
  if (v82) {
    __int16 v83 = *(_WORD *)(v82 + 8);
  }
  else {
    __int16 v83 = 0;
  }
  v84 = sub_1CD7F3564(v77, (const char *)0xC9, (uint64_t)&v120, v80, v81, (uint64_t)v74, v76, v83);
  int v86 = v85;
  if ((void)v120)
  {
    int v87 = *(unsigned __int8 *)v120;
    if ((v87 - 4) > 0x1E)
    {
      if ((v87 - 3) >= 0xFFFFFFFE) {
        uint64_t v89 = v120;
      }
      else {
        uint64_t v89 = 0;
      }
      if ((v87 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v90 = v89 + 8;
        goto LABEL_106;
      }
      if (v87 == 3) {
        *(void *)(v120 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v120 + 1) & 0x7F) == 2 || *(_DWORD *)(v120 + 12))
    {
      uint64_t v93 = *(void *)(v120 + 16);
      if ((v93 & 4) != 0)
      {
        unint64_t v90 = v93 & 0xFFFFFFFFFFFFFFF8;
        if (v90)
        {
LABEL_106:
          v106 = &v120;
          sub_1CC5FA668(v90 + 16, &v106);
        }
      }
    }
  }
  sub_1CCF5A0B8((llvm::APFloatBase **)a1, (uint64_t)v118, v4, v5, (uint64_t)v74, (uint64_t)v76, *(unsigned __int16 *)(a2 + 24));
  *(void *)&long long v120 = v84;
  DWORD2(v120) = v86;
  *(void *)&long long v121 = v69;
  DWORD2(v121) = v71;
  sub_1CCEF083C(a1, v4, (uint64_t *)&v120, 2, 1);
  if (v113 != v115) {
    free(v113);
  }
  if ((unsigned char *)v116 != v117) {
    free((void *)v116);
  }
  if (v108)
  {
    int v88 = *v108;
    if ((v88 - 4) > 0x1E)
    {
      if ((v88 - 3) >= 0xFFFFFFFE) {
        v91 = v108;
      }
      else {
        v91 = 0;
      }
      if ((v88 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v92 = (unint64_t)(v91 + 8);
        goto LABEL_112;
      }
      if (v88 == 3) {
        *((void *)v108 + 1) = 0;
      }
    }
    else if ((v108[1] & 0x7F) == 2 || *((_DWORD *)v108 + 3))
    {
      uint64_t v94 = *((void *)v108 + 2);
      if ((v94 & 4) != 0)
      {
        unint64_t v92 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (v92)
        {
LABEL_112:
          *(void *)&long long v116 = &v108;
          sub_1CC5FA668(v92 + 16, &v116);
        }
      }
    }
  }
  uint64_t v9 = a2;
LABEL_43:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v9;
}

uint64_t sub_1CCF59C14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12)
{
  int v17 = *(unsigned __int16 *)(a9 + 24);
  if (a12 == 2)
  {
    if (v17 != 253) {
      return 0;
    }
    __int16 v18 = *(_WORD *)(a9 + 26);
    int v19 = v18 & 0xC00;
    if (v19 == 2048) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v17 != 253) {
    return 0;
  }
  __int16 v18 = *(_WORD *)(a9 + 26);
  int v19 = v18 & 0xC00;
  if (v19 != 3072)
  {
LABEL_7:
    if (v19 != 1024) {
      return 0;
    }
  }
LABEL_8:
  if ((v18 & 0x380) != 0) {
    return 0;
  }
  uint64_t v21 = *(void *)(a9 + 48);
  if (!v21) {
    return 0;
  }
  int v22 = 1;
  do
  {
    if (*(_DWORD *)(v21 + 8) == a10)
    {
      if (!v22) {
        return 0;
      }
      --v22;
    }
    uint64_t v21 = *(void *)(v21 + 32);
  }
  while (v21);
  if (v22) {
    return 0;
  }
  uint64_t v23 = *(void *)(a9 + 80);
  uint64_t v24 = *(void *)(a9 + 88);
  if ((a6 & 1) == 0)
  {
    int v25 = v18 & 8;
    if ((*(_WORD *)(*(void *)(a9 + 96) + 36) & 0xF00) == 0 && v25 == 0)
    {
      if ((_BYTE)a4)
      {
        if (a4 - 15 >= 0x9C) {
          goto LABEL_31;
        }
      }
      else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
      {
        goto LABEL_31;
      }
    }
  }
  uint64_t result = 0;
  if (!(_BYTE)a4 || !*(void *)(a9 + 80)) {
    return result;
  }
  if (((*(unsigned __int16 *)(a3 + 358 * a4 + 2 * *(void *)(a9 + 80) + 73672) >> (4 * a12)) & 0xF) != 0) {
    return 0;
  }
LABEL_31:
  BOOL v27 = *(unsigned __int8 **)(a9 + 64);
  v35 = v27;
  if (v27) {
    llvm::MetadataTracking::track((uint64_t)&v35, v27, 2);
  }
  LODWORD(v36) = *(_DWORD *)(a9 + 60);
  BOOL v28 = sub_1CD7FAFD4(a1, a12, (uint64_t)&v35, a4, a5, **(void **)(a9 + 32), *(void *)(*(void *)(a9 + 32) + 8), a8, *(void *)(*(void *)(a9 + 32) + 40), *(void *)(*(void *)(a9 + 32) + 48), v23, v24, *(void *)(a9 + 96));
  uint64_t v30 = v29;
  if (!v35) {
    goto LABEL_37;
  }
  int v31 = *v35;
  if ((v31 - 4) > 0x1E)
  {
    if ((v31 - 3) >= 0xFFFFFFFE) {
      BOOL v32 = v35;
    }
    else {
      BOOL v32 = 0;
    }
    if ((v31 - 3) < 0xFFFFFFFE)
    {
      if (v31 == 3) {
        *((void *)v35 + 1) = 0;
      }
      goto LABEL_37;
    }
    unint64_t v33 = (unint64_t)(v32 + 8);
  }
  else
  {
    if ((v35[1] & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
      goto LABEL_37;
    }
    uint64_t v34 = *((void *)v35 + 2);
    if ((v34 & 4) == 0) {
      goto LABEL_37;
    }
    unint64_t v33 = v34 & 0xFFFFFFFFFFFFFFF8;
    if (!v33) {
      goto LABEL_37;
    }
  }
  v37 = &v35;
  sub_1CC5FA668(v33 + 16, &v37);
LABEL_37:
  v35 = (unsigned __int8 *)v28;
  uint64_t v36 = v30;
  sub_1CCEF083C(a2, a7, (uint64_t *)&v35, 1, 1);
  sub_1CD800DA0(a1, a9, 1, (uint64_t)v28, 1);
  if (!*(void *)(a9 + 48)) {
    sub_1CCEF0930(a2, a9);
  }
  return a7;
}

BOOL sub_1CCF59EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  v13 = (void *)(*(void *)(a4 + 40) + 16 * a5);
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a8 + 1160))(a8, a1, a2, *v13, v13[1]);
  uint64_t v15 = *(void *)(a4 + 48);
  if (!v15) {
    return 1;
  }
  char v16 = 0;
  do
  {
    uint64_t v17 = *(void *)(v15 + 16);
    if (v17 != a3 && *(_DWORD *)(v15 + 8) == a5)
    {
      if (a6 == 200 || *(_WORD *)(v17 + 24) != 193)
      {
        if (!v14) {
          return 0;
        }
        v16 |= *(_WORD *)(v17 + 24) == 49;
      }
      else
      {
        uint64_t v18 = *(void *)(v17 + 32);
        if (a6 == 199 && (*(_DWORD *)(*(void *)(v18 + 80) + 76) - 18) < 4) {
          return 0;
        }
        char v19 = 0;
        uint64_t v20 = 0;
        char v21 = 0;
        do
        {
          char v22 = v19;
          uint64_t v23 = (uint64_t *)(v18 + 40 * v20);
          uint64_t v24 = *v23;
          int v25 = *((_DWORD *)v23 + 2);
          if (v24 != a4 || v25 != a5)
          {
            int v27 = *(unsigned __int16 *)(v24 + 24);
            BOOL v28 = v27 == 11;
            if (v27 == 35)
            {
              BOOL v28 = 1;
              BOOL v29 = 1;
            }
            else
            {
              BOOL v29 = v27 == 11;
            }
            if (!v29) {
              return 0;
            }
            v21 |= v28;
          }
          char v19 = 1;
          uint64_t v20 = 1;
        }
        while ((v22 & 1) == 0);
        if (v21)
        {
          unint64_t v30 = *(unsigned int *)(a7 + 8);
          if (v30 >= *(unsigned int *)(a7 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a7 + 8 * v30) = v17;
          ++*(_DWORD *)(a7 + 8);
        }
      }
    }
    uint64_t v15 = *(void *)(v15 + 32);
  }
  while (v15);
  if ((v16 & 1) == 0) {
    return 1;
  }
  uint64_t v31 = *(void *)(a3 + 48);
  if (!v31) {
    return 1;
  }
  while (*(_DWORD *)(v31 + 8) || *(_WORD *)(*(void *)(v31 + 16) + 24) != 49)
  {
    uint64_t v31 = *(void *)(v31 + 32);
    if (!v31) {
      return 1;
    }
  }
  return *(_DWORD *)(a7 + 8) != 0;
}

void sub_1CCF5A0B8(llvm::APFloatBase **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  v49[8] = *MEMORY[0x1E4F143B8];
  v13 = *(unsigned __int8 **)(a5 + 64);
  char v44 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v44, v13, 2);
  }
  int v45 = *(_DWORD *)(a5 + 60);
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  if (v14)
  {
    uint64_t v15 = *(uint64_t **)a2;
    uint64_t v41 = *(void *)a2 + 8 * v14;
    do
    {
      unsigned int v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v42 = v15;
      uint64_t v19 = *v15;
      uint64_t v47 = v49;
      uint64_t v48 = 0x400000000;
      do
      {
        char v20 = v17;
        char v21 = (uint64_t *)(*(void *)(v19 + 32) + 40 * v18);
        char v22 = (void *)v21[1];
        if (*v21 == a3 && v22 == a4)
        {
          if (v16 >= HIDWORD(v48)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v24 = (char *)v47 + 16 * v16;
          *(void *)uint64_t v24 = a5;
          uint64_t v25 = a6;
        }
        else
        {
          uint64_t v26 = *((void *)*a1 + 104);
          if (v26) {
            __int16 v27 = *(_WORD *)(v26 + 8);
          }
          else {
            __int16 v27 = 0;
          }
          BOOL v28 = sub_1CD7F3564(*a1, (const char *)a7, (uint64_t)&v44, **(llvm ***)(a5 + 40), *(void *)(*(void *)(a5 + 40) + 8), *v21, v22, v27);
          uint64_t v25 = v29;
          if (v48 >= (unint64_t)HIDWORD(v48)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v24 = (char *)v47 + 16 * v48;
          *(void *)uint64_t v24 = v28;
        }
        *((void *)v24 + 1) = v25;
        unsigned int v16 = v48 + 1;
        LODWORD(v48) = v48 + 1;
        char v17 = 1;
        uint64_t v18 = 1;
      }
      while ((v20 & 1) == 0);
      if (v16 >= HIDWORD(v48)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v47 + v16) = *(_OWORD *)(*(void *)(v19 + 32) + 80);
      uint64_t v30 = (v48 + 1);
      LODWORD(v48) = v48 + 1;
      uint64_t v31 = *(void *)(v19 + 40);
      BOOL v32 = *(llvm **)v31;
      uint64_t v33 = *(void *)(v31 + 8);
      uint64_t v34 = *((void *)*a1 + 104);
      if (v34) {
        uint64_t v35 = *(unsigned __int16 *)(v34 + 8);
      }
      else {
        uint64_t v35 = 0;
      }
      v46[0] = (uint64_t)sub_1CD7FF4E8(*a1, (const char *)0xC1, (const llvm::APInt *)&v44, v32, v33, (uint64_t *)v47, v30, v35);
      v46[1] = v36;
      sub_1CCEF083C((uint64_t *)a1, v19, v46, 1, 1);
      if (v47 != v49) {
        free(v47);
      }
      uint64_t v15 = v42 + 1;
    }
    while (v42 + 1 != (uint64_t *)v41);
  }
  if (v44)
  {
    int v37 = *v44;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v44;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v37 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = (unint64_t)(v38 + 8);
LABEL_41:
        uint64_t v47 = &v44;
        sub_1CC5FA668(v39 + 16, &v47);
        return;
      }
      if (v37 == 3) {
        *((void *)v44 + 1) = 0;
      }
    }
    else if ((v44[1] & 0x7F) == 2 || *((_DWORD *)v44 + 3))
    {
      uint64_t v40 = *((void *)v44 + 2);
      if ((v40 & 4) != 0)
      {
        unint64_t v39 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_41;
        }
      }
    }
  }
}

uint64_t *sub_1CCF5A3E0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return 0;
  }
  v49[9] = v3;
  void v49[10] = v4;
  uint64_t v7 = *(unsigned int **)(a1 + 32);
  __int16 v8 = *(void **)v7;
  if (*(_WORD *)(*(void *)v7 + 24) != 193) {
    return 0;
  }
  uint64_t v9 = v8[6];
  if (!v9) {
    return 0;
  }
  uint64_t v11 = v7[2];
  int v12 = 1;
  do
  {
    if (*(_DWORD *)(v9 + 8) == v11)
    {
      if (!v12) {
        return 0;
      }
      --v12;
    }
    uint64_t v9 = *(void *)(v9 + 32);
  }
  while (v9);
  if (v12) {
    return 0;
  }
  if (*(unsigned char *)(v8[5] + 16 * v11) != 2) {
    return 0;
  }
  v13 = (uint64_t *)v8[4];
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = v13[5];
  LODWORD(v13) = *(_DWORD *)(v13[10] + 76);
  char v17 = *(llvm ***)(a1 + 40);
  uint64_t v19 = *v17;
  uint64_t v18 = (uint64_t)v17[1];
  uint64_t v47 = *v17;
  uint64_t v48 = v18;
  if (v13 != 18) {
    return 0;
  }
  char v20 = (unsigned __int8 *)(*(void *)(v14 + 40) + 16 * v15);
  uint64_t v21 = *((void *)v20 + 1);
  int v22 = *v20;
  if (!sub_1CD802954(v16)) {
    return 0;
  }
  uint64_t result = 0;
  if (v19 == v22)
  {
    if (!(_BYTE)v19 && v18 != v21) {
      return 0;
    }
    uint64_t v23 = *(unsigned __int8 **)(a1 + 64);
    int v45 = v23;
    if (v23) {
      llvm::MetadataTracking::track((uint64_t)&v45, v23, 2);
    }
    int v46 = *(_DWORD *)(a1 + 60);
    if ((_BYTE)v19) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v47);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v47);
    }
    unsigned int v26 = ExtendedSizeInBits;
    if (v25 == 1) {
    uint64_t v27 = v26 - 1;
    }
    if ((*(uint64_t (**)(void, llvm *, uint64_t, uint64_t))(**(void **)(a2 + 24) + 1456))(*(void *)(a2 + 24), v47, v48, v27))
    {
      if (v45)
      {
        int v28 = *v45;
        if ((v28 - 4) > 0x1E)
        {
          if ((v28 - 3) >= 0xFFFFFFFE) {
            uint64_t v31 = v45;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v28 - 3) < 0xFFFFFFFE)
          {
            if (v28 == 3) {
              *((void *)v45 + 1) = 0;
            }
            return 0;
          }
          unint64_t v30 = (unint64_t)(v31 + 8);
        }
        else
        {
          if ((v45[1] & 0x7F) != 2 && !*((_DWORD *)v45 + 3)) {
            return 0;
          }
          uint64_t v29 = *((void *)v45 + 2);
          if ((v29 & 4) == 0) {
            return 0;
          }
          unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          if (!v30) {
            return 0;
          }
        }
        v49[0] = &v45;
        sub_1CC5FA668(v30 + 16, v49);
      }
      return 0;
    }
    BOOL v32 = sub_1CD7EBB8C(a2, (const llvm::APInt *)&v45, v14, v15, v47, v48);
    uint64_t v34 = v33;
    uint64_t v35 = sub_1CD7EBF14(a2, v27, (const llvm::APInt *)&v45, v47, v48, 0, 0);
    if (*(_WORD *)(a1 + 24) == 198) {
      uint64_t v38 = 176;
    }
    else {
      uint64_t v38 = 177;
    }
    uint64_t v39 = *(void *)(a2 + 832);
    if (v39) {
      LOWORD(v39) = *(_WORD *)(v39 + 8);
    }
    uint64_t v40 = sub_1CCFDED5C(a2, v38, (const llvm::APInt *)&v45, v47, v48, (uint64_t)v32, v34, v37, (uint64_t)v35, v36, v39);
    if (v45)
    {
      int v41 = *v45;
      if ((v41 - 4) > 0x1E)
      {
        if ((v41 - 3) >= 0xFFFFFFFE) {
          uint64_t v42 = v45;
        }
        else {
          uint64_t v42 = 0;
        }
        if ((v41 - 3) < 0xFFFFFFFE)
        {
          if (v41 == 3) {
            *((void *)v45 + 1) = 0;
          }
          return v40;
        }
        unint64_t v43 = (unint64_t)(v42 + 8);
      }
      else
      {
        if ((v45[1] & 0x7F) != 2 && !*((_DWORD *)v45 + 3)) {
          return v40;
        }
        uint64_t v44 = *((void *)v45 + 2);
        if ((v44 & 4) == 0) {
          return v40;
        }
        unint64_t v43 = v44 & 0xFFFFFFFFFFFFFFF8;
        if (!v43) {
          return v40;
        }
      }
      v49[0] = &v45;
      sub_1CC5FA668(v43 + 16, v49);
    }
    return v40;
  }
  return result;
}

uint64_t *sub_1CCF5A720(uint64_t *a1, uint64_t a2)
{
  v2 = (const char *)*(unsigned __int16 *)(a2 + 24);
  long long v3 = *(_OWORD *)*(void *)(a2 + 40);
  long long v61 = v3;
  if (*((unsigned char *)a1 + 33) || !(_BYTE)v3) {
    return 0;
  }
  uint64_t v8 = a1[1];
  if (v3 != 1 && (!*(void *)(v8 + 8 * v3 + 96) || v3 == 0)) {
    return 0;
  }
  if ((*(unsigned __int8 *)(v8 + 390 * v3 + 4053) | 4) != 4) {
    return 0;
  }
  v10 = *(_DWORD **)(a2 + 32);
  uint64_t v11 = *(void *)v10;
  if (*(_WORD *)(*(void *)v10 + 24) != 191) {
    return 0;
  }
  uint64_t v12 = *(void *)(v11 + 48);
  if (!v12) {
    return 0;
  }
  int v13 = v10[2];
  int v14 = 1;
  do
  {
    if (*(_DWORD *)(v12 + 8) == v13)
    {
      if (!v14) {
        return 0;
      }
      --v14;
    }
    uint64_t v12 = *(void *)(v12 + 32);
  }
  while (v12);
  if (v14) {
    return 0;
  }
  uint64_t v15 = *(uint64_t **)(v11 + 32);
  uint64_t v16 = *v15;
  if (*(_WORD *)(*v15 + 24) != 193) {
    return 0;
  }
  uint64_t v17 = v15[1];
  uint64_t v18 = (void *)(*(void *)(**(void **)(v16 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(v16 + 32) + 8));
  v60[0] = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v8 + 400))(v8, *(void *)(**(void **)(*a1 + 40) + 40) + 272, *(void *)(*a1 + 56), *v18, v18[1]);
  v60[1] = v19;
  if (LOBYTE(v60[0])) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v60);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v60);
  }
  int v22 = v21;
  if (ExtendedSizeInBits != sub_1CB87E200((unsigned __int8 *)&v61)) {
    return 0;
  }
  uint64_t v4 = 0;
  if (v22 == v23)
  {
    uint64_t v25 = *(void **)(v11 + 32);
    uint64_t v27 = v25[5];
    unsigned int v26 = (void *)v25[6];
    uint64_t v29 = v25[10];
    int v28 = (void *)v25[11];
    unint64_t v30 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v58 = v30;
    if (v30) {
      llvm::MetadataTracking::track((uint64_t)&v58, v30, 2);
    }
    int v59 = *(_DWORD *)(a2 + 60);
    uint64_t v31 = (llvm::APFloatBase *)*a1;
    if (v2 == 212)
    {
      uint64_t v32 = *(void *)(a2 + 32);
      uint64_t v33 = *(void *)(v32 + 40);
      uint64_t v34 = *(void *)(v32 + 48);
      uint64_t v35 = *((void *)v31 + 104);
      if (v35) {
        LOWORD(v35) = *(_WORD *)(v35 + 8);
      }
      uint64_t v37 = sub_1CCFDED5C((uint64_t)v31, 212, (const llvm::APInt *)&v58, (llvm *)v61, *((uint64_t *)&v61 + 1), v27, (uint64_t)v26, v24, v33, v34, v35);
      unsigned int v39 = v38;
      uint64_t v40 = *(void *)(a2 + 32);
      uint64_t v41 = *(void *)(v40 + 40);
      uint64_t v42 = *(void *)(v40 + 48);
      uint64_t v43 = *(void *)(*a1 + 832);
      if (v43) {
        LOWORD(v43) = *(_WORD *)(v43 + 8);
      }
      uint64_t v44 = sub_1CCFDED5C(*a1, 212, (const llvm::APInt *)&v58, (llvm *)v61, *((uint64_t *)&v61 + 1), v29, (uint64_t)v28, v36, v41, v42, v43);
    }
    else
    {
      uint64_t v52 = *((void *)v31 + 104);
      __int16 v53 = v52 ? *(_WORD *)(v52 + 8) : 0;
      uint64_t v54 = sub_1CD7F3564(v31, v2, (uint64_t)&v58, (llvm *)v61, *((uint64_t *)&v61 + 1), v27, v26, v53);
      unsigned int v39 = v55;
      uint64_t v56 = *(void *)(*a1 + 832);
      __int16 v57 = v56 ? *(_WORD *)(v56 + 8) : 0;
      uint64_t v44 = sub_1CD7F3564((llvm::APFloatBase *)*a1, v2, (uint64_t)&v58, (llvm *)v61, *((uint64_t *)&v61 + 1), v29, v28, v57);
      uint64_t v37 = v54;
    }
    uint64_t v47 = *(void *)(*a1 + 832);
    if (v47) {
      LOWORD(v47) = *(_WORD *)(v47 + 8);
    }
    uint64_t v4 = sub_1CD7F5D38((void *)*a1, (const char *)0xBF, (const llvm::APInt *)&v58, (llvm *)v61, *((uint64_t *)&v61 + 1), v16, v17, v46, (uint64_t)v37, v39, (uint64_t)v44, v45, 0, v47);
    if (v58)
    {
      int v48 = *v58;
      if ((v48 - 4) > 0x1E)
      {
        if ((v48 - 3) >= 0xFFFFFFFE) {
          v51 = v58;
        }
        else {
          v51 = 0;
        }
        if ((v48 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v50 = (unint64_t)(v51 + 8);
LABEL_48:
          v62 = &v58;
          sub_1CC5FA668(v50 + 16, &v62);
          return v4;
        }
        if (v48 == 3) {
          *((void *)v58 + 1) = 0;
        }
      }
      else if ((v58[1] & 0x7F) == 2 || *((_DWORD *)v58 + 3))
      {
        uint64_t v49 = *((void *)v58 + 2);
        if ((v49 & 4) != 0)
        {
          unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
          if (v50) {
            goto LABEL_48;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t *sub_1CCF5AAC8(uint64_t a1, uint64_t a2, llvm::APFloatBase *a3)
{
  uint64_t v6 = (const char *)*(unsigned __int16 *)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *v7;
  int v10 = *((_DWORD *)v7 + 2);
  uint64_t v11 = *(llvm **)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v42 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v42, v13, 2);
  }
  int v43 = *(_DWORD *)(a1 + 60);
  if ((*(_WORD *)(v9 + 24) & 0xFFFE) != 0xBE) {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(v9 + 48);
  if (!v14) {
    goto LABEL_24;
  }
  int v15 = 1;
  do
  {
    if (*(_DWORD *)(v14 + 8) == v10)
    {
      if (!v15) {
        goto LABEL_24;
      }
      --v15;
    }
    uint64_t v14 = *(void *)(v14 + 32);
  }
  while (v14);
  if (v15
    || (uint64_t v16 = *(void **)(v9 + 32),
        uint64_t v18 = v16[5],
        uint64_t v17 = (void *)v16[6],
        uint64_t v19 = v16[10],
        !sub_1CCF5AD84(v18, (int)v17, (int)v6))
    || (char v20 = (void *)v16[11], !sub_1CCF5AD84(v19, (int)v20, (int)v6)))
  {
LABEL_24:
    int v22 = 0;
    goto LABEL_25;
  }
  uint64_t v41 = v20;
  if ((_BYTE)v11)
  {
    uint64_t v21 = v19;
    int v22 = 0;
    if (!*(unsigned char *)(v18 + 80)) {
      goto LABEL_25;
    }
    if (v6 == 199) {
      __int16 v23 = -4096;
    }
    else {
      __int16 v23 = 240;
    }
    if (v6 == 198) {
      __int16 v24 = 3840;
    }
    else {
      __int16 v24 = v23;
    }
    if (((unsigned __int16)v24 & *(_WORD *)(a2
                                           + 358 * v11
                                           + 2 * *(unsigned __int8 *)(v18 + 80)
                                           + 73672)) != 0
      || !*(unsigned char *)(v21 + 80)
      || ((unsigned __int16)v24 & *(_WORD *)(a2
                                           + 358 * v11
                                           + 2 * *(unsigned __int8 *)(v21 + 80)
                                           + 73672)) != 0)
    {
      goto LABEL_24;
    }
    uint64_t v29 = v21;
    uint64_t v30 = *((void *)a3 + 104);
    if (v30) {
      __int16 v31 = *(_WORD *)(v30 + 8);
    }
    else {
      __int16 v31 = 0;
    }
    uint64_t v32 = sub_1CD7F3564(a3, v6, (uint64_t)&v42, v11, v12, v18, v17, v31);
    uint64_t v34 = v33;
    uint64_t v35 = *((void *)a3 + 104);
    if (v35) {
      __int16 v36 = *(_WORD *)(v35 + 8);
    }
    else {
      __int16 v36 = 0;
    }
    uint64_t v37 = sub_1CD7F3564(a3, v6, (uint64_t)&v42, v11, v12, v29, v41, v36);
    int v22 = sub_1CD3E1260(a3, (const llvm::APInt *)&v42, v11, v12, **(void **)(v9 + 32), *(void *)(*(void *)(v9 + 32) + 8), (uint64_t)v32, v34, (uint64_t)v37, v38, v39);
  }
  else
  {
    int v22 = 0;
  }
LABEL_25:
  if (v42)
  {
    int v25 = *v42;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v42;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v27 + 8);
LABEL_35:
        uint64_t v44 = &v42;
        sub_1CC5FA668(v28 + 16, &v44);
        return v22;
      }
      if (v25 == 3) {
        *((void *)v42 + 1) = 0;
      }
    }
    else if ((v42[1] & 0x7F) == 2 || *((_DWORD *)v42 + 3))
    {
      uint64_t v40 = *((void *)v42 + 2);
      if ((v40 & 4) != 0)
      {
        unint64_t v28 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v28) {
          goto LABEL_35;
        }
      }
    }
  }
  return v22;
}

BOOL sub_1CCF5AD84(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    return 0;
  }
  int v4 = 1;
  do
  {
    if (*(_DWORD *)(v3 + 8) == a2)
    {
      if (!v4) {
        return 0;
      }
      --v4;
    }
    uint64_t v3 = *(void *)(v3 + 32);
  }
  while (v3);
  if (v4 || *(_WORD *)(a1 + 24) != 253) {
    return 0;
  }
  unsigned int v5 = (*(unsigned __int16 *)(a1 + 26) >> 10) & 3;
  if (v5 < 2) {
    return 1;
  }
  if (a3 != 198 && v5 == 2) {
    return 0;
  }
  return a3 == 199 || v5 != 3;
}

uint64_t *sub_1CCF5ADFC(uint64_t a1, llvm::APFloatBase *a2)
{
  v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)v2;
  if (*(_WORD *)(*(void *)v2 + 24) != 185) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 48);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = v2[2];
  int v8 = 1;
  do
  {
    if (*(_DWORD *)(v4 + 8) == v7)
    {
      if (!v8) {
        return 0;
      }
      --v8;
    }
    uint64_t v4 = *(void *)(v4 + 32);
  }
  while (v4);
  if (v8) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(llvm **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v14 = *((void *)a2 + 3);
  uint64_t v15 = *(void *)(*(void *)(v3 + 40) + 16 * v7);
  if ((_BYTE)v15)
  {
    if ((v15 == 1 || !(BOOL v16 = *(void *)(v14 + 8 * v15 + 96) == 0))
      && (*(unsigned __int8 *)(v14 + 390 * v15 + 4047) | 4) == 4)
    {
      return 0;
    }
  }
  if (!(_BYTE)v12) {
    return (uint64_t *)v12;
  }
  if (v12 != 1 && (!*(void *)(v14 + 8 * v12 + 96) || v12 == 0)) {
    return 0;
  }
  if ((*(unsigned __int8 *)(v14 + 390 * v12 + 4047) | 4) != 4) {
    return 0;
  }
  uint64_t v18 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v27 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v27, v18, 2);
  }
  int v28 = *(_DWORD *)(a1 + 60);
  uint64_t v20 = sub_1CD7EB80C((uint64_t)a2, **(void **)(v3 + 32), *(void *)(*(void *)(v3 + 32) + 8), (uint64_t)&v27, (uint64_t)v12, v13);
  uint64_t v21 = *((void *)a2 + 104);
  if (v21) {
    __int16 v22 = *(_WORD *)(v21 + 8);
  }
  else {
    __int16 v22 = 0;
  }
  uint64_t v9 = sub_1CD7F3564(a2, (const char *)0xB9, (uint64_t)&v27, v12, v13, v20, v19, v22);
  if (v27)
  {
    int v23 = *v27;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        unsigned int v26 = v27;
      }
      else {
        unsigned int v26 = 0;
      }
      if ((v23 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v25 = (unint64_t)(v26 + 8);
LABEL_45:
        uint64_t v29 = &v27;
        sub_1CC5FA668(v25 + 16, &v29);
        return v9;
      }
      if (v23 == 3) {
        *((void *)v27 + 1) = 0;
      }
    }
    else if ((v27[1] & 0x7F) == 2 || *((_DWORD *)v27 + 3))
    {
      uint64_t v24 = *((void *)v27 + 2);
      if ((v24 & 4) != 0)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (v25) {
          goto LABEL_45;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1CCF5B034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (unint64_t *)(*(void *)(a2 + 40) + 16 * a3);
  unint64_t v8 = *v6;
  unint64_t v7 = v6[1];
  if ((_BYTE)v8)
  {
    if (v8 - 120 < 0x33) {
      return 0;
    }
  }
  else if (*(unsigned char *)(v7 + 8) == 19)
  {
    return 0;
  }
  unint64_t v13 = v8;
  unint64_t v14 = v7;
  unsigned int v11 = sub_1CD3DB440((llvm::EVT *)&v13, (const char *)a2);
  LODWORD(v14) = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v13);
  }
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v12 = 0;
  }
  unint64_t v13 = v12;
  uint64_t v9 = sub_1CCF5B12C(a1, a2, a3, (uint64_t)&v13, 0);
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t sub_1CCF5B12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v7 = *(unsigned char *)(a1 + 34);
  uint64_t v9 = *(void **)a1;
  unint64_t v8 = *(unsigned int **)(a1 + 8);
  BOOL v16 = v9;
  LOBYTE(v9) = *(unsigned char *)(a1 + 33);
  char v17 = v7;
  char v18 = (char)v9;
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  unsigned int v15 = 1;
  uint64_t v14 = 0;
  unsigned int v13 = 1;
  uint64_t v12 = 0;
  uint64_t v10 = sub_1CD007B58(v8, a2, a3, a4, &v14, &v12, &v16, 0, a5);
  if (v10)
  {
    sub_1CCEF0788(a1, a2);
    sub_1CCEF0AD0((uint64_t *)a1, (uint64_t *)&v16);
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  if (v15 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  return v10;
}

uint64_t sub_1CCF5B228(uint64_t *a1, uint64_t *a2, llvm *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  v106[16] = *MEMORY[0x1E4F143B8];
  uint64_t v97 = a3;
  uint64_t v98 = a4;
  uint64_t v6 = a2[5];
  unint64_t v8 = *(void **)v6;
  uint64_t v7 = *(void *)(v6 + 8);
  unint64_t v104 = v8;
  uint64_t v105 = v7;
  if ((_BYTE)v8)
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v104);
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned __int8 v12 = v97;
  }
  else
  {
    unsigned __int8 v12 = a3;
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v7 + 24), 0, (BOOL)a3);
    unint64_t v10 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  uint64_t v95 = (llvm *)(v10 | EVT);
  uint64_t v96 = v11;
  if (EVT == v12)
  {
    if ((_BYTE)EVT || v11 == v98) {
      return (uint64_t)v4;
    }
  }
  else if ((_BYTE)EVT)
  {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v95);
    goto LABEL_11;
  }
  unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v95);
LABEL_11:
  unsigned int v15 = ExtendedSizeInBits;
  if (v14 == 1) {
  if ((_BYTE)v97)
  }
    unsigned int v16 = sub_1CB87E200((unsigned __int8 *)&v97);
  else {
    unsigned int v16 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v97);
  }
  unsigned int v18 = v16;
  if (v17 == 1) {
  if (v15 == v18)
  }
  {
    unint64_t v104 = v106;
    uint64_t v105 = 0x800000000;
    if (!*((_WORD *)v4 + 28))
    {
LABEL_39:
      unsigned int v26 = *(llvm::LLVMContext **)(*a1 + 56);
      uint64_t v27 = v97;
      uint64_t v28 = v98;
      *(_OWORD *)v102 = *(_OWORD *)v4[5];
      unsigned int v29 = sub_1CD3DB440((llvm::EVT *)v102, v17);
      uint64_t v30 = (llvm *)sub_1CB8E5DAC(v26, (uint64_t)v27, v28, v29, 0);
      uint64_t v32 = v31;
      uint64_t v33 = (void *)*a1;
      uint64_t v34 = (void *)v4[8];
      v102[0] = v34;
      if (v34) {
        llvm::MetadataTracking::track((uint64_t)v102, (unsigned __int8 *)v34, 2);
      }
      LODWORD(v102[1]) = *((_DWORD *)v4 + 15);
      uint64_t v35 = v33[104];
      if (v35) {
        uint64_t v36 = *(unsigned __int16 *)(v35 + 8);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v4 = sub_1CD7FF4E8(v33, (const char *)0x92, (const llvm::APInt *)v102, v30, v32, (uint64_t *)v104, v105, v36);
      if (v102[0])
      {
        int v59 = *(unsigned __int8 *)v102[0];
        if ((v59 - 4) > 0x1E)
        {
          if ((v59 - 3) >= 0xFFFFFFFE) {
            uint64_t v89 = v102[0];
          }
          else {
            uint64_t v89 = 0;
          }
          if ((v59 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v90 = (unint64_t)v89 + 8;
LABEL_153:
            uint64_t v99 = v102;
            sub_1CC5FA668(v90 + 16, &v99);
            goto LABEL_81;
          }
          if (v59 == 3) {
            *((void *)v102[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v102[0] + 1) & 0x7F) == 2 || *((_DWORD *)v102[0] + 3))
        {
          uint64_t v92 = *((void *)v102[0] + 2);
          if ((v92 & 4) != 0)
          {
            unint64_t v90 = v92 & 0xFFFFFFFFFFFFFFF8;
            if (v90) {
              goto LABEL_153;
            }
          }
        }
      }
LABEL_81:
      int v60 = v104;
      if (v104 == v106) {
        return (uint64_t)v4;
      }
      goto LABEL_113;
    }
    uint64_t v37 = (uint64_t **)v4[4];
    int v38 = &v37[5 * *((unsigned __int16 *)v4 + 28)];
    while (1)
    {
      uint64_t v40 = *v37;
      unint64_t v39 = (unint64_t)v37[1];
      uint64_t v41 = (unsigned __int8 *)((*v37)[5] + 16 * v39);
      int v42 = *v41;
      int v43 = v95;
      if (v42 == v95)
      {
        uint64_t v44 = *((void *)v41 + 1);
        if (v42 || v44 == v96) {
          goto LABEL_61;
        }
      }
      uint64_t v46 = (llvm::APFloatBase *)*a1;
      uint64_t v47 = (void *)v4[8];
      v102[0] = v47;
      if (v47)
      {
        llvm::MetadataTracking::track((uint64_t)v102, (unsigned __int8 *)v47, 2);
        int v43 = v95;
      }
      LODWORD(v102[1]) = *((_DWORD *)v4 + 15);
      uint64_t v48 = *((void *)v46 + 104);
      if (v48) {
        __int16 v49 = *(_WORD *)(v48 + 8);
      }
      else {
        __int16 v49 = 0;
      }
      uint64_t v40 = sub_1CD7F3564(v46, (const char *)0xC9, (uint64_t)v102, v43, v96, (uint64_t)v40, (void *)v39, v49);
      unsigned int v51 = v50;
      if (v102[0])
      {
        int v52 = *(unsigned __int8 *)v102[0];
        if ((v52 - 4) > 0x1E)
        {
          if ((v52 - 3) >= 0xFFFFFFFE) {
            uint64_t v56 = v102[0];
          }
          else {
            uint64_t v56 = 0;
          }
          if ((v52 - 3) < 0xFFFFFFFE)
          {
            if (v52 == 3) {
              *((void *)v102[0] + 1) = 0;
            }
            goto LABEL_60;
          }
          unint64_t v57 = (unint64_t)v56 + 8;
        }
        else
        {
          if ((*((unsigned char *)v102[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
            goto LABEL_60;
          }
          uint64_t v58 = *((void *)v102[0] + 2);
          if ((v58 & 4) == 0) {
            goto LABEL_60;
          }
          unint64_t v57 = v58 & 0xFFFFFFFFFFFFFFF8;
          if (!v57) {
            goto LABEL_60;
          }
        }
        uint64_t v99 = v102;
        sub_1CC5FA668(v57 + 16, &v99);
      }
LABEL_60:
      unint64_t v39 = v39 & 0xFFFFFFFF00000000 | v51;
LABEL_61:
      uint64_t v54 = sub_1CD7EF724(*a1, (uint64_t)v97, v98, (uint64_t)v40, v39);
      if (v105 >= (unint64_t)HIDWORD(v105)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v55 = (uint64_t *)((char *)v104 + 16 * v105);
      *unsigned int v55 = v54;
      v55[1] = v53;
      LODWORD(v105) = v105 + 1;
      sub_1CCEF0788((uint64_t)a1, *((void *)v104 + 2 * v105 - 2));
      v37 += 5;
      if (v37 == v38) {
        goto LABEL_39;
      }
    }
  }
  if ((_BYTE)v95)
  {
    if (((_BYTE)v95 + 104) < 0x13u
      || ((_BYTE)v95 - 8) < 7u
      || ((_BYTE)v95 - 75) < 0x2Du)
    {
      uint64_t v19 = *(llvm::IntegerType **)(*a1 + 56);
      uint64_t v20 = sub_1CB87E200((unsigned __int8 *)&v95);
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(_DWORD *)(v96 + 8) & 0xFE) == 0x12) {
      unsigned int v22 = *(unsigned __int8 *)(**(void **)(v96 + 16) + 8);
    }
    else {
      unsigned int v22 = *(_DWORD *)(v96 + 8);
    }
    if (v22 < 7)
    {
      uint64_t v19 = *(llvm::IntegerType **)(*a1 + 56);
      uint64_t v20 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v95);
LABEL_29:
      int v23 = (llvm::LLVMContext *)v20;
      if (v21 == 1) {
      if ((int)v23 <= 31)
      }
      {
        switch(v23)
        {
          case 1:
            uint64_t v24 = 0;
            uint64_t v25 = 2;
            goto LABEL_85;
          case 0x10:
            uint64_t v24 = 0;
            uint64_t v25 = 4;
            goto LABEL_85;
          case 8:
            uint64_t v24 = 0;
            uint64_t v25 = 3;
            goto LABEL_85;
        }
      }
      else
      {
        switch(v23)
        {
          case 0x20:
            uint64_t v24 = 0;
            uint64_t v25 = 5;
LABEL_85:
            uint64_t v4 = (uint64_t *)sub_1CCF5B228(a1, v4, v25, v24);
            uint64_t v95 = (llvm *)v25;
            uint64_t v96 = v24;
            goto LABEL_86;
          case 0x40:
            uint64_t v24 = 0;
            uint64_t v25 = 6;
            goto LABEL_85;
          case 0x80:
            uint64_t v24 = 0;
            uint64_t v25 = 7;
            goto LABEL_85;
        }
      }
      uint64_t v24 = llvm::IntegerType::get(v19, v23);
      uint64_t v25 = 0;
      goto LABEL_85;
    }
  }
LABEL_86:
  if ((_BYTE)v97)
  {
    if (((_BYTE)v97 + 104) < 0x13u
      || ((_BYTE)v97 - 8) < 7u
      || ((_BYTE)v97 - 75) < 0x2Du)
    {
      long long v61 = *(llvm::IntegerType **)(*a1 + 56);
      uint64_t v62 = sub_1CB87E200((unsigned __int8 *)&v97);
      goto LABEL_96;
    }
  }
  else
  {
    if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12) {
      unsigned int v64 = *(unsigned __int8 *)(**(void **)(v98 + 16) + 8);
    }
    else {
      unsigned int v64 = *(_DWORD *)(v98 + 8);
    }
    if (v64 < 7)
    {
      long long v61 = *(llvm::IntegerType **)(*a1 + 56);
      uint64_t v62 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v97);
LABEL_96:
      unint64_t v65 = (llvm::LLVMContext *)v62;
      if (v63 == 1) {
      if ((int)v65 <= 31)
      }
      {
        switch(v65)
        {
          case 1:
            uint64_t v66 = 0;
            uint64_t v67 = 2;
            goto LABEL_128;
          case 0x10:
            uint64_t v66 = 0;
            uint64_t v67 = 4;
            goto LABEL_128;
          case 8:
            uint64_t v66 = 0;
            uint64_t v67 = 3;
            goto LABEL_128;
        }
      }
      else
      {
        switch(v65)
        {
          case 0x20:
            uint64_t v66 = 0;
            uint64_t v67 = 5;
LABEL_128:
            uint64_t v78 = sub_1CCF5B228(a1, v4, v67, v66);
            return sub_1CCF5B228(a1, v78, v97, v98);
          case 0x40:
            uint64_t v66 = 0;
            uint64_t v67 = 6;
            goto LABEL_128;
          case 0x80:
            uint64_t v66 = 0;
            uint64_t v67 = 7;
            goto LABEL_128;
        }
      }
      uint64_t v66 = llvm::IntegerType::get(v61, v65);
      uint64_t v67 = 0;
      goto LABEL_128;
    }
  }
  v102[0] = v103;
  v102[1] = (void *)0x600000000;
  v103[12] = 0;
  uint64_t v99 = v101;
  uint64_t v100 = 0x300000000;
  if (!sub_1CD7F505C((uint64_t)v4, *(unsigned char *)(*(void *)(**(void **)(*a1 + 40) + 40) + 272) == 0, v18, (const llvm::APInt *)&v99, (uint64_t)v102))
  {
    uint64_t v4 = 0;
    goto LABEL_103;
  }
  int v71 = (unsigned __int8 *)v4[8];
  uint64_t v93 = v71;
  if (v71) {
    llvm::MetadataTracking::track((uint64_t)&v93, v71, 2);
  }
  int v94 = *((_DWORD *)v4 + 15);
  unint64_t v104 = v106;
  uint64_t v105 = 0x800000000;
  uint64_t v72 = v100;
  if (v100)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    do
    {
      uint64_t v82 = *a1;
      if ((*((void *)v102[0] + (v81 >> 6)) >> v81)) {
        uint64_t v83 = (uint64_t)sub_1CD3DD4D8(v82, v97, v98);
      }
      else {
        uint64_t v83 = sub_1CD7EBB14(v82, (llvm::LLVMContext *)((char *)v99 + v80), (const llvm::APInt *)&v93, (uint64_t)v97, v98, 0, 0);
      }
      if (v105 >= (unint64_t)HIDWORD(v105)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v85 = (uint64_t *)((char *)v104 + 16 * v105);
      *int v85 = v83;
      v85[1] = v84;
      unsigned int v73 = v105 + 1;
      LODWORD(v105) = v105 + 1;
      ++v81;
      v80 += 16;
    }
    while (v72 != v81);
  }
  else
  {
    unsigned int v73 = 0;
  }
  v75 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*a1 + 56), (uint64_t)v97, v98, v73, 0);
  uint64_t v76 = *(void *)(*a1 + 832);
  if (v76) {
    uint64_t v77 = *(unsigned __int16 *)(v76 + 8);
  }
  else {
    uint64_t v77 = 0;
  }
  uint64_t v4 = sub_1CD7FF4E8((void *)*a1, (const char *)0x92, (const llvm::APInt *)&v93, v75, v74, (uint64_t *)v104, v105, v77);
  if (v104 != v106) {
    free(v104);
  }
  if (v93)
  {
    int v86 = *v93;
    if ((v86 - 4) > 0x1E)
    {
      if ((v86 - 3) >= 0xFFFFFFFE) {
        v91 = v93;
      }
      else {
        v91 = 0;
      }
      if ((v86 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v88 = (unint64_t)(v91 + 8);
LABEL_161:
        unint64_t v104 = &v93;
        sub_1CC5FA668(v88 + 16, &v104);
        goto LABEL_103;
      }
      if (v86 == 3) {
        *((void *)v93 + 1) = 0;
      }
    }
    else if ((v93[1] & 0x7F) == 2 || *((_DWORD *)v93 + 3))
    {
      uint64_t v87 = *((void *)v93 + 2);
      if ((v87 & 4) != 0)
      {
        unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
        if (v88) {
          goto LABEL_161;
        }
      }
    }
  }
LABEL_103:
  uint64_t v68 = (char *)v99;
  if (v100)
  {
    uint64_t v69 = 16 * v100;
    do
    {
      if (*(_DWORD *)&v68[v69 - 8] >= 0x41u)
      {
        uint64_t v70 = *(void *)&v68[v69 - 16];
        if (v70) {
          MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
        }
      }
      v69 -= 16;
    }
    while (v69);
    uint64_t v68 = (char *)v99;
  }
  if (v68 != v101) {
    free(v68);
  }
  int v60 = v102[0];
  if (v102[0] != v103) {
LABEL_113:
  }
    free(v60);
  return (uint64_t)v4;
}

uint64_t *sub_1CCF5BBF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)v8;
  int v10 = *(unsigned __int16 *)(*(void *)v8 + 24);
  if (v10 == 55)
  {
    uint64_t v9 = *(void *)(*(void *)(v9 + 32) + 40 * *(unsigned int *)(v8 + 8));
    int v10 = *(unsigned __int16 *)(v9 + 24);
  }
  if (v10 != 253) {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void *)(v8 + 40);
  int v12 = *(unsigned __int16 *)(v11 + 24);
  if (v12 == 55)
  {
    uint64_t v11 = *(void *)(*(void *)(v11 + 32) + 40 * *(unsigned int *)(v8 + 48));
    int v12 = *(unsigned __int16 *)(v11 + 24);
  }
  if (v12 == 253) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(unsigned char *)(*(void *)(**(void **)(*a1 + 40) + 40) + 272)) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v13;
  }
  if (*(unsigned char *)(*(void *)(**(void **)(*a1 + 40) + 40) + 272)) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v9;
  }
  if (v15) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    return 0;
  }
  if (*(_WORD *)(v15 + 24) != 253) {
    return 0;
  }
  if ((*(_WORD *)(v15 + 26) & 0xC00) != 0) {
    return 0;
  }
  if (*(_WORD *)(v14 + 24) != 253) {
    return 0;
  }
  if ((*(_WORD *)(v14 + 26) & 0xC00) != 0) {
    return 0;
  }
  uint64_t v18 = *(void *)(v15 + 48);
  if (!v18) {
    return 0;
  }
  if (*(void *)(v18 + 32)) {
    return 0;
  }
  uint64_t v19 = *(void *)(v14 + 48);
  if (!v19
    || *(void *)(v19 + 32)
    || *(_DWORD *)(*(void *)(v15 + 96) + 16) != *(_DWORD *)(*(void *)(v14 + 96) + 16))
  {
    return 0;
  }
  char v46 = 0;
  long long v45 = *(_OWORD *)*(void *)(v15 + 40);
  int v21 = sub_1CB896FB8((unsigned __int8 *)&v45);
  if (v20 == 1)
  {
    int v39 = v21;
    int v21 = v39;
  }
  if (!*((unsigned char *)a1 + 33))
  {
LABEL_38:
    if (sub_1CCFE2710(*a1, v14, v15, v21, 1))
    {
      if (llvm::TargetLoweringBase::allowsMemoryAccess(a1[1], *(void *)(*a1 + 56), *(void *)(**(void **)(*a1 + 40) + 40) + 272, a3, a4, *(void *)(v15 + 96), (uint64_t)&v46)&& v46 != 0)
      {
        uint64_t v24 = *a1;
        uint64_t v25 = *(unsigned __int8 **)(a2 + 64);
        int v43 = v25;
        if (v25) {
          llvm::MetadataTracking::track((uint64_t)&v43, v25, 2);
        }
        int v44 = *(_DWORD *)(a2 + 60);
        unsigned int v26 = *(uint64_t **)(v15 + 32);
        uint64_t v27 = *v26;
        uint64_t v28 = v26[1];
        uint64_t v29 = v26[5];
        uint64_t v30 = v26[6];
        uint64_t v31 = *(void *)(v15 + 96);
        uint64_t v32 = *(void *)(v31 + 8);
        uint64_t v42 = *(void *)(v31 + 16);
        uint64_t v33 = (63
                              - __clz(((1 << *(unsigned char *)(v31 + 34)) | v32) & -((1 << *(unsigned char *)(v31 + 34)) | v32))) | 0x100;
        long long v41 = *(_OWORD *)v31;
        memset(v40, 0, sizeof(v40));
        uint64_t v34 = sub_1CD7F00F8(v24, a3, a4, (uint64_t)&v43, v27, v28, v29, v30, &v41, v33, SHIDWORD(v33), 0, v40, 0);
        if (!v43) {
          return v34;
        }
        int v35 = *v43;
        if ((v35 - 4) > 0x1E)
        {
          if ((v35 - 3) >= 0xFFFFFFFE) {
            uint64_t v36 = v43;
          }
          else {
            uint64_t v36 = 0;
          }
          if ((v35 - 3) < 0xFFFFFFFE)
          {
            if (v35 == 3) {
              *((void *)v43 + 1) = 0;
            }
            return v34;
          }
          unint64_t v37 = (unint64_t)(v36 + 8);
        }
        else
        {
          if ((v43[1] & 0x7F) != 2 && !*((_DWORD *)v43 + 3)) {
            return v34;
          }
          uint64_t v38 = *((void *)v43 + 2);
          if ((v38 & 4) == 0) {
            return v34;
          }
          unint64_t v37 = v38 & 0xFFFFFFFFFFFFFFF8;
          if (!v37) {
            return v34;
          }
        }
        *(void *)&v40[0] = &v43;
        sub_1CC5FA668(v37 + 16, v40);
        return v34;
      }
    }
    return 0;
  }
  if (!(_BYTE)a3) {
    return 0;
  }
  uint64_t v22 = a1[1];
  if (a3 == 1 || (uint64_t result = 0, *(void *)(v22 + 8 * a3 + 96)))
  {
    if (!*(unsigned char *)(v22 + 390 * a3 + 4115)) {
      goto LABEL_38;
    }
    return 0;
  }
  return result;
}

uint64_t *sub_1CCF5BF74(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 a4, int a5)
{
  if (*((unsigned char *)a1 + 32)) {
    return 0;
  }
  long long v83 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  if (sub_1CD3DD468((unsigned __int8 *)&v83, a2, a3) != 9
    && sub_1CD3DD468((unsigned __int8 *)&v83, v12, v13) != 10
    && sub_1CD3DD468((unsigned __int8 *)&v83, v14, v15) != 11)
  {
    return 0;
  }
  BOOL v16 = *(uint64_t **)(*a1 + 40);
  if (!llvm::TargetLoweringBase::getRecipEstimateSqrtEnabled(a1[1], v83, *((uint64_t *)&v83 + 1), v16)) {
    return 0;
  }
  unsigned int SqrtRefinementSteps = llvm::TargetLoweringBase::getSqrtRefinementSteps(a1[1], v83, *((uint64_t *)&v83 + 1), v16);
  unsigned int v5 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)a1[1] + 2112))();
  if (!v5) {
    return v5;
  }
  unint64_t v18 = v17;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v5);
  if (!SqrtRefinementSteps)
  {
    if (a5) {
      return v5;
    }
    goto LABEL_10;
  }
  uint64_t v31 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v79 = *(llvm **)v31;
  uint64_t v80 = *(void *)(v31 + 8);
  uint64_t v32 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v84 = v32;
  if (v32) {
    llvm::MetadataTracking::track((uint64_t)&v84, v32, 2);
  }
  int v85 = *(_DWORD *)(a2 + 60);
  uint64_t v33 = sub_1CD7ECDC4(*a1, (uint64_t)&v84, (BOOL)v79, v80, 0, -3.0);
  uint64_t v73 = v34;
  uint64_t v74 = (uint64_t)v33;
  int v35 = sub_1CD7ECDC4(*a1, (uint64_t)&v84, (BOOL)v79, v80, 0, -0.5);
  uint64_t v71 = v37;
  uint64_t v72 = (uint64_t)v35;
  int v78 = 0;
  unint64_t v38 = v18;
  __int16 v39 = a4;
  do
  {
    uint64_t v40 = sub_1CCFDED5C(*a1, 98, (const llvm::APInt *)&v84, v79, v80, a2, a3, v36, (uint64_t)v5, v38, v39);
    uint64_t v75 = v41;
    int v43 = sub_1CCFDED5C(*a1, 98, (const llvm::APInt *)&v84, v79, v80, (uint64_t)v40, v41, v42, (uint64_t)v5, v38, a4);
    char v46 = sub_1CCFDED5C(*a1, 96, (const llvm::APInt *)&v84, v79, v80, (uint64_t)v43, v44, v45, v74, v73, a4);
    uint64_t v76 = v48;
    uint64_t v77 = (uint64_t)v46;
    int v49 = v78 + 1;
    if (v78 + 1 < SqrtRefinementSteps) {
      int v50 = 1;
    }
    else {
      int v50 = a5;
    }
    if (v50) {
      uint64_t v51 = (uint64_t)v5;
    }
    else {
      uint64_t v51 = (uint64_t)v40;
    }
    __int16 v39 = a4;
    if (v50) {
      uint64_t v52 = v38;
    }
    else {
      uint64_t v52 = v75;
    }
    uint64_t v53 = sub_1CCFDED5C(*a1, 98, (const llvm::APInt *)&v84, v79, v80, v51, v52, v47, v72, v71, a4);
    unsigned int v5 = sub_1CCFDED5C(*a1, 98, (const llvm::APInt *)&v84, v79, v80, (uint64_t)v53, v54, v55, v77, v76, a4);
    unint64_t v38 = v38 & 0xFFFFFFFF00000000 | v56;
    ++v78;
  }
  while (SqrtRefinementSteps != v49);
  if (v84)
  {
    int v57 = *v84;
    if ((v57 - 4) > 0x1E)
    {
      if ((v57 - 3) >= 0xFFFFFFFE) {
        uint64_t v67 = v84;
      }
      else {
        uint64_t v67 = 0;
      }
      if ((v57 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v68 = (unint64_t)(v67 + 8);
LABEL_54:
        v86[0] = &v84;
        sub_1CC5FA668(v68 + 16, v86);
        goto LABEL_34;
      }
      if (v57 == 3) {
        *((void *)v84 + 1) = 0;
      }
    }
    else if ((v84[1] & 0x7F) == 2 || *((_DWORD *)v84 + 3))
    {
      uint64_t v70 = *((void *)v84 + 2);
      if ((v70 & 4) != 0)
      {
        unint64_t v68 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (v68) {
          goto LABEL_54;
        }
      }
    }
  }
LABEL_34:
  unint64_t v18 = v18 & 0xFFFFFFFF00000000 | v38;
  if (a5) {
    return v5;
  }
LABEL_10:
  uint64_t v20 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v84 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v84, v20, 2);
  }
  int v85 = *(_DWORD *)(a2 + 60);
  uint64_t v22 = *a1;
  uint64_t v21 = a1[1];
  int v23 = *(uint64_t ***)(*a1 + 40);
  uint64_t v24 = sub_1CD788130(v83, *((uint64_t *)&v83 + 1), v19);
  LOWORD(v86[0]) = llvm::Function::getDenormalMode(*v23, v24);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v21 + 2128))(v21, a2, a3, v22, v86);
  uint64_t v27 = v26;
  uint64_t v28 = (void *)*a1;
  uint64_t v29 = (unsigned __int8 *)(*(void *)(v25 + 40) + 16 * v26);
  if (*v29) {
    BOOL v30 = *v29 - 15 < 0x9C;
  }
  else {
    BOOL v30 = (*(_DWORD *)(*((void *)v29 + 1) + 8) & 0xFE) == 18;
  }
  if (v30) {
    int v58 = 191;
  }
  else {
    int v58 = 190;
  }
  unsigned int v81 = v58;
  long long v59 = v83;
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1[1] + 2136))(a1[1], a2, a3, v28);
  uint64_t v63 = v28[104];
  if (v63) {
    LOWORD(v63) = *(_WORD *)(v63 + 8);
  }
  unsigned int v5 = sub_1CD7F5D38(v28, (const char *)v81, (const llvm::APInt *)&v84, (llvm *)v59, *((uint64_t *)&v59 + 1), v25, v27, v62, v60, v61, (uint64_t)v5, v18, SHIDWORD(v18), v63);
  if (v84)
  {
    int v64 = *v84;
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        uint64_t v69 = v84;
      }
      else {
        uint64_t v69 = 0;
      }
      if ((v64 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v66 = (unint64_t)(v69 + 8);
LABEL_60:
        v86[0] = &v84;
        sub_1CC5FA668(v66 + 16, v86);
        return v5;
      }
      if (v64 == 3) {
        *((void *)v84 + 1) = 0;
      }
    }
    else if ((v84[1] & 0x7F) == 2 || *((_DWORD *)v84 + 3))
    {
      uint64_t v65 = *((void *)v84 + 2);
      if ((v65 & 4) != 0)
      {
        unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
        if (v66) {
          goto LABEL_60;
        }
      }
    }
  }
  return v5;
}

uint64_t *sub_1CCF5C6E4(uint64_t a1, llvm::APFloatBase *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(llvm **)v3;
  uint64_t v5 = *(void *)v3;
  if (!*(void *)v3) {
    return (uint64_t *)*(void *)v3;
  }
  uint64_t v8 = *(void *)(v3 + 8);
  if (*(void *)v3 != 1 && (!*(void *)v3 || *(void *)(a3 + 8 * v5 + 96) == 0)) {
    return 0;
  }
  if (*(unsigned char *)(a3 + 390 * *(void *)v3 + 4098)
    || (*(_WORD *)(*(void *)a2 + 1020) & 0x10) == 0)
  {
    return 0;
  }
  uint64_t v10 = **(void **)(a1 + 32);
  int v11 = *(unsigned __int16 *)(a1 + 24);
  if (v11 == 203)
  {
    if (*(_WORD *)(v10 + 24) != 209) {
      return 0;
    }
  }
  else if (v11 != 202 || *(_WORD *)(v10 + 24) != 208)
  {
    return 0;
  }
  BOOL v13 = *(unsigned int **)(v10 + 32);
  uint64_t v14 = *(void *)v13;
  if (*(unsigned __int8 *)(*(void *)(*(void *)v13 + 40) + 16 * v13[2]) != v5) {
    return 0;
  }
  BOOL v16 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v24 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v24, v16, 2);
    BOOL v13 = *(unsigned int **)(v10 + 32);
    uint64_t v14 = *(void *)v13;
  }
  int v25 = *(_DWORD *)(a1 + 60);
  unint64_t v17 = (void *)*((void *)v13 + 1);
  uint64_t v18 = *((void *)a2 + 104);
  if (v18) {
    __int16 v19 = *(_WORD *)(v18 + 8);
  }
  else {
    __int16 v19 = 0;
  }
  uint64_t v12 = sub_1CD7F3564(a2, (const char *)0xEC, (uint64_t)&v24, v4, v8, v14, v17, v19);
  if (v24)
  {
    int v20 = *v24;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        int v23 = v24;
      }
      else {
        int v23 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v23 + 8);
LABEL_35:
        uint64_t v26 = &v24;
        sub_1CC5FA668(v22 + 16, &v26);
        return v12;
      }
      if (v20 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v21 = *((void *)v24 + 2);
      if ((v21 & 4) != 0)
      {
        unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_35;
        }
      }
    }
  }
  return v12;
}

uint64_t sub_1CCF5C8C4(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  uint64_t v5 = *((unsigned int *)v3 + 2);
  long long v48 = *(_OWORD *)*(void *)(a1 + 40);
  int v6 = *(unsigned __int16 *)(v4 + 24);
  if ((v6 & 0xFFFE) != 0xCA) {
    return 0;
  }
  int v11 = *(uint64_t **)(v4 + 32);
  uint64_t v13 = *v11;
  uint64_t v12 = (void *)v11[1];
  long long v47 = *(_OWORD *)(*(void *)(*v11 + 40) + 16 * v12);
  int v14 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v15 = sub_1CD3E12F4((unsigned __int8 *)&v47, a2, a3) - (v6 == 202);
  unsigned int v19 = sub_1CD3E12F4((unsigned __int8 *)&v48, v16, v17) - (v14 == 208);
  if (v19 < v15) {
    unsigned int v15 = v19;
  }
  if (*((_DWORD *)sub_1CD788130(*(void *)(*(void *)(v4 + 40) + 16 * v5), *(void *)(*(void *)(v4 + 40) + 16 * v5 + 8), v18)+ 2) < v15)return 0; {
  unint64_t v22 = sub_1CD3E12F4((unsigned __int8 *)&v48, v20, v21);
  }
  if (v22 <= sub_1CD3E12F4((unsigned __int8 *)&v47, v23, v24))
  {
    uint64_t v34 = sub_1CD3E12F4((unsigned __int8 *)&v48, v25, v26);
    if (v34 >= sub_1CD3E12F4((unsigned __int8 *)&v47, v35, v36)) {
      return sub_1CD7EF724(a2, v48, *((uint64_t *)&v48 + 1), v13, (uint64_t)v12);
    }
    uint64_t v37 = *(unsigned __int8 **)(a1 + 64);
    uint64_t v45 = v37;
    if (v37) {
      llvm::MetadataTracking::track((uint64_t)&v45, v37, 2);
    }
    int v46 = *(_DWORD *)(a1 + 60);
    uint64_t v31 = *((void *)&v48 + 1);
    BOOL v30 = (llvm *)v48;
    uint64_t v38 = *(void *)(a2 + 832);
    if (v38) {
      __int16 v33 = *(_WORD *)(v38 + 8);
    }
    else {
      __int16 v33 = 0;
    }
    __int16 v39 = (llvm::APFloatBase *)a2;
    uint64_t v40 = 201;
  }
  else
  {
    if (v14 == 208 && v6 == 202) {
      uint64_t v28 = 198;
    }
    else {
      uint64_t v28 = 199;
    }
    uint64_t v29 = *(unsigned __int8 **)(a1 + 64);
    uint64_t v45 = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
    }
    int v46 = *(_DWORD *)(a1 + 60);
    uint64_t v31 = *((void *)&v48 + 1);
    BOOL v30 = (llvm *)v48;
    uint64_t v32 = *(void *)(a2 + 832);
    if (v32) {
      __int16 v33 = *(_WORD *)(v32 + 8);
    }
    else {
      __int16 v33 = 0;
    }
    __int16 v39 = (llvm::APFloatBase *)a2;
    uint64_t v40 = v28;
  }
  uint64_t v7 = sub_1CD7F3564(v39, (const char *)v40, (uint64_t)&v45, v30, v31, v13, v12, v33);
  if (v45)
  {
    int v41 = *v45;
    if ((v41 - 4) > 0x1E)
    {
      if ((v41 - 3) >= 0xFFFFFFFE) {
        uint64_t v44 = v45;
      }
      else {
        uint64_t v44 = 0;
      }
      if ((v41 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v43 = (unint64_t)(v44 + 8);
LABEL_40:
        int v49 = &v45;
        sub_1CC5FA668(v43 + 16, &v49);
        return (uint64_t)v7;
      }
      if (v41 == 3) {
        *((void *)v45 + 1) = 0;
      }
    }
    else if ((v45[1] & 0x7F) == 2 || *((_DWORD *)v45 + 3))
    {
      uint64_t v42 = *((void *)v45 + 2);
      if ((v42 & 4) != 0)
      {
        unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (v43) {
          goto LABEL_40;
        }
      }
    }
  }
  return (uint64_t)v7;
}

uint64_t sub_1CCF5CB34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  *(_OWORD *)unsigned int v56 = *(_OWORD *)*(void *)(a2 + 32);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  int v6 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v7 = **(void **)(a1 + 8);
  if (v6 == 223)
  {
    if ((*(uint64_t (**)(void))(v7 + 1328))()) {
      return 0;
    }
  }
  else if ((*(uint64_t (**)(void))(v7 + 1320))())
  {
    return 0;
  }
  if (*(_WORD *)(*(void *)v56 + 24) != 216) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)v56 + 48);
  if (!v10) {
    return 0;
  }
  int v11 = 1;
  do
  {
    if (*(_DWORD *)(v10 + 8) == v56[2])
    {
      if (!v11) {
        return 0;
      }
      --v11;
    }
    uint64_t v10 = *(void *)(v10 + 32);
  }
  while (v10);
  if (v11) {
    return 0;
  }
  int v14 = *(uint64_t **)(*(void *)v56 + 32);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  BOOL v17 = (uint64_t *)(*(void *)(*v14 + 40) + 16 * v15);
  uint64_t v18 = v17[1];
  unsigned int v54 = (llvm *)*v17;
  uint64_t v55 = v18;
  if (!(_BYTE)v54)
  {
    char v21 = *(_DWORD *)(v18 + 8);
    if ((v21 & 0xFE) == 0x12 || v21 != 13) {
      return 0;
    }
LABEL_30:
    unsigned int v53 = 1;
    __src = 0;
    uint64_t v23 = (unsigned __int8 *)(*(void *)(*(void *)v56 + 40) + 16 * v56[2]);
    if (*v23)
    {
      if (*v23 - 15 >= 0x9C) {
        goto LABEL_32;
      }
    }
    else if ((*(_DWORD *)(*((void *)v23 + 1) + 8) & 0xFE) != 0x12)
    {
LABEL_32:
      if ((_BYTE)v54) {
        unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v54);
      }
      else {
        unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v54);
      }
      unsigned int v28 = ExtendedSizeInBits;
      if (v25 == 1) {
      unsigned int v51 = v28;
      }
      if (v28 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v50);
      }
      uint64_t v50 = 1 << (v28 - 1);
      __src = (void *)v50;
      unsigned int v53 = v28;
      if (v6 == 223)
      {
        if (v28) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
        }
        else {
          unint64_t v29 = 0;
        }
        __src = (void *)(v29 & ~v50);
        unsigned int v53 = v28;
      }
      goto LABEL_57;
    }
    unsigned int v26 = sub_1CD7878C0(v56, v8, v9);
    unsigned int v51 = v26;
    if (v26 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v50);
    }
    uint64_t v50 = 1 << (v26 - 1);
    __src = (void *)v50;
    unsigned int v53 = v26;
    if (v6 == 223)
    {
      if (v26) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
      }
      else {
        unint64_t v27 = 0;
      }
      __src = (void *)(v27 & ~v50);
      unsigned int v53 = v26;
    }
    if ((_BYTE)v54) {
      uint64_t v30 = sub_1CB87E200((unsigned __int8 *)&v54);
    }
    else {
      uint64_t v30 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v54);
    }
    uint64_t v32 = (llvm::APInt *)v30;
    if (v31 == 1) {
    llvm::APInt::getSplat(v32, (llvm::APInt *)&__src, (uint64_t)&v50);
    }
    if (v53 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    __src = (void *)v50;
    unsigned int v53 = v51;
LABEL_57:
    uint64_t v33 = *(void *)v56;
    uint64_t v34 = *(unsigned __int8 **)(*(void *)v56 + 64);
    uint64_t v50 = (uint64_t)v34;
    if (v34) {
      llvm::MetadataTracking::track((uint64_t)&v50, v34, 2);
    }
    unsigned int v51 = *(_DWORD *)(v33 + 60);
    uint64_t v35 = *(void *)a1;
    if (v6 == 223) {
      uint64_t v36 = 171;
    }
    else {
      uint64_t v36 = 173;
    }
    uint64_t v37 = v54;
    uint64_t v38 = v55;
    uint64_t v39 = sub_1CD7EBB14(*(void *)a1, (llvm::LLVMContext *)&__src, (const llvm::APInt *)&v50, (uint64_t)v54, v55, 0, 0);
    uint64_t v42 = *(void *)(v35 + 832);
    if (v42) {
      LOWORD(v42) = *(_WORD *)(v42 + 8);
    }
    unint64_t v43 = sub_1CCFDED5C(v35, v36, (const llvm::APInt *)&v50, v37, v38, v16, v15, v41, v39, v40, v42);
    unint64_t v45 = v15 & 0xFFFFFFFF00000000 | v44;
    sub_1CCEF0788(a1, (uint64_t)v43);
    uint64_t v12 = sub_1CD7EF724(*(void *)a1, v4, v5, (uint64_t)v43, v45);
    if (!v50) {
      goto LABEL_68;
    }
    int v46 = *(unsigned __int8 *)v50;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = v50;
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v46 - 3) < 0xFFFFFFFE)
      {
        if (v46 == 3) {
          *(void *)(v50 + 8) = 0;
        }
        goto LABEL_68;
      }
      unint64_t v48 = v47 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v50 + 1) & 0x7F) != 2 && !*(_DWORD *)(v50 + 12)) {
        goto LABEL_68;
      }
      uint64_t v49 = *(void *)(v50 + 16);
      if ((v49 & 4) == 0) {
        goto LABEL_68;
      }
      unint64_t v48 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        goto LABEL_68;
      }
    }
    int v57 = &v50;
    sub_1CC5FA668(v48 + 16, &v57);
LABEL_68:
    if (v53 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    return v12;
  }
  BOOL v20 = v54 - 8 < 0xFFFFFFFA && v54 - 75 < 0xFFFFFFC4;
  uint64_t v12 = 0;
  if (v54 - 15 >= 0x9C && !v20) {
    goto LABEL_30;
  }
  return v12;
}

uint64_t *sub_1CCF5D1D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10 = *(_WORD *)(a2 + 26);
  int v11 = *(void **)(a2 + 32);
  uint64_t v12 = v11[5];
  uint64_t v13 = v11[6];
  int v14 = (uint64_t *)v11[10];
  unint64_t v15 = v11[11];
  if (*((_WORD *)v14 + 12) == 35)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = v14[10];
    uint64_t v18 = (unsigned __int8 *)v14[8];
    uint64_t v34 = v18;
    if (v18) {
      llvm::MetadataTracking::track((uint64_t)&v34, v18, 2);
    }
    int v35 = *((_DWORD *)v14 + 15);
    int v14 = sub_1CD7EC028(v16, v17, (const llvm::APInt *)&v34, *(llvm **)v14[5], *(void *)(v14[5] + 8), 0, 0);
    unint64_t v15 = v15 & 0xFFFFFFFF00000000 | v19;
    if (v34)
    {
      int v20 = *v34;
      if ((v20 - 4) > 0x1E)
      {
        if ((v20 - 3) >= 0xFFFFFFFE) {
          uint64_t v30 = v34;
        }
        else {
          uint64_t v30 = 0;
        }
        if ((v20 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v31 = (unint64_t)(v30 + 8);
LABEL_31:
          uint64_t v36 = &v34;
          sub_1CC5FA668(v31 + 16, &v36);
          goto LABEL_8;
        }
        if (v20 == 3) {
          *((void *)v34 + 1) = 0;
        }
      }
      else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
      {
        uint64_t v33 = *((void *)v34 + 2);
        if ((v33 & 4) != 0)
        {
          unint64_t v31 = v33 & 0xFFFFFFFFFFFFFFF8;
          if (v31) {
            goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_8:
  if ((v10 & 0x280) == 0x80) {
    uint64_t v21 = 56;
  }
  else {
    uint64_t v21 = 57;
  }
  uint64_t v22 = *a1;
  uint64_t v23 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v34 = v23;
  if (v23) {
    llvm::MetadataTracking::track((uint64_t)&v34, v23, 2);
  }
  int v35 = *(_DWORD *)(a2 + 60);
  uint64_t v24 = *(void *)(v22 + 832);
  if (v24) {
    LOWORD(v24) = *(_WORD *)(v24 + 8);
  }
  uint64_t v25 = sub_1CCFDED5C(v22, v21, (const llvm::APInt *)&v34, (llvm *)*(unsigned __int8 *)(*(void *)(v12 + 40) + 16 * v13), 0, v12, v13, a8, (uint64_t)v14, v15, v24);
  if (v34)
  {
    int v26 = *v34;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        unsigned int v28 = v34;
      }
      else {
        unsigned int v28 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_25:
        uint64_t v36 = &v34;
        sub_1CC5FA668(v29 + 16, &v36);
        return v25;
      }
      if (v26 == 3) {
        *((void *)v34 + 1) = 0;
      }
    }
    else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
    {
      uint64_t v32 = *((void *)v34 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v29 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_25;
        }
      }
    }
  }
  return v25;
}

uint64_t *sub_1CCF5D414(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  v59[16] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 28)) {
    return v5;
  }
  BOOL v47 = 0;
  unsigned int v53 = v55;
  uint64_t v54 = 0x800000000;
  unsigned int v56 = (unsigned __int8 **)v59;
  unsigned int v58 = 8;
  unint64_t v48 = v52;
  uint64_t v49 = v52;
  uint64_t v50 = 16;
  int v51 = 0;
  if (*(_WORD *)(a2 + 24) == 253) {
    BOOL v47 = (*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) == 0 && (*(unsigned char *)(a2 + 26) & 8) == 0;
  }
  unsigned int v8 = 0;
  unsigned int v9 = 1;
  v59[0] = a3;
  v59[1] = a4;
  unsigned int v57 = 1;
  while (1)
  {
    __int16 v10 = &v56[2 * v9];
    uint64_t v12 = (uint64_t)*(v10 - 2);
    uint64_t v11 = (uint64_t)*(v10 - 1);
    unsigned int v57 = v9 - 1;
    uint64_t v13 = (char *)v49;
    uint64_t v14 = HIDWORD(v50);
    if (v49 == v48)
    {
      if (HIDWORD(v50))
      {
        unint64_t v15 = 0;
        uint64_t v16 = 8 * HIDWORD(v50);
        uint64_t v17 = (uint64_t *)v49;
        while (*v17 != v12)
        {
          if (*v17 == -2) {
            unint64_t v15 = v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_15;
            }
            *unint64_t v15 = v12;
            --v51;
            goto LABEL_39;
          }
        }
        goto LABEL_67;
      }
LABEL_15:
      unsigned int v18 = v50;
      if (HIDWORD(v50) < v50)
      {
        ++HIDWORD(v50);
        *(void *)&v49[8 * v14] = v12;
        goto LABEL_39;
      }
    }
    else
    {
      unsigned int v18 = v50;
    }
    if (3 * v18 <= 4 * (HIDWORD(v50) - v51))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
LABEL_74:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v48, v18);
      unsigned int v18 = v50;
      uint64_t v13 = (char *)v49;
      goto LABEL_20;
    }
    if (v18 - HIDWORD(v50) < v18 >> 3) {
      goto LABEL_74;
    }
LABEL_20:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    uint64_t v21 = &v13[8 * v20];
    uint64_t v22 = *(void *)v21;
    if (*(void *)v21 != -1)
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != v12)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = (uint64_t *)v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        uint64_t v21 = &v13[8 * (v26 & v19)];
        uint64_t v22 = *(void *)v21;
        if (*(void *)v21 == -1) {
          goto LABEL_32;
        }
      }
      goto LABEL_67;
    }
    uint64_t v23 = 0;
LABEL_32:
    if (v23) {
      unint64_t v27 = v23;
    }
    else {
      unint64_t v27 = (uint64_t *)v21;
    }
    if (*v27 == v12) {
      goto LABEL_67;
    }
    if (*v27 == -2) {
      --v51;
    }
    else {
      ++HIDWORD(v50);
    }
    uint64_t *v27 = v12;
LABEL_39:
    if (v8 > *(_DWORD *)(*(void *)(a1 + 8) + 184248)) {
      break;
    }
    unsigned int v28 = *(unsigned __int16 *)(v12 + 24);
    if (v28 > 0xFC)
    {
      if (v28 - 312 >= 2)
      {
        if (v28 == 253)
        {
          if ((*(_WORD *)(*(void *)(v12 + 96) + 36) & 0xF00) == 0)
          {
            BOOL v33 = v47;
            if ((*(unsigned char *)(v12 + 26) & 8) != 0) {
              BOOL v33 = 0;
            }
            if (v33)
            {
LABEL_63:
              uint64_t v35 = *(void *)(v12 + 32);
              uint64_t v36 = *(unsigned __int8 **)v35;
              if (*(void *)v35)
              {
                uint64_t v37 = *(unsigned int *)(v35 + 8);
                if (v57 >= (unint64_t)v58) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v38 = &v56[2 * v57];
                *uint64_t v38 = v36;
                v38[1] = (unsigned __int8 *)(v11 & 0xFFFFFFFF00000000 | v37);
                ++v57;
              }
              goto LABEL_66;
            }
          }
        }
        else if (v28 != 254)
        {
          goto LABEL_61;
        }
      }
      if (sub_1CCF5ED50((uint64_t *)a1, a2, v12))
      {
LABEL_61:
        if (v54 >= (unint64_t)HIDWORD(v54)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v34 = (uint64_t *)((char *)v53 + 16 * v54);
        *uint64_t v34 = v12;
        v34[1] = v11;
        LODWORD(v54) = v54 + 1;
        goto LABEL_67;
      }
      goto LABEL_63;
    }
    if (v28 != 1)
    {
      if (v28 != 2)
      {
        if (v28 != 50) {
          goto LABEL_61;
        }
        goto LABEL_63;
      }
      unsigned int v29 = *(unsigned __int16 *)(v12 + 56);
      if (v29 > 0x10) {
        goto LABEL_61;
      }
      if (*(_WORD *)(v12 + 56))
      {
        unsigned int v30 = v57;
        unsigned int v31 = v29 - 1;
        do
        {
          uint64_t v32 = v31;
          if (v30 >= v58) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)&v56[2 * v30] = *(_OWORD *)(*(void *)(v12 + 32) + 40 * v31);
          unsigned int v30 = ++v57;
          --v31;
        }
        while (v32);
      }
    }
LABEL_66:
    ++v8;
LABEL_67:
    unsigned int v9 = v57;
    if (!v57) {
      goto LABEL_79;
    }
  }
  LODWORD(v54) = 0;
  if (!HIDWORD(v54)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v39 = v53;
  *(void *)unsigned int v53 = v5;
  v39[1] = a4;
  LODWORD(v54) = v54 + 1;
LABEL_79:
  if (v49 != v48) {
    free(v49);
  }
  if (v56 != v59) {
    free(v56);
  }
  if (v54 == 1)
  {
    uint64_t v5 = *(uint64_t **)v53;
    goto LABEL_87;
  }
  if (!v54)
  {
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 112);
    goto LABEL_87;
  }
  uint64_t v41 = *(void **)a1;
  uint64_t v42 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v48 = v42;
  if (v42) {
    llvm::MetadataTracking::track((uint64_t)&v48, v42, 2);
  }
  LODWORD(v49) = *(_DWORD *)(a2 + 60);
  uint64_t v5 = sub_1CD8049E8(v41, (const llvm::APInt *)&v48, (uint64_t)&v53);
  if (v48)
  {
    int v43 = *v48;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        int v46 = v48;
      }
      else {
        int v46 = 0;
      }
      if ((v43 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v45 = (unint64_t)(v46 + 8);
LABEL_104:
        unsigned int v56 = &v48;
        sub_1CC5FA668(v45 + 16, &v56);
        goto LABEL_87;
      }
      if (v43 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v44 = *((void *)v48 + 2);
      if ((v44 & 4) != 0)
      {
        unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
        if (v45) {
          goto LABEL_104;
        }
      }
    }
  }
LABEL_87:
  if (v53 != v55) {
    free(v53);
  }
  return v5;
}

uint64_t sub_1CCF5D9D0(uint64_t *a1, uint64_t a2)
{
  v112[16] = *MEMORY[0x1E4F143B8];
  if (*((int *)a1 + 6) < 3) {
    return 0;
  }
  unsigned __int8 v105 = 1;
  char v104 = 0;
  uint64_t v102 = 0;
  LODWORD(v103) = 0;
  uint64_t v2 = 0;
  if (!sub_1CCF5F1EC(a2, 1u, 2u, &v105, &v104, (uint64_t)&v102, a1[1])) {
    return v2;
  }
  uint64_t v5 = v102;
  if ((*(_WORD *)(v102 + 24) & 0xFFFE) != 0x38) {
    return 0;
  }
  uint64_t v6 = *(void *)(v102 + 48);
  if (v6)
  {
    if (!*(void *)(v6 + 32)) {
      return 0;
    }
  }
  *(void *)&long long v101 = 0;
  DWORD2(v101) = 0;
  uint64_t v99 = 0;
  LODWORD(v100) = 0;
  int v98 = 0;
  uint64_t v2 = 0;
  if (!(*(unsigned int (**)(void))(*(void *)a1[1] + 1528))()) {
    return v2;
  }
  int v8 = *(unsigned __int16 *)(v101 + 24);
  BOOL v9 = v8 == 35 || v8 == 11;
  if (v8 == 35 || v8 == 11)
  {
    long long v94 = v101;
    DWORD2(v101) = v100;
    *(void *)&long long v101 = v99;
    uint64_t v99 = (unsigned __int16 *)v94;
    LODWORD(v100) = DWORD2(v94);
  }
  __int16 v10 = v99;
  if (sub_1CD7F2D2C((uint64_t)v99)) {
    return 0;
  }
  unsigned int v11 = *(unsigned __int16 *)(v101 + 24);
  if (v11 <= 0x27 && ((1 << v11) & 0x8000008200) != 0) {
    return 0;
  }
  uint64_t v86 = v105;
  if (v105) {
    goto LABEL_19;
  }
  uint64_t v25 = *(void *)(a2 + 32);
  uint64_t v26 = *(void *)(v25 + 40);
  int v27 = *(_DWORD *)(v25 + 48);
  if (v26 == (void)v101 && v27 == DWORD2(v101)) {
    return 0;
  }
  if (v26 == v5 && v27 == v103 || (sub_1CD8031D4(v26, v5) & 1) != 0) {
    return 0;
  }
  __int16 v10 = v99;
LABEL_19:
  *(void *)&long long v94 = v97;
  *((void *)&v94 + 1) = v97;
  uint64_t v95 = 32;
  int v96 = 0;
  v111[0] = v112;
  v112[0] = a2;
  v111[1] = (void *)0x1000000001;
  v108 = v110;
  uint64_t v109 = 0x1000000000;
  int v12 = v10[12];
  if (v12 == 35 || v12 == 11)
  {
    for (uint64_t i = *(void *)(v101 + 48); i; uint64_t i = *(void *)(i + 32))
    {
      uint64_t v14 = *(void *)(i + 16);
      if (v14 != v5
        && *(void *)i == (void)v101
        && *(_DWORD *)(i + 8) == DWORD2(v101)
        && (sub_1CCF551A8(v14, (llvm::SmallPtrSetImplBase *)&v94, (unsigned int *)v111, 0, 0) & 1) == 0)
      {
        uint64_t v15 = *(void *)(i + 16);
        if ((*(_WORD *)(v15 + 24) & 0xFFFE) != 0x38) {
          goto LABEL_49;
        }
        uint64_t v16 = (unsigned int *)(*(void *)(v15 + 32)
                             + 40 * (((i - *(void *)(v15 + 32)) & 8) == 0));
        int v17 = *(unsigned __int16 *)(*(void *)v16 + 24);
        BOOL v18 = v17 == 35 || v17 == 11;
        if (!v18
          || (unsigned int v19 = (unsigned __int8 *)(*(void *)(*(void *)v16 + 40) + 16 * v16[2]),
              int v20 = *v19,
              uint64_t v21 = (unsigned __int8 *)(*((void *)v99 + 5) + 16 * v100),
              v20 != *v21)
          || ((uint64_t v22 = *((void *)v21 + 1), v23 = *((void *)v19 + 1), !v20) ? (v24 = v23 == v22) : (v24 = 1), !v24))
        {
LABEL_49:
          LODWORD(v109) = 0;
          break;
        }
        if (v109 >= (unint64_t)HIDWORD(v109)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v108 + v109) = v15;
        LODWORD(v109) = v109 + 1;
      }
    }
  }
  if (v8 == 35 || v8 == 11)
  {
    long long v91 = v101;
    DWORD2(v101) = v100;
    *(void *)&long long v101 = v99;
    uint64_t v99 = (unsigned __int16 *)v91;
    LODWORD(v100) = DWORD2(v91);
  }
  uint64_t v2 = *(void *)(v5 + 48);
  if (v2)
  {
    int v28 = 0;
    do
    {
      uint64_t v29 = *(void *)(v2 + 16);
      if (v29 != a2)
      {
        if (sub_1CCF551A8(*(void *)(v2 + 16), (llvm::SmallPtrSetImplBase *)&v94, (unsigned int *)v111, 0, 0)) {
          goto LABEL_71;
        }
        v28 |= sub_1CCF5F420(v5, v29, *(void *)(*a1 + 40), *(llvm::LLVMContext **)(*a1 + 56), a1[1]) ^ 1;
      }
      uint64_t v2 = *(void *)(v2 + 32);
    }
    while (v2);
    if (v28)
    {
      uint64_t v30 = *a1;
      if (v104)
      {
        if (v86)
        {
          uint64_t v79 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&long long v91 = v79;
          if (v79) {
            llvm::MetadataTracking::track((uint64_t)&v91, v79, 2);
          }
          DWORD2(v91) = *(_DWORD *)(a2 + 60);
          uint64_t v32 = sub_1CD7FE2DC(v30, a2, 0, (uint64_t)&v91, v101, DWORD2(v101), (uint64_t)v99, v100, v98);
        }
        else
        {
          uint64_t v77 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&long long v91 = v77;
          if (v77) {
            llvm::MetadataTracking::track((uint64_t)&v91, v77, 2);
          }
          DWORD2(v91) = *(_DWORD *)(a2 + 60);
          uint64_t v32 = sub_1CD7FE854(v30, a2, 0, (uint64_t)&v91, v101, DWORD2(v101), (uint64_t)v99, v100, v98);
        }
      }
      else if (v86)
      {
        int v78 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v91 = v78;
        if (v78) {
          llvm::MetadataTracking::track((uint64_t)&v91, v78, 2);
        }
        DWORD2(v91) = *(_DWORD *)(a2 + 60);
        uint64_t v32 = sub_1CD7FB08C(v30, a2, 0, (uint64_t)&v91, v101, *((uint64_t *)&v101 + 1), (uint64_t)v99, v100, v98);
      }
      else
      {
        unsigned int v31 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v91 = v31;
        if (v31) {
          llvm::MetadataTracking::track((uint64_t)&v91, v31, 2);
        }
        DWORD2(v91) = *(_DWORD *)(a2 + 60);
        uint64_t v32 = sub_1CD7FBBA8(v30, a2, 0, (uint64_t)&v91, v101, DWORD2(v101), (uint64_t)v99, v100, v98);
      }
      uint64_t v85 = (uint64_t)v32;
      if (!(void)v91) {
        goto LABEL_69;
      }
      int v33 = *(unsigned __int8 *)v91;
      if ((v33 - 4) > 0x1E)
      {
        if ((v33 - 3) >= 0xFFFFFFFE) {
          uint64_t v75 = v91;
        }
        else {
          uint64_t v75 = 0;
        }
        if ((v33 - 3) < 0xFFFFFFFE)
        {
          if (v33 == 3) {
            *(void *)(v91 + 8) = 0;
          }
          goto LABEL_69;
        }
        unint64_t v76 = v75 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v91 + 1) & 0x7F) != 2 && !*(_DWORD *)(v91 + 12)) {
          goto LABEL_69;
        }
        uint64_t v80 = *(void *)(v91 + 16);
        if ((v80 & 4) == 0) {
          goto LABEL_69;
        }
        unint64_t v76 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (!v76) {
          goto LABEL_69;
        }
      }
      __src[0] = &v91;
      sub_1CC5FA668(v76 + 16, __src);
LABEL_69:
      int v34 = 0;
      uint64_t v35 = *a1;
      *((void *)&v91 + 1) = *(void *)(*a1 + 656);
      uint64_t v92 = v35;
      *(void *)(v35 + 656) = &v91;
      *(void *)&long long v91 = &unk_1F26413F0;
      uint64_t v93 = a1;
      if (v86)
      {
        sub_1CD800DA0(v35, a2, 0, v85, 0);
        uint64_t v35 = *a1;
        uint64_t v36 = a2;
        int v34 = 1;
        uint64_t v37 = v85;
        int v38 = 2;
      }
      else
      {
        uint64_t v36 = a2;
        uint64_t v37 = v85;
        int v38 = 1;
      }
      sub_1CD800DA0(v35, v36, v34, v37, v38);
      sub_1CCEF1420(a1, a2);
      if (v8 == 35 || v8 == 11)
      {
        *(_OWORD *)__src = v101;
        DWORD2(v101) = v100;
        *(void *)&long long v101 = v99;
        uint64_t v99 = (unsigned __int16 *)__src[0];
        LODWORD(v100) = __src[1];
      }
      uint64_t v81 = v109;
      if (v109)
      {
        for (uint64_t j = 0; j != v81; ++j)
        {
          uint64_t v40 = *((void *)v108 + j);
          uint64_t v41 = *(void *)(v40 + 32);
          uint64_t v83 = *(void *)(v41 + 40 * (*(void *)(v41 + 40) != (void)v101));
          uint64_t v42 = *(void *)(v83 + 80);
          uint64_t v82 = *((void *)v99 + 10);
          int v43 = *(unsigned __int16 *)(v40 + 24);
          BOOL v44 = v43 == 57 && *(void *)(v41 + 40) != (void)v101;
          if (v43 != 57 || *(void *)(v41 + 40) != (void)v101) {
            int v46 = 1;
          }
          else {
            int v46 = -1;
          }
          int v47 = v98 == 2 && !v9;
          if (v9 && v98 == 2) {
            int v48 = -1;
          }
          else {
            int v48 = 1;
          }
          if (v48 * v46 >= 0) {
            int v49 = 56;
          }
          else {
            int v49 = 57;
          }
          unsigned int v84 = v49;
          unsigned int v50 = *(_DWORD *)(v42 + 32);
          LODWORD(__src[1]) = v50;
          if (v50 > 0x40) {
            operator new[]();
          }
          unint64_t v51 = *(void *)(v42 + 24);
          __src[0] = (void *)v51;
          unsigned int v52 = v50;
          if (v44)
          {
            unsigned int v90 = v50;
            unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
            if (!v50) {
              unint64_t v53 = 0;
            }
            uint64_t v89 = (void *)(v53 & ~v51);
            llvm::APInt::operator++((uint64_t)&v89);
            unsigned int v52 = v90;
            uint64_t v54 = v89;
            unsigned int v90 = 0;
            if (LODWORD(__src[1]) > 0x40 && __src[0])
            {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
              __src[0] = v54;
              LODWORD(__src[1]) = v52;
              if (v90 >= 0x41 && v89)
              {
                MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
                unsigned int v52 = __src[1];
              }
            }
            else
            {
              __src[0] = v89;
              LODWORD(__src[1]) = v52;
            }
          }
          if (v47) {
            int v55 = -v46;
          }
          else {
            int v55 = v46;
          }
          if (v55 * v48 < 0)
          {
            if (v52 >= 0x41) {
              operator new[]();
            }
            unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
            if (!v52) {
              unint64_t v56 = 0;
            }
            unsigned int v57 = (void *)(v56 & ((unint64_t)__src[0] + *(void *)(v82 + 24)));
          }
          else
          {
            if (v52 >= 0x41) {
              operator new[]();
            }
            if (v52) {
              unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
            }
            else {
              unint64_t v58 = 0;
            }
            unsigned int v57 = (void *)(v58 & ((unint64_t)__src[0] - *(void *)(v82 + 24)));
          }
          __src[0] = v57;
          LODWORD(__src[1]) = v52;
          uint64_t v59 = *((void *)v108 + j);
          uint64_t v60 = *(unsigned __int8 **)(v59 + 64);
          uint64_t v87 = v60;
          if (v60) {
            llvm::MetadataTracking::track((uint64_t)&v87, v60, 2);
          }
          int v88 = *(_DWORD *)(v59 + 60);
          uint64_t v62 = sub_1CD7EBB14(*a1, (llvm::LLVMContext *)__src, (const llvm::APInt *)&v87, **(void **)(v83 + 40), *(void *)(*(void *)(v83 + 40) + 8), 0, 0);
          uint64_t v64 = *(void *)(*((void *)v108 + j) + 40);
          uint64_t v65 = *(llvm **)v64;
          uint64_t v66 = *(void *)(v64 + 8);
          uint64_t v67 = *(void *)(*a1 + 832);
          if (v67) {
            LOWORD(v67) = *(_WORD *)(v67 + 8);
          }
          unint64_t v68 = sub_1CCFDED5C(*a1, v84, (const llvm::APInt *)&v87, v65, v66, v62, v61, v63, v85, v86, v67);
          sub_1CD800DA0(*a1, *((void *)v108 + j), 0, (uint64_t)v68, v69);
          v70.n128_u64[0] = (unint64_t)sub_1CCEF1420(a1, *((void *)v108 + j));
          if (!v87) {
            goto LABEL_127;
          }
          int v71 = *v87;
          if ((v71 - 4) > 0x1E)
          {
            if ((v71 - 3) >= 0xFFFFFFFE) {
              uint64_t v72 = v87;
            }
            else {
              uint64_t v72 = 0;
            }
            if ((v71 - 3) < 0xFFFFFFFE)
            {
              if (v71 == 3) {
                *((void *)v87 + 1) = 0;
              }
              goto LABEL_127;
            }
            unint64_t v73 = (unint64_t)(v72 + 8);
          }
          else
          {
            if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
              goto LABEL_127;
            }
            uint64_t v74 = *((void *)v87 + 2);
            if ((v74 & 4) == 0) {
              goto LABEL_127;
            }
            unint64_t v73 = v74 & 0xFFFFFFFFFFFFFFF8;
            if (!v73) {
              goto LABEL_127;
            }
          }
          int v107 = &v87;
          sub_1CC5FA668(v73 + 16, &v107);
LABEL_127:
          if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17, v70);
          }
        }
      }
      sub_1CD800DA0(*a1, v5, v103, v85, v86);
      sub_1CCEF1420(a1, v5);
      sub_1CCEF0788((uint64_t)a1, v85);
      *(void *)(v92 + 656) = *((void *)&v91 + 1);
      uint64_t v2 = 1;
      goto LABEL_148;
    }
LABEL_71:
    uint64_t v2 = 0;
  }
LABEL_148:
  if (v108 != v110) {
    free(v108);
  }
  if (v111[0] != v112) {
    free(v111[0]);
  }
  if (*((void *)&v94 + 1) != (void)v94) {
    free(*((void **)&v94 + 1));
  }
  return v2;
}

uint64_t sub_1CCF5E6B4(uint64_t *a1, uint64_t a2)
{
  v69[8] = *MEMORY[0x1E4F143B8];
  if (*((int *)a1 + 6) < 3) {
    return 0;
  }
  char v58 = 1;
  char v57 = 0;
  uint64_t v55 = 0;
  int v56 = 0;
  uint64_t v53 = 0;
  LODWORD(v54) = 0;
  uint64_t v51 = 0;
  LODWORD(v52) = 0;
  int v50 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  int v7 = sub_1CCF5F1EC(a2, 3u, 4u, &v58, &v57, (uint64_t)&v55, v6);
  uint64_t result = 0;
  if (!v7) {
    return result;
  }
  uint64_t v8 = v55;
  uint64_t v9 = *(void *)(v55 + 48);
  if (!v9 || !*(void *)(v9 + 32)) {
    return 0;
  }
  __int16 v10 = &v66;
  unsigned int v11 = (unsigned __int8 **)v69;
  while (1)
  {
    uint64_t v12 = *(void *)(v9 + 16);
    if (v12 == a2
      || (*(_WORD *)(v12 + 24) & 0xFFFE) != 0x38
      || !(*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t *, int *, uint64_t))(*(void *)v6 + 1536))(v6, a2, *(void *)(v9 + 16), &v53, &v51, &v50, v5)|| sub_1CD7F2D2C(v51))
    {
      goto LABEL_10;
    }
    unsigned int v13 = *(unsigned __int16 *)(v53 + 24);
    BOOL v14 = v13 > 0x27;
    uint64_t v15 = (1 << v13) & 0x8000008200;
    if (!v14 && v15 != 0) {
      goto LABEL_10;
    }
    int v48 = v10;
    int v49 = v11;
    uint64_t v62 = (unsigned __int8 *)v10;
    uint64_t v63 = (unsigned __int8 *)v10;
    uint64_t v64 = 32;
    LODWORD(v65) = 0;
    uint64_t v17 = *(void *)(v53 + 48);
    if (v17)
    {
      while (1)
      {
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18 != v8)
        {
          if (sub_1CD3ED460(*(void *)(v17 + 16))
            && sub_1CCF5F1EC(v18, 3u, 4u, &v61, &v60, (uint64_t)v59, v6))
          {
            uint64_t v67 = v49;
            v69[0] = v18;
            uint64_t v68 = 0x200000001;
            char v19 = sub_1CCF551A8(a2, (llvm::SmallPtrSetImplBase *)&v62, (unsigned int *)&v67, 0, 0);
            if (v67 != v49)
            {
              char v20 = v19;
              free(v67);
              char v19 = v20;
            }
            if (v19) {
              goto LABEL_33;
            }
          }
          if ((*(_WORD *)(v18 + 24) & 0xFFFE) == 0x38)
          {
            uint64_t v21 = *(void *)(v18 + 48);
            if (v21) {
              break;
            }
          }
        }
LABEL_20:
        uint64_t v17 = *(void *)(v17 + 32);
        if (!v17)
        {
          int v22 = 1;
          goto LABEL_34;
        }
      }
      while ((sub_1CCF5F420(v18, *(void *)(v21 + 16), *(void *)(v5 + 40), *(llvm::LLVMContext **)(v5 + 56), v6) & 1) == 0)
      {
        uint64_t v21 = *(void *)(v21 + 32);
        if (!v21) {
          goto LABEL_20;
        }
      }
LABEL_33:
      int v22 = 0;
    }
    else
    {
      int v22 = 1;
    }
LABEL_34:
    __int16 v10 = v48;
    if (v63 != v62) {
      free(v63);
    }
    if (v22) {
      break;
    }
LABEL_46:
    unsigned int v11 = v49;
LABEL_10:
    uint64_t v9 = *(void *)(v9 + 32);
    if (!v9) {
      return 0;
    }
  }
  uint64_t v62 = (unsigned __int8 *)v48;
  uint64_t v63 = (unsigned __int8 *)v48;
  LODWORD(v65) = 0;
  uint64_t v67 = v49;
  uint64_t v64 = 0x100000020;
  uint64_t v66 = v8;
  v69[0] = a2;
  v69[1] = v12;
  uint64_t v68 = 0x800000002;
  if ((sub_1CCF551A8(a2, (llvm::SmallPtrSetImplBase *)&v62, (unsigned int *)&v67, 0, 0) & 1) != 0
    || (int v23 = 0, sub_1CCF551A8(v12, (llvm::SmallPtrSetImplBase *)&v62, (unsigned int *)&v67, 0, 0)))
  {
    int v23 = 1;
    uint64_t v12 = v47;
  }
  if (v67 != v49) {
    free(v67);
  }
  if (v63 != v62) {
    free(v63);
  }
  if (v23)
  {
    uint64_t v47 = v12;
    goto LABEL_46;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v24 = *a1;
  if (v57)
  {
    if (v58)
    {
      uint64_t v41 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v62 = v41;
      if (v41) {
        llvm::MetadataTracking::track((uint64_t)&v62, v41, 2);
      }
      LODWORD(v63) = *(_DWORD *)(a2 + 60);
      uint64_t v40 = sub_1CD7FE2DC(v24, a2, 0, (uint64_t)&v62, v53, v54, v51, v52, v50);
      goto LABEL_81;
    }
    int v38 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v62 = v38;
    if (v38) {
      llvm::MetadataTracking::track((uint64_t)&v62, v38, 2);
    }
    LODWORD(v63) = *(_DWORD *)(a2 + 60);
    uint64_t v26 = sub_1CD7FE854(v24, a2, 0, (uint64_t)&v62, v53, v54, v51, v52, v50);
LABEL_53:
    uint64_t v27 = (uint64_t)v26;
    if (!v62) {
      goto LABEL_57;
    }
    int v28 = *v62;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        uint64_t v36 = v62;
      }
      else {
        uint64_t v36 = 0;
      }
      if ((v28 - 3) < 0xFFFFFFFE)
      {
        if (v28 == 3) {
          *((void *)v62 + 1) = 0;
        }
        goto LABEL_57;
      }
      unint64_t v37 = (unint64_t)(v36 + 8);
    }
    else
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        goto LABEL_57;
      }
      uint64_t v45 = *((void *)v62 + 2);
      if ((v45 & 4) == 0) {
        goto LABEL_57;
      }
      unint64_t v37 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v37) {
        goto LABEL_57;
      }
    }
    uint64_t v67 = &v62;
    sub_1CC5FA668(v37 + 16, &v67);
LABEL_57:
    int v29 = 0;
    int v30 = 0;
    char v31 = 1;
    goto LABEL_58;
  }
  if (!v58)
  {
    uint64_t v25 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v62 = v25;
    if (v25) {
      llvm::MetadataTracking::track((uint64_t)&v62, v25, 2);
    }
    LODWORD(v63) = *(_DWORD *)(a2 + 60);
    uint64_t v26 = sub_1CD7FBBA8(v24, a2, 0, (uint64_t)&v62, v53, v54, v51, v52, v50);
    goto LABEL_53;
  }
  uint64_t v39 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v62 = v39;
  if (v39) {
    llvm::MetadataTracking::track((uint64_t)&v62, v39, 2);
  }
  LODWORD(v63) = *(_DWORD *)(a2 + 60);
  uint64_t v40 = sub_1CD7FB08C(v24, a2, 0, (uint64_t)&v62, v53, v54, v51, v52, v50);
LABEL_81:
  uint64_t v27 = (uint64_t)v40;
  if (v62)
  {
    int v42 = *v62;
    if ((v42 - 4) > 0x1E)
    {
      if ((v42 - 3) >= 0xFFFFFFFE) {
        int v43 = v62;
      }
      else {
        int v43 = 0;
      }
      if ((v42 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v44 = (unint64_t)(v43 + 8);
        goto LABEL_91;
      }
      if (v42 == 3) {
        *((void *)v62 + 1) = 0;
      }
    }
    else if ((v62[1] & 0x7F) == 2 || *((_DWORD *)v62 + 3))
    {
      uint64_t v46 = *((void *)v62 + 2);
      if ((v46 & 4) != 0)
      {
        unint64_t v44 = v46 & 0xFFFFFFFFFFFFFFF8;
        if (v44)
        {
LABEL_91:
          uint64_t v67 = &v62;
          sub_1CC5FA668(v44 + 16, &v67);
        }
      }
    }
  }
  int v29 = 0;
  char v31 = 0;
  int v30 = 1;
LABEL_58:
  uint64_t v32 = *a1;
  uint64_t v63 = *(unsigned __int8 **)(*a1 + 656);
  uint64_t v64 = v32;
  *(void *)(v32 + 656) = &v62;
  uint64_t v62 = (unsigned __int8 *)&unk_1F26413F0;
  uint64_t v65 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = v27;
  if (v31)
  {
    int v35 = 1;
  }
  else
  {
    sub_1CD800DA0(v32, a2, 0, v27, 0);
    uint64_t v32 = *a1;
    uint64_t v33 = a2;
    int v29 = 1;
    uint64_t v34 = v27;
    int v35 = 2;
  }
  sub_1CD800DA0(v32, v33, v29, v34, v35);
  sub_1CCEF1420(a1, a2);
  sub_1CD800DA0(*a1, v12, 0, v27, v30);
  sub_1CCEF1420(a1, v12);
  *(void *)(v64 + 656) = v63;
  return 1;
}

BOOL sub_1CCF5ED50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1CCF5F048((uint64_t)v54, a2);
  sub_1CCF5F048((uint64_t)v47, a3);
  if (v55)
  {
    BOOL v6 = v55 == v48 && v56 == v49;
    if (v6 && v57 == v50) {
      return 1;
    }
  }
  BOOL v7 = !v54[0] || v47[0] == 0;
  if (!v7 || v54[1] && v47[1]) {
    return 1;
  }
  uint64_t v9 = v60;
  __int16 v10 = v53;
  if (v60) {
    BOOL v11 = v53 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (!v11)
  {
    __int16 v13 = *((_WORD *)v60 + 16);
    __int16 v14 = *((_WORD *)v53 + 16);
    if ((v13 & 0x20) != 0 && (v14 & 2) != 0) {
      return 0;
    }
    if ((v13 & 2) != 0 && (v14 & 0x20) != 0) {
      return 0;
    }
  }
  char v46 = 0;
  uint64_t v15 = v58;
  char v16 = v59;
  uint64_t v17 = v51;
  char v18 = v52;
  if (sub_1CD806BCC(a2, v58, v59, a3, v51, v52, *a1, &v46)) {
    return v46 != 0;
  }
  if (!v12) {
    return 1;
  }
  __int16 v19 = *((_WORD *)v9 + 16);
  __int16 v20 = *((_WORD *)v10 + 16);
  if ((v19 & 0x20) != 0 && (v20 & 2) != 0) {
    return 0;
  }
  if ((v19 & 2) != 0 && (v20 & 0x20) != 0) {
    return 0;
  }
  uint64_t v21 = v9[1];
  uint64_t v22 = v10[1];
  int v23 = *((unsigned __int8 *)v9 + 34);
  int v24 = *((unsigned __int8 *)v10 + 34);
  if (v23 != v24
    || v21 == v22
    || !v16
    || !v18
    || v15 != v17
    || (unint64_t)v15 >> v23
    || v21 % v15
    || v22 % v15
    || (result = 0, uint64_t v25 = v21 & ~(-1 << v23), v26 = v22 & ~(-1 << v24), v25 + v15 > v26) && v26 + v15 > v25)
  {
    if (word_1EBCF8C30)
    {
      if (!byte_1EBCF8CA8) {
        return 1;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(*(void *)(*a1 + 40) + 16);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v27 + 368))(v27)) {
        return 1;
      }
    }
    uint64_t v28 = a1[180];
    if (!v28) {
      return 1;
    }
    uint64_t v29 = *v9;
    if ((unint64_t)*v9 < 8) {
      return 1;
    }
    if ((v29 & 4) != 0) {
      return 1;
    }
    uint64_t v30 = *v10;
    if ((unint64_t)*v10 < 8 || (v30 & 4) != 0 || !v16 || !v18) {
      return 1;
    }
    if (v22 >= v21) {
      uint64_t v31 = v21;
    }
    else {
      uint64_t v31 = v22;
    }
    unint64_t v32 = v21 + v15 - v31;
    unint64_t v33 = v22 + v17 - v31;
    if (v32 > 0x7FFFFFFFFFFFFFFBLL) {
      unint64_t v32 = -2;
    }
    long long v34 = 0uLL;
    long long v35 = 0uLL;
    long long v36 = 0uLL;
    if (byte_1EBCF8D68)
    {
      long long v35 = *(_OWORD *)(v9 + 5);
      long long v36 = *(_OWORD *)(v9 + 7);
    }
    v43[0] = v29 & 0xFFFFFFFFFFFFFFF8;
    v43[1] = v32;
    long long v44 = v35;
    long long v45 = v36;
    unint64_t v37 = v30 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = v33 <= 0x7FFFFFFFFFFFFFFBLL ? v33 : -2;
    long long v39 = 0uLL;
    if (byte_1EBCF8D68)
    {
      long long v34 = *(_OWORD *)(v10 + 5);
      long long v39 = *(_OWORD *)(v10 + 7);
    }
    v40[0] = v37;
    v40[1] = v38;
    long long v41 = v34;
    long long v42 = v39;
    return llvm::AAResults::alias(v28, (uint64_t)v43, (uint64_t)v40) != 0;
  }
  return result;
}

uint64_t sub_1CCF5F048(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (!a2 || (int v4 = *(unsigned __int16 *)(a2 + 24), (v4 - 255) < 0xFFFFFFFE))
  {
    *(_WORD *)BOOL result = 0;
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(result + 8) = *(void *)(v5 + 40);
    *(_DWORD *)(result + 16) = *(_DWORD *)(v5 + 48);
    uint64_t v6 = *(void *)(a2 + 88);
    *(void *)(result + 24) = v6 & ~(v6 >> 63);
    BOOL v7 = (void *)(result + 32);
    if (v6 < 0)
    {
      char v8 = 0;
      *BOOL v7 = 0;
      *(void *)(result + 40) = 0;
    }
    else
    {
      *BOOL v7 = *(void *)(a2 + 80);
      char v8 = 1;
    }
    *(unsigned char *)(result + 40) = v8;
    *(void *)(result + 48) = 0;
    return result;
  }
  BOOL v12 = v4 == 253;
  uint64_t v9 = 120;
  if (v12) {
    uint64_t v9 = 80;
  }
  uint64_t v10 = *(void *)(*(void *)(a2 + 32) + v9);
  int v11 = *(unsigned __int16 *)(v10 + 24);
  BOOL v12 = v11 == 35 || v11 == 11;
  if (!v12) {
    goto LABEL_19;
  }
  int v13 = (*(unsigned __int16 *)(a2 + 26) >> 7) & 7;
  if (v13 == 2)
  {
    uint64_t v17 = *(void *)(v10 + 80);
    unsigned int v18 = *(_DWORD *)(v17 + 32);
    if (v18 > 0x40) {
      uint64_t v19 = **(void **)(v17 + 24);
    }
    else {
      uint64_t v19 = (uint64_t)(*(void *)(v17 + 24) << -(char)v18) >> -(char)v18;
    }
    uint64_t v16 = -v19;
    goto LABEL_25;
  }
  if (v13 == 1)
  {
    uint64_t v14 = *(void *)(v10 + 80);
    unsigned int v15 = *(_DWORD *)(v14 + 32);
    if (v15 > 0x40) {
      uint64_t v16 = **(void **)(v14 + 24);
    }
    else {
      uint64_t v16 = (uint64_t)(*(void *)(v14 + 24) << -(char)v15) >> -(char)v15;
    }
  }
  else
  {
LABEL_19:
    uint64_t v16 = 0;
  }
LABEL_25:
  long long v23 = *(_OWORD *)(a2 + 80);
  unint64_t v20 = sub_1CB896FB8((unsigned __int8 *)&v23);
  if (v21 == 1) {
    uint64_t v22 = -1;
  }
  else {
    uint64_t v22 = v20;
  }
  *(unsigned char *)uint64_t v3 = (*(unsigned char *)(a2 + 26) & 8) != 0;
  *(unsigned char *)(v3 + 1) = (*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) != 0;
  BOOL result = sub_1CD3E3954(a2);
  *(void *)(v3 + 8) = *(void *)result;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(result + 8);
  *(void *)(v3 + 24) = v16;
  *(void *)(v3 + 32) = v22;
  *(unsigned char *)(v3 + 40) = 1;
  *(void *)(v3 + 48) = *(void *)(a2 + 96);
  return result;
}

uint64_t sub_1CCF5F1EC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  int v7 = *(unsigned __int16 *)(a1 + 24);
  if (a1 && v7 == 253)
  {
    if ((*(_WORD *)(a1 + 26) & 0x380) != 0) {
      return 0;
    }
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    if (*(unsigned char *)(a1 + 80))
    {
      __int16 v9 = *(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a2 + 169796);
      if (v9 < 0x10u
        || (v9 & 0xF0) == 0x40
        || (__int16 v10 = *(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a3 + 169796), v10 < 0x10u)
        || (v10 & 0xF0) == 0x40)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(v11 + 40);
        *(_DWORD *)(a6 + 8) = *(_DWORD *)(v11 + 48);
        *(void *)a6 = v12;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (!a1 || v7 != 254)
    {
      if (a1 && v7 == 308)
      {
        if ((*(_WORD *)(a1 + 26) & 0x380) != 0) {
          return 0;
        }
        uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
        if (!*(unsigned char *)(a1 + 80)) {
          return v8;
        }
        if ((*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a2 + 169796) & 0xB000) != 0
          && (*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a3 + 169796) & 0xB000) != 0)
        {
          return 0;
        }
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(v15 + 40);
        *(_DWORD *)(a6 + 8) = *(_DWORD *)(v15 + 48);
        *(void *)a6 = v16;
      }
      else
      {
        uint64_t v8 = 0;
        if (!a1 || v7 != 309) {
          return v8;
        }
        if ((*(_WORD *)(a1 + 26) & 0x380) != 0) {
          return 0;
        }
        uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
        if (!*(unsigned char *)(a1 + 80)) {
          return v8;
        }
        if ((*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a2 + 169796) & 0xB00) != 0
          && (*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a3 + 169796) & 0xB00) != 0)
        {
          return 0;
        }
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(v18 + 80);
        *(_DWORD *)(a6 + 8) = *(_DWORD *)(v18 + 88);
        *(void *)a6 = v19;
        *a4 = 0;
      }
      uint64_t v8 = 1;
      *a5 = 1;
      return v8;
    }
    if ((*(_WORD *)(a1 + 26) & 0x380) != 0) {
      return 0;
    }
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    if (*(unsigned char *)(a1 + 80))
    {
      if ((*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a2 + 169796) & 0xB) == 0
        || (*(_WORD *)(a7 + 10 * *(unsigned __int8 *)(a1 + 80) + 2 * a3 + 169796) & 0xB) == 0)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(v13 + 80);
        *(_DWORD *)(a6 + 8) = *(_DWORD *)(v13 + 88);
        *(void *)a6 = v14;
        *a4 = 0;
        return 1;
      }
      return 0;
    }
  }
  return v8;
}

uint64_t sub_1CCF5F420(uint64_t a1, uint64_t a2, uint64_t a3, llvm::LLVMContext *a4, uint64_t a5)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if (a2 && v6 == 253)
  {
LABEL_7:
    if ((*(_WORD *)(a2 + 26) & 0x380) == 0)
    {
      uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 40);
      goto LABEL_13;
    }
    return 0;
  }
  if (a2 && v6 == 254) {
    goto LABEL_11;
  }
  if (a2 && v6 == 308) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  if (a2)
  {
    if (v6 == 309)
    {
LABEL_11:
      if ((*(_WORD *)(a2 + 26) & 0x380) == 0)
      {
        uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 80);
LABEL_13:
        if (v7 != a1) {
          return 0;
        }
        uint64_t v10 = *(void *)(a2 + 88);
        v31[0] = *(void *)(a2 + 80);
        v31[1] = v10;
        uint64_t v11 = *(unsigned int *)(*(void *)(a2 + 96) + 16);
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        char v29 = 0;
        int v12 = *(unsigned __int16 *)(a1 + 24);
        if (v12 == 57)
        {
          char v29 = 1;
          uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 40);
          int v20 = *(unsigned __int16 *)(v19 + 24);
          if (v20 != 35 && v20 != 11)
          {
LABEL_32:
            uint64_t v30 = 1;
LABEL_37:
            uint64_t v25 = *(void *)(*(void *)a3 + 40) + 272;
            llvm::EVT::getTypeForEVT((llvm::EVT *)v31, a4);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a5 + 1064))(a5, v25, &v27, v26, v11, 0);
          }
          uint64_t v22 = *(void *)(v19 + 80);
          unsigned int v23 = *(_DWORD *)(v22 + 32);
          if (v23 > 0x40) {
            uint64_t v24 = **(void **)(v22 + 24);
          }
          else {
            uint64_t v24 = (uint64_t)(*(void *)(v22 + 24) << -(char)v23) >> -(char)v23;
          }
          uint64_t v18 = -v24;
        }
        else
        {
          uint64_t v8 = 0;
          if (v12 != 56) {
            return v8;
          }
          char v29 = 1;
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 40);
          int v14 = *(unsigned __int16 *)(v13 + 24);
          if (v14 != 35 && v14 != 11) {
            goto LABEL_32;
          }
          uint64_t v16 = *(void *)(v13 + 80);
          unsigned int v17 = *(_DWORD *)(v16 + 32);
          if (v17 > 0x40) {
            uint64_t v18 = **(void **)(v16 + 24);
          }
          else {
            uint64_t v18 = (uint64_t)(*(void *)(v16 + 24) << -(char)v17) >> -(char)v17;
          }
        }
        uint64_t v28 = v18;
        goto LABEL_37;
      }
      return 0;
    }
  }
  return v8;
}

void sub_1CCF5F618(llvm::APInt *a1, uint64_t a2)
{
  unsigned int v5 = sub_1CD40C020(*(void *)(a2 + 8), 0);
  if (v4 == 1) {
  unsigned int v7 = sub_1CD40C020(*(void *)a2, 0);
  }
  if (v6 == 1) {
  *((_DWORD *)a1 + 2) = v7;
  }
  unsigned int v8 = v7;
  if (v7 >= 0x41) {
    llvm::APInt::initSlowCase(a1);
  }
  *(void *)a1 = -1;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v9 = 0;
  }
  *(void *)a1 = v9;
  if (v5 > 0x40)
  {
    if (v7 != v5) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v17, (uint64_t)a1);
    unsigned int v8 = *((_DWORD *)a1 + 2);
  }
  else
  {
    uint64_t v10 = *(void *)a1;
    unsigned int v18 = v5;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5) {
      unint64_t v11 = 0;
    }
    unint64_t v17 = v11 & v10;
  }
  if (v8 >= 0x41 && *(void *)a1) {
    MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
  }
  unint64_t v12 = v17;
  *(void *)a1 = v17;
  unsigned int v13 = v18;
  *((_DWORD *)a1 + 2) = v18;
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  if (v13 > 0x40)
  {
    llvm::APInt::shlSlowCase(a1, v14);
  }
  else
  {
    unint64_t v15 = v12 << v14;
    if (v13 == v14) {
      unint64_t v15 = 0;
    }
    if (v13) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    }
    else {
      unint64_t v16 = 0;
    }
    *(void *)a1 = v16 & v15;
  }
}

unint64_t sub_1CCF5F864(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(**(void **)(*(void *)(a1 + 24) + 40) + 40) + 272);
  unint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = sub_1CD40C020(*(void *)(a1 + 8), 0);
  if (v5 == 1)
  {
    unsigned int v8 = v4;
    int v4 = v8;
  }
  unint64_t v6 = v3 >> 3;
  if (v2) {
    return ((unint64_t)v4 >> 3)
  }
         - (unint64_t)(sub_1CCF5F8FC(a1) + v6);
  return v6;
}

uint64_t sub_1CCF5F8FC(uint64_t a1)
{
  sub_1CCF5F618((llvm::APInt *)&v6, a1);
  if (v7 > 0x40)
  {
    uint64_t v3 = 0;
    unsigned __int32 v2 = 0;
    do
    {
      uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&v6 + v3));
      v4.i16[0] = vaddlv_u8(v4);
      v2 += v4.i32[0];
      v3 += 8;
    }
    while (((((unint64_t)v7 + 63) >> 3) & 0x3FFFFFF8) != v3);
    MEMORY[0x1D25D9CB0](*(void *)&v6, 0x1000C8000313F17);
  }
  else
  {
    uint8x8_t v1 = (uint8x8_t)vcnt_s8(v6);
    v1.i16[0] = vaddlv_u8(v1);
    unsigned __int32 v2 = v1.i32[0];
  }
  return v2 >> 3;
}

BOOL sub_1CCF5F99C(llvm::APInt *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 1;
  }
  unsigned int v3 = v1 - 64;
  if (v1 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase(this) != v1)
    {
      llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
      unsigned int v16 = v1;
      operator new[]();
    }
    return 1;
  }
  unint64_t v4 = *(void *)this;
  if (*(void *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1) {
    return 1;
  }
  unsigned int v5 = __clz(__rbit64(v4));
  unsigned int v16 = *((_DWORD *)this + 2);
  if (v1 <= v5)
  {
    unint64_t v6 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v6 = v4 >> v5;
    unint64_t v15 = v4 >> v5;
  }
  int v7 = __clz(v6);
  if (!(v3 + v7)) {
    return v15 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  int v8 = v3 + v7;
  if (v1 - v8 < 0x41)
  {
    unsigned int v14 = v1 - v8;
    unint64_t v9 = v1 == v8 ? 0 : 0xFFFFFFFFFFFFFFFFLL >> (v8 - v1);
    unint64_t v13 = v9 & v6;
  }
  else
  {
    if (v8) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v13, (uint64_t)&v15);
  }
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  unint64_t v15 = v13;
  unsigned int v1 = v14;
  unsigned int v16 = v14;
  if (!v14) {
    return 1;
  }
  if (v14 <= 0x40) {
    return v15 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  unint64_t v12 = v15;
  BOOL v10 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v15) == v1;
  if (v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  return v10;
}

uint64_t sub_1CCF5FC64(uint64_t a1)
{
  uint64_t v1 = (1 << *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 96) + 34)) | *(void *)(*(void *)(*(void *)(a1 + 8) + 96)
                                                                                       + 8);
  unsigned int v2 = 63 - __clz(v1 & -v1);
  unint64_t v3 = sub_1CCF5F864(a1);
  unsigned int v4 = 63 - __clz((((1 << v2) + v3) | (1 << v2)) & -(uint64_t)(((1 << v2) + v3) | (1 << v2)));
  if (v3) {
    return v4;
  }
  else {
    return v2;
  }
}

void sub_1CCF5FCDC(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v9 = a2 - 2;
    v118 = a2 - 4;
    v119 = a2;
    v117 = a2 - 6;
    BOOL v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          unint64_t v11 = v119;
          uint64_t v12 = (char *)v119 - (char *)v10;
          uint64_t v13 = ((char *)v119 - (char *)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t v53 = sub_1CCF5F864((uint64_t)v9);
                if (v53 < sub_1CCF5F864((uint64_t)a1))
                {
                  long long v54 = a1[1];
                  long long v122 = *a1;
                  long long v123 = v54;
                  long long v55 = v9[1];
                  *a1 = *v9;
                  a1[1] = v55;
                  long long v56 = v123;
                  *unint64_t v9 = v122;
                  v9[1] = v56;
                }
                break;
              case 3:
                sub_1CCF6065C(a1, a1 + 2, v9);
                break;
              case 4:
                sub_1CCF60950((uint64_t)a1, a1 + 2, a1 + 4, v9);
                break;
              case 5:
                sub_1CCF60560((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 767)
          {
            uint64_t v57 = (uint64_t)(a1 + 2);
            BOOL v59 = a1 == v119 || v57 == (void)v119;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                char v61 = a1;
                do
                {
                  uint64_t v62 = (uint64_t)v61;
                  char v61 = (long long *)v57;
                  unint64_t v63 = sub_1CCF5F864(v57);
                  if (v63 < sub_1CCF5F864(v62))
                  {
                    long long v64 = v61[1];
                    long long v122 = *v61;
                    long long v123 = v64;
                    uint64_t v65 = v60;
                    while (1)
                    {
                      uint64_t v66 = (char *)a1 + v65;
                      long long v67 = *(long long *)((char *)a1 + v65 + 16);
                      *((_OWORD *)v66 + 2) = *(long long *)((char *)a1 + v65);
                      *((_OWORD *)v66 + 3) = v67;
                      if (!v65) {
                        break;
                      }
                      v65 -= 32;
                      unint64_t v68 = sub_1CCF5F864((uint64_t)&v122);
                      if (v68 >= sub_1CCF5F864((uint64_t)a1 + v65))
                      {
                        int v69 = (long long *)((char *)a1 + v65 + 32);
                        goto LABEL_78;
                      }
                    }
                    int v69 = a1;
LABEL_78:
                    long long v70 = v123;
                    long long *v69 = v122;
                    v69[1] = v70;
                  }
                  uint64_t v57 = (uint64_t)(v61 + 2);
                  v60 += 32;
                }
                while (v61 + 2 != v119);
              }
            }
            else if (!v59)
            {
              v108 = a1 - 2;
              do
              {
                uint64_t v109 = (uint64_t)a1;
                a1 = (long long *)v57;
                unint64_t v110 = sub_1CCF5F864(v57);
                if (v110 < sub_1CCF5F864(v109))
                {
                  long long v111 = a1[1];
                  long long v122 = *a1;
                  long long v123 = v111;
                  long long v112 = v108;
                  do
                  {
                    long long v113 = v112[3];
                    v112[4] = v112[2];
                    v112[5] = v113;
                    unint64_t v114 = sub_1CCF5F864((uint64_t)&v122);
                    unint64_t v115 = sub_1CCF5F864((uint64_t)v112);
                    v112 -= 2;
                  }
                  while (v114 < v115);
                  long long v116 = v123;
                  v112[4] = v122;
                  v112[5] = v116;
                }
                uint64_t v57 = (uint64_t)(a1 + 2);
                v108 += 2;
              }
              while (a1 + 2 != v119);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v119)
            {
              int64_t v71 = (unint64_t)(v13 - 2) >> 1;
              int64_t v72 = v71;
              do
              {
                int64_t v73 = v72;
                if (v71 >= v72)
                {
                  uint64_t v74 = (2 * v72) | 1;
                  uint64_t v75 = &a1[2 * v74];
                  if (2 * v72 + 2 < v13)
                  {
                    unint64_t v76 = sub_1CCF5F864((uint64_t)&a1[2 * v74]);
                    if (v76 < sub_1CCF5F864((uint64_t)(v75 + 2)))
                    {
                      v75 += 2;
                      uint64_t v74 = 2 * v73 + 2;
                    }
                  }
                  uint64_t v77 = &a1[2 * v73];
                  unint64_t v78 = sub_1CCF5F864((uint64_t)v75);
                  if (v78 >= sub_1CCF5F864((uint64_t)v77))
                  {
                    long long v79 = v77[1];
                    long long v122 = *v77;
                    long long v123 = v79;
                    do
                    {
                      uint64_t v80 = v75;
                      long long v81 = v75[1];
                      long long *v77 = *v75;
                      v77[1] = v81;
                      if (v71 < v74) {
                        break;
                      }
                      uint64_t v82 = (2 * v74) | 1;
                      uint64_t v75 = &a1[2 * v82];
                      uint64_t v83 = 2 * v74 + 2;
                      if (v83 < v13)
                      {
                        unint64_t v84 = sub_1CCF5F864((uint64_t)&a1[2 * v82]);
                        if (v84 < sub_1CCF5F864((uint64_t)(v75 + 2)))
                        {
                          v75 += 2;
                          uint64_t v82 = v83;
                        }
                      }
                      unint64_t v85 = sub_1CCF5F864((uint64_t)v75);
                      uint64_t v77 = v80;
                      uint64_t v74 = v82;
                    }
                    while (v85 >= sub_1CCF5F864((uint64_t)&v122));
                    long long v86 = v123;
                    long long *v80 = v122;
                    v80[1] = v86;
                    unint64_t v11 = v119;
                  }
                }
                int64_t v72 = v73 - 1;
              }
              while (v73);
              do
              {
                uint64_t v87 = 0;
                long long v88 = a1[1];
                long long v120 = *a1;
                long long v121 = v88;
                uint64_t v89 = a1;
                do
                {
                  unsigned int v90 = &v89[2 * v87 + 2];
                  uint64_t v91 = (2 * v87) | 1;
                  uint64_t v92 = 2 * v87 + 2;
                  if (v92 < v13)
                  {
                    unint64_t v93 = sub_1CCF5F864((uint64_t)&v89[2 * v87 + 2]);
                    if (v93 < sub_1CCF5F864((uint64_t)(v90 + 2)))
                    {
                      v90 += 2;
                      uint64_t v91 = v92;
                    }
                  }
                  long long v94 = v90[1];
                  *uint64_t v89 = *v90;
                  v89[1] = v94;
                  uint64_t v89 = v90;
                  uint64_t v87 = v91;
                }
                while (v91 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                v11 -= 2;
                if (v90 == v11)
                {
                  long long v106 = v121;
                  *unsigned int v90 = v120;
                  v90[1] = v106;
                }
                else
                {
                  long long v95 = v11[1];
                  *unsigned int v90 = *v11;
                  v90[1] = v95;
                  long long v96 = v121;
                  *unint64_t v11 = v120;
                  v11[1] = v96;
                  uint64_t v97 = (char *)v90 - (char *)a1 + 32;
                  if (v97 >= 33)
                  {
                    unint64_t v98 = (((unint64_t)v97 >> 5) - 2) >> 1;
                    uint64_t v99 = &a1[2 * v98];
                    unint64_t v100 = sub_1CCF5F864((uint64_t)v99);
                    if (v100 < sub_1CCF5F864((uint64_t)v90))
                    {
                      long long v101 = v90[1];
                      long long v122 = *v90;
                      long long v123 = v101;
                      do
                      {
                        uint64_t v102 = v99;
                        long long v103 = v99[1];
                        *unsigned int v90 = *v99;
                        v90[1] = v103;
                        if (!v98) {
                          break;
                        }
                        unint64_t v98 = (v98 - 1) >> 1;
                        uint64_t v99 = &a1[2 * v98];
                        unint64_t v104 = sub_1CCF5F864((uint64_t)v99);
                        unsigned int v90 = v102;
                      }
                      while (v104 < sub_1CCF5F864((uint64_t)&v122));
                      long long v105 = v123;
                      long long *v102 = v122;
                      v102[1] = v105;
                    }
                  }
                }
              }
              while (v13-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = &a1[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_1CCF6065C(v15, a1, v9);
          }
          else
          {
            sub_1CCF6065C(a1, v15, v9);
            sub_1CCF6065C(a1 + 2, v15 - 2, v118);
            sub_1CCF6065C(a1 + 4, &a1[2 * v14 + 2], v117);
            unint64_t v11 = v119;
            sub_1CCF6065C(v15 - 2, v15, &a1[2 * v14 + 2]);
            long long v16 = a1[1];
            long long v122 = *a1;
            long long v123 = v16;
            long long v17 = v15[1];
            *a1 = *v15;
            a1[1] = v17;
            long long v18 = v123;
            *unint64_t v15 = v122;
            v15[1] = v18;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v19 = sub_1CCF5F864((uint64_t)(a1 - 2));
          if (v19 < sub_1CCF5F864((uint64_t)a1)) {
            break;
          }
          long long v37 = a1[1];
          long long v120 = *a1;
          long long v121 = v37;
          unint64_t v38 = sub_1CCF5F864((uint64_t)&v120);
          if (v38 >= sub_1CCF5F864((uint64_t)v9))
          {
            uint64_t v40 = a1 + 2;
            do
            {
              BOOL v10 = v40;
              if (v40 >= v11) {
                break;
              }
              unint64_t v41 = sub_1CCF5F864((uint64_t)&v120);
              unint64_t v42 = sub_1CCF5F864((uint64_t)v10);
              uint64_t v40 = v10 + 2;
            }
            while (v41 >= v42);
          }
          else
          {
            BOOL v10 = a1;
            do
            {
              v10 += 2;
              unint64_t v39 = sub_1CCF5F864((uint64_t)&v120);
            }
            while (v39 >= sub_1CCF5F864((uint64_t)v10));
          }
          int v43 = v11;
          if (v10 < v11)
          {
            int v43 = v11;
            do
            {
              v43 -= 2;
              unint64_t v44 = sub_1CCF5F864((uint64_t)&v120);
            }
            while (v44 < sub_1CCF5F864((uint64_t)v43));
          }
          while (v10 < v43)
          {
            long long v45 = v10[1];
            long long v122 = *v10;
            long long v123 = v45;
            long long v46 = v43[1];
            long long *v10 = *v43;
            v10[1] = v46;
            long long v47 = v123;
            *int v43 = v122;
            v43[1] = v47;
            do
            {
              v10 += 2;
              unint64_t v48 = sub_1CCF5F864((uint64_t)&v120);
            }
            while (v48 >= sub_1CCF5F864((uint64_t)v10));
            do
            {
              v43 -= 2;
              unint64_t v49 = sub_1CCF5F864((uint64_t)&v120);
            }
            while (v49 < sub_1CCF5F864((uint64_t)v43));
          }
          uint64_t v50 = v10 - 2;
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1)
          {
            long long v51 = *(v10 - 1);
            *a1 = *v50;
            a1[1] = v51;
          }
          a4 = 0;
          long long v52 = v121;
          *uint64_t v50 = v120;
          *(v10 - 1) = v52;
        }
        uint64_t v20 = 0;
        long long v21 = a1[1];
        long long v120 = *a1;
        long long v121 = v21;
        do
        {
          v20 += 2;
          unint64_t v22 = sub_1CCF5F864((uint64_t)&a1[v20]);
        }
        while (v22 < sub_1CCF5F864((uint64_t)&v120));
        unsigned int v23 = &a1[v20];
        unint64_t v24 = (unint64_t)v11;
        if (v20 == 2)
        {
          unint64_t v24 = (unint64_t)v11;
          do
          {
            if ((unint64_t)v23 >= v24) {
              break;
            }
            v24 -= 32;
            unint64_t v26 = sub_1CCF5F864(v24);
          }
          while (v26 >= sub_1CCF5F864((uint64_t)&v120));
        }
        else
        {
          do
          {
            v24 -= 32;
            unint64_t v25 = sub_1CCF5F864(v24);
          }
          while (v25 >= sub_1CCF5F864((uint64_t)&v120));
        }
        BOOL v10 = &a1[v20];
        if ((unint64_t)v23 < v24)
        {
          uint64_t v27 = (long long *)v24;
          do
          {
            long long v28 = v10[1];
            long long v122 = *v10;
            long long v123 = v28;
            long long v29 = v27[1];
            long long *v10 = *v27;
            v10[1] = v29;
            long long v30 = v123;
            long long *v27 = v122;
            v27[1] = v30;
            do
            {
              v10 += 2;
              unint64_t v31 = sub_1CCF5F864((uint64_t)v10);
            }
            while (v31 < sub_1CCF5F864((uint64_t)&v120));
            do
            {
              v27 -= 2;
              unint64_t v32 = sub_1CCF5F864((uint64_t)v27);
            }
            while (v32 >= sub_1CCF5F864((uint64_t)&v120));
          }
          while (v10 < v27);
        }
        unint64_t v33 = v10 - 2;
        if (v10 - 2 != a1)
        {
          long long v34 = *(v10 - 1);
          *a1 = *v33;
          a1[1] = v34;
        }
        long long v35 = v121;
        long long *v33 = v120;
        *(v10 - 1) = v35;
        if ((unint64_t)v23 >= v24) {
          break;
        }
LABEL_30:
        sub_1CCF5FCDC(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v36 = sub_1CCF6076C(a1, v10 - 2);
      if (sub_1CCF6076C(v10, v119)) {
        break;
      }
      if (!v36) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v36) {
      continue;
    }
    break;
  }
}

__n128 sub_1CCF60560(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  sub_1CCF60950(a1, a2, a3, a4);
  unint64_t v10 = sub_1CCF5F864((uint64_t)a5);
  if (v10 < sub_1CCF5F864((uint64_t)a4))
  {
    long long v13 = *a4;
    long long v12 = a4[1];
    long long v14 = a5[1];
    *a4 = *a5;
    a4[1] = v14;
    *a5 = v13;
    a5[1] = v12;
    unint64_t v15 = sub_1CCF5F864((uint64_t)a4);
    if (v15 < sub_1CCF5F864((uint64_t)a3))
    {
      long long v17 = *a3;
      long long v16 = a3[1];
      long long v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      unint64_t v19 = sub_1CCF5F864((uint64_t)a3);
      if (v19 < sub_1CCF5F864((uint64_t)a2))
      {
        long long v21 = *a2;
        long long v20 = a2[1];
        long long v22 = a3[1];
        *a2 = *a3;
        a2[1] = v22;
        *a3 = v21;
        a3[1] = v20;
        unint64_t v23 = sub_1CCF5F864((uint64_t)a2);
        if (v23 < sub_1CCF5F864(a1))
        {
          long long v24 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          long long v25 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v25;
          *a2 = v24;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1CCF6065C(long long *a1, long long *a2, long long *a3)
{
  unint64_t v6 = sub_1CCF5F864((uint64_t)a2);
  unint64_t v7 = sub_1CCF5F864((uint64_t)a1);
  unint64_t v8 = sub_1CCF5F864((uint64_t)a3);
  unint64_t result = sub_1CCF5F864((uint64_t)a2);
  if (v6 >= v7)
  {
    if (v8 < result)
    {
      long long v14 = *a2;
      long long v13 = a2[1];
      long long v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v14;
      a3[1] = v13;
      unint64_t v16 = sub_1CCF5F864((uint64_t)a2);
      unint64_t result = sub_1CCF5F864((uint64_t)a1);
      if (v16 < result)
      {
        long long v18 = *a1;
        long long v17 = a1[1];
        long long v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        *a2 = v18;
        a2[1] = v17;
      }
    }
  }
  else
  {
    if (v8 >= result)
    {
      long long v21 = *a1;
      long long v20 = a1[1];
      long long v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      *a2 = v21;
      a2[1] = v20;
      unint64_t v23 = sub_1CCF5F864((uint64_t)a3);
      unint64_t result = sub_1CCF5F864((uint64_t)a2);
      if (v23 >= result) {
        return result;
      }
      long long v11 = *a2;
      long long v10 = a2[1];
      long long v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
    }
    else
    {
      long long v11 = *a1;
      long long v10 = a1[1];
      long long v12 = a3[1];
      *a1 = *a3;
      a1[1] = v12;
    }
    *a3 = v11;
    a3[1] = v10;
  }
  return result;
}

BOOL sub_1CCF6076C(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 2;
      unint64_t v7 = sub_1CCF5F864((uint64_t)(a2 - 2));
      if (v7 < sub_1CCF5F864((uint64_t)a1))
      {
        long long v9 = *a1;
        long long v8 = a1[1];
        long long v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        *unint64_t v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_1CCF6065C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CCF60950((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CCF60560((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v11 = (uint64_t)(a1 + 4);
      sub_1CCF6065C(a1, a1 + 2, a1 + 4);
      long long v12 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = sub_1CCF5F864((uint64_t)v12);
    if (v15 < sub_1CCF5F864(v11))
    {
      long long v16 = v12[1];
      long long v24 = *v12;
      long long v25 = v16;
      uint64_t v17 = v13;
      while (1)
      {
        long long v18 = (char *)a1 + v17;
        long long v19 = *(long long *)((char *)a1 + v17 + 80);
        *((_OWORD *)v18 + 6) = *(long long *)((char *)a1 + v17 + 64);
        *((_OWORD *)v18 + 7) = v19;
        if (v17 == -64) {
          break;
        }
        uint64_t v20 = (uint64_t)(v18 + 32);
        unint64_t v21 = sub_1CCF5F864((uint64_t)&v24);
        v17 -= 32;
        if (v21 >= sub_1CCF5F864(v20))
        {
          long long v22 = (long long *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      long long v22 = a1;
LABEL_12:
      long long v23 = v25;
      *long long v22 = v24;
      v22[1] = v23;
      if (++v14 == 8) {
        return v12 + 2 == a2;
      }
    }
    uint64_t v11 = (uint64_t)v12;
    v13 += 32;
    v12 += 2;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CCF60950(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  sub_1CCF6065C((long long *)a1, a2, a3);
  unint64_t v8 = sub_1CCF5F864((uint64_t)a4);
  if (v8 < sub_1CCF5F864((uint64_t)a3))
  {
    long long v11 = *a3;
    long long v10 = a3[1];
    long long v12 = a4[1];
    *a3 = *a4;
    a3[1] = v12;
    *a4 = v11;
    a4[1] = v10;
    unint64_t v13 = sub_1CCF5F864((uint64_t)a3);
    if (v13 < sub_1CCF5F864((uint64_t)a2))
    {
      long long v15 = *a2;
      long long v14 = a2[1];
      long long v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      unint64_t v17 = sub_1CCF5F864((uint64_t)a2);
      if (v17 < sub_1CCF5F864(a1))
      {
        long long v18 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v19 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v19;
        *a2 = v18;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

uint64_t sub_1CCF60A1C(uint64_t result)
{
  if (*(unsigned __int16 *)(result + 24) - 198 <= 3) {
    return sub_1CCF60A1C(**(void **)(result + 32), *(void *)(*(void *)(result + 32) + 8));
  }
  return result;
}

void sub_1CCF60A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 136) || (uint64_t v5 = *(unsigned int *)(a1 + 140), v5 == 8))
  {
    sub_1CCF60D48((uint64_t)&v28, a1, a2);
    uint64_t v6 = v28;
    if (!*(_DWORD *)(v28 + 136))
    {
      unsigned int v7 = sub_1CCF60F90(v28, (_DWORD *)v29 + 4 * v30 - 1, *(unsigned int *)(v28 + 140), a2, a3);
      if (v7 <= 8)
      {
        *(_DWORD *)(v6 + 140) = v7;
        *((_DWORD *)v29 + 2) = v7;
        goto LABEL_18;
      }
      uint64_t v11 = *((unsigned int *)v29 + 4 * v30 - 1);
      uint64_t v12 = *(unsigned int *)(v6 + 140);
      uint64_t v13 = (v12 - 1);
      sub_1CC2ECAA8(*(void *)(v6 + 144));
      if (v12)
      {
        long long v15 = (long long *)v6;
        long long v16 = (_OWORD *)v14;
        do
        {
          long long v17 = *v15++;
          *v16++ = v17;
          --v12;
        }
        while (v12);
      }
      *(void *)(v6 + 128) = 0;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)uint64_t v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(void *)(v6 + 72) = *(void *)((v14 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0) + 16 * v13 + 8);
      *(void *)(v6 + 8) = v14 & 0xFFFFFFFFFFFFFFC0 | v13;
      *(void *)uint64_t v6 = *(void *)(v14 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0);
      *(void *)(v6 + 136) = 0x100000001;
      long long v18 = v29;
      *(void *)long long v29 = v6 + 8;
      v18[1] = 1;
      long long v19 = v29;
      unint64_t v20 = *(void *)(*(void *)v29 + 8 * *((unsigned int *)v29 + 3)) & 0xFFFFFFFFFFFFFFC0;
      uint64_t v21 = (*(void *)(*(void *)v29 + 8 * *((unsigned int *)v29 + 3)) & 0x3FLL | (v11 << 32)) + 1;
      if (v30 == 1)
      {
        if (v31 <= 1) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        long long v22 = (char *)v29 + 16;
        *((void *)v29 + 2) = v20;
        *((void *)v22 + 1) = v21;
        ++v30;
      }
      else
      {
        if (v30 >= v31) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        long long v23 = (char *)v29 + 16;
        *((_OWORD *)v29 + v30) = *((_OWORD *)v29 + v30 - 1);
        unsigned int v24 = v30;
        long long v25 = (char *)v29 + 16 * v30 - 16;
        if (v25 != (char *)(v19 + 2))
        {
          uint64_t v26 = v21;
          uint64_t v27 = v19;
          memmove(v19 + 4, v23, v25 - (char *)(v19 + 2));
          long long v19 = v27;
          uint64_t v21 = v26;
          unsigned int v24 = v30;
        }
        unsigned int v30 = v24 + 1;
        v19[2] = v20;
        v19[3] = v21;
      }
    }
    sub_1CCF61084(&v28, a2, a3);
LABEL_18:
    if (v29 != v32) {
      free(v29);
    }
    return;
  }
  if (v5)
  {
    uint64_t v8 = 0;
    long long v9 = (uint64_t *)(a1 + 8);
    while (1)
    {
      uint64_t v10 = *v9;
      v9 += 2;
      if (v10 > a2) {
        break;
      }
      if (v5 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 140);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  LODWORD(v28) = v8;
  *(_DWORD *)(a1 + 140) = sub_1CCF60F90(a1, &v28, v5, a2, a3);
}

_DWORD *sub_1CCF60D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v6 = a1 + 8;
  *(void *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 136))
  {
    uint64_t v7 = *(unsigned int *)(a2 + 140);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a2 + 72;
      while (*(void *)(v9 + 8 * v8) <= a3)
      {
        if (v7 == ++v8)
        {
          uint64_t v8 = v7;
          break;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    __n128 result = sub_1CCF61D7C((_DWORD *)a1, v8);
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    if (v15 && *(_DWORD *)(*(void *)v6 + 12) < *(_DWORD *)(*(void *)v6 + 8))
    {
      int v16 = *(_DWORD *)(*(void *)a1 + 136);
      uint64_t v17 = *(void *)(*(void *)(*(void *)v6 + 16 * (v15 - 1))
                      + 8 * *(unsigned int *)(*(void *)v6 + 16 * (v15 - 1) + 12));
      int v18 = v16 - v15;
      if (v16 != v15)
      {
        do
        {
          unsigned int v19 = 0;
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFC0;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)((v17 & 0xFFFFFFFFFFFFFFC0) + 8 * v19++ + 0x60);
          }
          while (v22 <= a3);
          if (v15 >= *(_DWORD *)(a1 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          long long v23 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v15);
          unint64_t *v23 = v20;
          v23[1] = (v17 & 0x3F | ((unint64_t)v21 << 32)) + 1;
          unsigned int v15 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 16) = v15;
          uint64_t v17 = *(void *)(v20 + 8 * v21);
          --v18;
        }
        while (v18);
      }
      unsigned int v24 = 0;
      do
      {
        unsigned int v25 = v24;
        uint64_t v26 = *(void *)((v17 & 0xFFFFFFFFFFFFFFC0) + 16 * v24++ + 8);
      }
      while (v26 <= a3);
      if (v15 >= *(_DWORD *)(a1 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v27 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v15);
      unint64_t *v27 = v17 & 0xFFFFFFFFFFFFFFC0;
      v27[1] = (v17 & 0x3F | ((unint64_t)v25 << 32)) + 1;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a2 + 140);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)(a2 + 8);
      while (1)
      {
        uint64_t v13 = *v12;
        v12 += 2;
        if (v13 > a3) {
          break;
        }
        if (v10 == ++v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    return sub_1CCF61D7C((_DWORD *)a1, v11);
  }
  return result;
}

uint64_t sub_1CCF60F90(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  if (!v5)
  {
LABEL_9:
    if (v5 == a3)
    {
      uint64_t v9 = (void *)(a1 + 16 * a3);
      *uint64_t v9 = a4;
LABEL_19:
      v9[1] = a5;
      return (a3 + 1);
    }
    uint64_t v10 = (void *)(a1 + 16 * v5);
    if (*v10 == a5)
    {
      void *v10 = a4;
      return a3;
    }
    if (a3 != 8)
    {
      unsigned int v11 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 - 1));
        --v11;
      }
      while (v5 != v11);
      void *v10 = a4;
      uint64_t v9 = (void *)(a1 + 16 * v5);
      goto LABEL_19;
    }
    return 9;
  }
  uint64_t v6 = a1 + 16 * (v5 - 1);
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = (void *)(v6 + 8);
  if (v8 != a4)
  {
    if (v5 == 8) {
      return 9;
    }
    goto LABEL_9;
  }
  *a2 = v5 - 1;
  if (v5 == a3 || *(void *)(a1 + 16 * v5) != a5)
  {
    *uint64_t v7 = a5;
  }
  else
  {
    *uint64_t v7 = *(void *)(a1 + 16 * v5 + 8);
    if (v5 + 1 != a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v5) = *(_OWORD *)(a1 + 16 * (v5 + 1));
        LODWORD(v5) = v5 + 1;
      }
      while (a3 - 1 != v5);
    }
    return (a3 - 1);
  }
  return a3;
}

uint64_t sub_1CCF61084(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v7 = a1[4];
  if (!v7 || (uint64_t v8 = *(void *)v6, *(_DWORD *)(*(void *)v6 + 12) >= *(_DWORD *)(*(void *)v6 + 8)))
  {
    uint64_t v9 = *(unsigned int *)(*(void *)a1 + 136);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(void *)a1 + 136));
    uint64_t v8 = *(void *)(v5 + 8);
    ++*(_DWORD *)(v8 + 16 * v9 + 12);
    unsigned int v7 = *(_DWORD *)(v5 + 16);
  }
  uint64_t v10 = v8 + 16 * v7;
  v126 = v6;
  if (!*(_DWORD *)(v10 - 4))
  {
    unsigned int v11 = *(uint64_t **)(v10 - 16);
    if (*v11 > a2)
    {
      unsigned int v12 = v7 - 1;
      if (v7 == 1) {
        goto LABEL_12;
      }
      unsigned int v13 = v7 - 2;
      int v14 = v7;
      while (1)
      {
        uint64_t v15 = v13;
        if (!v13) {
          break;
        }
        int v16 = *(_DWORD *)(v8 + 16 * v13 + 12);
        --v14;
        --v13;
        if (v16) {
          goto LABEL_96;
        }
      }
      int v16 = *(_DWORD *)(v8 + 12);
      if (!v16) {
        goto LABEL_12;
      }
      int v14 = 1;
LABEL_96:
      uint64_t v90 = *(void *)(*(void *)(v8 + 16 * v15) + 8 * (v16 - 1));
      if (v14 != v12)
      {
        unsigned int v118 = ~v14 + v7;
        do
        {
          uint64_t v90 = *(void *)((v90 & 0xFFFFFFFFFFFFFFC0) + 8 * (v90 & 0x3F));
          --v118;
        }
        while (v118);
      }
      if (!v90)
      {
LABEL_12:
        **(void **)uint64_t v5 = a2;
      }
      else
      {
        unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v92 = v90 & 0x3F;
        unint64_t v93 = (v90 & 0xFFFFFFFFFFFFFFC0) + 16 * v92;
        if (*(void *)(v93 + 8) == a2)
        {
          llvm::IntervalMapImpl::Path::moveLeft(v126, v12);
          if (*v11 > a3)
          {
            unsigned int v88 = *(_DWORD *)(v5 + 16) - 1;
            *(void *)(v93 | 8) = a3;
LABEL_91:
            return sub_1CCF619C4(v5, v88, a3);
          }
          a2 = *(void *)(v91 + 16 * v92);
          long long v95 = *(void **)v5;
          uint64_t v94 = *(void *)(v5 + 8);
          uint64_t v96 = v94 + 16 * *(unsigned int *)(v5 + 16);
          uint64_t v97 = *(void **)(v96 - 16);
          int v98 = *(_DWORD *)(v96 - 8);
          int v99 = v98 - 1;
          if (v98 == 1)
          {
            unint64_t v100 = (void *)v95[18];
            *uint64_t v97 = *v100;
            *unint64_t v100 = v97;
            sub_1CCF61B08((_DWORD *)v5, *((_DWORD *)v95 + 34));
          }
          else
          {
            unsigned int v101 = *(_DWORD *)(v96 - 4);
            if (v101 + 1 != v98)
            {
              unsigned int v102 = v101;
              do
              {
                *(_OWORD *)&v97[2 * v102] = *(_OWORD *)&v97[2 * v102 + 2];
                ++v102;
              }
              while (v99 != v102);
            }
            uint64_t v103 = *((unsigned int *)v95 + 34);
            *(_DWORD *)(v94 + 16 * v103 + 8) = v99;
            if (v103)
            {
              uint64_t v104 = v94 + 16 * (v103 - 1);
              *(void *)(*(void *)v104 + 8 * *(unsigned int *)(v104 + 12)) = *(void *)(*(void *)v104
                                                                                            + 8
                                                                                            * *(unsigned int *)(v104 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v98 - 2);
            }
            if (v101 == v99)
            {
              sub_1CCF619C4(v5, v103, v97[2 * (v98 - 2) + 1]);
              int v105 = 0;
              uint64_t v106 = *((unsigned int *)v95 + 34);
              uint64_t v107 = *(void *)(v5 + 8);
              int v108 = v106 - 1;
              while (1)
              {
                int v109 = v105;
                uint64_t v110 = (v108 + v105);
                if (!(v108 + v105)) {
                  break;
                }
                int v112 = *(_DWORD *)(v107 + 16 * v110 + 8);
                int v111 = *(_DWORD *)(v107 + 16 * v110 + 12);
                --v105;
                if (v111 != v112 - 1) {
                  goto LABEL_120;
                }
              }
              uint64_t v110 = 0;
              int v112 = *(_DWORD *)(v107 + 8);
              int v111 = *(_DWORD *)(v107 + 12);
LABEL_120:
              unsigned int v115 = v111 + 1;
              *(_DWORD *)(v107 + 16 * v110 + 12) = v115;
              if (v115 != v112)
              {
                uint64_t v116 = *(void *)(*(void *)(v107 + 16 * v110) + 8 * v115);
                if (v109)
                {
                  do
                  {
                    uint64_t v119 = *(void *)v126 + 16 * (v106 + v109);
                    *(void *)uint64_t v119 = v116 & 0xFFFFFFFFFFFFFFC0;
                    *(_DWORD *)(v119 + 8) = (v116 & 0x3F) + 1;
                    *(_DWORD *)(v119 + 12) = 0;
                    uint64_t v116 = *(void *)(v116 & 0xFFFFFFFFFFFFFFC0);
                    BOOL v81 = __CFADD__(v109++, 1);
                  }
                  while (!v81);
                  uint64_t v107 = *(void *)v126;
                }
                v117 = (unint64_t *)(v107 + 16 * v106);
                unint64_t *v117 = v116 & 0xFFFFFFFFFFFFFFC0;
                v117[1] = (v116 & 0x3F) + 1;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v17 = (_DWORD *)(*(void *)(v5 + 8) + 16 * *(unsigned int *)(v5 + 16));
  int v18 = *--v17;
  uint64_t v19 = *(v17 - 1);
  BOOL v20 = v18 == v19;
  uint64_t result = sub_1CCF61A14(*(void *)(v17 - 3), v17, v19, a2, a3);
  if (result >= 0xC)
  {
    uint64_t v122 = a2;
    int v22 = *(_DWORD *)(v5 + 16);
    long long v130 = 0u;
    long long v131 = 0u;
    uint64_t v23 = *(void *)(v5 + 8);
    uint64_t v24 = (v22 - 1);
    unsigned int v25 = *(_DWORD *)(v23 + 16 * v24 + 12);
    if (v22 == 1)
    {
      int v29 = 0;
      LODWORD(v30) = 0;
    }
    else
    {
      unsigned int v26 = v22 - 2;
      int v27 = v22;
      while (1)
      {
        uint64_t v28 = v26;
        if (!v26) {
          break;
        }
        int v29 = *(_DWORD *)(v23 + 16 * v26 + 12);
        --v27;
        --v26;
        if (v29) {
          goto LABEL_21;
        }
      }
      int v29 = *(_DWORD *)(v23 + 12);
      int v27 = 1;
      if (!v29)
      {
        LODWORD(v30) = 0;
        goto LABEL_26;
      }
LABEL_21:
      uint64_t v30 = *(void *)(*(void *)(v23 + 16 * v28) + 8 * (v29 - 1));
      if (v27 != v24)
      {
        int v114 = ~v27 + v22;
        do
        {
          uint64_t v30 = *(void *)((v30 & 0xFFFFFFFFFFFFFFC0) + 8 * (v30 & 0x3F));
          --v114;
        }
        while (v114);
      }
      if (v30)
      {
        LOBYTE(v27) = 0;
        int v29 = (v30 & 0x3F) + 1;
        v132[0] = v29;
        v25 += v29;
        *(void *)&long long v130 = v30 & 0xFFFFFFFFFFFFFFC0;
        LODWORD(v30) = 1;
LABEL_26:
        uint64_t v31 = v23 + 16 * v24;
        int v32 = *(_DWORD *)(v31 + 8);
        v132[v30] = v32;
        int v33 = v32 + v29;
        unsigned int v34 = v30 + 1;
        *(void *)((unint64_t)&v130 | (8 * v30)) = *(void *)v31;
        char v121 = v27;
        if (v22 != 1)
        {
          unsigned int v35 = v22 - 2;
          int v36 = v22;
          while (1)
          {
            uint64_t v37 = v35;
            if (!v35) {
              break;
            }
            int v38 = *(_DWORD *)(v23 + 16 * v35 + 12);
            int v39 = *(_DWORD *)(v23 + 16 * v35 + 8) - 1;
            --v36;
            --v35;
            if (v38 != v39) {
              goto LABEL_32;
            }
          }
          int v38 = *(_DWORD *)(v23 + 12);
          int v39 = *(_DWORD *)(v23 + 8) - 1;
          int v36 = 1;
LABEL_32:
          if (v38 != v39)
          {
            uint64_t v40 = *(void *)(*(void *)(v23 + 16 * v37) + 8 * (v38 + 1));
            if (v36 != v24)
            {
              int v113 = ~v36 + v22;
              do
              {
                uint64_t v40 = *(void *)(v40 & 0xFFFFFFFFFFFFFFC0);
                --v113;
              }
              while (v113);
            }
            if (v40)
            {
              int v41 = (v40 & 0x3F) + 1;
              v132[v34] = v41;
              v33 += v41;
              *((void *)&v130 + v34) = v40 & 0xFFFFFFFFFFFFFFC0;
              unsigned int v34 = v30 | 2;
            }
          }
        }
        unsigned int v42 = v33 + 1;
        uint64_t v124 = a3;
        if (v33 + 1 <= 11 * v34)
        {
          unsigned int v43 = 0;
        }
        else
        {
          if (v34 == 1) {
            unsigned int v43 = 1;
          }
          else {
            unsigned int v43 = v34 - 1;
          }
          v132[v34] = v132[v43];
          *((void *)&v130 + v34) = *((void *)&v130 + v43);
          v132[v43] = 0;
          sub_1CC2ECAA8(*(void *)(*(void *)v5 + 144));
          *((void *)&v130 + v43) = v44;
          ++v34;
        }
        uint64_t v123 = v5;
        unint64_t v45 = 0;
        unsigned int v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = v34;
        int v49 = v34;
        do
        {
          if (v45 >= v42 % v34) {
            int v50 = v42 / v34;
          }
          else {
            int v50 = v42 / v34 + 1;
          }
          v129[v45] = v50;
          unsigned int v51 = v25 - v46;
          v46 += v50;
          if (v49 == v34 && v46 > v25)
          {
            int v49 = v45;
            unsigned int v47 = v51;
          }
          ++v45;
        }
        while (v34 != v45);
        unsigned int v120 = v47;
        int v125 = v49;
        --v129[v49];
        uint64_t v127 = v34 - 1;
        uint64_t v128 = v34;
        if (v34 != 1)
        {
          uint64_t v52 = v34 - 1;
          do
          {
            unsigned int v53 = v132[v52];
            unsigned int v54 = v129[v52];
            if (v53 != v54)
            {
              uint64_t v55 = v48;
              do
              {
                if (v55 == 1) {
                  break;
                }
                unsigned int v56 = v132[v55 - 2];
                int v57 = sub_1CCF62958(*((long long **)&v130 + v52), v53, *(void *)&v129[2 * v55], v56, v54 - v53);
                v132[v55 - 2] = v56 - v57;
                unsigned int v53 = v132[v52] + v57;
                v132[v52] = v53;
                --v55;
              }
              while (v53 < v54);
            }
            --v48;
            --v52;
          }
          while (v52);
          int v58 = 1;
          do
          {
            unsigned int v59 = v132[v52];
            unsigned int v60 = v129[v52];
            if (v59 != v60)
            {
              unsigned int v61 = v58;
              do
              {
                if (v128 == v61) {
                  break;
                }
                unsigned int v62 = v132[v61];
                int v63 = sub_1CCF62958(*((long long **)&v130 + v61), v62, *((void *)&v130 + v52), v59, v59 - v60);
                v132[v61] = v63 + v62;
                unsigned int v59 = v132[v52] - v63;
                v132[v52] = v59;
                ++v61;
              }
              while (v59 < v60);
            }
            ++v52;
            ++v58;
          }
          while (v52 != v127);
        }
        if ((v121 & 1) == 0) {
          llvm::IntervalMapImpl::Path::moveLeft(v126, v24);
        }
        uint64_t v64 = 0;
        int v65 = v125;
        uint64_t v5 = v123;
        a3 = v124;
        while (1)
        {
          uint64_t v66 = *((void *)&v130 + v64);
          int v67 = v129[v64];
          uint64_t v68 = (v67 - 1);
          uint64_t v69 = *(void *)(v66 + 16 * v68 + 8);
          if (v43 && v64 == v43)
          {
            LODWORD(v24) = v24 + sub_1CCF61E60(v123, v24, v66 & 0xFFFFFFFFFFFFFFC0 | v68, v69);
          }
          else
          {
            uint64_t v70 = *(void *)v126;
            *(_DWORD *)(*(void *)v126 + 16 * v24 + 8) = v67;
            if (v24) {
              *(void *)(*(void *)(v70 + 16 * (v24 - 1))
            }
                        + 8 * *(unsigned int *)(v70 + 16 * (v24 - 1) + 12)) = *(void *)(*(void *)(v70 + 16 * (v24 - 1)) + 8 * *(unsigned int *)(v70 + 16 * (v24 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v68;
            sub_1CCF619C4(v123, v24, v69);
          }
          if (v64 + 1 == v128) {
            break;
          }
          int v71 = 0;
          ++v64;
          uint64_t v72 = *(void *)v126;
          while (1)
          {
            int v73 = v71;
            if (v24 + v71 == 1) {
              break;
            }
            uint64_t v74 = (v24 - 1 + v71);
            int v76 = *(_DWORD *)(v72 + 16 * v74 + 8);
            int v75 = *(_DWORD *)(v72 + 16 * v74 + 12);
            --v71;
            if (v75 != v76 - 1) {
              goto LABEL_77;
            }
          }
          uint64_t v74 = 0;
          int v76 = *(_DWORD *)(v72 + 8);
          int v75 = *(_DWORD *)(v72 + 12);
LABEL_77:
          unsigned int v77 = v75 + 1;
          *(_DWORD *)(v72 + 16 * v74 + 12) = v77;
          if (v77 != v76)
          {
            uint64_t v78 = *(void *)(*(void *)(v72 + 16 * v74) + 8 * v77);
            if (v73)
            {
              do
              {
                uint64_t v80 = *(void *)v126 + 16 * (v24 + v73);
                *(void *)uint64_t v80 = v78 & 0xFFFFFFFFFFFFFFC0;
                *(_DWORD *)(v80 + 8) = (v78 & 0x3F) + 1;
                *(_DWORD *)(v80 + 12) = 0;
                uint64_t v78 = *(void *)(v78 & 0xFFFFFFFFFFFFFFC0);
                BOOL v81 = __CFADD__(v73++, 1);
              }
              while (!v81);
              uint64_t v72 = *(void *)v126;
            }
            long long v79 = (unint64_t *)(v72 + 16 * v24);
            *long long v79 = v78 & 0xFFFFFFFFFFFFFFC0;
            v79[1] = (v78 & 0x3F) + 1;
          }
          --v65;
        }
        if (v125 != v64)
        {
          do
          {
            llvm::IntervalMapImpl::Path::moveLeft(v126, v24);
            BOOL v81 = __CFADD__(v65++, 1);
          }
          while (!v81);
        }
        uint64_t v82 = *(void *)(v123 + 8);
        *(_DWORD *)(v82 + 16 * v24 + 12) = v120;
        uint64_t v83 = (_DWORD *)(v82 + 16 * *(unsigned int *)(v123 + 16));
        int v84 = *--v83;
        uint64_t v85 = *(v83 - 1);
        BOOL v20 = v84 == v85;
        uint64_t result = sub_1CCF61A14(*(void *)(v83 - 3), v83, v85, v122, v124);
        goto LABEL_88;
      }
      int v29 = 0;
    }
    LOBYTE(v27) = 1;
    goto LABEL_26;
  }
LABEL_88:
  int v86 = *(_DWORD *)(v5 + 16);
  uint64_t v87 = *(void *)(v5 + 8);
  unsigned int v88 = v86 - 1;
  *(_DWORD *)(v87 + 16 * (v86 - 1) + 8) = result;
  if (v86 != 1)
  {
    uint64_t v89 = v87 + 16 * (v86 - 2);
    *(void *)(*(void *)v89 + 8 * *(unsigned int *)(v89 + 12)) = *(void *)(*(void *)v89
                                                                                + 8 * *(unsigned int *)(v89 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v20) {
    goto LABEL_91;
  }
  return result;
}

uint64_t sub_1CCF619C4(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = 16 * a2;
    while (1)
    {
      uint64_t v5 = v4 - 16;
      if (v4 == 16) {
        break;
      }
      uint64_t v6 = v3 + v4;
      uint64_t v7 = *(void *)(v6 - 16);
      uint64_t v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      uint64_t v8 = *(unsigned int *)(v9 + 4);
      *(void *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      uint64_t v4 = v5;
      if (v8 != v7) {
        return result;
      }
    }
    *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12) + 64) = a3;
  }
  return result;
}

uint64_t sub_1CCF61A14(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  if (!v5)
  {
LABEL_9:
    if (v5 == a3)
    {
      uint64_t v9 = (void *)(a1 + 16 * a3);
      *uint64_t v9 = a4;
LABEL_19:
      v9[1] = a5;
      return (a3 + 1);
    }
    uint64_t v10 = (void *)(a1 + 16 * v5);
    if (*v10 == a5)
    {
      void *v10 = a4;
      return a3;
    }
    if (a3 != 11)
    {
      unsigned int v11 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 - 1));
        --v11;
      }
      while (v5 != v11);
      void *v10 = a4;
      uint64_t v9 = (void *)(a1 + 16 * v5);
      goto LABEL_19;
    }
    return 12;
  }
  uint64_t v6 = a1 + 16 * (v5 - 1);
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = (void *)(v6 + 8);
  if (v8 != a4)
  {
    if (v5 == 11) {
      return 12;
    }
    goto LABEL_9;
  }
  *a2 = v5 - 1;
  if (v5 == a3 || *(void *)(a1 + 16 * v5) != a5)
  {
    *uint64_t v7 = a5;
  }
  else
  {
    *uint64_t v7 = *(void *)(a1 + 16 * v5 + 8);
    if (v5 + 1 != a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v5) = *(_OWORD *)(a1 + 16 * (v5 + 1));
        LODWORD(v5) = v5 + 1;
      }
      while (a3 - 1 != v5);
    }
    return (a3 - 1);
  }
  return a3;
}

_DWORD *sub_1CCF61B08(_DWORD *result, unsigned int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  uint64_t v6 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v7 = v4 + 16 * v6;
    uint64_t v8 = *(void **)(v4 + 16 * (a2 - 1));
    int v11 = *(_DWORD *)(v7 + 8);
    uint64_t v10 = (_DWORD *)(v7 + 8);
    int v9 = v11;
    int v12 = v11 - 1;
    if (v11 == 1)
    {
      unsigned int v13 = *(void **)(v5 + 144);
      *uint64_t v8 = *v13;
      void *v13 = v8;
      uint64_t result = (_DWORD *)sub_1CCF61B08(result, a2 - 1);
    }
    else
    {
      int v17 = *(_DWORD *)(v4 + 16 * v6 + 12);
      if (v17 + 1 != v9)
      {
        unsigned int v18 = *(_DWORD *)(v4 + 16 * v6 + 12);
        do
        {
          v8[v18] = v8[v18 + 1];
          v8[v18 + 12] = v8[v18 + 13];
          ++v18;
        }
        while (v12 != v18);
      }
      _DWORD *v10 = v12;
      unsigned int v19 = a2 - 2;
      BOOL v20 = (uint64_t *)(v4 + 16 * (a2 - 2));
      uint64_t v21 = *((unsigned int *)v20 + 3);
      uint64_t v22 = *v20;
      uint64_t v23 = *(void *)(*v20 + 8 * v21);
      uint64_t v24 = (v9 - 2);
      *(void *)(v22 + 8 * v21) = v23 & 0xFFFFFFFFFFFFFFC0 | v24;
      if (v17 == v12)
      {
        uint64_t result = (_DWORD *)sub_1CCF619C4((uint64_t)result, a2 - 1, v8[v24 + 12]);
        int v25 = 0;
        uint64_t v26 = *((void *)v3 + 1);
        while (1)
        {
          int v27 = v25;
          uint64_t v28 = v19 + v25;
          if (!(v19 + v25)) {
            break;
          }
          int v30 = *(_DWORD *)(v26 + 16 * v28 + 8);
          int v29 = *(_DWORD *)(v26 + 16 * v28 + 12);
          --v25;
          if (v29 != v30 - 1) {
            goto LABEL_19;
          }
        }
        uint64_t v28 = 0;
        int v30 = *(_DWORD *)(v26 + 8);
        int v29 = *(_DWORD *)(v26 + 12);
LABEL_19:
        unsigned int v31 = v29 + 1;
        *(_DWORD *)(v26 + 16 * v28 + 12) = v31;
        if (v31 != v30)
        {
          uint64_t v32 = *(void *)(*(void *)(v26 + 16 * v28) + 8 * v31);
          if (v27)
          {
            do
            {
              uint64_t v37 = *((void *)v3 + 1) + 16 * (v6 + v27);
              *(void *)uint64_t v37 = v32 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v37 + 8) = (v32 & 0x3F) + 1;
              *(_DWORD *)(v37 + 12) = 0;
              uint64_t v32 = *(void *)(v32 & 0xFFFFFFFFFFFFFFC0);
            }
            while (!__CFADD__(v27++, 1));
            uint64_t v26 = *((void *)v3 + 1);
          }
          int v33 = (unint64_t *)(v26 + 16 * v6);
          unint64_t *v33 = v32 & 0xFFFFFFFFFFFFFFC0;
          v33[1] = (v32 & 0x3F) + 1;
        }
      }
    }
    goto LABEL_22;
  }
  unsigned int v14 = *(_DWORD *)(v4 + 12);
  int v15 = *(_DWORD *)(v5 + 140);
  if (v14 + 1 != v15)
  {
    do
    {
      *(void *)(v5 + 8 + 8 * v14) = *(void *)(v5 + 8 + 8 * (v14 + 1));
      *(void *)(v5 + 72 + 8 * v14) = *(void *)(v5 + 72 + 8 * (v14 + 1));
      ++v14;
    }
    while (v15 - 1 != v14);
  }
  int v16 = v15 - 1;
  *(_DWORD *)(v5 + 140) = v16;
  *(_DWORD *)(v4 + 8) = v16;
  if (v16)
  {
LABEL_22:
    if (v3[4])
    {
      uint64_t v34 = *((void *)v3 + 1);
      if (*(_DWORD *)(v34 + 12) < *(_DWORD *)(v34 + 8))
      {
        uint64_t v35 = *(void *)(*(void *)(v34 + 16 * v6)
                        + 8 * *(unsigned int *)(v34 + 16 * v6 + 12));
        uint64_t v36 = v34 + 16 * a2;
        *(void *)uint64_t v36 = v35 & 0xFFFFFFFFFFFFFFC0;
        *(_DWORD *)(v36 + 8) = (v35 & 0x3F) + 1;
        *(_DWORD *)(*((void *)v3 + 1) + 16 * a2 + 12) = 0;
      }
    }
    return result;
  }
  *(_OWORD *)(v5 + 124) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;

  return sub_1CCF61D7C(result, 0);
}

_DWORD *sub_1CCF61D7C(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = result + 2;
  uint64_t v3 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 136))
  {
    uint64_t v4 = v3 + 8;
    uint64_t v5 = *(unsigned int *)(v3 + 140);
    result[4] = 0;
    uint64_t v6 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v5 | (a2 << 32);
    uint64_t v8 = (void *)*v2;
    *(void *)void *v2 = v4;
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 140);
    result[4] = 0;
    uint64_t v6 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v9 | (a2 << 32);
    uint64_t v8 = (void *)*v2;
    *(void *)void *v2 = v3;
  }
  v8[1] = v7;
  ++*v6;
  return result;
}

BOOL sub_1CCF61E60(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  int v6 = a2;
  uint64_t v7 = a1;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (llvm::IntervalMapImpl::Path *)(a1 + 8);
  uint64_t v8 = *(void *)a1;
  BOOL v10 = a2 == 1;
  if (a2 == 1)
  {
    unsigned int v11 = *(_DWORD *)(v8 + 140);
    if (v11 <= 7)
    {
      uint64_t v12 = v8 + 8;
      uint64_t v13 = *(void *)v9;
      uint64_t v14 = *(unsigned int *)(*(void *)v9 + 12);
      if (v11 != v14)
      {
        unsigned int v15 = *(_DWORD *)(v8 + 140);
        do
        {
          *(void *)(v12 + 8 * v15) = *(void *)(v12 + 8 * (v15 - 1));
          *(void *)(v8 + 72 + 8 * v15) = *(void *)(v8 + 72 + 8 * (v15 - 1));
          --v15;
        }
        while (v14 != v15);
      }
      BOOL v10 = 0;
      int v16 = (void *)(v12 + 8 * v14);
      void *v16 = a3;
      v16[8] = a4;
      *(_DWORD *)(v8 + 140) = v11 + 1;
      *(_DWORD *)(v13 + 8) = v11 + 1;
      uint64_t v17 = *(void *)(*(void *)v13 + 8 * v14);
      *(void *)(v13 + 16) = v17 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v13 + 24) = (v17 & 0x3F) + 1;
      return v10;
    }
    BOOL v136 = a2 == 1;
    BOOL v20 = (llvm::IntervalMapImpl::Path *)(a1 + 8);
    uint64_t v21 = *(unsigned int *)(*(void *)v9 + 12);
    uint64_t v22 = v11 - 1;
    uint64_t v23 = *(void *)(v8 + 144);
    unint64_t v24 = *(void *)v23;
    if (*(void *)v23)
    {
      *(void *)uint64_t v23 = *(void *)v24;
    }
    else
    {
      *(void *)(v23 + 88) += 192;
      uint64_t v25 = *(void *)(v23 + 8);
      if (((v25 + 63) & 0xFFFFFFFFFFFFFFC0) - v25 + 192 > *(void *)(v23 + 16) - v25)
      {
        unsigned int v118 = *(_DWORD *)(v23 + 32) >> 7;
        if (v118 >= 0x1E) {
          LOBYTE(v118) = 30;
        }
        uint64_t v119 = 4096 << v118;
        unsigned int v120 = (char *)operator new(4096 << v118, (std::align_val_t)8uLL);
        unsigned int v121 = *(_DWORD *)(v23 + 32);
        if (v121 >= *(_DWORD *)(v23 + 36)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v23 + 24) + 8 * v121) = v120;
        ++*(_DWORD *)(v23 + 32);
        unint64_t v24 = (unint64_t)(v120 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v23 + 8) = v24 + 192;
        *(void *)(v23 + 16) = &v120[v119];
      }
      else
      {
        unint64_t v24 = (v25 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v23 + 8) = v24 + 192;
      }
    }
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    uint64_t v26 = (uint64_t *)(v8 + 72);
    int v27 = (void *)v24;
    *(_OWORD *)unint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    uint64_t v5 = a3;
    do
    {
      void *v27 = *(v26 - 8);
      uint64_t v28 = *v26++;
      v27[12] = v28;
      ++v27;
      --v11;
    }
    while (v11);
    unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFC0 | v22;
    *(void *)(v8 + 72) = *(void *)((v29 & 0xFFFFFFFFFFFFFFC0) + 8 * v22 + 0x60);
    *(void *)(v8 + 8) = v29;
    ++*(_DWORD *)(v8 + 136);
    *(_DWORD *)(v8 + 140) = 1;
    uint64_t v7 = a1;
    int v30 = *(void **)(a1 + 8);
    *int v30 = v8 + 8;
    v30[1] = 1;
    uint64_t v31 = *(void *)(a1 + 8);
    unint64_t v32 = *(void *)(*(void *)v31 + 8 * *(unsigned int *)(v31 + 12)) & 0xFFFFFFFFFFFFFFC0;
    uint64_t v33 = (*(void *)(*(void *)v31 + 8 * *(unsigned int *)(v31 + 12)) & 0x3FLL | (v21 << 32)) + 1;
    uint64_t v34 = *(unsigned int *)(a1 + 16);
    unsigned int v35 = *(_DWORD *)(a1 + 20);
    if (v34 == 1)
    {
      uint64_t v9 = v20;
      if (v35 <= 1) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v31 + 16) = v32;
      *(void *)(v31 + 24) = v33;
      ++*(_DWORD *)(a1 + 16);
    }
    else
    {
      uint64_t v9 = v20;
      if (v34 >= v35) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(v31 + 16 * v34) = *(_OWORD *)(v31 + 16 * v34 - 16);
      uint64_t v114 = *(unsigned int *)(a1 + 16);
      uint64_t v115 = *(void *)(a1 + 8) + 16 * v114 - 16;
      if (v115 != v31 + 16)
      {
        memmove((void *)(v31 + 32), (const void *)(v31 + 16), v115 - (v31 + 16));
        LODWORD(v114) = *(_DWORD *)(a1 + 16);
      }
      *(_DWORD *)(a1 + 16) = v114 + 1;
      *(void *)(v31 + 16) = v32;
      *(void *)(v31 + 24) = v33;
    }
    int v6 = 2;
    BOOL v10 = v136;
    uint64_t v4 = a4;
  }
  uint64_t v36 = (v6 - 1);
  if (!*(_DWORD *)(v7 + 16)
    || (uint64_t v37 = *(void *)v9, *(_DWORD *)(*(void *)v9 + 12) >= *(_DWORD *)(*(void *)v9 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    uint64_t v37 = *(void *)v9;
    ++*(_DWORD *)(*(void *)v9 + 16 * v36 + 12);
  }
  uint64_t v38 = v37 + 16 * v36;
  unsigned int v39 = *(_DWORD *)(v38 + 8);
  if (v39 == 12)
  {
    long long v139 = 0u;
    long long v140 = 0u;
    unsigned int v40 = *(_DWORD *)(v38 + 12);
    unsigned int v41 = v6 - 2;
    unsigned int v42 = v6 - 2;
    int v43 = v6;
    uint64_t v130 = v5;
    while (1)
    {
      uint64_t v44 = v42;
      if (!v42) {
        break;
      }
      int v45 = *(_DWORD *)(v37 + 16 * v42 + 12);
      --v43;
      --v42;
      if (v45) {
        goto LABEL_27;
      }
    }
    int v45 = *(_DWORD *)(v37 + 12);
    int v43 = 1;
    if (!v45)
    {
      LODWORD(v46) = 0;
      goto LABEL_31;
    }
LABEL_27:
    uint64_t v46 = *(void *)(*(void *)(v37 + 16 * v44) + 8 * (v45 - 1));
    if (v43 != v36)
    {
      int v117 = ~v43 + v6;
      do
      {
        uint64_t v46 = *(void *)((v46 & 0xFFFFFFFFFFFFFFC0) + 8 * (v46 & 0x3F));
        --v117;
      }
      while (v117);
    }
    if (v46)
    {
      LOBYTE(v43) = 0;
      int v45 = (v46 & 0x3F) + 1;
      v141[0] = v45;
      v40 += v45;
      *(void *)&long long v139 = v46 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v46) = 1;
    }
    else
    {
      int v45 = 0;
      LOBYTE(v43) = 1;
    }
LABEL_31:
    v141[v46] = 12;
    unsigned int v47 = v45 + 12;
    unsigned int v48 = v46 + 1;
    *(void *)((unint64_t)&v139 | (8 * v46)) = *(void *)(v37 + 16 * v36);
    int v49 = v6;
    while (1)
    {
      uint64_t v50 = v41;
      if (!v41) {
        break;
      }
      int v51 = *(_DWORD *)(v37 + 16 * v41 + 12);
      int v52 = *(_DWORD *)(v37 + 16 * v41 + 8) - 1;
      --v49;
      --v41;
      if (v51 != v52) {
        goto LABEL_36;
      }
    }
    int v51 = *(_DWORD *)(v37 + 12);
    int v52 = *(_DWORD *)(v37 + 8) - 1;
    int v49 = 1;
LABEL_36:
    uint64_t v134 = v4;
    if (v51 != v52)
    {
      uint64_t v53 = *(void *)(*(void *)(v37 + 16 * v50) + 8 * (v51 + 1));
      if (v49 != v36)
      {
        int v116 = ~v49 + v6;
        do
        {
          uint64_t v53 = *(void *)(v53 & 0xFFFFFFFFFFFFFFC0);
          --v116;
        }
        while (v116);
      }
      if (v53)
      {
        int v54 = (v53 & 0x3F) + 1;
        v141[v48] = v54;
        v47 += v54;
        *((void *)&v139 + v48) = v53 & 0xFFFFFFFFFFFFFFC0;
        unsigned int v48 = v46 | 2;
      }
    }
    unsigned int v55 = v47 + 1;
    *(void *)v135 = (v6 - 1);
    char v128 = v43;
    if (v47 >= 12 * v48)
    {
      if (v48 == 1) {
        uint64_t v56 = 1;
      }
      else {
        uint64_t v56 = v48 - 1;
      }
      v141[v48] = v141[v56];
      *((void *)&v139 + v48) = *((void *)&v139 + v56);
      uint64_t v137 = v56;
      v141[v56] = 0;
      uint64_t v57 = *(void *)(*(void *)v7 + 144);
      unint64_t v58 = *(void *)v57;
      if (*(void *)v57)
      {
        *(void *)uint64_t v57 = *(void *)v58;
      }
      else
      {
        *(void *)(v57 + 88) += 192;
        uint64_t v59 = *(void *)(v57 + 8);
        if (((v59 + 63) & 0xFFFFFFFFFFFFFFC0) - v59 + 192 > *(void *)(v57 + 16) - v59)
        {
          uint64_t v122 = v9;
          unsigned int v123 = *(_DWORD *)(v57 + 32) >> 7;
          if (v123 >= 0x1E) {
            LOBYTE(v123) = 30;
          }
          uint64_t v124 = 4096 << v123;
          int v125 = (char *)operator new(4096 << v123, (std::align_val_t)8uLL);
          unsigned int v126 = *(_DWORD *)(v57 + 32);
          if (v126 >= *(_DWORD *)(v57 + 36)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v57 + 24) + 8 * v126) = v125;
          ++*(_DWORD *)(v57 + 32);
          unint64_t v58 = (unint64_t)(v125 + 63) & 0xFFFFFFFFFFFFFFC0;
          *(void *)(v57 + 8) = v58 + 192;
          *(void *)(v57 + 16) = &v125[v124];
          uint64_t v9 = v122;
        }
        else
        {
          unint64_t v58 = (v59 + 63) & 0xFFFFFFFFFFFFFFC0;
          *(void *)(v57 + 8) = v58 + 192;
        }
      }
      *(_OWORD *)(v58 + 160) = 0u;
      *(_OWORD *)(v58 + 176) = 0u;
      *(_OWORD *)(v58 + 128) = 0u;
      *(_OWORD *)(v58 + 144) = 0u;
      *(_OWORD *)(v58 + 96) = 0u;
      *(_OWORD *)(v58 + 112) = 0u;
      *(_OWORD *)(v58 + 64) = 0u;
      *(_OWORD *)(v58 + 80) = 0u;
      *(_OWORD *)(v58 + 32) = 0u;
      *(_OWORD *)(v58 + 48) = 0u;
      ++v48;
      *(_OWORD *)unint64_t v58 = 0u;
      *(_OWORD *)(v58 + 16) = 0u;
      *((void *)&v139 + v137) = v58;
    }
    else
    {
      LODWORD(v137) = 0;
    }
    v129 = v9;
    size_t __sz = v7;
    unint64_t v60 = 0;
    unsigned int v61 = 0;
    unsigned int v62 = 0;
    uint64_t v63 = v48;
    int v64 = v48;
    do
    {
      if (v60 >= v55 % v48) {
        int v65 = v55 / v48;
      }
      else {
        int v65 = v55 / v48 + 1;
      }
      v138[v60] = v65;
      unsigned int v66 = v40 - v61;
      v61 += v65;
      if (v64 == v48 && v61 > v40)
      {
        int v64 = v60;
        unsigned int v62 = v66;
      }
      ++v60;
    }
    while (v48 != v60);
    unsigned int v127 = v62;
    int v132 = v64;
    --v138[v64];
    if (v48 != 1)
    {
      uint64_t v67 = v48 - 1;
      uint64_t v68 = v48;
      do
      {
        unsigned int v69 = v141[v67];
        unsigned int v70 = v138[v67];
        if (v69 != v70)
        {
          uint64_t v71 = v68;
          do
          {
            if (v71 == 1) {
              break;
            }
            unsigned int v72 = v141[v71 - 2];
            int v73 = sub_1CD590794(*((void **)&v139 + v67), v69, *(void *)&v138[2 * v71], v72, v70 - v69);
            v141[v71 - 2] = v72 - v73;
            unsigned int v69 = v141[v67] + v73;
            v141[v67] = v69;
            --v71;
          }
          while (v69 < v70);
        }
        --v68;
        --v67;
      }
      while (v67);
      uint64_t v74 = 0;
      int v75 = 1;
      do
      {
        unsigned int v76 = v141[v74];
        unsigned int v77 = v138[v74];
        if (v76 != v77)
        {
          unsigned int v78 = v75;
          do
          {
            if (v48 == v78) {
              break;
            }
            unsigned int v79 = v141[v78];
            int v80 = sub_1CD590794(*((void **)&v139 + v78), v79, *((void *)&v139 + v74), v76, v76 - v77);
            v141[v78] = v80 + v79;
            unsigned int v76 = v141[v74] - v80;
            v141[v74] = v76;
            ++v78;
          }
          while (v76 < v77);
        }
        ++v74;
        ++v75;
      }
      while (v74 != v48 - 1);
    }
    if ((v128 & 1) == 0) {
      llvm::IntervalMapImpl::Path::moveLeft(v129, v135[0]);
    }
    uint64_t v81 = 0;
    BOOL v10 = 0;
    int v82 = v132;
    uint64_t v83 = *(void *)v135;
    uint64_t v7 = __sz;
    while (1)
    {
      uint64_t v84 = *((void *)&v139 + v81);
      int v85 = v138[v81];
      uint64_t v86 = (v85 - 1);
      uint64_t v87 = *(void *)(v84 + 8 * v86 + 96);
      if (v137 && v81 == v137)
      {
        int v88 = sub_1CCF61E60(__sz, v83, v84 & 0xFFFFFFFFFFFFFFC0 | v86, v87);
        BOOL v10 = v88;
        LODWORD(v83) = v83 + v88;
      }
      else
      {
        uint64_t v89 = *(void *)v129;
        *(_DWORD *)(*(void *)v129 + 16 * v83 + 8) = v85;
        if (v83) {
          *(void *)(*(void *)(v89 + 16 * (v83 - 1))
        }
                    + 8 * *(unsigned int *)(v89 + 16 * (v83 - 1) + 12)) = *(void *)(*(void *)(v89 + 16 * (v83 - 1)) + 8 * *(unsigned int *)(v89 + 16 * (v83 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v86;
        sub_1CCF619C4(__sz, v83, v87);
      }
      uint64_t v83 = v83;
      if (v81 + 1 == v63) {
        break;
      }
      int v90 = 0;
      uint64_t v91 = 0;
      ++v81;
      uint64_t v92 = *(void *)v129;
      unint64_t v93 = (int *)(*(void *)v129 + 16 * (v83 - 1) + 12);
      while (1)
      {
        uint64_t v94 = v91;
        int v95 = v90;
        if (v83 + v91 == 1) {
          break;
        }
        int v96 = *(v93 - 1);
        int v97 = *v93;
        --v91;
        v93 -= 4;
        --v90;
        if (v97 != v96 - 1)
        {
          uint64_t v98 = (v83 - 1) + v94;
          goto LABEL_88;
        }
      }
      uint64_t v98 = 0;
      int v96 = *(_DWORD *)(v92 + 8);
      int v97 = *(_DWORD *)(v92 + 12);
LABEL_88:
      unsigned int v99 = v97 + 1;
      *(_DWORD *)(v92 + 16 * v98 + 12) = v99;
      if (v99 != v96)
      {
        uint64_t v100 = *(void *)(*(void *)(v92 + 16 * v98) + 8 * v99);
        if (v94)
        {
          do
          {
            uint64_t v102 = *(void *)v129 + 16 * (v83 + v95);
            *(void *)uint64_t v102 = v100 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v102 + 8) = (v100 & 0x3F) + 1;
            *(_DWORD *)(v102 + 12) = 0;
            uint64_t v100 = *(void *)(v100 & 0xFFFFFFFFFFFFFFC0);
            BOOL v103 = __CFADD__(v95++, 1);
          }
          while (!v103);
          uint64_t v92 = *(void *)v129;
        }
        unsigned int v101 = (unint64_t *)(v92 + 16 * v83);
        *unsigned int v101 = v100 & 0xFFFFFFFFFFFFFFC0;
        v101[1] = (v100 & 0x3F) + 1;
      }
      --v82;
    }
    if (v132 != v81)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v129, v83);
        BOOL v103 = __CFADD__(v82++, 1);
      }
      while (!v103);
    }
    uint64_t v37 = *(void *)v129;
    *(_DWORD *)(*(void *)v129 + 16 * v83 + 12) = v127;
    uint64_t v4 = v134;
    uint64_t v36 = v135[0] + v10;
    unsigned int v39 = *(_DWORD *)(v37 + 16 * v36 + 8);
    uint64_t v5 = v130;
  }
  uint64_t v104 = (uint64_t *)(v37 + 16 * v36);
  uint64_t v105 = *v104;
  uint64_t v106 = *((unsigned int *)v104 + 3);
  uint64_t v107 = v104 + 1;
  if (v39 != v106)
  {
    unsigned int v108 = v39;
    do
    {
      *(void *)(v105 + 8 * v108) = *(void *)(v105 + 8 * (v108 - 1));
      *(void *)(v105 + 96 + 8 * v108) = *(void *)(v105 + 96 + 8 * (v108 - 1));
      --v108;
    }
    while (v106 != v108);
  }
  int v109 = (void *)(v105 + 8 * v106);
  *int v109 = v5;
  v109[12] = v4;
  *uint64_t v107 = v39 + 1;
  if (v36)
  {
    uint64_t v110 = v37 + 16 * (v36 - 1);
    *(void *)(*(void *)v110 + 8 * *(unsigned int *)(v110 + 12)) = *(void *)(*(void *)v110
                                                                                  + 8 * *(unsigned int *)(v110 + 12)) & 0xFFFFFFFFFFFFFFC0 | v39;
  }
  if (v39 == v106)
  {
    sub_1CCF619C4(v7, v36, v4);
    uint64_t v37 = *(void *)(v7 + 8);
    uint64_t v105 = *(void *)(v37 + 16 * v36);
  }
  uint64_t v111 = *(void *)(v105 + 8 * *(unsigned int *)(v37 + 16 * v36 + 12));
  uint64_t v112 = v37 + 16 * (v36 + 1);
  *(void *)uint64_t v112 = v111 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v112 + 8) = (v111 & 0x3F) + 1;
  return v10;
}

uint64_t sub_1CCF62958(long long *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a5 < 1)
  {
    unsigned int v11 = 11 - a4;
    if (-a5 < a2) {
      LODWORD(v12) = -a5;
    }
    else {
      LODWORD(v12) = a2;
    }
    if (v11 >= v12) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = a1;
      uint64_t v14 = v12;
      do
      {
        long long v15 = *v13++;
        *(_OWORD *)(a3 + 16 * a4++) = v15;
        --v14;
      }
      while (v14);
    }
    if (v12 != a2)
    {
      int v16 = a1;
      int v17 = v12;
      do
        *v16++ = a1[v17++];
      while (a2 != v17);
    }
    return -(int)v12;
  }
  else
  {
    LODWORD(v5) = 11 - a2;
    if (a4 >= a5) {
      unsigned int v6 = a5;
    }
    else {
      unsigned int v6 = a4;
    }
    if (v5 >= v6) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = v5;
    }
    if (a2)
    {
      uint64_t v7 = &a1[a2 - 1];
      do
      {
        long long v8 = *v7--;
        a1[v5 - 1 + a2--] = v8;
      }
      while (a2);
    }
    if (v5)
    {
      int v9 = -(int)v5;
      do
        *a1++ = *(_OWORD *)(a3 + 16 * (a4 + v9));
      while (!__CFADD__(v9++, 1));
    }
  }
  return v5;
}

uint64_t sub_1CCF62A28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 + 32);
  if (-858993459 * ((unint64_t)(a2 - v3) >> 3)) {
    return result;
  }
  if (*(_WORD *)(v2 + 24) != 254) {
    return result;
  }
  uint64_t v35 = 0;
  *(void *)&v36[0] = 0;
  DWORD2(v36[0]) = 0;
  if ((*(_WORD *)(*(void *)(v2 + 96) + 36) & 0xF00) != 0) {
    return result;
  }
  if ((*(unsigned char *)(v2 + 26) & 8) != 0) {
    return result;
  }
  int v4 = *(unsigned __int16 *)(v2 + 26);
  if ((v4 & 0x380) != 0) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)result;
  if (((v4 ^ *(unsigned __int8 *)(***(void ***)result + 26)) & 0x10) != 0) {
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 40);
  if (*(_WORD *)(v7 + 24) == 216)
  {
    do
    {
      long long v8 = *(unsigned int **)(v7 + 32);
      uint64_t v7 = *(void *)v8;
    }
    while (*(_WORD *)(*(void *)v8 + 24) == 216);
    uint64_t v9 = v8[2];
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 48);
  }
  BOOL v10 = *(uint64_t **)(v6 + 24);
  uint64_t result = *(void *)(v6 + 8);
  int v11 = *(unsigned __int8 *)result;
  if (!*(unsigned char *)result)
  {
    uint64_t v17 = *(void *)(result + 8);
    if ((*(_DWORD *)(v17 + 8) & 0xFE) == 0x12) {
      int v18 = *(unsigned __int8 *)(**(void **)(v17 + 16) + 8);
    }
    else {
      int v18 = *(_DWORD *)(v17 + 8);
    }
    if (v18 != 13) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t result = sub_1CD787FF0((llvm::EVT *)result, *(void *)(v2 + 80), *(void *)(v2 + 88));
    char v14 = result ^ 1;
    goto LABEL_26;
  }
  BOOL v12 = (v11 - 120) >= 0x20 && (v11 - 2) >= 6;
  if (!v12 || (v11 - 15) < 0x3C) {
    goto LABEL_36;
  }
LABEL_18:
  if (*(unsigned __int8 *)(v2 + 80) == *(unsigned __int8 *)result)
  {
    if (*(unsigned char *)(v2 + 80)) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = *(void *)(v2 + 88) == *(void *)(result + 8);
    }
    char v14 = !v13;
  }
  else
  {
    char v14 = 1;
  }
LABEL_26:
  int v15 = **(_DWORD **)(v6 + 16);
  if (v15 == 1)
  {
    if (v14) {
      return result;
    }
    unsigned int v19 = *(unsigned __int16 *)(v7 + 24);
    BOOL v20 = v19 > 0x24;
    uint64_t v21 = (1 << v19) & 0x1800001800;
    if (v20 || v21 == 0) {
      return result;
    }
    goto LABEL_42;
  }
  if (v15 == 2)
  {
    if ((*(_WORD *)(v2 + 26) & 0x400) != 0) {
      return result;
    }
    uint64_t result = sub_1CD787FF0(*(llvm::EVT **)(v6 + 8), *(void *)(*(void *)(v7 + 40) + 16 * v9), *(void *)(*(void *)(v7 + 40) + 16 * v9 + 8));
    if (!result) {
      return result;
    }
    int v16 = *(unsigned __int16 *)(v7 + 24);
    if (v16 != 148 && v16 != 151) {
      return result;
    }
    goto LABEL_42;
  }
  if ((v14 & 1) == 0)
  {
    if (v7)
    {
      if (*(_WORD *)(v7 + 24) == 253)
      {
        uint64_t result = sub_1CCFE3E9C(v7, *v10, (uint64_t)v38);
        unint64_t v29 = *(unsigned __int8 **)(v6 + 32);
        if (*v29 == *(unsigned __int8 *)(v7 + 80) && (*v29 || *((void *)v29 + 1) == *(void *)(v7 + 88)))
        {
          uint64_t v30 = *(void *)(v7 + 48);
          if (v30)
          {
            int v31 = 1;
            do
            {
              if (!*(_DWORD *)(v30 + 8))
              {
                if (!v31) {
                  return result;
                }
                --v31;
              }
              uint64_t v30 = *(void *)(v30 + 32);
            }
            while (v30);
            if (!v31 && (*(_WORD *)(*(void *)(v7 + 96) + 36) & 0xF00) == 0 && (*(unsigned char *)(v7 + 26) & 8) == 0)
            {
              int v32 = *(unsigned __int16 *)(v7 + 26);
              if ((v32 & 0x380) == 0 && ((v32 ^ *(unsigned __int8 *)(**(void **)(v6 + 40) + 26)) & 0x10) == 0)
              {
                uint64_t v33 = *(uint64_t **)(v6 + 48);
                uint64_t v34 = *v10;
                uint64_t v40 = 0;
                uint64_t result = sub_1CCFE3CB0(v33, (uint64_t *)v38, v34, &v40);
                if (result)
                {
LABEL_42:
                  sub_1CCFE3E9C(v2, *v10, (uint64_t)v38);
                  v36[0] = v38[0];
                  v36[1] = v38[1];
                  v36[2] = v38[2];
                  char v37 = v39;
                  uint64_t result = sub_1CCFE3CB0(*(uint64_t **)(v6 + 56), (uint64_t *)v36, *v10, &v35);
                  if (result)
                  {
                    uint64_t v23 = **(void **)(v5 + 16);
                    uint64_t v24 = **(void **)(v5 + 8);
                    *(void *)&v38[0] = 0;
                    uint64_t result = sub_1CD45B528(*(void *)(v24 + 1416), *(_DWORD *)(v24 + 1432), v2, v38);
                    if (!result
                      || *(void *)&v38[0] == *(void *)(v24 + 1416) + 24 * *(unsigned int *)(v24 + 1432)
                      || *(void *)(*(void *)&v38[0] + 8) != v23
                      || *(_DWORD *)(*(void *)&v38[0] + 16) <= dword_1EBCF9128)
                    {
                      uint64_t v25 = *(void *)(v5 + 24);
                      uint64_t v26 = v35;
                      unsigned int v27 = *(_DWORD *)(v25 + 8);
                      if (v27 >= *(_DWORD *)(v25 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v28 = (uint64_t *)(*(void *)v25 + 16 * v27);
                      *uint64_t v28 = v2;
                      v28[1] = v26;
                      ++*(_DWORD *)(v25 + 8);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1CCF62DD0(unint64_t a1, void *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(a2 - 1) < *(void *)(v10 + 8))
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *((_OWORD *)a2 - 1);
                  *((_OWORD *)a2 - 1) = v86;
                }
                break;
              case 3:
                sub_1CCF63538((long long *)v10, (long long *)(v10 + 16), (long long *)a2 - 1);
                break;
              case 4:
                sub_1CCF63808(v10, v10 + 16, v10 + 32, (uint64_t)(a2 - 2));
                break;
              case 5:
                uint64_t v38 = (long long *)(v10 + 16);
                char v39 = (long long *)(v10 + 32);
                uint64_t v40 = (long long *)(v10 + 48);
                sub_1CCF63808(v10, v10 + 16, v10 + 32, v10 + 48);
                if (*(a2 - 1) < *(void *)(v10 + 56))
                {
                  long long v41 = *v40;
                  *uint64_t v40 = *((_OWORD *)a2 - 1);
                  *((_OWORD *)a2 - 1) = v41;
                  if (*(void *)(v10 + 56) < *(void *)(v10 + 40))
                  {
                    long long v42 = *v39;
                    long long *v39 = *v40;
                    *uint64_t v40 = v42;
                    if (*(void *)(v10 + 40) < *(void *)(v10 + 24))
                    {
                      long long v43 = *v38;
                      *uint64_t v38 = *v39;
                      long long *v39 = v43;
                      if (*(void *)(v10 + 24) < *(void *)(v10 + 8))
                      {
                        long long v87 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v38;
                        *uint64_t v38 = v87;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v44 = (void *)(v10 + 16);
            BOOL v46 = (void *)v10 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                unsigned int v48 = (void *)v10;
                do
                {
                  int v49 = v44;
                  uint64_t v50 = v48[3];
                  if (v50 < v48[1])
                  {
                    uint64_t v51 = v48[2];
                    uint64_t v52 = v47;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v52 + 16) = *(_OWORD *)(v10 + v52);
                      if (!v52) {
                        break;
                      }
                      uint64_t v53 = *(void *)(v10 + v52 - 8);
                      v52 -= 16;
                      if (v50 >= v53)
                      {
                        int v54 = (void *)(v10 + v52 + 16);
                        goto LABEL_83;
                      }
                    }
                    int v54 = (void *)v10;
LABEL_83:
                    *int v54 = v51;
                    v54[1] = v50;
                  }
                  uint64_t v44 = v49 + 2;
                  v47 += 16;
                  unsigned int v48 = v49;
                }
                while (v49 + 2 != a2);
              }
            }
            else if (!v46)
            {
              do
              {
                unint64_t v78 = (unint64_t)v44;
                uint64_t v79 = *(void *)(a1 + 24);
                if (v79 < *(void *)(a1 + 8))
                {
                  uint64_t v80 = *(void *)(a1 + 16);
                  unint64_t v81 = v78;
                  do
                  {
                    *(_OWORD *)unint64_t v81 = *(_OWORD *)(v81 - 16);
                    uint64_t v82 = *(void *)(v81 - 24);
                    v81 -= 16;
                  }
                  while (v79 < v82);
                  *(void *)unint64_t v81 = v80;
                  *(void *)(v81 + 8) = v79;
                }
                uint64_t v44 = (void *)(v78 + 16);
                a1 = v78;
              }
              while ((void *)(v78 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void *)v10 != a2)
            {
              int64_t v55 = (unint64_t)(v12 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  uint64_t v59 = (uint64_t *)(v10 + 16 * v58);
                  if (2 * v57 + 2 < v12)
                  {
                    BOOL v60 = v59[1] < v59[3];
                    v59 += 2 * v60;
                    if (v60) {
                      uint64_t v58 = 2 * v57 + 2;
                    }
                  }
                  unsigned int v61 = (uint64_t *)(v10 + 16 * v57);
                  uint64_t v62 = v61[1];
                  if (v59[1] >= v62)
                  {
                    uint64_t v63 = *v61;
                    do
                    {
                      int v64 = v59;
                      *(_OWORD *)unsigned int v61 = *(_OWORD *)v59;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v65 = (2 * v58) | 1;
                      uint64_t v59 = (uint64_t *)(v10 + 16 * v65);
                      uint64_t v66 = 2 * v58 + 2;
                      if (v66 < v12)
                      {
                        BOOL v60 = v59[1] < v59[3];
                        v59 += 2 * v60;
                        if (v60) {
                          uint64_t v65 = v66;
                        }
                      }
                      unsigned int v61 = v64;
                      uint64_t v58 = v65;
                    }
                    while (v59[1] >= v62);
                    uint64_t *v64 = v63;
                    v64[1] = v62;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v12)
                  {
                    BOOL v60 = *(void *)(v69 + 8) < *(void *)(v69 + 24);
                    v69 += 16 * v60;
                    if (v60) {
                      uint64_t v70 = v71;
                    }
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 2;
                if ((void *)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (void *)(v10 + 16 * v73);
                    uint64_t v75 = *(void *)(v69 + 8);
                    if (v74[1] < v75)
                    {
                      uint64_t v76 = *(void *)v69;
                      do
                      {
                        unsigned int v77 = v74;
                        *(_OWORD *)uint64_t v69 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (void *)(v10 + 16 * v73);
                        uint64_t v69 = (uint64_t)v77;
                      }
                      while (v74[1] < v75);
                      void *v77 = v76;
                      v77[1] = v75;
                    }
                  }
                }
                BOOL v60 = v12-- <= 2;
              }
              while (!v60);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          char v14 = (long long *)(v10 + 16 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CCF63538((long long *)a1, (long long *)(a1 + 16 * ((unint64_t)v12 >> 1)), (long long *)a2 - 1);
            sub_1CCF63538((long long *)(a1 + 16), v14 - 1, (long long *)a2 - 2);
            sub_1CCF63538((long long *)(a1 + 32), (long long *)(a1 + 16 + 16 * v13), (long long *)a2 - 3);
            sub_1CCF63538(v14 - 1, v14, (long long *)(a1 + 16 + 16 * v13));
            long long v83 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            *char v14 = v83;
          }
          else
          {
            sub_1CCF63538((long long *)(a1 + 16 * ((unint64_t)v12 >> 1)), (long long *)a1, (long long *)a2 - 1);
          }
          --a3;
          uint64_t v15 = *(void *)a1;
          if (a4) {
            break;
          }
          uint64_t v16 = *(void *)(a1 + 8);
          if (*(void *)(a1 - 8) < v16) {
            goto LABEL_12;
          }
          if (v16 >= *(a2 - 1))
          {
            unint64_t v31 = a1 + 16;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= (unint64_t)a2) {
                break;
              }
              uint64_t v32 = *(void *)(v31 + 8);
              v31 += 16;
            }
            while (v16 >= v32);
          }
          else
          {
            unint64_t v29 = a1;
            do
            {
              unint64_t v10 = v29 + 16;
              uint64_t v30 = *(void *)(v29 + 24);
              v29 += 16;
            }
            while (v16 >= v30);
          }
          uint64_t v33 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v34 = a2;
            do
            {
              uint64_t v33 = (long long *)(v34 - 2);
              uint64_t v35 = *(v34 - 1);
              v34 -= 2;
            }
            while (v16 < v35);
          }
          while (v10 < (unint64_t)v33)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v33;
            long long *v33 = v85;
            do
            {
              uint64_t v36 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v16 >= v36);
            do
              uint64_t v37 = *((void *)v33-- - 1);
            while (v16 < v37);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v16;
        }
        uint64_t v16 = *(void *)(a1 + 8);
LABEL_12:
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(a1 + v17 + 24);
          v17 += 16;
        }
        while (v18 < v16);
        unint64_t v19 = a1 + v17;
        BOOL v20 = a2;
        if (v17 == 16)
        {
          uint64_t v23 = (long long *)a2;
          while (v19 < (unint64_t)v23)
          {
            uint64_t v21 = v23 - 1;
            uint64_t v24 = *((void *)v23-- - 1);
            if (v24 < v16) {
              goto LABEL_22;
            }
          }
          uint64_t v21 = v23;
        }
        else
        {
          do
          {
            uint64_t v21 = (long long *)(v20 - 2);
            uint64_t v22 = *(v20 - 1);
            v20 -= 2;
          }
          while (v22 >= v16);
        }
LABEL_22:
        unint64_t v10 = v19;
        if (v19 < (unint64_t)v21)
        {
          uint64_t v25 = v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v25;
            *uint64_t v25 = v84;
            do
            {
              uint64_t v26 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v26 < v16);
            do
              uint64_t v27 = *((void *)v25-- - 1);
            while (v27 >= v16);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v16;
        if (v19 >= (unint64_t)v21) {
          break;
        }
LABEL_33:
        sub_1CCF62DD0(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = sub_1CCF635DC(a1, (void *)(v10 - 16));
      if (sub_1CCF635DC(v10, a2)) {
        break;
      }
      if (!v28) {
        goto LABEL_33;
      }
    }
    a2 = (void *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

long long *sub_1CCF63538(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)a3 + 1);
  if (v3 >= *((void *)result + 1))
  {
    if (v4 < v3)
    {
      long long v6 = *a2;
      *a2 = *a3;
      *a3 = v6;
      if (*((void *)a2 + 1) < *((void *)result + 1))
      {
        long long v7 = *result;
        *uint64_t result = *a2;
        *a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *result;
      *uint64_t result = *a2;
      *a2 = v8;
      if (*((void *)a3 + 1) >= *((void *)a2 + 1)) {
        return result;
      }
      long long v5 = *a2;
      *a2 = *a3;
    }
    else
    {
      long long v5 = *result;
      *uint64_t result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CCF635DC(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < *(void *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      sub_1CCF63538((long long *)a1, (long long *)(a1 + 16), (long long *)a2 - 1);
      return 1;
    case 4:
      sub_1CCF63808(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      uint64_t v16 = (long long *)(a1 + 16);
      uint64_t v17 = (long long *)(a1 + 32);
      uint64_t v18 = (long long *)(a1 + 48);
      sub_1CCF63808(a1, a1 + 16, a1 + 32, a1 + 48);
      if (*(a2 - 1) < *(void *)(a1 + 56))
      {
        long long v19 = *v18;
        *uint64_t v18 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v19;
        if (*(void *)(a1 + 56) < *(void *)(a1 + 40))
        {
          long long v20 = *v17;
          *uint64_t v17 = *v18;
          *uint64_t v18 = v20;
          if (*(void *)(a1 + 40) < *(void *)(a1 + 24))
          {
            long long v21 = *v16;
            long long *v16 = *v17;
            *uint64_t v17 = v21;
            if (*(void *)(a1 + 24) < *(void *)(a1 + 8))
            {
              long long v22 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v16;
              long long *v16 = v22;
            }
          }
        }
      }
      return 1;
    default:
      long long v7 = (void *)(a1 + 32);
      sub_1CCF63538((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      long long v8 = (void *)(a1 + 48);
      if ((void *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = v8[1];
    if (v11 < v7[1])
    {
      uint64_t v12 = *v8;
      uint64_t v13 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v13 + 48) = *(_OWORD *)(a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        uint64_t v14 = *(void *)(a1 + v13 + 24);
        v13 -= 16;
        if (v11 >= v14)
        {
          uint64_t v15 = (void *)(a1 + v13 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v15 = (void *)a1;
LABEL_13:
      *uint64_t v15 = v12;
      v15[1] = v11;
      if (++v10 == 8) {
        return v8 + 2 == a2;
      }
    }
    long long v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CCF63808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CCF63538((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL sub_1CCF638A8(uint64_t a1, uint64_t **a2, unsigned int a3, uint64_t a4)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  long long v43 = v47;
  uint64_t v44 = v47;
  uint64_t v45 = 32;
  int v46 = 0;
  unsigned int v48 = v51;
  unsigned int v50 = 8;
  v51[0] = a4;
  unsigned int v7 = 1;
  do
  {
    uint64_t v8 = v48[v7 - 1];
    unsigned int v49 = v7 - 1;
    uint64_t v9 = v44;
    uint64_t v10 = HIDWORD(v45);
    if (v44 == v43)
    {
      if (HIDWORD(v45))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v45);
        uint64_t v13 = v44;
        while (*(void *)v13 != v8)
        {
          if (*(void *)v13 == -2) {
            uint64_t v11 = v13;
          }
          v13 += 8;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_10;
            }
            *(void *)uint64_t v11 = v8;
            --v46;
            goto LABEL_34;
          }
        }
        goto LABEL_41;
      }
LABEL_10:
      unsigned int v14 = v45;
      if (HIDWORD(v45) < v45)
      {
        ++HIDWORD(v45);
        *(void *)&v44[8 * v10] = v8;
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v14 = v45;
    }
    if (3 * v14 <= 4 * (HIDWORD(v45) - v46))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
LABEL_49:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v43, v14);
      unsigned int v14 = v45;
      uint64_t v9 = v44;
      goto LABEL_15;
    }
    if (v14 - HIDWORD(v45) < v14 >> 3) {
      goto LABEL_49;
    }
LABEL_15:
    unsigned int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    uint64_t v17 = &v9[8 * v16];
    uint64_t v18 = *(void *)v17;
    if (*(void *)v17 != -1)
    {
      long long v19 = 0;
      int v20 = 1;
      while (v18 != v8)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          long long v19 = v17;
        }
        unsigned int v22 = v16 + v20++;
        unsigned int v16 = v22 & v15;
        uint64_t v17 = &v9[8 * (v22 & v15)];
        uint64_t v18 = *(void *)v17;
        if (*(void *)v17 == -1) {
          goto LABEL_27;
        }
      }
LABEL_41:
      unsigned int v7 = v49;
      continue;
    }
    long long v19 = 0;
LABEL_27:
    if (v19) {
      uint64_t v23 = v19;
    }
    else {
      uint64_t v23 = v17;
    }
    if (*(void *)v23 == v8) {
      goto LABEL_41;
    }
    if (*(void *)v23 == -2) {
      --v46;
    }
    else {
      ++HIDWORD(v45);
    }
    *(void *)uint64_t v23 = v8;
LABEL_34:
    if (*(_WORD *)(v8 + 24) != 2) {
      goto LABEL_41;
    }
    uint64_t v24 = *(unsigned __int16 *)(v8 + 56);
    if (!*(_WORD *)(v8 + 56)) {
      goto LABEL_41;
    }
    uint64_t v25 = *(void **)(v8 + 32);
    unsigned int v7 = v49;
    uint64_t v26 = 40 * v24;
    do
    {
      if (v7 >= v50) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v48[v7] = *v25;
      unsigned int v7 = ++v49;
      v25 += 5;
      v26 -= 40;
    }
    while (v26);
  }
  while (v7);
  uint64_t v27 = 0;
  int v28 = HIDWORD(v45) - v46;
  do
  {
    uint64_t v29 = (*a2)[2 * v27];
    if (*(_WORD *)(v29 + 56))
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        if (v7 >= v50) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v48[v7] = *(void *)(*(void *)(v29 + 32) + v30);
        unsigned int v7 = ++v49;
        ++v31;
        v30 += 40;
      }
      while (v31 < *(unsigned __int16 *)(v29 + 56));
    }
    ++v27;
  }
  while (v27 != a3);
  unsigned int v32 = v28 + 1024;
  char v33 = sub_1CCF551A8(**a2, (llvm::SmallPtrSetImplBase *)&v43, (unsigned int *)&v48, v28 + 1024, 0);
  unint64_t v34 = 0;
  if (v33)
  {
    BOOL v35 = 0;
LABEL_63:
    if (HIDWORD(v45) - v46 >= v32)
    {
      uint64_t v42 = (*a2)[2 * v34];
      uint64_t v38 = sub_1CD516DA4(a1 + 1416, &v42);
      if (v38[1] == a4)
      {
        int v39 = *((_DWORD *)v38 + 4) + 1;
      }
      else
      {
        v38[1] = a4;
        int v39 = 1;
      }
      *((_DWORD *)v38 + 4) = v39;
    }
  }
  else
  {
    uint64_t v36 = 2;
    while (a3 - 1 != v34)
    {
      int v37 = sub_1CCF551A8((*a2)[v36], (llvm::SmallPtrSetImplBase *)&v43, (unsigned int *)&v48, v32, 0);
      v36 += 2;
      ++v34;
      if (v37)
      {
        BOOL v35 = v34 >= a3;
        goto LABEL_63;
      }
    }
    BOOL v35 = 1;
  }
  if (v48 != v51) {
    free(v48);
  }
  if (v44 != v43) {
    free(v44);
  }
  return v35;
}

uint64_t sub_1CCF63CDC(uint64_t *a1, uint64_t **a2, llvm *a3, uint64_t a4, unsigned int a5, int a6, char a7, char a8)
{
  uint64_t v202 = *MEMORY[0x1E4F143B8];
  v198 = a3;
  uint64_t v199 = a4;
  uint64_t v13 = **a2;
  unsigned int v14 = *(unsigned __int8 **)(v13 + 64);
  v196 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v196, v14, 2);
  }
  int v197 = *(_DWORD *)(v13 + 60);
  unint64_t v15 = sub_1CB896FB8((unsigned __int8 *)&v198);
  int v18 = (int)v16;
  long long v19 = (llvm::Type *)(8 * v15);
  if (v16 == 1) {
  v181 = a1;
  }
  uint64_t v182 = a5;
  int v20 = v19 * a5;
  char v176 = a8;
  int v174 = a6;
  if ((_BYTE)v198)
  {
    if (v198 - 15 >= 0x9C)
    {
LABEL_7:
      int v172 = 1;
      goto LABEL_8;
    }
  }
  else if ((*(_DWORD *)(v199 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_7;
  }
  int v172 = sub_1CD3DB440((llvm::EVT *)&v198, v16);
LABEL_8:
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v194 = 0u;
  *(_OWORD *)v195 = 0u;
  char v23 = 1;
  uint64_t v24 = a5;
  do
  {
    uint64_t v25 = *(void *)((*a2)[v21] + 96);
    uint64_t v26 = *(unsigned __int16 *)(v25 + 32);
    if (v23)
    {
      long long v27 = *(_OWORD *)(v25 + 56);
      long long v194 = *(_OWORD *)(v25 + 40);
      *(_OWORD *)v195 = v27;
      uint64_t v22 = v26;
    }
    else
    {
      if (v26 != (unsigned __int16)v22) {
        goto LABEL_159;
      }
      int v28 = *(llvm::MDNode **)(v25 + 64);
      uint64_t v29 = v22;
      MostGenericAliasScope = llvm::MDNode::getMostGenericAliasScope(v195[0], *(llvm::MDNode **)(v25 + 56), v17);
      long long v194 = 0uLL;
      v195[0] = MostGenericAliasScope;
      v195[1] = llvm::MDNode::intersect(v195[1], v28, v31);
      uint64_t v22 = v29;
    }
    char v23 = 0;
    v21 += 2;
    --v24;
  }
  while (v24);
  __int16 v171 = v22;
  if ((a7 & 1) == 0)
  {
    if (v20 > 63)
    {
      if (v20 == 64)
      {
        uint64_t v32 = 6;
        goto LABEL_97;
      }
      if (v20 == 128)
      {
        *(_DWORD *)&v201[8] = 128;
        goto LABEL_193;
      }
    }
    else
    {
      switch(v20)
      {
        case 32:
          uint64_t v32 = 5;
LABEL_97:
          uint64_t v179 = 0;
          *(_DWORD *)&v201[8] = v19 * a5;
LABEL_98:
          uint64_t v175 = v32;
          *(void *)v201 = 0;
          unsigned int v69 = 0;
          int v70 = *(unsigned __int8 *)(*(void *)(**(void **)(*v181 + 40) + 40) + 272);
          while (1)
          {
            unsigned int v71 = ~v69 + a5;
            if (v70) {
              unsigned int v71 = v69;
            }
            for (uint64_t i = *(void *)(*(void *)((*a2)[2 * v71] + 32) + 40);
                  *(_WORD *)(i + 24) == 216;
            if (v18 == 1) {
            if (*(_DWORD *)&v201[8] > 0x40u)
            }
            {
              llvm::APInt::shlSlowCase((llvm::APInt *)v201, v19);
            }
            else
            {
              uint64_t v73 = *(void *)v201 << (v19 & 0xF8);
              if (*(_DWORD *)&v201[8] == v19) {
                uint64_t v73 = 0;
              }
              if (*(_DWORD *)&v201[8]) {
                unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> -v201[8];
              }
              else {
                unint64_t v74 = 0;
              }
              *(void *)v201 = v74 & v73;
            }
            int v75 = *(unsigned __int16 *)(i + 24);
            if (v75 == 35 || v75 == 11)
            {
              uint64_t v77 = *(void *)(i + 80);
              if (v18 == 1) {
              llvm::APInt::zextOrTrunc((uint64_t *)(v77 + 24), v19, (uint64_t)&v191);
              }
              llvm::APInt::zextOrTrunc((uint64_t *)&v191, v19 * a5, (uint64_t)&v193);
              if (*(_DWORD *)&v201[8] > 0x40u)
              {
                unint64_t v78 = *(void **)v201;
                uint64_t v79 = (uint64_t *)v193;
                unint64_t v80 = ((unint64_t)*(unsigned int *)&v201[8] + 63) >> 6;
                do
                {
                  uint64_t v81 = *v79++;
                  *v78++ |= v81;
                  --v80;
                }
                while (v80);
              }
              else
              {
                *(void *)v201 |= v193;
              }
              if (DWORD2(v193) >= 0x41 && (void)v193) {
                MEMORY[0x1D25D9CB0](v193, 0x1000C8000313F17);
              }
              if (v192 >= 0x41 && v191) {
                MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
              }
            }
            else
            {
              uint64_t v82 = *(void *)(i + 80);
              long long v84 = *(void **)(v82 + 32);
              long long v83 = (llvm::detail::DoubleAPFloat *)(v82 + 32);
              if (v84 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v83, (llvm::APInt *)&v189);
              }
              else {
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v83, (uint64_t)&v189);
              }
              if (v18 == 1) {
              llvm::APInt::zextOrTrunc(&v189, v19, (uint64_t)&v191);
              }
              llvm::APInt::zextOrTrunc((uint64_t *)&v191, v19 * a5, (uint64_t)&v193);
              if (*(_DWORD *)&v201[8] > 0x40u)
              {
                uint64_t v86 = *(void *)v201;
                uint64_t v87 = 0;
                uint64_t v88 = v193;
                unint64_t v89 = 8 * (((unint64_t)*(unsigned int *)&v201[8] + 63) >> 6);
                do
                {
                  *(void *)(v86 + v87) |= *(void *)(v88 + v87);
                  v87 += 8;
                }
                while (v89 != v87);
              }
              else
              {
                uint64_t v86 = *(void *)v201 | v193;
                *(void *)v201 |= v193;
              }
              if (DWORD2(v193) >= 0x41 && (void)v193) {
                MEMORY[0x1D25D9CB0](v193, 0x1000C8000313F17);
              }
              if (v192 >= 0x41 && v191) {
                MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
              }
              if (v190 >= 0x41 && v189) {
                MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
              }
              if ((_BYTE)v198) {
                uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v198);
              }
              else {
                uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v198);
              }
              if ((llvm::Type *)ExtendedSizeInBits != v19 || v18 != v16)
              {
                if (*(_DWORD *)&v201[8] >= 0x41u && v86) {
                  MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
                }
                goto LABEL_159;
              }
            }
            if (++v69 == a5)
            {
              uint64_t v33 = (uint64_t)v181;
              uint64_t v96 = sub_1CD7EBB14(*v181, (llvm::LLVMContext *)v201, (const llvm::APInt *)&v196, v175, v179, 0, 0);
              unsigned int v98 = v97;
              if (*(_DWORD *)&v201[8] >= 0x41u && *(void *)v201) {
                MEMORY[0x1D25D9CB0](*(void *)v201, 0x1000C8000313F17);
              }
              char v99 = v176;
              goto LABEL_175;
            }
          }
        case 16:
          uint64_t v32 = 4;
          goto LABEL_97;
        case 8:
          uint64_t v32 = 3;
          goto LABEL_97;
      }
    }
    uint64_t v179 = llvm::IntegerType::get(*(llvm::IntegerType **)(*v181 + 56), (llvm::LLVMContext *)(v19 * a5));
    uint64_t v32 = 0;
    *(_DWORD *)&v201[8] = v19 * a5;
    if (v20 <= 0x40) {
      goto LABEL_98;
    }
LABEL_193:
    llvm::APInt::initSlowCase((llvm::APInt *)v201);
  }
  uint64_t v33 = (uint64_t)v181;
  unint64_t v34 = *(llvm::LLVMContext **)(*v181 + 56);
  unint64_t v35 = sub_1CD3DD468((unsigned __int8 *)&v198, (uint64_t)v16, (BOOL)v17);
  v170 = (llvm *)sub_1CB8E5DAC(v34, v35, v36, v172 * a5, 0);
  uint64_t v173 = v37;
  if (v174)
  {
    LODWORD(v39) = 0;
    uint64_t v40 = 0;
    *(void *)v201 = &v201[16];
    *(void *)&v201[8] = 0x800000000;
    uint64_t v41 = a5;
    while (1)
    {
      long long v193 = *(_OWORD *)(*(void *)((*a2)[2 * v40] + 32) + 40);
      uint64_t v42 = v193;
      long long v43 = (unsigned __int8 *)(*(void *)(v193 + 40) + 16 * DWORD2(v193));
      if (v198 == *v43 && ((_BYTE)v198 || v199 == *((void *)v43 + 1))) {
        goto LABEL_29;
      }
      if (*(_WORD *)(v193 + 24) == 216)
      {
        do
        {
          int v46 = *(_DWORD **)(v42 + 32);
          uint64_t v42 = *(void *)v46;
        }
        while (*(_WORD *)(*(void *)v46 + 24) == 216);
        int v47 = v46[2];
      }
      else
      {
        int v47 = DWORD2(v193);
      }
      *(void *)&long long v193 = v42;
      DWORD2(v193) = v47;
      if (v19 != sub_1CD3E3904((unsigned int *)&v193) || v18 != v48) {
        break;
      }
LABEL_77:
      uint64_t v42 = sub_1CD7EF724(*(void *)v33, (uint64_t)v198, v199, v193, *((uint64_t *)&v193 + 1));
      *(void *)&long long v193 = v42;
      DWORD2(v193) = v65;
      LODWORD(v39) = *(_DWORD *)&v201[8];
LABEL_29:
      uint64_t v44 = *((void *)&v193 + 1);
      if (v39 >= *(_DWORD *)&v201[12]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v45 = (uint64_t *)(*(void *)v201 + 16 * v39);
      *uint64_t v45 = v42;
      v45[1] = v44;
      uint64_t v39 = ++*(_DWORD *)&v201[8];
      if (++v40 == v41) {
        goto LABEL_239;
      }
    }
    unsigned int v49 = *(llvm::IntegerType **)(*(void *)v33 + 56);
    if ((_BYTE)v198) {
      uint64_t v50 = sub_1CB87E200((unsigned __int8 *)&v198);
    }
    else {
      uint64_t v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v198);
    }
    uint64_t v52 = (llvm::LLVMContext *)v50;
    if (v51 == 1) {
    if ((int)v52 <= 31)
    }
    {
      switch(v52)
      {
        case 1:
          uint64_t v53 = 0;
          uint64_t v54 = 2;
          goto LABEL_54;
        case 0x10:
          uint64_t v53 = 0;
          uint64_t v54 = 4;
          goto LABEL_54;
        case 8:
          uint64_t v53 = 0;
          uint64_t v54 = 3;
          goto LABEL_54;
      }
    }
    else
    {
      switch(v52)
      {
        case 0x20:
          uint64_t v53 = 0;
          uint64_t v54 = 5;
          goto LABEL_54;
        case 0x40:
          uint64_t v53 = 0;
          uint64_t v54 = 6;
          goto LABEL_54;
        case 0x80:
          uint64_t v53 = 0;
          uint64_t v54 = 7;
          goto LABEL_54;
      }
    }
    uint64_t v53 = llvm::IntegerType::get(v49, v52);
    uint64_t v54 = 0;
LABEL_54:
    uint64_t v55 = v193;
    unsigned int v56 = *(unsigned __int16 *)(v193 + 24);
    uint64_t v41 = a5;
    if (v56 > 0x22)
    {
      if (v56 != 35)
      {
        BOOL v57 = v56 == 36;
LABEL_59:
        uint64_t v33 = (uint64_t)v181;
        if (v57)
        {
          if (*(unsigned char **)v201 != &v201[16]) {
            free(*(void **)v201);
          }
LABEL_159:
          uint64_t v91 = 0;
          goto LABEL_160;
        }
        goto LABEL_77;
      }
    }
    else if (v56 != 11)
    {
      BOOL v57 = v56 == 12;
      goto LABEL_59;
    }
    uint64_t v178 = *v181;
    uint64_t v58 = *(void *)(v193 + 80);
    unsigned int v60 = sub_1CD3E3904((unsigned int *)&v193);
    if (v59 == 1) {
    llvm::APInt::zextOrTrunc((uint64_t *)(v58 + 24), v60, (uint64_t)&v189);
    }
    if (v18 == 1) {
    llvm::APInt::zextOrTrunc(&v189, v19, (uint64_t)&v191);
    }
    uint64_t v62 = *(unsigned __int8 **)(v55 + 64);
    v187 = v62;
    uint64_t v41 = a5;
    if (v62) {
      llvm::MetadataTracking::track((uint64_t)&v187, v62, 2);
    }
    int v188 = *(_DWORD *)(v55 + 60);
    *(void *)&long long v193 = sub_1CD7EBB14(v178, (llvm::LLVMContext *)&v191, (const llvm::APInt *)&v187, v54, v53, 0, 0);
    DWORD2(v193) = v63;
    uint64_t v33 = (uint64_t)v181;
    if (!v187) {
      goto LABEL_71;
    }
    int v64 = *v187;
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        uint64_t v66 = v187;
      }
      else {
        uint64_t v66 = 0;
      }
      if ((v64 - 3) < 0xFFFFFFFE)
      {
        if (v64 == 3) {
          *((void *)v187 + 1) = 0;
        }
        goto LABEL_71;
      }
      unint64_t v67 = (unint64_t)(v66 + 8);
    }
    else
    {
      if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
        goto LABEL_71;
      }
      uint64_t v68 = *((void *)v187 + 2);
      if ((v68 & 4) == 0) {
        goto LABEL_71;
      }
      unint64_t v67 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (!v67) {
        goto LABEL_71;
      }
    }
    v200 = &v187;
    sub_1CC5FA668(v67 + 16, &v200);
LABEL_71:
    if (v192 >= 0x41 && v191) {
      MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
    }
    if (v190 >= 0x41 && v189) {
      MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
    }
    goto LABEL_77;
  }
  uint64_t v131 = 0;
  *(void *)v201 = &v201[16];
  *(void *)&v201[8] = 0x800000000;
  uint64_t v132 = a5;
  do
  {
    uint64_t v133 = *(void *)((*a2)[2 * v131] + 32);
    uint64_t v135 = *(void *)(v133 + 40);
    for (unint64_t j = *(void *)(v133 + 48); ; unint64_t j = j & 0xFFFFFFFF00000000 | *(unsigned int *)(v137 + 8))
    {
      int v136 = *(unsigned __int16 *)(v135 + 24);
      if (v136 != 216) {
        break;
      }
      uint64_t v137 = *(void *)(v135 + 32);
      uint64_t v135 = *(void *)v137;
    }
    v138 = (unsigned __int8 *)(*(void *)(v135 + 40) + 16 * j);
    if ((v198 != *v138 || !(_BYTE)v198 && v199 != *((void *)v138 + 1))
      && (v136 == 151 || v136 == 148))
    {
      unsigned __int8 v140 = sub_1CD3DD468((unsigned __int8 *)&v198, v37, v38);
      uint64_t v142 = v141;
      long long v193 = *(_OWORD *)(*(void *)(v135 + 40) + 16 * j);
      if (v140 != sub_1CD3DD468((unsigned __int8 *)&v193, v141, v143) || !v140 && v142 != v144)
      {
        uint64_t v135 = sub_1CD7EF724(*v181, (uint64_t)v198, v199, v135, j);
        unint64_t j = j & 0xFFFFFFFF00000000 | v37;
        goto LABEL_205;
      }
      if ((_BYTE)v198) {
        BOOL v146 = v198 - 15 < 0x9C;
      }
      else {
        BOOL v146 = (*(_DWORD *)(v199 + 8) & 0xFE) == 18;
      }
      if (v146) {
        uint64_t v147 = 151;
      }
      else {
        uint64_t v147 = 148;
      }
      v148 = *(uint64_t **)(v135 + 32);
      uint64_t v150 = *v148;
      uint64_t v149 = v148[1];
      uint64_t v151 = v148[5];
      uint64_t v152 = v148[6];
      uint64_t v153 = *v181;
      v154 = *(unsigned __int8 **)(v135 + 64);
      *(void *)&long long v193 = v154;
      if (v154)
      {
        uint64_t v180 = v153;
        llvm::MetadataTracking::track((uint64_t)&v193, v154, 2);
        uint64_t v153 = v180;
      }
      DWORD2(v193) = *(_DWORD *)(v135 + 60);
      uint64_t v155 = *(void *)(v153 + 832);
      if (v155) {
        LOWORD(v155) = *(_WORD *)(v155 + 8);
      }
      uint64_t v135 = (uint64_t)sub_1CCFDED5C(v153, v147, (const llvm::APInt *)&v193, v198, v199, v150, v149, v145, v151, v152, v155);
      unsigned int v156 = v37;
      uint64_t v132 = a5;
      if ((void)v193)
      {
        int v157 = *(unsigned __int8 *)v193;
        if ((v157 - 4) > 0x1E)
        {
          if ((v157 - 3) >= 0xFFFFFFFE) {
            uint64_t v158 = v193;
          }
          else {
            uint64_t v158 = 0;
          }
          if ((v157 - 3) < 0xFFFFFFFE)
          {
            if (v157 == 3) {
              *(void *)(v193 + 8) = 0;
            }
            goto LABEL_225;
          }
          unint64_t v159 = v158 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v193 + 1) & 0x7F) != 2 && !*(_DWORD *)(v193 + 12)) {
            goto LABEL_225;
          }
          uint64_t v160 = *(void *)(v193 + 16);
          if ((v160 & 4) == 0) {
            goto LABEL_225;
          }
          unint64_t v159 = v160 & 0xFFFFFFFFFFFFFFF8;
          if (!v159) {
            goto LABEL_225;
          }
        }
        v191 = &v193;
        sub_1CC5FA668(v159 + 16, &v191);
      }
LABEL_225:
      unint64_t j = j & 0xFFFFFFFF00000000 | v156;
    }
LABEL_205:
    if (*(unsigned int *)&v201[8] >= (unint64_t)*(unsigned int *)&v201[12]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v139 = (uint64_t *)(*(void *)v201 + 16 * *(unsigned int *)&v201[8]);
    *long long v139 = v135;
    v139[1] = j;
    uint64_t v39 = ++*(_DWORD *)&v201[8];
    ++v131;
  }
  while (v131 != v132);
  uint64_t v33 = (uint64_t)v181;
LABEL_239:
  v161 = *(void **)v33;
  if ((_BYTE)v198) {
    BOOL v162 = v198 - 15 < 0x9C;
  }
  else {
    BOOL v162 = (*(_DWORD *)(v199 + 8) & 0xFE) == 18;
  }
  char v99 = v176;
  if (v162) {
    uint64_t v163 = 149;
  }
  else {
    uint64_t v163 = 146;
  }
  uint64_t v164 = v161[104];
  if (v164) {
    uint64_t v165 = *(unsigned __int16 *)(v164 + 8);
  }
  else {
    uint64_t v165 = 0;
  }
  uint64_t v96 = (uint64_t)sub_1CD7FF4E8(v161, (const char *)v163, (const llvm::APInt *)&v196, v170, v173, *(uint64_t **)v201, v39, v165);
  unsigned int v98 = v166;
  if (*(unsigned char **)v201 != &v201[16]) {
    free(*(void **)v201);
  }
LABEL_175:
  uint64_t v100 = v98;
  uint64_t v101 = **a2;
  uint64_t v102 = sub_1CCF64D08((void **)v33, a2, a5);
  int v104 = v103;
  if (v99)
  {
    llvm::TargetLoweringBase::getTypeConversion(*(void *)(v33 + 8), *(llvm::LLVMContext **)(*(void *)v33 + 56), *(void *)(*(void *)(v96 + 40) + 16 * v98), *(void *)(*(void *)(v96 + 40) + 16 * v98 + 8), (uint64_t)v201);
    *(_OWORD *)v201 = *(_OWORD *)&v201[8];
    if (v201[0]) {
      unsigned int v105 = sub_1CB87E200(v201);
    }
    else {
      unsigned int v105 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v201);
    }
    unsigned int v115 = v105;
    if (v106 == 1) {
    uint64_t v116 = *(void *)v33;
    }
    llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(v96 + 80) + 24), v115, (uint64_t)&v193);
    uint64_t v117 = sub_1CD7EBB14(v116, (llvm::LLVMContext *)&v193, (const llvm::APInt *)&v196, *(uint64_t *)v201, *(uint64_t *)&v201[8], 0, 0);
    unsigned int v119 = v118;
    if (DWORD2(v193) >= 0x41 && (void)v193) {
      MEMORY[0x1D25D9CB0](v193, 0x1000C8000313F17);
    }
    uint64_t v120 = *(void *)v33;
    unsigned int v121 = (uint64_t *)sub_1CD3E3954(v101);
    uint64_t v122 = *v121;
    uint64_t v123 = v121[1];
    uint64_t v124 = *(long long **)(v101 + 96);
    long long v183 = *v124;
    uint64_t v125 = *((void *)v124 + 1);
    uint64_t v184 = *((void *)v124 + 2);
    uint64_t v169 = (63
                           - __clz(((1 << *((unsigned char *)v124 + 34)) | v125) & -((1 << *((unsigned char *)v124 + 34)) | v125)));
    int v113 = sub_1CD7FB71C(v120, (uint64_t)v102, v104, (uint64_t)&v196, v117, v119, v122, v123, (uint64_t)&v183, *(void *)(*(void *)(v96 + 40) + 16 * v100), *(void *)(*(void *)(v96 + 40) + 16 * v100 + 8), v169, SHIDWORD(v169), v171, &v194);
  }
  else
  {
    uint64_t v107 = *(void *)v33;
    unsigned int v108 = (uint64_t *)sub_1CD3E3954(v101);
    uint64_t v109 = *v108;
    uint64_t v110 = v108[1];
    uint64_t v111 = *(long long **)(v101 + 96);
    long long v185 = *v111;
    uint64_t v112 = *((void *)v111 + 1);
    uint64_t v186 = *((void *)v111 + 2);
    uint64_t v168 = (63
                           - __clz(((1 << *((unsigned char *)v111 + 34)) | v112) & -((1 << *((unsigned char *)v111 + 34)) | v112)));
    int v113 = sub_1CD7FB188(v107, (uint64_t)v102, v104, (uint64_t)&v196, v96, v98, v109, v110, (uint64_t)&v185, v168, SHIDWORD(v168), v171, &v194);
  }
  unsigned int v126 = v113;
  uint64_t v127 = 0;
  uint64_t v128 = v114;
  uint64_t v129 = v182;
  do
  {
    uint64_t v130 = (*a2)[v127];
    *(void *)v201 = v126;
    *(void *)&v201[8] = v128;
    sub_1CCEF083C((uint64_t *)v33, v130, (uint64_t *)v201, 1, 1);
    v127 += 2;
    --v129;
  }
  while (v129);
  sub_1CCEF0788(v33, (uint64_t)v102);
  uint64_t v91 = 1;
LABEL_160:
  if (v196)
  {
    int v92 = *v196;
    if ((v92 - 4) > 0x1E)
    {
      if ((v92 - 3) >= 0xFFFFFFFE) {
        uint64_t v94 = v196;
      }
      else {
        uint64_t v94 = 0;
      }
      if ((v92 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v95 = (unint64_t)(v94 + 8);
        goto LABEL_170;
      }
      if (v92 == 3) {
        *((void *)v196 + 1) = 0;
      }
    }
    else if ((v196[1] & 0x7F) == 2 || *((_DWORD *)v196 + 3))
    {
      uint64_t v167 = *((void *)v196 + 2);
      if ((v167 & 4) != 0)
      {
        unint64_t v95 = v167 & 0xFFFFFFFFFFFFFFF8;
        if (v95)
        {
LABEL_170:
          *(void *)v201 = &v196;
          sub_1CC5FA668(v95 + 16, v201);
        }
      }
    }
  }
  return v91;
}

uint64_t *sub_1CCF64D08(void **a1, uint64_t **a2, int a3)
{
  v58[16] = *MEMORY[0x1E4F143B8];
  unsigned int v56 = v58;
  uint64_t v57 = 0x800000000;
  long long v6 = v54;
  uint64_t v50 = v54;
  uint64_t v51 = v54;
  uint64_t v52 = 8;
  int v53 = 0;
  uint64_t v7 = **a2;
  uint64_t v8 = *(unsigned __int8 **)(v7 + 64);
  int v48 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v48, v8, 2);
    long long v6 = v51;
  }
  uint64_t v9 = 0;
  int v49 = *(_DWORD *)(v7 + 60);
  do
  {
    uint64_t v10 = (*a2)[2 * v9];
    uint64_t v11 = HIDWORD(v52);
    if (v6 != v50)
    {
      unsigned int v15 = v52;
      goto LABEL_15;
    }
    if (!HIDWORD(v52))
    {
LABEL_12:
      unsigned int v15 = v52;
      if (HIDWORD(v52) < v52)
      {
        ++HIDWORD(v52);
        *(void *)&v6[8 * v11] = v10;
        goto LABEL_36;
      }
LABEL_15:
      if (3 * v15 <= 4 * (HIDWORD(v52) - v53))
      {
        if (v15 >= 0x40) {
          v15 *= 2;
        }
        else {
          unsigned int v15 = 128;
        }
      }
      else if (v15 - HIDWORD(v52) >= v15 >> 3)
      {
        goto LABEL_17;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v50, v15);
      unsigned int v15 = v52;
      long long v6 = v51;
LABEL_17:
      unsigned int v16 = v15 - 1;
      unsigned int v17 = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v18 = &v6[8 * v17];
      uint64_t v19 = *v18;
      if (*v18 == -1)
      {
        int v20 = 0;
LABEL_29:
        if (v20) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = v18;
        }
        if (*v24 != v10)
        {
          if (*v24 == -2) {
            --v53;
          }
          else {
            ++HIDWORD(v52);
          }
          *uint64_t v24 = v10;
        }
      }
      else
      {
        int v20 = 0;
        int v21 = 1;
        while (v19 != v10)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            int v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          int v18 = &v6[8 * (v23 & v16)];
          uint64_t v19 = *v18;
          if (*v18 == -1) {
            goto LABEL_29;
          }
        }
      }
      goto LABEL_36;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 8 * HIDWORD(v52);
    unsigned int v14 = v6;
    while (*v14 != v10)
    {
      if (*v14 == -2) {
        uint64_t v12 = v14;
      }
      ++v14;
      v13 -= 8;
      if (!v13)
      {
        if (!v12) {
          goto LABEL_12;
        }
        *uint64_t v12 = v10;
        --v53;
        break;
      }
    }
LABEL_36:
    long long v6 = v51;
    ++v9;
  }
  while (v9 != a3);
  uint64_t v25 = 0;
  do
  {
    uint64_t v26 = **(void **)((*a2)[2 * v25] + 32);
    long long v27 = (char *)v51;
    uint64_t v28 = HIDWORD(v52);
    if (v51 == (void *)v50)
    {
      if (HIDWORD(v52))
      {
        uint64_t v29 = 0;
        uint64_t v30 = 8 * HIDWORD(v52);
        unint64_t v31 = v51;
        while (*v31 != v26)
        {
          if (*v31 == -2) {
            uint64_t v29 = v31;
          }
          ++v31;
          v30 -= 8;
          if (!v30)
          {
            if (!v29) {
              goto LABEL_52;
            }
            *uint64_t v29 = v26;
            --v53;
            goto LABEL_76;
          }
        }
        goto LABEL_78;
      }
LABEL_52:
      unsigned int v32 = v52;
      if (HIDWORD(v52) < v52)
      {
        ++HIDWORD(v52);
        v51[v28] = v26;
LABEL_76:
        if (v57 >= (unint64_t)HIDWORD(v57)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v56 + v57) = *(_OWORD *)*(void *)((*a2)[2 * v25] + 32);
        LODWORD(v57) = v57 + 1;
        goto LABEL_78;
      }
    }
    else
    {
      unsigned int v32 = v52;
    }
    if (3 * v32 <= 4 * (HIDWORD(v52) - v53))
    {
      if (v32 >= 0x40) {
        v32 *= 2;
      }
      else {
        unsigned int v32 = 128;
      }
    }
    else if (v32 - HIDWORD(v52) >= v32 >> 3)
    {
      goto LABEL_57;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v50, v32);
    unsigned int v32 = v52;
    long long v27 = (char *)v51;
LABEL_57:
    unsigned int v33 = v32 - 1;
    unsigned int v34 = (v32 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    unint64_t v35 = &v27[8 * v34];
    uint64_t v36 = *(void *)v35;
    if (*(void *)v35 == -1)
    {
      uint64_t v37 = 0;
LABEL_69:
      if (v37) {
        uint64_t v41 = v37;
      }
      else {
        uint64_t v41 = v35;
      }
      if (*(void *)v41 != v26)
      {
        if (*(void *)v41 == -2) {
          --v53;
        }
        else {
          ++HIDWORD(v52);
        }
        *(void *)uint64_t v41 = v26;
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v37 = 0;
      int v38 = 1;
      while (v36 != v26)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v36 == -2;
        }
        if (v39) {
          uint64_t v37 = v35;
        }
        unsigned int v40 = v34 + v38++;
        unsigned int v34 = v40 & v33;
        unint64_t v35 = &v27[8 * (v40 & v33)];
        uint64_t v36 = *(void *)v35;
        if (*(void *)v35 == -1) {
          goto LABEL_69;
        }
      }
    }
LABEL_78:
    ++v25;
  }
  while (v25 != a3);
  uint64_t v42 = sub_1CD8049E8(*a1, (const llvm::APInt *)&v48, (uint64_t)&v56);
  if (v48)
  {
    int v43 = *v48;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v48;
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v43 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v46 = (unint64_t)(v45 + 8);
        goto LABEL_101;
      }
      if (v43 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v47 = *((void *)v48 + 2);
      if ((v47 & 4) != 0)
      {
        unint64_t v46 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v46)
        {
LABEL_101:
          uint64_t v55 = &v48;
          sub_1CC5FA668(v46 + 16, &v55);
        }
      }
    }
  }
  if (v51 != (void *)v50) {
    free(v51);
  }
  if (v56 != v58) {
    free(v56);
  }
  return v42;
}

uint64_t sub_1CCF65200(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v35[0] = a1;
  v35[1] = a2;
  if (*(_WORD *)(a1 + 24) != 171) {
    goto LABEL_24;
  }
  long long v5 = *(uint64_t **)(a1 + 32);
  uint64_t v6 = v5[5];
  int v7 = *(unsigned __int16 *)(v6 + 24);
  if (v7 != 35 && v7 != 11) {
    goto LABEL_24;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v5;
  if (v10)
  {
    uint64_t v11 = 0;
    if (*(_WORD *)(v10 + 24) == 253)
    {
      if ((*(_WORD *)(v10 + 26) & 0xF80) != 0) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v10 + 32);
      if (*(void *)(v12 + 40) != a3) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(v12 + 48) != a4) {
        goto LABEL_24;
      }
      uint64_t v13 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 16 * a2);
      if ((unint64_t)(v13 - 4) > 2) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(v6 + 80);
      unsigned int v15 = *(_DWORD *)(v14 + 32);
      uint64_t v16 = v15 > 0x40 ? **(void **)(v14 + 24) : (uint64_t)(*(void *)(v14 + 24) << -(char)v15) >> -(char)v15;
      unint64_t v17 = ~v16;
      unsigned int v18 = __clz(v17);
      if ((v18 & 7) != 0) {
        goto LABEL_24;
      }
      unint64_t v19 = __clz(__rbit64(v17));
      BOOL v20 = v18 != 64 && (v19 & 7) == 0;
      if (!v20 || v18 + v19 + __clz(__rbit64(~(v17 >> v19))) != 64) {
        goto LABEL_24;
      }
      uint64_t v34 = v10;
      if (v13 != 6 && v18)
      {
        unsigned int v23 = sub_1CD3E3904((unsigned int *)v35);
        if (v22 == 1) {
        unsigned int v18 = v18 + v23 - 64;
        }
      }
      uint64_t v24 = sub_1CD3E3904((unsigned int *)v35);
      if (v25 == 1)
      {
        unsigned int v32 = v24;
        uint64_t v24 = v32;
      }
      unint64_t v26 = (unint64_t)v24 - v19 - v18;
      BOOL v27 = (v26 >> 3) > 4 || ((1 << (v26 >> 3)) & 0x16) == 0;
      if (v27 || v19 && (v19 >> 3) % (v26 >> 3)) {
        goto LABEL_24;
      }
      if (v34 != a5)
      {
        if (*(_WORD *)(a5 + 24) != 2) {
          goto LABEL_24;
        }
        uint64_t v9 = *(void *)(v34 + 48);
        if (!v9) {
          goto LABEL_25;
        }
        int v28 = 1;
        do
        {
          if (*(_DWORD *)(v9 + 8) == 1)
          {
            if (!v28) {
              goto LABEL_24;
            }
            --v28;
          }
          uint64_t v9 = *(void *)(v9 + 32);
        }
        while (v9);
        if (v28)
        {
LABEL_24:
          uint64_t v9 = 0;
LABEL_25:
          uint64_t v11 = 0;
          return v11 | v9;
        }
        uint64_t v9 = *(unsigned __int16 *)(a5 + 56);
        if (!*(_WORD *)(a5 + 56)) {
          goto LABEL_25;
        }
        uint64_t v29 = v34;
        uint64_t v30 = *(void **)(a5 + 32);
        uint64_t v31 = 40 * v9;
        while (v29 != *v30)
        {
          uint64_t v9 = 0;
          uint64_t v11 = 0;
          v30 += 5;
          v31 -= 40;
          uint64_t v29 = v34;
          if (!v31) {
            return v11 | v9;
          }
        }
      }
      uint64_t v11 = (v19 << 29) & 0xF00000000;
      uint64_t v9 = (v26 >> 3);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  return v11 | v9;
}

uint64_t *sub_1CCF65488(int a1, unsigned int a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  long long v83 = a3;
  long long v84 = a4;
  uint64_t v10 = *(void *)a6;
  unsigned int v12 = sub_1CD3E3904((unsigned int *)&v83);
  if (v11 == 1) {
  unsigned int v13 = 8 * a2;
  }
  unsigned int v14 = 8 * (a2 + a1);
  unsigned int v80 = v12;
  if (v12 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v79);
  }
  unint64_t v79 = 0;
  if (v13 != v14)
  {
    if (v13 > 0x3F || v14 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v79, 8 * a2, v14);
    }
    else
    {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> (v13 - v14) << v13;
      if (v80 > 0x40) {
        *(void *)v79 |= v15;
      }
      else {
        v79 |= v15;
      }
    }
  }
  unsigned int v16 = v80;
  if (v80 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v79);
    unsigned int v16 = v80;
    unsigned int v18 = (void *)v79;
  }
  else
  {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
    if (!v80) {
      unint64_t v17 = 0;
    }
    unsigned int v18 = (void *)(v17 & ~v79);
    unint64_t v79 = (unint64_t)v18;
  }
  unsigned int v82 = v16;
  uint64_t v81 = v18;
  unsigned int v80 = 0;
  if (!sub_1CD7F11AC(v10, (uint64_t)v83, (BOOL)v84, (uint64_t)&v81, 0)) {
    goto LABEL_27;
  }
  int v19 = 8 * a1;
  if (8 * a1 <= 31)
  {
    if (v19 == 8)
    {
      uint64_t v20 = 3;
      goto LABEL_25;
    }
    if (v19 == 16)
    {
      uint64_t v20 = 4;
      goto LABEL_25;
    }
LABEL_32:
    uint64_t v20 = 0;
    if (*(unsigned char *)(a6 + 34))
    {
      BOOL v22 = 0;
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v10 + 24);
    goto LABEL_35;
  }
  if (v19 == 32)
  {
    uint64_t v20 = 5;
    goto LABEL_25;
  }
  if (v19 == 64)
  {
    uint64_t v20 = 6;
    goto LABEL_25;
  }
  if (v19 != 128) {
    goto LABEL_32;
  }
  uint64_t v20 = 7;
LABEL_25:
  uint64_t v21 = *(void *)(v10 + 24);
  if (*(unsigned char *)(a6 + 34) && !*(void *)(*(void *)(a6 + 8) + 8 * v20 + 96))
  {
LABEL_27:
    BOOL v22 = 0;
    goto LABEL_28;
  }
LABEL_35:
  uint64_t v24 = *(void *)(a5 + 96);
  if (v24)
  {
    BOOL v22 = 0;
    if (!llvm::TargetLoweringBase::allowsMemoryAccess(v21, *(void *)(v10 + 56), *(void *)(**(void **)(v10 + 40) + 40) + 272, v20, 0, v24, 0))goto LABEL_28; {
  }
    }
  if (a2)
  {
    uint64_t v25 = v83;
    unint64_t v26 = (unsigned __int8 *)v83[8];
    *(void *)&v75[0] = v26;
    BOOL v27 = v83;
    if (v26)
    {
      llvm::MetadataTracking::track((uint64_t)v75, v26, 2);
      BOOL v27 = v83;
    }
    DWORD2(v75[0]) = *((_DWORD *)v25 + 15);
    int v28 = (uint64_t *)(v27[5] + 16 * v84);
    uint64_t v29 = (llvm *)*v28;
    uint64_t v30 = v28[1];
    uint64_t v74 = (uint64_t)v84;
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a6 + 8), *v28, v30, *(void *)(**(void **)(*(void *)a6 + 40) + 40) + 272, *(unsigned __int8 *)(a6 + 34));
    unsigned int v33 = sub_1CD7EBF14(v10, 8 * a2, (const llvm::APInt *)v75, ShiftAmountTy, v32, 0, 0);
    uint64_t v36 = *(void *)(v10 + 832);
    if (v36) {
      LOWORD(v36) = *(_WORD *)(v36 + 8);
    }
    long long v83 = sub_1CCFDED5C(v10, 177, (const llvm::APInt *)v75, v29, v30, (uint64_t)v27, v74, v35, (uint64_t)v33, v34, v36);
    LODWORD(v84) = v37;
    if (*(void *)&v75[0])
    {
      int v38 = **(unsigned char **)&v75[0];
      if ((v38 - 4) > 0x1E)
      {
        if ((v38 - 3) >= 0xFFFFFFFE) {
          uint64_t v67 = *(void *)&v75[0];
        }
        else {
          uint64_t v67 = 0;
        }
        if ((v38 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v68 = v67 + 8;
LABEL_96:
          uint64_t v77 = v75;
          sub_1CC5FA668(v68 + 16, &v77);
          goto LABEL_45;
        }
        if (v38 == 3) {
          *(void *)(*(void *)&v75[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*(void *)&v75[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v75[0] + 12))
      {
        uint64_t v72 = *(void *)(*(void *)&v75[0] + 16);
        if ((v72 & 4) != 0)
        {
          unint64_t v68 = v72 & 0xFFFFFFFFFFFFFFF8;
          if (v68) {
            goto LABEL_96;
          }
        }
      }
    }
  }
LABEL_45:
  if (*(unsigned char *)(*(void *)(**(void **)(v10 + 40) + 40) + 272))
  {
    v75[0] = *(_OWORD *)(v83[5] + 16 * v84);
    int v40 = sub_1CB896FB8((unsigned __int8 *)v75);
    if (v39 == 1) {
    a2 = v40 - (a2 + a1);
    }
  }
  uint64_t v41 = *(void *)(a5 + 32);
  int v43 = *(uint64_t **)(v41 + 80);
  uint64_t v42 = *(void *)(v41 + 88);
  uint64_t v44 = v83;
  if (a2)
  {
    uint64_t v45 = (unsigned __int8 *)v83[8];
    *(void *)&v75[0] = v45;
    if (v45) {
      llvm::MetadataTracking::track((uint64_t)v75, v45, 2);
    }
    DWORD2(v75[0]) = *((_DWORD *)v44 + 15);
    int v43 = sub_1CD7F6604(v10, (uint64_t)v43, v42, a2, 0, (const llvm::APInt *)v75, 0);
    LODWORD(v42) = v46;
    if (!*(void *)&v75[0]) {
      goto LABEL_56;
    }
    int v47 = **(unsigned char **)&v75[0];
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        uint64_t v69 = *(void *)&v75[0];
      }
      else {
        uint64_t v69 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *(void *)(*(void *)&v75[0] + 8) = 0;
        }
        goto LABEL_56;
      }
      unint64_t v70 = v69 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v75[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v75[0] + 12)) {
        goto LABEL_56;
      }
      uint64_t v73 = *(void *)(*(void *)&v75[0] + 16);
      if ((v73 & 4) == 0) {
        goto LABEL_56;
      }
      unint64_t v70 = v73 & 0xFFFFFFFFFFFFFFF8;
      if (!v70) {
        goto LABEL_56;
      }
    }
    uint64_t v77 = v75;
    sub_1CC5FA668(v70 + 16, &v77);
LABEL_56:
    uint64_t v44 = v83;
  }
  int v48 = (unsigned __int8 *)v44[8];
  *(void *)&v75[0] = v48;
  int v49 = v44;
  if (v48)
  {
    llvm::MetadataTracking::track((uint64_t)v75, v48, 2);
    int v49 = v83;
  }
  DWORD2(v75[0]) = *((_DWORD *)v44 + 15);
  uint64_t v50 = *(void *)(v10 + 832);
  if (v50) {
    __int16 v51 = *(_WORD *)(v50 + 8);
  }
  else {
    __int16 v51 = 0;
  }
  long long v83 = sub_1CD7F3564((llvm::APFloatBase *)v10, (const char *)0xC9, (uint64_t)v75, (llvm *)v20, 0, (uint64_t)v49, v84, v51);
  LODWORD(v84) = v52;
  if (*(void *)&v75[0])
  {
    int v53 = **(unsigned char **)&v75[0];
    if ((v53 - 4) > 0x1E)
    {
      if ((v53 - 3) >= 0xFFFFFFFE) {
        uint64_t v65 = *(void *)&v75[0];
      }
      else {
        uint64_t v65 = 0;
      }
      if ((v53 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v66 = v65 + 8;
LABEL_88:
        uint64_t v77 = v75;
        sub_1CC5FA668(v66 + 16, &v77);
        goto LABEL_68;
      }
      if (v53 == 3) {
        *(void *)(*(void *)&v75[0] + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*(void *)&v75[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v75[0] + 12))
    {
      uint64_t v71 = *(void *)(*(void *)&v75[0] + 16);
      if ((v71 & 4) != 0)
      {
        unint64_t v66 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (v66) {
          goto LABEL_88;
        }
      }
    }
  }
LABEL_68:
  uint64_t v54 = *(uint64_t **)(a5 + 32);
  uint64_t v55 = *v54;
  uint64_t v56 = v54[1];
  uint64_t v57 = *(unsigned __int8 **)(a5 + 64);
  uint64_t v77 = (long long *)v57;
  if (v57) {
    llvm::MetadataTracking::track((uint64_t)&v77, v57, 2);
  }
  int v78 = *(_DWORD *)(a5 + 60);
  uint64_t v58 = v83;
  unsigned int v59 = v84;
  sub_1CB8F0264(*(uint64_t **)(a5 + 96), a2, (uint64_t)v76);
  uint64_t v60 = *(unsigned __int8 *)(*(void *)(a5 + 96) + 34);
  memset(v75, 0, sizeof(v75));
  BOOL v22 = sub_1CD7FB188(v10, v55, v56, (uint64_t)&v77, (uint64_t)v58, v59, (uint64_t)v43, v42, (uint64_t)v76, v60, SHIDWORD(v60), 0, v75);
  if (v77)
  {
    int v61 = *(unsigned __int8 *)v77;
    if ((v61 - 4) <= 0x1E)
    {
      if ((*((unsigned char *)v77 + 1) & 0x7F) != 2 && !*((_DWORD *)v77 + 3)) {
        goto LABEL_28;
      }
      uint64_t v62 = *((void *)v77 + 2);
      if ((v62 & 4) == 0) {
        goto LABEL_28;
      }
      unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if (!v63) {
        goto LABEL_28;
      }
      goto LABEL_82;
    }
    if ((v61 - 3) >= 0xFFFFFFFE) {
      int v64 = v77;
    }
    else {
      int v64 = 0;
    }
    if ((v61 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v63 = (unint64_t)v64 + 8;
LABEL_82:
      *(void *)&v75[0] = &v77;
      sub_1CC5FA668(v63 + 16, v75);
      goto LABEL_28;
    }
    if (v61 == 3) {
      *((void *)v77 + 1) = 0;
    }
  }
LABEL_28:
  if (v82 >= 0x41 && v81) {
    MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
  }
  return v22;
}

uint64_t *sub_1CCF65B6C(uint64_t *a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  long long v99 = *(_OWORD *)*(void *)(a2 + 40);
  if ((_BYTE)a3)
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v100);
    unint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a4 + 24), 0, (BOOL)a3);
    unint64_t v14 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  *(void *)&long long v98 = v14 | EVT;
  *((void *)&v98 + 1) = v13;
  if (!sub_1CD788450((llvm::EVT *)&v98)) {
    return 0;
  }
  unsigned __int8 v15 = v98;
  if (v99 != v98
    || (BOOL v16 = 0, !(_BYTE)v99) && *((void *)&v99 + 1) != *((void *)&v98 + 1))
  {
    BOOL v16 = sub_1CC277C0C((unsigned __int8 *)&v99, v98, *((uint64_t *)&v98 + 1));
    unsigned __int8 v15 = v98;
  }
  if (!v15) {
    return 0;
  }
  uint64_t v17 = a1[1];
  if (v15 == 1 || (unsigned int v18 = 0, *(void *)(v17 + 8 * v15 + 96)))
  {
    if ((*(unsigned __int8 *)(v17 + 390 * v15 + 4115) | 4) == 4
      && (*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(void *)v17 + 624))(a1[1], a7, !v16))
    {
      uint64_t v19 = (1 << *(unsigned char *)(*(void *)(a7 + 96) + 34)) | *(void *)(*(void *)(a7 + 96) + 8);
      char v20 = __clz(v19 & -v19);
      uint64_t v21 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v96 = v21;
      if (v21) {
        llvm::MetadataTracking::track((uint64_t)&v96, v21, 2);
      }
      char v22 = 63 - v20;
      int v97 = *(_DWORD *)(a2 + 60);
      int v23 = *(unsigned __int16 *)(a5 + 24);
      if (v23 == 35 || v23 == 11)
      {
        uint64_t v24 = *(void *)(a5 + 80);
        uint64_t v25 = (void *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u) {
          uint64_t v25 = (void *)*v25;
        }
        unint64_t v26 = (void *)*v25;
        if ((_BYTE)v98) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v98);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v98);
        }
        unint64_t v33 = ExtendedSizeInBits * (int)v26;
        if (v28 == 1) {
        uint64_t v34 = (v33 >> 3);
        }
        sub_1CB8F0264(*(uint64_t **)(a7 + 96), v34, (uint64_t)&v90);
        uint64_t v36 = *((void *)&v90 + 1);
        uint64_t v35 = v90;
        int v30 = v91;
        char v37 = BYTE4(v91);
      }
      else
      {
        int v30 = *(_DWORD *)(*(void *)(a7 + 96) + 16);
        if ((_BYTE)v98) {
          uint64_t v31 = sub_1CB87E200((unsigned __int8 *)&v98);
        }
        else {
          uint64_t v31 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v98);
        }
        unint64_t v38 = v31;
        if (v32 == 1) {
        uint64_t v35 = 0;
        }
        uint64_t v36 = 0;
        char v37 = 0;
        uint64_t v34 = v38 >> 3;
      }
      char v95 = 0;
      uint64_t v39 = (63 - __clz((v34 | (1 << v22)) & -(v34 | (1 << v22))));
      if ((*(unsigned int (**)(uint64_t, void, uint64_t, void, void, void, uint64_t, void, char *))(*(void *)a1[1] + 664))(a1[1], *(void *)(*a1 + 56), *(void *)(**(void **)(*a1 + 40) + 40) + 272, v98, *((void *)&v98 + 1), *(unsigned int *)(*(void *)(a7 + 96) + 16), v39, *(unsigned __int16 *)(*(void *)(a7 + 96) + 32), &v95))
      {
        BOOL v40 = v95 == 0;
      }
      else
      {
        BOOL v40 = 1;
      }
      if (v40)
      {
        unsigned int v18 = 0;
        goto LABEL_42;
      }
      uint64_t v45 = sub_1CD817474(a1[1], *a1, *(void *)(*(void *)(a7 + 32) + 40), *(void *)(*(void *)(a7 + 32) + 48), v100, v101, a5, a6);
      uint64_t v47 = v46;
      uint64_t v49 = *((void *)&v98 + 1);
      uint64_t v48 = v98;
      if (v99 != v98 || !(_BYTE)v99 && *((void *)&v99 + 1) != *((void *)&v98 + 1))
      {
        BOOL v50 = sub_1CC277C0C((unsigned __int8 *)&v99, v98, *((uint64_t *)&v98 + 1));
        uint64_t v48 = v98;
        if (v50)
        {
          int v52 = 1;
          if ((_BYTE)v99 && (_BYTE)v98)
          {
            if (*(unsigned __int16 *)(a1[1] + 358 * v99 + 2 * v98 + 73672) >= 0x1000u) {
              int v52 = 1;
            }
            else {
              int v52 = 3;
            }
          }
          uint64_t v53 = *a1;
          uint64_t v54 = *(uint64_t **)(a7 + 32);
          uint64_t v55 = *v54;
          uint64_t v56 = v54[1];
          *(void *)&long long v92 = v35;
          *((void *)&v92 + 1) = v36;
          int v93 = v30;
          char v94 = v37;
          uint64_t v57 = *(void *)(a7 + 96);
          __int16 v58 = *(_WORD *)(v57 + 32);
          long long v59 = *(_OWORD *)(v57 + 56);
          long long v90 = *(_OWORD *)(v57 + 40);
          long long v91 = v59;
          unsigned int v18 = sub_1CD7FAEE8(v53, v52, (uint64_t)&v96, v99, *((uint64_t *)&v99 + 1), v55, v56, v51, (uint64_t)v45, v47, &v92, v98, *((uint64_t *)&v98 + 1), (unsigned __int16)v39 | 0x100u, (v39 | 0x100uLL) >> 32, v58, &v90);
          sub_1CD8027CC(*a1, a7, 1, (uint64_t)v18, 1, v60, v61, v62);
LABEL_42:
          if (v96)
          {
            int v41 = *v96;
            if ((v41 - 4) > 0x1E)
            {
              if ((v41 - 3) >= 0xFFFFFFFE) {
                uint64_t v44 = v96;
              }
              else {
                uint64_t v44 = 0;
              }
              if ((v41 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v43 = (unint64_t)(v44 + 8);
LABEL_54:
                *(void *)&long long v90 = &v96;
                sub_1CC5FA668(v43 + 16, &v90);
                return v18;
              }
              if (v41 == 3) {
                *((void *)v96 + 1) = 0;
              }
            }
            else if ((v96[1] & 0x7F) == 2 || *((_DWORD *)v96 + 3))
            {
              uint64_t v42 = *((void *)v96 + 2);
              if ((v42 & 4) != 0)
              {
                unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
                if (v43) {
                  goto LABEL_54;
                }
              }
            }
          }
          return v18;
        }
        uint64_t v49 = *((void *)&v98 + 1);
      }
      uint64_t v63 = *a1;
      int v64 = *(uint64_t **)(a7 + 32);
      uint64_t v65 = *v64;
      uint64_t v66 = v64[1];
      *(void *)&long long v87 = v35;
      *((void *)&v87 + 1) = v36;
      int v88 = v30;
      char v89 = v37;
      uint64_t v67 = *(void *)(a7 + 96);
      __int16 v68 = *(_WORD *)(v67 + 32);
      long long v69 = *(_OWORD *)(v67 + 56);
      long long v90 = *(_OWORD *)(v67 + 40);
      long long v91 = v69;
      unint64_t v70 = sub_1CD7F00F8(v63, v48, v49, (uint64_t)&v96, v65, v66, (uint64_t)v45, v47, &v87, (unsigned __int16)v39 | 0x100u, (v39 | 0x100uLL) >> 32, v68, &v90, 0);
      uint64_t v72 = v71;
      sub_1CD8027CC(*a1, a7, 1, (uint64_t)v70, 1, v73, v74, v75);
      char v76 = v98;
      if (v99 == v98)
      {
        uint64_t v77 = *((void *)&v99 + 1);
        if ((_BYTE)v99 || *((void *)&v99 + 1) == *((void *)&v98 + 1)) {
          goto LABEL_86;
        }
        long long v90 = v98;
      }
      else
      {
        long long v90 = v98;
        if ((_BYTE)v99)
        {
          uint64_t v78 = sub_1CB87E200((unsigned __int8 *)&v99);
LABEL_75:
          unint64_t v80 = v78;
          int v81 = v79;
          if (v76) {
            unint64_t v82 = sub_1CB87E200((unsigned __int8 *)&v90);
          }
          else {
            unint64_t v82 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v90);
          }
          if (v81 == 1 && v83 != 1)
          {
            uint64_t v77 = *((void *)&v99 + 1);
          }
          else
          {
            uint64_t v77 = *((void *)&v99 + 1);
            if (v80 < v82)
            {
              uint64_t v84 = *(void *)(*a1 + 832);
              if (v84) {
                __int16 v85 = *(_WORD *)(v84 + 8);
              }
              else {
                __int16 v85 = 0;
              }
              uint64_t v86 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xC9, (uint64_t)&v96, (llvm *)v99, *((uint64_t *)&v99 + 1), (uint64_t)v70, (void *)v72, v85);
              goto LABEL_87;
            }
          }
LABEL_86:
          uint64_t v86 = sub_1CD7EF724(*a1, v99, v77, (uint64_t)v70, v72);
LABEL_87:
          unsigned int v18 = (uint64_t *)v86;
          goto LABEL_42;
        }
      }
      uint64_t v78 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v99);
      goto LABEL_75;
    }
    return 0;
  }
  return v18;
}

double sub_1CCF661BC(const char *a1, char *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (unsigned int *)a1;
    if (a3 == 2)
    {
      int v41 = a2 - 16;
      long long v47 = *(_OWORD *)(*(void *)(*((void *)a2 - 2) + 40) + 16 * *((unsigned int *)a2 - 2));
      unsigned int v42 = sub_1CD3DB440((llvm::EVT *)&v47, a2);
      long long v46 = *(_OWORD *)(*(void *)(*(void *)v6 + 40) + 16 * v6[2]);
      if (v42 > sub_1CD3DB440((llvm::EVT *)&v46, v43))
      {
        long long v14 = *(_OWORD *)v6;
        long long v47 = *(_OWORD *)v6;
        unsigned int v44 = *((_DWORD *)v41 + 2);
        *(void *)uint64_t v6 = *(void *)v41;
        v6[2] = v44;
        *(void *)int v41 = v47;
        *((_DWORD *)v41 + 2) = DWORD2(v47);
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      int v23 = a4;
      unint64_t v24 = a3 >> 1;
      uint64_t v25 = &a1[16 * (a3 >> 1)];
      unint64_t v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCF66534(a1, v25, v26, a4);
        BOOL v27 = &v23[4 * v24];
        sub_1CCF66534((const char *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v27);
        uint64_t v29 = &v23[4 * a3];
        int v30 = v27;
        while (v30 != v29)
        {
          long long v47 = *(_OWORD *)(*(void *)(*(void *)v30 + 40) + 16 * v30[2]);
          unsigned int v31 = sub_1CD3DB440((llvm::EVT *)&v47, v28);
          long long v46 = *(_OWORD *)(*(void *)(*(void *)v23 + 40) + 16 * v23[2]);
          if (v31 <= sub_1CD3DB440((llvm::EVT *)&v46, v32))
          {
            uint64_t v34 = *(void *)v23;
            v6[2] = v23[2];
            *(void *)uint64_t v6 = v34;
            v23 += 4;
          }
          else
          {
            uint64_t v33 = *(void *)v30;
            v6[2] = v30[2];
            *(void *)uint64_t v6 = v33;
            v30 += 4;
          }
          v6 += 4;
          if (v23 == v27)
          {
            if (v30 != v29)
            {
              uint64_t v35 = 0;
              do
              {
                uint64_t v36 = &v6[v35];
                uint64_t v37 = *(void *)&v30[v35];
                v36[2] = v30[v35 + 2];
                *(void *)uint64_t v36 = v37;
                v35 += 4;
              }
              while (&v30[v35] != v29);
            }
            return *(double *)&v14;
          }
        }
        if (v23 != v27)
        {
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = &v6[v38];
            uint64_t v40 = *(void *)&v23[v38];
            v39[2] = v23[v38 + 2];
            *(void *)uint64_t v39 = v40;
            v38 += 4;
          }
          while (&v23[v38] != v27);
        }
      }
      else
      {
        sub_1CCF661BC(a1, v25, v26, a4, a5);
        sub_1CCF661BC(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, a5);
        *(void *)&long long v14 = sub_1CCF66830(v6, (const char *)&v6[4 * (a3 >> 1)], (unsigned int *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v23, a5).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      uint64_t v8 = a1 + 16;
      if (a1 + 16 != a2)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a1;
        do
        {
          uint64_t v11 = v8;
          long long v47 = *(_OWORD *)(*(void *)(*((void *)v10 + 2) + 40) + 16 * *((unsigned int *)v10 + 6));
          unsigned int v12 = sub_1CD3DB440((llvm::EVT *)&v47, a2);
          long long v46 = *(_OWORD *)(*(void *)(*(void *)v10 + 40) + 16 * *((unsigned int *)v10 + 2));
          if (v12 > sub_1CD3DB440((llvm::EVT *)&v46, v13))
          {
            uint64_t v15 = *(void *)v11;
            uint64_t v16 = *((unsigned int *)v10 + 6);
            uint64_t v17 = v9;
            while (1)
            {
              unsigned int v18 = (char *)v6 + v17;
              *((void *)v18 + 2) = *(void *)((char *)v6 + v17);
              *((_DWORD *)v18 + 6) = *(unsigned int *)((char *)v6 + v17 + 8);
              if (!v17) {
                break;
              }
              long long v47 = *(_OWORD *)(*(void *)(v15 + 40) + 16 * v16);
              unsigned int v19 = sub_1CD3DB440((llvm::EVT *)&v47, a2);
              long long v46 = *(_OWORD *)(*(void *)(*((void *)v18 - 2) + 40) + 16 * *((unsigned int *)v18 - 2));
              v17 -= 16;
              if (v19 <= sub_1CD3DB440((llvm::EVT *)&v46, v20))
              {
                uint64_t v21 = (uint64_t)v6 + v17 + 16;
                goto LABEL_14;
              }
            }
            uint64_t v21 = (uint64_t)v6;
LABEL_14:
            *(void *)uint64_t v21 = v15;
            *(_DWORD *)(v21 + 8) = v16;
          }
          uint64_t v8 = v11 + 16;
          v9 += 16;
          uint64_t v10 = v11;
        }
        while (v11 + 16 != a2);
      }
    }
  }
  return *(double *)&v14;
}

const char *sub_1CCF66534(const char *result, const char *a2, unint64_t a3, unsigned int *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if (a3 == 2)
    {
      int v30 = a2 - 16;
      long long v35 = *(_OWORD *)(*(void *)(*((void *)a2 - 2) + 40) + 16 * *((unsigned int *)a2 - 2));
      unsigned int v31 = sub_1CD3DB440((llvm::EVT *)&v35, a2);
      long long v34 = *(_OWORD *)(*(void *)(*(void *)v6 + 40) + 16 * *((unsigned int *)v6 + 2));
      __n128 result = (const char *)sub_1CD3DB440((llvm::EVT *)&v34, v32);
      if (v31 <= result)
      {
        *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
        long long v33 = *(_OWORD *)v30;
      }
      else
      {
        *(_OWORD *)uint64_t v4 = *(_OWORD *)v30;
        long long v33 = *(_OWORD *)v6;
      }
      *((_OWORD *)v4 + 1) = v33;
    }
    else if ((uint64_t)a3 > 8)
    {
      char v20 = &result[16 * (a3 >> 1)];
      sub_1CCF661BC(result, v20, a3 >> 1, a4, a3 >> 1);
      __n128 result = (const char *)sub_1CCF661BC(&v6[16 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[4 * (a3 >> 1)], a3 - (a3 >> 1));
      char v22 = (unsigned int *)&v6[16 * (a3 >> 1)];
      while (v22 != (unsigned int *)a2)
      {
        long long v35 = *(_OWORD *)(*(void *)(*(void *)v22 + 40) + 16 * v22[2]);
        unsigned int v23 = sub_1CD3DB440((llvm::EVT *)&v35, v21);
        long long v34 = *(_OWORD *)(*(void *)(*(void *)v6 + 40) + 16 * *((unsigned int *)v6 + 2));
        __n128 result = (const char *)sub_1CD3DB440((llvm::EVT *)&v34, v24);
        if (v23 <= result)
        {
          long long v27 = *(_OWORD *)v6;
          v6 += 16;
          long long v26 = v27;
        }
        else
        {
          long long v25 = *(_OWORD *)v22;
          v22 += 4;
          long long v26 = v25;
        }
        *(_OWORD *)uint64_t v4 = v26;
        v4 += 4;
        if (v6 == v20)
        {
          if (v22 != (unsigned int *)a2)
          {
            uint64_t v28 = 0;
            do
            {
              *(_OWORD *)&v4[v28] = *(_OWORD *)&v22[v28];
              v28 += 4;
            }
            while (&v22[v28] != (unsigned int *)a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v29 = 0;
        do
        {
          *(_OWORD *)&v4[v29] = *(_OWORD *)&v6[v29 * 4];
          v29 += 4;
        }
        while (&v6[v29 * 4] != v20);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      uint64_t v8 = result + 16;
      if (result + 16 != a2)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a4;
        do
        {
          uint64_t v11 = v8;
          unsigned int v12 = v10 + 4;
          long long v35 = *(_OWORD *)(*(void *)(*((void *)v6 + 2) + 40) + 16 * *((unsigned int *)v6 + 6));
          unsigned int v13 = sub_1CD3DB440((llvm::EVT *)&v35, a2);
          long long v34 = *(_OWORD *)(*(void *)(*(void *)v10 + 40) + 16 * v10[2]);
          __n128 result = (const char *)sub_1CD3DB440((llvm::EVT *)&v34, v14);
          if (v13 <= result)
          {
            *(_OWORD *)unsigned int v12 = *(_OWORD *)v11;
          }
          else
          {
            *(_OWORD *)unsigned int v12 = *(_OWORD *)v10;
            uint64_t v15 = v4;
            if (v10 != v4)
            {
              uint64_t v16 = v9;
              while (1)
              {
                uint64_t v15 = (unsigned int *)((char *)v4 + v16);
                long long v35 = *(_OWORD *)(*(void *)(*(void *)v11 + 40) + 16 * *((unsigned int *)v6 + 6));
                unsigned int v17 = sub_1CD3DB440((llvm::EVT *)&v35, a2);
                long long v34 = *(_OWORD *)(*(void *)(*((void *)v15 - 2) + 40) + 16 * *(v15 - 2));
                __n128 result = (const char *)sub_1CD3DB440((llvm::EVT *)&v34, v18);
                if (v17 <= result) {
                  break;
                }
                *(void *)uint64_t v15 = *((void *)v15 - 2);
                v15[2] = *(v15 - 2);
                v16 -= 16;
                if (!v16)
                {
                  uint64_t v15 = v4;
                  break;
                }
              }
            }
            uint64_t v19 = *(void *)v11;
            v15[2] = *((_DWORD *)v11 + 2);
            *(void *)uint64_t v15 = v19;
          }
          uint64_t v8 = v11 + 16;
          v9 += 16;
          uint64_t v10 = v12;
          uint64_t v6 = v11;
        }
        while (v11 + 16 != a2);
      }
    }
  }
  return result;
}

__n128 sub_1CCF66830(unsigned int *a1, const char *a2, unsigned int *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = (unsigned int *)a2;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = &a1[v13];
        __n128 v81 = *(__n128 *)(*(void *)(*(void *)v11 + 40) + 16 * v11[2]);
        unsigned int v16 = sub_1CD3DB440((llvm::EVT *)&v81, a2);
        long long v80 = *(_OWORD *)(*(void *)(*(void *)v15 + 40) + 16 * v15[2]);
        if (v16 > sub_1CD3DB440((llvm::EVT *)&v80, v17)) {
          break;
        }
        v13 += 4;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v20 = -v14;
      __src = a6;
      uint64_t v78 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          unsigned int v71 = &a1[v13];
          __n128 result = *(__n128 *)&a1[v13];
          __n128 v81 = result;
          uint64_t v72 = *(void *)v11;
          v71[2] = v11[2];
          *(void *)unsigned int v71 = v72;
          unint64_t v73 = v81.n128_u64[0];
          v11[2] = v81.n128_u32[2];
          *(void *)uint64_t v11 = v73;
          return result;
        }
        if (v14 > 0) {
          uint64_t v20 = 1 - v14;
        }
        uint64_t v76 = v20 >> 1;
        char v22 = &a1[4 * (v20 >> 1) + v13];
        if (a3 != v11)
        {
          unint64_t v27 = ((char *)a3 - (char *)v11) >> 4;
          a3 = v11;
          do
          {
            uint64_t v28 = &a3[4 * (v27 >> 1)];
            __n128 v81 = *(__n128 *)(*(void *)(*(void *)v28 + 40) + 16 * v28[2]);
            unsigned int v29 = sub_1CD3DB440((llvm::EVT *)&v81, a2);
            long long v80 = *(_OWORD *)(*(void *)(*(void *)v22 + 40) + 16 * v22[2]);
            unsigned int v31 = sub_1CD3DB440((llvm::EVT *)&v80, v30);
            if (v29 <= v31) {
              v27 >>= 1;
            }
            else {
              v27 += ~(v27 >> 1);
            }
            if (v29 > v31) {
              a3 = v28 + 4;
            }
          }
          while (v27);
        }
        uint64_t v26 = ((char *)a3 - (char *)v11) >> 4;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v21 = v8;
        }
        else {
          uint64_t v21 = v8 + 1;
        }
        uint64_t v74 = v21 >> 1;
        a3 = &v11[4 * (v21 >> 1)];
        char v22 = v11;
        if (v15 != v11)
        {
          unint64_t v23 = ((char *)v11 - (char *)a1 - v13 * 4) >> 4;
          char v22 = &a1[v13];
          do
          {
            unint64_t v24 = &v22[4 * (v23 >> 1)];
            __n128 v81 = *(__n128 *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
            unsigned int v75 = sub_1CD3DB440((llvm::EVT *)&v81, a2);
            long long v80 = *(_OWORD *)(*(void *)(*(void *)v24 + 40) + 16 * v24[2]);
            if (v75 > sub_1CD3DB440((llvm::EVT *)&v80, v25))
            {
              v23 >>= 1;
            }
            else
            {
              char v22 = v24 + 4;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
        }
        uint64_t v76 = ((char *)v22 - (char *)a1 - v13 * 4) >> 4;
        uint64_t v26 = v74;
      }
      uint64_t v32 = a3;
      if (v22 != v11)
      {
        uint64_t v32 = v22;
        if (v11 != a3)
        {
          if (v22 + 4 == v11)
          {
            __n128 v81 = *(__n128 *)v22;
            memmove(v22, v11, (char *)a3 - (char *)v11 - 4);
            uint64_t v32 = (unsigned int *)((char *)v22 + (char *)a3 - (char *)v11);
            unsigned __int32 v39 = v81.n128_u32[2];
            *(void *)uint64_t v32 = v81.n128_u64[0];
            v32[2] = v39;
          }
          else if (v11 + 4 == a3)
          {
            uint64_t v32 = v22 + 4;
            __n128 v81 = *((__n128 *)a3 - 1);
            if (a3 - 4 != v22) {
              memmove(v22 + 4, v22, (char *)(a3 - 4) - (char *)v22 - 4);
            }
            unint64_t v40 = v81.n128_u64[0];
            v22[2] = v81.n128_u32[2];
            *(void *)char v22 = v40;
          }
          else
          {
            uint64_t v33 = ((char *)v11 - (char *)v22) >> 4;
            if (v33 == ((char *)a3 - (char *)v11) >> 4)
            {
              uint64_t v34 = 0;
              do
              {
                long long v35 = &v11[v34];
                uint64_t v36 = &v22[v34];
                __n128 v81 = *(__n128 *)&v22[v34];
                uint64_t v37 = *(void *)&v11[v34];
                v36[2] = v11[v34 + 2];
                *(void *)uint64_t v36 = v37;
                unint64_t v38 = v81.n128_u64[0];
                void v35[2] = v81.n128_u32[2];
                *(void *)long long v35 = v38;
                if (&v22[v34 + 4] == v11) {
                  break;
                }
                v34 += 4;
              }
              while (v35 + 4 != a3);
              uint64_t v32 = v11;
            }
            else
            {
              uint64_t v41 = ((char *)a3 - (char *)v11) >> 4;
              uint64_t v42 = ((char *)v11 - (char *)v22) >> 4;
              do
              {
                uint64_t v43 = v42;
                uint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                unsigned int v44 = &v22[4 * v42];
                do
                {
                  __n128 v45 = *((__n128 *)v44 - 1);
                  v44 -= 4;
                  __n128 v81 = v45;
                  long long v46 = &v44[4 * v33];
                  long long v47 = v44;
                  do
                  {
                    uint64_t v48 = v47;
                    long long v47 = v46;
                    uint64_t v49 = *(void *)v46;
                    *((_DWORD *)v48 + 2) = *((_DWORD *)v47 + 2);
                    *uint64_t v48 = v49;
                    long long v46 = &v22[4 * (v33 - (((char *)a3 - (char *)v47) >> 4))];
                    if (v33 < ((char *)a3 - (char *)v47) >> 4) {
                      long long v46 = (unsigned int *)&v47[2 * v33];
                    }
                  }
                  while (v46 != v44);
                  unint64_t v50 = v81.n128_u64[0];
                  *((_DWORD *)v47 + 2) = v81.n128_u32[2];
                  *long long v47 = v50;
                }
                while (v44 != v22);
              }
              uint64_t v32 = &v22[4 * (((char *)a3 - (char *)v11) >> 4)];
            }
          }
        }
      }
      a4 = -(v76 + v14);
      uint64_t v51 = v8 - v26;
      if (v76 + v26 >= v8 - (v76 + v26) - v14)
      {
        sub_1CCF66830(v32, a3, v78, a4, v8 - v26, __src, a7);
        a3 = v22;
        a6 = __src;
        uint64_t v51 = v26;
        a4 = v76;
        uint64_t v78 = v32;
      }
      else
      {
        int v52 = v22;
        a6 = __src;
        sub_1CCF66830(v15, v52, v32, v76, v26, __src, a7);
        uint64_t v15 = v32;
      }
      uint64_t v8 = v51;
      a1 = v15;
      uint64_t v11 = a3;
      a3 = v78;
      if (!v51) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (a1 != v11)
      {
        unint64_t v62 = 0;
        do
        {
          __n128 result = *(__n128 *)&a1[v62 / 4];
          *(__n128 *)&a6[v62] = result;
          v62 += 16;
        }
        while (&a1[v62 / 4] != v11);
        if (v62)
        {
          uint64_t v63 = (unsigned int *)a6;
          while (v11 != a3)
          {
            __n128 v81 = *(__n128 *)(*(void *)(*(void *)v11 + 40) + 16 * v11[2]);
            unsigned int v64 = sub_1CD3DB440((llvm::EVT *)&v81, a2);
            long long v80 = *(_OWORD *)(*(void *)(*(void *)v63 + 40) + 16 * v63[2]);
            if (v64 <= sub_1CD3DB440((llvm::EVT *)&v80, v65))
            {
              uint64_t v67 = *(void *)v63;
              a1[2] = v63[2];
              *(void *)a1 = v67;
              v63 += 4;
            }
            else
            {
              uint64_t v66 = *(void *)v11;
              a1[2] = v11[2];
              *(void *)a1 = v66;
              v11 += 4;
            }
            a1 += 4;
            if (&a6[v62] == (char *)v63) {
              return result;
            }
          }
          memmove(a1, v63, a6 - (char *)v63 + v62 - 4);
        }
      }
    }
    else if (v11 != a3)
    {
      uint64_t v53 = 0;
      do
      {
        __n128 result = *(__n128 *)&v11[v53];
        *(__n128 *)&a6[v53 * 4] = result;
        v53 += 4;
      }
      while (&v11[v53] != a3);
      if (v53 * 4)
      {
        uint64_t v54 = &a6[v53 * 4];
        uint64_t v55 = a3 - 4;
        while (v11 != a1)
        {
          __n128 v81 = *(__n128 *)(*(void *)(*((void *)v54 - 2) + 40) + 16 * *((unsigned int *)v54 - 2));
          unsigned int v56 = sub_1CD3DB440((llvm::EVT *)&v81, a2);
          long long v80 = *(_OWORD *)(*(void *)(*((void *)v11 - 2) + 40) + 16 * *(v11 - 2));
          unsigned int v58 = sub_1CD3DB440((llvm::EVT *)&v80, v57);
          if (v56 <= v58) {
            long long v59 = (unsigned int *)(v54 - 16);
          }
          else {
            long long v59 = v11 - 4;
          }
          if (v56 > v58) {
            v11 -= 4;
          }
          uint64_t v60 = *(void *)v59;
          unsigned int v61 = v59[2];
          if (v56 <= v58) {
            v54 -= 16;
          }
          v55[2] = v61;
          *(void *)uint64_t v55 = v60;
          v55 -= 4;
          if (v54 == a6) {
            return result;
          }
        }
        if (v54 != a6)
        {
          unint64_t v68 = 0;
          do
          {
            long long v69 = &v55[v68 / 4];
            uint64_t v70 = *(void *)&v54[v68 - 16];
            v69[2] = *(_DWORD *)&v54[v68 - 8];
            *(void *)long long v69 = v70;
            v68 -= 16;
          }
          while (&v54[v68] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCF66E9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v24[0] = a5;
  v24[1] = a6;
  int v8 = *(unsigned __int16 *)(a1 + 24);
  if (v8 != 150
    || (uint64_t v9 = *(void *)(a1 + 32),
        uint64_t result = *(void *)(v9 + 40),
        uint64_t v11 = (unsigned __int8 *)(*(void *)(result + 40) + 16 * *(unsigned int *)(*(void *)(a1 + 32) + 48)),
        int v12 = *v11,
        v12 != a5)
    || ((v13 = *((void *)v11 + 1), !v12) ? (BOOL v14 = v13 == a6) : (BOOL v14 = 1),
        !v14 || *(void *)(v9 + 80) != a3 || *(_DWORD *)(v9 + 88) != a4))
  {
    int v15 = *(unsigned __int16 *)(a3 + 24);
    if (v15 != 35 && v15 != 11) {
      return 0;
    }
    if (v8 != 149) {
      return 0;
    }
    unsigned int v17 = (unsigned __int8 *)(*(void *)(**(void **)(a1 + 32) + 40)
                            + 16 * *(unsigned int *)(*(void *)(a1 + 32) + 8));
    if (*v17 != a5 || !(_BYTE)a5 && *((void *)v17 + 1) != a6) {
      return 0;
    }
    uint64_t v18 = *(void *)(a3 + 80);
    uint64_t v19 = (unint64_t *)(v18 + 24);
    if (*(_DWORD *)(v18 + 32) >= 0x41u) {
      uint64_t v19 = (unint64_t *)*v19;
    }
    unint64_t v20 = *v19;
    if (!(v20 % sub_1CC4A0738((llvm::EVT *)v24)))
    {
      uint64_t v21 = *(void *)(a3 + 80);
      char v22 = (unint64_t *)(v21 + 24);
      if (*(_DWORD *)(v21 + 32) >= 0x41u) {
        char v22 = (unint64_t *)*v22;
      }
      unint64_t v23 = *v22;
      return *(void *)(*(void *)(a1 + 32)
                       + 40 * (v23 / sub_1CC4A0738((llvm::EVT *)v24)));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1CCF66FFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  v74[6] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(uint64_t **)a1;
  long long v69 = *(_OWORD *)(*(void *)(**(void **)(a4 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a4 + 32) + 8));
  int v14 = *(unsigned __int16 *)(a4 + 56);
  int v15 = sub_1CD3DB440((llvm::EVT *)&v69, a2);
  if (!(_BYTE)v69 || !*(void *)(v13[1] + 8 * v69 + 96) || !a7) {
    return 0;
  }
  int v16 = v15;
  uint64_t v17 = **(unsigned int **)(a1 + 8);
  uint64_t v18 = 4 * a7;
  for (uint64_t i = a6; *i < (int)v17; ++i)
  {
    v18 -= 4;
    if (!v18) {
      return 0;
    }
  }
  unsigned int v71 = v74;
  int v73 = 12;
  if (v17 >= 0xD)
  {
    unsigned int v72 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v17) {
    bzero(v74, 4 * v17);
  }
  unsigned int v72 = v17;
  if (!v14)
  {
    unint64_t v20 = 0;
    goto LABEL_49;
  }
  unsigned int v22 = 0;
  unint64_t v23 = *(unsigned int **)(a1 + 8);
  unint64_t v24 = (int *)v71;
  unsigned int v25 = *v23;
  unsigned int v26 = *v23;
  while (!v26)
  {
LABEL_31:
    if (++v22 == v14)
    {
      unint64_t v20 = 0;
      goto LABEL_49;
    }
  }
  uint64_t v27 = 0;
  while (1)
  {
    if (v72)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 4 * v72;
      do
      {
        v24[v28] = v28;
        ++v28;
        v29 -= 4;
      }
      while (v29);
      unsigned int v25 = *v23;
    }
    if (v16)
    {
      int v30 = &v24[v27];
      unsigned int v31 = v25 + v22 * v16;
      uint64_t v32 = 4 * v16;
      do
      {
        *v30++ = v31++;
        v32 -= 4;
      }
      while (v32);
      unsigned int v25 = *v23;
    }
    if (!v25) {
      break;
    }
    uint64_t v33 = v25;
    uint64_t v34 = v24;
    long long v35 = a6;
    while (1)
    {
      int v37 = *v34++;
      int v36 = v37;
      int v39 = *v35++;
      int v38 = v39;
      if ((v39 & 0x80000000) == 0 && v36 != v38) {
        break;
      }
      if (!--v33) {
        goto LABEL_33;
      }
    }
    v27 += v16;
    unsigned int v26 = v25;
    if (v25 == v27) {
      goto LABEL_31;
    }
  }
LABEL_33:
  unint64_t v40 = (void *)*v13;
  uint64_t v41 = *(uint64_t **)(a1 + 16);
  uint64_t v42 = *v41;
  uint64_t v43 = *(unsigned __int8 **)(*v41 + 64);
  uint64_t v67 = v43;
  if (v43)
  {
    llvm::MetadataTracking::track((uint64_t)&v67, v43, 2);
    uint64_t v45 = *v13;
    long long v46 = *(uint64_t **)(a1 + 16);
    uint64_t v44 = *v46;
    uint64_t v43 = *(unsigned __int8 **)(*v46 + 64);
  }
  else
  {
    uint64_t v44 = v42;
    uint64_t v45 = (uint64_t)v40;
  }
  int v68 = *(_DWORD *)(v42 + 60);
  uint64_t v47 = *(void *)(a1 + 24);
  uint64_t v48 = *(llvm **)v47;
  uint64_t v49 = *(void *)(v47 + 8);
  unint64_t v50 = (uint64_t *)(*(void *)(a4 + 32) + 40 * v22);
  uint64_t v51 = *v50;
  uint64_t v52 = v50[1];
  uint64_t v65 = v43;
  if (v43) {
    llvm::MetadataTracking::track((uint64_t)&v65, v43, 2);
  }
  int v66 = *(_DWORD *)(v44 + 60);
  uint64_t v53 = sub_1CD7EC9F4(v45, v27, (uint64_t)&v65, 0);
  uint64_t v56 = v40[104];
  if (v56) {
    LOWORD(v56) = *(_WORD *)(v56 + 8);
  }
  unint64_t v20 = sub_1CD7F5D38(v40, (const char *)0x96, (const llvm::APInt *)&v67, v48, v49, (uint64_t)a2, a3, v55, v51, v52, v53, v54, SHIDWORD(v54), v56);
  if (v65)
  {
    int v57 = *v65;
    if ((v57 - 4) > 0x1E)
    {
      if ((v57 - 3) >= 0xFFFFFFFE) {
        long long v59 = v65;
      }
      else {
        long long v59 = 0;
      }
      if ((v57 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v60 = (unint64_t)(v59 + 8);
LABEL_56:
        uint64_t v70 = &v65;
        sub_1CC5FA668(v60 + 16, &v70);
        goto LABEL_45;
      }
      if (v57 == 3) {
        *((void *)v65 + 1) = 0;
      }
    }
    else if ((v65[1] & 0x7F) == 2 || *((_DWORD *)v65 + 3))
    {
      uint64_t v63 = *((void *)v65 + 2);
      if ((v63 & 4) != 0)
      {
        unint64_t v60 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (v60) {
          goto LABEL_56;
        }
      }
    }
  }
LABEL_45:
  if (v67)
  {
    int v58 = *v67;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        unsigned int v61 = v67;
      }
      else {
        unsigned int v61 = 0;
      }
      if ((v58 - 3) < 0xFFFFFFFE)
      {
        if (v58 == 3) {
          *((void *)v67 + 1) = 0;
        }
        goto LABEL_49;
      }
      unint64_t v62 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v67[1] & 0x7F) != 2 && !*((_DWORD *)v67 + 3)) {
        goto LABEL_49;
      }
      uint64_t v64 = *((void *)v67 + 2);
      if ((v64 & 4) == 0) {
        goto LABEL_49;
      }
      unint64_t v62 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v62) {
        goto LABEL_49;
      }
    }
    uint64_t v65 = (unsigned __int8 *)&v67;
    sub_1CC5FA668(v62 + 16, &v65);
  }
LABEL_49:
  if (v71 != v74) {
    free(v71);
  }
  return v20;
}

uint64_t sub_1CCF6741C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  if (sub_1CD804960(*(void *)(a4 + 80), **(const char ***)(a4 + 40), *(void *)(*(void *)(a4 + 40) + 8))) {
    return 0;
  }
  *a9 = 0;
  *((_DWORD *)a9 + 2) = 0;
  *((_DWORD *)a8 + 2) = 0;
  *a8 = 0;
  *((_DWORD *)a10 + 2) = 0;
  int v19 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1) {
    return 1;
  }
  uint64_t v56 = a7;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  do
  {
    int v22 = *(_DWORD *)(*(void *)(a3 + 80) + 4 * v21);
    if (v22 < 0) {
      goto LABEL_26;
    }
    if (v22 < v19) {
      int v23 = v19;
    }
    else {
      int v23 = -v19;
    }
    if (!a2) {
      int v23 = 0;
    }
    v22 += v23;
    if (v22 >= v19)
    {
      uint64_t v25 = a5;
      int v26 = a6;
    }
    else
    {
      int v22 = *(_DWORD *)(*(void *)(a4 + 80) + 4 * v22);
      if (v22 < 0) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(a4 + 32) + 40 * (v22 >= v19);
      uint64_t v25 = *(void *)v24;
      int v26 = *(_DWORD *)(v24 + 8);
    }
    int v27 = *(unsigned __int16 *)(v25 + 24);
    if (v27 == 51)
    {
      unsigned int v28 = *((_DWORD *)a10 + 3);
      int v22 = -1;
      goto LABEL_27;
    }
    v22 %= v19;
    uint64_t v29 = *a8;
    if (!*a8 || (int v30 = *((_DWORD *)a8 + 2), v29 == v25) && v30 == v26)
    {
      *a8 = v25;
      *((_DWORD *)a8 + 2) = v26;
      goto LABEL_25;
    }
    uint64_t v31 = *a9;
    if (!*a9 || (int v32 = *((_DWORD *)a9 + 2), v31 == v25) && v32 == v26)
    {
      *a9 = v25;
      *((_DWORD *)a9 + 2) = v26;
      v22 += *(_DWORD *)a1;
LABEL_25:
      unsigned int v20 = *((_DWORD *)a10 + 2);
LABEL_26:
      unsigned int v28 = *((_DWORD *)a10 + 3);
LABEL_27:
      if (v20 >= v28) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*a10 + 4 * v20) = v22;
      unsigned int v20 = *((_DWORD *)a10 + 2) + 1;
      *((_DWORD *)a10 + 2) = v20;
      goto LABEL_29;
    }
    if (v27 != 153)
    {
LABEL_43:
      unsigned int v41 = 0;
      goto LABEL_48;
    }
    int v33 = *(_DWORD *)(*(void *)(v25 + 80) + 4 * v22);
    if (v33 < 0
      || (uint64_t v34 = (_DWORD *)(*(void *)(v25 + 32) + 40 * (v33 >= v19)),
          uint64_t v35 = *(void *)v34,
          *(_WORD *)(*(void *)v34 + 24) == 51))
    {
      unsigned int v36 = *((_DWORD *)a10 + 3);
      int v37 = -1;
    }
    else
    {
      int v38 = v34[2];
      int v37 = v33 % v19;
      if (v35 != v29 || v38 != v30)
      {
        if (v35 != v31 || v38 != v32) {
          goto LABEL_43;
        }
        v37 += v19;
      }
      unsigned int v36 = *((_DWORD *)a10 + 3);
    }
    if (v20 >= v36) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*a10 + 4 * v20) = v37;
    unsigned int v20 = *((_DWORD *)a10 + 2) + 1;
    *((_DWORD *)a10 + 2) = v20;
    unsigned int v41 = 4;
LABEL_48:
    if (v41 <= 1) {
      unsigned int v41 = 1;
    }
    if (v41 != 4) {
      return 0;
    }
LABEL_29:
    ++v21;
    int v19 = *(_DWORD *)a1;
  }
  while (v21 != *(_DWORD *)a1);
  if (!v20) {
    return 1;
  }
  uint64_t v42 = 4 * v20;
  for (uint64_t i = (_DWORD *)*a10; (*i & 0x80000000) != 0; ++i)
  {
    v42 -= 4;
    if (!v42) {
      return 1;
    }
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v56 + 488))(v56)) {
    return 1;
  }
  long long v57 = *(_OWORD *)a8;
  int v44 = *((_DWORD *)a9 + 2);
  *a8 = *a9;
  *((_DWORD *)a8 + 2) = v44;
  *a9 = v57;
  *((_DWORD *)a9 + 2) = DWORD2(v57);
  uint64_t v45 = *a10;
  int v46 = *((_DWORD *)a10 + 2);
  if (v46)
  {
    uint64_t v47 = (int *)*a10;
    uint64_t v48 = *((unsigned int *)a10 + 2);
    do
    {
      int v49 = *v47;
      if ((*v47 & 0x80000000) == 0)
      {
        if (v49 >= v46) {
          int v50 = -v46;
        }
        else {
          int v50 = v46;
        }
        *uint64_t v47 = v50 + v49;
      }
      ++v47;
      --v48;
    }
    while (v48);
    uint64_t v51 = *((unsigned int *)a10 + 2);
  }
  else
  {
    uint64_t v51 = 0;
  }
  uint64_t v52 = *(uint64_t **)(a1 + 8);
  uint64_t v53 = *v52;
  uint64_t v54 = v52[1];
  uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v56 + 488);

  return v55(v56, v45, v51, v53, v54);
}

uint64_t *sub_1CCF67818(uint64_t *a1, uint64_t a2, void *a3, llvm *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  *a6 = 0;
  int v14 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v47 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v47, v14, 2);
  }
  int v48 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 24);
  if (v15 > 0xA)
  {
    if (v15 == 253)
    {
      unsigned int v24 = *(unsigned __int16 *)(a2 + 26);
      if ((v24 & 0x380) == 0)
      {
        long long v25 = *(_OWORD *)(a2 + 80);
        if ((v24 & 0xC00) != 0) {
          int v26 = (v24 >> 10) & 3;
        }
        else {
          int v26 = 1;
        }
        *a6 = 1;
        int v23 = sub_1CD7FAFD4(*a1, v26, (uint64_t)&v47, (uint64_t)a4, a5, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a8, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), v25, *((uint64_t *)&v25 + 1), *(void *)(a2 + 96));
        goto LABEL_20;
      }
    }
    else if (v15 == 11)
    {
      long long v46 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
      if (sub_1CD788450((llvm::EVT *)&v46)) {
        uint64_t v43 = 198;
      }
      else {
        uint64_t v43 = 199;
      }
      unint64_t v40 = (llvm::APFloatBase *)*a1;
      uint64_t v44 = *(void *)(*a1 + 832);
      if (v44) {
        __int16 v42 = *(_WORD *)(v44 + 8);
      }
      else {
        __int16 v42 = 0;
      }
LABEL_51:
      int v23 = sub_1CD7F3564(v40, (const char *)v43, (uint64_t)&v47, a4, a5, a2, a3, v42);
LABEL_20:
      uint64_t v34 = v23;
      goto LABEL_28;
    }
  }
  else if (v15 == 3)
  {
    int v27 = sub_1CCF67CB8((uint64_t)a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), (uint64_t)a4, a5);
    if (v27)
    {
      uint64_t v30 = *(void *)(a2 + 32);
      uint64_t v31 = *(void *)(v30 + 40);
      uint64_t v32 = *(void *)(v30 + 48);
      uint64_t v33 = *(void *)(*a1 + 832);
      if (v33) {
        LOWORD(v33) = *(_WORD *)(v33 + 8);
      }
      int v23 = sub_1CCFDED5C(*a1, 3, (const llvm::APInt *)&v47, a4, a5, (uint64_t)v27, v28, v29, v31, v32, v33);
      goto LABEL_20;
    }
  }
  else if (v15 == 4)
  {
    int v16 = sub_1CCF67ED4((llvm::APFloatBase **)a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), (uint64_t)a4, a5);
    if (v16)
    {
      uint64_t v19 = *(void *)(a2 + 32);
      uint64_t v20 = *(void *)(v19 + 40);
      uint64_t v21 = *(void *)(v19 + 48);
      uint64_t v22 = *(void *)(*a1 + 832);
      if (v22) {
        LOWORD(v22) = *(_WORD *)(v22 + 8);
      }
      int v23 = sub_1CCFDED5C(*a1, 4, (const llvm::APInt *)&v47, a4, a5, (uint64_t)v16, v17, v18, v20, v21, v22);
      goto LABEL_20;
    }
  }
  if ((_BYTE)a4)
  {
    uint64_t v35 = a1[1];
    if (a4 == 1 || (uint64_t v34 = 0, *(void *)(v35 + 8 * a4 + 96)))
    {
      if (*(unsigned char *)(v35 + 390 * a4 + 4062))
      {
        uint64_t v34 = 0;
        goto LABEL_28;
      }
      unint64_t v40 = (llvm::APFloatBase *)*a1;
      uint64_t v41 = *(void *)(*a1 + 832);
      if (v41) {
        __int16 v42 = *(_WORD *)(v41 + 8);
      }
      else {
        __int16 v42 = 0;
      }
      uint64_t v43 = 200;
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v34 = (uint64_t *)a4;
  }
LABEL_28:
  if (v47)
  {
    int v36 = *v47;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        int v38 = v47;
      }
      else {
        int v38 = 0;
      }
      if ((v36 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = (unint64_t)(v38 + 8);
LABEL_38:
        *(void *)&long long v46 = &v47;
        sub_1CC5FA668(v39 + 16, &v46);
        return v34;
      }
      if (v36 == 3) {
        *((void *)v47 + 1) = 0;
      }
    }
    else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
    {
      uint64_t v45 = *((void *)v47 + 2);
      if ((v45 & 4) != 0)
      {
        unint64_t v39 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_38;
        }
      }
    }
  }
  return v34;
}

uint64_t sub_1CCF67B28(llvm::APFloatBase **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v24 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v24, v6, 2);
  }
  int v25 = *(_DWORD *)(a2 + 60);
  uint64_t v7 = *(void *)(a2 + 40);
  int v8 = *(llvm **)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v10 = *((void *)*a1 + 104);
  if (v10) {
    __int16 v11 = *(_WORD *)(v10 + 8);
  }
  else {
    __int16 v11 = 0;
  }
  int v12 = sub_1CD7F3564(*a1, (const char *)0xC9, (uint64_t)&v24, v8, v9, a3, 0, v11);
  uint64_t v13 = *a1;
  uint64_t v21 = *((void *)*a1 + 82);
  uint64_t v22 = v13;
  *((void *)v13 + 82) = &v20;
  uint64_t v20 = (unsigned __int8 **)&unk_1F26413F0;
  int v23 = a1;
  sub_1CD800DA0((uint64_t)v13, a2, 0, (uint64_t)v12, v14);
  sub_1CD800DA0((uint64_t)*a1, a2, 1, a3, 1);
  sub_1CCEF1420((uint64_t *)a1, a2);
  uint64_t result = sub_1CCEF0788((uint64_t)a1, (uint64_t)v12);
  *((void *)v22 + 82) = v21;
  if (v24)
  {
    int v16 = *v24;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v24;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v16 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_16:
        uint64_t v20 = &v24;
        return sub_1CC5FA668(v18 + 16, &v20);
      }
      if (v16 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v19 = *((void *)v24 + 2);
      if ((v19 & 4) != 0)
      {
        unint64_t v18 = v19 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CCF67CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(_BYTE)a4) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (a4 == 1 || (__int16 v11 = 0, *(void *)(v10 + 8 * a4 + 96)))
  {
    if (*(unsigned char *)(v10 + 390 * a4 + 4066)) {
      return 0;
    }
    int v12 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    unsigned int v15 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v31 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v31, v15, 2);
    }
    int v32 = *(_DWORD *)(a2 + 60);
    LOBYTE(v33) = 0;
    __int16 v11 = (uint64_t *)sub_1CCF67818(a1, a2, a3, a4, a5, &v33);
    if (v11)
    {
      uint64_t v22 = v16;
      sub_1CCEF0788(a1, (uint64_t)v11);
      if ((_BYTE)v33) {
        sub_1CCF67B28((llvm::APFloatBase **)a1, a2, (uint64_t)v11);
      }
      int v23 = *(llvm::APFloatBase **)a1;
      uint64_t v24 = v11[5] + 16 * v22;
      int v25 = *(llvm **)v24;
      uint64_t v26 = *(void *)(v24 + 8);
      uint64_t v27 = sub_1CD7EDE1C((uint64_t)v23, v13, v14);
      uint64_t v30 = *((void *)v23 + 104);
      if (v30) {
        LOWORD(v30) = *(_WORD *)(v30 + 8);
      }
      __int16 v11 = sub_1CCFDED5C((uint64_t)v23, 204, (const llvm::APInt *)&v31, v25, v26, (uint64_t)v11, v22, v29, v27, v28, v30);
    }
    if (v31)
    {
      int v17 = *v31;
      if ((v17 - 4) <= 0x1E)
      {
        if ((v31[1] & 0x7F) != 2 && !*((_DWORD *)v31 + 3)) {
          return v11;
        }
        uint64_t v18 = *((void *)v31 + 2);
        if ((v18 & 4) == 0) {
          return v11;
        }
        unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
        if (!v19) {
          return v11;
        }
LABEL_22:
        uint64_t v33 = &v31;
        sub_1CC5FA668(v19 + 16, &v33);
        return v11;
      }
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = v31;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v19 = (unint64_t)(v21 + 8);
        goto LABEL_22;
      }
      if (v17 == 3) {
        *((void *)v31 + 1) = 0;
      }
    }
  }
  return v11;
}

uint64_t *sub_1CCF67ED4(llvm::APFloatBase **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v24 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v24, v13, 2);
  }
  int v25 = *(_DWORD *)(a2 + 60);
  LOBYTE(v26) = 0;
  uint64_t v14 = sub_1CCF67818(a1, a2, a3, a4, a5, &v26);
  if (v14)
  {
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    sub_1CCEF0788((uint64_t)a1, v14);
    if ((_BYTE)v26) {
      sub_1CCF67B28(a1, a2, v21);
    }
    uint64_t v16 = sub_1CD7EB9C8((uint64_t)*a1, v21, v22, (const llvm::APInt *)&v24, v11, v12);
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (v24)
  {
    int v17 = *v24;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        unint64_t v19 = v24;
      }
      else {
        unint64_t v19 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v20 = (unint64_t)(v19 + 8);
LABEL_15:
        uint64_t v26 = &v24;
        sub_1CC5FA668(v20 + 16, &v26);
        return v16;
      }
      if (v17 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v23 = *((void *)v24 + 2);
      if ((v23 & 4) != 0)
      {
        unint64_t v20 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v20) {
          goto LABEL_15;
        }
      }
    }
  }
  return v16;
}

uint64_t sub_1CCF68058()
{
  LODWORD(v3) = 1;
  v2.n128_u64[0] = (unint64_t)"Enable DAG combiner's use of IR alias analysis";
  v2.n128_u64[1] = 46;
  sub_1CD4C1500((uint64_t)&unk_1EBCF8C28, "combiner-global-alias-analysis", &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8C28, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"Enable DAG combiner's use of TBAA";
  v2.n128_u64[1] = 33;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF8CE8, "combiner-use-tbaa", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8CE8, &dword_1CB82C000);
  int v4 = 1;
  v2.n128_u64[0] = (unint64_t)"Bypass the profitability model of load slicing";
  v2.n128_u64[1] = 46;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCF8DA8, "combiner-stress-load-slicing", &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8DA8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"DAG combiner may split indexing from loads";
  v2.n128_u64[1] = 42;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF8E68, "combiner-split-load-index", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8E68, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"DAG combiner enable merging multiple stores into a wider store";
  v2.n128_u64[1] = 62;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF8F28, "combiner-store-merging", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8F28, &dword_1CB82C000);
  int v4 = 1;
  int v1 = 2048;
  v2.n128_u64[0] = (unint64_t)"Limit the number of operands to inline for Token Factors";
  v2.n128_u64[1] = 56;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBCF8FE8, "combiner-tokenfactor-inline-limit", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCF8FE8, &dword_1CB82C000);
  int v4 = 1;
  int v1 = 10;
  v2.n128_u64[0] = (unint64_t)"Limit the number of times for the same StoreNode and RootNode to bail out in store "
                                     "merging dependence check";
  v2.n128_u64[1] = 107;
  uint64_t v3 = &v1;
  sub_1CD788EB0(&v4, &v3, (long long *)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCF90A8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"DAG combiner enable reducing the width of load/op/store sequence";
  v2.n128_u64[1] = 64;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9168, "combiner-reduce-load-op-store-width", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9168, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"DAG combiner enable load/<replace bytes>/store with a narrower store";
  v2.n128_u64[1] = 68;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9228, "combiner-shrink-load-replace-store-with-store", &v4, (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9228, &dword_1CB82C000);
}

uint64_t sub_1CCF6835C(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 144);
  if (v3 == v2) {
    goto LABEL_64;
  }
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 136), (*(unsigned char *)v3 & 4) == 0))
  {
    uint64_t v4 = *(void *)(a1 + 136);
    if ((*(_WORD *)(v3 + 44) & 8) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 136);
      do
        uint64_t v4 = *(void *)(v4 + 8);
      while ((*(_WORD *)(v4 + 44) & 8) != 0);
    }
  }
  if (!v2) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 640) + 48;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (v3 != v2)
  {
    while (1)
    {
      unint64_t v9 = v3;
      uint64_t v10 = (unsigned char *)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8);
      if (!v10) {
        break;
      }
      unint64_t v3 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
      if ((*v10 & 4) == 0) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v11 = *(unsigned int *)(v9 + 40);
      if (!v11) {
        goto LABEL_31;
      }
      unsigned int v12 = 0;
      uint64_t v13 = 32 * v11;
      uint64_t v14 = (unsigned int *)(*(void *)(v9 + 32) + 4);
      do
      {
        if (!*(v14 - 1))
        {
          if ((*(v14 - 1) & 0x1000000) != 0)
          {
            if (v12) {
              goto LABEL_31;
            }
            unsigned int v12 = *v14;
          }
          else if ((*v14 & 0x80000000) != 0)
          {
            goto LABEL_31;
          }
        }
        v14 += 8;
        v13 -= 32;
      }
      while (v13);
      if (!v12) {
        goto LABEL_31;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = *(_DWORD *)(v15 + 416);
      if (!v16) {
        goto LABEL_37;
      }
      uint64_t v17 = *(void *)(v15 + 400);
      int v18 = v16 - 1;
      unsigned int v19 = v18 & (37 * v12);
      int v20 = *(_DWORD *)(v17 + 4 * v19);
      if (v12 != v20)
      {
        int v21 = 1;
        while (v20 != -1)
        {
          unsigned int v22 = v19 + v21++;
          unsigned int v19 = v22 & v18;
          int v20 = *(_DWORD *)(v17 + 4 * v19);
          if (v12 == v20) {
            goto LABEL_31;
          }
        }
LABEL_37:
        uint64_t v23 = *(void *)(v15 + 744);
        uint64_t v24 = *(void *)(v15 + 752);
        while (v23 != v24)
        {
          if (*(_DWORD *)(v23 + 8) == v12) {
            goto LABEL_31;
          }
          v23 += 16;
        }
        uint64_t v25 = *(void *)(a1 + 48);
        if ((v12 & 0x80000000) != 0) {
          uint64_t v26 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v26 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v12);
        }
        uint64_t v27 = *v26;
        if (v27)
        {
          while ((*(_DWORD *)v27 & 0x81000000) != 0)
          {
            uint64_t v27 = *(void *)(v27 + 24);
            if (!v27) {
              goto LABEL_46;
            }
          }
        }
        else
        {
LABEL_46:
          if (*(void *)(a1 + 144) == v9)
          {
            if (*(void *)(*(void *)(v9 + 24) + 56) == v9) {
              uint64_t v10 = 0;
            }
            *(void *)(a1 + 144) = v10;
          }
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v9);
        }
      }
LABEL_31:
      if (v3 == v2) {
        goto LABEL_10;
      }
    }
    unint64_t v3 = 0;
LABEL_18:
    while ((*(_WORD *)(v3 + 44) & 4) != 0)
      unint64_t v3 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 640);
  if (v5 != v6 + 48)
  {
    uint64_t v7 = *(void *)(a1 + 144);
    if (v7)
    {
      if ((*(unsigned char *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 8) != 0)
          uint64_t v7 = *(void *)(v7 + 8);
      }
      int v8 = (uint64_t *)(v7 + 8);
    }
    else
    {
      int v8 = (uint64_t *)(v6 + 56);
    }
    uint64_t v28 = *v8;
    if (*v8 != v5)
    {
      uint64_t v30 = *(void *)(v28 + 56);
      uint64_t v29 = (unsigned __int8 **)(v28 + 56);
      if (!v30)
      {
        uint64_t v31 = *(unsigned __int8 **)(v5 + 56);
        uint64_t v43 = v31;
        if (v31) {
          llvm::MetadataTracking::track((uint64_t)&v43, v31, 2);
        }
        if (&v43 != v29)
        {
          int v32 = *v29;
          if (*v29)
          {
            int v35 = *v32;
            if ((v35 - 4) > 0x1E)
            {
              if ((v35 - 3) >= 0xFFFFFFFE) {
                int v38 = *v29;
              }
              else {
                int v38 = 0;
              }
              if ((v35 - 3) < 0xFFFFFFFE)
              {
                if (v35 == 3) {
                  *((void *)v32 + 1) = 0;
                }
                goto LABEL_62;
              }
              unint64_t v37 = (unint64_t)(v38 + 8);
            }
            else
            {
              if ((v32[1] & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
                goto LABEL_62;
              }
              uint64_t v36 = *((void *)v32 + 2);
              if ((v36 & 4) == 0) {
                goto LABEL_62;
              }
              unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
              if (!v37) {
                goto LABEL_62;
              }
            }
            uint64_t v44 = v29;
            sub_1CC5FA668(v37 + 16, &v44);
          }
LABEL_62:
          uint64_t v33 = v43;
          *uint64_t v29 = v43;
          if (v33)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v43, v33, (uint64_t)v29);
            uint64_t v43 = 0;
          }
          goto LABEL_64;
        }
        if (!v43) {
          goto LABEL_64;
        }
        int v39 = *v43;
        if ((v39 - 4) > 0x1E)
        {
          if ((v39 - 3) >= 0xFFFFFFFE) {
            __int16 v42 = v43;
          }
          else {
            __int16 v42 = 0;
          }
          if ((v39 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v41 = (unint64_t)(v42 + 8);
LABEL_91:
            uint64_t v44 = &v43;
            sub_1CC5FA668(v41 + 16, &v44);
            goto LABEL_64;
          }
          if (v39 == 3) {
            *((void *)v43 + 1) = 0;
          }
        }
        else if ((v43[1] & 0x7F) == 2 || *((_DWORD *)v43 + 3))
        {
          uint64_t v40 = *((void *)v43 + 2);
          if ((v40 & 4) != 0)
          {
            unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
            if (v41) {
              goto LABEL_91;
            }
          }
        }
      }
    }
  }
LABEL_64:
  sub_1CBB8977C((_DWORD *)(a1 + 8));
  *(void *)(a1 + 136) = *(void *)(a1 + 144);
  uint64_t result = sub_1CD789154(a1);
  *(void *)(a1 + 152) = *(void *)(*(void *)(a1 + 32) + 648);
  return result;
}

uint64_t sub_1CCF68718(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  v116[8] = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 2:
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 1) {
        return 0;
      }
      unsigned int v114 = *(void **)(a2 - 32);
      int v16 = sub_1CD3CE844((_DWORD *)(a1[4] + 56), &v114);
      sub_1CD78B880((uint64_t)a1, (uint64_t *)v16[1], a2 + 48);
      return 1;
    case 7:
      if ((*(unsigned char *)(a1[10] + 1040) & 0x80) == 0) {
        return 1;
      }
      return (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, 1, 1, 284) != 0;
    case 12:
      int v52 = *(_DWORD *)(a2 + 20);
      if ((v52 & 0x40000000) != 0) {
        uint64_t v53 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v53 = (uint64_t *)(a2 - 32 * (v52 & 0x7FFFFFF));
      }
      uint64_t v57 = *v53;
      return sub_1CD78B994(a1, (llvm::EVT **)a2, v57);
    case 13:
      uint64_t v12 = 56;
      goto LABEL_62;
    case 14:
      uint64_t v12 = 96;
      goto LABEL_62;
    case 15:
      uint64_t v12 = 57;
      goto LABEL_62;
    case 16:
      uint64_t v12 = 97;
      goto LABEL_62;
    case 17:
      uint64_t v12 = 58;
      goto LABEL_62;
    case 18:
      uint64_t v12 = 98;
      goto LABEL_62;
    case 19:
      uint64_t v12 = 60;
      goto LABEL_62;
    case 20:
      uint64_t v12 = 59;
      goto LABEL_62;
    case 21:
      uint64_t v12 = 99;
      goto LABEL_62;
    case 22:
      uint64_t v12 = 62;
      goto LABEL_62;
    case 23:
      uint64_t v12 = 61;
      goto LABEL_62;
    case 24:
      uint64_t v12 = 100;
      goto LABEL_62;
    case 25:
      uint64_t v12 = 175;
      goto LABEL_62;
    case 26:
      uint64_t v12 = 177;
      goto LABEL_62;
    case 27:
      uint64_t v12 = 176;
      goto LABEL_62;
    case 28:
      uint64_t v12 = 171;
      goto LABEL_62;
    case 29:
      uint64_t v12 = 172;
      goto LABEL_62;
    case 30:
      uint64_t v12 = 173;
LABEL_62:
      return sub_1CCF696D8((uint64_t)a1, a2, v12);
    case 31:
      uint64_t v10 = a1[4] + 176;
      unsigned int v114 = (void *)a2;
      unint64_t v112 = 0;
      return sub_1CB87DF68(v10, &v114, &v112);
    case 34:
      int v54 = *(_DWORD *)(a2 + 20);
      if ((v54 & 0x40000000) != 0) {
        uint64_t v55 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v55 = (uint64_t *)(a2 - 32 * (v54 & 0x7FFFFFF));
      }
      uint64_t v3 = sub_1CD789230(a1, *v55);
      if (!v3) {
        return v3;
      }
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        return 0;
      }
      unsigned __int8 v58 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1[13] + 32))(a1[13], a1[11], 0);
      uint64_t v59 = 24;
      if (*(unsigned char *)(a2 + 16) == 62) {
        uint64_t v59 = 64;
      }
      uint64_t v60 = *(void *)(a2 + v59);
      int v61 = *(_DWORD *)(a2 + 20);
      if ((v61 & 0x40000000) != 0)
      {
        uint64_t v63 = *(void *)(a2 - 8);
        uint64_t v62 = v61 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v62 = v61 & 0x7FFFFFF;
        uint64_t v63 = a2 - 32 * v62;
      }
      uint64_t v64 = v60 | 4;
      uint64_t v65 = (void *)(v63 + 32);
      unsigned int v114 = (void *)(v63 + 32);
      uint64_t v115 = v64;
      if (v62 == 1) {
        goto LABEL_183;
      }
      unint64_t v66 = 0;
      uint64_t v67 = (void *)(v63 + 32 * v62);
      uint64_t v111 = v58;
      while (1)
      {
        int v68 = (void *)*v65;
        long long v69 = (llvm::Type *)(v115 & 0xFFFFFFFFFFFFFFF8);
        if ((v115 & 4) != 0 || !v69)
        {
          if (v69) {
            BOOL v73 = (v115 & 4) == 0;
          }
          else {
            BOOL v73 = 1;
          }
          if (v73)
          {
            if (v68) {
              BOOL v74 = *((unsigned char *)v68 + 16) == 16;
            }
            else {
              BOOL v74 = 0;
            }
            AggregateElement = (void *)*v65;
            if (!v74) {
              AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v68, 0);
            }
            uint64_t v78 = (unsigned int *)AggregateElement[3];
            uint64_t v76 = (unsigned int *)(AggregateElement + 3);
            uint64_t v77 = v78;
            if (v76[2] < 0x41) {
              uint64_t v77 = v76;
            }
            long long v69 = *(llvm::Type **)(*((void *)v69 + 2) + 8 * *v77);
          }
          if (*((unsigned char *)v68 + 16) != 16 || v68 == 0)
          {
            if (v66)
            {
              uint64_t v3 = sub_1CD789C70(a1, v111, 56, v3, v66, v111);
              if (!v3) {
                return 0;
              }
            }
            char v94 = (llvm::DataLayout *)a1[11];
            uint64_t v95 = sub_1CB83544C((uint64_t)v94, (uint64_t)v69);
            BOOL v97 = v96 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v94, v69, 1);
            if (v97) {
            uint64_t v100 = sub_1CD789A58((uint64_t)a1, (llvm::EVT **)v68);
            }
            if (!v100) {
              return 0;
            }
            unint64_t v101 = ((1 << Alignment) + ((unint64_t)(v95 + 7) >> 3) - 1) & -(1 << Alignment);
            if (v101 != 1 && !sub_1CD789C70(a1, v111, 58, v100, v101, v111)) {
              return 0;
            }
            uint64_t v93 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 72))(a1, v111, v111, 56, v3);
            if (!v93) {
              return 0;
            }
            goto LABEL_172;
          }
          uint64_t v80 = *((unsigned int *)v68 + 8);
          if (v80 > 0x40)
          {
            int v81 = 0;
            int64_t v82 = (unint64_t)(v80 + 63) >> 6;
            do
            {
              if (v82-- < 1) {
                break;
              }
              unint64_t v84 = *(void *)(v68[3] + 8 * v82);
              v81 += __clz(v84);
            }
            while (!v84);
            int v85 = v80 | 0xFFFFFFC0;
            if ((v80 & 0x3F) == 0) {
              int v85 = 0;
            }
            if (v81 + v85 == v80) {
              goto LABEL_161;
            }
          }
          else if (!v68[3])
          {
            goto LABEL_161;
          }
          if (v80 <= 0x3F)
          {
            uint64_t v86 = (uint64_t)(v68[3] << -(char)v80) >> -(char)v80;
          }
          else if (v80 == 64)
          {
            uint64_t v86 = v68[3];
          }
          else
          {
            uint64_t v86 = *(void *)v68[3];
          }
          long long v87 = (llvm::DataLayout *)a1[11];
          uint64_t v88 = sub_1CB83544C((uint64_t)v87, (uint64_t)v69);
          BOOL v90 = v89 == 1;
          char v92 = llvm::DataLayout::getAlignment(v87, v69, 1);
          if (v90) {
          unint64_t v72 = (((1 << v92) + ((unint64_t)(v88 + 7) >> 3) - 1) & -(1 << v92)) * v86;
          }
        }
        else
        {
          uint64_t v70 = v68 + 3;
          if (*((_DWORD *)v68 + 8) >= 0x41u) {
            uint64_t v70 = (void *)*v70;
          }
          if (!*v70) {
            goto LABEL_161;
          }
          unsigned int v71 = (void *)*v70;
          unint64_t v72 = *((void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)a1[11], (llvm::StructType *)(v115 & 0xFFFFFFFFFFFFFFF8))+ v71+ 2);
        }
        v66 += v72;
        if (v66 >= 0x800)
        {
          uint64_t v93 = sub_1CD789C70(a1, v111, 56, v3, v66, v111);
          if (!v93) {
            return 0;
          }
LABEL_172:
          uint64_t v3 = v93;
          unint64_t v66 = 0;
        }
LABEL_161:
        sub_1CB8460E4((uint64_t)&v114);
        uint64_t v65 = v114;
        if (v114 == v67)
        {
          if (!v66 || (uint64_t v3 = sub_1CD789C70(a1, v111, 56, v3, v66, v111), v3))
          {
LABEL_183:
            int v104 = v3;
LABEL_184:
            uint64_t v3 = 1;
            sub_1CD78997C((uint64_t)a1, a2, v104, 1);
          }
          return v3;
        }
      }
    case 38:
      uint64_t v9 = 201;
      goto LABEL_58;
    case 39:
      uint64_t v9 = 199;
      goto LABEL_58;
    case 40:
      uint64_t v9 = 198;
      goto LABEL_58;
    case 42:
      uint64_t v9 = 208;
      goto LABEL_58;
    case 44:
      uint64_t v9 = 202;
LABEL_58:
      return sub_1CCF6C074(a1, a2, v9);
    case 47:
    case 48:
      uint64_t v6 = a1[13];
      int v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0) {
        int v8 = *(llvm::EVT ****)(a2 - 8);
      }
      else {
        int v8 = (llvm::EVT ***)(a2 - 32 * (v7 & 0x7FFFFFF));
      }
      uint64_t v17 = (void *)sub_1CB87DC14(v6, a1[11], **v8, 0);
      uint64_t v19 = v18;
      unint64_t v112 = sub_1CB87DC14(a1[13], a1[11], *(llvm::EVT **)a2, 0);
      uint64_t v113 = v20;
      int v21 = v112;
      if (v112 == v17 && ((_BYTE)v112 || v20 == v19)) {
        goto LABEL_66;
      }
      if (sub_1CC277C0C((unsigned __int8 *)&v112, (uint64_t)v17, v19))
      {
        uint64_t v23 = a1;
        uint64_t v24 = a2;
        uint64_t v25 = 199;
        return sub_1CCF6C074(v23, v24, v25);
      }
      int v21 = v112;
LABEL_66:
      if (v21 == v17)
      {
        if ((_BYTE)v17) {
          BOOL v30 = 1;
        }
        else {
          BOOL v30 = v113 == v19;
        }
        if (v30) {
          goto LABEL_95;
        }
        unsigned int v114 = v17;
        uint64_t v115 = v19;
        goto LABEL_72;
      }
      unsigned int v114 = v17;
      uint64_t v115 = v19;
      if (!v21)
      {
LABEL_72:
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v112);
        goto LABEL_75;
      }
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v112);
LABEL_75:
      unint64_t v33 = ExtendedSizeInBits;
      int v34 = v32;
      if ((_BYTE)v17) {
        unint64_t v35 = sub_1CB87E200((unsigned __int8 *)&v114);
      }
      else {
        unint64_t v35 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v114);
      }
      if ((v34 != 1 || v36 == 1) && v33 < v35)
      {
        uint64_t v23 = a1;
        uint64_t v24 = a2;
        uint64_t v25 = 201;
        return sub_1CCF6C074(v23, v24, v25);
      }
LABEL_95:
      int v50 = *(_DWORD *)(a2 + 20);
      if ((v50 & 0x40000000) != 0) {
        uint64_t v51 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v51 = (uint64_t *)(a2 - 32 * (v50 & 0x7FFFFFF));
      }
      int v56 = sub_1CD789230(a1, *v51);
      if (v56)
      {
        int v104 = v56;
        goto LABEL_184;
      }
      return 0;
    case 49:
      uint64_t v13 = a1[13];
      int v14 = *(_DWORD *)(a2 + 20);
      if ((v14 & 0x40000000) != 0) {
        uint64_t v15 = *(llvm::EVT ****)(a2 - 8);
      }
      else {
        uint64_t v15 = (llvm::EVT ***)(a2 - 32 * (v14 & 0x7FFFFFF));
      }
      unsigned __int8 v37 = sub_1CB87DC14(v13, a1[11], **v15, 0);
      unsigned __int8 v38 = sub_1CB87DC14(a1[13], a1[11], *(llvm::EVT **)a2, 0);
      uint64_t v3 = 0;
      int v39 = v37;
      if (v37 == 1) {
        return v3;
      }
      int v40 = v38;
      if (v38 == 1) {
        return 0;
      }
      uint64_t v3 = v37;
      if (!v37) {
        return v3;
      }
      uint64_t v41 = a1[13];
      if (!*(void *)(v41 + 8 * v37 + 96)) {
        return 0;
      }
      uint64_t v42 = v38;
      if (!v38 || !*(void *)(v41 + 8 * v38 + 96)) {
        return 0;
      }
      int v43 = *(_DWORD *)(a2 + 20);
      uint64_t v44 = (v43 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v43 & 0x7FFFFFF));
      uint64_t v105 = sub_1CD789230(a1, *v44);
      if (!v105) {
        return 0;
      }
      int v106 = v105;
      if (v39 == v40) {
        goto LABEL_193;
      }
      int v107 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 64))(a1, v3, v42, 216, v105);
      if (!v107) {
        return 0;
      }
      int v106 = v107;
LABEL_193:
      int v104 = v106;
      goto LABEL_184;
    case 56:
      if (*(_DWORD *)(a1[10] + 484) == 21)
      {
        if (*(unsigned char *)(a2 + 16) != 84) {
          return 0;
        }
        uint64_t v28 = *(void *)(a2 - 32);
        if (!v28
          || *(unsigned char *)(v28 + 16)
          || *(void *)(v28 + 24) != *(void *)(a2 + 72)
          || (*(unsigned char *)(v28 + 33) & 0x20) == 0)
        {
          return 0;
        }
      }
      return sub_1CD78B05C((uint64_t)a1, a2);
    case 64:
      uint64_t v3 = 0;
      if (!a2 || *(unsigned char *)(a2 + 16) != 92) {
        return v3;
      }
      unsigned __int8 v26 = sub_1CB87DC14(a1[13], a1[11], *(llvm::EVT **)a2, (llvm::Type *)1);
      if (!v26) {
        return 0;
      }
      if (v26 != 2 && *(void *)(a1[13] + 8 * v26 + 96) == 0) {
        return 0;
      }
      uint64_t v45 = *(unsigned __int8 **)(a2 - 32);
      long long v46 = *(llvm **)v45;
      uint64_t v47 = a1[4];
      unint64_t v112 = (unint64_t)v45;
      unsigned int v114 = 0;
      if (sub_1CD3C8538((uint64_t *)(v47 + 80), &v112, &v114)) {
        int v49 = v114;
      }
      else {
        int v49 = (_DWORD *)(*(void *)(v47 + 80) + 16 * *(unsigned int *)(v47 + 96));
      }
      uint64_t v102 = a1[4];
      if (v49 == (_DWORD *)(*(void *)(v102 + 80) + 16 * *(unsigned int *)(v102 + 96)))
      {
        if (v45[16] < 0x1Cu) {
          return 0;
        }
        int v103 = sub_1CD3CD784(v102, (const llvm::Value *)v45);
      }
      else
      {
        int v103 = v49[2];
      }
      unsigned int v108 = llvm::ComputeLinearIndex(v46, *(_DWORD **)(a2 + 64), (_DWORD *)(*(void *)(a2 + 64) + 4 * *(unsigned int *)(a2 + 72)), 0, v48);
      unsigned int v114 = v116;
      uint64_t v115 = 0x400000000;
      llvm::ComputeValueVTs(a1[13], (llvm::DataLayout *)a1[11], (uint64_t)v46, (uint64_t)&v114, 0, 0, 0);
      if (v108)
      {
        uint64_t v109 = 0;
        uint64_t v110 = 16 * v108;
        do
        {
          v103 += (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a1[13] + 584))(a1[13], ***(void ***)a1[4], *(void *)((char *)v114 + v109), *(void *)((char *)v114 + v109 + 8), 0);
          v109 += 16;
        }
        while (v110 != v109);
      }
      sub_1CD78997C((uint64_t)a1, a2, v103, 1);
      if (v114 != v116) {
        free(v114);
      }
      return 1;
    case 67:
      return sub_1CD78B240((uint64_t)a1, a2);
    default:
      return v3;
  }
}

uint64_t sub_1CCF696D8(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = a3;
  unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)a2, (llvm::Type *)1, a3);
  unsigned __int8 v8 = EVT;
  if (EVT < 2u) {
    return 0;
  }
  if (!(_BYTE)EVT || !*(void *)(*(void *)(a1 + 104) + 8 * EVT + 96))
  {
    uint64_t v9 = 0;
    if ((v3 - 171) > 2 || EVT != 2) {
      return v9;
    }
    llvm::TargetLoweringBase::getTypeConversion(*(void *)(a1 + 104), **(llvm::LLVMContext ***)a2, EVT, v7, (uint64_t)v35);
    unsigned __int8 v8 = v35[8];
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  }
  uint64_t v12 = *(void *)v11;
  int v13 = *(unsigned __int8 *)(*(void *)v11 + 16);
  if (v12) {
    BOOL v14 = v13 == 16;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14
    && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu
    && llvm::Instruction::isCommutative((llvm::Instruction *)a2))
  {
    if ((v10 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v15 = a2 - 32 * (v10 & 0x7FFFFFF);
    }
    uint64_t v19 = sub_1CD789230((uint64_t *)a1, *(void *)(v15 + 32));
    if (!v19) {
      return 0;
    }
    uint64_t v20 = v19;
    int v21 = (unint64_t *)(v12 + 24);
    if (*(_DWORD *)(v12 + 32) >= 0x41u) {
      int v21 = (unint64_t *)*v21;
    }
    unint64_t v22 = *v21;
    unsigned __int8 v23 = v8;
    uint64_t v24 = (uint64_t *)a1;
    uint64_t v25 = v3;
    goto LABEL_55;
  }
  if ((v10 & 0x40000000) != 0) {
    int v16 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v16 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  }
  uint64_t v9 = sub_1CD789230((uint64_t *)a1, *v16);
  if (v9)
  {
    int v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0) {
      uint64_t v18 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v18 = a2 - 32 * (v17 & 0x7FFFFFF);
    }
    uint64_t v26 = *(void *)(v18 + 32);
    if (!v26 || *(unsigned char *)(v26 + 16) != 16)
    {
      uint64_t v28 = sub_1CD789230((uint64_t *)a1, v26);
      if (!v28) {
        return 0;
      }
      int v29 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v8, v8, v3, v9, v28);
      if (!v29) {
        return 0;
      }
LABEL_37:
      uint64_t v9 = 1;
      sub_1CD78997C(a1, a2, v29, 1);
      return v9;
    }
    unsigned int v27 = *(_DWORD *)(v26 + 32);
    if (v27 > 0x40) {
      unint64_t v22 = **(void **)(v26 + 24);
    }
    else {
      unint64_t v22 = (uint64_t)(*(void *)(v26 + 24) << -(char)v27) >> -(char)v27;
    }
    if (v3 == 62)
    {
      unsigned int v32 = *(unsigned __int8 *)(a2 + 16);
      if (v32 >= 0x1C && v32 - 41 <= 0x11)
      {
        uint64_t v3 = 62;
        if (v22)
        {
          uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] >= 2uLL) {
            uint64_t v3 = 62;
          }
          else {
            uint64_t v3 = 171;
          }
          unint64_t v22 = (__PAIR128__(v22, v33.u32[0]) - 2) >> 64;
        }
      }
    }
    else if (v3 == 59)
    {
      unsigned int v30 = *(unsigned __int8 *)(a2 + 16);
      if (v30 >= 0x1C && v30 - 41 <= 0x11)
      {
        uint64_t v3 = 59;
        if (v22)
        {
          if ((*(unsigned char *)(a2 + 17) & 2) != 0)
          {
            uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] <= 1uLL)
            {
              unint64_t v22 = __clz(v22) ^ 0x3F;
              uint64_t v3 = 176;
            }
          }
        }
      }
    }
    unsigned __int8 v23 = v8;
    uint64_t v24 = (uint64_t *)a1;
    uint64_t v25 = v3;
    uint64_t v20 = v9;
LABEL_55:
    int v29 = sub_1CD789C70(v24, v23, v25, v20, v22, v23);
    if (!v29) {
      return 0;
    }
    goto LABEL_37;
  }
  return v9;
}

uint64_t sub_1CCF699C4(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  int v8 = *(unsigned __int8 *)(a3 + 16);
  if (v8 == 84)
  {
    uint64_t v9 = 0;
  }
  else if (v8 == 39)
  {
    uint64_t v9 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    uint64_t v9 = 2;
  }
  int v10 = *(_DWORD *)(a3 + 20);
  if (v10 < 0 && (uint64_t v41 = a3 - 32 * (v10 & 0x7FFFFFF), v42 = *(void *)(v41 - 8), (v42 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v12 = -(uint64_t)(v10 & 0x7FFFFFF);
    int v11 = *(_DWORD *)(v41 - 12) - *(_DWORD *)(v41 - v42);
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = -(uint64_t)(v10 & 0x7FFFFFF);
  }
  unint64_t v13 = (-32 * v9 + 32 * (unint64_t)-v11 - 32 * v12 - 32) >> 5;
  uint64_t v14 = 1;
  if (v13 != a4)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v4);
      int v16 = *(unsigned __int8 *)(v15 + 16);
      if (v15) {
        BOOL v17 = v16 == 16;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        LODWORD(v43) = 1;
        *((void *)&v43 + 1) = 0;
        *(void *)&long long v44 = 2;
        uint64_t v24 = *(unsigned int *)(a2 + 8);
        unint64_t v25 = *(void *)a2;
        if (v24 >= *(_DWORD *)(a2 + 12))
        {
          BOOL v38 = v25 + 32 * v24 > (unint64_t)&v43;
          if (v25 > (unint64_t)&v43 || !v38) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v26 = (_OWORD *)(v25 + 32 * *(unsigned int *)(a2 + 8));
        long long v27 = v44;
        _OWORD *v26 = v43;
        v26[1] = v27;
        uint64_t v23 = (*(_DWORD *)(a2 + 8) + 1);
        *(_DWORD *)(a2 + 8) = v23;
        unsigned int v28 = *(_DWORD *)(v15 + 32);
        if (v28 > 0x40) {
          uint64_t v29 = **(void **)(v15 + 24);
        }
        else {
          uint64_t v29 = (uint64_t)(*(void *)(v15 + 24) << -(char)v28) >> -(char)v28;
        }
        LODWORD(v43) = 1;
        *((void *)&v43 + 1) = 0;
        *(void *)&long long v44 = v29;
      }
      else
      {
        if (v16 == 19)
        {
          LODWORD(v43) = 1;
          *((void *)&v43 + 1) = 0;
          *(void *)&long long v44 = 2;
          uint64_t v18 = *(unsigned int *)(a2 + 8);
          unint64_t v19 = *(void *)a2;
          if (v18 >= *(_DWORD *)(a2 + 12))
          {
            BOOL v39 = v19 + 32 * v18 > (unint64_t)&v43;
            if (v19 > (unint64_t)&v43 || !v39) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v20 = (_OWORD *)(v19 + 32 * *(unsigned int *)(a2 + 8));
          long long v21 = v44;
          _OWORD *v20 = v43;
          v20[1] = v21;
          unsigned int v22 = *(_DWORD *)(a2 + 12);
          uint64_t v23 = (*(_DWORD *)(a2 + 8) + 1);
          *(_DWORD *)(a2 + 8) = v23;
          LODWORD(v43) = 1;
          *((void *)&v43 + 1) = 0;
          *(void *)&long long v44 = 0;
          goto LABEL_27;
        }
        if (v15 && v16 == 59)
        {
          uint64_t v30 = a1[4];
          uint64_t v45 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v4);
          *(void *)&long long v43 = 0;
          if (sub_1CB87DF68(v30 + 176, &v45, &v43)) {
            uint64_t v31 = v43;
          }
          else {
            uint64_t v31 = *(void *)(v30 + 176) + 16 * *(unsigned int *)(v30 + 192);
          }
          if (v31 == *(void *)(a1[4] + 176) + 16 * *(unsigned int *)(a1[4] + 192)) {
            return 0;
          }
          int v32 = *(_DWORD *)(v31 + 8);
          LODWORD(v43) = 5;
          *((void *)&v43 + 1) = 0;
          LODWORD(v44) = v32;
        }
        else
        {
          int v36 = sub_1CD789230(a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v4));
          if (!v36) {
            return 0;
          }
          *((void *)&v43 + 1) = 0;
          LODWORD(v43) = 0;
          DWORD1(v43) = v36;
          long long v44 = 0uLL;
        }
        uint64_t v23 = *(unsigned int *)(a2 + 8);
      }
      unsigned int v22 = *(_DWORD *)(a2 + 12);
LABEL_27:
      unint64_t v33 = *(void *)a2;
      if (v23 >= v22)
      {
        BOOL v37 = v33 + 32 * v23 > (unint64_t)&v43;
        if (v33 > (unint64_t)&v43 || !v37) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v34 = (_OWORD *)(v33 + 32 * *(unsigned int *)(a2 + 8));
      long long v35 = v44;
      *int v34 = v43;
      v34[1] = v35;
      ++*(_DWORD *)(a2 + 8);
      if (v13 == ++v4) {
        return 1;
      }
    }
  }
  return v14;
}

uint64_t sub_1CCF69D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  v77[2] = *MEMORY[0x1E4F143B8];
  uint64_t v55 = *(void *)a2;
  uint64_t v56 = *(void *)(a2 + 72);
  __n128 __p = 0uLL;
  unint64_t v62 = 0;
  *((void *)&v60 + 1) = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  LODWORD(v60) = 0;
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 84)
  {
    if (v4 == 39) {
      uint64_t v3 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v3 = 2;
    }
  }
  int v5 = *(_DWORD *)(a2 + 20);
  if (v5 < 0 && (uint64_t v52 = a2 - 32 * (v5 & 0x7FFFFFF), v53 = *(void *)(v52 - 8), (v53 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v7 = -(uint64_t)(v5 & 0x7FFFFFF);
    int v6 = *(_DWORD *)(v52 - 12) - *(_DWORD *)(v52 - v53);
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = -(uint64_t)(v5 & 0x7FFFFFF);
  }
  sub_1CD78A38C((uint64_t)&__p, ((-32 * v3 + 32 * (unint64_t)-v6 - 32 * v7 - 32) >> 5));
  int v9 = *(_DWORD *)(a2 + 20);
  int v10 = (llvm::Type ***)(a2 - 32 * (v9 & 0x7FFFFFF));
  int v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 84)
  {
    uint64_t v12 = 0;
  }
  else if (v11 == 39)
  {
    uint64_t v12 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v12 = 2;
  }
  if (v9 < 0 && (uint64_t v54 = (uint64_t)*(v10 - 1), (v54 & 0xFFFFFFFF0) != 0)) {
    uint64_t v13 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v54));
  }
  else {
    uint64_t v13 = 0;
  }
  for (uint64_t i = a2 - 32 * v12 - 32 * v13 - 32; v10 != (llvm::Type ***)i; v10 += 4)
  {
    uint64_t v15 = *v10;
    int v16 = **v10;
    if ((llvm::Type::isEmptyTy(v16) & 1) == 0)
    {
      *(void *)&long long v58 = v15;
      *((void *)&v59 + 1) = v16;
      sub_1CD80D26C((uint64_t)&v58, a2, ((unint64_t)&v10[4 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)] - a2) >> 5);
      BOOL v17 = (_OWORD *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v62)
      {
        unint64_t v21 = __p.n128_u64[0];
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v62 - __p.n128_u64[0]) >> 4) > v23) {
          unint64_t v23 = 0x5555555555555556 * ((uint64_t)(v62 - __p.n128_u64[0]) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - __p.n128_u64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v24 = 0x555555555555555;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          if (v24 > 0x555555555555555) {
            sub_1CB833614();
          }
          unint64_t v25 = (char *)operator new(48 * v24);
        }
        else
        {
          unint64_t v25 = 0;
        }
        uint64_t v26 = &v25[48 * v22];
        long long v27 = v59;
        *(_OWORD *)uint64_t v26 = v58;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v60;
        unint64_t v28 = (unint64_t)v26;
        if (v17 != (_OWORD *)v21)
        {
          do
          {
            long long v29 = *(v17 - 3);
            long long v30 = *(v17 - 1);
            *(_OWORD *)(v28 - 32) = *(v17 - 2);
            *(_OWORD *)(v28 - 16) = v30;
            *(_OWORD *)(v28 - 48) = v29;
            v28 -= 48;
            v17 -= 3;
          }
          while (v17 != (_OWORD *)v21);
          BOOL v17 = (_OWORD *)v21;
        }
        uint64_t v31 = &v25[48 * v24];
        unint64_t v20 = (unint64_t)(v26 + 48);
        __p.n128_u64[0] = v28;
        __p.n128_u64[1] = (unint64_t)(v26 + 48);
        unint64_t v62 = (unint64_t)v31;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        long long v18 = v58;
        long long v19 = v60;
        *(_OWORD *)(__p.n128_u64[1] + 16) = v59;
        v17[2] = v19;
        *BOOL v17 = v18;
        unint64_t v20 = (unint64_t)(v17 + 3);
      }
      __p.n128_u64[1] = v20;
    }
  }
  if ((*(_WORD *)(a2 + 18) & 3u) - 1 >= 2)
  {
    BOOL v47 = 0;
    uint64_t v32 = a1;
    goto LABEL_58;
  }
  uint64_t v32 = a1;
  if (!llvm::isInTailCallPosition((llvm *)a2, *(const llvm::CallBase **)(a1 + 80), v8))
  {
    BOOL v47 = 0;
    goto LABEL_58;
  }
  uint64_t v33 = *(void *)(**(void **)(a1 + 40) + 112);
  if (!v33 || !*(_DWORD *)(v33 + 8) || (uint64_t v34 = *(void *)(v33 + 40)) == 0 || (v35 = *(_DWORD *)(v34 + 40)) == 0)
  {
LABEL_55:
    BOOL v47 = 1;
    goto LABEL_58;
  }
  uint64_t v36 = *(void *)(v34 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v51 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v51 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v51;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v37 = __ROR8__(qword_1EBCBE580 ^ 0xAE2F6180382EB467, 30);
  unint64_t v38 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                                    * ((v37 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580
                                                                                     + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v37 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580 + 0x1ED4D83DFEF8CF66))));
  unsigned int v39 = -348639895 * ((v38 >> 47) ^ v38);
  for (int j = 1; ; ++j)
  {
    unsigned int v41 = v39 & (v35 - 1);
    uint64_t v42 = (uint64_t *)(v36 + 24 * v41);
    uint64_t v43 = *v42;
    if (*v42 == -1)
    {
      if ("disable-tail-calls" == (char *)-1) {
        goto LABEL_53;
      }
      goto LABEL_39;
    }
    if (v43 != -2) {
      break;
    }
    if ("disable-tail-calls" == (char *)-2) {
      goto LABEL_53;
    }
LABEL_39:
    if (v43 == -1) {
      goto LABEL_55;
    }
    unsigned int v39 = j + v41;
  }
  if (v42[1] != 18) {
    goto LABEL_39;
  }
  BOOL v44 = *(void *)v43 == 0x2D656C6261736964 && *(void *)(v43 + 8) == 0x6C61632D6C696174;
  if (!v44 || *(_WORD *)(v43 + 16) != 29548) {
    goto LABEL_39;
  }
LABEL_53:
  uint64_t v46 = v42[2];
  if (!v46 || *(_DWORD *)(v46 + 16) != 4) {
    goto LABEL_55;
  }
  BOOL v47 = *(_DWORD *)(v46 + *(unsigned int *)(v46 + 12) + 25) != *(_DWORD *)"true";
LABEL_58:
  uint64_t v63 = 0;
  char v64 = v64 & 0x80 | 0x20;
  BOOL v65 = 0;
  uint64_t v66 = 0xFFFFFFFFLL;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  unsigned int v71 = v73;
  uint64_t v72 = 0x1000000000;
  v73[16] = v74;
  v73[17] = 0x1000000000;
  v74[24] = v75;
  v74[25] = 0x1000000000;
  v75[8] = v76;
  v75[9] = 0x400000000;
  unsigned char v76[24] = v77;
  v76[25] = 0x400000000;
  sub_1CD78AF34((uint64_t)&v63, v55, v56, *(void *)(a2 - 32), &__p, a2);
  BOOL v65 = v47;
  llvm::diagnoseDontCall(a2, v48);
  uint64_t v49 = sub_1CD78A48C(v32, (uint64_t)&v63);
  sub_1CD78BF58(&v63);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return v49;
}

uint64_t sub_1CCF6A384(uint64_t a1, uint64_t a2)
{
  v264[2] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(*(void *)(a2 - 32) + 36);
  uint64_t v5 = 1;
  if (v4 <= 125)
  {
    switch(v4)
    {
      case '8':
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) + 2108)) {
          return v5;
        }
        int v6 = *(unsigned __int8 **)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
        int v7 = *v6;
        if ((v7 - 4) < 0x1C || (v7 - 33) < 2) {
          return v5;
        }
        if (v7 == 32) {
          int v6 = (unsigned __int8 *)**((void **)v6 + 3);
        }
        uint64_t v8 = *((void *)v6 + 16);
        if (!v8 || *(unsigned __int8 *)(v8 + 16) - 11 < 2) {
          return v5;
        }
        int v9 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v8);
        BOOL v10 = v9 && *((unsigned char *)v9 + 16) == 21;
        if (v10 && sub_1CD78C488(*(void *)(a1 + 32), (uint64_t)v9) != 0x7FFFFFFF) {
          return v5;
        }
        int v11 = sub_1CD789364(a1, v8);
        if (v11) {
          goto LABEL_20;
        }
        if (*(void *)(v8 + 8))
        {
          unsigned int v12 = *(unsigned __int8 *)(v8 + 16);
          if (v12 >= 0x1C)
          {
            if (v12 != 59
              || (uint64_t v13 = *(void *)(a1 + 32) + 176,
                  v243 = (llvm::MachineOperand *)v8,
                  v247 = 0,
                  (sub_1CB87DF68(v13, &v243, &v247) & 1) == 0))
            {
              int v11 = sub_1CD3CD784(*(void *)(a1 + 32), (const llvm::Value *)v8);
LABEL_20:
              LODWORD(v243) = 0;
              HIDWORD(v243) = v11;
              v245[0] = 0;
              v245[1] = 0;
              uint64_t v244 = 0;
              char v246 = 1;
              uint64_t v14 = *(void *)(a1 + 32);
              uint64_t v15 = *(void *)(v14 + 640);
              int v16 = *(unint64_t **)(v14 + 648);
              uint64_t v17 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
              llvm::BuildMI(v15, v16, (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 624, 1, (const llvm::MachineOperand *)&v243, *(void *)(*(void *)(v17 + 32) + 24), *(void *)(*(void *)(v17 + 64) + 24));
              if (*(unsigned char *)(a1 + 129))
              {
                if (!(_BYTE)v243)
                {
                  uint64_t v19 = v18;
                  *(void *)(v18 + 16) = *(void *)(*(void *)(a1 + 96) + 8) + 720;
                  llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(v18 + 32) + 32), 0, 0);
                  *(void *)(*(void *)(v19 + 32) + 112) = llvm::DIExpression::prepend(*(llvm::DIExpression **)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64)+ 24), (const llvm::DIExpression *)1, 0);
                }
              }
            }
          }
        }
        return v5;
      case '9':
        unint64_t v22 = *(void **)(a1 + 32);
        if (!*(unsigned char *)(*(void *)(v22[1] + 32) + 2108)) {
          return v5;
        }
        uint64_t v23 = v22[80];
        unint64_t v24 = (unint64_t *)v22[81];
        uint64_t v25 = *(void *)(*(void *)(a1 + 96) + 8) + 816;
        uint64_t v26 = *(llvm::MachineFunction **)(v23 + 32);
        long long v27 = *(unsigned __int8 **)(a1 + 72);
        v247 = v27;
        if (v27) {
          llvm::MetadataTracking::track((uint64_t)&v247, v27, 2);
        }
        unint64_t v28 = llvm::MachineFunction::CreateMachineInstr(v26, v25, &v247, 0);
        if (!v247) {
          goto LABEL_44;
        }
        int v216 = *v247;
        if ((v216 - 4) > 0x1E)
        {
          if ((v216 - 3) >= 0xFFFFFFFE) {
            v219 = v247;
          }
          else {
            v219 = 0;
          }
          if ((v216 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v218 = (unint64_t)(v219 + 8);
LABEL_312:
            v243 = (llvm::MachineOperand *)&v247;
            sub_1CC5FA668(v218 + 16, &v243);
            goto LABEL_44;
          }
          if (v216 == 3) {
            *((void *)v247 + 1) = 0;
          }
        }
        else if ((v247[1] & 0x7F) == 2 || *((_DWORD *)v247 + 3))
        {
          uint64_t v217 = *((void *)v247 + 2);
          if ((v217 & 4) != 0)
          {
            unint64_t v218 = v217 & 0xFFFFFFFFFFFFFFF8;
            if (v218) {
              goto LABEL_312;
            }
          }
        }
LABEL_44:
        uint64_t v29 = *(void *)(v23 + 40);
        *((void *)v28 + 3) = v29;
        uint64_t v30 = *(void *)(v29 + 32);
        uint64_t v31 = *((unsigned int *)v28 + 10);
        if (v31)
        {
          uint64_t v109 = *((void *)v28 + 4);
          uint64_t v110 = *(void *)(v30 + 40);
          uint64_t v111 = 32 * v31;
          do
          {
            if (!*(unsigned char *)v109)
            {
              uint64_t v112 = *(unsigned int *)(v109 + 4);
              if ((int)v112 >= 0) {
                uint64_t v113 = (uint64_t *)(*(void *)(v110 + 272) + 8 * v112);
              }
              else {
                uint64_t v113 = (uint64_t *)(*(void *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
              }
              uint64_t v114 = *v113;
              if (*v113)
              {
                uint64_t v115 = *(void *)(v114 + 16);
                *(void *)(v114 + 16) = v109;
                *(void *)(v109 + 16) = v115;
                if (*(unsigned char *)(v109 + 3))
                {
                  *(void *)(v109 + 24) = v114;
                }
                else
                {
                  *(void *)(v109 + 24) = 0;
                  uint64_t v113 = (uint64_t *)(v115 + 24);
                }
              }
              else
              {
                *(void *)(v109 + 16) = v109;
                *(void *)(v109 + 24) = 0;
              }
              uint64_t *v113 = v109;
            }
            v109 += 32;
            v111 -= 32;
          }
          while (v111);
        }
        uint64_t v32 = *(void *)(v30 + 728);
        if (v32) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v32 + 24))(v32, v28);
        }
        unint64_t v33 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v28 = v33 | *(void *)v28 & 7;
        *((void *)v28 + 1) = v24;
        *(void *)(v33 + 8) = v28;
        *unint64_t v24 = *v24 & 7 | (unint64_t)v28;
        uint64_t v34 = *(void *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
        LODWORD(v243) = 14;
        uint64_t v244 = 0;
        v245[0] = v34;
        llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v243);
        return 1;
      case ':':
        uint64_t v35 = *(void *)(*(void *)(a1 + 96) + 8) + 624;
        uint64_t v36 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v37 = *(unsigned __int8 **)(*v36 + 24);
        int v38 = *v37;
        if ((v38 - 4) < 0x1C || (v38 - 33) < 2) {
          goto LABEL_49;
        }
        if (v38 == 32) {
          uint64_t v37 = (unsigned __int8 *)**((void **)v37 + 3);
        }
        uint64_t v39 = *((void *)v37 + 16);
        if (!v39
          || ((int v40 = *(unsigned __int8 *)(v39 + 16), v38 != 32) ? (v41 = (v40 - 11) > 1) : (v41 = 0), !v41))
        {
LABEL_49:
          llvm::BuildMI(*(void *)(*(void *)(a1 + 32) + 640), *(unint64_t **)(*(void *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(void *)(*(void *)(a1 + 96) + 8) + 624, 0, 0, *(void *)(v36[4] + 24), *(void *)(v36[8] + 24));
          return 1;
        }
        if (v40 != 17)
        {
          if (v40 == 16)
          {
            uint64_t v42 = *(llvm::DIExpression **)(v36[8] + 24);
            if (v42)
            {
              uint64_t v43 = llvm::DIExpression::constantFold(v42, (const llvm::ConstantInt *)v39);
              uint64_t v39 = v44;
            }
            else
            {
              uint64_t v43 = 0;
            }
            uint64_t v89 = *(void *)(a1 + 32);
            uint64_t v90 = *(void *)(v89 + 640);
            long long v91 = *(unint64_t **)(v89 + 648);
            if (*(_DWORD *)(v39 + 32) >= 0x41u)
            {
              char v92 = *(llvm::MachineFunction **)(v90 + 32);
              uint64_t v93 = *(unsigned __int8 **)(a1 + 72);
              v247 = v93;
              if (v93) {
                llvm::MetadataTracking::track((uint64_t)&v247, v93, 2);
              }
              char v94 = llvm::MachineFunction::CreateMachineInstr(v92, v35, &v247, 0);
              if (!v247) {
                goto LABEL_108;
              }
              int v223 = *v247;
              if ((v223 - 4) > 0x1E)
              {
                if ((v223 - 3) >= 0xFFFFFFFE) {
                  v230 = v247;
                }
                else {
                  v230 = 0;
                }
                if ((v223 - 3) < 0xFFFFFFFE)
                {
                  if (v223 == 3) {
                    *((void *)v247 + 1) = 0;
                  }
                  goto LABEL_108;
                }
                unint64_t v225 = (unint64_t)(v230 + 8);
              }
              else
              {
                if ((v247[1] & 0x7F) != 2 && !*((_DWORD *)v247 + 3)) {
                  goto LABEL_108;
                }
                uint64_t v224 = *((void *)v247 + 2);
                if ((v224 & 4) == 0) {
                  goto LABEL_108;
                }
                unint64_t v225 = v224 & 0xFFFFFFFFFFFFFFF8;
                if (!v225) {
                  goto LABEL_108;
                }
              }
              v243 = (llvm::MachineOperand *)&v247;
              sub_1CC5FA668(v225 + 16, &v243);
LABEL_108:
              uint64_t v95 = *(void *)(v90 + 40);
              *((void *)v94 + 3) = v95;
              uint64_t v96 = *(void *)(v95 + 32);
              uint64_t v97 = *((unsigned int *)v94 + 10);
              if (v97)
              {
                uint64_t v188 = *((void *)v94 + 4);
                uint64_t v189 = *(void *)(v96 + 40);
                uint64_t v190 = 32 * v97;
                do
                {
                  if (!*(unsigned char *)v188)
                  {
                    uint64_t v191 = *(unsigned int *)(v188 + 4);
                    if ((int)v191 >= 0) {
                      unsigned int v192 = (uint64_t *)(*(void *)(v189 + 272) + 8 * v191);
                    }
                    else {
                      unsigned int v192 = (uint64_t *)(*(void *)(v189 + 24) + 16 * (v191 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v193 = *v192;
                    if (*v192)
                    {
                      uint64_t v194 = *(void *)(v193 + 16);
                      *(void *)(v193 + 16) = v188;
                      *(void *)(v188 + 16) = v194;
                      if (*(unsigned char *)(v188 + 3))
                      {
                        *(void *)(v188 + 24) = v193;
                      }
                      else
                      {
                        *(void *)(v188 + 24) = 0;
                        unsigned int v192 = (uint64_t *)(v194 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v188 + 16) = v188;
                      *(void *)(v188 + 24) = 0;
                    }
                    *unsigned int v192 = v188;
                  }
                  v188 += 32;
                  v190 -= 32;
                }
                while (v190);
              }
              uint64_t v98 = *(void *)(v96 + 728);
              if (v98) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v98 + 24))(v98, v94);
              }
              unint64_t v99 = *v91 & 0xFFFFFFFFFFFFFFF8;
              *(void *)char v94 = v99 | *(void *)v94 & 7;
              *((void *)v94 + 1) = v91;
              *(void *)(v99 + 8) = v94;
              unint64_t *v91 = *v91 & 7 | (unint64_t)v94;
              LODWORD(v243) = 2;
              uint64_t v244 = 0;
              v245[0] = v39;
              llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v243);
              uint64_t v5 = 1;
LABEL_121:
              LODWORD(v243) = 1;
              uint64_t v244 = 0;
              v245[0] = 0;
              llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v243);
              uint64_t v108 = *(void *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32) + 24);
              LODWORD(v243) = 14;
              uint64_t v244 = 0;
              v245[0] = v108;
              llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v243);
              LODWORD(v243) = 14;
              uint64_t v244 = 0;
              v245[0] = v43;
              long long v87 = v94;
              uint64_t v88 = v92;
LABEL_122:
              llvm::MachineInstr::addOperand(v87, v88, (const llvm::MachineOperand *)&v243);
              return v5;
            }
            char v92 = *(llvm::MachineFunction **)(v90 + 32);
            uint64_t v100 = *(unsigned __int8 **)(a1 + 72);
            v247 = v100;
            if (v100) {
              llvm::MetadataTracking::track((uint64_t)&v247, v100, 2);
            }
            char v94 = llvm::MachineFunction::CreateMachineInstr(v92, v35, &v247, 0);
            if (v247)
            {
              int v226 = *v247;
              if ((v226 - 4) > 0x1E)
              {
                if ((v226 - 3) >= 0xFFFFFFFE) {
                  v231 = v247;
                }
                else {
                  v231 = 0;
                }
                if ((v226 - 3) < 0xFFFFFFFE)
                {
                  if (v226 == 3) {
                    *((void *)v247 + 1) = 0;
                  }
                  goto LABEL_115;
                }
                unint64_t v228 = (unint64_t)(v231 + 8);
              }
              else
              {
                if ((v247[1] & 0x7F) != 2 && !*((_DWORD *)v247 + 3)) {
                  goto LABEL_115;
                }
                uint64_t v227 = *((void *)v247 + 2);
                if ((v227 & 4) == 0) {
                  goto LABEL_115;
                }
                unint64_t v228 = v227 & 0xFFFFFFFFFFFFFFF8;
                if (!v228) {
                  goto LABEL_115;
                }
              }
              v243 = (llvm::MachineOperand *)&v247;
              sub_1CC5FA668(v228 + 16, &v243);
            }
LABEL_115:
            uint64_t v101 = *(void *)(v90 + 40);
            *((void *)v94 + 3) = v101;
            uint64_t v102 = *(void *)(v101 + 32);
            uint64_t v103 = *((unsigned int *)v94 + 10);
            if (v103)
            {
              uint64_t v195 = *((void *)v94 + 4);
              uint64_t v196 = *(void *)(v102 + 40);
              uint64_t v197 = 32 * v103;
              do
              {
                if (!*(unsigned char *)v195)
                {
                  uint64_t v198 = *(unsigned int *)(v195 + 4);
                  if ((int)v198 >= 0) {
                    uint64_t v199 = (uint64_t *)(*(void *)(v196 + 272) + 8 * v198);
                  }
                  else {
                    uint64_t v199 = (uint64_t *)(*(void *)(v196 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v200 = *v199;
                  if (*v199)
                  {
                    uint64_t v201 = *(void *)(v200 + 16);
                    *(void *)(v200 + 16) = v195;
                    *(void *)(v195 + 16) = v201;
                    if (*(unsigned char *)(v195 + 3))
                    {
                      *(void *)(v195 + 24) = v200;
                    }
                    else
                    {
                      *(void *)(v195 + 24) = 0;
                      uint64_t v199 = (uint64_t *)(v201 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v195 + 16) = v195;
                    *(void *)(v195 + 24) = 0;
                  }
                  *uint64_t v199 = v195;
                }
                v195 += 32;
                v197 -= 32;
              }
              while (v197);
            }
            uint64_t v104 = *(void *)(v102 + 728);
            if (v104) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v104 + 24))(v104, v94);
            }
            unint64_t v105 = *v91 & 0xFFFFFFFFFFFFFFF8;
            *(void *)char v94 = v105 | *(void *)v94 & 7;
            *((void *)v94 + 1) = v91;
            *(void *)(v105 + 8) = v94;
            unint64_t *v91 = *v91 & 7 | (unint64_t)v94;
            int v106 = (void *)(v39 + 24);
            if (*(_DWORD *)(v39 + 32) >= 0x41u) {
              int v106 = (void *)*v106;
            }
            int v107 = (void *)*v106;
            uint64_t v5 = 1;
            LODWORD(v243) = 1;
            uint64_t v244 = 0;
            v245[0] = v107;
            llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v243);
            goto LABEL_121;
          }
          int v175 = sub_1CD789364(a1, v39);
          if (v175)
          {
            uint64_t v176 = *(void *)(a1 + 32);
            uint64_t v177 = *(void *)(v176 + 640);
            uint64_t v178 = *(unint64_t **)(v176 + 648);
            uint64_t v179 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            llvm::BuildMI(v177, v178, (unsigned __int8 **)(a1 + 72), v35, 0, v175, *(void *)(*(void *)(v179 + 32) + 24), *(void *)(*(void *)(v179 + 64) + 24));
            if (*(unsigned char *)(a1 + 129))
            {
              *(void *)(v180 + 16) = *(void *)(*(void *)(a1 + 96) + 8) + 720;
              llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(v180 + 32) + 32), 0, 0);
            }
          }
          return 1;
        }
        uint64_t v74 = *(void *)(a1 + 32);
        uint64_t v75 = *(void *)(v74 + 640);
        uint64_t v76 = *(unint64_t **)(v74 + 648);
        uint64_t v77 = *(llvm::MachineFunction **)(v75 + 32);
        uint64_t v78 = *(unsigned __int8 **)(a1 + 72);
        v247 = v78;
        if (v78) {
          llvm::MetadataTracking::track((uint64_t)&v247, v78, 2);
        }
        int v79 = llvm::MachineFunction::CreateMachineInstr(v77, v35, &v247, 0);
        if (!v247) {
          goto LABEL_95;
        }
        int v220 = *v247;
        if ((v220 - 4) > 0x1E)
        {
          if ((v220 - 3) >= 0xFFFFFFFE) {
            v229 = v247;
          }
          else {
            v229 = 0;
          }
          if ((v220 - 3) < 0xFFFFFFFE)
          {
            if (v220 == 3) {
              *((void *)v247 + 1) = 0;
            }
            goto LABEL_95;
          }
          unint64_t v222 = (unint64_t)(v229 + 8);
        }
        else
        {
          if ((v247[1] & 0x7F) != 2 && !*((_DWORD *)v247 + 3)) {
            goto LABEL_95;
          }
          uint64_t v221 = *((void *)v247 + 2);
          if ((v221 & 4) == 0) {
            goto LABEL_95;
          }
          unint64_t v222 = v221 & 0xFFFFFFFFFFFFFFF8;
          if (!v222) {
            goto LABEL_95;
          }
        }
        v243 = (llvm::MachineOperand *)&v247;
        sub_1CC5FA668(v222 + 16, &v243);
LABEL_95:
        uint64_t v80 = *(void *)(v75 + 40);
        *((void *)v79 + 3) = v80;
        uint64_t v81 = *(void *)(v80 + 32);
        uint64_t v82 = *((unsigned int *)v79 + 10);
        if (v82)
        {
          uint64_t v181 = *((void *)v79 + 4);
          uint64_t v182 = *(void *)(v81 + 40);
          uint64_t v183 = 32 * v82;
          do
          {
            if (!*(unsigned char *)v181)
            {
              uint64_t v184 = *(unsigned int *)(v181 + 4);
              if ((int)v184 >= 0) {
                long long v185 = (uint64_t *)(*(void *)(v182 + 272) + 8 * v184);
              }
              else {
                long long v185 = (uint64_t *)(*(void *)(v182 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
              }
              uint64_t v186 = *v185;
              if (*v185)
              {
                uint64_t v187 = *(void *)(v186 + 16);
                *(void *)(v186 + 16) = v181;
                *(void *)(v181 + 16) = v187;
                if (*(unsigned char *)(v181 + 3))
                {
                  *(void *)(v181 + 24) = v186;
                }
                else
                {
                  *(void *)(v181 + 24) = 0;
                  long long v185 = (uint64_t *)(v187 + 24);
                }
              }
              else
              {
                *(void *)(v181 + 16) = v181;
                *(void *)(v181 + 24) = 0;
              }
              *long long v185 = v181;
            }
            v181 += 32;
            v183 -= 32;
          }
          while (v183);
        }
        uint64_t v83 = *(void *)(v81 + 728);
        if (v83) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v83 + 24))(v83, v79);
        }
        unint64_t v84 = *v76 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v79 = v84 | *(void *)v79 & 7;
        *((void *)v79 + 1) = v76;
        *(void *)(v84 + 8) = v79;
        unint64_t *v76 = *v76 & 7 | (unint64_t)v79;
        LODWORD(v243) = 3;
        uint64_t v244 = 0;
        v245[0] = v39;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v243);
        uint64_t v5 = 1;
        LODWORD(v243) = 1;
        uint64_t v244 = 0;
        v245[0] = 0;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v243);
        uint64_t v85 = *(void *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32) + 24);
        LODWORD(v243) = 14;
        uint64_t v244 = 0;
        v245[0] = v85;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v243);
        uint64_t v86 = *(void *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 24);
        LODWORD(v243) = 14;
        uint64_t v244 = 0;
        v245[0] = v86;
        long long v87 = v79;
        uint64_t v88 = v77;
        goto LABEL_122;
      case ';':
        goto LABEL_37;
      case '<':
        return v5;
      default:
        if (v4 == 7) {
          return v5;
        }
        if (v4 != 77) {
          goto LABEL_37;
        }
        goto LABEL_69;
    }
  }
  if (v4 > 166)
  {
    if (v4 <= 271)
    {
      if ((v4 - 167) >= 2) {
        goto LABEL_37;
      }
      return v5;
    }
    if (v4 <= 289)
    {
      if (v4 != 272) {
        goto LABEL_37;
      }
      return v5;
    }
    if (v4 != 290)
    {
      if (v4 == 384)
      {
        sub_1CD78AB88(a1, a2);
        return v5;
      }
      if (v4 == 385)
      {
        sub_1CD78AD34(a1, a2);
        return v5;
      }
LABEL_37:
      unint64_t v20 = *(uint64_t (**)(void))(*(void *)a1 + 48);
      return v20();
    }
LABEL_69:
    int v45 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    if (!v45) {
      return 0;
    }
    sub_1CD78997C(a1, a2, v45, 1);
    return v5;
  }
  if (v4 < 127) {
    return v5;
  }
  if ((v4 - 127) < 2)
  {
    unint64_t v46 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF;
    int v47 = *(unsigned __int8 *)(*(void *)a2 + 8);
    unsigned int v48 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64));
    uint64_t v49 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
    int v50 = (void *)(v49 + 24);
    if (*(_DWORD *)(v49 + 32) >= 0x41u) {
      int v50 = (void *)*v50;
    }
    unint64_t v51 = (void *)*v50;
    if (v46 == 13) {
      unsigned int v52 = 0;
    }
    else {
      unsigned int v52 = *v50;
    }
    v247 = 0;
    uint64_t v249 = 0xFFFFFFFFLL;
    long long v250 = 0u;
    long long v251 = 0u;
    long long v252 = 0u;
    long long v253 = 0u;
    v254 = v256;
    uint64_t v255 = 0x1000000000;
    v256[16] = &v257;
    v256[17] = 0x1000000000;
    v258 = (int *)v260;
    uint64_t v259 = 0x1000000000;
    v260[8] = &v261;
    v260[9] = 0x400000000;
    v262 = (unsigned int *)v264;
    uint64_t v263 = 0x400000000;
    __int16 v248 = 96;
    uint64_t v5 = 0;
    if (!sub_1CD78A1F0(a1, a2, v52, (uint64_t)v48, v46 == 13, (uint64_t)&v247)) {
      goto LABEL_214;
    }
    unsigned int v53 = 0;
    v243 = (llvm::MachineOperand *)v245;
    uint64_t v244 = 0x2000000000;
    if (v46 == 13 && v47 != 7)
    {
      uint64_t v54 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 104) + 424))(*(void *)(a1 + 104), 6, 0);
      uint64_t v55 = *(void *)(a1 + 48);
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v55, (unsigned __int8 *)&unk_1CFC22BC5, 0);
      *(void *)(*(void *)(v55 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v54 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v57 = *(void *)(v55 + 8);
      if (v57) {
        (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
      }
      *((void *)&v253 + 1) = IncompleteVirtualRegister | 0x100000000;
      *((void *)&v240 + 1) = 0;
      long long v241 = 0uLL;
      LODWORD(v240) = 0x1000000;
      DWORD1(v240) = IncompleteVirtualRegister;
      if (v244 >= HIDWORD(v244))
      {
        if (v243 > (llvm::MachineOperand *)&v240 || (char *)v243 + 32 * v244 <= (char *)&v240) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v58 = (_OWORD *)((char *)v243 + 32 * v244);
      long long v59 = v241;
      *long long v58 = v240;
      v58[1] = v59;
      unsigned int v53 = v244 + 1;
      LODWORD(v244) = v244 + 1;
    }
    uint64_t v60 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v61 = (void *)(v60 + 24);
    if (*(_DWORD *)(v60 + 32) >= 0x41u) {
      int v61 = (void *)*v61;
    }
    unint64_t v62 = (void *)*v61;
    LODWORD(v240) = 1;
    *((void *)&v240 + 1) = 0;
    *(void *)&long long v241 = v62;
    if (v53 >= HIDWORD(v244))
    {
      BOOL v209 = (char *)v243 + 32 * v53 > (char *)&v240;
      if (v243 > (llvm::MachineOperand *)&v240 || !v209) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v63 = (_OWORD *)((char *)v243 + 32 * v244);
    long long v64 = v241;
    _OWORD *v63 = v240;
    v63[1] = v64;
    uint64_t v65 = (v244 + 1);
    LODWORD(v244) = v244 + 1;
    uint64_t v66 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    long long v67 = (void *)(v66 + 24);
    if (*(_DWORD *)(v66 + 32) >= 0x41u) {
      long long v67 = (void *)*v67;
    }
    long long v68 = (void *)*v67;
    LODWORD(v240) = 1;
    *((void *)&v240 + 1) = 0;
    *(void *)&long long v241 = v68;
    if (v65 >= HIDWORD(v244))
    {
      BOOL v210 = (char *)v243 + 32 * v65 > (char *)&v240;
      if (v243 > (llvm::MachineOperand *)&v240 || !v210) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v69 = (_OWORD *)((char *)v243 + 32 * v244);
    long long v70 = v241;
    _OWORD *v69 = v240;
    v69[1] = v70;
    uint64_t v71 = (v244 + 1);
    LODWORD(v244) = v244 + 1;
    unsigned int v72 = *((unsigned __int8 *)v48 + 16);
    if (v72 == 76 && v48)
    {
      uint64_t v73 = *((void *)v48 - 4);
    }
    else
    {
      if (v72 != 5 || !v48)
      {
        if (v72 <= 3 && v48)
        {
          *(void *)&long long v241 = v48;
          DWORD2(v241) = 0;
          long long v240 = 0xAuLL;
        }
        else
        {
          LODWORD(v240) = 1;
          *((void *)&v240 + 1) = 0;
          *(void *)&long long v241 = 0;
        }
        goto LABEL_142;
      }
      uint64_t v73 = *((void *)v48 - 4 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF));
    }
    uint64_t v116 = (void *)(v73 + 24);
    if (*(_DWORD *)(v73 + 32) >= 0x41u) {
      uint64_t v116 = (void *)*v116;
    }
    uint64_t v117 = (void *)*v116;
    LODWORD(v240) = 1;
    *((void *)&v240 + 1) = 0;
    *(void *)&long long v241 = v117;
LABEL_142:
    if (v71 >= HIDWORD(v244))
    {
      BOOL v211 = (char *)v243 + 32 * v71 > (char *)&v240;
      if (v243 > (llvm::MachineOperand *)&v240 || !v211) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v118 = (_OWORD *)((char *)v243 + 32 * v244);
    long long v119 = v241;
    _OWORD *v118 = v240;
    v118[1] = v119;
    unsigned int v120 = v244 + 1;
    LODWORD(v244) = v244 + 1;
    if (v46 == 13)
    {
      LODWORD(v240) = 1;
      *((void *)&v240 + 1) = 0;
      *(void *)&long long v241 = v51;
      if (v120 >= HIDWORD(v244))
      {
        BOOL v212 = (char *)v243 + 32 * v120 > (char *)&v240;
        if (v243 > (llvm::MachineOperand *)&v240 || !v212) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v121 = (_OWORD *)((char *)v243 + 32 * v244);
      long long v122 = v241;
      *unsigned int v121 = v240;
      v121[1] = v122;
      uint64_t v123 = (v244 + 1);
      LODWORD(v244) = v123;
      LODWORD(v240) = 1;
      *((void *)&v240 + 1) = 0;
      *(void *)&long long v241 = 13;
      if (v123 >= HIDWORD(v244))
      {
        BOOL v213 = (char *)v243 + 32 * v123 > (char *)&v240;
        if (v243 > (llvm::MachineOperand *)&v240 || !v213) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v124 = (_OWORD *)((char *)v243 + 32 * v244);
      long long v125 = v241;
      *uint64_t v124 = v240;
      v124[1] = v125;
      unsigned int v126 = v244 + 1;
      LODWORD(v244) = v244 + 1;
      if (v51)
      {
        int v127 = 0;
        do
        {
          int v128 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * (v127 + 4)));
          if (!v128) {
            goto LABEL_172;
          }
          *((void *)&v240 + 1) = 0;
          LODWORD(v240) = 0;
          DWORD1(v240) = v128;
          long long v241 = 0uLL;
          if (v244 >= HIDWORD(v244))
          {
            if (v243 > (llvm::MachineOperand *)&v240 || (char *)v243 + 32 * v244 <= (char *)&v240) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v129 = (_OWORD *)((char *)v243 + 32 * v244);
          long long v130 = v241;
          _OWORD *v129 = v240;
          v129[1] = v130;
          unsigned int v126 = v244 + 1;
          LODWORD(v244) = v244 + 1;
        }
        while (v51 != ++v127);
      }
    }
    else
    {
      LODWORD(v240) = 1;
      *((void *)&v240 + 1) = 0;
      *(void *)&long long v241 = v259;
      if (v120 >= HIDWORD(v244))
      {
        BOOL v214 = (char *)v243 + 32 * v120 > (char *)&v240;
        if (v243 > (llvm::MachineOperand *)&v240 || !v214) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v131 = (_OWORD *)((char *)v243 + 32 * v244);
      long long v132 = v241;
      *uint64_t v131 = v240;
      v131[1] = v132;
      uint64_t v133 = (v244 + 1);
      LODWORD(v244) = v133;
      LODWORD(v240) = 1;
      *((void *)&v240 + 1) = 0;
      *(void *)&long long v241 = v46;
      if (v133 >= HIDWORD(v244))
      {
        BOOL v215 = (char *)v243 + 32 * v133 > (char *)&v240;
        if (v243 > (llvm::MachineOperand *)&v240 || !v215) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v134 = (_OWORD *)((char *)v243 + 32 * v244);
      long long v135 = v241;
      *uint64_t v134 = v240;
      v134[1] = v135;
      unsigned int v126 = v244 + 1;
      LODWORD(v244) = v244 + 1;
    }
    if (v259)
    {
      v154 = v258;
      uint64_t v155 = 4 * v259;
      do
      {
        int v156 = *v154;
        *((void *)&v240 + 1) = 0;
        LODWORD(v240) = 0;
        DWORD1(v240) = v156;
        long long v241 = 0uLL;
        if (v126 >= HIDWORD(v244))
        {
          BOOL v159 = (char *)v243 + 32 * v126 > (char *)&v240;
          if (v243 > (llvm::MachineOperand *)&v240 || !v159) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v157 = (_OWORD *)((char *)v243 + 32 * v244);
        long long v158 = v241;
        *int v157 = v240;
        v157[1] = v158;
        unsigned int v126 = v244 + 1;
        LODWORD(v244) = v244 + 1;
        ++v154;
        v155 -= 4;
      }
      while (v155);
    }
    if ((sub_1CCF699C4((uint64_t *)a1, (uint64_t)&v243, a2, (int)v51 + 4) & 1) == 0)
    {
LABEL_172:
      uint64_t v5 = 0;
LABEL_212:
      if (v243 != (llvm::MachineOperand *)v245) {
        free(v243);
      }
LABEL_214:
      sub_1CD78BF58(&v247);
      return v5;
    }
    uint64_t v136 = (*(uint64_t (**)(void, void, unint64_t))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112), *(void *)(*(void *)(a1 + 32) + 8), v46);
    LODWORD(v240) = v240 & 0xFFF00000 | 0xC;
    *((void *)&v240 + 1) = 0;
    *(void *)&long long v241 = v136;
    if (v244 >= HIDWORD(v244))
    {
      if (v243 > (llvm::MachineOperand *)&v240 || (char *)v243 + 32 * v244 <= (char *)&v240) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v139 = (_OWORD *)((char *)v243 + 32 * v244);
    long long v140 = v241;
    *long long v139 = v240;
    v139[1] = v140;
    LODWORD(v244) = v244 + 1;
    uint64_t v141 = (_WORD *)(*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 104)
                                                                                          + 1928))(*(void *)(a1 + 104), v46, v137, v138);
    int v142 = (unsigned __int16)*v141;
    if (*v141)
    {
      unsigned int v160 = 1;
      unsigned int v161 = v244;
      do
      {
        *((void *)&v240 + 1) = 0;
        long long v241 = 0uLL;
        LODWORD(v240) = 1124073472;
        DWORD1(v240) = v142;
        if (v161 >= HIDWORD(v244))
        {
          BOOL v164 = (char *)v243 + 32 * v161 > (char *)&v240;
          if (v243 > (llvm::MachineOperand *)&v240 || !v164) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        BOOL v162 = (_OWORD *)((char *)v243 + 32 * v244);
        long long v163 = v241;
        *BOOL v162 = v240;
        v162[1] = v163;
        unsigned int v161 = v244 + 1;
        LODWORD(v244) = v244 + 1;
        int v142 = (unsigned __int16)v141[v160++];
      }
      while (v142);
    }
    if (v263)
    {
      uint64_t v165 = v262;
      unsigned int v166 = v244;
      uint64_t v167 = 4 * v263;
      do
      {
        unsigned int v168 = *v165;
        *((void *)&v240 + 1) = 0;
        long long v241 = 0uLL;
        LODWORD(v240) = 50331648;
        DWORD1(v240) = v168;
        if (v166 >= HIDWORD(v244))
        {
          BOOL v171 = (char *)v243 + 32 * v166 > (char *)&v240;
          if (v243 > (llvm::MachineOperand *)&v240 || !v171) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v169 = (_OWORD *)((char *)v243 + 32 * v244);
        long long v170 = v241;
        *uint64_t v169 = v240;
        v169[1] = v170;
        unsigned int v166 = v244 + 1;
        LODWORD(v244) = v244 + 1;
        ++v165;
        v167 -= 4;
      }
      while (v167);
    }
    uint64_t v143 = *(void *)(*(void *)(a1 + 32) + 640);
    uint64_t v144 = v253;
    uint64_t v145 = *(void *)(*(void *)(a1 + 96) + 8) + 1296;
    if ((*(_WORD *)(v253 + 44) & 4) == 0)
    {
      BOOL v146 = *(llvm::MachineFunction **)(v143 + 32);
      uint64_t v147 = *(unsigned __int8 **)(a1 + 72);
      v242 = v147;
      if (v147) {
        llvm::MetadataTracking::track((uint64_t)&v242, v147, 2);
      }
      uint64_t v148 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v146, v145, &v242, 0);
      if (!v242) {
        goto LABEL_168;
      }
      int v232 = *v242;
      if ((v232 - 4) > 0x1E)
      {
        if ((v232 - 3) >= 0xFFFFFFFE) {
          v238 = v242;
        }
        else {
          v238 = 0;
        }
        if ((v232 - 3) < 0xFFFFFFFE)
        {
          if (v232 == 3) {
            *((void *)v242 + 1) = 0;
          }
          goto LABEL_168;
        }
        unint64_t v234 = (unint64_t)(v238 + 8);
      }
      else
      {
        if ((v242[1] & 0x7F) != 2 && !*((_DWORD *)v242 + 3)) {
          goto LABEL_168;
        }
        uint64_t v233 = *((void *)v242 + 2);
        if ((v233 & 4) == 0) {
          goto LABEL_168;
        }
        unint64_t v234 = v233 & 0xFFFFFFFFFFFFFFF8;
        if (!v234) {
          goto LABEL_168;
        }
      }
      *(void *)&long long v240 = &v242;
      sub_1CC5FA668(v234 + 16, &v240);
LABEL_168:
      uint64_t v149 = *(void *)(v143 + 40);
      *(void *)(v148 + 24) = v149;
      uint64_t v150 = *(void *)(v149 + 32);
      uint64_t v151 = *(unsigned int *)(v148 + 40);
      if (v151)
      {
        uint64_t v202 = *(void *)(v148 + 32);
        uint64_t v203 = *(void *)(v150 + 40);
        uint64_t v204 = 32 * v151;
        do
        {
          if (!*(unsigned char *)v202)
          {
            uint64_t v205 = *(unsigned int *)(v202 + 4);
            if ((int)v205 >= 0) {
              v206 = (uint64_t *)(*(void *)(v203 + 272) + 8 * v205);
            }
            else {
              v206 = (uint64_t *)(*(void *)(v203 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
            }
            uint64_t v207 = *v206;
            if (*v206)
            {
              uint64_t v208 = *(void *)(v207 + 16);
              *(void *)(v207 + 16) = v202;
              *(void *)(v202 + 16) = v208;
              if (*(unsigned char *)(v202 + 3))
              {
                *(void *)(v202 + 24) = v207;
              }
              else
              {
                *(void *)(v202 + 24) = 0;
                v206 = (uint64_t *)(v208 + 24);
              }
            }
            else
            {
              *(void *)(v202 + 16) = v202;
              *(void *)(v202 + 24) = 0;
            }
            uint64_t *v206 = v202;
          }
          v202 += 32;
          v204 -= 32;
        }
        while (v204);
      }
      uint64_t v152 = *(void *)(v150 + 728);
      if (v152) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v152 + 24))(v152, v148);
      }
      unint64_t v153 = *(void *)v144 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v148 = v153 | *(void *)v148 & 7;
      *(void *)(v148 + 8) = v144;
      *(void *)(v153 + 8) = v148;
      *(void *)uint64_t v144 = *(void *)v144 & 7 | v148;
LABEL_207:
      if (v244)
      {
        uint64_t v173 = v243;
        uint64_t v174 = 32 * v244;
        do
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v148, v146, v173);
          uint64_t v173 = (llvm::MachineOperand *)((char *)v173 + 32);
          v174 -= 32;
        }
        while (v174);
      }
      llvm::MachineInstr::setPhysRegsDeadExcept(v148, v262, v263, *(void *)(a1 + 112));
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v253);
      uint64_t v5 = 1;
      *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) + 40) = 1;
      if (HIDWORD(v253)) {
        sub_1CD78997C(a1, a2, SDWORD2(v253), SHIDWORD(v253));
      }
      goto LABEL_212;
    }
    BOOL v146 = *(llvm::MachineFunction **)(v143 + 32);
    int v172 = *(unsigned __int8 **)(a1 + 72);
    v242 = v172;
    if (v172) {
      llvm::MetadataTracking::track((uint64_t)&v242, v172, 2);
    }
    uint64_t v148 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v146, v145, &v242, 0);
    if (v242)
    {
      int v235 = *v242;
      if ((v235 - 4) > 0x1E)
      {
        if ((v235 - 3) >= 0xFFFFFFFE) {
          v239 = v242;
        }
        else {
          v239 = 0;
        }
        if ((v235 - 3) < 0xFFFFFFFE)
        {
          if (v235 == 3) {
            *((void *)v242 + 1) = 0;
          }
          goto LABEL_203;
        }
        unint64_t v237 = (unint64_t)(v239 + 8);
      }
      else
      {
        if ((v242[1] & 0x7F) != 2 && !*((_DWORD *)v242 + 3)) {
          goto LABEL_203;
        }
        uint64_t v236 = *((void *)v242 + 2);
        if ((v236 & 4) == 0) {
          goto LABEL_203;
        }
        unint64_t v237 = v236 & 0xFFFFFFFFFFFFFFF8;
        if (!v237) {
          goto LABEL_203;
        }
      }
      *(void *)&long long v240 = &v242;
      sub_1CC5FA668(v237 + 16, &v240);
    }
LABEL_203:
    if (v143 + 48 != v144 && (*(_WORD *)(v144 + 44) & 4) != 0) {
      *(_WORD *)(v148 + 44) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)(v143 + 40), (uint64_t *)v144, v148);
    goto LABEL_207;
  }
  if (v4 != 129)
  {
    if (v4 != 166) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }

  return sub_1CD789E9C(a1, a2);
}

uint64_t sub_1CCF6C074(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[13];
  int v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(llvm::EVT ****)(a2 - 8);
  }
  else {
    uint64_t v8 = (llvm::EVT ***)(a2 - 32 * (v7 & 0x7FFFFFF));
  }
  unsigned __int8 v9 = sub_1CB87DC14(v6, a1[11], **v8, 0);
  unsigned __int8 v10 = sub_1CB87DC14(a1[13], a1[11], *(llvm::EVT **)a2, 0);
  uint64_t v11 = 0;
  if ((v9 & 0xFE) != 0 && (v10 & 0xFE) != 0)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v13 = a1[13];
      if (*(void *)(v13 + 8 * v10 + 96)
        && v9
        && *(void *)(v13 + 8 * v9 + 96)
        && ((int v15 = *(_DWORD *)(a2 + 20), (v15 & 0x40000000) != 0)
          ? (int v16 = *(uint64_t **)(a2 - 8))
          : (int v16 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF))),
            (uint64_t v17 = sub_1CD789230(a1, *v16), v17)
         && (int v18 = (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t, uint64_t))(*a1 + 64))(a1, v9, v11, a3, v17)) != 0))
      {
        uint64_t v11 = 1;
        sub_1CD78997C((uint64_t)a1, a2, v18, 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

uint64_t sub_1CCF6C1C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4 == a2 + 40)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
  }
  uint64_t v90 = v94;
  long long v91 = v94;
  uint64_t v92 = 4;
  int v93 = 0;
  *(_DWORD *)(a1[4] + 768) = (*(void *)(a1[4] + 752) - *(void *)(a1[4] + 744)) >> 4;
  uint64_t v7 = 1;
  if (*(unsigned char *)(v6 + 16) != 30)
  {
    int v8 = 2;
    switch(*(unsigned char *)(v6 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_181;
      case 0x1F:
        int v8 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_170;
      case 0x20:
      case 0x26:
LABEL_181:
        int v8 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_170;
      case 0x21:
        goto LABEL_13;
      case 0x24:
        int v8 = *(_WORD *)(v6 + 18) & 1;
        goto LABEL_170;
      case 0x25:
        int v8 = 1;
        goto LABEL_13;
      case 0x27:
        int v8 = *(_DWORD *)(v6 + 80) + 1;
LABEL_170:
        if (!v8) {
          goto LABEL_165;
        }
        goto LABEL_13;
      default:
        goto LABEL_165;
    }
  }
  if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
LABEL_13:
  unsigned int v9 = 0;
  unsigned __int8 v10 = (unsigned __int8 **)(a1 + 9);
  while (1)
  {
    uint64_t Successor = 0;
    uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v6, v9);
    uint64_t v11 = *(void *)(Successor + 48);
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(v12 + 16) != 83) {
      goto LABEL_18;
    }
    uint64_t v13 = sub_1CD3CE844((_DWORD *)(v3[4] + 56), &Successor)[1];
    uint64_t v14 = v91;
    uint64_t v15 = HIDWORD(v92);
    if (v91 == v90)
    {
      if (HIDWORD(v92))
      {
        int v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v92);
        int v18 = v91;
        while (*(void *)v18 != v13)
        {
          if (*(void *)v18 == -2) {
            int v16 = v18;
          }
          v18 += 8;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_28;
            }
            *(void *)int v16 = v13;
            --v93;
            goto LABEL_52;
          }
        }
        goto LABEL_18;
      }
LABEL_28:
      unsigned int v19 = v92;
      if (HIDWORD(v92) < v92)
      {
        ++HIDWORD(v92);
        *(void *)&v91[8 * v15] = v13;
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v19 = v92;
    }
    if (3 * v19 <= 4 * (HIDWORD(v92) - v93))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v92) >= v19 >> 3)
    {
      goto LABEL_33;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v90, v19);
    unsigned int v19 = v92;
    uint64_t v14 = v91;
LABEL_33:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    unint64_t v22 = &v14[8 * v21];
    uint64_t v23 = *(void *)v22;
    if (*(void *)v22 != -1)
    {
      unint64_t v24 = 0;
      int v25 = 1;
      while (v23 != v13)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          unint64_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unint64_t v22 = &v14[8 * (v27 & v20)];
        uint64_t v23 = *(void *)v22;
        if (*(void *)v22 == -1) {
          goto LABEL_45;
        }
      }
      goto LABEL_18;
    }
    unint64_t v24 = 0;
LABEL_45:
    unint64_t v28 = v24 ? v24 : v22;
    if (*(void *)v28 != v13) {
      break;
    }
LABEL_18:
    if (++v9 == v8)
    {
      uint64_t v7 = 1;
      goto LABEL_165;
    }
  }
  if (*(void *)v28 == -2) {
    --v93;
  }
  else {
    ++HIDWORD(v92);
  }
  *(void *)unint64_t v28 = v13;
LABEL_52:
  if (*(void *)(Successor + 40) == Successor + 40) {
    goto LABEL_18;
  }
  uint64_t v29 = *(void *)(Successor + 48);
  uint64_t v30 = v29 - 24;
  uint64_t v31 = v29 ? v29 - 24 : 0;
  if (!v29 || *(unsigned char *)(v31 + 16) != 83) {
    goto LABEL_18;
  }
  uint64_t v32 = *(void *)(v13 + 56);
  uint64_t v84 = v2;
  uint64_t v85 = v3;
  uint64_t v86 = v10;
  while (2)
  {
    if (!*(void *)(v30 + 8)) {
      goto LABEL_105;
    }
    unsigned __int8 v33 = sub_1CB87DC14(v3[13], v3[11], *(llvm::EVT **)v30, (llvm::Type *)1);
    if (v33 == 1) {
      goto LABEL_161;
    }
    if (v33)
    {
      if (v33 == 2 || *(void *)(v3[13] + 8 * v33 + 96) != 0)
      {
LABEL_69:
        uint64_t v87 = v32;
        uint64_t v35 = sub_1CBF73380(v30, v2);
        uint64_t v88 = 0;
        if (&v88 != v10)
        {
          uint64_t v36 = *v10;
          if (!*v10) {
            goto LABEL_71;
          }
          int v58 = *v36;
          if ((v58 - 4) > 0x1E)
          {
            if ((v58 - 3) >= 0xFFFFFFFE) {
              long long v67 = *v10;
            }
            else {
              long long v67 = 0;
            }
            if ((v58 - 3) <= 0xFFFFFFFD)
            {
              if (v58 == 3) {
                *((void *)v36 + 1) = 0;
              }
              goto LABEL_71;
            }
            unint64_t v60 = (unint64_t)(v67 + 8);
LABEL_134:
            uint64_t v95 = v10;
            sub_1CC5FA668(v60 + 16, &v95);
            long long v68 = v88;
            unsigned char *v10 = v88;
            if (v68) {
              llvm::MetadataTracking::retrack((uint64_t)&v88, v68, (uint64_t)v10);
            }
          }
          else
          {
            if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
            {
              uint64_t v59 = *((void *)v36 + 2);
              if ((v59 & 4) != 0)
              {
                unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
                if (v60) {
                  goto LABEL_134;
                }
              }
            }
LABEL_71:
            unsigned char *v10 = 0;
          }
        }
        if (*(unsigned __int8 *)(v35 + 16) >= 0x1Cu)
        {
          if (v35)
          {
            uint64_t v37 = (unsigned __int8 **)(v35 + 48);
            if ((unsigned __int8 **)(v35 + 48) != v10)
            {
              int v38 = *v10;
              if (!*v10) {
                goto LABEL_76;
              }
              int v64 = *v38;
              if ((v64 - 4) <= 0x1E)
              {
                if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
                  goto LABEL_76;
                }
                uint64_t v65 = *((void *)v38 + 2);
                if ((v65 & 4) == 0) {
                  goto LABEL_76;
                }
                unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
                if (!v66) {
                  goto LABEL_76;
                }
                goto LABEL_152;
              }
              if ((v64 - 3) >= 0xFFFFFFFE) {
                uint64_t v71 = *v10;
              }
              else {
                uint64_t v71 = 0;
              }
              if ((v64 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v66 = (unint64_t)(v71 + 8);
LABEL_152:
                uint64_t v95 = v10;
                sub_1CC5FA668(v66 + 16, &v95);
                goto LABEL_76;
              }
              if (v64 == 3) {
                *((void *)v38 + 1) = 0;
              }
LABEL_76:
              uint64_t v39 = *v37;
              unsigned char *v10 = *v37;
              if (v39) {
                llvm::MetadataTracking::track((uint64_t)v10, v39, 2);
              }
            }
          }
        }
        int v40 = sub_1CD789230(v3, v35);
        uint64_t v41 = v3[4];
        uint64_t v42 = (void *)(v41 + 744);
        if (!v40)
        {
          unint64_t v77 = *(unsigned int *)(v41 + 768);
          uint64_t v78 = *(void *)(v41 + 744);
          unint64_t v79 = (*(void *)(v41 + 752) - v78) >> 4;
          if (v77 <= v79)
          {
            if (v77 < v79) {
              *(void *)(v41 + 752) = v78 + 16 * v77;
            }
            goto LABEL_164;
          }
          unint64_t v81 = v77 - v79;
          uint64_t v80 = (void **)(v41 + 744);
LABEL_176:
          sub_1CD4FEACC(v80, v81);
          goto LABEL_164;
        }
        int v43 = v40;
        if (!v87 || (uint64_t v44 = v87, (*(unsigned char *)v87 & 4) == 0))
        {
          uint64_t v44 = v87;
          if ((*(_WORD *)(v87 + 44) & 8) != 0)
          {
            uint64_t v44 = v87;
            do
              uint64_t v44 = *(void *)(v44 + 8);
            while ((*(_WORD *)(v44 + 44) & 8) != 0);
          }
        }
        uint64_t v32 = *(void *)(v44 + 8);
        int v45 = *(_DWORD **)(v41 + 752);
        unint64_t v46 = *(void *)(v41 + 760);
        if ((unint64_t)v45 >= v46)
        {
          uint64_t v83 = v32;
          unsigned int v48 = (_DWORD *)*v42;
          uint64_t v49 = ((uint64_t)v45 - *v42) >> 4;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60) {
            abort();
          }
          uint64_t v51 = v46 - (void)v48;
          if (v51 >> 3 > v50) {
            unint64_t v50 = v51 >> 3;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
          }
          unint64_t v82 = v50;
          if (v50)
          {
            if (v50 >> 60) {
              sub_1CB833614();
            }
            unsigned int v52 = (char *)operator new(16 * v50);
            uint64_t v42 = (void *)(v41 + 744);
          }
          else
          {
            unsigned int v52 = 0;
          }
          unsigned int v53 = &v52[16 * v49];
          *(void *)unsigned int v53 = v87;
          *((_DWORD *)v53 + 2) = v43;
          uint64_t v54 = v53;
          if (v45 == v48)
          {
            unsigned __int8 v10 = v86;
            uint64_t v32 = v83;
          }
          else
          {
            unsigned __int8 v10 = v86;
            uint64_t v32 = v83;
            do
            {
              *((_OWORD *)v54 - 1) = *((_OWORD *)v45 - 1);
              v54 -= 16;
              v45 -= 4;
            }
            while (v45 != v48);
            int v45 = (_DWORD *)*v42;
          }
          *(void *)(v41 + 744) = v54;
          int v47 = v53 + 16;
          *(void *)(v41 + 752) = v53 + 16;
          *(void *)(v41 + 760) = &v52[16 * v82];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(void *)int v45 = v87;
          v45[2] = v40;
          int v47 = v45 + 4;
          unsigned __int8 v10 = v86;
        }
        *(void *)(v41 + 752) = v47;
        uint64_t v88 = 0;
        uint64_t v2 = v84;
        uint64_t v3 = v85;
        if (&v88 != v10)
        {
          uint64_t v55 = *v10;
          if (!*v10) {
            goto LABEL_104;
          }
          int v61 = *v55;
          if ((v61 - 4) > 0x1E)
          {
            if ((v61 - 3) >= 0xFFFFFFFE) {
              long long v69 = *v10;
            }
            else {
              long long v69 = 0;
            }
            if ((v61 - 3) <= 0xFFFFFFFD)
            {
              if (v61 == 3) {
                *((void *)v55 + 1) = 0;
              }
              goto LABEL_104;
            }
            unint64_t v63 = (unint64_t)(v69 + 8);
LABEL_141:
            uint64_t v95 = v10;
            sub_1CC5FA668(v63 + 16, &v95);
            long long v70 = v88;
            unsigned char *v10 = v88;
            if (v70) {
              llvm::MetadataTracking::retrack((uint64_t)&v88, v70, (uint64_t)v10);
            }
          }
          else
          {
            if ((v55[1] & 0x7F) == 2 || *((_DWORD *)v55 + 3))
            {
              uint64_t v62 = *((void *)v55 + 2);
              if ((v62 & 4) != 0)
              {
                unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
                if (v63) {
                  goto LABEL_141;
                }
              }
            }
LABEL_104:
            unsigned char *v10 = 0;
          }
        }
LABEL_105:
        uint64_t v56 = *(void *)(v30 + 32);
        uint64_t v30 = v56 - 24;
        if (v56) {
          uint64_t v57 = v56 - 24;
        }
        else {
          uint64_t v57 = 0;
        }
        if (!v56 || *(unsigned char *)(v57 + 16) != 83) {
          goto LABEL_18;
        }
        continue;
      }
    }
    else if (v33 == 2)
    {
      goto LABEL_69;
    }
    break;
  }
  if (v33 - 3 < 2) {
    goto LABEL_69;
  }
LABEL_161:
  uint64_t v72 = v3[4];
  unint64_t v73 = *(unsigned int *)(v72 + 768);
  uint64_t v74 = *(void *)(v72 + 744);
  unint64_t v75 = (*(void *)(v72 + 752) - v74) >> 4;
  if (v73 > v75)
  {
    uint64_t v80 = (void **)(v72 + 744);
    unint64_t v81 = v73 - v75;
    goto LABEL_176;
  }
  if (v73 < v75) {
    *(void *)(v72 + 752) = v74 + 16 * v73;
  }
LABEL_164:
  uint64_t v7 = 0;
LABEL_165:
  if (v91 != v90) {
    free(v91);
  }
  return v7;
}

char *sub_1CCF6C9D0(uint64_t a1, uint64_t a2, int *a3)
{
  int v6 = *(_DWORD *)(a2 + 16);
  if (!v6)
  {
    int v16 = 0;
LABEL_17:
    uint64_t result = sub_1CBA855C4((char **)a2, (uint64_t)a3, a3, v16);
    *(_DWORD *)uint64_t result = *a3;
    uint64_t v7 = *(char **)a2;
    int v6 = *(_DWORD *)(a2 + 16);
    char v11 = 1;
    goto LABEL_4;
  }
  uint64_t v7 = *(char **)a2;
  unsigned int v8 = (37 * *a3) & (v6 - 1);
  uint64_t result = (char *)(*(void *)a2 + 4 * v8);
  int v10 = *(_DWORD *)result;
  if (*a3 != *(_DWORD *)result)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v10 != -1)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == -2;
      }
      if (v14) {
        uint64_t v12 = result;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & (v6 - 1);
      uint64_t result = &v7[4 * v8];
      int v10 = *(_DWORD *)result;
      if (*a3 == *(_DWORD *)result) {
        goto LABEL_3;
      }
    }
    if (v12) {
      int v16 = v12;
    }
    else {
      int v16 = result;
    }
    goto LABEL_17;
  }
LABEL_3:
  char v11 = 0;
LABEL_4:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = &v7[4 * v6];
  *(unsigned char *)(a1 + 16) = v11;
  return result;
}

_OWORD *sub_1CCF6CAB8(void **a1, _OWORD *a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    unsigned int v9 = (char *)operator new(48 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = &v9[48 * v4];
  long long v11 = a2[1];
  *(_OWORD *)int v10 = *a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = a2[2];
  uint64_t v12 = v10 + 48;
  if (v2 != v3)
  {
    do
    {
      long long v13 = *((_OWORD *)v2 - 3);
      long long v14 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v10 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v10 - 1) = v14;
      *((_OWORD *)v10 - 3) = v13;
      v10 -= 48;
      v2 -= 48;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[48 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void sub_1CCF6CBD4(uint64_t **a1, uint64_t *a2, llvm::MachineFunction *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  v300[24] = *MEMORY[0x1E4F143B8];
  *a1 = a2;
  a1[1] = (uint64_t *)a3;
  a1[2] = (uint64_t *)(*(uint64_t (**)(void *))(**((void **)a3 + 2) + 120))(*((void **)a3 + 2));
  uint64_t v8 = v7[1];
  v7[3] = *(void *)(v8 + 40);
  v275 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v8 + 16) + 112))(*(void *)(v8 + 16));
  v7[5] = *(void *)(a4 + 72);
  v299[0] = v300;
  v299[1] = (void *)0x400000000;
  v268 = a3;
  llvm::GetReturnInfo((*(unsigned __int16 *)(*v7 + 18) >> 4) & 0x3FF, **(void ***)(*(void *)(*v7 + 24) + 16), *(void *)(*v7 + 112), (uint64_t)v299, (unsigned __int8 *)v7[2], (llvm::DataLayout *)(*(void *)(*(void *)a3 + 40) + 272));
  char v10 = (*(uint64_t (**)(void))(*(void *)v7[2] + 1856))();
  long long v11 = 0;
  *((unsigned char *)v7 + 48) = v10;
  unsigned int v290 = 0;
  v289[0] = 0;
  v289[1] = 0;
  uint64_t v12 = *v7;
  if ((*(unsigned char *)(*v7 + 18) & 8) != 0)
  {
    int v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0) {
      long long v14 = *(llvm::Value ***)(v12 - 8);
    }
    else {
      long long v14 = (llvm::Value **)(v12 - 32 * (v13 & 0x7FFFFFF));
    }
    long long v11 = *v14;
  }
  unsigned int v15 = llvm::classifyEHPersonality(v11, v9);
  unsigned int v17 = v15;
  unsigned int v266 = v15 - 7;
  if (v15 - 7 <= 3)
  {
    uint64_t v18 = v7[1];
    uint64_t v19 = *(void *)(v18 + 96);
    if (v15 == 9)
    {
      llvm::calculateWinCXXEHStateNumbers(a2, *(const llvm::Function **)(v18 + 96), v16);
    }
    else if (v266 > 1)
    {
      if (v15 == 10) {
        llvm::calculateClrEHStateNumbers((llvm *)a2, (const llvm::Function *)v19, v16);
      }
    }
    else
    {
      llvm::calculateSEHStateNumbers(a2, (const llvm::Function *)v19, v16);
    }
    uint64_t v20 = *(unsigned int *)(v19 + 184);
    if (!v20) {
      goto LABEL_25;
    }
    uint64_t v21 = *(void *)(v19 + 176);
    uint64_t v22 = v21 + (v20 << 6);
    do
    {
      uint64_t v23 = *(unsigned int *)(v21 + 24);
      if (v23)
      {
        uint64_t v24 = 32 * v23;
        int v25 = (uint64_t *)(*(void *)(v21 + 16) + 8);
        do
        {
          uint64_t v26 = *v25;
          if (*v25)
          {
            v285 = 0;
            *(void *)&long long v291 = v26;
            sub_1CD78C574((void *)&v291 + 1, 0);
            sub_1CD78C8F0((uint64_t)&v294, (uint64_t)v289, (uint64_t *)&v291, (void *)&v291 + 1);
            sub_1CD64B90C((unint64_t *)v294 + 1, (uint64_t)v25);
            sub_1CD64E248((uint64_t *)&v291 + 1);
            sub_1CD64E248((uint64_t *)&v285);
          }
          else
          {
            *(_DWORD *)int v25 = 0x7FFFFFFF;
          }
          v25 += 4;
          v24 -= 32;
        }
        while (v24);
      }
      v21 += 64;
    }
    while (v21 != v22);
  }
  if (v17 != 12)
  {
LABEL_25:
    int v265 = 0;
    goto LABEL_26;
  }
  llvm::calculateWasmEHInfo(a2, *(void *)(v7[1] + 88));
  int v265 = 1;
LABEL_26:
  uint64_t v27 = *v7;
  uint64_t v28 = *v7 + 72;
  uint64_t v29 = *(void *)(*v7 + 80);
  uint64_t v283 = (uint64_t)v7;
  if (v29 == v28) {
    goto LABEL_143;
  }
  unsigned int v30 = v275[12];
  v269 = v7 + 22;
  uint64_t v276 = *v7 + 72;
  v278 = v7 + 82;
  unsigned int v273 = v30;
  do
  {
    uint64_t v31 = v29 - 24;
    if (!v29) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = v31 + 40;
    uint64_t v33 = *(void *)(v31 + 48);
    uint64_t v281 = v31 + 40;
    if (v33 != v31 + 40)
    {
      do
      {
        if (v33) {
          uint64_t v39 = v33 - 24;
        }
        else {
          uint64_t v39 = 0;
        }
        int v40 = *(unsigned __int8 *)(v39 + 16);
        if (v40 == 59) {
          uint64_t v41 = v39;
        }
        else {
          uint64_t v41 = 0;
        }
        v285 = (unsigned __int8 *)v41;
        if (v33 && v40 == 59)
        {
          uint64_t v42 = *(llvm::Type **)(v41 + 64);
          unsigned int Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)v7[1] + 40) + 272), v42, 0);
          __int16 v44 = *((_WORD *)v285 + 9);
          unsigned int v45 = __clz(1 << v44) ^ 0x3F;
          if (v30 < Alignment) {
            unsigned int Alignment = v30;
          }
          if (Alignment <= v45) {
            unsigned int v46 = v45;
          }
          else {
            unsigned int v46 = Alignment;
          }
          uint64_t v47 = *((void *)v285 - 4);
          if (*(unsigned char *)(v47 + 16) == 16)
          {
            uint64_t v48 = *((void *)v285 + 5);
            uint64_t v49 = *(void *)(*(void *)(v48 + 56) + 80);
            uint64_t v50 = v49 ? v49 - 24 : 0;
            int v51 = v44 & 0x40;
            BOOL v52 = v48 == v50 && v51 == 0;
            if (v52 && (v275[20] || v46 <= v30))
            {
              unint64_t v60 = (llvm::DataLayout *)(*(void *)(*(void *)v7[1] + 40) + 272);
              uint64_t v61 = sub_1CB83544C((uint64_t)v60, (uint64_t)v42);
              char v62 = llvm::DataLayout::getAlignment(v60, v42, 1);
              unint64_t v63 = (void *)(v47 + 24);
              if (*(_DWORD *)(v47 + 32) >= 0x41u) {
                unint64_t v63 = (void *)*v63;
              }
              unint64_t v64 = *v63 * (((1 << v62) + ((unint64_t)(v61 + 7) >> 3) - 1) & -(1 << v62));
              if (v64 <= 1) {
                uint64_t v65 = 1;
              }
              else {
                uint64_t v65 = v64;
              }
              unint64_t v66 = v285;
              uint64_t v67 = v290;
              uint64_t v271 = v289[0];
              if (!v290)
              {
                uint64_t v38 = v289[0];
                goto LABEL_102;
              }
              LODWORD(v36) = ((v285 >> 4) ^ (v285 >> 9)) & (v290 - 1);
              uint64_t v38 = v289[0] + 16 * v36;
              uint64_t v37 = *(unsigned __int8 **)v38;
              if (v285 == *(unsigned __int8 **)v38)
              {
LABEL_96:
                if (v36 != v290)
                {
                  if ((*(uint64_t (**)(void))(**(void **)(v283 + 16) + 728))(*(void *)(v283 + 16)))
                  {
                    int FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(*(void *)(v283 + 8) + 56), v65, 0, 0, 1);
                    uint64_t v69 = *(void *)(*(void *)(v283 + 8) + 56);
                    *(unsigned char *)(*(void *)(v69 + 8) + 40 * (*(_DWORD *)(v69 + 32) + FixedObject) + 16) = v46;
                    if (!*(unsigned char *)(*(void *)(v69 + 8)
                                   + 40 * (*(_DWORD *)(v69 + 32) + FixedObject)
                                   + 20)
                      && v46 > *(unsigned __int8 *)(v69 + 60))
                    {
                      *(unsigned char *)(v69 + 60) = v46;
                    }
                    goto LABEL_103;
                  }
                  unint64_t v66 = v285;
                }
              }
              else
              {
                int v34 = 1;
                while (v37 != (unsigned __int8 *)-4096)
                {
                  int v35 = v36 + v34++;
                  uint64_t v36 = v35 & (v290 - 1);
                  uint64_t v37 = *(unsigned __int8 **)(v289[0] + 16 * v36);
                  if (v285 == v37)
                  {
                    uint64_t v38 = v289[0] + 16 * v36;
                    goto LABEL_96;
                  }
                }
                uint64_t v38 = v289[0] + 16 * v290;
              }
LABEL_102:
              int FixedObject = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(*(void *)(v283 + 8) + 56), v65, v46, 0, (uint64_t)v66, 0);
LABEL_103:
              if (*((unsigned char *)v42 + 8) == 19)
              {
                uint64_t v70 = *(void *)(*(void *)(v283 + 8) + 56);
                *(unsigned char *)(*(void *)(v70 + 8) + 40 * (*(_DWORD *)(v70 + 32) + FixedObject) + 20) = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v275 + 328))(v275);
              }
              *((_DWORD *)sub_1CD78CBDC(v269, &v285) + 2) = FixedObject;
              uint64_t v71 = v271 + 16 * v67;
              unsigned int v30 = v273;
              uint64_t v32 = v281;
              if (v38 != v71)
              {
                unint64_t v74 = *(void *)(v38 + 8);
                unint64_t v73 = (_DWORD **)(v38 + 8);
                unint64_t v72 = v74;
                if ((v74 & 2) != 0)
                {
                  unint64_t v76 = v72 & 0xFFFFFFFFFFFFFFFCLL;
                  unint64_t v73 = *(_DWORD ***)v76;
                  uint64_t v75 = *(void *)v76 + 8 * *(unsigned int *)(v76 + 8);
                }
                else
                {
                  uint64_t v75 = (uint64_t)&v73[v72 > 3];
                }
                while (v73 != (_DWORD **)v75)
                {
                  unint64_t v77 = *v73++;
                  _DWORD *v77 = FixedObject;
                }
              }
              goto LABEL_111;
            }
          }
          if (v46 <= v30) {
            unsigned __int8 v53 = 0;
          }
          else {
            unsigned __int8 v53 = v46;
          }
          llvm::MachineFrameInfo::CreateVariableSizedObject(*(unsigned __int8 **)(v7[1] + 56), v53, (uint64_t)v285);
          uint64_t v32 = v281;
        }
        else
        {
          if ((v40 - 33) > 0x33 || ((1 << (v40 - 33)) & 0x8000000000041) == 0) {
            goto LABEL_111;
          }
          if (*(unsigned char *)(*(void *)(v33 - 56) + 16) == 24)
          {
            int v55 = *(_DWORD *)(*(void *)(v283 + 16) + 88);
            (*(void (**)(void))(**(void **)(*(void *)(v283 + 8) + 16) + 176))(*(void *)(*(void *)(v283 + 8) + 16));
            (*(void (**)(void **__return_ptr))(**(void **)(v283 + 16) + 2008))(&v294);
            uint64_t v56 = v295;
            if (v294 != (void *)v295)
            {
              uint64_t v57 = (char *)v294 + 80;
              do
              {
                if (*((_DWORD *)v57 - 20) == 2)
                {
                  (*(void (**)(void, char *, void, void, uint64_t))(**(void **)(v283 + 16) + 2032))(*(void *)(v283 + 16), v57 - 80, 0, 0, a4);
                  if (v55 == (*(unsigned int (**)(void))(**(void **)(v283 + 16) + 2048))()) {
                    *(unsigned char *)(*(void *)(*(void *)(v283 + 8) + 56) + 650) = 1;
                  }
                }
                int v58 = v57 + 48;
                v57 += 128;
              }
              while (v58 != (char *)v56);
            }
            *(void *)&long long v291 = &v294;
            sub_1CC27A9C0((void ***)&v291);
            int v40 = *(unsigned __int8 *)(v39 + 16);
            unsigned int v30 = v273;
            uint64_t v32 = v281;
          }
          if (v40 != 84) {
            goto LABEL_111;
          }
          uint64_t v59 = *(void *)(v39 - 32);
          if (v59
            && !*(unsigned char *)(v59 + 16)
            && *(void *)(v59 + 24) == *(void *)(v39 + 72)
            && (*(unsigned char *)(v59 + 33) & 0x20) != 0)
          {
            if (*(_DWORD *)(*(void *)(v33 - 56) + 36) == 315) {
              *(unsigned char *)(*(void *)(*(void *)(v283 + 8) + 56) + 652) = 1;
            }
LABEL_85:
            if ((*(_WORD *)(v39 + 18) & 3) == 2 && *(_DWORD *)(*(void *)(*(void *)v283 + 24) + 8) >= 0x100u) {
              *(unsigned char *)(*(void *)(*(void *)(v283 + 8) + 56) + 653) = 1;
            }
            goto LABEL_111;
          }
          if (v33) {
            goto LABEL_85;
          }
        }
LABEL_111:
        uint64_t v78 = *(void *)(v39 + 8);
        if (v78)
        {
          int v80 = *(unsigned __int8 *)(v39 + 16);
          uint64_t v7 = (void *)v283;
          if (v80 == 83) {
            goto LABEL_120;
          }
          do
          {
            uint64_t v81 = *(void *)(v78 + 24);
            if (*(void *)(v81 + 40) != *(void *)(v39 + 40) || *(unsigned char *)(v81 + 16) == 83) {
              break;
            }
            uint64_t v78 = *(void *)(v78 + 8);
          }
          while (v78);
          if (v80 != 59
            || (v294 = (void *)v39, *(void *)&long long v291 = 0, (sub_1CB87DF68((uint64_t)v269, &v294, &v291) & 1) == 0))
          {
LABEL_120:
            sub_1CD3CD784(v283, (const llvm::Value *)v39);
          }
          uint64_t v82 = *(void *)(v39 + 8);
          if (v82)
          {
            unsigned int v79 = 0;
            LODWORD(v78) = 0;
            do
            {
              uint64_t v83 = *(void *)(v82 + 24);
              unsigned int v84 = *(unsigned __int8 *)(v83 + 16);
              if (v83) {
                BOOL v85 = v84 >= 0x1C;
              }
              else {
                BOOL v85 = 0;
              }
              if (v85 && v84 - 83 >= 0xFFFFFFFE)
              {
                int v87 = *(_WORD *)(v83 + 18) & 0x3F;
                if ((v87 - 38) < 4) {
                  ++v79;
                }
                if ((v87 - 34) < 4) {
                  LODWORD(v78) = v78 + 1;
                }
              }
              uint64_t v82 = *(void *)(v82 + 8);
            }
            while (v82);
          }
          else
          {
            LODWORD(v78) = 0;
            unsigned int v79 = 0;
          }
        }
        else
        {
          unsigned int v79 = 0;
          uint64_t v7 = (void *)v283;
        }
        if (v79 <= v78) {
          int v88 = 200;
        }
        else {
          int v88 = 198;
        }
        v294 = (void *)v39;
        *((_DWORD *)sub_1CD4B4E64(v278, &v294) + 2) = v88;
        uint64_t v33 = *(void *)(v33 + 8);
      }
      while (v33 != v32);
    }
    uint64_t v29 = *(void *)(v29 + 8);
  }
  while (v29 != v276);
  uint64_t v27 = *v7;
  uint64_t v28 = *(void *)(*v7 + 80);
LABEL_143:
  uint64_t v89 = v268;
  uint64_t v90 = v27 + 72;
  if (v28 != v27 + 72)
  {
    v267 = v7 + 7;
    uint64_t v270 = v27 + 72;
    v272 = v7 + 10;
    do
    {
      if (v28) {
        uint64_t v118 = v28 - 24;
      }
      else {
        uint64_t v118 = 0;
      }
      uint64_t v119 = *(void *)(v118 + 48);
      uint64_t v120 = v119 - 24;
      if (!v119) {
        uint64_t v120 = 0;
      }
      int v121 = *(unsigned __int8 *)(v120 + 16);
      uint64_t v122 = *(void *)(v118 + 48);
      if (v121 == 83)
      {
        uint64_t v122 = *(void *)(v118 + 48);
        do
        {
          uint64_t v122 = *(void *)(v122 + 8);
          uint64_t v123 = v122 - 24;
          if (!v122) {
            uint64_t v123 = 0;
          }
        }
        while (*(unsigned char *)(v123 + 16) == 83);
      }
      unsigned int v124 = *(unsigned __int8 *)(v122 - 8) - 38;
      BOOL v125 = v124 > 0x38;
      uint64_t v126 = (1 << v124) & 0x100060000000001;
      if (!v125 && v126 != 0)
      {
        while (v121 == 83)
        {
          uint64_t v119 = *(void *)(v119 + 8);
          uint64_t v128 = v119 - 24;
          if (!v119) {
            uint64_t v128 = 0;
          }
          int v121 = *(unsigned __int8 *)(v128 + 16);
        }
        int v129 = *(unsigned __int8 *)(v119 - 8);
        if (v129 != 94)
        {
          uint64_t v130 = v7[1];
          *(_WORD *)(v130 + 635) = 257;
          *(unsigned char *)(*(void *)(v130 + 56) + 650) = 1;
          if (v129 == 38) {
            goto LABEL_302;
          }
        }
      }
      uint64_t v131 = *((void *)v89 + 39);
      if (v131)
      {
        *((void *)v89 + 39) = *(void *)v131;
      }
      else
      {
        *((void *)v89 + 26) += 232;
        uint64_t v132 = *((void *)v89 + 16);
        if (((v132 + 7) & 0xFFFFFFFFFFFFFFF8) - v132 + 232 > *((void *)v89 + 17) - v132)
        {
          unsigned int v190 = *((_DWORD *)v89 + 38) >> 7;
          if (v190 >= 0x1E) {
            LOBYTE(v190) = 30;
          }
          uint64_t v191 = 4096 << v190;
          uint64_t v131 = (uint64_t)operator new(4096 << v190, (std::align_val_t)8uLL);
          unint64_t v192 = *((unsigned int *)v89 + 38);
          if (v192 >= *((unsigned int *)v89 + 39)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)v89 + 18) + 8 * v192) = v131;
          ++*((_DWORD *)v89 + 38);
          *((void *)v89 + 16) = v131 + 232;
          *((void *)v89 + 17) = v131 + v191;
        }
        else
        {
          uint64_t v131 = (v132 + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v89 + 16) = v131 + 232;
        }
      }
      llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v131, v89, (const llvm::BasicBlock *)v118);
      v294 = (void *)v118;
      int v133 = *((_DWORD *)v7 + 18);
      if (v133)
      {
        uint64_t v134 = v7[7];
        int v135 = v133 - 1;
        unsigned int v136 = v135 & ((v118 >> 4) ^ (v118 >> 9));
        uint64_t v137 = (void *)(v134 + 16 * v136);
        uint64_t v138 = *v137;
        if (v118 == *v137) {
          goto LABEL_213;
        }
        long long v139 = 0;
        int v140 = 1;
        while (v138 != -4096)
        {
          if (v139) {
            BOOL v141 = 0;
          }
          else {
            BOOL v141 = v138 == -8192;
          }
          if (v141) {
            long long v139 = v137;
          }
          unsigned int v142 = v136 + v140++;
          unsigned int v136 = v142 & v135;
          uint64_t v137 = (void *)(v134 + 16 * v136);
          uint64_t v138 = *v137;
          if (v118 == *v137) {
            goto LABEL_213;
          }
        }
        if (v139) {
          uint64_t v189 = v139;
        }
        else {
          uint64_t v189 = v137;
        }
      }
      else
      {
        uint64_t v189 = 0;
      }
      uint64_t v137 = sub_1CB883BA0(v267, (uint64_t)&v294, &v294, v189);
      *uint64_t v137 = v294;
      v137[1] = 0;
LABEL_213:
      v137[1] = v131;
      uint64_t v143 = v7[1];
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v143 + 320, v131);
      uint64_t v144 = *(void *)(v143 + 320);
      *(void *)uint64_t v131 = v144;
      *(void *)(v131 + 8) = v143 + 320;
      *(void *)(v144 + 8) = v131;
      *(void *)(v143 + 320) = v131;
      if ((*(_WORD *)(v118 + 18) & 0x7FFF) != 0) {
        *(unsigned char *)(v131 + 185) = 1;
      }
      uint64_t v145 = *(void *)(v118 + 48);
      if (v145) {
        BOOL v146 = (llvm::Type **)(v145 - 24);
      }
      else {
        BOOL v146 = 0;
      }
      int v147 = *((unsigned __int8 *)v146 + 16);
      uint64_t v148 = *(void *)(v118 + 48);
      if (v147 == 83)
      {
        uint64_t v148 = *(void *)(v118 + 48);
        do
        {
          uint64_t v148 = *(void *)(v148 + 8);
          uint64_t v149 = v148 - 24;
          if (!v148) {
            uint64_t v149 = 0;
          }
        }
        while (*(unsigned char *)(v149 + 16) == 83);
      }
      unsigned int v150 = *(unsigned __int8 *)(v148 - 8) - 38;
      BOOL v125 = v150 > 0x38;
      uint64_t v151 = (1 << v150) & 0x100060000000001;
      if (!v125 && v151 != 0) {
        *(unsigned char *)(v131 + 184) = 1;
      }
      if (v147 == 83 && *(void *)(v118 + 40) != v118 + 40 && v145)
      {
        unint64_t v153 = (unint64_t *)(v131 + 48);
        while (2)
        {
          if (v146[1] && (llvm::Type::isEmptyTy(*v146) & 1) == 0)
          {
            int v157 = (unsigned __int8 *)v146[6];
            v288 = v157;
            if (v157) {
              llvm::MetadataTracking::track((uint64_t)&v288, v157, 2);
            }
            v294 = v146;
            int v158 = *((_DWORD *)sub_1CD3CDD24(v272, &v294) + 2);
            v294 = &v296;
            uint64_t v295 = 0x400000000;
            llvm::ComputeValueVTs(v7[2], (llvm::DataLayout *)(*(void *)(*(void *)v7[1] + 40) + 272), (uint64_t)*v146, (uint64_t)&v294, 0, 0, 0);
            BOOL v159 = (uint64_t *)v294;
            if (v295)
            {
              v274 = v146;
              uint64_t v277 = v28;
              v279 = (uint64_t *)((char *)v294 + 16 * v295);
              v281 &= 0xFFFFFFFFFFFF0000;
              while (1)
              {
                int v160 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 584))(v7[2], **(void **)*v7, *v159, v159[1], v281);
                unsigned int v161 = v7;
                int v162 = v160;
                uint64_t v163 = (*(uint64_t (**)(void))(**(void **)(v161[1] + 16) + 104))(*(void *)(v161[1] + 16));
                if (v162) {
                  break;
                }
LABEL_283:
                v158 += v162;
                v159 += 2;
                uint64_t v7 = (void *)v283;
                if (v159 == v279)
                {
                  BOOL v159 = (uint64_t *)v294;
                  uint64_t v89 = v268;
                  uint64_t v90 = v270;
                  uint64_t v28 = v277;
                  BOOL v146 = v274;
                  goto LABEL_285;
                }
              }
              uint64_t v164 = v163;
              int v165 = 0;
              while (2)
              {
                uint64_t v166 = *(void *)(v164 + 8);
                uint64_t v167 = *(llvm::MachineFunction **)(v131 + 32);
                v285 = v288;
                if (v288) {
                  llvm::MetadataTracking::track((uint64_t)&v285, v288, 2);
                }
                unsigned int v168 = llvm::MachineFunction::CreateMachineInstr(v167, v166, &v285, 0);
                if (!v285)
                {
LABEL_251:
                  uint64_t v169 = *(void *)(v131 + 40);
                  *((void *)v168 + 3) = v169;
                  uint64_t v170 = *(void *)(v169 + 32);
                  uint64_t v171 = *((unsigned int *)v168 + 10);
                  if (v171)
                  {
                    uint64_t v174 = *((void *)v168 + 4);
                    uint64_t v175 = *(void *)(v170 + 40);
                    uint64_t v176 = 32 * v171;
                    do
                    {
                      if (!*(unsigned char *)v174)
                      {
                        uint64_t v177 = *(unsigned int *)(v174 + 4);
                        if ((int)v177 >= 0) {
                          uint64_t v178 = (uint64_t *)(*(void *)(v175 + 272) + 8 * v177);
                        }
                        else {
                          uint64_t v178 = (uint64_t *)(*(void *)(v175 + 24) + 16 * (v177 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v179 = *v178;
                        if (*v178)
                        {
                          uint64_t v180 = *(void *)(v179 + 16);
                          *(void *)(v179 + 16) = v174;
                          *(void *)(v174 + 16) = v180;
                          if (*(unsigned char *)(v174 + 3))
                          {
                            *(void *)(v174 + 24) = v179;
                          }
                          else
                          {
                            *(void *)(v174 + 24) = 0;
                            uint64_t v178 = (uint64_t *)(v180 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v174 + 16) = v174;
                          *(void *)(v174 + 24) = 0;
                        }
                        *uint64_t v178 = v174;
                      }
                      v174 += 32;
                      v176 -= 32;
                    }
                    while (v176);
                  }
                  uint64_t v172 = *(void *)(v170 + 728);
                  if (v172) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v172 + 24))(v172, v168);
                  }
                  unint64_t v173 = *v153 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unsigned int v168 = v173 | *(void *)v168 & 7;
                  *((void *)v168 + 1) = v153;
                  *(void *)(v173 + 8) = v168;
                  *unint64_t v153 = *v153 & 7 | (unint64_t)v168;
                  HIDWORD(v291) = 0;
                  uint64_t v292 = 0;
                  uint64_t v293 = 0;
                  *(void *)((char *)&v291 + 4) = (v165 + v158);
                  LODWORD(v291) = 0x1000000;
                  llvm::MachineInstr::addOperand(v168, v167, (const llvm::MachineOperand *)&v291);
                  if (++v165 == v162) {
                    goto LABEL_283;
                  }
                  continue;
                }
                break;
              }
              int v181 = *v285;
              if ((v181 - 4) > 0x1E)
              {
                if ((v181 - 3) >= 0xFFFFFFFE) {
                  uint64_t v184 = v285;
                }
                else {
                  uint64_t v184 = 0;
                }
                if ((v181 - 3) < 0xFFFFFFFE)
                {
                  if (v181 == 3) {
                    *((void *)v285 + 1) = 0;
                  }
                  goto LABEL_251;
                }
                unint64_t v183 = (unint64_t)(v184 + 8);
              }
              else
              {
                if ((v285[1] & 0x7F) != 2 && !*((_DWORD *)v285 + 3)) {
                  goto LABEL_251;
                }
                uint64_t v182 = *((void *)v285 + 2);
                if ((v182 & 4) == 0) {
                  goto LABEL_251;
                }
                unint64_t v183 = v182 & 0xFFFFFFFFFFFFFFF8;
                if (!v183) {
                  goto LABEL_251;
                }
              }
              *(void *)&long long v291 = &v285;
              sub_1CC5FA668(v183 + 16, &v291);
              goto LABEL_251;
            }
LABEL_285:
            if (v159 != &v296) {
              free(v159);
            }
            if (v288)
            {
              int v185 = *v288;
              if ((v185 - 4) > 0x1E)
              {
                if ((v185 - 3) >= 0xFFFFFFFE) {
                  uint64_t v188 = v288;
                }
                else {
                  uint64_t v188 = 0;
                }
                if ((v185 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v187 = (unint64_t)(v188 + 8);
                  goto LABEL_299;
                }
                if (v185 == 3) {
                  *((void *)v288 + 1) = 0;
                }
              }
              else if ((v288[1] & 0x7F) == 2 || *((_DWORD *)v288 + 3))
              {
                uint64_t v186 = *((void *)v288 + 2);
                if ((v186 & 4) != 0)
                {
                  unint64_t v187 = v186 & 0xFFFFFFFFFFFFFFF8;
                  if (v187)
                  {
LABEL_299:
                    v294 = &v288;
                    sub_1CC5FA668(v187 + 16, &v294);
                  }
                }
              }
            }
          }
          v154 = v146 + 3;
          if (!v146) {
            v154 = 0;
          }
          uint64_t v155 = v154[1];
          BOOL v146 = (llvm::Type **)(v155 - 24);
          if (v155) {
            uint64_t v156 = v155 - 24;
          }
          else {
            uint64_t v156 = 0;
          }
          if (!v155 || *(unsigned char *)(v156 + 16) != 83) {
            break;
          }
          continue;
        }
      }
LABEL_302:
      uint64_t v28 = *(void *)(v28 + 8);
    }
    while (v28 != v90);
  }
  if (v266 >= 4)
  {
    if (!v265) {
      goto LABEL_438;
    }
    uint64_t v193 = *(void *)(v7[1] + 88);
    LODWORD(v292) = 0;
    long long v291 = 0uLL;
    uint64_t v194 = *(void **)v193;
    uint64_t v195 = *(unsigned int *)(v193 + 16);
    uint64_t v196 = *(void *)v193 + 16 * v195;
    if (*(_DWORD *)(v193 + 8))
    {
      if (v195)
      {
        uint64_t v213 = 16 * v195;
        uint64_t v197 = *(void **)v193;
        while ((*v197 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v197 += 2;
          v213 -= 16;
          if (!v213) {
            goto LABEL_342;
          }
        }
      }
      else
      {
        uint64_t v197 = *(void **)v193;
      }
    }
    else
    {
LABEL_342:
      uint64_t v197 = (void *)(*(void *)v193 + 16 * v195);
    }
    BOOL v214 = &v194[2 * v195];
    if (v197 != v214)
    {
      do
      {
        v294 = 0;
        uint64_t v215 = v197[1];
        v294 = (void *)(*v197 & 0xFFFFFFFFFFFFFFF8);
        v285 = (unsigned __int8 *)(v215 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v216 = sub_1CD3CE844((_DWORD *)v7 + 14, &v285)[1];
        v288 = (unsigned __int8 *)(sub_1CD3CE844((_DWORD *)v7 + 14, &v294)[1] | 4);
        sub_1CD58E458((uint64_t)&v291, &v288)[1] = v216 | 4;
        uint64_t v217 = v197 + 2;
        uint64_t v197 = (void *)v196;
        if (v217 != (void *)v196)
        {
          uint64_t v197 = v217;
          while ((*v197 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v197 += 2;
            if (v197 == (void *)v196)
            {
              uint64_t v197 = (void *)v196;
              break;
            }
          }
        }
      }
      while (v197 != v214);
      uint64_t v194 = *(void **)v193;
    }
    MEMORY[0x1D25D9CD0](v194, 8);
    *(_OWORD *)uint64_t v193 = v291;
    long long v291 = 0uLL;
    *(_DWORD *)(v193 + 16) = v292;
    LODWORD(v292) = 0;
    unint64_t v218 = *(void **)(v193 + 24);
    v285 = 0;
    uint64_t v286 = 0;
    int v287 = 0;
    uint64_t v219 = *(unsigned int *)(v193 + 40);
    int v220 = &v218[9 * v219];
    v280 = (unsigned int *)(v193 + 24);
    uint64_t v282 = v193;
    if (*(_DWORD *)(v193 + 32))
    {
      if (v219)
      {
        uint64_t v222 = 72 * v219;
        uint64_t v221 = v218;
        while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v221 += 9;
          v222 -= 72;
          if (!v222) {
            goto LABEL_357;
          }
        }
      }
      else
      {
        uint64_t v221 = v218;
      }
    }
    else
    {
LABEL_357:
      uint64_t v221 = &v218[9 * v219];
    }
    int v223 = &v218[9 * v219];
    if (v221 == v223)
    {
LABEL_437:
      sub_1CD531C10(v280);
      MEMORY[0x1D25D9CD0](*(void *)(v282 + 24), 8);
      *(void *)(v282 + 24) = v285;
      *(void *)(v282 + 32) = v286;
      v285 = 0;
      uint64_t v286 = 0;
      *(_DWORD *)(v282 + 40) = v287;
      int v287 = 0;
      sub_1CD531C10((unsigned int *)&v285);
      MEMORY[0x1D25D9CD0](v285, 8);
      MEMORY[0x1D25D9CD0](v291, 8);
      goto LABEL_438;
    }
    uint64_t v224 = (_DWORD *)(v283 + 56);
    while (1)
    {
      v288 = 0;
      v288 = (unsigned __int8 *)(*v221 & 0xFFFFFFFFFFFFFFF8);
      v294 = v298;
      uint64_t v295 = (uint64_t)v298;
      uint64_t v296 = 4;
      int v297 = 0;
      unint64_t v284 = sub_1CD3CE844(v224, &v288)[1] | 4;
      unint64_t v225 = (void **)(sub_1CD58E8F0((uint64_t *)&v285, &v284) + 1);
      if (&v294 != v225) {
        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v225, 4, (double *)&v294);
      }
      if ((void *)v295 != v294) {
        free((void *)v295);
      }
      uint64_t v226 = v221[2];
      uint64_t v227 = 24;
      if (v226 == v221[1]) {
        uint64_t v227 = 28;
      }
      uint64_t v228 = *(unsigned int *)((char *)v221 + v227);
      if (v228)
      {
        uint64_t v229 = 8 * v228;
        v230 = (unint64_t *)v221[2];
        while (*v230 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v230;
          v229 -= 8;
          if (!v229) {
            goto LABEL_431;
          }
        }
      }
      else
      {
        v230 = (unint64_t *)v221[2];
      }
      v231 = (unint64_t *)(v226 + 8 * v228);
      if (v230 == v231) {
        goto LABEL_431;
      }
      unint64_t v232 = *v230;
LABEL_374:
      v294 = (void *)(sub_1CD3CE844(v224, &v288)[1] | 4);
      uint64_t v233 = sub_1CD58E8F0((uint64_t *)&v285, &v294);
      unint64_t v234 = v232 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v284 = v232 & 0xFFFFFFFFFFFFFFF8;
      int v235 = *(_DWORD *)(v283 + 72);
      if (v235)
      {
        uint64_t v236 = *(void *)(v283 + 56);
        int v237 = v235 - 1;
        unsigned int v238 = v237 & ((v234 >> 4) ^ (v234 >> 9));
        v239 = (void *)(v236 + 16 * v238);
        uint64_t v240 = *v239;
        if (*v239 == v234) {
          goto LABEL_384;
        }
        long long v241 = 0;
        int v242 = 1;
        while (v240 != -4096)
        {
          if (v241) {
            BOOL v243 = 0;
          }
          else {
            BOOL v243 = v240 == -8192;
          }
          if (v243) {
            long long v241 = v239;
          }
          unsigned int v244 = v238 + v242++;
          unsigned int v238 = v244 & v237;
          v239 = (void *)(v236 + 16 * v238);
          uint64_t v240 = *v239;
          if (*v239 == v234) {
            goto LABEL_384;
          }
        }
        if (v241) {
          uint64_t v263 = v241;
        }
        else {
          uint64_t v263 = v239;
        }
      }
      else
      {
        uint64_t v263 = 0;
      }
      v239 = sub_1CB883BA0(v224, (uint64_t)&v284, &v284, v263);
      void *v239 = v284;
      v239[1] = 0;
LABEL_384:
      uint64_t v245 = v239[1] | 4;
      uint64_t v246 = v233[2];
      uint64_t v247 = *((unsigned int *)v233 + 7);
      if (v246 != v233[1])
      {
        unsigned int v251 = *((_DWORD *)v233 + 6);
LABEL_395:
        if (3 * v251 <= 4 * ((int)v247 - *((_DWORD *)v233 + 8)))
        {
          if (v251 >= 0x40) {
            v251 *= 2;
          }
          else {
            unsigned int v251 = 128;
          }
        }
        else if (v251 - v247 >= v251 >> 3)
        {
          goto LABEL_397;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v233 + 1), v251);
        unsigned int v251 = *((_DWORD *)v233 + 6);
        uint64_t v246 = v233[2];
LABEL_397:
        unsigned int v252 = v251 - 1;
        unsigned int v253 = (v251 - 1) & ((v245 >> 4) ^ (v245 >> 9));
        v254 = (uint64_t *)(v246 + 8 * v253);
        uint64_t v255 = *v254;
        if (*v254 == -1)
        {
          v256 = 0;
LABEL_409:
          if (v256) {
            v260 = v256;
          }
          else {
            v260 = v254;
          }
          if (*v260 != v245)
          {
            if (*v260 == -2) {
              --*((_DWORD *)v233 + 8);
            }
            else {
              ++*((_DWORD *)v233 + 7);
            }
            uint64_t *v260 = v245;
          }
        }
        else
        {
          v256 = 0;
          int v257 = 1;
          while (v255 != v245)
          {
            if (v256) {
              BOOL v258 = 0;
            }
            else {
              BOOL v258 = v255 == -2;
            }
            if (v258) {
              v256 = v254;
            }
            unsigned int v259 = v253 + v257++;
            unsigned int v253 = v259 & v252;
            v254 = (uint64_t *)(v246 + 8 * (v259 & v252));
            uint64_t v255 = *v254;
            if (*v254 == -1) {
              goto LABEL_409;
            }
          }
        }
        goto LABEL_416;
      }
      if (v247)
      {
        __int16 v248 = 0;
        uint64_t v249 = 8 * v247;
        long long v250 = (uint64_t *)v233[2];
        while (*v250 != v245)
        {
          if (*v250 == -2) {
            __int16 v248 = v250;
          }
          ++v250;
          v249 -= 8;
          if (!v249)
          {
            if (!v248) {
              goto LABEL_392;
            }
            *__int16 v248 = v245;
            --*((_DWORD *)v233 + 8);
            goto LABEL_416;
          }
        }
        goto LABEL_416;
      }
LABEL_392:
      unsigned int v251 = *((_DWORD *)v233 + 6);
      if (v247 >= v251) {
        goto LABEL_395;
      }
      *((_DWORD *)v233 + 7) = v247 + 1;
      *(void *)(v246 + 8 * v247) = v245;
LABEL_416:
      uint64_t v261 = v230 + 1;
      while (v261 != v231)
      {
        unint64_t v262 = *v261++;
        unint64_t v232 = v262;
        if (v262 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v230 = v261 - 1;
          goto LABEL_374;
        }
      }
LABEL_431:
      v264 = v221 + 9;
      uint64_t v221 = v220;
      if (v264 != v220)
      {
        uint64_t v221 = v264;
        while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v221 += 9;
          if (v221 == v220)
          {
            uint64_t v221 = v220;
            break;
          }
        }
      }
      if (v221 == v223) {
        goto LABEL_437;
      }
    }
  }
  uint64_t v91 = *(void *)(v7[1] + 96);
  uint64_t v92 = *(unsigned int *)(v91 + 184);
  if (v92)
  {
    uint64_t v93 = *(void *)(v91 + 176);
    uint64_t v94 = v93 + (v92 << 6);
    while (1)
    {
      uint64_t v95 = *(unsigned int *)(v93 + 24);
      if (v95) {
        break;
      }
LABEL_168:
      v93 += 64;
      if (v93 == v94) {
        goto LABEL_169;
      }
    }
    uint64_t v96 = *(void *)(v93 + 16);
    uint64_t v97 = v96 + 32 * v95;
    while (1)
    {
      unint64_t v98 = *(void *)(v96 + 24);
      if (v98 >= 8) {
        break;
      }
LABEL_161:
      v96 += 32;
      if (v96 == v97) {
        goto LABEL_168;
      }
    }
    unint64_t v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFF8);
    v294 = v99;
    int v100 = *((_DWORD *)v7 + 18);
    if (v100)
    {
      uint64_t v101 = v7[7];
      int v102 = v100 - 1;
      unsigned int v103 = v102 & ((v99 >> 4) ^ (v99 >> 9));
      uint64_t v104 = (void *)(v101 + 16 * v103);
      unint64_t v105 = (void *)*v104;
      if ((void *)*v104 == v99)
      {
LABEL_160:
        *(void *)(v96 + 24) = v104[1] | 4;
        goto LABEL_161;
      }
      int v106 = 0;
      int v107 = 1;
      while (v105 != (void *)-4096)
      {
        if (v106) {
          BOOL v108 = 0;
        }
        else {
          BOOL v108 = v105 == (void *)-8192;
        }
        if (v108) {
          int v106 = v104;
        }
        unsigned int v109 = v103 + v107++;
        unsigned int v103 = v109 & v102;
        uint64_t v104 = (void *)(v101 + 16 * v103);
        unint64_t v105 = (void *)*v104;
        if ((void *)*v104 == v99) {
          goto LABEL_160;
        }
      }
      if (v106) {
        uint64_t v110 = v106;
      }
      else {
        uint64_t v110 = v104;
      }
    }
    else
    {
      uint64_t v110 = 0;
    }
    uint64_t v104 = sub_1CB883BA0((_DWORD *)v7 + 14, (uint64_t)&v294, &v294, v110);
    *uint64_t v104 = v294;
    v104[1] = 0;
    goto LABEL_160;
  }
LABEL_169:
  uint64_t v111 = *(unsigned int *)(v91 + 104);
  if (v111)
  {
    uint64_t v198 = *(void *)(v91 + 96);
    uint64_t v199 = v198 + 16 * v111;
    while (1)
    {
      unint64_t v200 = *(void *)(v198 + 8);
      if (v200 >= 8) {
        break;
      }
LABEL_332:
      v198 += 16;
      if (v198 == v199) {
        goto LABEL_170;
      }
    }
    uint64_t v201 = (void *)(v200 & 0xFFFFFFFFFFFFFFF8);
    v294 = v201;
    int v202 = *((_DWORD *)v7 + 18);
    if (v202)
    {
      uint64_t v203 = v7[7];
      int v204 = v202 - 1;
      unsigned int v205 = v204 & ((v201 >> 4) ^ (v201 >> 9));
      v206 = (void *)(v203 + 16 * v205);
      uint64_t v207 = (void *)*v206;
      if ((void *)*v206 == v201)
      {
LABEL_331:
        *(void *)(v198 + 8) = v206[1] | 4;
        goto LABEL_332;
      }
      uint64_t v208 = 0;
      int v209 = 1;
      while (v207 != (void *)-4096)
      {
        if (v208) {
          BOOL v210 = 0;
        }
        else {
          BOOL v210 = v207 == (void *)-8192;
        }
        if (v210) {
          uint64_t v208 = v206;
        }
        unsigned int v211 = v205 + v209++;
        unsigned int v205 = v211 & v204;
        v206 = (void *)(v203 + 16 * v205);
        uint64_t v207 = (void *)*v206;
        if ((void *)*v206 == v201) {
          goto LABEL_331;
        }
      }
      if (v208) {
        BOOL v212 = v208;
      }
      else {
        BOOL v212 = v206;
      }
    }
    else
    {
      BOOL v212 = 0;
    }
    v206 = sub_1CB883BA0((_DWORD *)v7 + 14, (uint64_t)&v294, &v294, v212);
    void *v206 = v294;
    v206[1] = 0;
    goto LABEL_331;
  }
LABEL_170:
  uint64_t v112 = *(unsigned int *)(v91 + 456);
  if (v112)
  {
    uint64_t v113 = 24 * v112;
    uint64_t v114 = (uint64_t *)(*(void *)(v91 + 448) + 16);
    do
    {
      v294 = (void *)(*v114 & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v114 = sub_1CD3CE844((_DWORD *)v7 + 14, &v294)[1] | 4;
      v114 += 3;
      v113 -= 24;
    }
    while (v113);
  }
  uint64_t v115 = *(unsigned int *)(v91 + 568);
  if (v115)
  {
    uint64_t v116 = *(uint64_t **)(v91 + 560);
    uint64_t v117 = 24 * v115;
    do
    {
      v294 = (void *)(*v116 & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v116 = sub_1CD3CE844((_DWORD *)v7 + 14, &v294)[1] | 4;
      v116 += 3;
      v117 -= 24;
    }
    while (v117);
  }
LABEL_438:
  sub_1CD78C884(v289);
  if (v299[0] != v300) {
    free(v299[0]);
  }
}

_DWORD *sub_1CCF6E534(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 || *(_DWORD *)(a1 + 68))
  {
    unsigned int v17 = (_DWORD *)(a1 + 56);
    uint64_t v18 = *(unsigned int *)(a1 + 72);
    if (v18 > 4 * v2 && v18 >= 0x41)
    {
      sub_1CD3C8060(v17);
    }
    else
    {
      if (v18)
      {
        uint64_t v19 = *(void **)v17;
        uint64_t v20 = 16 * v18;
        do
        {
          *uint64_t v19 = -4096;
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      *(void *)(a1 + 64) = 0;
    }
  }
  sub_1CBB8977C((_DWORD *)(a1 + 80));
  int v3 = *(_DWORD *)(a1 + 112);
  if (v3 || *(_DWORD *)(a1 + 116))
  {
    uint64_t v21 = (_DWORD *)(a1 + 104);
    uint64_t v22 = *(unsigned int *)(a1 + 120);
    if (v22 > 4 * v3 && v22 >= 0x41)
    {
      sub_1CD569898(v21);
    }
    else
    {
      if (v22)
      {
        uint64_t v23 = *(_DWORD **)v21;
        uint64_t v24 = 16 * v22;
        do
        {
          _DWORD *v23 = -1;
          v23 += 4;
          v24 -= 16;
        }
        while (v24);
      }
      *(void *)(a1 + 112) = 0;
    }
  }
  sub_1CC6FE80C((_DWORD *)(a1 + 176));
  uint64_t v4 = *(unsigned int *)(a1 + 792);
  if (v4)
  {
    uint64_t v34 = *(void *)(a1 + 784) - 32;
    uint64_t v35 = 40 * v4;
    do
    {
      sub_1CB8F0DC4(v34 + v35);
      v35 -= 40;
    }
    while (v35);
  }
  *(_DWORD *)(a1 + 792) = 0;
  uint64_t result = *(_DWORD **)(a1 + 688);
  if (result != *(_DWORD **)(a1 + 680))
  {
    uint64_t v12 = *(unsigned int *)(a1 + 696);
    if (v12 >= 0x21 && 4 * (*(_DWORD *)(a1 + 700) - *(_DWORD *)(a1 + 704)) < v12)
    {
      uint64_t result = llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 680));
      goto LABEL_8;
    }
    uint64_t result = memset(result, 255, 8 * v12);
  }
  *(void *)(a1 + 700) = 0;
LABEL_8:
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  int v6 = *(_DWORD *)(a1 + 208);
  if (v6 || *(_DWORD *)(a1 + 212))
  {
    uint64_t result = (_DWORD *)(a1 + 200);
    uint64_t v25 = *(unsigned int *)(a1 + 216);
    if (v25 > 4 * v6 && v25 >= 0x41)
    {
      uint64_t result = sub_1CD3C8060(result);
    }
    else
    {
      if (v25)
      {
        uint64_t v26 = *(void **)result;
        uint64_t v27 = 16 * v25;
        do
        {
          void *v26 = -4096;
          v26 += 2;
          v27 -= 16;
        }
        while (v27);
      }
      *(void *)(a1 + 208) = 0;
    }
  }
  int v7 = *(_DWORD *)(a1 + 384);
  if (v7 || *(_DWORD *)(a1 + 388))
  {
    uint64_t result = (_DWORD *)(a1 + 376);
    uint64_t v14 = *(unsigned int *)(a1 + 392);
    if (v14 > 4 * v7 && v14 >= 0x41)
    {
      uint64_t result = sub_1CB83872C(result);
    }
    else
    {
      if (v14)
      {
        unsigned int v15 = *(_DWORD **)result;
        uint64_t v16 = 8 * v14;
        do
        {
          *unsigned int v15 = -1;
          v15 += 2;
          v16 -= 8;
        }
        while (v16);
      }
      *(void *)(a1 + 384) = 0;
    }
  }
  int v8 = *(_DWORD *)(a1 + 408);
  if (v8 || *(_DWORD *)(a1 + 412))
  {
    uint64_t result = (_DWORD *)(a1 + 400);
    uint64_t v11 = *(unsigned int *)(a1 + 416);
    if (v11 <= 4 * v8 || v11 < 0x41)
    {
      if (v11) {
        uint64_t result = memset(*(void **)result, 255, 4 * v11);
      }
      *(void *)(a1 + 408) = 0;
    }
    else
    {
      uint64_t result = sub_1CBB23624(result);
    }
  }
  *(_DWORD *)(a1 + 432) = 0;
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 || *(_DWORD *)(a1 + 164))
  {
    uint64_t result = (_DWORD *)(a1 + 152);
    uint64_t v28 = *(unsigned int *)(a1 + 168);
    if (v28 > 4 * v9 && v28 >= 0x41)
    {
      uint64_t result = sub_1CD78CC40(result);
      goto LABEL_16;
    }
    if (!v28)
    {
LABEL_65:
      *(void *)(a1 + 160) = 0;
      goto LABEL_16;
    }
    uint64_t v29 = *(void **)result;
    uint64_t v30 = 32 * v28;
    while (1)
    {
      if (*v29 == -8192) {
        goto LABEL_63;
      }
      if (*v29 != -4096) {
        break;
      }
LABEL_64:
      v29 += 4;
      v30 -= 32;
      if (!v30) {
        goto LABEL_65;
      }
    }
    uint64_t result = (_DWORD *)MEMORY[0x1D25D9CD0](v29[1], 8);
LABEL_63:
    *uint64_t v29 = -4096;
    goto LABEL_64;
  }
LABEL_16:
  int v10 = *(_DWORD *)(a1 + 664);
  if (v10 || *(_DWORD *)(a1 + 668))
  {
    uint64_t result = (_DWORD *)(a1 + 656);
    uint64_t v31 = *(unsigned int *)(a1 + 672);
    if (v31 > 4 * v10 && v31 >= 0x41)
    {
      return sub_1CD3C8060(result);
    }
    else
    {
      if (v31)
      {
        uint64_t v32 = *(void **)result;
        uint64_t v33 = 16 * v31;
        do
        {
          void *v32 = -4096;
          v32 += 2;
          v33 -= 16;
        }
        while (v33);
      }
      *(void *)(a1 + 664) = 0;
    }
  }
  return result;
}

uint64_t sub_1CCF6E884(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = result;
  if (a3 > 0x40)
  {
    if (*(_DWORD *)(a2 + 8) != a3) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v13, a2);
    if (*(_DWORD *)(a2 + 24) != v3) {
      operator new[]();
    }
    uint64_t result = sub_1CD0463BC((uint64_t)&v11, a2 + 16);
    unsigned int v3 = v12;
    unint64_t v10 = v11;
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    unsigned int v14 = a3;
    unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & v6;
    if (a3) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    if (a3) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v13 = v8;
    unint64_t v10 = v9 & *(void *)(a2 + 16);
  }
  *(_DWORD *)(v5 + 8) = v14;
  *(void *)uint64_t v5 = v13;
  *(_DWORD *)(v5 + 24) = v3;
  *(void *)(v5 + 16) = v10;
  return result;
}

void sub_1CCF6EA3C(uint64_t a1, unint64_t a2)
{
  v128[2] = *MEMORY[0x1E4F143B8];
  int v2 = *(llvm::LLVMContext ***)a2;
  if (*(_DWORD *)(*(void *)a2 + 8) == 13 && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 18)
  {
    v127[0] = v128;
    v127[1] = (void *)0x100000000;
    llvm::ComputeValueVTs(*(void *)(a1 + 16), (llvm::DataLayout *)(*(void *)(**(void **)(a1 + 8) + 40) + 272), (uint64_t)v2, (uint64_t)v127, 0, 0, 0);
    long long v124 = *(_OWORD *)v127[0];
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 584))() == 1)
    {
      llvm::TargetLoweringBase::getTypeConversion(*(void *)(a1 + 16), **(llvm::LLVMContext ***)a2, v124, *((uint64_t *)&v124 + 1), (uint64_t)&v125);
      long long v124 = v126;
      if ((_BYTE)v126) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v124);
      }
      else {
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v124);
      }
      uint64_t v8 = ExtendedSizeInBits;
      if (v7 == 1) {
      unint64_t v121 = a2;
      }
      unint64_t v125 = 0;
      if (sub_1CD3C8538((uint64_t *)(a1 + 80), &v121, &v125))
      {
        if (v125 != *(void *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96))
        {
          int v9 = *(_DWORD *)(v125 + 8);
          if (v9)
          {
            unint64_t v10 = (uint64_t *)(a1 + 784);
            uint64_t v11 = v9 & 0x7FFFFFFF;
            if ((v9 & 0x7FFFFFFFu) >= *(_DWORD *)(a1 + 792)) {
              sub_1CD78C5F0(a1 + 784, v11 + 1, a1 + 800);
            }
            uint64_t v12 = *v10;
            unint64_t v13 = (unsigned int *)(*v10 + 40 * v11);
            uint64_t v123 = 0;
            int v14 = *(_DWORD *)(a2 + 20);
            if ((v14 & 0x40000000) != 0) {
              unsigned int v15 = *(uint64_t **)(a2 - 8);
            }
            else {
              unsigned int v15 = (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
            }
            uint64_t v16 = *v15;
            uint64_t v123 = v16;
            int v17 = *(unsigned __int8 *)(v16 + 16);
            if ((v17 - 11) < 2) {
              goto LABEL_25;
            }
            if (v17 == 16)
            {
              uint64_t v111 = (uint64_t *)(a1 + 80);
              uint64_t v24 = (unint64_t *)(v16 + 24);
              uint64_t v112 = v8;
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 16) + 1216))(*(void *)(a1 + 16), v16))
              {
                unsigned int v25 = *(_DWORD *)(v16 + 32);
                if (v25 < v8)
                {
                  llvm::APInt::sext(v16 + 24, v8, (uint64_t)&v125);
                  unint64_t v26 = v125;
                }
                else
                {
                  LODWORD(v126) = *(_DWORD *)(v16 + 32);
                  if (v25 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v26 = *v24;
                  unint64_t v125 = *v24;
                }
                unint64_t v121 = v26;
                unsigned int v27 = v126;
              }
              else
              {
                unsigned int v27 = *(_DWORD *)(v16 + 32);
                if (v27 < v8)
                {
                  if (v8 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v26 = *v24 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v8);
                  unsigned int v27 = v8;
                }
                else
                {
                  if (v27 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v26 = *v24;
                }
                unint64_t v121 = v26;
              }
              unsigned int v122 = v27;
              unsigned int v28 = v27 - 1;
              if (v27 > 0x40)
              {
                if ((*(void *)(v26 + 8 * (v28 >> 6)) >> v28))
                {
                  unsigned int *v13 = *v13 & 0x80000000 | llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v121) & 0x7FFFFFFF;
                }
                else
                {
                  int v104 = 0;
                  int64_t v105 = ((unint64_t)v27 + 63) >> 6;
                  do
                  {
                    BOOL v52 = v105-- < 1;
                    if (v52) {
                      break;
                    }
                    unint64_t v106 = *(void *)(v26 + 8 * v105);
                    v104 += __clz(v106);
                  }
                  while (!v106);
                  int v107 = v27 | 0x7FFFFFC0;
                  if ((v27 & 0x3F) == 0) {
                    int v107 = 0;
                  }
                  unsigned int *v13 = *v13 & 0x80000000 | (v104 + v107) & 0x7FFFFFFF;
                }
                LODWORD(v126) = v27;
                operator new[]();
              }
              if ((v26 >> v28))
              {
                if (v27) {
                  int v29 = __clz(~(v26 << -(char)v27));
                }
                else {
                  int v29 = 0;
                }
              }
              else
              {
                int v29 = v27 + __clz(v26) - 64;
              }
              unsigned int *v13 = *v13 & 0x80000000 | v29 & 0x7FFFFFFF;
              if (v27) {
                unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
              }
              else {
                unint64_t v30 = 0;
              }
              unint64_t v31 = v30 & ~v26;
              LODWORD(v126) = 0;
              unint64_t v32 = v26;
              uint64_t v33 = v12 + 40 * v11;
              uint64_t v34 = v33 + 8;
              if (*(_DWORD *)(v33 + 16) >= 0x41u && *(void *)v34)
              {
                unint64_t v117 = v26;
                MEMORY[0x1D25D9CB0](*(void *)v34, 0x1000C8000313F17);
                unint64_t v32 = v117;
              }
              *(void *)uint64_t v34 = v31;
              *(_DWORD *)(v34 + 8) = v27;
              uint64_t v35 = v12 + 40 * v11;
              unsigned int v37 = *(_DWORD *)(v35 + 32);
              uint64_t v36 = (unsigned int *)(v35 + 32);
              uint64_t v38 = (unint64_t *)(v36 - 2);
              if (v37 >= 0x41 && *v38)
              {
                unint64_t v101 = v32;
                MEMORY[0x1D25D9CB0](*v38, 0x1000C8000313F17);
                unint64_t v32 = v101;
              }
              *uint64_t v38 = v32;
              *uint64_t v36 = v27;
            }
            else
            {
              if (v17 == 5)
              {
LABEL_25:
                unsigned int *v13 = *v13 & 0x80000000 | 1;
                if (v8 >= 0x41) {
                  operator new[]();
                }
                uint64_t v18 = v12 + 40 * v11;
                uint64_t v19 = v18 + 8;
                if (*(_DWORD *)(v18 + 16) >= 0x41u && *(void *)v19) {
                  MEMORY[0x1D25D9CB0](*(void *)v19, 0x1000C8000313F17);
                }
                *(void *)uint64_t v19 = 0;
                *(_DWORD *)(v19 + 8) = v8;
                uint64_t v20 = v12 + 40 * v11;
                unsigned int v22 = *(_DWORD *)(v20 + 32);
                uint64_t v21 = (_DWORD *)(v20 + 32);
                uint64_t v23 = v21 - 2;
                if (v22 >= 0x41 && *v23) {
                  MEMORY[0x1D25D9CB0](*v23, 0x1000C8000313F17);
                }
                void *v23 = 0;
                *uint64_t v21 = v8;
                goto LABEL_6;
              }
              int v91 = *((_DWORD *)sub_1CD3CDD24((uint64_t *)(a1 + 80), &v123) + 2);
              if ((v91 & 0x80000000) == 0)
              {
LABEL_125:
                unsigned int v57 = *v13 & 0x7FFFFFFF;
LABEL_126:
                unsigned int *v13 = v57;
                goto LABEL_6;
              }
              uint64_t v111 = (uint64_t *)(a1 + 80);
              uint64_t v112 = v8;
              uint64_t v92 = sub_1CD78C3F4(a1, v91, v8);
              if (!v92)
              {
                *v13 &= ~0x80000000;
                goto LABEL_6;
              }
              uint64_t v93 = v92;
              uint64_t v94 = (const void **)(v92 + 2);
              unsigned int *v13 = *v92;
              uint64_t v95 = v12 + 40 * v11;
              uint64_t v96 = v95 + 8;
              if (*(_DWORD *)(v95 + 16) > 0x40u || v92[4] > 0x40u)
              {
                if ((const void **)v96 != v94)
                {
                  llvm::APInt::reallocate(v96, v92[4]);
                  uint64_t v102 = *(unsigned int *)(v96 + 8);
                  if (v102 <= 0x40) {
                    *(void *)uint64_t v96 = *v94;
                  }
                  else {
                    memcpy(*(void **)v96, *v94, ((unint64_t)(v102 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
              }
              else
              {
                *(void *)uint64_t v96 = *((void *)v92 + 1);
                *(_DWORD *)(v95 + 16) = v92[4];
              }
              uint64_t v97 = v12 + 40 * v11;
              unsigned int v99 = *(_DWORD *)(v97 + 32);
              unint64_t v98 = (_DWORD *)(v97 + 32);
              int v100 = (void **)(v98 - 2);
              if (v99 > 0x40 || v93[8] > 0x40u)
              {
                uint64_t v119 = (const void **)(v93 + 6);
                if (v100 != (void **)(v93 + 6))
                {
                  llvm::APInt::reallocate((uint64_t)(v98 - 2), v93[8]);
                  uint64_t v103 = *v98;
                  if (v103 <= 0x40) {
                    *int v100 = (void *)*v119;
                  }
                  else {
                    memcpy(*v100, *v119, ((unint64_t)(v103 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
              }
              else
              {
                *int v100 = (void *)*((void *)v93 + 3);
                *unint64_t v98 = v93[8];
              }
            }
            int v118 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            uint64_t v39 = v112;
            if (v118 == 1) {
              goto LABEL_6;
            }
            uint64_t v40 = v12 + 40 * v11;
            uint64_t v41 = v40 + 8;
            uint64_t v115 = (unsigned int *)(v40 + 32);
            uint64_t v116 = (void *)(v40 + 24);
            unint64_t v110 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v112;
            uint64_t v42 = 1;
            uint64_t v114 = v40 + 8;
            do
            {
              uint64_t v120 = 0;
              int v43 = *(_DWORD *)(a2 + 20);
              if ((v43 & 0x40000000) != 0) {
                unint64_t v44 = *(void *)(a2 - 8);
              }
              else {
                unint64_t v44 = a2 - 32 * (v43 & 0x7FFFFFF);
              }
              uint64_t v45 = *(void *)(v44 + 32 * v42);
              uint64_t v120 = v45;
              unsigned int v46 = *(unsigned __int8 *)(v45 + 16);
              if (v46 == 16)
              {
                int v47 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 1216))(*(void *)(a1 + 16), v45);
                uint64_t v48 = (unint64_t *)(v45 + 24);
                if (v47)
                {
                  unsigned int v49 = *(_DWORD *)(v45 + 32);
                  if (v49 < v39)
                  {
                    llvm::APInt::sext((uint64_t)v48, v39, (uint64_t)&v121);
                    unint64_t v50 = v121;
                  }
                  else
                  {
                    unsigned int v122 = *(_DWORD *)(v45 + 32);
                    if (v49 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v50 = *v48;
                    unint64_t v121 = *v48;
                  }
                  unint64_t v125 = v50;
                  unsigned int v51 = v122;
                }
                else
                {
                  unsigned int v51 = *(_DWORD *)(v45 + 32);
                  if (v51 < v39)
                  {
                    if (v39 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v50 = *v48 & v110;
                    unsigned int v51 = v39;
                  }
                  else
                  {
                    if (v51 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v50 = *v48;
                  }
                  unint64_t v125 = v50;
                }
                LODWORD(v126) = v51;
                unsigned int v63 = *v13;
                unsigned int v64 = *v13 & 0x7FFFFFFF;
                unsigned int v65 = v51 - 1;
                if (v51 > 0x40)
                {
                  if ((*(void *)(v50 + 8 * (v65 >> 6)) >> v65))
                  {
                    unsigned int v88 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v125);
                  }
                  else
                  {
                    int v84 = 0;
                    int64_t v85 = ((unint64_t)v51 + 63) >> 6;
                    do
                    {
                      BOOL v52 = v85-- < 1;
                      if (v52) {
                        break;
                      }
                      unint64_t v86 = *(void *)(v50 + 8 * v85);
                      v84 += __clz(v86);
                    }
                    while (!v86);
                    unsigned int v87 = v51 | 0xFFFFFFC0;
                    if ((v51 & 0x3F) == 0) {
                      unsigned int v87 = 0;
                    }
                    unsigned int v88 = v84 + v87;
                  }
                  if (v88 >= v64) {
                    unsigned int v89 = v64;
                  }
                  else {
                    unsigned int v89 = v88;
                  }
                  unsigned int *v13 = v89 | v63 & 0x80000000;
                  operator new[]();
                }
                unint64_t v66 = v50 >> v65;
                unsigned int v67 = v51 + __clz(v50) - 64;
                unsigned int v68 = __clz(~(v50 << -(char)v51));
                if (!v51) {
                  unsigned int v68 = 0;
                }
                if (v66) {
                  unsigned int v69 = v68;
                }
                else {
                  unsigned int v69 = v67;
                }
                if (v69 >= v64) {
                  unsigned int v69 = *v13 & 0x7FFFFFFF;
                }
                unsigned int *v13 = v69 | v63 & 0x80000000;
                unint64_t v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
                if (!v51) {
                  unint64_t v70 = 0;
                }
                unint64_t v71 = v70 & ~v50;
                uint64_t v41 = v114;
                uint64_t v72 = *(unsigned int *)(v114 + 8);
                if (v72 > 0x40)
                {
                  unint64_t v73 = *(void **)v114;
                  unint64_t v74 = (unint64_t)(v72 + 63) >> 6;
                  uint64_t v75 = (uint64_t *)v71;
                  do
                  {
                    uint64_t v76 = *v75++;
                    *v73++ &= v76;
                    --v74;
                  }
                  while (v74);
                }
                else
                {
                  *(void *)v114 &= v71;
                }
                uint64_t v77 = *v115;
                if (v77 > 0x40)
                {
                  uint64_t v78 = (void *)*v116;
                  unint64_t v79 = (unint64_t)(v77 + 63) >> 6;
                  int v80 = (uint64_t *)v50;
                  do
                  {
                    uint64_t v81 = *v80++;
                    *v78++ &= v81;
                    --v79;
                  }
                  while (v79);
                }
                else
                {
                  *v116 &= v50;
                }
              }
              else
              {
                BOOL v52 = v46 > 0xC;
                int v53 = (1 << v46) & 0x1820;
                if (!v52 && v53 != 0)
                {
                  unsigned int *v13 = *v13 & 0x80000000 | 1;
                  if (v39 >= 0x41) {
                    operator new[]();
                  }
                  uint64_t v90 = v115;
                  if (*(_DWORD *)(v41 + 8) >= 0x41u && *(void *)v41)
                  {
                    MEMORY[0x1D25D9CB0](*(void *)v41, 0x1000C8000313F17);
                    uint64_t v90 = v115;
                  }
                  *(void *)uint64_t v41 = 0;
                  *(_DWORD *)(v41 + 8) = v39;
                  if (*v90 >= 0x41u && *v116)
                  {
                    MEMORY[0x1D25D9CB0](*v116, 0x1000C8000313F17);
                    uint64_t v90 = v115;
                  }
                  *uint64_t v116 = 0;
                  *uint64_t v90 = v39;
                  break;
                }
                int v55 = *((_DWORD *)sub_1CD3CDD24(v111, &v120) + 2);
                if ((v55 & 0x80000000) == 0) {
                  goto LABEL_125;
                }
                uint64_t v56 = sub_1CD78C3F4(a1, v55, v39);
                unsigned int v57 = *v13 & 0x7FFFFFFF;
                if (!v56) {
                  goto LABEL_126;
                }
                if ((*v56 & 0x7FFFFFFFu) < v57) {
                  unsigned int v57 = *v56 & 0x7FFFFFFF;
                }
                unsigned int *v13 = v57 | *v13 & 0x80000000;
                unsigned int v58 = *(_DWORD *)(v41 + 8);
                if (v58 > 0x40) {
                  operator new[]();
                }
                uint64_t v59 = *((void *)v56 + 1) & *(void *)v41;
                unint64_t v60 = v115;
                int v61 = *v115;
                if (*v115 > 0x40) {
                  operator new[]();
                }
                char v62 = (void *)(*((void *)v56 + 3) & *v116);
                if (*(_DWORD *)(v41 + 8) >= 0x41u && *(void *)v41)
                {
                  uint64_t v113 = v39;
                  __src = (void *)(*((void *)v56 + 3) & *v116);
                  uint64_t v82 = *((void *)v56 + 1) & *(void *)v41;
                  MEMORY[0x1D25D9CB0](*(void *)v41, 0x1000C8000313F17);
                  uint64_t v59 = v82;
                  unint64_t v60 = v115;
                  char v62 = __src;
                  uint64_t v39 = v113;
                }
                *(void *)uint64_t v41 = v59;
                *(_DWORD *)(v41 + 8) = v58;
                if (*v60 >= 0x41u && *v116)
                {
                  __srca = v62;
                  uint64_t v83 = v60;
                  MEMORY[0x1D25D9CB0](*v116, 0x1000C8000313F17);
                  unint64_t v60 = v83;
                  char v62 = __srca;
                }
                *uint64_t v116 = v62;
                *unint64_t v60 = v61;
              }
              ++v42;
            }
            while (v118 != v42);
          }
        }
      }
    }
LABEL_6:
    if (v127[0] != v128) {
      free(v127[0]);
    }
  }
}

uint64_t sub_1CCF6FB70(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)uint64_t result = *(void *)a2;
  unsigned int v3 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 24) = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t sub_1CCF6FC74(void *a1, uint64_t a2, unsigned int a3, int a4, char a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v7 = (uint64_t)a7;
  int v8 = a4;
  if ((a6 & 0x80000000) != 0)
  {
    *(void *)&long long v112 = a2;
    DWORD2(v112) = a3;
    if (a4)
    {
      uint64_t v113 = 0;
      if (sub_1CD78E72C(a7, (uint64_t)&v112, (uint64_t *)&v113))
      {
        uint64_t v11 = (uint64_t)v113;
        *(void *)uint64_t v113 = 0;
        *(_DWORD *)(v11 + 8) = -2;
        *(int32x2_t *)(v7 + 8) = vadd_s32(*(int32x2_t *)(v7 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    long long v110 = v112;
    v111[0] = a6;
    return sub_1CD78E7F4((uint64_t)&v113, v7, (uint64_t)&v110, v111);
  }
  unint64_t v13 = a1;
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v15 = 16 * a3;
  uint64_t v16 = *(unsigned __int8 *)(v14 + v15);
  if (*(unsigned char *)(v14 + v15) && (uint64_t v17 = a1[4], *(void *)(v17 + 8 * v16 + 96)))
  {
    uint64_t v19 = v13;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 424))(v17, v16, (*(unsigned __int8 *)(a2 + 26) >> 2) & 1);
    unint64_t v13 = v19;
    uint64_t v18 = (void *)v20;
  }
  else
  {
    uint64_t v18 = 0;
  }
  int v21 = 0;
  char v22 = 1;
  if (v8 & 1) != 0 || (a5) {
    goto LABEL_77;
  }
  uint64_t v106 = v7;
  uint64_t v23 = *(void *)(a2 + 48);
  if (!v23)
  {
    int v21 = 0;
    uint64_t v7 = v106;
    goto LABEL_77;
  }
  int v105 = v16;
  BOOL v108 = v13;
  do
  {
    uint64_t v24 = *(void *)(v23 + 16);
    if (*(_WORD *)(v24 + 24) != 49
      || (uint64_t v25 = *(void *)(v24 + 32), *(void *)(v25 + 80) != a2)
      || *(_DWORD *)(v25 + 88) != a3)
    {
      uint64_t v28 = *(unsigned __int16 *)(v24 + 56);
      if (!*(_WORD *)(v24 + 56))
      {
        BOOL v27 = 1;
        goto LABEL_74;
      }
      uint64_t v29 = 0;
      BOOL v27 = 1;
      while (1)
      {
        uint64_t v30 = *(void *)(v24 + 32) + 40 * v29;
        uint64_t v31 = *(void *)v30;
        int v32 = *(_DWORD *)(v30 + 8);
        if (v31 != a2 || v32 != a3) {
          goto LABEL_49;
        }
        int v34 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
        if (v34 == 1 || v34 == 172) {
          goto LABEL_49;
        }
        int v35 = *(__int16 *)(v24 + 24);
        if ((v35 & 0x80000000) == 0) {
          goto LABEL_48;
        }
        uint64_t v36 = (void *)v13[2];
        unsigned int v37 = (unsigned __int16)~(_WORD)v35;
        uint64_t v38 = v36[1];
        if (*(unsigned __int8 *)(v38 + 48 * v37 + 4) + v29 >= *(unsigned __int16 *)(v38 + 48 * v37 + 2)) {
          goto LABEL_48;
        }
        unsigned int v109 = v18;
        uint64_t v39 = v13[3];
        uint64_t v40 = (void *)(*(uint64_t (**)(void *, uint64_t))(*v36 + 16))(v36, v38 + 48 * v37);
        if (!v40) {
          goto LABEL_63;
        }
        uint64_t v18 = v109;
        if (!*(unsigned char *)(*v40 + 31)) {
          break;
        }
        unint64_t v13 = v108;
LABEL_40:
        if (!v18)
        {
          BOOL v27 = 0;
          uint64_t v18 = v40;
          goto LABEL_49;
        }
        if (v40)
        {
          uint64_t v41 = v18;
          if (v18 != v40)
          {
            uint64_t v42 = *(void *)(v13[3] + 240);
            unint64_t v43 = (unint64_t)(*(void *)(v13[3] + 248) - v42) >> 3;
            if (v43)
            {
              unsigned int v44 = 0;
              uint64_t v45 = (_DWORD *)v40[1];
              unsigned int v46 = (_DWORD *)v18[1];
              while (1)
              {
                unsigned int v47 = *v45 & *v46;
                if (v47) {
                  break;
                }
                ++v45;
                ++v46;
                v44 += 32;
                if (v44 >= v43) {
                  goto LABEL_47;
                }
              }
              uint64_t v41 = *(void **)(v42 + 8 * (__clz(__rbit32(v47)) + v44));
            }
            else
            {
LABEL_47:
              uint64_t v41 = 0;
            }
          }
          BOOL v27 = 0;
          if (v41) {
            uint64_t v18 = v41;
          }
          goto LABEL_49;
        }
LABEL_48:
        BOOL v27 = 0;
LABEL_49:
        if (++v29 == v28) {
          goto LABEL_74;
        }
      }
      uint64_t v48 = (unsigned int *)v40[1];
      uint64_t v49 = *(void *)(v39 + 240);
      unint64_t v50 = (unint64_t)(*(void *)(v39 + 248) - v49) >> 3;
      unsigned int v51 = *v48;
      if (*v48)
      {
        unsigned int v52 = 0;
LABEL_61:
        unsigned int v54 = __clz(__rbit32(v51));
        unsigned int v55 = v54 | v52;
        if ((v54 | v52) != v50)
        {
          unsigned int v56 = v51 >> v54;
          while (1)
          {
            uint64_t v40 = *(void **)(v49 + 8 * v55);
            if (*(unsigned char *)(*v40 + 31)) {
              goto LABEL_63;
            }
            if (v56 <= 1)
            {
              while (1)
              {
                v52 += 32;
                if (v52 >= v50) {
                  goto LABEL_62;
                }
                unsigned int v58 = v48[1];
                ++v48;
                unsigned int v57 = v58;
                if (v58)
                {
                  unsigned int v59 = v52;
                  goto LABEL_71;
                }
              }
            }
            unsigned int v59 = v55 + 1;
            unsigned int v57 = v56 >> 1;
LABEL_71:
            uint64_t v40 = 0;
            unsigned int v60 = __clz(__rbit32(v57));
            unsigned int v55 = v60 + v59;
            unsigned int v56 = v57 >> v60;
            unint64_t v13 = v108;
            uint64_t v18 = v109;
            if (v55 == v50) {
              goto LABEL_40;
            }
          }
        }
      }
      else
      {
        unsigned int v52 = 0;
        while (1)
        {
          v52 += 32;
          if (v52 >= v50) {
            break;
          }
          unsigned int v53 = v48[1];
          ++v48;
          unsigned int v51 = v53;
          if (v53) {
            goto LABEL_61;
          }
        }
      }
LABEL_62:
      uint64_t v40 = 0;
LABEL_63:
      unint64_t v13 = v108;
      uint64_t v18 = v109;
      goto LABEL_40;
    }
    int v21 = *(_DWORD *)(*(void *)(v25 + 40) + 76);
    BOOL v27 = v21 >= 0 && v21 == a6;
    if (v21 < 0)
    {
      char v22 = 0;
      goto LABEL_76;
    }
LABEL_74:
    v22 &= v27;
    uint64_t v23 = *(void *)(v23 + 32);
  }
  while (v23);
  int v21 = 0;
LABEL_76:
  uint64_t v7 = v106;
  LODWORD(v16) = v105;
LABEL_77:
  uint64_t v61 = v13[3];
  char v62 = *(char **)(v61 + 240);
  unsigned int v63 = *(char **)(v61 + 248);
  if (v62 != v63)
  {
    unsigned int v64 = 0;
    unint64_t v65 = (unint64_t)(v63 - v62) >> 3;
    unsigned int v66 = a6 - 0x40000000;
    unint64_t v67 = (unint64_t)a6 >> 3;
    while (1)
    {
      unsigned int v68 = *(void **)v62;
      if (v16 == 1)
      {
        if (v66 >= 0xC0000001)
        {
          uint64_t v69 = *v68;
LABEL_82:
          if (v67 < *(unsigned __int16 *)(v69 + 22)
            && ((1 << (a6 & 7)) & *(unsigned __int8 *)(*(void *)(v69 + 8) + v67)) != 0
            && (!v64
             || v68 != v64
             && ((*(_DWORD *)(v64[1] + ((*(unsigned __int16 *)(v69 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v69 + 24)) & 1) != 0))
          {
            unsigned int v64 = *(void **)v62;
          }
        }
      }
      else
      {
        uint64_t v69 = *v68;
        unint64_t v70 = *(unsigned __int8 **)(*(void *)(v61 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*v68 + 24)
                                   + *(_DWORD *)(v61 + 272) * v65)
                                  + 16);
        do
        {
          int v72 = *v70++;
          int v71 = v72;
        }
        while (v72 != 1 && v71 != v16);
        if (v66 >= 0xC0000001 && v71 != 1) {
          goto LABEL_82;
        }
      }
      v62 += 8;
      if (v62 == v63) {
        goto LABEL_101;
      }
    }
  }
  unsigned int v64 = 0;
LABEL_101:
  if (v21)
  {
    unint64_t v75 = *(void *)(*(void *)(v13[1] + 24) + 16 * (v21 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 1) == 0) {
      goto LABEL_110;
    }
    goto LABEL_108;
  }
  if (v18) {
    unint64_t v74 = (unint64_t)v18;
  }
  else {
    unint64_t v74 = (unint64_t)v64;
  }
  unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFFBLL;
  if (v22)
  {
LABEL_108:
    if ((*(char *)(*v64 + 30) & 0x80000000) == 0) {
      goto LABEL_110;
    }
    unsigned int IncompleteVirtualRegister = a6;
    goto LABEL_119;
  }
LABEL_110:
  int v77 = v8;
  uint64_t v78 = v13[1];
  unint64_t v79 = v13;
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v78, "", 0);
  *(void *)(*(void *)(v78 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v75;
  uint64_t v80 = *(void *)(v78 + 8);
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 24))(v80);
  }
  uint64_t v82 = v79[5];
  uint64_t v81 = (unint64_t *)v79[6];
  uint64_t v83 = *(void *)(v79[2] + 8) + 912;
  int v84 = *(llvm::MachineFunction **)(v82 + 32);
  int64_t v85 = *(unsigned __int8 **)(a2 + 64);
  *(void *)&long long v110 = v85;
  if (v85) {
    llvm::MetadataTracking::track((uint64_t)&v110, v85, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v84, v83, (unsigned __int8 **)&v110, 0);
  if ((void)v110)
  {
    int v101 = *(unsigned __int8 *)v110;
    if ((v101 - 4) > 0x1E)
    {
      if ((v101 - 3) >= 0xFFFFFFFE) {
        uint64_t v104 = v110;
      }
      else {
        uint64_t v104 = 0;
      }
      if ((v101 - 3) < 0xFFFFFFFE)
      {
        if (v101 == 3) {
          *(void *)(v110 + 8) = 0;
        }
        goto LABEL_115;
      }
      unint64_t v103 = v104 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v110 + 1) & 0x7F) != 2 && !*(_DWORD *)(v110 + 12)) {
        goto LABEL_115;
      }
      uint64_t v102 = *(void *)(v110 + 16);
      if ((v102 & 4) == 0) {
        goto LABEL_115;
      }
      unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
      if (!v103) {
        goto LABEL_115;
      }
    }
    uint64_t v113 = &v110;
    sub_1CC5FA668(v103 + 16, &v113);
  }
LABEL_115:
  uint64_t v87 = *(void *)(v82 + 40);
  *((void *)MachineInstr + 3) = v87;
  uint64_t v88 = *(void *)(v87 + 32);
  uint64_t v89 = *((unsigned int *)MachineInstr + 10);
  int v8 = v77;
  if (v89)
  {
    uint64_t v94 = *((void *)MachineInstr + 4);
    uint64_t v95 = *(void *)(v88 + 40);
    uint64_t v96 = 32 * v89;
    do
    {
      if (!*(unsigned char *)v94)
      {
        uint64_t v97 = *(unsigned int *)(v94 + 4);
        if ((int)v97 >= 0) {
          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 272) + 8 * v97);
        }
        else {
          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
        }
        uint64_t v99 = *v98;
        if (*v98)
        {
          uint64_t v100 = *(void *)(v99 + 16);
          *(void *)(v99 + 16) = v94;
          *(void *)(v94 + 16) = v100;
          if (*(unsigned char *)(v94 + 3))
          {
            *(void *)(v94 + 24) = v99;
          }
          else
          {
            *(void *)(v94 + 24) = 0;
            unint64_t v98 = (uint64_t *)(v100 + 24);
          }
        }
        else
        {
          *(void *)(v94 + 16) = v94;
          *(void *)(v94 + 24) = 0;
        }
        *unint64_t v98 = v94;
      }
      v94 += 32;
      v96 -= 32;
    }
    while (v96);
  }
  uint64_t v90 = *(void *)(v88 + 728);
  if (v90) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v90 + 24))(v90, MachineInstr);
  }
  unint64_t v91 = *v81 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v91 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v81;
  *(void *)(v91 + 8) = MachineInstr;
  *uint64_t v81 = *v81 & 7 | (unint64_t)MachineInstr;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  LODWORD(v113) = 0x1000000;
  HIDWORD(v113) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(MachineInstr, v84, (const llvm::MachineOperand *)&v113);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  LODWORD(v113) = 0;
  HIDWORD(v113) = a6;
  uint64_t v116 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v84, (const llvm::MachineOperand *)&v113);
LABEL_119:
  *(void *)&long long v112 = a2;
  DWORD2(v112) = a3;
  if (v8)
  {
    uint64_t v113 = 0;
    if (sub_1CD78E72C((uint64_t *)v7, (uint64_t)&v112, (uint64_t *)&v113))
    {
      uint64_t v92 = (uint64_t)v113;
      *(void *)uint64_t v113 = 0;
      *(_DWORD *)(v92 + 8) = -2;
      *(int32x2_t *)(v7 + 8) = vadd_s32(*(int32x2_t *)(v7 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  long long v110 = v112;
  v111[0] = IncompleteVirtualRegister;
  return sub_1CD78E7F4((uint64_t)&v113, v7, (uint64_t)&v110, v111);
}

void sub_1CCF704B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, char a10)
{
  unsigned int v11 = a5;
  if (*(__int16 *)(a3 + 24) < 0)
  {
LABEL_48:
    sub_1CD78D260(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return;
  }
  unsigned int v15 = *(unsigned __int16 *)(a3 + 24);
  if (v15 <= 0x22)
  {
    if (v15 != 11)
    {
      if (v15 != 12) {
        goto LABEL_11;
      }
LABEL_10:
      uint64_t v18 = *(void *)(a3 + 80);
      uint64_t v20 = *(llvm::MachineFunction **)a2;
      uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
      int v21 = 3;
LABEL_20:
      LODWORD(v95) = v21;
      uint64_t v96 = 0;
      uint64_t v97 = v18;
LABEL_21:
      llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)&v95);
      return;
    }
    goto LABEL_8;
  }
  if (v15 == 36) {
    goto LABEL_10;
  }
  if (v15 == 35)
  {
LABEL_8:
    uint64_t v16 = *(void *)(a3 + 80);
    unsigned int v17 = *(_DWORD *)(v16 + 32);
    if (v17 > 0x40) {
      uint64_t v18 = **(void **)(v16 + 24);
    }
    else {
      uint64_t v18 = (uint64_t)(*(void *)(v16 + 24) << -(char)v17) >> -(char)v17;
    }
    uint64_t v20 = *(llvm::MachineFunction **)a2;
    uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
    int v21 = 1;
    goto LABEL_20;
  }
LABEL_11:
  if (a3 && v15 == 9)
  {
    int v22 = *(_DWORD *)(a3 + 76);
    uint64_t v23 = *(unsigned __int8 *)(*(void *)(a3 + 40) + 16 * a4);
    if (!a6) {
      goto LABEL_67;
    }
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a6, a5, v24, *(void *)a1);
    unint64_t v26 = (unint64_t)v25;
    if (v25 && !*(unsigned char *)(*v25 + 31))
    {
      BOOL v27 = (unsigned int *)v25[1];
      uint64_t v28 = *(void *)(v24 + 240);
      unint64_t v29 = (unint64_t)(*(void *)(v24 + 248) - v28) >> 3;
      unsigned int v30 = *v27;
      if (!*v27)
      {
        unsigned int v31 = 0;
        while (1)
        {
          v31 += 32;
          if (v31 >= v29) {
            goto LABEL_67;
          }
          unsigned int v57 = v27[1];
          ++v27;
          unsigned int v30 = v57;
          if (v57) {
            goto LABEL_66;
          }
        }
      }
      unsigned int v31 = 0;
LABEL_66:
      unsigned int v58 = __clz(__rbit32(v30));
      unsigned int v59 = v58 | v31;
      if ((v58 | v31) == v29)
      {
LABEL_67:
        unint64_t v26 = 0;
        goto LABEL_68;
      }
      unsigned int v88 = v30 >> v58;
      do
      {
        unint64_t v26 = *(void *)(v28 + 8 * v59);
        if (*(unsigned char *)(*(void *)v26 + 31)) {
          break;
        }
        if (v88 <= 1)
        {
          while (1)
          {
            v31 += 32;
            if (v31 >= v29) {
              goto LABEL_67;
            }
            unsigned int v90 = v27[1];
            ++v27;
            unsigned int v89 = v90;
            if (v90)
            {
              unsigned int v91 = v31;
              goto LABEL_122;
            }
          }
        }
        unsigned int v91 = v59 + 1;
        unsigned int v89 = v88 >> 1;
LABEL_122:
        unint64_t v26 = 0;
        unsigned int v92 = __clz(__rbit32(v89));
        unsigned int v59 = v92 + v91;
        unsigned int v88 = v89 >> v92;
      }
      while (v59 != v29);
    }
LABEL_68:
    if (v23 && (uint64_t v60 = *(void *)(a1 + 32), *(void *)(v60 + 8 * v23 + 96)))
    {
      if ((*(unsigned char *)(a3 + 26) & 4) != 0)
      {
        uint64_t v61 = 1;
      }
      else if (v26)
      {
        uint64_t v61 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24), v26);
      }
      else
      {
        uint64_t v61 = 0;
      }
      uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60 + 424))(v60, v23, v61);
    }
    else
    {
      uint64_t v62 = 0;
    }
    if (v62 == v26 || !v26 || !v62 || (v22 & 0x80000000) == 0)
    {
      int IncompleteVirtualRegister = v22;
      if (!a6) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }
    uint64_t v63 = *(void *)(a1 + 8);
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v63, "", 0);
    *(void *)(*(void *)(v63 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v26 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v65 = *(void *)(v63 + 8);
    if (v65) {
      (*(void (**)(uint64_t))(*(void *)v65 + 24))(v65);
    }
    uint64_t v67 = *(void *)(a1 + 40);
    unsigned int v66 = *(unint64_t **)(a1 + 48);
    uint64_t v68 = *(void *)(*(void *)(a1 + 16) + 8) + 912;
    uint64_t v69 = *(llvm::MachineFunction **)(v67 + 32);
    unint64_t v70 = *(unsigned __int8 **)(a3 + 64);
    uint64_t v94 = v70;
    if (v70) {
      llvm::MetadataTracking::track((uint64_t)&v94, v70, 2);
    }
    int v71 = llvm::MachineFunction::CreateMachineInstr(v69, v68, &v94, 0);
    if (!v94)
    {
LABEL_86:
      uint64_t v72 = *(void *)(v67 + 40);
      *((void *)v71 + 3) = v72;
      uint64_t v73 = *(void *)(v72 + 32);
      uint64_t v74 = *((unsigned int *)v71 + 10);
      if (v74)
      {
        uint64_t v78 = *((void *)v71 + 4);
        uint64_t v79 = *(void *)(v73 + 40);
        uint64_t v80 = 32 * v74;
        do
        {
          if (!*(unsigned char *)v78)
          {
            uint64_t v81 = *(unsigned int *)(v78 + 4);
            if ((int)v81 >= 0) {
              uint64_t v82 = (uint64_t *)(*(void *)(v79 + 272) + 8 * v81);
            }
            else {
              uint64_t v82 = (uint64_t *)(*(void *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
            }
            uint64_t v83 = *v82;
            if (*v82)
            {
              uint64_t v84 = *(void *)(v83 + 16);
              *(void *)(v83 + 16) = v78;
              *(void *)(v78 + 16) = v84;
              if (*(unsigned char *)(v78 + 3))
              {
                *(void *)(v78 + 24) = v83;
              }
              else
              {
                *(void *)(v78 + 24) = 0;
                uint64_t v82 = (uint64_t *)(v84 + 24);
              }
            }
            else
            {
              *(void *)(v78 + 16) = v78;
              *(void *)(v78 + 24) = 0;
            }
            *uint64_t v82 = v78;
          }
          v78 += 32;
          v80 -= 32;
        }
        while (v80);
      }
      uint64_t v75 = *(void *)(v73 + 728);
      if (v75) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v75 + 24))(v75, v71);
      }
      unint64_t v76 = *v66 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v71 = v76 | *(void *)v71 & 7;
      *((void *)v71 + 1) = v66;
      *(void *)(v76 + 8) = v71;
      *unsigned int v66 = *v66 & 7 | (unint64_t)v71;
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      LODWORD(v95) = 0x1000000;
      HIDWORD(v95) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v95);
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      LODWORD(v95) = 0;
      HIDWORD(v95) = v22;
      uint64_t v98 = 0;
      llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)&v95);
      if (!a6) {
        goto LABEL_93;
      }
LABEL_92:
      if (*(unsigned __int16 *)(a6 + 2) <= v11)
      {
        unsigned int v77 = ~(2 * *(_DWORD *)(a6 + 8)) & 4;
        goto LABEL_95;
      }
LABEL_93:
      unsigned int v77 = 0;
LABEL_95:
      sub_1CB89517C((llvm::MachineFunction **)a2, IncompleteVirtualRegister, v77, 0);
      return;
    }
    int v85 = *v94;
    if ((v85 - 4) > 0x1E)
    {
      if ((v85 - 3) >= 0xFFFFFFFE) {
        uint64_t v93 = v94;
      }
      else {
        uint64_t v93 = 0;
      }
      if ((v85 - 3) < 0xFFFFFFFE)
      {
        if (v85 == 3) {
          *((void *)v94 + 1) = 0;
        }
        goto LABEL_86;
      }
      unint64_t v87 = (unint64_t)(v93 + 8);
    }
    else
    {
      if ((v94[1] & 0x7F) != 2 && !*((_DWORD *)v94 + 3)) {
        goto LABEL_86;
      }
      uint64_t v86 = *((void *)v94 + 2);
      if ((v86 & 4) == 0) {
        goto LABEL_86;
      }
      unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
      if (!v87) {
        goto LABEL_86;
      }
    }
    uint64_t v95 = (uint64_t)&v94;
    sub_1CC5FA668(v87 + 16, &v95);
    goto LABEL_86;
  }
  if (a3 && v15 == 10)
  {
    uint64_t v18 = *(void *)(a3 + 80);
    uint64_t v20 = *(llvm::MachineFunction **)a2;
    uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
    int v21 = 12;
    goto LABEL_20;
  }
  BOOL v32 = v15 > 0x26;
  if (v15 > 0x26 || (BOOL v32 = ((1 << v15) & 0x6000006000) != 0 && v15 >= 0x26, ((1 << v15) & 0x6000006000) == 0))
  {
    if (a3)
    {
      BOOL v32 = v15 > 6;
      if (v15 == 6)
      {
        uint64_t v33 = *(void *)(a3 + 80);
        uint64_t v20 = *(llvm::MachineFunction **)a2;
        uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
        uint64_t v96 = 0;
        uint64_t v97 = v33;
        int v34 = 4;
LABEL_39:
        LODWORD(v95) = v34;
        goto LABEL_21;
      }
    }
    if (!v32)
    {
      switch(*(_WORD *)(a3 + 24))
      {
        case 0xF:
          goto LABEL_37;
        case 0x10:
          goto LABEL_38;
        case 0x11:
          goto LABEL_51;
        case 0x12:
          goto LABEL_53;
        default:
          JUMPOUT(0);
      }
    }
    switch(*(_WORD *)(a3 + 24))
    {
      case '\'':
LABEL_37:
        int v38 = *(_DWORD *)(a3 + 76);
        uint64_t v20 = *(llvm::MachineFunction **)a2;
        uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
        LODWORD(v95) = 5;
        uint64_t v96 = 0;
        LODWORD(v97) = v38;
        goto LABEL_21;
      case '(':
LABEL_38:
        int v39 = *(_DWORD *)(a3 + 76);
        int v40 = *(_DWORD *)(a3 + 80);
        uint64_t v20 = *(llvm::MachineFunction **)a2;
        uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
        uint64_t v96 = 0;
        LODWORD(v97) = v39;
        int v34 = ((v40 & 0xFFF) << 8) | 8;
        goto LABEL_39;
      case ')':
LABEL_51:
        int v45 = *(_DWORD *)(a3 + 88);
        int v46 = v45 & 0x7FFFFFFF;
        unsigned __int8 v47 = *(unsigned char *)(a3 + 92);
        uint64_t v48 = *(unsigned __int8 **)(*(void *)a1 + 64);
        uint64_t v49 = *(uint64_t **)(a3 + 80);
        if (v45 < 0) {
          int ConstantPoolIndex = llvm::MachineConstantPool::getConstantPoolIndex(v48, (uint64_t)v49, v47);
        }
        else {
          int ConstantPoolIndex = llvm::MachineConstantPool::getConstantPoolIndex(v48, v49, v47);
        }
        int v53 = *(_DWORD *)(a3 + 96);
        sub_1CD78D500((llvm::MachineFunction **)a2, ConstantPoolIndex, v46, v53);
        return;
      case '*':
LABEL_53:
        uint64_t v51 = *(void *)(a3 + 80);
        int v52 = *(_DWORD *)(a3 + 88);
        sub_1CD78D558((llvm::MachineFunction **)a2, v51, v52);
        return;
      default:
        if (a3 && v15 == 44)
        {
          uint64_t v41 = *(void *)(a3 + 80);
          uint64_t v20 = *(llvm::MachineFunction **)a2;
          uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
          uint64_t v96 = 0;
          uint64_t v97 = v41;
          LODWORD(v98) = 0;
          uint64_t v95 = 15;
          goto LABEL_21;
        }
        if (v15 == 43 || v15 == 19)
        {
          uint64_t v54 = *(void *)(a3 + 80);
          uint64_t v55 = *(void *)(a3 + 88);
          int v56 = *(_DWORD *)(a3 + 96);
          sub_1CD78D5AC((llvm::MachineFunction **)a2, v54, v55, v56);
          return;
        }
        if (a3 && v15 == 45)
        {
          uint64_t v42 = *(void *)(a3 + 88);
          int v44 = *(_DWORD *)(a3 + 76);
          int v43 = *(_DWORD *)(a3 + 80);
          uint64_t v20 = *(llvm::MachineFunction **)a2;
          uint64_t v19 = *(llvm::MachineInstr **)(a2 + 8);
          uint64_t v96 = 0;
          LODWORD(v97) = v43;
          LODWORD(v98) = HIDWORD(v42);
          LODWORD(v95) = ((v44 & 0xFFF) << 8) | 7;
          HIDWORD(v95) = v42;
          goto LABEL_21;
        }
        break;
    }
    goto LABEL_48;
  }
  uint64_t v35 = *(void *)(a3 + 80);
  uint64_t v36 = *(void *)(a3 + 88);
  int v37 = *(_DWORD *)(a3 + 96);

  sub_1CD78D4A8((llvm::MachineFunction **)a2, v35, v36, v37);
}

void sub_1CCF70CF8(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a5)
  {
    uint64_t v10 = 24 * a5;
    unsigned int v11 = (_DWORD *)(a4 + 8);
    while (1)
    {
      switch(*(v11 - 2))
      {
        case 0:
          int v22 = v11[2];
          uint64_t v23 = *(void *)v11;
          LODWORD(v24) = v22;
          *(void *)&long long v25 = 0;
          if ((sub_1CD78E72C(a6, (uint64_t)&v23, (uint64_t *)&v25) & 1) == 0)
          {
            unsigned int v17 = *a2;
            uint64_t v16 = a2[1];
            goto LABEL_28;
          }
          sub_1CCF704B8(a1, (uint64_t)a2, v23, v24, *((unsigned int *)a2[1] + 10), a3, (uint64_t)a6, 1, 0, 0);
          goto LABEL_23;
        case 1:
          uint64_t v12 = *(void *)v11;
          int v13 = *(unsigned __int8 *)(*(void *)v11 + 16);
          if (*(void *)v11) {
            BOOL v14 = v13 == 16;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unsigned int v20 = *(_DWORD *)(v12 + 32);
            if (v20 >= 0x41)
            {
              unsigned int v17 = *a2;
              uint64_t v16 = a2[1];
              int v21 = 2;
              goto LABEL_19;
            }
            uint64_t v12 = (uint64_t)(*(void *)(v12 + 24) << -(char)v20) >> -(char)v20;
            unsigned int v17 = *a2;
            uint64_t v16 = a2[1];
            LODWORD(v25) = 1;
LABEL_21:
            *((void *)&v25 + 1) = 0;
            *(void *)&long long v26 = v12;
            goto LABEL_22;
          }
          if (v12) {
            BOOL v15 = v13 == 17;
          }
          else {
            BOOL v15 = 0;
          }
          if (v15)
          {
            unsigned int v17 = *a2;
            uint64_t v16 = a2[1];
            int v21 = 3;
LABEL_19:
            LODWORD(v25) = v21;
            goto LABEL_21;
          }
          unsigned int v17 = *a2;
          uint64_t v16 = a2[1];
          if (v13 == 19)
          {
            LODWORD(v25) = 1;
            *((void *)&v25 + 1) = 0;
            *(void *)&long long v26 = 0;
          }
          else
          {
LABEL_28:
            long long v25 = 0u;
            long long v26 = 0u;
          }
LABEL_22:
          llvm::MachineInstr::addOperand(v16, v17, (const llvm::MachineOperand *)&v25);
LABEL_23:
          v11 += 6;
          v10 -= 24;
          if (!v10) {
            return;
          }
          break;
        case 2:
          int v18 = *v11;
          unsigned int v17 = *a2;
          uint64_t v16 = a2[1];
          LODWORD(v25) = 5;
          *((void *)&v25 + 1) = 0;
          LODWORD(v26) = v18;
          goto LABEL_22;
        case 3:
          int v19 = *v11;
          unsigned int v17 = *a2;
          uint64_t v16 = a2[1];
          *((void *)&v25 + 1) = 0;
          LODWORD(v25) = 0;
          DWORD1(v25) = v19;
          long long v26 = 0uLL;
          goto LABEL_22;
        default:
          goto LABEL_23;
      }
    }
  }
}

llvm::MachineInstr *sub_1CCF70ED8(llvm::MachineFunction **a1, uint64_t a2, uint64_t *a3)
{
  v35[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(llvm::DIExpression **)(a2 + 40);
  int v8 = *(unsigned __int8 **)(a2 + 48);
  unsigned int v30 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v30, v8, 2);
  }
  uint64_t v9 = *((void *)a1[2] + 1) + 624;
  uint64_t v10 = *(long long **)(a2 + 8);
  uint64_t v33 = v35;
  uint64_t v34 = 0x100000000;
  sub_1CD78EA30((uint64_t *)&v33, v10);
  if (v6 && *(_DWORD *)v33 == 1)
  {
    unsigned int v11 = (const llvm::ConstantInt *)*((void *)v33 + 1);
    if (v11 && *((unsigned char *)v11 + 16) == 16)
    {
      uint64_t v6 = llvm::DIExpression::constantFold(v6, v11);
      int v13 = v33;
      *(_DWORD *)uint64_t v33 = 1;
      v13[1] = v14;
    }
  }
  BOOL v15 = *a1;
  uint64_t v28 = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v28, v30, 2);
  }
  uint64_t v16 = llvm::MachineFunction::CreateMachineInstr(v15, v9, &v28, 0);
  if (v28)
  {
    BOOL v27 = v16;
    int v23 = *v28;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        long long v26 = v28;
      }
      else {
        long long v26 = 0;
      }
      if ((v23 - 3) < 0xFFFFFFFE)
      {
        if (v23 == 3) {
          *((void *)v28 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v25 = (unint64_t)(v26 + 8);
    }
    else
    {
      if ((v28[1] & 0x7F) != 2 && !*((_DWORD *)v28 + 3)) {
        goto LABEL_14;
      }
      uint64_t v24 = *((void *)v28 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_14;
      }
    }
    *(void *)&long long v31 = &v28;
    sub_1CC5FA668(v25 + 16, &v31);
    uint64_t v16 = v27;
  }
LABEL_14:
  uint64_t v28 = (unsigned __int8 *)v15;
  unint64_t v29 = v16;
  sub_1CCF70CF8((uint64_t)a1, (llvm::MachineFunction **)&v28, v9, (uint64_t)v33, v34, a3);
  if (*(unsigned char *)(a2 + 60))
  {
    LODWORD(v31) = 1;
    *((void *)&v31 + 1) = 0;
    *(void *)&long long v32 = 0;
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  llvm::MachineInstr::addOperand(v29, (llvm::MachineFunction *)v28, (const llvm::MachineOperand *)&v31);
  LODWORD(v31) = 14;
  *((void *)&v31 + 1) = 0;
  *(void *)&long long v32 = v7;
  llvm::MachineInstr::addOperand(v29, (llvm::MachineFunction *)v28, (const llvm::MachineOperand *)&v31);
  LODWORD(v31) = 14;
  *((void *)&v31 + 1) = 0;
  *(void *)&long long v32 = v6;
  llvm::MachineInstr::addOperand(v29, (llvm::MachineFunction *)v28, (const llvm::MachineOperand *)&v31);
  unsigned int v17 = v29;
  if (v33 != v35) {
    free(v33);
  }
  if (v30)
  {
    int v18 = *v30;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        unsigned int v20 = v30;
      }
      else {
        unsigned int v20 = 0;
      }
      if ((v18 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v21 = (unint64_t)(v20 + 8);
LABEL_29:
        uint64_t v33 = &v30;
        sub_1CC5FA668(v21 + 16, &v33);
        return v17;
      }
      if (v18 == 3) {
        *((void *)v30 + 1) = 0;
      }
    }
    else if ((v30[1] & 0x7F) == 2 || *((_DWORD *)v30 + 3))
    {
      uint64_t v22 = *((void *)v30 + 2);
      if ((v22 & 4) != 0)
      {
        unint64_t v21 = v22 & 0xFFFFFFFFFFFFFFF8;
        if (v21) {
          goto LABEL_29;
        }
      }
    }
  }
  return v17;
}

llvm::MachineInstr *sub_1CCF711B0(uint64_t a1, int a2)
{
  uint64_t v4 = **(llvm::MachineFunction ***)a1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(unsigned __int8 ***)(a1 + 8);
  int v19 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v19, v6, 2);
  }
  uint64_t v7 = llvm::MachineFunction::CreateMachineInstr(v4, v5, &v19, 0);
  if (v19)
  {
    int v11 = *v19;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v19;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *((void *)v19 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v13 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v19[1] & 0x7F) != 2 && !*((_DWORD *)v19 + 3)) {
        goto LABEL_4;
      }
      uint64_t v12 = *((void *)v19 + 2);
      if ((v12 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_4;
      }
    }
    BOOL v15 = &v19;
    sub_1CC5FA668(v13 + 16, &v15);
  }
LABEL_4:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = a2;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v7, v4, (const llvm::MachineOperand *)&v15);
  LODWORD(v15) = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  llvm::MachineInstr::addOperand(v7, v4, (const llvm::MachineOperand *)&v15);
  uint64_t v8 = **(void **)(a1 + 24);
  LODWORD(v15) = 14;
  uint64_t v16 = 0;
  uint64_t v17 = v8;
  llvm::MachineInstr::addOperand(v7, v4, (const llvm::MachineOperand *)&v15);
  uint64_t v9 = **(void **)(a1 + 32);
  LODWORD(v15) = 14;
  uint64_t v16 = 0;
  uint64_t v17 = v9;
  llvm::MachineInstr::addOperand(v7, v4, (const llvm::MachineOperand *)&v15);
  return v7;
}

void sub_1CCF71324(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  int v8 = *(unsigned __int16 *)(a2 + 24);
  unsigned int v9 = (__int16)~(_WORD)v8;
  uint64_t v10 = (uint64_t)a5;
  switch(~(_WORD)v8)
  {
    case 8:
    case 9:
    case 11:
      uint64_t v54 = *(void *)(a2 + 48);
      if (!v54) {
        goto LABEL_82;
      }
      do
      {
        uint64_t v55 = *(void *)(v54 + 16);
        if (*(_WORD *)(v55 + 24) == 49)
        {
          uint64_t v56 = *(void *)(v55 + 32);
          if (*(void *)(v56 + 80) == a2)
          {
            unsigned int IncompleteVirtualRegister = *(_DWORD *)(*(void *)(v56 + 40) + 76);
            if ((IncompleteVirtualRegister & 0x80000000) != 0) {
              goto LABEL_83;
            }
          }
        }
        uint64_t v54 = *(void *)(v54 + 32);
      }
      while (v54);
LABEL_82:
      unsigned int IncompleteVirtualRegister = 0;
LABEL_83:
      if (v8 != 65527)
      {
        uint64_t v99 = *(uint64_t **)(a2 + 32);
        uint64_t v100 = *(void *)(v99[10] + 80);
        int v101 = (void *)(v100 + 24);
        int v268 = *(unsigned __int16 *)(a2 + 24);
        if (*(_DWORD *)(v100 + 32) >= 0x41u) {
          int v101 = (void *)*v101;
        }
        char v277 = a4;
        uint64_t v271 = v99[1];
        uint64_t v274 = *v99;
        uint64_t v103 = v99[5];
        uint64_t v102 = v99[6];
        uint64_t v104 = (void *)*v101;
        uint64_t v105 = *v101;
        uint64_t v106 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 32) + 424))(*(void *)(a1 + 32), **(unsigned __int8 **)(a2 + 40), (*(unsigned __int8 *)(a2 + 26) >> 2) & 1);
        uint64_t v107 = (*(uint64_t (**)(void, uint64_t, void *))(**(void **)(v7 + 24) + 200))(*(void *)(v7 + 24), v106, v104);
        uint64_t v108 = v107;
        uint64_t v109 = v7;
        uint64_t v110 = *(void *)(v7 + 8);
        v280 = (void *)v105;
        if (IncompleteVirtualRegister
          && (unsigned int v111 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v110 + 24)
                                                                 + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                         + 24),
              ((*(_DWORD *)(*(void *)(v107 + 8) + ((v111 >> 3) & 0x1FFCLL)) >> v111) & 1) != 0))
        {
          uint64_t v114 = v103;
          int v112 = IncompleteVirtualRegister;
        }
        else
        {
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v110, "", 0);
          int v112 = IncompleteVirtualRegister;
          *(void *)(*(void *)(v110 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v108 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v113 = *(void *)(v110 + 8);
          uint64_t v114 = v103;
          if (v113) {
            (*(void (**)(uint64_t, void))(*(void *)v113 + 24))(v113, IncompleteVirtualRegister);
          }
        }
        int v85 = a5;
        uint64_t v171 = v102;
        uint64_t v172 = v109;
        unint64_t v173 = (unsigned __int8 *)sub_1CD5834C0(*(llvm::MachineFunction **)v109, (unsigned __int8 **)(v6 + 64), *(void *)(*(void *)(v109 + 16) + 8) + 48 * v9, v112);
        uint64_t v286 = (llvm::MachineFunction *)v173;
        int v287 = v174;
        if (v268 == 65524)
        {
          uint64_t v175 = *(void *)(v274 + 80);
          uint64_t v176 = (void *)(v175 + 24);
          char v177 = v277;
          if (*(_DWORD *)(v175 + 32) >= 0x41u) {
            uint64_t v176 = (void *)*v176;
          }
          uint64_t v172 = v109;
          uint64_t v178 = (void *)*v176;
          LODWORD(v291) = 1;
          uint64_t v292 = 0;
          uint64_t v293 = v178;
          llvm::MachineInstr::addOperand(v174, (llvm::MachineFunction *)v173, (const llvm::MachineOperand *)&v291);
          char v179 = a3;
        }
        else
        {
          char v177 = v277;
          char v179 = a3;
          sub_1CCF704B8(v109, (uint64_t)&v286, v274, v271, 0, 0, (uint64_t)a5, 0, a3, v277);
        }
        sub_1CCF704B8(v172, (uint64_t)&v286, v114, v171, 0, 0, (uint64_t)a5, 0, v179, v177);
        LODWORD(v291) = 1;
        uint64_t v292 = 0;
        uint64_t v293 = v280;
        llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v291);
        uint64_t v180 = *(unint64_t **)(v172 + 48);
        unint64_t v181 = (unint64_t)v287;
        uint64_t v182 = *(void *)(*(void *)(v172 + 40) + 40);
        *((void *)v287 + 3) = v182;
        uint64_t v183 = *(void *)(v182 + 32);
        uint64_t v184 = *(unsigned int *)(v181 + 40);
        if (v184)
        {
          uint64_t v191 = *(void *)(v181 + 32);
          uint64_t v192 = *(void *)(v183 + 40);
          uint64_t v193 = 32 * v184;
          do
          {
            if (!*(unsigned char *)v191)
            {
              uint64_t v194 = *(unsigned int *)(v191 + 4);
              if ((int)v194 >= 0) {
                uint64_t v195 = (uint64_t *)(*(void *)(v192 + 272) + 8 * v194);
              }
              else {
                uint64_t v195 = (uint64_t *)(*(void *)(v192 + 24) + 16 * (v194 & 0x7FFFFFFF) + 8);
              }
              uint64_t v196 = *v195;
              if (*v195)
              {
                uint64_t v197 = *(void *)(v196 + 16);
                *(void *)(v196 + 16) = v191;
                *(void *)(v191 + 16) = v197;
                if (*(unsigned char *)(v191 + 3))
                {
                  *(void *)(v191 + 24) = v196;
                }
                else
                {
                  *(void *)(v191 + 24) = 0;
                  uint64_t v195 = (uint64_t *)(v197 + 24);
                }
              }
              else
              {
                *(void *)(v191 + 16) = v191;
                *(void *)(v191 + 24) = 0;
              }
              *uint64_t v195 = v191;
            }
            v191 += 32;
            v193 -= 32;
          }
          while (v193);
        }
        uint64_t v185 = *(void *)(v183 + 728);
        if (v185) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v185 + 24))(v185, v181);
        }
        unint64_t v186 = *v180 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v181 = v186 | *(void *)v181 & 7;
        *(void *)(v181 + 8) = v180;
        *(void *)(v186 + 8) = v181;
        *uint64_t v180 = *v180 & 7 | v181;
        goto LABEL_260;
      }
      uint64_t v58 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
      unsigned int v59 = (unsigned int *)(v58 + 24);
      if (*(_DWORD *)(v58 + 32) >= 0x41u) {
        unsigned int v59 = *(unsigned int **)v59;
      }
      uint64_t v60 = *v59;
      uint64_t v61 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 32) + 424))(*(void *)(a1 + 32), **(unsigned __int8 **)(a2 + 40), (*(unsigned __int8 *)(a2 + 26) >> 2) & 1);
      uint64_t v62 = *(uint64_t **)(v6 + 32);
      uint64_t v63 = *v62;
      if (*v62) {
        BOOL v64 = *(unsigned __int16 *)(*v62 + 24) == 9;
      }
      else {
        BOOL v64 = 0;
      }
      if (v64)
      {
        unsigned int v190 = *(_DWORD *)(v63 + 76);
        if (v190 - 1 <= 0x3FFFFFFE)
        {
          LODWORD(v289) = 0;
          uint64_t v285 = 0;
          goto LABEL_315;
        }
      }
      else
      {
        unsigned int v190 = sub_1CD78D15C(v7, v63, v62[1], (uint64_t)a5);
      }
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v190 & 0x80000000) != 0) {
        unsigned int v66 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v66 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v190);
      }
      uint64_t v67 = *v66;
      if (!v67
        || (*(unsigned char *)(v67 + 3) & 1) == 0 && ((uint64_t v67 = *(void *)(v67 + 24)) == 0 || (*(unsigned char *)(v67 + 3) & 1) == 0))
      {
        LODWORD(v289) = 0;
        uint64_t v285 = 0;
        goto LABEL_313;
      }
      uint64_t v68 = *(void *)(v67 + 8);
      LODWORD(v289) = 0;
      uint64_t v285 = 0;
      if (!v68
        || ((*(unsigned int (**)(void, uint64_t, llvm::MachineFunction **, char *, uint64_t *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v68, &v289, (char *)&v285 + 4, &v285)? (v69 = v285 == v60): (v69 = 0), !v69|| (uint64_t v70 = *(void *)(a1 + 8), v61 != (*(void *)(*(void *)(v70 + 24) + 16 * (v289 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))))
      {
LABEL_313:
        if ((v190 & 0x80000000) != 0) {
          unsigned int v190 = sub_1CD78D604(a1, v190, v60, *(unsigned char *)(*(void *)(**(void **)(v6 + 32) + 40)+ 16 * *(unsigned int *)(*(void *)(v6 + 32) + 8)), (*(unsigned __int8 *)(v6 + 26) >> 2) & 1, (unsigned __int8 **)(v6 + 64));
        }
LABEL_315:
        if (!IncompleteVirtualRegister)
        {
          uint64_t v212 = *(void *)(a1 + 8);
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v212, "", 0);
          *(void *)(*(void *)(v212 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v61 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v213 = *(void *)(v212 + 8);
          if (v213) {
            (*(void (**)(uint64_t))(*(void *)v213 + 24))(v213);
          }
        }
        uint64_t v214 = *(void *)(a1 + 40);
        uint64_t v215 = *(unint64_t **)(a1 + 48);
        uint64_t v216 = *(void *)(*(void *)(a1 + 16) + 8) + 912;
        uint64_t v217 = *(llvm::MachineFunction **)(v214 + 32);
        unint64_t v218 = *(unsigned __int8 **)(v6 + 64);
        uint64_t v286 = (llvm::MachineFunction *)v218;
        if (v218) {
          llvm::MetadataTracking::track((uint64_t)&v286, v218, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v217, v216, (unsigned __int8 **)&v286, 0);
        if (!v286) {
          goto LABEL_321;
        }
        int v261 = *(unsigned __int8 *)v286;
        if ((v261 - 4) > 0x1E)
        {
          if ((v261 - 3) >= 0xFFFFFFFE) {
            v264 = v286;
          }
          else {
            v264 = 0;
          }
          if ((v261 - 3) < 0xFFFFFFFE)
          {
            if (v261 == 3) {
              *((void *)v286 + 1) = 0;
            }
            goto LABEL_321;
          }
          unint64_t v263 = (unint64_t)v264 + 8;
        }
        else
        {
          if ((*((unsigned char *)v286 + 1) & 0x7F) != 2 && !*((_DWORD *)v286 + 3)) {
            goto LABEL_321;
          }
          uint64_t v262 = *((void *)v286 + 2);
          if ((v262 & 4) == 0) {
            goto LABEL_321;
          }
          unint64_t v263 = v262 & 0xFFFFFFFFFFFFFFF8;
          if (!v263) {
            goto LABEL_321;
          }
        }
        long long v291 = &v286;
        sub_1CC5FA668(v263 + 16, &v291);
LABEL_321:
        uint64_t v220 = *(void *)(v214 + 40);
        *((void *)MachineInstr + 3) = v220;
        uint64_t v221 = *(void *)(v220 + 32);
        uint64_t v222 = *((unsigned int *)MachineInstr + 10);
        if (v222)
        {
          uint64_t v233 = *((void *)MachineInstr + 4);
          uint64_t v234 = *(void *)(v221 + 40);
          uint64_t v235 = 32 * v222;
          do
          {
            if (!*(unsigned char *)v233)
            {
              uint64_t v236 = *(unsigned int *)(v233 + 4);
              if ((int)v236 >= 0) {
                int v237 = (uint64_t *)(*(void *)(v234 + 272) + 8 * v236);
              }
              else {
                int v237 = (uint64_t *)(*(void *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
              }
              uint64_t v238 = *v237;
              if (*v237)
              {
                uint64_t v239 = *(void *)(v238 + 16);
                *(void *)(v238 + 16) = v233;
                *(void *)(v233 + 16) = v239;
                if (*(unsigned char *)(v233 + 3))
                {
                  *(void *)(v233 + 24) = v238;
                }
                else
                {
                  *(void *)(v233 + 24) = 0;
                  int v237 = (uint64_t *)(v239 + 24);
                }
              }
              else
              {
                *(void *)(v233 + 16) = v233;
                *(void *)(v233 + 24) = 0;
              }
              *int v237 = v233;
            }
            v233 += 32;
            v235 -= 32;
          }
          while (v235);
        }
        uint64_t v223 = *(void *)(v221 + 728);
        if (v223) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v223 + 24))(v223, MachineInstr);
        }
        unint64_t v224 = *v215 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v224 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v215;
        *(void *)(v224 + 8) = MachineInstr;
        *uint64_t v215 = *v215 & 7 | (unint64_t)MachineInstr;
        uint64_t v292 = 0;
        uint64_t v293 = 0;
        uint64_t v294 = 0;
        LODWORD(v291) = 0x1000000;
        HIDWORD(v291) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand(MachineInstr, v217, (const llvm::MachineOperand *)&v291);
        if ((v190 & 0x80000000) != 0)
        {
          uint64_t v292 = 0;
          uint64_t v293 = 0;
          uint64_t v294 = 0;
          LODWORD(v291) = (v60 & 0xFFF) << 8;
          HIDWORD(v291) = v190;
        }
        else
        {
          unint64_t v225 = *(void **)(a1 + 24);
          uint64_t v226 = v225[1];
          uint64_t v227 = v225[7];
          uint64_t v228 = *(unsigned int *)(v226 + 24 * v190 + 4);
          int v229 = *(unsigned __int16 *)(v227 + 2 * v228);
          if (!*(_WORD *)(v227 + 2 * v228)) {
            goto LABEL_332;
          }
          LOWORD(v229) = v229 + v190;
          v230 = (unsigned __int16 *)(v225[11] + 2 * *(unsigned int *)(v226 + 24 * v190 + 12));
          v231 = (unsigned __int16 *)(v227 + 2 * v228 + 2);
          while (*v230 != v60)
          {
            int v232 = *v231++;
            LOWORD(v229) = v232 + v229;
            ++v230;
            if (!v232)
            {
              int v229 = 0;
              goto LABEL_332;
            }
          }
          int v229 = (unsigned __int16)v229;
LABEL_332:
          uint64_t v292 = 0;
          uint64_t v293 = 0;
          LODWORD(v291) = 0;
          HIDWORD(v291) = v229;
          uint64_t v294 = 0;
        }
        llvm::MachineInstr::addOperand(MachineInstr, v217, (const llvm::MachineOperand *)&v291);
        int v85 = a5;
        goto LABEL_260;
      }
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(void *)(a1 + 8), "", 0);
      *(void *)(*(void *)(v70 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v61 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v71 = *(void *)(v70 + 8);
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v71 + 24))(v71);
      }
      uint64_t v72 = *(void *)(a1 + 40);
      uint64_t v73 = *(unint64_t **)(a1 + 48);
      uint64_t v74 = *(void *)(*(void *)(a1 + 16) + 8) + 912;
      uint64_t v75 = *(llvm::MachineFunction **)(v72 + 32);
      unint64_t v76 = *(unsigned __int8 **)(v6 + 64);
      uint64_t v286 = (llvm::MachineFunction *)v76;
      if (v76) {
        llvm::MetadataTracking::track((uint64_t)&v286, v76, 2);
      }
      unsigned int v77 = llvm::MachineFunction::CreateMachineInstr(v75, v74, (unsigned __int8 **)&v286, 0);
      if (!v286) {
        goto LABEL_108;
      }
      int v244 = *(unsigned __int8 *)v286;
      if ((v244 - 4) > 0x1E)
      {
        if ((v244 - 3) >= 0xFFFFFFFE) {
          v260 = v286;
        }
        else {
          v260 = 0;
        }
        if ((v244 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v246 = (unint64_t)v260 + 8;
LABEL_393:
          long long v291 = &v286;
          sub_1CC5FA668(v246 + 16, &v291);
          goto LABEL_108;
        }
        if (v244 == 3) {
          *((void *)v286 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v286 + 1) & 0x7F) == 2 || *((_DWORD *)v286 + 3))
      {
        uint64_t v245 = *((void *)v286 + 2);
        if ((v245 & 4) != 0)
        {
          unint64_t v246 = v245 & 0xFFFFFFFFFFFFFFF8;
          if (v246) {
            goto LABEL_393;
          }
        }
      }
LABEL_108:
      uint64_t v78 = *(void *)(v72 + 40);
      *((void *)v77 + 3) = v78;
      uint64_t v79 = *(void *)(v78 + 32);
      uint64_t v80 = *((unsigned int *)v77 + 10);
      if (v80)
      {
        uint64_t v198 = *((void *)v77 + 4);
        uint64_t v199 = *(void *)(v79 + 40);
        uint64_t v200 = 32 * v80;
        do
        {
          if (!*(unsigned char *)v198)
          {
            uint64_t v201 = *(unsigned int *)(v198 + 4);
            if ((int)v201 >= 0) {
              int v202 = (uint64_t *)(*(void *)(v199 + 272) + 8 * v201);
            }
            else {
              int v202 = (uint64_t *)(*(void *)(v199 + 24) + 16 * (v201 & 0x7FFFFFFF) + 8);
            }
            uint64_t v203 = *v202;
            if (*v202)
            {
              uint64_t v204 = *(void *)(v203 + 16);
              *(void *)(v203 + 16) = v198;
              *(void *)(v198 + 16) = v204;
              if (*(unsigned char *)(v198 + 3))
              {
                *(void *)(v198 + 24) = v203;
              }
              else
              {
                *(void *)(v198 + 24) = 0;
                int v202 = (uint64_t *)(v204 + 24);
              }
            }
            else
            {
              *(void *)(v198 + 16) = v198;
              *(void *)(v198 + 24) = 0;
            }
            *int v202 = v198;
          }
          v198 += 32;
          v200 -= 32;
        }
        while (v200);
      }
      uint64_t v81 = *(void *)(v79 + 728);
      if (v81) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v81 + 24))(v81, v77);
      }
      unint64_t v82 = *v73 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v77 = v82 | *(void *)v77 & 7;
      *((void *)v77 + 1) = v73;
      *(void *)(v82 + 8) = v77;
      *uint64_t v73 = *v73 & 7 | (unint64_t)v77;
      uint64_t v292 = 0;
      uint64_t v293 = 0;
      uint64_t v294 = 0;
      LODWORD(v291) = 0x1000000;
      HIDWORD(v291) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v77, v75, (const llvm::MachineOperand *)&v291);
      uint64_t v292 = 0;
      uint64_t v293 = 0;
      LODWORD(v291) = 0;
      HIDWORD(v291) = v289;
      uint64_t v294 = 0;
      llvm::MachineInstr::addOperand(v77, v75, (const llvm::MachineOperand *)&v291);
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v289 & 0x80000000) != 0) {
        uint64_t v84 = (unsigned int **)(*(void *)(v83 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v84 = (unsigned int **)(*(void *)(v83 + 272) + 8 * v289);
      }
      int v85 = a5;
      uint64_t v86 = *v84;
      if (v86)
      {
        while (1)
        {
          unsigned int v87 = *v86;
          if ((*v86 & 0x1000000) == 0) {
            break;
          }
          uint64_t v86 = (unsigned int *)*((void *)v86 + 3);
          if (!v86) {
            goto LABEL_260;
          }
        }
LABEL_117:
        *uint64_t v86 = v87 & 0xFBFFFFFF;
        while (1)
        {
          uint64_t v86 = (unsigned int *)*((void *)v86 + 3);
          if (!v86) {
            break;
          }
          unsigned int v87 = *v86;
          if ((*v86 & 0x1000000) == 0) {
            goto LABEL_117;
          }
        }
      }
LABEL_260:
      uint64_t v286 = (llvm::MachineFunction *)v6;
      LODWORD(v287) = 0;
      unsigned int v288 = IncompleteVirtualRegister;
      uint64_t v167 = (uint64_t)v85;
      goto LABEL_261;
    case 10:
      return;
    case 12:
      sub_1CD78D788(a1, a2, (uint64_t)a5);
      return;
    case 18:
      uint64_t v115 = *(void *)(**(void **)(a2 + 32) + 80);
      uint64_t v116 = (unsigned int *)(v115 + 24);
      if (*(_DWORD *)(v115 + 32) >= 0x41u) {
        uint64_t v116 = *(unsigned int **)v116;
      }
      uint64_t v117 = *v116;
      uint64_t v118 = *(void *)(a1 + 24);
      uint64_t v119 = *(void *)(v118 + 240);
      uint64_t v120 = *(void **)(v119 + 8 * v117);
      uint64_t v121 = *(void *)(a1 + 8);
      if (!v120)
      {
        uint64_t v122 = 0;
        goto LABEL_173;
      }
      uint64_t v122 = *(void *)(v119 + 8 * v117);
      if (*(unsigned char *)(*v120 + 31)) {
        goto LABEL_173;
      }
      uint64_t v247 = *(void **)(v119 + 8 * v117);
      __int16 v248 = (unsigned int *)v120[1];
      unint64_t v249 = (unint64_t)(*(void *)(v118 + 248) - v119) >> 3;
      unsigned int v250 = *v248;
      if (!*v248)
      {
        unsigned int v251 = 0;
        while (1)
        {
          v251 += 32;
          if (v251 >= v249) {
            goto LABEL_377;
          }
          unsigned int v252 = v248[1];
          ++v248;
          unsigned int v250 = v252;
          if (v252) {
            goto LABEL_376;
          }
        }
      }
      unsigned int v251 = 0;
LABEL_376:
      unsigned int v253 = __clz(__rbit32(v250));
      unsigned int v254 = v253 | v251;
      if ((v253 | v251) == v249)
      {
LABEL_377:
        uint64_t v122 = 0;
LABEL_378:
        uint64_t v7 = a1;
        uint64_t v10 = (uint64_t)a5;
        LOBYTE(v5) = a4;
        uint64_t v6 = a2;
        uint64_t v120 = v247;
        goto LABEL_173;
      }
      unsigned int v255 = v250 >> v253;
      uint64_t v7 = a1;
      uint64_t v10 = (uint64_t)a5;
      do
      {
        uint64_t v122 = *(void *)(v119 + 8 * v254);
        if (*(unsigned char *)(*(void *)v122 + 31)) {
          goto LABEL_378;
        }
        if (v255 > 1)
        {
          unsigned int v258 = v254 + 1;
          unsigned int v256 = v255 >> 1;
        }
        else
        {
          do
          {
            v251 += 32;
            if (v251 >= v249) {
              goto LABEL_377;
            }
            unsigned int v257 = v248[1];
            ++v248;
            unsigned int v256 = v257;
          }
          while (!v257);
          unsigned int v258 = v251;
        }
        uint64_t v122 = 0;
        unsigned int v259 = __clz(__rbit32(v256));
        unsigned int v254 = v259 + v258;
        unsigned int v255 = v256 >> v259;
        LOBYTE(v5) = a4;
        uint64_t v6 = a2;
        uint64_t v120 = v247;
      }
      while (v254 != v249);
LABEL_173:
      unsigned int v123 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v121, "", 0);
      uint64_t v275 = 16 * (v123 & 0x7FFFFFFF);
      *(void *)(*(void *)(v121 + 24) + v275) = v122 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v124 = *(void *)(v121 + 8);
      if (v124) {
        (*(void (**)(uint64_t, void))(*(void *)v124 + 24))(v124, v123);
      }
      uint64_t v125 = *(void *)(*(void *)(v7 + 16) + 8) + 864;
      v289 = sub_1CD5834C0(*(llvm::MachineFunction **)v7, (unsigned __int8 **)(v6 + 64), v125, v123);
      uint64_t v290 = v126;
      int v127 = *(unsigned __int16 *)(v6 + 56);
      if (!*(_WORD *)(v6 + 56)) {
        goto LABEL_209;
      }
      uint64_t v128 = (unsigned int *)(*(void *)(v6 + 32) + 40 * (v127 - 1));
      if (*(unsigned char *)(*(void *)(*(void *)v128 + 40) + 16 * v128[2]) == 1) {
        --v127;
      }
      if (v127 == 1)
      {
        uint64_t v129 = v126;
      }
      else
      {
LABEL_209:
        unsigned int v272 = v123;
        v278 = v120;
        uint64_t v145 = v7;
        uint64_t v146 = v6;
        char v147 = v5;
        int v148 = 0;
        uint64_t v149 = 0;
        int v150 = v127 - 1;
        do
        {
          uint64_t v151 = *(void *)(v146 + 32);
          uint64_t v152 = *(void *)(v151 + v149 + 40);
          uint64_t v153 = *(void *)(v151 + v149 + 48);
          if (((v148 + 1) & 1) == 0)
          {
            uint64_t v154 = *(void *)(v151 + v149);
            BOOL v155 = v154 && *(_WORD *)(v154 + 24) == 9;
            if (!v155 || (*(_DWORD *)(v154 + 76) - 1) >= 0x3FFFFFFF)
            {
              uint64_t v156 = *(void *)(v152 + 80);
              int v157 = (void *)(v156 + 24);
              if (*(_DWORD *)(v156 + 32) >= 0x41u) {
                int v157 = (void *)*v157;
              }
              unsigned int v281 = *(_DWORD *)v157;
              uint64_t v145 = a1;
              int v158 = sub_1CD78D15C(a1, v154, *(void *)(v151 + v149 + 8), (uint64_t)a5);
              uint64_t v159 = (*(uint64_t (**)(void, void *, unint64_t, void))(**(void **)(v145 + 24)
                                                                                           + 184))(*(void *)(v145 + 24), v278, *(void *)(*(void *)(*(void *)(v145 + 8) + 24) + 16 * (v158 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v281);
              if (v159) {
                BOOL v160 = v159 == (void)v278;
              }
              else {
                BOOL v160 = 1;
              }
              uint64_t v10 = (uint64_t)a5;
              if (!v160)
              {
                *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + v275) = v159 & 0xFFFFFFFFFFFFFFFBLL;
                v278 = (void *)v159;
              }
            }
          }
          sub_1CCF704B8(v145, (uint64_t)&v289, v152, v153, (v148 + 2), v125, v10, 0, a3, v147);
          v149 += 40;
          ++v148;
        }
        while (v150 != v148);
        uint64_t v129 = v290;
        uint64_t v6 = v146;
        uint64_t v7 = v145;
        unsigned int v123 = v272;
      }
      unsigned int v161 = *(uint64_t **)(v7 + 48);
      uint64_t v162 = *(void *)(*(void *)(v7 + 40) + 40);
      *(void *)(v129 + 24) = v162;
      uint64_t v163 = *(void *)(v162 + 32);
      uint64_t v164 = *(unsigned int *)(v129 + 40);
      if (v164)
      {
        uint64_t v205 = *(void *)(v129 + 32);
        uint64_t v206 = *(void *)(v163 + 40);
        uint64_t v207 = 32 * v164;
        do
        {
          if (!*(unsigned char *)v205)
          {
            uint64_t v208 = *(unsigned int *)(v205 + 4);
            if ((int)v208 >= 0) {
              int v209 = (uint64_t *)(*(void *)(v206 + 272) + 8 * v208);
            }
            else {
              int v209 = (uint64_t *)(*(void *)(v206 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
            }
            uint64_t v210 = *v209;
            if (*v209)
            {
              uint64_t v211 = *(void *)(v210 + 16);
              *(void *)(v210 + 16) = v205;
              *(void *)(v205 + 16) = v211;
              if (*(unsigned char *)(v205 + 3))
              {
                *(void *)(v205 + 24) = v210;
              }
              else
              {
                *(void *)(v205 + 24) = 0;
                int v209 = (uint64_t *)(v211 + 24);
              }
            }
            else
            {
              *(void *)(v205 + 16) = v205;
              *(void *)(v205 + 24) = 0;
            }
            *int v209 = v205;
          }
          v205 += 32;
          v207 -= 32;
        }
        while (v207);
      }
      uint64_t v165 = *(void *)(v163 + 728);
      if (v165) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v165 + 24))(v165, v129);
      }
      unint64_t v166 = *v161 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v129 = v166 | *(void *)v129 & 7;
      *(void *)(v129 + 8) = v161;
      *(void *)(v166 + 8) = v129;
      uint64_t *v161 = *v161 & 7 | v129;
      uint64_t v286 = (llvm::MachineFunction *)v6;
      LODWORD(v287) = 0;
      unsigned int v288 = v123;
      uint64_t v167 = v10;
LABEL_261:
      sub_1CD78E7F4((uint64_t)&v291, v167, (uint64_t)&v286, &v288);
      return;
    default:
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 8);
      uint64_t v12 = v11 + 48 * v9;
      uint64_t v13 = *(unsigned __int16 *)(a2 + 58);
      uint64_t v14 = 16 * v13 - 16;
      do
      {
        if (!v13)
        {
          unsigned int v276 = 0;
          goto LABEL_9;
        }
        --v13;
        uint64_t v15 = *(unsigned __int8 *)(*(void *)(a2 + 40) + v14);
        v14 -= 16;
      }
      while (v15 == 172);
      if (v15 != 1) {
        LODWORD(v13) = v13 + 1;
      }
      unsigned int v276 = v13;
LABEL_9:
      unsigned int v279 = *(unsigned __int8 *)(v11 + 48 * v9 + 4);
      int v267 = *(unsigned __int16 *)(a2 + 24);
      switch(v9)
      {
        case 0x19u:
          uint64_t v18 = 13;
LABEL_17:
          int v265 = (_WORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 1928))(*(void *)(a1 + 32), v18);
          goto LABEL_19;
        case 0x1Fu:
          int v265 = 0;
          unsigned int v279 = v276;
          goto LABEL_19;
        case 0x1Bu:
          uint64_t v16 = *(void *)(*(void *)(*(void *)(a2 + 32) + 160) + 80);
          uint64_t v17 = (unsigned int *)(v16 + 24);
          if (*(_DWORD *)(v16 + 32) >= 0x41u) {
            uint64_t v17 = *(unsigned int **)v17;
          }
          uint64_t v18 = *v17;
          unsigned int v279 = v276;
          goto LABEL_17;
      }
      int v265 = 0;
LABEL_19:
      uint64_t v19 = *(unsigned __int16 *)(v6 + 56);
      uint64_t v20 = 40 * v19;
      do
      {
        if (!v20)
        {
          int v22 = 0;
          goto LABEL_26;
        }
        LODWORD(v19) = v19 - 1;
        uint64_t v21 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v6 + 32) + v20 - 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v6 + 32) + v20 - 32));
        v20 -= 40;
      }
      while (v21 == 172);
      if (v21 == 1) {
        int v22 = v19;
      }
      else {
        int v22 = v19 + 1;
      }
LABEL_26:
      if (((*(uint64_t (**)(void))(**(void **)(*(void *)v7 + 8) + 184))(*(void *)(*(void *)v7 + 8)) & 1) == 0
        && (unint64_t v23 = *(void *)(v11 + 48 * v9 + 8), (v23 & 2) != 0))
      {
        uint64_t v24 = (v23 >> 39) & 1;
      }
      else
      {
        LOBYTE(v24) = 0;
      }
      uint64_t v269 = v11;
      if (v276 <= v279)
      {
        char v266 = 0;
      }
      else
      {
        char v25 = v24 ^ 1;
        if (!*(void *)(v11 + 48 * v9 + 32)) {
          char v25 = 0;
        }
        char v266 = v25;
      }
      unsigned int v270 = v9;
      uint64_t v273 = v6;
      long long v26 = *(llvm::MachineFunction **)v7;
      BOOL v27 = *(unsigned __int8 **)(v6 + 64);
      uint64_t v286 = (llvm::MachineFunction *)v27;
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v286, v27, 2);
      }
      uint64_t v28 = llvm::MachineFunction::CreateMachineInstr(v26, v11 + 48 * v9, (unsigned __int8 **)&v286, 0);
      if (!v286) {
        goto LABEL_38;
      }
      int v240 = *(unsigned __int8 *)v286;
      if ((v240 - 4) > 0x1E)
      {
        if ((v240 - 3) >= 0xFFFFFFFE) {
          BOOL v243 = v286;
        }
        else {
          BOOL v243 = 0;
        }
        if ((v240 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v242 = (unint64_t)v243 + 8;
LABEL_359:
          long long v291 = &v286;
          sub_1CC5FA668(v242 + 16, &v291);
          goto LABEL_38;
        }
        if (v240 == 3) {
          *((void *)v286 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v286 + 1) & 0x7F) == 2 || *((_DWORD *)v286 + 3))
      {
        uint64_t v241 = *((void *)v286 + 2);
        if ((v241 & 4) != 0)
        {
          unint64_t v242 = v241 & 0xFFFFFFFFFFFFFFF8;
          if (v242) {
            goto LABEL_359;
          }
        }
      }
LABEL_38:
      uint64_t v286 = v26;
      int v287 = v28;
      if (!v276) {
        goto LABEL_39;
      }
      sub_1CD78CD38((void *)a1, v6, &v286, v12, a3, v5, (uint64_t)a5);
      unsigned int v136 = v287;
      __int16 v137 = *(_WORD *)(v6 + 72);
      if ((v137 & 0x40) != 0)
      {
        *((_WORD *)v287 + 22) |= 0x40u;
        if ((v137 & 0x80) == 0)
        {
LABEL_186:
          if ((v137 & 0x10) == 0) {
            goto LABEL_187;
          }
          goto LABEL_241;
        }
      }
      else if ((v137 & 0x80) == 0)
      {
        goto LABEL_186;
      }
      *((_WORD *)v136 + 22) |= 0x80u;
      if ((v137 & 0x10) == 0)
      {
LABEL_187:
        if ((v137 & 0x20) == 0) {
          goto LABEL_188;
        }
        goto LABEL_242;
      }
LABEL_241:
      *((_WORD *)v136 + 22) |= 0x10u;
      if ((v137 & 0x20) == 0)
      {
LABEL_188:
        if ((v137 & 0x100) == 0) {
          goto LABEL_189;
        }
        goto LABEL_243;
      }
LABEL_242:
      *((_WORD *)v136 + 22) |= 0x20u;
      if ((v137 & 0x100) == 0)
      {
LABEL_189:
        if ((v137 & 0x200) == 0) {
          goto LABEL_190;
        }
        goto LABEL_244;
      }
LABEL_243:
      *((_WORD *)v136 + 22) |= 0x100u;
      if ((v137 & 0x200) == 0)
      {
LABEL_190:
        if ((v137 & 0x400) == 0) {
          goto LABEL_191;
        }
        goto LABEL_245;
      }
LABEL_244:
      *((_WORD *)v136 + 22) |= 0x200u;
      if ((v137 & 0x400) == 0)
      {
LABEL_191:
        if ((v137 & 2) == 0) {
          goto LABEL_192;
        }
        goto LABEL_246;
      }
LABEL_245:
      *((_WORD *)v136 + 22) |= 0x400u;
      if ((v137 & 2) == 0)
      {
LABEL_192:
        if ((v137 & 4) == 0) {
          goto LABEL_193;
        }
        goto LABEL_247;
      }
LABEL_246:
      *((_WORD *)v136 + 22) |= 0x800u;
      if ((v137 & 4) == 0)
      {
LABEL_193:
        if ((v137 & 8) == 0) {
          goto LABEL_194;
        }
        goto LABEL_248;
      }
LABEL_247:
      *((_WORD *)v136 + 22) |= 0x1000u;
      if ((v137 & 8) == 0)
      {
LABEL_194:
        if ((v137 & 0x800) == 0) {
          goto LABEL_39;
        }
        goto LABEL_249;
      }
LABEL_248:
      *((_WORD *)v136 + 22) |= 0x2000u;
      if ((v137 & 0x800) == 0) {
        goto LABEL_39;
      }
LABEL_249:
      *((_WORD *)v136 + 22) |= 0x4000u;
LABEL_39:
      unsigned int v29 = v279 - v276;
      if (v279 < v276) {
        unsigned int v29 = 0;
      }
      char v30 = v5;
      if (v29 != v22)
      {
        uint64_t v31 = v279;
        unsigned int v32 = v276;
        if (v279 < v276) {
          unsigned int v32 = v279;
        }
        int v33 = v22 + v32;
        int v34 = -v32;
        do
        {
          uint64_t v35 = (uint64_t *)(*(void *)(v273 + 32) + 40 * (v34 + v31));
          sub_1CCF704B8(a1, (uint64_t)&v286, *v35, v35[1], v31, v12, (uint64_t)a5, 0, a3, v30);
          uint64_t v31 = (v31 + 1);
        }
        while (v33 != v31);
      }
      if (v265)
      {
        int v36 = (unsigned __int16)*v265;
        if (*v265)
        {
          unsigned int v37 = 1;
          do
          {
            uint64_t v292 = 0;
            uint64_t v293 = 0;
            uint64_t v294 = 0;
            LODWORD(v291) = 1124073472;
            HIDWORD(v291) = v36;
            llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v291);
            int v36 = (unsigned __int16)v265[v37++];
          }
          while (v36);
        }
      }
      unint64_t v38 = *(unsigned int *)(v273 + 88);
      if (v38)
      {
        int v39 = a3;
        if (v38 == 1)
        {
          unint64_t v38 = v273 + 80;
          uint64_t v40 = 1;
        }
        else
        {
          uint64_t v40 = (int)v38;
          unint64_t v38 = *(void *)(v273 + 80) & 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        uint64_t v40 = *(unsigned int *)(v273 + 88);
        int v39 = a3;
      }
      llvm::MachineInstr::setMemRefs((uint64_t)v287, (uint64_t *)v286, (void *)v38, v40);
      uint64_t v41 = *(unint64_t **)(a1 + 48);
      unint64_t v42 = (unint64_t)v287;
      uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 40);
      *((void *)v287 + 3) = v43;
      uint64_t v44 = *(void *)(v43 + 32);
      uint64_t v45 = *(unsigned int *)(v42 + 40);
      if (v45)
      {
        uint64_t v138 = *(void *)(v42 + 32);
        uint64_t v139 = *(void *)(v44 + 40);
        uint64_t v140 = 32 * v45;
        do
        {
          if (!*(unsigned char *)v138)
          {
            uint64_t v141 = *(unsigned int *)(v138 + 4);
            if ((int)v141 >= 0) {
              unsigned int v142 = (uint64_t *)(*(void *)(v139 + 272) + 8 * v141);
            }
            else {
              unsigned int v142 = (uint64_t *)(*(void *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
            }
            uint64_t v143 = *v142;
            if (*v142)
            {
              uint64_t v144 = *(void *)(v143 + 16);
              *(void *)(v143 + 16) = v138;
              *(void *)(v138 + 16) = v144;
              if (*(unsigned char *)(v138 + 3))
              {
                *(void *)(v138 + 24) = v143;
              }
              else
              {
                *(void *)(v138 + 24) = 0;
                unsigned int v142 = (uint64_t *)(v144 + 24);
              }
            }
            else
            {
              *(void *)(v138 + 16) = v138;
              *(void *)(v138 + 24) = 0;
            }
            *unsigned int v142 = v138;
          }
          v138 += 32;
          v140 -= 32;
        }
        while (v140);
      }
      uint64_t v46 = *(void *)(v44 + 728);
      if (v46) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v46 + 24))(v46, v42);
      }
      unint64_t v47 = *v41 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v42 = v47 | *(void *)v42 & 7;
      *(void *)(v42 + 8) = v41;
      *(void *)(v47 + 8) = v42;
      *uint64_t v41 = *v41 & 7 | v42;
      long long v291 = &v293;
      uint64_t v292 = 0x800000000;
      char v48 = v266 ^ 1;
      if (v276 <= v279) {
        char v48 = 1;
      }
      if ((v48 & 1) == 0)
      {
        uint64_t v49 = v279;
        do
        {
          uint64_t v50 = *(void *)(v273 + 48);
          if (v50)
          {
            unsigned int v51 = *(unsigned __int16 *)(*(void *)(v269 + 48 * v270 + 32) + 2 * (v49 - v279));
            while (*(_DWORD *)(v50 + 8) != v49)
            {
              uint64_t v50 = *(void *)(v50 + 32);
              if (!v50) {
                goto LABEL_69;
              }
            }
            if (v292 >= (unint64_t)HIDWORD(v292)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v291 + v292) = v51;
            LODWORD(v292) = v292 + 1;
            sub_1CCF6FC74((void *)a1, v273, v49, v39, v30, v51, a5);
          }
LABEL_69:
          ++v49;
        }
        while (v276 != v49);
      }
      uint64_t v52 = v269;
      if (*(unsigned __int8 *)(*(void *)(v273 + 40) + 16 * (*(unsigned __int16 *)(v273 + 58) - 1)) == 172)
      {
        uint64_t v53 = *(void *)(v273 + 48);
        if (v53)
        {
          while (*(unsigned __int8 *)(*(void *)(*(void *)v53 + 40) + 16 * *(unsigned int *)(v53 + 8)) != 172)
          {
            uint64_t v53 = *(void *)(v53 + 32);
            if (!v53) {
              goto LABEL_150;
            }
          }
          for (uint64_t i = *(void *)(v53 + 16); i; uint64_t i = *(void *)(v90 + 16))
          {
            int v89 = *(unsigned __int16 *)(i + 24);
            if (v89 != 49)
            {
              if (v89 == 50)
              {
                if (v292 >= (unint64_t)HIDWORD(v292)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v291 + v292) = *(_DWORD *)(*(void *)(*(void *)(i + 32) + 40) + 76);
                LODWORD(v292) = v292 + 1;
              }
              else
              {
                unsigned int v91 = *(unsigned __int16 **)(*(void *)(*(void *)(a1 + 16) + 8)
                                           + 48 * (__int16)~(_WORD)v89
                                           + 24);
                if (v91)
                {
                  unsigned int v92 = -1;
                  do
                    ++v92;
                  while (v91[v92]);
                }
                else
                {
                  unsigned int v92 = 0;
                }
                sub_1CD78DEF0((uint64_t)&v291, v91, &v91[v92]);
                if (*(_WORD *)(i + 56))
                {
                  uint64_t v93 = 0;
                  uint64_t v94 = 40 * *(unsigned __int16 *)(i + 56);
                  do
                  {
                    uint64_t v95 = v52;
                    uint64_t v96 = *(void *)(*(void *)(i + 32) + v93);
                    if (v96) {
                      BOOL v97 = *(unsigned __int16 *)(v96 + 24) == 9;
                    }
                    else {
                      BOOL v97 = 0;
                    }
                    if (v97)
                    {
                      int v98 = *(_DWORD *)(v96 + 76);
                      if ((v98 - 1) <= 0x3FFFFFFE)
                      {
                        if (v292 >= (unint64_t)HIDWORD(v292)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v291 + v292) = v98;
                        LODWORD(v292) = v292 + 1;
                      }
                    }
                    v93 += 40;
                    uint64_t v52 = v95;
                  }
                  while (v94 != v93);
                }
              }
            }
            uint64_t v90 = *(void *)(i + 48);
            if (!v90) {
              break;
            }
            while (*(unsigned __int8 *)(*(void *)(*(void *)v90 + 40) + 16 * *(unsigned int *)(v90 + 8)) != 172)
            {
              uint64_t v90 = *(void *)(v90 + 32);
              if (!v90) {
                goto LABEL_150;
              }
            }
          }
        }
      }
LABEL_150:
      if (v292 || *(void *)(v52 + 48 * v270 + 32) || (*(unsigned char *)(v52 + 48 * v270 + 8) & 4) != 0) {
        llvm::MachineInstr::setPhysRegsDeadExcept((uint64_t)v287, (unsigned int *)v291, v292, *(void *)(a1 + 24));
      }
      if (v267 == 65504 && v279)
      {
        uint64_t v130 = v287;
        v289 = v287;
        uint64_t v131 = *((void *)v287 + 2);
        unsigned int v132 = *(unsigned __int8 *)(v131 + 4);
        if ((*(unsigned char *)(v131 + 8) & 2) == 0 || (int v187 = *((_DWORD *)v287 + 10), v187 == v132))
        {
          int v133 = *(unsigned __int8 *)(v131 + 4);
        }
        else
        {
          int v188 = v187 - 1;
          int v133 = *(unsigned __int8 *)(v131 + 4);
          do
          {
            int v189 = *(_DWORD *)(*((void *)v287 + 4) + 32 * v132);
            if ((v189 & 0x10000FF) != 0x1000000) {
              break;
            }
            v133 += (v189 & 0x2000000) == 0;
            if (v188 == v132) {
              break;
            }
            ++v132;
          }
          while ((v189 & 0x2000000) == 0);
        }
        uint64_t v134 = *(void *)(v131 + 32);
        if (v134)
        {
          unsigned int v135 = -1;
          do
            ++v135;
          while (*(_WORD *)(v134 + 2 * v135));
        }
        else
        {
          unsigned int v135 = 0;
        }
        LODWORD(v290) = v135 + v133;
        unsigned int NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v289);
        unsigned int v169 = 0;
        if (*(_DWORD *)(*((void *)v130 + 4) + 32 * NumGCPtrIdx + 16)) {
          uint64_t NextMetaArgIdx = NumGCPtrIdx + 1;
        }
        else {
          uint64_t NextMetaArgIdx = 0xFFFFFFFFLL;
        }
        do
        {
          if (!*(unsigned char *)(*((void *)v130 + 4) + 32 * NextMetaArgIdx)) {
            llvm::MachineInstr::tieOperands((uint64_t)v130, v169++, NextMetaArgIdx);
          }
          uint64_t NextMetaArgIdx = llvm::StackMaps::getNextMetaArgIdx(v130, (const llvm::MachineInstr *)NextMetaArgIdx);
        }
        while (v169 < v279);
      }
      if ((*(unsigned char *)(v52 + 48 * v270 + 11) & 0x10) != 0) {
        (*(void (**)(void, llvm::MachineInstr *, uint64_t))(**(void **)(a1 + 32) + 2152))(*(void *)(a1 + 32), v287, v273);
      }
      if (v291 != &v293) {
        free(v291);
      }
      return;
  }
}

void *sub_1CCF72E88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(void *)(v9 + 40);
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (*(uint64_t (**)(void))(**(void **)(v9 + 16) + 104))(*(void *)(v9 + 16));
  a1[3] = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  a1[4] = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 120))(*(void *)(*a1 + 16));
  a1[5] = a3;
  a1[6] = a4;
  *((unsigned char *)a1 + 56) = a5;
  return a1;
}

uint64_t sub_1CCF72F60(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *uint64_t v7 = xmmword_1CD923640;
      uint64_t v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = *(_DWORD *)(a2 + 8) > 0xFFFFFFFD;
    }
    if (!v9)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CD78E72C((uint64_t *)v5, a2, &v12);
      uint64_t v10 = v12;
      uint64_t v11 = *(void *)a2;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)uint64_t v10 = v11;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

void sub_1CCF7302C(uint64_t *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  sub_1CD802634((uint64_t)a1);
  uint64_t v24 = v28;
  char v25 = v28;
  uint64_t v26 = 16;
  int v27 = 0;
  v29[0] = &unk_1F2641A00;
  v29[1] = &v24;
  char v30 = v29;
  sub_1CCF762E8(v31, (uint64_t)a1, (uint64_t)v29);
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void *))(*v30 + 40))(v30);
  }
  uint64_t v4 = a1[3];
  v23[0] = *a1;
  v23[1] = v4;
  v23[2] = (uint64_t)a1;
  v23[3] = (uint64_t)&v24;
  v23[4] = 0;
  uint64_t v5 = (uint64_t *)a1[27];
  do
  {
    if (a1 + 26 == v5) {
      break;
    }
    char v6 = 0;
    uint64_t v5 = a1 + 26;
    do
    {
      uint64_t v5 = (uint64_t *)*v5;
      if (v5) {
        uint64_t v7 = (uint64_t)(v5 - 1);
      }
      else {
        uint64_t v7 = 0;
      }
      if (!*(void *)(v7 + 48) && v7 != a1[24])
      {
LABEL_50:
        uint64_t v5 = (uint64_t *)v5[1];
        sub_1CCFCBF2C((uint64_t)a1, v7);
        sub_1CD7EA4EC((uint64_t)a1, v7);
        continue;
      }
      uint64_t v8 = v25;
      uint64_t v9 = HIDWORD(v26);
      if (v25 == v24)
      {
        if (HIDWORD(v26))
        {
          uint64_t v10 = 0;
          uint64_t v11 = 8 * HIDWORD(v26);
          uint64_t v12 = (uint64_t *)v25;
          while (*v12 != v7)
          {
            if (*v12 == -2) {
              uint64_t v10 = v12;
            }
            ++v12;
            v11 -= 8;
            if (!v11)
            {
              if (!v10) {
                goto LABEL_21;
              }
              uint64_t *v10 = v7;
              --v27;
              goto LABEL_45;
            }
          }
          continue;
        }
LABEL_21:
        unsigned int v13 = v26;
        if (HIDWORD(v26) < v26)
        {
          ++HIDWORD(v26);
          *(void *)&v25[8 * v9] = v7;
          goto LABEL_45;
        }
      }
      else
      {
        unsigned int v13 = v26;
      }
      if (3 * v13 <= 4 * (HIDWORD(v26) - v27))
      {
        if (v13 >= 0x40) {
          v13 *= 2;
        }
        else {
          unsigned int v13 = 128;
        }
      }
      else if (v13 - HIDWORD(v26) >= v13 >> 3)
      {
        goto LABEL_26;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v24, v13);
      unsigned int v13 = v26;
      uint64_t v8 = v25;
LABEL_26:
      unsigned int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v16 = &v8[8 * v15];
      uint64_t v17 = *(void *)v16;
      if (*(void *)v16 != -1)
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v7)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            uint64_t v18 = (uint64_t *)v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          uint64_t v16 = &v8[8 * (v21 & v14)];
          uint64_t v17 = *(void *)v16;
          if (*(void *)v16 == -1) {
            goto LABEL_38;
          }
        }
        continue;
      }
      uint64_t v18 = 0;
LABEL_38:
      if (v18) {
        int v22 = v18;
      }
      else {
        int v22 = (uint64_t *)v16;
      }
      if (*v22 != v7)
      {
        if (*v22 == -2) {
          --v27;
        }
        else {
          ++HIDWORD(v26);
        }
        *int v22 = v7;
LABEL_45:
        sub_1CCF73400(v23, v7, v2, v3);
        if (*(void *)(v7 + 48))
        {
          char v6 = 1;
          continue;
        }
        char v6 = 1;
        if (v7 != a1[24]) {
          goto LABEL_50;
        }
      }
    }
    while (v5 != (uint64_t *)a1[27]);
  }
  while ((v6 & 1) != 0);
  sub_1CD7EA154(a1);
  v31[0] = &unk_1F26420F0;
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  *(void *)(v31[2] + 656) = v31[1];
  if (v25 != v24) {
    free(v25);
  }
}

void sub_1CCF73400(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = a2;
  uint64_t v573 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned __int16 *)(a2 + 24);
  if (v5 == 9 || v5 == 35) {
    return;
  }
  if ((int)v5 > 252)
  {
    switch((int)v5)
    {
      case 280:
        uint64_t v14 = a1[1];
        uint64_t v15 = 6482;
        goto LABEL_91;
      case 281:
      case 284:
      case 287:
      case 288:
      case 289:
      case 290:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 310:
      case 312:
      case 313:
      case 314:
      case 315:
      case 317:
      case 318:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 369:
      case 370:
      case 371:
        goto LABEL_55;
      case 282:
      case 283:
LABEL_25:
        if (!**(unsigned char **)(v4 + 40)) {
          goto LABEL_89;
        }
        if (*(unsigned char *)(a1[1] + 390 * **(unsigned __int8 **)(v4 + 40) + v5 + 3862)) {
          LOBYTE(v7) = *(unsigned char *)(a1[1] + 390 * **(unsigned __int8 **)(v4 + 40) + v5 + 3862);
        }
        else {
          LOBYTE(v7) = 4;
        }
        goto LABEL_92;
      case 285:
        a4 = *(unsigned char **)(v4 + 40);
        if (!*a4) {
          goto LABEL_74;
        }
        uint64_t v25 = a1[1] + 390 * *a4;
        uint64_t v26 = 4147;
        goto LABEL_73;
      case 286:
        a4 = *(unsigned char **)(v4 + 40);
        if (!*a4) {
          goto LABEL_74;
        }
        uint64_t v25 = a1[1] + 390 * *a4;
        uint64_t v26 = 4148;
LABEL_73:
        int v7 = *(unsigned __int8 *)(v25 + v26);
        if (v7 != 2) {
          goto LABEL_92;
        }
LABEL_74:
        int v27 = (void *)a1[2];
        uint64_t v28 = *(unsigned __int8 **)(v4 + 64);
        *(void *)&long long v569 = v28;
        if (v28)
        {
          llvm::MetadataTracking::track((uint64_t)&v569, v28, 2);
          a4 = *(unsigned char **)(v4 + 40);
        }
        DWORD2(v569) = *(_DWORD *)(v4 + 60);
        unsigned int v29 = sub_1CD7FFAA8(v27, (const char *)0x11C, (const llvm::APInt *)&v569, (uint64_t)a4, *(unsigned __int16 *)(v4 + 58), **(void **)(v4 + 32), *(void *)(*(void *)(v4 + 32) + 8));
        if (!(void)v569) {
          goto LABEL_80;
        }
        int v30 = *(unsigned __int8 *)v569;
        if ((v30 - 4) > 0x1E)
        {
          if ((v30 - 3) >= 0xFFFFFFFE) {
            uint64_t v255 = v569;
          }
          else {
            uint64_t v255 = 0;
          }
          if ((v30 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v256 = v255 + 8;
LABEL_313:
            *(void *)&long long v549 = &v569;
            sub_1CC5FA668(v256 + 16, &v549);
            goto LABEL_80;
          }
          if (v30 == 3) {
            *(void *)(v569 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v569 + 1) & 0x7F) == 2 || *(_DWORD *)(v569 + 12))
        {
          uint64_t v492 = *(void *)(v569 + 16);
          if ((v492 & 4) != 0)
          {
            unint64_t v256 = v492 & 0xFFFFFFFFFFFFFFF8;
            if (v256) {
              goto LABEL_313;
            }
          }
        }
LABEL_80:
        sub_1CCF76388((uint64_t)a1, v4, (uint64_t)v29);
        sub_1CCF73400(a1, v29);
        return;
      case 291:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 80) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 88)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 80) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 88));
        uint64_t v15 = 4153;
        goto LABEL_91;
      case 309:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48));
        uint64_t v15 = 4171;
        goto LABEL_91;
      case 311:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48));
        uint64_t v15 = 4173;
        goto LABEL_91;
      case 316:
        if (!**(unsigned char **)(v4 + 40)) {
          goto LABEL_89;
        }
        uint64_t v14 = a1[1] + 390 * **(unsigned __int8 **)(v4 + 40);
        uint64_t v15 = 4178;
        goto LABEL_91;
      case 319:
      case 320:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
        goto LABEL_11;
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
        goto LABEL_32;
      case 365:
        goto LABEL_14;
      case 366:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48));
        uint64_t v15 = 4228;
        goto LABEL_91;
      case 367:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48));
        uint64_t v15 = 4229;
        goto LABEL_91;
      case 368:
        if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                       + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48)))
          goto LABEL_89;
        uint64_t v14 = a1[1]
            + 390
            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48));
        uint64_t v15 = 4230;
LABEL_91:
        LOBYTE(v7) = *(unsigned char *)(v14 + v15);
        goto LABEL_92;
      default:
        switch((int)v5)
        {
          case 260:
            goto LABEL_14;
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 268:
            goto LABEL_55;
          case 267:
LABEL_19:
            uint64_t v14 = a1[1] + v5;
            uint64_t v15 = 4252;
            goto LABEL_91;
          case 269:
          case 270:
            goto LABEL_122;
          case 271:
            uint64_t v14 = a1[1];
            if (**(unsigned char **)(v4 + 40) && *(unsigned char *)(v14 + 390 * **(unsigned __int8 **)(v4 + 40) + 4133) == 1)
            {
              LOBYTE(v7) = 1;
              goto LABEL_92;
            }
            uint64_t v15 = 4523;
            goto LABEL_91;
          default:
            if ((v5 - 253) >= 2) {
              goto LABEL_55;
            }
LABEL_122:
            if ((v5 - 269) < 2) {
              return;
            }
            if (v5 == 253)
            {
              uint64_t v56 = *(uint64_t **)(v4 + 32);
              uint64_t v58 = *v56;
              uint64_t v57 = v56[1];
              uint64_t v60 = v56[5];
              uint64_t v59 = v56[6];
              uint64_t v61 = *(unsigned __int8 **)(v4 + 64);
              *(void *)&long long v556 = v61;
              if (v61) {
                llvm::MetadataTracking::track((uint64_t)&v556, v61, 2);
              }
              DWORD2(v556) = *(_DWORD *)(v4 + 60);
              int v62 = (*(unsigned __int16 *)(v4 + 26) >> 10) & 3;
              if (!v62)
              {
                uint64_t v105 = a1[1];
                unint64_t v106 = *(unsigned __int16 *)(v4 + 24);
                if (v106 > 0x185
                  || (uint64_t v107 = (llvm *)**(unsigned __int8 **)(v4 + 40),
                      *(unsigned char *)(v105 + 390 * (void)v107 + v106 + 3862) == 4))
                {
                  uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v105 + 1968))(v105, v4, 0, a1[2]);
                  if (!v108) {
                    goto LABEL_441;
                  }
                  uint64_t v110 = (uint64_t *)v108;
                  int v111 = v109;
                  int v112 = 1;
                  uint64_t v113 = (uint64_t *)v108;
                }
                else if (*(unsigned char *)(v105 + 390 * **(unsigned __int8 **)(v4 + 40) + v106 + 3862))
                {
                  unsigned __int8 v242 = sub_1CD3E5538(v105, v106, **(unsigned char **)(v4 + 40));
                  uint64_t v110 = sub_1CD7FAE3C(a1[2], v242, 0, (uint64_t)&v556, v58, v57, v60, v59, *(void *)(v4 + 96));
                  int v244 = (llvm::APFloatBase *)a1[2];
                  uint64_t v245 = *((void *)v244 + 104);
                  if (v245) {
                    __int16 v246 = *(_WORD *)(v245 + 8);
                  }
                  else {
                    __int16 v246 = 0;
                  }
                  uint64_t v113 = sub_1CD7F3564(v244, (const char *)0xD8, (uint64_t)&v556, v107, 0, (uint64_t)v110, v243, v246);
                  int v111 = v259;
                  int v112 = 1;
                }
                else
                {
                  if (llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(v105, *(llvm::LLVMContext **)(a1[2] + 56), (llvm::DataLayout *)(*(void *)(**(void **)(a1[2] + 40) + 40) + 272), *(void *)(v4 + 80), *(void *)(v4 + 88), *(void *)(v4 + 96), 0))goto LABEL_441; {
                  sub_1CD01A7F4(a1[1], v4, a1[2], (uint64_t **)&v569);
                  }
                  uint64_t v113 = (uint64_t *)v569;
                  int v111 = DWORD2(v569);
                  uint64_t v110 = (uint64_t *)v570;
                  int v112 = DWORD2(v570);
                }
                if (v110 != (uint64_t *)v4)
                {
                  sub_1CD800DA0(a1[2], v4, 0, (uint64_t)v113, v111);
                  sub_1CD800DA0(a1[2], v4, 1, (uint64_t)v110, v112);
                  uint64_t v114 = a1[4];
                  if (!v114)
                  {
LABEL_440:
                    sub_1CCF8567C((uint64_t)a1, v4);
                    goto LABEL_441;
                  }
                  *(void *)&long long v569 = v113;
                  sub_1CD6A0E6C(v114, (uint64_t *)&v569);
                  uint64_t v115 = a1[4];
                  *(void *)&long long v569 = v110;
                  uint64_t v116 = (uint64_t *)&v569;
LABEL_455:
                  sub_1CD6A0E6C(v115, v116);
                  goto LABEL_440;
                }
LABEL_441:
                v383 = (unsigned __int8 *)v556;
                if (!(void)v556) {
                  return;
                }
                int v384 = *(unsigned __int8 *)v556;
                if ((v384 - 4) <= 0x1E)
                {
                  if ((*(unsigned char *)(v556 + 1) & 0x7F) != 2 && !*(_DWORD *)(v556 + 12)) {
                    return;
                  }
                  uint64_t v385 = *(void *)(v556 + 16);
                  if ((v385 & 4) == 0) {
                    return;
                  }
                  unint64_t v386 = v385 & 0xFFFFFFFFFFFFFFF8;
                  if (!v386) {
                    return;
                  }
                  goto LABEL_453;
                }
                if ((v384 - 3) >= 0xFFFFFFFE) {
                  uint64_t v387 = v556;
                }
                else {
                  uint64_t v387 = 0;
                }
                if ((v384 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v386 = v387 + 8;
LABEL_453:
                  *(void *)&long long v569 = &v556;
                  uint64_t v388 = v386 + 16;
                  v389 = &v569;
LABEL_508:
                  sub_1CC5FA668(v388, v389);
                  return;
                }
LABEL_509:
                if (v384 == 3) {
                  *((void *)v383 + 1) = 0;
                }
                return;
              }
              long long v554 = *(_OWORD *)(v4 + 80);
              if ((_BYTE)v554) {
                uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v554);
              }
              else {
                uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v554);
              }
              int8x8_t v118 = (int8x8_t)ExtendedSizeInBits;
              int v119 = v64;
              uint64_t v120 = *(void *)(v4 + 96);
              __int16 v121 = *(_WORD *)(v120 + 32);
              long long v122 = *(_OWORD *)(v120 + 56);
              long long v569 = *(_OWORD *)(v120 + 40);
              long long v570 = v122;
              unint64_t v123 = sub_1CB896FB8((unsigned __int8 *)&v554);
              char v127 = 4 * v62;
              if (*(void *)&v118 == 8 * v123 && v119 == v124
                || v554 == 2
                && (!**(unsigned char **)(v4 + 40)
                 || ((*(unsigned __int16 *)(a1[1] + 358 * **(unsigned __int8 **)(v4 + 40) + 73676) >> v127) & 0xF) != 1))
              {
                uint8x8_t v128 = (uint8x8_t)vcnt_s8(v118);
                v128.i16[0] = vaddlv_u8(v128);
                if (v128.u32[0] == 1)
                {
                  uint64_t v129 = *(uint64_t **)(v4 + 40);
                  uint64_t v130 = *v129;
                  uint64_t v131 = a1[1];
                  uint64_t v132 = *v129;
                  if (*v129 && (_BYTE)v554)
                  {
                    int v133 = (*(unsigned __int16 *)(v131
                                                + 358 * *v129
                                                + 2 * v554
                                                + 73672) >> v127) & 0xF;
                    if (v133 == 4)
                    {
                      uint64_t v134 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v131 + 1968))(v131, v4, 0, a1[2]);
                      if (!v134) {
                        goto LABEL_441;
                      }
                      uint64_t v136 = v134;
                      int v137 = 1;
                      int v138 = v135;
                      uint64_t v139 = (uint64_t *)v134;
                      goto LABEL_438;
                    }
                    if (!v133)
                    {
                      if (llvm::TargetLoweringBase::allowsMemoryAccess(v131, *(void *)(a1[2] + 56), *(void *)(**(void **)(a1[2] + 40) + 40) + 272, *(void *)(v4 + 80), *(void *)(v4 + 88), *(void *)(v4 + 96), 0))goto LABEL_441; {
                      sub_1CD01A7F4(a1[1], v4, a1[2], (uint64_t **)&v549);
                      }
                      uint64_t v136 = v549;
                      int v138 = DWORD2(v549);
                      uint64_t v139 = (uint64_t *)v550;
                      int v137 = DWORD2(v550);
                      goto LABEL_438;
                    }
                  }
                  uint64_t v150 = v129[1];
                  *(void *)&long long v549 = *v129;
                  *((void *)&v549 + 1) = v150;
                  uint64_t v151 = v554;
                  if (v132 && (_BYTE)v554)
                  {
                    if ((*(_WORD *)(v131 + 358 * v132 + 2 * v554 + 73672) & 0xF0) == 0)
                    {
LABEL_292:
                      int v229 = sub_1CD7FAFD4(a1[2], 1, (uint64_t)&v556, v130, v150, v58, v57, v126, v60, v59, v151, *((uint64_t *)&v554 + 1), *(void *)(v4 + 96));
                      uint64_t v139 = v229;
                      uint64_t v231 = v230;
                      if (v62 == 2)
                      {
                        uint64_t v232 = a1[2];
                        uint64_t v233 = v229[5] + 16 * v230;
                        uint64_t v234 = *(llvm **)v233;
                        uint64_t v235 = *(void *)(v233 + 8);
                        uint64_t v236 = sub_1CD7EDE1C(v232, v554, *((uint64_t *)&v554 + 1));
                        uint64_t v239 = *(void *)(v232 + 832);
                        if (v239) {
                          LOWORD(v239) = *(_WORD *)(v239 + 8);
                        }
                        int v240 = sub_1CCFDED5C(v232, 204, (const llvm::APInt *)&v556, v234, v235, (uint64_t)v139, v231, v238, v236, v237, v239);
                      }
                      else
                      {
                        int v240 = sub_1CD7EB9C8(a1[2], (uint64_t)v229, v230, (const llvm::APInt *)&v556, v554, *((uint64_t *)&v554 + 1));
                      }
                      goto LABEL_352;
                    }
                  }
                  else if (!(_BYTE)v554)
                  {
                    goto LABEL_271;
                  }
                  uint64_t v177 = *(unsigned __int8 *)(v131 + v554 + 1886);
                  if (*(void *)(v131 + 8 * v554 + 96)
                    || *(unsigned char *)(v131 + v554 + 1886)
                    && ((*(unsigned __int16 *)(v131
                                             + 358 * *(unsigned __int8 *)(v131 + v554 + 1886)
                                             + 2 * v554
                                             + 73672) >> v127) & 0xF) == 0)
                  {
                    if (*((void *)&v554 + 1)) {
                      BOOL v178 = v554 == 0;
                    }
                    else {
                      BOOL v178 = 0;
                    }
                    if (!v178 && v177 == v554) {
                      int v180 = 0;
                    }
                    else {
                      int v180 = v62;
                    }
                    uint64_t v139 = sub_1CD7FAFD4(a1[2], v180, (uint64_t)&v556, v177, 0, v58, v57, v126, v60, v59, v554, *((uint64_t *)&v554 + 1), *(void *)(v4 + 96));
                    uint64_t v182 = v181;
                    if ((_BYTE)v554)
                    {
                      int v183 = 1;
                      if (v554 - 8 < 7 || (v554 - 75) < 0x2Du)
                      {
LABEL_341:
                        if (v62 == 3)
                        {
                          uint64_t v258 = 199;
                        }
                        else if (v62 == 2)
                        {
                          uint64_t v258 = 198;
                        }
                        else if (v183)
                        {
                          uint64_t v258 = 215;
                        }
                        else
                        {
                          uint64_t v258 = 200;
                        }
                        uint64_t v207 = (llvm::APFloatBase *)a1[2];
                        uint64_t v260 = *(void *)(v4 + 40);
                        uint64_t v208 = *(llvm **)v260;
                        uint64_t v209 = *(void *)(v260 + 8);
                        uint64_t v261 = *((void *)v207 + 104);
                        if (v261) {
                          __int16 v211 = *(_WORD *)(v261 + 8);
                        }
                        else {
                          __int16 v211 = 0;
                        }
                        goto LABEL_351;
                      }
                      BOOL v184 = (v554 + 104) >= 0x13u;
                    }
                    else
                    {
                      if ((*(_DWORD *)(*((void *)&v554 + 1) + 8) & 0xFE) == 0x12) {
                        unsigned int v257 = *(unsigned __int8 *)(**(void **)(*((void *)&v554 + 1) + 16) + 8);
                      }
                      else {
                        unsigned int v257 = *(_DWORD *)(*((void *)&v554 + 1) + 8);
                      }
                      BOOL v184 = v257 >= 7;
                    }
                    int v183 = !v184;
                    goto LABEL_341;
                  }
LABEL_271:
                  if (sub_1CD3DD468((unsigned __int8 *)&v554, v124, v125) != 9)
                  {
                    uint64_t v228 = *(uint64_t **)(v4 + 40);
                    uint64_t v130 = *v228;
                    uint64_t v150 = v228[1];
                    uint64_t v151 = v554;
                    goto LABEL_292;
                  }
                  unint64_t v200 = sub_1CD3D796C((llvm::EVT *)&v554, v198, v199);
                  uint64_t v202 = v201;
                  unsigned __int8 v204 = sub_1CD3D796C((llvm::EVT *)&v549, v201, v203);
                  uint64_t v139 = sub_1CD7FAFD4(a1[2], 3, (uint64_t)&v556, *(unsigned __int8 *)(a1[1] + v204 + 1886), 0, v58, v57, v205, v60, v59, v200, v202, *(void *)(v4 + 96));
                  uint64_t v182 = v206;
                  uint64_t v207 = (llvm::APFloatBase *)a1[2];
                  uint64_t v209 = *((void *)&v549 + 1);
                  uint64_t v208 = (llvm *)v549;
                  uint64_t v210 = *((void *)v207 + 104);
                  if (v210) {
                    __int16 v211 = *(_WORD *)(v210 + 8);
                  }
                  else {
                    __int16 v211 = 0;
                  }
                  uint64_t v258 = 218;
LABEL_351:
                  int v240 = sub_1CD7F3564(v207, (const char *)v258, (uint64_t)&v556, v208, v209, (uint64_t)v139, v182, v211);
LABEL_352:
                  uint64_t v136 = (uint64_t)v240;
                  int v138 = v241;
LABEL_437:
                  int v137 = 1;
                  goto LABEL_438;
                }
                char v172 = __clz(v118.u32[0]);
                uint64_t v173 = 0x80000000 >> v172;
                uint64_t v174 = (v118.i32[0] - v173);
                if ((int)v173 <= 31)
                {
                  if (v173 == 1)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 2;
                    goto LABEL_393;
                  }
                  if (v173 == 16)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 4;
                    goto LABEL_393;
                  }
                  v523 = (llvm::LLVMContext *)(v118.i32[0] - v173);
                  uint64_t v283 = (llvm::LLVMContext *)(0x80000000 >> v172);
                  if (v173 == 8)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 3;
LABEL_391:
                    uint64_t v173 = (uint64_t)v283;
LABEL_392:
                    uint64_t v174 = (uint64_t)v523;
LABEL_393:
                    if ((int)v174 <= 31)
                    {
                      if (v174 == 1)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 2;
                        goto LABEL_406;
                      }
                      if (v174 == 16)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 4;
                        goto LABEL_406;
                      }
                      uint64_t v547 = v176;
                      uint64_t v514 = v173;
                      uint64_t v286 = (llvm::LLVMContext *)v174;
                      if (v174 == 8)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 3;
LABEL_404:
                        uint64_t v173 = v514;
                        uint64_t v174 = (uint64_t)v286;
LABEL_405:
                        uint64_t v176 = v547;
                        goto LABEL_406;
                      }
                    }
                    else
                    {
                      if (v174 == 32)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 5;
LABEL_406:
                        uint64_t v540 = v285;
                        uint64_t v544 = v284;
                        uint64_t v287 = a1[2];
                        v548 = (unsigned char *)(*(void *)(**(void **)(v287 + 40) + 40) + 272);
                        unsigned int v288 = *(uint64_t **)(v4 + 40);
                        uint64_t v289 = *v288;
                        uint64_t v290 = v288[1];
                        uint64_t v291 = *(void *)(v4 + 96);
                        if (*v548)
                        {
                          uint64_t v525 = v174;
                          long long v549 = *(_OWORD *)v291;
                          *(void *)&long long v550 = *(void *)(v291 + 16);
                          v516 = sub_1CD7FAEE8(v287, v62, (uint64_t)&v556, v289, v290, v58, v57, v126, v60, v59, &v549, v176, v175, *(unsigned __int8 *)(v291 + 34) | 0x100u, (*(unsigned __int8 *)(v291 + 34) | 0x100uLL) >> 32, v121, &v569);
                          uint64_t v533 = v331;
                          uint64_t v332 = 0x10000000u >> v172;
                          __ne = sub_1CD7F6604(a1[2], v60, v59, v332, 0, (const llvm::APInt *)&v556, 0);
                          unint64_t v334 = v59 & 0xFFFFFFFF00000000 | v333;
                          uint64_t v335 = a1[2];
                          v336 = *(uint64_t **)(v4 + 40);
                          uint64_t v338 = *v336;
                          uint64_t v337 = v336[1];
                          sub_1CB8F0264(*(uint64_t **)(v4 + 96), v332, (uint64_t)&v558);
                          uint64_t v499 = *(unsigned __int8 *)(*(void *)(v4 + 96) + 34) | 0x100;
                          v341 = sub_1CD7FAEE8(v335, 3, (uint64_t)&v556, v338, v337, v58, v57, v339, (uint64_t)__ne, v334, &v558, v540, v544, v499, SHIDWORD(v499), v121, &v569);
                          __int16 v342 = 0;
                          uint64_t v545 = v343;
                          uint64_t v344 = a1[2];
                          uint64_t v345 = *(void *)(v344 + 832);
                          if (v345) {
                            __int16 v342 = *(_WORD *)(v345 + 8);
                          }
                          uint64_t v139 = sub_1CCFDED5C(v344, 2, (const llvm::APInt *)&v556, (llvm *)1, 0, (uint64_t)v341, 1, v340, (uint64_t)v516, 1, v342);
                          int v347 = v346;
                          v348 = (uint64_t *)(v516[5] + 16 * v533);
                          v350 = (llvm *)*v348;
                          uint64_t v349 = v348[1];
                          uint64_t v351 = a1[2];
                          ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *v348, v349, (uint64_t)v548, 1);
                          v354 = sub_1CD7EBF14(v351, v525, (const llvm::APInt *)&v556, ShiftAmountTy, v353, 0, 0);
                          uint64_t v357 = *(void *)(v351 + 832);
                          if (v357) {
                            LOWORD(v357) = *(_WORD *)(v357 + 8);
                          }
                          v358 = sub_1CCFDED5C(v351, 175, (const llvm::APInt *)&v556, v350, v349, (uint64_t)v516, v533, v356, (uint64_t)v354, v355, v357);
                          uint64_t v361 = a1[2];
                          uint64_t v362 = *(void *)(v4 + 40);
                          v363 = *(llvm **)v362;
                          uint64_t v364 = *(void *)(v362 + 8);
                          uint64_t v365 = *(void *)(v361 + 832);
                          if (v365) {
                            LOWORD(v365) = *(_WORD *)(v365 + 8);
                          }
                          int v310 = v347;
                          v329 = sub_1CCFDED5C(v361, 172, (const llvm::APInt *)&v556, v363, v364, (uint64_t)v341, v545, v360, (uint64_t)v358, v359, v365);
                        }
                        else
                        {
                          uint64_t v515 = v173;
                          long long v549 = *(_OWORD *)v291;
                          *(void *)&long long v550 = *(void *)(v291 + 16);
                          uint64_t v292 = sub_1CD7FAEE8(v287, 3, (uint64_t)&v556, v289, v290, v58, v57, v126, v60, v59, &v549, v176, v175, *(unsigned __int8 *)(v291 + 34) | 0x100u, (*(unsigned __int8 *)(v291 + 34) | 0x100uLL) >> 32, v121, &v569);
                          uint64_t v524 = v293;
                          uint64_t v532 = (uint64_t)v292;
                          uint64_t v294 = 0x10000000u >> v172;
                          uint64_t v295 = sub_1CD7F6604(a1[2], v60, v59, v294, 0, (const llvm::APInt *)&v556, 0);
                          unint64_t v297 = v59 & 0xFFFFFFFF00000000 | v296;
                          uint64_t v503 = a1[2];
                          size_t __nd = (size_t)v295;
                          v298 = *(uint64_t **)(v4 + 40);
                          uint64_t v300 = *v298;
                          uint64_t v299 = v298[1];
                          sub_1CB8F0264(*(uint64_t **)(v4 + 96), v294, (uint64_t)&v558);
                          uint64_t v498 = *(unsigned __int8 *)(*(void *)(v4 + 96) + 34) | 0x100;
                          v303 = sub_1CD7FAEE8(v503, v62, (uint64_t)&v556, v300, v299, v58, v57, v301, __nd, v297, &v558, v540, v544, v498, SHIDWORD(v498), v121, &v569);
                          __int16 v304 = 0;
                          uint64_t v306 = v305;
                          uint64_t v307 = a1[2];
                          uint64_t v308 = *(void *)(v307 + 832);
                          if (v308) {
                            __int16 v304 = *(_WORD *)(v308 + 8);
                          }
                          uint64_t v139 = sub_1CCFDED5C(v307, 2, (const llvm::APInt *)&v556, (llvm *)1, 0, v532, 1, v302, (uint64_t)v303, 1, v304);
                          int v310 = v309;
                          v311 = (uint64_t *)(v303[5] + 16 * v306);
                          v313 = (llvm *)*v311;
                          uint64_t v312 = v311[1];
                          uint64_t v314 = a1[2];
                          v315 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *v311, v312, (uint64_t)v548, 1);
                          v317 = sub_1CD7EBF14(v314, v515, (const llvm::APInt *)&v556, v315, v316, 0, 0);
                          uint64_t v320 = *(void *)(v314 + 832);
                          if (v320) {
                            LOWORD(v320) = *(_WORD *)(v320 + 8);
                          }
                          v321 = sub_1CCFDED5C(v314, 175, (const llvm::APInt *)&v556, v313, v312, (uint64_t)v303, v306, v319, (uint64_t)v317, v318, v320);
                          uint64_t v324 = a1[2];
                          uint64_t v325 = *(void *)(v4 + 40);
                          v326 = *(llvm **)v325;
                          uint64_t v327 = *(void *)(v325 + 8);
                          uint64_t v328 = *(void *)(v324 + 832);
                          if (v328) {
                            LOWORD(v328) = *(_WORD *)(v328 + 8);
                          }
                          v329 = sub_1CCFDED5C(v324, 172, (const llvm::APInt *)&v556, v326, v327, v532, v524, v323, (uint64_t)v321, v322, v328);
                        }
                        uint64_t v136 = (uint64_t)v329;
                        int v138 = v330;
                        int v137 = v310;
LABEL_438:
                        if (v139 != (uint64_t *)v4)
                        {
                          sub_1CD800DA0(a1[2], v4, 0, v136, v138);
                          sub_1CD800DA0(a1[2], v4, 1, (uint64_t)v139, v137);
                          uint64_t v382 = a1[4];
                          if (!v382) {
                            goto LABEL_440;
                          }
                          v553[0] = v136;
                          sub_1CD6A0E6C(v382, v553);
                          uint64_t v115 = a1[4];
                          v553[0] = (uint64_t)v139;
                          uint64_t v116 = v553;
                          goto LABEL_455;
                        }
                        goto LABEL_441;
                      }
                      if (v174 == 64)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 6;
                        goto LABEL_406;
                      }
                      uint64_t v547 = v176;
                      uint64_t v514 = v173;
                      uint64_t v286 = (llvm::LLVMContext *)v174;
                      if (v174 == 128)
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = 7;
                        goto LABEL_404;
                      }
                    }
                    v529 = v286;
                    uint64_t v284 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1[2] + 56), v286);
                    uint64_t v173 = v514;
                    uint64_t v174 = (uint64_t)v529;
                    uint64_t v285 = 0;
                    goto LABEL_405;
                  }
                }
                else
                {
                  if (v173 == 32)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 5;
                    goto LABEL_393;
                  }
                  if (v173 == 64)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 6;
                    goto LABEL_393;
                  }
                  v523 = (llvm::LLVMContext *)(v118.i32[0] - v173);
                  uint64_t v283 = (llvm::LLVMContext *)(0x80000000 >> v172);
                  if (v173 == 128)
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 7;
                    goto LABEL_391;
                  }
                }
                v486 = v283;
                uint64_t v487 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1[2] + 56), v283);
                uint64_t v173 = (uint64_t)v486;
                uint64_t v175 = v487;
                uint64_t v176 = 0;
                goto LABEL_392;
              }
              int v190 = sub_1CB896FB8((unsigned __int8 *)&v554);
              if (v188 == 1) {
              uint64_t v191 = (llvm::LLVMContext *)(8 * v190);
              }
              if ((int)v191 > 63)
              {
                if (v191 == 64)
                {
                  uint64_t v192 = 0;
                  uint64_t v193 = 6;
                  goto LABEL_427;
                }
                if (v191 == 128)
                {
                  uint64_t v192 = 0;
                  uint64_t v193 = 7;
                  goto LABEL_427;
                }
              }
              else
              {
                switch(v191)
                {
                  case 0x20:
                    uint64_t v192 = 0;
                    uint64_t v193 = 5;
                    goto LABEL_427;
                  case 0x10:
                    uint64_t v192 = 0;
                    uint64_t v193 = 4;
                    goto LABEL_427;
                  case 8:
                    uint64_t v192 = 0;
                    uint64_t v193 = 3;
                    goto LABEL_427;
                }
              }
              uint64_t v192 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1[2] + 56), v191);
              uint64_t v193 = 0;
LABEL_427:
              if (v62 == 3) {
                int v370 = 3;
              }
              else {
                int v370 = 1;
              }
              uint64_t v371 = a1[2];
              v372 = *(uint64_t **)(v4 + 40);
              uint64_t v373 = *v372;
              uint64_t v374 = v372[1];
              uint64_t v375 = *(void *)(v4 + 96);
              long long v549 = *(_OWORD *)v375;
              *(void *)&long long v550 = *(void *)(v375 + 16);
              v376 = sub_1CD7FAEE8(v371, v370, (uint64_t)&v556, v373, v374, v58, v57, v189, v60, v59, &v549, v193, v192, *(unsigned __int8 *)(v375 + 34) | 0x100u, (*(unsigned __int8 *)(v375 + 34) | 0x100uLL) >> 32, v121, &v569);
              uint64_t v139 = v376;
              uint64_t v378 = v377;
              if (v62 == 2)
              {
                uint64_t v390 = a1[2];
                uint64_t v391 = v376[5] + 16 * v377;
                v392 = *(llvm **)v391;
                uint64_t v393 = *(void *)(v391 + 8);
                uint64_t v394 = sub_1CD7EDE1C(v390, v554, *((uint64_t *)&v554 + 1));
                uint64_t v397 = *(void *)(v390 + 832);
                if (v397) {
                  LOWORD(v397) = *(_WORD *)(v397 + 8);
                }
                v398 = sub_1CCFDED5C(v390, 204, (const llvm::APInt *)&v556, v392, v393, (uint64_t)v139, v378, v396, v394, v395, v397);
              }
              else
              {
                uint64_t v379 = v376[5] + 16 * v377;
                if (v62 == 3)
                {
                  v380 = *(llvm **)v379;
                  uint64_t v381 = *(void *)(v379 + 8);
                }
                else
                {
                  v380 = *(llvm **)v379;
                  if (v193 != *(void *)v379
                    || (uint64_t v381 = *(void *)(v379 + 8), !v193) && v192 != v381)
                  {
                    uint64_t v136 = (uint64_t)v376;
LABEL_436:
                    int v138 = v378;
                    goto LABEL_437;
                  }
                }
                uint64_t v400 = a1[2];
                uint64_t v401 = sub_1CD7EDE1C(v400, v554, *((uint64_t *)&v554 + 1));
                uint64_t v404 = *(void *)(v400 + 832);
                if (v404) {
                  LOWORD(v404) = *(_WORD *)(v404 + 8);
                }
                v398 = sub_1CCFDED5C(v400, 4, (const llvm::APInt *)&v556, v380, v381, (uint64_t)v139, v378, v403, v401, v402, v404);
              }
              uint64_t v136 = (uint64_t)v398;
              LODWORD(v378) = v399;
              goto LABEL_436;
            }
            uint64_t v65 = *(uint64_t **)(v4 + 32);
            uint64_t v543 = *v65;
            uint64_t v546 = v65[1];
            uint64_t v67 = v65[10];
            uint64_t v66 = v65[11];
            uint64_t v68 = *(unsigned __int8 **)(v4 + 64);
            v551 = v68;
            if (v68) {
              llvm::MetadataTracking::track((uint64_t)&v551, v68, 2);
            }
            int v69 = *(_DWORD *)(v4 + 60);
            int v552 = v69;
            uint64_t v70 = *(void *)(v4 + 96);
            __int16 v71 = *(_WORD *)(v70 + 32);
            long long v72 = *(_OWORD *)(v70 + 56);
            long long v549 = *(_OWORD *)(v70 + 40);
            long long v550 = v72;
            if ((*(_WORD *)(v4 + 26) & 0x400) == 0)
            {
              if ((*(_WORD *)(v4 + 26) & 0x780) != 0 || *(_WORD *)(v4 + 24) != 254)
              {
LABEL_224:
                uint64_t v160 = *(void *)(v4 + 32);
                uint64_t v161 = *(void *)(v160 + 40);
                uint64_t v162 = *(void **)(v160 + 48);
                unint64_t v148 = a1[1];
                if (*(unsigned char *)(v148
                              + 390 * *(unsigned __int8 *)(*(void *)(v161 + 40) + 16 * v162)
                              + 4116) == 4)
                {
                  uint64_t v149 = *(uint64_t (**)(void))(*(void *)v148 + 1968);
                  goto LABEL_226;
                }
                if (!*(unsigned char *)(v148
                               + 390 * *(unsigned __int8 *)(*(void *)(v161 + 40) + 16 * v162)
                               + 4116))
                {
                  uint64_t v152 = *(void *)(v4 + 80);
                  uint64_t v153 = *(void *)(v4 + 88);
                  uint64_t v169 = a1[2];
                  uint64_t v156 = (llvm::DataLayout *)(*(void *)(**(void **)(v169 + 40) + 40) + 272);
                  uint64_t v154 = *(llvm::LLVMContext **)(v169 + 56);
                  uint64_t v155 = *(void *)(v4 + 96);
                  goto LABEL_238;
                }
                unsigned __int8 v215 = sub_1CD3E5538(v148, 0xFEu, *(unsigned char *)(*(void *)(v161 + 40) + 16 * v162));
                uint64_t v216 = (llvm::APFloatBase *)a1[2];
                uint64_t v217 = (llvm *)v215;
                uint64_t v218 = *((void *)v216 + 104);
                if (v218) {
                  __int16 v219 = *(_WORD *)(v218 + 8);
                }
                else {
                  __int16 v219 = 0;
                }
                uint64_t v247 = sub_1CD7F3564(v216, (const char *)0xD8, (uint64_t)&v551, v217, 0, v161, v162, v219);
                uint64_t v248 = a1[2];
                uint64_t v249 = *(void *)(v4 + 96);
                long long v569 = *(_OWORD *)v249;
                *(void *)&long long v570 = *(void *)(v249 + 16);
                uint64_t v170 = sub_1CD7FB188(v248, v543, v546, (uint64_t)&v551, (uint64_t)v247, v250, v67, v66, (uint64_t)&v569, *(unsigned char *)(v249 + 34), 0, v71, &v549);
LABEL_493:
                uint64_t v165 = (uint64_t)v170;
                int v166 = v171;
                goto LABEL_494;
              }
              uint64_t v73 = (long long *)(v70 + 40);
              uint64_t v74 = *(uint64_t **)(v4 + 32);
              uint64_t v76 = *v74;
              uint64_t v75 = v74[1];
              uint64_t v78 = v74[10];
              uint64_t v77 = v74[11];
              uint64_t v79 = v74[5];
              long long v80 = v73[1];
              long long v569 = *v73;
              long long v570 = v80;
              uint64_t v81 = *(unsigned __int8 **)(v4 + 64);
              v566 = v81;
              if (v81)
              {
                llvm::MetadataTracking::track((uint64_t)&v566, v81, 2);
                int v69 = *(_DWORD *)(v4 + 60);
              }
              int v567 = v69;
              if (*(_WORD *)(v79 + 24) != 12) {
                goto LABEL_217;
              }
              int v82 = **(unsigned __int8 **)(v79 + 40);
              if (v82 != 11)
              {
                if (v82 == 10 && *(void *)(a1[1] + 136))
                {
                  uint64_t v535 = a1[2];
                  uint64_t v83 = *(void *)(v79 + 80);
                  int v85 = *(void **)(v83 + 32);
                  uint64_t v84 = (llvm::detail::DoubleAPFloat *)(v83 + 32);
                  if (v85 == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v84, (llvm::APInt *)&v562);
                  }
                  else {
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v84, (uint64_t)&v562);
                  }
                  llvm::APInt::zextOrTrunc(&v562, 0x20u, (uint64_t)&__src);
                  uint64_t v86 = *(unsigned __int8 **)(v79 + 64);
                  v560 = v86;
                  if (v86) {
                    llvm::MetadataTracking::track((uint64_t)&v560, v86, 2);
                  }
                  unsigned int v561 = *(_DWORD *)(v79 + 60);
                  uint64_t v87 = sub_1CD7EBB14(v535, (llvm::LLVMContext *)&__src, (const llvm::APInt *)&v560, 5, 0, 0, 0);
                  unsigned int v536 = v88;
                  if (!v560) {
                    goto LABEL_149;
                  }
                  int v89 = *v560;
                  if ((v89 - 4) > 0x1E)
                  {
                    if ((v89 - 3) >= 0xFFFFFFFE) {
                      v482 = v560;
                    }
                    else {
                      v482 = 0;
                    }
                    if ((v89 - 3) < 0xFFFFFFFE)
                    {
                      if (v89 == 3) {
                        *((void *)v560 + 1) = 0;
                      }
                      goto LABEL_149;
                    }
                    unint64_t v483 = (unint64_t)(v482 + 8);
                  }
                  else
                  {
                    if ((v560[1] & 0x7F) != 2 && !*((_DWORD *)v560 + 3)) {
                      goto LABEL_149;
                    }
                    uint64_t v493 = *((void *)v560 + 2);
                    if ((v493 & 4) == 0) {
                      goto LABEL_149;
                    }
                    unint64_t v483 = v493 & 0xFFFFFFFFFFFFFFF8;
                    if (!v483) {
                      goto LABEL_149;
                    }
                  }
                  v568 = &v560;
                  sub_1CC5FA668(v483 + 16, &v568);
LABEL_149:
                  if (v565 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  if (v563 >= 0x41 && v562) {
                    MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
                  }
                  uint64_t v90 = a1[2];
                  uint64_t v91 = *(void *)(v4 + 96);
                  long long v558 = *(_OWORD *)v91;
                  uint64_t v559 = *(void *)(v91 + 16);
                  unsigned int v92 = sub_1CD7FB188(v90, v76, v75, (uint64_t)&v566, v87, v536, v78, v77, (uint64_t)&v558, *(unsigned char *)(v91 + 34), 0, v71, &v569);
LABEL_370:
                  int v158 = v92;
                  goto LABEL_218;
                }
LABEL_217:
                int v158 = 0;
                goto LABEL_218;
              }
              uint64_t v157 = a1[1];
              if (!*(void *)(v157 + 144))
              {
                if (*(void *)(v157 + 136) && (*(unsigned char *)(v4 + 26) & 8) == 0)
                {
                  uint64_t v272 = *(void *)(v79 + 80);
                  uint64_t v274 = *(void **)(v272 + 32);
                  uint64_t v273 = (llvm::detail::DoubleAPFloat *)(v272 + 32);
                  if (v274 == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v273, (llvm::APInt *)&__src);
                  }
                  else {
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v273, (uint64_t)&__src);
                  }
                  uint64_t v275 = a1[2];
                  if (v565 >= 0x41) {
                    p_src = (unsigned int *)__src;
                  }
                  else {
                    p_src = (unsigned int *)&__src;
                  }
                  uint64_t v277 = *p_src;
                  unsigned int v563 = 32;
                  uint64_t v562 = v277;
                  uint64_t v522 = sub_1CD7EBB14(v275, (llvm::LLVMContext *)&v562, (const llvm::APInt *)&v566, 5, 0, 0, 0);
                  unint64_t v539 = v278;
                  if (v563 >= 0x41 && v562) {
                    MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
                  }
                  uint64_t v530 = a1[2];
                  unsigned int v279 = v565;
                  unsigned int v561 = v565;
                  if (v565 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v280 = HIDWORD(__src);
                  if (v565 == 32) {
                    uint64_t v280 = 0;
                  }
                  uint64_t v512 = v280;
                  unsigned int v563 = 32;
                  uint64_t v562 = v280;
                  size_t __n = sub_1CD7EBB14(v530, (llvm::LLVMContext *)&v562, (const llvm::APInt *)&v566, 5, 0, 0, 0);
                  unint64_t v531 = v281;
                  if (v563 >= 0x41 && v562) {
                    MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
                  }
                  if (v279 >= 0x41 && v512) {
                    MEMORY[0x1D25D9CB0](v512, 0x1000C8000313F17);
                  }
                  uint64_t v282 = a1[2];
                  if (*(unsigned char *)(*(void *)(**(void **)(v282 + 40) + 40) + 272))
                  {
                    unint64_t v470 = v539 & 0xFFFFFFFF00000000 | v531;
                    uint64_t v513 = v522;
                    uint64_t v522 = __n;
                    unint64_t v531 = v531 & 0xFFFFFFFF00000000 | v539;
                    unint64_t v539 = v470;
                  }
                  else
                  {
                    uint64_t v513 = __n;
                  }
                  v471 = *(long long **)(v4 + 96);
                  long long v554 = *v471;
                  uint64_t v555 = *((void *)v471 + 2);
                  v528 = sub_1CD7FB188(v282, v76, v75, (uint64_t)&v566, v522, v539, v78, v77, (uint64_t)&v554, *((unsigned char *)v471 + 34), 0, v71, &v569);
                  unint64_t v542 = v539 & 0xFFFFFFFF00000000 | v472;
                  v473 = sub_1CD7F6604(a1[2], v78, v77, 4, 0, (const llvm::APInt *)&v566, 0);
                  unsigned int v475 = v474;
                  uint64_t v476 = a1[2];
                  sub_1CB8F0264(*(uint64_t **)(v4 + 96), 4, (uint64_t)v553);
                  uint64_t v495 = *(unsigned __int8 *)(*(void *)(v4 + 96) + 34);
                  v477 = sub_1CD7FB188(v476, v76, v75, (uint64_t)&v566, v513, v531, (uint64_t)v473, v475, (uint64_t)v553, v495, SHIDWORD(v495), v71, &v569);
                  uint64_t v480 = a1[2];
                  uint64_t v481 = *(void *)(v480 + 832);
                  if (v481) {
                    LOWORD(v481) = *(_WORD *)(v481 + 8);
                  }
                  int v158 = sub_1CCFDED5C(v480, 2, (const llvm::APInt *)&v566, (llvm *)1, 0, (uint64_t)v528, v542, v479, (uint64_t)v477, v531 & 0xFFFFFFFF00000000 | v478, v481);
                  if (v565 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
LABEL_218:
                  if (!v566) {
                    goto LABEL_222;
                  }
                  int v159 = *v566;
                  if ((v159 - 4) > 0x1E)
                  {
                    if ((v159 - 3) >= 0xFFFFFFFE) {
                      uint64_t v167 = v566;
                    }
                    else {
                      uint64_t v167 = 0;
                    }
                    if ((v159 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v168 = (unint64_t)(v167 + 8);
LABEL_235:
                      __src = &v566;
                      sub_1CC5FA668(v168 + 16, &__src);
                      goto LABEL_222;
                    }
                    if (v159 == 3) {
                      *((void *)v566 + 1) = 0;
                    }
                  }
                  else if ((v566[1] & 0x7F) == 2 || *((_DWORD *)v566 + 3))
                  {
                    uint64_t v491 = *((void *)v566 + 2);
                    if ((v491 & 4) != 0)
                    {
                      unint64_t v168 = v491 & 0xFFFFFFFFFFFFFFF8;
                      if (v168) {
                        goto LABEL_235;
                      }
                    }
                  }
LABEL_222:
                  if (v158)
                  {
                    sub_1CCF76388((uint64_t)a1, v4, (uint64_t)v158);
                    goto LABEL_495;
                  }
                  goto LABEL_224;
                }
                goto LABEL_217;
              }
              uint64_t v537 = a1[2];
              uint64_t v263 = *(void *)(v79 + 80);
              int v265 = *(void **)(v263 + 32);
              v264 = (llvm::detail::DoubleAPFloat *)(v263 + 32);
              if (v265 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v264, (llvm::APInt *)&v562);
              }
              else {
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v264, (uint64_t)&v562);
              }
              llvm::APInt::zextOrTrunc(&v562, 0x40u, (uint64_t)&__src);
              char v266 = *(unsigned __int8 **)(v79 + 64);
              v560 = v266;
              if (v266) {
                llvm::MetadataTracking::track((uint64_t)&v560, v266, 2);
              }
              unsigned int v561 = *(_DWORD *)(v79 + 60);
              uint64_t v267 = sub_1CD7EBB14(v537, (llvm::LLVMContext *)&__src, (const llvm::APInt *)&v560, 6, 0, 0, 0);
              unsigned int v538 = v268;
              if (v560)
              {
                int v269 = *v560;
                if ((v269 - 4) > 0x1E)
                {
                  if ((v269 - 3) >= 0xFFFFFFFE) {
                    v484 = v560;
                  }
                  else {
                    v484 = 0;
                  }
                  if ((v269 - 3) < 0xFFFFFFFE)
                  {
                    if (v269 == 3) {
                      *((void *)v560 + 1) = 0;
                    }
                    goto LABEL_363;
                  }
                  unint64_t v485 = (unint64_t)(v484 + 8);
                }
                else
                {
                  if ((v560[1] & 0x7F) != 2 && !*((_DWORD *)v560 + 3)) {
                    goto LABEL_363;
                  }
                  uint64_t v494 = *((void *)v560 + 2);
                  if ((v494 & 4) == 0) {
                    goto LABEL_363;
                  }
                  unint64_t v485 = v494 & 0xFFFFFFFFFFFFFFF8;
                  if (!v485) {
                    goto LABEL_363;
                  }
                }
                v568 = &v560;
                sub_1CC5FA668(v485 + 16, &v568);
              }
LABEL_363:
              if (v565 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v563 >= 0x41 && v562) {
                MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
              }
              uint64_t v270 = a1[2];
              uint64_t v271 = *(long long **)(v4 + 96);
              long long v556 = *v271;
              uint64_t v557 = *((void *)v271 + 2);
              unsigned int v92 = sub_1CD7FB188(v270, v76, v75, (uint64_t)&v566, v267, v538, v78, v77, (uint64_t)&v556, *((unsigned char *)v271 + 34), 0, v71, &v569);
              goto LABEL_370;
            }
            uint64_t v100 = *(void *)(v4 + 32);
            uint64_t v102 = *(void *)(v100 + 40);
            int v101 = *(void **)(v100 + 48);
            long long v556 = *(_OWORD *)(v4 + 80);
            if ((_BYTE)v556) {
              uint64_t v103 = sub_1CB87E200((unsigned __int8 *)&v556);
            }
            else {
              uint64_t v103 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v556);
            }
            int8x8_t v140 = (int8x8_t)v103;
            int v141 = v104;
            unint64_t v142 = sub_1CB896FB8((unsigned __int8 *)&v556);
            uint64_t v144 = a1[2];
            if (*(void *)&v140 == 8 * v142 && v141 == v143)
            {
              if ((_BYTE)v556) {
                BOOL v145 = v556 - 15 < 0x9C;
              }
              else {
                BOOL v145 = (*(_DWORD *)(*((void *)&v556 + 1) + 8) & 0xFE) == 18;
              }
              uint64_t v146 = (unsigned char *)(*(void *)(**(void **)(v144 + 40) + 40) + 272);
              if (v145 || (uint8x8_t v147 = (uint8x8_t)vcnt_s8(v140), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] == 1))
              {
                unint64_t v148 = a1[1];
                if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                              + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48))
                  && (_BYTE)v556)
                {
                  if (*(unsigned char *)(v148
                                + 179
                                * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                                     + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48))
                                + v556
                                + 137754) == 4)
                  {
                    uint64_t v149 = *(uint64_t (**)(void))(*(void *)v148 + 1968);
LABEL_226:
                    uint64_t v163 = v149();
                    if (!v163 || (uint64_t v165 = v163, v166 = v164, v4 == v163) && !v164)
                    {
LABEL_495:
                      v383 = v551;
                      if (!v551) {
                        return;
                      }
                      int v384 = *v551;
                      if ((v384 - 4) > 0x1E)
                      {
                        if ((v384 - 3) >= 0xFFFFFFFE) {
                          v469 = v551;
                        }
                        else {
                          v469 = 0;
                        }
                        if ((v384 - 3) < 0xFFFFFFFE) {
                          goto LABEL_509;
                        }
                        unint64_t v468 = (unint64_t)(v469 + 8);
                      }
                      else
                      {
                        if ((v551[1] & 0x7F) != 2 && !*((_DWORD *)v551 + 3)) {
                          return;
                        }
                        uint64_t v467 = *((void *)v551 + 2);
                        if ((v467 & 4) == 0) {
                          return;
                        }
                        unint64_t v468 = v467 & 0xFFFFFFFFFFFFFFF8;
                        if (!v468) {
                          return;
                        }
                      }
                      *(void *)&long long v549 = &v551;
                      uint64_t v388 = v468 + 16;
                      v389 = &v549;
                      goto LABEL_508;
                    }
LABEL_494:
                    sub_1CCF763E0((uint64_t)a1, v4, 0, v165, v166);
                    goto LABEL_495;
                  }
                  if (!*(unsigned char *)(v148
                                 + 179
                                 * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 40) + 40)
                                                      + 16 * *(unsigned int *)(*(void *)(v4 + 32) + 48))
                                 + v556
                                 + 137754))
                  {
                    uint64_t v152 = *(void *)(v4 + 80);
                    uint64_t v153 = *(void *)(v4 + 88);
                    uint64_t v154 = *(llvm::LLVMContext **)(v144 + 56);
                    uint64_t v155 = *(void *)(v4 + 96);
                    uint64_t v156 = (llvm::DataLayout *)(*(void *)(**(void **)(v144 + 40) + 40) + 272);
LABEL_238:
                    if (llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(v148, v154, v156, v152, v153, v155, 0))goto LABEL_495; {
                    uint64_t v170 = sub_1CD01B664((uint64_t *)a1[1], v4, a1[2]);
                    }
                    goto LABEL_493;
                  }
                  uint64_t v212 = *((void *)&v556 + 1);
                }
                else
                {
                  uint64_t v212 = *((void *)&v556 + 1);
                  if (!(_BYTE)v556) {
                    goto LABEL_278;
                  }
                }
                if (*(void *)(v148 + 8 * v556 + 96))
                {
                  uint64_t v220 = *(void *)(v144 + 832);
                  if (v220) {
                    __int16 v221 = *(_WORD *)(v220 + 8);
                  }
                  else {
                    __int16 v221 = 0;
                  }
                  unsigned int v251 = sub_1CD7F3564((llvm::APFloatBase *)a1[2], (const char *)0xC9, (uint64_t)&v551, (llvm *)v556, v212, v102, v101, v221);
                  uint64_t v252 = a1[2];
                  uint64_t v253 = *(void *)(v4 + 96);
                  long long v569 = *(_OWORD *)v253;
                  *(void *)&long long v570 = *(void *)(v253 + 16);
                  uint64_t v226 = sub_1CD7FB188(v252, v543, v546, (uint64_t)&v551, (uint64_t)v251, v254, v67, v66, (uint64_t)&v569, *(unsigned char *)(v253 + 34), 0, v71, &v549);
                  goto LABEL_303;
                }
LABEL_278:
                llvm::TargetLoweringBase::getTypeConversion(v148, *(llvm::LLVMContext **)(v144 + 56), v556, v212, (uint64_t)&v569);
                uint64_t v213 = *(void *)(v144 + 832);
                if (v213) {
                  __int16 v214 = *(_WORD *)(v213 + 8);
                }
                else {
                  __int16 v214 = 0;
                }
                uint64_t v222 = sub_1CD7F3564((llvm::APFloatBase *)v144, (const char *)0xC9, (uint64_t)&v551, *((llvm **)&v569 + 1), v570, v102, v101, v214);
                uint64_t v223 = a1[2];
                uint64_t v224 = *(void *)(v4 + 96);
                long long v569 = *(_OWORD *)v224;
                *(void *)&long long v570 = *(void *)(v224 + 16);
                uint64_t v226 = sub_1CD7FB71C(v223, v543, v546, (uint64_t)&v551, (uint64_t)v222, v225, v67, v66, (uint64_t)&v569, v556, *((uint64_t *)&v556 + 1), *(unsigned char *)(v224 + 34), 0, v71, &v549);
LABEL_303:
                uint64_t v165 = (uint64_t)v226;
                int v166 = v227;
                goto LABEL_494;
              }
              char v521 = __clz(v140.u32[0]);
              uint64_t v194 = 0x80000000 >> v521;
              uint64_t v195 = (v140.i32[0] - v194);
              if ((int)v194 <= 31)
              {
                if (v194 == 1)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 2;
                  goto LABEL_468;
                }
                uint64_t v262 = (llvm::LLVMContext *)(v140.i32[0] - v194);
                if (v194 == 16)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 4;
LABEL_467:
                  uint64_t v195 = (uint64_t)v262;
LABEL_468:
                  if ((int)v195 <= 31)
                  {
                    if (v195 == 1)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 2;
                      goto LABEL_481;
                    }
                    uint64_t v517 = v197;
                    uint64_t v408 = v196;
                    uint64_t v409 = v194;
                    if (v195 == 16)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 4;
LABEL_477:
                      uint64_t v194 = v409;
                      uint64_t v196 = v408;
                      uint64_t v197 = v517;
                      goto LABEL_481;
                    }
                    v410 = (llvm::LLVMContext *)v195;
                    if (v195 == 8)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 3;
LABEL_480:
                      uint64_t v194 = v409;
                      uint64_t v196 = v408;
                      uint64_t v197 = v517;
                      uint64_t v195 = (uint64_t)v410;
                      goto LABEL_481;
                    }
                  }
                  else
                  {
                    if (v195 == 32)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 5;
LABEL_481:
                      uint64_t v534 = v407;
                      uint64_t v541 = v406;
                      uint64_t v411 = a1[2];
                      if (*v146)
                      {
                        size_t __nb = v196;
                        uint64_t v519 = v197;
                        v438 = (uint64_t *)(*(void *)(v102 + 40) + 16 * v101);
                        uint64_t v439 = v195;
                        uint64_t v502 = v438[1];
                        v505 = (llvm *)*v438;
                        v440 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *v438, v502, (uint64_t)v146, 1);
                        v442 = sub_1CD7EBF14(v411, v439, (const llvm::APInt *)&v551, v440, v441, 0, 0);
                        uint64_t v445 = *(void *)(v411 + 832);
                        if (v445) {
                          LOWORD(v445) = *(_WORD *)(v445 + 8);
                        }
                        v446 = sub_1CCFDED5C(v411, 177, (const llvm::APInt *)&v551, v505, v502, v102, (uint64_t)v101, v444, (uint64_t)v442, v443, v445);
                        uint64_t v447 = a1[2];
                        uint64_t v448 = *(void *)(v4 + 96);
                        long long v569 = *(_OWORD *)v448;
                        *(void *)&long long v570 = *(void *)(v448 + 16);
                        v450 = sub_1CD7FB71C(v447, v543, v546, (uint64_t)&v551, (uint64_t)v446, v449, v67, v66, (uint64_t)&v569, v519, __nb, *(unsigned char *)(v448 + 34), 0, v71, &v549);
                        unsigned int __nc = v451;
                        v520 = v450;
                        uint64_t v452 = 0x10000000u >> v521;
                        uint64_t v453 = a1[2];
                        uint64_t v454 = *(void *)(v67 + 40) + 16 * v66;
                        v456 = *(llvm **)v454;
                        uint64_t v455 = *(void *)(v454 + 8);
                        uint64_t v527 = v452;
                        v457 = sub_1CD7EBF14(v453, v452, (const llvm::APInt *)&v551, *(llvm **)v454, v455, 0, 0);
                        uint64_t v460 = *(void *)(v453 + 832);
                        if (v460) {
                          LOWORD(v460) = *(_WORD *)(v460 + 8);
                        }
                        v461 = sub_1CCFDED5C(v453, 56, (const llvm::APInt *)&v551, v456, v455, v67, v66, v459, (uint64_t)v457, v458, v460);
                        unsigned int v463 = v462;
                        uint64_t v464 = a1[2];
                        sub_1CB8F0264(*(uint64_t **)(v4 + 96), v527, (uint64_t)&v558);
                        uint64_t v497 = *(unsigned __int8 *)(*(void *)(v4 + 96) + 34);
                        v437 = sub_1CD7FB71C(v464, v543, v546, (uint64_t)&v551, v102, v101, (uint64_t)v461, v463, (uint64_t)&v558, v534, v541, v497, SHIDWORD(v497), v71, &v549);
                        unsigned int v435 = __nc;
                        v433 = v520;
                      }
                      else
                      {
                        uint64_t v412 = *(void *)(v4 + 96);
                        long long v569 = *(_OWORD *)v412;
                        *(void *)&long long v570 = *(void *)(v412 + 16);
                        uint64_t v501 = v194;
                        v413 = sub_1CD7FB71C(v411, v543, v546, (uint64_t)&v551, v102, v101, v67, v66, (uint64_t)&v569, v197, v196, *(unsigned char *)(v412 + 34), 0, v71, &v549);
                        unsigned int __na = v414;
                        v518 = v413;
                        uint64_t v504 = 0x10000000u >> v521;
                        v526 = sub_1CD7F6604(a1[2], v67, v66, v504, 0, (const llvm::APInt *)&v551, 0);
                        unsigned int v416 = v415;
                        v417 = (uint64_t *)(*(void *)(v102 + 40) + 16 * v101);
                        v418 = (llvm *)*v417;
                        uint64_t v419 = v417[1];
                        uint64_t v420 = a1[2];
                        v421 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *v417, v419, (uint64_t)v146, 1);
                        v423 = sub_1CD7EBF14(v420, v501, (const llvm::APInt *)&v551, v421, v422, 0, 0);
                        __int16 v426 = 0;
                        uint64_t v427 = *(void *)(v420 + 832);
                        if (v427) {
                          __int16 v426 = *(_WORD *)(v427 + 8);
                        }
                        v428 = sub_1CCFDED5C(v420, 177, (const llvm::APInt *)&v551, v418, v419, v102, (uint64_t)v101, v425, (uint64_t)v423, v424, v426);
                        unsigned int v430 = v429;
                        uint64_t v431 = a1[2];
                        sub_1CB8F0264(*(uint64_t **)(v4 + 96), v504, (uint64_t)&v558);
                        uint64_t v496 = *(unsigned __int8 *)(*(void *)(v4 + 96) + 34);
                        v433 = sub_1CD7FB71C(v431, v543, v546, (uint64_t)&v551, (uint64_t)v428, v430, (uint64_t)v526, v416, (uint64_t)&v558, v534, v541, v496, SHIDWORD(v496), v71, &v549);
                        unsigned int v435 = v434;
                        unsigned int v436 = __na;
                        v437 = v518;
                      }
                      uint64_t v465 = a1[2];
                      uint64_t v466 = *(void *)(v465 + 832);
                      if (v466) {
                        LOWORD(v466) = *(_WORD *)(v466 + 8);
                      }
                      uint64_t v170 = sub_1CCFDED5C(v465, 2, (const llvm::APInt *)&v551, (llvm *)1, 0, (uint64_t)v437, v436, v432, (uint64_t)v433, v435, v466);
                      goto LABEL_493;
                    }
                    if (v195 == 64)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 6;
                      goto LABEL_481;
                    }
                    uint64_t v517 = v197;
                    uint64_t v408 = v196;
                    uint64_t v409 = v194;
                    v410 = (llvm::LLVMContext *)v195;
                    if (v195 == 128)
                    {
                      uint64_t v406 = 0;
                      uint64_t v407 = 7;
                      goto LABEL_480;
                    }
                  }
                  v500 = v410;
                  uint64_t v406 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1[2] + 56), v410);
                  uint64_t v195 = (uint64_t)v500;
                  uint64_t v407 = 0;
                  goto LABEL_477;
                }
                v405 = (llvm::LLVMContext *)(0x80000000 >> v521);
                if (v194 == 8)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 3;
LABEL_466:
                  uint64_t v194 = (uint64_t)v405;
                  goto LABEL_467;
                }
              }
              else
              {
                if (v194 == 32)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 5;
                  goto LABEL_468;
                }
                if (v194 == 64)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 6;
                  goto LABEL_468;
                }
                uint64_t v262 = (llvm::LLVMContext *)(v140.i32[0] - v194);
                v405 = (llvm::LLVMContext *)(0x80000000 >> v521);
                if (v194 == 128)
                {
                  uint64_t v196 = 0;
                  uint64_t v197 = 7;
                  goto LABEL_466;
                }
              }
              v488 = *(llvm::IntegerType **)(v144 + 56);
              v489 = v405;
              uint64_t v490 = llvm::IntegerType::get(v488, v405);
              uint64_t v194 = (uint64_t)v489;
              uint64_t v196 = v490;
              uint64_t v197 = 0;
              goto LABEL_467;
            }
            uint64_t v185 = (llvm::LLVMContext *)(8 * v142);
            if (8 * (int)v142 > 63)
            {
              if (v185 == 64)
              {
                uint64_t v186 = 0;
                uint64_t v187 = 6;
                goto LABEL_424;
              }
              if (v185 == 128)
              {
                uint64_t v186 = 0;
                uint64_t v187 = 7;
                goto LABEL_424;
              }
            }
            else
            {
              switch(v185)
              {
                case 0x20:
                  uint64_t v186 = 0;
                  uint64_t v187 = 5;
LABEL_424:
                  v366 = sub_1CD7EB9C8(v144, v102, (uint64_t)v101, (const llvm::APInt *)&v551, v556, *((uint64_t *)&v556 + 1));
                  uint64_t v367 = a1[2];
                  uint64_t v368 = *(void *)(v4 + 96);
                  long long v569 = *(_OWORD *)v368;
                  *(void *)&long long v570 = *(void *)(v368 + 16);
                  uint64_t v170 = sub_1CD7FB71C(v367, v543, v546, (uint64_t)&v551, (uint64_t)v366, v369, v67, v66, (uint64_t)&v569, v187, v186, *(unsigned char *)(v368 + 34), 0, v71, &v549);
                  goto LABEL_493;
                case 0x10:
                  uint64_t v186 = 0;
                  uint64_t v187 = 4;
                  goto LABEL_424;
                case 8:
                  uint64_t v186 = 0;
                  uint64_t v187 = 3;
                  goto LABEL_424;
              }
            }
            uint64_t v186 = llvm::IntegerType::get(*(llvm::IntegerType **)(v144 + 56), v185);
            uint64_t v187 = 0;
            uint64_t v144 = a1[2];
            goto LABEL_424;
        }
    }
  }
  if ((int)v5 <= 133)
  {
    LOBYTE(v7) = 0;
    switch((int)v5)
    {
      case 22:
      case 23:
      case 24:
      case 25:
        goto LABEL_25;
      case 26:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 49:
      case 50:
      case 51:
      case 52:
      case 54:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
        goto LABEL_55;
      case 27:
      case 28:
        goto LABEL_93;
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 53:
      case 55:
        LOBYTE(v7) = 2;
        if (**(unsigned char **)(v4 + 40))
        {
          if (*(unsigned char *)(a1[1] + 390 * **(unsigned __int8 **)(v4 + 40) + v5 + 3862)) {
            LOBYTE(v7) = *(unsigned char *)(a1[1] + 390 * **(unsigned __int8 **)(v4 + 40) + v5 + 3862);
          }
          else {
            LOBYTE(v7) = 2;
          }
        }
        goto LABEL_92;
      case 46:
      case 47:
      case 48:
        goto LABEL_19;
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
        goto LABEL_16;
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
        a3 = **(void **)(v4 + 40);
        if (!(_BYTE)a3) {
          goto LABEL_89;
        }
        uint64_t v16 = a1[1];
        LOBYTE(v7) = *(unsigned char *)(v16 + 390 * a3 + v5 + 3862);
        if (!(_BYTE)v7)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 520))(v16)) {
            LOBYTE(v7) = 0;
          }
          else {
            LOBYTE(v7) = 2;
          }
        }
        goto LABEL_92;
      default:
        if ((v5 - 126) >= 4) {
          goto LABEL_55;
        }
        goto LABEL_11;
    }
  }
  uint64_t v11 = (v5 - 134);
  if (v11 > 0x3B) {
    goto LABEL_31;
  }
  if (((1 << (v5 + 122)) & 0xC00000000000030) == 0)
  {
    if (((1 << (v5 + 122)) & 3) != 0)
    {
LABEL_11:
      uint64_t v8 = *(void *)(v4 + 32);
      uint64_t v9 = *(void *)(v8 + 40);
      uint64_t v10 = *(unsigned int *)(v8 + 48);
      goto LABEL_33;
    }
    if (v11 == 14)
    {
LABEL_32:
      uint64_t v17 = *(uint64_t **)(v4 + 32);
      uint64_t v9 = *v17;
      uint64_t v10 = *((unsigned int *)v17 + 2);
LABEL_33:
      uint64_t v13 = *(unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v10);
      if (!v13) {
        goto LABEL_89;
      }
LABEL_34:
      uint64_t v18 = a1[1] + 390 * v13;
      goto LABEL_35;
    }
LABEL_31:
    if ((v5 - 242) >= 4)
    {
LABEL_55:
      if (v5 >= 0x186)
      {
        LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[1] + 512))(a1[1], v4);
        goto LABEL_92;
      }
LABEL_16:
      LODWORD(v13) = **(unsigned __int8 **)(v4 + 40);
      if (!**(unsigned char **)(v4 + 40)) {
        goto LABEL_89;
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
LABEL_14:
  if (v5 == 192)
  {
    uint64_t v12 = 4;
LABEL_49:
    unsigned int v24 = v5 == 139;
    goto LABEL_50;
  }
  BOOL v19 = v5 == 365 || v5 == 193;
  uint64_t v20 = 1;
  if (v19) {
    uint64_t v20 = 2;
  }
  uint64_t v12 = 3;
  if ((v5 & 0xFFFE) != 0x8A) {
    uint64_t v12 = v20;
  }
  if (v5 == 138)
  {
    unsigned int v24 = 1;
  }
  else
  {
    if (v5 != 260) {
      goto LABEL_49;
    }
    unsigned int v24 = 2;
  }
LABEL_50:
  uint64_t v21 = *(void *)(v4 + 32);
  uint64_t v22 = *(void *)(*(void *)(*(void *)(v21 + 40 * v24) + 40) + 16 * *(unsigned int *)(v21 + 40 * v24 + 8));
  LODWORD(v21) = *(_DWORD *)(*(void *)(v21 + 40 * v12) + 76);
  uint64_t v23 = a1[1];
  LOBYTE(v7) = (*(_DWORD *)(v23 + 92 * v21 + 4 * (v22 >> 3) + 171588) >> (4 * (v22 & 7))) & 0xF;
  if ((_BYTE)v7) {
    goto LABEL_92;
  }
  if (v5 == 192)
  {
    if (**(unsigned char **)(v4 + 40))
    {
      LOBYTE(v7) = *(unsigned char *)(v23 + 390 * **(unsigned __int8 **)(v4 + 40) + 4054);
      goto LABEL_92;
    }
LABEL_89:
    LOBYTE(v7) = 2;
    goto LABEL_92;
  }
  if (!(_BYTE)v22) {
    goto LABEL_89;
  }
  uint64_t v18 = v23 + 390 * v22;
LABEL_35:
  LOBYTE(v7) = *(unsigned char *)(v18 + v5 + 3862);
LABEL_92:
  LODWORD(v5) = *(unsigned __int16 *)(v4 + 24);
LABEL_93:
  if ((v5 - 175) > 0x16) {
    goto LABEL_109;
  }
  int v31 = 1 << (v5 + 81);
  if ((v31 & 0x1F) != 0)
  {
    uint64_t v40 = *(uint64_t **)(v4 + 32);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    uint64_t v43 = v40[5];
    uint64_t v44 = v40[6];
    uint64_t v45 = (unsigned __int8 *)(*(void *)(v43 + 40) + 16 * v44);
    if (*v45)
    {
      if (*v45 - 15 < 0x9C) {
        goto LABEL_109;
      }
    }
    else if ((*(_DWORD *)(*((void *)v45 + 1) + 8) & 0xFE) == 0x12)
    {
      goto LABEL_109;
    }
    uint64_t v93 = (uint64_t *)(*(void *)(v41 + 40) + 16 * v42);
    uint64_t v94 = sub_1CD7EFB68(a1[2], *v93, v93[1], v43, v44);
    if (v43 == v94 && v95 == v44) {
      goto LABEL_109;
    }
    uint64_t v50 = sub_1CD800168(a1[2], v4, v41, v42, v94, v95);
    goto LABEL_161;
  }
  if ((v31 & 0x700060) == 0)
  {
LABEL_109:
    uint64_t v51 = v4;
    goto LABEL_110;
  }
  unsigned int v32 = *(uint64_t **)(v4 + 32);
  uint64_t v33 = *v32;
  uint64_t v34 = *((unsigned int *)v32 + 2);
  uint64_t v36 = v32[5];
  uint64_t v35 = v32[6];
  uint64_t v37 = v32[10];
  uint64_t v38 = v32[11];
  int v39 = (unsigned __int8 *)(*(void *)(v37 + 40) + 16 * v38);
  if (*v39)
  {
    if (*v39 - 15 >= 0x9C) {
      goto LABEL_103;
    }
    goto LABEL_109;
  }
  if ((*(_DWORD *)(*((void *)v39 + 1) + 8) & 0xFE) == 0x12) {
    goto LABEL_109;
  }
LABEL_103:
  uint64_t v46 = sub_1CD7EFB68(a1[2], *(void *)(*(void *)(v33 + 40) + 16 * v34), *(void *)(*(void *)(v33 + 40) + 16 * v34 + 8), v37, v38);
  if (v37 == v46 && v47 == v38) {
    goto LABEL_109;
  }
  uint64_t v49 = a1[2];
  *(void *)&long long v569 = v33;
  DWORD2(v569) = v34;
  *(void *)&long long v570 = v36;
  DWORD2(v570) = v35;
  uint64_t v571 = v46;
  int v572 = v47;
  uint64_t v50 = sub_1CD800398(v49, v4, (uint64_t *)&v569, 3);
LABEL_161:
  uint64_t v51 = (uint64_t)v50;
  if (v50 == (uint64_t *)v4) {
    goto LABEL_109;
  }
  sub_1CCF76388((uint64_t)a1, v4, (uint64_t)v50);
LABEL_110:
  switch((char)v7)
  {
    case 0:
      return;
    case 1:
      sub_1CCF82038(a1, v51);
      return;
    case 2:
      goto LABEL_119;
    case 3:
      goto LABEL_120;
    case 4:
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1[1] + 1968))(a1[1], v51, 0, a1[2]);
      if (v52)
      {
        if (v51 != v52 || v53 != 0)
        {
          uint64_t v55 = *(unsigned __int16 *)(v51 + 58);
          if (v55 == 1)
          {
            sub_1CCF763E0((uint64_t)a1, v51, 0, v52, v53);
          }
          else
          {
            *(void *)&long long v569 = &v570;
            *((void *)&v569 + 1) = 0x800000000;
            if (v55)
            {
              unsigned int v97 = 0;
              for (uint64_t i = 0; i != v55; ++i)
              {
                if (v97 >= HIDWORD(v569)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v99 = (uint64_t *)(v569 + 16 * v97);
                *uint64_t v99 = v52;
                v99[1] = i;
                unsigned int v97 = ++DWORD2(v569);
              }
              uint64_t v117 = (uint64_t *)v569;
            }
            else
            {
              uint64_t v117 = (uint64_t *)&v570;
            }
            sub_1CCF76444((uint64_t)a1, v51, v117);
            if ((long long *)v569 != &v570) {
              free((void *)v569);
            }
          }
        }
      }
      else
      {
LABEL_119:
        if ((sub_1CCF764C4((uint64_t)a1, v51, a3, (uint64_t)a4) & 1) == 0) {
LABEL_120:
        }
          sub_1CCF7F46C((uint64_t)a1, v51, a3, (uint64_t)a4);
      }
      break;
    default:
      LODWORD(v5) = *(unsigned __int16 *)(v51 + 24);
      uint64_t v4 = v51;
      goto LABEL_122;
  }
}

void *sub_1CCF762E8(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = *(void *)(a2 + 656);
  a1[2] = a2;
  *(void *)(a2 + 656) = a1;
  *a1 = &unk_1F26420F0;
  uint64_t v4 = *(void *)(a3 + 24);
  if (v4)
  {
    if (v4 == a3)
    {
      a1[6] = a1 + 3;
      (*(void (**)(void))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24));
    }
    else
    {
      a1[6] = v4;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    a1[6] = 0;
  }
  return a1;
}

uint64_t sub_1CCF76388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  sub_1CCFCC50C(*(void *)(a1 + 16), a2, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    sub_1CD6A0E6C(v5, &v7);
  }
  return sub_1CCF8567C(a1, a2);
}

uint64_t sub_1CCF763E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  sub_1CD801F28(*(void *)(a1 + 16), a2, a3, a4, a5);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v10 = a4;
    sub_1CD6A0E6C(v8, &v10);
  }
  return sub_1CCF8567C(a1, a2);
}

uint64_t sub_1CCF76444(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v3 = a3;
  sub_1CD8020C0(*(void *)(a1 + 16), a2, a3);
  uint64_t v6 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    do
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7)
      {
        uint64_t v9 = *v3;
        sub_1CD6A0E6C(v7, &v9);
      }
      v3 += 2;
      --v6;
    }
    while (v6);
  }
  return sub_1CCF8567C(a1, a2);
}

uint64_t sub_1CCF764C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v12 = v11;
  uint64_t v13 = v4;
  uint64_t v1950 = *MEMORY[0x1E4F143B8];
  v1907 = v1909;
  uint64_t v1908 = 0x800000000;
  uint64_t v14 = *(unsigned __int8 **)(v11 + 64);
  v1897 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v1897, v14, 2);
  }
  int v15 = *(_DWORD *)(v12 + 60);
  int v1898 = v15;
  *(void *)&long long v1896 = 0;
  DWORD2(v1896) = 0;
  *(void *)&long long v1895 = 0;
  DWORD2(v1895) = 0;
  *(void *)&long long v1894 = 0;
  DWORD2(v1894) = 0;
  v1891 = 0;
  unsigned int v1892 = 0;
  char v1890 = 0;
  int v16 = *(unsigned __int16 *)(v12 + 24);
  uint64_t v17 = 1;
  switch(*(_WORD *)(v12 + 24))
  {
    case 0xB:
      v620 = *(void **)(v12 + 64);
      v1910[0] = v620;
      if (v620)
      {
        llvm::MetadataTracking::track((uint64_t)v1910, (unsigned __int8 *)v620, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1910[1]) = v15;
      v621 = *(uint64_t **)(v12 + 40);
      uint64_t v622 = *v621;
      uint64_t v623 = v621[1];
      v624 = *(llvm::Type ***)(v12 + 80);
      uint64_t v625 = *(void *)(v13 + 16);
      unsigned __int8 v626 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v625 + 40) + 40) + 272, 0);
      v627 = sub_1CD7ED6C4(v625, v624, (llvm *)v626, 0, 0, 0, 0, 0);
      uint64_t v629 = v628;
      uint64_t v630 = *((unsigned __int8 *)v627 + 92);
      uint64_t v631 = *(void *)(v13 + 16);
      uint64_t ConstantPool = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(*(void *)(v631 + 40) + 432));
      int v633 = 0;
      v1921[0] = (void *)(ConstantPool | 4);
      v1921[1] = 0;
      BYTE4(v1922) = 0;
      if (ConstantPool) {
        int v633 = *(_DWORD *)(ConstantPool + 12);
      }
      LODWORD(v1922) = v633;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      uint64_t v33 = sub_1CD7F00F8(v631, v622, v623, (uint64_t)v1910, v631 + 112, 0, (uint64_t)v627, v629, (long long *)v1921, (unsigned __int16)v630 | 0x100u, (v630 | 0x100uLL) >> 32, 0, (long long *)v1935, 0);
      uint64_t v35 = v634;
      v456 = (unsigned __int8 *)v1910[0];
      if (!v1910[0]) {
        goto LABEL_802;
      }
      int v457 = *(unsigned __int8 *)v1910[0];
      if ((v457 - 4) > 0x1E)
      {
        if ((v457 - 3) >= 0xFFFFFFFE) {
          v1335 = v1910[0];
        }
        else {
          v1335 = 0;
        }
        if ((v457 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v636 = (unint64_t)v1335 + 8;
          goto LABEL_1007;
        }
        goto LABEL_1160;
      }
      if ((*((unsigned char *)v1910[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1910[0] + 3)) {
        goto LABEL_802;
      }
      uint64_t v635 = *((void *)v1910[0] + 2);
      if ((v635 & 4) == 0) {
        goto LABEL_802;
      }
      unint64_t v636 = v635 & 0xFFFFFFFFFFFFFFF8;
      if (!v636) {
        goto LABEL_802;
      }
      goto LABEL_1007;
    case 0xC:
      uint64_t v701 = *(void *)(v12 + 80) + 24;
      v702 = *(uint64_t **)(v12 + 40);
      uint64_t v703 = *v702;
      uint64_t v704 = v702[1];
      uint64_t v705 = *(void *)(v13 + 8);
      uint64_t v706 = sub_1CD7EAF54(*(void *)(v13 + 16));
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v705 + 480))(v705, v701, v703, v704, v706))goto LABEL_806; {
      v707 = *(void **)(v12 + 64);
      }
      __b = v707;
      if (v707) {
        llvm::MetadataTracking::track((uint64_t)&__b, (unsigned __int8 *)v707, 2);
      }
      LODWORD(v1918) = *(_DWORD *)(v12 + 60);
      v708 = *(uint64_t **)(v12 + 40);
      uint64_t v709 = *v708;
      uint64_t v1877 = v708[1];
      v710 = *(llvm::detail::IEEEFloat **)(v12 + 80);
      uint64_t v711 = *((void *)v710 + 4);
      if ((_UNKNOWN *)v711 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1935[1], (llvm::detail::IEEEFloat *)((char *)v710 + 32));
      }
      else
      {
        v1935[1] = *((void **)v710 + 4);
        if ((*(_DWORD *)(v711 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v712 = *((unsigned char *)v710 + 52);
        int v713 = v712 & 7;
        BYTE12(v1936) = BYTE12(v1936) & 0xF0 | v712 & 8 | v712 & 7;
        DWORD2(v1936) = *((_DWORD *)v710 + 12);
        BOOL v715 = (v712 & 6) != 0 && v713 != 3;
        if (v713 == 1 || v715)
        {
          uint64_t v716 = *((unsigned int *)v1935[1] + 2);
          if ((v716 - 64) <= 0xFFFFFF7F) {
            v717 = (long long *)v1936;
          }
          else {
            v717 = &v1936;
          }
          v718 = (uint64_t *)((char *)v710 + 40);
          if ((*(_DWORD *)(*((void *)v710 + 4) + 8) - 64) < 0xFFFFFF80) {
            v718 = (uint64_t *)*((void *)v710 + 5);
          }
          if (v716 <= 0xFFFFFFBF)
          {
            unint64_t v719 = (unint64_t)(v716 + 64) >> 6;
            do
            {
              uint64_t v720 = *v718++;
              *(void *)v717 = v720;
              v717 = (long long *)((char *)v717 + 8);
              --v719;
            }
            while (v719);
          }
        }
      }
      *(void *)v1916 = v709;
      *(void *)&v1916[8] = v1877;
      v721 = v1935;
      if (v1935[1] == &unk_1CFB2E344) {
        v722 = (void **)v1936;
      }
      else {
        v722 = v1935;
      }
      if ((*((unsigned char *)v722 + 28) & 7) != 1) {
        goto LABEL_468;
      }
      if (v1935[1] == &unk_1CFB2E344) {
        v721 = (void **)v1936;
      }
      v1782 = v721[1];
      if (v1782[4] == 1)
      {
LABEL_468:
        BOOL v723 = 0;
      }
      else
      {
        int v1783 = v1782[2];
        v1784 = v1935;
        if (v1935[1] == &unk_1CFB2E344) {
          v1784 = (void **)v1936;
        }
        v1785 = &v1936;
        if (v1935[1] == &unk_1CFB2E344) {
          v1785 = (long long *)(v1936 + 16);
        }
        if ((v1783 - 64) <= 0xFFFFFF7F) {
          v1785 = (long long *)v1784[2];
        }
        BOOL v723 = ((*((void *)v1785 + ((v1783 - 2) >> 6)) >> (v1783 - 2)) & 1) == 0;
      }
      char v724 = 0;
      if (v723 || (v709 - 9) < 2u)
      {
        uint64_t v1843 = v1877;
        uint64_t v1857 = v709;
        uint64_t v726 = v13;
      }
      else
      {
        char v724 = 0;
        char v725 = v709;
        uint64_t v1843 = v1877;
        uint64_t v1857 = v709;
        uint64_t v726 = v13;
        do
        {
          v1916[0] = v725 - 1;
          *(void *)&v1916[8] = 0;
          if (sub_1CD7E95CC(*(uint64_t *)v1916, 0, (uint64_t)v1935))
          {
            if ((_BYTE)v709)
            {
              if (v1916[0])
              {
                uint64_t v727 = *(void *)(v13 + 8);
                if ((*(_WORD *)(v727 + 358 * v709 + 2 * v1916[0] + 73672) & 0xF0) == 0)
                {
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v727 + 616))(v727, v709, v1877))
                  {
                    llvm::EVT::getTypeForEVT((llvm::EVT *)v1916, *(llvm::LLVMContext **)(*(void *)(v13 + 16) + 56));
                    v710 = sub_1CC56C0C0((llvm *)0x2D, v710, v728, 0);
                    char v724 = 1;
                    uint64_t v1843 = *(void *)&v1916[8];
                    uint64_t v1857 = *(void *)v1916;
                  }
                }
              }
            }
          }
          char v725 = v1916[0];
        }
        while ((v1916[0] - 9) > 1u);
      }
      uint64_t v1642 = *(void *)(v726 + 16);
      unsigned __int8 v1643 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v726 + 8) + 32))(*(void *)(v726 + 8), *(void *)(**(void **)(v1642 + 40) + 40) + 272, 0);
      v1644 = sub_1CD7ED6C4(v1642, (llvm::Type **)v710, (llvm *)v1643, 0, 0, 0, 0, 0);
      uint64_t v1646 = v1645;
      uint64_t v1647 = *((unsigned __int8 *)v1644 + 92);
      uint64_t v1648 = *(void *)(v726 + 16);
      uint64_t v1649 = *(void *)(v1648 + 40);
      if (v724)
      {
        uint64_t v1650 = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(v1649 + 432));
        int v1652 = 0;
        v1910[0] = (void *)(v1650 | 4);
        v1910[1] = 0;
        BYTE4(v1910[2]) = 0;
        if (v1650) {
          int v1652 = *(_DWORD *)(v1650 + 12);
        }
        LODWORD(v1910[2]) = v1652;
        long long v1922 = 0u;
        *(_OWORD *)v1921 = 0u;
        v1653 = sub_1CD7FAEE8(v1648, 1, (uint64_t)&__b, v709, v1877, v1648 + 112, 0, v1651, (uint64_t)v1644, v1646, (long long *)v1910, v1857, v1843, (unsigned __int16)v1647 | 0x100u, (v1647 | 0x100uLL) >> 32, 0, (long long *)v1921);
      }
      else
      {
        uint64_t v1655 = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(v1649 + 432));
        int v1656 = 0;
        v1910[0] = (void *)(v1655 | 4);
        v1910[1] = 0;
        BYTE4(v1910[2]) = 0;
        if (v1655) {
          int v1656 = *(_DWORD *)(v1655 + 12);
        }
        LODWORD(v1910[2]) = v1656;
        long long v1922 = 0u;
        *(_OWORD *)v1921 = 0u;
        v1653 = sub_1CD7F00F8(v1648, v709, v1877, (uint64_t)&__b, v1648 + 112, 0, (uint64_t)v1644, v1646, (long long *)v1910, (unsigned __int16)v1647 | 0x100u, (v1647 | 0x100uLL) >> 32, 0, (long long *)v1921, 0);
      }
      v1657 = v1653;
      v1658 = v1654;
      if (v1935[1] == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v1936);
      }
      else if ((*((_DWORD *)v1935[1] + 2) - 64) <= 0xFFFFFF7F && (void)v1936)
      {
        MEMORY[0x1D25D9CB0](v1936, 0x1000C8000313F17);
      }
      if (!__b) {
        goto LABEL_1275;
      }
      int v1659 = *(unsigned __int8 *)__b;
      if ((v1659 - 4) > 0x1E)
      {
        if ((v1659 - 3) >= 0xFFFFFFFE) {
          v1688 = __b;
        }
        else {
          v1688 = 0;
        }
        if ((v1659 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1689 = (unint64_t)v1688 + 8;
LABEL_1320:
          v1935[0] = &__b;
          sub_1CC5FA668(v1689 + 16, v1935);
          goto LABEL_1275;
        }
        if (v1659 == 3) {
          *((void *)__b + 1) = 0;
        }
      }
      else if ((*((unsigned char *)__b + 1) & 0x7F) == 2 || *((_DWORD *)__b + 3))
      {
        uint64_t v1800 = *((void *)__b + 2);
        if ((v1800 & 4) != 0)
        {
          unint64_t v1689 = v1800 & 0xFFFFFFFFFFFFFFF8;
          if (v1689) {
            goto LABEL_1320;
          }
        }
      }
LABEL_1275:
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v1660 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *v1660 = v1657;
      v1660[1] = v1658;
      LODWORD(v1908) = v1908 + 1;
      goto LABEL_806;
    case 0xD:
    case 0xE:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x15:
    case 0x2E:
    case 0x2F:
    case 0x30:
      goto LABEL_814;
    case 0x16:
    case 0x17:
    case 0x1D:
      uint64_t v18 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 0, 0);
      goto LABEL_801;
    case 0x1E:
      v655 = *(uint64_t **)(v12 + 32);
      uint64_t v656 = *v655;
      uint64_t v657 = v655[1];
      uint64_t v658 = *(void *)(v13 + 16);
      unsigned __int8 v659 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v658 + 40) + 40) + 272, 0);
      uint64_t v660 = sub_1CD7EB744(v658, v656, v657, (uint64_t)&v1897, v659, 0);
      uint64_t v662 = v661;
      uint64_t v663 = *(void *)(v13 + 16);
      uint64_t v664 = *(void *)(v660 + 40) + 16 * v661;
      v665 = *(llvm **)v664;
      uint64_t v666 = *(void *)(v664 + 8);
      v668 = sub_1CD7F330C(v663, 29, (uint64_t)&v1897, *(llvm **)v664, v666);
      __int16 v670 = 0;
      uint64_t v671 = *(void *)(v663 + 832);
      if (v671) {
        __int16 v670 = *(_WORD *)(v671 + 8);
      }
      v672 = sub_1CCFDED5C(v663, 56, (const llvm::APInt *)&v1897, v665, v666, (uint64_t)v668, v667, v669, v660, v662, v670);
      uint64_t v674 = v673;
      uint64_t v675 = *(void *)(v13 + 16);
      unsigned __int8 v676 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v675 + 40) + 40) + 272, 0);
      uint64_t v677 = *(void *)(v13 + 16);
      unsigned __int8 v678 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v677 + 40) + 40) + 272, 0);
      v680 = sub_1CD7EBF14(v677, 0, (const llvm::APInt *)&v1897, (llvm *)v678, 0, 0, 0);
      uint64_t v681 = *(void *)(v675 + 832);
      if (v681) {
        __int16 v682 = *(_WORD *)(v681 + 8);
      }
      else {
        __int16 v682 = 0;
      }
      v1172 = sub_1CD7F3564((llvm::APFloatBase *)v675, (const char *)0x16, (uint64_t)&v1897, (llvm *)v676, 0, (uint64_t)v680, v679, v682);
      uint64_t v1174 = *(void *)(v13 + 16);
      uint64_t v1175 = v1172[5] + 16 * v1171;
      v1176 = *(llvm **)v1175;
      uint64_t v1177 = *(void *)(v1175 + 8);
      uint64_t v1178 = *(void *)(v1174 + 832);
      if (v1178) {
        LOWORD(v1178) = *(_WORD *)(v1178 + 8);
      }
      uint64_t v18 = sub_1CCFDED5C(v1174, 56, (const llvm::APInt *)&v1897, v1176, v1177, (uint64_t)v1172, v1171, v1173, (uint64_t)v672, v674, v1178);
      goto LABEL_801;
    case 0x1F:
    case 0x21:
    case 0x107:
    case 0x111:
    case 0x11F:
      goto LABEL_97;
    case 0x20:
      uint64_t v608 = *(void *)(v13 + 16);
      uint64_t v612 = 0;
      uint64_t v610 = 5;
      uint64_t v611 = 0;
      goto LABEL_436;
    case 0x33:
      uint64_t v729 = *(void *)(v12 + 40);
      v730 = *(llvm **)v729;
      uint64_t v731 = *(void *)(v729 + 8);
      int v732 = *(void *)v729;
      if (v732)
      {
        BOOL v1040 = (v732 - 120) >= 0x20 && (v732 - 2) >= 6;
        if (!v1040 || (v732 - 15) < 0x3C) {
          goto LABEL_646;
        }
      }
      else
      {
        if ((*(_DWORD *)(v731 + 8) & 0xFE) == 0x12) {
          int v733 = *(unsigned __int8 *)(**(void **)(v731 + 16) + 8);
        }
        else {
          int v733 = *(_DWORD *)(v731 + 8);
        }
        if (v733 == 13)
        {
LABEL_646:
          v1041 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, v730, v731, 0, 0);
LABEL_647:
          v960 = v1041;
          v933 = v1042;
LABEL_648:
          if (v1908 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v934 = (uint64_t **)((char *)v1907 + 16 * v1908);
          *v934 = v960;
LABEL_650:
          v934[1] = v933;
          goto LABEL_805;
        }
      }
      v1041 = sub_1CD7ECDC4(*(void *)(v13 + 16), (uint64_t)&v1897, (BOOL)v730, v731, 0, 0.0);
      goto LABEL_647;
    case 0x35:
      BOOL v145 = *(uint64_t **)(v12 + 32);
      uint64_t v146 = *v145;
      uint64_t v147 = *(void *)(*v145 + 40) + 16 * *((unsigned int *)v145 + 2);
      unint64_t v148 = *(llvm **)v147;
      uint64_t v149 = *(void **)(v147 + 8);
      v1935[0] = *(void **)v147;
      v1935[1] = v149;
      uint64_t v150 = *(void *)(v145[5] + 80);
      uint64_t v151 = (void *)(v150 + 24);
      if (*(_DWORD *)(v150 + 32) >= 0x41u) {
        uint64_t v151 = (void *)*v151;
      }
      uint64_t v152 = *(void *)(v13 + 16);
      if (*v151)
      {
        uint64_t v894 = v145[1];
        if ((_BYTE)v148) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v1935);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1935);
        }
        unint64_t v1067 = ExtendedSizeInBits;
        if (v896 == 1) {
        v1068 = (uint64_t *)(*(void *)(**(void **)(v12 + 32) + 40)
        }
                          + 16 * *(unsigned int *)(*(void *)(v12 + 32) + 8));
        ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), *v1068, v1068[1], *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
        v1071 = sub_1CD7EBF14(v152, v1067 >> 1, (const llvm::APInt *)&v1897, ShiftAmountTy, v1070, 0, 0);
        uint64_t v1074 = *(void *)(v152 + 832);
        if (v1074) {
          LOWORD(v1074) = *(_WORD *)(v1074 + 8);
        }
        uint64_t v233 = sub_1CCFDED5C(v152, 177, (const llvm::APInt *)&v1897, v148, (uint64_t)v149, v146, v894, v1073, (uint64_t)v1071, v1072, v1074);
        *(void *)&long long v1896 = v233;
        DWORD2(v1896) = v1075;
        uint64_t v231 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1076 = *(void *)(v12 + 40);
        uint64_t v154 = *(llvm **)v1076;
        uint64_t v155 = *(void *)(v1076 + 8);
        uint64_t v156 = (void *)*((void *)&v1896 + 1);
        uint64_t v1077 = *((void *)v231 + 104);
        if (v1077) {
          __int16 v158 = *(_WORD *)(v1077 + 8);
        }
        else {
          __int16 v158 = 0;
        }
        uint64_t v232 = 201;
      }
      else
      {
        uint64_t v153 = *(void *)(v12 + 40);
        uint64_t v154 = *(llvm **)v153;
        uint64_t v155 = *(void *)(v153 + 8);
        uint64_t v156 = (void *)v145[1];
        uint64_t v157 = *(void *)(v152 + 832);
        if (v157) {
          __int16 v158 = *(_WORD *)(v157 + 8);
        }
        else {
          __int16 v158 = 0;
        }
        uint64_t v231 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v232 = 201;
        uint64_t v233 = (uint64_t *)v146;
      }
      goto LABEL_225;
    case 0x36:
      uint64_t v614 = *(void *)(v12 + 32);
      uint64_t v613 = *(void *)(v12 + 40);
      v615 = *(llvm **)v613;
      v616 = *(void **)(v613 + 8);
      v1935[0] = *(void **)v613;
      v1935[1] = v616;
      v617 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v618 = *((void *)v617 + 104);
      if (v618) {
        __int16 v619 = *(_WORD *)(v618 + 8);
      }
      else {
        __int16 v619 = 0;
      }
      *(void *)&long long v1896 = sub_1CD7F3564(v617, (const char *)0xC7, (uint64_t)&v1897, v615, (uint64_t)v616, *(void *)v614, *(void **)(v614 + 8), v619);
      DWORD2(v1896) = v1016;
      v1017 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v1018 = *(void *)(v12 + 32);
      uint64_t v1019 = *(void *)(v1018 + 40);
      v1020 = *(void **)(v1018 + 48);
      uint64_t v1021 = *((void *)v1017 + 104);
      if (v1021) {
        __int16 v1022 = *(_WORD *)(v1021 + 8);
      }
      else {
        __int16 v1022 = 0;
      }
      v1023 = sub_1CD7F3564(v1017, (const char *)0xC8, (uint64_t)&v1897, v615, (uint64_t)v616, v1019, v1020, v1022);
      *(void *)&long long v1895 = v1023;
      DWORD2(v1895) = v1024;
      uint64_t v1025 = *(void *)(v13 + 16);
      if ((_BYTE)v615) {
        uint64_t v1026 = sub_1CB87E200((unsigned __int8 *)v1935);
      }
      else {
        uint64_t v1026 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1935);
      }
      unint64_t v1028 = v1026;
      if (v1027 == 1) {
      v1029 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)v1935[0], (uint64_t)v1935[1], *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
      }
      v1031 = sub_1CD7EBF14(v1025, v1028 >> 1, (const llvm::APInt *)&v1897, v1029, v1030, 0, 0);
      uint64_t v1034 = *(void *)(v1025 + 832);
      if (v1034) {
        LOWORD(v1034) = *(_WORD *)(v1034 + 8);
      }
      v1035 = sub_1CCFDED5C(v1025, 175, (const llvm::APInt *)&v1897, v615, (uint64_t)v616, (uint64_t)v1023, *((uint64_t *)&v1895 + 1), v1033, (uint64_t)v1031, v1032, v1034);
      *(void *)&long long v1895 = v1035;
      DWORD2(v1895) = v1037;
      uint64_t v1038 = *(void *)(v13 + 16);
      uint64_t v1039 = *(void *)(v1038 + 832);
      if (v1039) {
        LOWORD(v1039) = *(_WORD *)(v1039 + 8);
      }
      uint64_t v18 = sub_1CCFDED5C(v1038, 172, (const llvm::APInt *)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], v1896, *((uint64_t *)&v1896 + 1), v1036, (uint64_t)v1035, *((uint64_t *)&v1895 + 1), v1039);
      goto LABEL_801;
    case 0x37:
      if (*(_WORD *)(v12 + 58))
      {
        uint64_t v142 = 0;
        unint64_t v143 = 0;
        unsigned int v144 = v1908;
        do
        {
          if (v144 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v1907 + v144) = *(_OWORD *)(*(void *)(v12 + 32) + v142);
          unsigned int v144 = v1908 + 1;
          LODWORD(v1908) = v1908 + 1;
          ++v143;
          v142 += 40;
        }
        while (v143 < *(unsigned __int16 *)(v12 + 58));
      }
      goto LABEL_806;
    case 0x39:
      uint64_t v686 = *(void *)(v12 + 40);
      v687 = *(llvm **)v686;
      uint64_t v688 = *(void *)(v686 + 8);
      v689 = sub_1CD7EBB8C(*(void *)(v13 + 16), (const llvm::APInt *)&v1897, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48), *(llvm **)v686, v688);
      *(void *)&long long v1896 = v689;
      DWORD2(v1896) = v690;
      uint64_t v691 = *(void *)(v13 + 16);
      v692 = sub_1CD7EBF14(v691, 1, (const llvm::APInt *)&v1897, v687, v688, 0, 0);
      uint64_t v695 = *(void *)(v691 + 832);
      if (v695) {
        LOWORD(v695) = *(_WORD *)(v695 + 8);
      }
      v696 = sub_1CCFDED5C(v691, 56, (const llvm::APInt *)&v1897, v687, v688, (uint64_t)v689, *((uint64_t *)&v1896 + 1), v694, (uint64_t)v692, v693, v695);
      *(void *)&long long v1896 = v696;
      DWORD2(v1896) = v698;
      uint64_t v699 = *(void *)(v13 + 16);
      uint64_t v700 = *(void *)(v699 + 832);
      if (v700) {
        LOWORD(v700) = *(_WORD *)(v700 + 8);
      }
      uint64_t v18 = sub_1CCFDED5C(v699, 56, (const llvm::APInt *)&v1897, v687, v688, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v697, (uint64_t)v696, *((uint64_t *)&v1896 + 1), v700);
      goto LABEL_801;
    case 0x3A:
      uint64_t v637 = *(void *)(v12 + 40);
      v638 = *(void **)(v637 + 8);
      v1935[0] = *(void **)v637;
      v1935[1] = v638;
      uint64_t v639 = sub_1CD7F95FC(*(void *)(v13 + 16), (uint64_t)v1935[0], (uint64_t)v638, (uint64_t)v1935[0], (uint64_t)v638);
      if (!LOBYTE(v1935[0])) {
        goto LABEL_866;
      }
      uint64_t v642 = v640;
      uint64_t v643 = *(void *)(v13 + 8);
      if (LOBYTE(v1935[0]) != 1 && !*(void *)(v643 + 8 * LOBYTE(v1935[0]) + 96)) {
        goto LABEL_866;
      }
      uint64_t v1204 = v643 + 390 * LOBYTE(v1935[0]);
      char v1205 = *(unsigned char *)(v1204 + 3925);
      int v1206 = *(unsigned char *)(v1204 + 4022) & 0xFB;
      uint64_t v1207 = 63;
      if ((v1205 & 0xFB) != 0 || v1206 == 0)
      {
        unsigned __int8 v1209 = v1205 & 0xFB;
        uint64_t v1210 = v643 + 390 * LOBYTE(v1935[0]);
        char v1211 = *(unsigned char *)(v1210 + 4021);
        int v1212 = *(unsigned char *)(v1210 + 3926) & 0xFB;
        BOOL v1213 = (v1211 & 0xFB) != 0 && v1212 == 0;
        int v1214 = v1209;
        unsigned int v1215 = v1209 ? 64 : 63;
        uint64_t v1207 = v1213 ? 64 : v1215;
        if (v1214 && v1212 != 0)
        {
LABEL_866:
          v1921[0] = 0;
          LODWORD(v1921[1]) = 0;
          v1910[0] = 0;
          LODWORD(v1910[1]) = 0;
          v1217 = (void *)sub_1CD78EC68((unsigned __int8 *)v1935, *(llvm::IntegerType **)(*(void *)(v13 + 16) + 56));
          __b = v1217;
          *(void *)&long long v1918 = v1218;
          if (LOBYTE(v1935[0]))
          {
            v1219 = (llvm *)v1217;
            v1220 = *(uint64_t **)(v13 + 8);
            if ((LOBYTE(v1935[0]) == 1 || v1220[LOBYTE(v1935[0]) + 12])
              && (*((unsigned __int8 *)v1220 + 390 * LOBYTE(v1935[0]) + 4061) | 4) == 4
              && (LOBYTE(v1935[0]) == 1 || v1220[LOBYTE(v1935[0]) + 12])
              && (*((unsigned __int8 *)v1220 + 390 * LOBYTE(v1935[0]) + 4062) | 4) == 4
              && (LOBYTE(v1935[0]) == 1 || v1220[LOBYTE(v1935[0]) + 12])
              && (*((unsigned __int8 *)v1220 + 390 * LOBYTE(v1935[0]) + 4037) | 4) == 4
              && (LOBYTE(v1935[0]) == 1 || v1220[LOBYTE(v1935[0]) + 12])
              && (*((unsigned __int8 *)v1220 + 390 * LOBYTE(v1935[0]) + 4034) | 4) == 4
              && sub_1CD812374(v1220, v12, (uint64_t)v1921, (uint64_t)v1910, v1219, v1218, *(void *)(v13 + 16), 1, 0, 0, 0, 0, 0, 0, 0, 0))
            {
              v1308 = *(llvm::APFloatBase **)(v13 + 16);
              uint64_t v1309 = *((void *)v1308 + 104);
              if (v1309) {
                __int16 v1310 = *(_WORD *)(v1309 + 8);
              }
              else {
                __int16 v1310 = 0;
              }
              v1755 = sub_1CD7F3564(v1308, (const char *)0xC7, (uint64_t)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v1921[0], v1921[1], v1310);
              v1921[0] = v1755;
              LODWORD(v1921[1]) = v1756;
              v1757 = *(llvm::APFloatBase **)(v13 + 16);
              uint64_t v1758 = *((void *)v1757 + 104);
              if (v1758) {
                __int16 v1759 = *(_WORD *)(v1758 + 8);
              }
              else {
                __int16 v1759 = 0;
              }
              v1760 = sub_1CD7F3564(v1757, (const char *)0xC8, (uint64_t)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v1910[0], v1910[1], v1759);
              LODWORD(v1910[1]) = v1761;
              uint64_t v1762 = *(void *)(v13 + 16);
              if ((_BYTE)v1219) {
                uint64_t v1763 = sub_1CB87E200((unsigned __int8 *)&__b);
              }
              else {
                uint64_t v1763 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__b);
              }
              uint64_t v1765 = v1763;
              if (v1764 == 1) {
              v1766 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)__b, v1918, *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
              }
              v1768 = sub_1CD7EBF14(v1762, v1765, (const llvm::APInt *)&v1897, v1766, v1767, 0, 0);
              uint64_t v1771 = *(void *)(v13 + 16);
              uint64_t v1772 = *(void *)(v1771 + 832);
              if (v1772) {
                LOWORD(v1772) = *(_WORD *)(v1772 + 8);
              }
              v1773 = sub_1CCFDED5C(v1771, 175, (const llvm::APInt *)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v1760, (uint64_t)v1910[1], v1770, (uint64_t)v1768, v1769, v1772);
              v1910[0] = v1773;
              LODWORD(v1910[1]) = v1775;
              uint64_t v1776 = *(void *)(v13 + 16);
              uint64_t v1777 = *(void *)(v1776 + 832);
              if (v1777) {
                LOWORD(v1777) = *(_WORD *)(v1777 + 8);
              }
              v1779 = sub_1CCFDED5C(v1776, 172, (const llvm::APInt *)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v1755, (uint64_t)v1921[1], v1774, (uint64_t)v1773, (uint64_t)v1910[1], v1777);
              if (v1908 >= HIDWORD(v1908)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1780 = (uint64_t **)((char *)v1907 + 16 * v1908);
              *v1780 = v1779;
              v1780[1] = v1778;
              LODWORD(v1908) = v1908 + 1;
            }
          }
          goto LABEL_806;
        }
      }
      uint64_t v18 = sub_1CD7FFB18(*(void **)(v13 + 16), (const char *)v1207, (const llvm::APInt *)&v1897, v639, v642, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v641, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48));
LABEL_801:
      uint64_t v33 = v18;
      uint64_t v35 = v19;
      goto LABEL_802;
    case 0x3B:
    case 0x3C:
      if (v16 == 59) {
        uint64_t v80 = 65;
      }
      else {
        uint64_t v80 = 66;
      }
      uint64_t v81 = *(uint64_t **)(v12 + 40);
      uint64_t v82 = *v81;
      int v83 = *v81;
      if (!*v81) {
        goto LABEL_806;
      }
      uint64_t v84 = v81[1];
      uint64_t v85 = *(void *)(v13 + 8);
      if (v83 != 1 && !*(void *)(v85 + 8 * v82 + 96)) {
        goto LABEL_806;
      }
      if ((*(unsigned char *)(v85 + 390 * v82 + v80 + 3862) & 0xFB) != 0) {
        goto LABEL_806;
      }
      uint64_t v86 = sub_1CD7F95FC(*(void *)(v13 + 16), v82, v84, v82, v84);
      int v89 = sub_1CD7FFB18(*(void **)(v13 + 16), (const char *)v80, (const llvm::APInt *)&v1897, v86, v87, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v88, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48));
      goto LABEL_226;
    case 0x3D:
    case 0x3E:
      if (!sub_1CD81A2B8(*(void *)(v13 + 8), v12, (uint64_t)&v1896, *(void **)(v13 + 16), v7, v8, v9, v10))goto LABEL_806; {
      goto LABEL_152;
      }
    case 0x3F:
    case 0x40:
      uint64_t v57 = *(uint64_t **)(v12 + 32);
      uint64_t v58 = *v57;
      uint64_t v59 = (void *)v57[1];
      uint64_t v60 = *(void *)(*(void *)(*v57 + 40) + 16 * v59);
      uint64_t v62 = v57[5];
      uint64_t v61 = (void *)v57[6];
      uint64_t v63 = (llvm *)v60;
      if (v16 == 64) {
        uint64_t v64 = 159;
      }
      else {
        uint64_t v64 = 160;
      }
      if (*(void *)(*(void *)(*v57 + 40) + 16 * v59))
      {
        uint64_t v65 = *(void *)(v13 + 8);
        if ((v60 == 1 || *(void *)(v65 + 8 * v60 + 96))
          && (*(unsigned char *)(v65 + 390 * v60 + v64 + 3862) & 0xFB) == 0)
        {
          uint64_t v66 = *(void *)(v13 + 16);
          uint64_t v67 = *(void *)(v66 + 832);
          if (v67) {
            LOWORD(v67) = *(_WORD *)(v67 + 8);
          }
          uint64_t v70 = sub_1CCFDED5C(v66, 58, (const llvm::APInt *)&v1897, (llvm *)v60, 0, v58, (uint64_t)v59, v10, v62, (uint64_t)v61, v67);
          if (v1908 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          __int16 v71 = (uint64_t **)((char *)v1907 + 16 * v1908);
          *__int16 v71 = v70;
          v71[1] = v68;
          LODWORD(v1908) = v1908 + 1;
          uint64_t v72 = *(void *)(v13 + 16);
          uint64_t v73 = *(void *)(v72 + 832);
          if (v73) {
            LOWORD(v73) = *(_WORD *)(v73 + 8);
          }
          uint64_t v74 = sub_1CCFDED5C(v72, v64, (const llvm::APInt *)&v1897, v63, 0, v58, (uint64_t)v59, v69, v62, (uint64_t)v61, v73);
LABEL_46:
          if (v1908 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v76 = (uint64_t **)((char *)v1907 + 16 * v1908);
          unsigned __int8 *v76 = v74;
          v76[1] = v75;
          goto LABEL_48;
        }
      }
      v1935[0] = &v1936;
      v1935[1] = (void *)0x400000000;
      LOBYTE(v1910[0]) = v60;
      v1910[1] = 0;
      v1921[0] = (void *)sub_1CD78EC68((unsigned __int8 *)v1910, *(llvm::IntegerType **)(*(void *)(v13 + 16) + 56));
      v1921[1] = v395;
      if (sub_1CD0176B8(*(uint64_t **)(v13 + 8), *(unsigned __int16 *)(v12 + 24), v63, 0, (const llvm::APInt *)&v1897, v58, v59, v396, v62, v61, (uint64_t *)v1935, (llvm *)v1921[0], (uint64_t)v395, *(void *)(v13 + 16), 0, 0, 0, 0, 0,
                           0,
                           0,
                           0,
                           0))
      {
        uint64_t v397 = 0;
        char v398 = 1;
        do
        {
          char v399 = v398;
          uint64_t v400 = *(llvm::APFloatBase **)(v13 + 16);
          uint64_t v401 = *((void *)v400 + 104);
          char v1874 = v399;
          if (v401) {
            __int16 v402 = *(_WORD *)(v401 + 8);
          }
          else {
            __int16 v402 = 0;
          }
          uint64_t v403 = sub_1CD7F3564(v400, (const char *)0xC7, (uint64_t)&v1897, v63, 0, *((void *)v1935[0] + 2 * v397), *((void **)v1935[0] + 2 * v397 + 1), v402);
          uint64_t v405 = v404;
          __int16 v406 = 0;
          uint64_t v407 = *(llvm::APFloatBase **)(v13 + 16);
          uint64_t v408 = *((void *)v407 + 104);
          if (v408) {
            __int16 v406 = *(_WORD *)(v408 + 8);
          }
          uint64_t v409 = sub_1CD7F3564(v407, (const char *)0xC8, (uint64_t)&v1897, v63, 0, *(void *)((char *)v1935[0] + ((16 * v397) | 0x10)), *(void **)((char *)v1935[0] + ((16 * v397) | 0x10) + 8), v406);
          uint64_t v411 = v410;
          uint64_t v412 = *(void *)(v13 + 16);
          unsigned int v414 = sub_1CD3E12F4((unsigned __int8 *)v1921, v410, v413);
          unsigned int v415 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)v1921[0], (uint64_t)v1921[1], *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
          v417 = sub_1CD7EBF14(v412, (uint64_t)v414, (const llvm::APInt *)&v1897, v415, v416, 0, 0);
          uint64_t v420 = *(void *)(v13 + 16);
          uint64_t v421 = *(void *)(v420 + 832);
          if (v421) {
            LOWORD(v421) = *(_WORD *)(v421 + 8);
          }
          uint64_t v422 = sub_1CCFDED5C(v420, 175, (const llvm::APInt *)&v1897, v63, 0, (uint64_t)v409, v411, v419, (uint64_t)v417, v418, v421);
          uint64_t v425 = *(void *)(v13 + 16);
          uint64_t v426 = *(void *)(v425 + 832);
          if (v426) {
            LOWORD(v426) = *(_WORD *)(v426 + 8);
          }
          v428 = sub_1CCFDED5C(v425, 172, (const llvm::APInt *)&v1897, v63, 0, (uint64_t)v403, v405, v424, (uint64_t)v422, v411 & 0xFFFFFFFF00000000 | v423, v426);
          if (v1908 >= (unint64_t)HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          char v398 = 0;
          unsigned int v429 = (uint64_t **)((char *)v1907 + 16 * v1908);
          *unsigned int v429 = v428;
          v429[1] = v427;
          LODWORD(v1908) = v1908 + 1;
          uint64_t v397 = 2;
        }
        while ((v1874 & 1) != 0);
      }
      unsigned int v430 = v1935[0];
      if (v1935[0] != &v1936) {
        goto LABEL_1094;
      }
      goto LABEL_806;
    case 0x48:
    case 0x49:
      uint64_t v328 = *(uint64_t **)(v12 + 32);
      uint64_t v330 = *v328;
      uint64_t v329 = v328[1];
      uint64_t v331 = v328[5];
      uint64_t v332 = v328[6];
      uint64_t v1831 = v328[11];
      uint64_t v1840 = v328[10];
      if (v16 == 72) {
        uint64_t v333 = 56;
      }
      else {
        uint64_t v333 = 57;
      }
      uint64_t v334 = *(void *)(v330 + 40) + 16 * v329;
      uint64_t v1854 = *(void *)(v334 + 8);
      v1873 = *(llvm **)v334;
      uint64_t v335 = *(void *)(v13 + 16);
      uint64_t v336 = *(void *)(v335 + 832);
      if (v336) {
        LOWORD(v336) = *(_WORD *)(v336 + 8);
      }
      unsigned int v1806 = v333;
      uint64_t v337 = sub_1CCFDED5C(v335, v333, (const llvm::APInt *)&v1897, v1873, v1854, v330, v329, v10, v331, v332, v336);
      uint64_t v339 = v338;
      uint64_t v340 = *(void *)(v12 + 40);
      size_t __len = *(void *)(v340 + 24);
      v1819 = *(llvm **)(v340 + 16);
      v341 = (llvm *)(*(uint64_t (**)(void))(**(void **)(v13 + 8) + 400))();
      uint64_t v1825 = v342;
      if (v16 == 72) {
        unsigned int v343 = 12;
      }
      else {
        unsigned int v343 = 10;
      }
      uint64_t v344 = *(void **)(v13 + 16);
      uint64_t v345 = sub_1CD7EE368(v344, v343);
      uint64_t v348 = v344[104];
      if (v348) {
        LOWORD(v348) = *(_WORD *)(v348 + 8);
      }
      v1803 = v337;
      uint64_t v349 = sub_1CD7F5D38(v344, (const char *)0xC1, (const llvm::APInt *)&v1897, v341, v1825, (uint64_t)v337, v339, v347, v330, v329, v345, v346, SHIDWORD(v346), v348);
      uint64_t v1809 = v350;
      uint64_t v1812 = (uint64_t)v349;
      uint64_t v351 = sub_1CD7EBF14(*(void *)(v13 + 16), 1, (const llvm::APInt *)&v1897, v1873, v1854, 0, 0);
      uint64_t v353 = v352;
      uint64_t v354 = *(void *)(v13 + 16);
      uint64_t v356 = sub_1CD7EB80C(v354, v1840, v1831, (uint64_t)&v1897, (uint64_t)v1873, v1854);
      uint64_t v358 = *(void *)(v354 + 832);
      if (v358) {
        LOWORD(v358) = *(_WORD *)(v358 + 8);
      }
      unsigned int v359 = sub_1CCFDED5C(v354, 171, (const llvm::APInt *)&v1897, v1873, v1854, v356, v355, v357, (uint64_t)v351, v353, v358);
      uint64_t v362 = *(void *)(v13 + 16);
      uint64_t v363 = *(void *)(v362 + 832);
      if (v363) {
        LOWORD(v363) = *(_WORD *)(v363 + 8);
      }
      uint64_t v364 = sub_1CCFDED5C(v362, v1806, (const llvm::APInt *)&v1897, v1873, v1854, (uint64_t)v337, v339, v361, (uint64_t)v359, v360, v363);
      uint64_t v366 = v365;
      uint64_t v367 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, v1873, v1854, 0, 0);
      uint64_t v369 = v368;
      int v370 = *(void **)(v13 + 16);
      uint64_t v371 = sub_1CD7EE368(v370, 0x11u);
      __int16 v374 = 0;
      *(void *)v1807 = v366;
      if (v16 == 72) {
        uint64_t v375 = v366;
      }
      else {
        uint64_t v375 = v339;
      }
      if (v16 == 72) {
        uint64_t v376 = (uint64_t)v364;
      }
      else {
        uint64_t v376 = (uint64_t)v1803;
      }
      uint64_t v377 = v370[104];
      if (v377) {
        __int16 v374 = *(_WORD *)(v377 + 8);
      }
      uint64_t v378 = sub_1CD7F5D38(v370, (const char *)0xC1, (const llvm::APInt *)&v1897, v341, v1825, v376, v375, v373, (uint64_t)v367, v369, v371, v372, SHIDWORD(v372), v374);
      uint64_t v380 = v379;
      uint64_t v381 = *(void *)(v13 + 16);
      uint64_t v382 = sub_1CD7EB80C(v381, v1840, v1831, (uint64_t)&v1897, (uint64_t)v341, v1825);
      uint64_t v385 = *(void *)(v381 + 832);
      if (v385) {
        LOWORD(v385) = *(_WORD *)(v385 + 8);
      }
      unint64_t v386 = sub_1CCFDED5C(v381, 171, (const llvm::APInt *)&v1897, v341, v1825, (uint64_t)v378, v380, v384, v382, v383, v385);
      unint64_t v389 = v380 & 0xFFFFFFFF00000000 | v388;
      uint64_t v390 = *(void *)(v13 + 16);
      uint64_t v391 = *(void *)(v390 + 832);
      if (v391) {
        LOWORD(v391) = *(_WORD *)(v391 + 8);
      }
      uint64_t v393 = sub_1CCFDED5C(v390, 172, (const llvm::APInt *)&v1897, v341, v1825, v1812, v1809, v387, (uint64_t)v386, v389, v391);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v394 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *uint64_t v394 = v364;
      v394[1] = *(uint64_t **)v1807;
      LODWORD(v1908) = v1908 + 1;
      uint64_t v74 = sub_1CD7EB8D4(*(void *)(v13 + 16), (uint64_t)v393, v392, (uint64_t)&v1897, v1819, __len, (char)v1873, v1854);
      goto LABEL_46;
    case 0x4C:
    case 0x4E:
      v1935[0] = 0;
      LODWORD(v1935[1]) = 0;
      v1921[0] = 0;
      LODWORD(v1921[1]) = 0;
      sub_1CD01D500(*(void *)(v13 + 8), v12, (uint64_t *)v1935, (uint64_t)v1921, *(void *)(v13 + 16), v8, v9, v10);
      goto LABEL_52;
    case 0x4D:
    case 0x4F:
      v1935[0] = 0;
      LODWORD(v1935[1]) = 0;
      v1921[0] = 0;
      LODWORD(v1921[1]) = 0;
      sub_1CD818EA4(*(void *)(v13 + 8), v12, (uint64_t *)v1935, (uint64_t)v1921, *(void *)(v13 + 16), v8, v9, v10);
      goto LABEL_52;
    case 0x50:
    case 0x51:
      v1935[0] = 0;
      LODWORD(v1935[1]) = 0;
      v1921[0] = 0;
      LODWORD(v1921[1]) = 0;
      if (!sub_1CD8191AC(*(uint64_t **)(v13 + 8), v12, (uint64_t **)v1935, (uint64_t)v1921, *(void *)(v13 + 16)))goto LABEL_806; {
LABEL_52:
      }
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v1907 + v1908) = *(_OWORD *)v1935;
      unsigned int v77 = HIDWORD(v1908);
      unsigned int v78 = v1908 + 1;
      LODWORD(v1908) = v1908 + 1;
      long long v79 = *(_OWORD *)v1921;
      goto LABEL_99;
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
      uint64_t v18 = sub_1CD01C6A4(*(unsigned int **)(v13 + 8), v12, *(void *)(v13 + 16), v6, v7, v8, v9, v10);
      goto LABEL_801;
    case 0x56:
    case 0x57:
      uint64_t v18 = sub_1CD817F24(*(void *)(v13 + 8), v12, *(void **)(v13 + 16));
      goto LABEL_801;
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
      uint64_t v18 = sub_1CD818254(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_801;
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
      unsigned int v24 = *(uint64_t **)(v13 + 8);
      uint64_t v25 = *(void **)(v12 + 64);
      v1935[0] = v25;
      if (v25)
      {
        llvm::MetadataTracking::track((uint64_t)v1935, (unsigned __int8 *)v25, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1935[1]) = v15;
      uint64_t v26 = *(uint64_t **)(v12 + 32);
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      uint64_t v29 = v26[5];
      uint64_t v30 = v26[6];
      uint64_t v31 = *(void *)(v26[10] + 80);
      unsigned int v32 = (unsigned int *)(v31 + 24);
      if (*(_DWORD *)(v31 + 32) >= 0x41u) {
        unsigned int v32 = *(unsigned int **)v32;
      }
      uint64_t v33 = sub_1CD01CDD4(v24, v16, (const llvm::APInt *)v1935, v27, v28, v29, v30, *v32, *(void *)(v13 + 16));
      uint64_t v35 = v34;
      if (!v1935[0]) {
        goto LABEL_17;
      }
      int v36 = *(unsigned __int8 *)v1935[0];
      if ((v36 - 4) > 0x1E)
      {
        if ((v36 - 3) >= 0xFFFFFFFE) {
          BOOL v203 = v1935[0];
        }
        else {
          BOOL v203 = 0;
        }
        if ((v36 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v204 = (unint64_t)v203 + 8;
LABEL_180:
          v1921[0] = v1935;
          sub_1CC5FA668(v204 + 16, v1921);
          goto LABEL_17;
        }
        if (v36 == 3) {
          *((void *)v1935[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1935[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1935[0] + 3))
      {
        uint64_t v1690 = *((void *)v1935[0] + 2);
        if ((v1690 & 4) != 0)
        {
          unint64_t v204 = v1690 & 0xFFFFFFFFFFFFFFF8;
          if (v204) {
            goto LABEL_180;
          }
        }
      }
LABEL_17:
      if (!v33) {
        goto LABEL_806;
      }
      goto LABEL_802;
    case 0x61:
      uint64_t v120 = *(void *)(v12 + 40);
      __int16 v121 = *(llvm **)v120;
      uint64_t v122 = *(void *)(v120 + 8);
      uint64_t v123 = *(void *)(v13 + 8);
      if (v121 != 1 && (!(_BYTE)v121 || !*(void *)(v123 + 8 * v121 + 96))
        || (*(unsigned __int8 *)(v123 + 390 * v121 + 3958) | 4) != 4
        || v121 != 1 && !*(void *)(v123 + 8 * v121 + 96)
        || (*(unsigned __int8 *)(v123 + 390 * v121 + 4084) | 4) != 4)
      {
        goto LABEL_806;
      }
      __int16 v124 = *(_WORD *)(v12 + 72);
      BOOL v125 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v126 = *(void *)(v12 + 32);
      uint64_t v127 = *(void *)(v126 + 40);
      uint8x8_t v128 = *(void **)(v126 + 48);
      uint64_t v129 = *((void *)v125 + 104);
      if (v129) {
        __int16 v130 = *(_WORD *)(v129 + 8);
      }
      else {
        __int16 v130 = 0;
      }
      *(void *)&long long v1896 = sub_1CD7F3564(v125, (const char *)0xDE, (uint64_t)&v1897, v121, v122, v127, v128, v130);
      DWORD2(v1896) = v433;
      int v89 = sub_1CCFDED5C(*(void *)(v13 + 16), 96, (const llvm::APInt *)&v1897, v121, v122, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v434, v1896, *((uint64_t *)&v1896 + 1), v124);
      goto LABEL_226;
    case 0x84:
      if (!sub_1CD8133A4(*(uint64_t **)(v13 + 8), v12, (uint64_t)&v1896, *(void *)(v13 + 16))) {
        goto LABEL_806;
      }
      uint64_t v119 = v1896;
      goto LABEL_112;
    case 0x85:
      if (!sub_1CD813B2C(*(void *)(v13 + 8), v12, (uint64_t)&v1896, (uint64_t)&v1895, *(void *)(v13 + 16)))goto LABEL_806; {
      sub_1CD800DA0(*(void *)(v13 + 16), v12, 1, v1895, SDWORD2(v1895));
      }
      uint64_t v117 = (void *)v1896;
      sub_1CD800DA0(*(void *)(v13 + 16), v12, 0, v1896, SDWORD2(v1896));
      uint64_t v118 = *(void *)(v13 + 32);
      if (v118)
      {
        v1935[0] = v117;
        sub_1CD6A0E6C(v118, (uint64_t *)v1935);
      }
      sub_1CCF8567C(v13, v12);
      goto LABEL_814;
    case 0x86:
    case 0xCA:
      goto LABEL_492;
    case 0x87:
    case 0xCB:
      if (sub_1CD814434(*(uint64_t **)(v13 + 8), v12, (uint64_t)&v1896, (uint64_t)&v1895, *(void *)(v13 + 16)))
      {
        if (v1908 >= HIDWORD(v1908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v1907 + v1908) = v1896;
        LODWORD(v1908) = v1908 + 1;
        if (!sub_1CD407020(v12)) {
          goto LABEL_806;
        }
        long long v79 = v1895;
LABEL_98:
        unsigned int v78 = v1908;
        unsigned int v77 = HIDWORD(v1908);
LABEL_99:
        if (v78 >= v77) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v1907 + v78) = v79;
        goto LABEL_805;
      }
      int v16 = *(unsigned __int16 *)(v12 + 24);
LABEL_492:
      *(_OWORD *)v1914 = *(_OWORD *)*(void *)(v12 + 40);
      v743 = *(unsigned __int8 **)(v12 + 64);
      v1905 = v743;
      if (v743) {
        llvm::MetadataTracking::track((uint64_t)&v1905, v743, 2);
      }
      int v1906 = *(_DWORD *)(v12 + 60);
      v744 = (uint64_t **)(*(void *)(v12 + 32) + 40 * sub_1CD407020(v12));
      v746 = *v744;
      v745 = v744[1];
      uint64_t v747 = (*v744)[5] + 16 * v745;
      v749 = *(llvm **)v747;
      uint64_t v748 = *(void *)(v747 + 8);
      if (*(void *)v747 == 5 && *(void *)(*(void *)(v13 + 8) + 184))
      {
        if (LOBYTE(v1914[0]) == 11) {
          goto LABEL_1181;
        }
        uint64_t v1493 = *(void *)(v747 + 8);
        if (sub_1CD787F08((unsigned __int8 *)v1914, 11, 0)) {
          goto LABEL_1181;
        }
        uint64_t v1669 = *(void *)(v13 + 8);
        BOOL v1670 = sub_1CD407020(v12);
        uint64_t v748 = v1493;
        if (LOBYTE(v1914[0]))
        {
          if (LOBYTE(v1914[0]) == 1 || *(void *)(v1669 + 8 * LOBYTE(v1914[0]) + 96))
          {
            uint64_t v1671 = 215;
            if (v1670) {
              uint64_t v1671 = 137;
            }
            if (!*(unsigned char *)(v1669 + 390 * LOBYTE(v1914[0]) + v1671 + 3862))
            {
LABEL_1181:
              v1494 = sub_1CD7F0664(*(void *)(v13 + 16), 11, 0, 1u);
              uint64_t v1866 = v1495;
              uint64_t v1886 = (uint64_t)v1494;
              if (v16 == 202 || v16 == 134)
              {
                uint64_t v1496 = *(void *)(v13 + 16);
                v1497 = sub_1CD7EBF14(v1496, 0x80000000, (const llvm::APInt *)&v1905, (llvm *)5, 0, 0, 0);
                __int16 v1500 = 0;
                uint64_t v1501 = *(void *)(v1496 + 832);
                if (v1501) {
                  __int16 v1500 = *(_WORD *)(v1501 + 8);
                }
                v746 = sub_1CCFDED5C(v1496, 173, (const llvm::APInt *)&v1905, (llvm *)5, 0, (uint64_t)v746, (uint64_t)v745, v1499, (uint64_t)v1497, v1498, v1500);
                LODWORD(v745) = v1502;
              }
              v1504 = sub_1CD7EBF14(*(void *)(v13 + 16), 1127219200, (const llvm::APInt *)&v1905, (llvm *)5, 0, 0, 0);
              unsigned int v1505 = v1503;
              uint64_t v1506 = *(void *)(v13 + 16);
              if (*(unsigned char *)(*(void *)(**(void **)(v1506 + 40) + 40) + 272))
              {
                unsigned int v1505 = v745;
                uint64_t v1851 = (uint64_t)v746;
                LODWORD(v745) = v1503;
              }
              else
              {
                uint64_t v1851 = (uint64_t)v1504;
                v1504 = v746;
              }
              uint64_t v1604 = v1506 + 112;
              memset(v1910, 0, 21);
              long long v1936 = 0u;
              *(_OWORD *)v1935 = 0u;
              v1605 = sub_1CD78ED48(v1506, v1506 + 112, 0, (uint64_t)&v1905, (uint64_t)v1504, v745, v1886, v1866, (long long *)v1910, 0, 0, 0, (long long *)v1935);
              uint64_t v1607 = v1606;
              v1608 = sub_1CD7F6604(*(void *)(v13 + 16), v1886, v1866, 4, 0, (const llvm::APInt *)&v1905, 0);
              uint64_t v1609 = *(void *)(v13 + 16);
              *(void *)&long long v1918 = 0;
              __b = 0;
              *(void *)((char *)&v1918 + 5) = 0;
              long long v1936 = 0u;
              *(_OWORD *)v1935 = 0u;
              v1611 = sub_1CD78ED48(v1609, v1604, 0, (uint64_t)&v1905, v1851, v1505, (uint64_t)v1608, v1610, (long long *)&__b, 0, 0, 0, (long long *)v1935);
              __int16 v1614 = 0;
              uint64_t v1615 = *(void *)(v13 + 16);
              uint64_t v1616 = *(void *)(v1615 + 832);
              if (v1616) {
                __int16 v1614 = *(_WORD *)(v1616 + 8);
              }
              v1617 = sub_1CCFDED5C(v1615, 2, (const llvm::APInt *)&v1905, (llvm *)1, 0, (uint64_t)v1605, v1607, v1613, (uint64_t)v1611, v1612, v1614);
              uint64_t v1618 = *(void *)(v13 + 16);
              memset(v1916, 0, sizeof(v1916));
              long long v1936 = 0u;
              *(_OWORD *)v1935 = 0u;
              v1620 = sub_1CD7F00F8(v1618, 11, 0, (uint64_t)&v1905, (uint64_t)v1617, v1619, v1886, v1866, (long long *)v1916, 0, 0, 0, (long long *)v1935, 0);
              uint64_t v1622 = v1621;
              BOOL v1623 = v16 == 134 || v16 == 202;
              double v1624 = 4.50359963e15;
              if (v1623) {
                double v1624 = 4.50360177e15;
              }
              v1625 = sub_1CD7ECDC4(*(void *)(v13 + 16), (uint64_t)&v1905, 11, 0, 0, v1624);
              uint64_t v1627 = v1626;
              if (sub_1CD407020(v12))
              {
                v1629 = *(void **)(v13 + 16);
                *(_OWORD *)v1921 = xmmword_1CFB2D490;
                long long v1922 = unk_1CFB2D4A0;
                uint64_t v1630 = *(void *)(v12 + 32);
                int v1631 = *(_DWORD *)(v1630 + 8);
                v1935[0] = *(void **)v1630;
                LODWORD(v1935[1]) = v1631;
                *(void *)&long long v1936 = v1620;
                DWORD2(v1936) = v1622;
                v1937 = v1625;
                int v1938 = v1627;
                v751 = sub_1CD7EB5F0(v1629, (const char *)0x66, (const llvm::APInt *)&v1905, (uint64_t *)v1921, 2, (uint64_t *)v1935, 3);
                unsigned int v750 = v1632;
                *(void *)&long long v1895 = v751;
                DWORD2(v1895) = 1;
                v1633 = (void **)(v751[5] + 16 * v1632);
                if (LOBYTE(v1914[0]) == *(unsigned __int8 *)v1633)
                {
                  if (LOBYTE(v1914[0])) {
                    goto LABEL_498;
                  }
                  v1634 = v1914[1];
                  if (v1914[1] == v1633[1]) {
                    goto LABEL_498;
                  }
                }
                else
                {
                  v1634 = v1914[1];
                }
                sub_1CD7EB400(*(void *)(v13 + 16), (uint64_t)v751, v1632, (uint64_t)v751, SDWORD2(v1895), (const llvm::APInt *)&v1905, (uint64_t)v1914[0], (uint64_t)v1634, (uint64_t)v1935);
                v751 = v1935[0];
                unsigned int v750 = v1935[1];
                *(void *)&long long v1895 = v1936;
                DWORD2(v1895) = DWORD2(v1936);
                goto LABEL_498;
              }
              uint64_t v1635 = *(void *)(v13 + 16);
              uint64_t v1636 = *(void *)(v1635 + 832);
              if (v1636) {
                LOWORD(v1636) = *(_WORD *)(v1636 + 8);
              }
              v1637 = sub_1CCFDED5C(v1635, 97, (const llvm::APInt *)&v1905, (llvm *)0xB, 0, (uint64_t)v1620, v1622, v1628, (uint64_t)v1625, v1627, v1636);
              v751 = (void *)sub_1CD7EB1C8(*(void *)(v13 + 16), (uint64_t)v1637, v1638, (uint64_t)&v1905, (uint64_t)v1914[0], (uint64_t)v1914[1]);
              unsigned int v750 = v1639;
LABEL_498:
              if (v1905)
              {
                int v752 = *v1905;
                if ((v752 - 4) <= 0x1E)
                {
                  if ((v1905[1] & 0x7F) != 2 && !*((_DWORD *)v1905 + 3)) {
                    goto LABEL_502;
                  }
                  uint64_t v1781 = *((void *)v1905 + 2);
                  if ((v1781 & 4) == 0) {
                    goto LABEL_502;
                  }
                  unint64_t v913 = v1781 & 0xFFFFFFFFFFFFFFF8;
                  if (!v913) {
                    goto LABEL_502;
                  }
                  goto LABEL_577;
                }
                if ((v752 - 3) >= 0xFFFFFFFE) {
                  v912 = v1905;
                }
                else {
                  v912 = 0;
                }
                if ((v752 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v913 = (unint64_t)(v912 + 8);
LABEL_577:
                  v1935[0] = &v1905;
                  sub_1CC5FA668(v913 + 16, v1935);
                  goto LABEL_502;
                }
                if (v752 == 3) {
                  *((void *)v1905 + 1) = 0;
                }
              }
LABEL_502:
              *(void *)&long long v1896 = v751;
              DWORD2(v1896) = v750;
              if (v751)
              {
                uint64_t v753 = *((void *)&v1896 + 1);
                if (v1908 >= HIDWORD(v1908)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v754 = (char *)v1907 + 16 * v1908;
                void *v754 = v751;
                v754[1] = v753;
                LODWORD(v1908) = v1908 + 1;
                if (sub_1CD407020(v12))
                {
                  if (v1908 >= HIDWORD(v1908)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v1907 + v1908) = v1895;
                  goto LABEL_48;
                }
              }
              goto LABEL_806;
            }
          }
        }
      }
      unsigned int v750 = 0;
      v751 = 0;
      if (v16 == 134 || v16 == 202) {
        goto LABEL_498;
      }
      uint64_t v1885 = v748;
      if ((((_BYTE)v749 - 5) > 1u || LOBYTE(v1914[0]) != 10)
        && (v749 != 6 || LOBYTE(v1914[0]) != 11))
      {
        uint64_t v1490 = *(void *)(v13 + 8);
        BOOL v1491 = sub_1CD407020(v12);
        unsigned int v750 = LOBYTE(v1914[0]);
        if (LOBYTE(v1914[0]))
        {
          if (LOBYTE(v1914[0]) == 1 || *(void *)(v1490 + 8 * LOBYTE(v1914[0]) + 96))
          {
            uint64_t v1492 = 96;
            if (v1491) {
              uint64_t v1492 = 101;
            }
            if ((*(unsigned char *)(v1490 + 390 * LOBYTE(v1914[0]) + v1492 + 3862) & 0xFB) == 0)
            {
              BOOL v1691 = sub_1CD407020(v12);
              v1692 = *(llvm::APFloatBase **)(v13 + 16);
              if (v1691)
              {
                *(_OWORD *)v1935 = *(_OWORD *)v1914;
                LOBYTE(v1936) = 1;
                *((void *)&v1936 + 1) = 0;
                uint64_t v1693 = *(void *)(v12 + 32);
                int v1694 = *(_DWORD *)(v1693 + 8);
                v1921[0] = *(void **)v1693;
                LODWORD(v1921[1]) = v1694;
                *(void *)&long long v1922 = v746;
                DWORD2(v1922) = v745;
                v1695 = sub_1CD7EB5F0(v1692, (const char *)0x86, (const llvm::APInt *)&v1905, (uint64_t *)v1935, 2, (uint64_t *)v1921, 2);
              }
              else
              {
                uint64_t v1698 = *((void *)v1692 + 104);
                if (v1698) {
                  __int16 v1699 = *(_WORD *)(v1698 + 8);
                }
                else {
                  __int16 v1699 = 0;
                }
                v1695 = sub_1CD7F3564(v1692, (const char *)0xCA, (uint64_t)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v746, v745, v1699);
              }
              unsigned int v1839 = v1696;
              v1852 = v1695;
              uint64_t v1700 = *(void *)(v13 + 16);
              v1869 = (llvm *)(*(uint64_t (**)(void, uint64_t, void, llvm *, uint64_t))(**(void **)(v13 + 8)
                                                                                                  + 400))(*(void *)(v13 + 8), *(void *)(**(void **)(v1700 + 40) + 40) + 272, *(void *)(v1700 + 56), v749, v1885);
              uint64_t v1702 = v1701;
              v1703 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1905, v749, v1885, 0, 0);
              uint64_t v1705 = v1704;
              uint64_t v1706 = sub_1CD7EE368((void *)v1700, 0x14u);
              __int16 v1709 = 0;
              uint64_t v1710 = *(void *)(v1700 + 832);
              if (v1710) {
                __int16 v1709 = *(_WORD *)(v1710 + 8);
              }
              v1711 = sub_1CD7F5D38((void *)v1700, (const char *)0xC1, (const llvm::APInt *)&v1905, v1869, v1702, (uint64_t)v746, (uint64_t)v745, v1708, (uint64_t)v1703, v1705, v1706, v1707, SHIDWORD(v1707), v1709);
              uint64_t v1713 = v1712;
              v1714 = sub_1CD7EB364(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1905, 0);
              uint64_t v1716 = v1715;
              v1717 = sub_1CD7EB364(*(void *)(v13 + 16), 4, (const llvm::APInt *)&v1905, 0);
              uint64_t v1718 = v1714[5] + 16 * v1716;
              v1720 = sub_1CD3E1260(*(void **)(v13 + 16), (const llvm::APInt *)&v1905, *(llvm **)v1718, *(void *)(v1718 + 8), (uint64_t)v1711, v1713, (uint64_t)v1717, v1719, (uint64_t)v1714, v1716, SHIDWORD(v1716));
              if (((_BYTE)v749 - 3) <= 3u)
              {
                uint64_t v1723 = (uint64_t)v1720;
                uint64_t v1724 = v1721;
                uint64_t v1725 = *(void *)(v13 + 16);
                if (*(unsigned char *)(*(void *)(**(void **)(v1725 + 40) + 40) + 272)) {
                  uint64_t v1726 = qword_1CFB2D4B0[(char)((_BYTE)v749 - 3)];
                }
                else {
                  uint64_t v1726 = qword_1CFB2D4B0[(char)((_BYTE)v749 - 3)] << 32;
                }
                uint64_t v1727 = **(void **)(v1725 + 56);
                v1728 = *(llvm::ConstantInt **)(v1727 + 1984);
                unint64_t v1729 = *(unsigned int *)(v1727 + 1992);
                LODWORD(v1935[1]) = v1729 >> 8;
                if (v1729 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v1729 <= 0xFF) {
                  unint64_t v1730 = 0;
                }
                else {
                  unint64_t v1730 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1729) + 63);
                }
                v1935[0] = (void *)(v1730 & v1726);
                v1731 = (llvm::Type **)llvm::ConstantInt::get(v1728, (llvm::LLVMContext *)v1935, v1722);
                if (LODWORD(v1935[1]) >= 0x41 && v1935[0]) {
                  MEMORY[0x1D25D9CB0](v1935[0], 0x1000C8000313F17);
                }
                uint64_t v1732 = *(void *)(v13 + 16);
                unsigned __int8 v1733 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v1732 + 40) + 40) + 272, 0);
                v1735 = sub_1CD7ED6C4(v1732, v1731, (llvm *)v1733, 0, 0, 0, 0, 0);
                uint64_t v1737 = v1734;
                __int16 v1738 = 0;
                char v1739 = *((unsigned char *)v1735 + 92);
                uint64_t v1740 = *(void *)(v13 + 16);
                uint64_t v1741 = v1735[5] + 16 * v1734;
                v1742 = *(llvm **)v1741;
                uint64_t v1743 = *(void *)(v1741 + 8);
                uint64_t v1744 = *(void *)(v1740 + 832);
                if (v1744) {
                  __int16 v1738 = *(_WORD *)(v1744 + 8);
                }
                v1745 = sub_1CCFDED5C(v1740, 56, (const llvm::APInt *)&v1905, v1742, v1743, (uint64_t)v1735, v1734, v1736, v1723, v1724, v1738);
                unint64_t v1747 = v1737 & 0xFFFFFFFF00000000 | v1746;
                unsigned __int8 v1748 = 63 - __clz(((1 << v1739) | 4) & -((1 << v1739) | 4));
                uint64_t v1749 = *(void *)(v13 + 16);
                if (LOBYTE(v1914[0]) == 10)
                {
                  uint64_t v1750 = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(*(void *)(v1749 + 40) + 432));
                  int v1751 = 0;
                  v1910[0] = (void *)(v1750 | 4);
                  v1910[1] = 0;
                  BYTE4(v1910[2]) = 0;
                  if (v1750) {
                    int v1751 = *(_DWORD *)(v1750 + 12);
                  }
                  LODWORD(v1910[2]) = v1751;
                  long long v1936 = 0u;
                  *(_OWORD *)v1935 = 0u;
                  v1752 = sub_1CD7F00F8(v1749, 10, 0, (uint64_t)&v1905, v1749 + 112, 0, (uint64_t)v1745, v1747, (long long *)v1910, v1748 | 0x100u, (v1748 | 0x100uLL) >> 32, 0, (long long *)v1935, 0);
                  unsigned int v1754 = v1753;
                }
                else
                {
                  v1787 = v1914[0];
                  v1788 = v1914[1];
                  uint64_t v1789 = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(*(void *)(v1749 + 40) + 432));
                  int v1791 = 0;
                  v1910[0] = (void *)(v1789 | 4);
                  v1910[1] = 0;
                  BYTE4(v1910[2]) = 0;
                  if (v1789) {
                    int v1791 = *(_DWORD *)(v1789 + 12);
                  }
                  LODWORD(v1910[2]) = v1791;
                  long long v1936 = 0u;
                  *(_OWORD *)v1935 = 0u;
                  v1792 = sub_1CD7FAEE8(v1749, 1, (uint64_t)&v1905, (uint64_t)v1787, (uint64_t)v1788, v1749 + 112, 0, v1790, (uint64_t)v1745, v1747, (long long *)v1910, 10, 0, v1748 | 0x100u, (v1748 | 0x100uLL) >> 32, 0, (long long *)v1935);
                  sub_1CD7875EC((uint64_t)v1935, (uint64_t)v1792, v1793);
                  sub_1CCF73400(v13, v1792);
                  v1752 = (uint64_t *)*((void *)&v1942 + 1);
                  unsigned int v1754 = v1943;
                  sub_1CD802D60((uint64_t)v1935);
                }
                if (sub_1CD407020(v12))
                {
                  v1797 = *(void **)(v13 + 16);
                  *(_OWORD *)v1921 = *(_OWORD *)v1914;
                  LOBYTE(v1922) = 1;
                  *((void *)&v1922 + 1) = 0;
                  v1935[0] = v1852;
                  v1935[1] = (void *)1;
                  *(void *)&long long v1936 = v1852;
                  DWORD2(v1936) = v1839;
                  v1937 = v1752;
                  int v1938 = v1754;
                  v751 = sub_1CD7EB5F0(v1797, (const char *)0x65, (const llvm::APInt *)&v1905, (uint64_t *)v1921, 2, (uint64_t *)v1935, 3);
                  unsigned int v750 = v1798;
                  *(void *)&long long v1895 = v751;
                  DWORD2(v1895) = 1;
                  goto LABEL_498;
                }
                uint64_t v1795 = *(void *)(v13 + 16);
                uint64_t v1796 = *(void *)(v1795 + 832);
                if (v1796) {
                  LOWORD(v1796) = *(_WORD *)(v1796 + 8);
                }
                v1682 = sub_1CCFDED5C(v1795, 96, (const llvm::APInt *)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v1852, v1839, v1794, (uint64_t)v1752, v1754, v1796);
LABEL_1299:
                v751 = v1682;
                unsigned int v750 = v1683;
                goto LABEL_498;
              }
            }
          }
          unsigned int v750 = 0;
        }
        v751 = 0;
        goto LABEL_498;
      }
      v1535 = (llvm *)(*(uint64_t (**)(void, uint64_t, void, llvm *, uint64_t))(**(void **)(v13 + 8)
                                                                                          + 400))(*(void *)(v13 + 8), *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, *(void *)(*(void *)(v13 + 16) + 56), v749, v748);
      uint64_t v1867 = v1536;
      v1537 = *(void **)(v13 + 16);
      v1538 = sub_1CD7EBF14((uint64_t)v1537, 0, (const llvm::APInt *)&v1905, v749, v1885, 0, 0);
      uint64_t v1540 = v1539;
      uint64_t v1541 = sub_1CD7EE368(v1537, 0x14u);
      __int16 v1544 = 0;
      uint64_t v1545 = v1537[104];
      if (v1545) {
        __int16 v1544 = *(_WORD *)(v1545 + 8);
      }
      v1868 = sub_1CD7F5D38(v1537, (const char *)0xC1, (const llvm::APInt *)&v1905, v1535, v1867, (uint64_t)v746, (uint64_t)v745, v1543, (uint64_t)v1538, v1540, v1541, v1542, SHIDWORD(v1542), v1544);
      uint64_t v1547 = v1546;
      v1548 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)v749, v1885, *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
      v1550 = sub_1CD7EBF14(*(void *)(v13 + 16), 1, (const llvm::APInt *)&v1905, v1548, v1549, 0, 0);
      uint64_t v1553 = *(void *)(v13 + 16);
      uint64_t v1554 = *(void *)(v1553 + 832);
      if (v1554) {
        LOWORD(v1554) = *(_WORD *)(v1554 + 8);
      }
      v1555 = sub_1CCFDED5C(v1553, 177, (const llvm::APInt *)&v1905, v749, v1885, (uint64_t)v746, (uint64_t)v745, v1552, (uint64_t)v1550, v1551, v1554);
      uint64_t v1557 = v1556;
      v1558 = sub_1CD7EBF14(*(void *)(v13 + 16), 1, (const llvm::APInt *)&v1905, v749, v1885, 0, 0);
      uint64_t v1561 = *(void *)(v13 + 16);
      uint64_t v1562 = *(void *)(v1561 + 832);
      if (v1562) {
        LOWORD(v1562) = *(_WORD *)(v1562 + 8);
      }
      v1564 = sub_1CCFDED5C(v1561, 171, (const llvm::APInt *)&v1905, v749, v1885, (uint64_t)v746, (uint64_t)v745, v1560, (uint64_t)v1558, v1559, v1562);
      uint64_t v1566 = *(void *)(v13 + 16);
      uint64_t v1567 = *(void *)(v1566 + 832);
      if (v1567) {
        LOWORD(v1567) = *(_WORD *)(v1567 + 8);
      }
      v1568 = sub_1CCFDED5C(v1566, 172, (const llvm::APInt *)&v1905, v749, v1885, (uint64_t)v1564, v1563, v1565, (uint64_t)v1555, v1557, v1567);
      v1570 = v1569;
      BOOL v1571 = sub_1CD407020(v12);
      v1572 = *(llvm::APFloatBase **)(v13 + 16);
      if (v1571)
      {
        v1573 = sub_1CD3E1260(v1572, (const llvm::APInt *)&v1905, v749, v1885, (uint64_t)v1868, v1547, (uint64_t)v1568, (uint64_t)v1570, (uint64_t)v746, (int)v745, SHIDWORD(v745));
        v1574 = *(void **)(v13 + 16);
        *(_OWORD *)v1935 = *(_OWORD *)v1914;
        LOBYTE(v1936) = 1;
        *((void *)&v1936 + 1) = 0;
        uint64_t v1575 = *(void *)(v12 + 32);
        int v1576 = *(_DWORD *)(v1575 + 8);
        v1921[0] = *(void **)v1575;
        LODWORD(v1921[1]) = v1576;
        *(void *)&long long v1922 = v1573;
        DWORD2(v1922) = v1577;
        v1578 = sub_1CD7EB5F0(v1574, (const char *)0x86, (const llvm::APInt *)&v1905, (uint64_t *)v1935, 2, (uint64_t *)v1921, 2);
        int v1580 = v1579;
        v1581 = *(void **)(v13 + 16);
        *(_OWORD *)v1921 = *(_OWORD *)v1914;
        LOBYTE(v1922) = 1;
        *((void *)&v1922 + 1) = 0;
        v1935[0] = v1578;
        v1935[1] = (void *)1;
        *(void *)&long long v1936 = v1578;
        DWORD2(v1936) = v1579;
        v1937 = v1578;
        int v1938 = v1579;
        v1582 = sub_1CD7EB5F0(v1581, (const char *)0x65, (const llvm::APInt *)&v1905, (uint64_t *)v1921, 2, (uint64_t *)v1935, 3);
        unsigned int v1584 = v1583;
        *(void *)&long long v1895 = v1582;
        DWORD2(v1895) = 1;
        *((_WORD *)v1578 + 36) = *(_WORD *)(v12 + 72) & 0x800 | 1;
        *((_WORD *)v1582 + 36) = 2049;
      }
      else
      {
        uint64_t v1640 = *((void *)v1572 + 104);
        if (v1640) {
          __int16 v1641 = *(_WORD *)(v1640 + 8);
        }
        else {
          __int16 v1641 = 0;
        }
        v1673 = sub_1CD7F3564(v1572, (const char *)0xCA, (uint64_t)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v1568, v1570, v1641);
        uint64_t v1675 = *(void *)(v13 + 16);
        uint64_t v1676 = *(void *)(v1675 + 832);
        if (v1676) {
          LOWORD(v1676) = *(_WORD *)(v1676 + 8);
        }
        v1582 = sub_1CCFDED5C(v1675, 96, (const llvm::APInt *)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v1673, v1672, v1674, (uint64_t)v1673, v1672, v1676);
        unsigned int v1584 = v1677;
        v1678 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1679 = *((void *)v1678 + 104);
        if (v1679) {
          __int16 v1680 = *(_WORD *)(v1679 + 8);
        }
        else {
          __int16 v1680 = 0;
        }
        v1578 = sub_1CD7F3564(v1678, (const char *)0xCA, (uint64_t)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v746, v745, v1680);
        int v1580 = v1681;
      }
      v1682 = sub_1CD3E1260(*(void **)(v13 + 16), (const llvm::APInt *)&v1905, (llvm *)v1914[0], (uint64_t)v1914[1], (uint64_t)v1868, v1547, (uint64_t)v1582, v1584, (uint64_t)v1578, v1580, 0);
      goto LABEL_1299;
    case 0x88:
      uint64_t v114 = *(void *)(v13 + 8);
      if (*(unsigned char *)(v114 + 184290)
        || !sub_1CD78EB98(v114, *(unsigned __int16 *)(v12 + 24), **(void **)(v12 + 40)))
      {
        goto LABEL_806;
      }
      uint64_t v115 = sub_1CCF857B0(v13, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t)&v1897, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8));
      goto LABEL_157;
    case 0x89:
      uint64_t v180 = *(void *)(v13 + 8);
      if (*(unsigned char *)(v180 + 184290)
        || !sub_1CD78EB98(v180, *(unsigned __int16 *)(v12 + 24), **(void **)(v12 + 40)))
      {
        goto LABEL_806;
      }
      unint64_t v181 = *(uint64_t **)(v12 + 32);
      uint64_t v182 = v181[5];
      uint64_t v183 = v181[6];
      BOOL v184 = (uint64_t *)(*(void *)(v182 + 40) + 16 * v183);
      uint64_t v115 = sub_1CCF857B0(v13, v182, v183, *v184, v184[1], **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t)&v1897, *v181, v181[1]);
LABEL_157:
      *(void *)&long long v1896 = v115;
      DWORD2(v1896) = v116;
      if (!v115) {
        goto LABEL_806;
      }
      uint64_t v119 = (uint64_t)v115;
LABEL_112:
      sub_1CCF76388(v13, v12, v119);
      goto LABEL_814;
    case 0x8A:
    case 0x8B:
    case 0xC1:
    case 0x16D:
      int v20 = v16 & 0xFFFE;
      if (v20 == 138)
      {
        uint64_t v21 = *(void *)(v12 + 32);
        *(_OWORD *)v1921 = *(_OWORD *)v21;
        unsigned int v22 = 2;
        unsigned int v23 = 3;
      }
      else
      {
        v1921[1] = 0;
        v1921[0] = 0;
        unsigned int v22 = 1;
        unsigned int v23 = 2;
        uint64_t v21 = *(void *)(v12 + 32);
      }
      int v39 = (uint64_t *)(v21 + 40 * (v20 == 138));
      uint64_t v40 = *v39;
      DWORD2(v1896) = *((_DWORD *)v39 + 2);
      *(void *)&long long v1896 = v40;
      uint64_t v41 = (uint64_t *)(v21 + 40 * v22);
      uint64_t v42 = *v41;
      DWORD2(v1895) = *((_DWORD *)v41 + 2);
      *(void *)&long long v1895 = v42;
      uint64_t v43 = (uint64_t *)(v21 + 40 * v23);
      uint64_t v44 = *v43;
      DWORD2(v1894) = *((_DWORD *)v43 + 2);
      *(void *)&long long v1894 = v44;
      if (v16 == 365)
      {
        uint64_t v45 = *(void *)(v21 + 120);
        int v46 = *(_DWORD *)(v21 + 128);
        uint64_t v47 = v21 + 160;
        uint64_t v48 = *(void *)v47;
        int v49 = *(_DWORD *)(v47 + 8);
      }
      else
      {
        int v46 = 0;
        uint64_t v45 = 0;
        int v49 = 0;
        uint64_t v48 = 0;
      }
      if (!sub_1CD01D89C(*(void *)(v13 + 8), *(void **)(v13 + 16), **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t *)&v1896, (uint64_t *)&v1895, &v1894, v10, v45, v46, v48, v49, &v1890, (const llvm::APInt *)&v1897, (uint64_t *)v1921, v16 == 139))
      {
        uint64_t v253 = *(void *)(v12 + 40);
        unsigned int v254 = *(llvm **)v253;
        uint64_t v255 = *(void *)(v253 + 8);
        int v257 = DWORD2(v1895);
        uint64_t v256 = v1896;
        uint64_t v258 = (void *)(*(void *)(v1896 + 40) + 16 * DWORD2(v1896));
        int v259 = *(void **)(v13 + 16);
        int v1871 = DWORD2(v1896);
        uint64_t v260 = v1895;
        uint64_t v261 = sub_1CD7EBCBC((uint64_t)v259, 1, (const llvm::APInt *)&v1897, (BOOL)v254, v255, *v258, v258[1]);
        int v263 = v262;
        v264 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, v254, v255, 0, 0);
        uint64_t v267 = sub_1CD7F6564(v259, (const char *)0xC0, (const llvm::APInt *)&v1897, v254, v255, v256, v1871, v266, v260, v257, v261, v263, (uint64_t)v264, v265, v1894, SDWORD2(v1894));
        *(void *)&long long v1896 = v267;
        DWORD2(v1896) = v268;
        *((_WORD *)v267 + 36) = *(_WORD *)(v12 + 72);
        int v104 = (void *)*((void *)&v1896 + 1);
        if (v1908 >= HIDWORD(v1908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v202 = (char *)v1907 + 16 * v1908;
        *(void *)uint64_t v202 = v267;
        goto LABEL_173;
      }
      if ((void)v1894)
      {
        uint64_t v51 = *(void **)(v13 + 16);
        uint64_t v52 = (const char *)*(unsigned __int16 *)(v12 + 24);
        int v53 = *(llvm ***)(v12 + 40);
        if (v20 != 138)
        {
          uint64_t v105 = *v53;
          uint64_t v106 = (uint64_t)v53[1];
          if (v16 == 365)
          {
            v1935[0] = (void *)v1896;
            LODWORD(v1935[1]) = DWORD2(v1896);
            *(void *)&long long v1936 = v1895;
            DWORD2(v1936) = DWORD2(v1895);
            v1937 = (uint64_t *)v1894;
            int v1938 = DWORD2(v1894);
            uint64_t v1939 = v45;
            int v1940 = v46;
            uint64_t v1941 = v48;
            LODWORD(v1942) = v49;
            uint64_t v55 = (llvm ***)sub_1CD7FF4E8(v51, v52, (const llvm::APInt *)&v1897, v105, v106, (uint64_t *)v1935, 5, *(unsigned __int16 *)(v12 + 72));
            *(void *)&long long v1896 = v55;
            DWORD2(v1896) = v107;
            if (!v1890) {
              goto LABEL_86;
            }
            goto LABEL_266;
          }
          uint64_t v55 = (llvm ***)sub_1CD7F5D38(v51, v52, (const llvm::APInt *)&v1897, v105, v106, v1896, *((uint64_t *)&v1896 + 1), v50, v1895, *((uint64_t *)&v1895 + 1), v1894, SDWORD2(v1894), SHIDWORD(v1894), *(_WORD *)(v12 + 72));
          *(void *)&long long v1896 = v55;
          DWORD2(v1896) = v205;
          if (!v1890) {
            goto LABEL_86;
          }
LABEL_323:
          v321 = sub_1CD7EBC20(*(void *)(v13 + 16), (const llvm::APInt *)&v1897, (uint64_t)v55, *((uint64_t *)&v1896 + 1), *v55[5], (uint64_t)v55[5][1]);
LABEL_324:
          uint64_t v55 = (llvm ***)v321;
          *(void *)&long long v1896 = v321;
          DWORD2(v1896) = v322;
LABEL_86:
          uint64_t v100 = (llvm ***)*((void *)&v1896 + 1);
          if (v1908 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v101 = (llvm ****)((char *)v1907 + 16 * v1908);
          *int v101 = v55;
          v101[1] = v100;
          unsigned int v102 = v1908 + 1;
          LODWORD(v1908) = v1908 + 1;
          if (v20 == 138)
          {
            uint64_t v103 = (uint64_t *)v1921[0];
            int v104 = v1921[1];
            goto LABEL_171;
          }
          goto LABEL_806;
        }
        uint64_t v54 = *(unsigned __int16 *)(v12 + 58);
        v1935[0] = v1921[0];
        LODWORD(v1935[1]) = v1921[1];
        *(void *)&long long v1936 = v1896;
        DWORD2(v1936) = DWORD2(v1896);
        v1937 = (uint64_t *)v1895;
        int v1938 = DWORD2(v1895);
        uint64_t v1939 = v1894;
        int v1940 = DWORD2(v1894);
        uint64_t v55 = (llvm ***)sub_1CD7FF854(v51, v52, (const llvm::APInt *)&v1897, (uint64_t)v53, v54, (uint64_t *)v1935, 4, *(_WORD *)(v12 + 72));
        *(void *)&long long v1896 = v55;
        DWORD2(v1896) = v56;
        v1921[0] = v55;
        LODWORD(v1921[1]) = 1;
      }
      else
      {
        uint64_t v55 = (llvm ***)v1896;
      }
      if (!v1890) {
        goto LABEL_86;
      }
      if (v16 == 365)
      {
LABEL_266:
        v321 = sub_1CD7EBD7C(*(void **)(v13 + 16), (const llvm::APInt *)&v1897, (uint64_t)v55, SDWORD2(v1896), v45, v46, v48, v49, *v55[5], (uint64_t)v55[5][1]);
        goto LABEL_324;
      }
      goto LABEL_323;
    case 0x8F:
      v760 = *(void **)(v12 + 64);
      v1910[0] = v760;
      if (v760)
      {
        llvm::MetadataTracking::track((uint64_t)v1910, (unsigned __int8 *)v760, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1910[1]) = v15;
      v761 = *(uint64_t **)(v12 + 32);
      uint64_t v762 = *v761;
      v763 = (void *)v761[1];
      uint64_t v764 = v761[5];
      v765 = (void *)v761[6];
      LOBYTE(v1935[0]) = 0;
      v1937 = 0;
      int v1938 = 0;
      uint64_t v1939 = 0;
      int v1940 = 0;
      uint64_t v1945 = 0;
      LODWORD(v1946) = 0;
      *(void *)&long long v1936 = 0;
      v1935[1] = 0;
      DWORD2(v1936) = 0;
      *(void *)&long long v1942 = 0;
      uint64_t v1941 = 0;
      *(void *)((char *)&v1942 + 5) = 0;
      v1944[0] = 0;
      uint64_t v1943 = 0;
      *(void *)((char *)v1944 + 5) = 0;
      unsigned int v1948 = 1;
      v1947 = 0;
      sub_1CCF865E8(v13, (uint64_t)v1935, (const llvm::APInt *)v1910, v764, v765);
      v766 = (uint64_t *)(*(void *)(v1945 + 40) + 16 * v1946);
      v767 = (llvm *)*v766;
      uint64_t v768 = v766[1];
      uint64_t v769 = sub_1CD7EBB14(*(void *)(v13 + 16), (llvm::LLVMContext *)&v1947, (const llvm::APInt *)v1910, *v766, v768, 0, 0);
      __int16 v772 = 0;
      uint64_t v773 = *(void *)(v13 + 16);
      uint64_t v774 = *(void *)(v773 + 832);
      if (v774) {
        __int16 v772 = *(_WORD *)(v774 + 8);
      }
      v775 = v767;
      uint64_t v1878 = v768;
      v776 = sub_1CCFDED5C(v773, 171, (const llvm::APInt *)v1910, v767, v768, v1945, v1946, v771, v769, v770, v772);
      uint64_t v778 = v777;
      __b = v776;
      *(void *)&long long v1918 = v777;
      uint64_t v779 = *(void *)(v762 + 40) + 16 * v763;
      v781 = *(llvm **)v779;
      uint64_t v780 = *(void *)(v779 + 8);
      uint64_t v782 = *(void *)(v13 + 8);
      if ((v781 == 1 || (_BYTE)v781 && *(void *)(v782 + 8 * v781 + 96))
        && (*(unsigned __int8 *)(v782 + 390 * v781 + 4085) | 4) == 4
        && (v781 == 1 || *(void *)(v782 + 8 * v781 + 96))
        && (*(unsigned __int8 *)(v782 + 390 * v781 + 4084) | 4) == 4)
      {
        v783 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v784 = *((void *)v783 + 104);
        if (v784) {
          __int16 v785 = *(_WORD *)(v784 + 8);
        }
        else {
          __int16 v785 = 0;
        }
        v1470 = sub_1CD7F3564(v783, (const char *)0xDF, (uint64_t)v1910, v781, v780, v762, v763, v785);
        v1471 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1472 = *((void *)v1471 + 104);
        if (v1472) {
          __int16 v1473 = *(_WORD *)(v1472 + 8);
        }
        else {
          __int16 v1473 = 0;
        }
        uint64_t v1474 = (uint64_t)v1470;
        uint64_t v1838 = (uint64_t)v1470;
        v1475 = v1469;
        v1476 = sub_1CD7F3564(v1471, (const char *)0xDE, (uint64_t)v1910, v781, v780, v1474, v1469, v1473);
        uint64_t v1850 = v1477;
        uint64_t v1865 = (uint64_t)v1476;
        v1478 = *(void **)(v13 + 16);
        v1479 = (llvm *)(*(uint64_t (**)(void))(**(void **)(v13 + 8) + 400))();
        uint64_t v1824 = v1480;
        v1481 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)v1910, v775, v1878, 0, 0);
        v1483 = sub_1CD3DC614(v1478, (const llvm::APInt *)v1910, v1479, v1824, (uint64_t)v776, v778, (uint64_t)v1481, v1482, 0x16u, 0, 0, 0, 0);
        uint64_t v33 = sub_1CD3E1260(*(void **)(v13 + 16), (const llvm::APInt *)v1910, v781, v780, (uint64_t)v1483, v1484, v1865, v1850, v1838, (int)v1475, SHIDWORD(v1475));
        uint64_t v35 = v1485;
        goto LABEL_1145;
      }
      LOBYTE(v1921[0]) = 0;
      uint64_t v1923 = 0;
      int v1924 = 0;
      uint64_t v1925 = 0;
      int v1926 = 0;
      uint64_t v1930 = 0;
      LODWORD(v1931) = 0;
      *(void *)&long long v1922 = 0;
      v1921[1] = 0;
      DWORD2(v1922) = 0;
      v1928[0] = 0;
      uint64_t v1927 = 0;
      *(void *)((char *)v1928 + 5) = 0;
      v1929[0] = 0;
      v1928[2] = 0;
      *(void *)((char *)v1929 + 5) = 0;
      unsigned int v1933 = 1;
      __src = 0;
      sub_1CCF865E8(v13, (uint64_t)v1921, (const llvm::APInt *)v1910, v762, v763);
      uint64_t v1047 = v1930;
      unsigned int v1048 = v1933;
      uint64_t v1049 = *(void *)(v1930 + 40) + 16 * v1931;
      v1050 = *(llvm **)v1049;
      uint64_t v1051 = *(void *)(v1049 + 8);
      uint64_t v1052 = *(void *)(v13 + 16);
      LODWORD(v1914[1]) = v1933;
      if (v1933 > 0x40) {
        operator new[]();
      }
      v1861 = __src;
      v1053 = v775;
      if (v1933) {
        unint64_t v1054 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1933;
      }
      else {
        unint64_t v1054 = 0;
      }
      v1914[0] = (void *)(v1054 & ~(unint64_t)__src);
      *(_DWORD *)&v1916[8] = v1933;
      *(void **)v1916 = v1914[0];
      LODWORD(v1914[1]) = 0;
      uint64_t v1142 = sub_1CD7EBB14(v1052, (llvm::LLVMContext *)v1916, (const llvm::APInt *)v1910, (uint64_t)v1050, v1051, 0, 0);
      uint64_t v1145 = v1142;
      uint64_t v1146 = v1143;
      if (*(_DWORD *)&v1916[8] >= 0x41u && *(void *)v1916) {
        MEMORY[0x1D25D9CB0](*(void *)v1916, 0x1000C8000313F17);
      }
      uint64_t v1147 = *(void *)(v13 + 16);
      uint64_t v1148 = *(void *)(v1147 + 832);
      if (v1148) {
        LOWORD(v1148) = *(_WORD *)(v1148 + 8);
      }
      *(void *)v1916 = sub_1CCFDED5C(v1147, 171, (const llvm::APInt *)v1910, v1050, v1051, v1047, v1931, v1144, v1145, v1146, v1148);
      *(void *)&v1916[8] = v1149;
      uint64_t v1150 = v1949 - v1934;
      v1152 = sub_1CD7878C0((unsigned int *)&__b, v1149, v1151);
      uint64_t v1157 = v1878;
      if (v1152 < sub_1CD7878C0((unsigned int *)v1916, v1153, v1154))
      {
        v1158 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1159 = *((void *)v1158 + 104);
        if (v1159) {
          __int16 v1160 = *(_WORD *)(v1159 + 8);
        }
        else {
          __int16 v1160 = 0;
        }
        __b = sub_1CD7F3564(v1158, (const char *)0xC7, (uint64_t)v1910, v1050, v1051, (uint64_t)__b, (void *)v1918, v1160);
        LODWORD(v1918) = v1155;
        v1053 = v1050;
        uint64_t v1157 = v1051;
      }
      if ((int)v1150 < 1)
      {
        if ((v1150 & 0x80000000) == 0) {
          goto LABEL_977;
        }
        v1317 = sub_1CD7EBF14(*(void *)(v13 + 16), -(int)v1150, (const llvm::APInt *)v1910, v1053, v1157, 0, 0);
        uint64_t v1320 = *(void *)(v13 + 16);
        uint64_t v1321 = *(void *)(v1320 + 832);
        if (v1321) {
          LOWORD(v1321) = *(_WORD *)(v1321 + 8);
        }
        v1316 = sub_1CCFDED5C(v1320, 175, (const llvm::APInt *)v1910, v1053, v1157, (uint64_t)__b, v1918, v1319, (uint64_t)v1317, v1318, v1321);
      }
      else
      {
        v1311 = sub_1CD7EBF14(*(void *)(v13 + 16), v1150, (const llvm::APInt *)v1910, v1053, v1157, 0, 0);
        uint64_t v1314 = *(void *)(v13 + 16);
        uint64_t v1315 = *(void *)(v1314 + 832);
        if (v1315) {
          LOWORD(v1315) = *(_WORD *)(v1315 + 8);
        }
        v1316 = sub_1CCFDED5C(v1314, 177, (const llvm::APInt *)v1910, v1053, v1157, (uint64_t)__b, v1918, v1313, (uint64_t)v1311, v1312, v1315);
      }
      __b = v1316;
      LODWORD(v1918) = v1155;
LABEL_977:
      v1322 = sub_1CD7878C0((unsigned int *)&__b, v1155, v1156);
      v1325 = sub_1CD7878C0((unsigned int *)v1916, v1323, v1324);
      v1327 = __b;
      if (v1322 <= v1325)
      {
        v1330 = v1861;
      }
      else
      {
        v1328 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1329 = *((void *)v1328 + 104);
        v1330 = v1861;
        if (v1329) {
          __int16 v1331 = *(_WORD *)(v1329 + 8);
        }
        else {
          __int16 v1331 = 0;
        }
        v1327 = sub_1CD7F3564(v1328, (const char *)0xC9, (uint64_t)v1910, v1050, v1051, (uint64_t)__b, (void *)v1918, v1331);
        __b = v1327;
        LODWORD(v1918) = v1386;
      }
      uint64_t v1387 = *(void *)(v13 + 16);
      uint64_t v1388 = *(void *)(v1387 + 832);
      if (v1388) {
        LOWORD(v1388) = *(_WORD *)(v1388 + 8);
      }
      v1389 = sub_1CCFDED5C(v1387, 172, (const llvm::APInt *)v1910, v1050, v1051, *(uint64_t *)v1916, *(uint64_t *)&v1916[8], v1326, (uint64_t)v1327, v1918, v1388);
      uint64_t v33 = sub_1CCF86AD4(v13, (uint64_t)v1921, (uint64_t)v1910, (uint64_t)v1389, v1390);
      uint64_t v35 = v1391;
      if (v1048 >= 0x41 && v1330) {
        MEMORY[0x1D25D9CB0](v1330, 0x1000C8000313F17);
      }
LABEL_1145:
      if (v1948 >= 0x41 && v1947) {
        MEMORY[0x1D25D9CB0](v1947, 0x1000C8000313F17);
      }
LABEL_1148:
      v456 = (unsigned __int8 *)v1910[0];
      if (!v1910[0]) {
        goto LABEL_802;
      }
LABEL_1149:
      int v457 = *v456;
      if ((v457 - 4) <= 0x1E)
      {
        if ((v456[1] & 0x7F) == 2 || *((_DWORD *)v456 + 3))
        {
          uint64_t v1486 = *((void *)v456 + 2);
          if ((v1486 & 4) != 0)
          {
            unint64_t v636 = v1486 & 0xFFFFFFFFFFFFFFF8;
            if (v636) {
              goto LABEL_1007;
            }
          }
        }
LABEL_802:
        unsigned int v1179 = v1908;
        if (v1908 < HIDWORD(v1908))
        {
LABEL_803:
          unsigned int v565 = (char *)v1907 + 16 * v1179;
          *(void *)unsigned int v565 = v33;
LABEL_804:
          *((void *)v565 + 1) = v35;
          goto LABEL_805;
        }
LABEL_1221:
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v457 - 3) >= 0xFFFFFFFE) {
        v1487 = v456;
      }
      else {
        v1487 = 0;
      }
      if ((v457 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v636 = (unint64_t)(v1487 + 8);
LABEL_1007:
        v1935[0] = v1910;
        sub_1CC5FA668(v636 + 16, v1935);
        goto LABEL_802;
      }
      goto LABEL_1160;
    case 0x92:
      uint64_t v131 = *(unsigned __int16 *)(v12 + 56);
      uint64_t v132 = *(unsigned __int8 **)(v12 + 64);
      v1903 = v132;
      if (v132)
      {
        llvm::MetadataTracking::track((uint64_t)&v1903, v132, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      int v1904 = v15;
      uint64_t v134 = *(unsigned int **)(v12 + 32);
      uint64_t v133 = *(void *)(v12 + 40);
      uint64_t v136 = *(llvm **)v133;
      uint64_t v135 = *(void *)(v133 + 8);
      v1901 = v136;
      uint64_t v1902 = v135;
      int v137 = (uint64_t *)(*(void *)(*(void *)v134 + 40) + 16 * v134[2]);
      uint64_t v138 = v137[1];
      uint64_t v1870 = *v137;
      if ((_BYTE)v136)
      {
        LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v1901);
        unint64_t v140 = 0;
        uint64_t v141 = 0;
      }
      else
      {
        unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v135 + 24), 0, v5);
        unint64_t v140 = EVT & 0xFFFFFFFFFFFFFF00;
      }
      unint64_t v1899 = v140 | EVT;
      uint64_t v1900 = v141;
      if (!v131) {
        goto LABEL_322;
      }
      uint64_t v206 = 0;
      int v207 = 0;
      uint64_t v208 = 0;
      uint64_t v209 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      uint64_t v212 = v131;
      uint64_t v213 = *(uint64_t **)(v12 + 32);
      char v214 = 1;
      char v215 = 1;
      do
      {
        uint64_t v216 = v213[v206];
        int v217 = *(unsigned __int16 *)(v216 + 24);
        if (v217 != 51)
        {
          if (v217 != 12 && v217 != 36)
          {
            BOOL v219 = v217 == 11 || v217 == 35;
            v215 &= v219;
          }
          int v220 = v213[v206 + 1];
          v214 &= v206 == 0;
          if (v209)
          {
            BOOL v222 = v216 != v209 || v220 != v208;
            if (v211)
            {
              BOOL v224 = v216 != v211 || v220 != v210;
              int v225 = v224 | v207;
              if (v222) {
                int v207 = v225;
              }
            }
            else
            {
              if (v222) {
                uint64_t v211 = v213[v206];
              }
              else {
                uint64_t v211 = 0;
              }
              if (v222) {
                uint64_t v210 = (void *)LODWORD(v213[v206 + 1]);
              }
            }
          }
          else
          {
            uint64_t v209 = v213[v206];
            uint64_t v208 = (void *)LODWORD(v213[v206 + 1]);
          }
        }
        v206 += 5;
      }
      while (5 * v131 != v206);
      if (!v209)
      {
LABEL_322:
        uint64_t v234 = sub_1CD3DD4D8(*(void *)(v13 + 16), v1901, v1902);
        unint64_t v236 = v432 & 0xFFFFFFFF00000000;
        unsigned int v237 = v432;
        goto LABEL_231;
      }
      if (v214)
      {
        uint64_t v226 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v227 = *v213;
        uint64_t v228 = (void *)v213[1];
        uint64_t v229 = *((void *)v226 + 104);
        if (v229) {
          __int16 v230 = *(_WORD *)(v229 + 8);
        }
        else {
          __int16 v230 = 0;
        }
        uint64_t v234 = sub_1CD7F3564(v226, (const char *)0x9B, (uint64_t)&v1903, v1901, v1902, v227, v228, v230);
        unint64_t v236 = v235 & 0xFFFFFFFF00000000;
        unsigned int v237 = v235;
        goto LABEL_231;
      }
      if (v215)
      {
        uint64_t v897 = 0;
        LODWORD(v898) = 0;
        v1935[0] = &v1936;
        v1935[1] = (void *)0x1000000000;
        while (1)
        {
          uint64_t v899 = *(void *)(*(void *)(v12 + 32) + v897);
          unsigned int v900 = *(unsigned __int16 *)(v899 + 24);
          if (v900 <= 0x22) {
            break;
          }
          if (v900 == 35) {
            goto LABEL_556;
          }
          if (v900 != 36)
          {
LABEL_562:
            llvm::EVT::getTypeForEVT((llvm::EVT *)&v1899, *(llvm::LLVMContext **)(*(void *)(v13 + 16) + 56));
            v905 = llvm::UndefValue::get(v906, v907);
LABEL_563:
            v901 = v905;
            LODWORD(v898) = v1935[1];
            goto LABEL_564;
          }
LABEL_555:
          v901 = *(void **)(v899 + 80);
LABEL_564:
          if (v898 >= HIDWORD(v1935[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v1935[0] + v898) = v901;
          uint64_t v898 = ++LODWORD(v1935[1]);
          v897 += 40;
          if (40 * v131 == v897)
          {
            v1080 = (llvm::FixedVectorType ***)v1935[0];
            Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v1935[0], (llvm::Type *)v898);
            v1082 = (llvm::Type **)Impl;
            if (!Impl)
            {
              llvm::FixedVectorType::get(**v1080, (llvm::Type *)v898);
              v1082 = (llvm::Type **)sub_1CC56A4DC(**v1083 + 1288, (uint64_t)v1083, v1080, v898);
            }
            uint64_t v1084 = *(void *)(v13 + 16);
            unsigned __int8 v1085 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), *(void *)(**(void **)(v1084 + 40) + 40) + 272, 0);
            v1086 = sub_1CD7ED6C4(v1084, v1082, (llvm *)v1085, 0, 0, 0, 0, 0);
            uint64_t v1088 = v1087;
            uint64_t v1089 = *((unsigned __int8 *)v1086 + 92);
            uint64_t v1090 = *(void *)(v13 + 16);
            v1091 = v1901;
            uint64_t v1092 = v1902;
            uint64_t v1093 = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(*(void *)(v1090 + 40) + 432));
            int v1094 = 0;
            v1910[0] = (void *)(v1093 | 4);
            v1910[1] = 0;
            BYTE4(v1910[2]) = 0;
            if (v1093) {
              int v1094 = *(_DWORD *)(v1093 + 12);
            }
            LODWORD(v1910[2]) = v1094;
            long long v1922 = 0u;
            *(_OWORD *)v1921 = 0u;
            uint64_t v234 = sub_1CD7F00F8(v1090, (uint64_t)v1091, v1092, (uint64_t)&v1903, v1090 + 112, 0, (uint64_t)v1086, v1088, (long long *)v1910, (unsigned __int16)v1089 | 0x100u, (v1089 | 0x100uLL) >> 32, 0, (long long *)v1921, 0);
            unsigned int v237 = v1095;
            unint64_t v236 = v1095 & 0xFFFFFFFF00000000;
            if (v1935[0] != &v1936) {
              free(v1935[0]);
            }
            goto LABEL_231;
          }
        }
        if (v900 != 11)
        {
          if (v900 != 12) {
            goto LABEL_562;
          }
          goto LABEL_555;
        }
LABEL_556:
        if (v1870 != v1899 || !(_BYTE)v1870 && v138 != v1900)
        {
          uint64_t v902 = *(void *)(v899 + 80);
          llvm::EVT::getTypeForEVT((llvm::EVT *)&v1899, *(llvm::LLVMContext **)(*(void *)(v13 + 16) + 56));
          v904 = (unint64_t *)(v902 + 24);
          if (*(_DWORD *)(v902 + 32) >= 0x41u) {
            v904 = (unint64_t *)*v904;
          }
          v905 = llvm::ConstantInt::get(v903, *v904, 0);
          goto LABEL_563;
        }
        goto LABEL_555;
      }
      unsigned int v1882 = v131;
      uint64_t v1078 = 0;
      v1910[0] = &v1910[2];
      v1910[1] = (void *)0x1000000000;
      uint64_t v1913 = 0;
      v1912 = 0;
      v1911 = &v1912;
      do
      {
        v1079 = (uint64_t *)(*(void *)(v12 + 32) + v1078);
        if (*(_WORD *)(*v1079 + 24) != 51) {
          sub_1CD788B34((uint64_t *)v1910, v1079);
        }
        v1078 += 40;
      }
      while (40 * v212 != v1078);
      if (v1913) {
        uint64_t v1096 = v1913;
      }
      else {
        uint64_t v1096 = LODWORD(v1910[1]);
      }
      if (((*(uint64_t (**)(void, llvm *, uint64_t, uint64_t))(**(void **)(v13 + 8) + 136))(*(void *)(v13 + 8), v1901, v1902, v1096) & 1) == 0)goto LABEL_1224; {
      if ((v207 & 1) == 0)
      }
      {
        v1935[0] = &v1936;
        HIDWORD(v1935[1]) = 8;
        if (v1882 >= 9)
        {
          LODWORD(v1935[1]) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memset(&v1936, 255, 4 * v212);
        LODWORD(v1935[1]) = v1882;
        v1460 = (_DWORD *)(*(void *)(v12 + 32) + 8);
        v1461 = (unsigned int *)&v1936;
        do
        {
          uint64_t v1462 = *((void *)v1460 - 1);
          if (*(_WORD *)(v1462 + 24) != 51)
          {
            if (*v1460 == v208 && v1462 == v209) {
              unsigned int v1464 = 0;
            }
            else {
              unsigned int v1464 = v1882;
            }
            unsigned int *v1461 = v1464;
          }
          ++v1461;
          v1460 += 10;
          --v212;
        }
        while (v212);
        if ((*(uint64_t (**)(void))(**(void **)(v13 + 8) + 488))(*(void *)(v13 + 8)))
        {
          v1465 = *(llvm::APFloatBase **)(v13 + 16);
          uint64_t v1466 = *((void *)v1465 + 104);
          if (v1466) {
            __int16 v1467 = *(_WORD *)(v1466 + 8);
          }
          else {
            __int16 v1467 = 0;
          }
          v1661 = sub_1CD7F3564(v1465, (const char *)0x9B, (uint64_t)&v1903, v1901, v1902, v209, v208, v1467);
          unsigned int v1663 = v1662;
          v1664 = *(llvm::APFloatBase **)(v13 + 16);
          if (v211)
          {
            uint64_t v1667 = *((void *)v1664 + 104);
            if (v1667) {
              __int16 v1668 = *(_WORD *)(v1667 + 8);
            }
            else {
              __int16 v1668 = 0;
            }
            v1665 = sub_1CD7F3564(v1664, (const char *)0x9B, (uint64_t)&v1903, v1901, v1902, v211, v210, v1668);
          }
          else
          {
            v1665 = sub_1CD3DD4D8((uint64_t)v1664, v1901, v1902);
          }
          uint64_t v234 = sub_1CCFCDA78(*(void *)(v13 + 16), v1901, v1902, (uint64_t)&v1903, (uint64_t)v1661, v1663, (uint64_t)v1665, v1666, v1935[0], LODWORD(v1935[1]));
          unsigned int v1687 = v1686;
          unint64_t v236 = v1686 & 0xFFFFFFFF00000000;
          if (v1935[0] != &v1936) {
            free(v1935[0]);
          }
          unsigned int v237 = v1687;
          goto LABEL_1225;
        }
        if (v1935[0] != &v1936) {
          free(v1935[0]);
        }
        goto LABEL_1224;
      }
      v1847 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v1811 = *(void *)(v13 + 8);
      uint64_t v1098 = *(unsigned __int16 *)(v12 + 56);
      v1099 = *(unsigned __int8 **)(v12 + 64);
      v1905 = v1099;
      if (v1099) {
        llvm::MetadataTracking::track((uint64_t)&v1905, v1099, 2);
      }
      unsigned int v1801 = 0;
      v1802 = 0;
      int v1906 = *(_DWORD *)(v12 + 60);
      uint64_t v1100 = *(void *)(v12 + 40);
      uint64_t v1862 = *(void *)(v1100 + 8);
      v1883 = *(llvm **)v1100;
      uint64_t __lena = 4 * v1098;
      char v1101 = 1;
      uint64_t v1814 = v12;
      do
      {
        v1935[0] = &v1936;
        v1935[1] = (void *)0x1000000000;
        v1921[0] = &v1922;
        v1921[1] = (void *)0x1000000000;
        char v1828 = v1101;
        if (!v1098)
        {
          LODWORD(v1102) = DWORD2(v1936);
          uint64_t v1103 = v1936;
          unint64_t v1104 = v1805 & 0xFFFFFFFF00000000;
          goto LABEL_757;
        }
        uint64_t v1105 = 0;
        for (uint64_t i = 0; i != v1098; ++i)
        {
          uint64_t v1107 = *(void *)(v12 + 32) + v1105;
          if (*(_WORD *)(*(void *)v1107 + 24) != 51)
          {
            if (v1101)
            {
              v1108 = 0;
              int v1109 = 0;
            }
            else
            {
              uint64_t v1110 = *((void *)v1847 + 104);
              if (v1110) {
                __int16 v1111 = *(_WORD *)(v1110 + 8);
              }
              else {
                __int16 v1111 = 0;
              }
              v1108 = sub_1CD7F3564(v1847, (const char *)0x9B, (uint64_t)&v1905, v1883, v1862, *(void *)v1107, *(void **)(v1107 + 8), v1111);
            }
            *(void *)v1916 = &v1916[16];
            *(_DWORD *)&v1916[16] = i;
            *(void *)&v1916[8] = 0x1000000001;
            __b = v1108;
            LODWORD(v1918) = v1109;
            *((void *)&v1918 + 1) = v1920;
            uint64_t v1919 = 0x1000000000;
            sub_1CD41B598((uint64_t)&v1918 + 8, (uint64_t)v1916);
            sub_1CD78EE18((uint64_t)v1935, (unint64_t)&__b);
            if (*((unsigned char **)&v1918 + 1) != v1920) {
              free(*((void **)&v1918 + 1));
            }
            if (*(unsigned char **)v1916 != &v1916[16]) {
              free(*(void **)v1916);
            }
          }
          v1105 += 40;
        }
        uint64_t v1112 = LODWORD(v1935[1]);
        if (LODWORD(v1935[1]) < 3)
        {
LABEL_749:
          uint64_t v1103 = *(void *)v1935[0];
          unint64_t v1102 = *((void *)v1935[0] + 1);
          if (v1112 == 2)
          {
            v1126 = (uint64_t *)*((void *)v1935[0] + 12);
            unint64_t v1805 = v1805 & 0xFFFFFFFF00000000 | *((unsigned int *)v1935[0] + 26);
            goto LABEL_760;
          }
          unint64_t v1104 = v1805 & 0xFFFFFFFF00000000;
LABEL_757:
          if (v1101)
          {
            unint64_t v1805 = v1104;
            v1126 = 0;
          }
          else
          {
            int v1128 = v1102;
            unint64_t v1102 = v1104;
            v1126 = sub_1CD3DD4D8((uint64_t)v1847, v1883, v1862);
            unint64_t v1805 = v1129 | v1102;
            LODWORD(v1102) = v1128;
          }
LABEL_760:
          __b = (char *)&v1918 + 8;
          DWORD1(v1918) = 16;
          if (v1098 >= 0x11)
          {
            LODWORD(v1918) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v1098)
          {
            v1130 = v1126;
            memset((char *)&v1918 + 8, 255, __lena);
            v1126 = v1130;
          }
          LODWORD(v1918) = v1098;
          v1131 = v1935[0];
          uint64_t v1132 = *((unsigned int *)v1935[0] + 6);
          if (v1132)
          {
            uint64_t v1133 = 0;
            uint64_t v1134 = *((void *)v1935[0] + 2);
            do
            {
              *((_DWORD *)&v1918 + *(int *)(v1134 + 4 * v1133) + 2) = v1133;
              ++v1133;
            }
            while (v1132 != v1133);
          }
          uint64_t v1135 = *((unsigned int *)v1131 + 30);
          if (v1135)
          {
            v1136 = (int *)v1131[14];
            int v1137 = v1098;
            do
            {
              uint64_t v1138 = *v1136++;
              *((_DWORD *)&v1918 + v1138 + 2) = v1137++;
              --v1135;
            }
            while (v1135);
          }
          if (v1828)
          {
            if (!(*(unsigned int (**)(uint64_t, char *, void, llvm *, uint64_t))(*(void *)v1811 + 488))(v1811, (char *)&v1918 + 8, v1918, v1883, v1862))
            {
              int v1127 = 1;
              char v1101 = v1828;
              goto LABEL_774;
            }
          }
          else
          {
            v1139 = sub_1CCFCDA78((uint64_t)v1847, v1883, v1862, (uint64_t)&v1905, v1103, v1102, (uint64_t)v1126, v1805, (char *)&v1918 + 8, v1918);
            unsigned int v1801 = v1140;
            v1802 = v1139;
          }
          char v1101 = v1828;
          int v1127 = 0;
LABEL_774:
          if (__b != (char *)&v1918 + 8) {
            free(__b);
          }
          goto LABEL_776;
        }
        while (1)
        {
          if (LODWORD(v1921[1]))
          {
            v1113 = (char *)v1921[0];
            uint64_t v1114 = 96 * LODWORD(v1921[1]);
            do
            {
              v1115 = *(char **)&v1113[v1114 - 80];
              if (&v1113[v1114 - 64] != v1115) {
                free(v1115);
              }
              v1114 -= 96;
            }
            while (v1114);
            uint64_t v1112 = LODWORD(v1935[1]);
          }
          LODWORD(v1921[1]) = 0;
          *(void *)v1821 = v1112 & 0xFFFFFFFE;
          if ((v1112 & 0xFFFFFFFE) != 0) {
            break;
          }
LABEL_746:
          if (v1112) {
            sub_1CD78EE8C((uint64_t)v1921, (unint64_t)v1935[0] + 96 * v1112 - 96);
          }
          sub_1CD78EF00((uint64_t *)v1935, (uint64_t *)v1921);
          uint64_t v1112 = LODWORD(v1935[1]);
          if (LODWORD(v1935[1]) <= 2) {
            goto LABEL_749;
          }
        }
        unint64_t v1116 = 0;
        while (1)
        {
          *(void *)v1916 = &v1916[16];
          *(_DWORD *)&v1916[12] = 16;
          if (v1098 >= 0x11)
          {
            *(_DWORD *)&v1916[8] = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memset(&v1916[16], 255, __lena);
          *(_DWORD *)&v1916[8] = v1098;
          v1914[0] = v1915;
          v1914[1] = (void *)0x1000000000;
          v1117 = (unsigned int *)v1935[0];
          uint64_t v1118 = *((unsigned int *)v1935[0] + 24 * v1116 + 6);
          uint64_t v1119 = v1116 | 1;
          if ((unint64_t)*((unsigned int *)v1935[0] + 24 * (v1116 | 1) + 6) + v1118 >= 0x11) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (*((_DWORD *)v1935[0] + 24 * v1116 + 6))
          {
            uint64_t v1120 = 0;
            do
            {
              *(_DWORD *)(*(void *)v1916 + 4 * v1120) = v1120;
              if (LODWORD(v1914[1]) >= (unint64_t)HIDWORD(v1914[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1914[0] + LODWORD(v1914[1])) = *(_DWORD *)(*((void *)v1935[0] + 12 * v1116 + 2) + 4 * v1120);
              ++LODWORD(v1914[1]);
              ++v1120;
            }
            while (v1118 != v1120);
            v1117 = (unsigned int *)v1935[0];
          }
          uint64_t v1121 = v1117[24 * v1119 + 6];
          if (v1121)
          {
            uint64_t v1124 = 0;
            uint64_t v1125 = 4 * v1118;
            do
            {
              *(_DWORD *)(*(void *)v1916 + v1125 + 4 * v1124) = v1098 + v1124;
              if (LODWORD(v1914[1]) >= (unint64_t)HIDWORD(v1914[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1914[0] + LODWORD(v1914[1])) = *(_DWORD *)(*((void *)v1935[0] + 12 * v1119 + 2) + 4 * v1124);
              ++LODWORD(v1914[1]);
              ++v1124;
            }
            while (v1121 != v1124);
          }
          char v1101 = v1828;
          if ((v1828 & 1) == 0)
          {
            v1122 = sub_1CCFCDA78((uint64_t)v1847, v1883, v1862, (uint64_t)&v1905, *((void *)v1935[0] + 12 * v1116), *((void *)v1935[0] + 12 * v1116 + 1), *((void *)v1935[0] + 12 * v1119), *((void *)v1935[0] + 12 * v1119 + 1), *(void **)v1916, *(unsigned int *)&v1916[8]);
            goto LABEL_735;
          }
          if (!(*(unsigned int (**)(uint64_t, void, void, llvm *, uint64_t))(*(void *)v1811 + 488))(v1811, *(void *)v1916, *(unsigned int *)&v1916[8], v1883, v1862))break; {
          v1122 = 0;
          }
          int v1123 = 0;
LABEL_735:
          __b = v1122;
          LODWORD(v1918) = v1123;
          *((void *)&v1918 + 1) = v1920;
          uint64_t v1919 = 0x1000000000;
          uint64_t v12 = v1814;
          if (LODWORD(v1914[1])) {
            sub_1CD41B598((uint64_t)&v1918 + 8, (uint64_t)v1914);
          }
          sub_1CD78EE18((uint64_t)v1921, (unint64_t)&__b);
          if (*((unsigned char **)&v1918 + 1) != v1920) {
            free(*((void **)&v1918 + 1));
          }
          if (v1914[0] != v1915) {
            free(v1914[0]);
          }
          if (*(unsigned char **)v1916 != &v1916[16]) {
            free(*(void **)v1916);
          }
          v1116 += 2;
          if (v1116 >= *(void *)v1821)
          {
            uint64_t v1112 = LODWORD(v1935[1]);
            goto LABEL_746;
          }
        }
        if (v1914[0] != v1915) {
          free(v1914[0]);
        }
        uint64_t v12 = v1814;
        if (*(unsigned char **)v1916 != &v1916[16]) {
          free(*(void **)v1916);
        }
        int v1127 = 1;
LABEL_776:
        sub_1CCAE8594((char **)v1921);
        sub_1CCAE8594((char **)v1935);
        char v1141 = v1101 & (v1127 == 0);
        char v1101 = 0;
      }
      while ((v1141 & 1) != 0);
      if (v1905)
      {
        int v1468 = *v1905;
        if ((v1468 - 4) > 0x1E)
        {
          if ((v1468 - 3) >= 0xFFFFFFFE) {
            v1684 = v1905;
          }
          else {
            v1684 = 0;
          }
          if ((v1468 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1685 = (unint64_t)(v1684 + 8);
            goto LABEL_1307;
          }
          if (v1468 == 3) {
            *((void *)v1905 + 1) = 0;
          }
        }
        else if ((v1905[1] & 0x7F) == 2 || *((_DWORD *)v1905 + 3))
        {
          uint64_t v1799 = *((void *)v1905 + 2);
          if ((v1799 & 4) != 0)
          {
            unint64_t v1685 = v1799 & 0xFFFFFFFFFFFFFFF8;
            if (v1685)
            {
LABEL_1307:
              v1935[0] = &v1905;
              sub_1CC5FA668(v1685 + 16, v1935);
            }
          }
        }
      }
      if (!v1127)
      {
        unint64_t v236 = 0;
        unsigned int v237 = v1801;
        uint64_t v234 = v1802;
        goto LABEL_1225;
      }
LABEL_1224:
      uint64_t v234 = sub_1CCF86088(v13, v12, v1097);
      unint64_t v236 = v1585 & 0xFFFFFFFF00000000;
      unsigned int v237 = v1585;
LABEL_1225:
      sub_1CB833A08((uint64_t)&v1911, v1912);
      if (v1910[0] != &v1910[2]) {
        free(v1910[0]);
      }
LABEL_231:
      if (v1903)
      {
        int v238 = *v1903;
        if ((v238 - 4) > 0x1E)
        {
          if ((v238 - 3) >= 0xFFFFFFFE) {
            uint64_t v319 = v1903;
          }
          else {
            uint64_t v319 = 0;
          }
          if ((v238 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v320 = (unint64_t)(v319 + 8);
            goto LABEL_264;
          }
          if (v238 == 3) {
            *((void *)v1903 + 1) = 0;
          }
        }
        else if ((v1903[1] & 0x7F) == 2 || *((_DWORD *)v1903 + 3))
        {
          uint64_t v1697 = *((void *)v1903 + 2);
          if ((v1697 & 4) != 0)
          {
            unint64_t v320 = v1697 & 0xFFFFFFFFFFFFFFF8;
            if (v320)
            {
LABEL_264:
              v1935[0] = &v1903;
              sub_1CC5FA668(v320 + 16, v1935);
            }
          }
        }
      }
      int v104 = (void *)(v236 | v237);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v202 = (char *)v1907 + 16 * v1908;
      *(void *)uint64_t v202 = v234;
LABEL_173:
      *((void *)v202 + 1) = v104;
LABEL_805:
      LODWORD(v1908) = v1908 + 1;
LABEL_806:
      int v1180 = v1908;
      if (*(unsigned char *)(*(void *)(v13 + 8) + 184290)) {
        BOOL v1181 = 0;
      }
      else {
        BOOL v1181 = v1908 == 0;
      }
      if (v1181)
      {
        if (!sub_1CD407020(v12)) {
          goto LABEL_841;
        }
        int v1186 = *(unsigned __int16 *)(v12 + 24);
        if (v1186 == 102)
        {
          uint64_t v1187 = *(void *)(v12 + 40);
          if (!*(void *)v1187) {
            goto LABEL_841;
          }
          uint64_t v1188 = *(void *)(v13 + 8);
          if (*(unsigned char *)(v1188 + 390 * *(void *)v1187 + 3959))
          {
            if (!*(unsigned char *)(v1188 + 390 * *(void *)v1187 + 3958))
            {
              __int16 v1189 = *(_WORD *)(v12 + 72);
              v1190 = sub_1CD7F3564(*(llvm::APFloatBase **)(v13 + 16), (const char *)0xDE, (uint64_t)&v1897, *(llvm **)v1187, *(void *)(v1187 + 8), *(void *)(*(void *)(v12 + 32) + 80), *(void **)(*(void *)(v12 + 32) + 88), v1189);
              v1191 = *(void **)(v13 + 16);
              uint64_t v1192 = *(unsigned __int16 *)(v12 + 58);
              uint64_t v1194 = *(void *)(v12 + 32);
              uint64_t v1193 = *(void *)(v12 + 40);
              v1195 = *(void **)v1194;
              LODWORD(v1935[1]) = *(_DWORD *)(v1194 + 8);
              v1935[0] = v1195;
              *(void *)&long long v1936 = *(void *)(v1194 + 40);
              DWORD2(v1936) = *(_DWORD *)(v1194 + 48);
              v1937 = v1190;
              int v1938 = v1196;
              v1198 = sub_1CD7FF854(v1191, (const char *)0x65, (const llvm::APInt *)&v1897, v1193, v1192, (uint64_t *)v1935, 3, v1189);
              if (v1908 >= HIDWORD(v1908)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1199 = (uint64_t **)((char *)v1907 + 16 * v1908);
              *v1199 = v1198;
              v1199[1] = v1197;
              unsigned int v1200 = v1908 + 1;
              LODWORD(v1908) = v1200;
              if (v1200 >= HIDWORD(v1908)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1201 = (uint64_t **)((char *)v1907 + 16 * v1200);
              *v1201 = v1198;
              v1201[1] = (uint64_t *)1;
              int v1180 = v1908 + 1;
              LODWORD(v1908) = v1908 + 1;
              goto LABEL_810;
            }
LABEL_841:
            int v1180 = v1908;
            goto LABEL_810;
          }
        }
        else
        {
          if ((v1186 - 126) <= 9 && ((1 << (v1186 - 126)) & 0x30F) != 0)
          {
            uint64_t v1202 = *(void *)(v13 + 8);
            v1203 = (void *)(*(void *)(*(void *)(*(void *)(v12 + 32) + 40) + 40)
                             + 16 * *(unsigned int *)(*(void *)(v12 + 32) + 48));
          }
          else
          {
            uint64_t v1202 = *(void *)(v13 + 8);
            v1203 = *(void **)(v12 + 40);
          }
          if (sub_1CD78EB98(v1202, v1186, *v1203)) {
            goto LABEL_841;
          }
        }
LABEL_812:
        uint64_t v17 = 1;
        goto LABEL_814;
      }
LABEL_810:
      if (v1180)
      {
        sub_1CCF76444(v13, v12, (uint64_t *)v1907);
        goto LABEL_812;
      }
      uint64_t v17 = 0;
LABEL_814:
      if (v1897)
      {
        int v1182 = *v1897;
        if ((v1182 - 4) > 0x1E)
        {
          if ((v1182 - 3) >= 0xFFFFFFFE) {
            v1184 = v1897;
          }
          else {
            v1184 = 0;
          }
          if ((v1182 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1185 = (unint64_t)(v1184 + 8);
            goto LABEL_826;
          }
          if (v1182 == 3) {
            *((void *)v1897 + 1) = 0;
          }
        }
        else if ((v1897[1] & 0x7F) == 2 || *((_DWORD *)v1897 + 3))
        {
          uint64_t v1534 = *((void *)v1897 + 2);
          if ((v1534 & 4) != 0)
          {
            unint64_t v1185 = v1534 & 0xFFFFFFFFFFFFFFF8;
            if (v1185)
            {
LABEL_826:
              v1935[0] = &v1897;
              sub_1CC5FA668(v1185 + 16, v1935);
            }
          }
        }
      }
      if (v1907 != v1909) {
        free(v1907);
      }
      return v17;
    case 0x93:
      v841 = *(uint64_t **)(v12 + 32);
      uint64_t v843 = *v841;
      uint64_t v842 = v841[1];
      uint64_t v845 = v841[5];
      v844 = (void *)v841[6];
      uint64_t v846 = v841[10];
      uint64_t v847 = v841[11];
      int v848 = *(unsigned __int16 *)(v846 + 24);
      if (v848 != 11 && v848 != 35)
      {
        uint64_t v849 = v842;
        goto LABEL_1021;
      }
      uint64_t v849 = v842;
      uint64_t v850 = *(void *)(v843 + 40) + 16 * v842;
      v852 = *(void **)v850;
      v851 = *(llvm::EVT ***)(v850 + 8);
      v1935[0] = v852;
      v1935[1] = v851;
      if ((_BYTE)v852)
      {
        LOBYTE(v853) = sub_1CB8C2FBC((unsigned __int8 *)v1935);
        unint64_t v855 = 0;
        uint64_t v5 = 0;
      }
      else
      {
        unint64_t v853 = llvm::EVT::getEVT(v851[3], 0, v5);
        uint64_t v5 = v854;
        unint64_t v855 = v853 & 0xFFFFFFFFFFFFFF00;
      }
      uint64_t v1268 = *(void *)(v845 + 40) + 16 * v844;
      v1269 = *(void **)v1268;
      if (v853 == *(void *)v1268)
      {
        if ((_BYTE)v853 || *(void *)(v1268 + 8) == v5)
        {
LABEL_1019:
          v1339 = *(llvm::APFloatBase **)(v13 + 16);
          uint64_t v1340 = *(void *)(v843 + 40) + 16 * v842;
          v1341 = *(llvm **)v1340;
          uint64_t v1342 = *(void *)(v1340 + 8);
          uint64_t v1343 = *((void *)v1339 + 104);
          if (v1343) {
            __int16 v1344 = *(_WORD *)(v1343 + 8);
          }
          else {
            __int16 v1344 = 0;
          }
          v1376 = sub_1CD7F3564(v1339, (const char *)0x9B, (uint64_t)&v1897, v1341, v1342, v845, v844, v1344);
          unsigned int v1378 = v1377;
          *(_OWORD *)v1935 = *(_OWORD *)(*(void *)(v843 + 40) + 16 * v842);
          int v1379 = sub_1CD3DB440((llvm::EVT *)v1935, v1377);
          v1935[0] = &v1936;
          v1935[1] = (void *)0x800000000;
          if (v1379)
          {
            LODWORD(v1380) = 0;
            for (uint64_t j = 0; j != v1379; ++j)
            {
              uint64_t v1382 = *(void *)(v846 + 80);
              v1383 = (void *)(v1382 + 24);
              if (*(_DWORD *)(v1382 + 32) >= 0x41u) {
                v1383 = (void *)*v1383;
              }
              if (j == *v1383) {
                int v1384 = v1379;
              }
              else {
                int v1384 = j;
              }
              if (v1380 >= HIDWORD(v1935[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1935[0] + v1380) = v1384;
              uint64_t v1380 = ++LODWORD(v1935[1]);
            }
            v1385 = (long long *)v1935[0];
          }
          else
          {
            uint64_t v1380 = 0;
            v1385 = &v1936;
          }
          uint64_t v33 = sub_1CCFCDA78(*(void *)(v13 + 16), *(llvm **)(*(void *)(v843 + 40) + 16 * v842), *(void *)(*(void *)(v843 + 40) + 16 * v842 + 8), (uint64_t)&v1897, v843, v842, (uint64_t)v1376, v1378, v1385, v1380);
          uint64_t v35 = v1459;
          if (v1935[0] != &v1936) {
            free(v1935[0]);
          }
          goto LABEL_802;
        }
      }
      else if ((_BYTE)v853)
      {
        if ((v853 - 120) >= 0x20u
          && (v853 - 2) >= 6u
          && (v853 - 15) > 0x3Bu)
        {
          goto LABEL_1021;
        }
        v1338 = *(void **)(v1268 + 8);
        v1935[0] = v1269;
        v1935[1] = v1338;
LABEL_1018:
        if (sub_1CD787E7C((unsigned __int8 *)v1935, v855 | v853, v5)) {
          goto LABEL_1019;
        }
LABEL_1021:
        uint64_t v1345 = *(void *)(v843 + 40) + 16 * v849;
        v1347 = *(void **)v1345;
        v1346 = *(llvm::EVT ***)(v1345 + 8);
        v1910[0] = v1347;
        v1910[1] = v1346;
        uint64_t v1849 = v845;
        unsigned int v1864 = v844;
        uint64_t v1836 = v847;
        if ((_BYTE)v1347)
        {
          LOBYTE(v1348) = sub_1CB8C2FBC((unsigned __int8 *)v1910);
          unint64_t v1350 = 0;
          uint64_t v1829 = 0;
        }
        else
        {
          unint64_t v1348 = llvm::EVT::getEVT(v1346[3], 0, v5);
          uint64_t v1829 = v1349;
          unint64_t v1350 = v1348 & 0xFFFFFFFFFFFFFF00;
        }
        uint64_t v1351 = v1350 | v1348;
        v1352 = sub_1CD7F0664(*(void *)(v13 + 16), (uint64_t)v1910[0], (uint64_t)v1910[1], 1u);
        uint64_t v1884 = v1353;
        uint64_t v1354 = *(void *)(v13 + 16);
        int v1822 = *((_DWORD *)v1352 + 19);
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v1354 + 40) + 432), v1822);
        if (FixedStack) {
          int v1356 = *((_DWORD *)FixedStack + 3);
        }
        else {
          int v1356 = 0;
        }
        long long v1936 = 0u;
        *(_OWORD *)v1935 = 0u;
        v1921[0] = (void *)((unint64_t)FixedStack | 4);
        v1921[1] = 0;
        LODWORD(v1922) = v1356;
        BYTE4(v1922) = 0;
        char v1357 = sub_1CD7EA9CC(v1354, *(void *)(*(void *)(v843 + 40) + 16 * v849), *(void *)(*(void *)(v843 + 40) + 16 * v849 + 8));
        v1358 = sub_1CD7FB188(v1354, v1354 + 112, 0, (uint64_t)&v1897, v843, v842, (uint64_t)v1352, v1884, (uint64_t)v1921, v1357, 0, 0, (long long *)v1935);
        int v1360 = v1359;
        v1361 = sub_1CD817474(*(void *)(v13 + 8), *(void *)(v13 + 16), (uint64_t)v1352, v1884, (llvm *)v1910[0], (uint64_t)v1910[1], v846, v1836);
        unsigned int v1363 = v1362;
        uint64_t v1364 = *(void *)(v13 + 16);
        int v1365 = *(_DWORD *)(*(void *)(**(void **)(v1364 + 40) + 40) + 276);
        v1921[1] = 0;
        v1921[0] = 0;
        long long v1936 = 0u;
        *(_OWORD *)v1935 = 0u;
        LODWORD(v1922) = v1365;
        BYTE4(v1922) = 0;
        char v1366 = sub_1CD7EA9CC(v1364, v1351, v1829);
        v1367 = sub_1CD7FB71C(v1364, (uint64_t)v1358, v1360, (uint64_t)&v1897, v1849, v1864, (uint64_t)v1361, v1363, (uint64_t)v1921, v1351, v1829, v1366, 0, 0, (long long *)v1935);
        int v1369 = v1368;
        uint64_t v1370 = *(void *)(v13 + 16);
        v1371 = v1910[0];
        v1372 = v1910[1];
        v1373 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v1370 + 40) + 432), v1822);
        v1921[0] = (void *)((unint64_t)v1373 | 4);
        v1921[1] = 0;
        BYTE4(v1922) = 0;
        if (v1373) {
          int v1374 = *((_DWORD *)v1373 + 3);
        }
        else {
          int v1374 = 0;
        }
        LODWORD(v1922) = v1374;
        long long v1936 = 0u;
        *(_OWORD *)v1935 = 0u;
        uint64_t v33 = sub_1CD7F00F8(v1370, (uint64_t)v1371, (uint64_t)v1372, (uint64_t)&v1897, (uint64_t)v1367, v1369, (uint64_t)v1352, v1884, (long long *)v1921, 0, 0, 0, (long long *)v1935, 0);
        uint64_t v35 = v1375;
        goto LABEL_802;
      }
      if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
        int v1270 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
      }
      else {
        int v1270 = *(_DWORD *)(v5 + 8);
      }
      if (v1270 != 13) {
        goto LABEL_1021;
      }
      v1271 = *(void **)(v1268 + 8);
      v1935[0] = v1269;
      v1935[1] = v1271;
      if (v853 == v1269 && v1271 == (void *)v5) {
        goto LABEL_1019;
      }
      goto LABEL_1018;
    case 0x94:
      *(_OWORD *)v1935 = *(_OWORD *)(*(void *)(**(void **)(v12 + 32) + 40)
                                   + 16 * *(unsigned int *)(*(void *)(v12 + 32) + 8));
      if (sub_1CD3DB440((llvm::EVT *)v1935, (const char *)v14) == 1)
      {
        uint64_t v231 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v504 = *(void *)(v12 + 32);
        uint64_t v503 = *(void *)(v12 + 40);
        uint64_t v154 = *(llvm **)v503;
        uint64_t v155 = *(void *)(v503 + 8);
        uint64_t v233 = *(uint64_t **)v504;
        uint64_t v156 = *(void **)(v504 + 8);
        uint64_t v505 = *((void *)v231 + 104);
        if (v505) {
          __int16 v158 = *(_WORD *)(v505 + 8);
        }
        else {
          __int16 v158 = 0;
        }
        uint64_t v232 = 216;
LABEL_225:
        int v89 = sub_1CD7F3564(v231, (const char *)v232, (uint64_t)&v1897, v154, v155, (uint64_t)v233, v156, v158);
      }
      else
      {
        int v89 = sub_1CCF85B90(v13, v12, 0);
      }
      goto LABEL_226;
    case 0x95:
      uint64_t v18 = sub_1CCF86088(v13, v12, v5);
      goto LABEL_801;
    case 0x96:
      v808 = *(uint64_t **)(v12 + 32);
      uint64_t v809 = *v808;
      uint64_t v810 = v808[1];
      uint64_t v811 = v808[5];
      uint64_t v812 = v808[6];
      uint64_t v1827 = v808[11];
      uint64_t v1834 = v808[10];
      v813 = *(void **)(v12 + 64);
      v1910[0] = v813;
      if (v813)
      {
        llvm::MetadataTracking::track((uint64_t)v1910, (unsigned __int8 *)v813, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1910[1]) = v15;
      uint64_t v814 = *(void *)(v809 + 40) + 16 * v810;
      v815 = *(llvm **)v814;
      uint64_t v816 = *(void *)(v814 + 8);
      *(void *)v1820 = v812;
      unsigned int v1859 = v812;
      v817 = (uint64_t *)(*(void *)(v811 + 40) + 16 * v812);
      uint64_t v1810 = v817[1];
      uint64_t v1813 = *v817;
      v818 = sub_1CD7F0664(*(void *)(v13 + 16), (uint64_t)v815, v816, 1u);
      uint64_t v1845 = v819;
      v820 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(*(void *)(v13 + 16) + 40) + 432), *((_DWORD *)v818 + 19));
      uint64_t v1880 = v811;
      if (v820) {
        int v821 = *((_DWORD *)v820 + 3);
      }
      else {
        int v821 = 0;
      }
      int v1808 = v821;
      uint64_t v822 = *(void *)(v13 + 16);
      v1921[0] = (void *)((unint64_t)v820 | 4);
      v1921[1] = 0;
      LODWORD(v1922) = v821;
      BYTE4(v1922) = 0;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      __lenc = (void *)((unint64_t)v820 | 4);
      v823 = (uint64_t *)(*(void *)(v809 + 40) + 16 * v810);
      char v824 = sub_1CD7EA9CC(v822, *v823, v823[1]);
      v1804 = sub_1CD7FB188(v822, v822 + 112, 0, (uint64_t)v1910, v809, v810, (uint64_t)v818, v1845, (uint64_t)v1921, v824, 0, 0, (long long *)v1935);
      int v826 = v825;
      v827 = sub_1CD817540(*(void *)(v13 + 8), *(void *)(v13 + 16), (uint64_t)v818, v1845, v815, v816, v1813, v1810, v1834, v1827);
      unsigned int v829 = v828;
      uint64_t v830 = *(void *)(v13 + 16);
      int v831 = *(_DWORD *)(*(void *)(**(void **)(v830 + 40) + 40) + 276);
      v1921[1] = 0;
      v1921[0] = 0;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      LODWORD(v1922) = v831;
      BYTE4(v1922) = 0;
      char v832 = sub_1CD7EA9CC(v830, *(void *)(*(void *)(v1880 + 40) + 16 * *(void *)v1820), *(void *)(*(void *)(v1880 + 40) + 16 * *(void *)v1820 + 8));
      v833 = sub_1CD7FB188(v830, (uint64_t)v1804, v826, (uint64_t)v1910, v1880, v1859, (uint64_t)v827, v829, (uint64_t)v1921, v832, 0, 0, (long long *)v1935);
      int v835 = v834;
      uint64_t v836 = *(void *)(v13 + 16);
      v837 = *(uint64_t **)(v12 + 40);
      uint64_t v838 = *v837;
      uint64_t v839 = v837[1];
      v1921[0] = __lenc;
      v1921[1] = 0;
      LODWORD(v1922) = v1808;
      BYTE4(v1922) = 0;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      uint64_t v33 = sub_1CD7F00F8(v836, v838, v839, (uint64_t)v1910, (uint64_t)v833, v835, (uint64_t)v818, v1845, (long long *)v1921, 0, 0, 0, (long long *)v1935, 0);
      uint64_t v35 = v840;
      v456 = (unsigned __int8 *)v1910[0];
      if (!v1910[0]) {
        goto LABEL_802;
      }
      goto LABEL_1149;
    case 0x97:
      uint64_t v18 = sub_1CCF85B90(v13, v12, 0);
      goto LABEL_801;
    case 0x99:
      v1921[0] = &v1922;
      v1921[1] = (void *)0x2000000000;
      *(_OWORD *)v1935 = *(_OWORD *)*(void *)(v12 + 40);
      v599 = *(unsigned int **)(v12 + 80);
      sub_1CD3DB440((llvm::EVT *)v1935, (const char *)v14);
      uint64_t v601 = *(void *)(v12 + 40);
      v603 = *(void **)v601;
      v602 = *(llvm::EVT ***)(v601 + 8);
      v1910[0] = v603;
      v1910[1] = v602;
      if ((_BYTE)v603)
      {
        LOBYTE(v604) = sub_1CB8C2FBC((unsigned __int8 *)v1910);
        unint64_t v607 = 0;
        v606 = 0;
      }
      else
      {
        unint64_t v604 = llvm::EVT::getEVT(v602[3], 0, v600);
        v606 = v605;
        unint64_t v607 = v604 & 0xFFFFFFFFFFFFFF00;
      }
      int v1007 = v604;
      v1008 = (void *)(v607 | v604);
      uint64_t v1009 = *(void *)(v12 + 32);
      unint64_t v1010 = *(void *)(v1009 + 8);
      size_t v1011 = *(void *)(v1009 + 48);
      v1846 = *(uint64_t **)(v1009 + 40);
      v1860 = *(uint64_t **)v1009;
      unint64_t v1012 = *(void *)(v13 + 8);
      if ((_BYTE)v604 && *(void *)(v1012 + 8 * v604 + 96))
      {
        uint64_t v1835 = *(void *)(v1009 + 48);
        goto LABEL_1068;
      }
      llvm::TargetLoweringBase::getTypeConversion(v1012, *(llvm::LLVMContext **)(*(void *)(v13 + 16) + 56), (BOOL)v1008, (uint64_t)v606, (uint64_t)v1935);
      char v1013 = (char)v1935[1];
      __b = v1935[1];
      *(void *)&long long v1918 = v1936;
      if (v1007 == LOBYTE(v1935[1]))
      {
        if (v1007 || (const char *)v1936 == v606)
        {
          size_t v1164 = v1011;
          goto LABEL_1067;
        }
        v1935[0] = v1008;
        v1935[1] = (void *)v606;
      }
      else
      {
        v1935[0] = v1008;
        v1935[1] = (void *)v606;
        if (v1013)
        {
          uint64_t v1014 = sub_1CB87E200((unsigned __int8 *)&__b);
LABEL_790:
          unint64_t v1161 = v1014;
          int v1162 = v1015;
          if (v1007) {
            unint64_t v1163 = sub_1CB87E200((unsigned __int8 *)v1935);
          }
          else {
            unint64_t v1163 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1935);
          }
          size_t v1164 = v1011;
          if ((v1162 != 1 || v605 == 1) && v1161 < v1163)
          {
            unint64_t v1165 = v1010;
            v1166 = *(llvm::LLVMContext **)(*(void *)(v13 + 16) + 56);
            v1167 = __b;
            uint64_t v1168 = v1918;
            if (LOBYTE(v1910[0])) {
              uint64_t v1169 = sub_1CB87E200((unsigned __int8 *)v1910);
            }
            else {
              uint64_t v1169 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1910);
            }
            unint64_t v1392 = v1169;
            if (v1170 == 1) {
            if ((_BYTE)__b)
            }
              uint64_t v1393 = sub_1CB87E200((unsigned __int8 *)&__b);
            else {
              uint64_t v1393 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__b);
            }
            unint64_t v1395 = v1393;
            if (v1394 == 1) {
            v1397 = (void *)sub_1CB8E5DAC(v1166, (uint64_t)v1167, v1168, v1392 / v1395, 0);
            }
            v1935[0] = v1397;
            v1935[1] = v1396;
            v1398 = *(llvm::APFloatBase **)(v13 + 16);
            uint64_t v1399 = *((void *)v1398 + 104);
            if (v1399) {
              __int16 v1400 = *(_WORD *)(v1399 + 8);
            }
            else {
              __int16 v1400 = 0;
            }
            v1860 = sub_1CD7F3564(v1398, (const char *)0xD8, (uint64_t)&v1897, (llvm *)v1397, (uint64_t)v1396, (uint64_t)v1860, (void *)v1165, v1400);
            unsigned int v1837 = v1401;
            v1402 = *(llvm::APFloatBase **)(v13 + 16);
            uint64_t v1403 = *((void *)v1402 + 104);
            if (v1403) {
              __int16 v1404 = *(_WORD *)(v1403 + 8);
            }
            else {
              __int16 v1404 = 0;
            }
            v1846 = sub_1CD7F3564(v1402, (const char *)0xD8, (uint64_t)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v1846, (void *)v1164, v1404);
            size_t __lenb = v1164 & 0xFFFFFFFF00000000;
            unsigned int v1823 = v1405;
            unsigned int v1406 = sub_1CD3DB440((llvm::EVT *)v1935, v1405);
            unsigned int v1409 = sub_1CD3DB440((llvm::EVT *)v1910, v1407);
            if (v1406 / v1409 <= 1) {
              int v1410 = 1;
            }
            else {
              int v1410 = v1406 / v1409;
            }
            if (sub_1CD3DB440((llvm::EVT *)v1910, v1408))
            {
              unint64_t v1445 = 0;
              do
              {
                if ((v599[v1445] & 0x80000000) != 0)
                {
                  if (v1409 <= v1406)
                  {
                    unsigned int v1446 = v1921[1];
                    int v1447 = v1410;
                    do
                    {
                      if (v1446 >= HIDWORD(v1921[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v1921[0] + v1446) = v599[v1445];
                      unsigned int v1446 = ++LODWORD(v1921[1]);
                      --v1447;
                    }
                    while (v1447);
                  }
                }
                else if (v1409 <= v1406)
                {
                  int v1448 = 0;
                  unsigned int v1449 = v1921[1];
                  do
                  {
                    if (v1449 >= HIDWORD(v1921[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v1921[0] + v1449) = v1448 + v599[v1445] * (v1406 / v1409);
                    unsigned int v1449 = ++LODWORD(v1921[1]);
                    ++v1448;
                  }
                  while (v1410 != v1448);
                }
                ++v1445;
              }
              while (v1445 < sub_1CD3DB440((llvm::EVT *)v1910, v605));
            }
            unint64_t v1010 = v1837 | v1165 & 0xFFFFFFFF00000000;
            size_t v1164 = v1823 | __lenb;
            v599 = (unsigned int *)v1921[0];
            *(_OWORD *)v1910 = *(_OWORD *)v1935;
          }
LABEL_1067:
          uint64_t v1835 = v1164;
          v1008 = __b;
          v606 = (const char *)v1918;
LABEL_1068:
          unsigned int v1411 = sub_1CD3DB440((llvm::EVT *)v1910, v605);
          v1935[0] = &v1936;
          v1935[1] = (void *)0x1000000000;
          if (v1411)
          {
            unsigned int v1412 = v1411;
            uint64_t v1830 = v1010;
            uint64_t v1413 = v1411;
            do
            {
              unsigned int v1415 = *v599++;
              uint64_t v1414 = v1415;
              if ((v1415 & 0x80000000) != 0)
              {
                v1416 = sub_1CD3DD4D8(*(void *)(v13 + 16), (llvm *)v1008, (uint64_t)v606);
              }
              else
              {
                uint64_t v1418 = *(void *)(v13 + 16);
                if (v1414 >= v1412)
                {
                  uint64_t v1423 = sub_1CD7EC9F4(*(void *)(v13 + 16), v1414 - v1412, (uint64_t)&v1897, 0);
                  uint64_t v1426 = *(void *)(v1418 + 832);
                  if (v1426) {
                    LOWORD(v1426) = *(_WORD *)(v1426 + 8);
                  }
                  v1416 = sub_1CCFDED5C(v1418, 148, (const llvm::APInt *)&v1897, (llvm *)v1008, (uint64_t)v606, (uint64_t)v1846, v1835, v1425, v1423, v1424, v1426);
                }
                else
                {
                  uint64_t v1419 = sub_1CD7EC9F4(*(void *)(v13 + 16), v1414, (uint64_t)&v1897, 0);
                  uint64_t v1422 = *(void *)(v1418 + 832);
                  if (v1422) {
                    LOWORD(v1422) = *(_WORD *)(v1422 + 8);
                  }
                  v1416 = sub_1CCFDED5C(v1418, 148, (const llvm::APInt *)&v1897, (llvm *)v1008, (uint64_t)v606, (uint64_t)v1860, v1830, v1421, v1419, v1420, v1422);
                }
              }
              if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1427 = (uint64_t **)((char *)v1935[0] + 16 * LODWORD(v1935[1]));
              *v1427 = v1416;
              v1427[1] = v1417;
              uint64_t v1428 = ++LODWORD(v1935[1]);
              --v1413;
            }
            while (v1413);
            v1429 = (uint64_t *)v1935[0];
          }
          else
          {
            uint64_t v1428 = 0;
            v1429 = (uint64_t *)&v1936;
          }
          v1430 = *(void **)(v13 + 16);
          uint64_t v1431 = v1430[104];
          if (v1431) {
            uint64_t v1432 = *(unsigned __int16 *)(v1431 + 8);
          }
          else {
            uint64_t v1432 = 0;
          }
          v1433 = sub_1CD7FF4E8(v1430, (const char *)0x92, (const llvm::APInt *)&v1897, (llvm *)v1910[0], (uint64_t)v1910[1], v1429, v1428, v1432);
          *(void *)&long long v1896 = v1433;
          DWORD2(v1896) = v1434;
          v1435 = *(llvm::APFloatBase **)(v13 + 16);
          uint64_t v1436 = *(void *)(v12 + 40);
          v1437 = *(llvm **)v1436;
          uint64_t v1438 = *(void *)(v1436 + 8);
          uint64_t v1439 = *((void *)v1435 + 104);
          if (v1439) {
            __int16 v1440 = *(_WORD *)(v1439 + 8);
          }
          else {
            __int16 v1440 = 0;
          }
          v1441 = sub_1CD7F3564(v1435, (const char *)0xD8, (uint64_t)&v1897, v1437, v1438, (uint64_t)v1433, *((void **)&v1896 + 1), v1440);
          *(void *)&long long v1896 = v1441;
          DWORD2(v1896) = v1442;
          v1443 = (uint64_t *)*((void *)&v1896 + 1);
          if (v1908 >= HIDWORD(v1908)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1444 = (uint64_t **)((char *)v1907 + 16 * v1908);
          *v1444 = v1441;
          v1444[1] = v1443;
          LODWORD(v1908) = v1908 + 1;
          if (v1935[0] != &v1936) {
            free(v1935[0]);
          }
          unsigned int v430 = v1921[0];
          if (v1921[0] != &v1922) {
LABEL_1094:
          }
            free(v430);
          goto LABEL_806;
        }
      }
      uint64_t v1014 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__b);
      goto LABEL_790;
    case 0x9A:
      uint64_t v18 = sub_1CD81AB54(*(void *)(v13 + 8), v12, *(void **)(v13 + 16));
      goto LABEL_801;
    case 0x9B:
      v789 = *(void **)(v12 + 64);
      v1910[0] = v789;
      if (v789)
      {
        llvm::MetadataTracking::track((uint64_t)v1910, (unsigned __int8 *)v789, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1910[1]) = v15;
      v790 = sub_1CD7F0664(*(void *)(v13 + 16), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 1u);
      uint64_t v1879 = v791;
      uint64_t v1844 = (uint64_t)v790;
      int v792 = *((_DWORD *)v790 + 19);
      uint64_t v793 = *(void *)(v13 + 16);
      v794 = *(uint64_t **)(v12 + 32);
      uint64_t v796 = *v794;
      uint64_t v795 = v794[1];
      v797 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v793 + 40) + 432), v792);
      v799 = (void *)((unint64_t)v797 | 4);
      if (v797) {
        int v800 = *((_DWORD *)v797 + 3);
      }
      else {
        int v800 = 0;
      }
      uint64_t v801 = *(void *)(v12 + 40);
      v803 = *(void **)v801;
      uint64_t v802 = *(void *)(v801 + 8);
      __b = v803;
      *(void *)&long long v1918 = v802;
      int v1858 = v792;
      if ((_BYTE)v803)
      {
        LOBYTE(v804) = sub_1CB8C2FBC((unsigned __int8 *)&__b);
        unint64_t v807 = 0;
        uint64_t v806 = 0;
      }
      else
      {
        unint64_t v804 = llvm::EVT::getEVT(*(llvm::EVT **)(v802 + 24), 0, v798);
        uint64_t v806 = v805;
        unint64_t v807 = v804 & 0xFFFFFFFFFFFFFF00;
      }
      uint64_t v1055 = v807 | v804;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      v1921[0] = v799;
      v1921[1] = 0;
      LODWORD(v1922) = v800;
      BYTE4(v1922) = 0;
      char v1056 = sub_1CD7EA9CC(v793, v1055, v806);
      v1057 = sub_1CD7FB71C(v793, v793 + 112, 0, (uint64_t)v1910, v796, v795, v1844, v1879, (uint64_t)v1921, v1055, v806, v1056, 0, 0, (long long *)v1935);
      int v1059 = v1058;
      uint64_t v1060 = *(void *)(v13 + 16);
      v1061 = *(uint64_t **)(v12 + 40);
      uint64_t v1063 = *v1061;
      uint64_t v1062 = v1061[1];
      v1064 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v1060 + 40) + 432), v1858);
      v1921[0] = (void *)((unint64_t)v1064 | 4);
      v1921[1] = 0;
      BYTE4(v1922) = 0;
      if (v1064) {
        int v1065 = *((_DWORD *)v1064 + 3);
      }
      else {
        int v1065 = 0;
      }
      LODWORD(v1922) = v1065;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      uint64_t v33 = sub_1CD7F00F8(v1060, v1063, v1062, (uint64_t)v1910, (uint64_t)v1057, v1059, v1844, v1879, (long long *)v1921, 0, 0, 0, (long long *)v1935, 0);
      uint64_t v35 = v1066;
      goto LABEL_1148;
    case 0x9C:
      v595 = *(void **)(v12 + 64);
      v1935[0] = v595;
      if (v595)
      {
        llvm::MetadataTracking::track((uint64_t)v1935, (unsigned __int8 *)v595, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1935[1]) = v15;
      uint64_t v33 = sub_1CD787B1C(*(void *)(v13 + 16), **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t)v1935, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8));
      uint64_t v35 = v596;
      v456 = (unsigned __int8 *)v1935[0];
      if (!v1935[0]) {
        goto LABEL_802;
      }
      int v457 = *(unsigned __int8 *)v1935[0];
      if ((v457 - 4) <= 0x1E)
      {
        if ((*((unsigned char *)v1935[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1935[0] + 3)) {
          goto LABEL_802;
        }
        uint64_t v597 = *((void *)v1935[0] + 2);
        if ((v597 & 4) == 0) {
          goto LABEL_802;
        }
        unint64_t v598 = v597 & 0xFFFFFFFFFFFFFFF8;
        if (!v598) {
          goto LABEL_802;
        }
LABEL_1001:
        v1921[0] = v1935;
        sub_1CC5FA668(v598 + 16, v1921);
        goto LABEL_802;
      }
      if ((v457 - 3) >= 0xFFFFFFFE) {
        v1334 = v1935[0];
      }
      else {
        v1334 = 0;
      }
      if ((v457 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v598 = (unint64_t)v1334 + 8;
        goto LABEL_1001;
      }
      goto LABEL_1160;
    case 0x9F:
    case 0xA0:
      if (v16 == 159) {
        uint64_t v323 = 64;
      }
      else {
        uint64_t v323 = 63;
      }
      uint64_t v324 = sub_1CD7F95FC(*(void *)(v13 + 16), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8));
      uint64_t v198 = sub_1CD7FFB18(*(void **)(v13 + 16), (const char *)v323, (const llvm::APInt *)&v1897, v324, v325, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v326, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48));
      *(void *)&long long v1896 = v198;
      DWORD2(v1896) = v327;
      goto LABEL_354;
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
      unsigned int v239 = dword_1CFB2D610[(__int16)(v16 - 167)];
      uint64_t v240 = *(void *)(v12 + 32);
      uint64_t v241 = *(void *)v240;
      DWORD2(v1896) = *(_DWORD *)(v240 + 8);
      *(void *)&long long v1896 = v241;
      DWORD2(v1895) = *(_DWORD *)(v240 + 48);
      *(void *)&long long v1895 = *(void *)(v240 + 40);
      unsigned __int8 v242 = *(void **)(v13 + 16);
      uint64_t v243 = *(void *)(v241 + 40) + 16 * DWORD2(v1896);
      int v244 = *(llvm **)v243;
      uint64_t v245 = *(void *)(v243 + 8);
      uint64_t v246 = sub_1CD7EE368(v242, v239);
      uint64_t v249 = sub_1CD7F6564(v242, (const char *)0xC0, (const llvm::APInt *)&v1897, v244, v245, v241, SDWORD2(v1896), v248, v1895, SDWORD2(v1895), v241, SDWORD2(v1896), v1895, SDWORD2(v1895), v246, v247);
      *(void *)&long long v1896 = v249;
      DWORD2(v1896) = v250;
      unsigned int v251 = (uint64_t *)*((void *)&v1896 + 1);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v252 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *uint64_t v252 = v249;
      v252[1] = v251;
      LODWORD(v1908) = v1908 + 1;
      goto LABEL_806;
    case 0xAE:
      uint64_t v37 = sub_1CD0198B8(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16), 0);
      goto LABEL_168;
    case 0xAF:
    case 0xB0:
    case 0xB1:
      *(_OWORD *)v1921 = *(_OWORD *)*(void *)(v12 + 40);
      unsigned int v277 = sub_1CD3DB440((llvm::EVT *)v1921, (const char *)v14);
      v1935[0] = &v1936;
      v1935[1] = (void *)0x800000000;
      if (v277)
      {
        uint64_t v280 = 0;
        *(void *)v1853 = v277;
        do
        {
          uint64_t v281 = *(void *)(v13 + 16);
          uint64_t v282 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v1921, v278, v279);
          uint64_t v284 = v283;
          uint64_t v285 = *(uint64_t **)(v12 + 32);
          uint64_t v286 = *v285;
          uint64_t v287 = v285[1];
          uint64_t v288 = sub_1CD7EC9F4(*(void *)(v13 + 16), v280, (uint64_t)&v1897, 0);
          uint64_t v291 = *(void *)(v281 + 832);
          if (v291) {
            LOWORD(v291) = *(_WORD *)(v291 + 8);
          }
          v1872 = sub_1CCFDED5C(v281, 148, (const llvm::APInt *)&v1897, v282, v284, v286, v287, v290, v288, v289, v291);
          uint64_t v293 = v292;
          uint64_t v294 = *(void *)(v13 + 16);
          unsigned int v296 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v1921, v292, v295);
          uint64_t v298 = v297;
          uint64_t v299 = *(void *)(v12 + 32);
          uint64_t v300 = *(void *)(v299 + 40);
          uint64_t v301 = *(void *)(v299 + 48);
          uint64_t v302 = sub_1CD7EC9F4(*(void *)(v13 + 16), v280, (uint64_t)&v1897, 0);
          uint64_t v305 = *(void *)(v294 + 832);
          if (v305) {
            LOWORD(v305) = *(_WORD *)(v305 + 8);
          }
          uint64_t v306 = sub_1CCFDED5C(v294, 148, (const llvm::APInt *)&v1897, v296, v298, v300, v301, v304, v302, v303, v305);
          uint64_t v308 = v307;
          uint64_t v309 = *(void *)(v13 + 16);
          uint64_t v310 = *(unsigned __int16 *)(v12 + 24);
          v313 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v1921, v307, v311);
          uint64_t v315 = *(void *)(v309 + 832);
          if (v315) {
            LOWORD(v315) = *(_WORD *)(v315 + 8);
          }
          uint64_t v316 = sub_1CCFDED5C(v309, v310, (const llvm::APInt *)&v1897, v313, v312, (uint64_t)v1872, v293, v314, (uint64_t)v306, v308, v315);
          if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v317 = (uint64_t **)((char *)v1935[0] + 16 * LODWORD(v1935[1]));
          uint64_t *v317 = v316;
          v317[1] = (uint64_t *)v278;
          uint64_t v318 = ++LODWORD(v1935[1]);
          ++v280;
        }
        while (*(void *)v1853 != v280);
        uint64_t v431 = (uint64_t *)v1935[0];
      }
      else
      {
        uint64_t v318 = 0;
        uint64_t v431 = (uint64_t *)&v1936;
      }
      unsigned int v435 = *(void **)(v13 + 16);
      uint64_t v436 = *(void *)(v12 + 40);
      v437 = *(llvm **)v436;
      uint64_t v438 = *(void *)(v436 + 8);
      uint64_t v439 = v435[104];
      if (v439) {
        uint64_t v440 = *(unsigned __int16 *)(v439 + 8);
      }
      else {
        uint64_t v440 = 0;
      }
      v442 = sub_1CD7FF4E8(v435, (const char *)0x92, (const llvm::APInt *)&v1897, v437, v438, v431, v318, v440);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v443 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *uint64_t v443 = v442;
      v443[1] = v441;
      LODWORD(v1908) = v1908 + 1;
      unsigned int v430 = v1935[0];
      if (v1935[0] == &v1936) {
        goto LABEL_806;
      }
      goto LABEL_1094;
    case 0xB2:
    case 0xB3:
      uint64_t v18 = sub_1CD812D90(*(void *)(v13 + 8), v12, 1, *(void *)(v13 + 16));
      if (!v18) {
        goto LABEL_806;
      }
      goto LABEL_801;
    case 0xB4:
    case 0xB5:
      uint64_t v18 = sub_1CD81252C(*(void *)(v13 + 8), v12, *(void **)(v13 + 16));
      if (!v18) {
        goto LABEL_806;
      }
      goto LABEL_801;
    case 0xB6:
      uint64_t v37 = sub_1CD815814(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_168;
    case 0xB7:
    case 0xBC:
      uint64_t v37 = sub_1CD019244(*(void *)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_168;
    case 0xB8:
    case 0xBD:
      uint64_t v37 = sub_1CD815314(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_168;
    case 0xB9:
      uint64_t v37 = sub_1CD814C48(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_168;
    case 0xBA:
      uint64_t v37 = sub_1CD019DD4(*(uint64_t **)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_168;
    case 0xBB:
      v644 = *(uint64_t ***)(v12 + 32);
      v645 = *v644;
      uint64_t v646 = (uint64_t)v644[1];
      uint64_t v647 = (*v644)[5] + 16 * v646;
      v648 = *(void **)(v647 + 8);
      v1935[0] = *(void **)v647;
      v1935[1] = v648;
      v649 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)v1935[0], (uint64_t)v648, *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
      uint64_t v651 = v650;
      unsigned int v653 = sub_1CD3E12F4((unsigned __int8 *)v1935, v650, v652);
      if (LOBYTE(v1935[0])
        && ((uint64_t v654 = *(void *)(v13 + 8), LOBYTE(v1935[0]) == 1) || *(void *)(v654 + 8 * LOBYTE(v1935[0]) + 96))
        && *(unsigned __int8 *)(v654 + 390 * LOBYTE(v1935[0]) + 4047) <= 1u)
      {
        v1221 = *(llvm::APFloatBase **)(v13 + 16);
        uint64_t v1222 = *((void *)v1221 + 104);
        if (v1222) {
          __int16 v1223 = *(_WORD *)(v1222 + 8);
        }
        else {
          __int16 v1223 = 0;
        }
        v645 = sub_1CD7F3564(v1221, (const char *)0xB9, (uint64_t)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v645, (void *)v646, v1223);
        uint64_t v646 = v1526;
      }
      else
      {
        uint64_t v646 = v646;
        if (v653 != 1)
        {
          unsigned int v1224 = 31 - __clz(v653 - 1);
          do
          {
            uint64_t v1225 = *(void *)(v13 + 16);
            v1226 = (llvm *)v1935[0];
            v1227 = v1935[1];
            v1228 = sub_1CD7EBF14(v1225, 1 << v1224, (const llvm::APInt *)&v1897, v649, v651, 0, 0);
            uint64_t v1231 = *(void *)(v1225 + 832);
            if (v1231) {
              LOWORD(v1231) = *(_WORD *)(v1231 + 8);
            }
            v1232 = sub_1CCFDED5C(v1225, 177, (const llvm::APInt *)&v1897, v1226, (uint64_t)v1227, (uint64_t)v645, v646, v1230, (uint64_t)v1228, v1229, v1231);
            uint64_t v1235 = *(void *)(v13 + 16);
            uint64_t v1236 = *(void *)(v1235 + 832);
            if (v1236) {
              LOWORD(v1236) = *(_WORD *)(v1236 + 8);
            }
            uint64_t v1237 = v1224;
            v645 = sub_1CCFDED5C(v1235, 173, (const llvm::APInt *)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], (uint64_t)v645, v646, v1234, (uint64_t)v1232, v1233, v1236);
            uint64_t v646 = v1238;
            --v1224;
          }
          while (v1237);
        }
      }
      uint64_t v1527 = *(void *)(v13 + 16);
      v1528 = (llvm *)v1935[0];
      v1529 = v1935[1];
      v1530 = sub_1CD7EBF14(v1527, 1, (const llvm::APInt *)&v1897, (llvm *)v1935[0], (uint64_t)v1935[1], 0, 0);
      uint64_t v1533 = *(void *)(v1527 + 832);
      if (v1533) {
        LOWORD(v1533) = *(_WORD *)(v1533 + 8);
      }
      uint64_t v74 = sub_1CCFDED5C(v1527, 171, (const llvm::APInt *)&v1897, v1528, (uint64_t)v1529, (uint64_t)v645, v646, v1532, (uint64_t)v1530, v1531, v1533);
      goto LABEL_46;
    case 0xBE:
      uint64_t v755 = *(void *)(v12 + 32);
      int v756 = *(_DWORD *)(v755 + 8);
      uint64_t v757 = *(void *)v755;
      *(void *)&long long v1896 = v757;
      DWORD2(v1896) = v756;
      *(void *)&long long v1895 = *(void *)(v755 + 40);
      DWORD2(v1895) = *(_DWORD *)(v755 + 48);
      *(void *)&long long v1894 = *(void *)(v755 + 80);
      DWORD2(v1894) = *(_DWORD *)(v755 + 88);
      if (*(_WORD *)(v757 + 24) == 193)
      {
        v758 = sub_1CD3D6058(*(void **)(v13 + 16), (const llvm::APInt *)&v1897, **(void **)(v757 + 32), *(void *)(*(void *)(v757 + 32) + 8), *(void *)(*(void *)(v757 + 32) + 40), *(void *)(*(void *)(v757 + 32) + 48), v1895, DWORD2(v1895), v1894, SDWORD2(v1894), SHIDWORD(v1894), *(_DWORD *)(*(void *)(*(void *)(v757 + 32) + 80) + 76));
      }
      else
      {
        v1043 = *(void **)(v13 + 16);
        uint64_t v1044 = *(void *)(v757 + 40) + 16 * DWORD2(v1896);
        v1045 = sub_1CD7EBF14((uint64_t)v1043, 0, (const llvm::APInt *)&v1897, *(llvm **)v1044, *(void *)(v1044 + 8), 0, 0);
        v758 = sub_1CD3D6058(v1043, (const llvm::APInt *)&v1897, v757, SDWORD2(v1896), (uint64_t)v1045, v1046, v1895, DWORD2(v1895), v1894, SDWORD2(v1894), SHIDWORD(v1894), 0x16u);
      }
      uint64_t v103 = v758;
      *(void *)&long long v1896 = v758;
      DWORD2(v1896) = v759;
      *((_WORD *)v758 + 36) = *(_WORD *)(v12 + 72);
      goto LABEL_170;
    case 0xC0:
      uint64_t v544 = *(void *)(v12 + 32);
      uint64_t v545 = *(void *)(v12 + 40);
      unsigned int v546 = *(_DWORD *)(v544 + 8);
      *(void *)&long long v1896 = *(void *)v544;
      DWORD2(v1896) = v546;
      *(void *)&long long v1895 = *(void *)(v544 + 40);
      DWORD2(v1895) = *(_DWORD *)(v544 + 48);
      DWORD2(v1894) = *(_DWORD *)(v544 + 88);
      *(void *)&long long v1894 = *(void *)(v544 + 80);
      v1891 = *(void **)(v544 + 120);
      unsigned int v1892 = *(_DWORD *)(v544 + 128);
      v548 = *(llvm **)v545;
      uint64_t v547 = *(void *)(v545 + 8);
      v1921[0] = 0;
      LODWORD(v1921[1]) = 0;
      *(_OWORD *)v1910 = *(_OWORD *)(v544 + 160);
      long long v549 = v1910[0];
      unsigned int v550 = *((_DWORD *)v1910[0] + 19);
      uint64_t v551 = *(void *)(v13 + 8);
      int v552 = (uint64_t *)(*(void *)(v1896 + 40) + 16 * v546);
      uint64_t v553 = *v552;
      uint64_t v554 = *v552 >> 3;
      int v555 = 11 << (4 * (*v552 & 7));
      if ((v555 & *(_DWORD *)(v551 + 92 * v550 + 4 * v554 + 171588)) == 0)
      {
        long long v556 = (uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(*(void *)v551 + 400);
        uint64_t v557 = v547;
        long long v558 = (llvm *)(*v556)(*(void *)(v13 + 8), *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, *(void *)(*(void *)(v13 + 16) + 56), v553, v552[1]);
        unsigned int v561 = sub_1CD7F5D38(*(void **)(v13 + 16), (const char *)0xC1, (const llvm::APInt *)&v1897, v558, v559, v1896, *((uint64_t *)&v1896 + 1), v560, v1895, *((uint64_t *)&v1895 + 1), (uint64_t)v549, (int)v1910[1], SHIDWORD(v1910[1]), *(_WORD *)(v12 + 72));
        unsigned int v563 = sub_1CD3E1260(*(void **)(v13 + 16), (const llvm::APInt *)&v1897, v548, v557, (uint64_t)v561, v562, v1894, *((uint64_t *)&v1894 + 1), (uint64_t)v1891, v1892, v1893);
        uint64_t v35 = v564;
        if (v1908 >= HIDWORD(v1908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v565 = (char *)v1907 + 16 * v1908;
        *(void *)unsigned int v565 = v563;
        goto LABEL_804;
      }
      uint64_t v985 = v552[1];
      unsigned int v986 = sub_1CD7E9F74(v550, *v552, v985);
      if ((*(_DWORD *)(v551 + 92 * v986 + 4 * v554 + 171588) & v555) != 0)
      {
        unsigned int v1302 = (v986 >> 1) & 2 | v986 & 0xFFFFFFF9 | (4 * ((v986 >> 1) & 1));
        if ((*(_DWORD *)(v551 + 92 * v1302 + 4 * v554 + 171588) & v555) != 0)
        {
          uint64_t v1450 = *(void *)(v13 + 16);
          v1451 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v551 + 400))(v551, *(void *)(**(void **)(v1450 + 40) + 40) + 272, *(void *)(v1450 + 56), v553, v985);
          sub_1CD01D89C(v551, (void *)v1450, v1451, v1452, (uint64_t *)&v1896, (uint64_t *)&v1895, v1910, v1453, 0, 0, 0, 0, &v1890, (const llvm::APInt *)&v1897, (uint64_t *)v1921, 0);
          if (v1890)
          {
            *(_OWORD *)v1935 = v1894;
            DWORD2(v1894) = v1892;
            *(void *)&long long v1894 = v1891;
            v1891 = v1935[0];
            unsigned int v1892 = v1935[1];
          }
          if (v1910[0])
          {
            v987 = sub_1CD7F6564(*(void **)(v13 + 16), (const char *)0xC0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), v1896, SDWORD2(v1896), v1454, v1895, SDWORD2(v1895), v1894, SDWORD2(v1894), (uint64_t)v1891, v1892, (uint64_t)v1910[0], (int)v1910[1]);
          }
          else
          {
            uint64_t v1455 = *(void *)(v1896 + 40) + 16 * DWORD2(v1896);
            *(void *)&long long v1895 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, *(llvm **)v1455, *(void *)(v1455 + 8), 0, 0);
            DWORD2(v1895) = v1456;
            v1910[0] = (void *)sub_1CD7EE368(*(void **)(v13 + 16), 0x16u);
            LODWORD(v1910[1]) = v1457;
            v987 = sub_1CD7F6564(*(void **)(v13 + 16), (const char *)0xC0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), v1896, SDWORD2(v1896), v1458, v1895, SDWORD2(v1895), v1894, SDWORD2(v1894), (uint64_t)v1891, v1892, (uint64_t)v1910[0], v1457);
          }
        }
        else
        {
          v987 = sub_1CD3D6058(*(void **)(v13 + 16), (const llvm::APInt *)&v1897, v1895, SDWORD2(v1895), v1896, SDWORD2(v1896), (uint64_t)v1891, v1892, v1894, SDWORD2(v1894), SHIDWORD(v1894), v1302);
        }
      }
      else
      {
        v987 = sub_1CD3D6058(*(void **)(v13 + 16), (const llvm::APInt *)&v1897, v1896, SDWORD2(v1896), v1895, SDWORD2(v1895), (uint64_t)v1891, v1892, v1894, SDWORD2(v1894), SHIDWORD(v1894), v986);
      }
      uint64_t v33 = v987;
      *(void *)&long long v1896 = v987;
      DWORD2(v1896) = v988;
      *((_WORD *)v987 + 36) = *(_WORD *)(v12 + 72);
      uint64_t v35 = *((void *)&v1896 + 1);
      unsigned int v1179 = v1908;
      if (v1908 >= HIDWORD(v1908)) {
        goto LABEL_1221;
      }
      goto LABEL_803;
    case 0xCC:
      uint64_t v479 = *(void *)(v12 + 40);
      *(_OWORD *)v1935 = *(_OWORD *)(*(void *)(*(void *)(v12 + 32) + 40) + 80);
      uint64_t v481 = *(llvm **)v479;
      uint64_t v480 = *(void **)(v479 + 8);
      v1921[0] = *(void **)v479;
      v1921[1] = v480;
      if (LOBYTE(v1935[0])) {
        uint64_t v482 = sub_1CB87E200((unsigned __int8 *)v1935);
      }
      else {
        uint64_t v482 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1935);
      }
      uint64_t v914 = v482;
      if (v483 == 1) {
      if (v914 == 1)
      }
      {
        v915 = sub_1CD7EBF14(*(void *)(v13 + 16), 1, (const llvm::APInt *)&v1897, v481, (uint64_t)v480, 0, 0);
        uint64_t v918 = *(void *)(v13 + 16);
        v919 = *(uint64_t **)(v12 + 32);
        uint64_t v920 = *v919;
        uint64_t v921 = v919[1];
        uint64_t v922 = *(void *)(v918 + 832);
        if (v922) {
          LOWORD(v922) = *(_WORD *)(v922 + 8);
        }
        v923 = sub_1CCFDED5C(v918, 171, (const llvm::APInt *)&v1897, v481, (uint64_t)v480, v920, v921, v917, (uint64_t)v915, v916, v922);
        uint64_t v925 = v924;
        v927 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, v481, (uint64_t)v480, 0, 0);
        uint64_t v929 = *(void *)(v13 + 16);
        uint64_t v930 = *(void *)(v929 + 832);
        if (v930) {
          LOWORD(v930) = *(_WORD *)(v930 + 8);
        }
        v931 = sub_1CCFDED5C(v929, 57, (const llvm::APInt *)&v1897, v481, (uint64_t)v480, (uint64_t)v927, v926, v928, (uint64_t)v923, v925, v930);
        v933 = v932;
        if (v1908 >= HIDWORD(v1908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v934 = (uint64_t **)((char *)v1907 + 16 * v1908);
        *v934 = v931;
        goto LABEL_650;
      }
      v935 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(v13 + 8), (uint64_t)v481, (uint64_t)v480, *(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272, 1);
      uint64_t v937 = v936;
      unsigned int v939 = sub_1CD3E12F4((unsigned __int8 *)v1921, v936, v938);
      unsigned int v942 = sub_1CD3E12F4((unsigned __int8 *)v1935, v940, v941);
      v945 = sub_1CD7EBF14(*(void *)(v13 + 16), v939 - v942, (const llvm::APInt *)&v1897, v935, v937, 0, 0);
      uint64_t v946 = v943;
      uint64_t v947 = *(void *)(v13 + 16);
      uint64_t v948 = *(void *)(v12 + 40);
      v949 = *(llvm **)v948;
      uint64_t v950 = *(void *)(v948 + 8);
      uint64_t v951 = *(void *)(v947 + 832);
      if (v951) {
        LOWORD(v951) = *(_WORD *)(v951 + 8);
      }
      v952 = sub_1CCFDED5C(v947, 175, (const llvm::APInt *)&v1897, v949, v950, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v944, (uint64_t)v945, v943, v951);
      *(void *)&long long v1896 = v952;
      DWORD2(v1896) = v954;
      uint64_t v955 = *(void *)(v13 + 16);
      uint64_t v956 = *(void *)(v12 + 40);
      v957 = *(llvm **)v956;
      uint64_t v958 = *(void *)(v956 + 8);
      uint64_t v959 = *(void *)(v955 + 832);
      if (v959) {
        LOWORD(v959) = *(_WORD *)(v959 + 8);
      }
      v960 = sub_1CCFDED5C(v955, 176, (const llvm::APInt *)&v1897, v957, v958, (uint64_t)v952, *((uint64_t *)&v1896 + 1), v953, (uint64_t)v945, v946, v959);
      *(void *)&long long v1896 = v960;
      DWORD2(v1896) = v961;
      v933 = (uint64_t *)*((void *)&v1896 + 1);
      goto LABEL_648;
    case 0xD0:
      if (!sub_1CD8133A4(*(uint64_t **)(v13 + 8), v12, (uint64_t)&v1896, *(void *)(v13 + 16))) {
        goto LABEL_806;
      }
      goto LABEL_152;
    case 0xD1:
      if (!sub_1CD813B2C(*(void *)(v13 + 8), v12, (uint64_t)&v1896, (uint64_t)&v1895, *(void *)(v13 + 16)))goto LABEL_806; {
LABEL_152:
      }
      long long v79 = v1896;
      goto LABEL_98;
    case 0xD2:
    case 0xD3:
      uint64_t v18 = sub_1CD81A4B4(*(void *)(v13 + 8), v12, *(llvm::APFloatBase **)(v13 + 16));
      goto LABEL_801;
    case 0xD4:
    case 0xD8:
      uint64_t v37 = sub_1CCF857B0(v13, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t)&v1897, *(void *)(v13 + 16) + 112, 0);
      goto LABEL_168;
    case 0xD5:
      uint64_t v608 = *(void *)(v13 + 16);
      v609 = *(uint64_t **)(v12 + 40);
      uint64_t v610 = *v609;
      uint64_t v611 = v609[1];
      uint64_t v612 = 1;
LABEL_436:
      v683 = sub_1CD7EBF14(v608, v612, (const llvm::APInt *)&v1897, (llvm *)v610, v611, 0, 0);
      goto LABEL_437;
    case 0xD7:
      int v159 = *(uint64_t **)(v12 + 32);
      uint64_t v160 = *v159;
      uint64_t v161 = v159[1];
      uint64_t v162 = (uint64_t *)(*(void *)(*v159 + 40) + 16 * v161);
      uint64_t v37 = sub_1CCF857B0(v13, v160, v161, *v162, v162[1], **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), (uint64_t)&v1897, *(void *)(v13 + 16) + 112, 0);
LABEL_168:
      *(void *)&long long v1896 = v37;
      DWORD2(v1896) = v38;
      if (!v37) {
        goto LABEL_806;
      }
      uint64_t v103 = v37;
      goto LABEL_170;
    case 0xDA:
      if (**(unsigned char **)(v12 + 40) == 10) {
        goto LABEL_806;
      }
      uint64_t v185 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v186 = *(uint64_t **)(v12 + 32);
      uint64_t v187 = *v186;
      int v188 = (void *)v186[1];
      uint64_t v189 = *((void *)v185 + 104);
      if (v189) {
        __int16 v190 = *(_WORD *)(v189 + 8);
      }
      else {
        __int16 v190 = 0;
      }
      uint64_t v270 = sub_1CD7F3564(v185, (const char *)0xDA, (uint64_t)&v1897, (llvm *)0xA, 0, v187, v188, v190);
      uint64_t v271 = *(llvm::APFloatBase **)(v13 + 16);
      uint64_t v272 = *(void *)(v12 + 40);
      uint64_t v273 = *(llvm **)v272;
      uint64_t v274 = *(void *)(v272 + 8);
      uint64_t v275 = *((void *)v271 + 104);
      if (v275) {
        __int16 v276 = *(_WORD *)(v275 + 8);
      }
      else {
        __int16 v276 = 0;
      }
      uint64_t v18 = sub_1CD7F3564(v271, (const char *)0xD7, (uint64_t)&v1897, v273, v274, (uint64_t)v270, v269, v276);
      goto LABEL_801;
    case 0xDB:
      if (((*(uint64_t (**)(void))(**(void **)(v13 + 8) + 24))(*(void *)(v13 + 8)) & 1) == 0
        && (*(_WORD *)(*(void *)v13 + 1020) & 1) != 0)
      {
        uint64_t v163 = *(uint64_t **)(v12 + 32);
        uint64_t v164 = *v163;
        uint64_t v165 = v163[1];
        if (*(unsigned __int8 *)(*(void *)(*v163 + 40) + 16 * v165) - 11 <= 1)
        {
          uint64_t v166 = *(void *)(v13 + 8);
          if (*(void *)(v166 + 176))
          {
            if ((*(unsigned __int8 *)(v166 + 7981) | 4) == 4)
            {
              uint64_t v167 = *(void *)(v13 + 16);
              unint64_t v168 = sub_1CD7EB364(v167, 0, (const llvm::APInt *)&v1897, 0);
              uint64_t v171 = *(void *)(v167 + 832);
              if (v171) {
                LOWORD(v171) = *(_WORD *)(v171 + 8);
              }
              uint64_t v173 = sub_1CCFDED5C(v167, 212, (const llvm::APInt *)&v1897, (llvm *)0xA, 0, v164, v165, v170, (uint64_t)v168, v169, v171);
              uint64_t v174 = *(llvm::APFloatBase **)(v13 + 16);
              uint64_t v175 = *(void *)(v12 + 40);
              uint64_t v176 = *(llvm **)v175;
              uint64_t v177 = *(void *)(v175 + 8);
              uint64_t v178 = *((void *)v174 + 104);
              if (v178) {
                __int16 v179 = *(_WORD *)(v178 + 8);
              }
              else {
                __int16 v179 = 0;
              }
              v1587 = sub_1CD7F3564(v174, (const char *)0xDB, (uint64_t)&v1897, v176, v177, (uint64_t)v173, v172, v179);
              if (v1908 >= HIDWORD(v1908)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1588 = (uint64_t **)((char *)v1907 + 16 * v1908);
              *v1588 = v1587;
              v1588[1] = v1586;
              LODWORD(v1908) = v1908 + 1;
            }
          }
        }
      }
      goto LABEL_806;
    case 0xDC:
      if (**(unsigned char **)(v12 + 40) == 10) {
        goto LABEL_806;
      }
      uint64_t v191 = *(void **)(v13 + 16);
      *(_OWORD *)v1935 = xmmword_1CFB2D470;
      long long v1936 = unk_1CFB2D480;
      uint64_t v192 = *(void *)(v12 + 32);
      int v193 = *(_DWORD *)(v192 + 8);
      v1921[0] = *(void **)v192;
      LODWORD(v1921[1]) = v193;
      *(void *)&long long v1922 = *(void *)(v192 + 40);
      DWORD2(v1922) = *(_DWORD *)(v192 + 48);
      uint64_t v194 = sub_1CD7EB5F0(v191, (const char *)0xDC, (const llvm::APInt *)&v1897, (uint64_t *)v1935, 2, (uint64_t *)v1921, 2);
      uint64_t v196 = v195;
      uint64_t v197 = *(void **)(v13 + 16);
      *(_OWORD *)v1935 = *(_OWORD *)*(void *)(v12 + 40);
      LOBYTE(v1936) = 1;
      *((void *)&v1936 + 1) = 0;
      v1921[0] = v194;
      v1921[1] = (void *)1;
      *(void *)&long long v1922 = v194;
      DWORD2(v1922) = v195;
      uint64_t v198 = sub_1CD7EB5F0(v197, (const char *)0x89, (const llvm::APInt *)&v1897, (uint64_t *)v1935, 2, (uint64_t *)v1921, 2);
      unint64_t v200 = v196 & 0xFFFFFFFF00000000 | v199;
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v201 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *uint64_t v201 = v198;
      v201[1] = (uint64_t *)v200;
      goto LABEL_352;
    case 0xDE:
      uint64_t v444 = *(void **)(v12 + 64);
      v1921[0] = v444;
      if (v444)
      {
        llvm::MetadataTracking::track((uint64_t)v1921, (unsigned __int8 *)v444, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1921[1]) = v15;
      LOBYTE(v1935[0]) = 0;
      v1937 = 0;
      int v1938 = 0;
      uint64_t v1939 = 0;
      int v1940 = 0;
      uint64_t v1945 = 0;
      LODWORD(v1946) = 0;
      DWORD2(v1936) = 0;
      *(void *)&long long v1936 = 0;
      v1935[1] = 0;
      *(void *)((char *)&v1942 + 5) = 0;
      *(void *)&long long v1942 = 0;
      uint64_t v1941 = 0;
      v1944[0] = 0;
      uint64_t v1943 = 0;
      *(void *)((char *)v1944 + 5) = 0;
      unsigned int v1948 = 1;
      v1947 = 0;
      sub_1CCF865E8(v13, (uint64_t)v1935, (const llvm::APInt *)v1921, **(void **)(v12 + 32), *(void **)(*(void *)(v12 + 32) + 8));
      uint64_t v445 = (uint64_t *)(*(void *)(v1945 + 40) + 16 * v1946);
      v446 = (llvm *)*v445;
      uint64_t v447 = v445[1];
      uint64_t v448 = sub_1CD7EBB14(*(void *)(v13 + 16), (llvm::LLVMContext *)&v1947, (const llvm::APInt *)v1921, *v445, v447, 0, 0);
      uint64_t v451 = *(void *)(v13 + 16);
      uint64_t v452 = *(void *)(v451 + 832);
      if (v452) {
        LOWORD(v452) = *(_WORD *)(v452 + 8);
      }
      uint64_t v453 = sub_1CCFDED5C(v451, 173, (const llvm::APInt *)v1921, v446, v447, v1945, v1946, v450, v448, v449, v452);
      uint64_t v33 = sub_1CCF86AD4(v13, (uint64_t)v1935, (uint64_t)v1921, (uint64_t)v453, v454);
      uint64_t v35 = v455;
      if (v1948 >= 0x41 && v1947) {
        MEMORY[0x1D25D9CB0](v1947, 0x1000C8000313F17);
      }
      v456 = (unsigned __int8 *)v1921[0];
      if (!v1921[0]) {
        goto LABEL_802;
      }
      int v457 = *(unsigned __int8 *)v1921[0];
      if ((v457 - 4) > 0x1E)
      {
        if ((v457 - 3) >= 0xFFFFFFFE) {
          v1332 = v1921[0];
        }
        else {
          v1332 = 0;
        }
        if ((v457 - 3) < 0xFFFFFFFE)
        {
LABEL_1160:
          if (v457 == 3) {
            *((void *)v456 + 1) = 0;
          }
          goto LABEL_802;
        }
        unint64_t v459 = (unint64_t)v1332 + 8;
      }
      else
      {
        if ((*((unsigned char *)v1921[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1921[0] + 3)) {
          goto LABEL_802;
        }
        uint64_t v458 = *((void *)v1921[0] + 2);
        if ((v458 & 4) == 0) {
          goto LABEL_802;
        }
        unint64_t v459 = v458 & 0xFFFFFFFFFFFFFFF8;
        if (!v459) {
          goto LABEL_802;
        }
      }
      v1935[0] = v1921;
      sub_1CC5FA668(v459 + 16, v1935);
      goto LABEL_802;
    case 0xDF:
      v734 = *(void **)(v12 + 64);
      v1921[0] = v734;
      if (v734)
      {
        llvm::MetadataTracking::track((uint64_t)v1921, (unsigned __int8 *)v734, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1921[1]) = v15;
      v735 = *(uint64_t **)(v12 + 32);
      uint64_t v736 = *v735;
      v737 = (void *)v735[1];
      uint64_t v738 = *(void *)(*v735 + 40) + 16 * v737;
      v739 = *(llvm **)v738;
      int v740 = *(void *)v738;
      if (!*(void *)v738) {
        goto LABEL_889;
      }
      uint64_t v741 = *(void *)(v738 + 8);
      uint64_t v742 = *(void *)(v13 + 8);
      if (v740 == 1)
      {
        if (!(_BYTE)v739) {
          goto LABEL_889;
        }
      }
      else
      {
        if ((_BYTE)v739) {
          BOOL v1239 = *(void *)(v742 + 8 * v739 + 96) == 0;
        }
        else {
          BOOL v1239 = 1;
        }
        if (v1239) {
          goto LABEL_889;
        }
      }
      if ((*(unsigned __int8 *)(v742 + 390 * v739 + 4005) | 4) != 4)
      {
LABEL_889:
        LOBYTE(v1935[0]) = 0;
        v1937 = 0;
        int v1938 = 0;
        uint64_t v1939 = 0;
        int v1940 = 0;
        uint64_t v1945 = 0;
        LODWORD(v1946) = 0;
        *(void *)&long long v1936 = 0;
        v1935[1] = 0;
        DWORD2(v1936) = 0;
        *(void *)&long long v1942 = 0;
        uint64_t v1941 = 0;
        *(void *)((char *)&v1942 + 5) = 0;
        v1944[0] = 0;
        uint64_t v1943 = 0;
        *(void *)((char *)v1944 + 5) = 0;
        unsigned int v1948 = 1;
        v1947 = 0;
        sub_1CCF865E8(v13, (uint64_t)v1935, (const llvm::APInt *)v1921, v736, v737);
        uint64_t v1248 = v1945;
        unsigned int v1249 = v1948;
        uint64_t v1250 = *(void *)(v1945 + 40) + 16 * v1946;
        v1251 = *(llvm **)v1250;
        uint64_t v1252 = *(void *)(v1250 + 8);
        uint64_t v1253 = *(void *)(v13 + 16);
        LODWORD(v1918) = v1948;
        if (v1948 > 0x40) {
          operator new[]();
        }
        v1254 = v1947;
        if (v1948) {
          unint64_t v1255 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1948;
        }
        else {
          unint64_t v1255 = 0;
        }
        __b = (void *)(v1255 & ~(unint64_t)v1947);
        LODWORD(v1910[1]) = v1948;
        v1910[0] = __b;
        LODWORD(v1918) = 0;
        uint64_t v1256 = sub_1CD7EBB14(v1253, (llvm::LLVMContext *)v1910, (const llvm::APInt *)v1921, (uint64_t)v1251, v1252, 0, 0);
        uint64_t v1259 = v1256;
        uint64_t v1260 = v1257;
        if (LODWORD(v1910[1]) >= 0x41 && v1910[0]) {
          MEMORY[0x1D25D9CB0](v1910[0], 0x1000C8000313F17);
        }
        uint64_t v1261 = *(void *)(v13 + 16);
        uint64_t v1262 = *(void *)(v1261 + 832);
        if (v1262) {
          LOWORD(v1262) = *(_WORD *)(v1262 + 8);
        }
        v1263 = sub_1CCFDED5C(v1261, 171, (const llvm::APInt *)v1921, v1251, v1252, v1248, v1946, v1258, v1259, v1260, v1262);
        v1245 = sub_1CCF86AD4(v13, (uint64_t)v1935, (uint64_t)v1921, (uint64_t)v1263, v1264);
        v1247 = v1265;
        if (v1249 >= 0x41 && v1254) {
          MEMORY[0x1D25D9CB0](v1254, 0x1000C8000313F17);
        }
        goto LABEL_902;
      }
      v1240 = sub_1CD7ECDC4(*(void *)(v13 + 16), (uint64_t)v1921, (BOOL)v739, v741, 0, 0.0);
      uint64_t v1243 = *(void *)(v13 + 16);
      uint64_t v1244 = *(void *)(v1243 + 832);
      if (v1244) {
        LOWORD(v1244) = *(_WORD *)(v1244 + 8);
      }
      v1245 = sub_1CCFDED5C(v1243, 143, (const llvm::APInt *)v1921, v739, v741, v736, (uint64_t)v737, v1242, (uint64_t)v1240, v1241, v1244);
      v1247 = v1246;
LABEL_902:
      if (!v1921[0]) {
        goto LABEL_906;
      }
      int v1266 = *(unsigned __int8 *)v1921[0];
      if ((v1266 - 4) > 0x1E)
      {
        if ((v1266 - 3) >= 0xFFFFFFFE) {
          v1336 = v1921[0];
        }
        else {
          v1336 = 0;
        }
        if ((v1266 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1337 = (unint64_t)v1336 + 8;
LABEL_1013:
          v1935[0] = v1921;
          sub_1CC5FA668(v1337 + 16, v1935);
          goto LABEL_906;
        }
        if (v1266 == 3) {
          *((void *)v1921[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1921[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1921[0] + 3))
      {
        uint64_t v1786 = *((void *)v1921[0] + 2);
        if ((v1786 & 4) != 0)
        {
          unint64_t v1337 = v1786 & 0xFFFFFFFFFFFFFFF8;
          if (v1337) {
            goto LABEL_1013;
          }
        }
      }
LABEL_906:
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v1267 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *v1267 = v1245;
      v1267[1] = v1247;
LABEL_48:
      LODWORD(v1908) = v1908 + 1;
      goto LABEL_806;
    case 0xE2:
    case 0xE3:
      uint64_t v91 = *(uint64_t **)(v12 + 40);
      uint64_t v92 = *v91;
      uint64_t v93 = v91[1];
      uint64_t v94 = *(void *)(v13 + 8);
      if ((v92 != 1 && (!(_BYTE)v92 || !*(void *)(v94 + 8 * v92 + 96))
         || (*(unsigned __int8 *)(v94 + 390 * v92 + 4114) | 4) != 4)
        && !*(void *)(v94 + 8 * (v92 - 10) + 175384))
      {
        goto LABEL_806;
      }
      int v95 = v16 == 226 ? 227 : 226;
      uint64_t v96 = *(void *)(**(void **)(v12 + 32) + 48);
      if (!v96) {
        goto LABEL_806;
      }
      do
      {
        uint64_t v97 = *(void *)(v96 + 16);
        if (v97 != v12)
        {
          int v98 = *(unsigned __int16 *)(v97 + 24);
          if (v98 == 252 || v95 == v98)
          {
            uint64_t v908 = sub_1CD7F95FC(*(void *)(v13 + 16), v92, v93, v92, v93);
            uint64_t v103 = sub_1CD7FFAA8(*(void **)(v13 + 16), (const char *)0xFC, (const llvm::APInt *)&v1897, v908, v909, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8));
            *(void *)&long long v1896 = v103;
            if (*(_WORD *)(v12 + 24) == 227) {
              int v911 = 1;
            }
            else {
              int v911 = v910;
            }
            DWORD2(v1896) = v911;
LABEL_170:
            int v104 = (void *)*((void *)&v1896 + 1);
            unsigned int v102 = v1908;
LABEL_171:
            if (v102 >= HIDWORD(v1908)) {
LABEL_1200:
            }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_172:
            uint64_t v202 = (char *)v1907 + 16 * v102;
            *(void *)uint64_t v202 = v103;
            goto LABEL_173;
          }
        }
        uint64_t v96 = *(void *)(v96 + 32);
      }
      while (v96);
      goto LABEL_806;
    case 0xF6:
    case 0xF7:
      uint64_t v18 = sub_1CD8149DC(*(void *)(v13 + 8), v12, *(llvm::APFloatBase **)(v13 + 16), v6, v7, v8, v9, v10);
      if (!v18) {
        goto LABEL_806;
      }
      goto LABEL_801;
    case 0xFF:
      int v506 = *(_DWORD *)(*(void *)(v13 + 8) + 88);
      v507 = *(void **)(v12 + 64);
      v1935[0] = v507;
      if (v507)
      {
        llvm::MetadataTracking::track((uint64_t)v1935, (unsigned __int8 *)v507, 2);
        int v15 = *(_DWORD *)(v12 + 60);
      }
      LODWORD(v1935[1]) = v15;
      v509 = *(uint64_t **)(v12 + 32);
      uint64_t v508 = *(void *)(v12 + 40);
      v511 = *(llvm **)v508;
      uint64_t v510 = *(void *)(v508 + 8);
      uint64_t v512 = v509[10];
      uint64_t v513 = v509[1];
      uint64_t v514 = sub_1CD409700(*(void **)(v13 + 16), *v509, v513, 0, 0, (const llvm::APInt *)v1935);
      uint64_t v515 = *(void *)(v12 + 32);
      uint64_t v516 = *(void *)(v515 + 48);
      uint64_t v1832 = *(void *)(v515 + 40);
      v1855 = v511;
      uint64_t v1875 = v510;
      v1826 = sub_1CD3D6670(*(void **)(v13 + 16), (uint64_t)v514, v517, (const llvm::APInt *)v1935, v506, v511, v510);
      uint64_t v518 = *(void *)(v512 + 80);
      uint64_t v519 = (unint64_t *)(v518 + 24);
      int v1841 = v506;
      uint64_t v521 = v520;
      if (*(_DWORD *)(v518 + 32) >= 0x41u) {
        uint64_t v519 = (unint64_t *)*v519;
      }
      unint64_t v522 = *v519;
      unint64_t v523 = __clz(*v519) ^ 0x3F;
      uint64_t v524 = *(void *)(*(void *)(*(void *)(v13 + 16) + 40) + 16);
      uint64_t v525 = (*(uint64_t (**)(uint64_t))(*(void *)v524 + 112))(v524);
      if (*(_DWORD *)(v525 + 8)) {
        uint64_t v527 = 57;
      }
      else {
        uint64_t v527 = 56;
      }
      unsigned int v528 = *(unsigned __int8 *)(v525 + 12);
      uint64_t v529 = *(void *)(v13 + 16);
      uint64_t v530 = *(void *)(v529 + 832);
      if (v530) {
        LOWORD(v530) = *(_WORD *)(v530 + 8);
      }
      v1833 = sub_1CCFDED5C(v529, v527, (const llvm::APInt *)v1935, v1855, v510, (uint64_t)v1826, v521, v526, v1832, v516, v530);
      uint64_t v532 = v531;
      if (v522) {
        unsigned int v533 = v523;
      }
      else {
        unsigned int v533 = 0;
      }
      if (v533 <= v528)
      {
        int v539 = v1841;
        unint64_t v540 = v513 & 0xFFFFFFFF00000000;
        uint64_t v541 = (uint64_t)v1826;
        unint64_t v542 = v1833;
      }
      else
      {
        uint64_t v534 = *(void *)(v13 + 16);
        uint64_t v535 = sub_1CD7EBF14(v534, -1 << v533, (const llvm::APInt *)v1935, v1855, v510, 0, 0);
        uint64_t v538 = *(void *)(v534 + 832);
        int v539 = v1841;
        if (v538) {
          LOWORD(v538) = *(_WORD *)(v538 + 8);
        }
        unint64_t v540 = v513 & 0xFFFFFFFF00000000;
        uint64_t v541 = (uint64_t)v1826;
        unint64_t v542 = sub_1CCFDED5C(v534, 171, (const llvm::APInt *)v1935, v1855, v1875, (uint64_t)v1833, v532, v537, (uint64_t)v535, v536, v538);
        uint64_t v532 = v543;
      }
      v962 = *(void **)(v13 + 16);
      uint64_t v963 = sub_1CD7EEB94((uint64_t)v962, v539, *(llvm **)(v542[5] + 16 * v532), *(void *)(v542[5] + 16 * v532 + 8));
      uint64_t v966 = v962[104];
      if (v966) {
        LOWORD(v966) = *(_WORD *)(v966 + 8);
      }
      v967 = sub_1CD7F5D38(v962, (const char *)0x31, (const llvm::APInt *)v1935, (llvm *)1, 0, v541, v540 | 1, v965, v963, v964, (uint64_t)v542, v532, SHIDWORD(v532), v966);
      uint64_t v969 = v968 | v540;
      v970 = *(void **)(v13 + 16);
      v971 = sub_1CD7EB364((uint64_t)v970, 0, (const llvm::APInt *)v1935, 1);
      uint64_t v973 = v972;
      v974 = sub_1CD7EB364(*(void *)(v13 + 16), 0, (const llvm::APInt *)v1935, 1);
      v978 = sub_1CD409804(v970, (uint64_t)v967, v969, (uint64_t)v971, v973, (uint64_t)v974, v975, v976, 0, 0, (const llvm::APInt *)v1935);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v979 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *v979 = v542;
      v979[1] = (uint64_t *)v532;
      unsigned int v980 = v1908 + 1;
      LODWORD(v1908) = v980;
      if (v980 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v981 = (uint64_t **)((char *)v1907 + 16 * v980);
      *v981 = v978;
      v981[1] = (uint64_t *)v977;
      LODWORD(v1908) = v1908 + 1;
      if (!v1935[0]) {
        goto LABEL_806;
      }
      int v982 = *(unsigned __int8 *)v1935[0];
      if ((v982 - 4) > 0x1E)
      {
        if ((v982 - 3) >= 0xFFFFFFFE) {
          v1333 = v1935[0];
        }
        else {
          v1333 = 0;
        }
        if ((v982 - 3) < 0xFFFFFFFE)
        {
          if (v982 == 3) {
            *((void *)v1935[0] + 1) = 0;
          }
          goto LABEL_806;
        }
        unint64_t v984 = (unint64_t)v1333 + 8;
      }
      else
      {
        if ((*((unsigned char *)v1935[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1935[0] + 3)) {
          goto LABEL_806;
        }
        uint64_t v983 = *((void *)v1935[0] + 2);
        if ((v983 & 4) == 0) {
          goto LABEL_806;
        }
        unint64_t v984 = v983 & 0xFFFFFFFFFFFFFFF8;
        if (!v984) {
          goto LABEL_806;
        }
      }
      v1921[0] = v1935;
      sub_1CC5FA668(v984 + 16, v1921);
      goto LABEL_806;
    case 0x102:
      v574 = *(uint64_t **)(v12 + 32);
      uint64_t v1842 = v574[1];
      uint64_t v1856 = *v574;
      uint64_t v575 = v574[5];
      uint64_t v1876 = v574[6];
      uint64_t v576 = v574[10];
      uint64_t v577 = v574[11];
      v578 = (const llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(v13 + 16) + 40) + 40) + 272);
      unsigned __int8 v579 = (*(uint64_t (**)(void, const llvm::DataLayout *, void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8), v578, 0);
      unsigned int EntrySize = llvm::MachineJumpTableInfo::getEntrySize(*(llvm::MachineJumpTableInfo **)(*(void *)(*(void *)(v13 + 16) + 40) + 72), v578);
      unsigned int v581 = EntrySize;
      v582.i32[0] = EntrySize;
      uint8x8_t v583 = (uint8x8_t)vcnt_s8(v582);
      v583.i16[0] = vaddlv_u8(v583);
      uint64_t v584 = *(void *)(v13 + 16);
      uint64_t v585 = *(void *)(v576 + 40) + 16 * v577;
      v586 = *(llvm **)v585;
      uint64_t v587 = *(void *)(v585 + 8);
      if (v583.i32[0] == 1)
      {
        v588 = sub_1CD7EBF14(*(void *)(v13 + 16), 31 - __clz(EntrySize), (const llvm::APInt *)&v1897, v586, v587, 0, 0);
        uint64_t v591 = *(void *)(v584 + 832);
        if (v591) {
          LOWORD(v591) = *(_WORD *)(v591 + 8);
        }
        v592 = sub_1CCFDED5C(v584, 175, (const llvm::APInt *)&v1897, v586, v587, v576, v577, v590, (uint64_t)v588, v589, v591);
      }
      else
      {
        v989 = sub_1CD7EBF14(*(void *)(v13 + 16), EntrySize, (const llvm::APInt *)&v1897, *(llvm **)v585, *(void *)(v585 + 8), 0, 0);
        uint64_t v992 = *(void *)(v584 + 832);
        if (v992) {
          LOWORD(v992) = *(_WORD *)(v992 + 8);
        }
        v592 = sub_1CCFDED5C(v584, 58, (const llvm::APInt *)&v1897, v586, v587, v576, v577, v991, (uint64_t)v989, v990, v992);
      }
      uint64_t v993 = (uint64_t)v592;
      unint64_t v994 = v577 & 0xFFFFFFFF00000000 | v593;
      uint64_t v995 = *(void *)(v13 + 16);
      uint64_t v996 = *(void *)(v993 + 40) + 16 * v593;
      v997 = *(llvm **)v996;
      uint64_t v998 = *(void *)(v996 + 8);
      uint64_t v999 = *(void *)(v995 + 832);
      if (v999) {
        LOWORD(v999) = *(_WORD *)(v999 + 8);
      }
      v1000 = sub_1CCFDED5C(v995, 56, (const llvm::APInt *)&v1897, v997, v998, v993, v994, v594, v575, v1876, v999);
      uint64_t v1002 = v1001;
      v1003 = (llvm::LLVMContext *)(8 * v581);
      uint64_t v1004 = v575;
      if ((int)v1003 > 63)
      {
        if (v1003 == 64)
        {
          uint64_t v1005 = 0;
          uint64_t v1006 = 6;
          goto LABEL_1233;
        }
        if (v1003 == 128)
        {
          uint64_t v1005 = 0;
          uint64_t v1006 = 7;
          goto LABEL_1233;
        }
      }
      else
      {
        switch(v1003)
        {
          case 0x20:
            uint64_t v1005 = 0;
            uint64_t v1006 = 5;
            goto LABEL_1233;
          case 0x10:
            uint64_t v1005 = 0;
            uint64_t v1006 = 4;
            goto LABEL_1233;
          case 8:
            uint64_t v1005 = 0;
            uint64_t v1006 = 3;
            goto LABEL_1233;
        }
      }
      uint64_t v1005 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)(v13 + 16) + 56), v1003);
      uint64_t v1006 = 0;
LABEL_1233:
      uint64_t v1589 = *(void *)(v13 + 16);
      uint64_t JumpTable = llvm::PseudoSourceValueManager::getJumpTable(*(llvm::PseudoSourceValueManager **)(*(void *)(v1589 + 40)
                                                                                                  + 432));
      int v1592 = 0;
      *(void *)&long long v1887 = JumpTable | 4;
      *((void *)&v1887 + 1) = 0;
      char v1889 = 0;
      if (JumpTable) {
        int v1592 = *(_DWORD *)(JumpTable + 12);
      }
      int v1888 = v1592;
      long long v1936 = 0u;
      *(_OWORD *)v1935 = 0u;
      v1593 = sub_1CD7FAEE8(v1589, 2, (uint64_t)&v1897, v579, 0, v1856, v1842, v1591, (uint64_t)v1000, v1002, &v1887, v1006, v1005, 0, (unsigned __int128)(unint64_t)v1005 >> 96, 0, (long long *)v1935);
      unint64_t v1595 = v1002 & 0xFFFFFFFF00000000 | v1594;
      if ((*(unsigned int (**)(void))(**(void **)(v13 + 8) + 704))())
      {
        uint64_t v1596 = *(void *)(v13 + 16);
        uint64_t v1597 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8) + 1568))(*(void *)(v13 + 8), v1004, v1876, v1596);
        uint64_t v1600 = *(void *)(v1596 + 832);
        if (v1600) {
          LOWORD(v1600) = *(_WORD *)(v1600 + 8);
        }
        v1601 = sub_1CCFDED5C(v1596, 56, (const llvm::APInt *)&v1897, (llvm *)v579, 0, (uint64_t)v1593, v1595, v1599, v1597, v1598, v1600);
        unint64_t v1595 = v1602 | v1002 & 0xFFFFFFFF00000000;
      }
      else
      {
        v1601 = v1593;
      }
      uint64_t v103 = (uint64_t *)(*(uint64_t (**)(void, unsigned __int8 **, uint64_t *, uint64_t, uint64_t *, unint64_t, void))(**(void **)(v13 + 8) + 2184))(*(void *)(v13 + 8), &v1897, v1593, 1, v1601, v1595, *(void *)(v13 + 16));
      *(void *)&long long v1896 = v103;
      DWORD2(v1896) = v1603;
      int v104 = (void *)*((void *)&v1896 + 1);
      unsigned int v102 = v1908;
      if (v1908 >= HIDWORD(v1908)) {
        goto LABEL_1200;
      }
      goto LABEL_172;
    case 0x103:
      uint64_t v566 = *(void *)(v12 + 32);
      int v567 = *(_DWORD *)(v566 + 8);
      *(void *)&long long v1896 = *(void *)v566;
      uint64_t v568 = v566 + 40;
      uint64_t v569 = *(void *)(v566 + 40);
      DWORD2(v1896) = v567;
      *(void *)&long long v1895 = v569;
      DWORD2(v1895) = *(_DWORD *)(v566 + 48);
      int v570 = *(unsigned __int16 *)(v569 + 24);
      switch(v570)
      {
        case 51:
          goto LABEL_950;
        case 171:
          uint64_t v1303 = *(void *)(*(void *)(v569 + 32) + 40);
          int v1304 = *(unsigned __int16 *)(v1303 + 24);
          if (v1304 == 35 || v1304 == 11)
          {
            uint64_t v1306 = *(void *)(v1303 + 80);
            v1307 = (void *)(v1306 + 24);
            if (*(_DWORD *)(v1306 + 32) >= 0x41u) {
              v1307 = (void *)*v1307;
            }
            if (*v1307 == 1)
            {
LABEL_950:
              *(void *)&long long v1894 = *(void *)v568;
              DWORD2(v1894) = *(_DWORD *)(v568 + 8);
              goto LABEL_1198;
            }
          }
          break;
        case 193:
          uint64_t v571 = *(uint64_t **)(v569 + 32);
          if (*(void *)(*(void *)(*v571 + 40) + 16 * *((unsigned int *)v571 + 2)))
          {
            uint64_t v572 = *(void *)(v13 + 8);
            uint64_t v573 = *(void *)(*(void *)(*v571 + 40) + 16 * *((unsigned int *)v571 + 2));
            if ((v573 == 1 || *(void *)(v572 + 8 * v573 + 96))
              && (*(unsigned __int8 *)(v572
                                     + 390
                                     * *(void *)(*(void *)(*v571 + 40)
                                                                  + 16 * *((unsigned int *)v571 + 2))
                                     + 4122) | 4) == 4)
            {
              v1507 = sub_1CD7F6564(*(void **)(v13 + 16), (const char *)0x104, (const llvm::APInt *)&v1897, (llvm *)1, 0, v1896, SDWORD2(v1896), v10, v571[10], v571[11], *v571, v571[1], v571[5], v571[6], *(void *)(v566 + 80), *(void *)(v566 + 88));
              goto LABEL_1199;
            }
          }
          break;
      }
      uint64_t v1509 = *(void *)(v13 + 16);
      uint64_t v1510 = *(void *)(v569 + 40) + 16 * DWORD2(v1895);
      v1511 = *(llvm **)v1510;
      uint64_t v1512 = *(void *)(v1510 + 8);
      v1513 = sub_1CD7EBF14(v1509, 1, (const llvm::APInt *)&v1897, *(llvm **)v1510, v1512, 0, 0);
      uint64_t v1516 = *(void *)(v1509 + 832);
      if (v1516) {
        LOWORD(v1516) = *(_WORD *)(v1516 + 8);
      }
      *(void *)&long long v1894 = sub_1CCFDED5C(v1509, 171, (const llvm::APInt *)&v1897, v1511, v1512, v569, *((uint64_t *)&v1895 + 1), v1515, (uint64_t)v1513, v1514, v1516);
      DWORD2(v1894) = v1517;
LABEL_1198:
      v1518 = *(void **)(v13 + 16);
      uint64_t v1519 = sub_1CD7EE368(v1518, 0x16u);
      int v1521 = v1520;
      uint64_t v1522 = *(void *)(v1894 + 40) + 16 * DWORD2(v1894);
      v1523 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, *(llvm **)v1522, *(void *)(v1522 + 8), 0, 0);
      v1507 = sub_1CD7F6564(v1518, (const char *)0x104, (const llvm::APInt *)&v1897, (llvm *)1, 0, v1896, SDWORD2(v1896), v1525, v1519, v1521, v1894, SDWORD2(v1894), (uint64_t)v1523, v1524, *(void *)(*(void *)(v12 + 32) + 80), *(void *)(*(void *)(v12 + 32) + 88));
LABEL_1199:
      uint64_t v103 = v1507;
      *(void *)&long long v1896 = v1507;
      DWORD2(v1896) = v1508;
      int v104 = (void *)*((void *)&v1896 + 1);
      unsigned int v102 = v1908;
      if (v1908 >= HIDWORD(v1908)) {
        goto LABEL_1200;
      }
      goto LABEL_172;
    case 0x104:
      v1935[0] = 0;
      LODWORD(v1935[1]) = 0;
      uint64_t v489 = *(void *)(v12 + 32);
      int v490 = *(_DWORD *)(v489 + 8);
      *(void *)&long long v1896 = *(void *)v489;
      DWORD2(v1896) = v490;
      *(void *)&long long v1895 = *(void *)(v489 + 80);
      DWORD2(v1895) = *(_DWORD *)(v489 + 88);
      DWORD2(v1894) = *(_DWORD *)(v489 + 128);
      *(void *)&long long v1894 = *(void *)(v489 + 120);
      v1891 = *(void **)(v489 + 40);
      unsigned int v1892 = *(_DWORD *)(v489 + 48);
      uint64_t v491 = *(void *)(v13 + 8);
      uint64_t v492 = *(void *)(v13 + 16);
      uint64_t v493 = (void *)(*(void *)(v1895 + 40) + 16 * DWORD2(v1895));
      uint64_t v494 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v491 + 400))(v491, *(void *)(**(void **)(v492 + 40) + 40) + 272, *(void *)(v492 + 56), *v493, v493[1]);
      sub_1CD01D89C(v491, (void *)v492, v494, v495, (uint64_t *)&v1895, (uint64_t *)&v1894, &v1891, v496, 0, 0, 0, 0, &v1890, (const llvm::APInt *)&v1897, (uint64_t *)v1935, 0);
      if (v1891)
      {
        int v89 = sub_1CD7F6564(*(void **)(v13 + 16), (const char *)0x104, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), v1896, SDWORD2(v1896), v497, (uint64_t)v1891, v1892, v1895, SDWORD2(v1895), v1894, SDWORD2(v1894), *(void *)(*(void *)(v12 + 32) + 160), *(void *)(*(void *)(v12 + 32) + 168));
      }
      else
      {
        uint64_t v498 = *(void *)(v1895 + 40) + 16 * DWORD2(v1895);
        *(void *)&long long v1894 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, *(llvm **)v498, *(void *)(v498 + 8), 0, 0);
        DWORD2(v1894) = v499;
        if (v1890) {
          unsigned int v500 = 17;
        }
        else {
          unsigned int v500 = 22;
        }
        v1891 = (void *)sub_1CD7EE368(*(void **)(v13 + 16), v500);
        unsigned int v1892 = v501;
        int v89 = sub_1CD7F6564(*(void **)(v13 + 16), (const char *)0x104, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), v1896, SDWORD2(v1896), v502, (uint64_t)v1891, v501, v1895, SDWORD2(v1895), v1894, SDWORD2(v1894), *(void *)(*(void *)(v12 + 32) + 160), *(void *)(*(void *)(v12 + 32) + 168));
      }
LABEL_226:
      uint64_t v103 = v89;
      *(void *)&long long v1896 = v89;
      DWORD2(v1896) = v90;
      goto LABEL_170;
    case 0x10B:
      v892 = *(void **)(v13 + 16);
      int v893 = *(_DWORD *)(*(void *)(v13 + 8) + 88);
      if (!v893)
      {
        v683 = sub_1CD3DD4D8((uint64_t)v892, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8));
LABEL_437:
        if (v1908 >= HIDWORD(v1908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v685 = (uint64_t **)((char *)v1907 + 16 * v1908);
        *v685 = v683;
        v685[1] = v684;
        unsigned int v77 = HIDWORD(v1908);
        unsigned int v78 = v1908 + 1;
        LODWORD(v1908) = v1908 + 1;
        long long v79 = *(_OWORD *)*(void *)(v12 + 32);
        goto LABEL_99;
      }
      uint64_t v108 = sub_1CD3D6670(v892, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), (const llvm::APInt *)&v1897, v893, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8));
LABEL_93:
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v110 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *uint64_t v110 = v108;
      v110[1] = v109;
      unsigned int v111 = v1908 + 1;
      LODWORD(v1908) = v111;
      if (v111 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v112 = (char *)v1907 + 16 * v111;
      *(void *)int v112 = *(void *)v1907;
LABEL_357:
      *((void *)v112 + 1) = 1;
      goto LABEL_805;
    case 0x10C:
      int v113 = *(_DWORD *)(*(void *)(v13 + 8) + 88);
      if (!v113) {
        goto LABEL_97;
      }
      uint64_t v18 = sub_1CD78EBD0(*(void **)(v13 + 16), **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), (const llvm::APInt *)&v1897, v113, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48));
      goto LABEL_801;
    case 0x10F:
      uint64_t v108 = sub_1CD7EFC80(*(void *)(v13 + 16), v12);
      goto LABEL_93;
    case 0x110:
      uint64_t v18 = sub_1CD7F01F8(*(void *)(v13 + 16), v12);
      goto LABEL_801;
    case 0x118:
      uint64_t v786 = *(unsigned __int16 *)(v12 + 58) - 1;
      v787 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 0, 0);
      sub_1CD788338((uint64_t)&v1907, v786, (uint64_t)v787, v788);
LABEL_97:
      long long v79 = *(_OWORD *)*(void *)(v12 + 32);
      goto LABEL_98;
    case 0x122:
      uint64_t v460 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 0, 0);
      int v462 = v461;
      uint64_t v463 = sub_1CD7F95FC(*(void *)(v13 + 16), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 1, 0);
      uint64_t v464 = *(void *)(v13 + 16);
      uint64_t v465 = *(void *)(v12 + 80);
      uint64_t v466 = *(void *)(v12 + 88);
      uint64_t v467 = *(void *)(v12 + 32);
      unint64_t v468 = *(void **)v467;
      uint64_t v469 = *(void *)(v467 + 8);
      uint64_t v471 = *(void *)(v467 + 40);
      uint64_t v470 = *(void *)(v467 + 48);
      uint64_t v472 = *(void *)(v12 + 96);
      v1935[0] = v468;
      LODWORD(v1935[1]) = v469;
      *(void *)&long long v1936 = v471;
      DWORD2(v1936) = v470;
      v1937 = v460;
      int v1938 = v462;
      uint64_t v1939 = (uint64_t)v460;
      int v1940 = v462;
      uint64_t v198 = sub_1CD7F9178(v464, 292, (uint64_t)&v1897, v465, v466, v463, v473, v474, (uint64_t *)v1935, 4, v472);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v475 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *unsigned int v475 = v198;
      v475[1] = 0;
LABEL_352:
      unsigned int v476 = HIDWORD(v1908);
      unsigned int v477 = v1908 + 1;
      LODWORD(v1908) = v1908 + 1;
      goto LABEL_355;
    case 0x123:
      unsigned int v478 = *(uint64_t **)(v12 + 32);
      uint64_t v198 = sub_1CD7F94E4(*(void *)(v13 + 16), 294, (uint64_t)&v1897, *(void *)(v12 + 80), *(void *)(v12 + 88), *v478, v478[1], v10, v478[5], v478[6], v478[10], v478[11], *(void *)(v12 + 96));
LABEL_354:
      unsigned int v477 = v1908;
      unsigned int v476 = HIDWORD(v1908);
LABEL_355:
      if (v477 >= v476) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v112 = (char *)v1907 + 16 * v477;
      *(void *)int v112 = v198;
      goto LABEL_357;
    case 0x125:
      uint64_t v856 = sub_1CD7F95FC(*(void *)(v13 + 16), **(void **)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 1, 0);
      uint64_t v857 = *(void *)(v13 + 16);
      uint64_t v858 = *(void *)(v12 + 80);
      uint64_t v859 = *(void *)(v12 + 88);
      uint64_t v860 = *(void *)(v12 + 32);
      v861 = *(void **)v860;
      uint64_t v862 = *(void *)(v860 + 8);
      uint64_t v863 = *(void *)(v860 + 40);
      uint64_t v864 = *(void *)(v860 + 48);
      v865 = *(uint64_t **)(v860 + 80);
      uint64_t v866 = *(void *)(v860 + 88);
      uint64_t v868 = *(void *)(v860 + 120);
      uint64_t v867 = *(void *)(v860 + 128);
      uint64_t v869 = *(void *)(v12 + 96);
      v1935[0] = v861;
      LODWORD(v1935[1]) = v862;
      *(void *)&long long v1936 = v863;
      DWORD2(v1936) = v864;
      v1937 = v865;
      int v1938 = v866;
      uint64_t v1939 = v868;
      int v1940 = v867;
      v1881 = sub_1CD7F9178(v857, 292, (uint64_t)&v1897, v858, v859, v856, v870, v871, (uint64_t *)v1935, 4, v869);
      uint64_t v873 = v872;
      uint64_t v874 = *(void *)(v12 + 40);
      uint64_t v875 = *(void *)(*(void *)(v12 + 32) + 48);
      uint64_t v877 = *(void *)(v12 + 80);
      uint64_t v876 = *(void *)(v12 + 88);
      v879 = *(llvm **)v874;
      uint64_t v878 = *(void *)(v874 + 8);
      int v880 = (*(uint64_t (**)(void))(**(void **)(v13 + 8) + 984))();
      if (v880 == 200)
      {
        v886 = v1881;
        v891 = sub_1CD7EB9C8(*(void *)(v13 + 16), (uint64_t)v1881, v873, (const llvm::APInt *)&v1897, v877, v876);
        unint64_t v888 = v873 & 0xFFFFFFFF00000000 | v1273;
        v890 = sub_1CD7EB9C8(*(void *)(v13 + 16), *(void *)(*(void *)(v12 + 32) + 80), *(void *)(*(void *)(v12 + 32) + 88), (const llvm::APInt *)&v1897, v877, v876);
      }
      else if (v880 == 199)
      {
        uint64_t v881 = *(void *)(v13 + 16);
        uint64_t v882 = sub_1CD7EDE1C(v881, v877, v876);
        uint64_t v885 = *(void *)(v881 + 832);
        if (v885) {
          LOWORD(v885) = *(_WORD *)(v885 + 8);
        }
        v886 = sub_1CCFDED5C(v881, 4, (const llvm::APInt *)&v1897, v879, v878, (uint64_t)v1881, v873, v884, v882, v883, v885);
        unint64_t v888 = v873 & 0xFFFFFFFF00000000 | v887;
        v890 = sub_1CD7EB9C8(*(void *)(v13 + 16), *(void *)(*(void *)(v12 + 32) + 80), *(void *)(*(void *)(v12 + 32) + 88), (const llvm::APInt *)&v1897, v877, v876);
        v891 = v886;
      }
      else
      {
        *(void *)v1863 = v875;
        uint64_t v1274 = *(void *)(v13 + 16);
        uint64_t v1275 = sub_1CD7EDE1C(v1274, v877, v876);
        uint64_t v1278 = *(void *)(v1274 + 832);
        if (v1278) {
          LOWORD(v1278) = *(_WORD *)(v1278 + 8);
        }
        v886 = sub_1CCFDED5C(v1274, 3, (const llvm::APInt *)&v1897, v879, v878, (uint64_t)v1881, v873, v1277, v1275, v1276, v1278);
        unint64_t v888 = v873 & 0xFFFFFFFF00000000 | v1279;
        uint64_t v1280 = *(void *)(v13 + 16);
        uint64_t v1281 = *(void *)(v12 + 32);
        uint64_t v1282 = *(void *)(v1281 + 80);
        uint64_t v1848 = *(void *)(v1281 + 88);
        uint64_t v1283 = sub_1CD7EDE1C(v1280, v877, v876);
        uint64_t v1286 = *(void *)(v1280 + 832);
        if (v1286) {
          LOWORD(v1286) = *(_WORD *)(v1286 + 8);
        }
        v890 = sub_1CCFDED5C(v1280, 204, (const llvm::APInt *)&v1897, v879, v878, v1282, v1848, v1285, v1283, v1284, v1286);
        v891 = v886;
        uint64_t v875 = *(void *)v1863;
      }
      unint64_t v1287 = v875 & 0xFFFFFFFF00000000 | v889;
      v1288 = *(void **)(v13 + 16);
      uint64_t v1289 = *(void *)(v12 + 40);
      v1290 = *(llvm **)(v1289 + 16);
      uint64_t v1291 = *(void *)(v1289 + 24);
      uint64_t v1292 = sub_1CD7EE368(v1288, 0x11u);
      uint64_t v1295 = v1288[104];
      if (v1295) {
        LOWORD(v1295) = *(_WORD *)(v1295 + 8);
      }
      v1297 = sub_1CD7F5D38(v1288, (const char *)0xC1, (const llvm::APInt *)&v1897, v1290, v1291, (uint64_t)v891, v888, v1294, (uint64_t)v890, v1287, v1292, v1293, SHIDWORD(v1293), v1295);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v1298 = (uint64_t **)((char *)v1907 + 16 * v1908);
      *v1298 = v886;
      v1298[1] = 0;
      unsigned int v1299 = v1908 + 1;
      LODWORD(v1908) = v1299;
      if (v1299 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v1300 = (uint64_t **)((char *)v1907 + 16 * v1299);
      *v1300 = v1297;
      v1300[1] = v1296;
      unsigned int v1301 = v1908 + 1;
      LODWORD(v1908) = v1301;
      if (v1301 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v112 = (char *)v1907 + 16 * v1301;
      *(void *)int v112 = v1881;
      goto LABEL_357;
    case 0x13C:
      unint64_t v485 = sub_1CD7EBF14(*(void *)(v13 + 16), 0, (const llvm::APInt *)&v1897, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), 0, 0);
      if (v1908 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v486 = (uint64_t **)((char *)v1907 + 16 * v1908);
      llvm::LLVMContext *v486 = v485;
      v486[1] = v484;
      unsigned int v487 = v1908 + 1;
      LODWORD(v1908) = v487;
      if (v487 >= HIDWORD(v1908)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v488 = (char *)v1907 + 16 * v487;
      void *v488 = *(void *)v1907;
      v488[1] = 0;
      goto LABEL_805;
    case 0x141:
    case 0x142:
    case 0x143:
    case 0x144:
    case 0x145:
    case 0x146:
    case 0x147:
    case 0x148:
    case 0x149:
    case 0x14A:
    case 0x14B:
    case 0x14C:
    case 0x14D:
      uint64_t v18 = sub_1CD819D40(*(void *)(v13 + 8), v12, *(void *)(v13 + 16));
      goto LABEL_801;
    default:
      goto LABEL_806;
  }
}

void sub_1CCF7F46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v462 = *MEMORY[0x1E4F143B8];
  uint64_t v434 = v436;
  uint64_t v435 = 0x800000000;
  uint64_t v8 = *(unsigned __int8 **)(v5 + 64);
  uint64_t v420 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v420, v8, 2);
  }
  int v9 = *(_DWORD *)(v6 + 60);
  int v421 = v9;
  int v10 = *(unsigned __int16 *)(v6 + 24);
  switch(*(_WORD *)(v6 + 24))
  {
    case 0x3A:
      int v101 = (**(unsigned char **)(v6 + 40) - 3) + 12;
      BOOL v102 = **(unsigned __int8 **)(v6 + 40) - 3 >= 5;
      int v103 = 17;
      goto LABEL_192;
    case 0x3B:
      int v104 = (**(unsigned char **)(v6 + 40) - 3) + 21;
      BOOL v105 = **(unsigned __int8 **)(v6 + 40) - 3 >= 5;
      int v106 = 26;
      goto LABEL_186;
    case 0x3C:
      int v101 = (**(unsigned char **)(v6 + 40) - 3) + 27;
      BOOL v102 = **(unsigned __int8 **)(v6 + 40) - 3 >= 5;
      int v103 = 32;
      goto LABEL_192;
    case 0x3D:
      int v104 = (**(unsigned char **)(v6 + 40) - 3) + 33;
      BOOL v105 = **(unsigned __int8 **)(v6 + 40) - 3 >= 5;
      int v106 = 38;
LABEL_186:
      if (v105) {
        unsigned int v92 = v106;
      }
      else {
        unsigned int v92 = v104;
      }
      uint64_t v91 = v7;
      uint64_t v107 = v6;
      goto LABEL_197;
    case 0x3E:
      int v101 = (**(unsigned char **)(v6 + 40) - 3) + 39;
      BOOL v102 = **(unsigned __int8 **)(v6 + 40) - 3 >= 5;
      int v103 = 44;
      goto LABEL_192;
    case 0x3F:
    case 0x40:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x82:
    case 0x83:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD2:
    case 0xD3:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDE:
    case 0xDF:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
      goto LABEL_162;
    case 0x41:
    case 0x42:
      uint64_t v192 = *(uint64_t **)(v6 + 40);
      uint64_t v193 = *v192;
      switch(*v192)
      {
        case 3u:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 51;
          uint64_t v196 = 45;
          break;
        case 4u:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 52;
          uint64_t v196 = 46;
          break;
        case 5u:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 53;
          uint64_t v196 = 47;
          break;
        case 6u:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 54;
          uint64_t v196 = 48;
          break;
        case 7u:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 55;
          uint64_t v196 = 49;
          break;
        default:
          BOOL v194 = v10 == 65;
          uint64_t v195 = 56;
          uint64_t v196 = 50;
          break;
      }
      if (v194) {
        uint64_t v195 = v196;
      }
      uint64_t v390 = v195;
      uint64_t v313 = *(void *)(v7 + 16);
      uint64_t v314 = v192[1];
      uint64_t v422 = v193;
      v423[0] = v314;
      uint64_t v386 = v313;
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v422, *(llvm::LLVMContext **)(v313 + 56));
      uint64_t v393 = v315;
      __int16 v384 = v10 == 65;
      __int16 v382 = v10 != 65;
      unsigned __int16 v316 = v384 | (2 * v382);
      uint64_t v387 = v6;
      if (*(_WORD *)(v6 + 56))
      {
        uint64_t v319 = 0;
        unint64_t v320 = 0;
        v317 = 0;
        v321 = *(unsigned int **)(v6 + 32);
        int v322 = &v321[10 * *(unsigned __int16 *)(v6 + 56)];
        uint64_t v395 = v7;
        do
        {
          long long v437 = *(_OWORD *)(*(void *)(*(void *)v321 + 40) + 16 * v321[2]);
          llvm::EVT::getTypeForEVT((llvm::EVT *)&v437, *(llvm::LLVMContext **)(*(void *)(v7 + 16) + 56));
          uint64_t v324 = v323;
          uint64_t v325 = *(void *)v321;
          unsigned int v326 = v321[2];
          if (v320 >= v319)
          {
            unint64_t v327 = 0xAAAAAAAAAAAAAAABLL * ((v320 - v317) >> 4) + 1;
            if (v327 > 0x555555555555555) {
              goto LABEL_529;
            }
            if (0x5555555555555556 * ((v319 - v317) >> 4) > v327) {
              unint64_t v327 = 0x5555555555555556 * ((v319 - v317) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v319 - v317) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v328 = 0x555555555555555;
            }
            else {
              unint64_t v328 = v327;
            }
            if (v328)
            {
              if (v328 > 0x555555555555555) {
                goto LABEL_530;
              }
              uint64_t v329 = (char *)operator new(48 * v328);
            }
            else
            {
              uint64_t v329 = 0;
            }
            uint64_t v330 = &v329[16 * ((v320 - v317) >> 4)];
            *(void *)uint64_t v330 = 0;
            *((void *)v330 + 1) = v325;
            *((_DWORD *)v330 + 4) = v326;
            *((_DWORD *)v330 + 5) = 0;
            *((void *)v330 + 3) = v324;
            *((_DWORD *)v330 + 8) = v316;
            *((void *)v330 + 5) = 0;
            if (v320 == v317)
            {
              v317 = &v329[16 * ((v320 - v317) >> 4)];
              uint64_t v7 = v395;
            }
            else
            {
              uint64_t v331 = &v329[16 * ((v320 - v317) >> 4)];
              uint64_t v7 = v395;
              do
              {
                long long v332 = *((_OWORD *)v320 - 3);
                long long v333 = *((_OWORD *)v320 - 1);
                *((_OWORD *)v331 - 2) = *((_OWORD *)v320 - 2);
                *((_OWORD *)v331 - 1) = v333;
                *((_OWORD *)v331 - 3) = v332;
                v331 -= 48;
                v320 -= 48;
              }
              while (v320 != v317);
              unint64_t v320 = v317;
              v317 = v331;
            }
            uint64_t v319 = &v329[48 * v328];
            uint64_t v318 = v330 + 48;
            if (v320) {
              operator delete(v320);
            }
          }
          else
          {
            *(void *)unint64_t v320 = 0;
            *((void *)v320 + 1) = v325;
            *((_DWORD *)v320 + 4) = v326;
            *((_DWORD *)v320 + 5) = 0;
            *((void *)v320 + 3) = v323;
            *((_WORD *)v320 + 16) = v316;
            *((_WORD *)v320 + 17) = 0;
            uint64_t v318 = v320 + 48;
            *((void *)v320 + 5) = 0;
            uint64_t v7 = v395;
          }
          v321 += 10;
          unint64_t v320 = v318;
        }
        while (v321 != v322);
      }
      else
      {
        v317 = 0;
        uint64_t v318 = 0;
        uint64_t v319 = 0;
      }
      __int16 v378 = v384 | (2 * v382);
      uint64_t v334 = sub_1CD7F0664(*(void *)(v7 + 16), v422, v423[0], 1u);
      uint64_t v336 = v335;
      unint64_t v337 = llvm::PointerType::get(v393, 0);
      unint64_t v338 = v337;
      uint64_t v379 = v336;
      uint64_t v380 = (uint64_t)v334;
      if (v318 >= v319)
      {
        unint64_t v340 = 0xAAAAAAAAAAAAAAABLL * ((v318 - v317) >> 4) + 1;
        if (v340 > 0x555555555555555) {
LABEL_529:
        }
          abort();
        if (0x5555555555555556 * ((v319 - v317) >> 4) > v340) {
          unint64_t v340 = 0x5555555555555556 * ((v319 - v317) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v319 - v317) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v341 = 0x555555555555555;
        }
        else {
          unint64_t v341 = v340;
        }
        if (v341)
        {
          if (v341 > 0x555555555555555) {
LABEL_530:
          }
            sub_1CB833614();
          uint64_t v342 = (char *)operator new(48 * v341);
        }
        else
        {
          uint64_t v342 = 0;
        }
        unsigned int v343 = &v342[16 * ((v318 - v317) >> 4)];
        *(void *)unsigned int v343 = 0;
        *((void *)v343 + 1) = v334;
        *((_DWORD *)v343 + 4) = v336;
        *((_DWORD *)v343 + 5) = 0;
        uint64_t v319 = &v342[48 * v341];
        *((void *)v343 + 3) = v338;
        *((_WORD *)v343 + 16) = v378;
        *((_WORD *)v343 + 17) = 0;
        *((void *)v343 + 5) = 0;
        uint64_t v339 = v343 + 48;
        if (v318 == v317)
        {
          uint64_t v344 = &v342[16 * ((v318 - v317) >> 4)];
        }
        else
        {
          do
          {
            long long v345 = *((_OWORD *)v318 - 3);
            long long v346 = *((_OWORD *)v318 - 1);
            uint64_t v344 = v343 - 48;
            *((_OWORD *)v343 - 2) = *((_OWORD *)v318 - 2);
            *((_OWORD *)v343 - 1) = v346;
            *((_OWORD *)v343 - 3) = v345;
            v318 -= 48;
            v343 -= 48;
          }
          while (v318 != v317);
        }
        if (v317) {
          operator delete(v317);
        }
        v317 = v344;
      }
      else
      {
        *(void *)uint64_t v318 = 0;
        *((void *)v318 + 1) = v334;
        *((_DWORD *)v318 + 4) = v336;
        *((_DWORD *)v318 + 5) = 0;
        *((void *)v318 + 3) = v337;
        *((_WORD *)v318 + 16) = v378;
        *((_WORD *)v318 + 17) = 0;
        uint64_t v339 = v318 + 48;
        *((void *)v318 + 5) = 0;
      }
      uint64_t v347 = *(void *)(v7 + 8);
      uint64_t v348 = *(void *)(v7 + 16);
      uint64_t v349 = *(char **)(v347 + 8 * v390 + 174048);
      unsigned __int8 v350 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v347 + 32))(v347, *(void *)(**(void **)(v348 + 40) + 40) + 272, 0);
      size_t v351 = sub_1CD7EDF94(v348, v349, v350, 0);
      int v353 = v352;
      uint64_t v354 = 0;
      uint64_t v355 = *(unsigned __int8 **)(v387 + 64);
      uint64_t v432 = v355;
      if (v355)
      {
        int v356 = v353;
        llvm::MetadataTracking::track((uint64_t)&v432, v355, 2);
        int v353 = v356;
        uint64_t v354 = v432;
      }
      int v357 = *(_DWORD *)(v387 + 60);
      LODWORD(v433) = v357;
      uint64_t v358 = *(void *)(v7 + 16);
      *(void *)&long long v437 = 0;
      DWORD2(v437) = 0;
      *(void *)uint64_t v438 = 0;
      *(_DWORD *)&v438[8] = *(_WORD *)&v438[8] & 0xFC00 | 0x20;
      *(void *)&v438[12] = 0xFFFFFFFFLL;
      size_t v439 = 0;
      int v440 = 0;
      uint64_t v441 = 0;
      v442 = 0;
      uint64_t v443 = 0;
      uint64_t v444 = v358;
      int v446 = 0;
      uint64_t v447 = 0;
      uint64_t v448 = v450;
      uint64_t v449 = 0x2000000000;
      uint64_t v451 = v453;
      uint64_t v452 = 0x2000000000;
      uint64_t v454 = v456;
      uint64_t v455 = 0x2000000000;
      int v457 = v459;
      uint64_t v458 = 0x400000000;
      char v460 = 0;
      char v461 = 0;
      uint64_t v445 = v354;
      uint64_t v359 = v7;
      if (v354)
      {
        int v371 = v353;
        llvm::MetadataTracking::track((uint64_t)&v445, v354, 2);
        int v353 = v371;
        int v357 = v433;
        uint64_t v360 = v441;
      }
      else
      {
        uint64_t v360 = 0;
      }
      *(void *)&long long v437 = v386 + 112;
      int v446 = v357;
      DWORD2(v437) = 0;
      int v361 = *(_DWORD *)(*(void *)(v359 + 8) + 4 * v390 + 181700);
      *(void *)uint64_t v438 = v393;
      size_t v439 = v351;
      int v440 = v353;
      *(_DWORD *)&v438[16] = v361;
      *(_DWORD *)&v438[12] = -1431655765 * ((unint64_t)(v339 - v317) >> 4);
      if (v360)
      {
        v442 = v360;
        operator delete(v360);
      }
      uint64_t v441 = v317;
      v442 = v339;
      uint64_t v443 = v319;
      (***(void (****)(void))(v444 + 24))();
      *(_WORD *)&v438[8] = (2 * v382) | v384 | *(_WORD *)&v438[8] & 0xFFFC;
      uint64_t v7 = v359;
      sub_1CCFB0250(*(void *)(v359 + 8), (uint64_t)&v437, (uint64_t)&v428);
      uint64_t v362 = *(void *)(v359 + 16);
      uint64_t v426 = 0;
      v427[0] = 0;
      *(void *)((char *)v427 + 5) = 0;
      long long v425 = 0u;
      __n128 __p = 0u;
      uint64_t v364 = sub_1CD7F00F8(v362, v422, v423[0], (uint64_t)&v432, v429, SDWORD2(v429), v380, v379, (long long *)&v426, 0, 0, 0, (long long *)&__p, 0);
      uint64_t v6 = v387;
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v435) = v428;
      unsigned int v365 = v435 + 1;
      LODWORD(v435) = v365;
      if (v365 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v366 = (uint64_t **)((char *)v434 + 16 * v365);
      uint64_t *v366 = v364;
      v366[1] = v363;
      LODWORD(v435) = v435 + 1;
      sub_1CD78F470(&v437);
      BOOL v125 = (__n128 *)v432;
      if (!v432) {
        goto LABEL_162;
      }
      int v126 = *v432;
      if ((v126 - 4) > 0x1E)
      {
        if ((v126 - 3) >= 0xFFFFFFFE) {
          uint64_t v368 = v432;
        }
        else {
          uint64_t v368 = 0;
        }
        if ((v126 - 3) < 0xFFFFFFFE) {
          goto LABEL_488;
        }
        unint64_t v227 = (unint64_t)(v368 + 8);
      }
      else
      {
        if ((v432[1] & 0x7F) != 2 && !*((_DWORD *)v432 + 3)) {
          goto LABEL_162;
        }
        uint64_t v367 = *((void *)v432 + 2);
        if ((v367 & 4) == 0) {
          goto LABEL_162;
        }
        unint64_t v227 = v367 & 0xFFFFFFFFFFFFFFF8;
        if (!v227) {
          goto LABEL_162;
        }
      }
      p_p = (__n128 *)&v432;
LABEL_486:
      *(void *)&long long v437 = p_p;
      uint64_t v150 = v227 + 16;
      uint64_t v151 = &v437;
LABEL_487:
      sub_1CC5FA668(v150, v151);
      goto LABEL_162;
    case 0x60:
    case 0x65:
      int v11 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v11 - 10;
      if (v11 == 14) {
        int v13 = 66;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 62;
      goto LABEL_157;
    case 0x61:
    case 0x66:
      int v66 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v66 - 10;
      if (v66 == 14) {
        int v13 = 71;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 67;
      goto LABEL_157;
    case 0x62:
    case 0x67:
      int v61 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v61 - 10;
      if (v61 == 14) {
        int v13 = 76;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 72;
      goto LABEL_157;
    case 0x63:
    case 0x68:
      int v70 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v70 - 10;
      if (v70 == 14) {
        int v13 = 81;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 77;
      goto LABEL_157;
    case 0x64:
    case 0x69:
      int v65 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v65 - 10;
      if (v65 == 14) {
        int v13 = 86;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 82;
      goto LABEL_157;
    case 0x6A:
    case 0x8D:
      int v60 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v60 - 10;
      if (v60 == 14) {
        int v13 = 91;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 87;
      goto LABEL_157;
    case 0x6B:
    case 0xE0:
      int v64 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v64 - 10;
      if (v64 == 14) {
        int v13 = 101;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 97;
      goto LABEL_157;
    case 0x6C:
    case 0xE5:
      int v71 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v71 - 10;
      if (v71 == 14) {
        int v13 = 178;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 174;
      goto LABEL_157;
    case 0x6D:
    case 0xE4:
      int v46 = *(unsigned __int8 **)(v6 + 40);
      int v47 = *v46;
      unsigned __int8 v48 = v47 - 10;
      if (v47 == 14) {
        int v49 = 96;
      }
      else {
        int v49 = 637;
      }
      if ((v48 & 0xFC) != 0) {
        unsigned int v50 = v49;
      }
      else {
        unsigned int v50 = v48 + 92;
      }
      if (*(void *)(*(void *)(v7 + 8) + 8 * v50 + 174048))
      {
        BOOL v214 = sub_1CD407020(v6);
        uint64_t v215 = v6;
        uint64_t v216 = *(unsigned int *)(**(void **)(*(void *)(v7 + 16) + 32) + 148);
        uint64_t v217 = v215;
        uint64_t v218 = *(void *)(v215 + 32);
        uint64_t v219 = 40;
        if (v214) {
          uint64_t v219 = 80;
        }
        long long v437 = *(_OWORD *)(*(void *)(*(void *)(v218 + v219) + 40) + 16 * *(unsigned int *)(v218 + v219 + 8));
        if ((_BYTE)v437) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v437);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v437);
        }
        uint64_t v307 = ExtendedSizeInBits;
        if (v221 == 1) {
        if (v307 == v216)
        }
        {
          uint64_t v95 = v7;
          uint64_t v6 = v217;
          uint64_t v96 = v217;
          unsigned int v94 = v50;
LABEL_161:
          sub_1CCF86D04(v95, v96, v94, (uint64_t)&v434);
          goto LABEL_162;
        }
        uint64_t v370 = *(void *)(*(void *)(v7 + 16) + 56);
        *(void *)&long long v437 = "POWI exponent does not match sizeof(int)";
        *(_WORD *)&v438[16] = 259;
        llvm::LLVMContext::emitError(v370, (uint64_t)&v437);
        uint64_t v6 = v217;
        uint64_t v108 = sub_1CD3DD4D8(*(void *)(v7 + 16), **(llvm ***)(v217 + 40), *(void *)(*(void *)(v217 + 40) + 8));
LABEL_198:
        if (v435 >= HIDWORD(v435)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v110 = (char *)v434 + 16 * v435;
        *uint64_t v110 = v108;
        v110[1] = v109;
        goto LABEL_200;
      }
      uint64_t v51 = *(llvm::APFloatBase **)(v7 + 16);
      uint64_t v52 = *(unsigned __int8 **)(v6 + 64);
      *(void *)&long long v437 = v52;
      if (v52)
      {
        llvm::MetadataTracking::track((uint64_t)&v437, v52, 2);
        int v9 = *(_DWORD *)(v6 + 60);
        int v46 = *(unsigned __int8 **)(v6 + 40);
      }
      DWORD2(v437) = v9;
      int v53 = *(llvm **)v46;
      uint64_t v54 = *((void *)v46 + 1);
      uint64_t v55 = *(void *)(v6 + 32);
      uint64_t v56 = *(void *)(v55 + 40);
      uint64_t v57 = *(void **)(v55 + 48);
      uint64_t v58 = *((void *)v51 + 104);
      if (v58) {
        __int16 v59 = *(_WORD *)(v58 + 8);
      }
      else {
        __int16 v59 = 0;
      }
      int v112 = sub_1CD7F3564(v51, (const char *)0xCA, (uint64_t)&v437, v53, v54, v56, v57, v59);
      uint64_t v114 = v113;
      if (!(void)v437) {
        goto LABEL_207;
      }
      int v115 = *(unsigned __int8 *)v437;
      if ((v115 - 4) > 0x1E)
      {
        if ((v115 - 3) >= 0xFFFFFFFE) {
          uint64_t v147 = v437;
        }
        else {
          uint64_t v147 = 0;
        }
        if ((v115 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v148 = v147 + 8;
LABEL_247:
          *(void *)&long long v428 = &v437;
          sub_1CC5FA668(v148 + 16, &v428);
          goto LABEL_207;
        }
        if (v115 == 3) {
          *(void *)(v437 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v437 + 1) & 0x7F) == 2 || *(_DWORD *)(v437 + 12))
      {
        uint64_t v374 = *(void *)(v437 + 16);
        if ((v374 & 4) != 0)
        {
          unint64_t v148 = v374 & 0xFFFFFFFFFFFFFFF8;
          if (v148) {
            goto LABEL_247;
          }
        }
      }
LABEL_207:
      uint64_t v116 = *(void *)(v7 + 16);
      uint64_t v117 = *(unsigned __int8 **)(v6 + 64);
      *(void *)&long long v437 = v117;
      if (v117) {
        llvm::MetadataTracking::track((uint64_t)&v437, v117, 2);
      }
      DWORD2(v437) = *(_DWORD *)(v6 + 60);
      uint64_t v118 = *(void *)(v6 + 40);
      uint64_t v119 = *(llvm **)v118;
      uint64_t v120 = *(void *)(v118 + 8);
      uint64_t v121 = *(void *)(v116 + 832);
      if (v121) {
        LOWORD(v121) = *(_WORD *)(v121 + 8);
      }
      uint64_t v123 = sub_1CCFDED5C(v116, 229, (const llvm::APInt *)&v437, v119, v120, **(void **)(v6 + 32), *(void *)(*(void *)(v6 + 32) + 8), v111, (uint64_t)v112, v114, v121);
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __int16 v124 = (uint64_t **)((char *)v434 + 16 * v435);
      *__int16 v124 = v123;
      v124[1] = v122;
      LODWORD(v435) = v435 + 1;
      BOOL v125 = (__n128 *)v437;
      if (!(void)v437) {
        goto LABEL_162;
      }
      int v126 = *(unsigned __int8 *)v437;
      if ((v126 - 4) <= 0x1E)
      {
        if ((*(unsigned char *)(v437 + 1) & 0x7F) == 2 || *(_DWORD *)(v437 + 12))
        {
          uint64_t v127 = *(void *)(v437 + 16);
          if ((v127 & 4) != 0)
          {
            unint64_t v128 = v127 & 0xFFFFFFFFFFFFFFF8;
            if (v128) {
              goto LABEL_253;
            }
          }
        }
        goto LABEL_162;
      }
      if ((v126 - 3) >= 0xFFFFFFFE) {
        uint64_t v149 = v437;
      }
      else {
        uint64_t v149 = 0;
      }
      if ((v126 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v128 = v149 + 8;
LABEL_253:
        *(void *)&long long v428 = &v437;
        uint64_t v150 = v128 + 16;
        uint64_t v151 = &v428;
        goto LABEL_487;
      }
      goto LABEL_488;
    case 0x6E:
    case 0xE2:
      int v68 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v68 - 10;
      if (v68 == 14) {
        int v13 = 161;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 157;
      goto LABEL_157;
    case 0x6F:
    case 0xE3:
      int v75 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v75 - 10;
      if (v75 == 14) {
        int v13 = 166;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 162;
      goto LABEL_157;
    case 0x70:
    case 0xE9:
      int v43 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v43 - 10;
      if (v43 == 14) {
        int v13 = 141;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 137;
      goto LABEL_157;
    case 0x71:
    case 0xEA:
      int v69 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v69 - 10;
      if (v69 == 14) {
        int v13 = 151;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 147;
      goto LABEL_157;
    case 0x72:
    case 0xE6:
      int v74 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v74 - 10;
      if (v74 == 14) {
        int v13 = 111;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 107;
      goto LABEL_157;
    case 0x73:
    case 0xE8:
      int v72 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v72 - 10;
      if (v72 == 14) {
        int v13 = 131;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 127;
      goto LABEL_157;
    case 0x74:
    case 0xE7:
      int v44 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v44 - 10;
      if (v44 == 14) {
        int v13 = 121;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 117;
      goto LABEL_157;
    case 0x75:
    case 0xED:
      int v62 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v62 - 10;
      if (v62 == 14) {
        int v13 = 198;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 194;
      goto LABEL_157;
    case 0x76:
    case 0xEE:
      int v73 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v73 - 10;
      if (v73 == 14) {
        int v13 = 203;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 199;
      goto LABEL_157;
    case 0x77:
    case 0xF7:
      int v45 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v45 - 10;
      if (v45 == 14) {
        int v13 = 233;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 229;
      goto LABEL_157;
    case 0x78:
    case 0xF6:
      int v77 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v77 - 10;
      if (v77 == 14) {
        int v13 = 228;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 224;
      goto LABEL_157;
    case 0x79:
    case 0xEB:
      int v34 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v34 - 10;
      if (v34 == 14) {
        int v13 = 188;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 184;
      goto LABEL_157;
    case 0x7A:
    case 0xF1:
      int v76 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v76 - 10;
      if (v76 == 14) {
        int v13 = 218;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 214;
      goto LABEL_157;
    case 0x7B:
    case 0xEF:
      int v63 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v63 - 10;
      if (v63 == 14) {
        int v13 = 208;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 204;
      goto LABEL_157;
    case 0x7C:
    case 0xF0:
      int v67 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v67 - 10;
      if (v67 == 14) {
        int v13 = 213;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 209;
      goto LABEL_157;
    case 0x7D:
    case 0xEC:
      int v42 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v42 - 10;
      if (v42 == 14) {
        int v13 = 193;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 189;
      goto LABEL_157;
    case 0x7E:
    case 0xF2:
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      unsigned int v37 = 234;
      unsigned int v38 = 235;
      unsigned int v39 = 236;
      unsigned int v40 = 237;
      unsigned int v41 = 238;
      goto LABEL_119;
    case 0x7F:
    case 0xF3:
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      unsigned int v37 = 239;
      unsigned int v38 = 240;
      unsigned int v39 = 241;
      unsigned int v40 = 242;
      unsigned int v41 = 243;
      goto LABEL_119;
    case 0x80:
    case 0xF4:
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      unsigned int v37 = 244;
      unsigned int v38 = 245;
      unsigned int v39 = 246;
      unsigned int v40 = 247;
      unsigned int v41 = 248;
      goto LABEL_119;
    case 0x81:
    case 0xF5:
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      unsigned int v37 = 249;
      unsigned int v38 = 250;
      unsigned int v39 = 251;
      unsigned int v40 = 252;
      unsigned int v41 = 253;
LABEL_119:
      sub_1CCF86FC0(v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v434);
      goto LABEL_162;
    case 0x84:
    case 0x85:
    case 0xD0:
    case 0xD1:
      BOOL v152 = sub_1CD407020(v6);
      uint64_t v153 = (void *)v6;
      int v154 = *(unsigned __int16 *)(v6 + 24);
      uint64_t v155 = v153[5];
      long long v428 = *(_OWORD *)(v153[4] + 40 * v152);
      uint64_t v156 = (uint64_t *)(*(void *)(v428 + 40) + 16 * DWORD2(v428));
      uint64_t v157 = *v156;
      uint64_t v158 = v156[1];
      int v159 = *(llvm **)v155;
      uint64_t v160 = *(void *)(v155 + 8);
      __p.n128_u64[0] = 0;
      uint64_t v161 = v153;
      uint64_t v162 = (unsigned __int8 *)v153[8];
      uint64_t v426 = (__n128 *)v162;
      if (v162) {
        llvm::MetadataTracking::track((uint64_t)&v426, v162, 2);
      }
      LODWORD(v427[0]) = *((_DWORD *)v161 + 15);
      unsigned int v163 = 2;
      do
      {
        __p.n128_u8[0] = v163;
        __p.n128_u64[1] = 0;
        if (v159 == v163
          || sub_1CD787E7C((unsigned __int8 *)&__p, (uint64_t)v159, v160))
        {
          if (v154 == 208 || v154 == 132) {
            unsigned int FPTOSINT = llvm::RTLIB::getFPTOSINT(v157, v158, __p.n128_i8[0]);
          }
          else {
            unsigned int FPTOSINT = llvm::RTLIB::getFPTOUINT(v157, v158, __p.n128_i8[0]);
          }
          unsigned int v165 = FPTOSINT;
        }
        else
        {
          unsigned int v165 = 637;
        }
        if (v163 > 6) {
          break;
        }
        ++v163;
      }
      while (v165 == 637);
      if (v152)
      {
        uint64_t v6 = (uint64_t)v161;
        uint64_t v166 = (uint64_t *)v161[4];
        uint64_t v167 = *v166;
        uint64_t v168 = v166[1];
      }
      else
      {
        LODWORD(v168) = 0;
        uint64_t v167 = 0;
        uint64_t v6 = (uint64_t)v161;
      }
      uint64_t v202 = *(void *)(v7 + 8);
      uint64_t v203 = *(void *)(v7 + 16);
      v404[0] = 0;
      v404[1] = 0;
      char v405 = 0;
      uint64_t v406 = 0;
      char v407 = 4;
      sub_1CCFF9554(v202, v203, v165, __p.n128_i64[0], __p.n128_i64[1], (uint64_t)&v428, 1uLL, (uint64_t)v404, (uint64_t)&v437, (uint64_t)&v426, v167, v168);
      unint64_t v204 = *(llvm::APFloatBase **)(v7 + 16);
      uint64_t v205 = *((void *)v204 + 104);
      if (v205) {
        __int16 v206 = *(_WORD *)(v205 + 8);
      }
      else {
        __int16 v206 = 0;
      }
      uint64_t v223 = sub_1CD7F3564(v204, (const char *)0xC9, (uint64_t)&v426, v159, v160, v437, *((void **)&v437 + 1), v206);
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v224 = (uint64_t **)((char *)v434 + 16 * v435);
      *BOOL v224 = v223;
      v224[1] = v222;
      unsigned int v225 = v435 + 1;
      LODWORD(v435) = v435 + 1;
      if (v152)
      {
        if (v225 >= HIDWORD(v435)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v434 + v225) = *(_OWORD *)v438;
        LODWORD(v435) = v435 + 1;
      }
      BOOL v125 = v426;
      if (!v426) {
        goto LABEL_162;
      }
      int v126 = v426->n128_u8[0];
      if ((v126 - 4) <= 0x1E)
      {
        if ((v426->n128_u8[1] & 0x7F) == 2 || v426->n128_u32[3])
        {
          unint64_t v226 = v426[1].n128_u64[0];
          if ((v226 & 4) != 0)
          {
            unint64_t v227 = v226 & 0xFFFFFFFFFFFFFFF8;
            if (v227) {
              goto LABEL_396;
            }
          }
        }
        goto LABEL_162;
      }
      if ((v126 - 3) >= 0xFFFFFFFE) {
        uint64_t v308 = v426;
      }
      else {
        uint64_t v308 = 0;
      }
      if ((v126 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v227 = (unint64_t)&v308->n128_u64[1];
LABEL_396:
        p_p = (__n128 *)&v426;
        goto LABEL_486;
      }
      goto LABEL_488;
    case 0x86:
    case 0x87:
    case 0xCA:
    case 0xCB:
      uint64_t v394 = v7;
      BOOL v169 = sub_1CD407020(v6);
      uint64_t v170 = (void *)v6;
      int v171 = *(unsigned __int16 *)(v6 + 24);
      BOOL v173 = v171 == 202 || v171 == 134;
      BOOL v391 = v173;
      BOOL v174 = v169;
      uint64_t v175 = (uint64_t *)v170[5];
      uint64_t v176 = (unsigned int *)(v170[4] + 40 * v169);
      uint64_t v177 = (uint64_t *)(*(void *)(*(void *)v176 + 40) + 16 * v176[2]);
      uint64_t v178 = *v177;
      uint64_t v179 = v177[1];
      uint64_t v180 = *v175;
      uint64_t v181 = v175[1];
      *(void *)&long long v428 = 0;
      uint64_t v182 = v170;
      uint64_t v183 = (unsigned __int8 *)v170[8];
      __p.n128_u64[0] = (unint64_t)v183;
      if (v183) {
        llvm::MetadataTracking::track((uint64_t)&__p, v183, 2);
      }
      __p.n128_u32[2] = *((_DWORD *)v182 + 15);
      unsigned int v184 = 2;
      do
      {
        LOBYTE(v428) = v184;
        *((void *)&v428 + 1) = 0;
        if (v178 == v184 || sub_1CD787E7C((unsigned __int8 *)&v428, v178, v179))
        {
          if (v171 == 202 || v171 == 134) {
            unsigned int SINTTOFP = llvm::RTLIB::getSINTTOFP(v428, *((uint64_t *)&v428 + 1), v180);
          }
          else {
            unsigned int SINTTOFP = llvm::RTLIB::getUINTTOFP(v428, *((uint64_t *)&v428 + 1), v180);
          }
          unsigned int v186 = SINTTOFP;
        }
        else
        {
          unsigned int v186 = 637;
        }
        if (v184 > 6) {
          break;
        }
        ++v184;
      }
      while (v186 == 637);
      uint64_t v187 = (uint64_t *)v182[4];
      if (v174)
      {
        uint64_t v188 = *v187;
        uint64_t v189 = v187[1];
      }
      else
      {
        LODWORD(v189) = 0;
        uint64_t v188 = 0;
      }
      int v207 = *(llvm::APFloatBase **)(v394 + 16);
      if (v391) {
        uint64_t v208 = 198;
      }
      else {
        uint64_t v208 = 199;
      }
      uint64_t v209 = &v187[5 * v174];
      uint64_t v210 = *v209;
      uint64_t v211 = (void *)v209[1];
      uint64_t v212 = *((void *)v207 + 104);
      if (v212) {
        __int16 v213 = *(_WORD *)(v212 + 8);
      }
      else {
        __int16 v213 = 0;
      }
      uint64_t v426 = (__n128 *)sub_1CD7F3564(v207, (const char *)v208, (uint64_t)&__p, (llvm *)v428, *((uint64_t *)&v428 + 1), v210, v211, v213);
      v427[0] = v228;
      uint64_t v229 = *(void *)(v394 + 8);
      uint64_t v230 = *(void *)(v394 + 16);
      v408[0] = 0;
      v408[1] = 0;
      char v409 = 0;
      uint64_t v410 = 0;
      char v411 = v391 | 4;
      sub_1CCFF9554(v229, v230, v186, v180, v181, (uint64_t)&v426, 1uLL, (uint64_t)v408, (uint64_t)&v437, (uint64_t)&__p, v188, v189);
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v435) = v437;
      unsigned int v231 = v435 + 1;
      LODWORD(v435) = v435 + 1;
      uint64_t v6 = (uint64_t)v182;
      uint64_t v7 = v394;
      if (v174)
      {
        if (v231 >= HIDWORD(v435)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v434 + v231) = *(_OWORD *)v438;
        LODWORD(v435) = v435 + 1;
      }
      BOOL v125 = (__n128 *)__p.n128_u64[0];
      if (!__p.n128_u64[0]) {
        goto LABEL_162;
      }
      int v126 = *(unsigned __int8 *)__p.n128_u64[0];
      if ((v126 - 4) <= 0x1E)
      {
        if ((*(unsigned char *)(__p.n128_u64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(__p.n128_u64[0] + 12))
        {
          uint64_t v232 = *(void *)(__p.n128_u64[0] + 16);
          if ((v232 & 4) != 0)
          {
            unint64_t v227 = v232 & 0xFFFFFFFFFFFFFFF8;
            if (v227) {
              goto LABEL_402;
            }
          }
        }
        goto LABEL_162;
      }
      if ((v126 - 3) >= 0xFFFFFFFE) {
        unint64_t v310 = __p.n128_u64[0];
      }
      else {
        unint64_t v310 = 0;
      }
      if ((v126 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v227 = v310 + 8;
LABEL_402:
        p_p = &__p;
        goto LABEL_486;
      }
      goto LABEL_488;
    case 0x88:
    case 0xD4:
      BOOL v197 = sub_1CD407020(v6);
      uint64_t v198 = v6;
      unsigned int v199 = *(uint64_t **)(v6 + 32);
      long long v428 = *(_OWORD *)&v199[5 * v197];
      BOOL v392 = v197;
      if (v197)
      {
        uint64_t v200 = *v199;
        uint64_t v201 = v199[1];
      }
      else
      {
        LODWORD(v201) = 0;
        uint64_t v200 = 0;
      }
      uint64_t v297 = *(uint64_t **)(v198 + 40);
      uint64_t v298 = *v297;
      uint64_t v299 = v297[1];
      uint64_t v300 = (void *)(*(void *)(v428 + 40) + 16 * DWORD2(v428));
      unsigned int FPROUND = llvm::RTLIB::getFPROUND(*v300, v300[1], v298);
      uint64_t v302 = *(void *)(v7 + 8);
      uint64_t v303 = *(void *)(v7 + 16);
      v400[0] = 0;
      v400[1] = 0;
      char v401 = 0;
      uint64_t v402 = 0;
      char v403 = 4;
      uint64_t v304 = *(unsigned __int8 **)(v198 + 64);
      __p.n128_u64[0] = (unint64_t)v304;
      if (v304) {
        llvm::MetadataTracking::track((uint64_t)&__p, v304, 2);
      }
      __p.n128_u32[2] = *(_DWORD *)(v198 + 60);
      sub_1CCFF9554(v302, v303, FPROUND, v298, v299, (uint64_t)&v428, 1uLL, (uint64_t)v400, (uint64_t)&v437, (uint64_t)&__p, v200, v201);
      if (!__p.n128_u64[0]) {
        goto LABEL_382;
      }
      int v305 = *(unsigned __int8 *)__p.n128_u64[0];
      if ((v305 - 4) > 0x1E)
      {
        if ((v305 - 3) >= 0xFFFFFFFE) {
          unint64_t v311 = __p.n128_u64[0];
        }
        else {
          unint64_t v311 = 0;
        }
        if ((v305 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v312 = v311 + 8;
LABEL_410:
          uint64_t v426 = &__p;
          sub_1CC5FA668(v312 + 16, &v426);
          goto LABEL_382;
        }
        if (v305 == 3) {
          *(void *)(__p.n128_u64[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(__p.n128_u64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(__p.n128_u64[0] + 12))
      {
        uint64_t v377 = *(void *)(__p.n128_u64[0] + 16);
        if ((v377 & 4) != 0)
        {
          unint64_t v312 = v377 & 0xFFFFFFFFFFFFFFF8;
          if (v312) {
            goto LABEL_410;
          }
        }
      }
LABEL_382:
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v435) = v437;
      unsigned int v306 = v435 + 1;
      LODWORD(v435) = v435 + 1;
      uint64_t v6 = v198;
      if (v392)
      {
        if (v306 >= HIDWORD(v435)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v434 + v306) = *(_OWORD *)v438;
        LODWORD(v435) = v435 + 1;
      }
      goto LABEL_162;
    case 0x89:
    case 0xDD:
      uint64_t v15 = v6;
      uint64_t v16 = *(void *)(v6 + 32);
      uint64_t v17 = v16 + 40;
      uint64_t v18 = (uint64_t *)(*(void *)(*(void *)(v16 + 40) + 40) + 16 * *(unsigned int *)(v16 + 48));
      uint64_t v19 = *v18;
      if (v10 == 221)
      {
        unsigned int v20 = (v19 - 10);
        BOOL v102 = v20 >= 5;
        unsigned int v21 = v20 + 264;
        if (v102) {
          unsigned int FPEXT = 637;
        }
        else {
          unsigned int FPEXT = v21;
        }
      }
      else
      {
        unsigned int FPEXT = llvm::RTLIB::getFPEXT(v19, v18[1], **(void **)(v15 + 40));
      }
      uint64_t v23 = *(void *)(v7 + 8);
      uint64_t v24 = *(void *)(v7 + 16);
      uint64_t v25 = *(uint64_t **)(v15 + 40);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      v396[0] = 0;
      v396[1] = 0;
      char v397 = 0;
      uint64_t v398 = 0;
      char v399 = 4;
      uint64_t v28 = *(unsigned __int8 **)(v15 + 64);
      *(void *)&long long v428 = v28;
      if (v28)
      {
        unsigned int v29 = FPEXT;
        llvm::MetadataTracking::track((uint64_t)&v428, v28, 2);
        unsigned int FPEXT = v29;
        uint64_t v16 = *(void *)(v15 + 32);
        int v9 = *(_DWORD *)(v15 + 60);
      }
      DWORD2(v428) = v9;
      sub_1CCFF9554(v23, v24, FPEXT, v26, v27, v17, 1uLL, (uint64_t)v396, (uint64_t)&v437, (uint64_t)&v428, *(void *)v16, *(void *)(v16 + 8));
      uint64_t v6 = v15;
      if (!(void)v428) {
        goto LABEL_18;
      }
      int v30 = *(unsigned __int8 *)v428;
      if ((v30 - 4) > 0x1E)
      {
        if ((v30 - 3) >= 0xFFFFFFFE) {
          uint64_t v145 = v428;
        }
        else {
          uint64_t v145 = 0;
        }
        if ((v30 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v146 = v145 + 8;
LABEL_239:
          __p.n128_u64[0] = (unint64_t)&v428;
          sub_1CC5FA668(v146 + 16, &__p);
          goto LABEL_18;
        }
        if (v30 == 3) {
          *(void *)(v428 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v428 + 1) & 0x7F) == 2 || *(_DWORD *)(v428 + 12))
      {
        uint64_t v373 = *(void *)(v428 + 16);
        if ((v373 & 4) != 0)
        {
          unint64_t v146 = v373 & 0xFFFFFFFFFFFFFFF8;
          if (v146) {
            goto LABEL_239;
          }
        }
      }
LABEL_18:
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v435) = v437;
      unsigned int v31 = HIDWORD(v435);
      unsigned int v32 = v435 + 1;
      LODWORD(v435) = v435 + 1;
      long long v33 = *(_OWORD *)v438;
      goto LABEL_149;
    case 0xBD:
      int v100 = **(unsigned __int8 **)(v6 + 40);
      uint64_t v91 = v7;
      if (v100 == 5)
      {
        unsigned int v92 = 59;
      }
      else if (v100 == 6)
      {
        unsigned int v92 = 60;
      }
      else
      {
        unsigned int v92 = 61;
      }
      goto LABEL_196;
    case 0xD7:
      int v247 = (void *)(*(void *)(**(void **)(v6 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(void *)(v6 + 32) + 8));
      unsigned int v92 = llvm::RTLIB::getFPEXT(*v247, v247[1], **(void **)(v6 + 40));
      goto LABEL_195;
    case 0xDA:
      if (**(unsigned char **)(v6 + 40) != 10) {
        goto LABEL_162;
      }
      uint64_t v91 = v7;
      unsigned int v92 = 263;
      goto LABEL_196;
    case 0xDB:
      int v101 = (*(unsigned char *)(*(void *)(**(void **)(v6 + 32) + 40)
                                        + 16 * *(unsigned int *)(*(void *)(v6 + 32) + 8))
                             - 10)
           + 264;
      BOOL v102 = *(unsigned __int8 *)(*(void *)(**(void **)(v6 + 32) + 40)
                                              + 16 * *(unsigned int *)(*(void *)(v6 + 32) + 8))
           - 10 >= 5;
      int v103 = 637;
LABEL_192:
      if (v102) {
        unsigned int v92 = v103;
      }
      else {
        unsigned int v92 = v101;
      }
LABEL_195:
      uint64_t v91 = v7;
LABEL_196:
      uint64_t v107 = v6;
LABEL_197:
      uint64_t v108 = sub_1CCF870BC(v91, v92, v107);
      goto LABEL_198;
    case 0xDC:
      if (**(unsigned char **)(v6 + 40) != 10) {
        goto LABEL_162;
      }
      uint64_t v85 = *(void *)(v7 + 8);
      uint64_t v86 = *(void *)(v7 + 16);
      uint64_t v87 = *(uint64_t **)(v6 + 32);
      uint64_t v88 = (uint64_t)(v87 + 5);
      v412[0] = 0;
      v412[1] = 0;
      char v413 = 0;
      uint64_t v414 = 0;
      char v415 = 4;
      int v89 = *(unsigned __int8 **)(v6 + 64);
      *(void *)&long long v428 = v89;
      if (v89)
      {
        llvm::MetadataTracking::track((uint64_t)&v428, v89, 2);
        int v9 = *(_DWORD *)(v6 + 60);
        uint64_t v87 = *(uint64_t **)(v6 + 32);
      }
      DWORD2(v428) = v9;
      sub_1CCFF9554(v85, v86, 0x107u, 10, 0, v88, 1uLL, (uint64_t)v412, (uint64_t)&v437, (uint64_t)&v428, *v87, v87[1]);
      if (!(void)v428) {
        goto LABEL_147;
      }
      int v90 = *(unsigned __int8 *)v428;
      if ((v90 - 4) > 0x1E)
      {
        if ((v90 - 3) >= 0xFFFFFFFE) {
          uint64_t v233 = v428;
        }
        else {
          uint64_t v233 = 0;
        }
        if ((v90 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v234 = v233 + 8;
LABEL_347:
          __p.n128_u64[0] = (unint64_t)&v428;
          sub_1CC5FA668(v234 + 16, &__p);
          goto LABEL_147;
        }
        if (v90 == 3) {
          *(void *)(v428 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v428 + 1) & 0x7F) == 2 || *(_DWORD *)(v428 + 12))
      {
        uint64_t v376 = *(void *)(v428 + 16);
        if ((v376 & 4) != 0)
        {
          unint64_t v234 = v376 & 0xFFFFFFFFFFFFFFF8;
          if (v234) {
            goto LABEL_347;
          }
        }
      }
LABEL_147:
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v435) = v437;
      unsigned int v31 = HIDWORD(v435);
      unsigned int v32 = v435 + 1;
      LODWORD(v435) = v435 + 1;
      long long v33 = *(_OWORD *)v438;
LABEL_149:
      if (v32 >= v31) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v434 + v32) = v33;
LABEL_200:
      LODWORD(v435) = v435 + 1;
      if (!v435) {
        goto LABEL_164;
      }
      goto LABEL_163;
    case 0xE1:
      int v93 = **(unsigned __int8 **)(v6 + 40);
      unsigned __int8 v12 = v93 - 10;
      if (v93 == 14) {
        int v13 = 106;
      }
      else {
        int v13 = 637;
      }
      int v14 = v12 + 102;
LABEL_157:
      if ((v12 & 0xFC) != 0) {
        unsigned int v94 = v13;
      }
      else {
        unsigned int v94 = v14;
      }
      uint64_t v95 = v7;
      uint64_t v96 = v6;
      goto LABEL_161;
    case 0xFC:
      uint64_t v248 = *(unsigned __int8 ***)(v6 + 40);
      int v250 = *v248;
      uint64_t v249 = (uint64_t)v248[1];
      uint64_t v381 = ((_BYTE)v250 - 10) + 167;
      uint64_t v251 = v6;
      uint64_t v252 = *(void *)(v7 + 16);
      uint64_t v432 = v250;
      uint64_t v433 = v249;
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v432, *(llvm::LLVMContext **)(v252 + 56));
      unsigned int v254 = v253;
      uint64_t v255 = *(uint64_t **)(v251 + 32);
      uint64_t v256 = *v255;
      uint64_t v257 = v7;
      int v258 = *((_DWORD *)v255 + 2);
      int v259 = operator new(0x30uLL);
      *int v259 = 0;
      v259[1] = v256;
      *((_DWORD *)v259 + 4) = v258;
      *((_DWORD *)v259 + 5) = 0;
      v259[3] = v254;
      *((_DWORD *)v259 + 8) = 0;
      v259[5] = 0;
      uint64_t v260 = sub_1CD7F0664(*(void *)(v257 + 16), (uint64_t)v432, v433, 1u);
      uint64_t v262 = v261;
      unint64_t v263 = llvm::PointerType::get(v254, 0);
      v264 = operator new(0x60uLL);
      v264[6] = 0;
      v264[7] = v260;
      uint64_t v383 = v262;
      uint64_t v385 = (uint64_t)v260;
      v264[8] = v262;
      v264[9] = v263;
      *((_DWORD *)v264 + 20) = 0;
      v264[11] = 0;
      long long v265 = *((_OWORD *)v259 + 1);
      *(_OWORD *)v264 = *(_OWORD *)v259;
      *((_OWORD *)v264 + 1) = v265;
      *((_OWORD *)v264 + 2) = *((_OWORD *)v259 + 2);
      operator delete(v259);
      uint64_t v266 = sub_1CD7F0664(*(void *)(v257 + 16), (uint64_t)v432, v433, 1u);
      uint64_t v268 = v267;
      unint64_t v269 = llvm::PointerType::get(v254, 0);
      uint64_t v270 = operator new(0xC0uLL);
      v270[12] = 0;
      v270[13] = v266;
      uint64_t v389 = v268;
      v270[14] = v268;
      v270[15] = v269;
      *((_DWORD *)v270 + 32) = 0;
      v270[17] = 0;
      long long v271 = *((_OWORD *)v264 + 3);
      *((_OWORD *)v270 + 2) = *((_OWORD *)v264 + 2);
      *((_OWORD *)v270 + 3) = v271;
      long long v272 = *((_OWORD *)v264 + 5);
      *((_OWORD *)v270 + 4) = *((_OWORD *)v264 + 4);
      *((_OWORD *)v270 + 5) = v272;
      long long v273 = *((_OWORD *)v264 + 1);
      uint64_t v274 = v252 + 112;
      *(_OWORD *)uint64_t v270 = *(_OWORD *)v264;
      *((_OWORD *)v270 + 1) = v273;
      operator delete(v264);
      uint64_t v275 = *(void *)(v257 + 8);
      uint64_t v276 = *(void *)(v257 + 16);
      uint64_t v7 = v257;
      unsigned int v277 = *(char **)(v275 + 8 * v381 + 174048);
      unsigned __int8 v278 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v275 + 32))(v275, *(void *)(**(void **)(v276 + 40) + 40) + 272, 0);
      size_t v279 = sub_1CD7EDF94(v276, v277, v278, 0);
      int v281 = v280;
      uint64_t v282 = 0;
      uint64_t v283 = *(unsigned __int8 **)(v251 + 64);
      unsigned int v430 = v283;
      if (v283)
      {
        llvm::MetadataTracking::track((uint64_t)&v430, v283, 2);
        uint64_t v282 = v430;
      }
      int v284 = *(_DWORD *)(v251 + 60);
      int v431 = v284;
      uint64_t v285 = *(void *)(v257 + 16);
      *(void *)&long long v437 = 0;
      DWORD2(v437) = 0;
      *(void *)uint64_t v438 = 0;
      *(_DWORD *)&v438[8] = *(_WORD *)&v438[8] & 0xFC00 | 0x20;
      *(void *)&v438[12] = 0xFFFFFFFFLL;
      size_t v439 = 0;
      int v440 = 0;
      uint64_t v441 = 0;
      v442 = 0;
      uint64_t v443 = 0;
      uint64_t v444 = v285;
      int v446 = 0;
      uint64_t v447 = 0;
      uint64_t v448 = v450;
      uint64_t v449 = 0x2000000000;
      uint64_t v451 = v453;
      uint64_t v452 = 0x2000000000;
      uint64_t v454 = v456;
      uint64_t v455 = 0x2000000000;
      int v457 = v459;
      uint64_t v458 = 0x400000000;
      char v460 = 0;
      char v461 = 0;
      uint64_t v445 = v282;
      if (v282)
      {
        llvm::MetadataTracking::track((uint64_t)&v445, v282, 2);
        int v284 = v431;
        uint64_t v285 = *(void *)(v257 + 16);
        uint64_t v286 = v441;
      }
      else
      {
        uint64_t v286 = 0;
      }
      *(void *)&long long v437 = v274;
      int v446 = v284;
      DWORD2(v437) = 0;
      int v287 = *(_DWORD *)(*(void *)(v257 + 8) + 4 * v381 + 181700);
      *(void *)uint64_t v438 = **(void **)(v285 + 56) + 1576;
      size_t v439 = v279;
      int v440 = v281;
      *(_DWORD *)&v438[16] = v287;
      *(_DWORD *)&v438[12] = 3;
      if (v286)
      {
        v442 = v286;
        operator delete(v286);
      }
      uint64_t v441 = (char *)v270;
      v442 = (char *)(v270 + 18);
      uint64_t v443 = (char *)(v270 + 24);
      (***(void (****)(void))(v444 + 24))();
      sub_1CCFB0250(*(void *)(v257 + 8), (uint64_t)&v437, (uint64_t)&v428);
      uint64_t v288 = *(void *)(v257 + 16);
      uint64_t v426 = 0;
      v427[0] = 0;
      *(void *)((char *)v427 + 5) = 0;
      long long v425 = 0u;
      __n128 __p = 0u;
      uint64_t v290 = sub_1CD7F00F8(v288, (uint64_t)v432, v433, (uint64_t)&v430, v429, SDWORD2(v429), v385, v383, (long long *)&v426, 0, 0, 0, (long long *)&__p, 0);
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v291 = (uint64_t **)((char *)v434 + 16 * v435);
      *uint64_t v291 = v290;
      v291[1] = v289;
      LODWORD(v435) = v435 + 1;
      uint64_t v292 = *(void *)(v257 + 16);
      uint64_t v422 = 0;
      v423[0] = 0;
      *(uint64_t *)((char *)v423 + 5) = 0;
      long long v425 = 0u;
      __n128 __p = 0u;
      uint64_t v294 = sub_1CD7F00F8(v292, (uint64_t)v432, v433, (uint64_t)&v430, v429, SDWORD2(v429), (uint64_t)v266, v389, (long long *)&v422, 0, 0, 0, (long long *)&__p, 0);
      if (v435 >= HIDWORD(v435)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v295 = (uint64_t **)((char *)v434 + 16 * v435);
      *BOOL v295 = v294;
      v295[1] = v293;
      LODWORD(v435) = v435 + 1;
      sub_1CD78F470(&v437);
      BOOL v125 = (__n128 *)v430;
      uint64_t v6 = v251;
      if (!v430) {
        goto LABEL_162;
      }
      int v126 = *v430;
      if ((v126 - 4) > 0x1E)
      {
        if ((v126 - 3) >= 0xFFFFFFFE) {
          uint64_t v369 = v430;
        }
        else {
          uint64_t v369 = 0;
        }
        if ((v126 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v227 = (unint64_t)(v369 + 8);
LABEL_485:
          p_p = (__n128 *)&v430;
          goto LABEL_486;
        }
LABEL_488:
        if (v126 == 3) {
          v125->n128_u64[1] = 0;
        }
      }
      else if ((v430[1] & 0x7F) == 2 || *((_DWORD *)v430 + 3))
      {
        uint64_t v296 = *((void *)v430 + 2);
        if ((v296 & 4) != 0)
        {
          unint64_t v227 = v296 & 0xFFFFFFFFFFFFFFF8;
          if (v227) {
            goto LABEL_485;
          }
        }
      }
      goto LABEL_162;
    default:
      switch(*(_WORD *)(v6 + 24))
      {
        case 0x11C:
          __n128 __p = 0uLL;
          *(void *)&long long v425 = 0;
          uint64_t v235 = *(void *)(v7 + 16);
          *(void *)&long long v437 = 0;
          DWORD2(v437) = 0;
          *(void *)uint64_t v438 = 0;
          *(_DWORD *)&v438[8] = 32;
          *(void *)&v438[12] = 0xFFFFFFFFLL;
          size_t v439 = 0;
          int v440 = 0;
          uint64_t v441 = 0;
          v442 = 0;
          uint64_t v443 = 0;
          uint64_t v444 = v235;
          int v446 = 0;
          uint64_t v447 = 0;
          uint64_t v448 = v450;
          uint64_t v449 = 0x2000000000;
          uint64_t v451 = v453;
          uint64_t v452 = 0x2000000000;
          uint64_t v454 = v456;
          uint64_t v455 = 0x2000000000;
          int v457 = v459;
          uint64_t v458 = 0x400000000;
          char v460 = 0;
          char v461 = 0;
          uint64_t v445 = v420;
          if (v420)
          {
            llvm::MetadataTracking::track((uint64_t)&v445, v420, 2);
            int v9 = v421;
            uint64_t v235 = *(void *)(v7 + 16);
          }
          int v446 = v9;
          unint64_t v236 = *(uint64_t **)(v6 + 32);
          uint64_t v238 = *v236;
          uint64_t v237 = v236[1];
          *(void *)&long long v437 = v238;
          DWORD2(v437) = v237;
          uint64_t v239 = **(void **)(v235 + 56) + 1576;
          uint64_t v240 = (*(unsigned __int8 (**)(void, uint64_t, void))(**(void **)(v7 + 8) + 32))(*(void *)(v7 + 8), *(void *)(**(void **)(v235 + 40) + 40) + 272, 0);
          uint64_t v241 = "abort";
          goto LABEL_356;
        case 0x121:
          __n128 __p = 0uLL;
          *(void *)&long long v425 = 0;
          uint64_t v235 = *(void *)(v7 + 16);
          *(void *)&long long v437 = 0;
          DWORD2(v437) = 0;
          *(void *)uint64_t v438 = 0;
          *(_DWORD *)&v438[8] = 32;
          *(void *)&v438[12] = 0xFFFFFFFFLL;
          size_t v439 = 0;
          int v440 = 0;
          uint64_t v441 = 0;
          v442 = 0;
          uint64_t v443 = 0;
          uint64_t v444 = v235;
          int v446 = 0;
          uint64_t v447 = 0;
          uint64_t v448 = v450;
          uint64_t v449 = 0x2000000000;
          uint64_t v451 = v453;
          uint64_t v452 = 0x2000000000;
          uint64_t v454 = v456;
          uint64_t v455 = 0x2000000000;
          int v457 = v459;
          uint64_t v458 = 0x400000000;
          char v460 = 0;
          char v461 = 0;
          uint64_t v445 = v420;
          if (v420)
          {
            llvm::MetadataTracking::track((uint64_t)&v445, v420, 2);
            int v9 = v421;
            uint64_t v235 = *(void *)(v7 + 16);
          }
          int v446 = v9;
          unsigned __int8 v242 = *(uint64_t **)(v6 + 32);
          uint64_t v244 = *v242;
          uint64_t v243 = v242[1];
          *(void *)&long long v437 = v244;
          DWORD2(v437) = v243;
          uint64_t v239 = **(void **)(v235 + 56) + 1576;
          uint64_t v240 = (*(unsigned __int8 (**)(void, uint64_t, void))(**(void **)(v7 + 8) + 32))(*(void *)(v7 + 8), *(void *)(**(void **)(v235 + 40) + 40) + 272, 0);
          uint64_t v241 = "__sync_synchronize";
LABEL_356:
          size_t v245 = sub_1CD7EDF94(v235, v241, v240, 0);
          sub_1CD78F3BC((uint64_t)&v437, 0, v239, v245, v246, &__p);
          sub_1CCFB0250(*(void *)(v7 + 8), (uint64_t)&v437, (uint64_t)&v428);
          if (v435 >= HIDWORD(v435)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v434 + v435) = v429;
          LODWORD(v435) = v435 + 1;
          sub_1CD78F470(&v437);
          if (__p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          goto LABEL_162;
        case 0x124:
        case 0x126:
        case 0x127:
        case 0x128:
        case 0x129:
        case 0x12A:
        case 0x12B:
        case 0x12C:
        case 0x12D:
        case 0x12E:
        case 0x12F:
        case 0x130:
        case 0x131:
          char v78 = *(unsigned char *)(v6 + 80);
          unint64_t v79 = *(unsigned __int16 *)(*(void *)(v6 + 96) + 36);
          uint64_t v80 = (v79 >> 8) & 0xF;
          unint64_t v81 = v79 >> 12;
          BOOL v82 = v81 == 5 && v80 == 4;
          if (v82 || (v81 == 4 ? (BOOL v83 = v80 == 5) : (BOOL v83 = 0), v83))
          {
            int v84 = 6;
          }
          else if (byte_1CDAF3AB8[8 * v80 + v81])
          {
            int v84 = v80;
          }
          else
          {
            int v84 = v81;
          }
          unsigned int OUTLINE_ATOMIC = llvm::RTLIB::getOUTLINE_ATOMIC(*(unsigned __int16 *)(v6 + 24), v84, *(unsigned char *)(v6 + 80));
          uint64_t v130 = v6;
          uint64_t v133 = v6 + 32;
          uint64_t v132 = *(void *)(v6 + 32);
          uint64_t v131 = *(uint64_t **)(v133 + 8);
          uint64_t v134 = v131[1];
          uint64_t v388 = *v131;
          *(void *)&long long v437 = v438;
          *((void *)&v437 + 1) = 0x400000000;
          uint64_t v135 = (char *)(v132 + 40 * *(unsigned __int16 *)(v130 + 56));
          if (*(void *)(*(void *)(v7 + 8) + 8 * OUTLINE_ATOMIC + 174048))
          {
            unsigned int SYNC = OUTLINE_ATOMIC;
            sub_1CD3E560C((uint64_t)&v437, (char *)(v132 + 80), v135);
            uint64_t v6 = v130;
            if (DWORD2(v437) >= HIDWORD(v437)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_OWORD *)(v437 + 16 * DWORD2(v437)) = *(_OWORD *)(*(void *)(v130 + 32) + 40);
            unsigned int v137 = ++DWORD2(v437);
          }
          else
          {
            unsigned int SYNC = llvm::RTLIB::getSYNC(v10, v78);
            sub_1CD3E560C((uint64_t)&v437, (char *)(v132 + 40), v135);
            unsigned int v137 = DWORD2(v437);
            uint64_t v6 = v130;
          }
          uint64_t v138 = *(void *)(v7 + 8);
          uint64_t v139 = *(void *)(v7 + 16);
          uint64_t v140 = v437;
          unint64_t v141 = v137;
          v416[0] = 0;
          v416[1] = 0;
          char v417 = 0;
          uint64_t v418 = 0;
          char v419 = 4;
          uint64_t v142 = *(unsigned __int8 **)(v6 + 64);
          __p.n128_u64[0] = (unint64_t)v142;
          if (v142) {
            llvm::MetadataTracking::track((uint64_t)&__p, v142, 2);
          }
          __p.n128_u32[2] = *(_DWORD *)(v6 + 60);
          sub_1CCFF9554(v138, v139, SYNC, v388, v134, v140, v141, (uint64_t)v416, (uint64_t)&v428, (uint64_t)&__p, **(void **)(v6 + 32), *(void *)(*(void *)(v6 + 32) + 8));
          if (!__p.n128_u64[0]) {
            goto LABEL_230;
          }
          int v143 = *(unsigned __int8 *)__p.n128_u64[0];
          if ((v143 - 4) > 0x1E)
          {
            if ((v143 - 3) >= 0xFFFFFFFE) {
              unint64_t v190 = __p.n128_u64[0];
            }
            else {
              unint64_t v190 = 0;
            }
            if ((v143 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v191 = v190 + 8;
LABEL_299:
              uint64_t v426 = &__p;
              sub_1CC5FA668(v191 + 16, &v426);
              goto LABEL_230;
            }
            if (v143 == 3) {
              *(void *)(__p.n128_u64[0] + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(__p.n128_u64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(__p.n128_u64[0] + 12))
          {
            uint64_t v375 = *(void *)(__p.n128_u64[0] + 16);
            if ((v375 & 4) != 0)
            {
              unint64_t v191 = v375 & 0xFFFFFFFFFFFFFFF8;
              if (v191) {
                goto LABEL_299;
              }
            }
          }
LABEL_230:
          if (v435 >= HIDWORD(v435)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v434 + v435) = v428;
          unsigned int v144 = v435 + 1;
          LODWORD(v435) = v144;
          if (v144 >= HIDWORD(v435)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v434 + v144) = v429;
          LODWORD(v435) = v435 + 1;
          if ((unsigned char *)v437 != v438) {
            free((void *)v437);
          }
LABEL_162:
          if (v435) {
LABEL_163:
          }
            sub_1CCF76444(v7, v6, (uint64_t *)v434);
LABEL_164:
          if (!v420) {
            goto LABEL_168;
          }
          int v97 = *v420;
          if ((v97 - 4) > 0x1E)
          {
            if ((v97 - 3) >= 0xFFFFFFFE) {
              int v98 = v420;
            }
            else {
              int v98 = 0;
            }
            if ((v97 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v99 = (unint64_t)(v98 + 8);
LABEL_176:
              *(void *)&long long v437 = &v420;
              sub_1CC5FA668(v99 + 16, &v437);
              goto LABEL_168;
            }
            if (v97 == 3) {
              *((void *)v420 + 1) = 0;
            }
          }
          else if ((v420[1] & 0x7F) == 2 || *((_DWORD *)v420 + 3))
          {
            uint64_t v372 = *((void *)v420 + 2);
            if ((v372 & 4) != 0)
            {
              unint64_t v99 = v372 & 0xFFFFFFFFFFFFFFF8;
              if (v99) {
                goto LABEL_176;
              }
            }
          }
LABEL_168:
          if (v434 != v436) {
            free(v434);
          }
          return;
        default:
          goto LABEL_162;
      }
  }
}

void sub_1CCF82038(uint64_t *a1, uint64_t a2)
{
  v936[16] = *MEMORY[0x1E4F143B8];
  v934 = v936;
  uint64_t v935 = 0x800000000;
  uint64_t v4 = **(void **)(a2 + 40);
  unsigned __int8 v917 = v4;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v6 = v5 - 134;
  if (v6 > 0x3B)
  {
LABEL_5:
    if (v5 - 202 < 2)
    {
LABEL_6:
      uint64_t v4 = *(void *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
      unsigned __int8 v917 = v4;
      if (v5 != 192)
      {
LABEL_7:
        unsigned __int8 v7 = v4;
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    if (v5 != 260) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(v11 + 80);
    uint64_t v10 = *(unsigned int *)(v11 + 88);
    goto LABEL_11;
  }
  if (((1 << (v5 + 122)) & 0x33) == 0)
  {
    if (((1 << (v5 + 122)) & 0x800000000006000) != 0) {
      goto LABEL_6;
    }
    if (v6 == 58) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = *(unsigned int *)(v8 + 48);
LABEL_11:
  unsigned __int8 v7 = *(void *)(*(void *)(v9 + 40) + 16 * v10);
  unsigned __int8 v917 = v7;
LABEL_12:
  unsigned __int8 v916 = sub_1CD3E5538(a1[1], v5, v7);
  int v13 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v914 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v914, v13, 2);
  }
  int v14 = *(_DWORD *)(a2 + 60);
  int v915 = v14;
  uint64_t v15 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0xAB:
    case 0xAC:
    case 0xAD:
      if (v917 - 15 >= 0x9C)
      {
        if ((unsigned __int16)(v15 - 59) > 3u) {
          uint64_t v17 = 200;
        }
        else {
          uint64_t v17 = dword_1CFB2D620[(__int16)(v15 - 59)];
        }
        uint64_t v16 = 201;
      }
      else
      {
        uint64_t v16 = 216;
        uint64_t v17 = 216;
      }
      uint64_t v25 = (llvm::APFloatBase *)a1[2];
      uint64_t v26 = *(uint64_t **)(a2 + 32);
      uint64_t v27 = *v26;
      uint64_t v28 = (void *)v26[1];
      uint64_t v29 = *((void *)v25 + 104);
      if (v29) {
        __int16 v30 = *(_WORD *)(v29 + 8);
      }
      else {
        __int16 v30 = 0;
      }
      unsigned int v31 = sub_1CD7F3564(v25, (const char *)v17, (uint64_t)&v914, (llvm *)v916, 0, v27, v28, v30);
      uint64_t v33 = v32;
      int v34 = (llvm::APFloatBase *)a1[2];
      uint64_t v35 = *(void *)(a2 + 32);
      uint64_t v36 = *(void *)(v35 + 40);
      unsigned int v37 = *(void **)(v35 + 48);
      uint64_t v38 = *((void *)v34 + 104);
      if (v38) {
        __int16 v39 = *(_WORD *)(v38 + 8);
      }
      else {
        __int16 v39 = 0;
      }
      unsigned int v40 = sub_1CD7F3564(v34, (const char *)v17, (uint64_t)&v914, (llvm *)v916, 0, v36, v37, v39);
      uint64_t v43 = a1[2];
      uint64_t v44 = *(void *)(v43 + 832);
      if (v44) {
        LOWORD(v44) = *(_WORD *)(v44 + 8);
      }
      int v45 = sub_1CCFDED5C(v43, *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v31, v33, v42, (uint64_t)v40, v41, v44);
      uint64_t v47 = v46;
      unsigned __int8 v48 = (llvm::APFloatBase *)a1[2];
      int v49 = (llvm *)v917;
      uint64_t v50 = *((void *)v48 + 104);
      if (v50) {
        __int16 v51 = *(_WORD *)(v50 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      uint64_t v52 = v16;
      goto LABEL_37;
    case 0x3F:
    case 0x40:
      if (v15 == 64) {
        uint64_t v372 = 199;
      }
      else {
        uint64_t v372 = 198;
      }
      uint64_t v373 = (llvm::APFloatBase *)a1[2];
      uint64_t v374 = *(uint64_t **)(a2 + 32);
      uint64_t v375 = *v374;
      uint64_t v376 = (void *)v374[1];
      uint64_t v377 = *((void *)v373 + 104);
      if (v377) {
        __int16 v378 = *(_WORD *)(v377 + 8);
      }
      else {
        __int16 v378 = 0;
      }
      uint64_t v491 = sub_1CD7F3564(v373, (const char *)v372, (uint64_t)&v914, (llvm *)v916, 0, v375, v376, v378);
      __int16 v492 = 0;
      uint64_t v494 = v493;
      uint64_t v495 = (llvm::APFloatBase *)a1[2];
      uint64_t v496 = *(void *)(a2 + 32);
      uint64_t v497 = *(void *)(v496 + 40);
      uint64_t v498 = *(void **)(v496 + 48);
      uint64_t v499 = *((void *)v495 + 104);
      if (v499) {
        __int16 v492 = *(_WORD *)(v499 + 8);
      }
      unsigned int v500 = sub_1CD7F3564(v495, (const char *)v372, (uint64_t)&v914, (llvm *)v916, 0, v497, v498, v492);
      __int16 v503 = 0;
      uint64_t v504 = a1[2];
      uint64_t v505 = *(void *)(v504 + 832);
      if (v505) {
        __int16 v503 = *(_WORD *)(v505 + 8);
      }
      int v506 = sub_1CCFDED5C(v504, 58, (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v491, v494, v502, (uint64_t)v500, v501, v503);
      uint64_t v508 = v507;
      uint64_t v509 = *(void *)(**(void **)(a1[2] + 40) + 40) + 272;
      unsigned __int8 v510 = v917;
      if ((v917 - 15) <= 0x9Bu) {
        unsigned __int8 v510 = sub_1CB8C2FBC(&v917);
      }
      LOBYTE(v919[0]) = v510;
      unsigned int v511 = sub_1CB87E200((unsigned __int8 *)v919);
      uint64_t v512 = (llvm *)v916;
      uint64_t v513 = v511;
      uint64_t v514 = a1[2];
      unsigned __int8 v515 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1[1] + 56))(a1[1], v509, v916, 0);
      uint64_t v516 = sub_1CD7EBF14(v514, v513, (const llvm::APInt *)&v914, (llvm *)v515, 0, 0, 0);
      uint64_t v519 = *(void *)(v514 + 832);
      if (v519) {
        LOWORD(v519) = *(_WORD *)(v519 + 8);
      }
      uint64_t v520 = sub_1CCFDED5C(v514, 177, (const llvm::APInt *)&v914, v512, 0, (uint64_t)v506, v508, v518, (uint64_t)v516, v517, v519);
      uint64_t v522 = v521;
      unint64_t v523 = (llvm::APFloatBase *)a1[2];
      uint64_t v524 = *((void *)v523 + 104);
      if (v524) {
        __int16 v525 = *(_WORD *)(v524 + 8);
      }
      else {
        __int16 v525 = 0;
      }
      v620 = sub_1CD7F3564(v523, (const char *)0xC9, (uint64_t)&v914, (llvm *)v917, 0, (uint64_t)v506, (void *)v508, v525);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v621 = (uint64_t **)&v934[2 * v935];
      uint64_t *v621 = v620;
      v621[1] = v619;
      LODWORD(v935) = v935 + 1;
      unsigned __int8 v48 = (llvm::APFloatBase *)a1[2];
      int v49 = (llvm *)v917;
      uint64_t v622 = *((void *)v48 + 104);
      if (v622) {
        __int16 v51 = *(_WORD *)(v622 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      uint64_t v52 = 201;
      uint64_t v53 = 0;
      int v45 = v520;
      uint64_t v47 = v522;
      goto LABEL_119;
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x88:
    case 0x89:
    case 0x8C:
    case 0x8E:
    case 0x90:
    case 0x91:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xBB:
    case 0xBF:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xE1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x105:
    case 0x106:
    case 0x107:
    case 0x108:
    case 0x109:
    case 0x10A:
    case 0x10B:
    case 0x10C:
    case 0x10D:
    case 0x10E:
      goto LABEL_176;
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0xE5:
    case 0xF6:
    case 0xF7:
      uint64_t v208 = (llvm::APFloatBase *)a1[2];
      uint64_t v209 = *(uint64_t **)(a2 + 32);
      uint64_t v210 = *v209;
      uint64_t v211 = (void *)v209[1];
      uint64_t v212 = *((void *)v208 + 104);
      if (v212) {
        __int16 v213 = *(_WORD *)(v212 + 8);
      }
      else {
        __int16 v213 = 0;
      }
      uint64_t v296 = sub_1CD7F3564(v208, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v210, v211, v213);
      __int16 v297 = 0;
      uint64_t v299 = v298;
      uint64_t v300 = (llvm::APFloatBase *)a1[2];
      uint64_t v301 = *(void *)(a2 + 32);
      uint64_t v302 = *(void *)(v301 + 40);
      uint64_t v303 = *(void **)(v301 + 48);
      uint64_t v304 = *((void *)v300 + 104);
      if (v304) {
        __int16 v297 = *(_WORD *)(v304 + 8);
      }
      int v305 = sub_1CD7F3564(v300, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v302, v303, v297);
      uint64_t v179 = sub_1CCFDED5C(a1[2], *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v296, v299, v307, (uint64_t)v305, v306, *(_WORD *)(a2 + 72));
      goto LABEL_255;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6C:
    case 0x77:
    case 0x78:
      uint64_t v181 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v182 = *(void *)(a2 + 32);
      int v183 = *(_DWORD *)(v182 + 8);
      uint64_t v928 = *(void ***)v182;
      LODWORD(v929) = v183;
      uint64_t v930 = *(uint64_t **)(v182 + 40);
      LODWORD(v931) = *(_DWORD *)(v182 + 48);
      unsigned int v184 = sub_1CD7EB5F0(v181, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      int v186 = v185;
      uint64_t v187 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v188 = *(void *)(a2 + 32);
      int v189 = *(_DWORD *)(v188 + 8);
      uint64_t v928 = *(void ***)v188;
      LODWORD(v929) = v189;
      uint64_t v930 = *(uint64_t **)(v188 + 80);
      LODWORD(v931) = *(_DWORD *)(v188 + 88);
      unint64_t v191 = sub_1CD7EB5F0(v187, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      int v193 = v192;
      __int16 v194 = 0;
      uint64_t v195 = a1[2];
      uint64_t v196 = *(void *)(v195 + 832);
      if (v196) {
        __int16 v194 = *(_WORD *)(v196 + 8);
      }
      BOOL v197 = sub_1CCFDED5C(v195, 2, (const llvm::APInt *)&v914, (llvm *)1, 0, (uint64_t)v184, 1, v190, (uint64_t)v191, 1, v194);
      uint64_t v198 = (void *)a1[2];
      unsigned int v199 = (const char *)*(unsigned __int16 *)(a2 + 24);
      LOBYTE(v928) = v916;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v197;
      LODWORD(v919[1]) = v200;
      uint64_t v920 = v184;
      LODWORD(v921) = v186;
      uint64_t v922 = v191;
      LODWORD(v923) = v193;
      uint64_t v131 = sub_1CD7EB5F0(v198, v199, (const llvm::APInt *)&v914, (uint64_t *)&v928, 2, (uint64_t *)v919, 3);
      uint64_t v133 = (void *)a1[2];
      LOBYTE(v928) = v917;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v131;
      v919[1] = (void *)1;
      goto LABEL_158;
    case 0x6A:
      uint64_t v575 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v576 = *(void *)(a2 + 32);
      int v577 = *(_DWORD *)(v576 + 8);
      uint64_t v928 = *(void ***)v576;
      LODWORD(v929) = v577;
      uint64_t v930 = *(uint64_t **)(v576 + 40);
      LODWORD(v931) = *(_DWORD *)(v576 + 48);
      v578 = sub_1CD7EB5F0(v575, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      int v580 = v579;
      unsigned int v581 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v582 = *(void *)(a2 + 32);
      int v583 = *(_DWORD *)(v582 + 8);
      uint64_t v928 = *(void ***)v582;
      LODWORD(v929) = v583;
      uint64_t v930 = *(uint64_t **)(v582 + 80);
      LODWORD(v931) = *(_DWORD *)(v582 + 88);
      uint64_t v584 = sub_1CD7EB5F0(v581, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      int v586 = v585;
      uint64_t v587 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v588 = *(void *)(a2 + 32);
      int v589 = *(_DWORD *)(v588 + 8);
      uint64_t v928 = *(void ***)v588;
      LODWORD(v929) = v589;
      uint64_t v930 = *(uint64_t **)(v588 + 120);
      LODWORD(v931) = *(_DWORD *)(v588 + 128);
      uint64_t v591 = sub_1CD7EB5F0(v587, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      int v593 = v592;
      __int16 v594 = 0;
      v595 = (void *)a1[2];
      uint64_t v596 = v595[104];
      if (v596) {
        __int16 v594 = *(_WORD *)(v596 + 8);
      }
      uint64_t v597 = sub_1CD7F5D38(v595, (const char *)2, (const llvm::APInt *)&v914, (llvm *)1, 0, (uint64_t)v578, 1, v590, (uint64_t)v584, 1, (uint64_t)v591, 1, 0, v594);
      unint64_t v598 = (void *)a1[2];
      v599 = (const char *)*(unsigned __int16 *)(a2 + 24);
      LOBYTE(v928) = v916;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v597;
      LODWORD(v919[1]) = v600;
      uint64_t v920 = v578;
      LODWORD(v921) = v580;
      uint64_t v922 = v584;
      LODWORD(v923) = v586;
      uint64_t v924 = v591;
      int v925 = v593;
      uint64_t v601 = sub_1CD7EB5F0(v598, v599, (const llvm::APInt *)&v914, (uint64_t *)&v928, 2, (uint64_t *)v919, 4);
      v602 = (void *)a1[2];
      LOBYTE(v928) = v917;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v601;
      v919[1] = (void *)1;
      uint64_t v920 = v601;
      LODWORD(v921) = v603;
      uint64_t v922 = sub_1CD7EB364((uint64_t)v602, 0, (const llvm::APInt *)&v914, 0);
      uint64_t v923 = v604;
      uint64_t v202 = sub_1CD7EB5F0(v602, (const char *)0x88, (const llvm::APInt *)&v914, (uint64_t *)&v928, 2, (uint64_t *)v919, 3);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v606 = (uint64_t **)&v934[2 * v935];
      const char *v606 = v202;
      v606[1] = (uint64_t *)v605;
      unsigned int v206 = v935 + 1;
      LODWORD(v935) = v206;
      if (v206 >= HIDWORD(v935)) {
        goto LABEL_393;
      }
      goto LABEL_161;
    case 0x6B:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
      uint64_t v119 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v120 = *(void *)(a2 + 32);
      int v121 = *(_DWORD *)(v120 + 8);
      uint64_t v928 = *(void ***)v120;
      LODWORD(v929) = v121;
      uint64_t v930 = *(uint64_t **)(v120 + 40);
      LODWORD(v931) = *(_DWORD *)(v120 + 48);
      uint64_t v122 = sub_1CD7EB5F0(v119, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      uint64_t v123 = (void *)a1[2];
      __int16 v124 = (const char *)*(unsigned __int16 *)(a2 + 24);
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v928 = (void **)v122;
      uint64_t v929 = 1;
      uint64_t v930 = v122;
      LODWORD(v931) = v125;
      int v126 = (uint64_t *)v919;
      uint64_t v127 = (uint64_t *)&v928;
      unint64_t v128 = v123;
      uint64_t v129 = v124;
      uint64_t v130 = 2;
      goto LABEL_104;
    case 0x6D:
      unint64_t v607 = (void *)a1[2];
      LOBYTE(v919[0]) = v916;
      v919[1] = 0;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v608 = *(void *)(a2 + 32);
      int v609 = *(_DWORD *)(v608 + 8);
      uint64_t v928 = *(void ***)v608;
      LODWORD(v929) = v609;
      uint64_t v930 = *(uint64_t **)(v608 + 40);
      LODWORD(v931) = *(_DWORD *)(v608 + 48);
      uint64_t v610 = sub_1CD7EB5F0(v607, (const char *)0x89, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      uint64_t v611 = (void *)a1[2];
      uint64_t v612 = (const char *)*(unsigned __int16 *)(a2 + 24);
      LOBYTE(v928) = v916;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v610;
      v919[1] = (void *)1;
      uint64_t v920 = v610;
      LODWORD(v921) = v613;
      uint64_t v614 = *(void *)(a2 + 32);
      uint64_t v922 = *(uint64_t **)(v614 + 80);
      LODWORD(v923) = *(_DWORD *)(v614 + 88);
      int v126 = (uint64_t *)&v928;
      uint64_t v127 = (uint64_t *)v919;
      unint64_t v128 = v611;
      uint64_t v129 = v612;
      uint64_t v130 = 3;
LABEL_104:
      uint64_t v131 = sub_1CD7EB5F0(v128, v129, (const llvm::APInt *)&v914, v126, 2, v127, v130);
      uint64_t v133 = (void *)a1[2];
      LOBYTE(v928) = v917;
      uint64_t v929 = 0;
      LOBYTE(v930) = 1;
      uint64_t v931 = 0;
      v919[0] = v131;
      v919[1] = (void *)1;
LABEL_158:
      uint64_t v920 = v131;
      LODWORD(v921) = v132;
      uint64_t v922 = sub_1CD7EB364((uint64_t)v133, 0, (const llvm::APInt *)&v914, 0);
      uint64_t v923 = v201;
      uint64_t v202 = sub_1CD7EB5F0(v133, (const char *)0x88, (const llvm::APInt *)&v914, (uint64_t *)&v928, 2, (uint64_t *)v919, 3);
      unint64_t v204 = (uint64_t *)v203;
      goto LABEL_159;
    case 0x84:
    case 0x85:
    case 0xD0:
    case 0xD1:
      BOOL v259 = sub_1CD407020(a2);
      BOOL v260 = v259;
      int v261 = *(unsigned __int16 *)(a2 + 24);
      uint64_t v262 = *(void *)(a2 + 40);
      v264 = *(llvm **)v262;
      uint64_t v263 = *(void *)(v262 + 8);
      long long v265 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v259);
      uint64_t v266 = *v265;
      uint64_t v267 = (void *)v265[1];
      if (v259) {
        uint64_t v268 = 132;
      }
      else {
        uint64_t v268 = 208;
      }
      uint64_t v269 = a1[1];
      if (v259) {
        uint64_t v270 = 133;
      }
      else {
        uint64_t v270 = 209;
      }
      LOBYTE(v271) = (_BYTE)v264;
      while (1)
      {
        char v272 = v271 + 1;
        uint64_t v271 = (v271 + 1);
        if (v272)
        {
          if ((v272 == 1 || *(void *)(v269 + 8 * v271 + 96))
            && (*(unsigned char *)(v269 + 390 * v271 + v268 + 3862) & 0xFB) == 0)
          {
            break;
          }
        }
        if (v261 != 132
          && v261 != 208
          && v272
          && (v272 == 1 || *(void *)(v269 + 8 * v271 + 96))
          && (*(unsigned char *)(v269 + 390 * v271 + v270 + 3862) & 0xFB) == 0)
        {
          uint64_t v268 = v270;
          break;
        }
      }
      long long v273 = (llvm::APFloatBase *)a1[2];
      if (v260)
      {
        uint64_t v836 = sub_1CD7F95FC((uint64_t)v273, v271, 0, 1, 0);
        BOOL v391 = sub_1CD7FFB18((void *)a1[2], (const char *)v268, (const llvm::APInt *)&v914, v836, v837, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), v838, v266, (int)v267);
      }
      else
      {
        uint64_t v274 = *((void *)v273 + 104);
        if (v274) {
          __int16 v275 = *(_WORD *)(v274 + 8);
        }
        else {
          __int16 v275 = 0;
        }
        BOOL v391 = sub_1CD7F3564(v273, (const char *)v268, (uint64_t)&v914, (llvm *)v271, 0, v266, v267, v275);
      }
      uint64_t v393 = (uint64_t)v391;
      uint64_t v394 = (llvm::APFloatBase *)a1[2];
      uint64_t v395 = *((void *)v394 + 104);
      if (v395) {
        __int16 v396 = *(_WORD *)(v395 + 8);
      }
      else {
        __int16 v396 = 0;
      }
      uint64_t v398 = sub_1CD7F3564(v394, (const char *)0xC9, (uint64_t)&v914, v264, v263, v393, (void *)v392, v396);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v399 = (uint64_t **)&v934[2 * v935];
      *char v399 = v398;
      v399[1] = v397;
      unsigned int v151 = v935 + 1;
      LODWORD(v935) = v935 + 1;
      if (!v260) {
        goto LABEL_124;
      }
      if (v151 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v207 = &v934[2 * v151];
      *int v207 = v393;
      goto LABEL_162;
    case 0x86:
    case 0x87:
    case 0xCA:
    case 0xCB:
      BOOL v276 = sub_1CD407020(a2);
      int v277 = *(unsigned __int16 *)(a2 + 24);
      BOOL v279 = v277 == 202 || v277 == 134;
      uint64_t v280 = *(void *)(a2 + 32);
      uint64_t v281 = *(void *)(a2 + 40);
      uint64_t v283 = *(llvm **)v281;
      uint64_t v282 = *(void **)(v281 + 8);
      int v284 = (uint64_t *)(v280 + 40 * v276);
      uint64_t v285 = *v284;
      uint64_t v286 = (void *)v284[1];
      if (v276) {
        uint64_t v287 = 135;
      }
      else {
        uint64_t v287 = 203;
      }
      if (v276) {
        uint64_t v288 = 134;
      }
      else {
        uint64_t v288 = 202;
      }
      uint64_t v289 = *(llvm **)(*(void *)(v285 + 40) + 16 * v286);
      uint64_t v290 = a1[1];
      while (1)
      {
        char v291 = (_BYTE)v289 + 1;
        uint64_t v289 = (llvm *)((_BYTE)v289 + 1);
        if (v291)
        {
          if ((v291 == 1 || *(void *)(v290 + 8 * (void)v289 + 96))
            && (*(unsigned char *)(v290 + 390 * v289 + v288 + 3862) & 0xFB) == 0)
          {
            break;
          }
        }
        if (v277 != 134
          && v277 != 202
          && v291
          && (v291 == 1 || *(void *)(v290 + 8 * (void)v289 + 96))
          && (*(unsigned char *)(v290 + 390 * v289 + v287 + 3862) & 0xFB) == 0)
        {
          uint64_t v288 = v287;
          break;
        }
      }
      uint64_t v292 = (llvm::APFloatBase *)a1[2];
      if (!v276)
      {
        if (v279) {
          uint64_t v293 = 198;
        }
        else {
          uint64_t v293 = 199;
        }
        uint64_t v294 = *((void *)v292 + 104);
        if (v294) {
          __int16 v295 = *(_WORD *)(v294 + 8);
        }
        else {
          __int16 v295 = 0;
        }
        int v45 = sub_1CD7F3564((llvm::APFloatBase *)a1[2], (const char *)v293, (uint64_t)&v914, v289, 0, v285, v286, v295);
        uint64_t v47 = v400;
        uint64_t v401 = *((void *)v292 + 104);
        if (v401) {
          __int16 v51 = *(_WORD *)(v401 + 8);
        }
        else {
          __int16 v51 = 0;
        }
        unsigned __int8 v48 = v292;
        uint64_t v52 = v288;
        int v49 = v283;
        uint64_t v53 = (uint64_t)v282;
LABEL_119:
        unint64_t v146 = sub_1CD7F3564(v48, (const char *)v52, (uint64_t)&v914, v49, v53, (uint64_t)v45, (void *)v47, v51);
LABEL_120:
        unint64_t v148 = v146;
        uint64_t v149 = v147;
        goto LABEL_121;
      }
      __int16 v839 = 0;
      v919[0] = v283;
      v919[1] = v282;
      LOBYTE(v920) = 1;
      uint64_t v921 = 0;
      uint64_t v840 = *(llvm **)v280;
      LODWORD(v929) = *(_DWORD *)(v280 + 8);
      uint64_t v928 = (void **)v840;
      if (v279) {
        uint64_t v841 = 198;
      }
      else {
        uint64_t v841 = 199;
      }
      uint64_t v842 = *((void *)v292 + 104);
      if (v842) {
        __int16 v839 = *(_WORD *)(v842 + 8);
      }
      uint64_t v930 = sub_1CD7F3564(v292, (const char *)v841, (uint64_t)&v914, v289, 0, v285, v286, v839);
      uint64_t v931 = v843;
      uint64_t v202 = sub_1CD7EB5F0(v292, (const char *)v288, (const llvm::APInt *)&v914, (uint64_t *)v919, 2, (uint64_t *)&v928, 2);
      unint64_t v204 = v844;
LABEL_159:
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v205 = (uint64_t **)&v934[2 * v935];
      *uint64_t v205 = v202;
      v205[1] = v204;
      unsigned int v206 = v935 + 1;
      LODWORD(v935) = v206;
      if (v206 >= HIDWORD(v935)) {
LABEL_393:
      }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_161:
      int v207 = &v934[2 * v206];
      *int v207 = (uint64_t)v202;
LABEL_162:
      v207[1] = 1;
      goto LABEL_123;
    case 0x8A:
    case 0x8B:
    case 0xC1:
      if (v916 - 120 < 0x20 || v916 - 2 < 6 || v916 - 15 <= 0x3B)
      {
        if ((*(_DWORD *)(*(void *)(*(void *)(a2 + 32) + 80) + 76) - 18) < 4) {
          uint64_t v358 = 198;
        }
        else {
          uint64_t v358 = 199;
        }
      }
      else
      {
        uint64_t v358 = 215;
      }
      if (!sub_1CD407020(a2))
      {
        uint64_t v385 = (llvm::APFloatBase *)a1[2];
        uint64_t v386 = *(uint64_t **)(a2 + 32);
        uint64_t v387 = *v386;
        uint64_t v388 = (void *)v386[1];
        uint64_t v389 = *((void *)v385 + 104);
        if (v389) {
          __int16 v390 = *(_WORD *)(v389 + 8);
        }
        else {
          __int16 v390 = 0;
        }
        uint64_t v402 = sub_1CD7F3564(v385, (const char *)v358, (uint64_t)&v914, (llvm *)v916, 0, v387, v388, v390);
        uint64_t v404 = v403;
        char v405 = (llvm::APFloatBase *)a1[2];
        uint64_t v406 = *(void *)(a2 + 32);
        uint64_t v407 = *(void *)(v406 + 40);
        uint64_t v408 = *(void **)(v406 + 48);
        uint64_t v409 = *((void *)v405 + 104);
        if (v409) {
          __int16 v410 = *(_WORD *)(v409 + 8);
        }
        else {
          __int16 v410 = 0;
        }
        char v411 = sub_1CD7F3564(v405, (const char *)v358, (uint64_t)&v914, (llvm *)v916, 0, v407, v408, v410);
        unint64_t v146 = sub_1CD7F5D38((void *)a1[2], (const char *)0xC1, (const llvm::APInt *)&v914, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)v402, v404, v413, (uint64_t)v411, v412, *(void *)(*(void *)(a2 + 32) + 80), *(void *)(*(void *)(a2 + 32) + 88), HIDWORD(*(void *)(*(void *)(a2 + 32) + 88)), *(_WORD *)(a2 + 72));
        goto LABEL_120;
      }
      uint64_t v857 = *(uint64_t **)(a2 + 32);
      uint64_t v858 = *v857;
      uint64_t v859 = v857[1];
      sub_1CD7EB400(a1[2], v857[5], v857[6], *v857, v859, (const llvm::APInt *)&v914, v916, 0, (uint64_t)v919);
      uint64_t v860 = (uint64_t *)v919[0];
      int v861 = (int)v919[1];
      sub_1CD7EB400(a1[2], *(void *)(*(void *)(a2 + 32) + 80), *(void *)(*(void *)(a2 + 32) + 88), v858, v859, (const llvm::APInt *)&v914, v916, 0, (uint64_t)v919);
      uint64_t v862 = (uint64_t *)v919[0];
      int v863 = (int)v919[1];
      uint64_t v928 = (void **)&v930;
      uint64_t v930 = v860;
      uint64_t v931 = 1;
      v932 = v919[0];
      uint64_t v933 = 1;
      uint64_t v929 = 0x200000002;
      uint64_t v864 = sub_1CD8049E8((void *)a1[2], (const llvm::APInt *)&v914, (uint64_t)&v928);
      LODWORD(v859) = v865;
      uint64_t v866 = sub_1CD7F95FC(a1[2], **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), 1, 0);
      uint64_t v868 = v867;
      uint64_t v869 = (void *)a1[2];
      uint64_t v870 = (const char *)*(unsigned __int16 *)(a2 + 24);
      v919[0] = v864;
      LODWORD(v919[1]) = v859;
      uint64_t v920 = v860;
      LODWORD(v921) = v861;
      uint64_t v922 = v862;
      LODWORD(v923) = v863;
      uint64_t v871 = *(void *)(a2 + 32);
      uint64_t v924 = *(uint64_t **)(v871 + 120);
      int v925 = *(_DWORD *)(v871 + 128);
      uint64_t v873 = sub_1CD7FF854(v869, v870, (const llvm::APInt *)&v914, v866, v868, (uint64_t *)v919, 4, *(_WORD *)(a2 + 72));
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v874 = (uint64_t **)&v934[2 * v935];
      *uint64_t v874 = v873;
      v874[1] = v872;
      uint64_t v875 = (v935 + 1);
      LODWORD(v935) = v875;
      uint64_t v876 = v934[2 * v875 - 2];
      if (v875 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v877 = &v934[2 * v875];
      *uint64_t v877 = v876;
      v877[1] = 1;
      LODWORD(v935) = v935 + 1;
      uint64_t v223 = (llvm *)v928;
      if (v928 == (void **)&v930) {
        goto LABEL_176;
      }
      goto LABEL_175;
    case 0x8D:
      int v431 = (llvm::APFloatBase *)a1[2];
      uint64_t v432 = *(uint64_t **)(a2 + 32);
      uint64_t v433 = *v432;
      uint64_t v434 = (void *)v432[1];
      uint64_t v435 = *((void *)v431 + 104);
      if (v435) {
        __int16 v436 = *(_WORD *)(v435 + 8);
      }
      else {
        __int16 v436 = 0;
      }
      v687 = sub_1CD7F3564(v431, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v433, v434, v436);
      __int16 v688 = 0;
      uint64_t v690 = v689;
      uint64_t v691 = (llvm::APFloatBase *)a1[2];
      uint64_t v692 = *(void *)(a2 + 32);
      uint64_t v693 = *(void *)(v692 + 40);
      uint64_t v694 = *(void **)(v692 + 48);
      uint64_t v695 = *((void *)v691 + 104);
      if (v695) {
        __int16 v688 = *(_WORD *)(v695 + 8);
      }
      v696 = sub_1CD7F3564(v691, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v693, v694, v688);
      __int16 v697 = 0;
      uint64_t v699 = v698;
      uint64_t v700 = (llvm::APFloatBase *)a1[2];
      uint64_t v701 = *(void *)(a2 + 32);
      uint64_t v702 = *(void *)(v701 + 80);
      uint64_t v703 = *(void **)(v701 + 88);
      uint64_t v704 = *((void *)v700 + 104);
      if (v704) {
        __int16 v697 = *(_WORD *)(v704 + 8);
      }
      uint64_t v705 = sub_1CD7F3564(v700, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v702, v703, v697);
      __int16 v708 = 0;
      unint64_t v310 = (void *)a1[2];
      unint64_t v311 = (llvm *)v917;
      uint64_t v709 = v310[104];
      if (v709) {
        __int16 v708 = *(_WORD *)(v709 + 8);
      }
      uint64_t v308 = sub_1CD7F5D38(v310, (const char *)*(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v687, v690, v707, (uint64_t)v696, v699, (uint64_t)v705, v706, 0, v708);
      uint64_t v309 = v710;
      uint64_t v312 = a1[2];
      goto LABEL_256;
    case 0x8F:
    case 0xE4:
      uint64_t v379 = (llvm::APFloatBase *)a1[2];
      uint64_t v380 = *(uint64_t **)(a2 + 32);
      uint64_t v381 = *v380;
      __int16 v382 = (void *)v380[1];
      uint64_t v383 = *((void *)v379 + 104);
      if (v383) {
        __int16 v384 = *(_WORD *)(v383 + 8);
      }
      else {
        __int16 v384 = 0;
      }
      uint64_t v566 = sub_1CD7F3564(v379, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v381, v382, v384);
      __int16 v568 = 0;
      uint64_t v569 = *(void *)(a2 + 32);
      uint64_t v570 = *(void *)(v569 + 40);
      uint64_t v571 = *(unsigned int *)(v569 + 48);
      uint64_t v572 = a1[2];
      uint64_t v573 = *(void *)(v572 + 832);
      if (v573) {
        __int16 v568 = *(_WORD *)(v573 + 8);
      }
      uint64_t v308 = sub_1CCFDED5C(v572, *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v566, v565, v567, v570, v571, v568);
      uint64_t v309 = v574;
      BOOL v313 = *(unsigned __int16 *)(a2 + 24) == 143;
      unint64_t v310 = (void *)a1[2];
      unint64_t v311 = (llvm *)v917;
      uint64_t v312 = (uint64_t)v310;
      goto LABEL_257;
    case 0x92:
      unsigned __int8 v76 = sub_1CB8C2FBC(&v917);
      char v77 = sub_1CB8C2FBC(&v916);
      unsigned __int8 v78 = sub_1CCF877F8(v76, v77);
      v919[0] = &v920;
      v919[1] = (void *)0x800000000;
      if (!*(_WORD *)(a2 + 56)) {
        goto LABEL_79;
      }
      uint64_t v79 = 0;
      uint64_t v80 = (llvm *)v78;
      uint64_t v81 = 40 * *(unsigned __int16 *)(a2 + 56);
      do
      {
        BOOL v82 = (uint64_t *)(*(void *)(a2 + 32) + v79);
        uint64_t v83 = *v82;
        int v84 = (void *)v82[1];
        uint64_t v85 = (llvm::APFloatBase *)a1[2];
        uint64_t v86 = *(llvm **)(*v82 + 64);
        uint64_t v928 = (void **)v86;
        if (v86) {
          llvm::MetadataTracking::track((uint64_t)&v928, (unsigned __int8 *)v86, 2);
        }
        LODWORD(v929) = *(_DWORD *)(v83 + 60);
        uint64_t v87 = *((void *)v85 + 104);
        if (v87) {
          __int16 v88 = *(_WORD *)(v87 + 8);
        }
        else {
          __int16 v88 = 0;
        }
        int v90 = sub_1CD7F3564(v85, (const char *)0xD8, (uint64_t)&v928, v80, 0, v83, v84, v88);
        if (LODWORD(v919[1]) >= (unint64_t)HIDWORD(v919[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v91 = (uint64_t **)((char *)v919[0] + 16 * LODWORD(v919[1]));
        uint64_t *v91 = v90;
        v91[1] = v89;
        ++LODWORD(v919[1]);
        if (v928)
        {
          int v92 = *(unsigned __int8 *)v928;
          if ((v92 - 4) > 0x1E)
          {
            if ((v92 - 3) >= 0xFFFFFFFE) {
              int v93 = (llvm *)v928;
            }
            else {
              int v93 = 0;
            }
            if ((v92 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v94 = (unint64_t)v93 + 8;
LABEL_72:
              v918[0] = &v928;
              sub_1CC5FA668(v94 + 16, v918);
              goto LABEL_65;
            }
            if (v92 == 3) {
              v928[1] = 0;
            }
          }
          else if ((*((unsigned char *)v928 + 1) & 0x7F) == 2 || *((_DWORD *)v928 + 3))
          {
            unint64_t v95 = (unint64_t)v928[2];
            if ((v95 & 4) != 0)
            {
              unint64_t v94 = v95 & 0xFFFFFFFFFFFFFFF8;
              if (v94) {
                goto LABEL_72;
              }
            }
          }
        }
LABEL_65:
        v79 += 40;
      }
      while (v81 != v79);
LABEL_79:
      uint64_t v96 = *(llvm **)(a2 + 64);
      uint64_t v928 = (void **)v96;
      if (v96) {
        llvm::MetadataTracking::track((uint64_t)&v928, (unsigned __int8 *)v96, 2);
      }
      LODWORD(v929) = *(_DWORD *)(a2 + 60);
      int v97 = (void *)a1[2];
      uint64_t v98 = v97[104];
      if (v98) {
        uint64_t v99 = *(unsigned __int16 *)(v98 + 8);
      }
      else {
        uint64_t v99 = 0;
      }
      uint64_t v215 = sub_1CD7FF4E8(v97, (const char *)0x95, (const llvm::APInt *)&v928, (llvm *)v916, 0, (uint64_t *)v919[0], LODWORD(v919[1]), v99);
      uint64_t v216 = (llvm::APFloatBase *)a1[2];
      uint64_t v217 = *((void *)v216 + 104);
      if (v217) {
        __int16 v218 = *(_WORD *)(v217 + 8);
      }
      else {
        __int16 v218 = 0;
      }
      int v220 = sub_1CD7F3564(v216, (const char *)0xD8, (uint64_t)&v928, (llvm *)v917, 0, (uint64_t)v215, v214, v218);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __int16 v221 = (uint64_t **)&v934[2 * v935];
      *__int16 v221 = v220;
      v221[1] = v219;
      LODWORD(v935) = v935 + 1;
      if (v928)
      {
        int v222 = *(unsigned __int8 *)v928;
        if ((v222 - 4) > 0x1E)
        {
          if ((v222 - 3) >= 0xFFFFFFFE) {
            uint64_t v359 = (llvm *)v928;
          }
          else {
            uint64_t v359 = 0;
          }
          if ((v222 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v360 = (unint64_t)v359 + 8;
            goto LABEL_287;
          }
          if (v222 == 3) {
            v928[1] = 0;
          }
        }
        else if ((*((unsigned char *)v928 + 1) & 0x7F) == 2 || *((_DWORD *)v928 + 3))
        {
          unint64_t v887 = (unint64_t)v928[2];
          if ((v887 & 4) != 0)
          {
            unint64_t v360 = v887 & 0xFFFFFFFFFFFFFFF8;
            if (v360)
            {
LABEL_287:
              v918[0] = &v928;
              sub_1CC5FA668(v360 + 16, v918);
            }
          }
        }
      }
      uint64_t v223 = (llvm *)v919[0];
      if (v919[0] != &v920) {
LABEL_175:
      }
        free(v223);
LABEL_176:
      unsigned int v151 = v935;
LABEL_124:
      if (v151) {
        sub_1CCF76444((uint64_t)a1, a2, v934);
      }
      if (v914)
      {
        int v152 = *v914;
        if ((v152 - 4) > 0x1E)
        {
          if ((v152 - 3) >= 0xFFFFFFFE) {
            uint64_t v153 = v914;
          }
          else {
            uint64_t v153 = 0;
          }
          if ((v152 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v154 = (unint64_t)(v153 + 8);
            goto LABEL_138;
          }
          if (v152 == 3) {
            *((void *)v914 + 1) = 0;
          }
        }
        else if ((v914[1] & 0x7F) == 2 || *((_DWORD *)v914 + 3))
        {
          uint64_t v886 = *((void *)v914 + 2);
          if ((v886 & 4) != 0)
          {
            unint64_t v154 = v886 & 0xFFFFFFFFFFFFFFF8;
            if (v154)
            {
LABEL_138:
              v919[0] = &v914;
              sub_1CC5FA668(v154 + 16, v919);
            }
          }
        }
      }
      if (v934 != v936) {
        free(v934);
      }
      return;
    case 0x93:
      unsigned __int8 v437 = sub_1CB8C2FBC(&v917);
      unsigned __int8 v438 = sub_1CB8C2FBC(&v916);
      v903 = (llvm *)v438;
      unsigned __int8 v913 = sub_1CCF877F8(v437, v438);
      if ((v913 - 120) <= 0x32u) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v439);
      }
      unsigned int v440 = sub_1CB8C32B0(&v913);
      uint64_t v441 = *(void **)(a2 + 32);
      v891 = (void *)v441[6];
      uint64_t v893 = v441[5];
      uint64_t v442 = v441[10];
      uint64_t v443 = v441[11];
      uint64_t v444 = *(void *)(v442 + 40) + 16 * v443;
      uint64_t v445 = *(llvm **)v444;
      uint64_t v446 = *(void *)(v444 + 8);
      uint64_t v447 = *(void **)(a2 + 64);
      v919[0] = v447;
      if (v447) {
        llvm::MetadataTracking::track((uint64_t)v919, (unsigned __int8 *)v447, 2);
      }
      LODWORD(v919[1]) = *(_DWORD *)(a2 + 60);
      uint64_t v448 = a1[2];
      uint64_t v928 = 0;
      uint64_t v929 = 0;
      uint64_t v899 = v440;
      uint64_t v907 = v446;
      int v910 = v445;
      uint64_t v450 = sub_1CD7EBF14(v448, v440, (const llvm::APInt *)&v928, v445, v446, 0, 0);
      uint64_t v452 = v451;
      if (!v928) {
        goto LABEL_347;
      }
      int v453 = *(unsigned __int8 *)v928;
      if ((v453 - 4) > 0x1E)
      {
        if ((v453 - 3) >= 0xFFFFFFFE) {
          uint64_t v878 = (llvm *)v928;
        }
        else {
          uint64_t v878 = 0;
        }
        if ((v453 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v879 = (unint64_t)v878 + 8;
LABEL_568:
          v918[0] = &v928;
          sub_1CC5FA668(v879 + 16, v918);
          goto LABEL_347;
        }
        if (v453 == 3) {
          v928[1] = 0;
        }
      }
      else if ((*((unsigned char *)v928 + 1) & 0x7F) == 2 || *((_DWORD *)v928 + 3))
      {
        unint64_t v888 = (unint64_t)v928[2];
        if ((v888 & 4) != 0)
        {
          unint64_t v879 = v888 & 0xFFFFFFFFFFFFFFF8;
          if (v879) {
            goto LABEL_568;
          }
        }
      }
LABEL_347:
      uint64_t v454 = a1[2];
      uint64_t v455 = *(void *)(v454 + 832);
      if (v455) {
        LOWORD(v455) = *(_WORD *)(v455 + 8);
      }
      uint64_t v890 = v452;
      __src = v450;
      uint64_t v457 = v446;
      v456 = v445;
      uint64_t v458 = sub_1CCFDED5C(v454, 58, (const llvm::APInt *)v919, v445, v446, v442, v443, v449, (uint64_t)__src, v890, v455);
      uint64_t v895 = v459;
      uint64_t v897 = (uint64_t)v458;
      char v460 = (llvm::APFloatBase *)a1[2];
      char v461 = *(uint64_t **)(a2 + 32);
      uint64_t v462 = *v461;
      uint64_t v463 = (void *)v461[1];
      uint64_t v464 = *((void *)v460 + 104);
      if (v464) {
        __int16 v465 = *(_WORD *)(v464 + 8);
      }
      else {
        __int16 v465 = 0;
      }
      v745 = sub_1CD7F3564(v460, (const char *)0xD8, (uint64_t)v919, (llvm *)v916, 0, v462, v463, v465);
      unint64_t v747 = v746;
      uint64_t v748 = (llvm::APFloatBase *)a1[2];
      uint64_t v749 = *((void *)v748 + 104);
      if (v749) {
        __int16 v750 = *(_WORD *)(v749 + 8);
      }
      else {
        __int16 v750 = 0;
      }
      v751 = sub_1CD7F3564(v748, (const char *)0xD8, (uint64_t)v919, (llvm *)v913, 0, v893, v891, v750);
      uint64_t v892 = v752;
      uint64_t v894 = (uint64_t)v751;
      if (v440)
      {
        uint64_t v753 = 0;
        do
        {
          int v756 = sub_1CD7EBF14(a1[2], v753, (const llvm::APInt *)v919, v456, v457, 0, 0);
          uint64_t v757 = v754;
          uint64_t v758 = a1[2];
          uint64_t v759 = *(void *)(v758 + 832);
          if (v759) {
            LOWORD(v759) = *(_WORD *)(v759 + 8);
          }
          v761 = sub_1CCFDED5C(v758, 56, (const llvm::APInt *)v919, v456, v457, v897, v895, v755, (uint64_t)v756, v754, v759);
          uint64_t v763 = v762;
          uint64_t v764 = a1[2];
          uint64_t v765 = *(void *)(v764 + 832);
          if (v765) {
            LOWORD(v765) = *(_WORD *)(v765 + 8);
          }
          v766 = sub_1CCFDED5C(v764, 148, (const llvm::APInt *)v919, v903, 0, v894, v892, v760, (uint64_t)v756, v757, v765);
          uint64_t v769 = (void *)a1[2];
          uint64_t v770 = v769[104];
          if (v770) {
            LOWORD(v770) = *(_WORD *)(v770 + 8);
          }
          v745 = sub_1CD7F5D38(v769, (const char *)0x93, (const llvm::APInt *)v919, (llvm *)v916, 0, (uint64_t)v745, v747, v768, (uint64_t)v766, v767, (uint64_t)v761, v763, SHIDWORD(v763), v770);
          unint64_t v747 = v747 & 0xFFFFFFFF00000000 | v771;
          ++v753;
          uint64_t v457 = v907;
          v456 = v910;
        }
        while (v899 != v753);
      }
      __int16 v772 = (llvm::APFloatBase *)a1[2];
      uint64_t v773 = *((void *)v772 + 104);
      if (v773) {
        __int16 v774 = *(_WORD *)(v773 + 8);
      }
      else {
        __int16 v774 = 0;
      }
      v776 = sub_1CD7F3564(v772, (const char *)0xD8, (uint64_t)v919, (llvm *)v917, 0, (uint64_t)v745, (void *)v747, v774);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v777 = (uint64_t **)&v934[2 * v935];
      *uint64_t v777 = v776;
      v777[1] = v775;
      LODWORD(v935) = v935 + 1;
      uint64_t v778 = (llvm *)v919[0];
      if (!v919[0]) {
        goto LABEL_176;
      }
      int v779 = *(unsigned __int8 *)v919[0];
      if ((v779 - 4) <= 0x1E)
      {
        if ((*((unsigned char *)v919[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v919[0] + 3)) {
          goto LABEL_176;
        }
        uint64_t v780 = *((void *)v919[0] + 2);
        if ((v780 & 4) == 0) {
          goto LABEL_176;
        }
        unint64_t v781 = v780 & 0xFFFFFFFFFFFFFFF8;
        if (!v781) {
          goto LABEL_176;
        }
        goto LABEL_574;
      }
      if ((v779 - 3) >= 0xFFFFFFFE) {
        int v880 = v919[0];
      }
      else {
        int v880 = 0;
      }
      if ((v779 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v781 = (unint64_t)v880 + 8;
LABEL_574:
        uint64_t v928 = v919;
        uint64_t v853 = v781 + 16;
        uint64_t v854 = (void **)&v928;
LABEL_575:
        sub_1CC5FA668(v853, v854);
        goto LABEL_176;
      }
      goto LABEL_576;
    case 0x94:
      unsigned __int8 v541 = sub_1CB8C2FBC(&v917);
      unsigned __int8 v542 = sub_1CB8C2FBC(&v916);
      v896 = (llvm *)v541;
      v912 = (llvm *)v542;
      LOBYTE(v918[0]) = sub_1CCF877F8(v541, v542);
      if ((LOBYTE(v918[0]) - 120) <= 0x32u) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v543);
      }
      unsigned int v544 = sub_1CB8C32B0((unsigned __int8 *)v918);
      uint64_t v545 = *(void *)(a2 + 32);
      uint64_t v546 = *(void *)(v545 + 40);
      uint64_t v547 = *(void *)(v545 + 48);
      uint64_t v548 = *(void *)(v546 + 40) + 16 * v547;
      long long v549 = *(llvm **)v548;
      uint64_t v550 = *(void *)(v548 + 8);
      uint64_t v551 = *(llvm **)(a2 + 64);
      uint64_t v928 = (void **)v551;
      if (v551) {
        llvm::MetadataTracking::track((uint64_t)&v928, (unsigned __int8 *)v551, 2);
      }
      LODWORD(v929) = *(_DWORD *)(a2 + 60);
      uint64_t v908 = v544;
      int v552 = sub_1CD7EBF14(a1[2], v544, (const llvm::APInt *)&v928, v549, v550, 0, 0);
      uint64_t v555 = a1[2];
      uint64_t v556 = *(void *)(v555 + 832);
      if (v556) {
        LOWORD(v556) = *(_WORD *)(v556 + 8);
      }
      uint64_t v557 = sub_1CCFDED5C(v555, 58, (const llvm::APInt *)&v928, v549, v550, v546, v547, v554, (uint64_t)v552, v553, v556);
      uint64_t v900 = v558;
      uint64_t v904 = (uint64_t)v557;
      uint64_t v559 = (llvm::APFloatBase *)a1[2];
      uint64_t v560 = *(uint64_t **)(a2 + 32);
      uint64_t v561 = *v560;
      uint64_t v562 = (void *)v560[1];
      uint64_t v563 = *((void *)v559 + 104);
      if (v563) {
        __int16 v564 = *(_WORD *)(v563 + 8);
      }
      else {
        __int16 v564 = 0;
      }
      __int16 v785 = sub_1CD7F3564(v559, (const char *)0xD8, (uint64_t)&v928, (llvm *)v916, 0, v561, v562, v564);
      v787 = (uint64_t *)&v920;
      v919[0] = &v920;
      v919[1] = (void *)0x800000000;
      if (v544)
      {
        uint64_t v788 = (uint64_t)v785;
        uint64_t v789 = v786;
        uint64_t v790 = 0;
        do
        {
          uint64_t v791 = sub_1CD7EBF14(a1[2], v790, (const llvm::APInt *)&v928, v549, v550, 0, 0);
          uint64_t v794 = a1[2];
          uint64_t v795 = *(void *)(v794 + 832);
          if (v795) {
            LOWORD(v795) = *(_WORD *)(v795 + 8);
          }
          uint64_t v796 = sub_1CCFDED5C(v794, 56, (const llvm::APInt *)&v928, v549, v550, v904, v900, v793, (uint64_t)v791, v792, v795);
          uint64_t v799 = a1[2];
          uint64_t v800 = *(void *)(v799 + 832);
          if (v800) {
            LOWORD(v800) = *(_WORD *)(v800 + 8);
          }
          uint64_t v802 = sub_1CCFDED5C(v799, 148, (const llvm::APInt *)&v928, v912, 0, v788, v789, v798, (uint64_t)v796, v797, v800);
          if (LODWORD(v919[1]) >= (unint64_t)HIDWORD(v919[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v803 = (uint64_t **)((char *)v919[0] + 16 * LODWORD(v919[1]));
          void *v803 = v802;
          v803[1] = v801;
          uint64_t v804 = ++LODWORD(v919[1]);
          ++v790;
        }
        while (v908 != v790);
        v787 = (uint64_t *)v919[0];
      }
      else
      {
        uint64_t v804 = 0;
      }
      uint64_t v805 = (void *)a1[2];
      uint64_t v806 = v805[104];
      if (v806) {
        uint64_t v807 = *(unsigned __int16 *)(v806 + 8);
      }
      else {
        uint64_t v807 = 0;
      }
      uint64_t v809 = sub_1CD7FF4E8(v805, (const char *)0x92, (const llvm::APInt *)&v928, (llvm *)LOBYTE(v918[0]), 0, v787, v804, v807);
      uint64_t v810 = (llvm::APFloatBase *)a1[2];
      uint64_t v811 = *((void *)v810 + 104);
      if (v811) {
        __int16 v812 = *(_WORD *)(v811 + 8);
      }
      else {
        __int16 v812 = 0;
      }
      uint64_t v814 = sub_1CD7F3564(v810, (const char *)0xD8, (uint64_t)&v928, v896, 0, (uint64_t)v809, v808, v812);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v815 = (uint64_t **)&v934[2 * v935];
      llvm *v815 = v814;
      v815[1] = v813;
      LODWORD(v935) = v935 + 1;
      v744 = v919[0];
      if (v919[0] != &v920) {
        goto LABEL_517;
      }
      goto LABEL_539;
    case 0x99:
      *(_OWORD *)v919 = *(_OWORD *)*(void *)(a2 + 40);
      int v911 = *(void **)(a2 + 80);
      unsigned int v466 = sub_1CD3DB440((llvm::EVT *)v919, (const char *)v15);
      uint64_t v467 = (llvm::APFloatBase *)a1[2];
      unint64_t v468 = *(uint64_t **)(a2 + 32);
      uint64_t v469 = *v468;
      uint64_t v470 = (void *)v468[1];
      uint64_t v471 = *((void *)v467 + 104);
      if (v471) {
        __int16 v472 = *(_WORD *)(v471 + 8);
      }
      else {
        __int16 v472 = 0;
      }
      uint64_t v711 = sub_1CD7F3564(v467, (const char *)0xD8, (uint64_t)&v914, (llvm *)v916, 0, v469, v470, v472);
      __int16 v712 = 0;
      unsigned int v714 = v713;
      BOOL v715 = (llvm::APFloatBase *)a1[2];
      uint64_t v716 = *(void *)(a2 + 32);
      uint64_t v717 = *(void *)(v716 + 40);
      v718 = *(void **)(v716 + 48);
      uint64_t v719 = *((void *)v715 + 104);
      if (v719) {
        __int16 v712 = *(_WORD *)(v719 + 8);
      }
      uint64_t v720 = sub_1CD7F3564(v715, (const char *)0xD8, (uint64_t)&v914, (llvm *)v916, 0, v717, v718, v712);
      unsigned int v722 = v721;
      uint64_t v928 = (void **)v916;
      uint64_t v929 = 0;
      v918[0] = v917;
      v918[1] = 0;
      unsigned int v723 = sub_1CD3DB440((llvm::EVT *)v918, v721);
      unsigned int v725 = sub_1CD3DB440((llvm::EVT *)&v928, v724);
      if (v725 / v723 == 1)
      {
        uint64_t v726 = sub_1CCFCDA78(a1[2], (llvm *)v928, v929, (uint64_t)&v914, (uint64_t)v711, v714, (uint64_t)v720, v722, v911, v466);
        unsigned int v728 = v727;
      }
      else
      {
        v919[0] = &v920;
        v919[1] = (void *)0x800000000;
        if (v723)
        {
          v905 = v711;
          uint64_t v898 = v720;
          unsigned int v901 = v714;
          unsigned int v729 = 0;
          for (uint64_t i = 0; i != v723; ++i)
          {
            if (v723 <= v725)
            {
              int v731 = 0;
              int v732 = *((_DWORD *)v911 + i);
              int v733 = v725 / v723;
              do
              {
                if (v732 < 0)
                {
                  unsigned int v735 = HIDWORD(v919[1]);
                  int v734 = -1;
                }
                else
                {
                  int v734 = v731 + v732 * (v725 / v723);
                  unsigned int v735 = HIDWORD(v919[1]);
                }
                if (v729 >= v735) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v919[0] + v729) = v734;
                unsigned int v729 = ++LODWORD(v919[1]);
                ++v731;
                --v733;
              }
              while (v733);
            }
          }
          uint64_t v816 = (uint64_t **)v919[0];
          unsigned int v714 = v901;
          uint64_t v711 = v905;
          uint64_t v720 = v898;
        }
        else
        {
          unsigned int v729 = 0;
          uint64_t v816 = &v920;
        }
        uint64_t v726 = sub_1CCFCDA78(a1[2], (llvm *)v928, v929, (uint64_t)&v914, (uint64_t)v711, v714, (uint64_t)v720, v722, v816, v729);
        unsigned int v728 = v855;
        if (v919[0] != &v920) {
          free(v919[0]);
        }
      }
      uint64_t v355 = v728;
      unsigned __int8 v350 = (llvm::APFloatBase *)a1[2];
      int v352 = (llvm *)v917;
      uint64_t v856 = *((void *)v350 + 104);
      if (v856) {
        __int16 v349 = *(_WORD *)(v856 + 8);
      }
      else {
        __int16 v349 = 0;
      }
      uint64_t v351 = 216;
      uint64_t v353 = 0;
      uint64_t v354 = (uint64_t)v726;
      goto LABEL_276;
    case 0x9A:
      int v100 = (llvm::APFloatBase *)a1[2];
      int v101 = *(uint64_t **)(a2 + 32);
      uint64_t v102 = *v101;
      int v103 = (void *)v101[1];
      uint64_t v104 = *((void *)v100 + 104);
      if (v104) {
        __int16 v105 = *(_WORD *)(v104 + 8);
      }
      else {
        __int16 v105 = 0;
      }
      BOOL v224 = sub_1CD7F3564(v100, (const char *)0xC8, (uint64_t)&v914, (llvm *)v916, 0, v102, v103, v105);
      uint64_t v226 = v225;
      unint64_t v227 = (llvm::APFloatBase *)a1[2];
      uint64_t v228 = *(void *)(a2 + 32);
      uint64_t v229 = *(void *)(v228 + 40);
      uint64_t v230 = *(void **)(v228 + 48);
      uint64_t v231 = *((void *)v227 + 104);
      if (v231) {
        __int16 v232 = *(_WORD *)(v231 + 8);
      }
      else {
        __int16 v232 = 0;
      }
      uint64_t v233 = sub_1CD7F3564(v227, (const char *)0xC8, (uint64_t)&v914, (llvm *)v916, 0, v229, v230, v232);
      unint64_t v236 = (void *)a1[2];
      uint64_t v237 = *(void *)(a2 + 32);
      uint64_t v238 = *(void *)(v237 + 80);
      uint64_t v239 = *(void *)(v237 + 88);
      uint64_t v240 = v236[104];
      if (v240) {
        LOWORD(v240) = *(_WORD *)(v240 + 8);
      }
      uint64_t v241 = sub_1CD7F5D38(v236, (const char *)0x9A, (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t)v224, v226, v235, (uint64_t)v233, v234, v238, v239, SHIDWORD(v239), v240);
      goto LABEL_184;
    case 0x9B:
      unsigned __int8 v421 = sub_1CB8C2FBC(&v917);
      char v422 = sub_1CB8C2FBC(&v916);
      unsigned __int8 v423 = sub_1CCF877F8(v421, v422);
      uint64_t v424 = *(uint64_t **)(a2 + 32);
      uint64_t v425 = *v424;
      uint64_t v426 = (void *)v424[1];
      uint64_t v427 = *(llvm **)(a2 + 64);
      uint64_t v928 = (void **)v427;
      if (v427) {
        llvm::MetadataTracking::track((uint64_t)&v928, (unsigned __int8 *)v427, 2);
      }
      LODWORD(v929) = *(_DWORD *)(a2 + 60);
      long long v428 = (llvm::APFloatBase *)a1[2];
      uint64_t v429 = *((void *)v428 + 104);
      if (v429) {
        __int16 v430 = *(_WORD *)(v429 + 8);
      }
      else {
        __int16 v430 = 0;
      }
      uint64_t v673 = sub_1CD7F3564(v428, (const char *)0xD8, (uint64_t)&v928, (llvm *)v423, 0, v425, v426, v430);
      uint64_t v675 = v674;
      uint64_t v677 = sub_1CD3DD4D8(a1[2], (llvm *)v423, 0);
      unsigned __int8 v678 = v676;
      v919[0] = &v920;
      uint64_t v920 = v673;
      uint64_t v921 = v675;
      v919[1] = (void *)0x800000001;
      if (v917 - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v676);
      }
      int v679 = sub_1CB8C32B0(&v917);
      unsigned int v680 = v919[1];
      int v681 = v679 - 1;
      if (v679 != 1)
      {
        do
        {
          if (v680 >= HIDWORD(v919[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v686 = (uint64_t **)((char *)v919[0] + 16 * v680);
          *uint64_t v686 = v677;
          v686[1] = (uint64_t *)v678;
          unsigned int v680 = ++LODWORD(v919[1]);
          --v681;
        }
        while (v681);
      }
      __int16 v682 = (void *)a1[2];
      uint64_t v683 = v680;
      uint64_t v684 = v682[104];
      if (v684) {
        uint64_t v685 = *(unsigned __int16 *)(v684 + 8);
      }
      else {
        uint64_t v685 = 0;
      }
      v737 = sub_1CD7FF4E8(v682, (const char *)0x95, (const llvm::APInt *)&v928, (llvm *)v916, 0, (uint64_t *)v919[0], v683, v685);
      uint64_t v738 = (llvm::APFloatBase *)a1[2];
      uint64_t v739 = *((void *)v738 + 104);
      if (v739) {
        __int16 v740 = *(_WORD *)(v739 + 8);
      }
      else {
        __int16 v740 = 0;
      }
      uint64_t v742 = sub_1CD7F3564(v738, (const char *)0xD8, (uint64_t)&v928, (llvm *)v917, 0, (uint64_t)v737, v736, v740);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v743 = (uint64_t **)&v934[2 * v935];
      unsigned __int8 *v743 = v742;
      v743[1] = v741;
      LODWORD(v935) = v935 + 1;
      v744 = v919[0];
      if (v919[0] == &v920) {
        goto LABEL_539;
      }
LABEL_517:
      free(v744);
      goto LABEL_539;
    case 0xB6:
    case 0xBA:
      int v361 = sub_1CB87E200(&v916);
      int v363 = v362;
      int v365 = sub_1CB87E200(&v917);
      if (v363 == 1) {
      uint64_t v366 = (llvm::APFloatBase *)a1[2];
      }
      uint64_t v367 = *(uint64_t **)(a2 + 32);
      uint64_t v368 = *v367;
      uint64_t v369 = (void *)v367[1];
      uint64_t v370 = *((void *)v366 + 104);
      if (v370) {
        __int16 v371 = *(_WORD *)(v370 + 8);
      }
      else {
        __int16 v371 = 0;
      }
      unsigned int v473 = v361 - v365;
      unsigned int v475 = sub_1CD7F3564(v366, (const char *)0xC7, (uint64_t)&v914, (llvm *)v916, 0, v368, v369, v371);
      __int16 v476 = 0;
      unsigned int v477 = (llvm::APFloatBase *)a1[2];
      uint64_t v478 = *((void *)v477 + 104);
      if (v478) {
        __int16 v476 = *(_WORD *)(v478 + 8);
      }
      uint64_t v479 = sub_1CD7F3564(v477, (const char *)*(unsigned __int16 *)(a2 + 24), (uint64_t)&v914, (llvm *)v916, 0, (uint64_t)v475, (void *)v474, v476);
      uint64_t v481 = v480;
      uint64_t v482 = (llvm *)v916;
      uint64_t v483 = v473;
      uint64_t v484 = a1[2];
      ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], v916, 0, *(void *)(**(void **)(v484 + 40) + 40) + 272, 1);
      unsigned int v487 = sub_1CD7EBF14(v484, v483, (const llvm::APInt *)&v914, ShiftAmountTy, v486, 0, 0);
      uint64_t v490 = *(void *)(v484 + 832);
      if (v490) {
        LOWORD(v490) = *(_WORD *)(v490 + 8);
      }
      uint64_t v241 = sub_1CCFDED5C(v484, 177, (const llvm::APInt *)&v914, v482, 0, (uint64_t)v479, v481, v489, (uint64_t)v487, v488, v490);
LABEL_184:
      int v45 = v241;
      uint64_t v47 = v242;
      unsigned __int8 v48 = (llvm::APFloatBase *)a1[2];
      int v49 = (llvm *)v917;
      uint64_t v243 = *((void *)v48 + 104);
      if (v243) {
        __int16 v51 = *(_WORD *)(v243 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      uint64_t v52 = 201;
LABEL_37:
      uint64_t v53 = 0;
      goto LABEL_119;
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBC:
    case 0xBD:
      if (v15 == 188 || v15 == 183)
      {
        uint64_t v18 = (llvm::APFloatBase *)a1[2];
        uint64_t v19 = (llvm *)v916;
        unsigned int v20 = *(uint64_t **)(a2 + 32);
        uint64_t v21 = *v20;
        unsigned int v22 = (void *)v20[1];
        uint64_t v23 = *((void *)v18 + 104);
        if (v23) {
          __int16 v24 = *(_WORD *)(v23 + 8);
        }
        else {
          __int16 v24 = 0;
        }
        uint64_t v69 = 200;
      }
      else
      {
        uint64_t v18 = (llvm::APFloatBase *)a1[2];
        uint64_t v19 = (llvm *)v916;
        int v67 = *(uint64_t **)(a2 + 32);
        uint64_t v21 = *v67;
        unsigned int v22 = (void *)v67[1];
        uint64_t v68 = *((void *)v18 + 104);
        if (v68) {
          __int16 v24 = *(_WORD *)(v68 + 8);
        }
        else {
          __int16 v24 = 0;
        }
        uint64_t v69 = 199;
      }
      uint64_t v134 = sub_1CD7F3564(v18, (const char *)v69, (uint64_t)&v914, v19, 0, v21, v22, v24);
      uint64_t v136 = v135;
      unsigned int v137 = (const char *)*(unsigned __int16 *)(a2 + 24);
      if (v137 == 183)
      {
        unsigned int v249 = sub_1CB87E200(&v916);
        if (v248 == 1) {
        char v251 = sub_1CB87E200(&v917);
        }
        if (v250 == 1) {
        LODWORD(v919[1]) = v249;
        }
        if (v249 >= 0x41) {
          operator new[]();
        }
        v919[0] = (void *)(1 << v251);
        uint64_t v252 = a1[2];
        uint64_t v253 = (llvm *)v916;
        uint64_t v254 = sub_1CD7EBB14(v252, (llvm::LLVMContext *)v919, (const llvm::APInt *)&v914, v916, 0, 0, 0);
        uint64_t v257 = *(void *)(v252 + 832);
        if (v257) {
          LOWORD(v257) = *(_WORD *)(v257 + 8);
        }
        uint64_t v134 = sub_1CCFDED5C(v252, 172, (const llvm::APInt *)&v914, v253, 0, (uint64_t)v134, v136, v256, v254, v255, v257);
        uint64_t v136 = v258;
        if (LODWORD(v919[1]) >= 0x41 && v919[0]) {
          MEMORY[0x1D25D9CB0](v919[0], 0x1000C8000313F17);
        }
        unsigned int v137 = (const char *)*(unsigned __int16 *)(a2 + 24);
      }
      uint64_t v138 = (llvm::APFloatBase *)a1[2];
      uint64_t v139 = *((void *)v138 + 104);
      if (v139) {
        __int16 v140 = *(_WORD *)(v139 + 8);
      }
      else {
        __int16 v140 = 0;
      }
      unint64_t v141 = sub_1CD7F3564(v138, v137, (uint64_t)&v914, (llvm *)v916, 0, (uint64_t)v134, (void *)v136, v140);
      uint64_t v143 = v142;
      int v144 = *(unsigned __int16 *)(a2 + 24);
      if (v144 == 189 || v144 == 184)
      {
        uint64_t v162 = a1[2];
        unsigned int v163 = (llvm *)v916;
        uint64_t v164 = sub_1CB87E200(&v916);
        int v166 = v165;
        uint64_t v168 = v164 - sub_1CB87E200(&v917);
        if (v166 == 1) {
        BOOL v169 = sub_1CD7EBF14(v162, v168, (const llvm::APInt *)&v914, (llvm *)v916, 0, 0, 0);
        }
        uint64_t v172 = *(void *)(v162 + 832);
        if (v172) {
          LOWORD(v172) = *(_WORD *)(v172 + 8);
        }
        unint64_t v141 = sub_1CCFDED5C(v162, 57, (const llvm::APInt *)&v914, v163, 0, (uint64_t)v141, v143, v171, (uint64_t)v169, v170, v172);
        uint64_t v143 = v173;
      }
      unsigned __int8 v48 = (llvm::APFloatBase *)a1[2];
      int v49 = (llvm *)v917;
      uint64_t v145 = *((void *)v48 + 104);
      if (v145) {
        __int16 v51 = *(_WORD *)(v145 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      uint64_t v52 = 201;
      uint64_t v53 = 0;
      int v45 = v141;
      uint64_t v47 = v143;
      goto LABEL_119;
    case 0xBE:
      uint64_t v416 = *(void *)(a2 + 40);
      char v417 = *(void **)v416;
      uint64_t v418 = *(_DWORD **)(v416 + 8);
      if ((_BYTE)v417)
      {
        if (v417 - 15 >= 0x9C)
        {
          v919[0] = v417;
          v919[1] = v418;
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v919);
          goto LABEL_415;
        }
      }
      else if ((v418[2] & 0xFE) != 0x12)
      {
        v919[0] = v417;
        v919[1] = v418;
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v919);
LABEL_415:
        int v641 = v420;
        if (ExtendedSizeInBits == sub_1CB87E200(&v916) && v641 == v642) {
          goto LABEL_417;
        }
        char v832 = *(uint64_t **)(a2 + 40);
        uint64_t v833 = *v832;
        if (*v832)
        {
          if ((v833 + 104) > 0xDFu
            || (v833 - 8) > 0xF9u
            || (v833 - 75) >= 0xC4u)
          {
LABEL_583:
            char v643 = 0;
            uint64_t v645 = 200;
            uint64_t v644 = 201;
            goto LABEL_418;
          }
        }
        else
        {
          uint64_t v834 = v832[1];
          int v835 = *(_DWORD *)(v834 + 8);
          if ((v835 & 0xFE) == 0x12) {
            int v835 = *(_DWORD *)(**(void **)(v834 + 16) + 8);
          }
          if (v835 == 13) {
            goto LABEL_583;
          }
        }
        uint64_t v645 = 215;
        uint64_t v644 = 212;
        char v643 = 1;
LABEL_418:
        uint64_t v646 = *(void *)(a2 + 32);
        uint64_t v647 = *(void *)v646;
        uint64_t v648 = *(unsigned int *)(v646 + 8);
        v649 = (llvm::APFloatBase *)a1[2];
        uint64_t v650 = *(void *)(v646 + 40);
        uint64_t v651 = *(void **)(v646 + 48);
        uint64_t v652 = *((void *)v649 + 104);
        if (v652) {
          __int16 v653 = *(_WORD *)(v652 + 8);
        }
        else {
          __int16 v653 = 0;
        }
        uint64_t v654 = sub_1CD7F3564(v649, (const char *)v645, (uint64_t)&v914, (llvm *)v916, 0, v650, v651, v653);
        __int16 v655 = 0;
        uint64_t v657 = v656;
        uint64_t v658 = (llvm::APFloatBase *)a1[2];
        uint64_t v659 = *(void *)(a2 + 32);
        uint64_t v660 = *(void *)(v659 + 80);
        uint64_t v661 = *(void **)(v659 + 88);
        uint64_t v662 = *((void *)v658 + 104);
        if (v662) {
          __int16 v655 = *(_WORD *)(v662 + 8);
        }
        uint64_t v663 = sub_1CD7F3564(v658, (const char *)v645, (uint64_t)&v914, (llvm *)v916, 0, v660, v661, v655);
        v665 = sub_1CD3E1260((void *)a1[2], (const llvm::APInt *)&v914, (llvm *)v916, 0, v647, v648, (uint64_t)v654, v657, (uint64_t)v663, v664, 0);
        uint64_t v667 = v666;
        *((_WORD *)v665 + 36) = *(_WORD *)(a2 + 72);
        uint64_t v668 = a1[2];
        uint64_t v669 = *(void *)(a2 + 40);
        uint64_t v671 = *(llvm **)v669;
        uint64_t v670 = *(void *)(v669 + 8);
        if (v643)
        {
          uint64_t v881 = sub_1CD7EB364(a1[2], 0, (const llvm::APInt *)&v914, 0);
          uint64_t v884 = *(void *)(v668 + 832);
          if (v884) {
            LOWORD(v884) = *(_WORD *)(v884 + 8);
          }
          int v356 = sub_1CCFDED5C(v668, 212, (const llvm::APInt *)&v914, v671, v670, (uint64_t)v665, v667, v883, (uint64_t)v881, v882, v884);
        }
        else
        {
          uint64_t v672 = *(void *)(v668 + 832);
          if (v672) {
            __int16 v349 = *(_WORD *)(v672 + 8);
          }
          else {
            __int16 v349 = 0;
          }
          unsigned __int8 v350 = (llvm::APFloatBase *)a1[2];
          uint64_t v351 = v644;
          int v352 = v671;
          uint64_t v353 = v670;
          uint64_t v354 = (uint64_t)v665;
          uint64_t v355 = v667;
LABEL_276:
          int v356 = sub_1CD7F3564(v350, (const char *)v351, (uint64_t)&v914, v352, v353, v354, (void *)v355, v349);
        }
LABEL_277:
        unint64_t v148 = v356;
        uint64_t v149 = (uint64_t *)v357;
LABEL_121:
        if (v935 >= HIDWORD(v935)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v150 = (uint64_t **)&v934[2 * v935];
        *uint64_t v150 = v148;
        v150[1] = v149;
LABEL_123:
        unsigned int v151 = v935 + 1;
        LODWORD(v935) = v935 + 1;
        goto LABEL_124;
      }
LABEL_417:
      char v643 = 0;
      uint64_t v644 = 216;
      uint64_t v645 = 216;
      goto LABEL_418;
    case 0xC0:
      uint64_t v106 = *(void *)(a2 + 32);
      unsigned int v107 = *(_DWORD *)(*(void *)(v106 + 160) + 76);
      unsigned int v108 = v916;
      BOOL v111 = v916 - 2 < 6 || v916 - 15 < 0x3C || v916 - 120 < 0x20;
      if (v107 - 18 < 4) {
        unsigned int v112 = 198;
      }
      else {
        unsigned int v112 = 199;
      }
      if (v111) {
        uint64_t v113 = v112;
      }
      else {
        uint64_t v113 = 215;
      }
      BOOL v909 = v111;
      int v906 = *(_DWORD *)(v106 + 168);
      uint64_t v902 = *(void *)(v106 + 160);
      if (((*(_DWORD *)(a1[1] + 92 * v107 + 4 * (**(void **)(a2 + 40) >> 3) + 171588) >> (4 * (**(void **)(a2 + 40) & 7))) & 0xF) != 0)
      {
        uint64_t v114 = (llvm::APFloatBase *)a1[2];
        uint64_t v115 = *(void *)v106;
        uint64_t v116 = *(void **)(v106 + 8);
        uint64_t v117 = *((void *)v114 + 104);
        if (v117) {
          __int16 v118 = *(_WORD *)(v117 + 8);
        }
        else {
          __int16 v118 = 0;
        }
        uint64_t v244 = sub_1CD7F3564(v114, (const char *)v113, (uint64_t)&v914, (llvm *)v916, 0, v115, v116, v118);
        uint64_t v318 = (llvm::APFloatBase *)a1[2];
        uint64_t v319 = *(void *)(a2 + 32);
        uint64_t v320 = *(void *)(v319 + 40);
        v321 = *(void **)(v319 + 48);
        uint64_t v322 = *((void *)v318 + 104);
        int v245 = v323;
        if (v322) {
          __int16 v324 = *(_WORD *)(v322 + 8);
        }
        else {
          __int16 v324 = 0;
        }
        int v246 = sub_1CD7F3564(v318, (const char *)v113, (uint64_t)&v914, (llvm *)v916, 0, v320, v321, v324);
        int v247 = v325;
        unsigned int v108 = v916;
        uint64_t v106 = *(void *)(a2 + 32);
      }
      else
      {
        uint64_t v244 = *(uint64_t **)v106;
        int v245 = *(_DWORD *)(v106 + 8);
        int v246 = *(uint64_t **)(v106 + 40);
        int v247 = *(_DWORD *)(v106 + 48);
      }
      unsigned int v326 = (llvm::APFloatBase *)a1[2];
      uint64_t v327 = *(void *)(v106 + 80);
      unint64_t v328 = *(void **)(v106 + 88);
      uint64_t v329 = *((void *)v326 + 104);
      if (v329) {
        __int16 v330 = *(_WORD *)(v329 + 8);
      }
      else {
        __int16 v330 = 0;
      }
      uint64_t v331 = sub_1CD7F3564(v326, (const char *)v113, (uint64_t)&v914, (llvm *)v108, 0, v327, v328, v330);
      int v333 = v332;
      uint64_t v334 = (llvm::APFloatBase *)a1[2];
      uint64_t v335 = *(void *)(a2 + 32);
      uint64_t v336 = *(void *)(v335 + 120);
      unint64_t v337 = *(void **)(v335 + 128);
      uint64_t v338 = *((void *)v334 + 104);
      if (v338) {
        __int16 v339 = *(_WORD *)(v338 + 8);
      }
      else {
        __int16 v339 = 0;
      }
      unint64_t v340 = sub_1CD7F3564(v334, (const char *)v113, (uint64_t)&v914, (llvm *)v916, 0, v336, v337, v339);
      unint64_t v341 = (void *)a1[2];
      v919[0] = v244;
      LODWORD(v919[1]) = v245;
      uint64_t v920 = v246;
      LODWORD(v921) = v247;
      uint64_t v922 = v331;
      LODWORD(v923) = v333;
      uint64_t v924 = v340;
      int v925 = v342;
      uint64_t v926 = v902;
      int v927 = v906;
      unsigned int v343 = sub_1CD7FF4E8(v341, (const char *)0xC0, (const llvm::APInt *)&v914, (llvm *)v916, 0, (uint64_t *)v919, 5, *(unsigned __int16 *)(a2 + 72));
      uint64_t v345 = v344;
      uint64_t v346 = a1[2];
      uint64_t v347 = (llvm *)v917;
      if (v909)
      {
        uint64_t v348 = *(void *)(v346 + 832);
        if (v348) {
          __int16 v349 = *(_WORD *)(v348 + 8);
        }
        else {
          __int16 v349 = 0;
        }
        unsigned __int8 v350 = (llvm::APFloatBase *)a1[2];
        uint64_t v351 = 201;
        int v352 = (llvm *)v917;
        uint64_t v353 = 0;
        uint64_t v354 = (uint64_t)v343;
        uint64_t v355 = v345;
        goto LABEL_276;
      }
      v615 = sub_1CD7EB364(v346, 0, (const llvm::APInt *)&v914, 0);
      uint64_t v618 = *(void *)(v346 + 832);
      if (v618) {
        LOWORD(v618) = *(_WORD *)(v618 + 8);
      }
      int v356 = sub_1CCFDED5C(v346, 212, (const llvm::APInt *)&v914, v347, 0, (uint64_t)v343, v345, v617, (uint64_t)v615, v616, v618);
      goto LABEL_277;
    case 0xD2:
    case 0xD3:
      uint64_t v54 = **(llvm ***)(a2 + 40);
      uint64_t v55 = a1[1];
      do
      {
        do
        {
          char v56 = (_BYTE)v54 + 1;
          uint64_t v54 = (llvm *)((_BYTE)v54 + 1);
        }
        while (!v56);
      }
      while (v56 != 1 && !*(void *)(v55 + 8 * (void)v54 + 96)
           || (*(unsigned char *)(v55 + 390 * v54 + v15 + 3862) & 0xFB) != 0);
      uint64_t v57 = a1[2];
      uint64_t v58 = *(uint64_t **)(a2 + 32);
      uint64_t v59 = *v58;
      uint64_t v60 = v58[1];
      uint64_t v61 = v58[5];
      uint64_t v62 = v58[6];
      uint64_t v63 = *(void *)(v57 + 832);
      if (v63) {
        LOWORD(v63) = *(_WORD *)(v63 + 8);
      }
      int v45 = sub_1CCFDED5C(v57, v15, (const llvm::APInt *)&v914, v54, 0, v59, v60, v12, v61, v62, v63);
      uint64_t v47 = v64;
      unsigned __int8 v48 = (llvm::APFloatBase *)a1[2];
      uint64_t v65 = *(void *)(a2 + 40);
      int v49 = *(llvm **)v65;
      uint64_t v53 = *(void *)(v65 + 8);
      uint64_t v66 = *((void *)v48 + 104);
      if (v66) {
        __int16 v51 = *(_WORD *)(v66 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      uint64_t v52 = 201;
      goto LABEL_119;
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE2:
    case 0xE3:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
      int v70 = (llvm::APFloatBase *)a1[2];
      int v71 = *(uint64_t **)(a2 + 32);
      uint64_t v72 = *v71;
      int v73 = (void *)v71[1];
      uint64_t v74 = *((void *)v70 + 104);
      if (v74) {
        __int16 v75 = *(_WORD *)(v74 + 8);
      }
      else {
        __int16 v75 = 0;
      }
      uint64_t v175 = sub_1CD7F3564(v70, (const char *)0xD7, (uint64_t)&v914, (llvm *)v916, 0, v72, v73, v75);
      __int16 v176 = 0;
      uint64_t v177 = (llvm::APFloatBase *)a1[2];
      uint64_t v178 = *((void *)v177 + 104);
      if (v178) {
        __int16 v176 = *(_WORD *)(v178 + 8);
      }
      uint64_t v179 = sub_1CD7F3564(v177, (const char *)*(unsigned __int16 *)(a2 + 24), (uint64_t)&v914, (llvm *)v916, 0, (uint64_t)v175, (void *)v174, v176);
LABEL_255:
      uint64_t v308 = v179;
      uint64_t v309 = v180;
      unint64_t v310 = (void *)a1[2];
      unint64_t v311 = (llvm *)v917;
      uint64_t v312 = (uint64_t)v310;
LABEL_256:
      BOOL v313 = 0;
LABEL_257:
      uint64_t v314 = sub_1CD7EB364(v312, v313, (const llvm::APInt *)&v914, 0);
      uint64_t v317 = v310[104];
      if (v317) {
        LOWORD(v317) = *(_WORD *)(v317 + 8);
      }
      unint64_t v146 = sub_1CCFDED5C((uint64_t)v310, 212, (const llvm::APInt *)&v914, v311, 0, (uint64_t)v308, v309, v316, (uint64_t)v314, v315, v317);
      goto LABEL_120;
    case 0x104:
      uint64_t v414 = *(void **)(a2 + 32);
      if (v916 - 120 < 0x20 || v916 - 2 < 6 || v916 - 15 <= 0x3B)
      {
        if ((*(_DWORD *)(v414[5] + 76) - 18) < 4) {
          uint64_t v415 = 198;
        }
        else {
          uint64_t v415 = 199;
        }
      }
      else
      {
        uint64_t v415 = 215;
      }
      uint64_t v623 = (llvm::APFloatBase *)a1[2];
      uint64_t v624 = v414[10];
      uint64_t v625 = (void *)v414[11];
      uint64_t v626 = *((void *)v623 + 104);
      if (v626) {
        __int16 v627 = *(_WORD *)(v626 + 8);
      }
      else {
        __int16 v627 = 0;
      }
      uint64_t v628 = sub_1CD7F3564(v623, (const char *)v415, (uint64_t)&v914, (llvm *)v916, 0, v624, v625, v627);
      __int16 v629 = 0;
      int v631 = v630;
      v632 = (llvm::APFloatBase *)a1[2];
      uint64_t v633 = *(void *)(a2 + 32);
      uint64_t v634 = *(void *)(v633 + 120);
      uint64_t v635 = *(void **)(v633 + 128);
      uint64_t v636 = *((void *)v632 + 104);
      if (v636) {
        __int16 v629 = *(_WORD *)(v636 + 8);
      }
      uint64_t v637 = sub_1CD7F3564(v632, (const char *)v415, (uint64_t)&v914, (llvm *)v916, 0, v634, v635, v629);
      v638 = *(uint64_t **)(a2 + 32);
      unint64_t v146 = sub_1CD7F6564((void *)a1[2], (const char *)0x104, (const llvm::APInt *)&v914, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), *v638, v638[1], v640, v638[5], v638[6], (uint64_t)v628, v631, (uint64_t)v637, v639, v638[20], v638[21]);
      goto LABEL_120;
    case 0x10F:
      uint64_t v526 = *(uint64_t **)(a2 + 32);
      uint64_t v527 = *v526;
      uint64_t v528 = v526[1];
      uint64_t v529 = v526[5];
      uint64_t v530 = v526[6];
      if (v917 - 15 >= 0x9C) {
        uint64_t v531 = 201;
      }
      else {
        uint64_t v531 = 216;
      }
      uint64_t v532 = v526[10];
      uint64_t v533 = v526[11];
      uint64_t v534 = *(void *)(v526[15] + 80);
      uint64_t v535 = (void *)(v534 + 24);
      if (*(_DWORD *)(v534 + 32) >= 0x41u) {
        uint64_t v535 = (void *)*v535;
      }
      uint64_t v537 = sub_1CD7FF180((void *)a1[2], v916, 0, (const llvm::APInt *)&v914, v527, v528, v529, v530, v532, v533, SHIDWORD(v533), *v535);
      uint64_t v538 = (llvm::APFloatBase *)a1[2];
      uint64_t v539 = *((void *)v538 + 104);
      if (v539) {
        __int16 v540 = *(_WORD *)(v539 + 8);
      }
      else {
        __int16 v540 = 0;
      }
      uint64_t v782 = sub_1CD7F3564(v538, (const char *)v531, (uint64_t)&v914, (llvm *)v917, 0, (uint64_t)v537, (void *)v536, v540);
      sub_1CD800DA0(a1[2], a2, 0, (uint64_t)v782, v783);
      sub_1CD800DA0(a1[2], a2, 1, (uint64_t)v537, 1);
      uint64_t v784 = a1[4];
      if (v784)
      {
        v919[0] = v782;
        sub_1CD6A0E6C(v784, (uint64_t *)v919);
        uint64_t v885 = a1[4];
        v919[0] = v537;
        sub_1CD6A0E6C(v885, (uint64_t *)v919);
      }
      sub_1CCF8567C((uint64_t)a1, a2);
      goto LABEL_176;
    default:
      if (v15 != 294) {
        goto LABEL_176;
      }
      uint64_t v155 = *(llvm **)(a2 + 64);
      uint64_t v928 = (void **)v155;
      if (v155)
      {
        llvm::MetadataTracking::track((uint64_t)&v928, (unsigned __int8 *)v155, 2);
        int v14 = *(_DWORD *)(a2 + 60);
      }
      LODWORD(v929) = v14;
      uint64_t v156 = (llvm::APFloatBase *)a1[2];
      uint64_t v157 = *(void *)(a2 + 32);
      uint64_t v158 = *(void *)(v157 + 80);
      int v159 = *(void **)(v157 + 88);
      uint64_t v160 = *((void *)v156 + 104);
      if (v160) {
        __int16 v161 = *(_WORD *)(v160 + 8);
      }
      else {
        __int16 v161 = 0;
      }
      v817 = sub_1CD7F3564(v156, (const char *)0xD8, (uint64_t)&v928, (llvm *)v916, 0, v158, v159, v161);
      int v819 = v818;
      uint64_t v820 = a1[2];
      uint64_t v821 = v916;
      uint64_t v822 = sub_1CD7F95FC(v820, v916, 0, 1, 0);
      uint64_t v823 = *(void *)(a2 + 32);
      char v824 = *(void **)v823;
      LODWORD(v919[1]) = *(_DWORD *)(v823 + 8);
      v919[0] = v824;
      uint64_t v920 = *(uint64_t **)(v823 + 40);
      LODWORD(v921) = *(_DWORD *)(v823 + 48);
      uint64_t v922 = v817;
      LODWORD(v923) = v819;
      unsigned int v828 = sub_1CD7F9178(v820, 294, (uint64_t)&v928, v821, 0, v822, v825, v826, (uint64_t *)v919, 3, *(void *)(a2 + 96));
      unsigned int v829 = (llvm::APFloatBase *)a1[2];
      uint64_t v830 = *((void *)v829 + 104);
      if (v830) {
        __int16 v831 = *(_WORD *)(v830 + 8);
      }
      else {
        __int16 v831 = 0;
      }
      uint64_t v846 = sub_1CD7F3564(v829, (const char *)0xD8, (uint64_t)&v928, (llvm *)v917, 0, (uint64_t)v828, v827, v831);
      if (v935 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v847 = (uint64_t **)&v934[2 * v935];
      *uint64_t v847 = v846;
      v847[1] = v845;
      unsigned int v848 = v935 + 1;
      LODWORD(v935) = v848;
      if (v848 >= HIDWORD(v935)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v849 = (uint64_t **)&v934[2 * v848];
      *uint64_t v849 = v828;
      v849[1] = (uint64_t *)1;
      LODWORD(v935) = v935 + 1;
LABEL_539:
      uint64_t v778 = (llvm *)v928;
      if (!v928) {
        goto LABEL_176;
      }
      int v779 = *(unsigned __int8 *)v928;
      if ((v779 - 4) > 0x1E)
      {
        if ((v779 - 3) >= 0xFFFFFFFE) {
          v852 = (llvm *)v928;
        }
        else {
          v852 = 0;
        }
        if ((v779 - 3) < 0xFFFFFFFE)
        {
LABEL_576:
          if (v779 == 3) {
            *((void *)v778 + 1) = 0;
          }
          goto LABEL_176;
        }
        unint64_t v851 = (unint64_t)v852 + 8;
      }
      else
      {
        if ((*((unsigned char *)v928 + 1) & 0x7F) != 2 && !*((_DWORD *)v928 + 3)) {
          goto LABEL_176;
        }
        unint64_t v850 = (unint64_t)v928[2];
        if ((v850 & 4) == 0) {
          goto LABEL_176;
        }
        unint64_t v851 = v850 & 0xFFFFFFFFFFFFFFF8;
        if (!v851) {
          goto LABEL_176;
        }
      }
      v919[0] = &v928;
      uint64_t v853 = v851 + 16;
      uint64_t v854 = v919;
      goto LABEL_575;
  }
}

uint64_t sub_1CCF8567C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v3 == *v2)
  {
    uint64_t v5 = *((unsigned int *)v2 + 5);
    uint64_t v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a2)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      uint64_t v6 = (void *)(v3 + v7);
    }
LABEL_19:
    uint64_t v4 = v2[1];
  }
  else
  {
    uint64_t v9 = *((unsigned int *)v2 + 4);
    int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (void *)(v3 + 8 * v11);
    uint64_t v12 = *v6;
    if (*v6 == -1)
    {
      int v13 = 0;
LABEL_28:
      if (v13) {
        uint64_t v6 = v13;
      }
      if (*v6 != a2) {
        uint64_t v6 = (void *)(v3 + 8 * v9);
      }
    }
    else
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != a2)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          int v13 = v6;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        uint64_t v6 = (void *)(v3 + 8 * (v16 & v10));
        uint64_t v12 = *v6;
        if (*v6 == -1) {
          goto LABEL_28;
        }
      }
    }
  }
  BOOL v15 = v3 == v4;
  uint64_t v17 = 16;
  if (v15) {
    uint64_t v17 = 20;
  }
  if (v6 != (void *)(v3 + 8 * *(unsigned int *)((char *)v2 + v17)))
  {
    *uint64_t v6 = -2;
    ++*((_DWORD *)v2 + 6);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return sub_1CD6A0E6C(result, &v19);
  }
  return result;
}

uint64_t *sub_1CCF857B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  char v11 = a6;
  char v12 = a4;
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  unsigned int v15 = sub_1CD3E3904((unsigned int *)&v66);
  if (v14 == 1) {
  if (v12)
  }
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v64);
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v64);
  }
  unsigned int v18 = ExtendedSizeInBits;
  if (v17 == 1) {
  if (v11)
  }
    unsigned int v19 = sub_1CB87E200((unsigned __int8 *)&v62);
  else {
    unsigned int v19 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v62);
  }
  unsigned int v21 = v19;
  if (v20 == 1) {
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v62, *(llvm::LLVMContext **)(*(void *)(a1 + 16) + 56));
  }
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 16) + 40) + 40) + 272), v22, 0);
  if (v15 > v18)
  {
    uint64_t v24 = 16 * v67;
    uint64_t v25 = *(unsigned __int8 *)(*(void *)(v66 + 40) + v24);
    if (!*(unsigned char *)(*(void *)(v66 + 40) + v24)) {
      return 0;
    }
    uint64_t v26 = *(void *)(a1 + 8);
    if (!*(void *)(v26 + 8 * v25 + 96)
      || !(_BYTE)v64
      || (*(unsigned __int8 *)(v26 + 179 * v25 + v64 + 137754) | 4) != 4)
    {
      return 0;
    }
  }
  if (v18 >= v21) {
    goto LABEL_25;
  }
  if (!(_BYTE)v62) {
    return 0;
  }
  uint64_t result = 0;
  if ((_BYTE)v64)
  {
    if ((*(_WORD *)(*(void *)(a1 + 8) + 358 * v62 + 2 * v64 + 73672) & 0xF0 | 0x40) != 0x40) {
      return 0;
    }
LABEL_25:
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v29 = (llvm::DataLayout *)(*(void *)(**(void **)(v28 + 40) + 40) + 272);
    long long v57 = *(_OWORD *)(*(void *)(v66 + 40) + 16 * v67);
    llvm::EVT::getTypeForEVT((llvm::EVT *)&v57, *(llvm::LLVMContext **)(v28 + 56));
    LOBYTE(v29) = llvm::DataLayout::getAlignment(v29, v30, 0);
    uint64_t v31 = *(void *)(a1 + 16);
    unint64_t v32 = sub_1CB896FB8((unsigned __int8 *)&v64);
    uint64_t v33 = v29;
    uint64_t v35 = sub_1CD7F053C(v31, v32, v34, v29);
    uint64_t v47 = v36;
    FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(*(void *)(a1 + 16) + 40) + 432), *((_DWORD *)v35 + 19));
    uint64_t v38 = (unint64_t)FixedStack | 4;
    if (FixedStack) {
      int v39 = *((_DWORD *)FixedStack + 3);
    }
    else {
      int v39 = 0;
    }
    uint64_t v40 = *(void *)(a1 + 16);
    if (v15 <= v18)
    {
      v54[0] = v38;
      v54[1] = 0;
      int v55 = v39;
      char v56 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v41 = v47;
      uint64_t v42 = sub_1CD7FB188(v40, a9, a10, a8, v66, v67, (uint64_t)v35, v47, (uint64_t)v54, v33, SHIDWORD(v33), 0, &v57);
    }
    else
    {
      v59[0] = v38;
      v59[1] = 0;
      int v60 = v39;
      char v61 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v41 = v47;
      uint64_t v42 = sub_1CD7FB71C(v40, a9, a10, a8, v66, v67, (uint64_t)v35, v47, (uint64_t)v59, v64, v65, v33, SHIDWORD(v33), 0, &v57);
    }
    uint64_t v45 = (uint64_t)v42;
    uint64_t v46 = *(void *)(a1 + 16);
    if (v18 == v21)
    {
      long long v51 = (unint64_t)v38;
      int v52 = v39;
      char v53 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      return sub_1CD7F00F8(v46, v62, v63, a8, v45, v43, (uint64_t)v35, v41, &v51, Alignment | 0x100u, (Alignment | 0x100uLL) >> 32, 0, &v57, 0);
    }
    else
    {
      long long v48 = (unint64_t)v38;
      int v49 = v39;
      char v50 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      return sub_1CD7FAEE8(v46, 1, a8, v62, v63, v45, v43, v44, (uint64_t)v35, v41, &v48, v64, v65, Alignment | 0x100u, (Alignment | 0x100uLL) >> 32, 0, &v57);
    }
  }
  return result;
}

uint64_t *sub_1CCF85B90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v84[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = v6[5];
  uint64_t v10 = v6[6];
  char v11 = *(unsigned __int8 **)(a2 + 64);
  char v77 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v77, v11, 2);
  }
  int v78 = *(_DWORD *)(a2 + 60);
  uint64_t v72 = (unsigned __int8 **)v76;
  int v73 = (unsigned __int8 **)v76;
  int v75 = 0;
  v83[0] = v84;
  uint64_t v74 = 0x100000020;
  v76[0] = a2;
  uint64_t v12 = *(void *)(v7 + 48);
  v84[0] = v9;
  v83[1] = (void *)0x1000000001;
  uint64_t v66 = v9;
  uint64_t v65 = v10;
  if (v12)
  {
    while (1)
    {
      int v13 = *(uint64_t **)(v12 + 16);
      if (v13)
      {
        if (*((_WORD *)v13 + 12) == 254 && (*((_WORD *)v13 + 13) & 0x780) == 0)
        {
          uint64_t v27 = v13[4];
          if (*(void *)(v27 + 40) == v7
            && *(_DWORD *)(v27 + 48) == v8
            && sub_1CCFE2580((uint64_t *)v27, *(void *)(a1 + 16) + 112, 0, 2)
            && (sub_1CCF551A8((uint64_t)v13, (llvm::SmallPtrSetImplBase *)&v72, (unsigned int *)v83, 0, 0) & 1) == 0
            && (sub_1CD8031D4((uint64_t)v13, a2) & 1) == 0)
          {
            break;
          }
        }
      }
      uint64_t v12 = *(void *)(v12 + 32);
      if (!v12) {
        goto LABEL_4;
      }
    }
    uint64_t v28 = v13[4];
    uint64_t v14 = *(void *)(v28 + 80);
    uint64_t v15 = *(unsigned int *)(v28 + 88);
  }
  else
  {
LABEL_4:
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = a3;
  uint64_t v17 = *(void *)(v7 + 40) + 16 * v8;
  unsigned int v19 = *(llvm **)v17;
  uint64_t v18 = *(void *)(v17 + 8);
  v71[0] = *(void *)v17;
  v71[1] = v18;
  if (v13)
  {
    int v26 = 0;
  }
  else
  {
    unsigned int v20 = sub_1CD7F0664(*(void *)(a1 + 16), (uint64_t)v19, v18, 1u);
    uint64_t v21 = *(void *)(a1 + 16);
    v82[0] = 0u;
    long long v81 = 0u;
    uint64_t v79 = 0;
    v80[0] = 0;
    *(void *)((char *)v80 + 5) = 0;
    uint64_t v15 = v22;
    uint64_t v23 = (uint64_t *)(*(void *)(v7 + 40) + 16 * v8);
    uint64_t v14 = (uint64_t)v20;
    char v24 = sub_1CD7EA9CC(v21, *v23, v23[1]);
    int v13 = sub_1CD7FB188(v21, v21 + 112, 0, (uint64_t)&v77, v7, v8, v14, v15, (uint64_t)&v79, v24, 0, 0, &v81);
    int v26 = v25;
  }
  uint64_t v29 = (uint64_t *)(*(void *)(a2 + 40) + 16 * v16);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  int v32 = *v29;
  if (v32)
  {
    if ((v32 - 15) >= 0x9C) {
      goto LABEL_21;
    }
LABEL_24:
    uint64_t v47 = sub_1CD817540(*(void *)(a1 + 8), *(void *)(a1 + 16), v14, v15, v19, v18, v30, v31, v66, v65);
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)(a1 + 16);
    long long v51 = (uint64_t *)(*(void *)(a2 + 40) + 16 * v16);
    uint64_t v52 = *v51;
    uint64_t v53 = v51[1];
    uint64_t v69 = 0;
    v70[0] = 0;
    *(void *)((char *)v70 + 5) = 0;
    v82[0] = 0u;
    long long v81 = 0u;
    uint64_t v54 = sub_1CD7F00F8(v50, v52, v53, (uint64_t)&v77, (uint64_t)v13, v26, (uint64_t)v47, v49, (long long *)&v69, 0, 0, 0, &v81, 0);
    goto LABEL_27;
  }
  if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v33 = sub_1CD817474(*(void *)(a1 + 8), *(void *)(a1 + 16), v14, v15, v19, v18, v66, v65);
  uint64_t v35 = v16;
  uint64_t v36 = (uint64_t)v33;
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v40 = (uint64_t *)(*(void *)(a2 + 40) + 16 * v35);
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  uint64_t v67 = 0;
  v68[0] = 0;
  *(void *)((char *)v68 + 5) = 0;
  if ((_BYTE)v19)
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)v71);
    unint64_t v46 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v18 + 24), 0, v34);
    unint64_t v46 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v82[0] = 0u;
  long long v81 = 0u;
  uint64_t v54 = sub_1CD7FAEE8(v39, 1, (uint64_t)&v77, v41, v42, (uint64_t)v13, v26, v45, v36, v38, (long long *)&v67, v46 | EVT, v44, 0, 0, 0, &v81);
LABEL_27:
  uint64_t v55 = (uint64_t)v54;
  sub_1CD800DA0(*(void *)(a1 + 16), (uint64_t)v13, v26, (uint64_t)v54, 1);
  char v56 = *(char **)(v55 + 32);
  long long v57 = &v56[40 * *(unsigned __int16 *)(v55 + 56)];
  *(void *)&long long v81 = v82;
  *((void *)&v81 + 1) = 0x600000000;
  sub_1CD3E560C((uint64_t)&v81, v56, v57);
  uint64_t v58 = v81;
  *(void *)long long v81 = v13;
  *(_DWORD *)(v58 + 8) = v26;
  uint64_t v59 = sub_1CD800398(*(void *)(a1 + 16), v55, (uint64_t *)v81, DWORD2(v81));
  if ((_OWORD *)v81 != v82) {
    free((void *)v81);
  }
  if (v83[0] != v84) {
    free(v83[0]);
  }
  if (v73 != v72) {
    free(v73);
  }
  if (v77)
  {
    int v60 = *v77;
    if ((v60 - 4) > 0x1E)
    {
      if ((v60 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = v77;
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v60 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v63 = (unint64_t)(v62 + 8);
LABEL_43:
        uint64_t v72 = &v77;
        sub_1CC5FA668(v63 + 16, &v72);
        return v59;
      }
      if (v60 == 3) {
        *((void *)v77 + 1) = 0;
      }
    }
    else if ((v77[1] & 0x7F) == 2 || *((_DWORD *)v77 + 3))
    {
      uint64_t v64 = *((void *)v77 + 2);
      if ((v64 & 4) != 0)
      {
        unint64_t v63 = v64 & 0xFFFFFFFFFFFFFFF8;
        if (v63) {
          goto LABEL_43;
        }
      }
    }
  }
  return v59;
}

uint64_t *sub_1CCF86088(uint64_t a1, uint64_t a2, BOOL a3)
{
  v86[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v80 = v6;
  uint64_t v81 = v5;
  if (*(_WORD *)(a2 + 24) == 146)
  {
    if ((_BYTE)v6)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v80);
      unint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v5 + 24), 0, a3);
      unint64_t v9 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    uint64_t v11 = v9 | EVT;
  }
  else
  {
    uint64_t v10 = (uint64_t *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
    uint64_t v11 = *v10;
    uint64_t v8 = v10[1];
  }
  uint64_t v78 = v11;
  uint64_t v79 = v8;
  uint64_t v12 = *(unsigned __int8 **)(a2 + 64);
  unsigned __int8 v76 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v76, v12, 2);
  }
  int v77 = *(_DWORD *)(a2 + 60);
  int v13 = sub_1CD7F0664(*(void *)(a1 + 16), v80, v81, 1u);
  uint64_t v60 = v14;
  uint64_t v61 = (uint64_t)v13;
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(*(void *)(a1 + 16) + 40) + 432), *((_DWORD *)v13 + 19));
  *(void *)&long long v74 = (unint64_t)FixedStack | 4;
  *((void *)&v74 + 1) = 0;
  BYTE4(v75) = 0;
  if (FixedStack) {
    int v16 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v16 = 0;
  }
  LODWORD(v75) = v16;
  int v84 = v86;
  uint64_t v85 = 0x800000000;
  if ((_BYTE)v78) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v78);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v78);
  }
  unint64_t v20 = ExtendedSizeInBits;
  if (v18 == 1) {
  if (*(_WORD *)(a2 + 24) != 146)
  }
  {
LABEL_29:
    BOOL v59 = 0;
    goto LABEL_30;
  }
  uint64_t v21 = (uint64_t *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  if (v78 != v23)
  {
    *(void *)&long long v70 = v23;
    *((void *)&v70 + 1) = v22;
    if ((_BYTE)v78)
    {
      uint64_t v24 = sub_1CB87E200((unsigned __int8 *)&v78);
LABEL_24:
      unint64_t v26 = v24;
      int v27 = v25;
      if ((_BYTE)v23) {
        unint64_t v28 = sub_1CB87E200((unsigned __int8 *)&v70);
      }
      else {
        unint64_t v28 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v70);
      }
      if (v27 != 1 || v29 == 1)
      {
        BOOL v59 = v26 < v28;
        goto LABEL_30;
      }
      goto LABEL_29;
    }
LABEL_21:
    uint64_t v24 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v78);
    goto LABEL_24;
  }
  BOOL v59 = 0;
  if (!(_BYTE)v78 && v79 != v22)
  {
    *(void *)&long long v70 = v23;
    *((void *)&v70 + 1) = v22;
    goto LABEL_21;
  }
LABEL_30:
  if (*(_WORD *)(a2 + 56))
  {
    unsigned int v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = v20 >> 3;
    uint64_t v36 = 40 * *(unsigned __int16 *)(a2 + 56);
    do
    {
      if (*(_WORD *)(*(void *)(*(void *)(a2 + 32) + v34) + 24) != 51)
      {
        unsigned int v65 = v19 & 0xFFFFF000;
        unint64_t v63 = sub_1CD7F6604(*(void *)(a1 + 16), v61, v60, v33, 0, (const llvm::APInt *)&v76, v19 & 0xF000);
        unsigned int v64 = v37;
        uint64_t v38 = *(void *)(a1 + 16);
        uint64_t v39 = (uint64_t *)(*(void *)(a2 + 32) + v34);
        uint64_t v41 = *v39;
        uint64_t v40 = v39[1];
        if (v59)
        {
          sub_1CB8F0264((uint64_t *)&v74, v33, (uint64_t)&v72);
          uint64_t v43 = v78;
          uint64_t v42 = v79;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v82 = v72;
          uint64_t v83 = v73;
          char v44 = sub_1CD7EA9CC(v38, v78, v79);
          uint64_t v45 = sub_1CD7FB71C(v38, v38 + 112, 0, (uint64_t)&v76, v41, v40, (uint64_t)v63, v64, (uint64_t)&v82, v43, v42, v44, 0, 0, &v70);
        }
        else
        {
          sub_1CB8F0264((uint64_t *)&v74, v33, (uint64_t)&v68);
          long long v70 = 0u;
          long long v71 = 0u;
          long long v82 = v68;
          uint64_t v83 = v69;
          uint64_t v47 = (uint64_t *)(*(void *)(v41 + 40) + 16 * v40);
          char v48 = sub_1CD7EA9CC(v38, *v47, v47[1]);
          uint64_t v45 = sub_1CD7FB188(v38, v38 + 112, 0, (uint64_t)&v76, v41, v40, (uint64_t)v63, v64, (uint64_t)&v82, v48, 0, 0, &v70);
        }
        if (v85 >= (unint64_t)HIDWORD(v85)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v19 = v65;
        uint64_t v49 = (uint64_t **)&v84[2 * v85];
        *uint64_t v49 = v45;
        v49[1] = v46;
        LODWORD(v85) = v85 + 1;
      }
      v34 += 40;
      v33 += v35;
    }
    while (v36 != v34);
  }
  uint64_t v30 = *(void **)(a1 + 16);
  if (v85)
  {
    uint64_t v50 = v30[104];
    if (v50) {
      uint64_t v51 = *(unsigned __int16 *)(v50 + 8);
    }
    else {
      uint64_t v51 = 0;
    }
    int v32 = sub_1CD7FF4E8(v30, (const char *)2, (const llvm::APInt *)&v76, (llvm *)1, 0, v84, v85, v51);
    int v31 = v52;
    uint64_t v30 = *(void **)(a1 + 16);
  }
  else
  {
    int v31 = 0;
    int v32 = v30 + 14;
  }
  long long v66 = v74;
  uint64_t v67 = v75;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v53 = sub_1CD7F00F8((uint64_t)v30, v80, v81, (uint64_t)&v76, (uint64_t)v32, v31, v61, v60, &v66, 0, 0, 0, &v70, 0);
  if (v84 != v86) {
    free(v84);
  }
  if (v76)
  {
    int v54 = *v76;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        char v56 = v76;
      }
      else {
        char v56 = 0;
      }
      if ((v54 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v57 = (unint64_t)(v56 + 8);
LABEL_59:
        int v84 = (uint64_t *)&v76;
        sub_1CC5FA668(v57 + 16, &v84);
        return v53;
      }
      if (v54 == 3) {
        *((void *)v76 + 1) = 0;
      }
    }
    else if ((v76[1] & 0x7F) == 2 || *((_DWORD *)v76 + 3))
    {
      uint64_t v58 = *((void *)v76 + 2);
      if ((v58 & 4) != 0)
      {
        unint64_t v57 = v58 & 0xFFFFFFFFFFFFFFF8;
        if (v57) {
          goto LABEL_59;
        }
      }
    }
  }
  return v53;
}

uint64_t sub_1CCF865E8(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, void *a5)
{
  long long v55 = *(_OWORD *)(*(void *)(a4 + 40) + 16 * a5);
  uint64_t v10 = sub_1CD3E12F4((unsigned __int8 *)&v55, a2, (BOOL)a3);
  unsigned int v11 = v10;
  *(_OWORD *)a2 = v55;
  if ((int)v10 <= 31)
  {
    switch(v10)
    {
      case 1:
        uint64_t v12 = 2;
        goto LABEL_12;
      case 0x10:
        uint64_t v12 = 4;
        goto LABEL_12;
      case 8:
        uint64_t v12 = 3;
        goto LABEL_12;
    }
LABEL_24:
    llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)(a1 + 16) + 56), v10);
    uint64_t v13 = *(void *)(a1 + 8);
    goto LABEL_25;
  }
  if (v10 == 32)
  {
    uint64_t v12 = 5;
    goto LABEL_12;
  }
  if (v10 == 64)
  {
    uint64_t v12 = 6;
    goto LABEL_12;
  }
  if (v10 != 128) {
    goto LABEL_24;
  }
  uint64_t v12 = 7;
LABEL_12:
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(void *)(v13 + 8 * v12 + 96))
  {
    uint64_t v14 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v15 = *((void *)v14 + 104);
    if (v15) {
      __int16 v16 = *(_WORD *)(v15 + 8);
    }
    else {
      __int16 v16 = 0;
    }
    uint64_t result = (uint64_t)sub_1CD7F3564(v14, (const char *)0xD8, (uint64_t)a3, (llvm *)v12, 0, a4, a5, v16);
    *(void *)(a2 + 112) = result;
    *(_DWORD *)(a2 + 120) = v18;
    if (v11 > 0x40) {
      operator new[]();
    }
    *(void *)&long long v52 = 1 << (v11 - 1);
    if (*(_DWORD *)(a2 + 136) >= 0x41u)
    {
      uint64_t result = *(void *)(a2 + 128);
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)(a2 + 128) = v52;
    *(_DWORD *)(a2 + 136) = v11;
    char v19 = v11 - 1;
    goto LABEL_21;
  }
LABEL_25:
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v48 = *(void *)(**(void **)(v20 + 40) + 40);
  unsigned __int8 v54 = *(unsigned char *)(v13 + 1889);
  uint64_t v21 = v54;
  uint64_t v22 = sub_1CD7F06FC(v20, v55, *((uint64_t *)&v55 + 1), v54, 0);
  uint64_t v24 = v23;
  int v25 = *((_DWORD *)v22 + 19);
  *(void *)(a2 + 32) = v22;
  *(_DWORD *)(a2 + 40) = v23;
  uint64_t v45 = *(void *)(*(void *)(a1 + 16) + 40);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v45 + 432), v25);
  uint64_t v49 = v24;
  int v46 = v25;
  if (FixedStack) {
    int v27 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v27 = 0;
  }
  *(void *)(a2 + 88) = (unint64_t)FixedStack | 4;
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 104) = v27;
  *(unsigned char *)(a2 + 108) = 0;
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a2 + 32);
  uint64_t v47 = *(void *)(a2 + 40);
  long long v56 = *(_OWORD *)(a2 + 88);
  uint64_t v57 = *(void *)(a2 + 104);
  long long v52 = 0u;
  long long v53 = 0u;
  char v30 = sub_1CD7EA9CC(v28, *(void *)(*(void *)(a4 + 40) + 16 * a5), *(void *)(*(void *)(a4 + 40) + 16 * a5 + 8));
  int v31 = sub_1CD7FB188(v28, v28 + 112, 0, (uint64_t)a3, a4, a5, v29, v47, (uint64_t)&v56, v30, 0, 0, &v52);
  *(void *)(a2 + 16) = v31;
  *(_DWORD *)(a2 + 24) = v33;
  if (*(unsigned char *)(v48 + 272))
  {
    uint64_t v40 = (uint64_t)v31;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a2 + 88);
    *(void *)(a2 + 77) = *(void *)(a2 + 101);
    unint64_t v35 = v22;
    unsigned int v37 = v49;
  }
  else
  {
    uint64_t v34 = (v11 >> 3) - 1;
    unint64_t v35 = sub_1CD7F6604(*(void *)(a1 + 16), (uint64_t)v22, v49, v34, 0, a3, 0);
    unsigned int v37 = v36;
    uint64_t v38 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v45 + 432), v46);
    if (v38) {
      int v39 = *((_DWORD *)v38 + 3);
    }
    else {
      int v39 = 0;
    }
    *(void *)(a2 + 64) = (unint64_t)v38 | 4;
    *(void *)(a2 + 72) = v34;
    *(_DWORD *)(a2 + 80) = v39;
    *(unsigned char *)(a2 + 84) = 0;
    uint64_t v40 = *(void *)(a2 + 16);
  }
  *(void *)(a2 + 48) = v35;
  *(_DWORD *)(a2 + 56) = v37;
  uint64_t v41 = *(void *)(a1 + 16);
  uint64_t v42 = *(void *)(a2 + 24);
  long long v50 = *(_OWORD *)(a2 + 64);
  uint64_t v51 = *(void *)(a2 + 80);
  long long v52 = 0u;
  long long v53 = 0u;
  *(void *)(a2 + 112) = sub_1CD7FAEE8(v41, 1, (uint64_t)a3, v21, 0, v40, v42, v32, (uint64_t)v35, v37, &v50, 3, 0, 0, 0, 0, &v52);
  *(_DWORD *)(a2 + 120) = v43;
  if ((v21 - 15) <= 0x9Bu) {
    LOBYTE(v21) = sub_1CB8C2FBC(&v54);
  }
  LOBYTE(v52) = v21;
  uint64_t result = sub_1CB87E200((unsigned __int8 *)&v52);
  int v44 = result;
  if (result >= 0x41) {
    operator new[]();
  }
  if (*(_DWORD *)(a2 + 136) >= 0x41u)
  {
    uint64_t result = *(void *)(a2 + 128);
    if (result) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  *(void *)(a2 + 128) = 128;
  *(_DWORD *)(a2 + 136) = v44;
  char v19 = 7;
LABEL_21:
  *(unsigned char *)(a2 + 144) = v19;
  return result;
}

uint64_t *sub_1CCF86AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    uint64_t v19 = *(void *)(a2 + 48);
    uint64_t v20 = *(void *)(a2 + 56);
    long long v21 = *(_OWORD *)(a2 + 64);
    uint64_t v36 = *(void *)(a2 + 80);
    long long v34 = 0u;
    long long v35 = v21;
    long long v33 = 0u;
    char v22 = sub_1CD7EA9CC(v17, 3, 0);
    uint64_t v23 = sub_1CD7FB71C(v17, v10, v18, a3, a4, a5, v19, v20, (uint64_t)&v35, 3, 0, v22, 0, 0, &v33);
    int v25 = v24;
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)a2;
    uint64_t v28 = *(void *)(a2 + 8);
    uint64_t v29 = *(void *)(a2 + 32);
    uint64_t v30 = *(void *)(a2 + 40);
    long long v31 = *(_OWORD *)(a2 + 88);
    uint64_t v32 = *(void *)(a2 + 104);
    long long v33 = 0u;
    long long v34 = 0u;
    return sub_1CD7F00F8(v26, v27, v28, a3, (uint64_t)v23, v25, v29, v30, &v31, 0, 0, 0, &v33, 0);
  }
  else
  {
    unsigned int v11 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v12 = *(llvm **)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *((void *)v11 + 104);
    if (v14) {
      __int16 v15 = *(_WORD *)(v14 + 8);
    }
    else {
      __int16 v15 = 0;
    }
    return sub_1CD7F3564(v11, (const char *)0xD8, a3, v12, v13, a4, a5, v15);
  }
}

void sub_1CCF86C50(uint64_t a1, uint64_t a2)
{
  v5[8] = *MEMORY[0x1E4F143B8];
  v4[0] = v5;
  v4[1] = (void *)0x1000000000;
  if (*(_DWORD *)(a1 + 8)) {
    sub_1CD41B598((uint64_t)v4, a1);
  }
  sub_1CD41B598(a1, a2);
  sub_1CD41B598(a2, (uint64_t)v4);
  if (v4[0] != v5) {
    free(v4[0]);
  }
}

void sub_1CCF86D04(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  if (!sub_1CD407020(a2))
  {
    unint64_t v9 = sub_1CCF870BC(a1, a3, a2);
    unsigned int v10 = *(_DWORD *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v11 = (unsigned __int8 **)(*(void *)a4 + 16 * v10);
    *unsigned int v11 = v9;
    v11[1] = v8;
    ++*(_DWORD *)(a4 + 8);
    return;
  }
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v12 = *(uint64_t **)(a2 + 40);
  uint64_t v15 = *v12;
  uint64_t v14 = v12[1];
  __int16 v16 = (char *)(v13 + 40 * *(unsigned __int16 *)(a2 + 56));
  unsigned int v37 = v39;
  uint64_t v38 = 0x400000000;
  sub_1CD3E560C((uint64_t)&v37, (char *)(v13 + 40), v16);
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = v37;
  unint64_t v20 = v38;
  v31[0] = 0;
  v31[1] = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  char v34 = 4;
  long long v21 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v29 = v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&v29, v21, 2);
  }
  int v30 = *(_DWORD *)(a2 + 60);
  sub_1CCFF9554(v17, v18, a3, v15, v14, (uint64_t)v19, v20, (uint64_t)v31, (uint64_t)v35, (uint64_t)&v29, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
  if (v29)
  {
    int v22 = *v29;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        uint64_t v26 = v29;
      }
      else {
        uint64_t v26 = 0;
      }
      if ((v22 - 3) < 0xFFFFFFFE)
      {
        if (v22 == 3) {
          *((void *)v29 + 1) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v27 = (unint64_t)(v26 + 8);
    }
    else
    {
      if ((v29[1] & 0x7F) != 2 && !*((_DWORD *)v29 + 3)) {
        goto LABEL_11;
      }
      uint64_t v28 = *((void *)v29 + 2);
      if ((v28 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v27 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v27) {
        goto LABEL_11;
      }
    }
    uint64_t v36 = &v29;
    sub_1CC5FA668(v27 + 16, &v36);
  }
LABEL_11:
  unsigned int v23 = *(_DWORD *)(a4 + 8);
  if (v23 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a4 + 16 * v23) = v35[0];
  unsigned int v24 = *(_DWORD *)(a4 + 12);
  unsigned int v25 = *(_DWORD *)(a4 + 8) + 1;
  *(_DWORD *)(a4 + 8) = v25;
  if (v25 >= v24) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a4 + 16 * v25) = v35[1];
  ++*(_DWORD *)(a4 + 8);
  if (v37 != v39) {
    free(v37);
  }
}

void sub_1CCF86FC0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  __int16 v16 = (unsigned int *)(*(void *)(a2 + 32) + 40 * sub_1CD407020(a2));
  int v17 = *(unsigned __int8 *)(*(void *)(*(void *)v16 + 40) + 16 * v16[2]);
  switch(v17)
  {
    case 10:
      break;
    case 11:
      a3 = a4;
      break;
    case 12:
      a3 = a5;
      break;
    case 13:
      a3 = a6;
      break;
    default:
      if (v17 == 14) {
        a3 = a7;
      }
      else {
        a3 = 637;
      }
      break;
  }

  sub_1CCF86D04(a1, a2, a3, a8);
}

unsigned __int8 *sub_1CCF870BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a3 + 56))
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    uint64_t v7 = *(unsigned int **)(a3 + 32);
    BOOL v59 = &v7[10 * *(unsigned __int16 *)(a3 + 56)];
    uint64_t v61 = 0;
    do
    {
      long long v69 = *(_OWORD *)(*(void *)(*(void *)v7 + 40) + 16 * v7[2]);
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v69, *(llvm::LLVMContext **)(*(void *)(v3 + 16) + 56));
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v7;
      unsigned int v11 = v7[2];
      __int16 v12 = (*(uint64_t (**)(void))(**(void **)(v3 + 8) + 928))();
      if ((*(unsigned int (**)(void))(**(void **)(v3 + 8) + 928))()) {
        __int16 v13 = 0;
      }
      else {
        __int16 v13 = 2;
      }
      __int16 v14 = v13 | v12;
      if (v6 >= v61)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v4) >> 4) + 1;
        if (v15 > 0x555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((v61 - v4) >> 4) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((v61 - v4) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v61 - v4) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v16 = 0x555555555555555;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 > 0x555555555555555) {
            sub_1CB833614();
          }
          int v17 = (char *)operator new(48 * v16);
        }
        else
        {
          int v17 = 0;
        }
        uint64_t v18 = &v17[16 * ((v6 - v4) >> 4)];
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = v10;
        *((_DWORD *)v18 + 4) = v11;
        *((_DWORD *)v18 + 5) = 0;
        *((void *)v18 + 3) = v9;
        *((_WORD *)v18 + 16) = v14;
        *((_WORD *)v18 + 17) = 0;
        *((void *)v18 + 5) = 0;
        if (v6 == v4)
        {
          uint64_t v4 = &v17[16 * ((v6 - v4) >> 4)];
          uint64_t v3 = a1;
        }
        else
        {
          uint64_t v19 = &v17[16 * ((v6 - v4) >> 4)];
          uint64_t v3 = a1;
          do
          {
            long long v20 = *((_OWORD *)v6 - 3);
            long long v21 = *((_OWORD *)v6 - 1);
            *((_OWORD *)v19 - 2) = *((_OWORD *)v6 - 2);
            *((_OWORD *)v19 - 1) = v21;
            *((_OWORD *)v19 - 3) = v20;
            v19 -= 48;
            v6 -= 48;
          }
          while (v6 != v4);
          uint64_t v6 = v4;
          uint64_t v4 = v19;
        }
        uint64_t v61 = &v17[48 * v16];
        uint64_t v5 = v18 + 48;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = v10;
        *((_DWORD *)v6 + 4) = v11;
        *((_DWORD *)v6 + 5) = 0;
        *((void *)v6 + 3) = v9;
        *((_WORD *)v6 + 16) = v14;
        *((_WORD *)v6 + 17) = 0;
        uint64_t v5 = v6 + 48;
        *((void *)v6 + 5) = 0;
      }
      v7 += 10;
      uint64_t v6 = v5;
    }
    while (v7 != v59);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v61 = 0;
  }
  uint64_t v22 = *(void *)(v3 + 8);
  uint64_t v23 = *(void *)(v3 + 16);
  unsigned int v24 = *(char **)(v22 + 8 * a2 + 174048);
  unsigned __int8 v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v22 + 32))(v22, *(void *)(**(void **)(v23 + 40) + 40) + 272, 0);
  size_t v26 = sub_1CD7EDF94(v23, v24, v25, 0);
  LODWORD(v23) = v27;
  long long v67 = *(_OWORD *)*(void *)(a3 + 40);
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v67, *(llvm::LLVMContext **)(*(void *)(v3 + 16) + 56));
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v3 + 8);
  uint64_t v31 = *(void *)(v3 + 16);
  uint64_t v32 = v31 + 112;
  uint64_t v65 = v31 + 112;
  uint64_t v66 = 0;
  uint64_t v33 = **(void **)(v31 + 40);
  int v60 = v23;
  if ((sub_1CD80D0F4(v30, v31, a3, (uint64_t)&v65) & 1) == 0)
  {
    int v36 = 0;
    int v55 = v66;
    uint64_t v35 = a1;
    goto LABEL_34;
  }
  uint64_t v34 = **(void **)(*(void *)(v33 + 24) + 16);
  if (v29 == v34)
  {
    int v55 = v66;
    uint64_t v35 = a1;
LABEL_32:
    int v36 = 1;
    uint64_t v32 = v65;
    goto LABEL_34;
  }
  int v55 = v66;
  uint64_t v35 = a1;
  if (*(_DWORD *)(v34 + 8) == 7) {
    goto LABEL_32;
  }
  int v36 = 0;
LABEL_34:
  *(void *)&long long v69 = 0;
  DWORD2(v69) = 0;
  uint64_t v70 = 0;
  __int16 v71 = v71 & 0xFC00 | 0x20;
  __int16 v72 = 0;
  uint64_t v73 = 0xFFFFFFFFLL;
  size_t v74 = 0;
  int v75 = 0;
  __n128 __p = 0;
  int v77 = 0;
  uint64_t v37 = *(void *)(v35 + 8);
  uint64_t v38 = *(void *)(v35 + 16);
  uint64_t v78 = 0;
  uint64_t v79 = v38;
  uint64_t v80 = 0;
  int v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = v85;
  uint64_t v84 = 0x2000000000;
  v85[192] = v86;
  v85[193] = 0x2000000000;
  v86[64] = v87;
  v86[65] = 0x2000000000;
  v87[192] = v88;
  v87[193] = 0x400000000;
  v88[64] = 0;
  v88[88] = 0;
  int v39 = (*(uint64_t (**)(void))(*(void *)v37 + 928))();
  uint64_t v40 = *(unsigned __int8 **)(a3 + 64);
  uint64_t v62 = v40;
  if (v40) {
    llvm::MetadataTracking::track((uint64_t)&v62, v40, 2);
  }
  int v63 = *(_DWORD *)(a3 + 60);
  if (v80)
  {
    int v50 = *v80;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        long long v53 = v80;
      }
      else {
        long long v53 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *((void *)v80 + 1) = 0;
        }
        goto LABEL_37;
      }
      unint64_t v52 = (unint64_t)(v53 + 8);
    }
    else
    {
      if ((v80[1] & 0x7F) != 2 && !*((_DWORD *)v80 + 3)) {
        goto LABEL_37;
      }
      uint64_t v51 = *((void *)v80 + 2);
      if ((v51 & 4) == 0) {
        goto LABEL_37;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (!v52) {
        goto LABEL_37;
      }
    }
    long long v68 = &v80;
    sub_1CC5FA668(v52 + 16, &v68);
  }
LABEL_37:
  uint64_t v80 = v62;
  if (v62) {
    llvm::MetadataTracking::track((uint64_t)&v80, v62, 2);
  }
  *(void *)&long long v69 = v32;
  int v41 = v55;
  if (!v36) {
    int v41 = 0;
  }
  int v81 = v63;
  DWORD2(v69) = v41;
  int v42 = *(_DWORD *)(*(void *)(v35 + 8) + 4 * a2 + 181700);
  uint64_t v70 = v29;
  size_t v74 = v26;
  int v75 = v60;
  LODWORD(v73) = -1431655765 * ((unint64_t)(v5 - v4) >> 4);
  HIDWORD(v73) = v42;
  if (__p)
  {
    int v77 = __p;
    operator delete(__p);
  }
  __n128 __p = v4;
  int v77 = v5;
  uint64_t v78 = v61;
  (***(void (****)(void))(v79 + 24))();
  LOBYTE(v72) = v36;
  if (v39) {
    __int16 v43 = 0;
  }
  else {
    __int16 v43 = 2;
  }
  __int16 v71 = v43 | v39 | v71 & 0xFFFC;
  HIBYTE(v72) = 1;
  if (v62)
  {
    int v44 = *v62;
    if ((v44 - 4) <= 0x1E)
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        goto LABEL_50;
      }
      uint64_t v54 = *((void *)v62 + 2);
      if ((v54 & 4) == 0) {
        goto LABEL_50;
      }
      unint64_t v49 = v54 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
    if ((v44 - 3) >= 0xFFFFFFFE) {
      uint64_t v48 = v62;
    }
    else {
      uint64_t v48 = 0;
    }
    if ((v44 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v49 = (unint64_t)(v48 + 8);
LABEL_58:
      long long v68 = &v62;
      sub_1CC5FA668(v49 + 16, &v68);
      goto LABEL_50;
    }
    if (v44 == 3) {
      *((void *)v62 + 1) = 0;
    }
  }
LABEL_50:
  uint64_t v45 = &v62;
  sub_1CCFB0250(*(void *)(v35 + 8), (uint64_t)&v69, (uint64_t)&v62);
  if (!v64) {
    uint64_t v45 = (unsigned __int8 **)(*(void *)(v35 + 16) + 192);
  }
  int v46 = *v45;
  sub_1CD78F470(&v69);
  return v46;
}

uint64_t sub_1CCF877F8(unsigned __int8 a1, char a2)
{
  unsigned __int8 v9 = a1;
  char v8 = a2;
  unint64_t v3 = sub_1CB87E200(&v9);
  if (v2 == 1) {
  unint64_t v4 = sub_1CB87E200((unsigned __int8 *)&v8);
  }
  if (v5 == 1)
  {
    unint64_t v7 = v4;
    unint64_t v4 = v7;
  }
  return sub_1CB883124(v8, v3 / v4);
}

void sub_1CCF87888()
{
}

void *sub_1CCF8789C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2641A00;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCF878E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2641A00;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCF87910(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(uint64_t **)(result + 8);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v4 == *v3)
  {
    uint64_t v6 = *((unsigned int *)v3 + 5);
    unint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != v2)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      unint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = v3[1];
  }
  else
  {
    uint64_t v10 = *((unsigned int *)v3 + 4);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    unint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t result = *v7;
    if (*v7 == -1)
    {
      __int16 v13 = 0;
LABEL_26:
      if (v13) {
        unint64_t v7 = v13;
      }
      if (*v7 != v2) {
        unint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      __int16 v13 = 0;
      int v14 = 1;
      while (result != v2)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = result == -2;
        }
        if (v15) {
          __int16 v13 = v7;
        }
        unsigned int v16 = v12 + v14++;
        unsigned int v12 = v16 & v11;
        unint64_t v7 = (void *)(v4 + 8 * (v16 & v11));
        uint64_t result = *v7;
        if (*v7 == -1) {
          goto LABEL_26;
        }
      }
    }
  }
  uint64_t v17 = 16;
  if (v4 == v5) {
    uint64_t v17 = 20;
  }
  if (v7 != (void *)(v4 + 8 * *(unsigned int *)((char *)v3 + v17)))
  {
    *unint64_t v7 = -2;
    ++*((_DWORD *)v3 + 6);
  }
  return result;
}

uint64_t sub_1CCF87D30(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6)
{
  int v12 = a3;
  unsigned int v13 = 2;
  do
  {
    *a5 = v13;
    *((void *)a5 + 1) = 0;
    if (v12 == v13 || sub_1CD787E7C(a5, a3, a4))
    {
      uint64_t v14 = *(void *)a5;
      if (a6) {
        uint64_t result = llvm::RTLIB::getFPTOSINT(a1, a2, v14);
      }
      else {
        uint64_t result = llvm::RTLIB::getFPTOUINT(a1, a2, v14);
      }
    }
    else
    {
      uint64_t result = 637;
    }
    if (v13 > 6) {
      break;
    }
    ++v13;
  }
  while (result == 637);
  return result;
}

int *sub_1CCF88360(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 8;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      uint64_t v9 = 0;
      return (int *)(v3 + 8 * v9);
    }
  }
  int v4 = v2 - 1;
  LODWORD(v5) = (37 * *a2) & (v2 - 1);
  uint64_t v6 = (int *)(v3 + 8 * v5);
  int v7 = *v6;
  if (*a2 == *v6) {
    return v6;
  }
  int v8 = 1;
  while (v7 != -1)
  {
    int v11 = v5 + v8++;
    uint64_t v5 = v11 & v4;
    int v7 = *(_DWORD *)(v3 + 8 * v5);
    if (*a2 == v7) {
      return (int *)(v3 + 8 * v5);
    }
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v9 = 8;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 16);
  }
  return (int *)(v3 + 8 * v9);
}

uint64_t sub_1CCF8841C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCF885D8(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    if (*(void *)(a1 + v8 + 8)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = *(_DWORD *)(a1 + v8 + 16) > 0xFFFFFFFD;
    }
    if (!v10)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 192);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CCF885D8(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CCF885D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_OWORD *)(result + 8);
    uint64_t v9 = (_OWORD *)(result + 200);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = *(_OWORD **)(result + 8);
    uint64_t v9 = (_OWORD *)((char *)v8 + 24 * v7);
  }
  do
  {
    *uint64_t v8 = xmmword_1CD923640;
    uint64_t v8 = (_OWORD *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    if (*(void *)a2) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = *(_DWORD *)(a2 + 8) > 0xFFFFFFFD;
    }
    if (!v10)
    {
      uint64_t v13 = 0;
      uint64_t result = sub_1CD79A6B0((uint64_t)v5, a2, &v13);
      uint64_t v11 = v13;
      uint64_t v12 = *(void *)a2;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)uint64_t v11 = v12;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1CCF886BC(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD3F1F64((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CB904770(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -1) {
    --a1[1];
  }
  return a4;
}

uint64_t *sub_1CCF88D04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1CD7A1C20(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
  unsigned int v7 = v6;
  long long v51 = *(_OWORD *)*(void *)(a2 + 40);
  uint64_t v8 = *(void *)(v5 + 40) + 16 * v6;
  uint64_t v9 = *(llvm **)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  unint64_t v49 = *(llvm **)v8;
  uint64_t v50 = v10;
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v47 = v11;
  char v12 = v51;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v47, v11, 2);
  }
  int v48 = *(_DWORD *)(a2 + 60);
  if (!v12
    || (v12 - 15) < 0x9Cu
    || (uint64_t v13 = *(uint64_t **)a1, (_BYTE)v9)
    && (v9 == 1 || v13[v9 + 12])
    && ((v14 = *((unsigned __int8 *)v13 + 390 * v9 + 4048), v14 >= 2) ? (BOOL v15 = v14 == 4) : (BOOL v15 = 1),
        v15)
    || (int v42 = sub_1CD019DD4(v13, a2, *(void *)(a1 + 8))) == 0)
  {
    unsigned int v16 = sub_1CD3E12F4((unsigned __int8 *)&v49, (uint64_t)v11, v4);
    unsigned int v19 = v16 - sub_1CD3E12F4((unsigned __int8 *)&v51, v17, v18);
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)a1, (uint64_t)v49, v50, *(void *)(**(void **)(*(void *)(a1 + 8) + 40) + 40) + 272, 1);
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(a1 + 8);
    unsigned int v24 = v49;
    uint64_t v25 = v50;
    uint64_t v26 = *(void *)(v23 + 832);
    if (v26) {
      __int16 v27 = *(_WORD *)(v26 + 8);
    }
    else {
      __int16 v27 = 0;
    }
    uint64_t v28 = sub_1CD7F3564(*(llvm::APFloatBase **)(a1 + 8), (const char *)0xBA, (uint64_t)&v47, v49, v50, v5, v7, v27);
    uint64_t v30 = v29;
    uint64_t v31 = sub_1CD7EBF14(*(void *)(a1 + 8), v19, (const llvm::APInt *)&v47, ShiftAmountTy, v22, 0, 0);
    uint64_t v34 = *(void *)(v23 + 832);
    if (v34) {
      LOWORD(v34) = *(_WORD *)(v34 + 8);
    }
    uint64_t v35 = sub_1CCFDED5C(v23, 177, (const llvm::APInt *)&v47, v24, v25, (uint64_t)v28, v30, v33, (uint64_t)v31, v32, v34);
  }
  else
  {
    uint64_t v43 = (uint64_t)v42;
    int v44 = *(llvm::APFloatBase **)(a1 + 8);
    uint64_t v45 = *((void *)v44 + 104);
    if (v45) {
      __int16 v46 = *(_WORD *)(v45 + 8);
    }
    else {
      __int16 v46 = 0;
    }
    uint64_t v35 = sub_1CD7F3564(v44, (const char *)0xC8, (uint64_t)&v47, v9, v10, v43, v11, v46);
  }
  int v36 = v35;
  if (v47)
  {
    int v37 = *v47;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        int v39 = v47;
      }
      else {
        int v39 = 0;
      }
      if ((v37 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_29:
        unint64_t v52 = &v47;
        sub_1CC5FA668(v40 + 16, &v52);
        return v36;
      }
      if (v37 == 3) {
        *((void *)v47 + 1) = 0;
      }
    }
    else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
    {
      uint64_t v41 = *((void *)v47 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_29;
        }
      }
    }
  }
  return v36;
}

uint64_t *sub_1CCF88FA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = sub_1CD7A1C20((uint64_t)a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
  unint64_t v7 = v6;
  uint64_t v8 = *(void **)(a2 + 40);
  uint64_t v9 = v8[1];
  v54[0] = *v8;
  v54[1] = v9;
  uint64_t v10 = *(void *)(v5 + 40) + 16 * v6;
  uint64_t v11 = *(llvm **)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  unint64_t v52 = *(llvm **)v10;
  uint64_t v53 = v12;
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v50 = v13;
  int v14 = LOBYTE(v54[0]);
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v50, v13, 2);
  }
  int v51 = *(_DWORD *)(a2 + 60);
  if (v14)
  {
    if ((v14 - 15) < 0x9C) {
      goto LABEL_14;
    }
  }
  else if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
  {
    goto LABEL_14;
  }
  if ((_BYTE)v11)
  {
    uint64_t v15 = *a1;
    if (*(void *)(*a1 + 8 * v11 + 96))
    {
      unsigned int v16 = *(unsigned __int8 *)(v15 + 390 * v11 + 4045);
      if (v16 >= 2 && v16 != 4)
      {
        unsigned int v40 = *(unsigned __int8 *)(v15 + 390 * v11 + 4050);
        if (v40 >= 2 && v40 != 4)
        {
          if (*(unsigned char *)(v15 + 390 * v11 + 4047))
          {
            if (*(unsigned char *)(v15 + 390 * v11 + 4046))
            {
              int v42 = sub_1CD019244(v15, a2, a1[1]);
              if (v42)
              {
                uint64_t v44 = (uint64_t)v42;
                uint64_t v45 = (llvm::APFloatBase *)a1[1];
                uint64_t v46 = *((void *)v45 + 104);
                if (v46) {
                  __int16 v47 = *(_WORD *)(v46 + 8);
                }
                else {
                  __int16 v47 = 0;
                }
                uint64_t v34 = sub_1CD7F3564(v45, (const char *)0xC8, (uint64_t)&v50, v11, v12, v44, v43, v47);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *(unsigned __int16 *)(a2 + 24);
  if (v18 == 183)
  {
    unsigned int v19 = sub_1CD3E12F4((unsigned __int8 *)&v52, v18, v4);
    unsigned __int8 v22 = sub_1CD3E12F4((unsigned __int8 *)v54, v20, v21);
    unsigned int v49 = v19;
    if (v19 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v48);
    }
    int v48 = (unsigned __int8 **)(1 << v22);
    uint64_t v23 = a1[1];
    unsigned int v24 = v52;
    uint64_t v25 = v53;
    uint64_t v26 = sub_1CD7EBB14(v23, (llvm::LLVMContext *)&v48, (const llvm::APInt *)&v50, (uint64_t)v52, v53, 0, 0);
    uint64_t v29 = *(void *)(v23 + 832);
    if (v29) {
      LOWORD(v29) = *(_WORD *)(v29 + 8);
    }
    uint64_t v5 = (uint64_t)sub_1CCFDED5C(v23, 172, (const llvm::APInt *)&v50, v24, v25, v5, v7, v28, v26, v27, v29);
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | v30;
    if (v49 >= 0x41 && v48) {
      MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
    }
    uint64_t v18 = *(unsigned __int16 *)(a2 + 24);
    uint64_t v11 = v52;
    uint64_t v12 = v53;
  }
  uint64_t v31 = (llvm::APFloatBase *)a1[1];
  uint64_t v32 = *((void *)v31 + 104);
  if (v32) {
    __int16 v33 = *(_WORD *)(v32 + 8);
  }
  else {
    __int16 v33 = 0;
  }
  uint64_t v34 = sub_1CD7F3564(v31, (const char *)v18, (uint64_t)&v50, v11, v12, v5, (void *)v7, v33);
LABEL_26:
  if (v50)
  {
    int v35 = *v50;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        int v37 = v50;
      }
      else {
        int v37 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_36:
        int v48 = &v50;
        sub_1CC5FA668(v38 + 16, &v48);
        return v34;
      }
      if (v35 == 3) {
        *((void *)v50 + 1) = 0;
      }
    }
    else if ((v50[1] & 0x7F) == 2 || *((_DWORD *)v50 + 3))
    {
      uint64_t v39 = *((void *)v50 + 2);
      if ((v39 & 4) != 0)
      {
        unint64_t v38 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_36;
        }
      }
    }
  }
  return v34;
}

uint64_t *sub_1CCF89304(uint64_t a1, uint64_t a2)
{
  llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)&v20);
  uint64_t v4 = v21;
  uint64_t v5 = v22;
  uint64_t v6 = sub_1CD7A1C20(a1, *(void *)(*(void *)(a2 + 32) + 160), *(void *)(*(void *)(a2 + 32) + 168));
  int v8 = v7;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 26);
  if (((v9 >> 10) & 2) != 0) {
    __int16 v10 = (*(_WORD *)(a2 + 26) >> 10) & 3;
  }
  else {
    __int16 v10 = 1;
  }
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v20 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&v20, v11, 2);
    unsigned int v9 = *(unsigned __int16 *)(a2 + 26);
  }
  LODWORD(v21) = *(_DWORD *)(a2 + 60);
  uint64_t v12 = *(uint64_t **)(a2 + 32);
  uint64_t v13 = sub_1CD7FDDF4(*(void *)(a1 + 8), v4, v5, (uint64_t)&v20, *v12, v12[1], v12[5], v12[6], v12[10], v12[11], v12[15], v12[16], v6, v8, *(void *)(a2 + 80), *(void *)(a2 + 88), *(void *)(a2 + 96), (v9 >> 7) & 7, v10,
          HIBYTE(v10));
  sub_1CD7B343C(a1, a2, 1, (uint64_t)v13, 1uLL, v14);
  if (v20)
  {
    int v15 = *v20;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v20;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_16:
        uint64_t v23 = &v20;
        sub_1CC5FA668(v18 + 16, &v23);
        return v13;
      }
      if (v15 == 3) {
        *((void *)v20 + 1) = 0;
      }
    }
    else if ((v20[1] & 0x7F) == 2 || *((_DWORD *)v20 + 3))
    {
      uint64_t v19 = *((void *)v20 + 2);
      if ((v19 & 4) != 0)
      {
        unint64_t v18 = v19 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_16;
        }
      }
    }
  }
  return v13;
}

uint64_t *sub_1CCF894B4(unint64_t *a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::LLVMContext **)(a1[1] + 56), **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)&v26);
  uint64_t v4 = v27;
  uint64_t v5 = v28;
  uint64_t v6 = sub_1CD7A1C20((uint64_t)a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48));
  int v8 = v7;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 26);
  if (((v9 >> 10) & 2) != 0) {
    char v10 = (v9 >> 10) & 3;
  }
  else {
    char v10 = 1;
  }
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v24 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v24, v11, 2);
  }
  int v25 = *(_DWORD *)(a2 + 60);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)v12;
  LODWORD(v27) = *(_DWORD *)(v12 + 8);
  uint64_t v26 = (unsigned __int8 **)v13;
  uint64_t v28 = v6;
  int v29 = v8;
  uint64_t v30 = *(void *)(v12 + 80);
  int v31 = *(_DWORD *)(v12 + 88);
  uint64_t v32 = *(void *)(v12 + 120);
  int v33 = *(_DWORD *)(v12 + 128);
  int v35 = *(_DWORD *)(v12 + 168);
  uint64_t v34 = *(void *)(v12 + 160);
  int v37 = *(_DWORD *)(v12 + 208);
  uint64_t v36 = *(void *)(v12 + 200);
  uint64_t v14 = a1[1];
  uint64_t v15 = sub_1CD7F95FC(v14, v4, v5, 1, 0);
  uint64_t v17 = sub_1CD7FE8CC(v14, v15, v16, *(void *)(a2 + 80), *(void *)(a2 + 88), (uint64_t)&v24, (uint64_t *)&v26, 6, *(void *)(a2 + 96), (*(unsigned __int16 *)(a2 + 26) >> 7) & 7, v10);
  sub_1CD7B343C((uint64_t)a1, a2, 1, (uint64_t)v17, 1uLL, v18);
  if (v24)
  {
    int v19 = *v24;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        uint64_t v21 = v24;
      }
      else {
        uint64_t v21 = 0;
      }
      if ((v19 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_16:
        uint64_t v26 = &v24;
        sub_1CC5FA668(v22 + 16, &v26);
        return v17;
      }
      if (v19 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v23 = *((void *)v24 + 2);
      if ((v23 & 4) != 0)
      {
        unint64_t v22 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_16;
        }
      }
    }
  }
  return v17;
}

uint64_t *sub_1CCF8970C(unint64_t *a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::LLVMContext **)(a1[1] + 56), **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)&v48);
  uint64_t v4 = (llvm *)*((void *)&v48 + 1);
  uint64_t v5 = v49;
  uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
  int v7 = *(unsigned __int8 **)(a2 + 64);
  int v42 = v7;
  int v8 = v6;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v42, v7, 2);
    int v8 = *(unsigned __int16 *)(a2 + 24);
  }
  int v43 = *(_DWORD *)(a2 + 60);
  if (v8 == 133)
  {
    if ((_BYTE)v4)
    {
      unint64_t v10 = *a1;
      if ((v4 == 1 || *(void *)(v10 + 8 * v4 + 96))
        && *(unsigned char *)(v10 + 390 * v4 + 3995)
        && (*(unsigned char *)(v10 + 390 * v4 + 3994) | 4) == 4)
      {
        uint64_t v6 = 132;
      }
    }
  }
  else if (v8 == 209)
  {
    if ((_BYTE)v4)
    {
      unint64_t v9 = *a1;
      if ((v4 == 1 || *(void *)(v9 + 8 * v4 + 96))
        && *(unsigned char *)(v9 + 390 * v4 + 4071)
        && (*(unsigned char *)(v9 + 390 * v4 + 4070) | 4) == 4)
      {
        uint64_t v6 = 208;
      }
    }
  }
  BOOL v11 = sub_1CD407020(a2);
  uint64_t v12 = (llvm::APFloatBase *)a1[1];
  if (v11)
  {
    *(void *)&long long v48 = v4;
    *((void *)&v48 + 1) = v5;
    LOBYTE(v49) = 1;
    uint64_t v50 = 0;
    uint64_t v13 = *(void *)(a2 + 32);
    int v14 = *(_DWORD *)(v13 + 8);
    uint64_t v44 = *(void *)v13;
    int v45 = v14;
    uint64_t v46 = *(void *)(v13 + 40);
    int v47 = *(_DWORD *)(v13 + 48);
    uint64_t v15 = sub_1CD7EB5F0(v12, (const char *)v6, (const llvm::APInt *)&v42, (uint64_t *)&v48, 2, &v44, 2);
    unsigned int v17 = v16;
    sub_1CD7B343C((uint64_t)a1, a2, 1, (uint64_t)v15, 1uLL, v18);
  }
  else
  {
    uint64_t v21 = *(uint64_t **)(a2 + 32);
    uint64_t v22 = *v21;
    uint64_t v23 = (void *)v21[1];
    uint64_t v24 = *((void *)v12 + 104);
    if (v24) {
      __int16 v25 = *(_WORD *)(v24 + 8);
    }
    else {
      __int16 v25 = 0;
    }
    uint64_t v15 = sub_1CD7F3564(v12, (const char *)v6, (uint64_t)&v42, v4, v5, v22, v23, v25);
    unsigned int v17 = v19;
  }
  uint64_t v26 = a1[1];
  int v27 = *(unsigned __int16 *)(a2 + 24);
  if (v27 == 133 || v27 == 209) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 3;
  }
  long long v48 = *(_OWORD *)*(void *)(a2 + 40);
  unint64_t v30 = sub_1CD3DD468((unsigned __int8 *)&v48, v19, v20);
  uint64_t v32 = sub_1CD7EDE1C(v26, v30, v31);
  uint64_t v35 = *(void *)(v26 + 832);
  if (v35) {
    LOWORD(v35) = *(_WORD *)(v35 + 8);
  }
  uint64_t v36 = sub_1CCFDED5C(v26, v29, (const llvm::APInt *)&v42, v4, v5, (uint64_t)v15, v17, v34, v32, v33, v35);
  if (v42)
  {
    int v37 = *v42;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = v42;
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v37 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_41:
        *(void *)&long long v48 = &v42;
        sub_1CC5FA668(v40 + 16, &v48);
        return v36;
      }
      if (v37 == 3) {
        *((void *)v42 + 1) = 0;
      }
    }
    else if ((v42[1] & 0x7F) == 2 || *((_DWORD *)v42 + 3))
    {
      uint64_t v41 = *((void *)v42 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_41;
        }
      }
    }
  }
  return v36;
}

uint64_t *sub_1CCF89A54(uint64_t **a1, uint64_t a2, BOOL a3)
{
  uint64_t v5 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v102 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v102, v5, 2);
  }
  int v103 = *(_DWORD *)(a2 + 60);
  uint64_t v6 = *(long long **)(a2 + 32);
  long long v101 = *v6;
  uint64_t v8 = *((void *)v6 + 5);
  uint64_t v7 = *((void *)v6 + 6);
  unsigned int v9 = sub_1CD7878C0((unsigned int *)&v101, (uint64_t)v5, a3);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 24);
  int v11 = v10 & 0xFFFE;
  if (v11 == 86)
  {
    uint64_t v12 = sub_1CD7A1C20((uint64_t)a1, v101, *((uint64_t *)&v101 + 1));
LABEL_8:
    int v14 = (uint64_t *)v12;
    unsigned int v15 = v13;
    unsigned int v16 = sub_1CD7A1D8C((uint64_t)a1, v8, v7);
    goto LABEL_9;
  }
  if (v10 == 85 || v10 == 83)
  {
    uint64_t v12 = (uint64_t)sub_1CD7A1D8C((uint64_t)a1, v101, *((uint64_t *)&v101 + 1));
    goto LABEL_8;
  }
  int v14 = sub_1CD7A1C84((uint64_t)a1, v101, *((uint64_t *)&v101 + 1));
  unsigned int v15 = v32;
  unsigned int v16 = sub_1CD7A1C84((uint64_t)a1, v8, v7);
LABEL_9:
  uint64_t v19 = v16;
  uint64_t v20 = v17;
  uint64_t v21 = v15;
  long long v100 = *(_OWORD *)(v14[5] + 16 * v15);
  unsigned int v22 = sub_1CD3E12F4((unsigned __int8 *)&v100, v17, v18);
  if (v10 == 85)
  {
    uint64_t v24 = (uint64_t)a1[1];
    uint64_t v25 = *(void *)(v24 + 832);
    if (v25) {
      LOWORD(v25) = *(_WORD *)(v25 + 8);
    }
    uint64_t v26 = sub_1CCFDED5C(v24, 85, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v14, v15, v23, (uint64_t)v19, v20, v25);
LABEL_13:
    int v27 = v26;
    goto LABEL_14;
  }
  unsigned int v33 = v22;
  if (v10 == 83)
  {
    unsigned int v97 = v9;
    if (v9 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (!v9) {
      unint64_t v34 = 0;
    }
    uint64_t __src = v34;
    if (v22 > 0x40)
    {
      if (v97 != v22) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v98, (uint64_t)&__src);
    }
    else
    {
      unsigned int v99 = v22;
      unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
      if (!v22) {
        unint64_t v35 = 0;
      }
      unint64_t v98 = v35 & __src;
    }
    if (v97 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    uint64_t v37 = sub_1CD7EBB14((uint64_t)a1[1], (llvm::LLVMContext *)&v98, (const llvm::APInt *)&v102, v100, *((uint64_t *)&v100 + 1), 0, 0);
    uint64_t v39 = v38;
    uint64_t v40 = (uint64_t)a1[1];
    uint64_t v41 = *(void *)(v40 + 832);
    if (v41) {
      LOWORD(v41) = *(_WORD *)(v41 + 8);
    }
    int v43 = sub_1CCFDED5C(v40, 56, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v14, v21, v36, (uint64_t)v19, v20, v41);
    uint64_t v45 = (uint64_t)a1[1];
    uint64_t v46 = *(void *)(v45 + 832);
    if (v46) {
      LOWORD(v46) = *(_WORD *)(v46 + 8);
    }
    int v27 = sub_1CCFDED5C(v45, 169, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v43, v42, v44, v37, v39, v46);
    if (v99 >= 0x41 && v98) {
      MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
    }
    goto LABEL_14;
  }
  int v47 = *a1;
  if (v11 == 86)
  {
LABEL_48:
    if (v10 == 87) {
      uint64_t v48 = 177;
    }
    else {
      uint64_t v48 = 176;
    }
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v47, v100, *((uint64_t *)&v100 + 1), *(void *)(*(void *)a1[1][5] + 40) + 272, 1);
    uint64_t v53 = sub_1CD7EBF14((uint64_t)a1[1], v33 - v9, (const llvm::APInt *)&v102, ShiftAmountTy, v50, 0, 0);
    uint64_t v54 = v51;
    uint64_t v55 = (uint64_t)a1[1];
    uint64_t v56 = *(void *)(v55 + 832);
    if (v56) {
      LOWORD(v56) = *(_WORD *)(v56 + 8);
    }
    uint64_t v58 = sub_1CCFDED5C(v55, 175, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v14, v21, v52, (uint64_t)v53, v51, v56);
    uint64_t v60 = v59;
    if (v11 != 86)
    {
      uint64_t v61 = (uint64_t)a1[1];
      uint64_t v62 = *(void *)(v61 + 832);
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      uint64_t v19 = sub_1CCFDED5C(v61, 175, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v19, v20, v57, (uint64_t)v53, v54, v62);
      uint64_t v20 = v63;
    }
    uint64_t v64 = (uint64_t)a1[1];
    uint64_t v65 = *(void *)(v64 + 832);
    if (v65) {
      LOWORD(v65) = *(_WORD *)(v65 + 8);
    }
    long long v67 = sub_1CCFDED5C(v64, v10, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v58, v60, v57, (uint64_t)v19, v20, v65);
    uint64_t v69 = (uint64_t)a1[1];
    uint64_t v70 = *(void *)(v69 + 832);
    if (v70) {
      LOWORD(v70) = *(_WORD *)(v70 + 8);
    }
    uint64_t v26 = sub_1CCFDED5C(v69, v48, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v67, v66, v68, (uint64_t)v53, v54, v70);
    goto LABEL_13;
  }
  if ((_BYTE)v100)
  {
    if (v100 == 1)
    {
      if (v10 > 0x185) {
        goto LABEL_69;
      }
    }
    else if (!v47[v100 + 12] || v10 > 0x185)
    {
      goto LABEL_69;
    }
    if (!*((unsigned char *)v47 + 390 * v100 + v10 + 3862)) {
      goto LABEL_48;
    }
  }
LABEL_69:
  if (v10 == 82) {
    uint64_t v71 = 56;
  }
  else {
    uint64_t v71 = 57;
  }
  unsigned int v97 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  uint64_t __src = 1 << (v9 - 1);
  llvm::APInt::sext((uint64_t)&__src, v33, (uint64_t)&v98);
  if (v97 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  unsigned int v95 = v9;
  if (v9) {
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  }
  else {
    unint64_t v72 = 0;
  }
  uint64_t v94 = v72 & ~(1 << (v9 - 1));
  llvm::APInt::sext((uint64_t)&v94, v33, (uint64_t)&__src);
  if (v95 >= 0x41 && v94) {
    MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
  }
  uint64_t v73 = sub_1CD7EBB14((uint64_t)a1[1], (llvm::LLVMContext *)&v98, (const llvm::APInt *)&v102, v100, *((uint64_t *)&v100 + 1), 0, 0);
  uint64_t v75 = v74;
  uint64_t v77 = sub_1CD7EBB14((uint64_t)a1[1], (llvm::LLVMContext *)&__src, (const llvm::APInt *)&v102, v100, *((uint64_t *)&v100 + 1), 0, 0);
  uint64_t v79 = v78;
  uint64_t v80 = (uint64_t)a1[1];
  uint64_t v81 = *(void *)(v80 + 832);
  if (v81) {
    LOWORD(v81) = *(_WORD *)(v81 + 8);
  }
  uint64_t v83 = sub_1CCFDED5C(v80, v71, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v14, v21, v76, (uint64_t)v19, v20, v81);
  uint64_t v85 = (uint64_t)a1[1];
  unint64_t v86 = v82 & 0xFFFFFFFF00000000;
  uint64_t v87 = *(void *)(v85 + 832);
  if (v87) {
    LOWORD(v87) = *(_WORD *)(v87 + 8);
  }
  uint64_t v89 = sub_1CCFDED5C(v85, 167, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v83, v82, v84, v77, v79, v87);
  uint64_t v91 = (uint64_t)a1[1];
  uint64_t v92 = *(void *)(v91 + 832);
  if (v92) {
    LOWORD(v92) = *(_WORD *)(v92 + 8);
  }
  int v27 = sub_1CCFDED5C(v91, 168, (const llvm::APInt *)&v102, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v89, v88 | v86, v90, v73, v75, v92);
  if (v97 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v99 >= 0x41 && v98) {
    MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
  }
LABEL_14:
  if (v102)
  {
    int v28 = *v102;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        unint64_t v30 = v102;
      }
      else {
        unint64_t v30 = 0;
      }
      if ((v28 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v31 = (unint64_t)(v30 + 8);
LABEL_24:
        *(void *)&long long v101 = &v102;
        sub_1CC5FA668(v31 + 16, &v101);
        return v27;
      }
      if (v28 == 3) {
        *((void *)v102 + 1) = 0;
      }
    }
    else if ((v102[1] & 0x7F) == 2 || *((_DWORD *)v102 + 3))
    {
      uint64_t v93 = *((void *)v102 + 2);
      if ((v93 & 4) != 0)
      {
        unint64_t v31 = v93 & 0xFFFFFFFFFFFFFFF8;
        if (v31) {
          goto LABEL_24;
        }
      }
    }
  }
  return v27;
}

uint64_t *sub_1CCF8A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(BOOL **)(a2 + 40);
  BOOL v6 = *v4;
  uint64_t v5 = v4[1];
  llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), *v4, v5, (uint64_t)&v39);
  uint64_t v7 = v40;
  if (v6)
  {
    if (v6 - 15 < 0x9C)
    {
LABEL_13:
      int v11 = sub_1CD7A1C84(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
      unsigned int v13 = v12;
      int v14 = *(llvm::APFloatBase **)(a1 + 8);
      unsigned int v15 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v39 = v15;
      if (v15) {
        llvm::MetadataTracking::track((uint64_t)&v39, v15, 2);
      }
      LODWORD(v40) = *(_DWORD *)(a2 + 60);
      uint64_t v16 = v11[5] + 16 * v13;
      uint64_t v17 = *(llvm **)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v19 = *((void *)v14 + 104);
      if (v19) {
        __int16 v20 = *(_WORD *)(v19 + 8);
      }
      else {
        __int16 v20 = 0;
      }
      uint64_t v21 = v14;
      uint64_t v22 = 174;
      uint64_t v23 = (uint64_t)v11;
      uint64_t v24 = v13;
      goto LABEL_19;
    }
  }
  else if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(uint64_t **)a1;
  if ((_BYTE)v40 && (v40 == 1 || v8[v40 + 12]))
  {
    unsigned int v9 = *((unsigned __int8 *)v8 + 390 * v40 + 4036);
    BOOL v10 = v9 < 2 || v9 == 4;
    if (v10
      || (v40 == 1 || v8[v40 + 12])
      && !*((unsigned char *)v8 + 390 * v40 + 4030))
    {
      goto LABEL_13;
    }
  }
  uint64_t v31 = v41;
  unsigned int v32 = sub_1CD0198B8(v8, a2, *(void *)(a1 + 8), 0);
  if (!v32) {
    goto LABEL_13;
  }
  unint64_t v34 = v32;
  unint64_t v35 = v33;
  uint64_t v36 = *(llvm::APFloatBase **)(a1 + 8);
  uint64_t v37 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v39 = v37;
  if (v37) {
    llvm::MetadataTracking::track((uint64_t)&v39, v37, 2);
  }
  LODWORD(v40) = *(_DWORD *)(a2 + 60);
  uint64_t v38 = *((void *)v36 + 104);
  if (v38) {
    __int16 v20 = *(_WORD *)(v38 + 8);
  }
  else {
    __int16 v20 = 0;
  }
  uint64_t v21 = v36;
  uint64_t v22 = 200;
  uint64_t v17 = v7;
  uint64_t v18 = v31;
  uint64_t v23 = (uint64_t)v34;
  uint64_t v24 = v35;
LABEL_19:
  uint64_t v25 = sub_1CD7F3564(v21, (const char *)v22, (uint64_t)&v39, v17, v18, v23, v24, v20);
  if (v39)
  {
    int v26 = *v39;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        int v28 = v39;
      }
      else {
        int v28 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_29:
        uint64_t v42 = &v39;
        sub_1CC5FA668(v29 + 16, &v42);
        return v25;
      }
      if (v26 == 3) {
        *((void *)v39 + 1) = 0;
      }
    }
    else if ((v39[1] & 0x7F) == 2 || *((_DWORD *)v39 + 3))
    {
      uint64_t v30 = *((void *)v39 + 2);
      if ((v30 & 4) != 0)
      {
        unint64_t v29 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_29;
        }
      }
    }
  }
  return v25;
}

uint64_t *sub_1CCF8A4B8(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned int a4, char a5, uint64_t a6)
{
  long long v42 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  unsigned int v12 = sub_1CD3E12F4((unsigned __int8 *)&v42, a2, (BOOL)a3);
  unsigned int v13 = v12;
  if (a5)
  {
    long long v14 = v42;
    unsigned int v41 = v12;
    if (v12 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v40);
    }
    unint64_t v40 = 0;
    if (a4 != 1)
    {
      if (a4 - 1 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&v40, 0, a4 - 1);
      }
      else
      {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> (65 - a4);
        if (v41 > 0x40) {
          *(void *)v40 |= v15;
        }
        else {
          v40 |= v15;
        }
      }
    }
    uint64_t v16 = sub_1CD7EBB14(a6, (llvm::LLVMContext *)&v40, a3, v42, *((uint64_t *)&v42 + 1), 0, 0);
    uint64_t v19 = *(void *)(a6 + 832);
    if (v19) {
      LOWORD(v19) = *(_WORD *)(v19 + 8);
    }
    unint64_t v20 = a2 & 0xFFFFFFFF00000000;
    uint64_t v21 = sub_1CCFDED5C(a6, 167, a3, (llvm *)v14, *((uint64_t *)&v14 + 1), a1, a2, v18, v16, v17, v19);
    unsigned int v23 = v22;
    if (v41 >= 0x41 && v40) {
      MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    }
    long long v24 = v42;
    uint64_t v25 = v23 | v20;
    unsigned int v26 = ~v13 + a4;
    unsigned int v41 = v13;
    if (v13 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v40);
    }
    unint64_t v40 = 0;
    if (v26)
    {
      unsigned int v27 = v13 + v26;
      if (v13 + v26 > 0x3F) {
        llvm::APInt::setBitsSlowCase(&v40, v27, v13);
      }
      else {
        v40 |= 0xFFFFFFFFFFFFFFFFLL >> v26 << v27;
      }
    }
    uint64_t v28 = sub_1CD7EBB14(a6, (llvm::LLVMContext *)&v40, a3, v42, *((uint64_t *)&v42 + 1), 0, 0);
    uint64_t v31 = *(void *)(a6 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    unsigned int v32 = sub_1CCFDED5C(a6, 168, a3, (llvm *)v24, *((uint64_t *)&v24 + 1), (uint64_t)v21, v25, v30, v28, v29, v31);
    if (v41 >= 0x41 && v40) {
      MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    }
  }
  else
  {
    long long v33 = v42;
    unsigned int v41 = v12;
    if (v12 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v40);
    }
    unint64_t v40 = 0;
    if (a4)
    {
      if (a4 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&v40, 0, a4);
      }
      else
      {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
        if (v41 > 0x40) {
          *(void *)v40 |= v34;
        }
        else {
          v40 |= v34;
        }
      }
    }
    uint64_t v35 = sub_1CD7EBB14(a6, (llvm::LLVMContext *)&v40, a3, v42, *((uint64_t *)&v42 + 1), 0, 0);
    uint64_t v38 = *(void *)(a6 + 832);
    if (v38) {
      LOWORD(v38) = *(_WORD *)(v38 + 8);
    }
    unsigned int v32 = sub_1CCFDED5C(a6, 169, a3, (llvm *)v33, *((uint64_t *)&v33 + 1), a1, a2, v37, v35, v36, v38);
    if (v41 >= 0x41 && v40) {
      MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    }
  }
  return v32;
}

uint64_t sub_1CCF8A858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7, uint64_t a8, unsigned int a9)
{
  long long v49 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  unsigned int v17 = sub_1CD3E12F4((unsigned __int8 *)&v49, a2, a3);
  int v18 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v19 = *(unsigned __int8 **)(a1 + 64);
  int v47 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v47, v19, 2);
  }
  int v48 = *(_DWORD *)(a1 + 60);
  unint64_t v20 = (llvm::LLVMContext *)(2 * v17);
  unsigned int v46 = a6;
  uint64_t v45 = a4;
  if ((int)v20 > 63)
  {
    if (v20 == 64)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 6;
      goto LABEL_12;
    }
    if (v20 == 128)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 7;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v20)
    {
      case 0x20:
        uint64_t v21 = 0;
        unint64_t v22 = 5;
        goto LABEL_12;
      case 0x10:
        uint64_t v21 = 0;
        unint64_t v22 = 4;
        goto LABEL_12;
      case 8:
        uint64_t v21 = 0;
        unint64_t v22 = 3;
        goto LABEL_12;
    }
  }
  uint64_t v21 = llvm::IntegerType::get(*(llvm::IntegerType **)(a8 + 56), v20);
  unint64_t v22 = 0;
LABEL_12:
  unsigned int v44 = v17;
  if ((_BYTE)v49)
  {
    if (v49 - 15 >= 0x9C) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((*(_DWORD *)(*((void *)&v49 + 1) + 8) & 0xFE) == 0x12)
  {
LABEL_16:
    unsigned int v23 = *(llvm::LLVMContext **)(a8 + 56);
    long long v24 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v49);
    unint64_t v22 = sub_1CB882C1C(v23, v22, v21, v24);
    uint64_t v21 = v25;
  }
LABEL_17:
  if ((v18 | 2) == 0x5E)
  {
    uint64_t v26 = sub_1CD7EB744(a8, a2, a3, (uint64_t)&v47, v22, v21);
    unsigned int v28 = v27;
    uint64_t v29 = sub_1CD7EB744(a8, v45, a5, (uint64_t)&v47, v22, v21);
  }
  else
  {
    uint64_t v26 = sub_1CD7EB80C(a8, a2, a3, (uint64_t)&v47, v22, v21);
    unsigned int v28 = v31;
    uint64_t v29 = sub_1CD7EB80C(a8, v45, a5, (uint64_t)&v47, v22, v21);
  }
  unsigned int v32 = sub_1CD01CDD4(a7, *(unsigned __int16 *)(a1 + 24), (const llvm::APInt *)&v47, v26, a3 & 0xFFFFFFFF00000000 | v28, v29, a5 & 0xFFFFFFFF00000000 | v30, v46, a8);
  unint64_t v34 = v32;
  unint64_t v35 = v33;
  if ((v18 & 0xFFFE) == 0x5E)
  {
    if (a9) {
      unsigned int v36 = a9;
    }
    else {
      unsigned int v36 = v44;
    }
    unint64_t v34 = sub_1CCF8A4B8((uint64_t)v32, v33, (const llvm::APInt *)&v47, v36, (v18 & 0xFFFFFFFD) == 92, a8);
    unint64_t v35 = v35 & 0xFFFFFFFF00000000 | v37;
  }
  uint64_t v38 = sub_1CD7EB80C(a8, (uint64_t)v34, v35, (uint64_t)&v47, v49, *((uint64_t *)&v49 + 1));
  if (v47)
  {
    int v39 = *v47;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        unsigned int v41 = v47;
      }
      else {
        unsigned int v41 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v42 = (unint64_t)(v41 + 8);
LABEL_35:
        uint64_t v50 = &v47;
        sub_1CC5FA668(v42 + 16, &v50);
        return v38;
      }
      if (v39 == 3) {
        *((void *)v47 + 1) = 0;
      }
    }
    else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
    {
      uint64_t v43 = *((void *)v47 + 2);
      if ((v43 & 4) != 0)
      {
        unint64_t v42 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v42) {
          goto LABEL_35;
        }
      }
    }
  }
  return v38;
}

uint64_t sub_1CCF8B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(uint64_t **)(a2 + 40);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  int v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v61 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v61, v11, 2);
  }
  int v62 = *(_DWORD *)(a2 + 60);
  uint64_t v12 = *(void *)(*(void *)(a2 + 32) + 40);
  int v13 = *(unsigned __int16 *)(v12 + 24);
  if (v13 == 35 || v13 == 11)
  {
    uint64_t result = sub_1CD7AE3A0(a1, a2, (void **)(*(void *)(v12 + 80) + 24), a3, a4);
  }
  else
  {
    uint64_t result = sub_1CD7AF38C(a1, a2, a3, (long long *)a4);
    if ((result & 1) == 0)
    {
      int v19 = *(unsigned __int16 *)(a2 + 24);
      if (v19 == 177) {
        unsigned int v20 = 197;
      }
      else {
        unsigned int v20 = 196;
      }
      if (v19 == 175) {
        uint64_t v21 = 195;
      }
      else {
        uint64_t v21 = v20;
      }
      llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), v9, v10, (uint64_t)&v63);
      if ((_BYTE)v64
        && ((unint64_t v22 = *(void *)a1,
             *(unsigned char *)(*(void *)a1 + 390 * v64 + v21 + 3862) == 4)
         || !*(unsigned char *)(*(void *)a1 + 390 * v64 + v21 + 3862)
         && *(void *)(v22 + 8 * v64 + 96))
        && (*(unsigned int (**)(unint64_t, void, uint64_t))(*(void *)v22 + 456))(v22, *(void *)(a1 + 8), a2))
      {
        uint64_t v57 = 0;
        LODWORD(v58) = 0;
        uint64_t v59 = 0;
        int v60 = 0;
        sub_1CD7B3D38(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), (uint64_t)&v57, (uint64_t)&v59);
        unsigned int v23 = (uint64_t *)&v57[5][16 * v58];
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = *(void *)(v26 + 40);
        uint64_t v28 = *(void *)(v26 + 48);
        unint64_t ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)a1, v24, v25, *(void *)(**(void **)(*(void *)(a1 + 8) + 40) + 40) + 272, 1);
        unsigned int v31 = (unsigned __int8 *)(*(void *)(v27 + 40) + 16 * v28);
        if (*v31 != ShiftAmountTy || !*v31 && *((void *)v31 + 1) != v29)
        {
          uint64_t v27 = sub_1CD7EB80C(*(void *)(a1 + 8), v27, v28, (uint64_t)&v61, ShiftAmountTy, v29);
          LODWORD(v28) = v32;
        }
        unsigned int v63 = v57;
        int v64 = (int)v58;
        uint64_t v65 = v59;
        int v66 = v60;
        uint64_t v67 = v27;
        int v68 = v28;
        uint64_t v33 = *(void **)(a1 + 8);
        uint64_t v35 = sub_1CD7F95FC((uint64_t)v33, v24, v25, v24, v25);
        uint64_t v36 = v33[104];
        if (v36) {
          __int16 v37 = *(_WORD *)(v36 + 8);
        }
        else {
          __int16 v37 = 0;
        }
        uint64_t result = (uint64_t)sub_1CD7FF854(v33, (const char *)v21, (const llvm::APInt *)&v61, v35, v34, (uint64_t *)&v63, 3, v37);
        *(void *)a3 = result;
        *(_DWORD *)(a3 + 8) = v41;
        *(void *)a4 = result;
        *(_DWORD *)(a4 + 8) = 1;
      }
      else
      {
        int v38 = *(unsigned __int16 *)(a2 + 24);
        if (v38 != 177)
        {
          if (v38 == 175)
          {
            unsigned int v39 = 0;
            char v40 = 0;
            switch((char)v9)
            {
              case 4:
                goto LABEL_56;
              case 5:
                char v40 = 0;
                unsigned int v39 = 1;
                goto LABEL_56;
              case 6:
                char v40 = 0;
                unsigned int v39 = 2;
                goto LABEL_56;
              case 7:
                char v40 = 0;
                unsigned int v39 = 3;
                goto LABEL_56;
              default:
                goto LABEL_57;
            }
          }
          char v40 = 1;
          unsigned int v39 = 8;
          switch((char)v9)
          {
            case 4:
              goto LABEL_56;
            case 5:
              unsigned int v39 = 9;
              goto LABEL_56;
            case 6:
              unsigned int v39 = 10;
              goto LABEL_56;
            case 7:
              unsigned int v39 = 11;
              goto LABEL_56;
            default:
              goto LABEL_57;
          }
        }
        unsigned int v39 = v9;
        char v40 = 0;
        switch((char)v9)
        {
          case 4:
            goto LABEL_56;
          case 5:
            char v40 = 0;
            unsigned int v39 = 5;
            goto LABEL_56;
          case 6:
            char v40 = 0;
            unsigned int v39 = 6;
            goto LABEL_56;
          case 7:
            char v40 = 0;
            unsigned int v39 = 7;
LABEL_56:
            if (!*(void *)(*(void *)a1 + 8 * v39 + 174048)) {
              goto LABEL_57;
            }
            uint64_t v42 = *(void *)(a1 + 8);
            uint64_t v43 = (llvm::LLVMContext *)*(unsigned int *)(**(void **)(v42 + 32) + 148);
            if ((int)v43 <= 31)
            {
              switch(v43)
              {
                case 1:
                  uint64_t v44 = 0;
                  uint64_t v45 = 2;
                  goto LABEL_69;
                case 0x10:
                  uint64_t v44 = 0;
                  uint64_t v45 = 4;
                  goto LABEL_69;
                case 8:
                  uint64_t v44 = 0;
                  uint64_t v45 = 3;
                  goto LABEL_69;
              }
            }
            else
            {
              switch(v43)
              {
                case 0x20:
                  uint64_t v44 = 0;
                  uint64_t v45 = 5;
                  goto LABEL_69;
                case 0x40:
                  uint64_t v44 = 0;
                  uint64_t v45 = 6;
                  goto LABEL_69;
                case 0x80:
                  uint64_t v44 = 0;
                  uint64_t v45 = 7;
                  goto LABEL_69;
              }
            }
            uint64_t v44 = llvm::IntegerType::get(*(llvm::IntegerType **)(v42 + 56), v43);
            uint64_t v45 = 0;
            uint64_t v42 = *(void *)(a1 + 8);
LABEL_69:
            uint64_t v46 = sub_1CD7EB80C(v42, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), (uint64_t)&v61, v45, v44);
            int v47 = *(unsigned __int8 ****)(a2 + 32);
            int v48 = *((_DWORD *)v47 + 2);
            unsigned int v63 = *v47;
            int v64 = v48;
            uint64_t v65 = v46;
            int v66 = v49;
            uint64_t v50 = *(void *)a1;
            uint64_t v51 = *(void *)(a1 + 8);
            v53[0] = 0;
            v53[1] = 0;
            char v54 = 0;
            uint64_t v55 = 0;
            char v56 = v40 | 4;
            sub_1CCFF9554(v50, v51, v39, v9, v10, (uint64_t)&v63, 2uLL, (uint64_t)v53, (uint64_t)&v57, (uint64_t)&v61, 0, 0);
            uint64_t result = (uint64_t)sub_1CD7B4F60((uint64_t *)a1, (uint64_t)v57, v58, a3, a4);
            break;
          default:
LABEL_57:
            uint64_t result = (uint64_t)sub_1CD7AFBB0(a1, a2, a3, a4);
            break;
        }
      }
    }
  }
  if (v61)
  {
    int v16 = *v61;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        unsigned int v17 = v61;
      }
      else {
        unsigned int v17 = 0;
      }
      if ((v16 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_20:
        unsigned int v63 = &v61;
        return sub_1CC5FA668(v18 + 16, &v63);
      }
      if (v16 == 3) {
        *((void *)v61 + 1) = 0;
      }
    }
    else if ((v61[1] & 0x7F) == 2 || *((_DWORD *)v61 + 3))
    {
      uint64_t v52 = *((void *)v61 + 2);
      if ((v52 & 4) != 0)
      {
        unint64_t v18 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CCF8B710(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, const llvm::APInt *a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v80 = (uint64_t *)(a3 + 112);
  long long v84 = *(_OWORD *)(*(void *)(**(void **)(a4 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a4 + 32) + 8));
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v84, *(llvm::LLVMContext **)(a3 + 56));
  uint64_t v9 = v8;
  uint64_t v79 = a3;
  uint64_t v10 = sub_1CD7F0664(a3, v84, *((uint64_t *)&v84 + 1), 1u);
  uint64_t v12 = v11;
  uint64_t v76 = v9;
  unint64_t v13 = llvm::PointerType::get(v9, 0);
  long long v14 = (char *)operator new(0x30uLL);
  unint64_t v15 = v14;
  int v16 = v14 + 48;
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = v10;
  uint64_t v72 = v12;
  uint64_t v73 = (uint64_t)v10;
  *((void *)v14 + 2) = v12;
  *((void *)v14 + 3) = v13;
  *((_DWORD *)v14 + 8) = 0;
  *((void *)v14 + 5) = 0;
  unsigned int v17 = *(uint64_t **)(a4 + 32);
  uint64_t v78 = (uint64_t)a5;
  if (!*(_WORD *)(a4 + 56))
  {
    int v77 = 0;
    unint64_t v18 = v14 + 48;
    goto LABEL_24;
  }
  uint64_t v70 = a4;
  int v19 = 0;
  uint64_t v75 = &v17[5 * *(unsigned __int16 *)(a4 + 56)];
  unint64_t v18 = v14 + 48;
  do
  {
    unsigned int v20 = sub_1CD7F0664(v79, v84, *((uint64_t *)&v84 + 1), 1u);
    unsigned int v22 = v21;
    unsigned int v23 = v18;
    uint64_t v25 = *v17;
    uint64_t v24 = v17[1];
    long long v85 = 0u;
    *(_OWORD *)unint64_t v86 = 0u;
    memset(v83, 0, 21);
    uint64_t v26 = (uint64_t *)(*(void *)(v25 + 40) + 16 * v24);
    char v27 = sub_1CD7EA9CC(v79, *v26, v26[1]);
    uint64_t v28 = v25;
    unint64_t v18 = v23;
    uint64_t v80 = sub_1CD7FB188(v79, (uint64_t)v80, v19, v78, v28, v24, (uint64_t)v20, v22, (uint64_t)v83, v27, 0, 0, &v85);
    int v30 = v29;
    unint64_t v31 = llvm::PointerType::get(v76, 0);
    unint64_t v32 = v31;
    if (v16 < v23)
    {
      *(void *)int v16 = 0;
      *((void *)v16 + 1) = v20;
      *((_DWORD *)v16 + 4) = v22;
      *((_DWORD *)v16 + 5) = 0;
      *((void *)v16 + 3) = v31;
      *((_DWORD *)v16 + 8) = 0;
      *((void *)v16 + 5) = 0;
      v16 += 48;
      goto LABEL_22;
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4) + 1;
    if (v33 > 0x555555555555555) {
      goto LABEL_50;
    }
    if (0x5555555555555556 * ((v23 - v15) >> 4) > v33) {
      unint64_t v33 = 0x5555555555555556 * ((v23 - v15) >> 4);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v23 - v15) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v34 = 0x555555555555555;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34)
    {
      if (v34 > 0x555555555555555) {
        goto LABEL_51;
      }
      uint64_t v35 = (char *)operator new(48 * v34);
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[16 * ((v16 - v15) >> 4)];
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = v20;
    *((_DWORD *)v36 + 4) = v22;
    *((_DWORD *)v36 + 5) = 0;
    unint64_t v18 = &v35[48 * v34];
    *((void *)v36 + 3) = v32;
    *((_DWORD *)v36 + 8) = 0;
    *((void *)v36 + 5) = 0;
    __int16 v37 = v36 + 48;
    if (v16 == v15)
    {
      unint64_t v15 = v16;
    }
    else
    {
      do
      {
        long long v38 = *((_OWORD *)v16 - 3);
        long long v39 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v36 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v36 - 1) = v39;
        *((_OWORD *)v36 - 3) = v38;
        v36 -= 48;
        v16 -= 48;
      }
      while (v16 != v15);
      if (!v15) {
        goto LABEL_21;
      }
    }
    operator delete(v15);
LABEL_21:
    unint64_t v15 = v36;
    int v16 = v37;
LABEL_22:
    int v19 = v30;
    v17 += 5;
  }
  while (v17 != v75);
  int v77 = v30;
  unsigned int v17 = *(uint64_t **)(v70 + 32);
  a5 = (const llvm::APInt *)v78;
LABEL_24:
  long long v85 = *(_OWORD *)(*(void *)(*v17 + 40) + 16 * *((unsigned int *)v17 + 2));
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v85, *(llvm::LLVMContext **)(v79 + 56));
  unint64_t v41 = (unint64_t)*(unsigned int *)(v40 + 8) >> 8;
  unsigned __int8 v42 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, *(void *)(**(void **)(v79 + 40) + 40) + 272, 0);
  uint64_t v43 = sub_1CD7EBF14(v79, v41, a5, (llvm *)v42, 0, 0, 0);
  uint64_t v45 = v43;
  unsigned int v46 = v44;
  uint64_t v47 = **(void **)(v79 + 56) + 1960;
  if (v16 < v18)
  {
    *(void *)int v16 = 0;
    *((void *)v16 + 1) = v43;
    *((void *)v16 + 2) = v44;
    *((void *)v16 + 3) = v47;
    *((_DWORD *)v16 + 8) = 2;
    int v48 = v16 + 48;
    *((void *)v16 + 5) = 0;
    uint64_t v49 = a1;
    uint64_t v50 = a2;
    goto LABEL_43;
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4) + 1;
  if (v51 > 0x555555555555555) {
LABEL_50:
  }
    abort();
  if (0x5555555555555556 * ((v18 - v15) >> 4) > v51) {
    unint64_t v51 = 0x5555555555555556 * ((v18 - v15) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - v15) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v52 = 0x555555555555555;
  }
  else {
    unint64_t v52 = v51;
  }
  if (v52)
  {
    if (v52 > 0x555555555555555) {
LABEL_51:
    }
      sub_1CB833614();
    uint64_t v53 = (char *)operator new(48 * v52);
  }
  else
  {
    uint64_t v53 = 0;
  }
  char v54 = &v53[16 * ((v16 - v15) >> 4)];
  *(void *)char v54 = 0;
  *((void *)v54 + 1) = v45;
  unint64_t v18 = &v53[48 * v52];
  *((_DWORD *)v54 + 4) = v46;
  *((_DWORD *)v54 + 5) = 0;
  *((void *)v54 + 3) = v47;
  *((_DWORD *)v54 + 8) = 2;
  *((void *)v54 + 5) = 0;
  int v48 = v54 + 48;
  if (v16 == v15)
  {
    a5 = (const llvm::APInt *)v78;
    uint64_t v50 = a2;
    goto LABEL_41;
  }
  a5 = (const llvm::APInt *)v78;
  uint64_t v50 = a2;
  do
  {
    long long v55 = *((_OWORD *)v16 - 3);
    long long v56 = *((_OWORD *)v16 - 1);
    *((_OWORD *)v54 - 2) = *((_OWORD *)v16 - 2);
    *((_OWORD *)v54 - 1) = v56;
    *((_OWORD *)v54 - 3) = v55;
    v54 -= 48;
    v16 -= 48;
  }
  while (v16 != v15);
  if (v15) {
LABEL_41:
  }
    operator delete(v15);
  unint64_t v15 = v54;
  uint64_t v49 = a1;
LABEL_43:
  uint64_t v57 = *(char **)(v49 + 8 * *v50 + 174048);
  unsigned __int8 v58 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v49 + 32))(v49, *(void *)(**(void **)(v79 + 40) + 40) + 272, 0);
  size_t v59 = sub_1CD7EDF94(v79, v57, v58, 0);
  int v61 = v60;
  *(void *)&long long v85 = 0;
  DWORD2(v85) = 0;
  *(void *)unint64_t v86 = 0;
  *(_DWORD *)&v86[8] = *(_WORD *)&v86[8] & 0xFC00 | 0x20;
  *(void *)&v86[12] = 0xFFFFFFFFLL;
  size_t v87 = 0;
  int v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = v79;
  uint64_t v93 = 0;
  int v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = v98;
  uint64_t v97 = 0x2000000000;
  v98[192] = v99;
  v98[193] = 0x2000000000;
  v99[64] = v100;
  v99[65] = 0x2000000000;
  v100[192] = v101;
  v100[193] = 0x400000000;
  v101[64] = 0;
  v101[88] = 0;
  if (&v93 == (unsigned __int8 **)a5)
  {
    int v64 = 0;
    int v63 = v77;
  }
  else
  {
    int v62 = *(unsigned __int8 **)a5;
    uint64_t v93 = v62;
    int v63 = v77;
    if (v62)
    {
      llvm::MetadataTracking::track((uint64_t)&v93, v62, 2);
      int v64 = v89;
    }
    else
    {
      int v64 = 0;
    }
  }
  int v65 = *((_DWORD *)a5 + 2);
  *(void *)&long long v85 = v80;
  int v94 = v65;
  DWORD2(v85) = v63;
  int v66 = *(_DWORD *)(v49 + 4 * *v50 + 181700);
  *(void *)unint64_t v86 = **(void **)(v79 + 56) + 1576;
  size_t v87 = v59;
  int v88 = v61;
  *(_DWORD *)&v86[12] = -1431655765 * ((unint64_t)(v48 - v15) >> 4);
  *(_DWORD *)&v86[16] = v66;
  if (v64)
  {
    uint64_t v90 = v64;
    operator delete(v64);
  }
  uint64_t v89 = v15;
  uint64_t v90 = v48;
  uint64_t v91 = v18;
  (***(void (****)(void))(v92 + 24))();
  *(_WORD *)&v86[8] &= ~0x20u;
  sub_1CCFB0250(v49, (uint64_t)&v85, (uint64_t)v83);
  long long v67 = v83[1];
  uint64_t v81 = 0;
  v82[0] = 0;
  *(void *)((char *)v82 + 5) = 0;
  memset(v83, 0, sizeof(v83));
  int v68 = sub_1CD7F00F8(v79, v84, *((uint64_t *)&v84 + 1), (uint64_t)a5, v67, SDWORD2(v67), v73, v72, (long long *)&v81, 0, 0, 0, v83, 0);
  sub_1CD78F470(&v85);
  return v68;
}

uint64_t sub_1CCF8BEF4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = a2;
  if (*(_DWORD *)(a2 + 28) < 0xFFFFFFFE) {
    return v3;
  }
  uint64_t v5 = *(unsigned __int16 *)(a2 + 56);
  if (*(_WORD *)(a2 + 56))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v52 = 0;
    unint64_t v10 = 0;
    int v11 = 0;
    uint64_t v50 = *(unsigned __int16 *)(a2 + 56);
    do
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v3 + 32) + 40 * v10);
      uint64_t v13 = *v12;
      *(void *)&long long v53 = *v12;
      a3.n128_u64[0] = v12[1];
      __n128 v51 = a3;
      *((void *)&v53 + 1) = a3.n128_u64[0];
      sub_1CD7B37AC(a1, (uint64_t *)&v53);
      if (*(_DWORD *)(v53 + 28) == -3) {
        ++v11;
      }
      if (v8 == v9)
      {
        a3.n128_u64[1] = v51.n128_u64[1];
        if ((void)v53 == v13 && DWORD2(v53) == v51.n128_u32[0])
        {
          uint64_t v9 = v8;
        }
        else
        {
          int v49 = v11;
          if (v10)
          {
            unint64_t v15 = *(long long **)(v3 + 32);
            uint64_t v16 = v52 - v8;
            if ((uint64_t)v10 <= (v52 - v8) >> 4)
            {
              uint64_t v34 = 0;
              uint64_t v35 = v7;
              do
              {
                long long v36 = *v15;
                unint64_t v15 = (long long *)((char *)v15 + 40);
                *(_OWORD *)&v8[v34] = v36;
                v34 += 16;
                v35 -= 40;
              }
              while (v35);
              unsigned int v22 = &v8[v34];
              int v11 = v49;
            }
            else
            {
              if (v10 >> 60) {
                goto LABEL_78;
              }
              uint64_t v17 = v16 >> 3;
              if (v16 >> 3 <= v10) {
                uint64_t v17 = v10;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v17;
              }
              if (v18 >> 60) {
LABEL_79:
              }
                sub_1CB833614();
              int v19 = (char *)operator new(16 * v18);
              unsigned int v20 = v19;
              uint64_t v21 = 0;
              unsigned int v22 = &v19[16 * v10];
              do
              {
                long long v23 = *v15;
                unint64_t v15 = (long long *)((char *)v15 + 40);
                *(_OWORD *)&v19[v21] = v23;
                v21 += 16;
              }
              while (v6 != v21);
              unint64_t v52 = &v19[16 * v18];
              if (v8) {
                operator delete(v8);
              }
              uint64_t v8 = v20;
              int v11 = v49;
              uint64_t v5 = v50;
            }
          }
          else
          {
            unsigned int v22 = v8;
          }
          if (v22 >= v52)
          {
            uint64_t v37 = (v22 - v8) >> 4;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60) {
LABEL_78:
            }
              abort();
            if ((v52 - v8) >> 3 > v38) {
              unint64_t v38 = (v52 - v8) >> 3;
            }
            if ((unint64_t)(v52 - v8) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            if (v39)
            {
              if (v39 >> 60) {
                goto LABEL_79;
              }
              uint64_t v40 = (char *)operator new(16 * v39);
            }
            else
            {
              uint64_t v40 = 0;
            }
            unint64_t v41 = &v40[16 * v37];
            a3.n128_u64[1] = *((void *)&v53 + 1);
            *(_OWORD *)unint64_t v41 = v53;
            unsigned __int8 v42 = v41;
            while (v22 != v8)
            {
              uint64_t v43 = *((void *)v22 - 2);
              v22 -= 16;
              int v44 = *((_DWORD *)v22 + 2);
              *((void *)v42 - 2) = v43;
              v42 -= 16;
              *((_DWORD *)v42 + 2) = v44;
            }
            unint64_t v52 = &v40[16 * v39];
            uint64_t v9 = v41 + 16;
            if (v8) {
              operator delete(v8);
            }
            uint64_t v8 = v42;
            int v11 = v49;
          }
          else
          {
            a3.n128_u64[1] = *((void *)&v53 + 1);
            *(_OWORD *)unsigned int v22 = v53;
            uint64_t v9 = v22 + 16;
          }
        }
      }
      else if (v9 >= v52)
      {
        uint64_t v24 = a1;
        int v25 = v11;
        uint64_t v26 = (v9 - v8) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          goto LABEL_78;
        }
        if ((v52 - v8) >> 3 > v27) {
          unint64_t v27 = (v52 - v8) >> 3;
        }
        if ((unint64_t)(v52 - v8) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 60) {
            goto LABEL_79;
          }
          int v29 = (char *)operator new(16 * v28);
        }
        else
        {
          int v29 = 0;
        }
        int v30 = &v29[16 * v26];
        a3.n128_u64[1] = *((void *)&v53 + 1);
        *(_OWORD *)int v30 = v53;
        unint64_t v31 = v30;
        do
        {
          uint64_t v32 = *((void *)v9 - 2);
          v9 -= 16;
          int v33 = *((_DWORD *)v9 + 2);
          *((void *)v31 - 2) = v32;
          v31 -= 16;
          *((_DWORD *)v31 + 2) = v33;
        }
        while (v9 != v8);
        unint64_t v52 = &v29[16 * v28];
        uint64_t v9 = v30 + 16;
        if (v8) {
          operator delete(v8);
        }
        uint64_t v8 = v31;
        int v11 = v25;
        a1 = v24;
        uint64_t v5 = v50;
      }
      else
      {
        a3.n128_u64[1] = *((void *)&v53 + 1);
        *(_OWORD *)uint64_t v9 = v53;
        v9 += 16;
      }
      ++v10;
      v7 += 40;
      v6 += 16;
    }
    while (v10 != v5);
    if (v8 != v9)
    {
      uint64_t v45 = sub_1CD800398(*(void *)(a1 + 8), v3, (uint64_t *)v8, (v9 - v8) >> 4);
      if (v45 != (uint64_t *)v3)
      {
        *(_DWORD *)(v3 + 28) = -1;
        uint64_t v3 = (uint64_t)v45;
        if (*((_DWORD *)v45 + 7) < 0xFFFFFFFE) {
          goto LABEL_74;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v11 = 0;
  }
  int v46 = *(unsigned __int16 *)(v3 + 56) - v11;
  *(_DWORD *)(v3 + 28) = v46;
  if (!v46)
  {
    unsigned int v47 = *(_DWORD *)(a1 + 1424);
    if (v47 >= *(_DWORD *)(a1 + 1428)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 1416) + 8 * v47) = v3;
    ++*(_DWORD *)(a1 + 1424);
  }
LABEL_74:
  if (v8) {
    operator delete(v8);
  }
  return v3;
}

void *sub_1CCF8C2E4(void *result)
{
  *uint64_t result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

uint64_t sub_1CCF8C30C(void **a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, int a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
    if (v6 > 0x185 || *((unsigned char *)v5 + 390 * a3 + v6 + 3862) == 4)
    {
      uint64_t v7 = *v5;
      if (a5) {
        (*(void (**)(void))(v7 + 1976))();
      }
      else {
        (*(void (**)(void))(v7 + 1960))();
      }
    }
  }
  return 0;
}

BOOL sub_1CCF8C48C(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 <= 0x185 && *(unsigned char *)(v5 + 390 * a3 + v6 + 3862) != 4) {
    return 0;
  }
  unsigned int v20 = v22;
  uint64_t v21 = 0x800000000;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v5 + 1976))(v5, a2, &v20, a1[1]);
  uint64_t v8 = v21;
  BOOL v9 = v21 != 0;
  if (v21)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a2 + 40);
      int v13 = *(unsigned __int8 *)(v12 + v10);
      uint64_t v14 = *(void *)((char *)v20 + v10);
      unint64_t v15 = (unsigned __int8 *)(*(void *)(v14 + 40) + 16 * *(unsigned int *)((char *)v20 + v10 + 8));
      if (v13 == *v15
        && ((v16 = *((void *)v15 + 1), v17 = *(void *)(v12 + v10 + 8), !v13) ? (BOOL v18 = v17 == v16) : (BOOL v18 = 1), v18))
      {
        sub_1CD7B343C((uint64_t)a1, a2, v11, v14, *(void *)((char *)v20 + v10 + 8), v7);
      }
      else
      {
        sub_1CD7B4460((uint64_t)a1, a2, v11, v14, *(void *)((char *)v20 + v10 + 8), v7);
      }
      ++v11;
      v10 += 16;
    }
    while (v8 != v11);
  }
  if (v20 != v22) {
    free(v20);
  }
  return v9;
}

void sub_1CCF8C634(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCF8C66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v4 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    uint64_t v6 = 0;
    __n128 v7 = *(_DWORD **)(a1 + 24);
    do
    {
      int v8 = sub_1CD79A54C((uint64_t)v7, a3, v6);
      int v15 = 0;
      int v15 = sub_1CD79A54C((uint64_t)v7, a2, v6);
      if (v15 != v8)
      {
        sub_1CD79AE74(v7 + 336, &v15)[1] = v8;
        int v13 = 0;
        if (sub_1CD79A9FC((uint64_t)(v7 + 100), &v15, &v13))
        {
          _DWORD *v13 = -2;
          v7[100] -= 2;
          ++v7[101];
        }
        sub_1CB9046D8((uint64_t)(v7 + 150), &v15);
        sub_1CCF8C880(v7 + 168, v15);
        sub_1CB9046D8((uint64_t)(v7 + 194), &v15);
        sub_1CB9046D8((uint64_t)(v7 + 212), &v15);
        sub_1CB9046D8((uint64_t)(v7 + 230), &v15);
        sub_1CCF8C880(v7 + 248, v15);
        sub_1CB9046D8((uint64_t)(v7 + 274), &v15);
        sub_1CCF8C880(v7 + 292, v15);
        sub_1CB9046D8((uint64_t)(v7 + 318), &v15);
      }
      int v13 = (_DWORD *)a2;
      int v14 = v6;
      sub_1CD7B50D8(v7 + 50, (uint64_t)&v13);
      ++v6;
    }
    while (v4 != v6);
  }
  uint64_t result = sub_1CD7B505C(*(void *)(a1 + 32), &v12);
  if (*(_DWORD *)(a3 + 28) == -1) {
    return (void *)sub_1CD6A0E6C(*(void *)(a1 + 32), &v11);
  }
  return result;
}

BOOL sub_1CCF8C84C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  *(_DWORD *)(a2 + 28) = -1;
  return sub_1CD6A0E6C(*(void *)(a1 + 32), &v3);
}

uint64_t sub_1CCF8C880(_DWORD *a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD7B5130((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -2;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CCF8C8D4()
{
  int v1 = 1;
  sub_1CD7B54EC(&v1);

  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF92E8, &dword_1CB82C000);
}

void sub_1CCF8C930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v147[19] = *(void **)MEMORY[0x1E4F143B8];
  int v8 = *(BOOL **)(a2 + 40);
  uint64_t v9 = v8[1];
  BOOL v133 = *v8;
  llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), *v8, v9, (uint64_t)v147);
  uint64_t v10 = (llvm *)v147[1];
  uint64_t v11 = v147[2];
  long long v144 = *(_OWORD *)&v147[1];
  long long v143 = *(_OWORD *)*(void *)(a2 + 32);
  uint64_t v12 = v143;
  int v13 = (uint64_t *)(*(void *)(v143 + 40) + 16 * DWORD2(v143));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v141 = *v13;
  uint64_t v142 = v15;
  uint64_t v16 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v139 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v139, v16, 2);
    uint64_t v14 = v141;
    uint64_t v15 = v142;
  }
  int v140 = *(_DWORD *)(a2 + 60);
  llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), v14, v15, (uint64_t)v147);
  switch(LOBYTE(v147[0]))
  {
    case 2:
    case 4:
      uint64_t v17 = *(void *)(**(void **)(*(void *)(a1 + 8) + 40) + 40);
      sub_1CD79692C(a1, v12, *((uint64_t *)&v143 + 1), a3, a4);
      if (*(unsigned char *)(v17 + 272)) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v133 == 14) == (v141 == 14);
      }
      if (!v18) {
        goto LABEL_21;
      }
      goto LABEL_22;
    case 3:
      uint64_t v19 = sub_1CD7921D4(a1, v12, *((uint64_t *)&v143 + 1));
      goto LABEL_15;
    case 5:
      uint64_t v24 = sub_1CD79867C(a1, v12, *((uint64_t *)&v143 + 1));
      uint64_t v19 = (uint64_t)sub_1CD7B4534(a1, v24, v25);
LABEL_15:
      sub_1CD7B4F60((uint64_t *)a1, v19, v20, a3, a4);
      goto LABEL_22;
    case 6:
      sub_1CD7B4258(a1, v12, *((uint64_t *)&v143 + 1), a3, a4);
      uint64_t v23 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(**(void **)(v23 + 40) + 40) + 272)) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v133 == 14;
      }
      if (!v26) {
        goto LABEL_23;
      }
      goto LABEL_21;
    case 7:
      *(void *)&long long v143 = sub_1CD7986E0(a1, v12, *((uint64_t *)&v143 + 1));
      DWORD2(v143) = v21;
      sub_1CD804190(*(void *)(a1 + 8), (BOOL *)&v141, v22, (unint64_t *)v147);
      long long v145 = *(_OWORD *)v147;
      long long v137 = *(_OWORD *)&v147[2];
      sub_1CD804344(*(void *)(a1 + 8), (uint64_t *)&v143, (const llvm::APInt *)&v139, (llvm **)&v145, (uint64_t)&v137, (uint64_t)v147);
      *(void **)a3 = v147[0];
      *(_DWORD *)(a3 + 8) = v147[1];
      *(void **)a4 = v147[2];
      *(_DWORD *)(a4 + 8) = v147[3];
      uint64_t v23 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(**(void **)(v23 + 40) + 40) + 272) || v133 == 14)
      {
LABEL_21:
        *(_OWORD *)uint64_t v147 = *(_OWORD *)a3;
        int v27 = *(_DWORD *)(a4 + 8);
        *(void *)a3 = *(void *)a4;
        *(_DWORD *)(a3 + 8) = v27;
        *(void **)a4 = v147[0];
        *(_DWORD *)(a4 + 8) = v147[1];
LABEL_22:
        uint64_t v23 = *(void *)(a1 + 8);
      }
LABEL_23:
      uint64_t v28 = *(void *)(v23 + 832);
      if (v28) {
        __int16 v29 = *(_WORD *)(v28 + 8);
      }
      else {
        __int16 v29 = 0;
      }
      *(void *)a3 = sub_1CD7F3564((llvm::APFloatBase *)v23, (const char *)0xD8, (uint64_t)&v139, v10, (uint64_t)v11, *(void *)a3, *(void **)(a3 + 8), v29);
      *(_DWORD *)(a3 + 8) = v30;
      unint64_t v31 = *(llvm::APFloatBase **)(a1 + 8);
      uint64_t v32 = *((void *)v31 + 104);
      if (v32) {
        __int16 v33 = *(_WORD *)(v32 + 8);
      }
      else {
        __int16 v33 = 0;
      }
      *(void *)a4 = sub_1CD7F3564(v31, (const char *)0xD8, (uint64_t)&v139, v10, (uint64_t)v11, *(void *)a4, *(void **)(a4 + 8), v33);
      *(_DWORD *)(a4 + 8) = v34;
      goto LABEL_30;
    case 0xA:
      llvm::report_fatal_error((llvm *)"Scalarization of scalable vectors is not supported.", (const llvm::Twine *)1);
    default:
      if ((_BYTE)v141)
      {
        if (v141 - 15 >= 0x9C) {
          goto LABEL_80;
        }
      }
      else if ((*(_DWORD *)(v142 + 8) & 0xFE) != 0x12)
      {
        goto LABEL_80;
      }
      if (!v133)
      {
        if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
          int v38 = *(unsigned __int8 *)(**(void **)(v9 + 16) + 8);
        }
        else {
          int v38 = *(_DWORD *)(v9 + 8);
        }
        if (v38 != 13) {
          goto LABEL_80;
        }
        goto LABEL_55;
      }
      if (v133 - 120 >= 0x20 && v133 - 2 >= 6 && v133 - 15 >= 0x3C)
      {
LABEL_80:
        unsigned int v55 = sub_1CD7F03E4(*(void *)(a1 + 8), v141, v142, 0);
        uint64_t v131 = (uint64_t)v11;
        unsigned __int8 v56 = sub_1CD7F03E4(*(void *)(a1 + 8), (uint64_t)v10, (uint64_t)v11, 0);
        if (v55 <= v56) {
          unsigned __int8 v57 = v56;
        }
        else {
          unsigned __int8 v57 = v55;
        }
        uint64_t v58 = *(void *)(a1 + 8);
        unint64_t v59 = sub_1CB896FB8((unsigned __int8 *)&v141);
        int v61 = sub_1CD7F053C(v58, v59, v60, v57);
        uint64_t v63 = v62;
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(*(void *)(a1 + 8) + 40) + 432), *((_DWORD *)v61 + 19));
        *(void *)&long long v137 = (unint64_t)FixedStack | 4;
        *((void *)&v137 + 1) = 0;
        BYTE4(v138) = 0;
        uint64_t v130 = (uint64_t)v61;
        if (FixedStack) {
          int v65 = *((_DWORD *)FixedStack + 3);
        }
        else {
          int v65 = 0;
        }
        LODWORD(v138) = v65;
        uint64_t v66 = *(void *)(a1 + 8);
        unsigned int v67 = DWORD2(v143);
        long long v145 = v137;
        uint64_t v146 = v138;
        memset(v147, 0, 32);
        int v68 = (uint64_t *)(*(void *)(v12 + 40) + 16 * DWORD2(v143));
        char v69 = sub_1CD7EA9CC(v66, *v68, v68[1]);
        uint64_t v70 = sub_1CD7FB188(v66, v66 + 112, 0, (uint64_t)&v139, v12, v67, v130, v63, (uint64_t)&v145, v69, 0, 0, (long long *)v147);
        uint64_t v71 = *(void *)(a1 + 8);
        long long v135 = v137;
        uint64_t v136 = v138;
        uint64_t v72 = v56 | 0x100;
        memset(v147, 0, 32);
        uint64_t v73 = v131;
        uint64_t v132 = (uint64_t)v70;
        int v129 = v74;
        *(void *)a3 = sub_1CD7F00F8(v71, (uint64_t)v10, v73, (uint64_t)&v139, (uint64_t)v70, v74, v130, v63, &v135, v56 | 0x100u, SHIDWORD(v72), 0, (long long *)v147, 0);
        *(_DWORD *)(a3 + 8) = v75;
        if ((_BYTE)v10) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v144);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v144);
        }
        unint64_t v78 = ExtendedSizeInBits;
        if (v77 == 1) {
        uint64_t v79 = (v78 >> 3);
        }
        uint64_t v80 = sub_1CD7F6604(*(void *)(a1 + 8), v130, v63, v79, 0, (const llvm::APInt *)&v139, 0);
        unint64_t v82 = v63 & 0xFFFFFFFF00000000 | v81;
        uint64_t v83 = *(void *)(a1 + 8);
        long long v84 = v144;
        sub_1CB8F0264((uint64_t *)&v137, v79, (uint64_t)&v134);
        memset(v147, 0, 32);
        *(void *)a4 = sub_1CD7F00F8(v83, v84, *((uint64_t *)&v84 + 1), (uint64_t)&v139, v132, v129, (uint64_t)v80, v82, &v134, v72, SHIDWORD(v72), 0, (long long *)v147, 0);
        *(_DWORD *)(a4 + 8) = v85;
        if (*(unsigned char *)(*(void *)(**(void **)(*(void *)(a1 + 8) + 40) + 40) + 272) || v133 == 14)
        {
          *(_OWORD *)uint64_t v147 = *(_OWORD *)a3;
          int v86 = *(_DWORD *)(a4 + 8);
          *(void *)a3 = *(void *)a4;
          *(_DWORD *)(a3 + 8) = v86;
          *(void **)a4 = v147[0];
          *(_DWORD *)(a4 + 8) = v147[1];
        }
        goto LABEL_30;
      }
LABEL_55:
      unint64_t v39 = v11;
      long long v137 = v144;
      uint64_t v40 = *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56);
      uint64_t v42 = *((void *)&v144 + 1);
      uint64_t v41 = v144;
      unsigned int v43 = 2;
      for (unsigned int i = 2; ; unsigned int i = v43)
      {
        uint64_t v45 = (llvm *)sub_1CB8E5DAC(v40, v41, v42, i, 0);
        uint64_t v47 = v46;
        llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), (BOOL)v45, v46, (uint64_t)v147);
        if (!LOBYTE(v147[0])) {
          break;
        }
        if ((_BYTE)v137) {
          uint64_t v48 = sub_1CB87E200((unsigned __int8 *)&v137);
        }
        else {
          uint64_t v48 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v137);
        }
        unint64_t v50 = v48;
        if (v49 == 1) {
        __n128 v51 = (llvm::LLVMContext *)(v50 >> 1);
        }
        if ((v50 >> 1) < 8) {
          break;
        }
        if ((int)v51 > 63)
        {
          if (v51 == 64)
          {
            uint64_t v42 = 0;
            uint64_t v41 = 6;
            goto LABEL_72;
          }
          if (v51 == 128)
          {
            uint64_t v42 = 0;
            uint64_t v41 = 7;
            goto LABEL_72;
          }
        }
        else
        {
          switch(v51)
          {
            case 0x20:
              uint64_t v42 = 0;
              uint64_t v41 = 5;
              goto LABEL_72;
            case 0x10:
              uint64_t v42 = 0;
              uint64_t v41 = 4;
              goto LABEL_72;
            case 8:
              uint64_t v42 = 0;
              uint64_t v41 = 3;
              goto LABEL_72;
          }
        }
        uint64_t v42 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)(a1 + 8) + 56), v51);
        uint64_t v41 = 0;
LABEL_72:
        v43 *= 2;
        *(void *)&long long v137 = v41;
        *((void *)&v137 + 1) = v42;
        uint64_t v40 = *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56);
      }
      llvm::TargetLoweringBase::getTypeConversion(*(void *)a1, *(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), (BOOL)v45, v47, (uint64_t)v147);
      if (LOBYTE(v147[0]))
      {
        uint64_t v11 = v39;
        goto LABEL_80;
      }
      unint64_t v52 = *(llvm::APFloatBase **)(a1 + 8);
      uint64_t v53 = *((void *)v52 + 104);
      if (v53) {
        __int16 v54 = *(_WORD *)(v53 + 8);
      }
      else {
        __int16 v54 = 0;
      }
      size_t v87 = sub_1CD7F3564(v52, (const char *)0xD8, (uint64_t)&v139, v45, v47, v12, *((void **)&v143 + 1), v54);
      v147[0] = &v147[2];
      v147[1] = (void *)0x800000000;
      if (v43)
      {
        uint64_t v89 = (uint64_t)v87;
        uint64_t v90 = v88;
        uint64_t v91 = 0;
        uint64_t v92 = v43;
        do
        {
          uint64_t v93 = *(void *)(a1 + 8);
          long long v94 = v137;
          uint64_t v95 = sub_1CD7EC9F4(v93, v91, (uint64_t)&v139, 0);
          uint64_t v98 = *(void *)(v93 + 832);
          if (v98) {
            LOWORD(v98) = *(_WORD *)(v98 + 8);
          }
          long long v100 = sub_1CCFDED5C(v93, 148, (const llvm::APInt *)&v139, (llvm *)v94, *((uint64_t *)&v94 + 1), v89, v90, v97, v95, v96, v98);
          if (LODWORD(v147[1]) >= (unint64_t)HIDWORD(v147[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          long long v101 = (uint64_t **)((char *)v147[0] + 16 * LODWORD(v147[1]));
          *long long v101 = v100;
          v101[1] = v99;
          int v102 = (int)v147[1];
          unsigned int v103 = ++LODWORD(v147[1]);
          ++v91;
        }
        while (v92 != v91);
        if (v103 >= 3)
        {
          unsigned int v104 = 0;
          int v105 = v102 + 1;
          while (1)
          {
            long long v145 = *((_OWORD *)v147[0] + v104);
            uint64_t v106 = (uint64_t *)((char *)v147[0] + 16 * v104 + 16);
            uint64_t v107 = *v106;
            unint64_t v108 = v106[1];
            uint64_t v109 = *(void *)(a1 + 8);
            if (*(unsigned char *)(*(void *)(**(void **)(v109 + 40) + 40) + 272))
            {
              uint64_t v110 = v145;
              uint64_t v111 = DWORD2(v145);
              *(void *)&long long v145 = v107;
              DWORD2(v145) = v108;
              unint64_t v108 = v108 & 0xFFFFFFFF00000000 | v111;
              uint64_t v107 = v110;
            }
            unsigned int v112 = *(llvm::IntegerType **)(v109 + 56);
            unsigned int v115 = sub_1CD3E3904((unsigned int *)&v145);
            if (v113 == 1) {
            uint64_t v116 = (llvm::LLVMContext *)(2 * v115);
            }
            if ((int)v116 > 63)
            {
              if (v116 == 64)
              {
                uint64_t v117 = 0;
                uint64_t v118 = 6;
              }
              else
              {
                if (v116 != 128)
                {
LABEL_124:
                  uint64_t v117 = llvm::IntegerType::get(v112, v116);
                  uint64_t v118 = 0;
                  goto LABEL_117;
                }
                uint64_t v117 = 0;
                uint64_t v118 = 7;
              }
            }
            else
            {
              switch(v116)
              {
                case 0x20:
                  uint64_t v117 = 0;
                  uint64_t v118 = 5;
                  break;
                case 0x10:
                  uint64_t v117 = 0;
                  uint64_t v118 = 4;
                  break;
                case 8:
                  uint64_t v117 = 0;
                  uint64_t v118 = 3;
                  break;
                default:
                  goto LABEL_124;
              }
            }
LABEL_117:
            uint64_t v119 = *(void *)(v109 + 832);
            if (v119) {
              LOWORD(v119) = *(_WORD *)(v119 + 8);
            }
            int v121 = sub_1CCFDED5C(v109, 54, (const llvm::APInt *)&v139, (llvm *)v118, v117, v145, *((uint64_t *)&v145 + 1), v114, v107, v108, v119);
            if (LODWORD(v147[1]) >= (unint64_t)HIDWORD(v147[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v122 = (uint64_t **)((char *)v147[0] + 16 * LODWORD(v147[1]));
            *uint64_t v122 = v121;
            v122[1] = v120;
            ++LODWORD(v147[1]);
            v104 += 2;
            if (--v105 <= 2) {
              goto LABEL_127;
            }
          }
        }
      }
      unsigned int v104 = 0;
LABEL_127:
      uint64_t v123 = (void **)v147[0];
      __int16 v124 = (char *)v147[0] + 16 * v104;
      int v125 = *((_DWORD *)v124 + 2);
      *(void *)a3 = *(void *)v124;
      *(_DWORD *)(a3 + 8) = v125;
      int v126 = &v123[2 * (v104 | 1)];
      LODWORD(v124) = *((_DWORD *)v126 + 2);
      *(void *)a4 = *v126;
      *(_DWORD *)(a4 + 8) = v124;
      if (*(unsigned char *)(*(void *)(**(void **)(*(void *)(a1 + 8) + 40) + 40) + 272))
      {
        long long v145 = *(_OWORD *)a3;
        int v127 = *((_DWORD *)v126 + 2);
        *(void *)a3 = *v126;
        *(_DWORD *)(a3 + 8) = v127;
        *(void *)a4 = v145;
        *(_DWORD *)(a4 + 8) = DWORD2(v145);
      }
      if (v123 != &v147[2]) {
        free(v123);
      }
LABEL_30:
      if (v139)
      {
        int v35 = *v139;
        if ((v35 - 4) > 0x1E)
        {
          if ((v35 - 3) >= 0xFFFFFFFE) {
            long long v36 = v139;
          }
          else {
            long long v36 = 0;
          }
          if ((v35 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v37 = (unint64_t)(v36 + 8);
LABEL_40:
            v147[0] = &v139;
            sub_1CC5FA668(v37 + 16, v147);
            return;
          }
          if (v35 == 3) {
            *((void *)v139 + 1) = 0;
          }
        }
        else if ((v139[1] & 0x7F) == 2 || *((_DWORD *)v139 + 3))
        {
          uint64_t v128 = *((void *)v139 + 2);
          if ((v128 & 4) != 0)
          {
            unint64_t v37 = v128 & 0xFFFFFFFFFFFFFFF8;
            if (v37) {
              goto LABEL_40;
            }
          }
        }
      }
      return;
  }
}

BOOL sub_1CCF8D4FC(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v1 = (void *)a1[3];
  v17[0] = a1;
  v17[1] = v1;
  char v18 = 0;
  *(void *)&v19[0] = 1;
  uint64_t v2 = 4;
  __n128 v3 = (__n128)xmmword_1CD923640;
  do
  {
    *(_OWORD *)&v17[v2] = xmmword_1CD923640;
    v2 += 4;
  }
  while (v2 != 260);
  for (uint64_t i = v17[0][27]; ; uint64_t i = *(void *)(i + 8))
  {
    if (i == *(void *)(v17[0][26] + 8))
    {
      BOOL v8 = 0;
      goto LABEL_24;
    }
    uint64_t v5 = i ? i - 8 : 0;
    if (*(_WORD *)(v5 + 58)) {
      break;
    }
LABEL_15:
    ;
  }
  uint64_t v6 = 16 * *(unsigned __int16 *)(v5 + 58);
  uint64_t v7 = *(void *)(v5 + 40) + 8;
  while (*(unsigned char *)(v7 - 8))
  {
    if (*(unsigned __int8 *)(v7 - 8) - 15 < 0x9C) {
      goto LABEL_17;
    }
LABEL_14:
    v7 += 16;
    v6 -= 16;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) != 0x12) {
    goto LABEL_14;
  }
LABEL_17:
  sub_1CD802634((uint64_t)v17[0]);
  uint64_t v9 = v17[0];
  uint64_t v10 = v17[0][26];
  uint64_t v11 = v17[0][27];
  if (v11 != *(void *)(v10 + 8))
  {
    do
    {
      if (v11) {
        unint64_t v12 = v11 - 8;
      }
      else {
        unint64_t v12 = 0;
      }
      sub_1CCF8D6AC((uint64_t *)v17, v12, 0);
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while (v11 != *(void *)(v10 + 8));
    uint64_t v9 = v17[0];
  }
  long long v16 = *((_OWORD *)v9 + 12);
  uint64_t v13 = sub_1CD7B7E94(v19, (uint64_t)&v16);
  uint64_t v14 = *(void *)(v13 + 24);
  v9[24] = *(void *)(v13 + 16);
  *((_DWORD *)v9 + 50) = v14;
  sub_1CD7B7B44(v19);
  sub_1CD7EA154(v17[0]);
  BOOL v8 = v18 != 0;
LABEL_24:
  if ((v19[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)&v19[0] + 1), 8, v3);
  }
  return v8;
}

uint64_t sub_1CCF8D6AC(uint64_t *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v845 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1CD7B7BC4((uint64_t)(a1 + 3), a2, a3);
  if (a1[3])
  {
    BOOL v8 = a1 + 4;
    uint64_t v9 = 64;
  }
  else
  {
    BOOL v8 = (void *)a1[4];
    uint64_t v9 = *((unsigned int *)a1 + 10);
  }
  if (&v8[4 * v9] != (void *)v7) {
    return *(void *)(v7 + 16);
  }
  __int16 v831 = v833;
  uint64_t v832 = 0x800000000;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 56);
  if (*(_WORD *)(a2 + 56))
  {
    unint64_t v12 = *(void **)(a2 + 32);
    uint64_t v13 = &v12[5 * *(unsigned __int16 *)(a2 + 56)];
    do
    {
      uint64_t v15 = sub_1CCF8D6AC(a1, *v12, v12[1]);
      if (v832 >= (unint64_t)HIDWORD(v832)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v16 = (uint64_t *)((char *)v831 + 16 * v832);
      uint64_t *v16 = v15;
      v16[1] = v14;
      unsigned int v11 = v832 + 1;
      LODWORD(v832) = v832 + 1;
      v12 += 5;
    }
    while (v12 != v13);
    uint64_t v17 = (uint64_t *)v831;
  }
  else
  {
    uint64_t v17 = (uint64_t *)v833;
  }
  char v18 = sub_1CD800398(*a1, a2, v17, v11);
  uint64_t v10 = (uint64_t)v18;
  BOOL v26 = (unsigned __int8 *)v18[5];
  if (!*((_WORD *)v18 + 29))
  {
LABEL_20:
    if (*((_WORD *)v18 + 28))
    {
      __int16 v29 = (unsigned int *)v18[4];
      int v30 = &v29[10 * *((unsigned __int16 *)v18 + 28)];
      do
      {
        unint64_t v31 = (unsigned __int8 *)(*(void *)(*(void *)v29 + 40) + 16 * v29[2]);
        if (*v31)
        {
          if (*v31 - 15 < 0x9C) {
            goto LABEL_31;
          }
        }
        else if ((*(_DWORD *)(*((void *)v31 + 1) + 8) & 0xFE) == 0x12)
        {
          goto LABEL_31;
        }
        v29 += 10;
      }
      while (v29 != v30);
    }
    uint64_t v32 = *(unsigned __int16 *)(a2 + 58);
    if (*(_WORD *)(a2 + 58))
    {
      uint64_t v33 = 0;
      do
      {
        sub_1CCF91F54((uint64_t)a1, a2, v33, v10, v33);
        ++v33;
      }
      while (v32 != v33);
    }
    goto LABEL_369;
  }
  uint64_t v27 = 16 * *((unsigned __int16 *)v18 + 29);
  uint64_t v28 = v26 + 8;
  while (1)
  {
    if (*(v28 - 8))
    {
      if (*(v28 - 8) - 15 < 0x9C) {
        break;
      }
      goto LABEL_19;
    }
    if ((*(_DWORD *)(*(void *)v28 + 8) & 0xFE) == 0x12) {
      break;
    }
LABEL_19:
    v28 += 16;
    v27 -= 16;
    if (!v27) {
      goto LABEL_20;
    }
  }
LABEL_31:
  LOBYTE(v821) = 0;
  uint64_t v822 = 0;
  __int16 v34 = *(_WORD *)(a2 + 24);
  switch(v34)
  {
    case 55:
      unsigned int v67 = *v26;
      if (!*v26) {
        goto LABEL_167;
      }
      long long v36 = (uint64_t *)a1[1];
      uint64_t v68 = *(unsigned __int16 *)(v10 + 24);
      if (v68 > 0x185) {
        goto LABEL_92;
      }
      uint64_t v38 = *((unsigned __int8 *)v36 + 390 * v67 + v68 + 3862);
      if (!(_BYTE)v38) {
        goto LABEL_167;
      }
      goto LABEL_36;
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 141:
    case 143:
    case 145:
    case 159:
    case 160:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 198:
    case 199:
    case 200:
    case 201:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 215:
    case 222:
    case 223:
    case 224:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 310:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
      LODWORD(v35) = *v26;
      if (*v26) {
        goto LABEL_33;
      }
      goto LABEL_167;
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      uint64_t v20 = *(void *)v26;
      if (!*(void *)v26) {
        goto LABEL_167;
      }
      long long v36 = (uint64_t *)a1[1];
      uint64_t v19 = *(unsigned __int16 *)(v10 + 24);
      if (v19 > 0x185) {
        goto LABEL_92;
      }
      uint64_t v38 = *((unsigned __int8 *)v36 + 390 * *(void *)v26 + *(unsigned __int16 *)(v10 + 24) + 3862);
      if (*((unsigned char *)v36 + 390 * *(void *)v26 + *(unsigned __int16 *)(v10 + 24) + 3862)) {
        goto LABEL_36;
      }
      if (((*(uint64_t (**)(uint64_t *))(*v36 + 520))(v36) & 1) == 0) {
        goto LABEL_167;
      }
      goto LABEL_146;
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
      uint64_t v20 = *(void *)v26;
      uint64_t v21 = *((void *)v26 + 1);
      uint64_t v821 = *(void *)v26;
      uint64_t v822 = v21;
      if ((v34 & 0xFFFE) == 0x86)
      {
        unint64_t v52 = (uint64_t *)(*(void *)(*(void *)(v18[4] + 40) + 40) + 16 * *(unsigned int *)(v18[4] + 48));
        uint64_t v20 = *v52;
        uint64_t v21 = v52[1];
        uint64_t v821 = *v52;
        uint64_t v822 = v21;
      }
      long long v36 = (uint64_t *)a1[1];
      uint64_t v19 = *(unsigned __int16 *)(v10 + 24);
      if (!(_BYTE)v20) {
        goto LABEL_64;
      }
      if (v19 > 0x185) {
        goto LABEL_92;
      }
      uint64_t v38 = *((unsigned __int8 *)v36 + 390 * v20 + v19 + 3862);
      if (v38 != 2) {
        goto LABEL_36;
      }
LABEL_64:
      if (!*((unsigned char *)v36 + 184290) && !sub_1CD78EB98((uint64_t)v36, v19, v20))
      {
        if ((_BYTE)v821)
        {
          unsigned __int8 v53 = sub_1CB8C2FBC((unsigned __int8 *)&v821);
          uint64_t v21 = 0;
        }
        else
        {
          unsigned __int8 EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v822 + 24), 0, v20);
          uint64_t v21 = v117;
          unsigned __int8 v53 = EVT;
        }
        uint64_t v118 = a1[1];
        uint64_t v19 = *(unsigned __int16 *)(v10 + 24);
        if ((!v53 || v19 <= 0x185 && *(unsigned char *)(v118 + 390 * v53 + v19 + 3862) == 2)
          && !sub_1CD78EB98(v118, v19, v53))
        {
          goto LABEL_146;
        }
      }
      goto LABEL_167;
    case 193:
      uint64_t v63 = v18[4];
      uint64_t v64 = *(void *)(*(void *)(*(void *)v63 + 40) + 16 * *(unsigned int *)(v63 + 8));
      long long v36 = (uint64_t *)a1[1];
      uint64_t v38 = (*((_DWORD *)v36 + 23 * *(unsigned int *)(*(void *)(v63 + 80) + 76)
                             + (v64 >> 3)
                             + 42897) >> (4 * (v64 & 7))) & 0xF;
      if (v38) {
        goto LABEL_36;
      }
      LODWORD(v35) = *v26;
      if (!*v26) {
        goto LABEL_167;
      }
      goto LABEL_34;
    case 202:
    case 203:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 366:
    case 367:
      uint64_t v54 = v18[4];
      uint64_t v55 = *(void *)v54;
      uint64_t v56 = *(unsigned int *)(v54 + 8);
      goto LABEL_69;
    case 253:
      int v58 = (*((unsigned __int16 *)v18 + 13) >> 10) & 3;
      uint64_t v59 = v18[10];
      if (v18[10]) {
        BOOL v60 = (v59 - 15) < 0x9C;
      }
      else {
        BOOL v60 = (*(_DWORD *)(v18[11] + 8) & 0xFE) == 18;
      }
      if (!v60 || v58 == 0) {
        goto LABEL_146;
      }
      if (!v18[10]) {
        goto LABEL_167;
      }
      uint64_t v104 = *v26;
      if (!v104) {
        goto LABEL_167;
      }
      long long v36 = (uint64_t *)a1[1];
      uint64_t v38 = (*((unsigned __int16 *)v36 + 179 * v104 + v59 + 36836) >> (4 * v58)) & 0xF;
      goto LABEL_36;
    case 254:
      uint64_t v61 = v18[10];
      unsigned int v62 = *(unsigned __int8 *)(*(void *)(*(void *)(v18[4] + 40) + 40) + 16 * *(unsigned int *)(v18[4] + 48));
      if (v18[10])
      {
        if ((v61 - 15) >= 0x9C) {
          goto LABEL_146;
        }
      }
      else if ((*(_DWORD *)(v18[11] + 8) & 0xFE) != 0x12)
      {
LABEL_146:
        unsigned int v828 = v830;
        uint64_t v829 = 0x800000000;
        goto LABEL_364;
      }
      if ((*((_WORD *)v18 + 13) & 0x400) == 0) {
        goto LABEL_146;
      }
      if (v18[10]
        && *(unsigned char *)(*(void *)(*(void *)(v18[4] + 40) + 40) + 16 * *(unsigned int *)(v18[4] + 48)))
      {
        long long v36 = (uint64_t *)a1[1];
        uint64_t v38 = *((unsigned __int8 *)v36 + 179 * v62 + v61 + 137754);
        goto LABEL_36;
      }
LABEL_167:
      unsigned int v828 = v830;
      uint64_t v829 = 0x800000000;
      goto LABEL_168;
    case 319:
    case 320:
      uint64_t v57 = v18[4];
      uint64_t v55 = *(void *)(v57 + 40);
      uint64_t v56 = *(unsigned int *)(v57 + 48);
LABEL_69:
      uint64_t v35 = *(unsigned __int8 *)(*(void *)(v55 + 40) + 16 * v56);
      if (!v35) {
        goto LABEL_167;
      }
LABEL_33:
      long long v36 = (uint64_t *)a1[1];
      goto LABEL_34;
    case 365:
      uint64_t v65 = v18[4];
      uint64_t v66 = *(void *)(*(void *)(*(void *)v65 + 40) + 16 * *(unsigned int *)(v65 + 8));
      long long v36 = (uint64_t *)a1[1];
      uint64_t v38 = (*((_DWORD *)v36 + 23 * *(unsigned int *)(*(void *)(v65 + 80) + 76)
                             + (v66 >> 3)
                             + 42897) >> (4 * (v66 & 7))) & 0xF;
      if (v38) {
        goto LABEL_36;
      }
      LODWORD(v35) = v66;
      if (!(_BYTE)v66) {
        goto LABEL_167;
      }
LABEL_34:
      uint64_t v37 = *(unsigned __int16 *)(v10 + 24);
      if (v37 <= 0x185)
      {
        uint64_t v38 = *((unsigned __int8 *)v36 + 390 * v35 + v37 + 3862);
LABEL_36:
        unint64_t v39 = &v828;
        unsigned int v828 = v830;
        uint64_t v829 = 0x800000000;
        switch((int)v38)
        {
          case 1:
            unsigned int v40 = *(unsigned __int16 *)(v10 + 24);
            if (v40 > 0xC9)
            {
              if (v40 - 208 >= 2)
              {
                if (v40 - 202 > 1) {
                  goto LABEL_40;
                }
LABEL_111:
                BOOL v79 = sub_1CD407020(v10);
                BOOL v80 = v79;
                unsigned int v81 = (unsigned int *)(*(void *)(v10 + 32) + 40 * v79);
                unsigned __int8 v82 = sub_1CD3E5538(a1[1], *(unsigned __int16 *)(v10 + 24), *(unsigned char *)(*(void *)(*(void *)v81 + 40) + 16 * v81[2]));
                uint64_t v83 = *(unsigned __int8 **)(v10 + 64);
                *(void *)&long long v827 = v83;
                if (v83) {
                  llvm::MetadataTracking::track((uint64_t)&v827, v83, 2);
                }
                DWORD2(v827) = *(_DWORD *)(v10 + 60);
                unint64_t v84 = *(unsigned __int16 *)(v10 + 56);
                *(void *)&long long __src = &v838;
                *((void *)&__src + 1) = 0x400000000;
                sub_1CD3E535C((uint64_t *)&__src, v84, 0, 0);
                int v85 = (const char *)*(unsigned __int16 *)(v10 + 24);
                if (v85 == 135 || v85 == 203) {
                  uint64_t v87 = 199;
                }
                else {
                  uint64_t v87 = 198;
                }
                if (*(_WORD *)(v10 + 56))
                {
                  unsigned int v88 = 0;
                  uint64_t v807 = (llvm *)v82;
                  while (1)
                  {
                    uint64_t v89 = v88;
                    uint64_t v90 = (unsigned int *)(*(void *)(v10 + 32) + 40 * v88);
                    uint64_t v91 = (unsigned __int8 *)(*(void *)(*(void *)v90 + 40) + 16 * v90[2]);
                    if (*v91)
                    {
                      if (*v91 - 15 < 0x9C) {
                        goto LABEL_127;
                      }
                    }
                    else if ((*(_DWORD *)(*((void *)v91 + 1) + 8) & 0xFE) == 0x12)
                    {
LABEL_127:
                      uint64_t v94 = *(void *)(*a1 + 832);
                      if (v94) {
                        __int16 v95 = *(_WORD *)(v94 + 8);
                      }
                      else {
                        __int16 v95 = 0;
                      }
                      uint64_t v96 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)v87, (uint64_t)&v827, v807, 0, *(void *)v90, *((void **)v90 + 1), v95);
                      uint64_t v97 = __src + 16 * v89;
                      *(void *)uint64_t v97 = v96;
                      *(_DWORD *)(v97 + 8) = v98;
                      goto LABEL_124;
                    }
                    uint64_t v92 = __src + 16 * v89;
                    uint64_t v93 = *(void *)v90;
                    *(_DWORD *)(v92 + 8) = v90[2];
                    *(void *)uint64_t v92 = v93;
LABEL_124:
                    unsigned int v88 = v89 + 1;
                    if (v89 + 1 == *(unsigned __int16 *)(v10 + 56))
                    {
                      int v85 = (const char *)*(unsigned __int16 *)(v10 + 24);
                      break;
                    }
                  }
                }
                int v105 = (void *)*a1;
                if (v80)
                {
                  long long v834 = *(_OWORD *)*(void *)(v10 + 40);
                  LOBYTE(v835) = 1;
                  uint64_t v836 = 0;
                  uint64_t v496 = sub_1CD7EB5F0(v105, v85, (const llvm::APInt *)&v827, (uint64_t *)&v834, 2, (uint64_t *)__src, DWORD2(__src));
                  if (v829 >= HIDWORD(v829)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v497 = (uint64_t **)((char *)v828 + 16 * v829);
                  *uint64_t v497 = v496;
                  v497[1] = v495;
                  unsigned int v498 = v829 + 1;
                  LODWORD(v829) = v498;
                  if (v498 >= HIDWORD(v829)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v115 = (char *)v828 + 16 * v498;
                  *(void *)unsigned int v115 = v496;
                  uint64_t v114 = 1;
                }
                else
                {
                  uint64_t v106 = *(void *)(v10 + 40);
                  uint64_t v107 = *(llvm **)v106;
                  uint64_t v108 = *(void *)(v106 + 8);
                  uint64_t v109 = v105[104];
                  if (v109) {
                    uint64_t v110 = *(unsigned __int16 *)(v109 + 8);
                  }
                  else {
                    uint64_t v110 = 0;
                  }
                  unsigned int v112 = sub_1CD7FF4E8(v105, v85, (const llvm::APInt *)&v827, v107, v108, (uint64_t *)__src, DWORD2(__src), v110);
                  uint64_t v114 = v113;
                  if (v829 >= HIDWORD(v829)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v115 = (char *)v828 + 16 * v829;
                  *(void *)unsigned int v115 = v112;
                }
                *((void *)v115 + 1) = v114;
                LODWORD(v829) = v829 + 1;
                if ((long long *)__src != &v838) {
                  free((void *)__src);
                }
LABEL_518:
                uint64_t v245 = v827;
                if (!(void)v827) {
                  goto LABEL_266;
                }
                int v246 = *(unsigned __int8 *)v827;
                if ((v246 - 4) > 0x1E)
                {
                  if ((v246 - 3) >= 0xFFFFFFFE) {
                    uint64_t v436 = v827;
                  }
                  else {
                    uint64_t v436 = 0;
                  }
                  if ((v246 - 3) < 0xFFFFFFFE) {
                    goto LABEL_723;
                  }
                  unint64_t v248 = v436 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v827 + 1) & 0x7F) != 2 && !*(_DWORD *)(v827 + 12)) {
                    goto LABEL_266;
                  }
                  uint64_t v435 = *(void *)(v827 + 16);
                  if ((v435 & 4) == 0) {
                    goto LABEL_266;
                  }
                  unint64_t v248 = v435 & 0xFFFFFFFFFFFFFFF8;
                  if (!v248) {
                    goto LABEL_266;
                  }
                }
                uint64_t v267 = &v827;
                goto LABEL_531;
              }
            }
            else if (v40 - 132 >= 2)
            {
              if (v40 - 134 >= 2)
              {
LABEL_40:
                LOBYTE(v825) = **(void **)(v10 + 40);
                unsigned int v41 = v825;
                LOBYTE(v824) = sub_1CD3E5538((uint64_t)v36, v40, v825);
                uint64_t v42 = *(unsigned __int8 **)(v10 + 64);
                *(void *)&long long v834 = v42;
                if (v42) {
                  llvm::MetadataTracking::track((uint64_t)&v834, v42, 2);
                }
                DWORD2(v834) = *(_DWORD *)(v10 + 60);
                unint64_t v43 = *(unsigned __int16 *)(v10 + 56);
                *(void *)&long long __src = &v838;
                *((void *)&__src + 1) = 0x400000000;
                sub_1CD3E535C((uint64_t *)&__src, v43, 0, 0);
                if (!*(_WORD *)(v10 + 56))
                {
LABEL_43:
                  uint64_t v45 = sub_1CD7FF4E8((void *)*a1, (const char *)*(unsigned __int16 *)(v10 + 24), (const llvm::APInt *)&v834, (llvm *)v824, 0, (uint64_t *)__src, DWORD2(__src), *(unsigned __int16 *)(v10 + 72));
                  uint64_t v47 = v46;
                  if ((v41 + 104) >= 0x13u
                    && (v41 - 8) >= 7u
                    && (v41 - 75) >= 0x2Du
                    || (v824 + 104) >= 0x13u
                    && (v824 - 8) >= 7u
                    && (v824 - 75) >= 0x2Du)
                  {
                    if ((v41 - 15) > 0x9Bu
                      || (char v48 = sub_1CB8C2FBC((unsigned __int8 *)&v825), (v48 + 104) >= 0x13u)
                      && (v48 - 8) >= 7u
                      && (v48 - 75) > 0x2Cu
                      || v824 - 15 > 0x9B
                      || (char v49 = sub_1CB8C2FBC((unsigned __int8 *)&v824), (v49 + 104) >= 0x13u)
                      && (v49 - 8) >= 7u
                      && (v49 - 75) > 0x2Cu)
                    {
                      uint64_t v50 = *(void *)(*a1 + 832);
                      if (v50) {
                        __int16 v51 = *(_WORD *)(v50 + 8);
                      }
                      else {
                        __int16 v51 = 0;
                      }
                      int v453 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, (llvm *)v825, 0, (uint64_t)v45, (void *)v47, v51);
LABEL_707:
                      unint64_t v611 = v47 & 0xFFFFFFFF00000000 | v454;
                      if (v829 >= HIDWORD(v829)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v612 = (uint64_t **)((char *)v828 + 16 * v829);
                      *uint64_t v612 = v453;
                      v612[1] = (uint64_t *)v611;
                      LODWORD(v829) = v829 + 1;
                      if ((long long *)__src != &v838) {
                        free((void *)__src);
                      }
                      uint64_t v245 = v834;
                      if (!(void)v834) {
                        goto LABEL_266;
                      }
                      int v246 = *(unsigned __int8 *)v834;
                      if ((v246 - 4) <= 0x1E)
                      {
                        if ((*(unsigned char *)(v834 + 1) & 0x7F) == 2 || *(_DWORD *)(v834 + 12))
                        {
                          uint64_t v613 = *(void *)(v834 + 16);
                          if ((v613 & 4) != 0)
                          {
                            unint64_t v248 = v613 & 0xFFFFFFFFFFFFFFF8;
                            if (v248) {
                              goto LABEL_722;
                            }
                          }
                        }
LABEL_266:
                        unsigned int v201 = v829;
                        if (v829) {
                          goto LABEL_267;
                        }
LABEL_364:
                        uint64_t v271 = *(unsigned __int16 *)(a2 + 58);
                        if (*(_WORD *)(a2 + 58))
                        {
                          uint64_t v272 = 0;
                          do
                          {
                            sub_1CCF91F54((uint64_t)a1, a2, v272, v10, v272);
                            ++v272;
                          }
                          while (v271 != v272);
                        }
                        goto LABEL_367;
                      }
                      if ((v246 - 3) >= 0xFFFFFFFE) {
                        uint64_t v614 = v834;
                      }
                      else {
                        uint64_t v614 = 0;
                      }
                      if ((v246 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v248 = v614 + 8;
LABEL_722:
                        uint64_t v267 = &v834;
                        goto LABEL_531;
                      }
LABEL_723:
                      if (v246 == 3) {
                        *(void *)(v245 + 8) = 0;
                      }
                      goto LABEL_266;
                    }
                    unsigned int v41 = v825;
                  }
                  uint64_t v606 = *a1;
                  unint64_t v607 = sub_1CD7EB364(*a1, 0, (const llvm::APInt *)&v834, 0);
                  uint64_t v610 = *(void *)(v606 + 832);
                  if (v610) {
                    LOWORD(v610) = *(_WORD *)(v610 + 8);
                  }
                  int v453 = sub_1CCFDED5C(v606, 212, (const llvm::APInt *)&v834, (llvm *)v41, 0, (uint64_t)v45, v47, v609, (uint64_t)v607, v608, v610);
                  goto LABEL_707;
                }
                unsigned int v379 = 0;
                while (1)
                {
                  uint64_t v380 = v379;
                  uint64_t v381 = (unsigned int *)(*(void *)(v10 + 32) + 40 * v379);
                  __int16 v382 = (uint64_t *)(*(void *)(*(void *)v381 + 40) + 16 * v381[2]);
                  uint64_t v383 = *v382;
                  if (*v382)
                  {
                    if (*v382 - 15 <= 0x9B)
                    {
                      uint64_t v384 = v382[1];
LABEL_465:
                      *(void *)&long long v827 = v383;
                      *((void *)&v827 + 1) = v384;
                      if ((_BYTE)v383)
                      {
                        char v387 = sub_1CB8C2FBC((unsigned __int8 *)&v827);
                        uint64_t v388 = 0;
                      }
                      else
                      {
                        char v387 = llvm::EVT::getEVT(*(llvm::EVT **)(v384 + 24), 0, v44);
                      }
                      if (v387)
                      {
                        if ((v387 + 104) < 0x13u
                          || (v387 - 8) < 7u
                          || (v387 - 75) < 0x2Du)
                        {
                          goto LABEL_477;
                        }
                      }
                      else
                      {
                        if ((*(_DWORD *)(v388 + 8) & 0xFE) == 0x12) {
                          unsigned int v389 = *(unsigned __int8 *)(**(void **)(v388 + 16) + 8);
                        }
                        else {
                          unsigned int v389 = *(_DWORD *)(v388 + 8);
                        }
                        if (v389 <= 6)
                        {
LABEL_477:
                          if (v824 - 15 <= 0x9B)
                          {
                            char v390 = sub_1CB8C2FBC((unsigned __int8 *)&v824);
                            if ((v390 - 8) < 7u
                              || (v390 - 75) < 0x2Du
                              || (v390 + 104) < 0x13u)
                            {
                              BOOL v391 = (llvm::APFloatBase *)*a1;
                              uint64_t v392 = *(void *)(*a1 + 832);
                              if (v392) {
                                __int16 v393 = *(_WORD *)(v392 + 8);
                              }
                              else {
                                __int16 v393 = 0;
                              }
                              uint64_t v395 = (llvm *)v824;
                              unsigned int v403 = (uint64_t *)(*(void *)(v10 + 32) + 40 * v380);
                              uint64_t v397 = *v403;
                              uint64_t v398 = (void *)v403[1];
                              uint64_t v399 = 215;
LABEL_487:
                              uint64_t v400 = sub_1CD7F3564(v391, (const char *)v399, (uint64_t)&v834, v395, 0, v397, v398, v393);
                              uint64_t v401 = __src + 16 * v380;
                              *(void *)uint64_t v401 = v400;
                              *(_DWORD *)(v401 + 8) = v402;
                              goto LABEL_463;
                            }
                          }
                        }
                      }
                      BOOL v391 = (llvm::APFloatBase *)*a1;
                      uint64_t v394 = *(void *)(*a1 + 832);
                      if (v394) {
                        __int16 v393 = *(_WORD *)(v394 + 8);
                      }
                      else {
                        __int16 v393 = 0;
                      }
                      uint64_t v395 = (llvm *)v824;
                      __int16 v396 = (uint64_t *)(*(void *)(v10 + 32) + 40 * v380);
                      uint64_t v397 = *v396;
                      uint64_t v398 = (void *)v396[1];
                      uint64_t v399 = 216;
                      goto LABEL_487;
                    }
                  }
                  else
                  {
                    uint64_t v384 = v382[1];
                    if ((*(_DWORD *)(v384 + 8) & 0xFE) == 0x12) {
                      goto LABEL_465;
                    }
                  }
                  uint64_t v385 = __src + 16 * v380;
                  uint64_t v386 = *(void *)v381;
                  *(_DWORD *)(v385 + 8) = v381[2];
                  *(void *)uint64_t v385 = v386;
LABEL_463:
                  unsigned int v379 = v380 + 1;
                  if (v380 + 1 == *(unsigned __int16 *)(v10 + 56)) {
                    goto LABEL_43;
                  }
                }
              }
              goto LABEL_111;
            }
            LOBYTE(v825) = **(void **)(v10 + 40);
            unsigned __int8 v99 = sub_1CD3E5538((uint64_t)v36, v40, v825);
            BOOL v100 = sub_1CD407020(v10);
            uint64_t v101 = *(unsigned __int16 *)(v10 + 24);
            if (v101 == 209)
            {
              if (!v99 || (uint64_t v102 = a1[1], v99 != 1) && !*(void *)(v102 + 8 * v99 + 96))
              {
                uint64_t v101 = 209;
LABEL_494:
                uint64_t v404 = *(unsigned __int8 **)(v10 + 64);
                *(void *)&long long v827 = v404;
                if (v404) {
                  llvm::MetadataTracking::track((uint64_t)&v827, v404, 2);
                }
                DWORD2(v827) = *(_DWORD *)(v10 + 60);
                char v405 = (llvm::APFloatBase *)*a1;
                BOOL v815 = v100;
                unsigned __int8 v799 = v99;
                if (v100)
                {
                  LOBYTE(__src) = v99;
                  *((void *)&__src + 1) = 0;
                  LOBYTE(v838) = 1;
                  *((void *)&v838 + 1) = 0;
                  uint64_t v406 = *(void *)(v10 + 32);
                  int v407 = *(_DWORD *)(v406 + 8);
                  *(void *)&long long v834 = *(void *)v406;
                  DWORD2(v834) = v407;
                  uint64_t v835 = *(void *)(v406 + 40);
                  LODWORD(v836) = *(_DWORD *)(v406 + 48);
                  uint64_t v409 = sub_1CD7EB5F0(v405, (const char *)v101, (const llvm::APInt *)&v827, (uint64_t *)&__src, 2, (uint64_t *)&v834, 2);
                  int64x2_t v410 = vdupq_n_s64(1uLL);
                  v410.i64[0] = (uint64_t)v409;
                }
                else
                {
                  char v411 = *(uint64_t **)(v10 + 32);
                  uint64_t v412 = *v411;
                  uint64_t v413 = (void *)v411[1];
                  uint64_t v414 = *((void *)v405 + 104);
                  if (v414) {
                    __int16 v415 = *(_WORD *)(v414 + 8);
                  }
                  else {
                    __int16 v415 = 0;
                  }
                  uint64_t v409 = sub_1CD7F3564(v405, (const char *)v101, (uint64_t)&v827, (llvm *)v99, 0, v412, v413, v415);
                  int64x2_t v410 = 0uLL;
                }
                *(int64x2_t *)__int16 v772 = v410;
                uint64_t v416 = v408;
                int v417 = *(unsigned __int16 *)(v10 + 24);
                if (v417 == 133 || v417 == 209) {
                  uint64_t v419 = 4;
                }
                else {
                  uint64_t v419 = 3;
                }
                uint64_t v420 = *a1;
                unsigned __int8 v421 = v825;
                if ((v825 - 15) <= 0x9Bu) {
                  unsigned __int8 v421 = sub_1CB8C2FBC((unsigned __int8 *)&v825);
                }
                uint64_t v422 = sub_1CD7EDE1C(v420, v421, 0);
                __int16 v425 = 0;
                uint64_t v426 = *(void *)(v420 + 832);
                if (v426) {
                  __int16 v425 = *(_WORD *)(v426 + 8);
                }
                long long v428 = sub_1CCFDED5C(v420, v419, (const llvm::APInt *)&v827, (llvm *)v799, 0, (uint64_t)v409, v416, v424, v422, v423, v425);
                __int16 v429 = 0;
                uint64_t v430 = *(void *)(*a1 + 832);
                if (v430) {
                  __int16 v429 = *(_WORD *)(v430 + 8);
                }
                uint64_t v432 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xC9, (uint64_t)&v827, (llvm *)v825, 0, (uint64_t)v428, (void *)v427, v429);
                if (v829 >= HIDWORD(v829)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v433 = (uint64_t **)((char *)v828 + 16 * v829);
                uint64_t *v433 = v432;
                v433[1] = (uint64_t *)v431;
                unsigned int v434 = v829 + 1;
                LODWORD(v829) = v829 + 1;
                if (v815)
                {
                  if (v434 >= HIDWORD(v829)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v828 + v434) = *(_OWORD *)v772;
                  LODWORD(v829) = v829 + 1;
                }
                goto LABEL_518;
              }
              BOOL v307 = (*(unsigned char *)(v102 + 390 * v99 + 4070) & 0xFB) == 0;
              unsigned int v308 = 208;
            }
            else
            {
              if (v101 != 133) {
                goto LABEL_494;
              }
              if (!v99 || (uint64_t v111 = a1[1], v99 != 1) && !*(void *)(v111 + 8 * v99 + 96))
              {
                uint64_t v101 = 133;
                goto LABEL_494;
              }
              BOOL v307 = (*(unsigned char *)(v111 + 390 * v99 + 3994) & 0xFB) == 0;
              unsigned int v308 = 132;
            }
            if (v307) {
              uint64_t v101 = v308;
            }
            else {
              uint64_t v101 = v308 + 1;
            }
            goto LABEL_494;
          case 2:
            goto LABEL_168;
          case 3:
            __break(1u);
            goto LABEL_825;
          case 4:
            goto LABEL_93;
          default:
            goto LABEL_364;
        }
      }
LABEL_92:
      unsigned int v828 = v830;
      uint64_t v829 = 0x800000000;
LABEL_93:
      uint64_t v69 = (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t))(*v36 + 1968))(v36, v10, 0, *a1);
      if (v69)
      {
        uint64_t v70 = (uint64_t *)v69;
        uint64_t v71 = v19;
        BOOL v72 = v10 == v69 && v19 == 0;
        if (v72) {
          goto LABEL_266;
        }
        uint64_t v73 = *(unsigned __int16 *)(v10 + 58);
        if (!*(_WORD *)(v10 + 58)) {
          goto LABEL_266;
        }
        if (v73 != 1)
        {
          uint64_t v74 = 0;
          unsigned int v75 = v829;
          do
          {
            if (v75 >= HIDWORD(v829)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v76 = (uint64_t *)((char *)v828 + 16 * v75);
            uint64_t *v76 = v69;
            v76[1] = v74;
            unsigned int v75 = v829 + 1;
            LODWORD(v829) = v829 + 1;
            ++v74;
          }
          while (v73 != v74);
          goto LABEL_266;
        }
        goto LABEL_361;
      }
LABEL_168:
      unsigned int v119 = *(unsigned __int16 *)(v10 + 24);
      if (v119 > 0x140)
      {
        if (*(unsigned __int16 *)(v10 + 24) <= 0x16Cu)
        {
          if (v119 - 321 < 0xD)
          {
            uint64_t v120 = sub_1CD819D40(a1[1], v10, *a1);
LABEL_360:
            uint64_t v70 = v120;
            uint64_t v71 = v121;
            goto LABEL_361;
          }
LABEL_359:
          uint64_t v120 = sub_1CD8032A8(*a1, v10, 0);
          goto LABEL_360;
        }
        if (v119 != 365)
        {
          if (v119 == 387)
          {
            uint64_t v153 = *(unsigned __int8 **)(v10 + 64);
            *(void *)&long long __src = v153;
            if (v153) {
              llvm::MetadataTracking::track((uint64_t)&__src, v153, 2);
            }
            DWORD2(__src) = *(_DWORD *)(v10 + 60);
            unint64_t v154 = *(uint64_t **)(v10 + 32);
            uint64_t v155 = *v154;
            uint64_t v156 = v154[1];
            uint64_t v157 = *(void *)(*v154 + 40) + 16 * v156;
            uint64_t v158 = *(llvm **)v157;
            if (!*(void *)v157) {
              goto LABEL_378;
            }
            uint64_t v159 = a1[1];
            if (*(unsigned char *)(v159 + 390 * *(void *)v157 + 4197) == 2
              || *(unsigned char *)(v159 + 390 * *(void *)v157 + 4208) == 2
              || *(unsigned char *)(v159 + 390 * *(void *)v157 + 4201) == 2)
            {
              goto LABEL_378;
            }
            uint64_t v160 = v154[5];
            uint64_t v749 = v154[10];
            uint64_t v757 = v154[11];
            uint64_t v767 = v154[6];
            uint64_t v780 = v154[16];
            uint64_t v791 = v154[15];
            uint64_t v809 = *(void *)(v157 + 8);
            __int16 v161 = (uint64_t *)(*(void *)(v160 + 40) + 16 * v767);
            uint64_t v163 = *v161;
            uint64_t v162 = v161[1];
            *(void *)&long long v834 = v163;
            *((void *)&v834 + 1) = v162;
            if ((_BYTE)v163) {
              unsigned __int8 v164 = sub_1CB8C2FBC((unsigned __int8 *)&v834);
            }
            else {
              unsigned __int8 v164 = llvm::EVT::getEVT(*(llvm::EVT **)(v162 + 24), 0, v20);
            }
            int v455 = v164;
            BOOL v276 = (llvm::APFloatBase *)*a1;
            if (v455 != 2) {
              goto LABEL_379;
            }
            uint64_t v456 = sub_1CD787918((uint64_t)v276, (const llvm::APInt *)&__src, (BOOL)v158, v809, 0, 0);
            uint64_t v459 = sub_1CD7EBE80((void *)*a1, (const char *)0x15A, (const llvm::APInt *)&__src, v158, v809, v155, v156, v458, v456, v457, v155, v156, v791, v780);
            int v738 = v460;
            uint64_t v742 = (uint64_t)v459;
            v745 = sub_1CD7EBE80((void *)*a1, (const char *)0x14F, (const llvm::APInt *)&__src, v158, v809, v160, v767, v461, v155, v156, v155, v156, v791, v780);
            int v773 = v462;
            uint64_t v464 = sub_1CD7EBE80((void *)*a1, (const char *)0x14F, (const llvm::APInt *)&__src, v158, v809, v749, v757, v463, v742, v738, v155, v156, v791, v780);
            int v277 = sub_1CD7EBE80((void *)*a1, (const char *)0x153, (const llvm::APInt *)&__src, v158, v809, (uint64_t)v745, v773, v466, (uint64_t)v464, v465, v155, v156, v791, v780);
          }
          else
          {
            if (v119 != 388) {
              goto LABEL_359;
            }
            uint64_t v122 = *(unsigned __int8 **)(v10 + 64);
            *(void *)&long long __src = v122;
            if (v122) {
              llvm::MetadataTracking::track((uint64_t)&__src, v122, 2);
            }
            DWORD2(__src) = *(_DWORD *)(v10 + 60);
            uint64_t v123 = *(uint64_t **)(v10 + 32);
            uint64_t v808 = v123[5];
            uint64_t v790 = v123[6];
            uint64_t v779 = v123[10];
            uint64_t v756 = *v123;
            uint64_t v766 = v123[11];
            uint64_t v124 = v123[15];
            int v125 = (void *)v123[16];
            uint64_t v748 = v123[1];
            int v126 = (uint64_t *)(*(void *)(*v123 + 40) + 16 * v748);
            uint64_t v128 = *v126;
            uint64_t v127 = v126[1];
            *(void *)&long long v834 = v128;
            *((void *)&v834 + 1) = v127;
            if ((_BYTE)v128) {
              BOOL v129 = v128 - 15 < 0x69;
            }
            else {
              BOOL v129 = *(unsigned __int8 *)(v127 + 8) == 18;
            }
            unsigned int v249 = *(llvm::LLVMContext **)(*a1 + 56);
            __int16 v740 = v125;
            uint64_t v743 = v124;
            int v250 = (uint64_t *)(*(void *)(v124 + 40) + 16 * v125);
            uint64_t v252 = *v250;
            uint64_t v251 = v250[1];
            uint64_t v253 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v834);
            uint64_t v255 = (llvm *)sub_1CB882C1C(v249, v252, v251, v253);
            uint64_t v256 = v254;
            uint64_t v257 = a1[1];
            if (v129)
            {
              if (!(_BYTE)v255 || v255 != 1 && !*(void *)(v257 + 8 * v255 + 96)) {
                goto LABEL_378;
              }
              int v258 = *(unsigned __int8 *)(v257 + 390 * v255 + 4008);
            }
            else
            {
              if (v255 != 1
                && (!(_BYTE)v255 || !*(void *)(v257 + 8 * v255 + 96))
                || (*(unsigned __int8 *)(v257 + 390 * v255 + 4020) | 4) != 4
                || v255 != 1 && !*(void *)(v257 + 8 * v255 + 96))
              {
                goto LABEL_378;
              }
              int v258 = *(unsigned __int8 *)(v257 + 390 * v255 + 4018);
            }
            if ((v258 | 4) != 4
              || (int v275 = (*(unsigned __int8 (**)(uint64_t, uint64_t, void, llvm *, uint64_t))(*(void *)v257 + 400))(v257, *(void *)(**(void **)(*a1 + 40) + 40) + 272, *(void *)(*a1 + 56), v255, v254), v275 != v834)|| !v275 && v274 != *((void *)&v834 + 1))
            {
LABEL_378:
              BOOL v276 = (llvm::APFloatBase *)*a1;
LABEL_379:
              int v277 = sub_1CD8032A8((uint64_t)v276, v10, 0);
              goto LABEL_380;
            }
            uint64_t v587 = sub_1CD7EE490(*a1, (const char *)&__src, v255, v256);
            uint64_t v739 = v588;
            int v589 = (llvm::APFloatBase *)*a1;
            if (v129) {
              uint64_t v590 = sub_1CD787B1C((uint64_t)v589, v255, v256, (uint64_t)&__src, v743, (uint64_t)v740);
            }
            else {
              uint64_t v590 = sub_1CD787A68(v589, v255, v256, (uint64_t)&__src, v743, v740);
            }
            uint64_t v637 = sub_1CD3DC614((void *)*a1, (const llvm::APInt *)&__src, (llvm *)v834, *((uint64_t *)&v834 + 1), v587, v739, (uint64_t)v590, v591, 0xCu, 0, 0, 0, 0);
            __int16 v640 = 0;
            uint64_t v641 = *(void *)(*a1 + 832);
            if (v641) {
              __int16 v640 = *(_WORD *)(v641 + 8);
            }
            int v642 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&__src, (llvm *)v834, *((uint64_t *)&v834 + 1), v756, v748, v639, (uint64_t)v637, v638, v640);
            int v277 = sub_1CD3E1260((void *)*a1, (const llvm::APInt *)&__src, **(llvm ***)(v10 + 40), *(void *)(*(void *)(v10 + 40) + 8), (uint64_t)v642, v643, v808, v790, v779, v766, SHIDWORD(v766));
          }
LABEL_380:
          uint64_t v70 = v277;
          uint64_t v71 = v278;
          uint64_t v279 = __src;
          if ((void)__src)
          {
            int v280 = *(unsigned __int8 *)__src;
            if ((v280 - 4) > 0x1E)
            {
              if ((v280 - 3) >= 0xFFFFFFFE) {
                uint64_t v283 = __src;
              }
              else {
                uint64_t v283 = 0;
              }
              if ((v280 - 3) < 0xFFFFFFFE)
              {
LABEL_659:
                if (v280 == 3) {
                  *(void *)(v279 + 8) = 0;
                }
                goto LABEL_361;
              }
              unint64_t v282 = v283 + 8;
            }
            else
            {
              if ((*(unsigned char *)(__src + 1) & 0x7F) != 2 && !*(_DWORD *)(__src + 12)) {
                goto LABEL_361;
              }
              uint64_t v281 = *(void *)(__src + 16);
              if ((v281 & 4) == 0) {
                goto LABEL_361;
              }
              unint64_t v282 = v281 & 0xFFFFFFFFFFFFFFF8;
              if (!v282) {
                goto LABEL_361;
              }
            }
            *(void *)&long long v834 = &__src;
            uint64_t v284 = v282 + 16;
            p_src = &v834;
LABEL_578:
            sub_1CC5FA668(v284, p_src);
          }
LABEL_361:
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v270 = (uint64_t **)((char *)v828 + 16 * v829);
          *uint64_t v270 = v70;
          goto LABEL_363;
        }
LABEL_191:
        char v826 = 0;
        uint64_t v130 = *(unsigned __int8 **)(v10 + 64);
        *(void *)&long long v825 = v130;
        if (v130) {
          llvm::MetadataTracking::track((uint64_t)&v825, v130, 2);
        }
        DWORD2(v825) = *(_DWORD *)(v10 + 60);
        uint64_t v131 = *(long long **)(v10 + 32);
        uint64_t v132 = *(void *)(*(void *)(*(void *)v131 + 40) + 16 * *((unsigned int *)v131 + 2));
        uint64_t v133 = a1[1];
        if (((*(_DWORD *)(v133
                         + 92 * *(unsigned int *)(*((void *)v131 + 10) + 76)
                         + 4 * (v132 >> 3)
                         + 171588) >> (4 * (v132 & 7))) & 0xF) == 2)
        {
          *(void *)&long long v834 = 0;
          DWORD2(v834) = 0;
          long long v827 = *v131;
          long long v134 = *(long long *)((char *)v131 + 40);
          long long v823 = v131[5];
          long long v824 = v134;
          if (v119 == 365)
          {
            uint64_t v135 = *((void *)v131 + 15);
            int v136 = *((_DWORD *)v131 + 32);
            uint64_t v137 = *((void *)v131 + 20);
            int v138 = *((_DWORD *)v131 + 42);
          }
          else
          {
            uint64_t v137 = 0;
            int v138 = 0;
            uint64_t v135 = 0;
            int v136 = 0;
          }
          int v810 = v138;
          int v165 = v136;
          uint64_t v166 = v135;
          if (!sub_1CD01D89C(v133, (void *)*a1, **(llvm ***)(v10 + 40), *(void *)(*(void *)(v10 + 40) + 8), (uint64_t *)&v827, (uint64_t *)&v824, &v823, v25, v135, v136, v137, v138, &v826, (const llvm::APInt *)&v825, (uint64_t *)&v834, 0))
          {
            uint64_t v294 = *(void *)(v10 + 40);
            __int16 v295 = *(llvm **)v294;
            uint64_t v296 = *(void *)(v294 + 8);
            __int16 v297 = (void *)*a1;
            int v298 = DWORD2(v827);
            uint64_t v795 = v827;
            long long v299 = v824;
            uint64_t v300 = (void *)(*(void *)(v827 + 40) + 16 * DWORD2(v827));
            uint64_t v301 = sub_1CD7EBCBC(*a1, 1, (const llvm::APInt *)&v825, (BOOL)v295, v296, *v300, v300[1]);
            int v758 = v302;
            uint64_t v768 = v301;
            uint64_t v303 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v825, v295, v296, 0, 0);
            uint64_t v177 = sub_1CD7F6564(v297, (const char *)0xC0, (const llvm::APInt *)&v825, v295, v296, v795, v298, v305, v299, SDWORD2(v299), v768, v758, (uint64_t)v303, v304, v823, SDWORD2(v823));
            *(void *)&long long v827 = v177;
            DWORD2(v827) = v306;
            *((_WORD *)v177 + 36) = *(_WORD *)(v10 + 72);
            goto LABEL_312;
          }
          if ((void)v823)
          {
            uint64_t v168 = (void *)*a1;
            uint64_t v169 = *(void *)(v10 + 40);
            uint64_t v170 = *(llvm **)v169;
            uint64_t v171 = *(void *)(v169 + 8);
            if (v119 == 365)
            {
              *(void *)&long long __src = v827;
              DWORD2(__src) = DWORD2(v827);
              *(void *)&long long v838 = v824;
              DWORD2(v838) = DWORD2(v824);
              uint64_t v839 = v823;
              int v840 = DWORD2(v823);
              uint64_t v172 = v166;
              uint64_t v841 = v166;
              int v173 = v165;
              int v842 = v165;
              uint64_t v843 = v137;
              int v174 = v810;
              int v844 = v810;
              uint64_t v175 = sub_1CD7FF4E8(v168, (const char *)0x16D, (const llvm::APInt *)&v825, v170, v171, (uint64_t *)&__src, 5, *(unsigned __int16 *)(v10 + 72));
              uint64_t v176 = v137;
              uint64_t v177 = v175;
              *(void *)&long long v827 = v175;
              DWORD2(v827) = v178;
              if (v826) {
                goto LABEL_310;
              }
LABEL_312:
              uint64_t v243 = (uint64_t *)*((void *)&v827 + 1);
              if (v829 >= HIDWORD(v829)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v244 = (uint64_t **)((char *)v828 + 16 * v829);
              *uint64_t v244 = v177;
              v244[1] = v243;
              goto LABEL_314;
            }
            uint64_t v177 = sub_1CD7F5D38(v168, (const char *)0xC1, (const llvm::APInt *)&v825, v170, v171, v827, *((uint64_t *)&v827 + 1), v167, v824, *((uint64_t *)&v824 + 1), v823, SDWORD2(v823), SHIDWORD(v823), *(_WORD *)(v10 + 72));
            *(void *)&long long v827 = v177;
            DWORD2(v827) = v242;
            if (!v826) {
              goto LABEL_312;
            }
          }
          else
          {
            uint64_t v176 = v137;
            uint64_t v177 = (uint64_t *)v827;
            if (!v826) {
              goto LABEL_312;
            }
            BOOL v72 = v119 == 365;
            uint64_t v172 = v166;
            int v173 = v165;
            int v174 = v810;
            if (v72)
            {
LABEL_310:
              uint64_t v240 = sub_1CD7EBD7C((void *)*a1, (const llvm::APInt *)&v825, (uint64_t)v177, SDWORD2(v827), v172, v173, v176, v174, *(llvm **)v177[5], *(void *)(v177[5] + 8));
LABEL_456:
              uint64_t v177 = v240;
              *(void *)&long long v827 = v240;
              DWORD2(v827) = v241;
              goto LABEL_312;
            }
          }
          uint64_t v240 = sub_1CD7EBC20(*a1, (const llvm::APInt *)&v825, (uint64_t)v177, *((uint64_t *)&v827 + 1), *(llvm **)v177[5], *(void *)(v177[5] + 8));
          goto LABEL_456;
        }
        long long v834 = *(_OWORD *)*(void *)(v10 + 40);
        unsigned int v290 = sub_1CD3DB440((llvm::EVT *)&v834, (const char *)v130);
        if ((_BYTE)v834)
        {
          unint64_t v781 = 0;
          unsigned __int8 v794 = sub_1CB8C2FBC((unsigned __int8 *)&v834);
          uint64_t v741 = 0;
        }
        else
        {
          unint64_t v291 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v834 + 1) + 24), 0, v289);
          uint64_t v741 = v293;
          unint64_t v781 = v291 & 0xFFFFFFFFFFFFFF00;
          unsigned __int8 v794 = v291;
        }
        uint64_t v309 = *(uint64_t **)(v10 + 32);
        uint64_t v735 = v309[5];
        uint64_t v736 = v309[1];
        uint64_t v734 = v309[6];
        uint64_t v732 = v309[11];
        uint64_t v733 = v309[10];
        uint64_t v737 = *v309;
        unint64_t v310 = (uint64_t *)(*(void *)(*v309 + 40) + 16 * v736);
        uint64_t v312 = *v310;
        uint64_t v311 = v310[1];
        *(void *)&long long __src = v312;
        *((void *)&__src + 1) = v311;
        if ((_BYTE)v312)
        {
          unsigned __int8 v314 = sub_1CB8C2FBC((unsigned __int8 *)&__src);
          unint64_t v317 = 0;
          uint64_t v316 = 0;
        }
        else
        {
          unint64_t v313 = llvm::EVT::getEVT(*(llvm::EVT **)(v311 + 24), 0, v292);
          unsigned __int8 v314 = v313;
          uint64_t v316 = v315;
          unint64_t v317 = v313 & 0xFFFFFFFFFFFFFF00;
        }
        uint64_t v318 = *(unsigned __int8 **)(v10 + 64);
        *(void *)&long long v827 = v318;
        if (v318) {
          llvm::MetadataTracking::track((uint64_t)&v827, v318, 2);
        }
        DWORD2(v827) = *(_DWORD *)(v10 + 60);
        *(void *)&long long __src = &v838;
        *((void *)&__src + 1) = 0x800000000;
        uint64_t v731 = v290;
        sub_1CD3E535C((uint64_t *)&__src, v290, 0, 0);
        if (v290)
        {
          uint64_t v319 = v314;
          uint64_t v320 = 0;
          unsigned int v729 = (llvm *)(v781 | v794);
          uint64_t v730 = v316;
          uint64_t v796 = (llvm *)(v317 | v319);
          uint64_t v812 = 0;
          do
          {
            uint64_t v321 = *a1;
            uint64_t v322 = sub_1CD7EC9F4(*a1, v320, (uint64_t)&v827, 0);
            uint64_t v325 = *(void *)(v321 + 832);
            if (v325) {
              LOWORD(v325) = *(_WORD *)(v325 + 8);
            }
            unsigned int v326 = sub_1CCFDED5C(v321, 148, (const llvm::APInt *)&v827, v796, v316, v737, v736, v324, v322, v323, v325);
            uint64_t v759 = v327;
            uint64_t v769 = (uint64_t)v326;
            uint64_t v328 = *a1;
            uint64_t v329 = sub_1CD7EC9F4(*a1, v320, (uint64_t)&v827, 0);
            uint64_t v332 = *(void *)(v328 + 832);
            uint64_t v782 = v320;
            if (v332) {
              LOWORD(v332) = *(_WORD *)(v332 + 8);
            }
            __int16 v750 = sub_1CCFDED5C(v328, 148, (const llvm::APInt *)&v827, v796, v316, v735, v734, v331, v329, v330, v332);
            uint64_t v334 = v333;
            uint64_t v335 = (void *)*a1;
            unint64_t v337 = (llvm *)(*(uint64_t (**)(void))(*(void *)a1[1] + 400))();
            uint64_t v339 = v335[104];
            if (v339) {
              LOWORD(v339) = *(_WORD *)(v339 + 8);
            }
            unint64_t v340 = sub_1CD7F5D38(v335, (const char *)0xC1, (const llvm::APInt *)&v827, v337, v336, v769, v759, v338, (uint64_t)v750, v334, v733, v732, SHIDWORD(v732), v339);
            uint64_t v341 = __src + v812;
            *(void *)uint64_t v341 = v340;
            *(_DWORD *)(v341 + 8) = v342;
            unsigned int v343 = (void *)*a1;
            uint64_t v760 = *(void *)(__src + v812 + 8);
            uint64_t v770 = *(void *)(__src + v812);
            uint64_t v344 = sub_1CD787918(*a1, (const llvm::APInt *)&v827, (BOOL)v729, v741, 0, 0);
            uint64_t v744 = v345;
            uint64_t v751 = v344;
            uint64_t v346 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v827, v729, v741, 0, 0);
            __int16 v349 = sub_1CD3E1260(v343, (const llvm::APInt *)&v827, v729, v741, v770, v760, v751, v744, (uint64_t)v346, v347, v348);
            uint64_t v350 = __src + v812;
            *(void *)uint64_t v350 = v349;
            *(_DWORD *)(v350 + 8) = v351;
            uint64_t v320 = v782 + 1;
            v812 += 16;
            uint64_t v316 = v730;
          }
          while (v731 != v782 + 1);
        }
        uint64_t v352 = *(void *)(*a1 + 832);
        if (v352) {
          uint64_t v353 = *(unsigned __int16 *)(v352 + 8);
        }
        else {
          uint64_t v353 = 0;
        }
        unsigned __int8 v437 = sub_1CD7FF4E8((void *)*a1, (const char *)0x92, (const llvm::APInt *)&v827, (llvm *)v834, *((uint64_t *)&v834 + 1), (uint64_t *)__src, DWORD2(__src), v353);
        size_t v439 = v438;
        if ((long long *)__src != &v838) {
          free((void *)__src);
        }
        if ((void)v827)
        {
          int v440 = *(unsigned __int8 *)v827;
          if ((v440 - 4) > 0x1E)
          {
            if ((v440 - 3) >= 0xFFFFFFFE) {
              uint64_t v499 = v827;
            }
            else {
              uint64_t v499 = 0;
            }
            if ((v440 - 3) < 0xFFFFFFFE)
            {
              if (v440 == 3) {
                *(void *)(v827 + 8) = 0;
              }
              goto LABEL_539;
            }
            unint64_t v500 = v499 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v827 + 1) & 0x7F) != 2 && !*(_DWORD *)(v827 + 12)) {
              goto LABEL_539;
            }
            uint64_t v724 = *(void *)(v827 + 16);
            if ((v724 & 4) == 0) {
              goto LABEL_539;
            }
            unint64_t v500 = v724 & 0xFFFFFFFFFFFFFFF8;
            if (!v500) {
              goto LABEL_539;
            }
          }
          *(void *)&long long __src = &v827;
          sub_1CC5FA668(v500 + 16, &__src);
        }
LABEL_539:
        if (v829 >= HIDWORD(v829)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v441 = (uint64_t **)((char *)v828 + 16 * v829);
        *uint64_t v441 = v437;
        v441[1] = v439;
LABEL_314:
        LODWORD(v829) = v829 + 1;
        uint64_t v245 = v825;
        if (!(void)v825) {
          goto LABEL_266;
        }
        int v246 = *(unsigned __int8 *)v825;
        if ((v246 - 4) > 0x1E)
        {
          if ((v246 - 3) >= 0xFFFFFFFE) {
            uint64_t v266 = v825;
          }
          else {
            uint64_t v266 = 0;
          }
          if ((v246 - 3) < 0xFFFFFFFE) {
            goto LABEL_723;
          }
          unint64_t v248 = v266 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v825 + 1) & 0x7F) != 2 && !*(_DWORD *)(v825 + 12)) {
            goto LABEL_266;
          }
          uint64_t v247 = *(void *)(v825 + 16);
          if ((v247 & 4) == 0) {
            goto LABEL_266;
          }
          unint64_t v248 = v247 & 0xFFFFFFFFFFFFFFF8;
          if (!v248) {
            goto LABEL_266;
          }
        }
        uint64_t v267 = &v825;
LABEL_531:
        *(void *)&long long __src = v267;
        sub_1CC5FA668(v248 + 16, &__src);
        goto LABEL_266;
      }
      switch(*(_WORD *)(v10 + 24))
      {
        case 0x37:
          if (*(_WORD *)(v10 + 58))
          {
            uint64_t v211 = 0;
            unsigned int v212 = v829;
            uint64_t v213 = 40 * *(unsigned __int16 *)(v10 + 58);
            do
            {
              if (v212 >= HIDWORD(v829)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_OWORD *)v828 + v212) = *(_OWORD *)(*(void *)(v10 + 32) + v211);
              unsigned int v212 = v829 + 1;
              LODWORD(v829) = v829 + 1;
              v211 += 40;
            }
            while (v213 != v211);
          }
          goto LABEL_266;
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x56:
        case 0x57:
        case 0x5A:
        case 0x5B:
        case 0x5E:
        case 0x5F:
        case 0x60:
        case 0x62:
        case 0x63:
        case 0x64:
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
        case 0x91:
        case 0x92:
        case 0x93:
        case 0x94:
        case 0x95:
        case 0x96:
        case 0x97:
        case 0x98:
        case 0x99:
        case 0x9A:
        case 0x9B:
        case 0x9C:
        case 0x9D:
        case 0x9E:
        case 0x9F:
        case 0xA0:
        case 0xA1:
        case 0xA2:
        case 0xA3:
        case 0xA4:
        case 0xA5:
        case 0xA6:
        case 0xAB:
        case 0xAC:
        case 0xAD:
        case 0xAF:
        case 0xB0:
        case 0xB1:
        case 0xBB:
        case 0xC0:
        case 0xC2:
        case 0xC3:
        case 0xC4:
        case 0xC5:
        case 0xC6:
        case 0xC7:
        case 0xC8:
        case 0xC9:
        case 0xCA:
        case 0xD0:
        case 0xD2:
        case 0xD3:
        case 0xD4:
        case 0xD5:
        case 0xD6:
        case 0xD7:
        case 0xD8:
        case 0xD9:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xDD:
        case 0xDF:
        case 0xE0:
        case 0xE1:
        case 0xE2:
        case 0xE3:
        case 0xE4:
        case 0xE5:
        case 0xE6:
        case 0xE7:
        case 0xE8:
        case 0xE9:
        case 0xEA:
        case 0xEB:
        case 0xEC:
        case 0xED:
        case 0xEE:
        case 0xEF:
        case 0xF0:
        case 0xF1:
        case 0xF2:
        case 0xF3:
        case 0xF4:
        case 0xF5:
        case 0xF8:
        case 0xF9:
        case 0xFA:
        case 0xFB:
        case 0xFC:
          goto LABEL_359;
        case 0x3D:
        case 0x3E:
          *(void *)&long long __src = 0;
          DWORD2(__src) = 0;
          if (sub_1CD81A2B8(a1[1], v10, (uint64_t)&__src, (void *)*a1, v22, v23, v24, v25))
          {
            uint64_t v198 = (uint64_t *)__src;
          }
          else
          {
            uint64_t v198 = sub_1CD8032A8(*a1, v10, 0);
            *(void *)&long long __src = v198;
            DWORD2(__src) = v354;
          }
          unsigned int v199 = (uint64_t *)*((void *)&__src + 1);
          goto LABEL_259;
        case 0x4C:
        case 0x4E:
          *(void *)&long long __src = 0;
          DWORD2(__src) = 0;
          *(void *)&long long v834 = 0;
          DWORD2(v834) = 0;
          sub_1CD01D500(a1[1], v10, (uint64_t *)&__src, (uint64_t)&v834, *a1, v23, v24, v25);
          goto LABEL_220;
        case 0x4D:
        case 0x4F:
          *(void *)&long long __src = 0;
          DWORD2(__src) = 0;
          *(void *)&long long v834 = 0;
          DWORD2(v834) = 0;
          sub_1CD818EA4(a1[1], v10, (uint64_t *)&__src, (uint64_t)&v834, *a1, v23, v24, v25);
LABEL_220:
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v828 + v829) = __src;
          unsigned int v150 = HIDWORD(v829);
          unsigned int v151 = v829 + 1;
          LODWORD(v829) = v829 + 1;
          long long v152 = v834;
          goto LABEL_263;
        case 0x50:
        case 0x51:
          *(void *)&long long v834 = 0;
          DWORD2(v834) = 0;
          *(void *)&long long v827 = 0;
          DWORD2(v827) = 0;
          if ((sub_1CD8191AC((uint64_t *)a1[1], v10, (uint64_t **)&v834, (uint64_t)&v827, *a1) & 1) == 0)
          {
            sub_1CD80380C(*a1, v10, 0, (uint64_t **)&__src);
            *(void *)&long long v834 = __src;
            DWORD2(v834) = DWORD2(__src);
            *(void *)&long long v827 = v838;
            DWORD2(v827) = DWORD2(v838);
          }
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v828 + v829) = v834;
          unsigned int v150 = HIDWORD(v829);
          unsigned int v151 = v829 + 1;
          LODWORD(v829) = v829 + 1;
          long long v152 = v827;
          goto LABEL_263;
        case 0x52:
        case 0x53:
        case 0x54:
        case 0x55:
          uint64_t v120 = sub_1CD01C6A4((unsigned int *)a1[1], v10, *a1, v21, v22, v23, v24, v25);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0x58:
        case 0x59:
          uint64_t v120 = sub_1CD818254((uint64_t *)a1[1], v10, *a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0x5C:
        case 0x5D:
          uint64_t v139 = (uint64_t *)a1[1];
          int v140 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long __src = v140;
          if (v140) {
            llvm::MetadataTracking::track((uint64_t)&__src, v140, 2);
          }
          DWORD2(__src) = *(_DWORD *)(v10 + 60);
          uint64_t v141 = *(uint64_t **)(v10 + 32);
          uint64_t v142 = *v141;
          uint64_t v143 = v141[1];
          uint64_t v144 = v141[5];
          uint64_t v145 = v141[6];
          uint64_t v146 = *(void *)(v141[10] + 80);
          uint64_t v147 = (unsigned int *)(v146 + 24);
          if (*(_DWORD *)(v146 + 32) >= 0x41u) {
            uint64_t v147 = *(unsigned int **)v147;
          }
          uint64_t v70 = sub_1CD01CDD4(v139, v119, (const llvm::APInt *)&__src, v142, v143, v144, v145, *v147, *a1);
          uint64_t v71 = v148;
          if (!(void)__src) {
            goto LABEL_212;
          }
          int v149 = *(unsigned __int8 *)__src;
          if ((v149 - 4) > 0x1E)
          {
            if ((v149 - 3) >= 0xFFFFFFFE) {
              uint64_t v268 = __src;
            }
            else {
              uint64_t v268 = 0;
            }
            if ((v149 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v269 = v268 + 8;
LABEL_355:
              *(void *)&long long v834 = &__src;
              sub_1CC5FA668(v269 + 16, &v834);
              goto LABEL_212;
            }
            if (v149 == 3) {
              *(void *)(__src + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(__src + 1) & 0x7F) == 2 || *(_DWORD *)(__src + 12))
          {
            uint64_t v697 = *(void *)(__src + 16);
            if ((v697 & 4) != 0)
            {
              unint64_t v269 = v697 & 0xFFFFFFFFFFFFFFF8;
              if (v269) {
                goto LABEL_355;
              }
            }
          }
LABEL_212:
          if (!v70) {
            goto LABEL_266;
          }
          goto LABEL_361;
        case 0x61:
          uint64_t v209 = **(unsigned __int8 **)(v10 + 40);
          uint64_t v210 = a1[1];
          if (v209 != 1 && (!**(unsigned char **)(v10 + 40) || !*(void *)(v210 + 8 * v209 + 96))
            || (*(unsigned __int8 *)(v210 + 390 * **(unsigned __int8 **)(v10 + 40) + 4084) | 4) != 4
            || v209 != 1 && !*(void *)(v210 + 8 * v209 + 96)
            || (*(unsigned __int8 *)(v210 + 390 * **(unsigned __int8 **)(v10 + 40) + 3958) | 4) != 4)
          {
            goto LABEL_359;
          }
          goto LABEL_266;
        case 0x65:
        case 0x66:
        case 0x67:
        case 0x68:
        case 0x69:
        case 0x6A:
        case 0x6B:
        case 0x6C:
        case 0x6D:
        case 0x6E:
        case 0x6F:
        case 0x70:
        case 0x71:
        case 0x72:
        case 0x73:
        case 0x74:
        case 0x75:
        case 0x76:
        case 0x77:
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
        case 0x7E:
        case 0x7F:
        case 0x80:
        case 0x81:
        case 0x82:
        case 0x83:
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x88:
        case 0x89:
        case 0x8A:
        case 0x8B:
          if (v119 == 133) {
            goto LABEL_176;
          }
          if (v119 == 135) {
LABEL_172:
          }
            sub_1CCF923DC((uint64_t)a1, v10, (uint64_t)&v828);
          else {
            sub_1CCF92B90(a1, v10, (BOOL)&v828);
          }
          goto LABEL_266;
        case 0xA7:
        case 0xA8:
        case 0xA9:
        case 0xAA:
          uint64_t v120 = sub_1CD01C2A0(a1[1], v10, *a1, v21, v22, v23, v24, v25);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xAE:
          uint64_t v120 = sub_1CD0198B8((uint64_t *)a1[1], v10, *a1, 0);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xB2:
        case 0xB3:
          uint64_t v120 = sub_1CD812D90(a1[1], v10, 0, *a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xB4:
        case 0xB5:
          uint64_t v120 = sub_1CD81252C(a1[1], v10, (void *)*a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xB6:
          BOOL v214 = *(uint64_t **)(v10 + 40);
          uint64_t v215 = *v214;
          uint64_t v216 = v214[1];
          int v3 = *v214;
          if (*v214)
          {
            if ((v3 - 120) < 0x33)
            {
LABEL_287:
              uint64_t v120 = sub_1CD815814((uint64_t *)a1[1], v10, *a1);
              goto LABEL_360;
            }
          }
          else if (*(unsigned char *)(v216 + 8) == 19)
          {
            goto LABEL_287;
          }
          uint64_t v806 = &v838;
          *(void *)&long long __src = &v838;
          *((void *)&__src + 1) = 0x1000000000;
          uint64_t v793 = (llvm *)v215;
          sub_1CCF92AA8(v215, v216, (uint64_t)&__src);
          uint64_t v263 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*a1 + 56), 3, 0, DWORD2(__src), 0);
          uint64_t v265 = v264;
          if ((*(unsigned int (**)(void))(*(void *)a1[1] + 488))())
          {
            uint64_t v785 = v216;
            uint64_t v484 = v263;
            unint64_t v485 = *(unsigned __int8 **)(v10 + 64);
            *(void *)&long long v834 = v485;
            if (v485) {
              llvm::MetadataTracking::track((uint64_t)&v834, v485, 2);
            }
            DWORD2(v834) = *(_DWORD *)(v10 + 60);
            uint64_t v486 = *(uint64_t **)(v10 + 32);
            uint64_t v487 = *v486;
            uint64_t v488 = (void *)v486[1];
            uint64_t v489 = *(void *)(*a1 + 832);
            if (v489) {
              __int16 v490 = *(_WORD *)(v489 + 8);
            }
            else {
              __int16 v490 = 0;
            }
            v776 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, v263, v265, v487, v488, v490);
            uint64_t v571 = v570;
            uint64_t v572 = *a1;
            uint64_t v573 = sub_1CD3DD4D8(*a1, v484, v265);
            uint64_t v575 = sub_1CCFCDA78(v572, v484, v265, (uint64_t)&v834, (uint64_t)v776, v571, (uint64_t)v573, v574, (void *)__src, DWORD2(__src));
            int v577 = (void *)(v571 & 0xFFFFFFFF00000000 | v576);
            uint64_t v578 = *(void *)(*a1 + 832);
            if (v578) {
              __int16 v579 = *(_WORD *)(v578 + 8);
            }
            else {
              __int16 v579 = 0;
            }
            uint64_t v70 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, v793, v785, (uint64_t)v575, v577, v579);
            uint64_t v71 = v580;
            if (!(void)v834) {
              goto LABEL_830;
            }
            int v581 = *(unsigned __int8 *)v834;
            if ((v581 - 4) > 0x1E)
            {
              if ((v581 - 3) >= 0xFFFFFFFE) {
                uint64_t v605 = v834;
              }
              else {
                uint64_t v605 = 0;
              }
              if ((v581 - 3) < 0xFFFFFFFE)
              {
                if (v581 == 3) {
                  *(void *)(v834 + 8) = 0;
                }
                goto LABEL_830;
              }
              unint64_t v583 = v605 + 8;
            }
            else if ((*(unsigned char *)(v834 + 1) & 0x7F) != 2 && !*(_DWORD *)(v834 + 12) {
                   || (uint64_t v582 = *(void *)(v834 + 16), (v582 & 4) == 0)
            }
                   || (unint64_t v583 = v582 & 0xFFFFFFFFFFFFFFF8) == 0)
            {
LABEL_830:
              if ((long long *)__src != v806) {
                free((void *)__src);
              }
              goto LABEL_361;
            }
            *(void *)&long long v827 = &v834;
            sub_1CC5FA668(v583 + 16, &v827);
            goto LABEL_830;
          }
          if (!v3) {
            goto LABEL_828;
          }
          long long v36 = (uint64_t *)a1[1];
          uint64_t v38 = v793;
          if (v3 == 1)
          {
            if (!(_BYTE)v793) {
              goto LABEL_828;
            }
          }
          else if (!(_BYTE)v793 || !v36[v793 + 12])
          {
            goto LABEL_828;
          }
          if ((*((unsigned __int8 *)v36 + 390 * v793 + 4037) | 4) != 4
            || v3 != 1 && !v36[v793 + 12]
            || (*((unsigned __int8 *)v36 + 390 * v793 + 4039) | 4) != 4
            || v3 != 1 && !v36[v793 + 12])
          {
            goto LABEL_828;
          }
          LODWORD(v39) = *((unsigned __int8 *)v36 + 390 * v793 + 4033);
          if (v39 >= 2)
          {
LABEL_825:
            if (v39 != 4) {
              goto LABEL_828;
            }
          }
          if (v3 == 1 || v36[v38 + 12])
          {
            unsigned int v286 = *((unsigned __int8 *)v36 + 390 * v38 + 4034);
            if (v286 < 2 || v286 == 4)
            {
              uint64_t v287 = sub_1CD815814(v36, v10, *a1);
LABEL_829:
              uint64_t v70 = v287;
              uint64_t v71 = v288;
              goto LABEL_830;
            }
          }
LABEL_828:
          uint64_t v287 = sub_1CD8032A8(*a1, v10, 0);
          goto LABEL_829;
        case 0xB7:
        case 0xBC:
          uint64_t v120 = sub_1CD019244(a1[1], v10, *a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xB8:
        case 0xBD:
          uint64_t v120 = sub_1CD815314((uint64_t *)a1[1], v10, *a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xB9:
          uint64_t v120 = sub_1CD814C48((uint64_t *)a1[1], v10, *a1);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xBA:
          int v192 = *(uint64_t **)(v10 + 40);
          uint64_t v194 = *v192;
          uint64_t v193 = v192[1];
          *(void *)&long long v834 = v194;
          *((void *)&v834 + 1) = v193;
          if ((_BYTE)v194)
          {
            if (v194 - 120 < 0x33)
            {
LABEL_256:
              uint64_t v195 = (uint64_t *)a1[1];
LABEL_257:
              uint64_t v196 = sub_1CD019DD4(v195, v10, *a1);
LABEL_258:
              uint64_t v198 = v196;
              unsigned int v199 = v197;
LABEL_259:
              if (v829 >= HIDWORD(v829)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v200 = (uint64_t **)((char *)v828 + 16 * v829);
              *int v200 = v198;
              v200[1] = v199;
LABEL_265:
              LODWORD(v829) = v829 + 1;
              goto LABEL_266;
            }
          }
          else if (*(unsigned char *)(v193 + 8) == 19)
          {
            goto LABEL_256;
          }
          uint64_t v259 = a1[1];
          unsigned __int8 v260 = sub_1CD3DD468((unsigned __int8 *)&v834, v19, v20);
          if (v260 == 1)
          {
            if (!v260) {
              goto LABEL_671;
            }
          }
          else if (!v260 || !*(void *)(v259 + 8 * v260 + 96))
          {
            goto LABEL_671;
          }
          if ((*(unsigned __int8 *)(v259 + 390 * v260 + 4048) | 4) == 4) {
            goto LABEL_584;
          }
LABEL_671:
          unsigned int v592 = sub_1CD3E12F4((unsigned __int8 *)&v834, v261, v262);
          if (v592 < 9 || (v592 & 7) != 0) {
            goto LABEL_837;
          }
          *(void *)&long long __src = &v838;
          *((void *)&__src + 1) = 0x1000000000;
          sub_1CCF92AA8(v834, *((uint64_t *)&v834 + 1), (uint64_t)&__src);
          int v593 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*a1 + 56), 3, 0, DWORD2(__src), 0);
          uint64_t v595 = v594;
          if (!(*(unsigned int (**)(void))(*(void *)a1[1] + 488))()
            || (uint64_t v596 = a1[1], v593 != 1)
            && (!(_BYTE)v593 || !*(void *)(v596 + 8 * v593 + 96))
            || (*(unsigned __int8 *)(v596 + 390 * v593 + 4048) | 4) != 4
            && (v593 != 1 && !*(void *)(v596 + 8 * v593 + 96)
             || (*(unsigned __int8 *)(v596 + 390 * v593 + 4037) | 4) != 4
             || v593 != 1 && !*(void *)(v596 + 8 * v593 + 96)
             || (*(unsigned __int8 *)(v596 + 390 * v593 + 4039) | 4) != 4
             || !(_BYTE)v593
             || v593 != 1 && !*(void *)(v596 + 8 * v593 + 96)
             || (unsigned int v597 = *(unsigned __int8 *)(v596 + 390 * v593 + 4033), v597 >= 2) && v597 != 4
             || v593 != 1 && !*(void *)(v596 + 8 * v593 + 96)
             || (unsigned int v598 = *(unsigned __int8 *)(v596 + 390 * v593 + 4034), v598 >= 2) && v598 != 4))
          {
            if ((long long *)__src != &v838) {
              free((void *)__src);
            }
LABEL_837:
            if ((_BYTE)v834)
            {
              uint64_t v195 = (uint64_t *)a1[1];
              if ((v834 == 1 || v195[v834 + 12])
                && (*((unsigned __int8 *)v195 + 390 * v834 + 4037) | 4) == 4
                && (v834 == 1 || v195[v834 + 12])
                && (*((unsigned __int8 *)v195 + 390 * v834 + 4039) | 4) == 4
                && (v834 == 1 || v195[v834 + 12]))
              {
                unsigned int v727 = *((unsigned __int8 *)v195 + 390 * v834 + 4033);
                if ((v727 < 2 || v727 == 4) && (v834 == 1 || v195[v834 + 12]))
                {
                  unsigned int v728 = *((unsigned __int8 *)v195 + 390 * v834 + 4034);
                  if (v728 < 2 || v728 == 4) {
                    goto LABEL_257;
                  }
                }
              }
            }
LABEL_584:
            uint64_t v196 = sub_1CD8032A8(*a1, v10, 0);
            goto LABEL_258;
          }
          v599 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long v827 = v599;
          if (v599) {
            llvm::MetadataTracking::track((uint64_t)&v827, v599, 2);
          }
          DWORD2(v827) = *(_DWORD *)(v10 + 60);
          int v600 = *(uint64_t **)(v10 + 32);
          uint64_t v601 = *v600;
          v602 = (void *)v600[1];
          uint64_t v603 = *(void *)(*a1 + 832);
          if (v603) {
            __int16 v604 = *(_WORD *)(v603 + 8);
          }
          else {
            __int16 v604 = 0;
          }
          uint64_t v804 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v827, v593, v595, v601, v602, v604);
          uint64_t v679 = v678;
          uint64_t v680 = *a1;
          int v681 = sub_1CD3DD4D8(*a1, v593, v595);
          uint64_t v683 = sub_1CCFCDA78(v680, v593, v595, (uint64_t)&v827, (uint64_t)v804, v679, (uint64_t)v681, v682, (void *)__src, DWORD2(__src));
          unint64_t v684 = v679 & 0xFFFFFFFF00000000;
          uint64_t v686 = (void *)(v679 & 0xFFFFFFFF00000000 | v685);
          uint64_t v687 = *(void *)(*a1 + 832);
          if (v687) {
            __int16 v688 = *(_WORD *)(v687 + 8);
          }
          else {
            __int16 v688 = 0;
          }
          uint64_t v690 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xBA, (uint64_t)&v827, v593, v595, (uint64_t)v683, v686, v688);
          uint64_t v691 = *(void *)(*a1 + 832);
          if (v691) {
            __int16 v692 = *(_WORD *)(v691 + 8);
          }
          else {
            __int16 v692 = 0;
          }
          uint64_t v694 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v827, (llvm *)v834, *((uint64_t *)&v834 + 1), (uint64_t)v690, (void *)(v689 | v684), v692);
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v695 = (uint64_t **)((char *)v828 + 16 * v829);
          *uint64_t v695 = v694;
          v695[1] = (uint64_t *)(v693 | v684);
          LODWORD(v829) = v829 + 1;
          if ((void)v827)
          {
            int v696 = *(unsigned __int8 *)v827;
            if ((v696 - 4) > 0x1E)
            {
              if ((v696 - 3) >= 0xFFFFFFFE) {
                uint64_t v698 = v827;
              }
              else {
                uint64_t v698 = 0;
              }
              if ((v696 - 3) < 0xFFFFFFFE)
              {
                if (v696 == 3) {
                  *(void *)(v827 + 8) = 0;
                }
                goto LABEL_778;
              }
              unint64_t v699 = v698 + 8;
              goto LABEL_791;
            }
            if ((*(unsigned char *)(v827 + 1) & 0x7F) == 2 || *(_DWORD *)(v827 + 12))
            {
              uint64_t v726 = *(void *)(v827 + 16);
              if ((v726 & 4) != 0)
              {
                unint64_t v699 = v726 & 0xFFFFFFFFFFFFFFF8;
                if (v699)
                {
LABEL_791:
                  *(void *)&long long v825 = &v827;
                  sub_1CC5FA668(v699 + 16, &v825);
                }
              }
            }
          }
LABEL_778:
          if ((long long *)__src != &v838) {
            free((void *)__src);
          }
          goto LABEL_266;
        case 0xBE:
          long long __src = *(_OWORD *)*(void *)(v10 + 40);
          uint64_t v217 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long v834 = v217;
          unsigned __int8 v218 = __src;
          if (v217) {
            llvm::MetadataTracking::track((uint64_t)&v834, v217, 2);
          }
          DWORD2(v834) = *(_DWORD *)(v10 + 60);
          if (!v218) {
            goto LABEL_564;
          }
          uint64_t v219 = a1[1];
          if (*(unsigned char *)(v219 + 390 * v218 + 4033) == 2
            || *(unsigned char *)(v219 + 390 * v218 + 4035) == 2
            || *(unsigned char *)(v219 + 390 * v218 + 4034) == 2)
          {
            goto LABEL_564;
          }
          uint64_t v491 = 156;
          if (v218 - 15 < 0x69) {
            uint64_t v491 = 146;
          }
          if (*(unsigned char *)(v219 + 390 * v218 + v491 + 3862) == 2)
          {
LABEL_564:
            uint64_t v238 = sub_1CD8032A8(*a1, v10, 0);
            goto LABEL_565;
          }
          v615 = *(uint64_t **)(v10 + 32);
          uint64_t v616 = v615[1];
          uint64_t v787 = *v615;
          *(void *)uint64_t v801 = v615[6];
          uint64_t v754 = v615[5];
          uint64_t v764 = v615[10];
          unint64_t v817 = v615[11];
          *(void *)&long long v827 = sub_1CD3D91B4((llvm::EVT *)&__src, (uint64_t)v217, v20);
          *((void *)&v827 + 1) = v617;
          __int16 v619 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v827, v617, v618);
          uint64_t v621 = v620;
          uint64_t v622 = (void *)*a1;
          uint64_t v777 = sub_1CD787918(*a1, (const llvm::APInt *)&v834, (BOOL)v619, v620, 0, 0);
          uint64_t v746 = v623;
          uint64_t v624 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v834, v619, v621, 0, 0);
          __int16 v627 = sub_1CD3E1260(v622, (const llvm::APInt *)&v834, v619, v621, v787, v616, v777, v746, (uint64_t)v624, v625, v626);
          unint64_t v628 = v616 & 0xFFFFFFFF00000000;
          int v630 = (void *)(v616 & 0xFFFFFFFF00000000 | v629);
          if ((_BYTE)__src)
          {
            if (__src - 15 >= 0x69) {
              goto LABEL_727;
            }
          }
          else if (*(unsigned char *)(*((void *)&__src + 1) + 8) != 18)
          {
LABEL_727:
            int v631 = sub_1CD787A68((llvm::APFloatBase *)*a1, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)&v834, (uint64_t)v627, v630);
            goto LABEL_739;
          }
          int v631 = sub_1CD787B1C(*a1, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)&v834, (uint64_t)v627, (uint64_t)v630);
LABEL_739:
          uint64_t v788 = (uint64_t)v631;
          uint64_t v778 = v632 | v628;
          uint64_t v644 = *(void *)(*a1 + 832);
          if (v644) {
            __int16 v645 = *(_WORD *)(v644 + 8);
          }
          else {
            __int16 v645 = 0;
          }
          uint64_t v755 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, (llvm *)v827, *((uint64_t *)&v827 + 1), v754, *(void **)v801, v645);
          unint64_t v647 = *(void *)v801 & 0xFFFFFFFF00000000 | v646;
          uint64_t v648 = *(void *)(*a1 + 832);
          if (v648) {
            __int16 v649 = *(_WORD *)(v648 + 8);
          }
          else {
            __int16 v649 = 0;
          }
          unint64_t v747 = *(void *)v801 & 0xFFFFFFFF00000000;
          uint64_t v802 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, (llvm *)v827, *((uint64_t *)&v827 + 1), v764, (void *)v817, v649);
          unint64_t v651 = v817 & 0xFFFFFFFF00000000 | v650;
          uint64_t v765 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v834, v788, v778, (llvm *)v827, *((uint64_t *)&v827 + 1));
          uint64_t v654 = v653;
          uint64_t v655 = *(void *)(*a1 + 832);
          if (v655) {
            LOWORD(v655) = *(_WORD *)(v655 + 8);
          }
          unint64_t v656 = v817 & 0xFFFFFFFF00000000;
          int v818 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v834, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)v755, v647, v652, v788, v778, v655);
          uint64_t v659 = v658 | v747;
          uint64_t v660 = *(void *)(*a1 + 832);
          if (v660) {
            LOWORD(v660) = *(_WORD *)(v660 + 8);
          }
          uint64_t v661 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v834, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)v802, v651, v657, (uint64_t)v765, v654, v660);
          uint64_t v664 = *(void *)(*a1 + 832);
          if (v664) {
            LOWORD(v664) = *(_WORD *)(v664 + 8);
          }
          unsigned int v666 = sub_1CCFDED5C(*a1, 172, (const llvm::APInt *)&v834, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)v818, v659, v663, (uint64_t)v661, v662 | v656, v664);
          uint64_t v667 = *(void *)(v10 + 40);
          uint64_t v668 = *(llvm **)v667;
          uint64_t v669 = *(void *)(v667 + 8);
          uint64_t v670 = *(void *)(*a1 + 832);
          if (v670) {
            __int16 v671 = *(_WORD *)(v670 + 8);
          }
          else {
            __int16 v671 = 0;
          }
          uint64_t v238 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&v834, v668, v669, (uint64_t)v666, v665, v671);
LABEL_565:
          uint64_t v70 = v238;
          uint64_t v71 = v239;
          uint64_t v279 = v834;
          if (!(void)v834) {
            goto LABEL_361;
          }
          int v280 = *(unsigned __int8 *)v834;
          if ((v280 - 4) <= 0x1E)
          {
            if ((*(unsigned char *)(v834 + 1) & 0x7F) != 2 && !*(_DWORD *)(v834 + 12)) {
              goto LABEL_361;
            }
            uint64_t v492 = *(void *)(v834 + 16);
            if ((v492 & 4) == 0) {
              goto LABEL_361;
            }
            unint64_t v493 = v492 & 0xFFFFFFFFFFFFFFF8;
            if (!v493) {
              goto LABEL_361;
            }
            goto LABEL_577;
          }
          if ((v280 - 3) >= 0xFFFFFFFE) {
            uint64_t v494 = v834;
          }
          else {
            uint64_t v494 = 0;
          }
          if ((v280 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v493 = v494 + 8;
LABEL_577:
            *(void *)&long long v827 = &v834;
            uint64_t v284 = v493 + 16;
            p_src = &v827;
            goto LABEL_578;
          }
          goto LABEL_659;
        case 0xBF:
          uint64_t v179 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long __src = v179;
          if (v179) {
            llvm::MetadataTracking::track((uint64_t)&__src, v179, 2);
          }
          DWORD2(__src) = *(_DWORD *)(v10 + 60);
          uint64_t v180 = *(void *)(v10 + 32);
          uint64_t v181 = *(void *)v180;
          uint64_t v182 = *(void *)(v180 + 8);
          long long v834 = *(_OWORD *)(v180 + 40);
          uint64_t v184 = *(void *)(v180 + 80);
          unint64_t v183 = *(void *)(v180 + 88);
          long long v827 = *(_OWORD *)(*(void *)(v181 + 40) + 16 * v182);
          if (!(_BYTE)v827) {
            goto LABEL_378;
          }
          int v185 = (unsigned int *)a1[1];
          if (*((unsigned char *)v185 + 390 * v827 + 4033) == 2
            || *((unsigned char *)v185 + 390 * v827 + 4035) == 2
            || *((unsigned char *)v185 + 390 * v827 + 4034) == 2)
          {
            goto LABEL_378;
          }
          *(void *)uint64_t v792 = v834;
          uint64_t v811 = DWORD2(v834);
          int v186 = (void *)(*(void *)(v834 + 40) + 16 * DWORD2(v834));
          int v187 = sub_1CD7879C8(v185, *v186, v186[1]);
          if (v187 == 1)
          {
            uint64_t v633 = (uint64_t *)(*(void *)(*(void *)v792 + 40) + 16 * v811);
            uint64_t v635 = *v633;
            uint64_t v634 = v633[1];
            *(void *)&long long v825 = v635;
            *((void *)&v825 + 1) = v634;
            if ((_BYTE)v635) {
              char v636 = sub_1CB8C2FBC((unsigned __int8 *)&v825);
            }
            else {
              char v636 = llvm::EVT::getEVT(*(llvm::EVT **)(v634 + 24), 0, v188);
            }
            if (v636 != 2) {
              goto LABEL_378;
            }
          }
          else if (v187 != 2)
          {
            goto LABEL_378;
          }
          uint64_t v672 = sub_1CB87E200((unsigned __int8 *)&v827);
          int v803 = v673;
          int v819 = (llvm::Type *)v672;
          uint64_t v675 = sub_1CD3E3904((unsigned int *)&v834);
          BOOL v276 = (llvm::APFloatBase *)*a1;
          if (v819 != v675 || v803 != v674) {
            goto LABEL_379;
          }
          uint64_t v676 = *((void *)v276 + 104);
          if (v676) {
            __int16 v677 = *(_WORD *)(v676 + 8);
          }
          else {
            __int16 v677 = 0;
          }
          *(void *)&long long v834 = sub_1CD7F3564(v276, (const char *)0xD8, (uint64_t)&__src, (llvm *)v827, *((uint64_t *)&v827 + 1), v834, *((void **)&v834 + 1), v677);
          DWORD2(v834) = v700;
          uint64_t v701 = *(void *)(*a1 + 832);
          if (v701) {
            __int16 v702 = *(_WORD *)(v701 + 8);
          }
          else {
            __int16 v702 = 0;
          }
          uint64_t v820 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&__src, (llvm *)v827, *((uint64_t *)&v827 + 1), v184, (void *)v183, v702);
          unint64_t v704 = v183 & 0xFFFFFFFF00000000 | v703;
          uint64_t v705 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&__src, v181, v182, (llvm *)v827, *((uint64_t *)&v827 + 1));
          uint64_t v789 = v707;
          uint64_t v805 = (uint64_t)v705;
          uint64_t v708 = *(void *)(*a1 + 832);
          if (v708) {
            LOWORD(v708) = *(_WORD *)(v708 + 8);
          }
          unint64_t v709 = v183 & 0xFFFFFFFF00000000;
          *(void *)&long long v834 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&__src, (llvm *)v827, *((uint64_t *)&v827 + 1), v834, *((uint64_t *)&v834 + 1), v706, v181, v182, v708);
          DWORD2(v834) = v711;
          uint64_t v712 = *(void *)(*a1 + 832);
          if (v712) {
            LOWORD(v712) = *(_WORD *)(v712 + 8);
          }
          unsigned int v713 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&__src, (llvm *)v827, *((uint64_t *)&v827 + 1), (uint64_t)v820, v704, v710, v805, v789, v712);
          uint64_t v716 = *(void *)(*a1 + 832);
          if (v716) {
            LOWORD(v716) = *(_WORD *)(v716 + 8);
          }
          v718 = sub_1CCFDED5C(*a1, 172, (const llvm::APInt *)&__src, (llvm *)v827, *((uint64_t *)&v827 + 1), v834, *((uint64_t *)&v834 + 1), v715, (uint64_t)v713, v714 | v709, v716);
          uint64_t v719 = *(void *)(v10 + 40);
          uint64_t v720 = *(llvm **)v719;
          uint64_t v721 = *(void *)(v719 + 8);
          uint64_t v722 = *(void *)(*a1 + 832);
          if (v722) {
            __int16 v723 = *(_WORD *)(v722 + 8);
          }
          else {
            __int16 v723 = 0;
          }
          int v277 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xD8, (uint64_t)&__src, v720, v721, (uint64_t)v718, v717, v723);
          goto LABEL_380;
        case 0xC1:
          goto LABEL_191;
        case 0xCB:
          goto LABEL_172;
        case 0xCC:
          long long __src = *(_OWORD *)*(void *)(v10 + 40);
          if (!(_BYTE)__src) {
            goto LABEL_359;
          }
          uint64_t v220 = a1[1];
          if (*(unsigned char *)(v220 + 390 * __src + 4038) == 2
            || *(unsigned char *)(v220 + 390 * __src + 4037) == 2)
          {
            goto LABEL_359;
          }
          __int16 v221 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long v834 = v221;
          if (v221) {
            llvm::MetadataTracking::track((uint64_t)&v834, v221, 2);
          }
          DWORD2(v834) = *(_DWORD *)(v10 + 60);
          long long v827 = *(_OWORD *)(*(void *)(*(void *)(v10 + 32) + 40) + 80);
          unsigned int v222 = sub_1CD3E12F4((unsigned __int8 *)&__src, (uint64_t)v221, v20);
          unsigned int v225 = sub_1CD3E12F4((unsigned __int8 *)&v827, v223, v224);
          uint64_t v228 = sub_1CD7EBF14(*a1, v222 - v225, (const llvm::APInt *)&v834, (llvm *)__src, *((uint64_t *)&__src + 1), 0, 0);
          uint64_t v229 = v226;
          uint64_t v230 = *(uint64_t **)(v10 + 32);
          uint64_t v231 = *v230;
          uint64_t v232 = v230[1];
          uint64_t v233 = *(void *)(*a1 + 832);
          if (v233) {
            LOWORD(v233) = *(_WORD *)(v233 + 8);
          }
          uint64_t v235 = sub_1CCFDED5C(*a1, 175, (const llvm::APInt *)&v834, (llvm *)__src, *((uint64_t *)&__src + 1), v231, v232, v227, (uint64_t)v228, v226, v233);
          uint64_t v237 = *(void *)(*a1 + 832);
          if (v237) {
            LOWORD(v237) = *(_WORD *)(v237 + 8);
          }
          uint64_t v238 = sub_1CCFDED5C(*a1, 176, (const llvm::APInt *)&v834, (llvm *)__src, *((uint64_t *)&__src + 1), (uint64_t)v235, v234, v236, (uint64_t)v228, v229, v237);
          goto LABEL_565;
        case 0xCD:
          uint64_t v355 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long v834 = v355;
          if (v355) {
            llvm::MetadataTracking::track((uint64_t)&v834, v355, 2);
          }
          DWORD2(v834) = *(_DWORD *)(v10 + 60);
          long long v827 = *(_OWORD *)*(void *)(v10 + 40);
          int v761 = sub_1CD3DB440((llvm::EVT *)&v827, (const char *)v355);
          int v356 = *(uint64_t ***)(v10 + 32);
          uint64_t v797 = *v356;
          uint64_t v813 = (uint64_t)v356[1];
          long long v825 = *(_OWORD *)((*v356)[5] + 16 * v813);
          signed int v771 = sub_1CD3DB440((llvm::EVT *)&v825, v357);
          int v358 = v825;
          if (v825 == v827
            && ((_BYTE)v825 || *((void *)&v825 + 1) == *((void *)&v827 + 1)))
          {
            goto LABEL_440;
          }
          if (sub_1CD787F08((unsigned __int8 *)&v825, v827, *((uint64_t *)&v827 + 1)))
          {
            int v358 = v827;
LABEL_440:
            if (v358) {
              uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v827);
            }
            else {
              uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v827);
            }
            unint64_t v501 = ExtendedSizeInBits;
            if (v360 == 1) {
            uint64_t v502 = sub_1CD3E12F4((unsigned __int8 *)&v825, (uint64_t)v360, v361);
            }
            __int16 v503 = *(llvm::LLVMContext **)(*a1 + 56);
            unint64_t v504 = v501 / (unint64_t)v502;
            unint64_t v507 = sub_1CD3DD468((unsigned __int8 *)&v825, v505, v506);
            signed int v771 = v504;
            uint64_t v509 = (llvm *)sub_1CB8E5DAC(v503, v507, v508, v504, 0);
            uint64_t v511 = v510;
            *(void *)&long long v825 = v509;
            *((void *)&v825 + 1) = v510;
            uint64_t v512 = (void *)*a1;
            uint64_t v786 = sub_1CD3DD4D8(*a1, v509, v510);
            uint64_t v752 = v513;
            uint64_t v514 = sub_1CD7EC9F4(*a1, 0, (uint64_t)&v834, 0);
            __int16 v517 = 0;
            uint64_t v518 = v512[104];
            if (v518) {
              __int16 v517 = *(_WORD *)(v518 + 8);
            }
            uint64_t v797 = sub_1CD7F5D38(v512, (const char *)0x96, (const llvm::APInt *)&v834, v509, v511, (uint64_t)v786, v752, v516, (uint64_t)v797, v813, v514, v515, SHIDWORD(v515), v517);
            LODWORD(v813) = v519;
          }
          *(void *)&long long __src = &v838;
          *((void *)&__src + 1) = 0x1000000000;
          if (v771)
          {
            if (v771 >= 0x11) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memset(&v838, 255, 4 * v771);
            DWORD2(__src) += v771;
          }
          uint64_t v520 = *a1;
          if (v761 >= 1)
          {
            uint64_t v521 = 0;
            uint64_t v522 = v771 / v761 - 1;
            if (!*(unsigned char *)(*(void *)(**(void **)(v520 + 40) + 40) + 272)) {
              uint64_t v522 = 0;
            }
            unint64_t v523 = (_DWORD *)&v838 + v522;
            do
            {
              _DWORD *v523 = v521++;
              v523 += v771 / v761;
            }
            while (v761 != v521);
          }
          long long v524 = v827;
          long long v525 = v825;
          uint64_t v526 = sub_1CD3DD4D8(v520, (llvm *)v825, *((uint64_t *)&v825 + 1));
          uint64_t v529 = sub_1CCFCDA78(v520, (llvm *)v525, *((uint64_t *)&v525 + 1), (uint64_t)&v834, (uint64_t)v797, v813, (uint64_t)v526, v527, (void *)__src, DWORD2(__src));
          uint64_t v530 = *(void *)(v520 + 832);
          if (v530) {
            __int16 v531 = *(_WORD *)(v530 + 8);
          }
          else {
            __int16 v531 = 0;
          }
          uint64_t v70 = sub_1CD7F3564((llvm::APFloatBase *)v520, (const char *)0xD8, (uint64_t)&v834, (llvm *)v524, *((uint64_t *)&v524 + 1), (uint64_t)v529, v528, v531);
          uint64_t v71 = v532;
          if ((long long *)__src != &v838) {
            free((void *)__src);
          }
          uint64_t v279 = v834;
          if (!(void)v834) {
            goto LABEL_361;
          }
          int v280 = *(unsigned __int8 *)v834;
          if ((v280 - 4) <= 0x1E)
          {
            if ((*(unsigned char *)(v834 + 1) & 0x7F) != 2 && !*(_DWORD *)(v834 + 12)) {
              goto LABEL_361;
            }
            uint64_t v533 = *(void *)(v834 + 16);
            if ((v533 & 4) == 0) {
              goto LABEL_361;
            }
            unint64_t v534 = v533 & 0xFFFFFFFFFFFFFFF8;
            if (!v534) {
              goto LABEL_361;
            }
LABEL_658:
            *(void *)&long long __src = &v834;
            uint64_t v284 = v534 + 16;
            p_src = &__src;
            goto LABEL_578;
          }
          if ((v280 - 3) >= 0xFFFFFFFE) {
            uint64_t v584 = v834;
          }
          else {
            uint64_t v584 = 0;
          }
          if ((v280 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v534 = v584 + 8;
            goto LABEL_658;
          }
          goto LABEL_659;
        case 0xCE:
          uint64_t v370 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long __src = v370;
          if (v370) {
            llvm::MetadataTracking::track((uint64_t)&__src, v370, 2);
          }
          DWORD2(__src) = *(_DWORD *)(v10 + 60);
          uint64_t v372 = *(uint64_t **)(v10 + 32);
          uint64_t v371 = *(void *)(v10 + 40);
          uint64_t v373 = *(llvm **)v371;
          uint64_t v374 = *(void *)(v371 + 8);
          *(void *)&long long v834 = *(void *)v371;
          *((void *)&v834 + 1) = v374;
          uint64_t v375 = *v372;
          uint64_t v376 = (void *)v372[1];
          long long v827 = *(_OWORD *)(*(void *)(*v372 + 40) + 16 * v376);
          uint64_t v377 = *(void *)(*a1 + 832);
          if (v377) {
            __int16 v378 = *(_WORD *)(v377 + 8);
          }
          else {
            __int16 v378 = 0;
          }
          uint64_t v467 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xCD, (uint64_t)&__src, v373, v374, v375, v376, v378);
          uint64_t v784 = v468;
          uint64_t v800 = (uint64_t)v467;
          unsigned int v470 = sub_1CD3E12F4((unsigned __int8 *)&v834, v468, v469);
          unsigned int v473 = sub_1CD3E12F4((unsigned __int8 *)&v827, v471, v472);
          uint64_t v816 = sub_1CD7EBF14(*a1, v470 - v473, (const llvm::APInt *)&__src, (llvm *)v834, *((uint64_t *)&v834 + 1), 0, 0);
          uint64_t v476 = v474;
          uint64_t v477 = *a1;
          long long v478 = v834;
          uint64_t v479 = *(void *)(*a1 + 832);
          if (v479) {
            LOWORD(v479) = *(_WORD *)(v479 + 8);
          }
          uint64_t v481 = sub_1CCFDED5C(v477, 175, (const llvm::APInt *)&__src, (llvm *)v834, *((uint64_t *)&v834 + 1), v800, v784, v475, (uint64_t)v816, v474, v479);
          uint64_t v483 = *(void *)(v477 + 832);
          if (v483) {
            LOWORD(v483) = *(_WORD *)(v483 + 8);
          }
          int v277 = sub_1CCFDED5C(v477, 176, (const llvm::APInt *)&__src, (llvm *)v478, *((uint64_t *)&v478 + 1), (uint64_t)v481, v480, v482, (uint64_t)v816, v476, v483);
          goto LABEL_380;
        case 0xCF:
          int v362 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long v834 = v362;
          if (v362) {
            llvm::MetadataTracking::track((uint64_t)&v834, v362, 2);
          }
          DWORD2(v834) = *(_DWORD *)(v10 + 60);
          long long v827 = *(_OWORD *)*(void *)(v10 + 40);
          int v783 = sub_1CD3DB440((llvm::EVT *)&v827, (const char *)v362);
          int v363 = *(uint64_t ***)(v10 + 32);
          uint64_t v798 = *v363;
          uint64_t v814 = (uint64_t)v363[1];
          long long v825 = *(_OWORD *)((*v363)[5] + 16 * v814);
          LODWORD(v365) = sub_1CD3DB440((llvm::EVT *)&v825, v364);
          int v366 = v825;
          if (v825 == v827
            && ((_BYTE)v825 || *((void *)&v825 + 1) == *((void *)&v827 + 1)))
          {
            goto LABEL_449;
          }
          if (sub_1CD787F08((unsigned __int8 *)&v825, v827, *((uint64_t *)&v827 + 1)))
          {
            int v366 = v827;
LABEL_449:
            if (v366) {
              uint64_t v367 = sub_1CB87E200((unsigned __int8 *)&v827);
            }
            else {
              uint64_t v367 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v827);
            }
            unint64_t v535 = v367;
            if (v368 == 1) {
            unsigned int v536 = sub_1CD3E12F4((unsigned __int8 *)&v825, (uint64_t)v368, v369);
            }
            uint64_t v537 = *(llvm::LLVMContext **)(*a1 + 56);
            unint64_t v365 = v535 / (unint64_t)v536;
            unint64_t v540 = sub_1CD3DD468((unsigned __int8 *)&v825, v538, v539);
            unsigned __int8 v542 = (llvm *)sub_1CB8E5DAC(v537, v540, v541, v365, 0);
            uint64_t v544 = v543;
            *(void *)&long long v825 = v542;
            *((void *)&v825 + 1) = v543;
            uint64_t v545 = (void *)*a1;
            __int16 v774 = v542;
            uint64_t v546 = sub_1CD3DD4D8(*a1, v542, v543);
            uint64_t v753 = v547;
            uint64_t v762 = (uint64_t)v546;
            uint64_t v548 = sub_1CD7EC9F4(*a1, 0, (uint64_t)&v834, 0);
            __int16 v551 = 0;
            uint64_t v552 = v545[104];
            if (v552) {
              __int16 v551 = *(_WORD *)(v552 + 8);
            }
            uint64_t v798 = sub_1CD7F5D38(v545, (const char *)0x96, (const llvm::APInt *)&v834, v774, v544, v762, v753, v550, (uint64_t)v798, v814, v548, v549, SHIDWORD(v549), v551);
            LODWORD(v814) = v553;
          }
          uint64_t v554 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v834, (llvm *)v825, *((uint64_t *)&v825 + 1), 0, 0);
          unsigned int v763 = v555;
          uint64_t v775 = (uint64_t)v554;
          *(void *)&long long __src = &v838;
          *((void *)&__src + 1) = 0x1000000000;
          sub_1CCA47BAC((uint64_t)&__src, 0, (int)v365);
          uint64_t v556 = *a1;
          uint64_t v557 = (void *)__src;
          if (v783 >= 1)
          {
            uint64_t v558 = (int)v365 / v783 - 1;
            if (!*(unsigned char *)(*(void *)(**(void **)(v556 + 40) + 40) + 272)) {
              uint64_t v558 = 0;
            }
            uint64_t v559 = v783;
            uint64_t v560 = (_DWORD *)(__src + 4 * v558);
            uint64_t v561 = 4 * ((int)v365 / v783);
            do
            {
              _DWORD *v560 = v365;
              LODWORD(v365) = v365 + 1;
              uint64_t v560 = (_DWORD *)((char *)v560 + v561);
              --v559;
            }
            while (v559);
          }
          long long v562 = v827;
          __int16 v564 = sub_1CCFCDA78(v556, (llvm *)v825, *((uint64_t *)&v825 + 1), (uint64_t)&v834, v775, v763, (uint64_t)v798, v814, v557, DWORD2(__src));
          uint64_t v565 = *(void *)(v556 + 832);
          if (v565) {
            __int16 v566 = *(_WORD *)(v565 + 8);
          }
          else {
            __int16 v566 = 0;
          }
          uint64_t v567 = sub_1CD7F3564((llvm::APFloatBase *)v556, (const char *)0xD8, (uint64_t)&v834, (llvm *)v562, *((uint64_t *)&v562 + 1), (uint64_t)v564, v563, v566);
          uint64_t v71 = v568;
          if ((long long *)__src != &v838) {
            free((void *)__src);
          }
          if (!(void)v834) {
            goto LABEL_640;
          }
          int v569 = *(unsigned __int8 *)v834;
          if ((v569 - 4) > 0x1E)
          {
            if ((v569 - 3) >= 0xFFFFFFFE) {
              uint64_t v585 = v834;
            }
            else {
              uint64_t v585 = 0;
            }
            if ((v569 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v586 = v585 + 8;
LABEL_666:
              *(void *)&long long __src = &v834;
              sub_1CC5FA668(v586 + 16, &__src);
              goto LABEL_640;
            }
            if (v569 == 3) {
              *(void *)(v834 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v834 + 1) & 0x7F) == 2 || *(_DWORD *)(v834 + 12))
          {
            uint64_t v725 = *(void *)(v834 + 16);
            if ((v725 & 4) != 0)
            {
              unint64_t v586 = v725 & 0xFFFFFFFFFFFFFFF8;
              if (v586) {
                goto LABEL_666;
              }
            }
          }
LABEL_640:
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v270 = (uint64_t **)((char *)v828 + 16 * v829);
          *uint64_t v270 = v567;
LABEL_363:
          v270[1] = (uint64_t *)v71;
          unsigned int v201 = v829 + 1;
          LODWORD(v829) = v201;
          if (!v201) {
            goto LABEL_364;
          }
LABEL_267:
          uint64_t v202 = 0;
          *((unsigned char *)a1 + 16) = 1;
          unsigned int v203 = v828;
          uint64_t v204 = v201;
          uint64_t v205 = (uint64_t *)((char *)v828 + 8);
          do
          {
            uint64_t v206 = sub_1CCF8D6AC(a1, *(v205 - 1), *v205);
            *(v205 - 1) = v206;
            *(_DWORD *)uint64_t v205 = v207;
            uint64_t v208 = *v205;
            v205 += 2;
            sub_1CCF91F54((uint64_t)a1, a2, v202++, v206, v208);
          }
          while (v204 != v202);
          uint64_t v10 = v203[2 * a3];
LABEL_367:
          if (v828 != v830) {
            free(v828);
          }
LABEL_369:
          if (v831 != v833) {
            free(v831);
          }
          return v10;
        case 0xD1:
LABEL_176:
          sub_1CCF92270(a1, v10, (uint64_t)&v828);
          goto LABEL_266;
        case 0xDE:
          uint64_t v189 = *(void *)(v10 + 40);
          if (!*(void *)v189) {
            goto LABEL_359;
          }
          uint64_t v190 = a1[1];
          uint64_t v191 = *(void *)v189;
          if (v191 != 1 && (!*(void *)v189 || !*(void *)(v190 + 8 * v191 + 96))) {
            goto LABEL_359;
          }
          if ((*(unsigned __int8 *)(v190 + 390 * *(void *)v189 + 3959) | 4) != 4) {
            goto LABEL_359;
          }
          uint64_t v442 = *(unsigned __int8 **)(v10 + 64);
          *(void *)&long long __src = v442;
          if (v442)
          {
            llvm::MetadataTracking::track((uint64_t)&__src, v442, 2);
            uint64_t v189 = *(void *)(v10 + 40);
          }
          DWORD2(__src) = *(_DWORD *)(v10 + 60);
          uint64_t v444 = sub_1CD7ECDC4(*a1, (uint64_t)&__src, *(void *)v189, *(void *)(v189 + 8), 0, -0.0);
          uint64_t v447 = *(uint64_t **)(v10 + 32);
          uint64_t v446 = *(void *)(v10 + 40);
          uint64_t v448 = *(llvm **)v446;
          uint64_t v449 = *(void *)(v446 + 8);
          uint64_t v450 = *v447;
          uint64_t v451 = v447[1];
          uint64_t v452 = *(void *)(*a1 + 832);
          if (v452) {
            LOWORD(v452) = *(_WORD *)(v452 + 8);
          }
          int v277 = sub_1CCFDED5C(*a1, 97, (const llvm::APInt *)&__src, v448, v449, (uint64_t)v444, v443, v445, v450, v451, v452);
          goto LABEL_380;
        case 0xF6:
        case 0xF7:
          uint64_t v120 = sub_1CD8149DC(a1[1], v10, (llvm::APFloatBase *)*a1, v21, v22, v23, v24, v25);
          if (!v120) {
            goto LABEL_359;
          }
          goto LABEL_360;
        case 0xFD:
          sub_1CD8163A4(v10, *a1, (unint64_t)&__src);
          if (v829 >= HIDWORD(v829)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v828 + v829) = __src;
          unsigned int v150 = HIDWORD(v829);
          unsigned int v151 = v829 + 1;
          LODWORD(v829) = v829 + 1;
          long long v152 = v838;
LABEL_263:
          if (v151 >= v150) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v828 + v151) = v152;
          goto LABEL_265;
        case 0xFE:
          uint64_t v120 = sub_1CD816B0C(a1[1], v10, *a1);
          goto LABEL_360;
        default:
          if (v119 - 319 >= 2) {
            goto LABEL_359;
          }
          uint64_t v120 = sub_1CD81A0BC(a1[1], v10, *a1);
          goto LABEL_360;
      }
    default:
      uint64_t v77 = *(unsigned __int16 *)(a2 + 58);
      if (*(_WORD *)(a2 + 58))
      {
        uint64_t v78 = 0;
        do
        {
          sub_1CCF91F54((uint64_t)a1, a2, v78, v10, v78);
          ++v78;
        }
        while (v77 != v78);
      }
      goto LABEL_369;
  }
}

uint64_t sub_1CCF91F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = a3;
  uint64_t v9 = a1 + 24;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  *(void *)&long long v14 = a4;
  *((void *)&v14 + 1) = a5;
  uint64_t result = sub_1CD7B7CF0((uint64_t)v11, a1 + 24, (uint64_t)&v12, &v14);
  if (a2 != a4 || v7 != a5)
  {
    uint64_t v12 = a4;
    uint64_t v13 = a5;
    *(void *)&long long v14 = a4;
    *((void *)&v14 + 1) = a5;
    return sub_1CD7B7CF0((uint64_t)v11, v9, (uint64_t)&v12, &v14);
  }
  return result;
}

uint64_t sub_1CCF91FF0(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCF92194(a1, v6, v6 + 32 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    if (*(void *)(a1 + v8 + 8)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = *(_DWORD *)(a1 + v8 + 16) > 0xFFFFFFFD;
    }
    if (!v10)
    {
      *uint64_t v9 = *(_OWORD *)(a1 + v8 + 8);
      v9[1] = *(_OWORD *)(a1 + v8 + 24);
      v9 += 2;
    }
    v8 += 32;
  }
  while (v8 != 2048);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CCF92194(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CCF92194(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_OWORD *)(result + 8);
    uint64_t v9 = (_OWORD *)(result + 2056);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = *(_OWORD **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = xmmword_1CD923640;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    unint64_t v10 = *(void *)a2;
    unsigned int v11 = *(_DWORD *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v11 > 0xFFFFFFFD;
    }
    if (!v12)
    {
      uint64_t v15 = 0;
      uint64_t result = sub_1CD7B7C24((uint64_t)v5, v10, v11, &v15);
      uint64_t v13 = v15;
      unint64_t v14 = *(void *)a2;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)uint64_t v13 = v14;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 32;
  }
  return result;
}

void sub_1CCF92270(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v13 = 0;
  DWORD2(v13) = 0;
  *(void *)&long long v12 = 0;
  DWORD2(v12) = 0;
  if (!sub_1CD813B2C(a1[1], a2, (uint64_t)&v13, (uint64_t)&v12, *a1))
  {
    if (sub_1CD407020(a2))
    {
      sub_1CCF92B90(a1, a2, a3);
      return;
    }
    uint64_t v9 = sub_1CD8032A8(*a1, a2, 0);
    unsigned int v10 = *(_DWORD *)(a3 + 8);
    if (v10 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v11 = (uint64_t **)(*(void *)a3 + 16 * v10);
    *unsigned int v11 = v9;
    v11[1] = v8;
    goto LABEL_10;
  }
  unsigned int v6 = *(_DWORD *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a3 + 16 * v6) = v13;
  ++*(_DWORD *)(a3 + 8);
  if (sub_1CD407020(a2))
  {
    unsigned int v7 = *(_DWORD *)(a3 + 8);
    if (v7 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a3 + 16 * v7) = v12;
LABEL_10:
    ++*(_DWORD *)(a3 + 8);
  }
}

void sub_1CCF923DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  BOOL v6 = sub_1CD407020(a2);
  unsigned int v7 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v6);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  long long v103 = *(_OWORD *)(*(void *)(*v7 + 40) + 16 * v9);
  long long v109 = v103;
  unsigned int v10 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v107 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v107, v10, 2);
  }
  int v108 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v106 = 0;
  DWORD2(v106) = 0;
  *(void *)&long long v105 = 0;
  DWORD2(v105) = 0;
  if (!sub_1CD814434(*(uint64_t **)(a1 + 8), a2, (uint64_t)&v106, (uint64_t)&v105, *(void *)a1))
  {
    if (v6)
    {
      if (!(_BYTE)v103
        || (uint64_t v15 = *(void *)(a1 + 8), *(unsigned char *)(v15 + 390 * v103 + 3996) == 2)
        || *(unsigned char *)(v15 + 390 * v103 + 4039) == 2)
      {
        sub_1CCF92B90((uint64_t *)a1, a2, a3);
        goto LABEL_20;
      }
    }
    else if (!(_BYTE)v103 {
           || (uint64_t v16 = *(void *)(a1 + 8), *(unsigned char *)(v16 + 390 * v103 + 4064) == 2)
    }
           || *(unsigned char *)(v16 + 390 * v103 + 4039) == 2)
    {
      uint64_t v17 = sub_1CD8032A8(*(void *)a1, a2, 0);
      goto LABEL_17;
    }
    uint64_t v24 = sub_1CD3E12F4((unsigned __int8 *)&v109, v11, v12);
    int v25 = (int)v24;
    unint64_t v26 = (unint64_t)v24 >> 1;
    uint64_t v27 = sub_1CD7EBF14(*(void *)a1, v24 >> 1, (const llvm::APInt *)&v107, (llvm *)v109, *((uint64_t *)&v109 + 1), 0, 0);
    uint64_t v29 = v28;
    if (v25 == 64) {
      uint64_t v30 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v30 = 0xFFFFLL;
    }
    uint64_t v102 = sub_1CD7EBF14(*(void *)a1, v30, (const llvm::APInt *)&v107, (llvm *)v109, *((uint64_t *)&v109 + 1), 0, 0);
    uint64_t v32 = v31;
    uint64_t v104 = sub_1CD7ECDC4(*(void *)a1, (uint64_t)&v107, **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), 0, (double)(unint64_t)(1 << v26));
    uint64_t v35 = v34;
    uint64_t v36 = *(void *)(*(void *)a1 + 832);
    if (v36) {
      LOWORD(v36) = *(_WORD *)(v36 + 8);
    }
    uint64_t v38 = sub_1CCFDED5C(*(void *)a1, 177, (const llvm::APInt *)&v107, (llvm *)v109, *((uint64_t *)&v109 + 1), v8, v9, v33, (uint64_t)v27, v29, v36);
    unsigned int v40 = v39;
    uint64_t v41 = *(void *)(*(void *)a1 + 832);
    if (v41) {
      LOWORD(v41) = *(_WORD *)(v41 + 8);
    }
    uint64_t v42 = sub_1CCFDED5C(*(void *)a1, 171, (const llvm::APInt *)&v107, (llvm *)v109, *((uint64_t *)&v109 + 1), v8, v9, v37, (uint64_t)v102, v32, v41);
    BOOL v44 = v43;
    if (v6)
    {
      uint64_t v45 = *(void **)a1;
      uint64_t v46 = *(void *)(a2 + 32);
      long long v110 = *(_OWORD *)*(void *)(a2 + 40);
      LOBYTE(v111) = 1;
      uint64_t v112 = 0;
      int v47 = *(_DWORD *)(v46 + 8);
      *(void *)&long long v115 = *(void *)v46;
      DWORD2(v115) = v47;
      uint64_t v116 = v38;
      LODWORD(v117) = v40;
      char v48 = sub_1CD7EB5F0(v45, (const char *)0x86, (const llvm::APInt *)&v107, (uint64_t *)&v110, 2, (uint64_t *)&v115, 2);
      char v49 = *(void **)a1;
      long long v115 = *(_OWORD *)*(void *)(a2 + 40);
      LOBYTE(v116) = 1;
      uint64_t v117 = 0;
      *(void *)&long long v110 = v48;
      *((void *)&v110 + 1) = 1;
      uint64_t v111 = v48;
      LODWORD(v112) = v50;
      uint64_t v113 = v104;
      int v114 = v35;
      __int16 v51 = sub_1CD7EB5F0(v49, (const char *)0x67, (const llvm::APInt *)&v107, (uint64_t *)&v115, 2, (uint64_t *)&v110, 3);
      int v53 = v52;
      uint64_t v54 = *(void **)a1;
      uint64_t v55 = *(void *)(a2 + 32);
      long long v110 = *(_OWORD *)*(void *)(a2 + 40);
      LOBYTE(v111) = 1;
      uint64_t v112 = 0;
      int v56 = *(_DWORD *)(v55 + 8);
      *(void *)&long long v115 = *(void *)v55;
      DWORD2(v115) = v56;
      uint64_t v116 = v42;
      LODWORD(v117) = v44;
      int v58 = sub_1CD7EB5F0(v54, (const char *)0x86, (const llvm::APInt *)&v107, (uint64_t *)&v110, 2, (uint64_t *)&v115, 2);
      int v60 = v59;
      __int16 v61 = 0;
      uint64_t v62 = *(void *)(*(void *)a1 + 832);
      if (v62) {
        __int16 v61 = *(_WORD *)(v62 + 8);
      }
      uint64_t v63 = sub_1CCFDED5C(*(void *)a1, 2, (const llvm::APInt *)&v107, (llvm *)1, 0, (uint64_t)v51, 1, v57, (uint64_t)v58, 1, v61);
      uint64_t v64 = *(void **)a1;
      long long v115 = *(_OWORD *)*(void *)(a2 + 40);
      LOBYTE(v116) = 1;
      uint64_t v117 = 0;
      *(void *)&long long v110 = v63;
      DWORD2(v110) = v65;
      uint64_t v111 = v51;
      LODWORD(v112) = v53;
      uint64_t v113 = v58;
      int v114 = v60;
      unsigned int v67 = sub_1CD7EB5F0(v64, (const char *)0x65, (const llvm::APInt *)&v107, (uint64_t *)&v115, 2, (uint64_t *)&v110, 3);
      unsigned int v68 = *(_DWORD *)(a3 + 8);
      if (v68 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v69 = (uint64_t **)(*(void *)a3 + 16 * v68);
      llvm::MachineFunction *v69 = v67;
      v69[1] = v66;
      unsigned int v70 = *(_DWORD *)(a3 + 12);
      unsigned int v71 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v71;
      if (v71 >= v70) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v72 = (uint64_t **)(*(void *)a3 + 16 * v71);
      *BOOL v72 = v67;
      v72[1] = (uint64_t *)1;
      goto LABEL_19;
    }
    uint64_t v73 = *(void *)(a2 + 40);
    uint64_t v74 = *(llvm **)v73;
    uint64_t v75 = *(void *)(v73 + 8);
    uint64_t v76 = *(void *)(*(void *)a1 + 832);
    if (v76) {
      __int16 v77 = *(_WORD *)(v76 + 8);
    }
    else {
      __int16 v77 = 0;
    }
    BOOL v79 = sub_1CD7F3564(*(llvm::APFloatBase **)a1, (const char *)0xCA, (uint64_t)&v107, v74, v75, (uint64_t)v38, v40, v77);
    uint64_t v81 = v78;
    uint64_t v82 = *(void *)(a2 + 40);
    uint64_t v83 = *(llvm **)v82;
    uint64_t v84 = *(void *)(v82 + 8);
    uint64_t v85 = *(void *)(*(void *)a1 + 832);
    if (v85) {
      LOWORD(v85) = *(_WORD *)(v85 + 8);
    }
    int v86 = sub_1CCFDED5C(*(void *)a1, 98, (const llvm::APInt *)&v107, v83, v84, (uint64_t)v79, v78, v80, (uint64_t)v104, v35, v85);
    unint64_t v88 = v81 & 0xFFFFFFFF00000000 | v87;
    uint64_t v89 = *(void *)(a2 + 40);
    uint64_t v90 = *(llvm **)v89;
    uint64_t v91 = *(void *)(v89 + 8);
    uint64_t v92 = *(void *)(*(void *)a1 + 832);
    if (v92) {
      __int16 v93 = *(_WORD *)(v92 + 8);
    }
    else {
      __int16 v93 = 0;
    }
    uint64_t v94 = sub_1CD7F3564(*(llvm::APFloatBase **)a1, (const char *)0xCA, (uint64_t)&v107, v90, v91, (uint64_t)v42, v44, v93);
    uint64_t v97 = *(void *)(a2 + 40);
    int v98 = *(llvm **)v97;
    uint64_t v99 = *(void *)(v97 + 8);
    uint64_t v100 = *(void *)(*(void *)a1 + 832);
    if (v100) {
      LOWORD(v100) = *(_WORD *)(v100 + 8);
    }
    uint64_t v17 = sub_1CCFDED5C(*(void *)a1, 96, (const llvm::APInt *)&v107, v98, v99, (uint64_t)v86, v88, v96, (uint64_t)v94, v95, v100);
LABEL_17:
    unsigned int v19 = *(_DWORD *)(a3 + 8);
    if (v19 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v20 = (uint64_t **)(*(void *)a3 + 16 * v19);
    void *v20 = v17;
    v20[1] = v18;
    goto LABEL_19;
  }
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a3 + 16 * v13) = v106;
  unsigned int v14 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v14;
  if (v6)
  {
    if (v14 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a3 + 16 * v14) = v105;
LABEL_19:
    ++*(_DWORD *)(a3 + 8);
  }
LABEL_20:
  if (v107)
  {
    int v21 = *v107;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        uint64_t v22 = v107;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v21 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v23 = (unint64_t)(v22 + 8);
LABEL_30:
        *(void *)&long long v110 = &v107;
        sub_1CC5FA668(v23 + 16, &v110);
        return;
      }
      if (v21 == 3) {
        *((void *)v107 + 1) = 0;
      }
    }
    else if ((v107[1] & 0x7F) == 2 || *((_DWORD *)v107 + 3))
    {
      uint64_t v101 = *((void *)v107 + 2);
      if ((v101 & 4) != 0)
      {
        unint64_t v23 = v101 & 0xFFFFFFFFFFFFFFF8;
        if (v23) {
          goto LABEL_30;
        }
      }
    }
  }
}

uint64_t sub_1CCF92AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a1;
  v13[1] = a2;
  unint64_t v4 = sub_1CD3E12F4((unsigned __int8 *)v13, a2, a3);
  uint64_t result = sub_1CD3DB440((llvm::EVT *)v13, v5);
  if (result)
  {
    int v7 = 0;
    unint64_t v8 = (unint64_t)v4 >> 3;
    int v9 = -1;
    do
    {
      if ((int)v8 >= 1)
      {
        unsigned int v10 = *(_DWORD *)(a3 + 8);
        unint64_t v11 = (unint64_t)v4 >> 3;
        do
        {
          if (v10 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v12 = v9 + v11;
          LODWORD(v11) = v11 - 1;
          *(_DWORD *)(*(void *)a3 + 4 * v10) = v12;
          unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v10;
        }
        while ((v11 + 1) > 1);
      }
      ++v7;
      v9 += v8;
    }
    while (v7 != result);
  }
  return result;
}

void sub_1CCF92B90(uint64_t *a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = a3;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  unint64_t v8 = *(llvm **)v6;
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v83 = v8;
  uint64_t v84 = v7;
  if ((_BYTE)v8)
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v83);
    unint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v7 + 24), 0, a3);
    unint64_t v11 = v10;
    unint64_t v12 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  unsigned int v13 = (llvm *)(v12 | EVT);
  unsigned int v14 = sub_1CD3DB440((llvm::EVT *)&v83, v10);
  unsigned int v79 = *(unsigned __int16 *)(a2 + 56);
  uint64_t v15 = (uint64_t)v13;
  uint64_t v16 = (uint64_t)v11;
  if ((*(_WORD *)(a2 + 24) & 0xFFFE) == 0x8A) {
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, void, llvm *, const char *))(**(void **)(*a1 + 24) + 400))(*(void *)(*a1 + 24), *(void *)(**(void **)(*a1 + 40) + 40) + 272, *(void *)(*a1 + 56), v13, v11);
  }
  v94[0] = v15;
  v94[1] = v16;
  char v95 = 1;
  uint64_t v96 = 0;
  long long v78 = *(_OWORD *)*(void *)(a2 + 32);
  uint64_t v17 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v81 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v81, v17, 2);
  }
  int v82 = *(_DWORD *)(a2 + 60);
  uint64_t v91 = v93;
  uint64_t v92 = 0x2000000000;
  unint64_t v88 = v90;
  uint64_t v89 = 0x2000000000;
  if (v14)
  {
    uint64_t v74 = v13;
    uint64_t v75 = (uint64_t)v11;
    uint64_t v76 = v3;
    uint64_t v18 = 0;
    uint64_t v77 = v14;
    while (1)
    {
      uint64_t v85 = v87;
      uint64_t v86 = 0x400000000;
      uint64_t v20 = sub_1CD7EC9F4(*a1, v18, (uint64_t)&v81, 0);
      uint64_t v22 = v21;
      if (v86 >= (unint64_t)HIDWORD(v86)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v85 + v86) = v78;
      unsigned int v23 = v86 + 1;
      LODWORD(v86) = v86 + 1;
      if (v79 >= 2) {
        break;
      }
LABEL_25:
      unsigned int v40 = sub_1CD7EB5F0((void *)*a1, (const char *)*(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v81, v94, 2, (uint64_t *)v85, v23);
      uint64_t v41 = (uint64_t)v40;
      if ((*(_WORD *)(a2 + 24) & 0xFFFE) == 0x8A)
      {
        uint64_t v46 = (void *)*a1;
        uint64_t v47 = sub_1CD787918(*a1, (const llvm::APInt *)&v81, (BOOL)v74, v75, 0, 0);
        uint64_t v49 = v48;
        int v50 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v81, v74, v75, 0, 0);
        unint64_t v43 = sub_1CD3E1260(v46, (const llvm::APInt *)&v81, v74, v75, v41, 0, v47, v49, (uint64_t)v50, v51, v52);
        uint64_t v42 = (uint64_t *)v53;
      }
      else
      {
        uint64_t v42 = 0;
        unint64_t v43 = v40;
      }
      if (v92 >= (unint64_t)HIDWORD(v92)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v44 = (uint64_t **)((char *)v91 + 16 * v92);
      *BOOL v44 = v43;
      v44[1] = v42;
      LODWORD(v92) = v92 + 1;
      if (v89 >= (unint64_t)HIDWORD(v89)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v45 = (uint64_t *)((char *)v88 + 16 * v89);
      *uint64_t v45 = v41;
      v45[1] = 1;
      LODWORD(v89) = v89 + 1;
      if (v85 != v87) {
        free(v85);
      }
      if (++v18 == v77)
      {
        uint64_t v54 = (uint64_t *)v91;
        uint64_t v55 = v92;
        uint64_t v3 = v76;
        goto LABEL_38;
      }
    }
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = *(void *)(a2 + 32) + v24;
      uint64_t v27 = *(uint64_t **)(v25 + 40);
      unint64_t v26 = *(void *)(v25 + 48);
      uint64_t v28 = (uint64_t *)(v27[5] + 16 * v26);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      v80[0] = v30;
      v80[1] = v29;
      if ((_BYTE)v30)
      {
        if (v30 - 15 < 0x9C)
        {
          uint64_t v31 = *a1;
          LOBYTE(v32) = sub_1CB8C2FBC((unsigned __int8 *)v80);
          unint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_18:
          uint64_t v37 = *(void *)(v31 + 832);
          if (v37) {
            LOWORD(v37) = *(_WORD *)(v37 + 8);
          }
          uint64_t v27 = sub_1CCFDED5C(v31, 148, (const llvm::APInt *)&v81, (llvm *)(v34 | v32), v35, (uint64_t)v27, v26, v33, v20, v22, v37);
          unint64_t v26 = v26 & 0xFFFFFFFF00000000 | v38;
          unsigned int v23 = v86;
        }
      }
      else if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
      {
        uint64_t v31 = *a1;
        unint64_t v32 = llvm::EVT::getEVT(*(llvm::EVT **)(v29 + 24), 0, v19);
        uint64_t v35 = v36;
        unint64_t v34 = v32 & 0xFFFFFFFFFFFFFF00;
        goto LABEL_18;
      }
      if (v23 >= HIDWORD(v86)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v39 = (uint64_t **)((char *)v85 + 16 * v23);
      void *v39 = v27;
      v39[1] = (uint64_t *)v26;
      unsigned int v23 = v86 + 1;
      LODWORD(v86) = v86 + 1;
      v24 += 40;
      if (40 * v79 - 40 == v24) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v55 = 0;
  uint64_t v54 = (uint64_t *)v93;
LABEL_38:
  uint64_t v56 = *(void *)(*a1 + 832);
  if (v56) {
    uint64_t v57 = *(unsigned __int16 *)(v56 + 8);
  }
  else {
    uint64_t v57 = 0;
  }
  int v58 = sub_1CD7FF4E8((void *)*a1, (const char *)0x92, (const llvm::APInt *)&v81, v83, v84, v54, v55, v57);
  int v60 = v59;
  uint64_t v61 = *(void *)(*a1 + 832);
  if (v61) {
    uint64_t v62 = *(unsigned __int16 *)(v61 + 8);
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v64 = sub_1CD7FF4E8((void *)*a1, (const char *)2, (const llvm::APInt *)&v81, (llvm *)1, 0, (uint64_t *)v88, v89, v62);
  unsigned int v65 = *(_DWORD *)(v3 + 8);
  if (v65 >= *(_DWORD *)(v3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v66 = (uint64_t **)(*(void *)v3 + 16 * v65);
  *uint64_t v66 = v58;
  v66[1] = v60;
  unsigned int v67 = *(_DWORD *)(v3 + 12);
  unsigned int v68 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v68;
  if (v68 >= v67) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v69 = (uint64_t **)(*(void *)v3 + 16 * v68);
  llvm::MachineFunction *v69 = v64;
  v69[1] = v63;
  ++*(_DWORD *)(v3 + 8);
  if (v88 != v90) {
    free(v88);
  }
  if (v91 != v93) {
    free(v91);
  }
  if (v81)
  {
    int v70 = *v81;
    if ((v70 - 4) > 0x1E)
    {
      if ((v70 - 3) >= 0xFFFFFFFE) {
        unsigned int v71 = v81;
      }
      else {
        unsigned int v71 = 0;
      }
      if ((v70 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v72 = (unint64_t)(v71 + 8);
LABEL_60:
        uint64_t v91 = &v81;
        sub_1CC5FA668(v72 + 16, &v91);
        return;
      }
      if (v70 == 3) {
        *((void *)v81 + 1) = 0;
      }
    }
    else if ((v81[1] & 0x7F) == 2 || *((_DWORD *)v81 + 3))
    {
      uint64_t v73 = *((void *)v81 + 2);
      if ((v73 & 4) != 0)
      {
        unint64_t v72 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (v72) {
          goto LABEL_60;
        }
      }
    }
  }
}

uint64_t sub_1CCF93BD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (unint64_t *)a1[2];
  v159[0] = 0;
  v159[1] = 0;
  int v160 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  __int16 v161 = 0;
  do
  {
    uint64_t v12 = *(void *)(*a1 + v10);
    if (v12)
    {
      if (*(_WORD *)(v12 + 24) == 153)
      {
        uint64_t v13 = *(void *)(v12 + 32);
        unsigned int v14 = (unsigned __int8 *)(*(void *)(*(void *)v13 + 40) + 16 * *(unsigned int *)(v13 + 8));
        int v15 = *v14;
        uint64_t v16 = (unsigned __int8 *)(*(void *)(v12 + 40) + 16 * *(unsigned int *)(*a1 + v10 + 8));
        if (v15 == *v16)
        {
          uint64_t v17 = *((void *)v16 + 1);
          uint64_t v18 = *((void *)v14 + 1);
          if (v15 || v18 == v17)
          {
            *(_OWORD *)unsigned __int8 v164 = *(_OWORD *)v13;
            v165[0] = *(_OWORD *)(v13 + 40);
            uint64_t v20 = sub_1CD7D1318((uint64_t)v159, v164);
            unint64_t v21 = *(unsigned int *)(v20 + 8);
            if (v21 >= *(unsigned int *)(v20 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v20 + 4 * v21) = v9;
            ++*(_DWORD *)(v20 + 8);
            uint64_t v22 = *(_OWORD **)(v12 + 32);
            *(_OWORD *)unsigned __int8 v164 = *(_OWORD *)((char *)v22 + 40);
            v165[0] = *v22;
            uint64_t v23 = sub_1CD7D1318((uint64_t)v159, v164);
            unint64_t v24 = *(unsigned int *)(v23 + 8);
            if (v24 >= *(unsigned int *)(v23 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v23 + 4 * v24) = v9;
            ++*(_DWORD *)(v23 + 8);
          }
        }
      }
    }
    v10 += 16;
    ++v9;
  }
  while (v10 != 64);
  uint64_t v25 = v161;
  unint64_t v26 = v162;
  if (v161 != v162)
  {
    while (*((_DWORD *)v25 + 10) < 2u)
    {
LABEL_20:
      v25 += 12;
      if (v25 == v26) {
        goto LABEL_17;
      }
    }
    uint64_t v30 = *(unsigned int *)(a2 + 8);
    if (!v30)
    {
LABEL_39:
      uint64_t v47 = *a1 + 16 * *(unsigned int *)v25[4];
      uint64_t v48 = *v25;
      *(_DWORD *)(v47 + 8) = *((_DWORD *)v25 + 2);
      *(void *)uint64_t v47 = v48;
      uint64_t v49 = *a1 + 16 * *(unsigned int *)(v25[4] + 4);
      uint64_t v50 = v25[2];
      *(_DWORD *)(v49 + 8) = *((_DWORD *)v25 + 6);
      *(void *)uint64_t v49 = v50;
      *((_DWORD *)v25 + 10) = 0;
      *(_OWORD *)unsigned __int8 v164 = *((_OWORD *)v25 + 1);
      v165[0] = *(_OWORD *)v25;
      *(_DWORD *)(sub_1CD7D1318((uint64_t)v159, v164) + 8) = 0;
      goto LABEL_20;
    }
    uint64_t v31 = *(int **)a2;
    uint64_t v32 = 4 * v30;
    while (1)
    {
      if (*v31 != -1)
      {
        unsigned int v33 = *v31 / *((_DWORD *)a1 + 6);
        uint64_t v34 = *(void *)(*a1 + 16 * v33);
        int v35 = *(unsigned __int16 *)(v34 + 24);
        if (v35 == 51) {
          goto LABEL_34;
        }
        if (v35 != 153) {
          goto LABEL_38;
        }
        uint64_t v36 = (__int32 *)v25[4];
        size_t v37 = *((unsigned int *)v25 + 10);
        unsigned int v38 = &v36[v37];
        unint64_t v39 = wmemchr(v36, v33, v37);
        unsigned int v40 = v39 ? v39 : v38;
        uint64_t v41 = v25[4];
        if (v40 == (__int32 *)(v41 + 4 * *((unsigned int *)v25 + 10))) {
          goto LABEL_38;
        }
        unsigned int v42 = *((_DWORD *)a1 + 6);
        unsigned int v43 = *(_DWORD *)(*(void *)(v34 + 80) + 4 * (*v31 % v42));
        if (v43 == -1)
        {
LABEL_34:
          int v46 = -1;
        }
        else
        {
          uint64_t v44 = *(void *)(v34 + 32) + 40 * (v43 / v42);
          BOOL v45 = *(void *)v44 == *v25 && *(_DWORD *)(v44 + 8) == *((_DWORD *)v25 + 2);
          int v46 = v43 % v42 + *(_DWORD *)(v41 + 4 * !v45) * v42;
        }
        *uint64_t v31 = v46;
      }
LABEL_38:
      ++v31;
      v32 -= 4;
      if (!v32) {
        goto LABEL_39;
      }
    }
  }
LABEL_17:
  unint64_t v27 = 0x2000000000000001;
  uint64_t v28 = *(unsigned int *)(a2 + 8);
  if (!v28)
  {
    unint64_t v29 = 0x2000000000000001;
LABEL_57:
    int v59 = 0;
    uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)(v27 >> 1));
    v60.i16[0] = vaddlv_u8(v60);
    unsigned int v61 = v60.i32[0];
    goto LABEL_58;
  }
  uint64_t v51 = 4 * v28;
  int v52 = *(int **)a2;
  unint64_t v29 = 0x2000000000000001;
  do
  {
    if (*v52 != -1)
    {
      uint64_t v53 = *v52 / *((_DWORD *)a1 + 6);
      uint64_t v54 = *(void *)(*a1 + 16 * v53);
      if (*(_WORD *)(v54 + 24) == 51)
      {
        *int v52 = -1;
      }
      else
      {
        uint64_t v55 = *(void *)(v54 + 40) + 16 * *(unsigned int *)(*a1 + 16 * v53 + 8);
        llvm::TargetLoweringBase::getTypeConversion(*v11, *(llvm::LLVMContext **)(v11[1] + 56), *(void *)v55, *(void *)(v55 + 8), (uint64_t)v164);
        uint64_t v56 = *(void *)(*a1 + 16 * v53);
        if (*(_WORD *)(v56 + 24) == 149
          && *(_WORD *)(v56 + 56) == 2
          && *(_WORD *)(*(void *)(*(void *)(v56 + 32) + 40) + 24) != 51
          && (LOBYTE(v164[0]) == 7 || !LOBYTE(v164[0])))
        {
          unsigned int v57 = *v52 % *((_DWORD *)a1 + 6) / (*((_DWORD *)a1 + 6) >> 1) + 2 * v53;
          if (v29) {
            unint64_t v29 = ((unsigned __int16)(2 << v57) | (unsigned __int16)v29) & 0x1FE | 0x2000000000000001;
          }
          else {
            *(void *)(*(void *)v29 + 8 * (v57 >> 6)) |= 1 << v57;
          }
        }
      }
    }
    ++v52;
    v51 -= 4;
  }
  while (v51);
  if (v29)
  {
    unint64_t v27 = v29;
    goto LABEL_57;
  }
  uint64_t v58 = *(unsigned int *)(v29 + 8);
  if (v58)
  {
    unsigned int v61 = 0;
    uint64_t v153 = *(int8x8_t **)v29;
    uint64_t v154 = 8 * v58;
    do
    {
      int8x8_t v155 = *v153++;
      uint8x8_t v156 = (uint8x8_t)vcnt_s8(v155);
      v156.i16[0] = vaddlv_u8(v156);
      v61 += v156.i32[0];
      v154 -= 8;
    }
    while (v154);
    int v59 = 1;
LABEL_58:
    if (v61 > 1)
    {
      uint64_t v62 = 0;
      v164[0] = v165;
      v164[1] = (void *)0x100000000;
      char v63 = 1;
      do
      {
        unint64_t v64 = v29 >> 1;
        unint64_t v65 = (v29 >> 1);
        if (v59)
        {
          unint64_t v64 = **(void **)v29;
          unint64_t v65 = v64;
        }
        uint64_t v66 = 1 << (v63 - 1);
        if (((v64 & v66) != 0) != ((v65 >> v63) & 1))
        {
          if (!LODWORD(v164[1]) || *((_DWORD *)v164[0] + 8 * LODWORD(v164[1]) - 6) == 2)
          {
            if (LODWORD(v164[1]) >= HIDWORD(v164[1])) {
              sub_1CD7D1A18();
            }
            unsigned int v67 = (char *)v164[0] + 32 * LODWORD(v164[1]);
            *unsigned int v67 = v67 + 2;
            v67[1] = 0x200000000;
            ++LODWORD(v164[1]);
          }
          uint64_t v68 = (v29 >> 1);
          if (v59) {
            uint64_t v68 = *(void *)(*(void *)v29 + 8 * (v62 >> 5));
          }
          BOOL v158 = (v66 & v68) == 0;
          sub_1CC2CC1D0((uint64_t)v164[0] + 32 * LODWORD(v164[1]) - 32, v62, (unsigned int *)&v158);
        }
        ++v62;
        v63 += 2;
      }
      while (v62 != 4);
      unsigned int v69 = v164[1];
      int v70 = (unsigned int *)v164[0];
      if (LODWORD(v164[1]))
      {
        if (*((_DWORD *)v164[0] + 2) < 2u) {
          goto LABEL_97;
        }
        uint64_t v71 = *(unsigned int *)(a2 + 8);
        if (!v71) {
          goto LABEL_193;
        }
        unint64_t v72 = *(int **)a2;
        uint64_t v73 = *(void *)a2 + 4 * v71;
        do
        {
          unsigned int v74 = *v72;
          if (*v72 != -1 && LODWORD(v164[1]))
          {
            unsigned int v75 = *((_DWORD *)a1 + 6);
            uint64_t v76 = (int **)v70;
            int v77 = v74 / v75;
            while (1)
            {
              int v78 = **v76;
              if (v78 == v77)
              {
                int v79 = v74 / v75;
                goto LABEL_86;
              }
              if ((*v76)[2 * *((unsigned int *)v76 + 2) - 2] == v77) {
                break;
              }
              v76 += 4;
              if (v76 == (int **)&v70[8 * LODWORD(v164[1])]) {
                goto LABEL_90;
              }
            }
            int v79 = **v76;
LABEL_86:
            unsigned int v80 = v74 % v75 % (v75 >> 1);
            if (v78 == v77) {
              unsigned int v81 = 0;
            }
            else {
              unsigned int v81 = v75 >> 1;
            }
            *unint64_t v72 = v81 + v79 * v75 + v80;
          }
LABEL_90:
          ++v72;
        }
        while (v72 != (int *)v73);
        unsigned int v69 = v164[1];
        if (LODWORD(v164[1]))
        {
LABEL_193:
          int v82 = &v70[8 * v69];
          do
          {
            uint64_t v83 = v11[1];
            uint64_t v84 = *(void *)(v83 + 832);
            if (v84) {
              LOWORD(v84) = *(_WORD *)(v84 + 8);
            }
            uint64_t v85 = *(unsigned int **)v70;
            uint64_t v86 = (unsigned int *)(*a1 + 16 * **(unsigned int **)v70);
            uint64_t v87 = *(void *)(*(void *)v86 + 32);
            uint64_t v88 = *(void *)(*(void *)v86 + 40) + 16 * v86[2];
            uint64_t v89 = *(llvm **)v88;
            uint64_t v90 = *(void *)(v88 + 8);
            uint64_t v91 = (uint64_t *)(v87 + 40 * *(unsigned int *)(*(void *)v70 + 4));
            uint64_t v92 = *(void *)v70 + 8 * v70[2];
            __int16 v93 = (uint64_t *)(*(void *)(*(void *)(*a1 + 16 * *(unsigned int *)(v92 - 8)) + 32)
                            + 40 * *(unsigned int *)(v92 - 4));
            uint64_t v94 = sub_1CCFDED5C(v83, 149, (const llvm::APInt *)a1[4], v89, v90, *v91, v91[1], a8, *v93, v93[1], v84);
            uint64_t v95 = *a1 + 16 * *v85;
            *(void *)uint64_t v95 = v94;
            *(_DWORD *)(v95 + 8) = v96;
            v70 += 8;
          }
          while (v70 != v82);
          int v70 = (unsigned int *)v164[0];
          unsigned int v69 = v164[1];
          if (LODWORD(v164[1]))
          {
LABEL_97:
            uint64_t v97 = 8 * v69;
            do
            {
              int v98 = *(unsigned int **)&v70[v97 - 8];
              if (&v70[v97 - 4] != v98) {
                free(v98);
              }
              v97 -= 8;
            }
            while (v97 * 4);
            int v70 = (unsigned int *)v164[0];
          }
        }
      }
      if (v70 != (unsigned int *)v165) {
        free(v70);
      }
    }
    goto LABEL_104;
  }
  int v59 = 1;
LABEL_104:
  uint64_t v99 = 0;
  int v100 = 0;
  do
  {
    uint64_t v101 = *a1;
    uint64_t v102 = *(void *)(*a1 + 16 * v99);
    if (!v102
      || *(_WORD *)(v102 + 24) != 153
      || (uint64_t v103 = *(void *)(v102 + 32),
          uint64_t v104 = (unsigned __int8 *)(*(void *)(*(void *)v103 + 40) + 16 * *(unsigned int *)(v103 + 8)),
          int v105 = *v104,
          long long v106 = (unsigned __int8 *)a1[1],
          v105 != *v106)
      || ((uint64_t v107 = *((void *)v106 + 1), v108 = *((void *)v104 + 1), !v105) ? (v109 = v108 == v107) : (v109 = 1), !v109))
    {
LABEL_154:
      int v133 = v100;
      goto LABEL_155;
    }
    int v110 = *(_DWORD *)(v101 + 16 * v99 + 8);
    uint64_t v111 = *(void *)(v102 + 48);
    if (v111)
    {
      int v112 = 1;
      uint64_t v113 = *(void *)(v102 + 48);
      do
      {
        if (*(_DWORD *)(v113 + 8) == v110)
        {
          if (!v112) {
            goto LABEL_120;
          }
          --v112;
        }
        uint64_t v113 = *(void *)(v113 + 32);
      }
      while (v113);
      if (!v112)
      {
LABEL_121:
        if (!v111) {
          goto LABEL_131;
        }
        goto LABEL_122;
      }
    }
LABEL_120:
    if (*(_WORD *)(*(void *)(v103 + 40) + 24) != 51) {
      goto LABEL_121;
    }
    if (!sub_1CD804960(*(void *)(v102 + 80), **(const char ***)(v102 + 40), *(void *)(*(void *)(v102 + 40) + 8)))
    {
      unsigned int v121 = 0;
      uint64_t v115 = *(void *)(v102 + 32);
      uint64_t v101 = *a1;
      goto LABEL_173;
    }
    uint64_t v101 = *a1;
    uint64_t v116 = *a1 + 16 * v99;
    uint64_t v117 = *(void *)v116;
    int v110 = *(_DWORD *)(v116 + 8);
    uint64_t v111 = *(void *)(v117 + 48);
    if (!v111)
    {
LABEL_131:
      uint64_t v115 = *(void *)(v102 + 32);
LABEL_132:
      if (*(_WORD *)(*(void *)(v115 + 40) + 24) != 51)
      {
        uint64_t v118 = *(unsigned int *)(a2 + 8);
        if (v118)
        {
          unsigned int v119 = *(int **)a2;
          uint64_t v120 = 4 * v118;
          unsigned int v121 = -1;
          do
          {
            unsigned int v122 = *v119;
            if (*v119 != -1)
            {
              unsigned int v123 = *((_DWORD *)a1 + 6);
              if (v99 == v122 / v123)
              {
                unsigned int v124 = *(_DWORD *)(*(void *)(v102 + 80) + 4 * (v122 % v123));
                if (v124 == -1)
                {
                  int *v119 = -1;
                }
                else
                {
                  int v125 = v124 / v123;
                  if (v121 == -1)
                  {
                    unsigned int v121 = v125;
                  }
                  else if (v121 != v125)
                  {
                    goto LABEL_145;
                  }
                }
              }
            }
            ++v119;
            v120 -= 4;
          }
          while (v120);
          if ((v121 & 0x80000000) == 0) {
            goto LABEL_173;
          }
        }
      }
      goto LABEL_145;
    }
LABEL_122:
    int v114 = 1;
    do
    {
      if (*(_DWORD *)(v111 + 8) == v110)
      {
        if (!v114) {
          goto LABEL_131;
        }
        --v114;
      }
      uint64_t v111 = *(void *)(v111 + 32);
    }
    while (v111);
    uint64_t v115 = *(void *)(v102 + 32);
    if (v114) {
      goto LABEL_132;
    }
LABEL_145:
    uint64_t v126 = 0;
    uint64_t v127 = *(int **)a2;
    char v128 = 1;
    while (1)
    {
      char v129 = v128;
      uint64_t v130 = (_DWORD *)(v115 + 40 * v126);
      if (*(_WORD *)(*(void *)v130 + 24) != 51) {
        break;
      }
LABEL_153:
      char v128 = 0;
      uint64_t v126 = 1;
      if ((v129 & 1) == 0) {
        goto LABEL_154;
      }
    }
    uint64_t v131 = 0;
    uint64_t v132 = (_DWORD *)(v101 + 8);
    while (*((void *)v132 - 1) != *(void *)v130 || *v132 != v130[2])
    {
      ++v131;
      v132 += 4;
      if (v131 == 4) {
        goto LABEL_153;
      }
    }
    uint64_t v136 = *(unsigned int *)(a2 + 8);
    if (v136)
    {
      uint64_t v137 = 4 * v136;
      while (1)
      {
        unsigned int v138 = *v127;
        if (*v127 == -1) {
          goto LABEL_171;
        }
        unsigned int v139 = *((_DWORD *)a1 + 6);
        if (v99 != v138 / v139) {
          goto LABEL_171;
        }
        unsigned int v140 = *(_DWORD *)(*(void *)(v102 + 80) + 4 * (v138 % v139));
        if (v140 == -1) {
          break;
        }
        if (v126 == v140 / v139)
        {
          int v141 = v140 % v139 + v139 * v131;
LABEL_170:
          *uint64_t v127 = v141;
        }
LABEL_171:
        ++v127;
        v137 -= 4;
        if (!v137) {
          goto LABEL_172;
        }
      }
      int v141 = -1;
      goto LABEL_170;
    }
LABEL_172:
    unsigned int v121 = v126 ^ 1;
LABEL_173:
    uint64_t v142 = (uint64_t *)(v115 + 40 * v121);
    uint64_t v143 = v101 + 16 * v99;
    uint64_t v144 = *v142;
    *(_DWORD *)(v143 + 8) = *((_DWORD *)v142 + 2);
    *(void *)uint64_t v143 = v144;
    uint64_t v145 = *(unsigned int *)(a2 + 8);
    if (v145)
    {
      uint64_t v146 = *(int **)a2;
      uint64_t v147 = 4 * v145;
      do
      {
        unsigned int v148 = *v146;
        if (*v146 != -1)
        {
          unsigned int v149 = *((_DWORD *)a1 + 6);
          uint64_t v150 = v148 / v149;
          if (v99 == v150)
          {
            unsigned int v151 = *(_DWORD *)(*(void *)(v102 + 80) + 4 * (v148 % v149));
            if (v151 / v149 == v121) {
              *uint64_t v146 = v151 % v149 + v150 * v149;
            }
          }
        }
        ++v146;
        int v133 = 1;
        v147 -= 4;
      }
      while (v147);
    }
    else
    {
      int v133 = 1;
    }
LABEL_155:
    BOOL v134 = v99 == 3;
    BOOL v135 = v99 != 3;
    if (v99 == 3) {
      uint64_t v99 = 0;
    }
    else {
      ++v99;
    }
    int v100 = v135 & v133;
  }
  while (!v134 || (v133 & 1) != 0);
  if (v59)
  {
    if (*(void *)v29 != v29 + 16) {
      free(*(void **)v29);
    }
    MEMORY[0x1D25D9CE0](v29, 0x1080C40EF38A13ELL);
  }
  return sub_1CD7D1B64((uint64_t)v159);
}

void *sub_1CCF9471C(char **a1, uint64_t a2, BOOL a3)
{
  uint64_t v5 = 0;
  v35[0] = 0;
  v35[1] = 0;
  int v36 = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  size_t v37 = 0;
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  unsigned int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  do
  {
    uint64_t v6 = *a1;
    unsigned int v41 = 1;
    unint64_t v40 = 0;
    if (!*(_DWORD *)&v6[v5 + 8])
    {
      if (sub_1CD7E967C(*(void *)&v6[v5], &v40, a3)) {
        int v9 = 1;
      }
      else {
        int v9 = sub_1CD7E9940(*(void *)&v6[v5]);
      }
      if (v41 >= 0x41 && v40)
      {
        MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
        if (v9) {
          goto LABEL_12;
        }
      }
      else if (v9)
      {
LABEL_12:
        uint64_t v7 = &(*a1)[v5];
        unint64_t v8 = v30;
        goto LABEL_13;
      }
    }
    uint64_t v7 = &(*a1)[v5];
    if (*(_WORD *)(*(void *)v7 + 24) == 51) {
      goto LABEL_14;
    }
    unint64_t v8 = v35;
LABEL_13:
    sub_1CCF971BC(v8, v7);
LABEL_14:
    v5 += 16;
  }
  while (v5 != 64);
  if (v38 - v37 == 64) {
    goto LABEL_49;
  }
  sub_1CD7D1E8C(v35);
  uint64_t v10 = v37;
  unint64_t v11 = v38;
  size_t v37 = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  sub_1CD7D1E8C(v30);
  uint64_t v13 = v32;
  uint64_t v12 = v33;
  uint64_t v14 = v33 - v32;
  uint64_t v32 = 0;
  unsigned int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  if (v15)
  {
    uint64_t v16 = *(int **)a2;
    uint64_t v17 = *(void *)a2 + 4 * v15;
    do
    {
      unsigned int v18 = *v16;
      if (*v16 != -1)
      {
        unsigned int v19 = *((_DWORD *)a1 + 4);
        uint64_t v20 = v18 / v19;
        unint64_t v21 = *a1;
        uint64_t v22 = *(void *)&(*a1)[16 * v20];
        if (*(_WORD *)(v22 + 24) == 51)
        {
          int v23 = -1;
        }
        else
        {
          if (v13 == v12)
          {
            unint64_t v24 = v13;
          }
          else
          {
            unint64_t v24 = v13;
            uint64_t v25 = v13;
            while (*(void *)v25 != v22 || *((_DWORD *)v25 + 2) != *(_DWORD *)&v21[16 * v20 + 8])
            {
              v25 += 16;
              v24 += 16;
              if (v25 == v12)
              {
                unint64_t v24 = v12;
                break;
              }
            }
          }
          if (v24 == v12)
          {
            if (v10 == v11)
            {
              uint64_t v28 = v10;
            }
            else
            {
              unint64_t v27 = &v21[16 * v20 + 8];
              uint64_t v28 = v10;
              while (*(void *)v28 != v22 || *((_DWORD *)v28 + 2) != *(_DWORD *)v27)
              {
                v28 += 16;
                if (v28 == v11)
                {
                  uint64_t v28 = v11;
                  break;
                }
              }
            }
            uint64_t v26 = (v14 >> 4) + ((unint64_t)(v28 - v10) >> 4);
          }
          else
          {
            uint64_t v26 = (unint64_t)(v24 - v13) >> 4;
          }
          int v23 = v18 - v20 * v19 + v19 * v26;
        }
        int *v16 = v23;
      }
      ++v16;
    }
    while (v16 != (int *)v17);
  }
  if (v12 != v13) {
    memmove(*a1, v13, v14 - 4);
  }
  if (v11 == v10)
  {
    if (!v13) {
      goto LABEL_47;
    }
LABEL_51:
    operator delete(v13);
    if (!v10) {
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v10);
    goto LABEL_49;
  }
  memmove(&(*a1)[v14 & 0xFFFFFFFF0], v10, v11 - v10 - 4);
  if (v13) {
    goto LABEL_51;
  }
LABEL_47:
  if (v10) {
    goto LABEL_48;
  }
LABEL_49:
  sub_1CD456CB4(v30);
  return sub_1CD456CB4(v35);
}

uint64_t *sub_1CCF9518C(unint64_t *a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  unsigned int v87 = *(unsigned __int16 *)(a2 + 24);
  unint64_t v4 = *(unsigned __int8 **)(a2 + 64);
  __int16 v93 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v93, v4, 2);
  }
  int v94 = *(_DWORD *)(a2 + 60);
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::LLVMContext **)(a1[1] + 56), **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)v95);
  long long v92 = *(_OWORD *)((char *)v95 + 8);
  if (BYTE8(v95[0]))
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v92);
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(void *)&v95[1] + 24), 0, v5);
    uint64_t v8 = (uint64_t)v7;
    unint64_t v9 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  uint64_t v10 = (llvm *)(v9 | EVT);
  long long v91 = v92;
  unsigned int v12 = sub_1CD3DB440((llvm::EVT *)&v91, v7);
  __int16 v88 = *(_WORD *)(a2 + 72);
  LOBYTE(v13) = v91;
  while (1)
  {
    BOOL v14 = v13;
    if ((_BYTE)v13) {
      BOOL v14 = *(void *)(*a1 + 8 * v13 + 96) != 0;
    }
    if (v14 || v12 == 1) {
      break;
    }
    v12 >>= 1;
    unint64_t v13 = sub_1CB8E5DAC(*(llvm::LLVMContext **)(a1[1] + 56), (uint64_t)v10, v8, v12, 0);
    *(void *)&long long v91 = v13;
    *((void *)&v91 + 1) = v11;
  }
  if (v12 == 1)
  {
    uint64_t v15 = a1[1];
    unsigned int v16 = sub_1CD3DB440((llvm::EVT *)&v92, v11);
    uint64_t v17 = sub_1CD8032A8(v15, a2, v16);
LABEL_31:
    uint64_t v54 = v17;
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(unint64_t, void))(*(void *)*a1 + 496))(*a1, *(unsigned __int16 *)(a2 + 24)) & 1) == 0)
  {
    uint64_t v48 = sub_1CD7986E0((uint64_t)a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
    uint64_t v50 = v49;
    uint64_t v51 = sub_1CD7986E0((uint64_t)a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48));
    uint64_t v17 = sub_1CCFDED5C(a1[1], *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v93, (llvm *)v92, *((uint64_t *)&v92 + 1), v48, v50, v53, v51, v52, v88);
    goto LABEL_31;
  }
  uint64_t v81 = *((void *)&v91 + 1);
  int v82 = (llvm *)v91;
  uint64_t v18 = sub_1CD7986E0((uint64_t)a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
  uint64_t v85 = v19;
  uint64_t v86 = v18;
  uint64_t v20 = sub_1CD7986E0((uint64_t)a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48));
  uint64_t v83 = (uint64_t)v21;
  uint64_t v84 = v20;
  v95[0] = *(_OWORD *)*(void *)(a2 + 40);
  unsigned int v22 = sub_1CD3DB440((llvm::EVT *)v95, v21);
  *(void *)&v95[0] = &v95[1];
  *((void *)&v95[0] + 1) = 0x1000000000;
  sub_1CD3E535C((uint64_t *)v95, v22, 0, 0);
  unsigned int v23 = 0;
  if (v22)
  {
    int v24 = 0;
    while (1)
    {
      while (v22 >= v12)
      {
        uint64_t v25 = a1[1];
        long long v26 = v91;
        uint64_t v27 = sub_1CD7EC9F4(v25, v24, (uint64_t)&v93, 0);
        uint64_t v30 = *(void *)(v25 + 832);
        unsigned int v89 = v23;
        unsigned int v90 = v22;
        if (v30) {
          LOWORD(v30) = *(_WORD *)(v30 + 8);
        }
        int v31 = sub_1CCFDED5C(v25, 151, (const llvm::APInt *)&v93, (llvm *)v26, *((uint64_t *)&v26 + 1), v86, v85, v29, v27, v28, v30);
        uint64_t v33 = v32;
        uint64_t v34 = a1[1];
        long long v35 = v91;
        uint64_t v36 = sub_1CD7EC9F4(v34, v24, (uint64_t)&v93, 0);
        uint64_t v39 = *(void *)(v34 + 832);
        if (v39) {
          LOWORD(v39) = *(_WORD *)(v39 + 8);
        }
        unint64_t v40 = sub_1CCFDED5C(v34, 151, (const llvm::APInt *)&v93, (llvm *)v35, *((uint64_t *)&v35 + 1), v84, v83, v38, v36, v37, v39);
        unsigned int v43 = sub_1CCFDED5C(a1[1], v87, (const llvm::APInt *)&v93, (llvm *)v91, *((uint64_t *)&v91 + 1), (uint64_t)v31, v33, v42, (uint64_t)v40, v41, v88);
        uint64_t v44 = *(void *)&v95[0] + 16 * v89;
        unsigned int v23 = v89 + 1;
        *(void *)uint64_t v44 = v43;
        *(_DWORD *)(v44 + 8) = v45;
        v24 += v12;
        unsigned int v22 = v90 - v12;
      }
      do
      {
        v12 >>= 1;
        *(void *)&long long v91 = sub_1CB8E5DAC(*(llvm::LLVMContext **)(a1[1] + 56), (uint64_t)v10, v8, v12, 0);
        *((void *)&v91 + 1) = v46;
        int v47 = v91;
        if ((_BYTE)v91) {
          int v47 = *(void *)(*a1 + 8 * v91 + 96) != 0;
        }
      }
      while (v12 != 1 && !v47);
      if (v12 == 1) {
        break;
      }
      if (!v22) {
        goto LABEL_52;
      }
    }
    if (v22)
    {
      uint64_t v59 = v24;
      unsigned int v60 = v23;
      do
      {
        uint64_t v61 = a1[1];
        uint64_t v62 = sub_1CD7EC9F4(v61, v59, (uint64_t)&v93, 0);
        uint64_t v65 = *(void *)(v61 + 832);
        if (v65) {
          LOWORD(v65) = *(_WORD *)(v65 + 8);
        }
        uint64_t v66 = sub_1CCFDED5C(v61, 148, (const llvm::APInt *)&v93, v10, v8, v86, v85, v64, v62, v63, v65);
        uint64_t v68 = v67;
        uint64_t v69 = a1[1];
        uint64_t v70 = sub_1CD7EC9F4(v69, v59, (uint64_t)&v93, 0);
        uint64_t v73 = *(void *)(v69 + 832);
        if (v73) {
          LOWORD(v73) = *(_WORD *)(v73 + 8);
        }
        unsigned int v74 = sub_1CCFDED5C(v69, 148, (const llvm::APInt *)&v93, v10, v8, v84, v83, v72, v70, v71, v73);
        int v77 = sub_1CCFDED5C(a1[1], v87, (const llvm::APInt *)&v93, v10, v8, (uint64_t)v66, v68, v76, (uint64_t)v74, v75, v88);
        unsigned int v23 = v60 + 1;
        uint64_t v78 = *(void *)&v95[0] + 16 * v60;
        *(void *)uint64_t v78 = v77;
        *(_DWORD *)(v78 + 8) = v79;
        ++v59;
        ++v60;
        --v22;
      }
      while (v22);
    }
  }
LABEL_52:
  uint64_t v54 = sub_1CCF9575C(a1[1], *a1, (unsigned int **)v95, v23, (llvm *)v91, *((uint64_t *)&v91 + 1), v82, v81, (llvm *)v92, *((uint64_t *)&v92 + 1));
  if (*(_OWORD **)&v95[0] != &v95[1]) {
    free(*(void **)&v95[0]);
  }
LABEL_32:
  if (v93)
  {
    int v55 = *v93;
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        unsigned int v57 = v93;
      }
      else {
        unsigned int v57 = 0;
      }
      if ((v55 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v58 = (unint64_t)(v57 + 8);
LABEL_42:
        *(void *)&v95[0] = &v93;
        sub_1CC5FA668(v58 + 16, v95);
        return v54;
      }
      if (v55 == 3) {
        *((void *)v93 + 1) = 0;
      }
    }
    else if ((v93[1] & 0x7F) == 2 || *((_DWORD *)v93 + 3))
    {
      uint64_t v80 = *((void *)v93 + 2);
      if ((v80 & 4) != 0)
      {
        unint64_t v58 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v58) {
          goto LABEL_42;
        }
      }
    }
  }
  return v54;
}

uint64_t *sub_1CCF9575C(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int a4, llvm *a5, uint64_t a6, llvm *a7, uint64_t a8, llvm *a9, uint64_t a10)
{
  unsigned __int8 v10 = a7;
  unsigned int v11 = a4;
  v108[32] = *MEMORY[0x1E4F143B8];
  uint64_t v104 = a5;
  uint64_t v105 = a6;
  uint64_t v102 = a7;
  uint64_t v103 = a8;
  int v100 = a9;
  uint64_t v101 = a10;
  BOOL v14 = *a3;
  int v15 = a9;
  if (a4 == 1)
  {
    unsigned int v16 = *(uint64_t **)v14;
    uint64_t v17 = *(void *)(*(void *)v14 + 40) + 16 * v14[2];
    uint64_t v19 = *(llvm **)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v104 = v19;
    uint64_t v105 = v18;
    if (a9 == v19 && ((_BYTE)a9 || v18 == a10)) {
      return v16;
    }
  }
  else
  {
    unsigned int v16 = *(uint64_t **)v14;
  }
  uint64_t v20 = (unsigned __int8 *)v16[8];
  int v98 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)&v98, v20, 2);
    int v15 = v100;
  }
  int v99 = *((_DWORD *)v16 + 15);
  if (v15)
  {
    LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v100);
    unint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v101 + 24), 0, (BOOL)a3);
    uint64_t v24 = (uint64_t)v22;
    unint64_t v23 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  uint64_t v25 = v23 | EVT;
  int v26 = v10;
  uint64_t v27 = a3;
  int v92 = v10;
  while (1)
  {
    unsigned int v28 = v11 - 1;
    uint64_t v29 = *v27;
    uint64_t v30 = (unsigned __int8 *)(*(void *)(*(void *)&(*v27)[4 * v28] + 40) + 16 * (*v27)[4 * v28 + 2]);
    if (*v30 == v26 && (v26 || *((void *)v30 + 1) == a8)) {
      break;
    }
    uint64_t v31 = *(void *)(*(void *)&v29[4 * v28] + 40) + 16 * v29[4 * v28 + 2];
    uint64_t v33 = *(llvm **)v31;
    uint64_t v32 = *(void *)(v31 + 8);
    uint64_t v104 = v33;
    uint64_t v105 = v32;
    unsigned int v95 = v11;
    int v34 = v11 - 2;
    if (v34 >= 0)
    {
      while (1)
      {
        long long v35 = (unsigned __int8 *)(*(void *)(*(void *)&v29[4 * v34] + 40) + 16 * v29[4 * v34 + 2]);
        if (*v35 != v33) {
          break;
        }
        if (!(_BYTE)v33 && *((void *)v35 + 1) != v32) {
          goto LABEL_24;
        }
        if (v34-- <= 0)
        {
          int v34 = -1;
          break;
        }
      }
    }
    if ((_BYTE)v33)
    {
      if (v33 - 15 < 0x9C)
      {
LABEL_25:
        unsigned int v37 = sub_1CD3DB440((llvm::EVT *)&v104, v22);
        goto LABEL_28;
      }
    }
    else
    {
LABEL_24:
      if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12) {
        goto LABEL_25;
      }
    }
    unsigned int v37 = 1;
    do
    {
      do
      {
LABEL_28:
        v37 *= 2;
        uint64_t v38 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(a1 + 56), v25, v24, v37, 0);
      }
      while (!(_BYTE)v38);
    }
    while (!*(void *)(a2 + 8 * v38 + 96));
    unint64_t v40 = v38;
    uint64_t v41 = v39;
    if ((_BYTE)v104)
    {
      if (v104 - 15 > 0x9B)
      {
LABEL_43:
        unint64_t v58 = sub_1CD3DD4D8(a1, v38, v39);
        unint64_t v59 = (unint64_t)v22;
        int v60 = v34 + 1;
        uint64_t v91 = v95 + ~v34;
        if (v95 + ~v34)
        {
          uint64_t v61 = 0;
          uint64_t v27 = a3;
          do
          {
            uint64_t v62 = (uint64_t *)&(*v27)[4 * (v60 + v61)];
            uint64_t v94 = v62[1];
            uint64_t v96 = *v62;
            uint64_t v63 = sub_1CD7EC9F4(a1, v61, (uint64_t)&v98, 0);
            uint64_t v66 = *(void *)(a1 + 832);
            if (v66) {
              LOWORD(v66) = *(_WORD *)(v66 + 8);
            }
            unint64_t v58 = sub_1CD7F5D38((void *)a1, (const char *)0x93, (const llvm::APInt *)&v98, v40, v41, (uint64_t)v58, v59, v65, v96, v94, v63, v64, SHIDWORD(v64), v66);
            unint64_t v59 = v59 & 0xFFFFFFFF00000000 | v22;
            ++v61;
            int v60 = v34 + 1;
            uint64_t v27 = a3;
          }
          while (v91 != v61);
        }
        else
        {
          uint64_t v27 = a3;
        }
        uint64_t v69 = (uint64_t)&(*v27)[4 * v60];
        *(void *)uint64_t v69 = v58;
        *(_DWORD *)(v69 + 8) = v59;
        int v26 = v92;
        goto LABEL_54;
      }
      uint64_t v42 = v105;
    }
    else
    {
      uint64_t v42 = v105;
      if ((*(_DWORD *)(v105 + 8) & 0xFE) != 0x12) {
        goto LABEL_43;
      }
    }
    unsigned int v43 = sub_1CD3DD4D8(a1, v104, v42);
    int v45 = (int)v44;
    unsigned int v46 = sub_1CD3DB440((llvm::EVT *)&v104, v44);
    long long v106 = v108;
    uint64_t v107 = 0x1000000000;
    unint64_t v47 = v37 / v46;
    sub_1CD3E535C((uint64_t *)&v106, v47, 0, 0);
    unsigned int v48 = v95 + ~v34;
    if (v48)
    {
      uint64_t v49 = 0;
      do
      {
        uint64_t v50 = (uint64_t)&(*a3)[4 * v34 + 4 + v49];
        uint64_t v51 = (char *)v106 + v49 * 4;
        uint64_t v52 = *(void *)v50;
        *((_DWORD *)v51 + 2) = *(_DWORD *)(v50 + 8);
        *(void *)uint64_t v51 = v52;
        v49 += 4;
      }
      while (4 * (v95 + ~v34) != v49);
    }
    if (v48 < v47)
    {
      uint64_t v53 = 16 * (v95 + ~v34);
      unint64_t v54 = v47 - v48;
      do
      {
        int v55 = (char *)v106 + v53;
        *(void *)int v55 = v43;
        *((_DWORD *)v55 + 2) = v45;
        v53 += 16;
        --v54;
      }
      while (v54);
    }
    uint64_t v56 = *(void *)(a1 + 832);
    if (v56) {
      uint64_t v57 = *(unsigned __int16 *)(v56 + 8);
    }
    else {
      uint64_t v57 = 0;
    }
    int v26 = v92;
    uint64_t v67 = sub_1CD7FF4E8((void *)a1, (const char *)0x95, (const llvm::APInt *)&v98, v40, v41, (uint64_t *)v106, v107, v57);
    uint64_t v27 = a3;
    uint64_t v68 = (uint64_t)&(*a3)[4 * (v34 + 1)];
    *(void *)uint64_t v68 = v67;
    *(_DWORD *)(v68 + 8) = v22;
    if (v106 != v108)
    {
      free(v106);
      uint64_t v27 = a3;
    }
LABEL_54:
    unsigned int v11 = v34 + 2;
  }
  if (v11 == 1
    && (uint64_t v70 = *(void *)(*(void *)v29 + 40) + 16 * v29[2],
        uint64_t v72 = *(llvm **)v70,
        uint64_t v71 = *(void *)(v70 + 8),
        uint64_t v104 = v72,
        uint64_t v105 = v71,
        v72 == v100)
    && (!(_BYTE)v72 ? (BOOL v73 = v71 == v101) : (BOOL v73 = 1), v73))
  {
    unsigned int v16 = *(uint64_t **)v29;
  }
  else
  {
    unsigned int v78 = sub_1CD3DB440((llvm::EVT *)&v100, v22);
    unsigned int v80 = sub_1CD3DB440((llvm::EVT *)&v102, v79);
    uint64_t v81 = (uint64_t **)a3;
    uint64_t v82 = v78 / v80;
    if (v82 != v11)
    {
      uint64_t v85 = sub_1CD3DD4D8(a1, v102, v103);
      uint64_t v81 = (uint64_t **)a3;
      if (v11 < v82)
      {
        uint64_t v87 = 4 * v11;
        uint64_t v88 = v82 - v11;
        do
        {
          uint64_t v89 = (uint64_t)&(*a3)[v87];
          *(void *)uint64_t v89 = v85;
          *(_DWORD *)(v89 + 8) = v86;
          v87 += 4;
          --v88;
        }
        while (v88);
      }
    }
    uint64_t v83 = *(void *)(a1 + 832);
    if (v83) {
      uint64_t v84 = *(unsigned __int16 *)(v83 + 8);
    }
    else {
      uint64_t v84 = 0;
    }
    unsigned int v16 = sub_1CD7FF4E8((void *)a1, (const char *)0x95, (const llvm::APInt *)&v98, v100, v101, *v81, v82, v84);
  }
  if (v98)
  {
    int v74 = *v98;
    if ((v74 - 4) > 0x1E)
    {
      if ((v74 - 3) >= 0xFFFFFFFE) {
        uint64_t v76 = v98;
      }
      else {
        uint64_t v76 = 0;
      }
      if ((v74 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v77 = (unint64_t)(v76 + 8);
        goto LABEL_73;
      }
      if (v74 == 3) {
        *((void *)v98 + 1) = 0;
      }
    }
    else if ((v98[1] & 0x7F) == 2 || *((_DWORD *)v98 + 3))
    {
      uint64_t v90 = *((void *)v98 + 2);
      if ((v90 & 4) != 0)
      {
        unint64_t v77 = v90 & 0xFFFFFFFFFFFFFFF8;
        if (v77)
        {
LABEL_73:
          long long v106 = &v98;
          sub_1CC5FA668(v77 + 16, &v106);
        }
      }
    }
  }
  return v16;
}

uint64_t sub_1CCF95F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v119[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v95 = *(void *)(v6 + 8);
  uint64_t v96 = *(void *)v6;
  long long v7 = *(_OWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(a3 + 96);
  __int16 v94 = *(_WORD *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 56);
  v115[0] = *(_OWORD *)(v8 + 40);
  v115[1] = v9;
  long long v116 = v7;
  unint64_t v10 = sub_1CD7986E0(a1, *(void *)(v6 + 40), *(void *)(v6 + 48));
  uint64_t v97 = v11;
  unsigned int v12 = *(unsigned __int8 **)(a3 + 64);
  uint64_t v113 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v113, v12, 2);
  }
  int v114 = *(_DWORD *)(a3 + 60);
  long long v112 = *(_OWORD *)(a3 + 80);
  if ((_BYTE)v112) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v112);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v112);
  }
  uint64_t v15 = ExtendedSizeInBits;
  unsigned int v16 = v14;
  uint64_t v17 = (uint64_t *)(*(void *)(v10 + 40) + 16 * v97);
  uint64_t v18 = v17[1];
  uint64_t v110 = *v17;
  uint64_t v111 = v18;
  if ((_BYTE)v110)
  {
    unint64_t v89 = sub_1CB87E200((unsigned __int8 *)&v110);
    if ((_BYTE)v110)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v110);
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_12;
    }
    uint64_t v18 = v111;
  }
  else
  {
    unint64_t v89 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v110);
  }
  unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v18 + 24), 0, v19);
  unint64_t v21 = EVT & 0xFFFFFFFFFFFFFF00;
LABEL_12:
  v109[0] = v21 | EVT;
  v109[1] = v22;
  if ((_BYTE)EVT) {
    unsigned int v23 = sub_1CB87E200((unsigned __int8 *)v109);
  }
  else {
    unsigned int v23 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v109);
  }
  unsigned int v90 = v23;
  uint64_t v24 = *(long long **)(a3 + 96);
  long long v107 = *v24;
  uint64_t v108 = *((void *)v24 + 2);
  uint64_t v106 = 0;
  uint64_t v117 = (unsigned __int8 **)v119;
  uint64_t v118 = 0x400000000;
  if (v15)
  {
    uint64_t v25 = v16;
    do
    {
      sub_1CCF96640(&v104, *(void *)(a1 + 8), *(void *)a1, v15, v110, v111, 0, 0);
      if (!v105)
      {
        uint64_t v80 = 0;
        goto LABEL_64;
      }
      long long v102 = v104;
      int v103 = 0;
      unint64_t v26 = sub_1CD483108((uint64_t)&v117, (unint64_t)&v102);
      uint64_t v27 = &v117[3 * v118];
      long long v28 = *(_OWORD *)v26;
      v27[2] = *(unsigned __int8 **)(v26 + 16);
      *(_OWORD *)uint64_t v27 = v28;
      unsigned int v29 = v118 + 1;
      LODWORD(v118) = v118 + 1;
      if ((_BYTE)v104)
      {
        unint64_t v30 = sub_1CB87E200((unsigned __int8 *)&v104);
        unsigned int v29 = v118;
      }
      else
      {
        unint64_t v30 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v104);
      }
      uint64_t v32 = v117;
      uint64_t v33 = &v117[3 * v29];
      int v34 = *((_DWORD *)v33 - 2);
      BOOL v36 = v25 == 1 || v31 != 1;
      do
      {
        uint64_t v37 = v15;
        v15 -= v30;
        ++v34;
        unint64_t v38 = v37 - v30;
        BOOL v39 = v37 - v30 >= v30 && v36;
      }
      while (v38 && v39);
      *((_DWORD *)v33 - 2) = v34;
    }
    while (v15);
    if (v29)
    {
      uint64_t v93 = v10;
      LODWORD(v10) = 0;
      uint64_t v88 = &v32[3 * v29];
      while (1)
      {
        long long v104 = *(_OWORD *)v32;
        int v40 = *((_DWORD *)v32 + 4);
        if ((_BYTE)v104)
        {
          unint64_t v41 = sub_1CB87E200((unsigned __int8 *)&v104);
          if ((_BYTE)v104)
          {
            if (v104 - 15 < 0x9C) {
              goto LABEL_41;
            }
            uint64_t v42 = *((void *)&v104 + 1);
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v41 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v104);
        }
        uint64_t v42 = *((void *)&v104 + 1);
        if ((*(_DWORD *)(*((void *)&v104 + 1) + 8) & 0xFE) == 0x12)
        {
LABEL_41:
          int v91 = sub_1CC4A0738((llvm::EVT *)&v104);
          do
          {
            uint64_t v43 = *(void *)(a3 + 96);
            char v44 = *(unsigned char *)(v43 + 34);
            if (v106)
            {
              uint64_t v45 = (1 << (63
                           - __clz(((1 << v44) | *(void *)(v43 + 8)) & -((1 << v44) | *(void *)(v43 + 8))))) | v106;
              char v44 = 63 - __clz(v45 & -v45);
            }
            uint64_t v46 = *(void *)(a1 + 8);
            long long v47 = v104;
            uint64_t v48 = sub_1CD7EC9F4(v46, (int)v10, (uint64_t)&v113, 0);
            uint64_t v51 = *(void *)(v46 + 832);
            if (v51) {
              LOWORD(v51) = *(_WORD *)(v51 + 8);
            }
            uint64_t v52 = sub_1CCFDED5C(v46, 151, (const llvm::APInt *)&v113, (llvm *)v47, *((uint64_t *)&v47 + 1), v93, (uint64_t)v97, v50, v48, v49, v51);
            uint64_t v53 = *(void *)(a1 + 8);
            long long v100 = v107;
            uint64_t v101 = v108;
            uint64_t v56 = sub_1CD7FB188(v53, v96, v95, (uint64_t)&v113, (uint64_t)v52, v54, v116, DWORD2(v116), (uint64_t)&v100, v44, 0, v94, v115);
            unint64_t v57 = *(unsigned int *)(a2 + 8);
            if (v57 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v58 = (uint64_t **)(*(void *)a2 + 16 * v57);
            *unint64_t v58 = v56;
            v58[1] = v55;
            ++*(_DWORD *)(a2 + 8);
            LODWORD(v10) = v10 + v91;
            sub_1CD7C1574(a1, (uint64_t)v56, v104, *((uint64_t *)&v104 + 1), (uint64_t)&v107, (uint64_t *)&v116, &v106);
            --v40;
          }
          while (v40);
          goto LABEL_60;
        }
LABEL_50:
        int v60 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a1 + 8) + 56), v104, v42, v89 / v41, 0);
        uint64_t v61 = *(llvm::APFloatBase **)(a1 + 8);
        uint64_t v62 = *((void *)v61 + 104);
        if (v62) {
          __int16 v63 = *(_WORD *)(v62 + 8);
        }
        else {
          __int16 v63 = 0;
        }
        int v92 = sub_1CD7F3564(v61, (const char *)0xD8, (uint64_t)&v113, v60, v59, v93, v97, v63);
        uint64_t v65 = v64;
        unint64_t v87 = v41;
        uint64_t v66 = (int)(v10 * v90 / v41);
        do
        {
          uint64_t v67 = *(void *)(a1 + 8);
          long long v68 = v104;
          uint64_t v69 = sub_1CD7EC9F4(v67, v66, (uint64_t)&v113, 0);
          uint64_t v72 = *(void *)(v67 + 832);
          if (v72) {
            LOWORD(v72) = *(_WORD *)(v72 + 8);
          }
          BOOL v73 = sub_1CCFDED5C(v67, 148, (const llvm::APInt *)&v113, (llvm *)v68, *((uint64_t *)&v68 + 1), (uint64_t)v92, v65, v71, v69, v70, v72);
          uint64_t v74 = *(void *)(a1 + 8);
          long long v98 = v107;
          uint64_t v99 = v108;
          uint64_t v86 = *(unsigned __int8 *)(*(void *)(a3 + 96) + 34);
          unint64_t v77 = sub_1CD7FB188(v74, v96, v95, (uint64_t)&v113, (uint64_t)v73, v75, v116, DWORD2(v116), (uint64_t)&v98, v86, SHIDWORD(v86), v94, v115);
          unint64_t v78 = *(unsigned int *)(a2 + 8);
          if (v78 >= *(unsigned int *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v79 = (uint64_t **)(*(void *)a2 + 16 * v78);
          *int v79 = v77;
          v79[1] = v76;
          ++*(_DWORD *)(a2 + 8);
          sub_1CD7C1574(a1, (uint64_t)v77, v104, *((uint64_t *)&v104 + 1), (uint64_t)&v107, (uint64_t *)&v116, 0);
          ++v66;
          --v40;
        }
        while (v40);
        unint64_t v10 = (int)v66 * v87 / v90;
LABEL_60:
        v32 += 3;
        uint64_t v80 = 1;
        if (v32 == v88) {
          goto LABEL_64;
        }
      }
    }
  }
  uint64_t v80 = 1;
LABEL_64:
  if (v117 != v119) {
    free(v117);
  }
  if (v113)
  {
    int v81 = *v113;
    if ((v81 - 4) > 0x1E)
    {
      if ((v81 - 3) >= 0xFFFFFFFE) {
        uint64_t v83 = v113;
      }
      else {
        uint64_t v83 = 0;
      }
      if ((v81 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v84 = (unint64_t)(v83 + 8);
LABEL_76:
        uint64_t v117 = &v113;
        sub_1CC5FA668(v84 + 16, &v117);
        return v80;
      }
      if (v81 == 3) {
        *((void *)v113 + 1) = 0;
      }
    }
    else if ((v113[1] & 0x7F) == 2 || *((_DWORD *)v113 + 3))
    {
      uint64_t v85 = *((void *)v113 + 2);
      if ((v85 & 4) != 0)
      {
        unint64_t v84 = v85 & 0xFFFFFFFFFFFFFFF8;
        if (v84) {
          goto LABEL_76;
        }
      }
    }
  }
  return v80;
}

llvm::Type *sub_1CCF96640(unsigned char *a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  if ((_BYTE)a5)
  {
    unsigned __int8 v14 = sub_1CB8C2FBC((unsigned __int8 *)&v51);
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = v51;
  }
  else
  {
    int v17 = a5;
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a6 + 24), 0, a3);
    unint64_t v15 = EVT & 0xFFFFFFFFFFFFFF00;
    unsigned __int8 v14 = EVT;
  }
  *(void *)&long long v50 = v15 | v14;
  *((void *)&v50 + 1) = v16;
  if (v17)
  {
    BOOL v19 = (v17 - 120) < 0x33;
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v51);
    unsigned __int8 v14 = v50;
  }
  else
  {
    BOOL v19 = *(unsigned __int8 *)(v52 + 8) == 19;
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v51);
  }
  if (v14) {
    uint64_t result = (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v50);
  }
  else {
    uint64_t result = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v50);
  }
  unsigned int v23 = result;
  if (v22 == 1) {
  *(_OWORD *)uint64_t v49 = v50;
  }
  char v24 = v23 != a4 || v19;
  if ((v24 & 1) == 0)
  {
    long long v34 = v50;
    goto LABEL_85;
  }
  unsigned int v47 = 8 * a7;
  if (v19)
  {
    unsigned int v46 = a8 + a4;
  }
  else
  {
    unint64_t v35 = v23;
    unsigned int v46 = a8 + a4;
    for (uint64_t i = 7; i != 1; --i)
    {
      LOBYTE(v48) = i;
      *((void *)&v48 + 1) = 0;
      if ((_BYTE)i) {
        unsigned int v37 = sub_1CB87E200((unsigned __int8 *)&v48);
      }
      else {
        unsigned int v37 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      }
      unsigned int v39 = v37;
      if (v38 == 1) {
      if ((_BYTE)v48)
      }
        uint64_t result = (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v48);
      else {
        uint64_t result = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      }
      if (v40 == 1)
      {
        uint64_t v45 = result;
        uint64_t result = v45;
      }
      if ((unint64_t)result <= v35) {
        break;
      }
      uint64_t result = (llvm::Type *)llvm::TargetLoweringBase::getTypeConversion(a3, *(llvm::LLVMContext **)(a2 + 56), v48, *((uint64_t *)&v48 + 1), (uint64_t)v53);
      if (v53[0] <= 1u)
      {
        v41.i32[0] = ExtendedSizeInBits / v39;
        uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
        v42.i16[0] = vaddlv_u8(v42);
        BOOL v43 = ExtendedSizeInBits % v39 || v39 > ExtendedSizeInBits;
        BOOL v44 = v43 || v42.i32[0] > 1u;
        if (!v44 && (v39 <= a4 || a7 && v47 >= v39 && v46 >= v39))
        {
          if (v39 == ExtendedSizeInBits)
          {
LABEL_87:
            long long v34 = v48;
            goto LABEL_85;
          }
          *(_OWORD *)uint64_t v49 = v48;
          break;
        }
      }
    }
  }
  for (uint64_t j = 170; j != 14; --j)
  {
    LOBYTE(v48) = j;
    *((void *)&v48 + 1) = 0;
    if ((_BYTE)j)
    {
      if ((v19 ^ (j - 120 < 0x33))) {
        continue;
      }
      unsigned int v26 = sub_1CB87E200((unsigned __int8 *)&v48);
      uint64_t v27 = *((void *)&v48 + 1);
    }
    else
    {
      if ((v19 ^ (MEMORY[8] == 19))) {
        continue;
      }
      unsigned int v26 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      uint64_t v27 = 0;
    }
    uint64_t result = (llvm::Type *)llvm::TargetLoweringBase::getTypeConversion(a3, *(llvm::LLVMContext **)(a2 + 56), v48, v27, (uint64_t)v53);
    if (v53[0] <= 1u)
    {
      if ((_BYTE)v48)
      {
        uint64_t result = (llvm::Type *)sub_1CB8C2FBC((unsigned __int8 *)&v48);
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t result = (llvm::Type *)llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v48 + 1) + 24), 0, v28);
      }
      if (v50 == result && ((_BYTE)result || *((void *)&v50 + 1) == v30))
      {
        v29.i32[0] = ExtendedSizeInBits / v26;
        uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29);
        v31.i16[0] = vaddlv_u8(v31);
        BOOL v32 = ExtendedSizeInBits % v26 || v26 > ExtendedSizeInBits;
        BOOL v33 = v32 || v31.i32[0] > 1u;
        if (!v33 && (v26 <= a4 || a7 && v47 >= v26 && v46 >= v26))
        {
          uint64_t result = v49[0] ? (llvm::Type *)sub_1CB87E200(v49) : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v49);
          if ((unint64_t)result < v26
            || v48 == v51 && ((_BYTE)v48 || *((void *)&v48 + 1) == v52))
          {
            goto LABEL_87;
          }
        }
      }
    }
  }
  if (v19)
  {
    *a1 = 0;
    a1[16] = 0;
    return result;
  }
  long long v34 = *(_OWORD *)v49;
LABEL_85:
  *(_OWORD *)a1 = v34;
  a1[16] = 1;
  return result;
}

uint64_t *sub_1CCF96A4C(uint64_t a1, llvm *a2, uint64_t a3, void *a4, unsigned int a5, int a6)
{
  uint64_t v8 = a4;
  char v9 = (char)a2;
  unint64_t v78 = a2;
  uint64_t v79 = a3;
  uint64_t v11 = a5;
  uint64_t v12 = *a4;
  uint64_t v13 = *(void *)(*a4 + 16 * a5);
  unsigned __int8 v14 = *(unsigned __int8 **)(v13 + 64);
  uint64_t v76 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v76, v14, 2);
    uint64_t v12 = *v8;
    uint64_t v15 = *(void *)(*v8 + 16 * v11);
  }
  else
  {
    uint64_t v15 = v13;
  }
  int v77 = *(_DWORD *)(v13 + 60);
  long long v72 = *(_OWORD *)(*(void *)(v15 + 40) + 16 * *(unsigned int *)(v12 + 16 * v11 + 8));
  long long v75 = v72;
  if (v9) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v78);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v78);
  }
  unsigned int v18 = ExtendedSizeInBits;
  if (v17 == 1) {
  if ((_BYTE)v72)
  }
    uint64_t v19 = sub_1CB87E200((unsigned __int8 *)&v75);
  else {
    uint64_t v19 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v75);
  }
  unint64_t v21 = v19;
  if (v20 == 1) {
  unsigned int v23 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(a1 + 56), v75, *((uint64_t *)&v75 + 1), v18 / v21, 0);
  }
  uint64_t v24 = v22;
  uint64_t v25 = (uint64_t *)(*v8 + 16 * v11);
  uint64_t v26 = *v25;
  uint64_t v27 = (void *)v25[1];
  uint64_t v28 = *(void *)(a1 + 832);
  unint64_t v71 = v18;
  if (v28) {
    __int16 v29 = *(_WORD *)(v28 + 8);
  }
  else {
    __int16 v29 = 0;
  }
  uint64_t v30 = sub_1CD7F3564((llvm::APFloatBase *)a1, (const char *)0x9B, (uint64_t)&v76, v23, v22, v26, v27, v29);
  unint64_t v32 = v31;
  unsigned int v33 = a5 + 1;
  if (a5 + 1 != a6)
  {
    LODWORD(v36) = 1;
    BOOL v73 = v8;
    int v70 = a6;
    while (1)
    {
      uint64_t v37 = *v8;
      unint64_t v38 = (uint64_t *)(*(void *)(*(void *)(*v8 + 16 * v33) + 40)
                      + 16 * *(unsigned int *)(*v8 + 16 * v33 + 8));
      uint64_t v40 = *v38;
      uint64_t v39 = v38[1];
      *(void *)&long long v74 = v40;
      *((void *)&v74 + 1) = v39;
      if (v40 != v75) {
        break;
      }
      if ((_BYTE)v40) {
        BOOL v41 = 1;
      }
      else {
        BOOL v41 = v39 == *((void *)&v75 + 1);
      }
      if (!v41) {
        goto LABEL_29;
      }
LABEL_47:
      uint64_t v56 = (uint64_t *)(v37 + 16 * v33);
      uint64_t v57 = *v56;
      uint64_t v58 = v56[1];
      uint64_t v59 = sub_1CD7EC9F4(a1, v36, (uint64_t)&v76, 0);
      uint64_t v62 = *(void *)(a1 + 832);
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      LODWORD(v36) = v36 + 1;
      uint64_t v30 = sub_1CD7F5D38((void *)a1, (const char *)0x93, (const llvm::APInt *)&v76, v23, v24, (uint64_t)v30, v32, v61, v57, v58, v59, v60, SHIDWORD(v60), v62);
      unint64_t v32 = v32 & 0xFFFFFFFF00000000 | v63;
      ++v33;
      uint64_t v8 = v73;
      if (a6 == v33) {
        goto LABEL_18;
      }
    }
    if ((_BYTE)v40) {
      uint64_t v42 = sub_1CB87E200((unsigned __int8 *)&v74);
    }
    else {
LABEL_29:
    }
      uint64_t v42 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v74);
    unint64_t v44 = v42;
    if (v43 == 1) {
    unsigned int v23 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(a1 + 56), v74, *((uint64_t *)&v74 + 1), v71 / v44, 0);
    }
    uint64_t v24 = v45;
    uint64_t v46 = *(void *)(a1 + 832);
    if (v46) {
      __int16 v47 = *(_WORD *)(v46 + 8);
    }
    else {
      __int16 v47 = 0;
    }
    uint64_t v30 = sub_1CD7F3564((llvm::APFloatBase *)a1, (const char *)0xD8, (uint64_t)&v76, v23, v45, (uint64_t)v30, (void *)v32, v47);
    unsigned int v49 = v48;
    if ((_BYTE)v75) {
      uint64_t v50 = sub_1CB87E200((unsigned __int8 *)&v75);
    }
    else {
      uint64_t v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v75);
    }
    uint64_t v52 = v50;
    if (v51 == 1) {
    if ((_BYTE)v74)
    }
      uint64_t v53 = sub_1CB87E200((unsigned __int8 *)&v74);
    else {
      uint64_t v53 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v74);
    }
    unint64_t v55 = v53;
    if (v54 == 1) {
    unint64_t v32 = v32 & 0xFFFFFFFF00000000 | v49;
    }
    long long v75 = v74;
    uint64_t v37 = *v73;
    unint64_t v36 = v52 * (unint64_t)v36 / v55;
    a6 = v70;
    goto LABEL_47;
  }
LABEL_18:
  uint64_t v34 = *(void *)(a1 + 832);
  if (v34) {
    __int16 v35 = *(_WORD *)(v34 + 8);
  }
  else {
    __int16 v35 = 0;
  }
  uint64_t v64 = sub_1CD7F3564((llvm::APFloatBase *)a1, (const char *)0xD8, (uint64_t)&v76, v78, v79, (uint64_t)v30, (void *)v32, v35);
  if (v76)
  {
    int v65 = *v76;
    if ((v65 - 4) > 0x1E)
    {
      if ((v65 - 3) >= 0xFFFFFFFE) {
        uint64_t v67 = v76;
      }
      else {
        uint64_t v67 = 0;
      }
      if ((v65 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v68 = (unint64_t)(v67 + 8);
LABEL_62:
        *(void *)&long long v75 = &v76;
        sub_1CC5FA668(v68 + 16, &v75);
        return v64;
      }
      if (v65 == 3) {
        *((void *)v76 + 1) = 0;
      }
    }
    else if ((v76[1] & 0x7F) == 2 || *((_DWORD *)v76 + 3))
    {
      uint64_t v69 = *((void *)v76 + 2);
      if ((v69 & 4) != 0)
      {
        unint64_t v68 = v69 & 0xFFFFFFFFFFFFFFF8;
        if (v68) {
          goto LABEL_62;
        }
      }
    }
  }
  return v64;
}

void sub_1CCF96E90(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    if (v11 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x155555555555555) {
      unint64_t v14 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v30 = a1 + 2;
    if (v14 > 0x2AAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v15 = 3 * v14;
    uint64_t v16 = (char *)operator new(96 * v14);
    int v17 = &v16[96 * v11];
    __n128 __p = v16;
    uint64_t v27 = v17;
    __int16 v29 = &v16[32 * v15];
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)int v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v18;
    *((void *)v17 + 4) = v17 + 48;
    uint64_t v19 = v17 + 32;
    *((void *)v17 + 5) = 0xC00000000;
    unsigned int v20 = *(_DWORD *)(a2 + 40);
    if (v20 && v19 != (void *)(a2 + 32))
    {
      unint64_t v21 = *(const void **)(a2 + 32);
      if (v21 == (const void *)(a2 + 48))
      {
        if (v20 >= 0xD)
        {
          *((_DWORD *)v17 + 10) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v17 + 48, v21, 4 * *(unsigned int *)(a2 + 40));
        *((_DWORD *)v17 + 10) = v20;
      }
      else
      {
        *uint64_t v19 = v21;
        int v25 = *(_DWORD *)(a2 + 44);
        *((_DWORD *)v17 + 10) = v20;
        *((_DWORD *)v17 + 11) = v25;
        *(void *)(a2 + 32) = a2 + 48;
        *(_DWORD *)(a2 + 44) = 0;
      }
      *(_DWORD *)(a2 + 40) = 0;
    }
    uint64_t v28 = v17 + 96;
    sub_1CD7D1948(a1, &__p);
    uint64_t v10 = a1[1];
    uint64_t v22 = v27;
    for (uint64_t i = v28; i != v22; i -= 96)
    {
      uint64_t v24 = (char *)*((void *)i - 8);
      if (i - 48 != v24) {
        free(v24);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v5 + 48;
    *(void *)(v5 + 40) = 0xC00000000;
    unsigned int v7 = *(_DWORD *)(a2 + 40);
    if (v7 && v5 != a2)
    {
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = (const void *)(a2 + 48);
      if (v8 == a2 + 48)
      {
        if (v7 >= 0xD) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v5 + 48), v9, 4 * *(unsigned int *)(a2 + 40));
        *(_DWORD *)(v5 + 40) = v7;
      }
      else
      {
        *(void *)(v5 + 32) = v8;
        *(_DWORD *)(v5 + 40) = v7;
        *(_DWORD *)(v5 + 44) = *(_DWORD *)(a2 + 44);
        *(void *)(a2 + 32) = v9;
        *(_DWORD *)(a2 + 44) = 0;
      }
      *(_DWORD *)(a2 + 40) = 0;
    }
    uint64_t v10 = v5 + 96;
  }
  a1[1] = v10;
}

void sub_1CCF9712C(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (char *)*((void *)v4 - 8);
        if (v4 - 48 != v6) {
          free(v6);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCF971BC(void *a1, _OWORD *a2)
{
  sub_1CD7D1BAC((uint64_t)v16, (uint64_t)a1, (uint64_t)a2);
  if (v16[16])
  {
    unint64_t v5 = (char *)a1[4];
    unint64_t v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      unsigned int v7 = (char *)a1[3];
      uint64_t v8 = (v5 - v7) >> 4;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 3 > v9) {
        unint64_t v9 = v10 >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 60) {
          sub_1CB833614();
        }
        unint64_t v12 = (char *)operator new(16 * v11);
      }
      else
      {
        unint64_t v12 = 0;
      }
      uint64_t v13 = &v12[16 * v8];
      *(_OWORD *)uint64_t v13 = *a2;
      long long v6 = v13 + 16;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *((void *)v5 - 2);
          v5 -= 16;
          int v15 = *((_DWORD *)v5 + 2);
          *((void *)v13 - 2) = v14;
          v13 -= 16;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        unint64_t v5 = (char *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[16 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *a2;
      long long v6 = v5 + 16;
    }
    a1[4] = v6;
  }
}

_DWORD *sub_1CCF972D8(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(_OWORD *)uint64_t result = xmmword_1CD923640;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CCF97370(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    unsigned int v7 = *(_OWORD **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_1CD923640;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    unint64_t v9 = *(void *)a2;
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v10 > 0xFFFFFFFD;
    }
    if (!v11)
    {
      uint64_t v14 = 0;
      uint64_t result = sub_1CD7D1C48(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      unint64_t v12 = (unint64_t *)v14;
      unint64_t v13 = *(void *)a2;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
      *unint64_t v12 = v13;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t *sub_1CCF97430(uint64_t *a1)
{
  uint64_t result = sub_1CD3DD4D8(a1[1], (llvm *)a1[2], a1[3]);
  uint64_t v3 = *a1;
  *(void *)uint64_t v3 = result;
  *(_DWORD *)(v3 + 8) = v4;
  return result;
}

uint64_t *sub_1CCF97468(uint64_t ***a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = a4;
  uint64_t v8 = (uint64_t *)&a1[5][2 * a4];
  uint64_t v9 = *v8;
  if (*(_WORD *)(*v8 + 24) == 146)
  {
    uint64_t result = sub_1CCF97558((unsigned int *)a1[6], (uint64_t)v8, (BOOL)v8, (uint64_t)a2);
  }
  else
  {
    uint64_t v15 = (uint64_t)a1[1];
    uint64_t v16 = (llvm *)a1[2];
    uint64_t v17 = (uint64_t)a1[3];
    uint64_t v18 = (uint64_t)a1[4];
    uint64_t v19 = v8[1];
    unsigned int v20 = sub_1CD3DD4D8(v15, v16, v17);
    uint64_t result = sub_1CCFCDA78(v15, v16, v17, v18, v9, v19, (uint64_t)v20, v21, a2, a3);
  }
  unint64_t v12 = *a1;
  *unint64_t v12 = result;
  *((_DWORD *)v12 + 2) = v11;
  uint64_t v13 = (uint64_t)&a1[5][2 * v7];
  uint64_t v14 = **a1;
  *(_DWORD *)(v13 + 8) = *((_DWORD *)*a1 + 2);
  *(void *)uint64_t v13 = v14;
  return result;
}

uint64_t *sub_1CCF97558(unsigned int *a1, uint64_t a2, BOOL a3, uint64_t a4)
{
  v45[6] = *MEMORY[0x1E4F143B8];
  int v9 = *((unsigned __int8 *)a1 + 16);
  uint64_t v8 = (unsigned __int8 *)(a1 + 4);
  if (v9)
  {
    unsigned __int8 v14 = sub_1CB8C2FBC(v8);
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)a1 + 3) + 24), 0, a3);
    uint64_t v12 = v11;
    unint64_t v13 = EVT & 0xFFFFFFFFFFFFFF00;
    unsigned __int8 v14 = EVT;
  }
  uint64_t v15 = (llvm *)(v13 | v14);
  unint64_t v16 = *a1;
  uint64_t v17 = sub_1CD3DD4D8(*((void *)a1 + 1), v15, v12);
  BOOL v43 = v45;
  uint64_t v44 = 0x300000000;
  sub_1CD3E535C((uint64_t *)&v43, v16, (uint64_t)v17, v18);
  LODWORD(v19) = *a1;
  if (*a1)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      unsigned int v22 = *(_DWORD *)(a4 + 4 * v21);
      if (v22 != -1)
      {
        if (v22 >= v19)
        {
          uint64_t v23 = a3;
        }
        else
        {
          LODWORD(v19) = 0;
          uint64_t v23 = a2;
        }
        uint64_t v24 = *(void *)(*(void *)v23 + 32) + 40 * (v22 - v19);
        int v25 = (char *)v43 + v20;
        uint64_t v26 = *(void *)v24;
        *((_DWORD *)v25 + 2) = *(_DWORD *)(v24 + 8);
        *(void *)int v25 = v26;
        uint64_t v27 = (uint64_t *)(*(void *)(*(void *)((char *)v43 + v20) + 40)
                        + 16 * *(unsigned int *)((char *)v43 + v20 + 8));
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        v42[0] = v29;
        v42[1] = v28;
        BOOL v30 = v28 == v12 || v14 != 0;
        if ((v14 != v29 || !v30) && sub_1CC277C0C((unsigned __int8 *)v42, (uint64_t)v15, v12))
        {
          unint64_t v31 = (llvm::APFloatBase *)*((void *)a1 + 1);
          uint64_t v32 = *((void *)v31 + 104);
          if (v32) {
            __int16 v33 = *(_WORD *)(v32 + 8);
          }
          else {
            __int16 v33 = 0;
          }
          uint64_t v34 = sub_1CD7F3564(v31, (const char *)0xC9, *((void *)a1 + 4), v15, v12, *(void *)((char *)v43 + v20), *(void **)((char *)v43 + v20 + 8), v33);
          __int16 v35 = (char *)v43 + v20;
          *(void *)__int16 v35 = v34;
          *((_DWORD *)v35 + 2) = v36;
        }
      }
      ++v21;
      unint64_t v19 = *a1;
      v20 += 16;
    }
    while (v21 < v19);
  }
  uint64_t v37 = (void *)*((void *)a1 + 1);
  uint64_t v38 = v37[104];
  if (v38) {
    uint64_t v39 = *(unsigned __int16 *)(v38 + 8);
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = sub_1CD7FF4E8(v37, (const char *)0x92, *((const llvm::APInt **)a1 + 4), *((llvm **)a1 + 2), *((void *)a1 + 3), (uint64_t *)v43, v44, v39);
  if (v43 != v45) {
    free(v43);
  }
  return v40;
}

uint64_t *sub_1CCF977AC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v8 = **(unsigned int ***)a1;
  if ((*v8 & 0x80000000) != 0)
  {
    *uint64_t v8 = a4;
  }
  else
  {
    int v9 = *(unsigned char **)(*(void *)a1 + 8);
    if (*v8 == a4)
    {
      *int v9 = 1;
LABEL_6:
      uint64_t v10 = *(void *)(a1 + 48);
      goto LABEL_8;
    }
    if (*v9) {
      goto LABEL_6;
    }
  }
  uint64_t v10 = *(void *)(a1 + 56);
LABEL_8:
  uint64_t v11 = a4;
  uint64_t v12 = (uint64_t *)(v10 + 16 * a4);
  unint64_t v13 = (uint64_t *)(v10 + 16 * a5);
  if (*(_WORD *)(*v12 + 24) != 146)
  {
    uint64_t v14 = *v13;
    goto LABEL_12;
  }
  uint64_t v14 = *v13;
  if (*(_WORD *)(*v13 + 24) != 146)
  {
LABEL_12:
    uint64_t result = sub_1CCFCDA78(*(void *)(a1 + 16), *(llvm **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *v12, v12[1], v14, *(void *)(v10 + 16 * a5 + 8), a2, a3);
    goto LABEL_13;
  }
  uint64_t result = sub_1CCF97558(*(unsigned int **)(a1 + 64), (uint64_t)v12, (BOOL)v13, (uint64_t)a2);
LABEL_13:
  uint64_t v17 = *(void *)(a1 + 8);
  *(void *)uint64_t v17 = result;
  *(_DWORD *)(v17 + 8) = v16;
  uint64_t v18 = *(uint64_t **)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 48) + 16 * v11;
  uint64_t v20 = *v18;
  *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
  *(void *)uint64_t v19 = v20;
  return result;
}

void sub_1CCF978B4(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 120);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = *(void **)(a2 + 112);
    uint64_t v7 = &v6[2 * v4];
    do
    {
      unint64_t v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = *(unsigned int *)(v8 + 40);
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void **)(v8 + 32);
        uint64_t v12 = 16 * v9;
        while (1)
        {
          unint64_t v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_WORD *)(v13 + 228) & 0x400) != 0)
          {
            unint64_t v13 = v10;
          }
          else if (v10 && v10 != v13)
          {
            break;
          }
          v11 += 2;
          unint64_t v10 = v13;
          v12 -= 16;
          if (!v12) {
            goto LABEL_13;
          }
        }
      }
      unint64_t v13 = 0;
LABEL_13:
      if (v13 == a2) {
        ++v5;
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  else
  {
    int v5 = 0;
  }
  *(_DWORD *)(a1[3] + 4 * *(unsigned int *)(a2 + 192)) = v5;
  uint64_t v15 = (void *)a1[7];
  unint64_t v14 = a1[8];
  if ((unint64_t)v15 >= v14)
  {
    uint64_t v17 = (void *)a1[6];
    uint64_t v18 = v15 - v17;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      abort();
    }
    uint64_t v20 = v14 - (void)v17;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        sub_1CB833614();
      }
      unsigned int v22 = (char *)operator new(8 * v21);
    }
    else
    {
      unsigned int v22 = 0;
    }
    uint64_t v23 = &v22[8 * v18];
    *(void *)uint64_t v23 = a2;
    int v16 = v23 + 8;
    if (v15 != v17)
    {
      do
      {
        uint64_t v24 = *--v15;
        *((void *)v23 - 1) = v24;
        v23 -= 8;
      }
      while (v15 != v17);
      uint64_t v15 = (void *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v16;
    a1[8] = &v22[8 * v21];
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v15 = a2;
    int v16 = v15 + 1;
  }
  a1[7] = v16;
}

BOOL sub_1CCF97A34(void *a1, uint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  if (*(_WORD *)(v3 + 56))
  {
    int v5 = (unsigned int *)(*(void *)(v3 + 32) + 40 * (*(unsigned __int16 *)(v3 + 56) - 1));
    if (*(void *)v5)
    {
      if (*(unsigned __int8 *)(*(void *)(*(void *)v5 + 40) + 16 * v5[2]) == 172) {
        return 1;
      }
    }
  }
  int v6 = *(__int16 *)(v3 + 24);
  if ((v6 & 0x80000000) == 0
    || ((int v7 = (unsigned __int16)~(_WORD)v6, (v7 - 8) >= 4) ? (v8 = v7 == 18) : (v8 = 1),
        v8
     || (BOOL result = llvm::DFAPacketizer::canReserveResources(a1[20], *(void *)(a1[18] + 8) + 48 * (unsigned __int16)~(_WORD)v6))))
  {
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[22];
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = *(unsigned int *)(*(void *)v9 + 120);
        if (v11)
        {
          uint64_t v12 = *(void **)(*(void *)v9 + 112);
          uint64_t v13 = 16 * v11;
          while (1)
          {
            unint64_t v14 = *v12 & 0xFFFFFFFFFFFFFFF8;
            int v15 = (*v12 & 6) != 0 ? 6 : v14 == (void)a2;
            if (v15 != 6 && v15 != 0) {
              break;
            }
            v12 += 2;
            v13 -= 16;
            if (!v13) {
              goto LABEL_26;
            }
          }
          if ((uint64_t *)v14 == a2) {
            return 0;
          }
        }
LABEL_26:
        v9 += 8;
        if (v9 == v10) {
          return 1;
        }
      }
    }
    return 1;
  }
  return result;
}

void sub_1CCF97B68(uint64_t a1, uint64_t *a2)
{
  if (!sub_1CCF97A34((void *)a1, a2)
    || (uint64_t v4 = *a2, *(_WORD *)(*a2 + 56))
    && (int v5 = (unsigned int *)(*(void *)(v4 + 32) + 40 * (*(unsigned __int16 *)(*a2 + 56) - 1)),
        *(void *)v5)
    && *(unsigned __int8 *)(*(void *)(*(void *)v5 + 40) + 16 * v5[2]) == 172)
  {
    uint64_t v6 = *(void *)(a1 + 160);
    *(void *)(v6 + 40) = 1;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7) {
      sub_1CD511D98(v7);
    }
    *(void *)(a1 + 176) = *(void *)(a1 + 168);
    uint64_t v4 = *a2;
    if (!*a2) {
      goto LABEL_9;
    }
  }
  int v8 = *(__int16 *)(v4 + 24);
  if (v8 < 0)
  {
    int v13 = (unsigned __int16)~(_WORD)v8;
    if ((v13 - 8) >= 4 && v13 != 18) {
      llvm::DFAPacketizer::reserveResources(*(void *)(a1 + 160), *(void *)(*(void *)(a1 + 144) + 8) + 48 * (unsigned __int16)~(_WORD)v8);
    }
    int v16 = *(uint64_t ***)(a1 + 176);
    unint64_t v15 = *(void *)(a1 + 184);
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v17 = *(void **)(a1 + 168);
      uint64_t v18 = v16 - (uint64_t **)v17;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
        abort();
      }
      uint64_t v20 = v15 - (void)v17;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          sub_1CB833614();
        }
        unsigned int v22 = (char *)operator new(8 * v21);
      }
      else
      {
        unsigned int v22 = 0;
      }
      uint64_t v23 = (uint64_t **)&v22[8 * v18];
      char *v23 = a2;
      uint64_t v12 = v23 + 1;
      if (v16 != v17)
      {
        do
        {
          uint64_t v24 = *--v16;
          *--uint64_t v23 = v24;
        }
        while (v16 != v17);
        int v16 = *(uint64_t ***)(a1 + 168);
      }
      *(void *)(a1 + 168) = v23;
      *(void *)(a1 + 176) = v12;
      *(void *)(a1 + 184) = &v22[8 * v21];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      void *v16 = a2;
      uint64_t v12 = v16 + 1;
    }
    *(void *)(a1 + 176) = v12;
    uint64_t v11 = *(void **)(a1 + 168);
  }
  else
  {
LABEL_9:
    uint64_t v9 = *(void *)(a1 + 160);
    *(void *)(v9 + 40) = 1;
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10) {
      sub_1CD511D98(v10);
    }
    uint64_t v11 = *(void **)(a1 + 168);
    *(void *)(a1 + 176) = v11;
    uint64_t v12 = v11;
  }
  if (**(unsigned int **)(a1 + 152) <= (unint64_t)(v12 - v11))
  {
    uint64_t v25 = *(void *)(a1 + 160);
    *(void *)(v25 + 40) = 1;
    uint64_t v26 = *(void *)(v25 + 24);
    if (v26)
    {
      sub_1CD511D98(v26);
      uint64_t v11 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v11;
  }
}

uint64_t sub_1CCF97D70(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x200) == 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 40);
    if (v2)
    {
      uint64_t v3 = result;
      unint64_t v4 = 0;
      int v5 = *(void **)(a2 + 32);
      uint64_t v6 = 16 * v2;
      do
      {
        unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v7 + 228) & 0x400) == 0)
        {
          if (v4)
          {
            BOOL v8 = v4 == v7;
            unint64_t v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (!v8) {
              return result;
            }
          }
          else
          {
            unint64_t v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      if (v4 && (*(_WORD *)(v4 + 228) & 0x200) != 0)
      {
        (*(void (**)(uint64_t, unint64_t))(*(void *)result + 104))(result, v4);
        uint64_t v9 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v3 + 88);
        return v9(v3, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1CCF97E5C()
{
  int v5 = 1;
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable use of DFA during scheduling";
  v1.n128_u64[1] = 36;
  sub_1CD7D3220(&v5, &v4, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF93A8, &dword_1CB82C000);
  int v5 = 1;
  int v4 = 1;
  int v2 = 5;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Track reg pressure and switch priority to in-depth";
  v1.n128_u64[1] = 50;
  sub_1CD7D33B8(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF9468, &dword_1CB82C000);
}

void *sub_1CCF97F44(void *a1)
{
  return a1;
}

uint64_t sub_1CCF97F78(void *a1, void *a2)
{
  *a2 = *a1;
  *a1 = a2;
  uint64_t result = a1[2];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)result + 24))(result, a2[1], a2[2], a2[5], a2[3], a2[4]);
  }
  return result;
}

void *sub_1CCF97FC4(void *result, void *a2)
{
  int v2 = result;
  while (1)
  {
    uint64_t v3 = (void **)v2;
    int v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2 == a2)
    {
      uint64_t result = (void *)result[2];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, void))(*result + 32))(result, a2[1], a2[2]);
        a2 = *v3;
      }
      int *v3 = (void *)*a2;
      return result;
    }
  }
  return result;
}

void sub_1CCF98038(llvm::ScheduleDAG *this)
{
  *(void *)this = &unk_1F2641B18;
  int v2 = (void *)*((void *)this + 105);
  if (v2)
  {
    *((void *)this + 106) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 102);
  if (v3)
  {
    *((void *)this + 103) = v3;
    operator delete(v3);
  }
  int v4 = (char *)*((void *)this + 83);
  if (v4 != (char *)this + 680) {
    free(v4);
  }

  sub_1CD7D3638(this);
}

void sub_1CCF980BC(llvm::ScheduleDAG *this)
{
  *(void *)this = &unk_1F2641B18;
  int v2 = (void *)*((void *)this + 105);
  if (v2)
  {
    *((void *)this + 106) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 102);
  if (v3)
  {
    *((void *)this + 103) = v3;
    operator delete(v3);
  }
  int v4 = (char *)*((void *)this + 83);
  if (v4 != (char *)this + 680) {
    free(v4);
  }
  sub_1CD7D3638(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCF98154(uint64_t a1)
{
  v215[9] = *(void **)MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 808) = 0;
  int v2 = (void *)(a1 + 816);
  unint64_t v3 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  uint64_t v210 = 0;
  uint64_t v4 = *(void *)(a1 + 816);
  unint64_t v5 = (*(void *)(a1 + 824) - v4) >> 3;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *(void *)(a1 + 824) = v4 + 8 * v3;
    }
  }
  else
  {
    sub_1CD7D3698((char **)(a1 + 816), v3 - v5, &v210);
    unint64_t v3 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  }
  LODWORD(v210) = 0;
  uint64_t v6 = *(void *)(a1 + 840);
  unint64_t v7 = (*(void *)(a1 + 848) - v6) >> 2;
  if (v3 <= v7)
  {
    if (v3 < v7) {
      *(void *)(a1 + 848) = v6 + 4 * v3;
    }
  }
  else
  {
    sub_1CC2DC07C(a1 + 840, v3 - v7, &v210);
  }
  sub_1CD7D4FCC((uint64_t *)a1);
  sub_1CCF99724(a1, *(void *)(a1 + 376), *(_DWORD *)(a1 + 384), 0);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 == *(void *)(a1 + 56))
  {
    uint64_t v11 = *(void *)(a1 + 48);
  }
  else
  {
    uint64_t v9 = v8 + 272 * *(int *)(*(void *)(*(void *)(a1 + 624) + 192) + 28);
    *(_WORD *)(v9 + 228) |= 0x200u;
    unsigned int v10 = *(_DWORD *)(a1 + 672);
    if (v10 >= *(_DWORD *)(a1 + 676)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 664) + 8 * v10) = v9;
    ++*(_DWORD *)(a1 + 672);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
  }
  unsigned int v199 = v201;
  uint64_t v200 = 0x400000000;
  v195[0] = 0;
  v195[1] = 0;
  unsigned int v196 = 0;
  int v187 = (uint64_t **)(a1 + 640);
  sub_1CBF7ACFC(a1 + 640, 0xF0F0F0F0F0F0F0F1 * ((v11 - v8) >> 4));
  if (*(_DWORD *)(a1 + 672))
  {
    unsigned int v12 = 0;
    while (1)
    {
      unsigned int v188 = v12;
      sub_1CD782990(v195);
      uint64_t v13 = *(unsigned int *)(a1 + 672);
      if (v13)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 664) + 8 * v13 - 8);
        *(_DWORD *)(a1 + 672) = v13 - 1;
      }
      else
      {
        uint64_t v14 = 0;
      }
      char v189 = 0;
      do
      {
        if (!v14) {
          break;
        }
        long long __src = &v206[2];
        *(void *)uint64_t v206 = 0x400000000;
        if (*(_DWORD *)(a1 + 808))
        {
          uint64_t v210 = &v212;
          uint64_t v211 = 0x400000000;
          v215[0] = 0;
          v215[1] = 0;
          BOOL v214 = v215;
          uint64_t v15 = *(unsigned int *)(v14 + 40);
          if (v15)
          {
            uint64_t v16 = 16 * v15;
            uint64_t v17 = (unsigned int *)(*(void *)(v14 + 32) + 8);
            do
            {
              uint64_t v18 = *((void *)v17 - 1);
              if ((v18 & 6) == 0 && *v17) {
                sub_1CCF99844(v18 & 0xFFFFFFFFFFFFFFF8, *v17, v2, (uint64_t)&v210, (uint64_t)&__src, *(void *)(a1 + 24));
              }
              v17 += 4;
              v16 -= 16;
            }
            while (v16);
          }
          uint64_t v19 = *(void *)v14;
          if (*(void *)v14)
          {
            do
            {
              int v20 = *(unsigned __int16 *)(v19 + 24);
              if ((v20 - 261) > 1)
              {
                if ((__int16)v20 < 0)
                {
                  unint64_t v31 = *(_WORD **)(*(void *)(*(void *)(a1 + 16) + 8) + 48 * (unsigned __int16)~(_WORD)v20 + 32);
                  if (v31)
                  {
                    unsigned int v32 = (unsigned __int16)*v31;
                    if (*v31)
                    {
                      __int16 v33 = v31 + 1;
                      do
                      {
                        sub_1CCF99844(v14, v32, v2, (uint64_t)&v210, (uint64_t)&__src, *(void *)(a1 + 24));
                        unsigned int v34 = *v33++;
                        unsigned int v32 = v34;
                      }
                      while (v34);
                    }
                  }
                }
              }
              else
              {
                int v21 = *(unsigned __int16 *)(v19 + 56);
                unsigned int v22 = (unsigned int *)(*(void *)(v19 + 32) + 40 * (v21 - 1));
                if (*(unsigned __int8 *)(*(void *)(*(void *)v22 + 40) + 16 * v22[2]) == 172) {
                  int v23 = v21 - 1;
                }
                else {
                  int v23 = *(unsigned __int16 *)(v19 + 56);
                }
                if (v23 != 4)
                {
                  unsigned int v24 = 4;
                  do
                  {
                    uint64_t v25 = *(void *)(*(void *)(*(void *)(v19 + 32) + 40 * v24) + 80);
                    uint64_t v26 = (void *)(v25 + 24);
                    if (*(_DWORD *)(v25 + 32) >= 0x41u) {
                      uint64_t v26 = (void *)*v26;
                    }
                    int v27 = *(_DWORD *)v26;
                    int v28 = (unsigned __int16)v27 >> 3;
                    ++v24;
                    if ((v27 & 7u) - 2 > 2)
                    {
                      v24 += v28;
                    }
                    else if ((unsigned __int16)v27 >> 3)
                    {
                      do
                      {
                        unsigned int v29 = *(_DWORD *)(*(void *)(*(void *)(v19 + 32) + 40 * v24) + 76);
                        if (v29 - 1 <= 0x3FFFFFFE) {
                          sub_1CCF99844(v14, v29, v2, (uint64_t)&v210, (uint64_t)&__src, *(void *)(a1 + 24));
                        }
                        ++v24;
                        --v28;
                      }
                      while (v28);
                    }
                  }
                  while (v24 != v23);
                }
              }
              if (!*(_WORD *)(v19 + 56)) {
                break;
              }
              BOOL v30 = (unsigned int *)(*(void *)(v19 + 32) + 40 * (*(unsigned __int16 *)(v19 + 56) - 1));
              uint64_t v19 = *(void *)v30;
            }
            while (*(unsigned __int8 *)(*(void *)(*(void *)v30 + 40) + 16 * v30[2]) == 172);
          }
          unsigned int v35 = v206[0];
          sub_1CB833A08((uint64_t)&v214, v215[0]);
          if (v210 != &v212) {
            free(v210);
          }
          if (v35)
          {
            uint64_t v210 = (uint64_t *)v14;
            uint64_t v211 = (uint64_t)&v213;
            uint64_t v212 = 0x400000000;
            unsigned int v36 = v206[0];
            if (v206[0])
            {
              if (v206[0] >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(&v213, __src, 4 * v206[0]);
              LODWORD(v212) = v36;
            }
            sub_1CD7D37D8((uint64_t)v195, &v210, (uint64_t)&v211, (uint64_t)v204);
            if ((uint64_t *)v211 != &v213) {
              free((void *)v211);
            }
            *(_WORD *)(v14 + 228) |= 0x100u;
            if (v200 >= (unint64_t)HIDWORD(v200)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v199 + v200) = v14;
            LODWORD(v200) = v200 + 1;
            uint64_t v37 = *(unsigned int *)(a1 + 672);
            if (v37)
            {
              uint64_t v14 = *(void *)(*(void *)(a1 + 664) + 8 * v37 - 8);
              *(_DWORD *)(a1 + 672) = v37 - 1;
            }
            else
            {
              uint64_t v14 = 0;
            }
            LOBYTE(v35) = 1;
            char v189 = 1;
          }
        }
        else
        {
          LOBYTE(v35) = 0;
        }
        if (__src != &v206[2]) {
          free(__src);
        }
      }
      while ((v35 & 1) != 0);
      if ((v189 & 1) == 0 || v14) {
        goto LABEL_76;
      }
      uint64_t v194 = 0;
      uint64_t v194 = *(void *)v199;
      unint64_t v43 = *(unsigned int *)sub_1CD7D3BF0(v195, &v194)[1];
      uint64_t v44 = *(void *)(*v2 + 8 * v43);
      int v45 = *(unsigned __int16 *)(*(void *)v44 + 24);
      if (v45 == 50)
      {
        unsigned int v46 = 1;
      }
      else
      {
        uint64_t v50 = *(void *)(*(void *)(a1 + 16) + 8) + 48 * (__int16)~(_WORD)v45;
        unsigned int v46 = *(unsigned __int8 *)(v50 + 4);
        uint64_t v51 = *(_WORD **)(v50 + 32);
        if (*v51) {
          BOOL v52 = v43 == (unsigned __int16)*v51;
        }
        else {
          BOOL v52 = 1;
        }
        if (!v52)
        {
          uint64_t v53 = v51 + 1;
          do
          {
            ++v46;
            int v55 = *v53++;
            int v54 = v55;
            if (v55) {
              BOOL v56 = v43 == v54;
            }
            else {
              BOOL v56 = 1;
            }
          }
          while (!v56);
        }
      }
      uint64_t v57 = *(void *)(a1 + 24);
      uint64_t v58 = *(char **)(v57 + 240);
      uint64_t v59 = *(char **)(v57 + 248);
      if (v58 != v59)
      {
        uint64_t v60 = 0;
        int v61 = *(unsigned __int8 *)(*(void *)(*(void *)v44 + 40) + 16 * v46);
        unint64_t v62 = (unint64_t)(v59 - v58) >> 3;
        unsigned int v63 = v43 - 0x40000000;
        unint64_t v64 = v43 >> 3;
        while (1)
        {
          int v65 = *(uint64_t **)v58;
          if (v61 == 1)
          {
            if (v63 >= 0xC0000001)
            {
              uint64_t v66 = *v65;
LABEL_106:
              if (v64 < *(unsigned __int16 *)(v66 + 22)
                && ((1 << (v43 & 7)) & *(unsigned __int8 *)(*(void *)(v66 + 8) + v64)) != 0
                && (!v60
                 || v65 != v60
                 && ((*(_DWORD *)(v60[1] + ((*(unsigned __int16 *)(v66 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v66 + 24)) & 1) != 0))
              {
                uint64_t v60 = *(uint64_t **)v58;
              }
            }
          }
          else
          {
            uint64_t v66 = *v65;
            uint64_t v67 = *(unsigned __int8 **)(*(void *)(v57 + 264)
                                      + 24
                                      * (*(unsigned __int16 *)(*v65 + 24)
                                       + *(_DWORD *)(v57 + 272) * v62)
                                      + 16);
            do
            {
              int v69 = *v67++;
              int v68 = v69;
            }
            while (v69 != 1 && v68 != v61);
            if (v63 >= 0xC0000001 && v68 != 1) {
              goto LABEL_106;
            }
          }
          v58 += 8;
          if (v58 == v59) {
            goto LABEL_150;
          }
        }
      }
      uint64_t v60 = 0;
LABEL_150:
      uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v57 + 248))(v57, v60, 3221225473);
      int v186 = v60;
      if ((uint64_t *)v85 != v60) {
        break;
      }
LABEL_173:
      long long __src = &v206[2];
      *(void *)uint64_t v206 = 0x200000000;
      uint64_t v96 = v85;
      uint64_t v97 = sub_1CD7D42F0(a1, 0);
      *(void *)(v97 + 256) = v96;
      *(void *)(v97 + 264) = v186;
      uint64_t v178 = v97;
      uint64_t v98 = sub_1CD7D42F0(a1, 0);
      *(void *)(v98 + 256) = v186;
      *(void *)(v98 + 264) = v96;
      uint64_t v183 = v98;
      uint64_t v210 = &v212;
      uint64_t v211 = 0x400000000;
      uint64_t v191 = v44;
      uint64_t v99 = *(unsigned int *)(v44 + 120);
      if (v99)
      {
        unsigned int v100 = 0;
        uint64_t v101 = *(uint64_t **)(v44 + 112);
        uint64_t v102 = 16 * v99;
        do
        {
          uint64_t v103 = *v101;
          if ((~*(_DWORD *)v101 & 6) != 0 || *((_DWORD *)v101 + 2) != 3)
          {
            unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_WORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
            {
              *(_OWORD *)uint64_t v202 = *(_OWORD *)v101;
              v202[0] = (void *)((uint64_t)v202[0] & 7 | (unint64_t)v183);
              llvm::SUnit::addPred(v104, (uint64_t *)v202, 1);
              *(void *)uint64_t v204 = v104;
              *(_OWORD *)&v204[8] = *(_OWORD *)v101;
              unint64_t v105 = sub_1CD41C4F0((uint64_t)&v210, (unint64_t)v204, 1);
              uint64_t v106 = &v210[3 * v211];
              long long v107 = *(_OWORD *)v105;
              v106[2] = *(void *)(v105 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              unsigned int v100 = v211 + 1;
              LODWORD(v211) = v211 + 1;
            }
          }
          v101 += 2;
          v102 -= 16;
        }
        while (v102);
        if (v100)
        {
          unint64_t v108 = 0;
          uint64_t v109 = 24 * v100;
          do
          {
            llvm::SUnit::removePred(v210[v108 / 8], (uint64_t)&v210[v108 / 8 + 1]);
            v108 += 24;
          }
          while (v109 != v108);
        }
      }
      *(void *)uint64_t v204 = v191 & 0xFFFFFFFFFFFFFFF9;
      int v110 = *(unsigned __int16 *)(v191 + 226);
      *(_DWORD *)&v204[8] = v43;
      *(_DWORD *)&v204[12] = v110;
      llvm::SUnit::addPred(v178, (uint64_t *)v204, 1);
      v202[0] = (void *)(v178 & 0xFFFFFFFFFFFFFFF9);
      int v111 = *(unsigned __int16 *)(v178 + 226);
      LODWORD(v202[1]) = 0;
      HIDWORD(v202[1]) = v111;
      llvm::SUnit::addPred(v183, (uint64_t *)v202, 1);
      if (v206[0] >= (unint64_t)v206[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v206[0]) = v178;
      unsigned int v112 = v206[0] + 1;
      v206[0] = v112;
      if (v112 >= v206[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v112) = v183;
      ++v206[0];
      if (v210 != &v212) {
        free(v210);
      }
      uint64_t v210 = (uint64_t *)(*(void *)__src | 6);
      uint64_t v211 = 3;
      llvm::SUnit::addPred(v194, (uint64_t *)&v210, 1);
      uint64_t v14 = *((void *)__src + v206[0] - 1);
      if (__src != &v206[2]) {
        free(__src);
      }
LABEL_172:
      *(void *)(*v2 + 8 * v43) = v14;
      uint64_t v210 = (uint64_t *)(v194 | 6);
      uint64_t v211 = 3;
      llvm::SUnit::addPred(v14, (uint64_t *)&v210, 1);
      *(_WORD *)(v194 + 228) &= ~0x200u;
LABEL_76:
      if (v200)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v200;
        do
        {
          uint64_t v40 = (char *)v199;
          *(_WORD *)(*(void *)((char *)v199 + v38) + 228) &= ~0x100u;
          uint64_t v41 = *(void *)&v40[v38];
          if ((*(unsigned char *)(v41 + 229) & 2) != 0)
          {
            unint64_t v42 = *(unsigned int *)(a1 + 672);
            if (v42 >= *(unsigned int *)(a1 + 676)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 664) + 8 * v42) = v41;
            ++*(_DWORD *)(a1 + 672);
          }
          v38 += 8;
        }
        while (v39 != v38);
      }
      LODWORD(v200) = 0;
      if (v14)
      {
        llvm::SUnit::setHeightToAtLeast((llvm::SUnit *)v14, v188);
        __int16 v47 = *(uint64_t **)(a1 + 648);
        unint64_t v48 = *(void *)(a1 + 656);
        if ((unint64_t)v47 >= v48)
        {
          unint64_t v71 = *v187;
          uint64_t v72 = v47 - *v187;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 61) {
            abort();
          }
          uint64_t v74 = v48 - (void)v71;
          if (v74 >> 2 > v73) {
            unint64_t v73 = v74 >> 2;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v190 = v73;
          if (v73)
          {
            if (v73 >> 61) {
              sub_1CB833614();
            }
            long long v75 = (char *)operator new(8 * v73);
          }
          else
          {
            long long v75 = 0;
          }
          uint64_t v76 = (uint64_t *)&v75[8 * v72];
          uint64_t *v76 = v14;
          unsigned int v49 = v76 + 1;
          if (v47 != v71)
          {
            do
            {
              uint64_t v77 = *--v47;
              *--uint64_t v76 = v77;
            }
            while (v47 != v71);
            __int16 v47 = *v187;
          }
          *(void *)(a1 + 640) = v76;
          *(void *)(a1 + 648) = v49;
          *(void *)(a1 + 656) = &v75[8 * v190];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *__int16 v47 = v14;
          unsigned int v49 = v47 + 1;
        }
        *(void *)(a1 + 648) = v49;
        sub_1CCF99724(a1, *(void *)(v14 + 32), *(_DWORD *)(v14 + 40), v188);
        uint64_t v78 = *(unsigned int *)(v14 + 120);
        if (v78)
        {
          uint64_t v79 = 16 * v78;
          uint64_t v80 = (unsigned int *)(*(void *)(v14 + 112) + 8);
          do
          {
            uint64_t v81 = *((void *)v80 - 1);
            if ((v81 & 6) == 0)
            {
              uint64_t v82 = *v80;
              if (v82)
              {
                int v83 = *(_DWORD *)(*(void *)(a1 + 840) + 4 * v82);
                unint64_t v84 = (llvm::SUnit *)(v81 & 0xFFFFFFFFFFFFFFF8);
                if ((*(unsigned char *)((v81 & 0xFFFFFFFFFFFFFFF8) + 236) & 2) == 0) {
                  llvm::SUnit::ComputeHeight(v84);
                }
                if (v83 == *((_DWORD *)v84 + 61))
                {
                  --*(_DWORD *)(a1 + 808);
                  *(void *)(*(void *)(a1 + 816) + 8 * *v80) = 0;
                  *(_DWORD *)(*(void *)(a1 + 840) + 4 * *v80) = 0;
                }
              }
            }
            v80 += 4;
            v79 -= 16;
          }
          while (v79);
        }
        *(_WORD *)(v14 + 228) |= 0x400u;
      }
      unsigned int v12 = v188 + 1;
      if (!*(_DWORD *)(a1 + 672)) {
        goto LABEL_286;
      }
    }
    uint64_t v86 = *(void *)v44;
    if (!*(_WORD *)(*(void *)v44 + 56)
      || (unint64_t v87 = (unsigned int *)(*(void *)(v86 + 32)
                               + 40 * (*(unsigned __int16 *)(*(void *)v44 + 56) - 1)),
          *(unsigned __int8 *)(*(void *)(*(void *)v87 + 40) + 16 * v87[2]) != 172))
    {
      uint64_t v88 = *(unsigned __int16 *)(v86 + 58);
      if (*(_WORD *)(v86 + 58))
      {
        char v89 = 0;
        unsigned int v90 = *(unsigned __int8 **)(v86 + 40);
        while (1)
        {
          int v92 = *v90;
          v90 += 16;
          int v91 = v92;
          if (v92 == 172) {
            break;
          }
          v89 |= v91 == 1;
          if (!--v88) {
            goto LABEL_160;
          }
        }
      }
      else
      {
        char v89 = 0;
LABEL_160:
        if (!*(_WORD *)(*(void *)v44 + 56))
        {
LABEL_164:
          uint64_t v181 = v85;
          uint64_t v182 = v44;
          if ((v89 & 1) == 0) {
            goto LABEL_189;
          }
          int v207 = v209;
          uint64_t v208 = 0x200000000;
          if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 16) + 648))(*(void *)(a1 + 16), *(void *)(a1 + 624)))
          {
            unint64_t v176 = v43;
            uint64_t v127 = *((void *)v207 + 1);
            uint64_t v179 = *(void *)v207;
            uint64_t v128 = *(unsigned __int16 *)(v127 + 58);
            uint64_t v193 = v44;
            uint64_t v129 = *(void *)v44;
            int v130 = *(unsigned __int16 *)(*(void *)v44 + 58);
            if (*(_WORD *)(v127 + 58))
            {
              int v184 = *(unsigned __int16 *)(*(void *)v44 + 58);
              uint64_t v131 = 0;
              do
              {
                sub_1CD800DA0(*(void *)(a1 + 624), *(void *)v44, v131, v127, v131);
                ++v131;
              }
              while (v128 != v131);
              uint64_t v129 = *(void *)v44;
              int v130 = v184;
            }
            sub_1CD800DA0(*(void *)(a1 + 624), v129, v130 - 1, v179, 1);
            uint64_t v132 = sub_1CD7D42F0(a1, v127);
            uint64_t v14 = v132;
            *(_DWORD *)(v127 + 28) = *(_DWORD *)(v132 + 192);
            uint64_t v133 = *(void *)(*(void *)(a1 + 16) + 8);
            unsigned int v134 = (__int16)~*(_WORD *)(v127 + 24);
            uint64_t v135 = *(unsigned __int16 *)(v133 + 48 * v134 + 2);
            if (*(_WORD *)(v133 + 48 * v134 + 2))
            {
              uint64_t v136 = (__int16 *)(*(void *)(v133 + 48 * v134 + 40) + 4);
              while (1)
              {
                __int16 v137 = *v136;
                v136 += 3;
                if (v137) {
                  break;
                }
                if (!--v135) {
                  goto LABEL_218;
                }
              }
              *(_WORD *)(v132 + 228) |= 8u;
            }
LABEL_218:
            if ((*(unsigned char *)(v133 + 48 * v134 + 11) & 2) != 0) {
              *(_WORD *)(v132 + 228) |= 0x10u;
            }
            int v138 = *(_DWORD *)(v179 + 28);
            int v185 = v138;
            if (v138 == -1)
            {
              uint64_t v177 = sub_1CD7D42F0(a1, v179);
              *(_DWORD *)(v179 + 28) = *(_DWORD *)(v177 + 192);
            }
            else
            {
              uint64_t v177 = *(void *)(a1 + 48) + 272 * v138;
            }
            *(void *)&long long v198 = 0;
            uint64_t v210 = &v212;
            uint64_t v211 = 0x400000000;
            long long __src = &v206[2];
            *(void *)uint64_t v206 = 0x400000000;
            *(void *)uint64_t v204 = &v204[16];
            *(void *)&v204[8] = 0x400000000;
            v202[0] = v203;
            v202[1] = (void *)0x400000000;
            uint64_t v139 = *(unsigned int *)(v44 + 40);
            if (v139)
            {
              unsigned int v140 = *(uint64_t **)(v44 + 32);
              int v141 = &v140[2 * v139];
              do
              {
                uint64_t v142 = *v140;
                if ((*v140 & 6) != 0)
                {
                  long long v198 = *(_OWORD *)v140;
                }
                else
                {
                  uint64_t v143 = *(void *)(v142 & 0xFFFFFFFFFFFFFFF8);
                  if (v143 && *(_WORD *)(v179 + 56))
                  {
                    uint64_t v144 = *(void **)(v179 + 32);
                    uint64_t v145 = 40 * *(unsigned __int16 *)(v179 + 56);
                    while (v143 != *v144)
                    {
                      v144 += 5;
                      v145 -= 40;
                      if (!v145) {
                        goto LABEL_231;
                      }
                    }
                    uint64_t v148 = v140[1];
                    if (v206[0] >= (unint64_t)v206[1]) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    unsigned int v149 = (char *)__src + 16 * v206[0];
                    *unsigned int v149 = v142;
                    v149[1] = v148;
                    ++v206[0];
                  }
                  else
                  {
LABEL_231:
                    uint64_t v146 = v140[1];
                    if (*(unsigned int *)&v204[8] >= (unint64_t)*(unsigned int *)&v204[12]) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v147 = (void *)(*(void *)v204 + 16 * *(unsigned int *)&v204[8]);
                    *uint64_t v147 = v142;
                    v147[1] = v146;
                    ++*(_DWORD *)&v204[8];
                  }
                  uint64_t v44 = v193;
                }
                v140 += 2;
              }
              while (v140 != v141);
            }
            uint64_t v150 = *(unsigned int *)(v44 + 120);
            if (v150)
            {
              unsigned int v151 = *(void **)(v44 + 112);
              uint64_t v152 = 16 * v150;
              do
              {
                if ((*v151 & 6) != 0)
                {
                  uint64_t v153 = v211;
                  if (v211 >= (unint64_t)HIDWORD(v211)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v154 = (void **)&v210;
                }
                else
                {
                  uint64_t v153 = LODWORD(v202[1]);
                  if (LODWORD(v202[1]) >= (unint64_t)HIDWORD(v202[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v154 = v202;
                }
                *((_OWORD *)*v154 + v153) = *(_OWORD *)v151;
                ++*((_DWORD *)v154 + 2);
                v151 += 2;
                v152 -= 16;
                uint64_t v44 = v193;
              }
              while (v152);
            }
            if ((unint64_t)v198 >= 8)
            {
              llvm::SUnit::removePred(v44, (uint64_t)&v198);
              if (v185 == -1) {
                llvm::SUnit::addPred(v177, (uint64_t *)&v198, 1);
              }
            }
            if (v206[0])
            {
              uint64_t v155 = 0;
              uint64_t v156 = 16 * v206[0];
              do
              {
                uint64_t v157 = (uint64_t *)((char *)__src + v155);
                llvm::SUnit::removePred(v193, (uint64_t)__src + v155);
                if (v185 == -1) {
                  llvm::SUnit::addPred(v177, v157, 1);
                }
                v155 += 16;
              }
              while (v156 != v155);
            }
            if (*(_DWORD *)&v204[8])
            {
              uint64_t v158 = 0;
              uint64_t v159 = 16 * *(unsigned int *)&v204[8];
              do
              {
                int v160 = (uint64_t *)(*(void *)v204 + v158);
                llvm::SUnit::removePred(v193, *(void *)v204 + v158);
                llvm::SUnit::addPred(v14, v160, 1);
                v158 += 16;
              }
              while (v159 != v158);
            }
            if (LODWORD(v202[1]))
            {
              uint64_t v161 = 0;
              uint64_t v180 = 16 * LODWORD(v202[1]);
              do
              {
                long long v197 = *(_OWORD *)((char *)v202[0] + v161);
                unint64_t v162 = v197 & 0xFFFFFFFFFFFFFFF8;
                *(void *)&long long v197 = v197 & 7 | v193;
                llvm::SUnit::removePred(v162, (uint64_t)&v197);
                *(void *)&long long v197 = v197 & 7 | v14;
                llvm::SUnit::addPred(v162, (uint64_t *)&v197, 1);
                v161 += 16;
              }
              while (v180 != v161);
            }
            if (v211)
            {
              unint64_t v163 = 0;
              uint64_t v164 = 16 * v211;
              do
              {
                long long v197 = *(_OWORD *)&v210[v163 / 8];
                unint64_t v165 = v197 & 0xFFFFFFFFFFFFFFF8;
                *(void *)&long long v197 = v197 & 7 | v193;
                llvm::SUnit::removePred(v165, (uint64_t)&v197);
                if (v185 == -1)
                {
                  *(void *)&long long v197 = v197 & 7 | v177;
                  llvm::SUnit::addPred(v165, (uint64_t *)&v197, 1);
                }
                v163 += 16;
              }
              while (v164 != v163);
            }
            if (v185 == -1)
            {
              *(void *)&long long v197 = v177 | 6;
              *((void *)&v197 + 1) = 0;
              HIDWORD(v197) = *(unsigned __int16 *)(v177 + 226);
              llvm::SUnit::addPred(v14, (uint64_t *)&v197, 1);
            }
            unint64_t v43 = v176;
            uint64_t v44 = v193;
            if (*(_DWORD *)(v14 + 212))
            {
              int v95 = 0;
              uint64_t v182 = v14;
              uint64_t v14 = 0;
            }
            else
            {
              *(_WORD *)(v14 + 228) |= 0x200u;
              int v95 = 1;
              uint64_t v182 = v193;
            }
            if (v202[0] != v203) {
              free(v202[0]);
            }
            if (*(unsigned char **)v204 != &v204[16]) {
              free(*(void **)v204);
            }
            if (__src != &v206[2]) {
              free(__src);
            }
            if (v210 != &v212) {
              free(v210);
            }
          }
          else
          {
            uint64_t v14 = 0;
            int v95 = 1;
            uint64_t v182 = v44;
          }
          if (v207 != v209) {
            free(v207);
          }
          uint64_t v85 = v181;
          if (!v95)
          {
LABEL_189:
            uint64_t v192 = v44;
            uint64_t v14 = sub_1CD7D4450(a1, v182);
            uint64_t v113 = *(unsigned int *)(v182 + 40);
            if (v113)
            {
              uint64_t v114 = *(void *)(v182 + 32);
              uint64_t v115 = 16 * v113;
              do
              {
                if ((~*(_DWORD *)v114 & 6) != 0 || *(_DWORD *)(v114 + 8) != 3) {
                  llvm::SUnit::addPred(v14, (uint64_t *)v114, 1);
                }
                v114 += 16;
                v115 -= 16;
              }
              while (v115);
            }
            uint64_t v210 = &v212;
            uint64_t v211 = 0x400000000;
            uint64_t v116 = *(unsigned int *)(v182 + 120);
            if (v116)
            {
              unsigned int v117 = 0;
              uint64_t v118 = *(uint64_t **)(v182 + 112);
              uint64_t v119 = 16 * v116;
              do
              {
                uint64_t v120 = *v118;
                if ((~*(_DWORD *)v118 & 6) != 0 || *((_DWORD *)v118 + 2) != 3)
                {
                  unsigned int v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFF8);
                  if ((*(_WORD *)((v120 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
                  {
                    *(_OWORD *)uint64_t v204 = *(_OWORD *)v118;
                    *(void *)uint64_t v204 = v204[0] & 7 | (unint64_t)v14;
                    llvm::SUnit::addPred((uint64_t)v121, (uint64_t *)v204, 1);
                    *(void *)uint64_t v204 = v204[0] & 7 | (unint64_t)v182;
                    long long __src = v121;
                    *(_OWORD *)uint64_t v206 = *(_OWORD *)v204;
                    unint64_t v122 = sub_1CD41C4F0((uint64_t)&v210, (unint64_t)&__src, 1);
                    unsigned int v123 = &v210[3 * v211];
                    long long v124 = *(_OWORD *)v122;
                    v123[2] = *(void *)(v122 + 16);
                    *(_OWORD *)unsigned int v123 = v124;
                    unsigned int v117 = v211 + 1;
                    LODWORD(v211) = v211 + 1;
                  }
                }
                v118 += 2;
                v119 -= 16;
              }
              while (v119);
              if (v117)
              {
                unint64_t v125 = 0;
                uint64_t v126 = 24 * v117;
                do
                {
                  llvm::SUnit::removePred(v210[v125 / 8], (uint64_t)&v210[v125 / 8 + 1]);
                  v125 += 24;
                }
                while (v126 != v125);
              }
            }
            uint64_t v44 = v192;
            if (v210 != &v212) {
              free(v210);
            }
            uint64_t v85 = v181;
          }
LABEL_170:
          if (!(v85 | v14)) {
            llvm::report_fatal_error((llvm *)"Can't handle live physical register dependency!", (const llvm::Twine *)1);
          }
          if (v14) {
            goto LABEL_172;
          }
          goto LABEL_173;
        }
        uint64_t v93 = *(unsigned int **)(v86 + 32);
        __int16 v94 = &v93[10 * *(unsigned __int16 *)(*(void *)v44 + 56)];
        while (*(unsigned __int8 *)(*(void *)(*(void *)v93 + 40) + 16 * v93[2]) != 172)
        {
          v93 += 10;
          if (v93 == v94) {
            goto LABEL_164;
          }
        }
      }
    }
    uint64_t v14 = 0;
    goto LABEL_170;
  }
LABEL_286:
  unint64_t v166 = *(void *)(a1 + 640);
  uint64_t v167 = *(void *)(a1 + 648);
  if (v166 != v167)
  {
    uint64_t v168 = (void *)(v167 - 8);
    if (v166 < (unint64_t)v168)
    {
      unint64_t v169 = v166 + 8;
      do
      {
        uint64_t v170 = *(void *)(v169 - 8);
        *(void *)(v169 - 8) = *v168;
        *v168-- = v170;
        BOOL v171 = v169 >= (unint64_t)v168;
        v169 += 8;
      }
      while (!v171);
    }
  }
  uint64_t v172 = v195[0];
  if (v196)
  {
    uint64_t v173 = 40 * v196;
    uint64_t v174 = v195[0] + 24;
    do
    {
      if ((*(void *)(v174 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v175 = *(void **)(v174 - 16);
        if ((void *)v174 != v175) {
          free(v175);
        }
      }
      v174 += 40;
      v173 -= 40;
    }
    while (v173);
    uint64_t v172 = v195[0];
  }
  MEMORY[0x1D25D9CD0](v172, 8);
  if (v199 != v201) {
    free(v199);
  }
}

uint64_t sub_1CCF9971C()
{
  return 1;
}

uint64_t sub_1CCF99724(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  if (a3)
  {
    uint64_t v4 = 16 * a3;
    unint64_t v5 = (unsigned int *)(a2 + 8);
    do
    {
      uint64_t v6 = *((void *)v5 - 1);
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      int v8 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 212) - 1;
      *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 212) = v8;
      if (v8) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = result + 72 == v7;
      }
      if (!v9)
      {
        *(_WORD *)(v7 + 228) |= 0x200u;
        unint64_t v10 = *(unsigned int *)(result + 672);
        if (v10 >= *(unsigned int *)(result + 676)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(result + 664) + 8 * v10) = v7;
        ++*(_DWORD *)(result + 672);
        uint64_t v6 = *((void *)v5 - 1);
      }
      if ((v6 & 6) == 0)
      {
        uint64_t v11 = *v5;
        if (v11)
        {
          uint64_t v12 = *(void *)(result + 816);
          if (!*(void *)(v12 + 8 * v11))
          {
            ++*(_DWORD *)(result + 808);
            *(void *)(v12 + 8 * *v5) = v6 & 0xFFFFFFFFFFFFFFF8;
            *(_DWORD *)(*(void *)(result + 840) + 4 * *v5) = a4;
          }
        }
      }
      v5 += 4;
      v4 -= 16;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1CCF99844(uint64_t result, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = result;
  if (a6) {
    unint64_t v10 = (void *)(a6 + 8);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v13 = v10[5];
  uint64_t v12 = v10[6];
  uint64_t v14 = (_WORD *)(v12 + v11 + 2);
  int v15 = *(unsigned __int16 *)(v12 + v11) + (*(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF) * a2;
  do
  {
    unsigned __int16 v16 = *(_WORD *)(v13 + 4 * (unsigned __int16)v15);
    if (v16) {
      BOOL v17 = v12 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      unsigned int v26 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15 + 2) << 16;
      for (uint64_t i = (unsigned __int16 *)(v12
                                   + 2
                                   * *(unsigned int *)(*v10
                                                     + 24 * *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15)
                                                     + 8));
            ;
            uint64_t i = (unsigned __int16 *)(v10[6] + 2 * *(unsigned int *)(*v10 + 24 * v24 + 8)))
      {
        do
        {
          uint64_t v20 = *(void *)(*a3 + 8 * v16);
          if (v20) {
            BOOL v21 = v20 == v9;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21)
          {
            unsigned int v27 = v16;
            uint64_t result = sub_1CB918828(a4, &v27);
            if ((result & 0x100000000) != 0)
            {
              unint64_t v22 = *(unsigned int *)(a5 + 8);
              if (v22 >= *(unsigned int *)(a5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*(void *)a5 + 4 * v22) = v16;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          int v23 = *i++;
          v16 += v23;
        }
        while (v23);
        unsigned int v24 = HIWORD(v26);
        if (HIWORD(v26))
        {
          v26 >>= 16;
        }
        else
        {
          if (!*v14) {
            return result;
          }
          v15 += (unsigned __int16)*v14++;
          uint64_t v25 = (unsigned __int16 *)(v10[5] + 4 * (unsigned __int16)v15);
          unsigned int v24 = *v25;
          unsigned int v26 = v25[1] << 16;
        }
        unsigned __int16 v16 = v24;
      }
    }
    int v18 = (unsigned __int16)*v14++;
    v15 += v18;
  }
  while (v18);
  return result;
}

void sub_1CCF999F4(llvm::ScheduleDAG *a1)
{
  *(void *)a1 = &unk_1F2641BA0;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 86), 8);
  int v2 = (void *)*((void *)a1 + 83);
  if (v2)
  {
    *((void *)a1 + 84) = v2;
    operator delete(v2);
  }

  sub_1CD7D3638(a1);
}

void sub_1CCF99A60(llvm::ScheduleDAG *a1)
{
  *(void *)a1 = &unk_1F2641BA0;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 86), 8);
  int v2 = (void *)*((void *)a1 + 83);
  if (v2)
  {
    *((void *)a1 + 84) = v2;
    operator delete(v2);
  }
  sub_1CD7D3638(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCF99AE0(uint64_t a1)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  uint64_t v26 = 0x800000000;
  uint64_t v2 = *(void *)(a1 + 624);
  uint64_t v3 = v2 + 208;
  uint64_t v4 = *(void *)(v2 + 216);
  if (v4 == v2 + 208)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = v4 - 8;
      if (v4) {
        uint64_t v7 = v4 - 8;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v7 + 48);
      if (v8)
      {
        int v9 = 0;
        uint64_t v10 = *(void *)(v7 + 48);
        do
        {
          ++v9;
          uint64_t v10 = *(void *)(v10 + 32);
        }
        while (v10);
      }
      else
      {
        int v9 = 0;
      }
      *(_DWORD *)(v7 + 28) = v9;
      if (*(_WORD *)(v7 + 58)
        && v8
        && *(unsigned __int8 *)(*(void *)(v7 + 40) + 16 * (*(unsigned __int16 *)(v7 + 58) - 1)) == 172)
      {
        while (*(_DWORD *)(v8 + 8) != *(unsigned __int16 *)(v7 + 58) - 1)
        {
          uint64_t v8 = *(void *)(v8 + 32);
          if (!v8) {
            goto LABEL_24;
          }
        }
        while (2)
        {
          uint64_t v11 = v6;
          uint64_t v12 = *(void *)(v6 + 48);
          if (!v12) {
            goto LABEL_34;
          }
          while (*(unsigned __int8 *)(*(void *)(*(void *)v12 + 40) + 16 * *(unsigned int *)(v12 + 8)) != 172)
          {
            uint64_t v12 = *(void *)(v12 + 32);
            if (!v12) {
              goto LABEL_23;
            }
          }
          uint64_t v6 = *(void *)(v12 + 16);
          if (v6) {
            continue;
          }
          break;
        }
LABEL_23:
        if (v11)
        {
LABEL_34:
          if (v26 >= (unint64_t)HIDWORD(v26)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v25 + v26) = v7;
          LODWORD(v26) = v26 + 1;
          uint64_t v23 = v7;
          uint64_t v24 = v11;
          sub_1CD4729F8((uint64_t)v22, a1 + 688, &v23, &v24);
        }
      }
LABEL_24:
      if (*(__int16 *)(v7 + 24) < 0
        || ((unsigned int v13 = *(unsigned __int16 *)(v7 + 24), v13 <= 0x2D)
          ? (BOOL v14 = ((1 << v13) & 0x3FF8000FFE42) == 0)
          : (BOOL v14 = 1),
            v14 && v13 != 278))
      {
        ++v5;
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
    uint64_t v15 = v26;
    if (v26)
    {
      uint64_t v16 = 0;
      do
      {
        v22[0] = *((void *)v25 + v16);
        uint64_t v17 = v22[0];
        int v18 = sub_1CD467E2C(a1 + 688, v22);
        int v19 = *(_DWORD *)(v17 + 28);
        uint64_t v20 = *(void *)(v17 + 48);
        if (v20)
        {
          uint64_t v21 = *(void *)(v17 + 48);
          while (*(unsigned __int8 *)(*(void *)(*(void *)v21 + 40) + 16 * *(unsigned int *)(v21 + 8)) != 172)
          {
            uint64_t v21 = *(void *)(v21 + 32);
            if (!v21) {
              goto LABEL_45;
            }
          }
          uint64_t v21 = *(void *)(v21 + 16);
          do
          {
LABEL_45:
            v19 -= *(void *)(v20 + 16) == v21;
            uint64_t v20 = *(void *)(v20 + 32);
          }
          while (v20);
        }
        *(_DWORD *)(v18[1] + 28) += v19;
        *(_DWORD *)(v17 + 28) = 1;
        ++v16;
      }
      while (v16 != v15);
    }
  }
  sub_1CD4F8818(a1 + 664, v5);
  sub_1CCF9A030(a1, *(void *)(*(void *)(a1 + 624) + 192));
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t sub_1CCF99DBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  sub_1CCF72E88(v37, (uint64_t)a2, a1[77], *a2, *(unsigned char *)(a1[78] + 650));
  v35[0] = 0;
  v35[1] = 0;
  int v36 = 0;
  unint64_t v4 = a1[84] - a1[83];
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    unsigned int v34 = v2;
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 3;
    uint64_t v7 = v38;
    uint64_t v8 = (v4 >> 3);
    do
    {
      uint64_t v9 = a1[83];
      uint64_t v10 = *(void *)(v9 + 8 * (v6 + ~v5));
      if (*(__int16 *)(v10 + 24) < 0) {
        sub_1CCF71324((uint64_t)v37, *(void *)(v9 + 8 * (v6 + ~v5)), 0, 0, v35);
      }
      else {
        sub_1CD78DF74((uint64_t)v37, *(void *)(v9 + 8 * (v6 + ~v5)), 0, 0, v35);
      }
      if (*(unsigned char *)(v10 + 26))
      {
        uint64_t v11 = v39;
        uint64_t v12 = *(void *)(a1[78] + 616);
        uint64_t v13 = sub_1CCF9A240(v12 + 688, v10);
        if (*(void *)(v12 + 688) + 40 * *(unsigned int *)(v12 + 704) != v13)
        {
          uint64_t v14 = *(unsigned int *)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *(uint64_t **)(v13 + 8);
            uint64_t v16 = &v15[v14];
            do
            {
              if (!*(unsigned char *)(*v15 + 63))
              {
                uint64_t v17 = sub_1CD78D88C((uint64_t)v37, *v15, v35);
                if (v17)
                {
                  unint64_t v18 = (unint64_t)v17;
                  uint64_t v19 = *(void *)(v7 + 40);
                  *((void *)v17 + 3) = v19;
                  uint64_t v20 = *(void *)(v19 + 32);
                  uint64_t v21 = *((unsigned int *)v17 + 10);
                  if (v21)
                  {
                    uint64_t v24 = *((void *)v17 + 4);
                    uint64_t v25 = *(void *)(v20 + 40);
                    uint64_t v26 = 32 * v21;
                    do
                    {
                      if (!*(unsigned char *)v24)
                      {
                        uint64_t v27 = *(unsigned int *)(v24 + 4);
                        if ((int)v27 >= 0) {
                          int v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
                        }
                        else {
                          int v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v29 = *v28;
                        if (*v28)
                        {
                          uint64_t v30 = *(void *)(v29 + 16);
                          *(void *)(v29 + 16) = v24;
                          *(void *)(v24 + 16) = v30;
                          if (*(unsigned char *)(v24 + 3))
                          {
                            *(void *)(v24 + 24) = v29;
                          }
                          else
                          {
                            *(void *)(v24 + 24) = 0;
                            int v28 = (uint64_t *)(v30 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v24 + 16) = v24;
                          *(void *)(v24 + 24) = 0;
                        }
                        *int v28 = v24;
                      }
                      v24 += 32;
                      v26 -= 32;
                    }
                    while (v26);
                  }
                  uint64_t v22 = *(void *)(v20 + 728);
                  if (v22) {
                    (*(void (**)(uint64_t, unint64_t))(*(void *)v22 + 24))(v22, v18);
                  }
                  unint64_t v23 = *v11 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v18 = v23 | *(void *)v18 & 7;
                  *(void *)(v18 + 8) = v11;
                  *(void *)(v23 + 8) = v18;
                  *uint64_t v11 = *v11 & 7 | v18;
                }
              }
              ++v15;
            }
            while (v15 != v16);
          }
        }
      }
      ++v5;
    }
    while (v5 != v8);
    uint64_t v2 = v34;
    uint64_t v31 = v35[0];
  }
  else
  {
    uint64_t v31 = 0;
  }
  uint64_t v32 = v38;
  uint64_t *v2 = (uint64_t)v39;
  MEMORY[0x1D25D9CD0](v31, 8);
  return v32;
}

void sub_1CCF9A030(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a2 + 24) < 0
    || ((unsigned int v4 = *(unsigned __int16 *)(a2 + 24), v4 <= 0x2D) ? (v5 = ((1 << v4) & 0x3FF8000FFE42) == 0) : (v5 = 1),
        v5 && v4 != 278))
  {
    unint64_t v6 = *(void **)(a1 + 672);
    unint64_t v7 = *(void *)(a1 + 680);
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v9 = *(void **)(a1 + 664);
      uint64_t v10 = v6 - v9;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          sub_1CB833614();
        }
        uint64_t v14 = (char *)operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      *(void *)uint64_t v15 = a2;
      uint64_t v8 = v15 + 8;
      if (v6 != v9)
      {
        do
        {
          uint64_t v16 = *--v6;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v6 != v9);
        unint64_t v6 = *(void **)(a1 + 664);
      }
      *(void *)(a1 + 664) = v15;
      *(void *)(a1 + 672) = v8;
      *(void *)(a1 + 680) = &v14[8 * v13];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *unint64_t v6 = a2;
      uint64_t v8 = v6 + 1;
    }
    *(void *)(a1 + 672) = v8;
    if (*(_WORD *)(a2 + 56))
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v19 = *(unsigned __int16 *)(a2 + 56) - 1;
      do
      {
        uint64_t v20 = (v19 + v17);
        uint64_t v21 = *(void *)(a2 + 32) + 40 * v20;
        uint64_t v22 = *(void *)v21;
        if (v17 || *(unsigned __int8 *)(*(void *)(v22 + 40) + 16 * *(unsigned int *)(v21 + 8)) != 172)
        {
          if (v22 != v18)
          {
            uint64_t v25 = 0;
            if (sub_1CD40EA84(*(void *)(a1 + 688), *(_DWORD *)(a1 + 704), v22, &v25)) {
              BOOL v23 = v25 == *(void *)(a1 + 688) + 16 * *(unsigned int *)(a1 + 704);
            }
            else {
              BOOL v23 = 1;
            }
            if (!v23 && *(void *)(v25 + 8) != a2) {
              uint64_t v22 = *(void *)(v25 + 8);
            }
            int v24 = *(_DWORD *)(v22 + 28) - 1;
            *(_DWORD *)(v22 + 28) = v24;
            if (!v24) {
              sub_1CCF9A030(a1, v22);
            }
          }
          uint64_t v22 = v18;
        }
        else
        {
          *(_DWORD *)(v22 + 28) = 0;
          sub_1CCF9A030(a1, v22);
        }
        --v17;
        uint64_t v18 = v22;
      }
      while (v20);
    }
  }
}

uint64_t sub_1CCF9A240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  if (sub_1CD7D38CC((uint64_t *)a1, &v5, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 40 * *(unsigned int *)(a1 + 16);
  }
}

uint64_t sub_1CCF9A2A8()
{
  qword_1EBCF9528 = 0;
  unk_1EBCF9530 = "fast";
  qword_1EBCF9538 = 4;
  unk_1EBCF9540 = "Fast suboptimal list scheduling";
  qword_1EBCF9548 = 31;
  unk_1EBCF9550 = sub_1CD7D3550;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF9528);
  __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF9528, &dword_1CB82C000);
  qword_1EBCF9558 = 0;
  unk_1EBCF9560 = "linearize";
  qword_1EBCF9568 = 9;
  qword_1EBCF9570 = (uint64_t)"Linearize DAG, no scheduling";
  unk_1EBCF9578 = 28;
  qword_1EBCF9580 = (uint64_t)sub_1CD7D35CC;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF9558);

  return __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF9558, &dword_1CB82C000);
}

llvm::ScheduleDAG *sub_1CCF9A39C(llvm::ScheduleDAG *a1, llvm::MachineFunction *a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1CD7D41FC(a1, a2);
  *(void *)uint64_t v8 = &unk_1F2641C28;
  *((unsigned char *)v8 + 664) = a3;
  *((void *)v8 + 84) = a4;
  *((_DWORD *)v8 + 178) = 0;
  *((void *)v8 + 85) = 0;
  *((_OWORD *)v8 + 43) = 0u;
  *(_OWORD *)((char *)v8 + 728) = 0u;
  *((void *)v8 + 93) = (char *)v8 + 760;
  *((void *)v8 + 94) = 0x400000000;
  *(_OWORD *)((char *)v8 + 792) = 0u;
  *((_DWORD *)v8 + 202) = 0;
  *((void *)v8 + 102) = (char *)v8 + 48;
  *((void *)v8 + 103) = 0;
  *((unsigned char *)v8 + 832) = 0;
  *((void *)v8 + 105) = (char *)v8 + 856;
  *((void *)v8 + 106) = 0x1000000000;
  *(_OWORD *)((char *)v8 + 1112) = 0u;
  *(_OWORD *)((char *)v8 + 1128) = 0u;
  *(_OWORD *)((char *)v8 + 1144) = 0u;
  *((void *)v8 + 145) = (char *)v8 + 1176;
  *((void *)v8 + 146) = 0x600000000;
  *((_DWORD *)v8 + 306) = 0;
  *((_DWORD *)v8 + 312) = 0;
  *((_OWORD *)v8 + 77) = 0u;
  if (byte_1EBCF96C8 || (a3 & 1) == 0) {
    operator new();
  }
  uint64_t v9 = *(void *)(*(uint64_t (**)(void *))(**((void **)a2 + 2) + 104))(*((void **)a2 + 2));
  *((void *)a1 + 88) = (*(uint64_t (**)(void))(v9 + 864))();
  return a1;
}

void sub_1CCF9A53C(llvm::ScheduleDAG *a1)
{
  *(void *)a1 = &unk_1F2641C28;
  uint64_t v2 = *((void *)a1 + 88);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 84);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 154), 8);
  uint64_t v4 = (void *)*((void *)a1 + 145);
  if (v4 != (void *)((char *)a1 + 1176)) {
    free(v4);
  }
  uint64_t v5 = (void *)*((void *)a1 + 142);
  if (v5)
  {
    *((void *)a1 + 143) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)a1 + 139);
  if (v6)
  {
    *((void *)a1 + 140) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)a1 + 105);
  if (v7 != (void *)((char *)a1 + 856)) {
    free(v7);
  }
  sub_1CD782B08((uint64_t)a1 + 792);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 99), 8);
  uint64_t v8 = (void *)*((void *)a1 + 93);
  if (v8 != (void *)((char *)a1 + 760)) {
    free(v8);
  }
  uint64_t v9 = *((void *)a1 + 92);
  *((void *)a1 + 92) = 0;
  if (v9) {
    MEMORY[0x1D25D9CB0](v9, 0x20C8093837F09);
  }
  uint64_t v10 = *((void *)a1 + 91);
  *((void *)a1 + 91) = 0;
  if (v10) {
    MEMORY[0x1D25D9CB0](v10, 0x20C8093837F09);
  }
  unint64_t v11 = (void *)*((void *)a1 + 85);
  if (v11)
  {
    *((void *)a1 + 86) = v11;
    operator delete(v11);
  }

  sub_1CD7D3638(a1);
}

void sub_1CCF9A6C0(llvm::ScheduleDAG *a1)
{
  sub_1CCF9A53C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCF9A6F8(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 716) = byte_1EBCF96C8 - 1;
  *(void *)(a1 + 720) = 0;
  operator new[]();
}

BOOL sub_1CCF9C7EC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 664) == 0;
}

void sub_1CCF9C7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v6 = v5 + 16 * v4;
    uint64_t v7 = a1 + 72;
    do
    {
      unint64_t v8 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      --*(_DWORD *)(v8 + 212);
      if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) & 1) == 0)
      {
        if ((*(unsigned char *)(a2 + 236) & 2) == 0) {
          llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
        }
        llvm::SUnit::setHeightToAtLeast((llvm::SUnit *)v8, *(_DWORD *)(v5 + 12) + *(_DWORD *)(a2 + 244));
      }
      if (*(_DWORD *)(v8 + 212)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v7 == v8;
      }
      if (v9) {
        goto LABEL_14;
      }
      *(_WORD *)(v8 + 228) |= 0x200u;
      if ((*(unsigned char *)(v8 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v8);
      }
      unsigned int v10 = *(_DWORD *)(v8 + 244);
      if (v10 < *(_DWORD *)(a1 + 716)) {
        *(_DWORD *)(a1 + 716) = v10;
      }
      unint64_t v11 = *(unsigned char **)(a1 + 672);
      if (!byte_1EBCF96C8 && v11[12])
      {
        if (!(*(unsigned int (**)(unsigned char *, unint64_t))(*(void *)v11 + 80))(v11, v8))
        {
          if ((*(_WORD *)(v8 + 228) & 0x100) == 0)
          {
            *(_WORD *)(v8 + 228) |= 0x100u;
            uint64_t v14 = *(unint64_t **)(a1 + 688);
            unint64_t v15 = *(void *)(a1 + 696);
            if ((unint64_t)v14 >= v15)
            {
              uint64_t v17 = *(void **)(a1 + 680);
              uint64_t v18 = v14 - v17;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 61) {
                abort();
              }
              uint64_t v20 = v15 - (void)v17;
              if (v20 >> 2 > v19) {
                unint64_t v19 = v20 >> 2;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
              }
              unint64_t v30 = v19;
              if (v19)
              {
                if (v19 >> 61) {
                  sub_1CB833614();
                }
                uint64_t v21 = (char *)operator new(8 * v19);
              }
              else
              {
                uint64_t v21 = 0;
              }
              uint64_t v22 = (unint64_t *)&v21[8 * v18];
              *uint64_t v22 = v8;
              uint64_t v16 = v22 + 1;
              if (v14 != v17)
              {
                do
                {
                  unint64_t v23 = *--v14;
                  *--uint64_t v22 = v23;
                }
                while (v14 != v17);
                uint64_t v14 = *(unint64_t **)(a1 + 680);
              }
              *(void *)(a1 + 680) = v22;
              *(void *)(a1 + 688) = v16;
              *(void *)(a1 + 696) = &v21[8 * v30];
              if (v14) {
                operator delete(v14);
              }
            }
            else
            {
              *uint64_t v14 = v8;
              uint64_t v16 = v14 + 1;
            }
            *(void *)(a1 + 688) = v16;
          }
          goto LABEL_14;
        }
        unint64_t v11 = *(unsigned char **)(a1 + 672);
      }
      (*(void (**)(unsigned char *, unint64_t))(*(void *)v11 + 88))(v11, v8);
LABEL_14:
      if ((*(void *)v5 & 6) == 0)
      {
        uint64_t v12 = *(unsigned int *)(v5 + 8);
        if (v12)
        {
          *(void *)(*(void *)(a1 + 728) + 8 * v12) = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v13 = *(void *)(a1 + 736);
          if (!*(void *)(v13 + 8 * *(unsigned int *)(v5 + 8)))
          {
            ++*(_DWORD *)(a1 + 724);
            *(void *)(v13 + 8 * *(unsigned int *)(v5 + 8)) = a2;
          }
        }
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  if (!*(void *)(*(void *)(a1 + 728) + 8 * v24))
  {
    uint64_t v25 = *(void *)a2;
    if (*(void *)a2)
    {
      while (1)
      {
        int v26 = *(__int16 *)(v25 + 24);
        if (v26 < 0)
        {
          uint64_t v27 = *(void *)(a1 + 16);
          if (*(_DWORD *)(v27 + 68) == (unsigned __int16)~(_WORD)v26) {
            break;
          }
        }
        if (*(_WORD *)(v25 + 56))
        {
          int v28 = (unsigned int *)(*(void *)(v25 + 32) + 40 * (*(unsigned __int16 *)(v25 + 56) - 1));
          uint64_t v25 = *(void *)v28;
          if (*(unsigned __int8 *)(*(void *)(*(void *)v28 + 40) + 16 * v28[2]) == 172) {
            continue;
          }
        }
        return;
      }
      uint64_t v32 = 0;
      uint64_t v29 = *(void *)(a1 + 48)
          + 272 * *(int *)(sub_1CCF9CC1C(v25, (unsigned int *)&v32 + 1, (unsigned int *)&v32, v27) + 28);
      uint64_t v31 = v29;
      sub_1CD467E2C(a1 + 1232, &v31)[1] = a2;
      ++*(_DWORD *)(a1 + 724);
      *(void *)(*(void *)(a1 + 728) + 8 * v24) = v29;
      *(void *)(*(void *)(a1 + 736) + 8 * v24) = a2;
    }
  }
}

void sub_1CCF9CB70(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 712) < a2)
  {
    *(_DWORD *)(a1 + 720) = 0;
    *(_DWORD *)(*(void *)(a1 + 672) + 8) = a2;
    if (*(_DWORD *)(*(void *)(a1 + 704) + 8))
    {
      do
      {
        (*(void (**)(void))(**(void **)(a1 + 704) + 88))(*(void *)(a1 + 704));
        int v4 = *(_DWORD *)(a1 + 712) + 1;
        *(_DWORD *)(a1 + 712) = v4;
      }
      while (v4 != a2);
    }
    else
    {
      *(_DWORD *)(a1 + 712) = a2;
    }
    sub_1CCF9D7AC(a1);
  }
}

uint64_t sub_1CCF9CC1C(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6 = a1;
  int v7 = *(unsigned __int16 *)(a1 + 24);
  while (v7 != 2)
  {
    if ((v7 & 0x8000) != 0)
    {
      int v8 = v7 ^ 0xFFFF;
      if (*(_DWORD *)(a4 + 68) == v8)
      {
        unsigned int v9 = *a2;
        unsigned int v10 = *a2 + 1;
        *a2 = v10;
        if (*a3 <= v10) {
          unsigned int v11 = v9 + 1;
        }
        else {
          unsigned int v11 = *a3;
        }
        *a3 = v11;
      }
      else if (*(_DWORD *)(a4 + 64) == v8 && (*a2)-- == 1)
      {
        return v6;
      }
    }
    if (*(_WORD *)(v6 + 56))
    {
      uint64_t v13 = *(unsigned int **)(v6 + 32);
      uint64_t v14 = &v13[10 * *(unsigned __int16 *)(v6 + 56)];
      while (1)
      {
        uint64_t v6 = *(void *)v13;
        if (*(unsigned char *)(*(void *)(*(void *)v13 + 40) + 16 * v13[2]) == 1) {
          break;
        }
        v13 += 10;
        if (v13 == v14) {
          return 0;
        }
      }
      int v7 = *(unsigned __int16 *)(v6 + 24);
      if (v7 != 1) {
        continue;
      }
    }
    return 0;
  }
  unsigned int v16 = *a3;
  if (*(_WORD *)(v6 + 56))
  {
    uint64_t v17 = *(void **)(v6 + 32);
    unsigned int v18 = *a2;
    uint64_t v19 = 40 * *(unsigned __int16 *)(v6 + 56);
    unsigned int v20 = *a3;
    uint64_t v6 = 0;
    do
    {
      unsigned int v24 = v16;
      unsigned int v25 = v18;
      uint64_t v21 = sub_1CCF9CC1C(*v17, &v25, &v24, a4);
      if (v21)
      {
        if (!v6 || v24 > v20)
        {
          unsigned int v20 = v24;
          uint64_t v6 = v21;
        }
      }
      v17 += 5;
      v19 -= 40;
    }
    while (v19);
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v20 = *a3;
  }
  *a3 = v20;
  return v6;
}

void sub_1CCF9CD90(void ***a1)
{
  void v68[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[1];
  do
  {
    uint64_t v2 = *a1;
    if (!**a1) {
      break;
    }
    long long __src = v62;
    uint64_t v61 = 0x400000000;
    if (*((_DWORD *)v1 + 181))
    {
      uint64_t v3 = (uint64_t)*v2;
      unsigned int v63 = &v65;
      unint64_t v64 = (void *)0x400000000;
      v68[0] = 0;
      v68[1] = 0;
      uint64_t v67 = v68;
      uint64_t v4 = *(unsigned int *)(v3 + 40);
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        uint64_t v6 = (unsigned int *)(*(void *)(v3 + 32) + 8);
        do
        {
          uint64_t v7 = *((void *)v6 - 1);
          if ((v7 & 6) == 0)
          {
            uint64_t v8 = *v6;
            if (v8)
            {
              uint64_t v9 = (uint64_t)v1[91];
              if (*(void *)(v9 + 8 * v8) != v3) {
                sub_1CCF9D4E8(v7 & 0xFFFFFFFFFFFFFFF8, v8, v9, (uint64_t)&v63, (uint64_t)&__src, (uint64_t)v1[3]);
              }
            }
          }
          v6 += 4;
          v5 -= 16;
        }
        while (v5);
      }
      uint64_t v10 = *(void *)v3;
      if (*(void *)v3)
      {
        do
        {
          int v11 = *(unsigned __int16 *)(v10 + 24);
          if ((v11 - 261) > 1)
          {
            if ((__int16)v11 < 0)
            {
              uint64_t v22 = (uint64_t)v1[2];
              if (*(_DWORD *)(v22 + 68) == (unsigned __int16)~(_WORD)v11)
              {
                v58[0] = *((_DWORD *)v1[3] + 4);
                if (*((void *)v1[91] + v58[0]))
                {
                  uint64_t v23 = **((void **)v1[92] + v58[0]);
                  do
                  {
                    uint64_t v24 = v23;
                    uint64_t v25 = *(unsigned __int16 *)(v23 + 56);
                    if (!v25) {
                      break;
                    }
                    int v26 = (unsigned int *)(*(void *)(v24 + 32) + 40 * (v25 - 1));
                    uint64_t v23 = *(void *)v26;
                  }
                  while (*(unsigned __int8 *)(*(void *)(*(void *)v26 + 40) + 16 * v26[2]) == 172);
                  if ((sub_1CCF9D694(v24, v10, 0, v22) & 1) == 0
                    && (sub_1CB918828((uint64_t)&v63, v58) & 0x100000000) != 0)
                  {
                    if (v61 >= (unint64_t)HIDWORD(v61)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)__src + v61) = v58[0];
                    LODWORD(v61) = v61 + 1;
                  }
                }
              }
              if (*(_WORD *)(v10 + 56))
              {
                uint64_t v27 = *(void *)(v10 + 32);
                uint64_t v28 = 40 * *(unsigned __int16 *)(v10 + 56);
                while (!*(void *)v27 || *(_WORD *)(*(void *)v27 + 24) != 10)
                {
                  v27 += 40;
                  v28 -= 40;
                  if (!v28) {
                    goto LABEL_53;
                  }
                }
                uint64_t v30 = *(void *)(*(void *)v27 + 80);
                if (v30)
                {
                  uint64_t v31 = v1[91];
                  int v32 = *((_DWORD *)v1[3] + 4);
                  v58[0] = 1;
                  int v33 = v32 - 1;
                  if (v32 != 2)
                  {
                    unsigned int v45 = 1;
                    do
                    {
                      uint64_t v46 = v31[v45];
                      if (v46) {
                        BOOL v47 = v46 == v3;
                      }
                      else {
                        BOOL v47 = 1;
                      }
                      if (!v47 && ((*(_DWORD *)(v30 + (((unint64_t)v45 >> 3) & 0x1FFFFFFC)) >> v45) & 1) == 0)
                      {
                        uint64_t v48 = sub_1CB918828((uint64_t)&v63, v58);
                        unsigned int v45 = v58[0];
                        if ((v48 & 0x100000000) != 0)
                        {
                          if (v61 >= (unint64_t)HIDWORD(v61)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((_DWORD *)__src + v61) = v58[0];
                          LODWORD(v61) = v61 + 1;
                          unsigned int v45 = v58[0];
                        }
                      }
                      v58[0] = ++v45;
                    }
                    while (v45 != v33);
                  }
                }
              }
LABEL_53:
              unsigned int v34 = (__int16)~*(_WORD *)(v10 + 24);
              uint64_t v57 = *((void *)v1[2] + 1);
              if ((*(unsigned char *)(v57 + 48 * v34 + 8) & 4) != 0)
              {
                uint64_t v35 = v57 + 48 * v34;
                int v38 = *(unsigned __int8 *)(v35 + 4);
                uint64_t v37 = (unsigned __int8 *)(v35 + 4);
                unsigned __int8 v36 = v38;
                if (v38)
                {
                  unint64_t v39 = 0;
                  uint64_t v40 = 2;
                  do
                  {
                    if ((*(unsigned char *)(*(void *)(v57 + 48 * v34 + 40) + v40) & 4) != 0)
                    {
                      sub_1CCF9D4E8(v3, *(_DWORD *)(*(void *)(*(void *)(v10 + 32)+ 40 * (v39 - *(unsigned __int16 *)(v10 + 58)))+ 76), (uint64_t)v1[91], (uint64_t)&v63, (uint64_t)&__src, (uint64_t)v1[3]);
                      unsigned __int8 v36 = *v37;
                    }
                    ++v39;
                    v40 += 6;
                  }
                  while (v39 < v36);
                }
              }
              uint64_t v41 = *(_WORD **)(v57 + 48 * v34 + 32);
              if (v41)
              {
                unsigned int v42 = (unsigned __int16)*v41;
                if (*v41)
                {
                  unint64_t v43 = v41 + 1;
                  do
                  {
                    sub_1CCF9D4E8(v3, v42, (uint64_t)v1[91], (uint64_t)&v63, (uint64_t)&__src, (uint64_t)v1[3]);
                    unsigned int v44 = *v43++;
                    unsigned int v42 = v44;
                  }
                  while (v44);
                }
              }
            }
          }
          else
          {
            int v12 = *(unsigned __int16 *)(v10 + 56);
            uint64_t v13 = (unsigned int *)(*(void *)(v10 + 32) + 40 * (v12 - 1));
            if (*(unsigned __int8 *)(*(void *)(*(void *)v13 + 40) + 16 * v13[2]) == 172) {
              int v14 = v12 - 1;
            }
            else {
              int v14 = *(unsigned __int16 *)(v10 + 56);
            }
            if (v14 != 4)
            {
              unsigned int v15 = 4;
              do
              {
                uint64_t v16 = *(void *)(*(void *)(*(void *)(v10 + 32) + 40 * v15) + 80);
                uint64_t v17 = (void *)(v16 + 24);
                if (*(_DWORD *)(v16 + 32) >= 0x41u) {
                  uint64_t v17 = (void *)*v17;
                }
                int v18 = *(_DWORD *)v17;
                int v19 = (unsigned __int16)v18 >> 3;
                ++v15;
                if ((v18 & 7u) - 2 > 2)
                {
                  v15 += v19;
                }
                else if ((unsigned __int16)v18 >> 3)
                {
                  do
                  {
                    unsigned int v20 = *(_DWORD *)(*(void *)(*(void *)(v10 + 32) + 40 * v15) + 76);
                    if (v20 - 1 <= 0x3FFFFFFE) {
                      sub_1CCF9D4E8(v3, v20, (uint64_t)v1[91], (uint64_t)&v63, (uint64_t)&__src, (uint64_t)v1[3]);
                    }
                    ++v15;
                    --v19;
                  }
                  while (v19);
                }
              }
              while (v15 != v14);
            }
          }
          if (!*(_WORD *)(v10 + 56)) {
            break;
          }
          uint64_t v21 = (unsigned int *)(*(void *)(v10 + 32) + 40 * (*(unsigned __int16 *)(v10 + 56) - 1));
          uint64_t v10 = *(void *)v21;
        }
        while (*(unsigned __int8 *)(*(void *)(*(void *)v21 + 40) + 16 * v21[2]) == 172);
      }
      int v49 = v61;
      sub_1CB833A08((uint64_t)&v67, v68[0]);
      if (v63 != &v65) {
        free(v63);
      }
      if (v49)
      {
        unsigned int v63 = **a1;
        unint64_t v64 = &v66;
        uint64_t v65 = 0x400000000;
        int v50 = v61;
        if (v61)
        {
          if (v61 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(&v66, __src, 4 * v61);
          LODWORD(v65) = v50;
        }
        sub_1CD7D37D8((uint64_t)(v1 + 99), &v63, (uint64_t)&v64, (uint64_t)v58);
        if (v64 != &v66) {
          free(v64);
        }
        if (v59)
        {
          *((_WORD *)**a1 + 114) |= 0x100u;
          unint64_t v51 = *((unsigned int *)v1 + 188);
          if (v51 >= *((unsigned int *)v1 + 189)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v1[93] + v51) = **a1;
          ++*((_DWORD *)v1 + 188);
        }
        else
        {
          uint64_t v52 = *(void *)v58;
          uint64_t v53 = (void **)(*(void *)v58 + 8);
          if ((void **)(*(void *)v58 + 8) != &__src)
          {
            int v54 = v61;
            uint64_t v55 = *(unsigned int *)(*(void *)v58 + 16);
            if (v55 >= v61)
            {
              if (v61) {
                memmove(*v53, __src, 4 * v61);
              }
            }
            else
            {
              if (*(_DWORD *)(*(void *)v58 + 20) < v61)
              {
                *(_DWORD *)(*(void *)v58 + 16) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v55) {
                memmove(*v53, __src, 4 * v55);
              }
              else {
                uint64_t v55 = 0;
              }
              if (v55 != v61) {
                memcpy((char *)*v53 + 4 * v55, (char *)__src + 4 * v55, 4 * v61 - 4 * v55);
              }
            }
            *(_DWORD *)(v52 + 16) = v54;
          }
        }
        **a1 = (void *)(*(uint64_t (**)(void *))(*(void *)v1[84] + 96))(v1[84]);
        LOBYTE(v49) = 1;
      }
    }
    else
    {
      LOBYTE(v49) = 0;
    }
    if (__src != v62) {
      free(__src);
    }
  }
  while ((v49 & 1) != 0);
}

uint64_t sub_1CCF9D4E8(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = result;
  if (a6) {
    uint64_t v10 = (void *)(a6 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v13 = v10[5];
  uint64_t v12 = v10[6];
  int v14 = (_WORD *)(v12 + v11 + 2);
  int v15 = *(unsigned __int16 *)(v12 + v11) + (*(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF) * a2;
  do
  {
    unsigned __int16 v16 = *(_WORD *)(v13 + 4 * (unsigned __int16)v15);
    if (v16) {
      BOOL v17 = v12 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      unsigned int v26 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15 + 2) << 16;
      for (uint64_t i = (unsigned __int16 *)(v12
                                   + 2
                                   * *(unsigned int *)(*v10
                                                     + 24 * *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15)
                                                     + 8));
            ;
            uint64_t i = (unsigned __int16 *)(v10[6] + 2 * *(unsigned int *)(*v10 + 24 * v24 + 8)))
      {
        do
        {
          uint64_t v20 = *(void *)(a3 + 8 * v16);
          if (v20) {
            BOOL v21 = v20 == v9;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21)
          {
            unsigned int v27 = v16;
            uint64_t result = sub_1CB918828(a4, &v27);
            if ((result & 0x100000000) != 0)
            {
              unint64_t v22 = *(unsigned int *)(a5 + 8);
              if (v22 >= *(unsigned int *)(a5 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*(void *)a5 + 4 * v22) = v16;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          int v23 = *i++;
          v16 += v23;
        }
        while (v23);
        unsigned int v24 = HIWORD(v26);
        if (HIWORD(v26))
        {
          v26 >>= 16;
        }
        else
        {
          if (!*v14) {
            return result;
          }
          v15 += (unsigned __int16)*v14++;
          uint64_t v25 = (unsigned __int16 *)(v10[5] + 4 * (unsigned __int16)v15);
          unsigned int v24 = *v25;
          unsigned int v26 = v25[1] << 16;
        }
        unsigned __int16 v16 = v24;
      }
    }
    int v18 = (unsigned __int16)*v14++;
    v15 += v18;
  }
  while (v18);
  return result;
}

uint64_t sub_1CCF9D694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t result = a1 == a2;
    if (a1 == a2) {
      break;
    }
    int v9 = *(unsigned __int16 *)(a1 + 24);
    if (v9 == 2)
    {
      if (!*(_WORD *)(a1 + 56)) {
        return 0;
      }
      uint64_t v13 = *(uint64_t **)(a1 + 32);
      uint64_t v14 = 40 * *(unsigned __int16 *)(a1 + 56) - 40;
      do
      {
        uint64_t v15 = *v13;
        v13 += 5;
        uint64_t result = sub_1CCF9D694(v15, a2, a3, a4);
        if (result) {
          break;
        }
        uint64_t v16 = v14;
        v14 -= 40;
      }
      while (v16);
      return result;
    }
    if ((v9 & 0x8000) != 0)
    {
      int v10 = v9 ^ 0xFFFF;
      if (*(_DWORD *)(a4 + 68) == v10)
      {
        a3 = (a3 + 1);
      }
      else if (*(_DWORD *)(a4 + 64) == v10)
      {
        if (!a3) {
          return result;
        }
        a3 = (a3 - 1);
      }
    }
    if (*(_WORD *)(a1 + 56))
    {
      unint64_t v11 = *(unsigned int **)(a1 + 32);
      uint64_t v12 = &v11[10 * *(unsigned __int16 *)(a1 + 56)];
      while (1)
      {
        a1 = *(void *)v11;
        if (*(unsigned char *)(*(void *)(*(void *)v11 + 40) + 16 * v11[2]) == 1) {
          break;
        }
        v11 += 10;
        if (v11 == v12) {
          return 0;
        }
      }
      if (*(_WORD *)(a1 + 24) != 1) {
        continue;
      }
    }
    return result;
  }
  return result;
}

void sub_1CCF9D7AC(uint64_t a1)
{
  if (!byte_1EBCF96C8)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 672) + 64))(*(void *)(a1 + 672))) {
      *(_DWORD *)(a1 + 716) = -1;
    }
    uint64_t v2 = (*(void *)(a1 + 688) - *(void *)(a1 + 680)) >> 3;
    if (v2)
    {
      for (unsigned int i = 0; i != v2; ++i)
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 680) + 8 * i);
        if ((*(unsigned char *)(v4 + 236) & 2) == 0) {
          llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(*(void *)(a1 + 680) + 8 * i));
        }
        unsigned int v5 = *(_DWORD *)(v4 + 244);
        if (v5 < *(_DWORD *)(a1 + 716)) {
          *(_DWORD *)(a1 + 716) = v5;
        }
        uint64_t v6 = *(void *)(*(void *)(a1 + 680) + 8 * i);
        __int16 v7 = *(_WORD *)(v6 + 228);
        if ((v7 & 0x200) != 0)
        {
          uint64_t v8 = *(unsigned char **)(a1 + 672);
          if (!byte_1EBCF96C8 && v8[12])
          {
            if (!(*(unsigned int (**)(unsigned char *))(*(void *)v8 + 80))(v8)) {
              continue;
            }
            uint64_t v8 = *(unsigned char **)(a1 + 672);
          }
          (*(void (**)(unsigned char *))(*(void *)v8 + 88))(v8);
          uint64_t v6 = *(void *)(*(void *)(a1 + 680) + 8 * i);
          __int16 v7 = *(_WORD *)(v6 + 228);
        }
        *(_WORD *)(v6 + 228) = v7 & 0xFEFF;
        *(void *)(*(void *)(a1 + 680) + 8 * i) = *(void *)(*(void *)(a1 + 688) - 8);
        *(void *)(a1 + 688) -= 8;
        --i;
        LODWORD(v2) = v2 - 1;
      }
    }
  }
}

void sub_1CCF9D92C(uint64_t a1, __int32 a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 752);
  if (v2)
  {
    do
    {
      uint64_t v5 = (v2 - 1);
      uint64_t v6 = *(void *)(*(void *)(a1 + 744) + 8 * v5);
      uint64_t v16 = 0;
      if (sub_1CD5101D0(*(void *)(a1 + 792), *(_DWORD *)(a1 + 808), v6, &v16)) {
        uint64_t v7 = v16;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 792) + 40 * *(unsigned int *)(a1 + 808);
      }
      if (!a2
        || ((uint64_t v8 = *(__int32 **)(v7 + 8),
             size_t v9 = *(unsigned int *)(v7 + 16),
             int v10 = &v8[v9],
             (unint64_t v11 = wmemchr(v8, a2, v9)) != 0)
          ? (uint64_t v12 = v11)
          : (uint64_t v12 = v10),
            v12 != (__int32 *)(*(void *)(v7 + 8) + 4 * *(unsigned int *)(v7 + 16))))
      {
        __int16 v13 = *(_WORD *)(v6 + 228);
        *(_WORD *)(v6 + 228) = v13 & 0xFEFF;
        if ((v13 & 0x200) != 0 && !*(_DWORD *)(v6 + 196)) {
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 672) + 88))(*(void *)(a1 + 672), v6);
        }
        unint64_t v14 = *(unsigned int *)(a1 + 752);
        if (v2 < v14) {
          *(void *)(*(void *)(a1 + 744) + 8 * v5) = *(void *)(*(void *)(a1 + 744) + 8 * v14 - 8);
        }
        *(_DWORD *)(a1 + 752) = v14 - 1;
        uint64_t v15 = *(void **)(v7 + 8);
        if (v15 != (void *)(v7 + 24)) {
          free(v15);
        }
        *(void *)uint64_t v7 = -8192;
        *(int32x2_t *)(a1 + 800) = vadd_s32(*(int32x2_t *)(a1 + 800), (int32x2_t)0x1FFFFFFFFLL);
      }
      --v2;
    }
    while (v5);
  }
}

_DWORD *sub_1CCF9DA9C(uint64_t a1, _WORD *a2)
{
  uint64_t result = *(_DWORD **)(a1 + 704);
  if (result[2] && *(void *)a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(*(void *)a2 + 24);
    char v5 = v4 - 5;
    if (v4 - 261 > 0x34) {
      goto LABEL_9;
    }
    if (((1 << v5) & 0x18000000000004) != 0) {
      return result;
    }
    if (((1 << v5) & 3) != 0)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 32);
      return (_DWORD *)v6();
    }
    else
    {
LABEL_9:
      BOOL v7 = v4 > 0x37;
      uint64_t v8 = (1 << v4) & 0x86000000000004;
      if (v7 || v8 == 0)
      {
        if ((a2[114] & 2) != 0)
        {
          (*(void (**)(_DWORD *))(*(void *)result + 32))(result);
          uint64_t result = *(_DWORD **)(a1 + 704);
        }
        int v10 = *(uint64_t (**)(void))(*(void *)result + 40);
        return (_DWORD *)v10();
      }
    }
  }
  return result;
}

const llvm::SUnit *sub_1CCF9DBD8(void *a1, uint64_t a2)
{
  unsigned int v3 = -252645135 * ((a1[7] - a1[6]) >> 4);
  unsigned int v4 = (const llvm::SUnit *)sub_1CD7D42F0((uint64_t)a1, a2);
  if (*((_DWORD *)v4 + 48) >= v3) {
    llvm::ScheduleDAGTopologicalSort::AddSUnitWithoutPredecessors((llvm::ScheduleDAGTopologicalSort *)(a1 + 102), v4);
  }
  return v4;
}

uint64_t sub_1CCF9DC40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F2641D48;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 44) = 1;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(_OWORD *)(a1 + 120) = 0u;
  BOOL v7 = (char **)(a1 + 120);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  unint64_t v8 = a4[31] - a4[30];
  unint64_t v9 = (v8 >> 3);
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = a5;
  if ((v8 >> 3))
  {
    sub_1CBF2A8C4((char **)(a1 + 144), (v8 >> 3));
    uint64_t v10 = *(void *)(a1 + 120);
    uint64_t v11 = *(void *)(a1 + 128);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 - v10;
  unint64_t v13 = (v11 - v10) >> 2;
  if (v9 <= v12 >> 2)
  {
    if (v9 < v13) {
      *(void *)(a1 + 128) = v10 + 4 * v9;
    }
  }
  else
  {
    sub_1CBF2A8C4(v7, v9 - v13);
  }
  unint64_t v14 = *(void **)(a1 + 144);
  uint64_t v15 = *(void *)(a1 + 152) - (void)v14;
  if (v15 >= 1)
  {
    uint64_t v16 = (unint64_t)v15 >> 2;
    if (v16 <= 1) {
      uint64_t v16 = 1;
    }
    bzero(v14, 4 * v16);
  }
  BOOL v17 = *(void **)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 128) - (void)v17;
  if (v18 >= 1)
  {
    uint64_t v19 = (unint64_t)v18 >> 2;
    if (v19 <= 1) {
      uint64_t v19 = 1;
    }
    bzero(v17, 4 * v19);
  }
  uint64_t v20 = *(void *)(a1 + 72);
  BOOL v21 = *(uint64_t **)(v20 + 240);
  unint64_t v22 = *(uint64_t **)(v20 + 248);
  while (v21 != v22)
  {
    uint64_t v23 = *v21++;
    *(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(void *)v23 + 24)) = (*(uint64_t (**)(void *, uint64_t, void))(*a4 + 264))(a4, v23, *(void *)(a1 + 56));
  }
  return a1;
}

void *sub_1CCF9DDD8(void *a1)
{
  *a1 = &unk_1F2641D48;
  unint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  char v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1CCF9DE58(void *a1)
{
  *a1 = &unk_1F2641D48;
  unint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  char v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCF9DEF8()
{
  return 1;
}

void sub_1CCF9DF00(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 48) = a2;
  if (!byte_1EBCF9CC8)
  {
    uint64_t v13 = *a2;
    uint64_t v113 = a2[1];
    if (*a2 != v113)
    {
      do
      {
        if ((*(_WORD *)(v13 + 228) & 8) != 0)
        {
          uint64_t v14 = *(void *)v13;
          if (*(void *)v13)
          {
            int v15 = *(__int16 *)(v14 + 24);
            if (v15 < 0)
            {
              if (!*(_WORD *)(v14 + 56)
                || (uint64_t v16 = (unsigned int *)(*(void *)(v14 + 32)
                                         + 40 * (*(unsigned __int16 *)(v14 + 56) - 1)),
                    *(unsigned __int8 *)(*(void *)(*(void *)v16 + 40) + 16 * v16[2]) != 172))
              {
                int v104 = sub_1CCF9F30C(*(void **)(v13 + 112), *(_DWORD *)(v13 + 120));
                uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
                uint64_t v18 = v17 + 48 * (unsigned __int16)~(_WORD)v15;
                int v20 = *(unsigned __int16 *)(v18 + 2);
                uint64_t v19 = (unsigned __int16 *)(v18 + 2);
                int v21 = *((unsigned __int8 *)v19 + 2);
                int v114 = v20 - v21;
                int v115 = v21;
                if (v20 != v21)
                {
                  uint64_t v22 = 0;
                  int v111 = (void *)(v17 + 48 * (unsigned __int16)~(_WORD)v15 + 40);
                  do
                  {
                    if ((int)v22 + v115 < *v19
                      && (*(_WORD *)(*v111 + 6 * (v22 + v115) + 4) & 1) != 0)
                    {
                      int v23 = *(_DWORD *)(*(void *)(*(void *)(*(void *)v13 + 32) + 40 * v22) + 28);
                      if (v23 != -1)
                      {
                        uint64_t v24 = **(void **)(a1 + 48);
                        uint64_t v25 = v24 + 272 * v23;
                        uint64_t v26 = *(unsigned int *)(v25 + 120);
                        if (v26)
                        {
                          unsigned int v27 = *(void **)(v25 + 112);
                          uint64_t v28 = &v27[2 * v26];
                          uint64_t v106 = (void *)(v24 + 272 * v23 + 16);
                          do
                          {
                            unint64_t v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
                            if ((*v27 & 6) == 0 && v13 != v29)
                            {
                              if ((*(unsigned char *)(v29 + 236) & 2) == 0) {
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)(*v27 & 0xFFFFFFFFFFFFFFF8));
                              }
                              unsigned int v31 = *(_DWORD *)(v29 + 244);
                              if ((*(unsigned char *)(v13 + 236) & 2) == 0) {
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v13);
                              }
                              unsigned int v32 = *(_DWORD *)(v13 + 244);
                              if (v31 >= v32) {
                                goto LABEL_45;
                              }
                              if ((*(unsigned char *)(v13 + 236) & 2) == 0)
                              {
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v13);
                                unsigned int v32 = *(_DWORD *)(v13 + 244);
                              }
                              if ((*(unsigned char *)(v29 + 236) & 2) == 0) {
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v29);
                              }
                              if (v32 - *(_DWORD *)(v29 + 244) <= 1)
                              {
LABEL_45:
                                while (*(_DWORD *)(v29 + 120) == 1)
                                {
                                  uint64_t v33 = *(void *)v29;
                                  int v34 = *(unsigned __int16 *)(*(void *)v29 + 24);
                                  if (v34 != 65523) {
                                    goto LABEL_50;
                                  }
                                  unint64_t v29 = **(void **)(v29 + 112) & 0xFFFFFFFFFFFFFFF8;
                                }
                                uint64_t v33 = *(void *)v29;
                                if (!*(void *)v29) {
                                  goto LABEL_33;
                                }
                                int v34 = *(unsigned __int16 *)(v33 + 24);
LABEL_50:
                                if ((v34 & 0x8000) != 0)
                                {
                                  __int16 v35 = *(_WORD *)(v29 + 228);
                                  if (((v35 & 0x40) == 0
                                     || (*(_WORD *)(v13 + 228) & 0x80) == 0
                                     || (sub_1CCF9F370(v33, *(void *)v13, *(void *)(*(void *)(a1 + 64) + 8), *(void *)(a1 + 72)) & 1) == 0)&& ((v34 ^ 0xFFFFu) > 0xB || ((1 << ~(_BYTE)v34) & 0xB00) == 0))
                                  {
                                    uint64_t v37 = *(void *)v13;
                                    if (*(_WORD *)(*(void *)v13 + 56))
                                    {
                                      uint64_t v38 = *(void *)(v37 + 32);
                                      uint64_t v39 = 40 * *(unsigned __int16 *)(*(void *)v13 + 56);
                                      uint64_t v40 = (void *)a1;
                                      while (!*(void *)v38 || *(_WORD *)(*(void *)v38 + 24) != 10)
                                      {
                                        v38 += 40;
                                        v39 -= 40;
                                        if (!v39)
                                        {
                                          uint64_t v42 = 0;
                                          goto LABEL_69;
                                        }
                                      }
                                      uint64_t v42 = *(void *)(*(void *)v38 + 80);
                                    }
                                    else
                                    {
                                      uint64_t v42 = 0;
                                      uint64_t v40 = (void *)a1;
                                    }
LABEL_69:
                                    unint64_t v108 = *(void *)(*(void *)(v40[8] + 8)
                                                     + 48 * (__int16)~*(_WORD *)(v37 + 24)
                                                     + 32);
                                    if (v108 | v42 && (uint64_t v43 = *(unsigned int *)(v13 + 120), v43))
                                    {
                                      uint64_t v105 = v42;
                                      unsigned int v44 = *(void **)(v13 + 112);
                                      uint64_t v102 = &v44[2 * v43];
                                      int v110 = (llvm::ScheduleDAGTopologicalSort *)(v40[11] + 816);
                                      long long v107 = (void *)(v40[9] + 8);
                                      while (1)
                                      {
                                        uint64_t v103 = v44;
                                        unint64_t v45 = *v44 & 0xFFFFFFFFFFFFFFF8;
                                        uint64_t v46 = *(unsigned int *)(v45 + 40);
                                        if (v46) {
                                          break;
                                        }
LABEL_91:
                                        unsigned int v44 = v103 + 2;
                                        if (v103 + 2 == v102)
                                        {
                                          __int16 v35 = *(_WORD *)(v29 + 228);
                                          goto LABEL_93;
                                        }
                                      }
                                      uint64_t v47 = *(void *)(v45 + 32);
                                      uint64_t v48 = v47 + 16 * v46;
                                      while (1)
                                      {
                                        if ((*(void *)v47 & 6) == 0)
                                        {
                                          unint64_t v49 = *(unsigned int *)(v47 + 8);
                                          if (v49)
                                          {
                                            if (v105
                                              && ((*(_DWORD *)(v105 + ((v49 >> 3) & 0x1FFFFFFC)) >> v49) & 1) == 0
                                              && llvm::ScheduleDAGTopologicalSort::IsReachable(v110, (const llvm::SUnit *)v29, (const llvm::SUnit *)(*(void *)v47 & 0xFFFFFFFFFFFFFFF8)))
                                            {
                                              goto LABEL_33;
                                            }
                                            if (v108)
                                            {
                                              unsigned int v50 = *(unsigned __int16 *)v108;
                                              if (*(_WORD *)v108) {
                                                break;
                                              }
                                            }
                                          }
                                        }
LABEL_75:
                                        v47 += 16;
                                        if (v47 == v48) {
                                          goto LABEL_91;
                                        }
                                      }
                                      unint64_t v51 = (unsigned __int16 *)(v108 + 2);
                                      while (1)
                                      {
                                        unsigned int v52 = *(_DWORD *)(v47 + 8);
                                        if ((v52 == v50
                                           || v52 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v107, v50, v52))
                                          && llvm::ScheduleDAGTopologicalSort::IsReachable(v110, (const llvm::SUnit *)v29, (const llvm::SUnit *)(*(void *)v47 & 0xFFFFFFFFFFFFFFF8)))
                                        {
                                          break;
                                        }
                                        unsigned int v53 = *v51++;
                                        unsigned int v50 = v53;
                                        if (!v53) {
                                          goto LABEL_75;
                                        }
                                      }
                                    }
                                    else
                                    {
LABEL_93:
                                      if ((v35 & 8) == 0) {
                                        goto LABEL_101;
                                      }
                                      uint64_t v54 = *(void *)(*(void *)(a1 + 64) + 8);
                                      unsigned int v55 = (__int16)~*(_WORD *)(*(void *)v29 + 24);
                                      uint64_t v56 = v54 + 48 * v55;
                                      unsigned int v57 = *(unsigned __int8 *)(v56 + 4);
                                      unsigned int v58 = *(unsigned __int16 *)(v56 + 2);
                                      if (v58 == v57) {
                                        goto LABEL_101;
                                      }
                                      uint64_t v59 = 0;
                                      uint64_t v60 = (void *)(v54 + 48 * v55 + 40);
                                      while (1)
                                      {
                                        if (v57 < v58 && (*(_WORD *)(*v60 + 6 * v57 + 4) & 1) != 0)
                                        {
                                          int v61 = *(_DWORD *)(*(void *)(*(void *)(*(void *)v29 + 32) + v59) + 28);
                                          if (v61 != -1 && *v106 == **(void **)(a1 + 48) + 272 * v61) {
                                            break;
                                          }
                                        }
                                        ++v57;
                                        v59 += 40;
                                        if (v58 == v57) {
                                          goto LABEL_101;
                                        }
                                      }
                                      if (v104
                                        && !sub_1CCF9F30C(*(void **)(v29 + 112), *(_DWORD *)(v29 + 120))
                                        || (v35 & 0x10) != 0 && (*(_WORD *)(v13 + 228) & 0x10) == 0)
                                      {
LABEL_101:
                                        if (!llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(void *)(a1 + 88) + 816), (const llvm::SUnit *)v29, (const llvm::SUnit *)v13))
                                        {
                                          uint64_t v62 = *(void *)(a1 + 88);
                                          *(void *)&long long v116 = v29 | 6;
                                          *((void *)&v116 + 1) = 3;
                                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(v62 + 816, (llvm::SUnit *)v13, (llvm::SUnit *)(v29 & 0xFFFFFFFFFFFFFFF8));
                                          llvm::SUnit::addPred(v13, (uint64_t *)&v116, 1);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_33:
                            v27 += 2;
                          }
                          while (v27 != v28);
                        }
                      }
                    }
                    ++v22;
                  }
                  while (v114 != v22);
                }
              }
            }
          }
        }
        v13 += 272;
      }
      while (v13 != v113);
    }
  }
  if (!*(unsigned char *)(a1 + 44) && !*(unsigned char *)(a1 + 45))
  {
    uint64_t v67 = *(uint64_t **)(a1 + 48);
    uint64_t v69 = *v67;
    uint64_t v68 = v67[1];
    while (v69 != v68)
    {
      if (*(_DWORD *)(v69 + 204)) {
        BOOL v70 = 0;
      }
      else {
        BOOL v70 = *(_DWORD *)(v69 + 200) == 1;
      }
      if (v70)
      {
        uint64_t v71 = *(void *)v69;
        if (!*(void *)v69
          || *(_WORD *)(v71 + 24) != 49
          || (*(_DWORD *)(*(void *)(*(void *)(v71 + 32) + 40) + 76) & 0x80000000) == 0)
        {
          uint64_t v72 = *(unsigned int *)(v69 + 40);
          if (v72)
          {
            unint64_t v73 = *(void **)(v69 + 32);
            uint64_t v74 = 16 * v72;
            uint64_t v75 = v74;
            uint64_t v76 = v73;
            while (1)
            {
              uint64_t v77 = (uint64_t *)(*v76 & 0xFFFFFFFFFFFFFFF8);
              if ((*v76 & 6) != 0 && v77 != 0)
              {
                uint64_t v79 = *v77;
                if (v79)
                {
                  int v80 = *(__int16 *)(v79 + 24);
                  if (v80 < 0 && *(_DWORD *)(*(void *)(a1 + 64) + 64) == (unsigned __int16)~(_WORD)v80) {
                    break;
                  }
                }
              }
              v76 += 2;
              v75 -= 16;
              if (!v75)
              {
                while ((*v73 & 6) != 0)
                {
                  v73 += 2;
                  v74 -= 16;
                  if (!v74) {
                    goto LABEL_142;
                  }
                }
                unint64_t v81 = *v73 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_144;
              }
            }
          }
          else
          {
LABEL_142:
            unint64_t v81 = 0;
LABEL_144:
            if ((*(_WORD *)(v81 + 228) & 0x40) == 0
              && *(_DWORD *)(v81 + 204) != 1
              && (!v71
               || *(_WORD *)(v71 + 24) != 50
               || (*(_DWORD *)(*(void *)(*(void *)(v71 + 32) + 40) + 76) & 0x80000000) == 0))
            {
              uint64_t v82 = *(unsigned int *)(v81 + 120);
              if (v82)
              {
                int v83 = *(void **)(v81 + 112);
                uint64_t v84 = 16 * v82;
                while (1)
                {
                  unint64_t v85 = *v83 & 0xFFFFFFFFFFFFFFF8;
                  if (v69 != v85
                    && (!*(_DWORD *)(v85 + 204)
                     || (*(_WORD *)(v69 + 228) & 0x80) != 0
                     && (*(_WORD *)(v85 + 228) & 0x40) != 0
                     && (sub_1CCF9F370(*(void *)v85, *(void *)v69, *(void *)(*(void *)(a1 + 64) + 8), *(void *)(a1 + 72)) & 1) != 0|| llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(void *)(a1 + 88) + 816), (const llvm::SUnit *)v69, (const llvm::SUnit *)v85)))
                  {
                    break;
                  }
                  v83 += 2;
                  v84 -= 16;
                  if (!v84)
                  {
                    int v86 = *(_DWORD *)(v81 + 120);
                    if (v86)
                    {
                      for (unsigned int i = 0; i != v86; ++i)
                      {
                        long long v116 = *(_OWORD *)(*(void *)(v81 + 112) + 16 * i);
                        uint64_t v88 = (llvm::SUnit *)(v116 & 0xFFFFFFFFFFFFFFF8);
                        if (v69 != (v116 & 0xFFFFFFFFFFFFFFF8))
                        {
                          *(void *)&long long v116 = v116 & 7 | v81;
                          llvm::SUnit::removePred((uint64_t)v88, (uint64_t)&v116);
                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(*(void *)(a1 + 88) + 816, (llvm::SUnit *)v69, (llvm::SUnit *)(v116 & 0xFFFFFFFFFFFFFFF8));
                          llvm::SUnit::addPred(v69, (uint64_t *)&v116, 1);
                          *(void *)&long long v116 = v116 & 7 | v69;
                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(*(void *)(a1 + 88) + 816, v88, (llvm::SUnit *)(v69 & 0xFFFFFFFFFFFFFFF8));
                          llvm::SUnit::addPred((uint64_t)v88, (uint64_t *)&v116, 1);
                          --i;
                          int v86 = *(_DWORD *)(v81 + 120);
                        }
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
      v69 += 272;
    }
  }
  unint64_t v2 = *(char **)(a1 + 96);
  unsigned int v3 = *(uint64_t **)(a1 + 48);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v4 - *v3) >> 4);
  uint64_t v7 = *(void *)(a1 + 112);
  if (v6 > (v7 - (uint64_t)v2) >> 2)
  {
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
      uint64_t v7 = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
    if (v6 >> 62) {
      goto LABEL_194;
    }
    uint64_t v63 = v7 >> 1;
    if (v7 >> 1 <= v6) {
      uint64_t v63 = v6;
    }
    unint64_t v64 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v63;
    if (v64 >> 62) {
LABEL_194:
    }
      abort();
    uint64_t v65 = (char *)operator new(4 * v64);
    *(void *)(a1 + 96) = v65;
    *(void *)(a1 + 112) = &v65[4 * v64];
    bzero(v65, 4 * v6);
    *(void *)(a1 + 104) = &v65[4 * v6];
    uint64_t v66 = *(uint64_t **)(a1 + 48);
    uint64_t v5 = *v66;
    uint64_t v4 = v66[1];
  }
  else
  {
    unint64_t v8 = *(unsigned char **)(a1 + 104);
    unint64_t v9 = (v8 - v2) >> 2;
    if (v9 >= v6) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = (v8 - v2) >> 2;
    }
    if (v10) {
      bzero(*(void **)(a1 + 96), 4 * v10);
    }
    BOOL v11 = v6 >= v9;
    unint64_t v12 = v6 - v9;
    if (v12 != 0 && v11)
    {
      bzero(v8, 4 * v6 - ((v8 - v2) & 0xFFFFFFFFFFFFFFFCLL));
      *(void *)(a1 + 104) = &v8[4 * v12];
    }
    else
    {
      *(void *)(a1 + 104) = &v2[4 * v6];
    }
  }
  while (v5 != v4)
  {
    sub_1CCF9F57C(v5, (uint64_t *)(a1 + 96));
    v5 += 272;
  }
  uint64_t v89 = *(void *)(*(void *)(a1 + 88) + 616);
  unsigned int v90 = *(void **)(v89 + 88);
  int v91 = *(void **)(v89 + 96);
  if (v90 != v91)
  {
    while (*v90 != v89)
    {
      if (++v90 == v91)
      {
        unsigned int v90 = *(void **)(v89 + 96);
        break;
      }
    }
  }
  if (v90 != v91)
  {
    uint64_t v92 = *a2;
    uint64_t v93 = a2[1];
    if (*a2 != v93)
    {
      int v94 = byte_1EBCF9908;
      do
      {
        if (!v94)
        {
          uint64_t v95 = *(unsigned int *)(v92 + 40);
          if (v95)
          {
            char v96 = 0;
            uint64_t v97 = *(void **)(v92 + 32);
            uint64_t v98 = &v97[2 * v95];
            uint64_t v99 = v97;
            do
            {
              while ((*v99 & 6) == 0)
              {
                uint64_t v100 = *(void *)(*v99 & 0xFFFFFFFFFFFFFFF8);
                if (!v100
                  || *(_WORD *)(v100 + 24) != 50
                  || (*(_DWORD *)(*(void *)(*(void *)(v100 + 32) + 40) + 76) & 0x80000000) == 0)
                {
                  goto LABEL_174;
                }
                v99 += 2;
                char v96 = 1;
                if (v99 == v98) {
                  goto LABEL_187;
                }
              }
              v99 += 2;
            }
            while (v99 != v98);
            if ((v96 & 1) == 0) {
              goto LABEL_174;
            }
LABEL_187:
            if (sub_1CCF9F30C(*(void **)(v92 + 112), *(_DWORD *)(v92 + 120)))
            {
              *(_WORD *)(v92 + 228) |= 1u;
              uint64_t v101 = 16 * v95;
              do
              {
                if ((*v97 & 6) == 0) {
                  *(_WORD *)((*v97 & 0xFFFFFFFFFFFFFFF8) + 228) |= 1u;
                }
                v97 += 2;
                v101 -= 16;
              }
              while (v101);
            }
          }
        }
LABEL_174:
        v92 += 272;
      }
      while (v92 != v93);
    }
  }
}

void sub_1CCF9E950(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[12];
  uint64_t v4 = a1 + 12;
  uint64_t v5 = a1[13] - v3;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1[6] + 8) - *(void *)a1[6]) >> 4) > ((unint64_t)v5 >> 2))
  {
    unint64_t v6 = ((unint64_t)v5 >> 1) & 0xFFFFFFFE;
    int v8 = 0;
    unint64_t v7 = v5 >> 2;
    if (v6 <= v5 >> 2)
    {
      if (v6 < v7) {
        a1[13] = v3 + 4 * v6;
      }
    }
    else
    {
      sub_1CC2DC07C((uint64_t)(a1 + 12), v6 - v7, &v8);
    }
  }
  sub_1CCF9F57C(a2, v4);
}

void sub_1CCF9E9F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 96) + 4 * *(unsigned int *)(a2 + 192)) = 0;
  sub_1CCF9F57C(a2, (uint64_t *)(a1 + 96));
}

void sub_1CCF9EA10(void *a1)
{
  a1[6] = 0;
  a1[13] = a1[12];
  unint64_t v2 = (void *)a1[15];
  uint64_t v3 = a1[16] - (void)v2;
  if (v3 >= 1)
  {
    uint64_t v4 = (unint64_t)v3 >> 2;
    if (v4 <= 1) {
      uint64_t v4 = 1;
    }
    bzero(v2, 4 * v4);
  }
}

BOOL sub_1CCF9EA4C(uint64_t a1)
{
  return *(void *)(a1 + 16) == *(void *)(a1 + 24);
}

uint64_t sub_1CCF9EA5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

uint64_t sub_1CCF9EA64()
{
  return 0;
}

void sub_1CCF9EA6C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a2 + 196) = v4;
  unint64_t v6 = *(void **)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v5)
  {
    int v8 = *(void **)(a1 + 16);
    uint64_t v9 = v6 - v8;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1CB833614();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    *(void *)uint64_t v14 = a2;
    unint64_t v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        uint64_t v15 = *--v6;
        *((void *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v6 != v8);
      unint64_t v6 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unint64_t v6 = a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 24) = v7;
}

uint64_t sub_1CCF9EB68(void *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v2 = a1 + 2;
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = sub_1CCF9F730(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

uint64_t sub_1CCF9EBA0(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(uint64_t **)(result + 16);
  uint64_t v3 = *(uint64_t **)(result + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        unint64_t v2 = *(uint64_t **)(result + 24);
        break;
      }
    }
  }
  uint64_t v4 = v3 - 1;
  if (v2 != v3 - 1)
  {
    uint64_t v5 = *v2;
    uint64_t *v2 = *v4;
    *uint64_t v4 = v5;
    uint64_t v3 = *(uint64_t **)(result + 24);
  }
  *(void *)(result + 24) = v3 - 1;
  *(_DWORD *)(a2 + 196) = 0;
  return result;
}

void sub_1CCF9EBF8(void *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[2];
  unint64_t v2 = (unsigned char *)a1[3];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v2 - v3);
    int v8 = &v7[8 * (v4 >> 3)];
    uint64_t v16 = v7;
    uint64_t v18 = v8;
    memmove(v7, v3, v4);
    uint64_t v17 = v8;
    uint64_t v15 = a1[21];
    do
    {
      uint64_t v9 = sub_1CCF9F730((uint64_t *)&v16, &v15);
      unint64_t v10 = llvm::dbgs((llvm *)v9);
      uint64_t v11 = v10;
      unint64_t v12 = (_DWORD *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *unint64_t v12 = 1734960456;
        *((void *)v10 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(unsigned char *)(v9 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      }
      sub_1CD098D14(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      uint64_t v13 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v13 > 1uLL)
      {
        _WORD *v13 = 8250;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
      uint64_t v14 = v16;
    }
    while (v16 != v17);
    if (v16)
    {
      operator delete(v14);
    }
  }
}

uint64_t sub_1CCF9EDBC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 44) && *(void *)a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(unsigned int *)(a2 + 40);
    if (v4)
    {
      unint64_t v10 = *(uint64_t **)(a2 + 32);
      uint64_t v11 = &v10[2 * v4];
      do
      {
        uint64_t v12 = *v10;
        if ((*v10 & 6) == 0)
        {
          unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          int v14 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFF8) + 224);
          if (v14)
          {
            unsigned __int16 v15 = v14 - 1;
            *(_WORD *)(v13 + 224) = v14 - 1;
            sub_1CD7D515C((uint64_t)v18, (uint64_t *)v13, *(void *)(v3 + 88));
            if (v19)
            {
              int v16 = v15 + 1;
              while (--v16)
              {
                sub_1CD7D5090((uint64_t)v18);
                if (!v19) {
                  goto LABEL_15;
                }
              }
              uint64_t v17 = 0;
              sub_1CCF9FE78((uint64_t)v18, *(void *)(v3 + 80), *(uint64_t **)(v3 + 64), *(void *)(v3 + 72), (_DWORD *)&v17 + 1, &v17, *(void *)(v3 + 56));
              *(_DWORD *)(*(void *)(v3 + 120) + 4 * HIDWORD(v17)) += v17;
            }
          }
        }
LABEL_15:
        v10 += 2;
      }
      while (v10 != v11);
    }
    int v5 = *(unsigned __int16 *)(a2 + 224);
    uint64_t result = sub_1CD7D515C((uint64_t)v18, (uint64_t *)a2, *(void *)(v3 + 88));
    while (v19)
    {
      if (v5 <= 0)
      {
        uint64_t v17 = 0;
        sub_1CCF9FE78((uint64_t)v18, *(void *)(v3 + 80), *(uint64_t **)(v3 + 64), *(void *)(v3 + 72), (_DWORD *)&v17 + 1, &v17, *(void *)(v3 + 56));
        uint64_t v6 = *(void *)(v3 + 120);
        unsigned int v7 = *(_DWORD *)(v6 + 4 * HIDWORD(v17));
        BOOL v8 = v7 >= v17;
        int v9 = v7 - v17;
        if (!v8) {
          int v9 = 0;
        }
        *(_DWORD *)(v6 + 4 * HIDWORD(v17)) = v9;
      }
      uint64_t result = sub_1CD7D5090((uint64_t)v18);
      --v5;
    }
  }
  return result;
}

uint64_t sub_1CCF9EF1C(uint64_t result, uint64_t *a2)
{
  if (!*(unsigned char *)(result + 44)) {
    return result;
  }
  uint64_t v3 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(unsigned __int16 *)(v3 + 24);
  if (*(__int16 *)(v3 + 24) < 0)
  {
    int v21 = v5 ^ 0xFFFF;
    if ((v21 - 8) < 4 || v21 == 18) {
      return result;
    }
  }
  else if (v5 != 49)
  {
    return result;
  }
  uint64_t v30 = *a2;
  uint64_t v6 = *((unsigned int *)a2 + 10);
  if (v6)
  {
    unsigned int v7 = (void *)a2[4];
    BOOL v8 = &v7[2 * v6];
    while (1)
    {
      if ((*v7 & 6) != 0) {
        goto LABEL_16;
      }
      int v9 = (_DWORD *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      if (v9[30] != v9[53]) {
        goto LABEL_16;
      }
      uint64_t v10 = *(void *)v9;
      int v11 = *(__int16 *)(*(void *)v9 + 24);
      if ((v11 & 0x80000000) == 0) {
        break;
      }
      unsigned int v12 = (unsigned __int16)v11 ^ 0xFFFF;
      if (v12 - 8 < 2) {
        goto LABEL_15;
      }
      if (v12 != 10)
      {
        if (v12 != 11)
        {
          uint64_t v14 = *(void *)(*(void *)(v4 + 64) + 8) + 48 * v12;
          uint64_t v15 = *(unsigned __int8 *)(v14 + 4);
          if (*(unsigned char *)(v14 + 4))
          {
            uint64_t v16 = 0;
            do
            {
              uint64_t v17 = *(void *)(v10 + 48);
              if (v17)
              {
                while (*(_DWORD *)(v17 + 8) != v16)
                {
                  uint64_t v17 = *(void *)(v17 + 32);
                  if (!v17) {
                    goto LABEL_27;
                  }
                }
                uint64_t v18 = *(unsigned __int8 *)(*(void *)(v10 + 40) + 16 * v16);
                uint64_t v19 = *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 80)
                                                                                                  + 440))(*(void *)(v4 + 80), v18)+ 24);
                unsigned int v20 = *(_DWORD *)(*(void *)(v4 + 120) + 4 * v19);
                uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 80) + 448))();
                if (v20 >= result)
                {
                  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 80) + 448))(*(void *)(v4 + 80), v18);
                  *(_DWORD *)(*(void *)(v4 + 120) + 4 * v19) -= result;
                }
                else
                {
                  *(_DWORD *)(*(void *)(v4 + 120) + 4 * v19) = 0;
                }
              }
LABEL_27:
              ++v16;
            }
            while (v16 != v15);
          }
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v13 = *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 80) + 440))(*(void *)(v4 + 80), **(unsigned __int8 **)(v10 + 40))+ 24);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 80) + 448))();
        *(_DWORD *)(*(void *)(v4 + 120) + 4 * v13) += result;
      }
LABEL_16:
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_34;
      }
    }
    if ((unsigned __int16)v11 != 50) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_34:
  if (*((_DWORD *)a2 + 51))
  {
    int v23 = *(__int16 *)(v30 + 24);
    if (v23 < 0)
    {
      unsigned int v24 = *(unsigned __int8 *)(*(void *)(*(void *)(v4 + 64) + 8) + 48 * (unsigned __int16)~(_WORD)v23 + 4);
      int v25 = *(unsigned __int16 *)(v30 + 58);
      while (v24 != v25)
      {
        uint64_t v26 = *(void *)(*(void *)(v30 + 40) + 16 * v24);
        if (v26 != 1)
        {
          uint64_t v27 = v26;
          if (v26 != 172)
          {
            uint64_t v28 = *(void *)(v30 + 48);
            if (v28)
            {
              while (*(_DWORD *)(v28 + 8) != v24)
              {
                uint64_t v28 = *(void *)(v28 + 32);
                if (!v28) {
                  goto LABEL_46;
                }
              }
              uint64_t v29 = *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 80)
                                                                                                + 440))(*(void *)(v4 + 80), v27)+ 24);
              uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 80) + 448))();
              *(_DWORD *)(*(void *)(v4 + 120) + 4 * v29) += result;
            }
          }
        }
LABEL_46:
        ++v24;
      }
    }
  }
  return result;
}

uint64_t sub_1CCF9F30C(void *a1, unsigned int a2)
{
  LOBYTE(v2) = 0;
  if (a2)
  {
    for (uint64_t i = 16 * a2; i; i -= 16)
    {
      if ((*a1 & 6) == 0)
      {
        uint64_t v2 = *(void *)(*a1 & 0xFFFFFFFFFFFFFFF8);
        if (!v2) {
          return v2 & 1;
        }
        if (*(_WORD *)(v2 + 24) != 49
          || (*(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 40) + 76) & 0x80000000) == 0)
        {
          LOBYTE(v2) = 0;
          return v2 & 1;
        }
        LOBYTE(v2) = 1;
      }
      a1 += 2;
    }
  }
  return v2 & 1;
}

uint64_t sub_1CCF9F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v6 = a3 + 48 * (__int16)~*(_WORD *)(a1 + 24);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 4);
  uint64_t v26 = *(void *)(v6 + 32);
  uint64_t v28 = (void *)(a4 + 8);
  while (1)
  {
    int v8 = *(__int16 *)(v4 + 24);
    if (v8 < 0) {
      break;
    }
    LODWORD(v9) = *(unsigned __int16 *)(v4 + 56);
LABEL_33:
    if (v9)
    {
      int v23 = (unsigned int *)(*(void *)(v4 + 32) + 40 * (v9 - 1));
      uint64_t v4 = *(void *)v23;
      if (*(unsigned __int8 *)(*(void *)(*(void *)v23 + 40) + 16 * v23[2]) == 172) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v9 = *(unsigned __int16 *)(v4 + 56);
  if (*(_WORD *)(v4 + 56))
  {
    uint64_t v10 = *(void *)(v4 + 32);
    uint64_t v11 = 40 * v9;
    while (!*(void *)v10 || *(_WORD *)(*(void *)v10 + 24) != 10)
    {
      v10 += 40;
      v11 -= 40;
      if (!v11) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = *(void *)(*(void *)v10 + 80);
  }
  else
  {
LABEL_12:
    uint64_t v13 = 0;
  }
  unint64_t v14 = *(void *)(a3 + 48 * (unsigned __int16)~(_WORD)v8 + 32);
  if (!(v14 | v13)) {
    goto LABEL_33;
  }
  int v15 = *(unsigned __int16 *)(a1 + 58);
  if (v7 == v15) {
    goto LABEL_33;
  }
  uint64_t v25 = a3;
  uint64_t v16 = *(void *)(a1 + 40);
  unsigned int v27 = v7;
  unsigned int v17 = v7;
  while (1)
  {
    int v18 = *(unsigned __int8 *)(v16 + 16 * v17);
    if (v18 != 1 && v18 != 172)
    {
      uint64_t v19 = *(void *)(a1 + 48);
      if (v19)
      {
        while (*(_DWORD *)(v19 + 8) != v17)
        {
          uint64_t v19 = *(void *)(v19 + 32);
          if (!v19) {
            goto LABEL_31;
          }
        }
        unint64_t v20 = *(unsigned __int16 *)(v26 + 2 * (v17 - v27));
        if (v13 && ((*(_DWORD *)(v13 + ((v20 >> 3) & 0x1FFC)) >> v20) & 1) == 0) {
          return 1;
        }
        if (v14)
        {
          unsigned int v21 = *(unsigned __int16 *)v14;
          if (*(_WORD *)v14) {
            break;
          }
        }
      }
    }
LABEL_31:
    if (++v17 == v15)
    {
      a3 = v25;
      unsigned int v7 = v27;
      goto LABEL_33;
    }
  }
  while (v20 != v21
       && ((v20 - 1) > 0x3FFFFFFE || !llvm::MCRegisterInfo::regsOverlap(v28, v20, v21)))
  {
    unsigned int v22 = *(unsigned __int16 *)(v14 + 2);
    v14 += 2;
    unsigned int v21 = v22;
    if (!v22) {
      goto LABEL_31;
    }
  }
  return 1;
}

void sub_1CCF9F57C(uint64_t a1, uint64_t *a2)
{
  v22[32] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(*a2 + 4 * *(unsigned int *)(a1 + 192)))
  {
    unint64_t v20 = v22;
    v22[0] = a1;
    v22[1] = 0;
    uint64_t v21 = 0x1000000001;
    unsigned int v2 = 1;
    do
    {
      uint64_t v3 = (char *)v20;
      uint64_t v4 = (char *)v20 + 16 * v2;
      uint64_t v5 = *((void *)v4 - 2);
      uint64_t v6 = *((unsigned int *)v4 - 2);
      uint64_t v7 = *(unsigned int *)(v5 + 40);
      int v8 = *(void **)(v5 + 32);
      uint64_t v9 = *a2;
      if (v7 <= v6)
      {
LABEL_8:
        if (v7)
        {
          int v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 16 * v7;
          do
          {
            if ((*v8 & 6) == 0)
            {
              unsigned int v16 = *(_DWORD *)(v9 + 4 * *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192));
              if (v16 <= v14)
              {
                if (v16 == v14) {
                  ++v13;
                }
              }
              else
              {
                int v13 = 0;
                unsigned int v14 = *(_DWORD *)(v9 + 4 * *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192));
              }
            }
            v8 += 2;
            v15 -= 16;
          }
          while (v15);
          unsigned int v17 = v13 + v14;
        }
        else
        {
          unsigned int v17 = 0;
        }
        if (v17 <= 1) {
          unsigned int v17 = 1;
        }
        *(_DWORD *)(v9 + 4 * *(unsigned int *)(v5 + 192)) = v17;
        int v18 = -1;
      }
      else
      {
        uint64_t v10 = &v8[2 * v6];
        while (1)
        {
          uint64_t v12 = *v10;
          v10 += 2;
          uint64_t v11 = v12;
          if ((v12 & 6) == 0 && !*(_DWORD *)(v9 + 4 * *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 192))) {
            break;
          }
          LODWORD(v6) = v6 + 1;
          if (v7 == v6) {
            goto LABEL_8;
          }
        }
        *((_DWORD *)v4 - 2) = v6 + 1;
        if (v2 >= HIDWORD(v21)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v19 = (unint64_t *)&v3[16 * v2];
        *uint64_t v19 = v11 & 0xFFFFFFFFFFFFFFF8;
        v19[1] = 0;
        int v18 = 1;
      }
      unsigned int v2 = v21 + v18;
      LODWORD(v21) = v21 + v18;
    }
    while (v21);
    if (v20 != v22) {
      free(v20);
    }
  }
}

uint64_t sub_1CCF9F730(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8) {
    LODWORD(v6) = 1000;
  }
  else {
    uint64_t v6 = (v3 - *a1) >> 3;
  }
  if (v6 == 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = *(void *)(*a1 + 8 * v7);
      uint64_t v11 = *(void *)(*a1 + 8 * v9);
      unsigned int v12 = (*(unsigned __int16 *)(v10 + 228) >> 12) & 1;
      unsigned int v13 = (*(unsigned __int16 *)(v11 + 228) >> 12) & 1;
      BOOL v14 = v12 == v13;
      BOOL v15 = v12 < v13;
      if (v14) {
        BOOL v15 = sub_1CCF9F814(v10, v11, *a2);
      }
      if (v15) {
        unsigned int v7 = v9;
      }
      ++v9;
    }
    while (v6 != v9);
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    unint64_t v5 = (v3 - *a1) >> 3;
  }
  uint64_t result = *(void *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(void *)(v4 + 8 * v7) = *(void *)(v3 - 8);
    *(void *)(v3 - 8) = result;
    uint64_t v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

BOOL sub_1CCF9F814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_1EBCF99C8
    || (unsigned int v6 = (*(unsigned __int16 *)(a1 + 228) >> 6) & 1,
        unsigned int v7 = (*(unsigned __int16 *)(a2 + 228) >> 6) & 1,
        BOOL result = v6 < v7,
        v6 == v7))
  {
    uint64_t v9 = *(void *)a1;
    if (*(void *)a1)
    {
      unsigned int v10 = *(unsigned __int16 *)(v9 + 24);
      BOOL v26 = v10 > 0x31;
      uint64_t v11 = (1 << v10) & 0x2000000000B04;
      if (!v26 && v11 != 0) {
        goto LABEL_8;
      }
    }
    int v14 = *(_DWORD *)(a1 + 200);
    if (*(_DWORD *)(a1 + 204))
    {
      if (!v14)
      {
LABEL_8:
        unsigned int v13 = 0;
LABEL_15:
        uint64_t v15 = *(void *)a2;
        if (*(void *)a2)
        {
          unsigned int v16 = *(unsigned __int16 *)(v15 + 24);
          BOOL v26 = v16 > 0x31;
          uint64_t v17 = (1 << v16) & 0x2000000000B04;
          if (!v26 && v17 != 0) {
            goto LABEL_20;
          }
        }
        int v20 = *(_DWORD *)(a2 + 200);
        if (*(_DWORD *)(a2 + 204))
        {
          if (!v20)
          {
LABEL_20:
            unsigned int v19 = 0;
            goto LABEL_27;
          }
        }
        else if (v20)
        {
          unsigned int v19 = 0xFFFF;
          goto LABEL_27;
        }
        unsigned int v19 = *(_DWORD *)(*(void *)(a3 + 96) + 4 * *(unsigned int *)(a2 + 192));
LABEL_27:
        int v21 = *(unsigned __int16 *)(a1 + 228);
        int v22 = *(unsigned __int16 *)(a2 + 228);
        if ((v21 & 2) != 0 && (v22 & 4) != 0)
        {
          unsigned int v23 = *(unsigned __int16 *)(v15 + 58);
          BOOL v29 = v19 >= v23;
          unsigned int v24 = v19 - v23;
          if (v29) {
            unsigned int v19 = v24;
          }
          else {
            unsigned int v19 = 0;
          }
        }
        if ((v21 & 4) != 0 && (v22 & 2) != 0)
        {
          unsigned int v25 = *(unsigned __int16 *)(v9 + 58);
          BOOL v29 = v13 >= v25;
          v13 -= v25;
          if (!v29) {
            unsigned int v13 = 0;
          }
        }
        BOOL v26 = v13 > v19;
        if (v13 == v19)
        {
          if (((v22 | v21) & 2) != 0)
          {
            if (v9) {
              LODWORD(v9) = *(_DWORD *)(v9 + 60);
            }
            if (v15) {
              LODWORD(v15) = *(_DWORD *)(v15 + 60);
            }
            if (v9 != v15 && v15 | v9)
            {
              BOOL v29 = (int)v9 - 1 >= (v15 - 1);
              return !v29;
            }
          }
          unsigned int v27 = sub_1CCF9FB44(a1);
          unsigned int v28 = sub_1CCF9FB44(a2);
          BOOL v29 = v27 >= v28;
          if (v27 != v28) {
            return !v29;
          }
          uint64_t v30 = *(unsigned int *)(a1 + 40);
          if (v30)
          {
            unsigned int v31 = 0;
            unsigned int v32 = *(char **)(a1 + 32);
            uint64_t v33 = 16 * v30;
            do
            {
              char v34 = *v32;
              v32 += 16;
              if ((v34 & 6) == 0) {
                ++v31;
              }
              v33 -= 16;
            }
            while (v33);
          }
          else
          {
            unsigned int v31 = 0;
          }
          uint64_t v35 = *(unsigned int *)(a2 + 40);
          if (v35)
          {
            unsigned int v36 = 0;
            uint64_t v37 = *(char **)(a2 + 32);
            uint64_t v38 = 16 * v35;
            do
            {
              char v39 = *v37;
              v37 += 16;
              if ((v39 & 6) == 0) {
                ++v36;
              }
              v38 -= 16;
            }
            while (v38);
          }
          else
          {
            unsigned int v36 = 0;
          }
          BOOL v26 = v31 > v36;
          if (v31 == v36)
          {
            int v40 = *(unsigned __int16 *)(a1 + 228);
            if ((v40 & 2) == 0 || !v19)
            {
              int v41 = *(unsigned __int16 *)(a2 + 228);
              if (!v19 || (v41 & 2) == 0)
              {
                if (((v41 | v40) & 2) != 0 || byte_1EBCF96C8)
                {
                  if ((*(unsigned char *)(a1 + 236) & 2) == 0) {
                    llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
                  }
                  int v43 = *(_DWORD *)(a1 + 244);
                  if ((*(unsigned char *)(a2 + 236) & 2) == 0) {
                    llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
                  }
                  if (v43 != *(_DWORD *)(a2 + 244))
                  {
                    if ((*(unsigned char *)(a1 + 236) & 2) == 0) {
                      llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
                    }
                    unsigned int v46 = *(_DWORD *)(a1 + 244);
                    if ((*(unsigned char *)(a2 + 236) & 2) == 0) {
                      llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
                    }
                    return v46 > *(_DWORD *)(a2 + 244);
                  }
                  if ((*(unsigned char *)(a1 + 236) & 1) == 0) {
                    llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
                  }
                  int v44 = *(_DWORD *)(a1 + 240);
                  if ((*(unsigned char *)(a2 + 236) & 1) == 0) {
                    llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
                  }
                  if (v44 != *(_DWORD *)(a2 + 240))
                  {
                    if ((*(unsigned char *)(a1 + 236) & 1) == 0) {
                      llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
                    }
                    unsigned int v45 = *(_DWORD *)(a1 + 240);
                    if ((*(unsigned char *)(a2 + 236) & 1) == 0) {
                      llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
                    }
                    BOOL v29 = v45 >= *(_DWORD *)(a2 + 240);
                    return !v29;
                  }
                }
                else
                {
                  int v42 = sub_1CCF9FBE8(a1, a2, 0, a3);
                  BOOL result = v42 > 0;
                  if (v42) {
                    return result;
                  }
                }
              }
            }
            return *(_DWORD *)(a1 + 196) > *(_DWORD *)(a2 + 196);
          }
        }
        return v26;
      }
    }
    else if (v14)
    {
      unsigned int v13 = 0xFFFF;
      goto LABEL_15;
    }
    unsigned int v13 = *(_DWORD *)(*(void *)(a3 + 96) + 4 * *(unsigned int *)(a1 + 192));
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1CCF9FB44(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 120);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  uint64_t v4 = 16 * v1;
  do
  {
    uint64_t v5 = *v3;
    if ((*v3 & 6) == 0)
    {
      unsigned int v6 = (llvm::SUnit *)(v5 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((*(unsigned char *)((v5 & 0xFFFFFFFFFFFFFFF8) + 236) & 2) == 0)
      {
        llvm::SUnit::ComputeHeight(v6);
        unint64_t v7 = *v3 & 0xFFFFFFFFFFFFFFF8;
      }
      unsigned int v8 = *((_DWORD *)v6 + 61);
      if (*(void *)v7 && *(_WORD *)(*(void *)v7 + 24) == 49) {
        unsigned int v8 = sub_1CCF9FB44() + 1;
      }
      if (v8 <= v2) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = v8;
      }
    }
    v3 += 2;
    v4 -= 16;
  }
  while (v4);
  return v2;
}

uint64_t sub_1CCF9FBE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8 = sub_1CCF9FE1C(a1);
  int v9 = sub_1CCF9FE1C(a2);
  if ((*(unsigned char *)(a1 + 236) & 2) == 0) {
    llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
  }
  int v10 = *(_DWORD *)(a1 + 244);
  if ((*(unsigned char *)(a2 + 236) & 2) == 0) {
    llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
  }
  int v11 = v10 + v8;
  int v12 = *(_DWORD *)(a2 + 244) + v9;
  if (a3 && *(_DWORD *)(a1 + 232) != 4)
  {
    BOOL v13 = 0;
  }
  else if (*(_DWORD *)(a4 + 8) >= v11)
  {
    BOOL v13 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(a4 + 88) + 704) + 24))(*(void *)(*(void *)(a4 + 88) + 704), a1, 0) != 0;
    if (!a3) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v13 = 1;
    if (!a3) {
      goto LABEL_14;
    }
  }
  if (*(_DWORD *)(a2 + 232) != 4)
  {
    BOOL v14 = 0;
    if (v13) {
      goto LABEL_19;
    }
LABEL_16:
    if (v14) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_21;
  }
LABEL_14:
  if (*(_DWORD *)(a4 + 8) >= v12)
  {
    BOOL v14 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(a4 + 88) + 704) + 24))(*(void *)(*(void *)(a4 + 88) + 704), a2, 0) != 0;
    if (v13) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  BOOL v14 = 1;
  if (!v13) {
    goto LABEL_16;
  }
LABEL_19:
  if (!v14) {
    return 1;
  }
  BOOL v16 = v11 <= v12;
  if (v11 != v12) {
    goto LABEL_39;
  }
LABEL_21:
  if (a3 && *(_DWORD *)(a1 + 232) != 4 && *(_DWORD *)(a2 + 232) != 4) {
    return 0;
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a4 + 88) + 704) + 8)) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = v11 == v12;
  }
  if (!v17)
  {
    BOOL v16 = v11 <= v12;
LABEL_39:
    if (v16) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  if ((*(unsigned char *)(a1 + 236) & 1) == 0) {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
  }
  int v18 = *(_DWORD *)(a1 + 240) - v8;
  if ((*(unsigned char *)(a2 + 236) & 1) == 0) {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
  }
  int v19 = *(_DWORD *)(a2 + 240) - v9;
  if (v18 == v19)
  {
    unsigned int v20 = *(unsigned __int16 *)(a1 + 226);
    unsigned int v21 = *(unsigned __int16 *)(a2 + 226);
    if (v20 == v21) {
      return 0;
    }
    if (v20 > v21) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (v18 < v19)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1CCF9FE1C(uint64_t a1)
{
  if (*(_WORD *)(a1 + 228)) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = 16 * v1;
  while (1)
  {
    if ((*v2 & 6) == 0)
    {
      uint64_t v4 = (_WORD *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      if ((v4[114] & 1) != 0 && *(_WORD *)(*(void *)v4 + 24) == 50) {
        break;
      }
    }
    v2 += 2;
    v3 -= 16;
    if (!v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CCF9FE78(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v9 = *(unsigned __int8 *)(result + 24);
  if (v9 != 174)
  {
    *a5 = *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440))(a2, v9)
                              + 24);
    BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 448))(a2, v9);
    *a6 = result;
    return result;
  }
  uint64_t v10 = *(void *)(result + 8);
  int v11 = *(unsigned __int16 *)(v10 + 24);
  if (v11 == 65517)
  {
    uint64_t v14 = *(void *)(**(void **)(v10 + 32) + 80);
    uint64_t v15 = (unsigned int *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u) {
      uint64_t v15 = *(unsigned int **)v15;
    }
    int v12 = *(uint64_t **)(*(void *)(a4 + 240) + 8 * *v15);
  }
  else
  {
    if (v11 != 50)
    {
      uint64_t v17 = *a3;
      int v18 = (long long *)(a3[1] + 48 * (__int16)~(_WORD)v11);
      uint64_t v19 = (*(_DWORD *)(result + 16) - 1);
      long long v20 = v18[2];
      long long v21 = *v18;
      v22[1] = v18[1];
      v22[2] = v20;
      v22[0] = v21;
      BOOL result = (*(uint64_t (**)(uint64_t *, _OWORD *, uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, v22, v19, a4, a7);
      uint64_t v16 = *(void *)result;
      goto LABEL_11;
    }
    int v12 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a7 + 40) + 24)
                                + 16 * (*(_DWORD *)(*(void *)(*(void *)(v10 + 32) + 40) + 76) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v16 = *v12;
LABEL_11:
  *a5 = *(unsigned __int16 *)(v16 + 24);
  *a6 = 1;
  return result;
}

void *sub_1CCFA0030(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1CCFA00B0(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFA0150()
{
  return 1;
}

uint64_t sub_1CCFA0158()
{
  return 0;
}

uint64_t sub_1CCFA0160(void *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v2 = a1 + 2;
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = sub_1CCFA035C(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1CCFA0198(void *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[2];
  uint64_t v2 = (unsigned char *)a1[3];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v2 - v3);
    int v8 = &v7[8 * (v4 >> 3)];
    uint64_t v16 = v7;
    int v18 = v8;
    memmove(v7, v3, v4);
    uint64_t v17 = v8;
    uint64_t v15 = a1[21];
    do
    {
      uint64_t v9 = sub_1CCFA035C((uint64_t *)&v16, &v15);
      uint64_t v10 = llvm::dbgs((llvm *)v9);
      int v11 = v10;
      int v12 = (_DWORD *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *int v12 = 1734960456;
        *((void *)v10 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(unsigned char *)(v9 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      }
      sub_1CD098D14(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      BOOL v13 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v13 > 1uLL)
      {
        _WORD *v13 = 8250;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
      uint64_t v14 = v16;
    }
    while (v16 != v17);
    if (v16)
    {
      operator delete(v14);
    }
  }
}

uint64_t sub_1CCFA035C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8) {
    LODWORD(v6) = 1000;
  }
  else {
    uint64_t v6 = (v3 - *a1) >> 3;
  }
  if (v6 == 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = *(void *)(*a1 + 8 * v7);
      uint64_t v11 = *(void *)(*a1 + 8 * v9);
      unsigned int v12 = (*(unsigned __int16 *)(v10 + 228) >> 12) & 1;
      unsigned int v13 = (*(unsigned __int16 *)(v11 + 228) >> 12) & 1;
      BOOL v14 = v12 == v13;
      BOOL v15 = v12 < v13;
      if (v14)
      {
        uint64_t v16 = *(void *)v10;
        if (*(void *)v10) {
          LODWORD(v16) = *(_DWORD *)(v16 + 60);
        }
        uint64_t v17 = *(void *)v11;
        if (*(void *)v11) {
          LODWORD(v17) = *(_DWORD *)(v17 + 60);
        }
        if (v16 == v17 || !(v17 | v16)) {
          BOOL v15 = sub_1CCF9F814(v10, v11, *a2);
        }
        else {
          BOOL v15 = (int)v16 - 1 < (v17 - 1);
        }
      }
      if (v15) {
        unsigned int v7 = v9;
      }
      ++v9;
    }
    while (v6 != v9);
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    unint64_t v5 = (v3 - *a1) >> 3;
  }
  uint64_t result = *(void *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(void *)(v4 + 8 * v7) = *(void *)(v3 - 8);
    *(void *)(v3 - 8) = result;
    uint64_t v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

void *sub_1CCFA047C(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1CCFA04FC(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFA059C()
{
  return 1;
}

uint64_t sub_1CCFA05A4()
{
  return 0;
}

uint64_t sub_1CCFA05AC(void *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v2 = a1 + 2;
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = sub_1CCFA07A8(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1CCFA05E4(void *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[2];
  uint64_t v2 = (unsigned char *)a1[3];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    unsigned int v7 = (char *)operator new(v2 - v3);
    int v8 = &v7[8 * (v4 >> 3)];
    uint64_t v16 = v7;
    int v18 = v8;
    memmove(v7, v3, v4);
    uint64_t v17 = v8;
    uint64_t v15 = a1[21];
    do
    {
      uint64_t v9 = sub_1CCFA07A8((uint64_t *)&v16, &v15);
      uint64_t v10 = llvm::dbgs((llvm *)v9);
      uint64_t v11 = v10;
      unsigned int v12 = (_DWORD *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *unsigned int v12 = 1734960456;
        *((void *)v10 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(unsigned char *)(v9 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      }
      sub_1CD098D14(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      unsigned int v13 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v13 > 1uLL)
      {
        _WORD *v13 = 8250;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
      BOOL v14 = v16;
    }
    while (v16 != v17);
    if (v16)
    {
      operator delete(v14);
    }
  }
}

uint64_t sub_1CCFA07A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8) {
    LODWORD(v6) = 1000;
  }
  else {
    uint64_t v6 = (v3 - *a1) >> 3;
  }
  if (v6 == 1)
  {
    unsigned int v7 = 0;
    goto LABEL_24;
  }
  unsigned int v7 = 0;
  uint64_t v9 = 1;
  do
  {
    uint64_t v10 = *(void *)(*a1 + 8 * v7);
    uint64_t v11 = *(void *)(*a1 + 8 * v9);
    unsigned int v12 = *(unsigned __int16 *)(v10 + 228);
    unsigned int v13 = *(unsigned __int16 *)(v11 + 228);
    unsigned int v14 = (v12 >> 12) & 1;
    unsigned int v15 = (v13 >> 12) & 1;
    BOOL v20 = v14 == v15;
    BOOL v16 = v14 < v15;
    if (!v20)
    {
LABEL_17:
      if (!v16) {
        goto LABEL_19;
      }
LABEL_18:
      unsigned int v7 = v9;
      goto LABEL_19;
    }
    uint64_t v17 = *a2;
    if (((v13 | v12) & 2) == 0)
    {
      int v18 = sub_1CCFA0910(*a2, *(void *)(*a1 + 8 * v7));
      int v19 = sub_1CCFA0910(*a2, v11);
      if (v18) {
        BOOL v20 = v19 == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20) {
        goto LABEL_18;
      }
      if ((v18 | v19 ^ 1) != 1) {
        goto LABEL_19;
      }
      if (((v18 | v19) & 1) == 0)
      {
        int v21 = sub_1CCF9FBE8(v10, v11, 1, *a2);
        BOOL v16 = v21 > 0;
        if (v21) {
          goto LABEL_17;
        }
      }
      uint64_t v17 = *a2;
    }
    if (sub_1CCF9F814(v10, v11, v17)) {
      goto LABEL_18;
    }
LABEL_19:
    ++v9;
  }
  while (v6 != v9);
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
LABEL_24:
  uint64_t result = *(void *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(void *)(v4 + 8 * v7) = *(void *)(v3 - 8);
    *(void *)(v3 - 8) = result;
    uint64_t v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

uint64_t sub_1CCFA0910(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80))
  {
    uint64_t v2 = *(unsigned int *)(a2 + 40);
    if (v2)
    {
      uint64_t v4 = *(uint64_t **)(a2 + 32);
      unint64_t v5 = &v4[2 * v2];
      do
      {
        uint64_t v6 = *v4;
        if ((*v4 & 6) == 0 && *(_WORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 224))
        {
          sub_1CD7D515C((uint64_t)v9, (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8), *(void *)(a1 + 88));
          while (v10)
          {
            uint64_t v8 = 0;
            sub_1CCF9FE78((uint64_t)v9, *(void *)(a1 + 80), *(uint64_t **)(a1 + 64), *(void *)(a1 + 72), (_DWORD *)&v8 + 1, &v8, *(void *)(a1 + 56));
            if ((v8 + *(_DWORD *)(*(void *)(a1 + 120) + 4 * HIDWORD(v8))) >= *(_DWORD *)(*(void *)(a1 + 144) + 4 * HIDWORD(v8))) {
              return 1;
            }
            sub_1CD7D5090((uint64_t)v9);
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
  return 0;
}

void *sub_1CCFA09E8(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1CCFA0A68(void *a1)
{
  *a1 = &unk_1F2641D48;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFA0B08()
{
  return 1;
}

uint64_t sub_1CCFA0B10()
{
  return 0;
}

uint64_t sub_1CCFA0B18(void *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v2 = a1 + 2;
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = sub_1CCFA0D14(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1CCFA0B50(void *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[2];
  uint64_t v2 = (unsigned char *)a1[3];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    unsigned int v7 = (char *)operator new(v2 - v3);
    uint64_t v8 = &v7[8 * (v4 >> 3)];
    BOOL v16 = v7;
    int v18 = v8;
    memmove(v7, v3, v4);
    uint64_t v17 = v8;
    uint64_t v15 = a1[21];
    do
    {
      uint64_t v9 = sub_1CCFA0D14((uint64_t *)&v16, &v15);
      uint64_t v10 = llvm::dbgs((llvm *)v9);
      uint64_t v11 = v10;
      unsigned int v12 = (_DWORD *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *unsigned int v12 = 1734960456;
        *((void *)v10 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(unsigned char *)(v9 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      }
      sub_1CD098D14(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      unsigned int v13 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v13 > 1uLL)
      {
        _WORD *v13 = 8250;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
      unsigned int v14 = v16;
    }
    while (v16 != v17);
    if (v16)
    {
      operator delete(v14);
    }
  }
}

uint64_t sub_1CCFA0D14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8) {
    LODWORD(v6) = 1000;
  }
  else {
    uint64_t v6 = (v3 - *a1) >> 3;
  }
  if (v6 == 1)
  {
    unsigned int v7 = 0;
    goto LABEL_93;
  }
  unsigned int v7 = 0;
  uint64_t v9 = 1;
  do
  {
    uint64_t v10 = *(void *)(*a1 + 8 * v7);
    uint64_t v11 = *(void *)(*a1 + 8 * v9);
    unsigned int v12 = *(unsigned __int16 *)(v10 + 228);
    unsigned int v13 = *(unsigned __int16 *)(v11 + 228);
    unsigned int v14 = (v12 >> 12) & 1;
    unsigned int v15 = (v13 >> 12) & 1;
    BOOL v16 = v14 < v15;
    if (v14 != v15) {
      goto LABEL_73;
    }
    if (((v13 | v12) & 2) != 0)
    {
LABEL_72:
      BOOL v16 = sub_1CCF9F814(v10, v11, *a2);
      goto LABEL_73;
    }
    uint64_t v38 = 0;
    if (byte_1EBCF9788) {
      BOOL v17 = byte_1EBCF9848 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      int v18 = sub_1CCFA1154(*a2, (uint64_t *)v10, (_DWORD *)&v38 + 1);
      int v19 = sub_1CCFA1154(*a2, (uint64_t *)v11, &v38);
      if (!byte_1EBCF9788 && v18 != v19)
      {
        BOOL v16 = v18 > v19;
        goto LABEL_73;
      }
      if (!byte_1EBCF9788)
      {
        BOOL v20 = v18 <= 0 && v19 < 1;
        if (!v20)
        {
          BOOL v22 = *(void *)v10
             && (unsigned int v21 = *(unsigned __int16 *)(*(void *)v10 + 24) - 2, v21 < 0x30)
             && ((0x8000000002C1uLL >> v21) & 1) != 0
             || !*(_DWORD *)(v10 + 200) && *(_DWORD *)(v10 + 204);
          if (*(void *)v11
            && ((unsigned int v23 = *(unsigned __int16 *)(*(void *)v11 + 24),
                 BOOL v20 = v23 > 0x31,
                 uint64_t v24 = (1 << v23) & 0x2000000000B04,
                 !v20)
              ? (BOOL v25 = v24 == 0)
              : (BOOL v25 = 1),
                !v25)
            || !*(_DWORD *)(v11 + 200) && *(_DWORD *)(v11 + 204))
          {
            if (!v22)
            {
              BOOL v16 = 1;
              goto LABEL_73;
            }
          }
          else if (v22)
          {
            BOOL v16 = 0;
            goto LABEL_73;
          }
        }
      }
      if (!byte_1EBCF9848)
      {
        BOOL v26 = HIDWORD(v38) >= v38;
        if (HIDWORD(v38) != v38) {
          goto LABEL_56;
        }
      }
    }
    if (!byte_1EBCF9A88)
    {
      if ((*(unsigned char *)(v10 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
      }
      if (*(_DWORD *)(*a2 + 8) >= *(_DWORD *)(v10 + 244))
      {
        uint64_t v34 = *(void *)(*(void *)(*a2 + 88) + 704);
        BOOL v33 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v34 + 24))(v34, v10, 0) != 0;
      }
      else
      {
        BOOL v33 = 1;
      }
      if ((*(unsigned char *)(v11 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
      }
      if (*(_DWORD *)(*a2 + 8) >= *(_DWORD *)(v11 + 244))
      {
        uint64_t v35 = *(void *)(*(void *)(*a2 + 88) + 704);
        if (v33 != ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v35 + 24))(v35, v11, 0) != 0)) {
          goto LABEL_88;
        }
      }
      else if (!v33)
      {
        goto LABEL_88;
      }
    }
    if (!byte_1EBCF9B48)
    {
      if ((*(unsigned char *)(v10 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v10);
      }
      int v27 = *(_DWORD *)(v10 + 240);
      if ((*(unsigned char *)(v11 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v11);
      }
      int v28 = v27 - *(_DWORD *)(v11 + 240);
      if (v28 < 0) {
        int v28 = *(_DWORD *)(v11 + 240) - v27;
      }
      if (v28 > dword_1EBCF9D88)
      {
        if ((*(unsigned char *)(v10 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v10);
        }
        unsigned int v29 = *(_DWORD *)(v10 + 240);
        if ((*(unsigned char *)(v11 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v11);
        }
        BOOL v26 = v29 >= *(_DWORD *)(v11 + 240);
LABEL_56:
        BOOL v16 = !v26;
        goto LABEL_73;
      }
    }
    if (byte_1EBCF9C08) {
      goto LABEL_72;
    }
    if ((*(unsigned char *)(v10 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    }
    int v30 = *(_DWORD *)(v10 + 244);
    if ((*(unsigned char *)(v11 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    }
    if (v30 == *(_DWORD *)(v11 + 244)) {
      goto LABEL_72;
    }
    if ((*(unsigned char *)(v10 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    }
    int v31 = *(_DWORD *)(v10 + 244);
    if ((*(unsigned char *)(v11 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    }
    int v32 = v31 - *(_DWORD *)(v11 + 244);
    if (v32 < 0) {
      int v32 = *(_DWORD *)(v11 + 244) - v31;
    }
    if (v32 <= dword_1EBCF9D88) {
      goto LABEL_72;
    }
LABEL_88:
    if ((*(unsigned char *)(v10 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    }
    unsigned int v36 = *(_DWORD *)(v10 + 244);
    if ((*(unsigned char *)(v11 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    }
    BOOL v16 = v36 > *(_DWORD *)(v11 + 244);
LABEL_73:
    if (v16) {
      unsigned int v7 = v9;
    }
    ++v9;
  }
  while (v6 != v9);
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
LABEL_93:
  uint64_t result = *(void *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(void *)(v4 + 8 * v7) = *(void *)(v3 - 8);
    *(void *)(v3 - 8) = result;
    uint64_t v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

uint64_t sub_1CCFA1154(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v5 = *((unsigned int *)a2 + 10);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)a2[4];
    uint64_t v9 = &v8[2 * v5];
    do
    {
      uint64_t v10 = *v8;
      if ((*v8 & 6) == 0)
      {
        uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if (*(_WORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 224))
        {
          sub_1CD7D515C((uint64_t)v21, v11, *(void *)(a1 + 88));
          while (v21[1])
          {
            uint64_t v12 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 80) + 440))(*(void *)(a1 + 80), v22);
            if (*(_DWORD *)(*(void *)(a1 + 120) + 4 * *(unsigned __int16 *)(*(void *)v12 + 24)) < *(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(void *)v12 + 24))) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = (v7 + 1);
            }
            sub_1CD7D5090((uint64_t)v21);
          }
        }
        else if (*(__int16 *)(*v11 + 24) < 0)
        {
          ++*a3;
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v13 = *a2;
  if (*a2)
  {
    int v14 = *(__int16 *)(v13 + 24);
    if (v14 < 0)
    {
      if (*((_DWORD *)a2 + 51))
      {
        uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8) + 48 * (unsigned __int16)~(_WORD)v14;
        uint64_t v17 = *(unsigned __int8 *)(v16 + 4);
        if (*(unsigned char *)(v16 + 4))
        {
          uint64_t v18 = 0;
          do
          {
            uint64_t v19 = *(void *)(v13 + 48);
            if (v19)
            {
              while (*(_DWORD *)(v19 + 8) != v18)
              {
                uint64_t v19 = *(void *)(v19 + 32);
                if (!v19) {
                  goto LABEL_27;
                }
              }
              uint64_t v20 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 80) + 440))(*(void *)(a1 + 80), *(unsigned __int8 *)(*(void *)(v13 + 40) + 16 * v18));
              uint64_t v7 = v7
                 - (*(_DWORD *)(*(void *)(a1 + 120) + 4 * *(unsigned __int16 *)(*(void *)v20 + 24)) >= *(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(void *)v20 + 24)));
            }
LABEL_27:
            ++v18;
          }
          while (v18 != v17);
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1CCFA1334()
{
  qword_1EBCF9588 = 0;
  unk_1EBCF9590 = "list-burr";
  qword_1EBCF9598 = 9;
  unk_1EBCF95A0 = "Bottom-up register reduction list scheduling";
  qword_1EBCF95A8 = 44;
  unk_1EBCF95B0 = sub_1CD7D3C6C;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF9588);
  __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF9588, &dword_1CB82C000);
  qword_1EBCF95B8 = 0;
  qword_1EBCF95C0 = (uint64_t)"source";
  unk_1EBCF95C8 = 6;
  qword_1EBCF95D0 = (uint64_t)"Similar to list-burr but schedules in source order when possible";
  unk_1EBCF95D8 = 64;
  qword_1EBCF95E0 = (uint64_t)sub_1CD7D3D8C;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF95B8);
  __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF95B8, &dword_1CB82C000);
  qword_1EBCF95E8 = 0;
  qword_1EBCF95F0 = (uint64_t)"list-hybrid";
  unk_1EBCF95F8 = 11;
  qword_1EBCF9600 = (uint64_t)"Bottom-up register pressure aware list scheduling which tries to balance latency and register pressure";
  unk_1EBCF9608 = 102;
  qword_1EBCF9610 = (uint64_t)sub_1CD7D3EB4;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF95E8);
  __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF95E8, &dword_1CB82C000);
  qword_1EBCF9618 = 0;
  unk_1EBCF9620 = "list-ilp";
  qword_1EBCF9628 = 8;
  qword_1EBCF9630 = (uint64_t)"Bottom-up register pressure aware list scheduling which tries to balance ILP and register pressure";
  unk_1EBCF9638 = 98;
  qword_1EBCF9640 = (uint64_t)sub_1CD7D3FC4;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF9618);
  __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF9618, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable cycle-level precision during preRA scheduling";
  v1.n128_u64[1] = 53;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9648, "disable-sched-cycles", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9648, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable regpressure priority in sched=list-ilp";
  v1.n128_u64[1] = 46;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9708, "disable-sched-reg-pressure", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9708, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable live use priority in sched=list-ilp";
  v1.n128_u64[1] = 43;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF97C8, "disable-sched-live-uses", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF97C8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable virtual register cycle interference checks";
  v1.n128_u64[1] = 50;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9888, "disable-sched-vrcycle", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9888, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable physreg def-use affinity";
  v1.n128_u64[1] = 32;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9948, "disable-sched-physreg-join", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9948, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable no-stall priority in sched=list-ilp";
  v1.n128_u64[1] = 43;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9A08, "disable-sched-stalls", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9A08, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable critical path priority in sched=list-ilp";
  v1.n128_u64[1] = 48;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9AC8, "disable-sched-critical-path", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9AC8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable scheduled-height priority in sched=list-ilp";
  v1.n128_u64[1] = 51;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9B88, "disable-sched-height", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9B88, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable scheduler's two-address hack";
  v1.n128_u64[1] = 36;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCF9C48, "disable-2addr-hack", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF9C48, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 6;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Number of instructions to allow ahead of the critical path in sched=list-ilp";
  v1.n128_u64[1] = 76;
  sub_1CD4954D8((llvm::cl::Option *)&unk_1EBCF9D08, "max-sched-reorder", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCF9D08, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Average inst/cycle whan no target itinerary exists.";
  v1.n128_u64[1] = 51;
  sub_1CD7D40D4(&v4, &v3, (long long *)&v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCF9DC8, &dword_1CB82C000);
}

void sub_1CCFA1838(uint64_t a1, uint64_t a2)
{
  v64[4] = *MEMORY[0x1E4F143B8];
  int v2 = (unsigned int *)(*(void *)(a2 + 32) + 40 * (*(unsigned __int16 *)(a2 + 56) - 1));
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = v2[2];
  if (*(unsigned char *)(*(void *)(*(void *)v2 + 40) + 16 * v4) == 1)
  {
    uint64_t v54 = v58;
    unsigned int v55 = v58;
    uint64_t v56 = 16;
    int v57 = 0;
    uint64_t v62 = v64;
    uint64_t v63 = 0x400000000;
    v52[0] = 0;
    v52[1] = 0;
    int v53 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
    unsigned int v8 = (__int16)~*(_WORD *)(a2 + 24);
    uint64_t v9 = *(unsigned __int16 *)(v7 + 48 * v8 + 2);
    if (*(_WORD *)(v7 + 48 * v8 + 2))
    {
      uint64_t v10 = (__int16 *)(*(void *)(v7 + 48 * v8 + 40) + 4);
      do
      {
        __int16 v11 = *v10;
        v10 += 3;
        if (v11) {
          goto LABEL_67;
        }
        --v9;
      }
      while (v9);
    }
    uint64_t v12 = *(void *)(v3 + 48);
    if (v12)
    {
      char v13 = 0;
      int v14 = 0;
      uint64_t v15 = a2;
      while (1)
      {
        if (*(_DWORD *)(v12 + 8) == v4)
        {
          uint64_t v16 = *(void *)(v12 + 16);
          if (v16 != a2) {
            break;
          }
        }
LABEL_44:
        uint64_t v12 = *(void *)(v12 + 32);
        if (v12)
        {
          if (++v14 < 0x64) {
            continue;
          }
        }
        if (v13)
        {
          uint64_t v37 = v62;
          if (v63 >= 2)
          {
            qsort(v62, v63, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CCFA3848);
            uint64_t v37 = v62;
          }
          uint64_t v59 = (uint64_t *)v61;
          uint64_t v60 = 0x400000000;
          uint64_t v48 = *v37;
          uint64_t v38 = sub_1CD7D6010((uint64_t)v52, &v48)[1];
          if (v60 >= HIDWORD(v60)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v59[v60] = v38;
          LODWORD(v60) = v60 + 1;
          int v39 = v63 - 1;
          if (v63 != 1)
          {
            uint64_t v40 = 0;
            while (1)
            {
              uint64_t v51 = v62[v40 + 1];
              uint64_t v41 = sub_1CD7D6010((uint64_t)v52, &v51)[1];
              if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 672))()) {
                break;
              }
              if (v60 >= (unint64_t)HIDWORD(v60)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              ++v40;
              v59[v60] = v41;
              LODWORD(v60) = v60 + 1;
              if (v39 == v40) {
                goto LABEL_83;
              }
            }
            int v39 = v40;
LABEL_83:
            if (v39)
            {
              uint64_t v42 = *v59;
              if (sub_1CCFA1EF0(*v59, 0, 0, 1, *(uint64_t **)(a1 + 624)))
              {
                uint64_t v43 = *(unsigned __int16 *)(v42 + 58) - 1;
              }
              else
              {
                uint64_t v42 = 0;
                uint64_t v43 = 0;
              }
              int v44 = v60;
              if (v60 != 1)
              {
                unint64_t v45 = (v60 - 1);
                unint64_t v46 = 1;
                do
                {
                  uint64_t v47 = v59[v46];
                  if (sub_1CCFA1EF0(v47, v42, v43, v46 < v45, *(uint64_t **)(a1 + 624)))
                  {
                    if (v46 < v45)
                    {
                      uint64_t v43 = *(unsigned __int16 *)(v47 + 58) - 1;
                      uint64_t v42 = v47;
                    }
                  }
                  else if (v46 >= v45 && v42)
                  {
                    sub_1CCFA3194(v42, *(uint64_t **)(a1 + 624), *(uint64_t **)(v42 + 40), *(unsigned __int16 *)(v42 + 58) - 1, 0, 0);
                  }
                  ++v46;
                }
                while (v44 != v46);
              }
            }
          }
          if (v59 != (uint64_t *)v61) {
            free(v59);
          }
        }
        goto LABEL_67;
      }
      uint64_t v17 = v55;
      uint64_t v18 = HIDWORD(v56);
      if (v55 == v54)
      {
        if (HIDWORD(v56))
        {
          uint64_t v19 = 0;
          uint64_t v20 = 8 * HIDWORD(v56);
          unsigned int v21 = (uint64_t *)v55;
          while (*v21 != v16)
          {
            if (*v21 == -2) {
              uint64_t v19 = v21;
            }
            ++v21;
            v20 -= 8;
            if (!v20)
            {
              if (!v19) {
                goto LABEL_18;
              }
              *uint64_t v19 = v16;
              --v57;
              goto LABEL_42;
            }
          }
          goto LABEL_44;
        }
LABEL_18:
        unsigned int v22 = v56;
        if (HIDWORD(v56) < v56)
        {
          ++HIDWORD(v56);
          *(void *)&v55[8 * v18] = v16;
LABEL_42:
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t *))(**(void **)(a1 + 16)
                                                                                              + 664))(*(void *)(a1 + 16), v15, v16, &v51, &v50)&& v51 != v50)
          {
            uint64_t v32 = *(void *)(*(void *)(a1 + 16) + 8);
            unsigned int v33 = (__int16)~*(_WORD *)(v16 + 24);
            uint64_t v34 = *(unsigned __int16 *)(v32 + 48 * v33 + 2);
            if (*(_WORD *)(v32 + 48 * v33 + 2))
            {
              uint64_t v35 = (__int16 *)(*(void *)(v32 + 48 * v33 + 40) + 4);
              while (1)
              {
                __int16 v36 = *v35;
                v35 += 3;
                if (v36) {
                  break;
                }
                if (!--v34) {
                  goto LABEL_51;
                }
              }
            }
            else
            {
LABEL_51:
              uint64_t v48 = v51;
              uint64_t v49 = v15;
              sub_1CD7D5BF8((uint64_t)&v59, (uint64_t)v52, &v48, &v49);
              if (v61[0])
              {
                if (v63 >= (unint64_t)HIDWORD(v63)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v62[v63] = v51;
                LODWORD(v63) = v63 + 1;
              }
              uint64_t v48 = v50;
              uint64_t v49 = v16;
              sub_1CD7D5BF8((uint64_t)&v59, (uint64_t)v52, &v48, &v49);
              if (v63 >= (unint64_t)HIDWORD(v63)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v14 = 0;
              v62[v63] = v50;
              LODWORD(v63) = v63 + 1;
              if (v50 < v51) {
                uint64_t v15 = v16;
              }
              char v13 = 1;
            }
          }
          goto LABEL_44;
        }
      }
      else
      {
        unsigned int v22 = v56;
      }
      if (3 * v22 <= 4 * (HIDWORD(v56) - v57))
      {
        if (v22 >= 0x40) {
          v22 *= 2;
        }
        else {
          unsigned int v22 = 128;
        }
      }
      else if (v22 - HIDWORD(v56) >= v22 >> 3)
      {
LABEL_23:
        unsigned int v23 = v22 - 1;
        unsigned int v24 = (v22 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        BOOL v25 = &v17[8 * v24];
        uint64_t v26 = *(void *)v25;
        if (*(void *)v25 != -1)
        {
          int v27 = 0;
          int v28 = 1;
          while (v26 != v16)
          {
            if (v27) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v26 == -2;
            }
            if (v29) {
              int v27 = (uint64_t *)v25;
            }
            unsigned int v30 = v24 + v28++;
            unsigned int v24 = v30 & v23;
            BOOL v25 = &v17[8 * (v30 & v23)];
            uint64_t v26 = *(void *)v25;
            if (*(void *)v25 == -1) {
              goto LABEL_35;
            }
          }
          goto LABEL_44;
        }
        int v27 = 0;
LABEL_35:
        if (v27) {
          int v31 = v27;
        }
        else {
          int v31 = (uint64_t *)v25;
        }
        if (*v31 == v16) {
          goto LABEL_44;
        }
        if (*v31 == -2) {
          --v57;
        }
        else {
          ++HIDWORD(v56);
        }
        *int v31 = v16;
        goto LABEL_42;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v54, v22);
      unsigned int v22 = v56;
      uint64_t v17 = v55;
      goto LABEL_23;
    }
LABEL_67:
    MEMORY[0x1D25D9CD0](v52[0], 8);
    if (v62 != v64) {
      free(v62);
    }
    if (v55 != v54) {
      free(v55);
    }
  }
}

uint64_t sub_1CCFA1EF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  if (a2 == a1) {
    return 0;
  }
  if (a2)
  {
    uint64_t v10 = (unsigned int *)(*(void *)(a1 + 32) + 40 * (*(unsigned __int16 *)(a1 + 56) - 1));
    if (*(unsigned __int8 *)(*(void *)(*(void *)v10 + 40) + 16 * v10[2]) == 172) {
      return 0;
    }
  }
  uint64_t v11 = *(unsigned __int16 *)(a1 + 58);
  uint64_t v12 = *(unsigned char **)(a1 + 40);
  if (v12[16 * (v11 - 1)] == 172) {
    return 0;
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x400000000;
  sub_1CD3D61B4((unsigned int *)&v15, v12, &v12[16 * v11]);
  unsigned int v14 = v16;
  if (a4)
  {
    if (v16 >= HIDWORD(v16)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v15 + v16) = xmmword_1CFB2D760;
    unsigned int v14 = v16 + 1;
    LODWORD(v16) = v16 + 1;
  }
  sub_1CCFA3194(a1, a5, (uint64_t *)v15, v14, a2, a3);
  if (v15 != v17) {
    free(v15);
  }
  return 1;
}

llvm::MachineBasicBlock *sub_1CCFA2064(uint64_t a1, uint64_t *a2)
{
  v173[64] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 616;
  sub_1CCF72E88(v161, (uint64_t)a2, *(void *)(a1 + 616), *a2, *(unsigned char *)(*(void *)(a1 + 624) + 650));
  v159[0] = 0;
  v159[1] = 0;
  int v160 = 0;
  v157[0] = 0;
  v157[1] = 0;
  int v158 = 0;
  v170[1] = 0;
  BOOL v171 = v173;
  v4.n128_u64[0] = 0x2000000000;
  uint64_t v172 = 0x2000000000;
  v167[0] = v168;
  v167[1] = (void *)0x800000000;
  unint64_t v169 = v170;
  v170[0] = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 624) + 616);
  if (*(_DWORD *)(v5 + 104) || *(_DWORD *)(v5 + 376))
  {
    uint64_t v155 = a1;
    uint64_t v156 = (llvm::MachineBasicBlock **)v161;
  }
  else
  {
    int v58 = *(_DWORD *)(v5 + 648);
    uint64_t v155 = a1;
    uint64_t v156 = (llvm::MachineBasicBlock **)v161;
    if (!v58)
    {
      int v6 = 0;
      goto LABEL_6;
    }
  }
  if (*(void *)(*(void *)(*(void *)v3 + 32) + 328) == *(void *)v3
    && (uint64_t v36 = *(unsigned int *)(v5 + 376), v36))
  {
    uint64_t v37 = *(uint64_t **)(v5 + 368);
    uint64_t v38 = &v37[v36];
    int v6 = 1;
    do
    {
      int v39 = sub_1CD78D88C((uint64_t)v161, *v37, v159);
      if (v39)
      {
        unint64_t v40 = (unint64_t)v39;
        uint64_t v41 = (void *)*a2;
        uint64_t v42 = *(void *)(*(void *)v3 + 40);
        *((void *)v39 + 3) = v42;
        uint64_t v43 = *(void *)(v42 + 32);
        uint64_t v44 = *((unsigned int *)v39 + 10);
        if (v44)
        {
          uint64_t v47 = *((void *)v39 + 4);
          uint64_t v48 = *(void *)(v43 + 40);
          uint64_t v49 = 32 * v44;
          do
          {
            if (!*(unsigned char *)v47)
            {
              uint64_t v50 = *(unsigned int *)(v47 + 4);
              if ((int)v50 >= 0) {
                uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
              }
              else {
                uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
              }
              uint64_t v52 = *v51;
              if (*v51)
              {
                uint64_t v53 = *(void *)(v52 + 16);
                *(void *)(v52 + 16) = v47;
                *(void *)(v47 + 16) = v53;
                if (*(unsigned char *)(v47 + 3))
                {
                  *(void *)(v47 + 24) = v52;
                }
                else
                {
                  *(void *)(v47 + 24) = 0;
                  uint64_t v51 = (uint64_t *)(v53 + 24);
                }
              }
              else
              {
                *(void *)(v47 + 16) = v47;
                *(void *)(v47 + 24) = 0;
              }
              uint64_t *v51 = v47;
            }
            v47 += 32;
            v49 -= 32;
          }
          while (v49);
        }
        uint64_t v45 = *(void *)(v43 + 728);
        if (v45) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v45 + 24))(v45, v40);
        }
        unint64_t v46 = *v41 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v40 = v46 | *(void *)v40 & 7;
        *(void *)(v40 + 8) = v41;
        *(void *)(v46 + 8) = v40;
        *uint64_t v41 = *v41 & 7 | v40;
        *(unsigned char *)(*v37 + 63) = 0;
      }
      ++v37;
    }
    while (v37 != v38);
  }
  else
  {
    int v6 = 1;
  }
LABEL_6:
  uint64_t v151 = v3;
  uint64_t v7 = *(uint64_t **)(a1 + 640);
  for (uint64_t i = *(uint64_t **)(a1 + 648); v7 != i; ++v7)
  {
    uint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v9 = *(void *)v8;
      if (*(void *)v8)
      {
        uint64_t v164 = v166;
        uint64_t v165 = 0x400000000;
        if (*(_WORD *)(v9 + 56))
        {
          uint64_t v10 = (unsigned int *)(*(void *)(v9 + 32) + 40 * (*(unsigned __int16 *)(v9 + 56) - 1));
          uint64_t v11 = *(void *)v10;
          if (*(unsigned __int8 *)(*(void *)(*(void *)v10 + 40) + 16 * v10[2]) == 172)
          {
            unsigned int v12 = 0;
            do
            {
              if (v12 >= HIDWORD(v165)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v164 + v12) = v11;
              unsigned int v12 = v165 + 1;
              LODWORD(v165) = v165 + 1;
              if (!*(_WORD *)(v11 + 56)) {
                break;
              }
              char v13 = (unsigned int *)(*(void *)(v11 + 32) + 40 * (*(unsigned __int16 *)(v11 + 56) - 1));
              uint64_t v11 = *(void *)v13;
            }
            while (*(unsigned __int8 *)(*(void *)(*(void *)v13 + 40) + 16 * v13[2]) == 172);
            if (v12)
            {
              while (1)
              {
                uint64_t v14 = *((void *)v164 + v12 - 1);
                uint64_t v15 = sub_1CCFA2DA0(&v155, v14, *(void *)(v8 + 16) != v8, (*(unsigned __int16 *)(v8 + 228) >> 13) & 1, v159);
                if (v6) {
                  sub_1CCFA301C(v14, *(void *)(a1 + 624), (uint64_t)v161, v159, (uint64_t)&v171, (uint64_t)v167, v15);
                }
                uint64_t v16 = *(void *)(a1 + 624);
                uint64_t v17 = sub_1CCFA33C8(v16 + 624, v14);
                if (*(void *)(v16 + 624) + 48 * *(unsigned int *)(v16 + 640) == v17) {
                  goto LABEL_27;
                }
                uint64_t v18 = *(llvm::MDNode **)(v17 + 32);
                if (!v18 || v15 == 0) {
                  goto LABEL_27;
                }
                uint64_t v20 = *(void *)(*(void *)(v15 + 16) + 8);
                if ((*(_WORD *)(v15 + 44) & 0xC) != 0 && (*(_WORD *)(v15 + 44) & 4) == 0) {
                  break;
                }
                if ((v20 & 0x80) != 0) {
                  goto LABEL_34;
                }
LABEL_27:
                unsigned int v12 = v165 - 1;
                LODWORD(v165) = v165 - 1;
                if (!v165) {
                  goto LABEL_39;
                }
              }
              uint64_t v22 = v15;
              if ((v20 & 0x80) == 0)
              {
                while ((*(_WORD *)(v22 + 44) & 8) != 0)
                {
                  uint64_t v22 = *(void *)(v22 + 8);
                  if ((*(unsigned char *)(*(void *)(v22 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_34;
                  }
                }
                goto LABEL_27;
              }
LABEL_34:
              llvm::MachineInstr::setHeapAllocMarker(v15, *(llvm::MachineFunction **)(a1 + 32), v18);
              goto LABEL_27;
            }
          }
        }
LABEL_39:
        uint64_t v23 = sub_1CCFA2DA0(&v155, *(void *)v8, *(void *)(v8 + 16) != v8, (*(unsigned __int16 *)(v8 + 228) >> 13) & 1, v159);
        if (v6) {
          sub_1CCFA301C(*(void *)v8, *(void *)(a1 + 624), (uint64_t)v161, v159, (uint64_t)&v171, (uint64_t)v167, v23);
        }
        uint64_t v24 = *(void *)(a1 + 624);
        uint64_t v25 = sub_1CCFA33C8(v24 + 624, *(void *)v8);
        if (*(void *)(v24 + 624) + 48 * *(unsigned int *)(v24 + 640) != v25)
        {
          uint64_t v26 = *(llvm::MDNode **)(v25 + 32);
          if (v26 && v23 != 0)
          {
            uint64_t v28 = *(void *)(*(void *)(v23 + 16) + 8);
            if ((*(_WORD *)(v23 + 44) & 0xC) != 0 && (*(_WORD *)(v23 + 44) & 4) == 0)
            {
              uint64_t v30 = v23;
              if ((v28 & 0x80) != 0)
              {
LABEL_51:
                llvm::MachineInstr::setHeapAllocMarker(v23, *(llvm::MachineFunction **)(a1 + 32), v26);
              }
              else
              {
                while ((*(_WORD *)(v30 + 44) & 8) != 0)
                {
                  uint64_t v30 = *(void *)(v30 + 8);
                  if ((*(unsigned char *)(*(void *)(v30 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_51;
                  }
                }
              }
            }
            else if ((v28 & 0x80) != 0)
            {
              goto LABEL_51;
            }
          }
        }
        if (v164 != v166) {
          free(v164);
        }
        continue;
      }
      sub_1CD7D56C8((void *)a1, *v7, (uint64_t)v157, (unint64_t *)*a2);
    }
    else
    {
      (*(void (**)(void, llvm::MachineBasicBlock *, uint64_t))(**(void **)(a1 + 16) + 736))(*(void *)(a1 + 16), v162, *a2);
    }
  }
  if (v6)
  {
    uint64_t v59 = *(void *)v151 + 48;
    uint64_t v60 = *(void *)(*(void *)v151 + 56);
    uint64_t v154 = (unint64_t *)v59;
    while (v60 != v59)
    {
      if (**(_WORD **)(v60 + 16) && **(_WORD **)(v60 + 16) != 69)
      {
        uint64_t v154 = (unint64_t *)v60;
        break;
      }
      uint64_t v60 = *(void *)(v60 + 8);
      uint64_t v59 = *(void *)v151 + 48;
    }
    int v61 = (__n128 *)v171;
    unint64_t v62 = v172;
    uint64_t v63 = (__n128 *)((char *)v171 + 16 * v172);
    if (v172)
    {
      unint64_t v64 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v65 = v172;
      while (1)
      {
        uint64_t v66 = (__n128 *)operator new(16 * v65, v64);
        if (v66) {
          break;
        }
        BOOL v67 = v65 > 1;
        v65 >>= 1;
        if (!v67) {
          goto LABEL_118;
        }
      }
      uint64_t v68 = v66;
      sub_1CD7D60D0(v61, v63, v62, v66, v65, v4);
      operator delete(v68);
    }
    else
    {
LABEL_118:
      sub_1CD7D60D0(v61, v63, v62, 0, 0, v4);
    }
    uint64_t v69 = *(void *)(*(void *)(a1 + 624) + 616);
    BOOL v70 = *(char **)(v69 + 96);
    unint64_t v71 = *(unsigned int *)(v69 + 104);
    if (v71 < 0x81)
    {
LABEL_124:
      sub_1CCFA3864(v70, &v70[8 * v71], v71, 0, 0);
    }
    else
    {
      uint64_t v72 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v73 = *(unsigned int *)(v69 + 104);
      while (1)
      {
        uint64_t v74 = (uint64_t *)operator new(8 * v73, v72);
        if (v74) {
          break;
        }
        BOOL v67 = v73 > 1;
        v73 >>= 1;
        if (!v67) {
          goto LABEL_124;
        }
      }
      uint64_t v75 = v74;
      sub_1CCFA3864(v70, &v70[8 * v71], v71, v74, v73);
      operator delete(v75);
    }
    uint64_t v76 = *(void *)(*(void *)(a1 + 624) + 616);
    uint64_t v77 = *(uint64_t **)(v76 + 96);
    uint64_t v78 = *(unsigned int *)(v76 + 104);
    uint64_t v79 = &v77[v78];
    uint64_t v80 = v172;
    if (v172 && v78)
    {
      uint64_t v81 = 0;
      unsigned int v82 = 0;
      do
      {
        int v83 = (char *)v171 + 16 * v81;
        unsigned int v84 = *(_DWORD *)v83;
        unint64_t v85 = (unint64_t *)*((void *)v83 + 1);
        int v86 = v85 + 3;
        if (!v82) {
          int v86 = (void *)v151;
        }
        uint64_t v150 = v86;
        if (v82) {
          unint64_t v87 = v85;
        }
        else {
          unint64_t v87 = v154;
        }
        while (1)
        {
          uint64_t v88 = *v77;
          unsigned int v89 = *(_DWORD *)(*v77 + 56);
          if (v89 < v82 || v89 >= v84) {
            break;
          }
          if (!*(unsigned char *)(v88 + 63))
          {
            int v91 = sub_1CD78D88C((uint64_t)v161, v88, v159);
            if (v91)
            {
              unint64_t v92 = (unint64_t)v91;
              uint64_t v93 = *(void *)(*v150 + 40);
              *((void *)v91 + 3) = v93;
              uint64_t v94 = *(void *)(v93 + 32);
              uint64_t v95 = *((unsigned int *)v91 + 10);
              if (v95)
              {
                uint64_t v98 = *((void *)v91 + 4);
                uint64_t v99 = *(void *)(v94 + 40);
                uint64_t v100 = 32 * v95;
                do
                {
                  if (!*(unsigned char *)v98)
                  {
                    uint64_t v101 = *(unsigned int *)(v98 + 4);
                    if ((int)v101 >= 0) {
                      uint64_t v102 = (uint64_t *)(*(void *)(v99 + 272) + 8 * v101);
                    }
                    else {
                      uint64_t v102 = (uint64_t *)(*(void *)(v99 + 24) + 16 * (v101 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v103 = *v102;
                    if (*v102)
                    {
                      uint64_t v104 = *(void *)(v103 + 16);
                      *(void *)(v103 + 16) = v98;
                      *(void *)(v98 + 16) = v104;
                      if (*(unsigned char *)(v98 + 3))
                      {
                        *(void *)(v98 + 24) = v103;
                      }
                      else
                      {
                        *(void *)(v98 + 24) = 0;
                        uint64_t v102 = (uint64_t *)(v104 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v98 + 16) = v98;
                      *(void *)(v98 + 24) = 0;
                    }
                    uint64_t *v102 = v98;
                  }
                  v98 += 32;
                  v100 -= 32;
                }
                while (v100);
              }
              uint64_t v96 = *(void *)(v94 + 728);
              if (v96) {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v96 + 24))(v96, v92);
              }
              unint64_t v97 = *v87 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v92 = v97 | *(void *)v92 & 7;
              *(void *)(v92 + 8) = v87;
              *(void *)(v97 + 8) = v92;
              *unint64_t v87 = *v87 & 7 | v92;
            }
          }
          if (++v77 == v79)
          {
            uint64_t v164 = v166;
            uint64_t v165 = 0x800000000;
            goto LABEL_169;
          }
        }
        if (++v81 == v80) {
          break;
        }
        unsigned int v82 = v84;
      }
      while (v77 != v79);
    }
    uint64_t v164 = v166;
    uint64_t v165 = 0x800000000;
    while (v77 != v79)
    {
      if (!*(unsigned char *)(*v77 + 63))
      {
        uint64_t v105 = sub_1CD78D88C((uint64_t)v161, *v77, v159);
        if (v105)
        {
          if (v165 >= (unint64_t)HIDWORD(v165)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v164 + v165) = v105;
          LODWORD(v165) = v165 + 1;
        }
      }
      ++v77;
    }
LABEL_169:
    uint64_t v106 = v162;
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v162);
    if (v165)
    {
      unint64_t v108 = (void *)FirstTerminator;
      uint64_t v109 = (char *)v164;
      int v110 = (char *)v164 + 8 * v165;
      do
      {
        uint64_t v111 = *(void *)v109;
        uint64_t v112 = *((void *)v106 + 5);
        *(void *)(v111 + 24) = v112;
        uint64_t v113 = *(void *)(v112 + 32);
        uint64_t v114 = *(unsigned int *)(v111 + 40);
        if (v114)
        {
          uint64_t v117 = *(void *)(v111 + 32);
          uint64_t v118 = *(void *)(v113 + 40);
          uint64_t v119 = 32 * v114;
          do
          {
            if (!*(unsigned char *)v117)
            {
              uint64_t v120 = *(unsigned int *)(v117 + 4);
              if ((int)v120 >= 0) {
                unsigned int v121 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v120);
              }
              else {
                unsigned int v121 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
              }
              uint64_t v122 = *v121;
              if (*v121)
              {
                uint64_t v123 = *(void *)(v122 + 16);
                *(void *)(v122 + 16) = v117;
                *(void *)(v117 + 16) = v123;
                if (*(unsigned char *)(v117 + 3))
                {
                  *(void *)(v117 + 24) = v122;
                }
                else
                {
                  *(void *)(v117 + 24) = 0;
                  unsigned int v121 = (uint64_t *)(v123 + 24);
                }
              }
              else
              {
                *(void *)(v117 + 16) = v117;
                *(void *)(v117 + 24) = 0;
              }
              *unsigned int v121 = v117;
            }
            v117 += 32;
            v119 -= 32;
          }
          while (v119);
        }
        uint64_t v115 = *(void *)(v113 + 728);
        if (v115) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v115 + 24))(v115, v111);
        }
        unint64_t v116 = *v108 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v111 = v116 | *(void *)v111 & 7;
        *(void *)(v111 + 8) = v108;
        *(void *)(v116 + 8) = v111;
        void *v108 = *v108 & 7 | v111;
        v109 += 8;
      }
      while (v109 != v110);
    }
    if (v172)
    {
      unsigned int v124 = 0;
      uint64_t v125 = *(void *)(*(void *)(a1 + 624) + 616);
      uint64_t v126 = *(uint64_t ***)(v125 + 640);
      uint64_t v127 = &v126[*(unsigned int *)(v125 + 648)];
      uint64_t v128 = (char *)v171;
      uint64_t v129 = (char *)v171 + 16 * v172;
      do
      {
        uint64_t v130 = *((void *)v128 + 1);
        if (v130)
        {
          if (v126 == v127) {
            break;
          }
          unsigned int v131 = *(_DWORD *)v128;
          if (v124) {
            uint64_t v132 = v130 + 24;
          }
          else {
            uint64_t v132 = v151;
          }
          if (v124) {
            uint64_t v133 = (unint64_t *)*((void *)v128 + 1);
          }
          else {
            uint64_t v133 = v154;
          }
          while (1)
          {
            unsigned int v134 = *((_DWORD *)*v126 + 4);
            if (v134 < v124 || v134 >= v131) {
              break;
            }
            uint64_t v136 = sub_1CD78DE60((uint64_t)v161, *v126);
            if (v136)
            {
              unint64_t v137 = (unint64_t)v136;
              uint64_t v138 = *(void *)(*(void *)v132 + 40);
              *((void *)v136 + 3) = v138;
              uint64_t v139 = *(void *)(v138 + 32);
              uint64_t v140 = *((unsigned int *)v136 + 10);
              if (v140)
              {
                uint64_t v143 = *((void *)v136 + 4);
                uint64_t v144 = *(void *)(v139 + 40);
                uint64_t v145 = 32 * v140;
                do
                {
                  if (!*(unsigned char *)v143)
                  {
                    uint64_t v146 = *(unsigned int *)(v143 + 4);
                    if ((int)v146 >= 0) {
                      uint64_t v147 = (uint64_t *)(*(void *)(v144 + 272) + 8 * v146);
                    }
                    else {
                      uint64_t v147 = (uint64_t *)(*(void *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v148 = *v147;
                    if (*v147)
                    {
                      uint64_t v149 = *(void *)(v148 + 16);
                      *(void *)(v148 + 16) = v143;
                      *(void *)(v143 + 16) = v149;
                      if (*(unsigned char *)(v143 + 3))
                      {
                        *(void *)(v143 + 24) = v148;
                      }
                      else
                      {
                        *(void *)(v143 + 24) = 0;
                        uint64_t v147 = (uint64_t *)(v149 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v143 + 16) = v143;
                      *(void *)(v143 + 24) = 0;
                    }
                    *uint64_t v147 = v143;
                  }
                  v143 += 32;
                  v145 -= 32;
                }
                while (v145);
              }
              uint64_t v141 = *(void *)(v139 + 728);
              if (v141) {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v141 + 24))(v141, v137);
              }
              unint64_t v142 = *v133 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v137 = v142 | *(void *)v137 & 7;
              *(void *)(v137 + 8) = v133;
              *(void *)(v142 + 8) = v137;
              *uint64_t v133 = *v133 & 7 | v137;
            }
            if (++v126 == v127) {
              goto LABEL_225;
            }
          }
          unsigned int v124 = v131;
        }
        v128 += 16;
      }
      while (v128 != v129);
    }
LABEL_225:
    if (v164 != v166) {
      free(v164);
    }
  }
  int v31 = v162;
  *a2 = v163;
  uint64_t v32 = (unsigned char *)llvm::MachineBasicBlock::getFirstTerminator(v31);
  unsigned int v33 = (char *)v31 + 48;
  if ((char *)v31 + 48 != v32)
  {
    uint64_t v34 = v32;
    if (v32)
    {
      uint64_t v35 = v32;
      if ((*v32 & 4) != 0) {
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    while ((*((_WORD *)v35 + 22) & 8) != 0)
      uint64_t v35 = (unsigned char *)*((void *)v35 + 1);
LABEL_91:
    uint64_t v54 = (char *)*((void *)v35 + 1);
    if (v54 != v33)
    {
      do
      {
        if (!v54 || (unsigned int v55 = v54, (*v54 & 4) == 0))
        {
          unsigned int v55 = v54;
          if ((*((_WORD *)v54 + 22) & 8) != 0)
          {
            unsigned int v55 = v54;
            do
              unsigned int v55 = (char *)*((void *)v55 + 1);
            while ((*((_WORD *)v55 + 22) & 8) != 0);
          }
        }
        if ((char *)*a2 == v54) {
          break;
        }
        uint64_t v56 = (char *)*((void *)v55 + 1);
        if (**((unsigned __int16 **)v54 + 2) - 13 <= 1)
        {
          llvm::MachineOperand::ChangeToRegister(*((void *)v54 + 4), 0, 0, 0, 0, 0, 0, 0);
          sub_1CB9173F0(*((void *)v34 + 3), (unint64_t *)v34, *((void *)v54 + 3), (unint64_t *)v54);
        }
        uint64_t v54 = v56;
      }
      while (v56 != v33);
    }
  }
  sub_1CB833A08((uint64_t)&v169, v170[0]);
  if (v167[0] != v168) {
    free(v167[0]);
  }
  if (v171 != v173) {
    free(v171);
  }
  MEMORY[0x1D25D9CD0](v157[0], 8);
  MEMORY[0x1D25D9CD0](v159[0], 8);
  return v31;
}

uint64_t sub_1CCFA2DA0(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)*a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = *(void **)(v7 + 48);
  uint64_t v10 = *(void *)(*a1 + 616);
  if (*(void **)(v10 + 56) == v9)
  {
    unint64_t v11 = v10 + 48;
  }
  else
  {
    unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 || (*(unsigned char *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 4) != 0)
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (*(__int16 *)(a2 + 24) < 0) {
    sub_1CCF71324(a1[1], a2, a3, a4, a5);
  }
  else {
    sub_1CD78DF74(a1[1], a2, a3, a4, a5);
  }
  uint64_t v12 = a1[1];
  uint64_t v13 = v8[77];
  if (*(void *)(v13 + 56) == *(void *)(v12 + 48))
  {
    unint64_t v14 = v13 + 48;
  }
  else
  {
    unint64_t v14 = **(void **)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v14 || (*(unsigned char *)v14 & 4) == 0)
    {
      while ((*(_WORD *)(v14 + 44) & 4) != 0)
        unint64_t v14 = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == v14) {
    return 0;
  }
  if (v13 + 48 == v11)
  {
    uint64_t v15 = *(void *)(v12 + 40) + 56;
  }
  else
  {
    if (!v11 || (*(unsigned char *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 8) != 0)
        unint64_t v11 = *(void *)(v11 + 8);
    }
    uint64_t v15 = v11 + 8;
  }
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(unsigned __int16 **)(*(void *)v15 + 16);
  if ((v17[4] & 0x80) != 0)
  {
    unsigned int v21 = *v17;
    BOOL v22 = v21 > 0x1F;
    unsigned int v23 = (1 << v21) & 0x8E000000;
    if (v22 || v23 == 0)
    {
      uint64_t v25 = v8[78];
      if (*(_WORD *)(*(void *)v25 + 1064))
      {
        uint64_t v26 = v8[4];
        v30[0] = 0;
        int v27 = sub_1CD7D59E4(*(void *)(v25 + 624), *(_DWORD *)(v25 + 640), a2, v30);
        uint64_t v28 = *(void *)(v25 + 624);
        unsigned int v29 = *(_DWORD *)(v25 + 640);
        v32[0] = v33;
        v32[1] = (void *)0x100000000;
        if (v27 && v30[0] != v28 + 48 * v29 && *(_DWORD *)(v30[0] + 16)) {
          sub_1CD531FE8((uint64_t)v32, v30[0] + 8);
        }
        uint64_t v31 = v16;
        sub_1CD7D58E8((uint64_t)v30, v26 + 744, &v31, (uint64_t)v32);
        if (v32[0] != v33) {
          free(v32[0]);
        }
      }
    }
  }
  uint64_t v18 = v8[78];
  uint64_t v19 = sub_1CCFA33C8(v18 + 624, a2);
  if (*(void *)(v18 + 624) + 48 * *(unsigned int *)(v18 + 640) != v19 && *(unsigned char *)(v19 + 40)) {
    *(_WORD *)(v16 + 44) |= 0x8000u;
  }
  return v16;
}

uint64_t sub_1CCFA301C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(unsigned int *)(a1 + 60);
  if (v12)
  {
    if (*(void *)(a6 + 64))
    {
      for (uint64_t i = *(uint64_t **)(a6 + 56); i; uint64_t i = (uint64_t *)*i)
      {
        unsigned int v15 = *((_DWORD *)i + 7);
        if (v12 >= v15)
        {
          if (v15 >= v12) {
            goto LABEL_15;
          }
          ++i;
        }
      }
LABEL_18:
      if (a7)
      {
        unsigned int v22 = *(_DWORD *)(a1 + 60);
        sub_1CD513F60(a6, &v22);
        unsigned int v20 = *(_DWORD *)(a5 + 8);
        if (v20 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v21 = (void *)(*(void *)a5 + 16 * v20);
        *unsigned int v21 = v12;
        v21[1] = a7;
        ++*(_DWORD *)(a5 + 8);
      }
      return sub_1CCFA3424(a1, a2, a3, a5, a4, v12);
    }
    uint64_t v16 = *(unsigned int *)(a6 + 8);
    if (!v16) {
      goto LABEL_18;
    }
    uint64_t v17 = *(_DWORD **)a6;
    uint64_t v18 = 4 * v16;
    while (*v17 != v12)
    {
      ++v17;
      v18 -= 4;
      if (!v18) {
        goto LABEL_18;
      }
    }
    if (!v18) {
      goto LABEL_18;
    }
  }
LABEL_15:

  return sub_1CCFA3424(a1, a2, a3, a5, a4, 0);
}

void sub_1CCFA3194(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[16] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(char **)(a1 + 32);
  uint64_t v13 = &v12[40 * *(unsigned __int16 *)(a1 + 56)];
  unsigned int v23 = v25;
  uint64_t v24 = 0x800000000;
  sub_1CD3E560C((uint64_t)&v23, v12, v13);
  if (a5)
  {
    if (v24 >= HIDWORD(v24)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v14 = (char *)v23 + 16 * v24;
    *unint64_t v14 = a5;
    v14[1] = a6;
    LODWORD(v24) = v24 + 1;
  }
  uint64_t v16 = sub_1CD7F9A18((uint64_t)a2, a3, a4);
  uint64_t v17 = v15;
  int v18 = *(__int16 *)(a1 + 24);
  if (v18 < 0)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 88);
    if (v19)
    {
      if (v19 == 1)
      {
        unsigned int v20 = (const void *)(a1 + 80);
        size_t v21 = 8;
      }
      else
      {
        unsigned int v20 = (const void *)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8);
        size_t v21 = 8 * (int)v19;
        if (v21 >= 0x11) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
      }
      memcpy(v22, v20, v21);
      LOWORD(v18) = *(_WORD *)(a1 + 24);
    }
    sub_1CD8007BC(a2, a1, v18, v16, v17, (uint64_t *)v23, v24);
    sub_1CD8005B8(a2, a1, v22, v19);
  }
  else
  {
    sub_1CD8007BC(a2, a1, v18, v16, v15, (uint64_t *)v23, v24);
  }
  if (v23 != v25) {
    free(v23);
  }
}

uint64_t sub_1CCFA33C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CD7D59E4(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 48 * *(unsigned int *)(a1 + 16);
  }
}

uint64_t sub_1CCFA3424(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  if (*(unsigned char *)(result + 26))
  {
    unsigned int v33 = *(unint64_t **)(a3 + 48);
    uint64_t v34 = *(void *)(a3 + 40);
    uint64_t v10 = *(void *)(a2 + 616);
    uint64_t result = sub_1CCF9A240(v10 + 688, result);
    if (*(void *)(v10 + 688) + 40 * *(unsigned int *)(v10 + 704) != result)
    {
      uint64_t v11 = *(unsigned int *)(result + 16);
      if (v11)
      {
        uint64_t v12 = *(uint64_t **)(result + 8);
        uint64_t v13 = &v12[v11];
        do
        {
          uint64_t v14 = *v12;
          if (!*(unsigned char *)(*v12 + 63))
          {
            uint64_t v15 = *(unsigned int *)(v14 + 56);
            if (!a6 || v15 == a6)
            {
              if (*(unsigned char *)(v14 + 62) || !*(void *)v14)
              {
LABEL_16:
                uint64_t result = (uint64_t)sub_1CD78D88C(a3, v14, a5);
                if (result)
                {
                  unint64_t v19 = result;
                  unint64_t v20 = *(unsigned int *)(a4 + 8);
                  if (v20 >= *(unsigned int *)(a4 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  size_t v21 = (void *)(*(void *)a4 + 16 * v20);
                  *size_t v21 = v15;
                  v21[1] = result;
                  ++*(_DWORD *)(a4 + 8);
                  uint64_t v22 = *(void *)(v34 + 40);
                  *(void *)(result + 24) = v22;
                  uint64_t v23 = *(void *)(v22 + 32);
                  uint64_t v24 = *(unsigned int *)(result + 40);
                  if (v24)
                  {
                    uint64_t v26 = *(void *)(result + 32);
                    uint64_t v27 = *(void *)(v23 + 40);
                    uint64_t v28 = 32 * v24;
                    do
                    {
                      if (!*(unsigned char *)v26)
                      {
                        uint64_t v29 = *(unsigned int *)(v26 + 4);
                        if ((int)v29 >= 0) {
                          uint64_t v30 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v29);
                        }
                        else {
                          uint64_t v30 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v31 = *v30;
                        if (*v30)
                        {
                          uint64_t v32 = *(void *)(v31 + 16);
                          *(void *)(v31 + 16) = v26;
                          *(void *)(v26 + 16) = v32;
                          if (*(unsigned char *)(v26 + 3))
                          {
                            *(void *)(v26 + 24) = v31;
                          }
                          else
                          {
                            *(void *)(v26 + 24) = 0;
                            uint64_t v30 = (uint64_t *)(v32 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v26 + 16) = v26;
                          *(void *)(v26 + 24) = 0;
                        }
                        *uint64_t v30 = v26;
                      }
                      v26 += 32;
                      v28 -= 32;
                    }
                    while (v28);
                  }
                  uint64_t result = *(void *)(v23 + 728);
                  if (result) {
                    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 24))(result, v19);
                  }
                  unint64_t v25 = *v33 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v19 = v25 | *(void *)v19 & 7;
                  *(void *)(v19 + 8) = v33;
                  *(void *)(v25 + 8) = v19;
                  unint64_t *v33 = *v33 & 7 | v19;
                }
              }
              else
              {
                uint64_t v16 = 24 * *(void *)v14;
                uint64_t v17 = (_DWORD *)(*(void *)(v14 + 8) + 16);
                while (1)
                {
                  if (!*(v17 - 4))
                  {
                    int v18 = *v17;
                    uint64_t v35 = *((void *)v17 - 1);
                    int v36 = v18;
                    uint64_t v37 = 0;
                    uint64_t result = sub_1CD78E72C(a5, (uint64_t)&v35, &v37);
                    if ((result & 1) == 0) {
                      break;
                    }
                  }
                  v17 += 6;
                  v16 -= 24;
                  if (!v16) {
                    goto LABEL_16;
                  }
                }
              }
            }
          }
          ++v12;
        }
        while (v12 != v13);
      }
    }
  }
  return result;
}

uint64_t sub_1CCFA36A8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v3[-*a1] >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xF0F0F0F0F0F0F0) {
    abort();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4) > v6) {
    unint64_t v6 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - (uint64_t)v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v5];
  *(void *)uint64_t v12 = a2;
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  uint64_t v13 = &v11[272 * v10];
  *(void *)(v12 + 32) = v12 + 48;
  *(void *)(v12 + 40) = 0x400000000;
  *(void *)(v12 + 112) = v12 + 128;
  *(void *)(v12 + 120) = 0x400000000;
  *(_DWORD *)(v12 + 192) = a3;
  *(_DWORD *)(v12 + 232) = 0;
  *(_OWORD *)(v12 + 196) = 0u;
  *(_OWORD *)(v12 + 212) = 0u;
  *(_WORD *)(v12 + 228) = 0;
  *(unsigned char *)(v12 + 236) &= 0xFCu;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  uint64_t v14 = v12 + 272;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v3 -= 272;
      uint64_t v12 = sub_1CD57A99C(v12 - 272, (uint64_t)v3);
    }
    while (v3 != v4);
    uint64_t v3 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
    while (v15 != v3)
    {
      uint64_t v16 = (char *)*((void *)v15 - 20);
      if (v15 - 144 != v16) {
        free(v16);
      }
      uint64_t v17 = (char *)*((void *)v15 - 30);
      if (v15 - 224 != v17) {
        free(v17);
      }
      v15 -= 272;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t sub_1CCFA3848(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

char *sub_1CCFA3864(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(_DWORD *)(v7 + 56) < *(_DWORD *)(*(void *)result + 56))
      {
        *(void *)uint64_t result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v20 = (char *)a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = &result[8 * (a3 >> 1)];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCFA3AAC((uint64_t)result, v22, v23, a4);
        uint64_t v24 = (uint64_t *)&v20[8 * v21];
        uint64_t result = (char *)sub_1CCFA3AAC((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24);
        unint64_t v25 = &v20[8 * a3];
        uint64_t v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *v26;
          uint64_t v29 = *(void *)v20;
          unsigned int v30 = *(_DWORD *)(v28 + 56);
          unsigned int v31 = *(_DWORD *)(*(void *)v20 + 56);
          if (v30 < v31) {
            uint64_t v29 = v28;
          }
          v20 += 8 * (v30 >= v31);
          uint64_t v26 = &v27[v30 < v31];
          *(void *)unint64_t v6 = v29;
          v6 += 8;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              uint64_t v32 = 0;
              if (v30 < v31) {
                char v33 = 1;
              }
              else {
                char v33 = 2;
              }
              uint64_t v34 = &v27[v33 & 1];
              do
              {
                *(void *)&v6[v32 * 8] = v34[v32];
                ++v32;
              }
              while (&v34[v32] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          uint64_t v35 = 0;
          do
          {
            *(void *)&v6[v35] = *(void *)&v20[v35];
            v35 += 8;
          }
          while (&v20[v35] != (char *)v24);
        }
      }
      else
      {
        sub_1CCFA3864(result, v22, v23, a4, a5);
        sub_1CCFA3864(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_1CCFA3CAC(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v10 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v11 = 8;
        uint64_t v12 = result;
        do
        {
          uint64_t v14 = *(void *)v12;
          uint64_t v13 = *((void *)v12 + 1);
          uint64_t v12 = v10;
          unsigned int v15 = *(_DWORD *)(v13 + 56);
          if (v15 < *(_DWORD *)(v14 + 56))
          {
            uint64_t v16 = v11;
            while (1)
            {
              *(void *)&result[v16] = v14;
              uint64_t v17 = v16 - 8;
              if (v16 == 8) {
                break;
              }
              uint64_t v14 = *(void *)&result[v16 - 16];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v14 + 56))
              {
                int v18 = &result[v17];
                goto LABEL_15;
              }
            }
            int v18 = result;
LABEL_15:
            *(void *)int v18 = v13;
          }
          unint64_t v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCFA3AAC(uint64_t result, void *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 56);
      unsigned int v10 = *(_DWORD *)(*(void *)result + 56);
      if (v9 >= v10) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (v9 >= v10) {
        uint64_t v6 = (uint64_t)(a2 - 1);
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = result + 8 * (a3 >> 1);
      sub_1CCFA3864(result, v20, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCFA3864(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v21 = (void *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *v21;
        uint64_t v24 = *(void *)v6;
        unsigned int v25 = *(_DWORD *)(v23 + 56);
        unsigned int v26 = *(_DWORD *)(*(void *)v6 + 56);
        if (v25 < v26) {
          uint64_t v24 = v23;
        }
        unint64_t v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v27 = 0;
            uint64_t v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v29 = 0;
        do
        {
          v4[v29] = *(void *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        uint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(_DWORD *)(*(void *)v11 + 56) >= *(_DWORD *)(v16 + 56))
          {
            *uint64_t v14 = *(void *)v11;
          }
          else
          {
            v13[1] = v15;
            uint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = (uint64_t *)((char *)a4 + v18);
                uint64_t v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(void *)v11 + 56) >= *(_DWORD *)(v19 + 56)) {
                  break;
                }
                *uint64_t v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = a4;
                  break;
                }
              }
            }
            *uint64_t v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = v14;
        }
        while ((void *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1CCFA3CAC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        if (*(_DWORD *)(*(void *)a2 + 56) < *(_DWORD *)(*(void *)v11 + 56)) {
          break;
        }
        v11 += 8;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(void *)uint64_t v11 = *(void *)a2;
          *(void *)a2 = v12;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v23 = a4;
        }
        else {
          uint64_t v23 = a4 + 1;
        }
        uint64_t v22 = v23 >> 1;
        uint64_t v16 = &v11[8 * (v23 >> 1)];
        uint64_t v15 = a3;
        if (a3 != a2)
        {
          unint64_t v24 = (a3 - a2) >> 3;
          uint64_t v15 = a2;
          do
          {
            unint64_t v25 = v24 >> 1;
            unsigned int v26 = &v15[8 * (v24 >> 1)];
            uint64_t v28 = *(void *)v26;
            uint64_t v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_DWORD *)(v28 + 56) < *(_DWORD *)(*(void *)v16 + 56)) {
              uint64_t v15 = v27;
            }
            else {
              unint64_t v24 = v25;
            }
          }
          while (v24);
        }
        uint64_t v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v8 + 1;
        }
        uint64_t v14 = v13 >> 1;
        uint64_t v15 = &a2[8 * (v13 >> 1)];
        uint64_t v16 = a2;
        if (v11 != a2)
        {
          unint64_t v17 = (a2 - v11) >> 3;
          uint64_t v16 = v11;
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = &v16[8 * (v17 >> 1)];
            uint64_t v21 = *(void *)v19;
            unint64_t v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_DWORD *)(*(void *)v15 + 56) < *(_DWORD *)(v21 + 56)) {
              unint64_t v17 = v18;
            }
            else {
              uint64_t v16 = v20;
            }
          }
          while (v17);
        }
        uint64_t v22 = (v16 - v11) >> 3;
      }
      uint64_t v29 = v15;
      if (v16 != a2)
      {
        uint64_t v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            uint64_t v69 = *(void *)v16;
            unint64_t v71 = a3;
            uint64_t v36 = v15 - a2;
            unint64_t v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            uint64_t v29 = &v16[v36];
            *(void *)uint64_t v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            uint64_t v37 = *((void *)v15 - 1);
            uint64_t v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              uint64_t v72 = a3;
              uint64_t v74 = a6;
              uint64_t v70 = *((void *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              uint64_t v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(void *)uint64_t v16 = v37;
          }
          else
          {
            uint64_t v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              uint64_t v31 = 0;
              do
              {
                uint64_t v32 = *(void *)&v16[v31];
                *(void *)&v16[v31] = *(void *)&a2[v31];
                uint64_t v33 = (uint64_t)&v16[v31 + 8];
                *(void *)&a2[v31] = v32;
                uint64_t v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (void)v15);
              uint64_t v29 = a2;
            }
            else
            {
              uint64_t v38 = (v15 - a2) >> 3;
              uint64_t v39 = (a2 - v16) >> 3;
              do
              {
                uint64_t v40 = v39;
                uint64_t v39 = v38;
                uint64_t v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                uint64_t v41 = &v16[8 * v39];
                do
                {
                  uint64_t v43 = *((void *)v41 - 1);
                  v41 -= 8;
                  uint64_t v42 = v43;
                  uint64_t v44 = &v41[8 * v30];
                  uint64_t v45 = v41;
                  do
                  {
                    unint64_t v46 = v45;
                    uint64_t v45 = v44;
                    *(void *)unint64_t v46 = *(void *)v44;
                    BOOL v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    uint64_t v49 = v30 - ((v15 - v44) >> 3);
                    char v48 = (v49 < 0) ^ v47;
                    uint64_t v44 = &v16[8 * v49];
                    if (v48) {
                      uint64_t v44 = &v45[8 * v30];
                    }
                  }
                  while (v44 != v41);
                  *(void *)uint64_t v45 = v42;
                }
                while (v41 != v16);
              }
              uint64_t v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        uint64_t v54 = v8;
        unsigned int v55 = a6;
        uint64_t result = (char *)sub_1CCFA3CAC(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        uint64_t v15 = v16;
        uint64_t v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        uint64_t v50 = v11;
        uint64_t v51 = v16;
        uint64_t v52 = a6;
        uint64_t v53 = a3;
        uint64_t result = (char *)sub_1CCFA3CAC(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        uint64_t v11 = v29;
      }
      a2 = v15;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v60 = 0;
        do
        {
          *(void *)&a6[v60] = *(void *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          int v61 = a6;
          while (a2 != a3)
          {
            uint64_t v62 = *(void *)a2;
            unsigned int v63 = *(_DWORD *)(*(void *)a2 + 56);
            unsigned int v64 = *(_DWORD *)(*(void *)v61 + 56);
            BOOL v65 = v63 >= v64;
            BOOL v66 = v63 < v64;
            unsigned int v67 = v65;
            if (v65) {
              uint64_t v62 = *(void *)v61;
            }
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(void *)uint64_t v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61) {
              return result;
            }
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v56 = 0;
      do
      {
        *(void *)&a6[v56] = *(void *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        int v57 = &a6[v56];
        int v58 = a3 - 8;
        while (a2 != v11)
        {
          uint64_t v59 = *((void *)v57 - 1);
          if (*(_DWORD *)(v59 + 56) >= *(_DWORD *)(*((void *)a2 - 1) + 56))
          {
            v57 -= 8;
          }
          else
          {
            uint64_t v59 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)int v58 = v59;
          v58 -= 8;
          if (v57 == a6) {
            return result;
          }
        }
        if (v57 != a6)
        {
          uint64_t v68 = 0;
          do
          {
            *(void *)&v58[v68] = *(void *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCFA4154()
{
  int v4 = 1;
  int v2 = 10;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Roughly estimate the number of cycles that 'long latency'instructions take for targ"
                                     "ets with no itinerary";
  v1.n128_u64[1] = 104;
  sub_1CD7D5A80(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF9E88, &dword_1CB82C000);
}

void sub_1CCFA41CC(llvm::ScheduleDAG *this)
{
  *(void *)this = &unk_1F2642030;
  uint64_t v2 = *((void *)this + 87);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 83);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  int v4 = (void *)*((void *)this + 84);
  if (v4)
  {
    *((void *)this + 85) = v4;
    operator delete(v4);
  }

  sub_1CD7D3638(this);
}

void sub_1CCFA4284(llvm::ScheduleDAG *a1)
{
  sub_1CCFA41CC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFA42BC(uint64_t a1)
{
  sub_1CD7D4FCC((uint64_t *)a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 664) + 32))(*(void *)(a1 + 664), a1 + 48);
  sub_1CCFA49C4((void *)a1, (llvm::SUnit *)(a1 + 72));
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(v3 + 40))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 664) + 88))(*(void *)(a1 + 664), v3);
        *(_WORD *)(v3 + 228) |= 0x200u;
      }
      v3 += 272;
    }
    while (v3 != v2);
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
  }
  sub_1CBF7ACFC(a1 + 640, 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 4));
  int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 664) + 64))(*(void *)(a1 + 664));
  uint64_t v6 = *(void *)(a1 + 680);
  uint64_t v7 = *(void *)(a1 + 672);
  if (v5) {
    BOOL v8 = v7 == v6;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    int v61 = (llvm::SUnit ***)(a1 + 640);
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (unint64_t)(v6 - v7) >> 3;
      if (v13)
      {
        unsigned int v14 = 0;
        do
        {
          uint64_t v15 = *(void *)(*(void *)(a1 + 672) + 8 * v14);
          if ((*(unsigned char *)(v15 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(void *)(a1 + 672) + 8 * v14));
          }
          if (*(_DWORD *)(v15 + 240) == v9)
          {
            (*(void (**)(void, void))(**(void **)(a1 + 664) + 88))(*(void *)(a1 + 664), *(void *)(*(void *)(a1 + 672) + 8 * v14));
            uint64_t v16 = *(void *)(*(void *)(a1 + 672) + 8 * v14);
            *(_WORD *)(v16 + 228) |= 0x200u;
            *(void *)(*(void *)(a1 + 672) + 8 * v14) = *(void *)(*(void *)(a1 + 680) - 8);
            *(void *)(a1 + 680) -= 8;
            --v14;
            LODWORD(v13) = v13 - 1;
          }
          ++v14;
        }
        while (v14 != v13);
      }
      char v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 664) + 64))(*(void *)(a1 + 664));
      uint64_t v18 = **(void **)(a1 + 664);
      if (v17)
      {
        (*(void (**)(void))(v18 + 120))();
        ++v9;
      }
      else
      {
        char v21 = 0;
        if ((*(uint64_t (**)(void))(v18 + 64))())
        {
LABEL_48:
          uint64_t v22 = 0;
        }
        else
        {
          while (1)
          {
            uint64_t v22 = (llvm::SUnit *)(*(uint64_t (**)(void))(**(void **)(a1 + 664) + 96))(*(void *)(a1 + 664));
            int v23 = (*(uint64_t (**)(void, llvm::SUnit *, void))(**(void **)(a1 + 696) + 24))(*(void *)(a1 + 696), v22, 0);
            if (!v23) {
              break;
            }
            BOOL v24 = v23 == 2;
            if (v12 >= v10)
            {
              uint64_t v25 = (v12 - v11) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_99;
              }
              if ((v10 - v11) >> 2 > v26) {
                unint64_t v26 = (v10 - v11) >> 2;
              }
              if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27)
              {
                if (v27 >> 61) {
                  goto LABEL_100;
                }
                uint64_t v28 = (char *)operator new(8 * v27);
              }
              else
              {
                uint64_t v28 = 0;
              }
              uint64_t v29 = (llvm::SUnit **)&v28[8 * v25];
              *uint64_t v29 = v22;
              uint64_t v30 = (char *)(v29 + 1);
              while (v12 != v11)
              {
                uint64_t v31 = (llvm::SUnit *)*((void *)v12 - 1);
                v12 -= 8;
                *--uint64_t v29 = v31;
              }
              unsigned int v10 = &v28[8 * v27];
              if (v11) {
                operator delete(v11);
              }
              uint64_t v12 = v30;
              uint64_t v11 = (char *)v29;
            }
            else
            {
              *(void *)uint64_t v12 = v22;
              v12 += 8;
            }
            v21 |= v24;
            if ((*(unsigned int (**)(void))(**(void **)(a1 + 664) + 64))(*(void *)(a1 + 664))) {
              goto LABEL_48;
            }
          }
        }
        if (v11 != v12)
        {
          uint64_t v32 = *(void *)(a1 + 664);
          uint64_t v33 = v11;
          do
          {
            uint64_t v34 = *(void *)v33;
            v33 += 8;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 88))(v32, v34);
          }
          while (v33 != v12);
          uint64_t v12 = v11;
        }
        if (v22)
        {
          char v48 = *(llvm::SUnit ***)(a1 + 648);
          unint64_t v49 = *(void *)(a1 + 656);
          if ((unint64_t)v48 >= v49)
          {
            uint64_t v51 = *v61;
            uint64_t v52 = v48 - *v61;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61) {
LABEL_99:
            }
              abort();
            uint64_t v54 = v49 - (void)v51;
            if (v54 >> 2 > v53) {
              unint64_t v53 = v54 >> 2;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              if (v55 >> 61) {
LABEL_100:
              }
                sub_1CB833614();
              uint64_t v56 = (char *)operator new(8 * v55);
            }
            else
            {
              uint64_t v56 = 0;
            }
            int v57 = (llvm::SUnit **)&v56[8 * v52];
            *int v57 = v22;
            uint64_t v50 = v57 + 1;
            if (v48 != v51)
            {
              do
              {
                int v58 = *--v48;
                *--int v57 = v58;
              }
              while (v48 != v51);
              char v48 = *v61;
            }
            *(void *)(a1 + 640) = v57;
            *(void *)(a1 + 648) = v50;
            *(void *)(a1 + 656) = &v56[8 * v55];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *char v48 = v22;
            uint64_t v50 = v48 + 1;
          }
          *(void *)(a1 + 648) = v50;
          llvm::SUnit::setDepthToAtLeast(v22, v9);
          sub_1CCFA49C4((void *)a1, v22);
          *((_WORD *)v22 + 114) |= 0x400u;
          (*(void (**)(void, llvm::SUnit *))(**(void **)(a1 + 664) + 120))(*(void *)(a1 + 664), v22);
          (*(void (**)(void, llvm::SUnit *))(**(void **)(a1 + 696) + 40))(*(void *)(a1 + 696), v22);
          int v47 = *((_WORD *)v22 + 113) != 0;
        }
        else
        {
          uint64_t v35 = **(void **)(a1 + 696);
          if (v21)
          {
            (*(void (**)(void))(v35 + 96))();
            uint64_t v36 = *(llvm::SUnit ***)(a1 + 648);
            unint64_t v37 = *(void *)(a1 + 656);
            if ((unint64_t)v36 >= v37)
            {
              uint64_t v39 = *v61;
              uint64_t v40 = v36 - *v61;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61) {
                goto LABEL_99;
              }
              uint64_t v42 = v37 - (void)v39;
              if (v42 >> 2 > v41) {
                unint64_t v41 = v42 >> 2;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                if (v43 >> 61) {
                  goto LABEL_100;
                }
                uint64_t v44 = (char *)operator new(8 * v43);
              }
              else
              {
                uint64_t v44 = 0;
              }
              uint64_t v45 = &v44[8 * v40];
              *(void *)uint64_t v45 = 0;
              uint64_t v38 = v45 + 8;
              if (v36 != v39)
              {
                do
                {
                  uint64_t v46 = (uint64_t)*--v36;
                  *((void *)v45 - 1) = v46;
                  v45 -= 8;
                }
                while (v36 != v39);
                uint64_t v36 = *v61;
              }
              *(void *)(a1 + 640) = v45;
              *(void *)(a1 + 648) = v38;
              *(void *)(a1 + 656) = &v44[8 * v43];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v36 = 0;
              uint64_t v38 = v36 + 1;
            }
            *(void *)(a1 + 648) = v38;
          }
          else
          {
            (*(void (**)(void))(v35 + 80))();
          }
          int v47 = 1;
        }
        v9 += v47;
      }
      int v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 664) + 64))(*(void *)(a1 + 664));
      uint64_t v6 = *(void *)(a1 + 680);
      uint64_t v7 = *(void *)(a1 + 672);
      if (v19) {
        BOOL v20 = v7 == v6;
      }
      else {
        BOOL v20 = 0;
      }
    }
    while (!v20);
    if (v11) {
      operator delete(v11);
    }
  }
  uint64_t v59 = *(uint64_t (**)(void))(**(void **)(a1 + 664) + 56);

  return v59();
}

void sub_1CCFA49C4(void *a1, llvm::SUnit *this)
{
  uint64_t v2 = *((unsigned int *)this + 30);
  if (v2)
  {
    uint64_t v5 = *((void *)this + 14);
    uint64_t v6 = v5 + 16 * v2;
    uint64_t v7 = (llvm::SUnit *)(a1 + 43);
    do
    {
      BOOL v8 = (llvm::SUnit *)(*(void *)v5 & 0xFFFFFFFFFFFFFFF8);
      --*((_DWORD *)v8 + 52);
      if ((*((unsigned char *)this + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(this);
      }
      llvm::SUnit::setDepthToAtLeast(v8, *(_DWORD *)(v5 + 12) + *((_DWORD *)this + 60));
      if (*((_DWORD *)v8 + 52)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v7 == v8;
      }
      if (!v9)
      {
        unsigned int v10 = (llvm::SUnit **)a1[85];
        unint64_t v11 = a1[86];
        if ((unint64_t)v10 >= v11)
        {
          unint64_t v13 = (void *)a1[84];
          uint64_t v14 = v10 - (llvm::SUnit **)v13;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            abort();
          }
          uint64_t v16 = v11 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 61) {
              sub_1CB833614();
            }
            uint64_t v18 = (char *)operator new(8 * v17);
          }
          else
          {
            uint64_t v18 = 0;
          }
          int v19 = (llvm::SUnit **)&v18[8 * v14];
          *int v19 = v8;
          uint64_t v12 = v19 + 1;
          if (v10 != v13)
          {
            do
            {
              BOOL v20 = *--v10;
              *--int v19 = v20;
            }
            while (v10 != v13);
            unsigned int v10 = (llvm::SUnit **)a1[84];
          }
          a1[84] = v19;
          a1[85] = v12;
          a1[86] = &v18[8 * v17];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          char *v10 = v8;
          uint64_t v12 = v10 + 1;
        }
        a1[85] = v12;
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
}

uint64_t sub_1CCFA4B34()
{
  qword_1EBCF9F48 = 0;
  unk_1EBCF9F50 = "vliw-td";
  qword_1EBCF9F58 = 7;
  unk_1EBCF9F60 = "VLIW scheduler";
  qword_1EBCF9F68 = 14;
  unk_1EBCF9F70 = sub_1CD7D654C;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCF9F48);

  return __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCF9F48, &dword_1CB82C000);
}

uint64_t *sub_1CCFA4BC4(uint64_t a1, void *a2, uint64_t a3, const llvm::APInt *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7)
{
  v85[8] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(unsigned int *)(a1 + 8);
  if (!v9) {
    return 0;
  }
  uint64_t v66 = a2[3];
  int v83 = v85;
  uint64_t v84 = 0x400000000;
  sub_1CD3E535C((uint64_t *)&v83, v9, 0, 0);
  uint64_t v17 = 0;
  uint64_t v80 = v82;
  uint64_t v81 = 0x800000000;
  uint64_t v68 = *(unsigned int *)(a1 + 8);
  if (!v68) {
    goto LABEL_74;
  }
  uint64_t v74 = a3;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  BOOL v20 = a4;
  uint64_t v77 = a2;
  unsigned int v67 = a7;
  do
  {
    uint64_t v21 = *(void *)a1 + 16 * v18;
    uint64_t v69 = *(void *)(v21 + 8);
    uint64_t v70 = *(llvm **)v21;
    unint64_t v22 = *(unsigned int *)(*(void *)(a1 + 144) + 4 * v18);
    uint64_t v73 = v18;
    if (*(unsigned char *)(a1 + 180)) {
      unsigned __int8 v23 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)v66 + 592))(v66, a2[7], *(unsigned int *)(a1 + 176), *(unsigned __int8 *)(*(void *)(a1 + 80) + v18), 0);
    }
    else {
      unsigned __int8 v23 = *(unsigned char *)(*(void *)(a1 + 80) + v18);
    }
    unsigned __int8 v78 = v23;
    sub_1CD7E8FD4((uint64_t)&v80, v22);
    unint64_t v25 = v22;
    unsigned int v72 = v19;
    uint64_t v71 = v22;
    if (v22)
    {
      uint64_t v29 = 0;
      uint64_t v75 = 16 * v25;
      unsigned int v30 = v19;
      do
      {
        uint64_t v31 = *a5;
        uint64_t v32 = a5[1];
        int v33 = *(_DWORD *)(*(void *)(a1 + 112) + 4 * v30);
        if (a6)
        {
          uint64_t v35 = sub_1CD40AAE8(a2, v31, v32, v20, v33, (llvm *)v78, 0, v24, *a6, a6[1]);
          *a6 = (uint64_t)v35;
          *((_DWORD *)a6 + 2) = 2;
        }
        else
        {
          uint64_t v35 = sub_1CD3D6670(a2, v31, v32, v20, v33, (llvm *)v78, 0);
        }
        unint64_t v7 = v34 | v7 & 0xFFFFFFFF00000000;
        *a5 = (uint64_t)v35;
        *((_DWORD *)a5 + 2) = 1;
        uint64_t v36 = (char *)v80 + v29;
        *(void *)uint64_t v36 = v35;
        *((_DWORD *)v36 + 2) = v34;
        int v37 = *(_DWORD *)(*(void *)(a1 + 112) + 4 * v30);
        if ((v37 & 0x80000000) == 0) {
          goto LABEL_56;
        }
        unsigned __int8 v38 = v78;
        if ((v78 - 120) >= 0x20u
          && (v78 - 2) >= 6u
          && (v78 - 15) > 0x3Bu)
        {
          goto LABEL_56;
        }
        unsigned int v39 = v37 & 0x7FFFFFFF;
        if ((v37 & 0x7FFFFFFFu) >= *(_DWORD *)(v74 + 792)) {
          goto LABEL_56;
        }
        uint64_t v40 = *(void *)(v74 + 784);
        unint64_t v41 = (int *)(v40 + 40 * v39);
        if ((*v41 & 0x80000000) == 0) {
          goto LABEL_56;
        }
        if ((v78 - 15) <= 0x9Bu) {
          unsigned __int8 v38 = sub_1CB8C2FBC(&v78);
        }
        unsigned __int8 v79 = v38;
        int v42 = sub_1CB87E200(&v79);
        int v43 = *v41;
        uint64_t v44 = v40 + 40 * v39;
        uint64_t v45 = (llvm::APInt *)(v44 + 8);
        unsigned int v46 = *(_DWORD *)(v44 + 16);
        if (v46 > 0x40)
        {
          int v49 = v42;
          int v48 = llvm::APInt::countLeadingOnesSlowCase(v45);
          int v42 = v49;
          uint64_t v47 = (uint64_t)v77;
        }
        else
        {
          uint64_t v47 = (uint64_t)v77;
          if (!v46)
          {
            if (!v42)
            {
LABEL_29:
              uint64_t v51 = sub_1CD7EBF14(v47, 0, a4, (llvm *)v78, 0, 0, 0);
              goto LABEL_55;
            }
            goto LABEL_31;
          }
          int v48 = __clz(~(*(void *)v45 << -(char)v46));
        }
        uint64_t v50 = (llvm::LLVMContext *)(v42 - v48);
        if (v42 == v48) {
          goto LABEL_29;
        }
        if (v48)
        {
          if ((int)v50 > 31)
          {
            switch(v50)
            {
              case 0x20:
                uint64_t v53 = 0;
                uint64_t v54 = 4;
LABEL_38:
                uint64_t v55 = 5;
LABEL_52:
                uint64_t v56 = (llvm *)v78;
                uint64_t v57 = sub_1CD7EDE1C(v47, v55, v53);
                uint64_t v60 = *(void *)(v47 + 832);
                if (v60) {
                  LOWORD(v60) = *(_WORD *)(v60 + 8);
                }
                uint64_t v51 = sub_1CCFDED5C(v47, v54, a4, v56, 0, (uint64_t)v35, v7, v59, v57, v58, v60);
LABEL_55:
                int v61 = (char *)v80 + v29;
                *(void *)int v61 = v51;
                *((_DWORD *)v61 + 2) = v52;
                goto LABEL_56;
              case 0x40:
                uint64_t v53 = 0;
                uint64_t v54 = 4;
LABEL_51:
                uint64_t v55 = 6;
                goto LABEL_52;
              case 0x80:
                uint64_t v53 = 0;
                uint64_t v54 = 4;
LABEL_70:
                uint64_t v55 = 7;
                goto LABEL_52;
            }
LABEL_67:
            uint64_t v53 = llvm::IntegerType::get(*(llvm::IntegerType **)(v47 + 56), v50);
            uint64_t v55 = 0;
            goto LABEL_48;
          }
          if (v50 != 1)
          {
            if (v50 != 16)
            {
              if (v50 == 8)
              {
                uint64_t v53 = 0;
                uint64_t v54 = 4;
                uint64_t v55 = 3;
                goto LABEL_52;
              }
              goto LABEL_67;
            }
            uint64_t v53 = 0;
            uint64_t v55 = 4;
LABEL_48:
            uint64_t v54 = 4;
            goto LABEL_52;
          }
          uint64_t v53 = 0;
          uint64_t v54 = 4;
LABEL_45:
          uint64_t v55 = 2;
          goto LABEL_52;
        }
LABEL_31:
        if ((v43 & 0x7FFFFFFFu) >= 2)
        {
          uint64_t v53 = v42 - (v43 & 0x7FFFFFFFu);
          if ((int)v53 > 30)
          {
            uint64_t v47 = (uint64_t)v77;
            switch(v53)
            {
              case 0x1F:
                uint64_t v53 = 0;
                uint64_t v54 = 3;
                goto LABEL_38;
              case 0x3F:
                uint64_t v53 = 0;
                uint64_t v54 = 3;
                goto LABEL_51;
              case 0x7F:
                uint64_t v53 = 0;
                uint64_t v54 = 3;
                goto LABEL_70;
            }
            goto LABEL_71;
          }
          uint64_t v47 = (uint64_t)v77;
          switch(v53)
          {
            case 0:
              uint64_t v54 = 3;
              goto LABEL_45;
            case 0xF:
              uint64_t v53 = 0;
              uint64_t v54 = 3;
              uint64_t v55 = 4;
              goto LABEL_52;
            case 7:
              uint64_t v53 = 0;
              uint64_t v55 = 3;
              break;
            default:
LABEL_71:
              uint64_t v53 = llvm::IntegerType::get(*(llvm::IntegerType **)(v47 + 56), (llvm::LLVMContext *)(v53 + 1));
              uint64_t v55 = 0;
              break;
          }
          uint64_t v54 = 3;
          goto LABEL_52;
        }
LABEL_56:
        v29 += 16;
        ++v30;
        BOOL v20 = a4;
        a2 = v77;
      }
      while (v75 != v29);
    }
    unint64_t v26 = sub_1CCFA51B8((uint64_t)a2, v20, (long long *)v80, v71, v78, v70, v69, v67, *(void *)(a1 + 176), 0);
    unint64_t v27 = &v83[2 * v73];
    uint64_t *v27 = (uint64_t)v26;
    *((_DWORD *)v27 + 2) = v28;
    unsigned int v19 = v71 + v72;
    LODWORD(v81) = 0;
    uint64_t v18 = v73 + 1;
  }
  while (v73 + 1 != v68);
  uint64_t v17 = *(unsigned int *)(a1 + 8);
LABEL_74:
  uint64_t v63 = sub_1CD7F9A18((uint64_t)a2, *(uint64_t **)a1, v17);
  uint64_t v64 = a2[104];
  if (v64) {
    __int16 v65 = *(_WORD *)(v64 + 8);
  }
  else {
    __int16 v65 = 0;
  }
  unsigned int v10 = sub_1CD7FF854(a2, (const char *)0x37, a4, v63, v62, v83, v84, v65);
  if (v80 != v82) {
    free(v80);
  }
  if (v83 != v85) {
    free(v83);
  }
  return v10;
}

uint64_t *sub_1CCFA51B8(uint64_t a1, const llvm::APInt *a2, long long *a3, uint64_t a4, unsigned __int8 a5, llvm *a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v357 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v346 = a5;
  uint64_t v344 = a6;
  uint64_t v345 = a7;
  uint64_t v17 = *(uint64_t **)(a1 + 24);
  uint64_t v18 = a5;
  uint64_t v19 = (*(uint64_t (**)(uint64_t *, uint64_t, const llvm::APInt *, long long *, uint64_t, void, llvm *, uint64_t, uint64_t))(*v17 + 1824))(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  if (v19) {
    return (uint64_t *)v19;
  }
  uint64_t v339 = v17;
  uint64_t v341 = a2;
  uint64_t v342 = a1;
  int v20 = a6;
  if ((_BYTE)a6)
  {
    uint64_t v21 = a8;
    unint64_t v22 = a3;
    uint64_t v23 = a7;
    if (a6 - 15 >= 0x9C)
    {
      uint64_t v24 = *(uint64_t **)a3;
      unint64_t v25 = (void *)*((void *)a3 + 1);
      if (a4 >= 2)
      {
        uint64_t v26 = a4;
        if (a6 - 2 < 6) {
          goto LABEL_6;
        }
        goto LABEL_25;
      }
      goto LABEL_30;
    }
LABEL_11:
    uint64_t v352 = a6;
    uint64_t v353 = v23;
    unint64_t v31 = *(void *)(v342 + 24);
    long long v351 = *v22;
    if (a4 <= 1)
    {
      uint64_t v24 = (uint64_t *)v351;
      unsigned int v32 = DWORD2(v351);
      int v33 = v341;
      unsigned int v34 = (llvm::APFloatBase *)v342;
      goto LABEL_13;
    }
    LOBYTE(v349) = 0;
    uint64_t v350 = 0;
    unsigned __int8 v348 = 0;
    unsigned int v347 = 0;
    int v86 = *(llvm::LLVMContext **)(v342 + 56);
    if ((a9 & 0xFF00000000) != 0) {
      unsigned int VectorTypeBreakdown = (*(uint64_t (**)(unint64_t, llvm::LLVMContext *, uint64_t, llvm *, uint64_t, llvm **, unsigned int *, unsigned __int8 *))(*(void *)v31 + 464))(v31, v86, a9, a6, v23, &v349, &v347, &v348);
    }
    else {
      unsigned int VectorTypeBreakdown = llvm::TargetLoweringBase::getVectorTypeBreakdown(v31, v86, (uint64_t)a6, v23, &v349, &v347, &v348);
    }
    unsigned int v108 = VectorTypeBreakdown;
    int v354 = v356;
    uint64_t v355 = 0x800000000;
    sub_1CD3E535C((uint64_t *)&v354, v347, 0, 0);
    unsigned int v34 = (llvm::APFloatBase *)v342;
    if (v347 == v108)
    {
      if (v108)
      {
        for (uint64_t i = 0; i != v108; ++i)
        {
          uint64_t v112 = sub_1CCFA51B8(v342, v341, &v22[i], 1, v18, v349, v350, v21, a9, 0);
          uint64_t v113 = (char *)v354 + i * 16;
          *(void *)uint64_t v113 = v112;
          *((_DWORD *)v113 + 2) = v109;
        }
      }
    }
    else
    {
      if (v108) {
        BOOL v114 = v347 == 0;
      }
      else {
        BOOL v114 = 1;
      }
      if (!v114)
      {
        unsigned int v115 = 0;
        uint64_t v116 = v108 / v347;
        do
        {
          uint64_t v117 = sub_1CCFA51B8(v342, v341, &v22[v115 * v116], v116, v18, v349, v350, v21, a9, 0);
          uint64_t v118 = (char *)v354 + 16 * v115;
          *(void *)uint64_t v118 = v117;
          *((_DWORD *)v118 + 2) = v109;
          ++v115;
        }
        while (v115 != v347);
      }
    }
    if ((_BYTE)v349)
    {
      int v33 = v341;
      if (v349 - 15 >= 0x9C) {
        goto LABEL_115;
      }
    }
    else
    {
      int v33 = v341;
      if ((*(_DWORD *)(v350 + 8) & 0xFE) != 0x12)
      {
LABEL_115:
        uint64_t v119 = *(llvm::LLVMContext **)(v342 + 56);
        unint64_t v120 = sub_1CD3DD468((unsigned __int8 *)&v349, v109, v110);
        uint64_t v122 = (llvm *)sub_1CB8E5DAC(v119, v120, v121, v347, 0);
LABEL_118:
        uint64_t v129 = v123;
        if ((_BYTE)v349) {
          BOOL v130 = v349 - 15 < 0x9C;
        }
        else {
          BOOL v130 = (*(_DWORD *)(v350 + 8) & 0xFE) == 18;
        }
        if (v130) {
          uint64_t v131 = 149;
        }
        else {
          uint64_t v131 = 146;
        }
        uint64_t v132 = *(void *)(v342 + 832);
        if (v132) {
          uint64_t v133 = *(unsigned __int16 *)(v132 + 8);
        }
        else {
          uint64_t v133 = 0;
        }
        uint64_t v24 = sub_1CD7FF4E8((void *)v342, (const char *)v131, v33, v122, v129, (uint64_t *)v354, v355, v133);
        unsigned int v32 = v134;
        *(void *)&long long v351 = v24;
        DWORD2(v351) = v134;
        if (v354 != v356)
        {
          uint64_t v135 = v24;
          free(v354);
          uint64_t v24 = v135;
        }
        int v20 = v352;
LABEL_13:
        uint64_t v35 = (void **)(v24[5] + 16 * v32);
        int v37 = (llvm *)*v35;
        uint64_t v36 = v35[1];
        __int16 v349 = v37;
        uint64_t v350 = (uint64_t)v36;
        int v38 = v37;
        if (v20 == v37)
        {
          if (v20 || v36 == (_DWORD *)v353) {
            return v24;
          }
        }
        else if ((_BYTE)v37)
        {
          if (v37 - 15 < 0x9C) {
            goto LABEL_21;
          }
          uint64_t v39 = (uint64_t)v24;
          uint64_t v40 = sub_1CB87E200((unsigned __int8 *)&v349);
          int v42 = v41;
          int v20 = v352;
          goto LABEL_32;
        }
        if ((v36[2] & 0xFE) == 0x12)
        {
LABEL_21:
          uint64_t v43 = (uint64_t)v24;
          if (v20)
          {
            uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v352);
            int v46 = v45;
            int v38 = v349;
          }
          else
          {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
            int v46 = v56;
          }
          if (v38) {
            uint64_t v57 = sub_1CB87E200((unsigned __int8 *)&v349);
          }
          else {
            uint64_t v57 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v349);
          }
          if (ExtendedSizeInBits == v57 && v46 == v58)
          {
            uint64_t v59 = v352;
            uint64_t v60 = v353;
            int v61 = (void *)*((void *)&v351 + 1);
            uint64_t v64 = *((void *)v34 + 104);
            if (v64) {
              __int16 v63 = *(_WORD *)(v64 + 8);
            }
            else {
              __int16 v63 = 0;
            }
            __int16 v65 = v34;
            uint64_t v66 = 216;
            uint64_t v67 = (uint64_t)v33;
            uint64_t v68 = (uint64_t *)v43;
            return sub_1CD7F3564(v65, (const char *)v66, v67, v59, v60, (uint64_t)v68, v61, v63);
          }
          unint64_t v136 = sub_1CC4A0738((llvm::EVT *)&v349);
          if (v136 == sub_1CC4A0738((llvm::EVT *)&v352))
          {
            uint64_t v138 = v352;
            uint64_t v139 = v353;
            uint64_t v24 = (uint64_t *)v43;
          }
          else
          {
            uint64_t v165 = (llvm::LLVMContext *)*((void *)v34 + 7);
            if ((_BYTE)v349)
            {
              LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v349);
              unint64_t v169 = 0;
              uint64_t v168 = 0;
            }
            else
            {
              unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v350 + 24), 0, v137);
              uint64_t v168 = v167;
              unint64_t v169 = EVT & 0xFFFFFFFFFFFFFF00;
            }
            uint64_t v170 = v169 | EVT;
            BOOL v171 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v352);
            uint64_t v172 = (llvm *)sub_1CB882C1C(v165, v170, v168, v171);
            uint64_t v174 = v173;
            __int16 v349 = v172;
            uint64_t v350 = v173;
            uint64_t v175 = *((void *)&v351 + 1);
            uint64_t v176 = sub_1CD7EC9F4((uint64_t)v34, 0, (uint64_t)v33, 0);
            uint64_t v179 = *((void *)v34 + 104);
            if (v179) {
              LOWORD(v179) = *(_WORD *)(v179 + 8);
            }
            uint64_t v24 = sub_1CCFDED5C((uint64_t)v34, 151, v33, v172, v174, v43, v175, v178, v176, v177, v179);
            DWORD2(v351) = v180;
            uint64_t v138 = v352;
            uint64_t v139 = v353;
            if (v349 == v352 && ((_BYTE)v349 || v350 == v353)) {
              return v24;
            }
          }
          return (uint64_t *)sub_1CD7EB67C((uint64_t)v34, (uint64_t)v24, *((uint64_t *)&v351 + 1), (uint64_t)v33, (uint64_t)v138, v139);
        }
        uint64_t v39 = (uint64_t)v24;
        uint64_t v40 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v349);
        int v42 = v53;
LABEL_32:
        if (v20) {
          uint64_t v54 = sub_1CB87E200((unsigned __int8 *)&v352);
        }
        else {
          uint64_t v54 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
        }
        if (v40 == v54 && v42 == v55)
        {
          uint64_t v59 = v352;
          if ((_BYTE)v352)
          {
            if (*(void *)(v31 + 8 * v352 + 96)) {
              goto LABEL_42;
            }
          }
        }
        if (sub_1CD3DB440((llvm::EVT *)&v352, v55) != 1)
        {
          if ((_BYTE)v352) {
            uint64_t v84 = sub_1CB87E200((unsigned __int8 *)&v352);
          }
          else {
            uint64_t v84 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
          }
          uint64_t v140 = v84;
          int v141 = v85;
          if ((_BYTE)v349) {
            uint64_t v142 = sub_1CB87E200((unsigned __int8 *)&v349);
          }
          else {
            uint64_t v142 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v349);
          }
          if (v140 == v142 && v141 == v143)
          {
            uint64_t v59 = v352;
LABEL_42:
            uint64_t v60 = v353;
            int v61 = (void *)*((void *)&v351 + 1);
            uint64_t v62 = *((void *)v34 + 104);
            if (v62) {
              __int16 v63 = *(_WORD *)(v62 + 8);
            }
            else {
              __int16 v63 = 0;
            }
            __int16 v65 = v34;
            uint64_t v66 = 216;
            uint64_t v67 = (uint64_t)v33;
            uint64_t v68 = (uint64_t *)v39;
            return sub_1CD7F3564(v65, (const char *)v66, v67, v59, v60, (uint64_t)v68, v61, v63);
          }
          char v211 = (char)v349;
          if (v352 == v349)
          {
            if ((_BYTE)v352 || v353 == v350) {
              goto LABEL_386;
            }
            int v354 = v349;
            uint64_t v355 = v350;
          }
          else
          {
            int v354 = v349;
            uint64_t v355 = v350;
            if ((_BYTE)v352)
            {
              uint64_t v212 = sub_1CB87E200((unsigned __int8 *)&v352);
LABEL_379:
              unint64_t v276 = v212;
              int v277 = v213;
              if (v211) {
                unint64_t v278 = sub_1CB87E200((unsigned __int8 *)&v354);
              }
              else {
                unint64_t v278 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v354);
              }
              if ((v277 != 1 || v279 == 1) && v276 < v278)
              {
                if ((_BYTE)v352) {
                  int v280 = (llvm::LLVMContext *)sub_1CB87E200((unsigned __int8 *)&v352);
                }
                else {
                  int v280 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
                }
                if ((int)v280 <= 31)
                {
                  switch(v280)
                  {
                    case 1:
                      uint64_t v288 = 0;
                      uint64_t v289 = 2;
LABEL_472:
                      unsigned int v34 = (llvm::APFloatBase *)v342;
LABEL_473:
                      int v33 = v341;
                      goto LABEL_474;
                    case 0x10:
                      uint64_t v288 = 0;
                      uint64_t v289 = 4;
                      goto LABEL_472;
                    case 8:
                      uint64_t v288 = 0;
                      uint64_t v289 = 3;
                      goto LABEL_472;
                  }
                }
                else
                {
                  switch(v280)
                  {
                    case 0x20:
                      uint64_t v288 = 0;
                      uint64_t v289 = 5;
LABEL_474:
                      uint64_t v330 = *((void *)v34 + 104);
                      if (v330) {
                        __int16 v331 = *(_WORD *)(v330 + 8);
                      }
                      else {
                        __int16 v331 = 0;
                      }
                      uint64_t v332 = sub_1CD7F3564(v34, (const char *)0xC9, (uint64_t)v33, (llvm *)v289, v288, v39, *((void **)&v351 + 1), v331);
                      DWORD2(v351) = v333;
                      return (uint64_t *)sub_1CD7EF724((uint64_t)v34, (uint64_t)v352, v353, (uint64_t)v332, *((uint64_t *)&v351 + 1));
                    case 0x40:
                      uint64_t v288 = 0;
                      uint64_t v289 = 6;
                      goto LABEL_472;
                    case 0x80:
                      uint64_t v288 = 0;
                      uint64_t v289 = 7;
                      goto LABEL_472;
                  }
                }
                unsigned int v34 = (llvm::APFloatBase *)v342;
                uint64_t v288 = llvm::IntegerType::get(*(llvm::IntegerType **)(v342 + 56), v280);
                uint64_t v289 = 0;
                goto LABEL_473;
              }
LABEL_386:
              uint64_t v281 = (llvm::LLVMContext *)*((void *)v34 + 7);
              int v354 = "non-trivial scalar-to-vector conversion";
              v356[8] = 259;
              sub_1CCFC6464(v281, v21, (uint64_t)&v354);
              return sub_1CD3DD4D8((uint64_t)v34, v352, v353);
            }
          }
          uint64_t v212 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
          goto LABEL_379;
        }
        if ((_BYTE)v352)
        {
          unsigned __int8 v210 = sub_1CB8C2FBC((unsigned __int8 *)&v352);
          unint64_t v209 = 0;
          uint64_t v208 = 0;
        }
        else
        {
          unint64_t v206 = llvm::EVT::getEVT(*(llvm::EVT **)(v353 + 24), 0, v83);
          uint64_t v208 = v207;
          unint64_t v209 = v206 & 0xFFFFFFFFFFFFFF00;
          unsigned __int8 v210 = v206;
        }
        int v354 = (void *)(v209 | v210);
        uint64_t v355 = (uint64_t)v208;
        if (sub_1CD3DB440((llvm::EVT *)&v352, v207) != 1)
        {
LABEL_414:
          uint64_t v295 = *((void *)v34 + 104);
          if (v295) {
            uint64_t v296 = *(unsigned __int16 *)(v295 + 8);
          }
          else {
            uint64_t v296 = 0;
          }
          return sub_1CD7FF4E8(v34, (const char *)0x92, v33, v352, v353, (uint64_t *)&v351, 1, v296);
        }
        int v268 = v349;
        if (v349 == v210)
        {
          if (v210 || v208 == (const char *)v350) {
            goto LABEL_414;
          }
        }
        else if (v210)
        {
          uint64_t v282 = sub_1CB87E200((unsigned __int8 *)&v354);
          int v284 = v283;
          int v268 = v349;
          goto LABEL_396;
        }
        uint64_t v282 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v354);
        int v284 = v285;
LABEL_396:
        if (v268) {
          uint64_t v286 = sub_1CB87E200((unsigned __int8 *)&v349);
        }
        else {
          uint64_t v286 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v349);
        }
        if (v282 == v286 && v284 == v287)
        {
          uint64_t v290 = *((void *)v34 + 104);
          if (v290) {
            __int16 v291 = *(_WORD *)(v290 + 8);
          }
          else {
            __int16 v291 = 0;
          }
          uint64_t v293 = (uint64_t)sub_1CD7F3564(v34, (const char *)0xD8, (uint64_t)v33, (llvm *)v354, v355, v39, *((void **)&v351 + 1), v291);
          goto LABEL_413;
        }
        if ((_BYTE)v352)
        {
          if (((_BYTE)v352 + 104) < 0x13u
            || ((_BYTE)v352 - 8) < 7u
            || ((_BYTE)v352 - 75) < 0x2Du)
          {
LABEL_480:
            int v33 = v341;
            unsigned int v34 = (llvm::APFloatBase *)v342;
            uint64_t v293 = sub_1CD7EB1C8(v342, v39, *((uint64_t *)&v351 + 1), (uint64_t)v341, (uint64_t)v354, v355);
            goto LABEL_413;
          }
        }
        else
        {
          if ((*(_DWORD *)(v353 + 8) & 0xFE) == 0x12) {
            unsigned int v327 = *(unsigned __int8 *)(**(void **)(v353 + 16) + 8);
          }
          else {
            unsigned int v327 = *(_DWORD *)(v353 + 8);
          }
          if (v327 <= 6) {
            goto LABEL_480;
          }
        }
        int v33 = v341;
        unsigned int v34 = (llvm::APFloatBase *)v342;
        uint64_t v293 = sub_1CD7EB67C(v342, v39, *((uint64_t *)&v351 + 1), (uint64_t)v341, (uint64_t)v354, v355);
LABEL_413:
        *(void *)&long long v351 = v293;
        DWORD2(v351) = v294;
        goto LABEL_414;
      }
    }
    unsigned int v124 = *(llvm::LLVMContext **)(v342 + 56);
    unint64_t v125 = sub_1CD3DD468((unsigned __int8 *)&v349, v109, v110);
    uint64_t v127 = v126;
    unint64_t v128 = sub_1CC4A0738((llvm::EVT *)&v349);
    uint64_t v122 = (llvm *)sub_1CB882C1C(v124, v125, v127, (llvm::Type *)(v128 & 0xFFFFFFFF00000000 | (v108 * v128)));
    goto LABEL_118;
  }
  uint64_t v23 = a7;
  uint64_t v21 = a8;
  unint64_t v22 = a3;
  if ((*(_DWORD *)(a7 + 8) & 0xFE) == 0x12) {
    goto LABEL_11;
  }
  uint64_t v24 = *(uint64_t **)a3;
  unint64_t v25 = (void *)*((void *)a3 + 1);
  if (a4 > 1)
  {
    uint64_t v26 = a4;
    if (*(_DWORD *)(a7 + 8) == 13)
    {
LABEL_6:
      unint64_t v338 = (unint64_t)v25;
      int v28 = sub_1CB87E200(&v346);
      if (v27 == 1) {
      if ((_BYTE)v344)
      }
        unsigned int v29 = sub_1CB87E200((unsigned __int8 *)&v344);
      else {
        unsigned int v29 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
      }
      unsigned int v72 = v29;
      if (v30 == 1) {
      int v73 = 1 << (__clz(v26) ^ 0x1F);
      }
      if ((v26 & (v26 - 1)) == 0) {
        int v73 = v26;
      }
      unsigned int v337 = v73;
      uint64_t v74 = (llvm::LLVMContext *)(v73 * v28);
      int v336 = v28;
      if (v74 == v72)
      {
        uint64_t v76 = (uint64_t)v344;
        uint64_t v75 = v345;
        goto LABEL_62;
      }
      if ((int)v74 > 31)
      {
        switch(v74)
        {
          case 0x20:
            uint64_t v81 = 0;
            int v354 = 0;
            LODWORD(v355) = 0;
            unsigned int v82 = (llvm::IntegerType **)(v342 + 56);
            uint64_t v340 = 5;
            unsigned int v80 = v337;
            goto LABEL_68;
          case 0x40:
            uint64_t v81 = 0;
            int v354 = 0;
            LODWORD(v355) = 0;
            uint64_t v335 = (llvm::IntegerType **)(v342 + 56);
            uint64_t v340 = 6;
            unsigned int v80 = v73;
            goto LABEL_124;
          case 0x80:
            uint64_t v81 = 0;
            int v354 = 0;
            LODWORD(v355) = 0;
            uint64_t v335 = (llvm::IntegerType **)(v342 + 56);
            uint64_t v340 = 7;
            unsigned int v80 = v73;
            goto LABEL_151;
        }
        goto LABEL_399;
      }
      switch(v74)
      {
        case 1:
          uint64_t v107 = 2;
          break;
        case 0x10:
          uint64_t v81 = 0;
          int v354 = 0;
          LODWORD(v355) = 0;
          uint64_t v335 = (llvm::IntegerType **)(v342 + 56);
          uint64_t v340 = 4;
LABEL_149:
          uint64_t v78 = 0;
          uint64_t v79 = 3;
          unsigned int v80 = v337;
          goto LABEL_152;
        case 8:
          uint64_t v107 = 3;
          break;
        default:
LABEL_399:
          uint64_t v75 = llvm::IntegerType::get(*(llvm::IntegerType **)(v342 + 56), v74);
          uint64_t v76 = 0;
LABEL_62:
          int v354 = 0;
          LODWORD(v355) = 0;
          uint64_t v77 = (llvm::LLVMContext *)(v74 >> 1);
          uint64_t v335 = (llvm::IntegerType **)(v342 + 56);
          uint64_t v340 = v76;
          if (v74 >> 1 <= 0x1F)
          {
            if (v77 == 1)
            {
              uint64_t v78 = 0;
              uint64_t v79 = 2;
              unsigned int v80 = v337;
              uint64_t v81 = v75;
              goto LABEL_152;
            }
            if (v77 == 8)
            {
              uint64_t v21 = a8;
              LODWORD(v26) = a4;
              unint64_t v22 = a3;
              uint64_t v81 = v75;
              goto LABEL_149;
            }
            uint64_t v21 = a8;
            LODWORD(v26) = a4;
            unint64_t v22 = a3;
            unsigned int v80 = v337;
            unsigned int v82 = (llvm::IntegerType **)(v342 + 56);
            uint64_t v81 = v75;
            if (v77 != 16)
            {
LABEL_100:
              uint64_t v335 = v82;
              uint64_t v78 = llvm::IntegerType::get(*v82, v77);
              uint64_t v79 = 0;
              goto LABEL_152;
            }
LABEL_68:
            uint64_t v335 = v82;
            uint64_t v78 = 0;
            uint64_t v79 = 4;
            goto LABEL_152;
          }
          if (v77 == 32)
          {
            unsigned int v80 = v337;
            uint64_t v81 = v75;
LABEL_124:
            uint64_t v78 = 0;
            uint64_t v79 = 5;
            goto LABEL_152;
          }
          unsigned int v80 = v337;
          uint64_t v81 = v75;
          if (v77 != 64)
          {
            if (v77 != 128)
            {
              unsigned int v82 = (llvm::IntegerType **)(v342 + 56);
              goto LABEL_100;
            }
            uint64_t v78 = 0;
            uint64_t v79 = 7;
LABEL_152:
            if (v80 < 3)
            {
              uint64_t v150 = *(void *)(v342 + 832);
              if (v150) {
                __int16 v151 = *(_WORD *)(v150 + 8);
              }
              else {
                __int16 v151 = 0;
              }
              uint64_t v149 = a9;
              int v354 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xD8, (uint64_t)v341, (llvm *)v79, v78, *(void *)v22, *((void **)v22 + 1), v151);
              LODWORD(v355) = v152;
              uint64_t v153 = *(void *)(v342 + 832);
              if (v153) {
                __int16 v154 = *(_WORD *)(v153 + 8);
              }
              else {
                __int16 v154 = 0;
              }
              uint64_t v144 = v342;
              uint64_t v147 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xD8, (uint64_t)v341, (llvm *)v79, v78, *((void *)v22 + 2), *((void **)v22 + 3), v154);
            }
            else
            {
              uint64_t v144 = v342;
              int v354 = (void *)sub_1CCFA51B8(v342, v341, v22, v80 >> 1, v346, v79, v78, v21, 0, 0);
              LODWORD(v355) = v145;
              LODWORD(v26) = a4;
              uint64_t v147 = (void *)sub_1CCFA51B8(v342, v341, &v22[v80 >> 1], v80 >> 1, v346, v79, v78, v21, 0, 0);
              uint64_t v149 = a9;
            }
            if (*(unsigned char *)(*(void *)(**(void **)(v144 + 40) + 40) + 272))
            {
              uint64_t v155 = v354;
              uint64_t v156 = v355;
              int v354 = v147;
              LODWORD(v355) = v146;
            }
            else
            {
              uint64_t v155 = v147;
              uint64_t v156 = v146;
              uint64_t v147 = v354;
            }
            uint64_t v157 = *(void *)(v342 + 832);
            if (v157) {
              LOWORD(v157) = *(_WORD *)(v157 + 8);
            }
            int v158 = sub_1CCFDED5C(v342, 54, v341, (llvm *)v340, v81, (uint64_t)v147, v355, v148, (uint64_t)v155, v156, v157);
            uint64_t v24 = v158;
            unsigned int v160 = v159;
            if (v26 <= v80)
            {
              int v52 = v341;
              uint64_t v48 = v342;
LABEL_168:
              unint64_t v25 = (void *)(v160 | v338 & 0xFFFFFFFF00000000);
              goto LABEL_185;
            }
            uint64_t v161 = (llvm::LLVMContext *)((v26 - v80) * v336);
            unint64_t v162 = v158;
            if ((int)v161 <= 31)
            {
              switch(v161)
              {
                case 1:
                  uint64_t v163 = 0;
                  uint64_t v164 = 2;
                  goto LABEL_420;
                case 0x10:
                  uint64_t v163 = 0;
                  uint64_t v164 = 4;
                  goto LABEL_420;
                case 8:
                  uint64_t v163 = 0;
                  uint64_t v164 = 3;
                  goto LABEL_420;
              }
            }
            else
            {
              switch(v161)
              {
                case 0x20:
                  uint64_t v163 = 0;
                  uint64_t v164 = 5;
                  goto LABEL_420;
                case 0x40:
                  uint64_t v163 = 0;
                  uint64_t v164 = 6;
                  goto LABEL_420;
                case 0x80:
                  uint64_t v163 = 0;
                  uint64_t v164 = 7;
                  goto LABEL_420;
              }
            }
            uint64_t v163 = llvm::IntegerType::get(*v335, v161);
            uint64_t v164 = 0;
LABEL_420:
            uint64_t v334 = v149;
            int v52 = v341;
            uint64_t v48 = v342;
            __int16 v297 = (void *)sub_1CCFA51B8(v342, v341, &v22[v80], v26 - v80, v346, v164, v163, v21, v334, 0);
            int v354 = v162;
            LODWORD(v355) = v160;
            if (*(unsigned char *)(*(void *)(**(void **)(v342 + 40) + 40) + 272))
            {
              uint64_t v299 = (uint64_t)v162;
              int v354 = v297;
              LODWORD(v355) = v298;
            }
            else
            {
              uint64_t v299 = (uint64_t)v297;
              unsigned int v160 = v298;
            }
            unint64_t v300 = v160;
            uint64_t v301 = (llvm::LLVMContext *)(v336 * v26);
            if ((int)v301 <= 31)
            {
              switch(v301)
              {
                case 1:
                  uint64_t v302 = 0;
                  uint64_t v303 = 2;
                  goto LABEL_434;
                case 0x10:
                  uint64_t v302 = 0;
                  uint64_t v303 = 4;
                  goto LABEL_434;
                case 8:
                  uint64_t v302 = 0;
                  uint64_t v303 = 3;
                  goto LABEL_434;
              }
            }
            else
            {
              switch(v301)
              {
                case 0x20:
                  uint64_t v302 = 0;
                  uint64_t v303 = 5;
LABEL_434:
                  uint64_t v304 = *(void *)(v342 + 832);
                  if (v304) {
                    __int16 v305 = *(_WORD *)(v304 + 8);
                  }
                  else {
                    __int16 v305 = 0;
                  }
                  int v306 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xC8, (uint64_t)v341, (llvm *)v303, v302, v299, (void *)v300, v305);
                  uint64_t v308 = v307;
                  unint64_t v310 = sub_1CD3E3904((unsigned int *)&v354);
                  if (v309 == 1) {
                  unint64_t ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v339, v303, v302, *(void *)(**(void **)(v342 + 40) + 40) + 272, 1);
                  }
                  unint64_t v313 = sub_1CD7EBF14(v342, (uint64_t)v310, v341, ShiftAmountTy, v312, 0, 0);
                  uint64_t v316 = *(void *)(v342 + 832);
                  if (v316) {
                    LOWORD(v316) = *(_WORD *)(v316 + 8);
                  }
                  unint64_t v317 = sub_1CCFDED5C(v342, 175, v341, (llvm *)v303, v302, (uint64_t)v306, v308, v315, (uint64_t)v313, v314, v316);
                  uint64_t v319 = v318;
                  uint64_t v320 = *(void *)(v342 + 832);
                  if (v320) {
                    __int16 v321 = *(_WORD *)(v320 + 8);
                  }
                  else {
                    __int16 v321 = 0;
                  }
                  uint64_t v322 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xC7, (uint64_t)v341, (llvm *)v303, v302, (uint64_t)v354, (void *)v355, v321);
                  int v354 = v322;
                  LODWORD(v355) = v324;
                  uint64_t v325 = *(void *)(v342 + 832);
                  if (v325) {
                    LOWORD(v325) = *(_WORD *)(v325 + 8);
                  }
                  uint64_t v24 = sub_1CCFDED5C(v342, 172, v341, (llvm *)v303, v302, (uint64_t)v322, v355, v323, (uint64_t)v317, v319, v325);
                  unsigned int v160 = v326;
                  goto LABEL_168;
                case 0x40:
                  uint64_t v302 = 0;
                  uint64_t v303 = 6;
                  goto LABEL_434;
                case 0x80:
                  uint64_t v302 = 0;
                  uint64_t v303 = 7;
                  goto LABEL_434;
              }
            }
            uint64_t v328 = v299;
            uint64_t v329 = llvm::IntegerType::get(*v335, v301);
            uint64_t v299 = v328;
            uint64_t v302 = v329;
            uint64_t v303 = 0;
            goto LABEL_434;
          }
LABEL_151:
          uint64_t v78 = 0;
          uint64_t v79 = 6;
          goto LABEL_152;
      }
      unsigned int v80 = v337;
      uint64_t v340 = v107;
      uint64_t v81 = 0;
      int v354 = 0;
      LODWORD(v355) = 0;
      unsigned int v82 = (llvm::IntegerType **)(v342 + 56);
      uint64_t v77 = (llvm::LLVMContext *)(v74 >> 1);
      goto LABEL_100;
    }
LABEL_25:
    if ((a5 + 104) < 0x13u || (a5 - 8) < 7u || (a5 - 75) <= 0x2Cu)
    {
      uint64_t v69 = *(void *)(v342 + 832);
      unint64_t v70 = (unint64_t)v25;
      if (v69) {
        __int16 v71 = *(_WORD *)(v69 + 8);
      }
      else {
        __int16 v71 = 0;
      }
      int v52 = v341;
      int v91 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xD8, (uint64_t)v341, (llvm *)0xB, 0, (uint64_t)v24, v25, v71);
      uint64_t v93 = v92;
      uint64_t v94 = *(void *)(v342 + 832);
      if (v94) {
        __int16 v95 = *(_WORD *)(v94 + 8);
      }
      else {
        __int16 v95 = 0;
      }
      uint64_t v96 = sub_1CD7F3564((llvm::APFloatBase *)v342, (const char *)0xD8, (uint64_t)v341, (llvm *)0xB, 0, *((void *)v22 + 2), *((void **)v22 + 3), v95);
      uint64_t v99 = (uint64_t)v96;
      uint64_t v100 = v97;
      if (*(unsigned char *)(*(void *)(**(void **)(v342 + 40) + 40) + 272)) {
        BOOL v101 = 1;
      }
      else {
        BOOL v101 = a6 == 14;
      }
      if (v101)
      {
        uint64_t v102 = (uint64_t)v91;
        uint64_t v103 = v93;
      }
      else
      {
        uint64_t v102 = (uint64_t)v96;
        uint64_t v103 = v97;
        uint64_t v99 = (uint64_t)v91;
        uint64_t v100 = v93;
      }
      uint64_t v104 = *(void *)(v342 + 832);
      if (v104) {
        LOWORD(v104) = *(_WORD *)(v104 + 8);
      }
      uint64_t v48 = v342;
      uint64_t v24 = sub_1CCFDED5C(v342, 54, v341, a6, a7, v99, v100, v98, v102, v103, v104);
      unint64_t v106 = v70;
      goto LABEL_184;
    }
    unint64_t v47 = (unint64_t)v25;
    uint64_t v48 = v342;
    int v49 = *(llvm::IntegerType **)(v342 + 56);
    if (v20) {
      uint64_t v50 = sub_1CB87E200((unsigned __int8 *)&v344);
    }
    else {
      uint64_t v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
    }
    uint64_t v88 = (llvm::LLVMContext *)v50;
    if (v51 == 1) {
    if ((int)v88 <= 31)
    }
    {
      switch(v88)
      {
        case 1:
          uint64_t v89 = 0;
          uint64_t v90 = 2;
          goto LABEL_183;
        case 0x10:
          uint64_t v89 = 0;
          uint64_t v90 = 4;
          goto LABEL_183;
        case 8:
          uint64_t v89 = 0;
          uint64_t v90 = 3;
          goto LABEL_183;
      }
    }
    else
    {
      switch(v88)
      {
        case 0x20:
          uint64_t v89 = 0;
          uint64_t v90 = 5;
LABEL_183:
          int v52 = v341;
          uint64_t v24 = (uint64_t *)sub_1CCFA51B8(v342, v341, v22, v26, v346, v90, v89, v21, a9, 0);
          unint64_t v106 = v47;
LABEL_184:
          unint64_t v25 = (void *)(v106 & 0xFFFFFFFF00000000 | v105);
          goto LABEL_185;
        case 0x40:
          uint64_t v89 = 0;
          uint64_t v90 = 6;
          goto LABEL_183;
        case 0x80:
          uint64_t v89 = 0;
          uint64_t v90 = 7;
          goto LABEL_183;
      }
    }
    uint64_t v89 = llvm::IntegerType::get(v49, v88);
    uint64_t v90 = 0;
    goto LABEL_183;
  }
LABEL_30:
  int v52 = a2;
  uint64_t v48 = v342;
LABEL_185:
  uint64_t v181 = v24[5] + 16 * v25;
  uint64_t v183 = *(llvm **)v181;
  uint64_t v182 = *(void *)(v181 + 8);
  uint64_t v352 = v183;
  uint64_t v353 = v182;
  if (v344 != v183)
  {
    if ((_BYTE)v183)
    {
      BOOL v184 = ((_BYTE)v183 - 120) >= 0x20u && ((_BYTE)v183 - 2) >= 6u;
      if (v184 && ((_BYTE)v183 - 15) >= 0x3Cu) {
        goto LABEL_259;
      }
LABEL_201:
      if ((_BYTE)v344)
      {
        BOOL v189 = v344 - 8 < 7
            || v344 - 75 < 0x2D
            || ((_BYTE)v344 + 104) < 0x13u;
        if (v344 == v183 || !v189) {
          goto LABEL_259;
        }
        unint64_t v190 = (unint64_t)v25;
        uint64_t v191 = v24;
        int v354 = v183;
        uint64_t v355 = v182;
        uint64_t v192 = sub_1CB87E200((unsigned __int8 *)&v344);
      }
      else
      {
        if ((*(_DWORD *)(v345 + 8) & 0xFE) == 0x12) {
          unsigned int v194 = *(unsigned __int8 *)(**(void **)(v345 + 16) + 8);
        }
        else {
          unsigned int v194 = *(_DWORD *)(v345 + 8);
        }
        if (v194 > 6 || !(_BYTE)v183 && v345 == v182) {
          goto LABEL_259;
        }
        unint64_t v190 = (unint64_t)v25;
        uint64_t v191 = v24;
        int v354 = v183;
        uint64_t v355 = v182;
        uint64_t v192 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
      }
      unint64_t v195 = v192;
      int v196 = v193;
      if ((_BYTE)v183) {
        unint64_t v197 = sub_1CB87E200((unsigned __int8 *)&v354);
      }
      else {
        unint64_t v197 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v354);
      }
      uint64_t v24 = v191;
      unint64_t v25 = (void *)v190;
      if ((v196 != 1 || v198 == 1) && v195 < v197)
      {
        unsigned int v199 = *(llvm::IntegerType **)(v48 + 56);
        if ((_BYTE)v344) {
          uint64_t v200 = sub_1CB87E200((unsigned __int8 *)&v344);
        }
        else {
          uint64_t v200 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
        }
        uint64_t v202 = (llvm::LLVMContext *)v200;
        uint64_t v203 = (uint64_t)v191;
        if (v201 == 1)
        {
          uint64_t v203 = (uint64_t)v191;
        }
        if ((int)v202 <= 31)
        {
          switch(v202)
          {
            case 1:
              uint64_t v204 = 0;
              uint64_t v205 = 2;
              goto LABEL_255;
            case 0x10:
              uint64_t v204 = 0;
              uint64_t v205 = 4;
              goto LABEL_255;
            case 8:
              uint64_t v204 = 0;
              uint64_t v205 = 3;
              goto LABEL_255;
          }
        }
        else
        {
          switch(v202)
          {
            case 0x20:
              uint64_t v204 = 0;
              uint64_t v205 = 5;
LABEL_255:
              uint64_t v352 = (llvm *)v205;
              uint64_t v353 = v204;
              uint64_t v214 = *(void *)(v48 + 832);
              if (v214) {
                __int16 v215 = *(_WORD *)(v214 + 8);
              }
              else {
                __int16 v215 = 0;
              }
              uint64_t v24 = sub_1CD7F3564((llvm::APFloatBase *)v48, (const char *)0xC9, (uint64_t)v52, (llvm *)v205, v204, v203, (void *)v190, v215);
              unint64_t v25 = (void *)(v190 & 0xFFFFFFFF00000000 | v216);
              goto LABEL_259;
            case 0x40:
              uint64_t v204 = 0;
              uint64_t v205 = 6;
              goto LABEL_255;
            case 0x80:
              uint64_t v204 = 0;
              uint64_t v205 = 7;
              goto LABEL_255;
          }
        }
        uint64_t v292 = llvm::IntegerType::get(v199, v202);
        uint64_t v203 = (uint64_t)v191;
        uint64_t v204 = v292;
        uint64_t v205 = 0;
        goto LABEL_255;
      }
LABEL_259:
      unint64_t v217 = (unint64_t)v25;
      uint64_t v218 = (uint64_t)v24;
      if ((_BYTE)v352) {
        uint64_t v219 = sub_1CB87E200((unsigned __int8 *)&v352);
      }
      else {
        uint64_t v219 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v352);
      }
      uint64_t v221 = v219;
      int v222 = v220;
      if ((_BYTE)v344) {
        uint64_t v223 = sub_1CB87E200((unsigned __int8 *)&v344);
      }
      else {
        uint64_t v223 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
      }
      uint64_t v68 = (uint64_t *)v218;
      if (v221 == v223 && v222 == v224)
      {
        uint64_t v59 = v344;
        uint64_t v60 = v345;
        uint64_t v225 = *(void *)(v48 + 832);
        if (v225) {
          __int16 v63 = *(_WORD *)(v225 + 8);
        }
        else {
          __int16 v63 = 0;
        }
        __int16 v65 = (llvm::APFloatBase *)v48;
        uint64_t v66 = 216;
LABEL_358:
        uint64_t v67 = (uint64_t)v52;
LABEL_359:
        int v61 = (void *)v217;
        return sub_1CD7F3564(v65, (const char *)v66, v67, v59, v60, (uint64_t)v68, v61, v63);
      }
      if ((_BYTE)v352)
      {
        if (((_BYTE)v352 - 120) >= 0x20u
          && ((_BYTE)v352 - 2) >= 6u
          && ((_BYTE)v352 - 15) >= 0x3Cu)
        {
          goto LABEL_292;
        }
      }
      else
      {
        uint64_t v226 = v353;
        unsigned int v227 = *(_DWORD *)(v353 + 8);
        unsigned int v228 = v227;
        if ((*(_DWORD *)(v353 + 8) & 0xFE) == 0x12) {
          unsigned int v228 = *(unsigned __int8 *)(**(void **)(v353 + 16) + 8);
        }
        if (v228 != 13) {
          goto LABEL_303;
        }
      }
      if ((_BYTE)v344)
      {
        if (v344 - 120 < 0x20
          || v344 - 2 < 6
          || v344 - 15 < 0x3C)
        {
          char v229 = (char)v352;
          if (v344 == v352)
          {
LABEL_282:
            uint64_t v60 = v345;
            goto LABEL_352;
          }
          int v354 = v352;
          uint64_t v355 = v353;
          uint64_t v231 = sub_1CB87E200((unsigned __int8 *)&v344);
          goto LABEL_343;
        }
      }
      else
      {
        uint64_t v60 = v345;
        if ((*(_DWORD *)(v345 + 8) & 0xFE) == 0x12) {
          int v230 = *(unsigned __int8 *)(**(void **)(v345 + 16) + 8);
        }
        else {
          int v230 = *(_DWORD *)(v345 + 8);
        }
        if (v230 == 13)
        {
          char v229 = (char)v352;
          if (!(_BYTE)v352 && v345 == v353)
          {
LABEL_352:
            uint64_t v59 = v344;
            uint64_t v260 = *(void *)(v48 + 832);
            if (v260) {
              __int16 v63 = *(_WORD *)(v260 + 8);
            }
            else {
              __int16 v63 = 0;
            }
            __int16 v65 = (llvm::APFloatBase *)v48;
            uint64_t v66 = 200;
            goto LABEL_358;
          }
          int v354 = v352;
          uint64_t v355 = v353;
          uint64_t v231 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
LABEL_343:
          unint64_t v255 = v231;
          int v256 = v232;
          if (v229) {
            unint64_t v257 = sub_1CB87E200((unsigned __int8 *)&v354);
          }
          else {
            unint64_t v257 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v354);
          }
          uint64_t v68 = (uint64_t *)v218;
          if (v256 == 1 && v258 != 1) {
            goto LABEL_282;
          }
          uint64_t v60 = v345;
          if (v255 >= v257) {
            goto LABEL_352;
          }
          if ((a10 & 0xFF00000000) != 0)
          {
            unint64_t v269 = v352;
            uint64_t v270 = v353;
            uint64_t v271 = sub_1CD7EDE1C(v48, (uint64_t)v344, v345);
            uint64_t v274 = *(void *)(v48 + 832);
            if (v274) {
              LOWORD(v274) = *(_WORD *)(v274 + 8);
            }
            uint64_t v68 = sub_1CCFDED5C(v48, a10, v52, v269, v270, v218, v217, v273, v271, v272, v274);
            unint64_t v217 = v217 & 0xFFFFFFFF00000000 | v275;
            uint64_t v60 = v345;
          }
          uint64_t v59 = v344;
LABEL_350:
          uint64_t v259 = *(void *)(v48 + 832);
          if (v259) {
            __int16 v63 = *(_WORD *)(v259 + 8);
          }
          else {
            __int16 v63 = 0;
          }
          __int16 v65 = (llvm::APFloatBase *)v48;
          uint64_t v66 = 201;
          goto LABEL_358;
        }
      }
      if ((_BYTE)v352)
      {
LABEL_292:
        if (((_BYTE)v352 + 104) >= 0x13u
          && ((_BYTE)v352 - 8) >= 7u
          && ((_BYTE)v352 - 75) >= 0x2Du)
        {
          if (v352 != 171) {
            goto LABEL_485;
          }
          if ((_BYTE)v344)
          {
            if (v344 - 120 >= 0x20
              && v344 - 2 >= 6
              && v344 - 15 >= 0x3C
              || v344 == v352)
            {
              goto LABEL_485;
            }
            int v354 = v352;
            uint64_t v355 = v353;
            uint64_t v233 = sub_1CB87E200((unsigned __int8 *)&v344);
          }
          else
          {
            if ((*(_DWORD *)(v345 + 8) & 0xFE) == 0x12) {
              int v247 = *(unsigned __int8 *)(**(void **)(v345 + 16) + 8);
            }
            else {
              int v247 = *(_DWORD *)(v345 + 8);
            }
            if (v247 != 13) {
              goto LABEL_485;
            }
            int v354 = v352;
            uint64_t v355 = v353;
            uint64_t v233 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
          }
          unint64_t v248 = v233;
          int v249 = v234;
          unint64_t v250 = sub_1CB87E200((unsigned __int8 *)&v354);
          if ((v249 != 1 || v251 == 1) && v248 < v250)
          {
            uint64_t v252 = *(void *)(v48 + 832);
            if (v252) {
              __int16 v253 = *(_WORD *)(v252 + 8);
            }
            else {
              __int16 v253 = 0;
            }
            uint64_t v68 = sub_1CD7F3564((llvm::APFloatBase *)v48, (const char *)0xD8, (uint64_t)v52, (llvm *)6, 0, v218, (void *)v217, v253);
            unint64_t v217 = v217 & 0xFFFFFFFF00000000 | v254;
            uint64_t v59 = v344;
            uint64_t v60 = v345;
            goto LABEL_350;
          }
LABEL_485:
          llvm::report_fatal_error((llvm *)"Unknown mismatch in getCopyFromParts!", (const llvm::Twine *)1);
        }
LABEL_306:
        if ((_BYTE)v344)
        {
          if (((_BYTE)v344 + 104) >= 0x13u
            && ((_BYTE)v344 - 8) >= 7u
            && ((_BYTE)v344 - 75) >= 0x2Du)
          {
            goto LABEL_485;
          }
        }
        else
        {
          if ((*(_DWORD *)(v345 + 8) & 0xFE) == 0x12) {
            unsigned int v235 = *(unsigned __int8 *)(**(void **)(v345 + 16) + 8);
          }
          else {
            unsigned int v235 = *(_DWORD *)(v345 + 8);
          }
          if (v235 > 6) {
            goto LABEL_485;
          }
        }
        uint64_t v236 = *(void *)(v218 + 40) + 16 * v217;
        uint64_t v238 = *(void **)v236;
        uint64_t v237 = *(void **)(v236 + 8);
        if (v344 == v238)
        {
          uint64_t v239 = v345;
          if ((_BYTE)v344 || (void *)v345 == v237)
          {
LABEL_327:
            uint64_t v59 = v344;
            uint64_t v246 = *(void *)(v48 + 832);
            if (v246) {
              __int16 v63 = *(_WORD *)(v246 + 8);
            }
            else {
              __int16 v63 = 0;
            }
            __int16 v65 = (llvm::APFloatBase *)v48;
            uint64_t v66 = 215;
            uint64_t v67 = (uint64_t)v52;
            uint64_t v60 = v239;
            goto LABEL_359;
          }
          int v354 = v238;
          uint64_t v355 = (uint64_t)v237;
        }
        else
        {
          int v354 = v238;
          uint64_t v355 = (uint64_t)v237;
          if ((_BYTE)v344)
          {
            uint64_t v240 = sub_1CB87E200((unsigned __int8 *)&v344);
LABEL_322:
            unint64_t v242 = v240;
            int v243 = v241;
            if ((_BYTE)v238) {
              unint64_t v244 = sub_1CB87E200((unsigned __int8 *)&v354);
            }
            else {
              unint64_t v244 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v354);
            }
            uint64_t v68 = (uint64_t *)v218;
            if (v243 == 1 && v245 != 1)
            {
              uint64_t v239 = v345;
            }
            else
            {
              uint64_t v239 = v345;
              if (v242 < v244)
              {
                BOOL v262 = v344;
                unsigned __int8 v263 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v339 + 32))(v339, *(void *)(**(void **)(v48 + 40) + 40) + 272, 0);
                uint64_t v264 = sub_1CD7EBF14(v48, 1, v52, (llvm *)v263, 0, 1, 0);
                uint64_t v267 = *(void *)(v48 + 832);
                if (v267) {
                  LOWORD(v267) = *(_WORD *)(v267 + 8);
                }
                return sub_1CCFDED5C(v48, 212, v52, v262, v239, v218, v217, v266, (uint64_t)v264, v265, v267);
              }
            }
            goto LABEL_327;
          }
        }
        uint64_t v240 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v344);
        goto LABEL_322;
      }
      uint64_t v226 = v353;
      unsigned int v227 = *(unsigned __int8 *)(v353 + 8);
LABEL_303:
      if ((v227 & 0xFE) == 0x12) {
        unsigned int v227 = *(unsigned __int8 *)(**(void **)(v226 + 16) + 8);
      }
      if (v227 > 6) {
        goto LABEL_485;
      }
      goto LABEL_306;
    }
LABEL_198:
    if ((*(_DWORD *)(v182 + 8) & 0xFE) == 0x12) {
      int v186 = *(unsigned __int8 *)(**(void **)(v182 + 16) + 8);
    }
    else {
      int v186 = *(_DWORD *)(v182 + 8);
    }
    if (v186 != 13) {
      goto LABEL_259;
    }
    goto LABEL_201;
  }
  if ((_BYTE)v183) {
    BOOL v185 = 1;
  }
  else {
    BOOL v185 = v182 == v345;
  }
  if (!v185) {
    goto LABEL_198;
  }
  return v24;
}

void sub_1CCFA6E8C(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int8 a7, unsigned __int8 *a8, uint64_t a9, unsigned int a10)
{
  uint64_t v16 = a1;
  uint64_t v285 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v273 = a7;
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 1816))(*(void *)(a1 + 24), a1)) {
    return;
  }
  uint64_t v17 = (uint64_t *)(*(void *)(a3 + 40) + 16 * a4);
  uint64_t v18 = v17[1];
  uint64_t v271 = *v17;
  uint64_t v272 = v18;
  uint64_t v269 = v16;
  if ((_BYTE)v271)
  {
    if (v271 - 15 < 0x9C) {
      goto LABEL_4;
    }
LABEL_11:
    int v265 = sub_1CB87E200(&v273);
    if (v27 == 1)
    {
      if (!a6) {
        return;
      }
    }
    else if (!a6)
    {
      return;
    }
    int v28 = v273;
    if (v273 == v271 && (v273 || !v272)) {
      goto LABEL_253;
    }
    uint64_t v266 = a8;
    unint64_t v29 = v265 * a6;
    if ((_BYTE)v271) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v271);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v271);
    }
    unint64_t v38 = ExtendedSizeInBits;
    if (v31 == 1) {
    if (v38 < v29)
    }
    {
      uint64_t v39 = (llvm *)v273;
      if ((v273 + 104) >= 0x13u
        && (v273 - 8) >= 7u
        && (v273 - 75) > 0x2Cu)
      {
        goto LABEL_36;
      }
      if ((_BYTE)v271)
      {
        if ((v271 + 104) >= 0x13u
          && (v271 - 8) >= 7u
          && (v271 - 75) >= 0x2Du)
        {
LABEL_36:
          if ((_BYTE)v271)
          {
            if ((v271 + 104) >= 0x13u
              && (v271 - 8) >= 7u
              && (v271 - 75) >= 0x2Du)
            {
              goto LABEL_207;
            }
            uint64_t v40 = *(llvm::IntegerType **)(v16 + 56);
            uint64_t v41 = sub_1CB87E200((unsigned __int8 *)&v271);
            goto LABEL_74;
          }
          uint64_t v56 = v272;
          unsigned int v57 = *(unsigned __int8 *)(v272 + 8);
LABEL_70:
          if ((v57 & 0xFE) == 0x12) {
            unsigned int v57 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
          }
          if (v57 >= 7)
          {
LABEL_207:
            if ((int)v29 <= 31)
            {
              switch(v29)
              {
                case 1:
                  uint64_t v61 = 0;
                  uint64_t v62 = 2;
                  goto LABEL_218;
                case 0x10:
                  uint64_t v61 = 0;
                  uint64_t v62 = 4;
                  goto LABEL_218;
                case 8:
                  uint64_t v61 = 0;
                  uint64_t v62 = 3;
                  goto LABEL_218;
              }
            }
            else
            {
              switch(v29)
              {
                case 0x20:
                  uint64_t v61 = 0;
                  uint64_t v62 = 5;
LABEL_218:
                  uint64_t v271 = v62;
                  uint64_t v272 = v61;
                  uint64_t v177 = *(void *)(v16 + 832);
                  if (v177) {
                    __int16 v178 = *(_WORD *)(v177 + 8);
                  }
                  else {
                    __int16 v178 = 0;
                  }
                  uint64_t v179 = (llvm::APFloatBase *)v16;
                  uint64_t v180 = a10;
LABEL_228:
                  a3 = (uint64_t)sub_1CD7F3564(v179, (const char *)v180, (uint64_t)a2, (llvm *)v62, v61, a3, (void *)a4, v178);
                  if (v273 == 171)
                  {
                    uint64_t v183 = *(void *)(v16 + 832);
                    if (v183) {
                      __int16 v184 = *(_WORD *)(v183 + 8);
                    }
                    else {
                      __int16 v184 = 0;
                    }
                    a3 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v16, (const char *)0xD8, (uint64_t)a2, (llvm *)0xAB, 0, a3, (void *)(a4 & 0xFFFFFFFF00000000 | v182), v184);
                    a4 = v185 | a4 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    a4 = a4 & 0xFFFFFFFF00000000 | v182;
                  }
                  goto LABEL_234;
                case 0x40:
                  uint64_t v61 = 0;
                  uint64_t v62 = 6;
                  goto LABEL_218;
                case 0x80:
                  uint64_t v61 = 0;
                  uint64_t v62 = 7;
                  goto LABEL_218;
              }
            }
            uint64_t v61 = llvm::IntegerType::get(*(llvm::IntegerType **)(v16 + 56), (llvm::LLVMContext *)v29);
            uint64_t v62 = 0;
            goto LABEL_218;
          }
          uint64_t v40 = *(llvm::IntegerType **)(v16 + 56);
          uint64_t v41 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v271);
LABEL_74:
          __int16 v65 = (llvm::LLVMContext *)v41;
          if (v42 == 1) {
          if ((int)v65 <= 31)
          }
          {
            switch(v65)
            {
              case 1:
                uint64_t v66 = 0;
                uint64_t v67 = 2;
                goto LABEL_203;
              case 0x10:
                uint64_t v66 = 0;
                uint64_t v67 = 4;
                goto LABEL_203;
              case 8:
                uint64_t v66 = 0;
                uint64_t v67 = 3;
                goto LABEL_203;
            }
          }
          else
          {
            switch(v65)
            {
              case 0x20:
                uint64_t v66 = 0;
                uint64_t v67 = 5;
LABEL_203:
                uint64_t v271 = v67;
                uint64_t v272 = v66;
                uint64_t v174 = *(void *)(v16 + 832);
                if (v174) {
                  __int16 v175 = *(_WORD *)(v174 + 8);
                }
                else {
                  __int16 v175 = 0;
                }
                a3 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v16, (const char *)0xD8, (uint64_t)a2, (llvm *)v67, v66, a3, (void *)a4, v175);
                a4 = a4 & 0xFFFFFFFF00000000 | v176;
                goto LABEL_207;
              case 0x40:
                uint64_t v66 = 0;
                uint64_t v67 = 6;
                goto LABEL_203;
              case 0x80:
                uint64_t v66 = 0;
                uint64_t v67 = 7;
                goto LABEL_203;
            }
          }
          uint64_t v66 = llvm::IntegerType::get(v40, v65);
          uint64_t v67 = 0;
          goto LABEL_203;
        }
      }
      else
      {
        uint64_t v56 = v272;
        unsigned int v57 = *(_DWORD *)(v272 + 8);
        unsigned int v63 = v57;
        if ((*(_DWORD *)(v272 + 8) & 0xFE) == 0x12) {
          unsigned int v63 = *(unsigned __int8 *)(**(void **)(v272 + 16) + 8);
        }
        if (v63 > 6) {
          goto LABEL_70;
        }
      }
      uint64_t v64 = *(void *)(v16 + 832);
      if (v64) {
        __int16 v49 = *(_WORD *)(v64 + 8);
      }
      else {
        __int16 v49 = 0;
      }
      int v58 = (llvm::APFloatBase *)v16;
      uint64_t v59 = 215;
LABEL_95:
      a3 = (uint64_t)sub_1CD7F3564(v58, (const char *)v59, (uint64_t)a2, v39, 0, a3, (void *)a4, v49);
      a4 = a4 & 0xFFFFFFFF00000000 | v80;
      goto LABEL_234;
    }
    if ((_BYTE)v271) {
      uint64_t v43 = sub_1CB87E200((unsigned __int8 *)&v271);
    }
    else {
      uint64_t v43 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v271);
    }
    uint64_t v47 = v43;
    if (v44 == 1) {
    if (v265 == v47)
    }
    {
      uint64_t v39 = (llvm *)v273;
      uint64_t v48 = *(void *)(v16 + 832);
      if (v48) {
        __int16 v49 = *(_WORD *)(v48 + 8);
      }
      else {
        __int16 v49 = 0;
      }
      int v58 = (llvm::APFloatBase *)v16;
      uint64_t v59 = 216;
      goto LABEL_95;
    }
    if ((_BYTE)v271) {
      uint64_t v50 = sub_1CB87E200((unsigned __int8 *)&v271);
    }
    else {
      uint64_t v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v271);
    }
    unint64_t v60 = v50;
    if (v51 == 1) {
    if (v60 <= v29)
    }
    {
LABEL_234:
      uint64_t v186 = *(void *)(a3 + 40) + 16 * a4;
      int v187 = *(llvm **)v186;
      uint64_t v188 = *(void *)(v186 + 8);
      uint64_t v271 = (uint64_t)v187;
      uint64_t v272 = v188;
      int v189 = v187;
      if (a6 == 1)
      {
        if (v28 == v187 && (v28 || !v188)) {
          goto LABEL_253;
        }
        unint64_t v190 = *(llvm::LLVMContext **)(v16 + 56);
        v283[0] = "scalar-to-vector conversion failed";
        v284[8] = 259;
        sub_1CCFC6464(v190, v266, (uint64_t)v283);
        int v46 = (llvm *)v273;
        uint64_t v191 = *(void *)(v16 + 832);
        if (v191) {
          __int16 v34 = *(_WORD *)(v191 + 8);
        }
        else {
          __int16 v34 = 0;
        }
        unsigned int v32 = (llvm::APFloatBase *)v16;
        uint64_t v45 = (uint64_t)a2;
        goto LABEL_251;
      }
      unint64_t v261 = a5 + 16 * a6;
      if ((a6 & (a6 - 1)) == 0)
      {
LABEL_241:
        uint64_t v192 = *(llvm::IntegerType **)(v16 + 56);
        if (v189) {
          uint64_t v193 = sub_1CB87E200((unsigned __int8 *)&v271);
        }
        else {
          uint64_t v193 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v271);
        }
        unint64_t v195 = (llvm::LLVMContext *)v193;
        if (v194 == 1) {
        if ((int)v195 <= 31)
        }
        {
          switch(v195)
          {
            case 1:
              uint64_t v196 = 0;
              uint64_t v197 = 2;
              goto LABEL_265;
            case 0x10:
              uint64_t v196 = 0;
              uint64_t v197 = 4;
              goto LABEL_265;
            case 8:
              uint64_t v196 = 0;
              uint64_t v197 = 3;
              goto LABEL_265;
          }
        }
        else
        {
          switch(v195)
          {
            case 0x20:
              uint64_t v196 = 0;
              uint64_t v197 = 5;
LABEL_265:
              uint64_t v204 = *(void *)(v16 + 832);
              if (v204) {
                __int16 v205 = *(_WORD *)(v204 + 8);
              }
              else {
                __int16 v205 = 0;
              }
              *(void *)a5 = sub_1CD7F3564((llvm::APFloatBase *)v16, (const char *)0xD8, (uint64_t)a2, (llvm *)v197, v196, a3, (void *)a4, v205);
              *(_DWORD *)(a5 + 8) = v206;
              if (a6 < 2) {
                goto LABEL_303;
              }
              unsigned int v207 = a6;
              unsigned int v262 = a6;
              while (1)
              {
                unsigned int v264 = v207;
                unsigned int v208 = 0;
                unint64_t v209 = (llvm::LLVMContext *)((v207 * v265) >> 1);
                unsigned int v268 = v207 >> 1;
                do
                {
                  if ((int)v209 <= 31)
                  {
                    switch(v209)
                    {
                      case 1:
                        uint64_t v210 = 0;
                        uint64_t v211 = 2;
                        goto LABEL_282;
                      case 0x10:
                        uint64_t v210 = 0;
                        uint64_t v211 = 4;
                        goto LABEL_282;
                      case 8:
                        uint64_t v210 = 0;
                        uint64_t v211 = 3;
                        goto LABEL_282;
                    }
                  }
                  else
                  {
                    switch(v209)
                    {
                      case 0x20:
                        uint64_t v210 = 0;
                        uint64_t v211 = 5;
                        goto LABEL_282;
                      case 0x40:
                        uint64_t v210 = 0;
                        uint64_t v211 = 6;
                        goto LABEL_282;
                      case 0x80:
                        uint64_t v210 = 0;
                        uint64_t v211 = 7;
                        goto LABEL_282;
                    }
                  }
                  uint64_t v210 = llvm::IntegerType::get(*(llvm::IntegerType **)(v16 + 56), v209);
                  uint64_t v211 = 0;
LABEL_282:
                  uint64_t v212 = (uint64_t *)(a5 + 16 * v208);
                  uint64_t v213 = *v212;
                  uint64_t v214 = v212[1];
                  __int16 v215 = sub_1CD7EB364(v16, 1, a2, 0);
                  uint64_t v218 = *(void *)(v16 + 832);
                  if (v218) {
                    LOWORD(v218) = *(_WORD *)(v218 + 8);
                  }
                  unint64_t v219 = a5;
                  unint64_t v220 = a5 + 16 * (v268 + v208);
                  *(void *)unint64_t v220 = sub_1CCFDED5C(v16, 53, a2, (llvm *)v211, v210, v213, v214, v217, (uint64_t)v215, v216, v218);
                  *(_DWORD *)(v220 + 8) = v221;
                  uint64_t v222 = *v212;
                  uint64_t v223 = v212[1];
                  uint64_t v16 = v269;
                  int v224 = sub_1CD7EB364(v269, 0, a2, 0);
                  uint64_t v227 = *(void *)(v269 + 832);
                  if (v227) {
                    LOWORD(v227) = *(_WORD *)(v227 + 8);
                  }
                  unsigned int v228 = sub_1CCFDED5C(v269, 53, a2, (llvm *)v211, v210, v222, v223, v226, (uint64_t)v224, v225, v227);
                  *uint64_t v212 = (uint64_t)v228;
                  *((_DWORD *)v212 + 2) = v229;
                  if (v209 == v265 && (v273 != v211 || !v273 && v210))
                  {
                    uint64_t v230 = *(void *)(v269 + 832);
                    if (v230) {
                      __int16 v231 = *(_WORD *)(v230 + 8);
                    }
                    else {
                      __int16 v231 = 0;
                    }
                    *uint64_t v212 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v269, (const char *)0xD8, (uint64_t)a2, (llvm *)v273, 0, (uint64_t)v228, (void *)v212[1], v231);
                    *((_DWORD *)v212 + 2) = v232;
                    uint64_t v233 = *(void *)(v269 + 832);
                    if (v233) {
                      __int16 v234 = *(_WORD *)(v233 + 8);
                    }
                    else {
                      __int16 v234 = 0;
                    }
                    *(void *)unint64_t v220 = sub_1CD7F3564((llvm::APFloatBase *)v269, (const char *)0xD8, (uint64_t)a2, (llvm *)v273, 0, *(void *)v220, *(void **)(v220 + 8), v234);
                    *(_DWORD *)(v220 + 8) = v235;
                  }
                  v208 += v264;
                  a5 = v219;
                }
                while (v208 < v262);
                unsigned int v207 = v268;
                if (v264 <= 3)
                {
LABEL_303:
                  unint64_t v236 = v261 - 16;
                  if (*(unsigned char *)(*(void *)(**(void **)(v16 + 40) + 40) + 272)) {
                    BOOL v237 = v236 > a5;
                  }
                  else {
                    BOOL v237 = 0;
                  }
                  if (v237)
                  {
                    unint64_t v238 = a5 + 16;
                    do
                    {
                      *(_OWORD *)int v283 = *(_OWORD *)(v238 - 16);
                      int v239 = *(_DWORD *)(v236 + 8);
                      *(void *)(v238 - 16) = *(void *)v236;
                      *(_DWORD *)(v238 - 8) = v239;
                      *(void **)unint64_t v236 = v283[0];
                      *(_DWORD *)(v236 + 8) = v283[1];
                      v236 -= 16;
                      BOOL v240 = v238 >= v236;
                      v238 += 16;
                    }
                    while (!v240);
                  }
                  return;
                }
              }
            case 0x40:
              uint64_t v196 = 0;
              uint64_t v197 = 6;
              goto LABEL_265;
            case 0x80:
              uint64_t v196 = 0;
              uint64_t v197 = 7;
              goto LABEL_265;
          }
        }
        uint64_t v196 = llvm::IntegerType::get(v192, v195);
        uint64_t v197 = 0;
        goto LABEL_265;
      }
      char v198 = __clz(a6) ^ 0x1F;
      uint64_t v199 = (1 << v198);
      uint64_t v263 = (v265 << v198);
      uint64_t v200 = sub_1CD7EC970(v16, v263, (uint64_t)v187, v188, a2, 1);
      uint64_t v203 = *(void *)(v16 + 832);
      if (v203) {
        LOWORD(v203) = *(_WORD *)(v203 + 8);
      }
      int v241 = sub_1CCFDED5C(v16, 177, a2, v187, v188, a3, a4, v202, (uint64_t)v200, v201, v203);
      sub_1CCFA6E8C(v16, a2, v241, v242, a5 + 16 * v199, a6 - v199, v273, v266, a9, 200);
      if (*(unsigned char *)(*(void *)(**(void **)(v16 + 40) + 40) + 272))
      {
        if (a6 != v199)
        {
          unint64_t v243 = v261 - 16;
          if (a5 + 16 * v199 < v261 - 16)
          {
            unint64_t v244 = a5 + 16 * v199 + 16;
            do
            {
              *(_OWORD *)int v283 = *(_OWORD *)(v244 - 16);
              int v245 = *(_DWORD *)(v243 + 8);
              *(void *)(v244 - 16) = *(void *)v243;
              *(_DWORD *)(v244 - 8) = v245;
              *(void **)unint64_t v243 = v283[0];
              *(_DWORD *)(v243 + 8) = v283[1];
              v243 -= 16;
              BOOL v240 = v244 >= v243;
              v244 += 16;
            }
            while (!v240);
          }
        }
      }
      if ((int)v263 <= 31)
      {
        switch(v263)
        {
          case 1:
            uint64_t v246 = 0;
            uint64_t v247 = 2;
            goto LABEL_349;
          case 0x10:
            uint64_t v246 = 0;
            uint64_t v247 = 4;
            goto LABEL_349;
          case 8:
            uint64_t v246 = 0;
            uint64_t v247 = 3;
            goto LABEL_349;
        }
      }
      else
      {
        switch(v263)
        {
          case 0x20:
            uint64_t v246 = 0;
            uint64_t v247 = 5;
LABEL_349:
            uint64_t v271 = v247;
            uint64_t v272 = v246;
            uint64_t v255 = *(void *)(v16 + 832);
            if (v255) {
              __int16 v256 = *(_WORD *)(v255 + 8);
            }
            else {
              __int16 v256 = 0;
            }
            a3 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v16, (const char *)0xC9, (uint64_t)a2, (llvm *)v247, v246, a3, (void *)a4, v256);
            a4 = a4 & 0xFFFFFFFF00000000 | v257;
            int v189 = v271;
            a6 = v199;
            goto LABEL_241;
          case 0x40:
            uint64_t v246 = 0;
            uint64_t v247 = 6;
            goto LABEL_349;
          case 0x80:
            uint64_t v246 = 0;
            uint64_t v247 = 7;
            goto LABEL_349;
        }
      }
      uint64_t v246 = llvm::IntegerType::get(*(llvm::IntegerType **)(v16 + 56), (llvm::LLVMContext *)v263);
      uint64_t v247 = 0;
      goto LABEL_349;
    }
    if ((int)v29 <= 31)
    {
      switch(v29)
      {
        case 1:
          uint64_t v61 = 0;
          uint64_t v62 = 2;
          goto LABEL_224;
        case 0x10:
          uint64_t v61 = 0;
          uint64_t v62 = 4;
          goto LABEL_224;
        case 8:
          uint64_t v61 = 0;
          uint64_t v62 = 3;
          goto LABEL_224;
      }
    }
    else
    {
      switch(v29)
      {
        case 0x20:
          uint64_t v61 = 0;
          uint64_t v62 = 5;
LABEL_224:
          uint64_t v271 = v62;
          uint64_t v272 = v61;
          uint64_t v181 = *(void *)(v16 + 832);
          if (v181) {
            __int16 v178 = *(_WORD *)(v181 + 8);
          }
          else {
            __int16 v178 = 0;
          }
          uint64_t v179 = (llvm::APFloatBase *)v16;
          uint64_t v180 = 201;
          goto LABEL_228;
        case 0x40:
          uint64_t v61 = 0;
          uint64_t v62 = 6;
          goto LABEL_224;
        case 0x80:
          uint64_t v61 = 0;
          uint64_t v62 = 7;
          goto LABEL_224;
      }
    }
    uint64_t v61 = llvm::IntegerType::get(*(llvm::IntegerType **)(v16 + 56), (llvm::LLVMContext *)v29);
    uint64_t v62 = 0;
    goto LABEL_224;
  }
  if ((*(_DWORD *)(v18 + 8) & 0xFE) != 0x12) {
    goto LABEL_11;
  }
LABEL_4:
  unsigned __int8 v282 = a7;
  uint64_t v19 = *v17;
  uint64_t v20 = v17[1];
  uint64_t v280 = v19;
  uint64_t v281 = v20;
  unint64_t v21 = *(void *)(v16 + 24);
  if (a6 == 1)
  {
    LOBYTE(v278) = a7;
    uint64_t v279 = 0;
    if (a7 == v19 && (a7 || !v20)) {
      goto LABEL_253;
    }
    uint64_t v22 = sub_1CB87E200(&v282);
    int v24 = v23;
    if ((_BYTE)v280) {
      uint64_t v25 = sub_1CB87E200((unsigned __int8 *)&v280);
    }
    else {
      uint64_t v25 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v280);
    }
    if (v22 == v25 && v24 == v26)
    {
      unsigned int v32 = (llvm::APFloatBase *)v269;
      uint64_t v33 = *(void *)(v269 + 832);
      if (v33) {
        __int16 v34 = *(_WORD *)(v33 + 8);
      }
      else {
        __int16 v34 = 0;
      }
      uint64_t v45 = (uint64_t)a2;
      int v46 = (llvm *)v282;
LABEL_251:
      uint64_t v137 = (uint64_t)sub_1CD7F3564(v32, (const char *)0xD8, v45, v46, 0, a3, (void *)a4, v34);
LABEL_252:
      a3 = v137;
      LODWORD(a4) = v138;
      goto LABEL_253;
    }
    uint64_t v35 = sub_1CCFC6558((void *)v269, a3, a4, a2, (llvm *)v282, 0);
    if (v35)
    {
      LODWORD(a4) = v36;
      a3 = (uint64_t)v35;
LABEL_253:
      *(void *)a5 = a3;
      *(_DWORD *)(a5 + 8) = a4;
      return;
    }
    if (v282 - 15 <= 0x9B)
    {
      if ((_BYTE)v278)
      {
        LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v278);
        unint64_t v84 = 0;
        unsigned int v82 = 0;
      }
      else
      {
        unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v279 + 24), 0, v37);
        unint64_t v84 = EVT & 0xFFFFFFFFFFFFFF00;
      }
      v283[0] = (void *)(v84 | EVT);
      v283[1] = v82;
      if ((_BYTE)v280)
      {
        LOBYTE(v109) = sub_1CB8C2FBC((unsigned __int8 *)&v280);
        unint64_t v112 = 0;
        uint64_t v111 = 0;
      }
      else
      {
        unint64_t v109 = llvm::EVT::getEVT(*(llvm::EVT **)(v281 + 24), 0, v83);
        uint64_t v111 = v110;
        unint64_t v112 = v109 & 0xFFFFFFFFFFFFFF00;
      }
      if (LOBYTE(v283[0]) == v109 && ((_BYTE)v109 || v283[1] == v111)
        || sub_1CD787E7C((unsigned __int8 *)v283, v112 | v109, (uint64_t)v111))
      {
        unint64_t v113 = sub_1CC4A0738((llvm::EVT *)&v278);
        if (v113 == sub_1CC4A0738((llvm::EVT *)&v280))
        {
          uint64_t v114 = v282;
          uint64_t v115 = v269;
          uint64_t v116 = (uint64_t)a2;
          uint64_t v117 = a3;
          uint64_t v118 = a4;
LABEL_335:
          uint64_t v137 = sub_1CD7EB67C(v115, v117, v118, v116, v114, 0);
          goto LABEL_252;
        }
      }
    }
    if ((_BYTE)v278)
    {
      if (v278 - 15 >= 0x9C) {
        goto LABEL_156;
      }
      char v120 = sub_1CB8C2FBC((unsigned __int8 *)&v278);
      uint64_t v122 = 0;
    }
    else
    {
      if ((*(_DWORD *)(v279 + 8) & 0xFE) != 0x12) {
        goto LABEL_156;
      }
      char v120 = llvm::EVT::getEVT(*(llvm::EVT **)(v279 + 24), 0, v37);
      uint64_t v122 = v121;
    }
    if ((_BYTE)v280)
    {
      char v123 = sub_1CB8C2FBC((unsigned __int8 *)&v280);
      uint64_t v124 = 0;
    }
    else
    {
      char v123 = llvm::EVT::getEVT(*(llvm::EVT **)(v281 + 24), 0, v119);
    }
    if (v120 != v123 || !v120 && v122 != v124)
    {
      llvm::TargetLoweringBase::getTypeConversion(v21, *(llvm::LLVMContext **)(v269 + 56), v280, v281, (uint64_t)v283);
      if (LOBYTE(v283[0]) == 7)
      {
        uint64_t v126 = *(llvm::LLVMContext **)(v269 + 56);
        if ((_BYTE)v280)
        {
          LOBYTE(v127) = sub_1CB8C2FBC((unsigned __int8 *)&v280);
          unint64_t v130 = 0;
          uint64_t v129 = 0;
        }
        else
        {
          unint64_t v127 = llvm::EVT::getEVT(*(llvm::EVT **)(v281 + 24), 0, v125);
          uint64_t v129 = v128;
          unint64_t v130 = v127 & 0xFFFFFFFFFFFFFF00;
        }
        uint64_t v248 = v130 | v127;
        unsigned int v249 = sub_1CB8C32B0(&v282);
        unint64_t v250 = (llvm *)sub_1CB882C1C(v126, v248, v129, (llvm::Type *)(v249 | ((unint64_t)(v282 - 120 < 0x33) << 32)));
        uint64_t v252 = sub_1CCFC6558((void *)v269, a3, a4, a2, v250, v251);
        uint64_t v254 = v253;
        uint64_t v114 = v282;
        uint64_t v115 = v269;
        uint64_t v117 = (uint64_t)v252;
        uint64_t v118 = v254;
        uint64_t v116 = (uint64_t)a2;
        goto LABEL_335;
      }
    }
LABEL_156:
    unint64_t v131 = sub_1CC4A0738((llvm::EVT *)&v280);
    if (HIDWORD(v131) != 1 && v131 == 1)
    {
      uint64_t v132 = (llvm *)v282;
      uint64_t v133 = sub_1CD7EC9F4(v269, 0, (uint64_t)a2, 0);
      uint64_t v136 = *(void *)(v269 + 832);
      if (v136) {
        LOWORD(v136) = *(_WORD *)(v136 + 8);
      }
      uint64_t v137 = (uint64_t)sub_1CCFDED5C(v269, 148, a2, v132, 0, a3, a4, v135, v133, v134, v136);
      goto LABEL_252;
    }
    if ((_BYTE)v280) {
      uint64_t v139 = (llvm::LLVMContext *)sub_1CB87E200((unsigned __int8 *)&v280);
    }
    else {
      uint64_t v139 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v280);
    }
    if ((int)v139 <= 31)
    {
      switch(v139)
      {
        case 1:
          uint64_t v172 = 0;
          uint64_t v173 = 2;
          goto LABEL_356;
        case 0x10:
          uint64_t v172 = 0;
          uint64_t v173 = 4;
          goto LABEL_356;
        case 8:
          uint64_t v172 = 0;
          uint64_t v173 = 3;
          goto LABEL_356;
      }
    }
    else
    {
      switch(v139)
      {
        case 0x20:
          uint64_t v172 = 0;
          uint64_t v173 = 5;
LABEL_356:
          uint64_t v258 = sub_1CD7EF724(v269, v173, v172, a3, a4);
          a3 = sub_1CD7EB67C(v269, v258, a4 & 0xFFFFFFFF00000000 | v259, (uint64_t)a2, v282, 0);
          LODWORD(a4) = v260;
          goto LABEL_253;
        case 0x40:
          uint64_t v172 = 0;
          uint64_t v173 = 6;
          goto LABEL_356;
        case 0x80:
          uint64_t v172 = 0;
          uint64_t v173 = 7;
          goto LABEL_356;
      }
    }
    uint64_t v172 = llvm::IntegerType::get(*(llvm::IntegerType **)(v269 + 56), v139);
    uint64_t v173 = 0;
    goto LABEL_356;
  }
  LOBYTE(v278) = 0;
  uint64_t v279 = 0;
  unsigned __int8 v277 = 0;
  unsigned int v276 = 0;
  int v52 = *(llvm::LLVMContext **)(v269 + 56);
  if ((a9 & 0xFF00000000) != 0) {
    unsigned int VectorTypeBreakdown = (*(uint64_t (**)(unint64_t, llvm::LLVMContext *, uint64_t))(*(void *)v21 + 464))(v21, v52, a9);
  }
  else {
    unsigned int VectorTypeBreakdown = llvm::TargetLoweringBase::getVectorTypeBreakdown(v21, v52, v19, v20, &v278, &v276, &v277);
  }
  unsigned int v267 = VectorTypeBreakdown;
  if ((_BYTE)v278)
  {
    if (v278 - 15 >= 0x9C) {
      goto LABEL_82;
    }
  }
  else if ((*(_DWORD *)(v279 + 8) & 0xFE) != 0x12)
  {
LABEL_82:
    unint64_t v68 = v276;
    goto LABEL_85;
  }
  unint64_t v69 = sub_1CC4A0738((llvm::EVT *)&v278);
  unint64_t v68 = v69 & 0xFFFFFFFF00000000 | (v276 * v69);
LABEL_85:
  unint64_t v70 = *(llvm::LLVMContext **)(v269 + 56);
  unint64_t v71 = sub_1CD3DD468((unsigned __int8 *)&v278, v54, v55);
  int v73 = (llvm *)sub_1CB882C1C(v70, v71, v72, (llvm::Type *)v68);
  uint64_t v274 = v73;
  uint64_t v275 = v74;
  if (v280 == v73)
  {
    if ((_BYTE)v280 || v281 == v74)
    {
      uint64_t v75 = (void *)v269;
      goto LABEL_170;
    }
    goto LABEL_90;
  }
  if (!(_BYTE)v280)
  {
LABEL_90:
    int v76 = v73;
    uint64_t v77 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v280);
    int v79 = v78;
    goto LABEL_104;
  }
  uint64_t v77 = sub_1CB87E200((unsigned __int8 *)&v280);
  int v79 = v85;
  int v76 = v274;
LABEL_104:
  if (v76) {
    uint64_t v86 = sub_1CB87E200((unsigned __int8 *)&v274);
  }
  else {
    uint64_t v86 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v274);
  }
  if (v77 == v86 && v79 == v87)
  {
    uint64_t v75 = (void *)v269;
    uint64_t v89 = *(void *)(v269 + 832);
    if (v89) {
      __int16 v90 = *(_WORD *)(v89 + 8);
    }
    else {
      __int16 v90 = 0;
    }
    a3 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v269, (const char *)0xD8, (uint64_t)a2, v274, v275, a3, (void *)a4, v90);
    a4 = a4 & 0xFFFFFFFF00000000 | v108;
  }
  else
  {
    if ((_BYTE)v274)
    {
      unsigned __int8 v96 = sub_1CB8C2FBC((unsigned __int8 *)&v274);
      unint64_t v95 = 0;
      uint64_t v94 = 0;
    }
    else
    {
      unint64_t v91 = llvm::EVT::getEVT(*(llvm::EVT **)(v275 + 24), 0, v88);
      uint64_t v94 = v93;
      unint64_t v95 = v91 & 0xFFFFFFFFFFFFFF00;
      unsigned __int8 v96 = v91;
    }
    v283[0] = (void *)(v95 | v96);
    v283[1] = v94;
    if ((_BYTE)v280)
    {
      LOBYTE(v97) = sub_1CB8C2FBC((unsigned __int8 *)&v280);
      unint64_t v100 = 0;
      uint64_t v99 = 0;
    }
    else
    {
      unint64_t v97 = llvm::EVT::getEVT(*(llvm::EVT **)(v281 + 24), 0, v92);
      uint64_t v99 = v98;
      unint64_t v100 = v97 & 0xFFFFFFFFFFFFFF00;
    }
    if (v96 == v97 && (v96 || v94 == (void *)v99))
    {
      uint64_t v75 = (void *)v269;
    }
    else
    {
      uint64_t v75 = (void *)v269;
      if (sub_1CC277C0C((unsigned __int8 *)v283, v100 | v97, v99))
      {
        uint64_t v102 = *(llvm::LLVMContext **)(v269 + 56);
        uint64_t v103 = a8;
        if ((_BYTE)v274)
        {
          LOBYTE(v104) = sub_1CB8C2FBC((unsigned __int8 *)&v274);
          unint64_t v107 = 0;
          uint64_t v106 = 0;
        }
        else
        {
          unint64_t v104 = llvm::EVT::getEVT(*(llvm::EVT **)(v275 + 24), 0, v101);
          uint64_t v106 = v105;
          unint64_t v107 = v104 & 0xFFFFFFFFFFFFFF00;
        }
        uint64_t v140 = v107 | v104;
        int v141 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v280);
        int v143 = (llvm *)sub_1CB882C1C(v102, v140, v106, v141);
        uint64_t v280 = (uint64_t)v143;
        uint64_t v281 = v142;
        uint64_t v75 = (void *)v269;
        uint64_t v144 = *(void *)(v269 + 832);
        if (v144) {
          __int16 v145 = *(_WORD *)(v144 + 8);
        }
        else {
          __int16 v145 = 0;
        }
        a8 = v103;
        a3 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)v269, (const char *)0xC8, (uint64_t)a2, v143, v142, a3, (void *)a4, v145);
        a4 = a4 & 0xFFFFFFFF00000000 | v146;
      }
    }
    uint64_t v147 = sub_1CCFC6558(v75, a3, a4, a2, v274, v275);
    if (v147)
    {
      a3 = (uint64_t)v147;
      a4 = a4 & 0xFFFFFFFF00000000 | v148;
    }
  }
LABEL_170:
  v283[0] = v284;
  v283[1] = (void *)0x800000000;
  sub_1CD3E535C((uint64_t *)v283, v276, 0, 0);
  if (v276)
  {
    unsigned int v149 = 0;
    while (1)
    {
      if ((_BYTE)v278)
      {
        if (v278 - 15 < 0x9C)
        {
LABEL_176:
          int v151 = sub_1CC4A0738((llvm::EVT *)&v278);
          int v152 = v278;
          uint64_t v153 = v279;
          uint64_t v154 = sub_1CD7EC9F4(v269, v149 * v151, (uint64_t)a2, 0);
          uint64_t v157 = *(void *)(v269 + 832);
          if (v157) {
            LOWORD(v157) = *(_WORD *)(v157 + 8);
          }
          int v158 = sub_1CCFDED5C(v269, 151, a2, v152, v153, a3, a4, v156, v154, v155, v157);
          unsigned int v160 = (char *)v283[0] + 16 * v149;
          *(void *)unsigned int v160 = v158;
          goto LABEL_183;
        }
        uint64_t v150 = v279;
      }
      else
      {
        uint64_t v150 = v279;
        if ((*(_DWORD *)(v279 + 8) & 0xFE) == 0x12) {
          goto LABEL_176;
        }
      }
      uint64_t v161 = a8;
      unint64_t v162 = v278;
      uint64_t v163 = sub_1CD7EC9F4(v269, v149, (uint64_t)a2, 0);
      uint64_t v166 = *(void *)(v269 + 832);
      if (v166) {
        LOWORD(v166) = *(_WORD *)(v166 + 8);
      }
      uint64_t v167 = sub_1CCFDED5C(v269, 148, a2, v162, v150, a3, a4, v165, v163, v164, v166);
      unsigned int v160 = (char *)v283[0] + 16 * v149;
      *(void *)unsigned int v160 = v167;
      a8 = v161;
LABEL_183:
      *((_DWORD *)v160 + 2) = v159;
      ++v149;
      uint64_t v75 = (void *)v269;
      if (v149 == v276) {
        goto LABEL_186;
      }
    }
  }
  unsigned int v149 = 0;
LABEL_186:
  if (v267 == v149)
  {
    if (v267)
    {
      unint64_t v168 = a5;
      uint64_t v169 = 0;
      do
      {
        sub_1CCFA6E8C(v75, a2, *(void *)((char *)v283[0] + v169), *(void *)((char *)v283[0] + v169 + 8), v168 + v169, 1, v282, a8, a9, 200);
        v169 += 16;
      }
      while (16 * v267 != v169);
    }
  }
  else if (v267 && v149)
  {
    unint64_t v170 = a5;
    unsigned int v171 = 0;
    do
    {
      sub_1CCFA6E8C(v75, a2, *((void *)v283[0] + 2 * v171), *((void *)v283[0] + 2 * v171 + 1), v170 + 16 * v171 * (v267 / v149), v267 / v149, v282, a8, a9, 200);
      ++v171;
    }
    while (v171 != v276);
  }
  if (v283[0] != v284) {
    free(v283[0]);
  }
}

void sub_1CCFA8530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v92[8] = *MEMORY[0x1E4F143B8];
  unint64_t v68 = (llvm::CallInst *)a2;
  if (*(unsigned __int8 *)(a2 + 16) - 29 > 0xA) {
    goto LABEL_130;
  }
  uint64_t v72 = *(void *)(a2 + 40);
  uint64_t v3 = *(void *)(v72 + 40);
  if (v3 == v72 + 40)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3) {
      uint64_t v5 = v3 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = v5;
    }
  }
  uint64_t v76 = *(void *)(*(void *)(a1 + 832) + 24);
  unint64_t v84 = v88;
  int v85 = v88;
  uint64_t v86 = 4;
  int v87 = 0;
  if (*(unsigned char *)(v4 + 16) != 30)
  {
    int v6 = 2;
    switch(*(unsigned char *)(v4 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_140;
      case 0x1F:
        int v6 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_126;
      case 0x20:
      case 0x26:
LABEL_140:
        int v6 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_126;
      case 0x21:
        goto LABEL_14;
      case 0x24:
        int v6 = *(_WORD *)(v4 + 18) & 1;
        goto LABEL_126;
      case 0x25:
        int v6 = 1;
        goto LABEL_14;
      case 0x27:
        int v6 = *(_DWORD *)(v4 + 80) + 1;
LABEL_126:
        if (!v6) {
          goto LABEL_127;
        }
        goto LABEL_14;
      default:
        goto LABEL_127;
    }
  }
  if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
LABEL_14:
  unsigned int v7 = 0;
  uint64_t v69 = a1 + 888;
  uint64_t v71 = v4;
  int v70 = v6;
  do
  {
    uint64_t Successor = 0;
    uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v4, v7);
    uint64_t v8 = *(void *)(Successor + 48);
    if (v8) {
      uint64_t v9 = v8 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(v9 + 16) != 83) {
      goto LABEL_19;
    }
    uint64_t v10 = sub_1CD3CE844((_DWORD *)(*(void *)(v2 + 912) + 56), &Successor)[1];
    unint64_t v11 = v85;
    uint64_t v12 = HIDWORD(v86);
    if (v85 == v84)
    {
      if (HIDWORD(v86))
      {
        unint64_t v13 = 0;
        uint64_t v14 = 8 * HIDWORD(v86);
        unint64_t v15 = v85;
        while (*(void *)v15 != v10)
        {
          if (*(void *)v15 == -2) {
            unint64_t v13 = v15;
          }
          v15 += 8;
          v14 -= 8;
          if (!v14)
          {
            if (!v13) {
              goto LABEL_29;
            }
            *(void *)unint64_t v13 = v10;
            --v87;
            goto LABEL_53;
          }
        }
        goto LABEL_19;
      }
LABEL_29:
      unsigned int v16 = v86;
      if (HIDWORD(v86) < v86)
      {
        ++HIDWORD(v86);
        *(void *)&v85[8 * v12] = v10;
        goto LABEL_53;
      }
    }
    else
    {
      unsigned int v16 = v86;
    }
    if (3 * v16 <= 4 * (HIDWORD(v86) - v87))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
    }
    else if (v16 - HIDWORD(v86) >= v16 >> 3)
    {
      goto LABEL_34;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v84, v16);
    unsigned int v16 = v86;
    unint64_t v11 = v85;
LABEL_34:
    unsigned int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v19 = &v11[8 * v18];
    uint64_t v20 = *(void *)v19;
    if (*(void *)v19 == -1)
    {
      unint64_t v21 = 0;
LABEL_46:
      if (v21) {
        uint64_t v25 = v21;
      }
      else {
        uint64_t v25 = v19;
      }
      if (*(void *)v25 != v10)
      {
        if (*(void *)v25 == -2) {
          --v87;
        }
        else {
          ++HIDWORD(v86);
        }
        *(void *)uint64_t v25 = v10;
LABEL_53:
        if (*(void *)(Successor + 40) != Successor + 40)
        {
          uint64_t v26 = *(void *)(Successor + 48);
          uint64_t v27 = v26 - 24;
          uint64_t v28 = v26 ? v26 - 24 : 0;
          if (v26 && *(unsigned char *)(v28 + 16) == 83)
          {
            uint64_t v29 = *(void *)(v10 + 56);
            do
            {
              if (*(void *)(v27 + 8) && (llvm::Type::isEmptyTy(*(llvm::Type **)v27) & 1) == 0)
              {
                uint64_t v74 = (uint64_t *)v27;
                uint64_t v32 = sub_1CBF73380(v27, v72);
                uint64_t v33 = (unsigned __int8 *)v32;
                if (*(unsigned __int8 *)(v32 + 16) >= 0x15u) {
                  __int16 v34 = 0;
                }
                else {
                  __int16 v34 = (const llvm::Value *)v32;
                }
                unsigned int v82 = v34;
                if (v34)
                {
                  BOOL v37 = sub_1CD40EB18(v69, (uint64_t *)&v82);
                  int v38 = *((_DWORD *)v37 + 2);
                  if (!v38)
                  {
                    uint64_t v39 = v37;
                    int v40 = sub_1CD78C35C(*(void *)(v2 + 912), v34);
                    *((_DWORD *)v39 + 2) = v40;
                    if (*((unsigned char *)v34 + 16) == 16)
                    {
                      if ((*(unsigned int (**)(uint64_t, const llvm::Value *))(*(void *)v76 + 1216))(v76, v34))
                      {
                        unsigned int v41 = 198;
                      }
                      else
                      {
                        unsigned int v41 = 199;
                      }
                      int v42 = *((_DWORD *)v39 + 2);
                    }
                    else
                    {
                      int v42 = v40;
                      unsigned int v41 = 200;
                    }
                    sub_1CD7DE7D0(v2, v33, v42, v41);
                    int v38 = *((_DWORD *)v39 + 2);
                  }
                }
                else
                {
                  uint64_t v35 = *(void *)(v2 + 912);
                  uint64_t v89 = v32;
                  __int16 v90 = 0;
                  if (sub_1CD3C8538((uint64_t *)(v35 + 80), &v89, &v90)) {
                    int v36 = v90;
                  }
                  else {
                    int v36 = (_DWORD *)(*(void *)(v35 + 80) + 16 * *(unsigned int *)(v35 + 96));
                  }
                  uint64_t v43 = *(void *)(v2 + 912);
                  if (v36 == (_DWORD *)(*(void *)(v43 + 80) + 16 * *(unsigned int *)(v43 + 96)))
                  {
                    int v38 = sub_1CD78C35C(v43, (const llvm::Value *)v33);
                    sub_1CD7DE7D0(v2, v33, v38, 0xC8u);
                  }
                  else
                  {
                    int v38 = v36[2];
                  }
                }
                __int16 v90 = v92;
                uint64_t v91 = 0x400000000;
                uint64_t v27 = (uint64_t)v74;
                llvm::ComputeValueVTs(v76, (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(v2 + 832) + 40) + 40) + 272), *v74, (uint64_t)&v90, 0, 0, 0);
                uint64_t v75 = v91;
                if (v91)
                {
                  unsigned int v73 = v7;
                  uint64_t v44 = 0;
                  v77 &= 0xFFFFFFFFFFFF0000;
                  do
                  {
                    uint64_t v79 = v44;
                    unsigned int v45 = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t))(*(void *)v76 + 584))(v76, *(void *)(*(void *)(v2 + 832) + 56), v90[2 * v44], v90[2 * v44 + 1], v77);
                    unsigned int v78 = v45;
                    if (v45)
                    {
                      uint64_t v46 = 0;
                      uint64_t v47 = v45;
                      uint64_t v48 = v29;
                      uint64_t v80 = v45;
                      int v81 = v38;
                      do
                      {
                        if (!v48 || (uint64_t v49 = v48, (*(unsigned char *)v48 & 4) == 0))
                        {
                          uint64_t v49 = v48;
                          if ((*(_WORD *)(v48 + 44) & 8) != 0)
                          {
                            uint64_t v49 = v48;
                            do
                              uint64_t v49 = *(void *)(v49 + 8);
                            while ((*(_WORD *)(v49 + 44) & 8) != 0);
                          }
                        }
                        uint64_t v50 = *(void **)(v2 + 912);
                        uint64_t v29 = *(void *)(v49 + 8);
                        uint64_t v51 = (v38 + v46);
                        int v52 = (char *)v50[94];
                        unint64_t v53 = v50[95];
                        if ((unint64_t)v52 >= v53)
                        {
                          uint64_t v55 = v29;
                          uint64_t v56 = v2;
                          unsigned int v57 = (char *)v50[93];
                          uint64_t v58 = (v52 - v57) >> 4;
                          unint64_t v59 = v58 + 1;
                          if ((unint64_t)(v58 + 1) >> 60) {
                            abort();
                          }
                          uint64_t v60 = v53 - (void)v57;
                          if (v60 >> 3 > v59) {
                            unint64_t v59 = v60 >> 3;
                          }
                          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v61 = v59;
                          }
                          if (v61)
                          {
                            if (v61 >> 60) {
                              sub_1CB833614();
                            }
                            uint64_t v62 = (char *)operator new(16 * v61);
                          }
                          else
                          {
                            uint64_t v62 = 0;
                          }
                          unsigned int v63 = &v62[16 * v58];
                          *(void *)unsigned int v63 = v48;
                          *((void *)v63 + 1) = v51;
                          uint64_t v64 = v63;
                          uint64_t v2 = v56;
                          if (v52 != v57)
                          {
                            do
                            {
                              *((_OWORD *)v64 - 1) = *((_OWORD *)v52 - 1);
                              v64 -= 16;
                              v52 -= 16;
                            }
                            while (v52 != v57);
                            int v52 = (char *)v50[93];
                          }
                          uint64_t v29 = v55;
                          int v38 = v81;
                          __int16 v65 = &v62[16 * v61];
                          v50[93] = v64;
                          uint64_t v54 = v63 + 16;
                          v50[94] = v63 + 16;
                          v50[95] = v65;
                          if (v52) {
                            operator delete(v52);
                          }
                          uint64_t v47 = v80;
                        }
                        else
                        {
                          *(void *)int v52 = v48;
                          *((void *)v52 + 1) = v51;
                          uint64_t v54 = v52 + 16;
                        }
                        v50[94] = v54;
                        ++v46;
                        uint64_t v48 = v29;
                      }
                      while (v46 != v47);
                    }
                    v38 += v78;
                    uint64_t v44 = v79 + 1;
                  }
                  while (v79 + 1 != v75);
                  uint64_t v4 = v71;
                  int v6 = v70;
                  unsigned int v7 = v73;
                  uint64_t v27 = (uint64_t)v74;
                }
                if (v90 != v92) {
                  free(v90);
                }
              }
              uint64_t v30 = *(void *)(v27 + 32);
              uint64_t v27 = v30 - 24;
              if (v30) {
                uint64_t v31 = v30 - 24;
              }
              else {
                uint64_t v31 = 0;
              }
            }
            while (v30 && *(unsigned char *)(v31 + 16) == 83);
          }
        }
      }
    }
    else
    {
      unint64_t v21 = 0;
      int v22 = 1;
      while (v20 != v10)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          unint64_t v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = &v11[8 * (v24 & v17)];
        uint64_t v20 = *(void *)v19;
        if (*(void *)v19 == -1) {
          goto LABEL_46;
        }
      }
    }
LABEL_19:
    ++v7;
  }
  while (v7 != v6);
LABEL_127:
  sub_1CD3C7F68((_DWORD *)(v2 + 888));
  if (v85 != v84) {
    free(v85);
  }
  a2 = (uint64_t)v68;
LABEL_130:
  if (!sub_1CBF63B28(a2)) {
    ++*(_DWORD *)(v2 + 816);
  }
  *(void *)uint64_t v2 = v68;
  sub_1CD7D744C((uint64_t *)v2, (const llvm::Value *)(*((unsigned __int8 *)v68 + 16) - 28), (uint64_t ***)v68, v66, v67);
  if (*((unsigned __int8 *)v68 + 16) - 29 >= 0xB && !*(unsigned char *)(v2 + 960) && !sub_1CC27FA84((uint64_t)v68)) {
    sub_1CD7D79A4(v2, (llvm::Type **)v68);
  }
  *(void *)uint64_t v2 = 0;
}

void sub_1CCFA8E18(uint64_t a1, uint64_t ***a2, const llvm::APInt *a3)
{
  uint64_t v5 = *(void *)(a1 + 912);
  int v6 = *(void **)(v5 + 640);
  uint64_t v9 = *(void *)(v5 + 56);
  unsigned int v7 = (_DWORD *)(v5 + 56);
  uint64_t v8 = v9;
  uint64_t v10 = (unsigned __int8 ***)*(a2 - 4);
  unsigned int v148 = v10;
  int v11 = v7[4];
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v11 - 1);
    uint64_t v14 = (unsigned __int8 ****)(v8 + 16 * v13);
    unint64_t v15 = *v14;
    if (v10 == *v14) {
      goto LABEL_11;
    }
    unsigned int v16 = 0;
    int v17 = 1;
    while (v15 != (unsigned __int8 ***)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (unsigned __int8 ***)-8192;
      }
      if (v18) {
        unsigned int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (unsigned __int8 ****)(v8 + 16 * (v19 & v12));
      unint64_t v15 = *v14;
      if (v10 == *v14) {
        goto LABEL_11;
      }
    }
    if (v16) {
      int v22 = v16;
    }
    else {
      int v22 = v14;
    }
  }
  else
  {
    int v22 = 0;
  }
  uint64_t v14 = (unsigned __int8 ****)sub_1CB883BA0(v7, (uint64_t)&v148, &v148, v22);
  *uint64_t v14 = v148;
  v14[1] = 0;
LABEL_11:
  uint64_t v20 = (const llvm::APInt *)v14[1];
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 1)
  {
    uint64_t v40 = (uint64_t)*(a2 - 12);
    uint64_t v41 = *(void *)(a1 + 912);
    uint64_t v44 = *(void *)(v41 + 56);
    int v42 = (_DWORD *)(v41 + 56);
    uint64_t v43 = v44;
    unsigned int v45 = (unsigned __int8 ***)*(a2 - 8);
    unsigned int v148 = v45;
    int v46 = v42[4];
    if (v46)
    {
      int v47 = v46 - 1;
      unsigned int v48 = ((v45 >> 4) ^ (v45 >> 9)) & (v46 - 1);
      uint64_t v49 = (unsigned __int8 ****)(v43 + 16 * v48);
      uint64_t v50 = *v49;
      if (v45 == *v49) {
        goto LABEL_44;
      }
      uint64_t v51 = 0;
      int v52 = 1;
      while (v50 != (unsigned __int8 ***)-4096)
      {
        if (v51) {
          BOOL v53 = 0;
        }
        else {
          BOOL v53 = v50 == (unsigned __int8 ***)-8192;
        }
        if (v53) {
          uint64_t v51 = v49;
        }
        unsigned int v54 = v48 + v52++;
        unsigned int v48 = v54 & v47;
        uint64_t v49 = (unsigned __int8 ****)(v43 + 16 * (v54 & v47));
        uint64_t v50 = *v49;
        if (v45 == *v49) {
          goto LABEL_44;
        }
      }
      if (v51) {
        uint64_t v74 = v51;
      }
      else {
        uint64_t v74 = v49;
      }
    }
    else
    {
      uint64_t v74 = 0;
    }
    uint64_t v49 = (unsigned __int8 ****)sub_1CB883BA0(v42, (uint64_t)&v148, &v148, v74);
    *uint64_t v49 = v148;
    v49[1] = 0;
LABEL_44:
    uint64_t v55 = (uint64_t)v49[1];
    if (*(unsigned __int8 *)(v40 + 16) <= 0x1Bu) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = (uint64_t *)v40;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 832) + 24) + 48)) {
      BOOL v57 = 1;
    }
    else {
      BOOL v57 = v56 == 0;
    }
    if (v57) {
      goto LABEL_140;
    }
    uint64_t v58 = v56[1];
    if (!v58 || *(void *)(v58 + 8)) {
      goto LABEL_140;
    }
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0)
    {
LABEL_81:
      uint64_t v159 = 0;
      unsigned int v160 = 0;
      unsigned int v148 = &v160;
      unsigned int v149 = &v159;
      if (sub_1CC185750(&v148, v56))
      {
        uint64_t v75 = 28;
      }
      else
      {
        unsigned int v148 = &v160;
        unsigned int v149 = &v159;
        if (!sub_1CC185634(&v148, v56)) {
          goto LABEL_140;
        }
        uint64_t v75 = 29;
      }
      if (*((unsigned char *)v160 + 16) != 89
        || ((int v76 = *((_DWORD *)v160 + 5), (v76 & 0x40000000) != 0)
          ? (uint64_t v77 = (unsigned __int8 **)*(v160 - 1))
          : (uint64_t v77 = &v160[-4 * (v76 & 0x7FFFFFF)]),
            (unsigned int v78 = *v77) == 0
         || *(unsigned char *)(v159 + 16) != 89
         || ((int v79 = *(_DWORD *)(v159 + 20), (v79 & 0x40000000) != 0)
           ? (uint64_t v80 = *(unsigned __int8 ***)(v159 - 8))
           : (uint64_t v80 = (unsigned __int8 **)(v159 - 32 * (v79 & 0x7FFFFFF))),
             v78 != *v80)))
      {
        unsigned int v81 = sub_1CCFB0138(*(void *)(*(void *)(a1 + 912) + 32), v6[2], (uint64_t)v20);
        unsigned int v82 = sub_1CCFB0138(*(void *)(*(void *)(a1 + 912) + 32), v6[2], v55);
        sub_1CD7DECFC(a1, (uint64_t)v56, v20, v55, v6, (uint64_t)v6, v75, v81, v82, 0);
        BOOL v83 = sub_1CD7DF0FC((int **)(*(void *)(a1 + 856) + 8));
        uint64_t v84 = *(void *)(a1 + 856);
        uint64_t v86 = *(void *)(v84 + 8);
        uint64_t v85 = *(void *)(v84 + 16);
        int v87 = -1171354717 * ((unint64_t)(v85 - v86) >> 3);
        if (v83)
        {
          int v88 = v87 - 1;
          if (v87 != 1)
          {
            uint64_t v89 = 0;
            do
            {
              sub_1CD7DE9A0(a1, *(unsigned __int8 **)(*(void *)(*(void *)(a1 + 856) + 8) + v89 + 96));
              sub_1CD7DE9A0(a1, *(unsigned __int8 **)(*(void *)(*(void *)(a1 + 856) + 8) + v89 + 112));
              v89 += 88;
              --v88;
            }
            while (v88);
            uint64_t v86 = *(void *)(*(void *)(a1 + 856) + 8);
          }
          sub_1CD7DF1BC(a1, v86, (uint64_t)v6);
          uint64_t v90 = *(void *)(a1 + 856);
          sub_1CC703C1C((uint64_t)&v148, *(void *)(v90 + 8) + 88, *(void *)(v90 + 16), *(void *)(v90 + 8));
          BOOL v92 = v91;
          uint64_t v93 = *(unsigned __int8 ****)(v90 + 16);
          if (v93 == v91)
          {
LABEL_165:
            *(void *)(v90 + 16) = v92;
            return;
          }
          uint64_t v94 = v93 - 2;
          while (1)
          {
            unint64_t v95 = *v94;
            if (!*v94) {
              goto LABEL_103;
            }
            int v98 = *(unsigned __int8 *)v95;
            if ((v98 - 4) > 0x1E)
            {
              if ((v98 - 3) >= 0xFFFFFFFE) {
                BOOL v101 = *v94;
              }
              else {
                BOOL v101 = 0;
              }
              if ((v98 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v100 = (unint64_t)(v101 + 1);
LABEL_117:
                unsigned int v148 = v94;
                sub_1CC5FA668(v100 + 16, &v148);
                goto LABEL_103;
              }
              if (v98 == 3) {
                v95[1] = 0;
              }
            }
            else if ((*((unsigned char *)v95 + 1) & 0x7F) == 2 || *((_DWORD *)v95 + 3))
            {
              uint64_t v99 = v95[2];
              if ((v99 & 4) != 0)
              {
                unint64_t v100 = (unint64_t)v99 & 0xFFFFFFFFFFFFFFF8;
                if (v100) {
                  goto LABEL_117;
                }
              }
            }
LABEL_103:
            unsigned __int8 v96 = (unsigned __int8 *)*(v94 - 2);
            if (v96)
            {
              int v102 = *v96;
              if ((v102 - 4) > 0x1E)
              {
                if ((v102 - 3) >= 0xFFFFFFFE) {
                  uint64_t v105 = (uint64_t)*(v94 - 2);
                }
                else {
                  uint64_t v105 = 0;
                }
                if ((v102 - 3) < 0xFFFFFFFE)
                {
                  if (v102 == 3) {
                    *((void *)v96 + 1) = 0;
                  }
                  goto LABEL_104;
                }
                unint64_t v104 = v105 + 8;
              }
              else
              {
                if ((v96[1] & 0x7F) != 2 && !*((_DWORD *)v96 + 3)) {
                  goto LABEL_104;
                }
                uint64_t v103 = *((void *)v96 + 2);
                if ((v103 & 4) == 0) {
                  goto LABEL_104;
                }
                unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFF8;
                if (!v104) {
                  goto LABEL_104;
                }
              }
              unsigned int v148 = v94 - 2;
              sub_1CC5FA668(v104 + 16, &v148);
            }
LABEL_104:
            unint64_t v97 = v94 - 9;
            v94 -= 11;
            if (v97 == v92) {
              goto LABEL_165;
            }
          }
        }
        int v106 = v87 - 1;
        if (v87 != 1)
        {
          uint64_t v107 = 136;
          do
          {
            unsigned int v108 = *(uint64_t **)(*(void *)(*(void *)(a1 + 856) + 8) + v107);
            uint64_t v109 = *(void *)(*(void *)(a1 + 912) + 8) + 320;
            *(void *)(*(void *)(v108[4] + 104) + 8 * *((unsigned int *)v108 + 6)) = 0;
            *((_DWORD *)v108 + 6) = -1;
            uint64_t v110 = *v108;
            uint64_t v111 = (void *)v108[1];
            *uint64_t v111 = *v108;
            *(void *)(v110 + 8) = v111;
            uint64_t *v108 = 0;
            v108[1] = 0;
            llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v109, (llvm::MachineBasicBlock *)v108);
            v107 += 88;
            --v106;
          }
          while (v106);
          uint64_t v84 = *(void *)(a1 + 856);
          uint64_t v86 = *(void *)(v84 + 8);
          uint64_t v85 = *(void *)(v84 + 16);
        }
        if (v85 == v86)
        {
LABEL_139:
          *(void *)(v84 + 16) = v86;
          goto LABEL_140;
        }
        uint64_t v126 = (unsigned __int8 ***)(v85 - 16);
        while (1)
        {
          unint64_t v127 = *v126;
          if (!*v126) {
            goto LABEL_176;
          }
          int v130 = *(unsigned __int8 *)v127;
          if ((v130 - 4) > 0x1E)
          {
            if ((v130 - 3) >= 0xFFFFFFFE) {
              uint64_t v133 = *v126;
            }
            else {
              uint64_t v133 = 0;
            }
            if ((v130 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v132 = (unint64_t)(v133 + 1);
LABEL_190:
              unsigned int v148 = v126;
              sub_1CC5FA668(v132 + 16, &v148);
              goto LABEL_176;
            }
            if (v130 == 3) {
              v127[1] = 0;
            }
          }
          else if ((*((unsigned char *)v127 + 1) & 0x7F) == 2 || *((_DWORD *)v127 + 3))
          {
            unint64_t v131 = v127[2];
            if ((v131 & 4) != 0)
            {
              unint64_t v132 = (unint64_t)v131 & 0xFFFFFFFFFFFFFFF8;
              if (v132) {
                goto LABEL_190;
              }
            }
          }
LABEL_176:
          uint64_t v128 = (unsigned __int8 *)*(v126 - 2);
          if (v128)
          {
            int v134 = *v128;
            if ((v134 - 4) > 0x1E)
            {
              if ((v134 - 3) >= 0xFFFFFFFE) {
                uint64_t v137 = (uint64_t)*(v126 - 2);
              }
              else {
                uint64_t v137 = 0;
              }
              if ((v134 - 3) < 0xFFFFFFFE)
              {
                if (v134 == 3) {
                  *((void *)v128 + 1) = 0;
                }
                goto LABEL_177;
              }
              unint64_t v136 = v137 + 8;
            }
            else
            {
              if ((v128[1] & 0x7F) != 2 && !*((_DWORD *)v128 + 3)) {
                goto LABEL_177;
              }
              uint64_t v135 = *((void *)v128 + 2);
              if ((v135 & 4) == 0) {
                goto LABEL_177;
              }
              unint64_t v136 = v135 & 0xFFFFFFFFFFFFFFF8;
              if (!v136) {
                goto LABEL_177;
              }
            }
            unsigned int v148 = v126 - 2;
            sub_1CC5FA668(v136 + 16, &v148);
          }
LABEL_177:
          uint64_t v129 = v126 - 9;
          v126 -= 11;
          if (v129 == (unsigned __int8 ***)v86) {
            goto LABEL_139;
          }
        }
      }
LABEL_140:
      unint64_t v112 = *(uint64_t **)(*(void *)(a1 + 832) + 56);
      uint64_t v113 = *v112;
      uint64_t v114 = *(void **)(*v112 + 1560);
      if (!v114)
      {
        int v138 = *(llvm::ConstantInt **)(v113 + 1888);
        unsigned int v139 = *(_DWORD *)(v113 + 1896);
        LODWORD(v149) = v139 >> 8;
        if (v139 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v148);
        }
        if (v139 <= 0xFF) {
          char v140 = 0;
        }
        else {
          char v140 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v139);
        }
        unsigned int v148 = (unsigned __int8 ***)(v140 & 1);
        uint64_t v114 = llvm::ConstantInt::get(v138, (llvm::LLVMContext *)&v148, a3);
        if (v149 >= 0x41 && v148) {
          MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
        }
        *(void *)(v113 + 1560) = v114;
      }
      uint64_t v115 = 0;
      uint64_t v116 = *(void *)a1;
      int v117 = *(_DWORD *)(a1 + 816);
      unsigned int v146 = 0;
      int v147 = v117;
      if (v116)
      {
        uint64_t v118 = (unsigned __int8 **)(v116 + 48);
        if (v118 == &v146)
        {
          uint64_t v115 = 0;
        }
        else
        {
          uint64_t v115 = *v118;
          unsigned int v146 = v115;
          if (v115)
          {
            llvm::MetadataTracking::track((uint64_t)&v146, v115, 2);
            uint64_t v115 = v146;
          }
        }
      }
      LODWORD(v148) = 17;
      unsigned int v149 = (uint64_t *)v40;
      uint64_t v150 = 0;
      int v151 = v114;
      int v152 = v20;
      uint64_t v153 = v55;
      uint64_t v154 = v6;
      uint64_t v155 = v115;
      if (!v115)
      {
        int v156 = v147;
        uint64_t v157 = 0;
        uint64_t v158 = -1;
        goto LABEL_151;
      }
      llvm::MetadataTracking::track((uint64_t)&v155, v115, 2);
      int v156 = v147;
      uint64_t v157 = 0;
      uint64_t v158 = -1;
      if (v146)
      {
        int v119 = *v146;
        if ((v119 - 4) > 0x1E)
        {
          if ((v119 - 3) >= 0xFFFFFFFE) {
            uint64_t v121 = v146;
          }
          else {
            uint64_t v121 = 0;
          }
          if ((v119 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v122 = (unint64_t)(v121 + 8);
LABEL_164:
            unsigned int v160 = &v146;
            sub_1CC5FA668(v122 + 16, &v160);
            goto LABEL_151;
          }
          if (v119 == 3) {
            *((void *)v146 + 1) = 0;
          }
        }
        else if ((v146[1] & 0x7F) == 2 || *((_DWORD *)v146 + 3))
        {
          uint64_t v144 = *((void *)v146 + 2);
          if ((v144 & 4) != 0)
          {
            unint64_t v122 = v144 & 0xFFFFFFFFFFFFFFF8;
            if (v122) {
              goto LABEL_164;
            }
          }
        }
      }
LABEL_151:
      sub_1CD7DF1BC(a1, (uint64_t)&v148, (uint64_t)v6);
      if (!v157) {
        goto LABEL_152;
      }
      int v123 = *v157;
      if ((v123 - 4) > 0x1E)
      {
        if ((v123 - 3) >= 0xFFFFFFFE) {
          int v141 = v157;
        }
        else {
          int v141 = 0;
        }
        if ((v123 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v125 = (unint64_t)(v141 + 8);
LABEL_218:
          unsigned int v160 = &v157;
          sub_1CC5FA668(v125 + 16, &v160);
          goto LABEL_152;
        }
        if (v123 == 3) {
          *((void *)v157 + 1) = 0;
        }
      }
      else if ((v157[1] & 0x7F) == 2 || *((_DWORD *)v157 + 3))
      {
        uint64_t v124 = *((void *)v157 + 2);
        if ((v124 & 4) != 0)
        {
          unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFF8;
          if (v125) {
            goto LABEL_218;
          }
        }
      }
LABEL_152:
      int v36 = v155;
      if (!v155) {
        return;
      }
      int v37 = *v155;
      if ((v37 - 4) > 0x1E)
      {
        if ((v37 - 3) >= 0xFFFFFFFE) {
          __int16 v145 = v155;
        }
        else {
          __int16 v145 = 0;
        }
        if ((v37 - 3) < 0xFFFFFFFE)
        {
LABEL_241:
          if (v37 == 3) {
            *((void *)v36 + 1) = 0;
          }
          return;
        }
        unint64_t v39 = (unint64_t)(v145 + 8);
      }
      else
      {
        if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
          return;
        }
        uint64_t v120 = *((void *)v155 + 2);
        if ((v120 & 4) == 0) {
          return;
        }
        unint64_t v39 = v120 & 0xFFFFFFFFFFFFFFF8;
        if (!v39) {
          return;
        }
      }
      unsigned int v160 = &v155;
      goto LABEL_75;
    }
    uint64_t v59 = ***a2;
    unsigned int v148 = (unsigned __int8 ***)a2;
    int v60 = *(_DWORD *)(v59 + 2496);
    if (v60)
    {
      uint64_t v61 = *(void *)(v59 + 2480);
      int v62 = v60 - 1;
      unsigned int v63 = v62 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v64 = (uint64_t ****)(v61 + 40 * v63);
      __int16 v65 = *v64;
      if (*v64 == a2)
      {
LABEL_64:
        uint64_t v70 = *((unsigned int *)v64 + 4);
        if (v70)
        {
          uint64_t v71 = v64[1] + 1;
          uint64_t v72 = 16 * v70;
          while (*((_DWORD *)v71 - 2) != 15)
          {
            v71 += 2;
            v72 -= 16;
            if (!v72) {
              goto LABEL_81;
            }
          }
          if (*v71) {
            goto LABEL_140;
          }
        }
        goto LABEL_81;
      }
      uint64_t v66 = 0;
      int v67 = 1;
      while (v65 != (uint64_t ***)-4096)
      {
        if (v66) {
          BOOL v68 = 0;
        }
        else {
          BOOL v68 = v65 == (uint64_t ***)-8192;
        }
        if (v68) {
          uint64_t v66 = v64;
        }
        unsigned int v69 = v63 + v67++;
        unsigned int v63 = v69 & v62;
        uint64_t v64 = (uint64_t ****)(v61 + 40 * v63);
        __int16 v65 = *v64;
        if (*v64 == a2) {
          goto LABEL_64;
        }
      }
      if (v66) {
        uint64_t v142 = v66;
      }
      else {
        uint64_t v142 = v64;
      }
    }
    else
    {
      uint64_t v142 = 0;
    }
    uint64_t v64 = (uint64_t ****)sub_1CC609054(v59 + 2480, (uint64_t)&v148, (uint64_t *)&v148, v142);
    int v143 = v148;
    v64[3] = 0;
    v64[4] = 0;
    char *v64 = (uint64_t ***)v143;
    v64[1] = (uint64_t ***)(v64 + 3);
    v64[2] = (uint64_t ***)0x100000000;
    goto LABEL_64;
  }
  llvm::MachineBasicBlock::addSuccessor(v6, v20, -1);
  unint64_t v21 = (const llvm::APInt *)v6[1];
  if (v21 == (const llvm::APInt *)(*(void *)(*(void *)(a1 + 912) + 8) + 320)) {
    unint64_t v21 = 0;
  }
  if (v20 == v21 && *(_DWORD *)(*(void *)(a1 + 824) + 552)) {
    return;
  }
  uint64_t v23 = *(void *)(a1 + 832);
  uint64_t v24 = *(void *)a1;
  int v25 = *(_DWORD *)(a1 + 816);
  unsigned int v148 = 0;
  LODWORD(v149) = v25;
  if (v24)
  {
    uint64_t v26 = (unsigned __int8 ****)(v24 + 48);
    if (v26 != &v148)
    {
      uint64_t v27 = *v26;
      unsigned int v148 = v27;
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v148, (unsigned __int8 *)v27, 2);
      }
    }
  }
  sub_1CD3D61B4((unsigned int *)(a1 + 384), *(unsigned char **)(a1 + 672), (unsigned char *)(*(void *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  uint64_t v28 = sub_1CD7D7210((uint64_t *)a1, a1 + 384);
  uint64_t v30 = v29;
  uint64_t v31 = sub_1CD7EDC88(*(void **)(a1 + 832), (uint64_t)v20);
  uint64_t v34 = *(void *)(v23 + 832);
  if (v34) {
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  }
  *(void *)(v23 + 192) = sub_1CCFDED5C(v23, 256, (const llvm::APInt *)&v148, (llvm *)1, 0, (uint64_t)v28, v30, v33, (uint64_t)v31, v32, v34);
  *(_DWORD *)(v23 + 200) = v35;
  int v36 = (unsigned __int8 *)v148;
  if (!v148) {
    return;
  }
  int v37 = *(unsigned __int8 *)v148;
  if ((v37 - 4) > 0x1E)
  {
    if ((v37 - 3) >= 0xFFFFFFFE) {
      unsigned int v73 = v148;
    }
    else {
      unsigned int v73 = 0;
    }
    if ((v37 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v39 = (unint64_t)(v73 + 1);
LABEL_74:
      unsigned int v160 = (unsigned __int8 **)&v148;
LABEL_75:
      sub_1CC5FA668(v39 + 16, &v160);
      return;
    }
    goto LABEL_241;
  }
  if ((*((unsigned char *)v148 + 1) & 0x7F) == 2 || *((_DWORD *)v148 + 3))
  {
    int v38 = v148[2];
    if ((v38 & 4) != 0)
    {
      unint64_t v39 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8;
      if (v39) {
        goto LABEL_74;
      }
    }
  }
}

void sub_1CCFA997C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  v92[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 912);
  uint64_t v7 = *(void *)(v6 + 640);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v8 = (_DWORD *)(v6 + 56);
  uint64_t v9 = v10;
  int v11 = *(void **)(a2 - 96);
  uint64_t v90 = v11;
  int v12 = v8[4];
  if (v12)
  {
    int v13 = v12 - 1;
    unsigned int v14 = ((v11 >> 4) ^ (v11 >> 9)) & (v12 - 1);
    unint64_t v15 = (void *)(v9 + 16 * v14);
    unsigned int v16 = (void *)*v15;
    if (v11 == (void *)*v15) {
      goto LABEL_11;
    }
    int v17 = 0;
    int v18 = 1;
    while (v16 != (void *)-4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == (void *)-8192;
      }
      if (v19) {
        int v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      unint64_t v15 = (void *)(v9 + 16 * (v20 & v13));
      unsigned int v16 = (void *)*v15;
      if (v11 == (void *)*v15) {
        goto LABEL_11;
      }
    }
    if (v17) {
      uint64_t v55 = v17;
    }
    else {
      uint64_t v55 = v15;
    }
  }
  else
  {
    uint64_t v55 = 0;
  }
  unint64_t v15 = sub_1CB883BA0(v8, (uint64_t)&v90, &v90, v55);
  *unint64_t v15 = v90;
  v15[1] = 0;
LABEL_11:
  unint64_t v21 = (llvm::MachineBasicBlock *)v15[1];
  int v22 = *(const llvm::Value **)(a2 - 64);
  uint64_t v23 = *(unsigned __int8 **)(a2 - 32);
  if (v23[16]) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(void *)(a2 - 32);
  }
  if (v23[16] == 24)
  {
    sub_1CCFB1C0C(a1, a2, *(void *)(a2 - 64), a4);
    goto LABEL_56;
  }
  if (!v24 || (*(unsigned char *)(v24 + 33) & 0x20) == 0)
  {
    if (sub_1CC646CF4(a2, 0))
    {
      uint64_t v27 = sub_1CD7DE5B4(a1, v23);
      sub_1CD80BA88(a1, a2, (uint64_t)v27, v28);
    }
    else if (sub_1CC646CF4(a2, 7))
    {
      sub_1CD7E1398(a1, (_DWORD *)a2, (uint64_t)v22);
    }
    else
    {
      int v25 = sub_1CD7DE5B4(a1, v23);
      sub_1CCFB60B8(a1, a2, (uint64_t)v25, v26, 0, 0, (uint64_t)v22, 0);
    }
    goto LABEL_56;
  }
  int v29 = *(_DWORD *)(v24 + 36);
  if (v29 > 265)
  {
    if ((v29 - 266) < 4) {
      goto LABEL_56;
    }
    uint64_t v90 = v92;
    uint64_t v91 = 0x800000000;
    uint64_t v31 = sub_1CD7D7360(a1);
    if (v91 >= HIDWORD(v91)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v32 = (uint64_t **)((char *)v90 + 16 * v91);
    llvm::APFloatBase *v32 = v31;
    v32[1] = v30;
    LODWORD(v91) = v91 + 1;
    uint64_t v33 = *(void *)(a1 + 832);
    uint64_t v34 = *(void *)(v33 + 24);
    uint64_t v35 = *(void *)a1;
    LODWORD(v32) = *(_DWORD *)(a1 + 816);
    int v88 = 0;
    LODWORD(v89) = v32;
    uint64_t v36 = v33;
    if (v35)
    {
      int v37 = (uint64_t *)(v35 + 48);
      uint64_t v36 = v33;
      if (v37 != (uint64_t *)&v88)
      {
        int v38 = (unsigned __int8 *)*v37;
        int v88 = v38;
        uint64_t v36 = v33;
        if (v38)
        {
          llvm::MetadataTracking::track((uint64_t)&v88, v38, 2);
          uint64_t v36 = *(void *)(a1 + 832);
        }
      }
    }
    unsigned __int8 v39 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v34 + 32))(v34, *(void *)(**(void **)(v36 + 40) + 40) + 272, 0);
    uint64_t v41 = sub_1CD7EBF14(v33, 11082, (const llvm::APInt *)&v88, (llvm *)v39, 0, 1, 0);
    if (v91 >= HIDWORD(v91)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v42 = (uint64_t **)((char *)v90 + 16 * v91);
    *int v42 = v41;
    v42[1] = v40;
    LODWORD(v91) = v91 + 1;
    if (v88)
    {
      int v43 = *v88;
      if ((v43 - 4) > 0x1E)
      {
        if ((v43 - 3) >= 0xFFFFFFFE) {
          uint64_t v80 = v88;
        }
        else {
          uint64_t v80 = 0;
        }
        if ((v43 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v81 = (unint64_t)(v80 + 8);
LABEL_93:
          int v87 = &v88;
          sub_1CC5FA668(v81 + 16, &v87);
          goto LABEL_34;
        }
        if (v43 == 3) {
          *((void *)v88 + 1) = 0;
        }
      }
      else if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
      {
        uint64_t v85 = *((void *)v88 + 2);
        if ((v85 & 4) != 0)
        {
          unint64_t v81 = v85 & 0xFFFFFFFFFFFFFFF8;
          if (v81) {
            goto LABEL_93;
          }
        }
      }
    }
LABEL_34:
    uint64_t v44 = *(void *)(a1 + 832);
    LOBYTE(v88) = 1;
    uint64_t v89 = 0;
    uint64_t v45 = sub_1CD7F9A18(v44, (uint64_t *)&v88, 1);
    uint64_t v47 = v46;
    uint64_t v48 = *(void *)(a1 + 832);
    uint64_t v49 = *(void *)a1;
    int v50 = *(_DWORD *)(a1 + 816);
    int v88 = 0;
    LODWORD(v89) = v50;
    if (v49)
    {
      uint64_t v51 = (uint64_t *)(v49 + 48);
      if (v51 != (uint64_t *)&v88)
      {
        int v52 = (unsigned __int8 *)*v51;
        int v88 = v52;
        if (v52) {
          llvm::MetadataTracking::track((uint64_t)&v88, v52, 2);
        }
      }
    }
    uint64_t v53 = *(void *)(v48 + 832);
    if (v53) {
      __int16 v54 = *(_WORD *)(v53 + 8);
    }
    else {
      __int16 v54 = 0;
    }
    *(void *)(v48 + 192) = sub_1CD7FF854((void *)v48, (const char *)0x30, (const llvm::APInt *)&v88, v45, v47, (uint64_t *)v90, v91, v54);
    *(_DWORD *)(v48 + 200) = v56;
    if (!v88) {
      goto LABEL_54;
    }
    int v57 = *v88;
    if ((v57 - 4) > 0x1E)
    {
      if ((v57 - 3) >= 0xFFFFFFFE) {
        unsigned int v82 = v88;
      }
      else {
        unsigned int v82 = 0;
      }
      if ((v57 - 3) < 0xFFFFFFFE)
      {
        if (v57 == 3) {
          *((void *)v88 + 1) = 0;
        }
        goto LABEL_54;
      }
      unint64_t v83 = (unint64_t)(v82 + 8);
    }
    else if ((v88[1] & 0x7F) != 2 && !*((_DWORD *)v88 + 3) {
           || (uint64_t v86 = *((void *)v88 + 2), (v86 & 4) == 0)
    }
           || (unint64_t v83 = v86 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_54:
      if (v90 != v92) {
        free(v90);
      }
      goto LABEL_56;
    }
    int v87 = &v88;
    sub_1CC5FA668(v83 + 16, &v87);
    goto LABEL_54;
  }
  if ((v29 - 127) >= 2)
  {
    if (v29 != 60) {
      sub_1CCFF79FC(a1, a2, *(void *)(a2 - 64), a4);
    }
  }
  else
  {
    sub_1CCFB55E0(a1, a2, *(void *)(a2 - 64), a4);
  }
LABEL_56:
  uint64_t v58 = *(void *)(a2 - 32);
  if (!v58 || *(unsigned char *)(v58 + 16) || *(void *)(v58 + 24) != *(void *)(a2 + 72) || *(_DWORD *)(v58 + 36) != 124) {
    sub_1CD7D79A4(a1, a2);
  }
  uint64_t v90 = v92;
  uint64_t v91 = 0x100000000;
  uint64_t v59 = *(uint64_t **)(a1 + 912);
  if (v59[4])
  {
    int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v59[4], *(void *)(v7 + 16), (uint64_t)v22);
    uint64_t v59 = *(uint64_t **)(a1 + 912);
  }
  else
  {
    int EdgeProbability = 0;
  }
  sub_1CCFAFDC8(v59, v22, EdgeProbability, (uint64_t)&v90);
  sub_1CD7DE748(a1, (llvm::MachineBasicBlock *)v7, v21, -1);
  if (v91)
  {
    uint64_t v61 = (char *)v90;
    int v62 = (char *)v90 + 16 * v91;
    do
    {
      unsigned int v63 = *(llvm::MachineBasicBlock **)v61;
      *((unsigned char *)v63 + 184) = 1;
      sub_1CD7DE748(a1, (llvm::MachineBasicBlock *)v7, v63, *((_DWORD *)v61 + 2));
      v61 += 16;
    }
    while (v61 != v62);
  }
  sub_1CC2BE0A8(*(unsigned int **)(v7 + 112), *(unsigned int **)(v7 + 120));
  uint64_t v64 = *(void *)(a1 + 832);
  uint64_t v65 = *(void *)a1;
  int v66 = *(_DWORD *)(a1 + 816);
  int v88 = 0;
  LODWORD(v89) = v66;
  if (v65)
  {
    int v67 = (uint64_t *)(v65 + 48);
    if (v67 != (uint64_t *)&v88)
    {
      BOOL v68 = (unsigned __int8 *)*v67;
      int v88 = v68;
      if (v68) {
        llvm::MetadataTracking::track((uint64_t)&v88, v68, 2);
      }
    }
  }
  sub_1CD3D61B4((unsigned int *)(a1 + 384), *(unsigned char **)(a1 + 672), (unsigned char *)(*(void *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  unsigned int v69 = sub_1CD7D7210((uint64_t *)a1, a1 + 384);
  uint64_t v71 = v70;
  uint64_t v72 = sub_1CD7EDC88(*(void **)(a1 + 832), (uint64_t)v21);
  uint64_t v75 = *(void *)(v64 + 832);
  if (v75) {
    LOWORD(v75) = *(_WORD *)(v75 + 8);
  }
  *(void *)(v64 + 192) = sub_1CCFDED5C(v64, 256, (const llvm::APInt *)&v88, (llvm *)1, 0, (uint64_t)v69, v71, v74, (uint64_t)v72, v73, v75);
  *(_DWORD *)(v64 + 200) = v76;
  if (v88)
  {
    int v77 = *v88;
    if ((v77 - 4) > 0x1E)
    {
      if ((v77 - 3) >= 0xFFFFFFFE) {
        unsigned int v78 = v88;
      }
      else {
        unsigned int v78 = 0;
      }
      if ((v77 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v79 = (unint64_t)(v78 + 8);
LABEL_85:
        int v87 = &v88;
        sub_1CC5FA668(v79 + 16, &v87);
        goto LABEL_77;
      }
      if (v77 == 3) {
        *((void *)v88 + 1) = 0;
      }
    }
    else if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
    {
      uint64_t v84 = *((void *)v88 + 2);
      if ((v84 & 4) != 0)
      {
        unint64_t v79 = v84 & 0xFFFFFFFFFFFFFFF8;
        if (v79) {
          goto LABEL_85;
        }
      }
    }
  }
LABEL_77:
  if (v90 != v92) {
    free(v90);
  }
}

uint64_t sub_1CCFAA104(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(llvm::APFloatBase **)(result + 832);
  int v3 = *(_DWORD *)(*(void *)v2 + 1040);
  if ((v3 & 0x80) == 0) {
    return result;
  }
  uint64_t v4 = result;
  if ((v3 & 0x100) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 48);
    if (!v5 || v5 - 24 != a2)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      uint64_t result = v7 ? v7 - 24 : 0;
      if (v7 && *(unsigned char *)(result + 16) == 84)
      {
        uint64_t v8 = *(void *)(result + 64);
        if (v8 && (*(unsigned char *)(v8 + 16) & 1) != 0) {
          return result;
        }
        uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(result, 32);
        if (result) {
          return result;
        }
        uint64_t v2 = *(llvm::APFloatBase **)(v4 + 832);
      }
    }
  }
  uint64_t v9 = *(void *)v4;
  int v10 = *(_DWORD *)(v4 + 816);
  uint64_t v24 = 0;
  int v25 = v10;
  int v11 = (unsigned __int8 **)(v9 + 48);
  if (v9) {
    BOOL v12 = v11 == &v24;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v2;
  if (!v12)
  {
    unsigned int v14 = *v11;
    uint64_t v24 = v14;
    int v13 = v2;
    if (v14)
    {
      llvm::MetadataTracking::track((uint64_t)&v24, v14, 2);
      int v13 = *(llvm::APFloatBase **)(v4 + 832);
    }
  }
  uint64_t v15 = *((void *)v13 + 24);
  unsigned int v16 = (void *)*((void *)v13 + 25);
  uint64_t v17 = *((void *)v2 + 104);
  if (v17) {
    __int16 v18 = *(_WORD *)(v17 + 8);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t result = (uint64_t)sub_1CD7F3564(v2, (const char *)0x11C, (uint64_t)&v24, (llvm *)1, 0, v15, v16, v18);
  *((void *)v2 + 24) = result;
  *((_DWORD *)v2 + 50) = v19;
  if (v24)
  {
    int v20 = *v24;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        unint64_t v21 = v24;
      }
      else {
        unint64_t v21 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_35:
        int v26 = &v24;
        return sub_1CC5FA668(v22 + 16, &v26);
      }
      if (v20 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v23 = *((void *)v24 + 2);
      if ((v23 & 4) != 0)
      {
        unint64_t v22 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_35;
        }
      }
    }
  }
  return result;
}

void *sub_1CCFAA29C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(unsigned __int8 ***)(a2 - 8);
  }
  else {
    uint64_t v4 = (unsigned __int8 **)(a2 - 32 * (v3 & 0x7FFFFFF));
  }
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)*v4;
  unsigned int v7 = *(_DWORD *)(v6 + 8);
  if ((v7 & 0xFE) == 0x12)
  {
    uint64_t v6 = **(void **)(v6 + 16);
    unsigned int v7 = *(_DWORD *)(v6 + 8);
  }
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
  }
  unsigned int v194 = sub_1CD7DE5B4(a1, v5);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)a1;
  int v11 = *(_DWORD *)(a1 + 816);
  uint64_t v204 = 0;
  int v205 = v11;
  if (v10)
  {
    BOOL v12 = (unsigned __int8 **)(v10 + 48);
    if (v12 != &v204)
    {
      uint64_t v204 = *v12;
      if (v204) {
        llvm::MetadataTracking::track((uint64_t)&v204, v204, 2);
      }
    }
  }
  uint64_t v13 = *(void *)(a1 + 832);
  int v192 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
  uint64_t v185 = *(void *)(v13 + 24);
  if (v192 != 18)
  {
    unint64_t v193 = v9;
    BOOL v189 = 0;
    unint64_t v190 = 0;
    goto LABEL_21;
  }
  uint64_t v14 = *(_DWORD *)(*(void *)a2 + 8) == 19;
  uint64_t v15 = (uint64_t *)(v194[5] + 16 * v9);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  int v18 = *v15;
  BOOL v189 = *(_DWORD *)(*(void *)a2 + 8) == 19;
  unint64_t v190 = *(unsigned int *)(*(void *)a2 + 32) | (unint64_t)(v14 << 32);
  if (!v18)
  {
    if ((*(_DWORD *)(v17 + 8) & 0xFE) != 0x12) {
      goto LABEL_16;
    }
LABEL_19:
    unint64_t v193 = v9;
    goto LABEL_21;
  }
  if ((v18 - 15) < 0x9C) {
    goto LABEL_19;
  }
LABEL_16:
  int v20 = (llvm *)sub_1CB882C1C(*(llvm::LLVMContext **)(v13 + 56), v16, v17, (llvm::Type *)(*(unsigned int *)(*(void *)a2 + 32) | (unint64_t)(v14 << 32)));
  unint64_t v21 = *(llvm::APFloatBase **)(a1 + 832);
  unint64_t v22 = v9 & 0xFFFFFFFF00000000;
  if (v189)
  {
    int v25 = sub_1CD787A68(v21, v20, v19, (uint64_t)&v204, (uint64_t)v194, (void *)v9);
    unint64_t v193 = v26 | v22;
    unsigned int v194 = v25;
    BOOL v189 = 1;
  }
  else
  {
    uint64_t v23 = sub_1CD787B1C((uint64_t)v21, v20, v19, (uint64_t)&v204, (uint64_t)v194, v9);
    BOOL v189 = 0;
    unint64_t v193 = v24 | v22;
    unsigned int v194 = v23;
  }
LABEL_21:
  uint64_t v27 = v7 >> 8;
  uint64_t v28 = 24;
  if (*(unsigned char *)(a2 + 16) == 62) {
    uint64_t v28 = 64;
  }
  uint64_t v29 = *(void *)(a2 + v28);
  int v30 = *(_DWORD *)(a2 + 20);
  if ((v30 & 0x40000000) != 0)
  {
    uint64_t v32 = *(void *)(a2 - 8);
    uint64_t v31 = v30 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v31 = v30 & 0x7FFFFFF;
    uint64_t v32 = a2 - 32 * v31;
  }
  uint64_t v188 = a2;
  uint64_t v33 = v29 | 4;
  uint64_t v34 = (unsigned __int8 **)(v32 + 32);
  uint64_t v202 = (unsigned __int8 **)(v32 + 32);
  uint64_t v203 = v33;
  if (v31 != 1)
  {
    int v191 = v33;
    int v187 = v33;
    unsigned __int8 v39 = (unsigned __int8 **)(v32 + 32 * v31);
    unsigned int v195 = v7;
    while (1)
    {
      AggregateElement = *v34;
      uint64_t v41 = (llvm::StructType *)(v203 & 0xFFFFFFFFFFFFFFF8);
      if ((v203 & 4) != 0 || !v41) {
        break;
      }
      if (AggregateElement) {
        BOOL v42 = *((unsigned char *)AggregateElement + 16) == 16;
      }
      else {
        BOOL v42 = 0;
      }
      if (!v42) {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
      }
      uint64_t v45 = (_DWORD *)AggregateElement[3];
      uint64_t v44 = AggregateElement + 3;
      int v43 = v45;
      if (v44[2] < 0x41u) {
        int v43 = v44;
      }
      if (*v43)
      {
        uint64_t v46 = *v43;
        uint64_t v47 = *((void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), v41)+ v46+ 2);
        unsigned int v48 = v191 & 0xFFFFF000;
        if ((v47 & 0x8000000000000000) == 0 && (*(unsigned char *)(v188 + 17) & 2) != 0) {
          v48 |= 3u;
        }
        uint64_t v49 = *(void *)(a1 + 832);
        uint64_t v50 = v194[5] + 16 * v193;
        uint64_t v51 = *(llvm **)v50;
        uint64_t v52 = *(void *)(v50 + 8);
        unsigned int v53 = v48;
        __int16 v54 = sub_1CD7EBF14(v49, v47, (const llvm::APInt *)&v204, *(llvm **)v50, v52, 0, 0);
        int v191 = v53;
        int v57 = sub_1CCFDED5C(v49, 56, (const llvm::APInt *)&v204, v51, v52, (uint64_t)v194, v193, v56, (uint64_t)v54, v55, v53);
        unint64_t v193 = v193 & 0xFFFFFFFF00000000 | v58;
        unsigned int v194 = v57;
      }
LABEL_171:
      sub_1CB8460E4((uint64_t)&v202);
      uint64_t v34 = v202;
      if (v202 == v39) {
        goto LABEL_27;
      }
    }
    uint64_t v59 = *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40);
    if (v7 < 0x100) {
      goto LABEL_53;
    }
    uint64_t v60 = *(unsigned int *)(v59 + 512);
    uint64_t v61 = *(void *)(v59 + 504);
    if (v60)
    {
      uint64_t v61 = *(void *)(v59 + 504);
      unint64_t v62 = *(unsigned int *)(v59 + 512);
      do
      {
        unint64_t v63 = v62 >> 1;
        uint64_t v64 = v61 + 16 * (v62 >> 1);
        unsigned int v65 = *(_DWORD *)(v64 + 8);
        uint64_t v66 = v64 + 16;
        v62 += ~(v62 >> 1);
        if (v65 < v27) {
          uint64_t v61 = v66;
        }
        else {
          unint64_t v62 = v63;
        }
      }
      while (v62);
    }
    if (v61 == *(void *)(v59 + 504) + 16 * v60 || *(_DWORD *)(v61 + 8) != v27) {
LABEL_53:
    }
      uint64_t v61 = *(void *)(v59 + 504);
    signed int v67 = *(_DWORD *)(v61 + 12);
    if (v67 > 31)
    {
      switch(v67)
      {
        case 32:
          unint64_t v68 = 5;
          if ((v203 & 4) != 0) {
            goto LABEL_76;
          }
          break;
        case 64:
          unint64_t v68 = 6;
          if ((v203 & 4) != 0) {
            goto LABEL_76;
          }
          break;
        case 128:
          unint64_t v68 = 7;
          if ((v203 & 4) != 0) {
            goto LABEL_76;
          }
          break;
        default:
          unint64_t v68 = 0;
          if ((v203 & 4) != 0) {
            goto LABEL_76;
          }
          break;
      }
    }
    else if (v67 == 1)
    {
      unint64_t v68 = 2;
      if ((v203 & 4) != 0) {
        goto LABEL_76;
      }
    }
    else
    {
      if (v67 != 8)
      {
        if (v67 == 16) {
          unint64_t v68 = 4;
        }
        else {
          unint64_t v68 = 0;
        }
        if ((v203 & 4) == 0) {
          goto LABEL_77;
        }
LABEL_76:
        if (v41) {
          goto LABEL_82;
        }
        goto LABEL_77;
      }
      unint64_t v68 = 3;
      if ((v203 & 4) != 0) {
        goto LABEL_76;
      }
    }
LABEL_77:
    unsigned int v69 = (llvm::Constant *)*v34;
    if (!*v34 || *((unsigned char *)v69 + 16) != 16) {
      unsigned int v69 = (llvm::Constant *)llvm::Constant::getAggregateElement(v69, 0);
    }
    uint64_t v72 = (unsigned int *)*((void *)v69 + 3);
    uint64_t v70 = (unsigned int *)((char *)v69 + 24);
    uint64_t v71 = v72;
    if (v70[2] < 0x41) {
      uint64_t v71 = v70;
    }
    uint64_t v41 = *(llvm::StructType **)(*((void *)v41 + 2) + 8 * *v71);
LABEL_82:
    uint64_t v73 = (llvm::DataLayout *)(v59 + 272);
    unint64_t v74 = (unint64_t)(sub_1CB83544C((uint64_t)v73, (uint64_t)v41) + 7) >> 3;
    BOOL v76 = v75 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v73, v41, 1);
    unsigned int v201 = v67;
    if (v67 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v200);
    }
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
    if (!v67) {
      unint64_t v78 = 0;
    }
    uint64_t v200 = (uint64_t *)(v78 & ((1 << Alignment) + v74 - 1) & -(1 << Alignment));
    BOOL v79 = v76;
    unsigned int v80 = *((unsigned __int8 *)AggregateElement + 16);
    if (v80 <= 0x14 && AggregateElement)
    {
      unint64_t v81 = (unsigned __int8 *)AggregateElement;
      if ((*(_DWORD *)(*AggregateElement + 8) & 0xFE) == 0x12)
      {
        SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)AggregateElement, 0);
        if (!SplatValue) {
          goto LABEL_94;
        }
        unint64_t v81 = SplatValue;
        unsigned int v80 = SplatValue[16];
      }
      if (v80 == 16)
      {
        unint64_t v83 = v81 + 24;
        uint64_t v84 = *((unsigned int *)v81 + 8);
        if (v84 > 0x40)
        {
          int v92 = 0;
          int64_t v93 = (unint64_t)(v84 + 63) >> 6;
          do
          {
            BOOL v94 = v93-- < 1;
            if (v94) {
              break;
            }
            unint64_t v95 = *(void *)(*v83 + 8 * v93);
            v92 += __clz(v95);
          }
          while (!v95);
          int v96 = v84 | 0xFFFFFFC0;
          if ((v84 & 0x3F) == 0) {
            int v96 = 0;
          }
          if (v92 + v96 == v84)
          {
LABEL_102:
            unsigned int v7 = v195;
LABEL_103:
            if (v201 >= 0x41 && v200) {
              MEMORY[0x1D25D9CB0](v200, 0x1000C8000313F17);
            }
            goto LABEL_171;
          }
        }
        else if (!*v83)
        {
          goto LABEL_102;
        }
        if (!v79)
        {
          llvm::APInt::sextOrTrunc((uint64_t)v83, v67, (uint64_t)&v197);
          llvm::APInt::operator*((uint64_t)&v200, &v197, (uint64_t)&v199);
          if (v198 >= 0x41 && v197) {
            MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
          }
          uint64_t v134 = *(void *)(a1 + 832);
          if (v192 == 18)
          {
            unint64_t v68 = sub_1CB882C1C(*(llvm::LLVMContext **)(v134 + 56), v68, 0, (llvm::Type *)v190);
            uint64_t v135 = v136;
          }
          else
          {
            uint64_t v135 = 0;
          }
          uint64_t v138 = sub_1CD7EBB14(v134, (llvm::LLVMContext *)&v199, (const llvm::APInt *)&v204, v68, v135, 0, 0);
          unsigned int v139 = v187 & 0xFFFFF000;
          unsigned int v140 = DWORD2(v199) - 1;
          int v141 = &v199;
          if (DWORD2(v199) >= 0x41) {
            int v141 = (long long *)(v199 + 8 * (v140 >> 6));
          }
          if (((*(void *)v141 >> v140) & 1) == 0 && (*(unsigned char *)(v188 + 17) & 2) != 0) {
            v139 |= 3u;
          }
          uint64_t v142 = 16 * v193;
          uint64_t v143 = sub_1CD7EB744(*(void *)(a1 + 832), v138, v137 | v186 & 0xFFFFFFFF00000000, (uint64_t)&v204, *(void *)(v194[5] + v142), *(void *)(v194[5] + v142 + 8));
          unint64_t v186 = v144 | v186 & 0xFFFFFFFF00000000;
          int v187 = v139;
          unsigned int v194 = sub_1CCFDED5C(*(void *)(a1 + 832), 56, (const llvm::APInt *)&v204, *(llvm **)(v194[5] + v142), *(void *)(v194[5] + v142 + 8), (uint64_t)v194, v193, v145, v143, v186, v139);
          unsigned int v147 = v146;
          unsigned int v7 = v195;
          if (DWORD2(v199) >= 0x41 && (void)v199) {
            MEMORY[0x1D25D9CB0](v199, 0x1000C8000313F17);
          }
          unint64_t v193 = v193 & 0xFFFFFFFF00000000 | v147;
          goto LABEL_103;
        }
      }
    }
LABEL_94:
    uint64_t v85 = sub_1CD7DE5B4(a1, (unsigned __int8 *)AggregateElement);
    unint64_t v87 = v86;
    int v88 = (uint64_t *)(v85[5] + 16 * v86);
    uint64_t v89 = *v88;
    uint64_t v90 = v88[1];
    int v91 = *v88;
    if (v91) {
      LOBYTE(v91) = (v91 - 15) < 0x9C;
    }
    else {
      int v91 = (*(_DWORD *)(v90 + 8) & 0xFE) == 18;
    }
    if (v192 == 18 && (v91 & 1) == 0)
    {
      int v98 = (llvm *)sub_1CB882C1C(*(llvm::LLVMContext **)(a1 + 968), v89, v90, (llvm::Type *)v190);
      uint64_t v99 = *(llvm::APFloatBase **)(a1 + 832);
      if (v189) {
        unint64_t v100 = sub_1CD787A68(v99, v98, v97, (uint64_t)&v204, (uint64_t)v85, (void *)v87);
      }
      else {
        unint64_t v100 = sub_1CD787B1C((uint64_t)v99, v98, v97, (uint64_t)&v204, (uint64_t)v85, v87);
      }
      uint64_t v85 = v100;
      unint64_t v87 = v101 | v87 & 0xFFFFFFFF00000000;
    }
    int v102 = (uint64_t *)(v194[5] + 16 * v193);
    uint64_t v103 = sub_1CD7EB744(*(void *)(a1 + 832), (uint64_t)v85, v87, (uint64_t)&v204, *v102, v102[1]);
    uint64_t v107 = v103;
    unint64_t v108 = v87 & 0xFFFFFFFF00000000;
    unint64_t v109 = v87 & 0xFFFFFFFF00000000 | v104;
    if (v79)
    {
      long long v199 = *(_OWORD *)(v194[5] + 16 * v193);
      unsigned int v149 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v199, v104, v105);
      uint64_t v150 = v148;
      int v151 = *(llvm::APFloatBase **)(a1 + 832);
      int v152 = (uint64_t *)&v200;
      if (v201 >= 0x41) {
        int v152 = v200;
      }
      uint64_t v154 = sub_1CD7EBF14(*(void *)(a1 + 832), *v152, (const llvm::APInt *)&v204, v149, v148, 0, 0);
      uint64_t v155 = *((void *)v151 + 104);
      if (v155) {
        __int16 v156 = *(_WORD *)(v155 + 8);
      }
      else {
        __int16 v156 = 0;
      }
      uint64_t v163 = sub_1CD7F3564(v151, (const char *)0x13E, (uint64_t)&v204, v149, v150, (uint64_t)v154, v153, v156);
      unint64_t v164 = (unint64_t)v161;
      if (v192 == 18)
      {
        uint64_t v163 = sub_1CD787A68(*(llvm::APFloatBase **)(a1 + 832), *(llvm **)(v194[5] + 16 * v193), *(void *)(v194[5] + 16 * v193 + 8), (uint64_t)&v204, (uint64_t)v163, v161);
        unint64_t v164 = v164 & 0xFFFFFFFF00000000 | v177;
      }
      uint64_t v165 = *(void *)(a1 + 832);
      uint64_t v166 = v194[5] + 16 * v193;
      uint64_t v167 = *(llvm **)v166;
      uint64_t v168 = *(void *)(v166 + 8);
      uint64_t v169 = *(void *)(v165 + 832);
      if (v169) {
        LOWORD(v169) = *(_WORD *)(v169 + 8);
      }
      unint64_t v132 = sub_1CCFDED5C(v165, 58, (const llvm::APInt *)&v204, v167, v168, v107, v109, v162, (uint64_t)v163, v164, v169);
      goto LABEL_164;
    }
    uint64_t v110 = v104;
    if (v201 >= 0x41)
    {
      int v114 = 0;
      int64_t v115 = ((unint64_t)v201 + 63) >> 6;
      uint64_t v116 = v115;
      do
      {
        BOOL v94 = v116-- < 1;
        if (v94) {
          break;
        }
        unint64_t v117 = v200[v116];
        v114 += __clz(v117);
      }
      while (!v117);
      unsigned int v118 = v201 | 0xFFFFFFC0;
      if ((v201 & 0x3F) == 0) {
        unsigned int v118 = 0;
      }
      if (v201 - v114 - v118 < 0x41 && *v200 == 1) {
        goto LABEL_165;
      }
      uint64_t v119 = 0;
      int v120 = 0;
      do
      {
        uint8x8_t v121 = (uint8x8_t)vcnt_s8((int8x8_t)v200[v119]);
        v121.i16[0] = vaddlv_u8(v121);
        v120 += v121.i32[0];
        ++v119;
      }
      while (v115 != v119);
      if (v120 == 1)
      {
        int v122 = 0;
        do
        {
          BOOL v94 = v115-- < 1;
          if (v94) {
            break;
          }
          unint64_t v123 = v200[v115];
          v122 += __clz(v123);
        }
        while (!v123);
        int v113 = v122 + v118;
        goto LABEL_132;
      }
      uint64_t v111 = *v200;
    }
    else
    {
      uint64_t v111 = (uint64_t)v200;
      if (v200 == (uint64_t *)1)
      {
LABEL_165:
        uint64_t v170 = *(void *)(a1 + 832);
        uint64_t v171 = v194[5] + 16 * v193;
        uint64_t v172 = *(llvm **)v171;
        uint64_t v173 = *(void *)(v171 + 8);
        uint64_t v174 = *(void *)(v170 + 832);
        if (v174) {
          LOWORD(v174) = *(_WORD *)(v174 + 8);
        }
        unsigned int v194 = sub_1CCFDED5C(v170, 56, (const llvm::APInt *)&v204, v172, v173, (uint64_t)v194, v193, v106, v107, v109, v174);
        unsigned int v176 = v175;
        if (v201 >= 0x41 && v200) {
          MEMORY[0x1D25D9CB0](v200, 0x1000C8000313F17);
        }
        unint64_t v193 = v193 & 0xFFFFFFFF00000000 | v176;
        unsigned int v7 = v195;
        goto LABEL_171;
      }
      uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)v200);
      v112.i16[0] = vaddlv_u8(v112);
      if (v112.u32[0] == 1)
      {
        int v113 = v201 + __clz((unint64_t)v200) - 64;
LABEL_132:
        uint64_t v124 = *(void *)(a1 + 832);
        uint64_t v125 = v194[5] + 16 * v193;
        uint64_t v126 = *(llvm **)v125;
        uint64_t v127 = *(void *)(v125 + 8);
        uint64_t v128 = sub_1CD7EBF14(v124, v201 + ~v113, (const llvm::APInt *)&v204, *(llvm **)(*(void *)(v103 + 40) + 16 * v110), *(void *)(*(void *)(v103 + 40) + 16 * v110 + 8), 0, 0);
        uint64_t v131 = *(void *)(v124 + 832);
        if (v131) {
          LOWORD(v131) = *(_WORD *)(v131 + 8);
        }
        unint64_t v132 = sub_1CCFDED5C(v124, 175, (const llvm::APInt *)&v204, v126, v127, v107, v109, v130, (uint64_t)v128, v129, v131);
LABEL_164:
        uint64_t v107 = (uint64_t)v132;
        unint64_t v109 = v133 | v108;
        goto LABEL_165;
      }
    }
    uint64_t v157 = sub_1CD7EBF14(*(void *)(a1 + 832), v111, (const llvm::APInt *)&v204, *(llvm **)(*(void *)(v103 + 40) + 16 * v110), *(void *)(*(void *)(v103 + 40) + 16 * v110 + 8), 0, 0);
    uint64_t v160 = *(void *)(*(void *)(a1 + 832) + 832);
    if (v160) {
      LOWORD(v160) = *(_WORD *)(v160 + 8);
    }
    unint64_t v132 = sub_1CCFDED5C(*(void *)(a1 + 832), 58, (const llvm::APInt *)&v204, *(llvm **)(v194[5] + 16 * v193), *(void *)(v194[5] + 16 * v193 + 8), v107, v109, v159, (uint64_t)v157, v158, v160);
    goto LABEL_164;
  }
LABEL_27:
  char v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v185 + 32))(v185, *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272, v27);
  unsigned __int8 v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v185 + 40))(v185, *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272, v27);
  if (v192 == 18)
  {
    char v178 = v36;
    uint64_t v37 = v188;
    uint64_t v38 = v193;
    if (HIDWORD(v190) == 1)
    {
      char v35 = sub_1CB882CA4(v35, v190);
      unsigned __int8 v36 = sub_1CB882CA4(v178, v190);
    }
    else
    {
      char v35 = sub_1CB883124(v35, v190);
      unsigned __int8 v36 = sub_1CB883124(v178, v190);
    }
  }
  else
  {
    uint64_t v37 = v188;
    uint64_t v38 = v193;
  }
  if (v36 != v35 && (*(unsigned char *)(v37 + 17) & 2) == 0)
  {
    unsigned int v194 = sub_1CD7EB9C8(*(void *)(a1 + 832), (uint64_t)v194, v38, (const llvm::APInt *)&v204, v36, 0);
    LODWORD(v38) = v179;
  }
  uint64_t v202 = (unsigned __int8 **)v37;
  uint64_t result = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v202);
  result[1] = v194;
  *((_DWORD *)result + 4) = v38;
  if (v204)
  {
    int v181 = *v204;
    if ((v181 - 4) > 0x1E)
    {
      if ((v181 - 3) >= 0xFFFFFFFE) {
        unsigned int v182 = v204;
      }
      else {
        unsigned int v182 = 0;
      }
      if ((v181 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v183 = (unint64_t)(v182 + 8);
LABEL_191:
        uint64_t v202 = &v204;
        return (void *)sub_1CC5FA668(v183 + 16, &v202);
      }
      if (v181 == 3) {
        *((void *)v204 + 1) = 0;
      }
    }
    else if ((v204[1] & 0x7F) == 2 || *((_DWORD *)v204 + 3))
    {
      uint64_t v184 = *((void *)v204 + 2);
      if ((v184 & 4) != 0)
      {
        unint64_t v183 = v184 & 0xFFFFFFFFFFFFFFF8;
        if (v183) {
          goto LABEL_191;
        }
      }
    }
  }
  return result;
}

void *sub_1CCFAB084(uint64_t a1, unsigned __int8 **a2)
{
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = (unsigned __int8 **)*(a2 - 1);
  }
  else {
    uint64_t v5 = &a2[-4 * (v4 & 0x7FFFFFF)];
  }
  uint64_t v6 = sub_1CD7DE5B4(a1, *v5);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)a1;
  int v10 = *(_DWORD *)(a1 + 816);
  uint64_t v34 = 0;
  int v35 = v10;
  BOOL v12 = v9 == 0;
  int v11 = (unsigned __int8 **)(v9 + 48);
  BOOL v12 = v12 || v11 == &v34;
  if (!v12)
  {
    uint64_t v13 = *v11;
    uint64_t v34 = v13;
    if (v13) {
      llvm::MetadataTracking::track((uint64_t)&v34, v13, 2);
    }
  }
  uint64_t v15 = (llvm *)sub_1CB87DC14(*(void *)(*(void *)(a1 + 832) + 24), *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272, (llvm::EVT *)*a2, 0);
  uint64_t v16 = (unsigned __int8 *)(v6[5] + 16 * v8);
  if (v15 != *v16
    || ((v17 = *((void *)v16 + 1), !(_BYTE)v15) ? (BOOL v18 = v14 == v17) : (BOOL v18 = 1), !v18))
  {
    unint64_t v21 = *(llvm::APFloatBase **)(a1 + 832);
    uint64_t v22 = *((void *)v21 + 104);
    if (v22) {
      __int16 v23 = *(_WORD *)(v22 + 8);
    }
    else {
      __int16 v23 = 0;
    }
    uint64_t v24 = (uint64_t)sub_1CD7F3564(v21, (const char *)0xD8, (uint64_t)&v34, v15, v14, (uint64_t)v6, v8, v23);
    goto LABEL_22;
  }
  int v19 = *((_DWORD *)a2 + 5);
  if ((v19 & 0x40000000) != 0) {
    int v20 = (unsigned __int8 **)*(a2 - 1);
  }
  else {
    int v20 = &a2[-4 * (v19 & 0x7FFFFFF)];
  }
  uint64_t v32 = *v20;
  if (v32 && v32[16] == 16)
  {
    uint64_t v24 = sub_1CD7EBB14(*(void *)(a1 + 832), (llvm::LLVMContext *)(v32 + 24), (const llvm::APInt *)&v34, (uint64_t)v15, v14, 0, 1);
LABEL_22:
    uint64_t v26 = v24;
    int v27 = v25;
    unsigned __int8 v36 = a2;
    uint64_t result = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v36);
    result[1] = v26;
    *((_DWORD *)result + 4) = v27;
    goto LABEL_23;
  }
  unsigned __int8 v36 = a2;
  uint64_t result = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v36);
  result[1] = v6;
  *((_DWORD *)result + 4) = v8;
LABEL_23:
  if (v34)
  {
    int v29 = *v34;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        int v30 = v34;
      }
      else {
        int v30 = 0;
      }
      if ((v29 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v31 = (unint64_t)(v30 + 8);
LABEL_33:
        unsigned __int8 v36 = &v34;
        return (void *)sub_1CC5FA668(v31 + 16, &v36);
      }
      if (v29 == 3) {
        *((void *)v34 + 1) = 0;
      }
    }
    else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
    {
      uint64_t v33 = *((void *)v34 + 2);
      if ((v33 & 4) != 0)
      {
        unint64_t v31 = v33 & 0xFFFFFFFFFFFFFFF8;
        if (v31) {
          goto LABEL_33;
        }
      }
    }
  }
  return result;
}

void sub_1CCFAB2A8(uint64_t a1, llvm::CallInst *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *((void *)a2 - 4);
  if (*(unsigned char *)(v6 + 16))
  {
    if (*(unsigned char *)(v6 + 16) == 24)
    {
      sub_1CCFB1C0C(a1, (uint64_t)a2, 0, a4);
      return;
    }
    goto LABEL_163;
  }
  if (*(void *)(v6 + 24) != *((void *)a2 + 9)) {
    goto LABEL_163;
  }
  llvm::diagnoseDontCall((uint64_t)a2, a2);
  if (*(unsigned char *)(v6 + 16))
  {
    if (*(unsigned char *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0) {
      goto LABEL_19;
    }
  }
  else if (*(void *)(v6 + 72) != v6 + 72 || (*(unsigned char *)(v6 + 34) & 0x80) != 0)
  {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned int *)(v6 + 36);
  if (v8
    || (uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 824) + 56))(*(void *)(a1 + 824))) != 0
    && (uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v6), v8))
  {
    sub_1CCFB85C8(a1, (uint64_t)a2, v8, v7);
    return;
  }
LABEL_19:
  int v144 = 0;
  int v10 = (unsigned char *)*((void *)a2 + 8);
  if (!v10 || (v10[14] & 0x10) == 0)
  {
    int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 20);
    int v10 = (unsigned char *)*((void *)a2 + 8);
    if (!hasFnAttrOnCalledFunction) {
      goto LABEL_26;
    }
    if (!v10) {
      goto LABEL_24;
    }
  }
  if ((v10[12] & 0x10) == 0)
  {
LABEL_24:
    if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 4)) {
      goto LABEL_163;
    }
    int v10 = (unsigned char *)*((void *)a2 + 8);
LABEL_26:
    if (!v10) {
      goto LABEL_28;
    }
  }
  if ((v10[19] & 0x20) != 0) {
    goto LABEL_163;
  }
LABEL_28:
  if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 61)) {
    goto LABEL_163;
  }
  if ((*(_DWORD *)(v6 + 32) & 0xFu) - 7 < 2) {
    goto LABEL_163;
  }
  if ((*(unsigned char *)(v6 + 23) & 0x10) == 0) {
    goto LABEL_163;
  }
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(**(void **)(a1 + 848), (uint64_t ***)v6, &v144)) {
    goto LABEL_163;
  }
  int v12 = v144;
  if (!sub_1CD78B778(*(void **)(a1 + 848), v144)) {
    goto LABEL_163;
  }
  if (v12 > 369)
  {
    if (v12 <= 407)
    {
      switch(v12)
      {
        case 370:
        case 371:
        case 372:
          uint64_t v43 = a1;
          uint64_t v44 = a2;
          uint64_t v45 = 237;
          goto LABEL_96;
        case 373:
        case 375:
        case 376:
        case 377:
        case 380:
        case 381:
        case 382:
        case 383:
        case 386:
        case 387:
        case 388:
        case 390:
        case 391:
        case 392:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
          goto LABEL_163;
        case 374:
        case 378:
        case 379:
          uint64_t v43 = a1;
          uint64_t v44 = a2;
          uint64_t v45 = 239;
          goto LABEL_96;
        case 384:
        case 385:
        case 389:
          uint64_t v43 = a1;
          uint64_t v44 = a2;
          uint64_t v45 = 226;
          goto LABEL_96;
        case 393:
        case 394:
        case 395:
          goto LABEL_84;
        case 401:
          uint64_t v13 = a1;
          uint64_t v14 = (unsigned __int8 *)a2;
          goto LABEL_63;
        default:
          if (v12 != 406) {
            goto LABEL_163;
          }
          unint64_t v62 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
          unint64_t v63 = *(unsigned __int8 **)v62;
          uint64_t v64 = (unsigned __int8 *)*((void *)v62 + 4);
          uint64_t v65 = *(void *)(a1 + 832);
          uint64_t v66 = *(void *)(v65 + 8);
          uint64_t v67 = *(void *)a1;
          LODWORD(v62) = *(_DWORD *)(a1 + 816);
          unsigned int v149 = 0;
          int v150 = (int)v62;
          uint64_t v68 = v65;
          if (v67)
          {
            unsigned int v69 = (unsigned __int8 **)(v67 + 48);
            uint64_t v68 = v65;
            if (v69 != (unsigned __int8 **)&v149)
            {
              uint64_t v70 = *v69;
              unsigned int v149 = (llvm::CallInst **)v70;
              uint64_t v68 = v65;
              if (v70)
              {
                llvm::MetadataTracking::track((uint64_t)&v149, v70, 2);
                uint64_t v68 = *(void *)(a1 + 832);
              }
            }
          }
          uint64_t v71 = *(void *)(v68 + 192);
          uint64_t v72 = *(void *)(v68 + 200);
          uint64_t v73 = sub_1CD7DE5B4(a1, v63);
          uint64_t v75 = v74;
          sub_1CD7DE5B4(a1, v64);
          unsigned int v76 = 0;
          int v151 = (unsigned __int8 **)((unint64_t)v63 & 0xFFFFFFFFFFFFFFFBLL);
          uint64_t v152 = 0;
          char v154 = 0;
          if (v63)
          {
            unsigned int v77 = *(_DWORD *)(*(void *)v63 + 8);
            if ((v77 & 0xFE) == 0x12) {
              unsigned int v77 = *(_DWORD *)(**(void **)(*(void *)v63 + 16) + 8);
            }
            unsigned int v76 = v77 >> 8;
          }
          unsigned int v78 = 0;
          unsigned int v153 = v76;
          uint64_t v145 = (llvm::CallInst *)((unint64_t)v64 & 0xFFFFFFFFFFFFFFFBLL);
          uint64_t v146 = 0;
          char v148 = 0;
          if (v64)
          {
            unsigned int v79 = *(_DWORD *)(*(void *)v64 + 8);
            if ((v79 & 0xFE) == 0x12) {
              unsigned int v79 = *(_DWORD *)(**(void **)(*(void *)v64 + 16) + 8);
            }
            unsigned int v78 = v79 >> 8;
          }
          unsigned int v147 = v78;
          (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, llvm::CallInst ***, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v66 + 64))(&v155, v66, v65, &v149, v71, v72, v73, v75);
          if (!v149) {
            goto LABEL_129;
          }
          int v80 = *(unsigned __int8 *)v149;
          if ((v80 - 4) > 0x1E)
          {
            if ((v80 - 3) >= 0xFFFFFFFE) {
              uint64_t v130 = v149;
            }
            else {
              uint64_t v130 = 0;
            }
            if ((v80 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v131 = (unint64_t)(v130 + 1);
LABEL_200:
              uint64_t v158 = &v149;
              sub_1CC5FA668(v131 + 16, &v158);
              goto LABEL_129;
            }
            if (v80 == 3) {
              v149[1] = 0;
            }
          }
          else if ((*((unsigned char *)v149 + 1) & 0x7F) == 2 || *((_DWORD *)v149 + 3))
          {
            unint64_t v134 = (unint64_t)v149[2];
            if ((v134 & 4) != 0)
            {
              unint64_t v131 = v134 & 0xFFFFFFFFFFFFFFF8;
              if (v131) {
                goto LABEL_200;
              }
            }
          }
LABEL_129:
          unint64_t v81 = v155;
          if (!v155) {
            goto LABEL_163;
          }
          uint64_t v82 = v156;
          unint64_t v83 = (uint64_t *)a1;
          uint64_t v84 = (llvm::EVT **)a2;
          int v85 = 1;
          break;
      }
      goto LABEL_170;
    }
    if (v12 <= 412)
    {
      if (v12 != 408) {
        goto LABEL_163;
      }
      uint64_t v13 = a1;
      uint64_t v14 = (unsigned __int8 *)a2;
LABEL_63:
      if (!sub_1CCFC21BC(v13, v14)) {
        goto LABEL_163;
      }
      return;
    }
    if ((v12 - 445) < 3)
    {
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 236;
      goto LABEL_96;
    }
    if (v12 == 413)
    {
      BOOL v105 = (unsigned __int8 *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      uint64_t v106 = *(void *)(a1 + 832);
      uint64_t v107 = *(void *)(v106 + 8);
      uint64_t v108 = *(void *)a1;
      int v109 = *(_DWORD *)(a1 + 816);
      uint64_t v145 = 0;
      LODWORD(v146) = v109;
      uint64_t v110 = v106;
      if (v108)
      {
        uint64_t v111 = (unsigned __int8 **)(v108 + 48);
        uint64_t v110 = v106;
        if (v111 != (unsigned __int8 **)&v145)
        {
          uint8x8_t v112 = *v111;
          uint64_t v145 = (llvm::CallInst *)v112;
          uint64_t v110 = v106;
          if (v112)
          {
            llvm::MetadataTracking::track((uint64_t)&v145, v112, 2);
            uint64_t v110 = *(void *)(a1 + 832);
          }
        }
      }
      uint64_t v113 = *(void *)(v110 + 192);
      uint64_t v114 = *(void *)(v110 + 200);
      uint64_t v116 = sub_1CD7DE5B4(a1, v105);
      unsigned int v117 = 0;
      int v151 = (unsigned __int8 **)((unint64_t)v105 & 0xFFFFFFFFFFFFFFFBLL);
      uint64_t v152 = 0;
      char v154 = 0;
      if (v105)
      {
        unsigned int v118 = *(_DWORD *)(*(void *)v105 + 8);
        if ((v118 & 0xFE) == 0x12) {
          unsigned int v118 = *(_DWORD *)(**(void **)(*(void *)v105 + 16) + 8);
        }
        unsigned int v117 = v118 >> 8;
      }
      unsigned int v153 = v117;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, llvm::CallInst **, uint64_t, uint64_t, uint64_t *, uint64_t, unsigned __int8 ***))(*(void *)v107 + 72))(&v155, v107, v106, &v145, v113, v114, v116, v115, &v151);
    }
    else
    {
      if (v12 != 419) {
        goto LABEL_163;
      }
      uint64_t v46 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      uint64_t v47 = *(unsigned __int8 **)v46;
      unsigned int v48 = (unsigned __int8 *)*((void *)v46 + 4);
      uint64_t v49 = *(void *)(a1 + 832);
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v51 = *(void *)a1;
      LODWORD(v46) = *(_DWORD *)(a1 + 816);
      uint64_t v145 = 0;
      LODWORD(v146) = v46;
      uint64_t v52 = v49;
      if (v51)
      {
        unsigned int v53 = (unsigned __int8 **)(v51 + 48);
        uint64_t v52 = v49;
        if (v53 != (unsigned __int8 **)&v145)
        {
          __int16 v54 = *v53;
          uint64_t v145 = (llvm::CallInst *)v54;
          uint64_t v52 = v49;
          if (v54)
          {
            llvm::MetadataTracking::track((uint64_t)&v145, v54, 2);
            uint64_t v52 = *(void *)(a1 + 832);
          }
        }
      }
      uint64_t v55 = *(void *)(v52 + 192);
      uint64_t v56 = *(void *)(v52 + 200);
      int v57 = sub_1CD7DE5B4(a1, v47);
      uint64_t v59 = v58;
      sub_1CD7DE5B4(a1, v48);
      unsigned int v60 = 0;
      int v151 = (unsigned __int8 **)((unint64_t)v47 & 0xFFFFFFFFFFFFFFFBLL);
      uint64_t v152 = 0;
      char v154 = 0;
      if (v47)
      {
        unsigned int v61 = *(_DWORD *)(*(void *)v47 + 8);
        if ((v61 & 0xFE) == 0x12) {
          unsigned int v61 = *(_DWORD *)(**(void **)(*(void *)v47 + 16) + 8);
        }
        unsigned int v60 = v61 >> 8;
      }
      unsigned int v153 = v60;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, llvm::CallInst **, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v50 + 80))(&v155, v50, v49, &v145, v55, v56, v57, v59);
    }
    if (v145)
    {
      int v119 = *(unsigned __int8 *)v145;
      if ((v119 - 4) > 0x1E)
      {
        if ((v119 - 3) >= 0xFFFFFFFE) {
          uint64_t v125 = v145;
        }
        else {
          uint64_t v125 = 0;
        }
        if ((v119 - 3) < 0xFFFFFFFE)
        {
          if (v119 == 3) {
            *((void *)v145 + 1) = 0;
          }
          goto LABEL_162;
        }
        unint64_t v126 = (unint64_t)v125 + 8;
      }
      else
      {
        if ((*((unsigned char *)v145 + 1) & 0x7F) != 2 && !*((_DWORD *)v145 + 3)) {
          goto LABEL_162;
        }
        uint64_t v132 = *((void *)v145 + 2);
        if ((v132 & 4) == 0) {
          goto LABEL_162;
        }
        unint64_t v126 = v132 & 0xFFFFFFFFFFFFFFF8;
        if (!v126) {
          goto LABEL_162;
        }
      }
      unsigned int v149 = &v145;
      sub_1CC5FA668(v126 + 16, &v149);
    }
LABEL_162:
    unint64_t v81 = v155;
    if (!v155) {
      goto LABEL_163;
    }
    uint64_t v82 = v156;
    unint64_t v83 = (uint64_t *)a1;
    uint64_t v84 = (llvm::EVT **)a2;
    int v85 = 0;
LABEL_170:
    sub_1CD7E70E4(v83, v84, (uint64_t)v81, v82, v85);
LABEL_171:
    unsigned int v124 = *(_DWORD *)(a1 + 112);
    if (v124 >= *(_DWORD *)(a1 + 116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)(a1 + 104) + 16 * v124) = v157;
    ++*(_DWORD *)(a1 + 112);
    return;
  }
  if (v12 > 233)
  {
    if (v12 <= 306)
    {
      char v39 = v12 + 22;
      if ((v12 - 234) > 0xB) {
        goto LABEL_163;
      }
      if (((1 << v39) & 7) == 0)
      {
        if (((1 << v39) & 0x1C0) != 0)
        {
          uint64_t v40 = a1;
          uint64_t v41 = a2;
          uint64_t v42 = 247;
        }
        else
        {
          if (((1 << v39) & 0xE00) == 0) {
            goto LABEL_163;
          }
          uint64_t v40 = a1;
          uint64_t v41 = a2;
          uint64_t v42 = 246;
        }
        if (sub_1CD7E7C0C(v40, (uint64_t)v41, v42)) {
          return;
        }
        goto LABEL_163;
      }
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 241;
      goto LABEL_96;
    }
    if (v12 > 320)
    {
      if ((v12 - 335) < 3)
      {
        uint64_t v43 = a1;
        uint64_t v44 = a2;
        uint64_t v45 = 238;
        goto LABEL_96;
      }
      if (v12 != 321)
      {
        if (v12 == 324)
        {
          sub_1CD7E7848(a1, (uint64_t)a2);
          return;
        }
        goto LABEL_163;
      }
      goto LABEL_147;
    }
    if ((v12 - 307) < 3)
    {
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 231;
      goto LABEL_96;
    }
    if (v12 != 320) {
      goto LABEL_163;
    }
    unint64_t v86 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    unint64_t v87 = *(unsigned __int8 **)v86;
    int v88 = (unsigned __int8 *)*((void *)v86 + 4);
    uint64_t v89 = (unsigned __int8 *)*((void *)v86 + 8);
    uint64_t v90 = *(void *)(a1 + 832);
    uint64_t v91 = *(void *)(v90 + 8);
    uint64_t v92 = *(void *)a1;
    LODWORD(v86) = *(_DWORD *)(a1 + 816);
    uint64_t v145 = 0;
    LODWORD(v146) = v86;
    uint64_t v93 = v90;
    if (v92)
    {
      BOOL v94 = (unsigned __int8 **)(v92 + 48);
      uint64_t v93 = v90;
      if (v94 != (unsigned __int8 **)&v145)
      {
        unint64_t v95 = *v94;
        uint64_t v145 = (llvm::CallInst *)v95;
        uint64_t v93 = v90;
        if (v95)
        {
          llvm::MetadataTracking::track((uint64_t)&v145, v95, 2);
          uint64_t v93 = *(void *)(a1 + 832);
        }
      }
    }
    uint64_t v142 = *(void *)(v93 + 200);
    uint64_t v143 = *(void *)(v93 + 192);
    int v96 = sub_1CD7DE5B4(a1, v87);
    uint64_t v98 = v97;
    sub_1CD7DE5B4(a1, v88);
    sub_1CD7DE5B4(a1, v89);
    unsigned int v99 = 0;
    int v151 = (unsigned __int8 **)((unint64_t)v87 & 0xFFFFFFFFFFFFFFFBLL);
    uint64_t v152 = 0;
    char v154 = 0;
    if (v87)
    {
      unsigned int v100 = *(_DWORD *)(*(void *)v87 + 8);
      if ((v100 & 0xFE) == 0x12) {
        unsigned int v100 = *(_DWORD *)(**(void **)(*(void *)v87 + 16) + 8);
      }
      unsigned int v99 = v100 >> 8;
    }
    unsigned int v153 = v99;
    (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, llvm::CallInst **, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v91 + 48))(&v155, v91, v90, &v145, v143, v142, v96, v98);
    if (v145)
    {
      int v101 = *(unsigned __int8 *)v145;
      if ((v101 - 4) > 0x1E)
      {
        if ((v101 - 3) >= 0xFFFFFFFE) {
          uint64_t v128 = v145;
        }
        else {
          uint64_t v128 = 0;
        }
        if ((v101 - 3) < 0xFFFFFFFE)
        {
          if (v101 == 3) {
            *((void *)v145 + 1) = 0;
          }
          goto LABEL_144;
        }
        unint64_t v129 = (unint64_t)v128 + 8;
      }
      else
      {
        if ((*((unsigned char *)v145 + 1) & 0x7F) != 2 && !*((_DWORD *)v145 + 3)) {
          goto LABEL_144;
        }
        uint64_t v133 = *((void *)v145 + 2);
        if ((v133 & 4) == 0) {
          goto LABEL_144;
        }
        unint64_t v129 = v133 & 0xFFFFFFFFFFFFFFF8;
        if (!v129) {
          goto LABEL_144;
        }
      }
      unsigned int v149 = &v145;
      sub_1CC5FA668(v129 + 16, &v149);
    }
LABEL_144:
    int v102 = v155;
    if (!v155) {
      goto LABEL_163;
    }
    int v103 = v156;
    uint64_t v145 = a2;
    uint64_t v104 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v145);
    v104[1] = v102;
    *((_DWORD *)v104 + 4) = v103;
    goto LABEL_171;
  }
  if (v12 > 187)
  {
    if (v12 > 214)
    {
      if ((v12 - 215) >= 3) {
        goto LABEL_163;
      }
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 223;
    }
    else if ((v12 - 207) < 3)
    {
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 234;
    }
    else
    {
      if ((v12 - 188) >= 2 && v12 != 193) {
        goto LABEL_163;
      }
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 227;
    }
LABEL_96:
    if (sub_1CD7E7AFC(v43, (uint64_t)v44, (const char *)v45)) {
      return;
    }
    goto LABEL_163;
  }
  if (v12 <= 177)
  {
    if ((v12 - 123) < 3)
    {
LABEL_84:
      uint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = 224;
      goto LABEL_96;
    }
    if (v12 != 168) {
      goto LABEL_163;
    }
LABEL_147:
    if (sub_1CD7E7214(a1, (uint64_t)a2)) {
      return;
    }
    goto LABEL_163;
  }
  if ((v12 - 178) < 3)
  {
    uint64_t v43 = a1;
    uint64_t v44 = a2;
    uint64_t v45 = 235;
    goto LABEL_96;
  }
  if ((v12 - 185) >= 3) {
    goto LABEL_163;
  }
  uint64_t v15 = *((void *)a2 + 8);
  if (!v15 || (*(unsigned char *)(v15 + 17) & 0x30) == 0)
  {
    int v16 = *((_DWORD *)a2 + 5);
    if (v16 < 0)
    {
      uint64_t v135 = (char *)a2 - 32 * (v16 & 0x7FFFFFF);
      uint64_t v138 = *((void *)v135 - 1);
      uint64_t v136 = v135 - 8;
      uint64_t v137 = v138;
      if (v138)
      {
        uint64_t v139 = -v137;
        do
        {
          unsigned int v140 = *(_DWORD *)(*(void *)&v136[v139] + 8);
          if (v140 >= 2 && v140 != 7) {
            goto LABEL_163;
          }
          v139 += 16;
        }
        while (v139);
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
    {
LABEL_163:
      if (sub_1CC646CF4((uint64_t)a2, 7))
      {
        sub_1CD7E1398(a1, a2, 0);
      }
      else
      {
        int v120 = sub_1CD7DE5B4(a1, *((unsigned __int8 **)a2 - 4));
        uint64_t v122 = v121;
        if (sub_1CC646CF4((uint64_t)a2, 0))
        {
          sub_1CD80BA88(a1, (uint64_t)a2, (uint64_t)v120, v122);
        }
        else
        {
          int v123 = *((_WORD *)a2 + 9) & 3;
          sub_1CCFB60B8(a1, (unint64_t)a2, (uint64_t)v120, v122, (v123 - 1) < 2, v123 == 2, 0, 0);
        }
      }
      return;
    }
  }
  uint64_t v17 = sub_1CD7DE5B4(a1, *((unsigned __int8 **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
  uint64_t v19 = v18;
  unint64_t v21 = sub_1CD7DE5B4(a1, ((unsigned __int8 **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(a1 + 832);
  uint64_t v25 = *(void *)a1;
  int v26 = *(_DWORD *)(a1 + 816);
  uint64_t v155 = 0;
  LODWORD(v156) = v26;
  if (v25)
  {
    int v27 = (unsigned __int8 **)(v25 + 48);
    if (v27 != &v155)
    {
      uint64_t v155 = *v27;
      if (v155) {
        llvm::MetadataTracking::track((uint64_t)&v155, v155, 2);
      }
    }
  }
  uint64_t v28 = v17[5] + 16 * v19;
  int v29 = *(llvm **)v28;
  uint64_t v30 = *(void *)(v28 + 8);
  uint64_t v31 = *(void *)(v24 + 832);
  if (v31) {
    LOWORD(v31) = *(_WORD *)(v31 + 8);
  }
  uint64_t v32 = sub_1CCFDED5C(v24, 143, (const llvm::APInt *)&v155, v29, v30, (uint64_t)v17, v19, v20, (uint64_t)v21, v23, v31);
  int v34 = v33;
  int v151 = (unsigned __int8 **)a2;
  int v35 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v151);
  v35[1] = v32;
  *((_DWORD *)v35 + 4) = v34;
  if (v155)
  {
    int v36 = *v155;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v127 = v155;
      }
      else {
        uint64_t v127 = 0;
      }
      if ((v36 - 3) < 0xFFFFFFFE)
      {
        if (v36 == 3) {
          *((void *)v155 + 1) = 0;
        }
        return;
      }
      unint64_t v38 = (unint64_t)(v127 + 8);
    }
    else
    {
      if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
        return;
      }
      uint64_t v37 = *((void *)v155 + 2);
      if ((v37 & 4) == 0) {
        return;
      }
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (!v38) {
        return;
      }
    }
    int v151 = &v155;
    sub_1CC5FA668(v38 + 16, &v151);
  }
}

void sub_1CCFAC140(uint64_t a1, uint64_t a2)
{
  v127[8] = *MEMORY[0x1E4F143B8];
  uint64_t v125 = (long long *)v127;
  uint64_t v126 = 0x400000000;
  llvm::ComputeValueVTs(*(void *)(*(void *)(a1 + 832) + 24), (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), *(void *)a2, (uint64_t)&v125, 0, 0, 0);
  int v4 = v126;
  if (!v126) {
    goto LABEL_2;
  }
  uint64_t v122 = v124;
  uint64_t v123 = 0x400000000;
  sub_1CD3E535C((uint64_t *)&v122, v126, 0, 0);
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(unsigned __int8 ***)(a2 - 8);
  }
  else {
    uint64_t v6 = (unsigned __int8 **)(a2 - 32 * (v5 & 0x7FFFFFF));
  }
  uint64_t v7 = sub_1CD7DE5B4(a1, *v6);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  }
  int v12 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(v11 + 32));
  unsigned int v14 = v13;
  int v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0) {
    uint64_t v16 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v16 = a2 - 32 * (v15 & 0x7FFFFFF);
  }
  uint8x8_t v112 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(v16 + 64));
  unsigned int v18 = v17;
  long long __src = v121;
  uint64_t v120 = 0x100000000;
  sub_1CD3E535C((uint64_t *)&__src, 1uLL, (uint64_t)v7, v9);
  uint64_t v19 = (unsigned __int8 *)(v7[5] + 16 * v9);
  if (*v19) {
    BOOL v20 = *v19 - 15 < 0x9C;
  }
  else {
    BOOL v20 = (*(_DWORD *)(*((void *)v19 + 1) + 8) & 0xFE) == 18;
  }
  if (v20) {
    int v21 = 191;
  }
  else {
    int v21 = 190;
  }
  unsigned int v113 = v21;
  unsigned __int16 v115 = 0;
  if (sub_1CB845E74(a2)) {
    sub_1CD7E166C(&v115, a2);
  }
  uint64_t v111 = a2;
  if (!v126) {
    goto LABEL_135;
  }
  if (v126 != 1)
  {
    unint64_t v23 = 0;
    uint64_t v22 = v125;
    while (LOBYTE(v125[v23 / 0x10 + 1]) == LOBYTE(v125[v23 / 0x10])
         && (LOBYTE(v125[v23 / 0x10 + 1]) || *((void *)&v125[v23 / 0x10 + 1] + 1) == *((void *)&v125[v23 / 0x10] + 1)))
    {
      v23 += 16;
      if (16 * v126 - 16 == v23) {
        goto LABEL_30;
      }
    }
    goto LABEL_135;
  }
  uint64_t v22 = v125;
LABEL_30:
  long long v114 = *v22;
  uint64_t v24 = *(void *)(a1 + 832);
  uint64_t v25 = *(llvm::LLVMContext **)(v24 + 56);
  unint64_t v26 = *(void *)(v24 + 24);
  uint64_t v28 = *((void *)&v114 + 1);
  uint64_t v27 = v114;
  while (1)
  {
    llvm::TargetLoweringBase::getTypeConversion(v26, v25, v27, v28, (uint64_t)&v117);
    if (!(_BYTE)v117) {
      break;
    }
    llvm::TargetLoweringBase::getTypeConversion(v26, v25, v114, *((uint64_t *)&v114 + 1), (uint64_t)&v117);
    uint64_t v28 = *((void *)&v118[0] + 1);
    uint64_t v27 = *(void *)&v118[0];
    long long v114 = v118[0];
  }
  if ((_BYTE)v114)
  {
    uint64_t v29 = v111;
    if (v114 - 15 >= 0x9C) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v29 = v111;
    if ((*(_DWORD *)(*((void *)&v114 + 1) + 8) & 0xFE) != 0x12)
    {
LABEL_35:
      int v30 = 0;
      goto LABEL_44;
    }
  }
  if ((_BYTE)v114)
  {
    if (v114 == 1 || (BOOL v31 = 0, *(void *)(v26 + 8 * v114 + 96))) {
      BOOL v31 = (*(unsigned char *)(v26 + 390 * v114 + 4053) & 0xFB) == 0;
    }
  }
  else
  {
    BOOL v31 = 0;
  }
  int v30 = !v31;
LABEL_44:
  uint64_t v116 = 0;
  unsigned int v117 = 0;
  unint64_t matched = llvm::matchSelectPattern(v29, (uint64_t)&v117, &v116, 0, 0);
  int v35 = 0;
  unsigned int v36 = 170;
  switch((int)matched)
  {
    case 1:
      unsigned int v36 = 167;
      goto LABEL_120;
    case 2:
      unsigned int v36 = 169;
      goto LABEL_120;
    case 3:
      unsigned int v36 = 168;
      goto LABEL_120;
    case 4:
      goto LABEL_120;
    case 5:
      if (HIDWORD(matched) == 1) {
        goto LABEL_106;
      }
      if (HIDWORD(matched) != 3)
      {
        if (HIDWORD(matched) != 2) {
          goto LABEL_132;
        }
        goto LABEL_51;
      }
      if (!(_BYTE)v114) {
        goto LABEL_102;
      }
      if (v114 != 1)
      {
        uint64_t v67 = *(void *)(v26 + 8 * v114 + 96);
        if (!v67) {
          goto LABEL_98;
        }
      }
      if ((*(unsigned __int8 *)(v26 + 390 * v114 + 4108) | 4) == 4)
      {
LABEL_51:
        unsigned int v36 = 246;
        goto LABEL_120;
      }
      if (v114 == 1) {
        goto LABEL_99;
      }
      uint64_t v67 = *(void *)(v26 + 8 * v114 + 96);
LABEL_98:
      if (v67)
      {
LABEL_99:
        if ((*(unsigned char *)(v26 + 390 * v114 + 4112) & 0xFB) == 0) {
          goto LABEL_106;
        }
        if (!v30) {
          goto LABEL_132;
        }
      }
      else
      {
LABEL_102:
        if ((v30 & 1) == 0) {
          goto LABEL_132;
        }
      }
      unsigned __int8 v68 = sub_1CD3DD468((unsigned __int8 *)&v114, v33, v34);
      if (v68)
      {
        if (v68 == 1 || (unsigned int v36 = 250, *(void *)(v26 + 8 * v68 + 96)))
        {
          if ((*(unsigned char *)(v26 + 390 * v68 + 4108) & 0xFB) != 0) {
            unsigned int v36 = 250;
          }
          else {
            unsigned int v36 = 246;
          }
        }
        goto LABEL_120;
      }
LABEL_106:
      unsigned int v36 = 250;
      goto LABEL_120;
    case 6:
      if (HIDWORD(matched) == 1) {
        goto LABEL_119;
      }
      if (HIDWORD(matched) != 3)
      {
        if (HIDWORD(matched) != 2) {
          goto LABEL_132;
        }
        goto LABEL_55;
      }
      if (!(_BYTE)v114) {
        goto LABEL_115;
      }
      if (v114 != 1)
      {
        uint64_t v69 = *(void *)(v26 + 8 * v114 + 96);
        if (!v69) {
          goto LABEL_111;
        }
      }
      if ((*(unsigned __int8 *)(v26 + 390 * v114 + 4109) | 4) == 4)
      {
LABEL_55:
        unsigned int v36 = 247;
        goto LABEL_120;
      }
      if (v114 == 1) {
        goto LABEL_112;
      }
      uint64_t v69 = *(void *)(v26 + 8 * v114 + 96);
LABEL_111:
      if (v69)
      {
LABEL_112:
        unsigned int v36 = 251;
        if ((*(unsigned char *)(v26 + 390 * v114 + 4113) & 0xFB) == 0) {
          goto LABEL_120;
        }
        if (!v30) {
          goto LABEL_132;
        }
      }
      else
      {
LABEL_115:
        if ((v30 & 1) == 0) {
          goto LABEL_132;
        }
      }
      unsigned __int8 v70 = sub_1CD3DD468((unsigned __int8 *)&v114, v33, v34);
      if (v70)
      {
        if (v70 == 1 || (unsigned int v36 = 251, *(void *)(v26 + 8 * v70 + 96)))
        {
          if ((*(unsigned char *)(v26 + 390 * v70 + 4109) & 0xFB) != 0) {
            unsigned int v36 = 251;
          }
          else {
            unsigned int v36 = 247;
          }
        }
      }
      else
      {
LABEL_119:
        unsigned int v36 = 251;
      }
LABEL_120:
      if ((_BYTE)v114
        && (v114 == 1 || *(void *)(v26 + 8 * v114 + 96))
        && (*(unsigned char *)(v26 + 390 * v114 + v36 + 3862) & 0xFB) == 0
        || v30
        && (unsigned __int8 v71 = sub_1CD3DD468((unsigned __int8 *)&v114, v33, v34)) != 0
        && (v71 == 1 || *(void *)(v26 + 8 * v71 + 96))
        && (*(unsigned char *)(v26 + 390 * v71 + v36 + 3862) & 0xFB) == 0)
      {
        uint64_t v72 = *(void *)(v111 - 96);
        while (1)
        {
          uint64_t v72 = *(void *)(v72 + 8);
          if (!v72) {
            break;
          }
          if (*(unsigned char *)(*(void *)(v72 + 24) + 16) != 85) {
            goto LABEL_132;
          }
        }
        int v12 = sub_1CD7DE5B4(a1, (unsigned __int8 *)v117);
        unsigned int v14 = v73;
        uint8x8_t v112 = sub_1CD7DE5B4(a1, v116);
        unsigned int v18 = v74;
        LODWORD(v120) = 0;
        goto LABEL_134;
      }
LABEL_132:
      unsigned int v36 = v113;
LABEL_134:
      unsigned int v113 = v36;
LABEL_135:
      uint64_t v75 = 0;
      while (1)
      {
        unsigned int v117 = (char *)v118 + 8;
        *(void *)&v118[0] = 0x300000000;
        sub_1CD3D61B4((unsigned int *)&v117, __src, (unsigned char *)__src + 16 * v120);
        if (LODWORD(v118[0]) >= (unint64_t)DWORD1(v118[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v76 = (uint64_t **)((char *)v117 + 16 * LODWORD(v118[0]));
        void *v76 = v12;
        v76[1] = (uint64_t *)v14;
        unsigned int v77 = LODWORD(v118[0]) + 1;
        LODWORD(v118[0]) = v77;
        if (v77 >= DWORD1(v118[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v78 = (uint64_t **)((char *)v117 + 16 * v77);
        unsigned __int8 *v78 = v112;
        v78[1] = (uint64_t *)v18;
        unsigned int v79 = ++LODWORD(v118[0]);
        int v80 = *(void **)(a1 + 832);
        uint64_t v81 = *(void *)a1;
        int v82 = *(_DWORD *)(a1 + 816);
        *(void *)&long long v114 = 0;
        DWORD2(v114) = v82;
        if (v81)
        {
          unint64_t v83 = (long long *)(v81 + 48);
          if (v83 != &v114)
          {
            uint64_t v84 = *(unsigned __int8 **)v83;
            *(void *)&long long v114 = v84;
            if (v84)
            {
              llvm::MetadataTracking::track((uint64_t)&v114, v84, 2);
              unsigned int v79 = v118[0];
            }
          }
        }
        uint64_t v85 = v12[5] + 16 * v14;
        unint64_t v86 = sub_1CD7FF4E8(v80, (const char *)v113, (const llvm::APInt *)&v114, *(llvm **)v85, *(void *)(v85 + 8), (uint64_t *)v117, v79, v115);
        unint64_t v87 = (char *)v122 + v75;
        *(void *)unint64_t v87 = v86;
        *((_DWORD *)v87 + 2) = v88;
        if (!(void)v114) {
          goto LABEL_146;
        }
        int v89 = *(unsigned __int8 *)v114;
        if ((v89 - 4) > 0x1E)
        {
          if ((v89 - 3) >= 0xFFFFFFFE) {
            uint64_t v90 = v114;
          }
          else {
            uint64_t v90 = 0;
          }
          if ((v89 - 3) < 0xFFFFFFFE)
          {
            if (v89 == 3) {
              *(void *)(v114 + 8) = 0;
            }
            goto LABEL_146;
          }
          unint64_t v91 = v90 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v114 + 1) & 0x7F) != 2 && !*(_DWORD *)(v114 + 12)) {
            goto LABEL_146;
          }
          uint64_t v92 = *(void *)(v114 + 16);
          if ((v92 & 4) == 0) {
            goto LABEL_146;
          }
          unint64_t v91 = v92 & 0xFFFFFFFFFFFFFFF8;
          if (!v91) {
            goto LABEL_146;
          }
        }
        uint64_t v116 = (unsigned __int8 *)&v114;
        sub_1CC5FA668(v91 + 16, &v116);
LABEL_146:
        if (v117 != (char *)v118 + 8) {
          free(v117);
        }
        v75 += 16;
        ++v18;
        ++v14;
        if (!--v4) {
          goto LABEL_163;
        }
      }
    case 7:
      goto LABEL_57;
    case 8:
      int v35 = 1;
LABEL_57:
      uint64_t v37 = sub_1CD7DE5B4(a1, (unsigned __int8 *)v117);
      unsigned int v39 = v38;
      uint64_t v40 = 0;
      LODWORD(v120) = 0;
      break;
    default:
      goto LABEL_132;
  }
  do
  {
    uint64_t v41 = *(void *)a1;
    int v42 = *(_DWORD *)(a1 + 816);
    unsigned int v117 = 0;
    LODWORD(v118[0]) = v42;
    BOOL v44 = v41 == 0;
    uint64_t v43 = (void **)(v41 + 48);
    BOOL v44 = v44 || v43 == &v117;
    if (!v44)
    {
      uint64_t v45 = *v43;
      unsigned int v117 = v45;
      if (v45) {
        llvm::MetadataTracking::track((uint64_t)&v117, (unsigned __int8 *)v45, 2);
      }
    }
    uint64_t v46 = v37[5] + 16 * v39;
    uint64_t v47 = *(llvm **)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    uint64_t v49 = *(llvm::APFloatBase **)(a1 + 832);
    uint64_t v50 = *((void *)v49 + 104);
    if (v50) {
      __int16 v51 = *(_WORD *)(v50 + 8);
    }
    else {
      __int16 v51 = 0;
    }
    uint64_t v52 = sub_1CD7F3564(v49, (const char *)0xAE, (uint64_t)&v117, v47, v48, (uint64_t)v37, (void *)v39, v51);
    unsigned int v53 = (char *)v122 + v40;
    *(void *)unsigned int v53 = v52;
    *((_DWORD *)v53 + 2) = v54;
    if (v35)
    {
      uint64_t v58 = *(void *)(a1 + 832);
      unsigned int v60 = sub_1CD7EBF14(v58, 0, (const llvm::APInt *)&v117, v47, v48, 0, 0);
      uint64_t v62 = *(void *)(v58 + 832);
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      unint64_t v63 = sub_1CCFDED5C(v58, 57, (const llvm::APInt *)&v117, v47, v48, (uint64_t)v60, v59, v61, *(void *)((char *)v122 + v40), *(void *)((char *)v122 + v40 + 8), v62);
      uint64_t v64 = (char *)v122 + v40;
      *(void *)uint64_t v64 = v63;
      *((_DWORD *)v64 + 2) = v65;
    }
    if (v117)
    {
      int v55 = *(unsigned __int8 *)v117;
      if ((v55 - 4) > 0x1E)
      {
        if ((v55 - 3) >= 0xFFFFFFFE) {
          uint64_t v56 = v117;
        }
        else {
          uint64_t v56 = 0;
        }
        if ((v55 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v57 = (unint64_t)v56 + 8;
LABEL_79:
          *(void *)&long long v114 = &v117;
          sub_1CC5FA668(v57 + 16, &v114);
          goto LABEL_72;
        }
        if (v55 == 3) {
          *((void *)v117 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v117 + 1) & 0x7F) == 2 || *((_DWORD *)v117 + 3))
      {
        uint64_t v66 = *((void *)v117 + 2);
        if ((v66 & 4) != 0)
        {
          unint64_t v57 = v66 & 0xFFFFFFFFFFFFFFF8;
          if (v57) {
            goto LABEL_79;
          }
        }
      }
    }
LABEL_72:
    v40 += 16;
    ++v39;
    --v4;
  }
  while (v4);
LABEL_163:
  uint64_t v93 = *(void **)(a1 + 832);
  uint64_t v94 = *(void *)a1;
  int v95 = *(_DWORD *)(a1 + 816);
  unsigned int v117 = 0;
  LODWORD(v118[0]) = v95;
  uint64_t v96 = (uint64_t)v93;
  if (v94)
  {
    uint64_t v97 = (void **)(v94 + 48);
    uint64_t v96 = (uint64_t)v93;
    if (v97 != &v117)
    {
      uint64_t v98 = *v97;
      unsigned int v117 = v98;
      uint64_t v96 = (uint64_t)v93;
      if (v98)
      {
        llvm::MetadataTracking::track((uint64_t)&v117, (unsigned __int8 *)v98, 2);
        uint64_t v96 = *(void *)(a1 + 832);
      }
    }
  }
  uint64_t v100 = sub_1CD7F9A18(v96, (uint64_t *)v125, v126);
  uint64_t v101 = v93[104];
  if (v101) {
    __int16 v102 = *(_WORD *)(v101 + 8);
  }
  else {
    __int16 v102 = 0;
  }
  int v103 = sub_1CD7FF854(v93, (const char *)0x37, (const llvm::APInt *)&v117, v100, v99, (uint64_t *)v122, v123, v102);
  int v105 = v104;
  *(void *)&long long v114 = v111;
  uint64_t v106 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v114);
  v106[1] = v103;
  *((_DWORD *)v106 + 4) = v105;
  if (v117)
  {
    int v107 = *(unsigned __int8 *)v117;
    if ((v107 - 4) > 0x1E)
    {
      if ((v107 - 3) >= 0xFFFFFFFE) {
        uint64_t v108 = v117;
      }
      else {
        uint64_t v108 = 0;
      }
      if ((v107 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v109 = (unint64_t)v108 + 8;
        goto LABEL_183;
      }
      if (v107 == 3) {
        *((void *)v117 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v117 + 1) & 0x7F) == 2 || *((_DWORD *)v117 + 3))
    {
      uint64_t v110 = *((void *)v117 + 2);
      if ((v110 & 4) != 0)
      {
        unint64_t v109 = v110 & 0xFFFFFFFFFFFFFFF8;
        if (v109)
        {
LABEL_183:
          *(void *)&long long v114 = &v117;
          sub_1CC5FA668(v109 + 16, &v114);
        }
      }
    }
  }
  if (__src != v121) {
    free(__src);
  }
  if (v122 != v124) {
    free(v122);
  }
LABEL_2:
  if (v125 != (long long *)v127) {
    free(v125);
  }
}

void sub_1CCFACD10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v212[16] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    int v5 = *(unsigned __int8 ***)(a2 - 8);
  }
  else {
    int v5 = (unsigned __int8 **)(a2 - 32 * (v4 & 0x7FFFFFF));
  }
  uint64_t v6 = sub_1CD7DE5B4(a1, *v5);
  uint64_t v8 = v7;
  uint64_t v201 = v7;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  }
  uint64_t v11 = sub_1CD7DE5B4(v3, *(unsigned __int8 **)(v10 + 32));
  uint64_t v13 = v12;
  uint64_t v200 = v12;
  uint64_t v14 = 24;
  if (*(unsigned char *)(a2 + 16) == 91) {
    uint64_t v14 = 64;
  }
  uint64_t v15 = 32;
  if (*(unsigned char *)(a2 + 16) == 91) {
    uint64_t v15 = 72;
  }
  unint64_t v16 = *(unsigned int *)(a2 + v15);
  long long __src = *(_DWORD **)(a2 + v14);
  uint64_t v18 = *(void *)v3;
  int v19 = *(_DWORD *)(v3 + 816);
  unsigned int v198 = 0;
  int v199 = v19;
  if (v18)
  {
    BOOL v20 = (unsigned __int8 **)(v18 + 48);
    if (v20 != &v198)
    {
      int v21 = *v20;
      unsigned int v198 = v21;
      if (v21) {
        llvm::MetadataTracking::track((uint64_t)&v198, v21, 2);
      }
    }
  }
  uint64_t v22 = (llvm *)sub_1CB87DC14(*(void *)(*(void *)(v3 + 832) + 24), *(void *)(**(void **)(*(void *)(v3 + 832) + 40) + 40) + 272, *(llvm::EVT **)a2, 0);
  uint64_t v196 = v22;
  uint64_t v197 = v23;
  long long v195 = *(_OWORD *)(v6[5] + 16 * v8);
  if (v16)
  {
    uint64_t v25 = 4 * v16;
    unint64_t v26 = __src;
    while (!*v26)
    {
      ++v26;
      v25 -= 4;
      if (!v25) {
        goto LABEL_19;
      }
    }
    goto LABEL_21;
  }
LABEL_19:
  if ((_BYTE)v22)
  {
    if (v22 - 120 >= 0x33) {
      goto LABEL_21;
    }
LABEL_24:
    uint64_t v32 = *(void *)(v3 + 832);
    uint64_t v33 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v195, v23, v24);
    uint64_t v35 = v34;
    uint64_t v36 = sub_1CD7EC9F4(*(void *)(v3 + 832), 0, (uint64_t)&v198, 0);
    __int16 v39 = 0;
    uint64_t v40 = *(void *)(v32 + 832);
    if (v40) {
      __int16 v39 = *(_WORD *)(v40 + 8);
    }
    int v42 = sub_1CCFDED5C(v32, 148, (const llvm::APInt *)&v198, v33, v35, (uint64_t)v6, v8, v38, v36, v37, v39);
    uint64_t v43 = *(llvm::APFloatBase **)(v3 + 832);
    uint64_t v44 = *((void *)v43 + 104);
    if (v44) {
      __int16 v45 = *(_WORD *)(v44 + 8);
    }
    else {
      __int16 v45 = 0;
    }
    int v30 = sub_1CD7F3564(v43, (const char *)0x9C, (uint64_t)&v198, v196, v197, (uint64_t)v42, v41, v45);
    goto LABEL_44;
  }
  if (*(unsigned char *)(v23 + 8) == 19) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v194 = (uint64_t)v6;
  unsigned int v27 = sub_1CD3DB440((llvm::EVT *)&v195, (const char *)v23);
  if (v27 == v16)
  {
    int v30 = sub_1CCFCDA78(*(void *)(v3 + 832), v196, v197, (uint64_t)&v198, (uint64_t)v6, v8, (uint64_t)v11, v13, __src, v16);
LABEL_44:
    unsigned int v60 = v30;
    int v61 = v31;
    uint64_t v210 = (uint64_t *)a2;
LABEL_45:
    uint64_t v62 = sub_1CD7E88EC((uint64_t *)(v3 + 8), &v210);
    v62[1] = v60;
    *((_DWORD *)v62 + 4) = v61;
    goto LABEL_46;
  }
  unsigned int v46 = v27;
  int v191 = v11;
  uint64_t v193 = v3;
  unint64_t v190 = (void *)a2;
  if (v27 < v16)
  {
    if (!(v16 % v27))
    {
      unsigned int v207 = v209;
      HIDWORD(v208) = 8;
      if (v16 / v27 > 8)
      {
        LODWORD(v208) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v47 = v209;
      uint64_t v48 = v16 / v27;
      do
      {
        *v47++ = -1;
        --v48;
      }
      while (v48);
      uint64_t v49 = 0;
      LODWORD(v208) = v16 / v27;
      uint64_t v50 = v207;
      __int16 v51 = v11;
      while (1)
      {
        unsigned int v52 = __src[v49];
        if ((v52 & 0x80000000) == 0)
        {
          int v53 = v52 / v27;
          int v54 = v52 % v27;
          uint64_t v55 = v49 / v27;
          if (v54 != v49 % v27 || (int v56 = v50[v55], (v56 & 0x80000000) == 0) && v56 != v53)
          {
            if (v50 != (_DWORD *)v209) {
              free(v50);
            }
            break;
          }
          v50[v55] = v53;
        }
        if (v16 == ++v49)
        {
          unint64_t v57 = v209;
          uint64_t v210 = v212;
          uint64_t v211 = 0x800000000;
          if (v208)
          {
            LODWORD(v58) = 0;
            uint64_t v164 = 4 * v208;
            do
            {
              if ((*v50 & 0x80000000) != 0)
              {
                uint64_t v167 = sub_1CD3DD4D8(*(void *)(v3 + 832), (llvm *)v195, *((uint64_t *)&v195 + 1));
                uint64_t v166 = v168;
                if (v211 >= (unint64_t)HIDWORD(v211)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v165 = &v210[2 * v211];
                *uint64_t v165 = (uint64_t)v167;
                __int16 v51 = v191;
              }
              else if (*v50)
              {
                if (v58 >= HIDWORD(v211)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v165 = &v210[2 * v58];
                *uint64_t v165 = (uint64_t)v51;
                uint64_t v166 = v13;
              }
              else
              {
                if (v58 >= HIDWORD(v211)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v165 = &v210[2 * v58];
                *uint64_t v165 = v194;
                uint64_t v166 = v8;
              }
              v165[1] = v166;
              uint64_t v58 = (v211 + 1);
              LODWORD(v211) = v211 + 1;
              ++v50;
              v164 -= 4;
            }
            while (v164);
            uint64_t v59 = v210;
          }
          else
          {
            uint64_t v58 = 0;
            uint64_t v59 = v212;
          }
          uint64_t v169 = *(void **)(v3 + 832);
          uint64_t v170 = v169[104];
          if (v170) {
            uint64_t v171 = *(unsigned __int16 *)(v170 + 8);
          }
          else {
            uint64_t v171 = 0;
          }
          uint64_t v172 = sub_1CD7FF4E8(v169, (const char *)0x95, (const llvm::APInt *)&v198, v196, v197, v59, v58, v171);
          int v174 = v173;
          uint64_t v203 = v190;
          unsigned int v175 = sub_1CD7E88EC((uint64_t *)(v3 + 8), &v203);
          v175[1] = v172;
          *((_DWORD *)v175 + 4) = v174;
          if (v210 != v212) {
            free(v210);
          }
          unsigned int v113 = v207;
          goto LABEL_177;
        }
      }
    }
    unint64_t v74 = (v16 + v46 - 1) / v46 * v46;
    uint64_t v75 = *(llvm::LLVMContext **)(*(void *)(v3 + 832) + 56);
    unint64_t v76 = sub_1CD3DD468((unsigned __int8 *)&v196, v28, v29);
    uint64_t v185 = (llvm *)sub_1CB8E5DAC(v75, v76, v77, ((v16 + v46 - 1) / v46) * v46, 0);
    uint64_t v188 = v78;
    unsigned int v79 = sub_1CD3DD4D8(*(void *)(v3 + 832), (llvm *)v195, *((uint64_t *)&v195 + 1));
    uint64_t v81 = v80;
    uint64_t v210 = v212;
    uint64_t v211 = 0x800000000;
    sub_1CD3E535C((uint64_t *)&v210, v74 / v46, (uint64_t)v79, v80);
    unsigned int v207 = v209;
    uint64_t v208 = 0x800000000;
    sub_1CD3E535C((uint64_t *)&v207, v74 / v46, (uint64_t)v79, v81);
    int v82 = v210;
    *uint64_t v210 = v194;
    *((_DWORD *)v82 + 2) = v8;
    unint64_t v83 = v207;
    *(void *)unsigned int v207 = v191;
    long long v83[2] = v13;
    uint64_t v84 = *(void **)(v3 + 832);
    uint64_t v85 = v84[104];
    if (v85) {
      uint64_t v86 = *(unsigned __int16 *)(v85 + 8);
    }
    else {
      uint64_t v86 = 0;
    }
    unint64_t v87 = sub_1CD7FF4E8(v84, (const char *)0x95, (const llvm::APInt *)&v198, v185, v188, v210, v211, v86);
    LODWORD(v201) = v88;
    int v89 = *(void **)(v193 + 832);
    uint64_t v90 = v89[104];
    if (v90) {
      uint64_t v91 = *(unsigned __int16 *)(v90 + 8);
    }
    else {
      uint64_t v91 = 0;
    }
    uint64_t v92 = sub_1CD7FF4E8(v89, (const char *)0x95, (const llvm::APInt *)&v198, v185, v188, (uint64_t *)v207, v208, v91);
    LODWORD(v200) = v93;
    unint64_t v94 = ((v16 + v46 - 1) / v46) * v46;
    uint64_t v203 = v206;
    int v205 = 8;
    if (v94 >= 9)
    {
      unsigned int v204 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (((v16 + v46 - 1) / v46) * v46)
    {
      int v95 = v206;
      do
      {
        *v95++ = -1;
        --v94;
      }
      while (v94);
    }
    uint64_t v96 = 0;
    unsigned int v204 = (v16 + v46 - 1) / v46 * v46;
    do
    {
      signed int v97 = __src[v96];
      if (v97 >= (int)v46) {
        int v98 = v74 - v46;
      }
      else {
        int v98 = 0;
      }
      v206[v96++] = v98 + v97;
    }
    while (v16 != v96);
    uint64_t v99 = sub_1CCFCDA78(*(void *)(v193 + 832), v185, v188, (uint64_t)&v198, (uint64_t)v87, v201, (uint64_t)v92, v200, v206, v204);
    uint64_t v101 = v100;
    if (v16 == v74)
    {
      __int16 v102 = v190;
      unint64_t v57 = v212;
    }
    else
    {
      uint64_t v103 = *(void *)(v193 + 832);
      int v104 = v196;
      uint64_t v105 = v197;
      uint64_t v106 = sub_1CD7EC9F4(v103, 0, (uint64_t)&v198, 0);
      __int16 v109 = 0;
      uint64_t v110 = *(void *)(v103 + 832);
      __int16 v102 = v190;
      unint64_t v57 = v212;
      if (v110) {
        __int16 v109 = *(_WORD *)(v110 + 8);
      }
      uint64_t v99 = sub_1CCFDED5C(v103, 151, (const llvm::APInt *)&v198, v104, v105, (uint64_t)v99, v101, v108, v106, v107, v109);
      LODWORD(v101) = v111;
    }
    uint64_t v202 = v102;
    uint8x8_t v112 = sub_1CD7E88EC((uint64_t *)(v193 + 8), &v202);
    v112[1] = v99;
    *((_DWORD *)v112 + 4) = v101;
    if (v203 != v206) {
      free(v203);
    }
    if (v207 != v209) {
      free(v207);
    }
    unsigned int v113 = v210;
LABEL_177:
    if (v113 == v57) {
      goto LABEL_46;
    }
LABEL_178:
    free(v113);
    goto LABEL_46;
  }
  if (v27 <= v16) {
    goto LABEL_128;
  }
  uint64_t v203 = (void *)-1;
  if (!v16) {
    goto LABEL_72;
  }
  uint64_t v66 = 0;
  char v67 = 1;
  do
  {
    int v68 = __src[v66];
    if ((v68 & 0x80000000) == 0)
    {
      BOOL v69 = v68 >= (int)v27;
      if (v68 < (int)v27) {
        unsigned int v70 = 0;
      }
      else {
        unsigned int v70 = v27;
      }
      int v71 = (int)(v68 - v70) / v16 * v16;
      uint64_t v72 = (_DWORD *)((unint64_t)&v203 | (4 * v69));
      if (v71 + (int)v16 > v27 || (*v72 & 0x80000000) == 0 && *v72 != v71) {
        char v67 = 0;
      }
      *uint64_t v72 = v71;
    }
    ++v66;
  }
  while (v16 != v66);
  if ((v203 & 0x80000000) != 0 && (HIDWORD(v203) & 0x80000000) != 0)
  {
LABEL_72:
    unsigned int v60 = sub_1CD3DD4D8(*(void *)(v3 + 832), v196, v197);
    int v61 = v73;
    uint64_t v210 = (uint64_t *)a2;
    goto LABEL_45;
  }
  if ((v67 & 1) == 0)
  {
LABEL_128:
    if ((_BYTE)v196)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v196);
      unint64_t v140 = 0;
      uint64_t v139 = 0;
    }
    else
    {
      unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v197 + 24), 0, v29);
      uint64_t v139 = v138;
      unint64_t v140 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    uint64_t v210 = v212;
    uint64_t v211 = 0x800000000;
    if (v16)
    {
      uint64_t v143 = (llvm *)(v140 | EVT);
      uint64_t v144 = 4 * v16;
      do
      {
        signed int v145 = *__src;
        if ((*__src & 0x80000000) != 0)
        {
          uint64_t v146 = sub_1CD3DD4D8(*(void *)(v193 + 832), v143, v139);
        }
        else
        {
          if (v145 >= (int)v46) {
            unsigned int v148 = v46;
          }
          else {
            unsigned int v148 = 0;
          }
          uint64_t v149 = *(void *)(v193 + 832);
          if (v145 >= (int)v46) {
            uint64_t v150 = (uint64_t)v191;
          }
          else {
            uint64_t v150 = v194;
          }
          if (v145 >= (int)v46) {
            uint64_t v151 = v13;
          }
          else {
            uint64_t v151 = v8;
          }
          uint64_t v152 = sub_1CD7EC9F4(*(void *)(v193 + 832), (int)(v145 - v148), (uint64_t)&v198, 0);
          uint64_t v155 = *(void *)(v149 + 832);
          if (v155) {
            LOWORD(v155) = *(_WORD *)(v155 + 8);
          }
          uint64_t v146 = sub_1CCFDED5C(v149, 148, (const llvm::APInt *)&v198, v143, v139, v150, v151, v154, v152, v153, v155);
        }
        if (v211 >= (unint64_t)HIDWORD(v211)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v156 = (uint64_t **)&v210[2 * v211];
        *uint64_t v156 = v146;
        v156[1] = (uint64_t *)v147;
        uint64_t v141 = (v211 + 1);
        LODWORD(v211) = v211 + 1;
        ++__src;
        v144 -= 4;
      }
      while (v144);
      uint64_t v142 = v210;
      uint64_t v3 = v193;
    }
    else
    {
      uint64_t v141 = 0;
      uint64_t v142 = v212;
    }
    long long v157 = *(void **)(v3 + 832);
    uint64_t v158 = v157[104];
    if (v158) {
      uint64_t v159 = *(unsigned __int16 *)(v158 + 8);
    }
    else {
      uint64_t v159 = 0;
    }
    uint64_t v160 = sub_1CD7FF4E8(v157, (const char *)0x92, (const llvm::APInt *)&v198, v196, v197, v142, v141, v159);
    int v162 = v161;
    unsigned int v207 = v190;
    uint64_t v163 = sub_1CD7E88EC((uint64_t *)(v3 + 8), &v207);
    v163[1] = v160;
    *((_DWORD *)v163 + 4) = v162;
    unsigned int v113 = v210;
    if (v210 == v212) {
      goto LABEL_46;
    }
    goto LABEL_178;
  }
  int v186 = HIDWORD(v203);
  int v187 = (int)v203;
  uint64_t v114 = 0;
  char v115 = 1;
  do
  {
    char v116 = v115;
    uint64_t v117 = *((unsigned int *)&v203 + v114);
    uint64_t v118 = *(void *)(v3 + 832);
    int v119 = v196;
    uint64_t v120 = v197;
    if ((v117 & 0x80000000) != 0)
    {
      uint64_t v121 = sub_1CD3DD4D8(*(void *)(v3 + 832), v196, v197);
      if ((v116 & 1) == 0) {
        uint64_t v11 = v121;
      }
      uint64_t v123 = v194;
      if (v116) {
        uint64_t v123 = (uint64_t)v121;
      }
      uint64_t v194 = v123;
      if (v116) {
        unsigned int v124 = &v201;
      }
      else {
        unsigned int v124 = &v200;
      }
    }
    else
    {
      uint64_t v125 = v194;
      if ((v116 & 1) == 0) {
        uint64_t v125 = (uint64_t)v11;
      }
      uint64_t v192 = v125;
      if (v116) {
        unsigned int v124 = &v201;
      }
      else {
        unsigned int v124 = &v200;
      }
      uint64_t v189 = *v124;
      uint64_t v126 = sub_1CD7EC9F4(v118, v117, (uint64_t)&v198, 0);
      uint64_t v129 = *(void *)(v118 + 832);
      if (v129) {
        LOWORD(v129) = *(_WORD *)(v129 + 8);
      }
      uint64_t v130 = sub_1CCFDED5C(v118, 151, (const llvm::APInt *)&v198, v119, v120, v192, v189, v128, v126, v127, v129);
      if ((v116 & 1) == 0) {
        uint64_t v11 = v130;
      }
      uint64_t v131 = v194;
      if (v116) {
        uint64_t v131 = (uint64_t)v130;
      }
      uint64_t v194 = v131;
    }
    char v115 = 0;
    *(_DWORD *)unsigned int v124 = v122;
    uint64_t v114 = 1;
    uint64_t v3 = v193;
  }
  while ((v116 & 1) != 0);
  uint64_t v210 = v212;
  uint64_t v211 = 0x800000000;
  if (v16 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  memcpy(v212, __src, 4 * v16);
  uint64_t v132 = v210;
  int v133 = v211;
  uint64_t v134 = (v211 + v16);
  LODWORD(v211) = v211 + v16;
  if (!(v133 + v16))
  {
    uint64_t v135 = 0;
    uint64_t v136 = (void *)a2;
    goto LABEL_187;
  }
  uint64_t v176 = 4 * v134;
  unsigned int v177 = v210;
  uint64_t v136 = (void *)a2;
  do
  {
    int v178 = *(_DWORD *)v177;
    if (*(_DWORD *)v177 >= (signed int)v46)
    {
      int v179 = v16 - (v46 + v186) + v178;
    }
    else
    {
      if (v178 < 0) {
        goto LABEL_185;
      }
      int v179 = v178 - v187;
    }
    *(_DWORD *)unsigned int v177 = v179;
LABEL_185:
    unsigned int v177 = (uint64_t *)((char *)v177 + 4);
    v176 -= 4;
  }
  while (v176);
  uint64_t v135 = v211;
LABEL_187:
  uint64_t v180 = sub_1CCFCDA78(*(void *)(v193 + 832), v196, v197, (uint64_t)&v198, v194, v201, (uint64_t)v11, v200, v132, v135);
  int v182 = v181;
  unsigned int v207 = v136;
  unint64_t v183 = sub_1CD7E88EC((uint64_t *)(v193 + 8), &v207);
  v183[1] = v180;
  *((_DWORD *)v183 + 4) = v182;
  unsigned int v113 = v210;
  if (v210 != v212) {
    goto LABEL_178;
  }
LABEL_46:
  if (v198)
  {
    int v63 = *v198;
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        uint64_t v64 = v198;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((v63 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v65 = (unint64_t)(v64 + 8);
        goto LABEL_56;
      }
      if (v63 == 3) {
        *((void *)v198 + 1) = 0;
      }
    }
    else if ((v198[1] & 0x7F) == 2 || *((_DWORD *)v198 + 3))
    {
      uint64_t v184 = *((void *)v198 + 2);
      if ((v184 & 4) != 0)
      {
        unint64_t v65 = v184 & 0xFFFFFFFFFFFFFFF8;
        if (v65)
        {
LABEL_56:
          uint64_t v210 = (uint64_t *)&v198;
          sub_1CC5FA668(v65 + 16, &v210);
        }
      }
    }
  }
}

uint64_t sub_1CCFADA10(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DIExpression *a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v7 = 0;
  v94[24] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a3;
  uint64_t v86 = (llvm::LLVMContext ***)a2;
  unint64_t v83 = (unsigned __int8 *)a5;
  uint64_t v84 = a4;
  int v82 = a6;
  if (!a2 || *(unsigned char *)(a2 + 16) != 21) {
    return v7;
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 832) + 40);
  uint64_t v81 = 0;
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v14 + 16) + 104))(*(void *)(v14 + 16));
  v80[0] = v14;
  v80[1] = &v81;
  void v80[2] = &v83;
  v80[3] = &v85;
  uint64_t v81 = v15;
  uint64_t v16 = *(void *)(a1 + 912);
  if (!a6)
  {
    if (*(void *)(v16 + 640) != *(void *)(*(void *)(v16 + 8) + 328)) {
      return 0;
    }
    if (!*(_WORD *)(a3 + 32))
    {
      if (*(_DWORD *)(a1 + 816) != 1) {
        return 0;
      }
      goto LABEL_30;
    }
    if (*(_DWORD *)(a5 + 8) == 2)
    {
      int v18 = *(_DWORD *)(a1 + 816);
      BOOL v19 = v18 == 1;
      if (*(void *)(a5 - 8))
      {
        if (v18 != 1) {
          return 0;
        }
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v19 = *(_DWORD *)(a1 + 816) == 1;
    }
    unint64_t v20 = *(unsigned int *)(a2 + 32);
    int v21 = (void *)(v16 + 304);
    if (v20 >= *(_DWORD *)(v16 + 368))
    {
      int v22 = v20 + 1;
      int v23 = *(_DWORD *)(v16 + 368) & 0x3F;
      uint64_t v24 = *(unsigned int *)(v16 + 312);
      if (v23)
      {
        uint64_t v69 = *(void *)(v16 + 304) + 8 * v24;
        *(void *)(v69 - 8) &= ~(-1 << v23);
      }
      unsigned int v25 = v24;
      *(_DWORD *)(v16 + 368) = v22;
      unsigned int v26 = v20 + 64;
      if (v24 != (v20 + 64) >> 6)
      {
        uint64_t v27 = v26 >> 6;
        if (v24 > v27)
        {
          *(_DWORD *)(v16 + 312) = v27;
          unsigned int v25 = v26 >> 6;
        }
        else
        {
          if (v27 > *(_DWORD *)(v16 + 316)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v27 != v24) {
            bzero((void *)(*v21 + 8 * v24), 8 * (v27 - v24));
          }
          unsigned int v25 = v27;
          *(_DWORD *)(v16 + 312) = v27;
          int v22 = *(_DWORD *)(v16 + 368);
        }
      }
      int v28 = v22 & 0x3F;
      if (v28) {
        *(void *)(*v21 + 8 * v25 - 8) &= ~(-1 << v28);
      }
    }
    else if (!v19 && ((*(void *)(*v21 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0)
    {
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 912);
    *(void *)(*(void *)(v16 + 304) + 8 * (v20 >> 6)) |= 1 << v20;
  }
LABEL_30:
  LOBYTE(v74) = 0;
  char v79 = 0;
  int v29 = sub_1CD78C488(v16, a2);
  if (v29 != 0x7FFFFFFF)
  {
    BOOL v35 = 0;
    char v79 = 1;
    int v37 = 5;
    int v74 = 5;
    uint64_t v76 = 0;
    LODWORD(v77) = v29;
    uint64_t v92 = v94;
    uint64_t v93 = 0x800000000;
    goto LABEL_47;
  }
  uint64_t v92 = v94;
  uint64_t v93 = 0x800000000;
  if (!*a7)
  {
LABEL_81:
    v73[0] = &v84;
    v73[1] = a1;
    v73[2] = &v85;
    v73[3] = &v86;
    v73[4] = &v83;
    v73[5] = v80;
    v73[6] = &v82;
    uint64_t v61 = *(void *)(a1 + 912);
    unint64_t v87 = v86;
    v90[0] = 0;
    if (sub_1CD3C8538((uint64_t *)(v61 + 80), &v87, v90)) {
      uint64_t v62 = v90[0];
    }
    else {
      uint64_t v62 = *(void *)(v61 + 80) + 16 * *(unsigned int *)(v61 + 96);
    }
    if (v62 == *(void *)(*(void *)(a1 + 912) + 80) + 16 * *(unsigned int *)(*(void *)(a1 + 912) + 96))
    {
      if (v93 > 1)
      {
        sub_1CCFB8030((uint64_t)v73, (const char *)v92, v93);
        goto LABEL_75;
      }
      goto LABEL_93;
    }
    sub_1CD7D6730((uint64_t)v90, **v86, *(void *)(*(void *)(a1 + 832) + 24), (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), *(_DWORD *)(v62 + 8), (uint64_t)*v86, 0);
    if (v91)
    {
      int v65 = 0;
      uint64_t v66 = (int *)v90[18];
      uint64_t v67 = 4 * v91;
      do
      {
        int v68 = *v66++;
        v65 += v68;
        v67 -= 4;
      }
      while (v67);
      if (v65 >= 2)
      {
        sub_1CD7D6FD0(&v87, (uint64_t)v90);
        sub_1CCFB8030((uint64_t)v73, (const char *)v87, v88);
        if (v87 != &v89) {
          free(v87);
        }
        sub_1CD7E86AC((uint64_t)v90);
        goto LABEL_75;
      }
    }
    LODWORD(v16) = *(_DWORD *)(v62 + 8);
    char v79 = 1;
    int v74 = 0;
    int v75 = v16;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = 0;
    BOOL v35 = v82 != 0;
    sub_1CD7E86AC((uint64_t)v90);
    int v37 = 0;
    goto LABEL_47;
  }
  sub_1CCFB7F14((unint64_t)&v92, a7);
  if (v93 != 1)
  {
LABEL_35:
    uint64_t v30 = *a7;
    if (!*a7) {
      goto LABEL_81;
    }
    while (1)
    {
      int v31 = *(unsigned __int16 *)(v30 + 24);
      if (v31 != 216) {
        break;
      }
      uint64_t v30 = **(void **)(v30 + 32);
    }
    if (v31 != 253) {
      goto LABEL_81;
    }
    uint64_t v32 = *(void *)(*(void *)(v30 + 32) + 40);
    int v33 = *(unsigned __int16 *)(v32 + 24);
    if (v33 != 39 && v33 != 15) {
      goto LABEL_81;
    }
    BOOL v35 = 0;
    int v36 = *(_DWORD *)(v32 + 76);
    char v79 = 1;
    int v37 = 5;
    int v74 = 5;
    uint64_t v76 = 0;
    LODWORD(v77) = v36;
LABEL_47:
    int v38 = v82;
    goto LABEL_48;
  }
  LODWORD(v16) = *(_DWORD *)v92;
  if ((*(_DWORD *)v92 & 0x80000000) != 0)
  {
    uint64_t v56 = *(void *)(v14 + 40);
    uint64_t v57 = *(void *)(v56 + 456);
    uint64_t v58 = *(void *)(v56 + 464) - v57;
    if (v58)
    {
      uint64_t v59 = (_DWORD *)(v57 + 4);
      uint64_t v60 = 8 * (v58 >> 3);
      while (*v59 != v16)
      {
        v59 += 2;
        v60 -= 8;
        if (!v60) {
          goto LABEL_98;
        }
      }
      int v64 = *(v59 - 1);
      if (v64) {
        LODWORD(v16) = v64;
      }
    }
  }
  else if (!v16)
  {
    goto LABEL_35;
  }
LABEL_98:
  int v37 = 0;
  char v79 = 1;
  int v74 = 0;
  int v75 = v16;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = 0;
  int v38 = v82;
  BOOL v35 = v82 != 0;
LABEL_48:
  if (v38 != 1)
  {
    if (v37)
    {
      unint64_t v87 = v83;
      if (v83) {
        llvm::MetadataTracking::track((uint64_t)&v87, v83, 2);
      }
      llvm::BuildMI((llvm::MachineFunction *)v14, (unsigned __int8 **)&v87, *(void *)(v81 + 8) + 624, 1, (const llvm::MachineOperand *)&v74, v85, (uint64_t)v84);
      uint64_t v49 = v48;
      if (!v87) {
        goto LABEL_73;
      }
      int v50 = *(unsigned __int8 *)v87;
      if ((v50 - 4) > 0x1E)
      {
        if ((v50 - 3) >= 0xFFFFFFFE) {
          int v63 = v87;
        }
        else {
          int v63 = 0;
        }
        if ((v50 - 3) < 0xFFFFFFFE)
        {
          if (v50 == 3) {
            *((void *)v87 + 1) = 0;
          }
          goto LABEL_73;
        }
        unint64_t v52 = (unint64_t)v63 + 8;
      }
      else
      {
        if ((*((unsigned char *)v87 + 1) & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
          goto LABEL_73;
        }
        uint64_t v51 = *((void *)v87 + 2);
        if ((v51 & 4) == 0) {
          goto LABEL_73;
        }
        unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (!v52) {
          goto LABEL_73;
        }
      }
      v90[0] = &v87;
      sub_1CC5FA668(v52 + 16, v90);
    }
    else
    {
      sub_1CCFB829C((uint64_t)v80, v16, v84, v35);
      uint64_t v49 = v53;
    }
LABEL_73:
    uint64_t v54 = *(void *)(a1 + 912);
    unsigned int v55 = *(_DWORD *)(v54 + 232);
    if (v55 >= *(_DWORD *)(v54 + 236)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v54 + 224) + 8 * v55) = v49;
    ++*(_DWORD *)(v54 + 232);
    goto LABEL_75;
  }
  if (v37
    || (uint64_t v39 = *(void *)(*(void *)(a2 + 24) + 112)) == 0
    || (int v40 = *(_DWORD *)(a2 + 32), (v40 + 2) >= *(_DWORD *)(v39 + 8))
    || (uint64_t v41 = *(void *)(v39 + 8 * (v40 + 2) + 40)) == 0)
  {
LABEL_93:
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint64_t v7 = 0;
  if ((*(unsigned char *)(v41 + 19) & 0x40) != 0 && !v40)
  {
    int v42 = **(_DWORD **)(*(void *)(v14 + 40) + 456);
    uint64_t v43 = llvm::DIExpression::prepend(v84, (const llvm::DIExpression *)8, 0);
    uint64_t v84 = v43;
    uint64_t v44 = *(void *)(a1 + 832);
    uint64_t v45 = v85;
    unint64_t v87 = v83;
    if (v83) {
      llvm::MetadataTracking::track((uint64_t)&v87, v83, 2);
    }
    unsigned int v46 = (void *)sub_1CD801C04(v44, v45, (uint64_t)v43, v42, 1, (unsigned __int8 **)&v87, *(_DWORD *)(a1 + 816));
    if (!v87) {
      goto LABEL_61;
    }
    int v47 = *(unsigned __int8 *)v87;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        unsigned int v70 = v87;
      }
      else {
        unsigned int v70 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *((void *)v87 + 1) = 0;
        }
        goto LABEL_61;
      }
      unint64_t v71 = (unint64_t)v70 + 8;
    }
    else
    {
      if ((*((unsigned char *)v87 + 1) & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
        goto LABEL_61;
      }
      uint64_t v72 = *((void *)v87 + 2);
      if ((v72 & 4) == 0) {
        goto LABEL_61;
      }
      unint64_t v71 = v72 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_61;
      }
    }
    v90[0] = &v87;
    sub_1CC5FA668(v71 + 16, v90);
LABEL_61:
    sub_1CD801DD0(*(void *)(a1 + 832), v46, 0);
LABEL_75:
    uint64_t v7 = 1;
  }
LABEL_94:
  if (v92 != v94) {
    free(v92);
  }
  return v7;
}

uint64_t sub_1CCFAE200(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::DIVariable *a4, uint64_t **a5, unsigned __int8 **a6, uint64_t a7, int a8)
{
  v71[6] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 1;
  if (!a3) {
    return v8;
  }
  uint64_t v13 = a2;
  uint64_t v69 = v71;
  uint64_t v70 = 0x200000000;
  uint64_t v66 = v68;
  uint64_t v15 = &a2[a3];
  uint64_t v67 = 0x600000000;
  uint64_t v16 = (uint64_t *)(a1 + 8);
  uint64_t v56 = (uint64_t *)(a1 + 32);
  while (1)
  {
    uint64_t v17 = *v13;
    uint64_t v59 = v17;
    int v18 = *(unsigned __int8 *)(v17 + 16);
    if ((v18 & 0xFE) == 0x10) {
      goto LABEL_11;
    }
    if (*(unsigned __int8 *)(v17 + 16) > 0x12u) {
      break;
    }
    if ((v18 - 11) >= 2)
    {
      if (v18 != 5 || *(_WORD *)(v17 + 18) != 48) {
        goto LABEL_19;
      }
      uint64_t v17 = *(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
    }
LABEL_11:
    LODWORD(v62) = 1;
    *((void *)&v62 + 1) = v17;
LABEL_12:
    sub_1CD7DE2F4((unint64_t)&v69, &v62);
LABEL_13:
    if (++v13 == v15)
    {
      BOOL v35 = (void *)sub_1CD801CEC(*(void *)(a1 + 832), (uint64_t)a4, (uint64_t)a5, v69, v70, v66, v67, 0, a6, *(_DWORD *)(a1 + 816), a8);
      sub_1CD801DD0(*(void *)(a1 + 832), v35, 0);
LABEL_49:
      uint64_t v8 = 1;
      goto LABEL_50;
    }
  }
  if (v18 != 59)
  {
    if (v18 != 19) {
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a1 + 912);
  v60.i64[0] = v17;
  *(void *)&long long v62 = 0;
  if (sub_1CB87DF68(v19 + 176, &v60, &v62)) {
    uint64_t v20 = v62;
  }
  else {
    uint64_t v20 = *(void *)(v19 + 176) + 16 * *(unsigned int *)(v19 + 192);
  }
  if (v20 != *(void *)(*(void *)(a1 + 912) + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 912) + 192))
  {
    int v24 = *(_DWORD *)(v20 + 8);
    goto LABEL_30;
  }
LABEL_19:
  long long v58 = *(_OWORD *)(sub_1CD7E88EC(v16, &v59) + 1);
  uint64_t v21 = v58;
  if ((void)v58) {
    goto LABEL_21;
  }
  uint64_t v25 = v59;
  if (*(unsigned char *)(v59 + 16) != 21)
  {
    unint64_t v27 = *(void *)(*(void *)(a1 + 832) + 24);
    goto LABEL_39;
  }
  unsigned int v26 = sub_1CD7E88EC(v56, &v59);
  uint64_t v21 = v26[1];
  *(void *)&long long v58 = v21;
  DWORD2(v58) = *((_DWORD *)v26 + 4);
  if (v21)
  {
LABEL_21:
    if ((a8 & 1) == 0
      && (sub_1CCFADA10(a1, v59, (uint64_t)a4, (llvm::DIExpression *)a5, (uint64_t)*a6, 0, (uint64_t *)&v58) & 1) != 0)
    {
      goto LABEL_49;
    }
    int v22 = *(unsigned __int16 *)(v21 + 24);
    if (v22 != 39 && v22 != 15)
    {
      LODWORD(v62) = 0;
      *((void *)&v62 + 1) = v21;
      int v63 = DWORD2(v58);
      goto LABEL_12;
    }
    if (v67 >= (unint64_t)HIDWORD(v67)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)&v66[8 * v67] = v21;
    LODWORD(v67) = v67 + 1;
    int v24 = *(_DWORD *)(v21 + 76);
LABEL_30:
    LODWORD(v62) = 2;
    DWORD2(v62) = v24;
    goto LABEL_12;
  }
  uint64_t v25 = v59;
  unint64_t v27 = *(void *)(*(void *)(a1 + 832) + 24);
  if (*(unsigned char *)(v59 + 16) == 21
    && *((_WORD *)a4 + 16)
    && (*(_DWORD *)(*(void *)a7 + 8) != 2 || !*(void *)(*(void *)a7 - 8)))
  {
    goto LABEL_55;
  }
LABEL_39:
  unint64_t v54 = v27;
  uint64_t v28 = *(void *)(a1 + 912);
  v60.i64[0] = v25;
  *(void *)&long long v62 = 0;
  if (sub_1CD3C8538((uint64_t *)(v28 + 80), &v60, &v62)) {
    uint64_t v29 = v62;
  }
  else {
    uint64_t v29 = *(void *)(v28 + 80) + 16 * *(unsigned int *)(v28 + 96);
  }
  if (v29 == *(void *)(*(void *)(a1 + 912) + 80) + 16 * *(unsigned int *)(*(void *)(a1 + 912) + 96))
  {
LABEL_55:
    uint64_t v8 = 0;
    goto LABEL_50;
  }
  int v30 = *(_DWORD *)(v29 + 8);
  sub_1CD7D6730((uint64_t)&v62, **(llvm::LLVMContext ***)v59, v54, (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), v30, *(void *)v59, 0);
  if (!v65) {
    goto LABEL_47;
  }
  int v31 = 0;
  uint64_t v32 = v64;
  uint64_t v33 = 4 * v65;
  do
  {
    int v34 = *v32++;
    v31 += v34;
    v33 -= 4;
  }
  while (v33);
  if (v31 < 2)
  {
LABEL_47:
    v60.i32[0] = 3;
    v60.i32[2] = v30;
    sub_1CD7DE2F4((unint64_t)&v69, (long long *)v60.i8);
    sub_1CD7E86AC((uint64_t)&v62);
    goto LABEL_13;
  }
  if ((a8 & 1) == 0)
  {
    __int32 SizeInBits = llvm::DIVariable::getSizeInBits(a4);
    if (v38) {
      __int32 v39 = SizeInBits;
    }
    else {
      __int32 v39 = 0;
    }
    llvm::DIExpression::getFragmentInfo(a5[3], a5[4], &v60);
    if (v61) {
      __int32 v40 = v60.i32[0];
    }
    else {
      __int32 v40 = v39;
    }
    sub_1CD7D6FD0(&v60, (uint64_t)&v62);
    int v42 = (char *)v60.i64[0];
    if (v60.i32[2] && v40)
    {
      unsigned int v43 = v40;
      uint64_t v44 = 0;
      uint64_t v45 = v60.i64[0] + 16;
      uint64_t v46 = 24 * v60.u32[2] - 24;
      int v47 = (int *)(v60.i64[0] + 16);
      unsigned int v57 = v43;
      do
      {
        int v48 = *v47;
        v47 += 6;
        if (v48 == 1)
        {
          unsigned int v53 = v43;
          unsigned int v43 = v53;
        }
        uint64_t v49 = (const llvm::DIExpression *)(v44 + *(_DWORD *)(v45 - 8));
        if (v49 <= v43) {
          unsigned int v50 = *(_DWORD *)(v45 - 8);
        }
        else {
          unsigned int v50 = v43 - v44;
        }
        FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)a5, v44, v50);
        if ((_BYTE)v41)
        {
          unint64_t v52 = (void *)sub_1CD801C04(*(void *)(a1 + 832), (uint64_t)a4, (uint64_t)FragmentExpression, *(_DWORD *)(v45 - 16), 0, a6, *(_DWORD *)(a1 + 816));
          sub_1CD801DD0(*(void *)(a1 + 832), v52, 0);
          uint64_t v44 = v49;
        }
        unsigned int v43 = v57;
        if (!v46) {
          break;
        }
        v46 -= 24;
        uint64_t v45 = (uint64_t)v47;
      }
      while (v44 < v57);
      int v42 = (char *)v60.i64[0];
    }
    if (v42 != &v61) {
      free(v42);
    }
  }
  uint64_t v8 = a8 ^ 1u;
  sub_1CD7E86AC((uint64_t)&v62);
LABEL_50:
  if (v66 != v68) {
    free(v66);
  }
  if (v69 != v71) {
    free(v69);
  }
  return v8;
}

uint64_t *sub_1CCFAE770(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2;
  v265[8] = *MEMORY[0x1E4F143B8];
  uint64_t v258 = a2;
  uint64_t v5 = *(void *)(a1 + 832);
  unint64_t v6 = *(void *)(v5 + 24);
  unsigned int v7 = a2[16];
  if (!a2 || v7 > 0x14)
  {
    if (a2 && v7 == 59)
    {
      uint64_t v2 = *(void *)(a1 + 912);
      uint64_t v263 = a2;
      int v260 = 0;
      if (sub_1CB87DF68(v2 + 176, &v263, &v260)) {
        int v18 = v260;
      }
      else {
        int v18 = (_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(v2 + 192));
      }
      if (v18 != (_DWORD *)(*(void *)(*(void *)(a1 + 912) + 176)
                           + 16 * *(unsigned int *)(*(void *)(a1 + 912) + 192)))
      {
        uint64_t v52 = *(void *)(a1 + 832);
        int v53 = v18[2];
        uint64_t v54 = *(void *)(**(void **)(v52 + 40) + 40);
        unsigned __int8 v55 = (*(uint64_t (**)(unint64_t, uint64_t, void))(*(void *)v6 + 32))(v6, v54 + 272, *(unsigned int *)(v54 + 276));
        return sub_1CD7ED208(v52, v53, (llvm *)v55, 0, 0);
      }
      uint64_t v3 = v258;
      unsigned int v7 = v258[16];
    }
    if (v7 < 0x1C)
    {
      if (v7 == 23) {
        return sub_1CD7EF590(*(void **)(a1 + 832), *((void *)v3 + 3));
      }
      if (v7 == 22) {
        char v38 = v3;
      }
      else {
        char v38 = 0;
      }
      int v260 = v38;
      if (!v38) {
        return (uint64_t *)v2;
      }
      unsigned int v50 = *(void **)(a1 + 832);
      uint64_t v51 = sub_1CD3CE844((_DWORD *)(*(void *)(a1 + 912) + 56), &v260);
      return sub_1CD7EDC88(v50, v51[1]);
    }
    int v41 = sub_1CD3CD784(*(void *)(a1 + 912), (const llvm::Value *)v3);
    sub_1CD7D6730((uint64_t)&v260, *(llvm::LLVMContext **)(*(void *)(a1 + 832) + 56), v6, (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), v41, *(void *)v3, 0);
    int v42 = *(void **)(a1 + 832);
    uint64_t v263 = (unsigned __int8 *)(v42 + 14);
    uint64_t v264 = 0;
    uint64_t v43 = *(void *)(a1 + 912);
    uint64_t v44 = *(void *)a1;
    int v45 = *(_DWORD *)(a1 + 816);
    __int16 v256 = 0;
    LODWORD(v257) = v45;
    if (v44)
    {
      uint64_t v46 = (unsigned __int8 **)(v44 + 48);
      if (v46 != &v256)
      {
        int v47 = *v46;
        __int16 v256 = v47;
        if (v47) {
          llvm::MetadataTracking::track((uint64_t)&v256, v47, 2);
        }
      }
    }
    uint64_t v2 = (uint64_t)sub_1CCFA4BC4((uint64_t)&v260, v42, v43, (const llvm::APInt *)&v256, (uint64_t *)&v263, 0, v258);
    if (v256)
    {
      int v48 = *v256;
      if ((v48 - 4) > 0x1E)
      {
        if ((v48 - 3) >= 0xFFFFFFFE) {
          char v79 = v256;
        }
        else {
          char v79 = 0;
        }
        if ((v48 - 3) < 0xFFFFFFFE)
        {
          if (v48 == 3) {
            *((void *)v256 + 1) = 0;
          }
          goto LABEL_62;
        }
        unint64_t v80 = (unint64_t)(v79 + 8);
      }
      else
      {
        if ((v256[1] & 0x7F) != 2 && !*((_DWORD *)v256 + 3)) {
          goto LABEL_62;
        }
        uint64_t v246 = *((void *)v256 + 2);
        if ((v246 & 4) == 0) {
          goto LABEL_62;
        }
        unint64_t v80 = v246 & 0xFFFFFFFFFFFFFFF8;
        if (!v80) {
          goto LABEL_62;
        }
      }
      uint64_t v252 = &v256;
      sub_1CC5FA668(v80 + 16, &v252);
    }
LABEL_62:
    sub_1CD7E86AC((uint64_t)&v260);
    return (uint64_t *)v2;
  }
  int v9 = (llvm *)sub_1CB87DC14(*(void *)(v5 + 24), *(void *)(**(void **)(v5 + 40) + 40) + 272, *(llvm::EVT **)a2, (llvm::Type *)1);
  uint64_t v10 = (uint64_t)v8;
  __int16 v256 = (unsigned __int8 *)v9;
  unsigned int v257 = v8;
  unsigned int v11 = v3[16];
  if (v11 == 16)
  {
    uint64_t v12 = *(void *)(a1 + 832);
    uint64_t v13 = *(void *)a1;
    int v14 = *(_DWORD *)(a1 + 816);
    int v260 = 0;
    LODWORD(v261) = v14;
    if (v13)
    {
      uint64_t v15 = (void **)(v13 + 48);
      if (v15 != &v260)
      {
        uint64_t v16 = *v15;
        int v260 = v16;
        if (v16) {
          llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v16, 2);
        }
      }
    }
    uint64_t v17 = sub_1CD7EC028(v12, (uint64_t)v3, (const llvm::APInt *)&v260, v9, v10, 0, 0);
LABEL_28:
    uint64_t v2 = (uint64_t)v17;
    goto LABEL_29;
  }
  if (v11 <= 3)
  {
    if (v11 != 3 || (v3[34] & 0x40) == 0)
    {
LABEL_23:
      uint64_t v30 = *(void *)(a1 + 832);
      uint64_t v31 = *(void *)a1;
      int v32 = *(_DWORD *)(a1 + 816);
      int v260 = 0;
      LODWORD(v261) = v32;
      if (v31)
      {
        uint64_t v33 = (void **)(v31 + 48);
        if (v33 != &v260)
        {
          int v34 = *v33;
          int v260 = v34;
          if (v34) {
            llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v34, 2);
          }
        }
      }
      uint64_t v17 = sub_1CD7ECF00(v30, (uint64_t)v3, (uint64_t)&v260, v9, v10, 0, 0, 0);
      goto LABEL_28;
    }
    uint64_t v19 = ***(void ***)v3;
    int v260 = v3;
    int v20 = *(_DWORD *)(v19 + 2520);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 2504);
      int v22 = v20 - 1;
      unsigned int v23 = v22 & ((v3 >> 4) ^ (v3 >> 9));
      int v24 = (unsigned __int8 **)(v21 + 24 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v3)
      {
LABEL_18:
        if (v24[2] == (unsigned __int8 *)12)
        {
          unsigned int v26 = v24[1];
          uint64_t v27 = *(void *)v26;
          int v28 = *((_DWORD *)v26 + 2);
          if (v27 == 0x7274702E6D766C6CLL && v28 == 1752462689)
          {
            unint64_t v81 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v3, v8);
            uint64_t v251 = *(void **)(a1 + 832);
            uint64_t v82 = *(void *)a1;
            int v83 = *(_DWORD *)(a1 + 816);
            int v260 = 0;
            LODWORD(v261) = v83;
            if (v82)
            {
              uint64_t v84 = (void **)(v82 + 48);
              if (v84 != &v260)
              {
                uint64_t v85 = *v84;
                int v260 = v85;
                if (v85) {
                  llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v85, 2);
                }
              }
            }
            uint64_t v86 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)(v81 - 32)- 32 * (*(_DWORD *)(*(void *)(v81 - 32) + 20) & 0x7FFFFFF)));
            int v88 = v87;
            uint64_t v89 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)(v81 - 32)- 32 * (*(_DWORD *)(*(void *)(v81 - 32) + 20) & 0x7FFFFFF)+ 32));
            int v91 = v90;
            uint64_t v92 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)(v81 - 32)- 32 * (*(_DWORD *)(*(void *)(v81 - 32) + 20) & 0x7FFFFFF)+ 64));
            int v94 = v93;
            int v95 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)(v81 - 32)- 32 * (*(_DWORD *)(*(void *)(v81 - 32) + 20) & 0x7FFFFFF)+ 96));
            uint64_t v17 = sub_1CD7EBE80(v251, (const char *)0x14, (const llvm::APInt *)&v260, v9, v10, (uint64_t)v86, v88, v97, (uint64_t)v89, v91, (uint64_t)v92, v94, (uint64_t)v95, v96);
            goto LABEL_28;
          }
        }
        goto LABEL_23;
      }
      unsigned int v65 = 0;
      int v66 = 1;
      while (v25 != (unsigned __int8 *)-4096)
      {
        if (v65) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v25 == (unsigned __int8 *)-8192;
        }
        if (v67) {
          unsigned int v65 = v24;
        }
        unsigned int v68 = v23 + v66++;
        unsigned int v23 = v68 & v22;
        int v24 = (unsigned __int8 **)(v21 + 24 * v23);
        uint64_t v25 = *v24;
        if (*v24 == v3) {
          goto LABEL_18;
        }
      }
      if (v65) {
        uint64_t v77 = v65;
      }
      else {
        uint64_t v77 = v24;
      }
    }
    else
    {
      uint64_t v77 = 0;
    }
    int v24 = (unsigned __int8 **)sub_1CC5BF31C(v19 + 2504, (uint64_t)&v260, (uint64_t *)&v260, v77);
    uint64_t v78 = (unsigned __int8 *)v260;
    v24[1] = 0;
    void v24[2] = 0;
    *int v24 = v78;
    goto LABEL_18;
  }
  if (v11 == 19)
  {
    unsigned int v56 = *(_DWORD *)(*(void *)v3 + 8);
    if ((v56 & 0xFE) == 0x12) {
      unsigned int v56 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
    }
    uint64_t v57 = v56 >> 8;
    uint64_t v58 = *(void *)(a1 + 832);
    uint64_t v59 = *(void *)a1;
    int v60 = *(_DWORD *)(a1 + 816);
    int v260 = 0;
    LODWORD(v261) = v60;
    uint64_t v61 = v58;
    if (v59)
    {
      long long v62 = (void **)(v59 + 48);
      uint64_t v61 = v58;
      if (v62 != &v260)
      {
        int v63 = *v62;
        int v260 = v63;
        uint64_t v61 = v58;
        if (v63)
        {
          llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v63, 2);
          uint64_t v61 = *(void *)(a1 + 832);
        }
      }
    }
    unsigned __int8 v64 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, *(void *)(**(void **)(v61 + 40) + 40) + 272, v57);
    uint64_t v17 = sub_1CD7EBF14(v58, 0, (const llvm::APInt *)&v260, (llvm *)v64, 0, 0, 0);
    goto LABEL_28;
  }
  int v260 = (void *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272);
  if (sub_1CD7E9258((llvm::DataLayout **)&v260, (uint64_t)v3))
  {
    uint64_t v101 = *(void *)(a1 + 832);
    uint64_t v102 = *(void *)a1;
    int v103 = *(_DWORD *)(a1 + 816);
    int v260 = 0;
    LODWORD(v261) = v103;
    if (v102)
    {
      int v104 = (void **)(v102 + 48);
      if (v104 != &v260)
      {
        uint64_t v105 = *v104;
        int v260 = v105;
        if (v105) {
          llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v105, 2);
        }
      }
    }
    if ((_BYTE)v9) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v256);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v256);
    }
    unsigned int v108 = ExtendedSizeInBits;
    if (v107 == 1) {
    unsigned int v255 = v108;
    }
    if (v108 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v254);
    }
    unint64_t v109 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v108;
    if (!v108) {
      LOBYTE(v109) = 0;
    }
    unint64_t v254 = v109 & 1;
    uint64_t v2 = sub_1CD7877A0(v101, (const llvm::APInt *)&v260, (uint64_t)v9, v10, (uint64_t)&v254);
    if (v255 >= 0x41 && v254) {
      MEMORY[0x1D25D9CB0](v254, 0x1000C8000313F17);
    }
    goto LABEL_29;
  }
  int v71 = v3[16];
  if (v71 == 17)
  {
    uint64_t v72 = *(void *)(a1 + 832);
    uint64_t v73 = *(void *)a1;
    int v74 = *(_DWORD *)(a1 + 816);
    int v260 = 0;
    LODWORD(v261) = v74;
    if (v73)
    {
      int v75 = (void **)(v73 + 48);
      if (v75 != &v260)
      {
        uint64_t v76 = *v75;
        int v260 = v76;
        if (v76) {
          llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v76, 2);
        }
      }
    }
    uint64_t v17 = sub_1CD7ECAFC(v72, (uint64_t)v3, (uint64_t)&v260, v9, v10, 0);
    goto LABEL_28;
  }
  if ((v71 - 11) > 1)
  {
    if (v71 == 5)
    {
      sub_1CD7D744C((uint64_t *)a1, (const llvm::Value *)*((unsigned __int16 *)v3 + 9), (uint64_t ***)v3, v69, v70);
      return (uint64_t *)sub_1CD7E88EC((uint64_t *)(a1 + 8), &v258)[1];
    }
  }
  else if ((*(_DWORD *)(*(void *)v258 + 8) & 0xFE) != 0x10)
  {
    return sub_1CD3DD4D8(*(void *)(a1 + 832), v9, v10);
  }
  if ((v71 & 0xFE) == 0xE)
  {
    int v260 = v262;
    uint64_t v261 = 0x400000000;
    int v113 = *(unsigned __int8 *)(*(void *)v3 + 8);
    int v114 = *(_DWORD *)(*(void *)v3 + 32);
    if (v114)
    {
      for (unsigned int i = 0; i != v114; ++i)
      {
        ElementAsConstant = (unsigned __int8 *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)v3, i);
        uint64_t v117 = sub_1CD7DE5B4(a1, ElementAsConstant);
        uint64_t v118 = (uint64_t *)*((unsigned __int16 *)v117 + 29);
        if (*((_WORD *)v117 + 29))
        {
          int v119 = 0;
          unsigned int v120 = v261;
          do
          {
            if (v120 >= HIDWORD(v261)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v121 = (uint64_t **)((char *)v260 + 16 * v120);
            *uint64_t v121 = v117;
            v121[1] = v119;
            unsigned int v120 = v261 + 1;
            LODWORD(v261) = v261 + 1;
            int v119 = (uint64_t *)((char *)v119 + 1);
          }
          while (v118 != v119);
        }
      }
      int v113 = *(unsigned __int8 *)(*(void *)v3 + 8);
    }
    uint64_t v135 = *(void **)(a1 + 832);
    if (v113 == 17)
    {
      uint64_t v136 = (uint64_t *)v260;
      unint64_t v137 = v261;
      uint64_t v138 = *(void *)a1;
      int v139 = *(_DWORD *)(a1 + 816);
      uint64_t v263 = 0;
      LODWORD(v264) = v139;
      if (v138)
      {
        unint64_t v140 = (void **)(v138 + 48);
        if (v140 != (void **)&v263)
        {
          uint64_t v263 = (unsigned __int8 *)*v140;
          if (v263) {
            llvm::MetadataTracking::track((uint64_t)&v263, v263, 2);
          }
        }
      }
      uint64_t v2 = (uint64_t)sub_1CD7F9858(v135, v136, v137, (const llvm::APInt *)&v263);
LABEL_250:
      if (!v263) {
        goto LABEL_254;
      }
      int v191 = *v263;
      if ((v191 - 4) > 0x1E)
      {
        if ((v191 - 3) >= 0xFFFFFFFE) {
          uint64_t v192 = v263;
        }
        else {
          uint64_t v192 = 0;
        }
        if ((v191 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v193 = (unint64_t)(v192 + 8);
LABEL_261:
          uint64_t v252 = &v263;
          sub_1CC5FA668(v193 + 16, &v252);
          goto LABEL_254;
        }
        if (v191 == 3) {
          *((void *)v263 + 1) = 0;
        }
      }
      else if ((v263[1] & 0x7F) == 2 || *((_DWORD *)v263 + 3))
      {
        uint64_t v247 = *((void *)v263 + 2);
        if ((v247 & 4) != 0)
        {
          unint64_t v193 = v247 & 0xFFFFFFFFFFFFFFF8;
          if (v193) {
            goto LABEL_261;
          }
        }
      }
LABEL_254:
      uint64_t v100 = v260;
      if (v260 == v262) {
        return (uint64_t *)v2;
      }
      goto LABEL_118;
    }
    uint64_t v141 = *(void *)a1;
    int v142 = *(_DWORD *)(a1 + 816);
    uint64_t v263 = 0;
    LODWORD(v264) = v142;
    if (v141)
    {
      uint64_t v143 = (void **)(v141 + 48);
      if (v143 != (void **)&v263)
      {
        uint64_t v263 = (unsigned __int8 *)*v143;
        if (v263) {
          llvm::MetadataTracking::track((uint64_t)&v263, v263, 2);
        }
      }
    }
    uint64_t v144 = (uint64_t *)v260;
    uint64_t v145 = v261;
LABEL_246:
    uint64_t v186 = v135[104];
    if (v186) {
      uint64_t v187 = *(unsigned __int16 *)(v186 + 8);
    }
    else {
      uint64_t v187 = 0;
    }
    uint64_t v2 = (uint64_t)sub_1CD7FF4E8(v135, (const char *)0x92, (const llvm::APInt *)&v263, v9, v10, v144, v145, v187);
    int v189 = v188;
    unint64_t v190 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v258);
    v190[1] = v2;
    *((_DWORD *)v190 + 4) = v189;
    goto LABEL_250;
  }
  if ((v71 & 0xFE) == 8)
  {
    int v260 = v262;
    uint64_t v261 = 0x400000000;
    int v110 = *((_DWORD *)v3 + 5);
    if ((v110 & 0x40000000) != 0)
    {
      uint8x8_t v112 = (unsigned __int8 **)*((void *)v3 - 1);
      uint64_t v111 = v110 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v111 = v110 & 0x7FFFFFF;
      uint8x8_t v112 = (unsigned __int8 **)&v3[-32 * v111];
    }
    if (v111)
    {
      unsigned int v124 = &v112[4 * v111];
      do
      {
        uint64_t v125 = sub_1CD7DE5B4(a1, *v112);
        if (v125)
        {
          uint64_t v126 = (uint64_t *)*((unsigned __int16 *)v125 + 29);
          if (*((_WORD *)v125 + 29))
          {
            uint64_t v127 = 0;
            unsigned int v128 = v261;
            do
            {
              if (v128 >= HIDWORD(v261)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v129 = (uint64_t **)((char *)v260 + 16 * v128);
              char *v129 = v125;
              v129[1] = v127;
              unsigned int v128 = v261 + 1;
              LODWORD(v261) = v261 + 1;
              uint64_t v127 = (uint64_t *)((char *)v127 + 1);
            }
            while (v126 != v127);
          }
        }
        v112 += 4;
      }
      while (v112 != v124);
      uint64_t v123 = (uint64_t *)v260;
      unint64_t v122 = v261;
    }
    else
    {
      unint64_t v122 = 0;
      uint64_t v123 = (uint64_t *)v262;
    }
    uint64_t v130 = *(void **)(a1 + 832);
    uint64_t v131 = *(void *)a1;
    int v132 = *(_DWORD *)(a1 + 816);
    uint64_t v263 = 0;
    LODWORD(v264) = v132;
    if (v131)
    {
      int v133 = (void **)(v131 + 48);
      if (v133 != (void **)&v263)
      {
        uint64_t v263 = (unsigned __int8 *)*v133;
        if (v263) {
          llvm::MetadataTracking::track((uint64_t)&v263, v263, 2);
        }
      }
    }
    uint64_t v2 = (uint64_t)sub_1CD7F9858(v130, v123, v122, (const llvm::APInt *)&v263);
    if (v263)
    {
      int v134 = *v263;
      if ((v134 - 4) > 0x1E)
      {
        if ((v134 - 3) >= 0xFFFFFFFE) {
          int v199 = v263;
        }
        else {
          int v199 = 0;
        }
        if ((v134 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v200 = (unint64_t)(v199 + 8);
LABEL_270:
          uint64_t v252 = &v263;
          sub_1CC5FA668(v200 + 16, &v252);
          goto LABEL_174;
        }
        if (v134 == 3) {
          *((void *)v263 + 1) = 0;
        }
      }
      else if ((v263[1] & 0x7F) == 2 || *((_DWORD *)v263 + 3))
      {
        uint64_t v248 = *((void *)v263 + 2);
        if ((v248 & 4) != 0)
        {
          unint64_t v200 = v248 & 0xFFFFFFFFFFFFFFF8;
          if (v200) {
            goto LABEL_270;
          }
        }
      }
    }
LABEL_174:
    uint64_t v100 = v260;
    if (v260 == v262) {
      return (uint64_t *)v2;
    }
    goto LABEL_118;
  }
  uint64_t v98 = *(void *)v3;
  if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x10)
  {
    int v260 = v262;
    uint64_t v261 = 0x400000000;
    llvm::ComputeValueVTs(v6, (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), v98, (uint64_t)&v260, 0, 0, 0);
    uint64_t v99 = v261;
    if (!v261)
    {
      uint64_t v2 = 0;
      goto LABEL_117;
    }
    uint64_t v263 = (unsigned __int8 *)v265;
    uint64_t v264 = 0x400000000;
    sub_1CD3E535C((uint64_t *)&v263, v261, 0, 0);
    uint64_t v146 = 0;
    uint64_t v147 = 16 * v99;
    while (1)
    {
      uint64_t v149 = *(llvm **)((char *)v260 + v146);
      uint64_t v148 = *(void *)((char *)v260 + v146 + 8);
      if (v3[16] - 11 <= 1)
      {
        uint64_t v150 = sub_1CD3DD4D8(*(void *)(a1 + 832), *(llvm **)((char *)v260 + v146), *(void *)((char *)v260 + v146 + 8));
        uint64_t v151 = &v263[v146];
        *(void *)uint64_t v151 = v150;
        *((_DWORD *)v151 + 2) = v152;
        goto LABEL_215;
      }
      if (*(void *)((char *)v260 + v146))
      {
        BOOL v154 = ((_BYTE)v149 + 104) >= 0x13u && ((_BYTE)v149 - 8) >= 7u;
        if (!v154 || ((_BYTE)v149 - 75) < 0x2Du)
        {
LABEL_206:
          uint64_t v162 = *(void *)(a1 + 832);
          uint64_t v163 = *(void *)a1;
          int v164 = *(_DWORD *)(a1 + 816);
          uint64_t v252 = 0;
          int v253 = v164;
          if (v163)
          {
            uint64_t v165 = (unsigned __int8 **)(v163 + 48);
            if (v165 != (unsigned __int8 **)&v252)
            {
              uint64_t v166 = *v165;
              uint64_t v252 = (unsigned __int8 **)v166;
              if (v166) {
                llvm::MetadataTracking::track((uint64_t)&v252, v166, 2);
              }
            }
          }
          uint64_t v160 = sub_1CD7ECDC4(v162, (uint64_t)&v252, (BOOL)v149, v148, 0, 0.0);
          goto LABEL_211;
        }
      }
      else
      {
        if ((*(_DWORD *)(v148 + 8) & 0xFE) == 0x12) {
          unsigned int v153 = *(unsigned __int8 *)(**(void **)(v148 + 16) + 8);
        }
        else {
          unsigned int v153 = *(_DWORD *)(v148 + 8);
        }
        if (v153 <= 6) {
          goto LABEL_206;
        }
      }
      uint64_t v155 = *(void *)(a1 + 832);
      uint64_t v156 = *(void *)a1;
      int v157 = *(_DWORD *)(a1 + 816);
      uint64_t v252 = 0;
      int v253 = v157;
      if (v156)
      {
        uint64_t v158 = (unsigned __int8 **)(v156 + 48);
        if (v158 != (unsigned __int8 **)&v252)
        {
          uint64_t v159 = *v158;
          uint64_t v252 = (unsigned __int8 **)v159;
          if (v159) {
            llvm::MetadataTracking::track((uint64_t)&v252, v159, 2);
          }
        }
      }
      uint64_t v160 = sub_1CD7EBF14(v155, 0, (const llvm::APInt *)&v252, v149, v148, 0, 0);
LABEL_211:
      uint64_t v167 = &v263[v146];
      *(void *)uint64_t v167 = v160;
      *((_DWORD *)v167 + 2) = v161;
      if (v252)
      {
        int v168 = *(unsigned __int8 *)v252;
        if ((v168 - 4) > 0x1E)
        {
          if ((v168 - 3) >= 0xFFFFFFFE) {
            uint64_t v169 = v252;
          }
          else {
            uint64_t v169 = 0;
          }
          if ((v168 - 3) < 0xFFFFFFFE)
          {
            if (v168 == 3) {
              v252[1] = 0;
            }
            goto LABEL_215;
          }
          unint64_t v170 = (unint64_t)(v169 + 1);
        }
        else
        {
          if ((*((unsigned char *)v252 + 1) & 0x7F) != 2 && !*((_DWORD *)v252 + 3)) {
            goto LABEL_215;
          }
          unint64_t v171 = (unint64_t)v252[2];
          if ((v171 & 4) == 0) {
            goto LABEL_215;
          }
          unint64_t v170 = v171 & 0xFFFFFFFFFFFFFFF8;
          if (!v170) {
            goto LABEL_215;
          }
        }
        unsigned int v259 = &v252;
        sub_1CC5FA668(v170 + 16, &v259);
      }
LABEL_215:
      v146 += 16;
      if (v147 == v146)
      {
        uint64_t v172 = *(void **)(a1 + 832);
        int v173 = (uint64_t *)v263;
        unint64_t v174 = v264;
        uint64_t v175 = *(void *)a1;
        int v176 = *(_DWORD *)(a1 + 816);
        uint64_t v252 = 0;
        int v253 = v176;
        if (v175)
        {
          unsigned int v177 = (unsigned __int8 **)(v175 + 48);
          if (v177 != (unsigned __int8 **)&v252)
          {
            int v178 = *v177;
            uint64_t v252 = (unsigned __int8 **)v178;
            if (v178) {
              llvm::MetadataTracking::track((uint64_t)&v252, v178, 2);
            }
          }
        }
        uint64_t v2 = (uint64_t)sub_1CD7F9858(v172, v173, v174, (const llvm::APInt *)&v252);
        if (v252)
        {
          int v179 = *(unsigned __int8 *)v252;
          if ((v179 - 4) > 0x1E)
          {
            if ((v179 - 3) >= 0xFFFFFFFE) {
              uint64_t v213 = v252;
            }
            else {
              uint64_t v213 = 0;
            }
            if ((v179 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v214 = (unint64_t)(v213 + 1);
              goto LABEL_296;
            }
            if (v179 == 3) {
              v252[1] = 0;
            }
          }
          else if ((*((unsigned char *)v252 + 1) & 0x7F) == 2 || *((_DWORD *)v252 + 3))
          {
            unint64_t v249 = (unint64_t)v252[2];
            if ((v249 & 4) != 0)
            {
              unint64_t v214 = v249 & 0xFFFFFFFFFFFFFFF8;
              if (v214)
              {
LABEL_296:
                unsigned int v259 = &v252;
                sub_1CC5FA668(v214 + 16, &v259);
              }
            }
          }
        }
        if (v263 != (unsigned __int8 *)v265) {
          free(v263);
        }
        goto LABEL_117;
      }
    }
  }
  if (v71 == 4) {
    return sub_1CD7EF178(*(void *)(a1 + 832), (uint64_t)v3, v9, v10, 0, 0, 0);
  }
  if (v71 == 6 || v71 == 7) {
    return sub_1CD7DE5B4(a1, *((unsigned __int8 **)v3 - 4));
  }
  uint64_t v180 = *(void *)v258;
  if (v71 == 10)
  {
    int v260 = v262;
    uint64_t v261 = 0x1000000000;
    uint64_t v181 = *(unsigned int *)(v180 + 32);
    if (v181)
    {
      uint64_t v201 = v3;
      do
      {
        uint64_t v203 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)&v201[-32 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF)]);
        if (v261 >= (unint64_t)HIDWORD(v261)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v204 = (uint64_t **)((char *)v260 + 16 * v261);
        *unsigned int v204 = v203;
        v204[1] = v202;
        unsigned int v182 = v261 + 1;
        LODWORD(v261) = v261 + 1;
        v201 += 32;
        --v181;
      }
      while (v181);
    }
    else
    {
      unsigned int v182 = 0;
    }
    uint64_t v135 = *(void **)(a1 + 832);
    uint64_t v183 = *(void *)a1;
    int v184 = *(_DWORD *)(a1 + 816);
    uint64_t v263 = 0;
    LODWORD(v264) = v184;
    if (v183)
    {
      uint64_t v185 = (void **)(v183 + 48);
      if (v185 != (void **)&v263)
      {
        uint64_t v263 = (unsigned __int8 *)*v185;
        if (v263)
        {
          llvm::MetadataTracking::track((uint64_t)&v263, v263, 2);
          unsigned int v182 = v261;
        }
      }
    }
    uint64_t v144 = (uint64_t *)v260;
    uint64_t v145 = v182;
    goto LABEL_246;
  }
  unint64_t v194 = sub_1CB87DC14(v6, *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272, *(llvm::EVT **)(v180 + 24), 0);
  uint64_t v196 = (llvm *)v194;
  uint64_t v197 = v195;
  if ((_BYTE)v194)
  {
    BOOL v205 = (v194 + 104) >= 0x13u && (v194 - 8) >= 7u;
    if (!v205 || (v194 - 75) < 0x2Du) {
      goto LABEL_299;
    }
  }
  else
  {
    if ((*(_DWORD *)(v195 + 8) & 0xFE) == 0x12) {
      unsigned int v198 = *(unsigned __int8 *)(**(void **)(v195 + 16) + 8);
    }
    else {
      unsigned int v198 = *(_DWORD *)(v195 + 8);
    }
    if (v198 <= 6)
    {
LABEL_299:
      uint64_t v215 = *(void *)(a1 + 832);
      uint64_t v216 = *(void *)a1;
      int v217 = *(_DWORD *)(a1 + 816);
      int v260 = 0;
      LODWORD(v261) = v217;
      if (v216)
      {
        uint64_t v218 = (void **)(v216 + 48);
        if (v218 != &v260)
        {
          unint64_t v219 = *v218;
          int v260 = v219;
          if (v219) {
            llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v219, 2);
          }
        }
      }
      uint64_t v211 = sub_1CD7ECDC4(v215, (uint64_t)&v260, (BOOL)v196, v197, 0, 0.0);
      goto LABEL_304;
    }
  }
  uint64_t v206 = *(void *)(a1 + 832);
  uint64_t v207 = *(void *)a1;
  int v208 = *(_DWORD *)(a1 + 816);
  int v260 = 0;
  LODWORD(v261) = v208;
  if (v207)
  {
    unint64_t v209 = (void **)(v207 + 48);
    if (v209 != &v260)
    {
      uint64_t v210 = *v209;
      int v260 = v210;
      if (v210) {
        llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v210, 2);
      }
    }
  }
  uint64_t v211 = sub_1CD7EBF14(v206, 0, (const llvm::APInt *)&v260, v196, v197, 0, 0);
LABEL_304:
  uint64_t v220 = (uint64_t)v211;
  unsigned int v221 = v212;
  if (v260)
  {
    int v222 = *(unsigned __int8 *)v260;
    if ((v222 - 4) > 0x1E)
    {
      if ((v222 - 3) >= 0xFFFFFFFE) {
        unint64_t v243 = v260;
      }
      else {
        unint64_t v243 = 0;
      }
      if ((v222 - 3) < 0xFFFFFFFE)
      {
        if (v222 == 3) {
          *((void *)v260 + 1) = 0;
        }
        goto LABEL_308;
      }
      unint64_t v244 = (unint64_t)v243 + 8;
    }
    else
    {
      if ((*((unsigned char *)v260 + 1) & 0x7F) != 2 && !*((_DWORD *)v260 + 3)) {
        goto LABEL_308;
      }
      uint64_t v250 = *((void *)v260 + 2);
      if ((v250 & 4) == 0) {
        goto LABEL_308;
      }
      unint64_t v244 = v250 & 0xFFFFFFFFFFFFFFF8;
      if (!v244) {
        goto LABEL_308;
      }
    }
    uint64_t v263 = (unsigned __int8 *)&v260;
    sub_1CC5FA668(v244 + 16, &v263);
  }
LABEL_308:
  if (*(unsigned char *)(v180 + 8) != 19)
  {
    int v260 = v262;
    uint64_t v261 = 0x1000000000;
    sub_1CD3E535C((uint64_t *)&v260, *(unsigned int *)(v180 + 32), v220, v221);
    __int16 v231 = *(void **)(a1 + 832);
    uint64_t v232 = *(void *)a1;
    int v233 = *(_DWORD *)(a1 + 816);
    uint64_t v263 = 0;
    LODWORD(v264) = v233;
    if (v232)
    {
      __int16 v234 = (void **)(v232 + 48);
      if (v234 != (void **)&v263)
      {
        uint64_t v263 = (unsigned __int8 *)*v234;
        if (v263) {
          llvm::MetadataTracking::track((uint64_t)&v263, v263, 2);
        }
      }
    }
    uint64_t v235 = v231[104];
    if (v235) {
      uint64_t v236 = *(unsigned __int16 *)(v235 + 8);
    }
    else {
      uint64_t v236 = 0;
    }
    uint64_t v2 = (uint64_t)sub_1CD7FF4E8(v231, (const char *)0x92, (const llvm::APInt *)&v263, v9, v10, (uint64_t *)v260, v261, v236);
    int v238 = v237;
    int v239 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v258);
    v239[1] = v2;
    *((_DWORD *)v239 + 4) = v238;
    if (v263)
    {
      int v240 = *v263;
      if ((v240 - 4) > 0x1E)
      {
        if ((v240 - 3) >= 0xFFFFFFFE) {
          int v245 = v263;
        }
        else {
          int v245 = 0;
        }
        if ((v240 - 3) < 0xFFFFFFFE)
        {
          if (v240 == 3) {
            *((void *)v263 + 1) = 0;
          }
          goto LABEL_117;
        }
        unint64_t v242 = (unint64_t)(v245 + 8);
      }
      else
      {
        if ((v263[1] & 0x7F) != 2 && !*((_DWORD *)v263 + 3)) {
          goto LABEL_117;
        }
        uint64_t v241 = *((void *)v263 + 2);
        if ((v241 & 4) == 0) {
          goto LABEL_117;
        }
        unint64_t v242 = v241 & 0xFFFFFFFFFFFFFFF8;
        if (!v242) {
          goto LABEL_117;
        }
      }
      uint64_t v252 = &v263;
      sub_1CC5FA668(v242 + 16, &v252);
    }
LABEL_117:
    uint64_t v100 = v260;
    if (v260 == v262) {
      return (uint64_t *)v2;
    }
LABEL_118:
    free(v100);
    return (uint64_t *)v2;
  }
  uint64_t v223 = *(llvm::APFloatBase **)(a1 + 832);
  uint64_t v224 = *(void *)a1;
  int v225 = *(_DWORD *)(a1 + 816);
  int v260 = 0;
  LODWORD(v261) = v225;
  if (v224)
  {
    uint64_t v226 = (void **)(v224 + 48);
    if (v226 != &v260)
    {
      uint64_t v227 = *v226;
      int v260 = v227;
      if (v227) {
        llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v227, 2);
      }
    }
  }
  uint64_t v2 = (uint64_t)sub_1CD787A68(v223, v9, v10, (uint64_t)&v260, v220, (void *)v221);
  int v229 = v228;
  uint64_t v230 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v258);
  v230[1] = v2;
  *((_DWORD *)v230 + 4) = v229;
LABEL_29:
  if (v260)
  {
    int v35 = *(unsigned __int8 *)v260;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        __int32 v40 = v260;
      }
      else {
        __int32 v40 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v37 = (unint64_t)v40 + 8;
LABEL_51:
        uint64_t v263 = (unsigned __int8 *)&v260;
        sub_1CC5FA668(v37 + 16, &v263);
        return (uint64_t *)v2;
      }
      if (v35 == 3) {
        *((void *)v260 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v260 + 1) & 0x7F) == 2 || *((_DWORD *)v260 + 3))
    {
      uint64_t v36 = *((void *)v260 + 2);
      if ((v36 & 4) != 0)
      {
        unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v37) {
          goto LABEL_51;
        }
      }
    }
  }
  return (uint64_t *)v2;
}

uint64_t sub_1CCFAFDC8(uint64_t *a1, const llvm::Value *a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  uint64_t v6 = (uint64_t)a2;
  uint64_t v47 = (uint64_t)a2;
  uint64_t v7 = *a1;
  int v8 = *(_DWORD *)(*a1 + 20);
  if ((v8 & 0x40000000) != 0) {
    int v9 = *(llvm::Value ***)(v7 - 8);
  }
  else {
    int v9 = (llvm::Value **)(v7 - 32 * (v8 & 0x7FFFFFF));
  }
  uint64_t result = (uint64_t)llvm::classifyEHPersonality(*v9, a2);
  if (result == 12)
  {
    uint64_t v49 = v6;
    if (v6)
    {
      uint64_t v11 = *(void *)(v6 + 48);
      uint64_t v12 = v11 - 24;
      if (!v11) {
        uint64_t v12 = 0;
      }
      int v13 = *(unsigned __int8 *)(v12 + 16);
      while (1)
      {
        uint64_t v14 = *(void *)(v6 + 48);
        if (v13 == 83)
        {
          uint64_t v14 = *(void *)(v6 + 48);
          do
          {
            uint64_t v14 = *(void *)(v14 + 8);
            uint64_t v15 = v14 - 24;
            if (!v14) {
              uint64_t v15 = 0;
            }
          }
          while (*(unsigned char *)(v15 + 16) == 83);
        }
        int v16 = *(unsigned __int8 *)(v14 - 8);
        if (v16 == 38) {
          break;
        }
        if (v16 == 79)
        {
          uint64_t v17 = sub_1CD3CE844((_DWORD *)a1 + 14, &v49);
          uint64_t result = sub_1CCFC684C(a4, v17[1], v5);
          *(unsigned char *)(*(void *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
          return result;
        }
      }
      int v35 = *(_DWORD *)(v14 - 4);
      if ((v35 & 0x40000000) != 0)
      {
        uint64_t v37 = *(void *)(v14 - 32);
        uint64_t v36 = v35 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v36 = v35 & 0x7FFFFFF;
        uint64_t v37 = v14 - 32 * v36 - 24;
      }
      if (*(_WORD *)(v14 - 6)) {
        uint64_t v38 = 2;
      }
      else {
        uint64_t v38 = 1;
      }
      if (v38 != v36)
      {
        __int32 v39 = (uint64_t *)(v37 + 32 * v38);
        uint64_t v40 = 32 * v36 - 32 * v38;
        do
        {
          uint64_t v48 = 0;
          uint64_t v41 = *v39;
          v39 += 4;
          uint64_t v48 = v41;
          int v42 = sub_1CD3CE844((_DWORD *)a1 + 14, &v48);
          uint64_t result = sub_1CCFC684C(a4, v42[1], v5);
          *(unsigned char *)(*(void *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
          v40 -= 32;
        }
        while (v40);
      }
    }
  }
  else if (v6)
  {
    unsigned int v18 = result - 7;
    uint64_t v19 = a1 + 7;
    unsigned int v20 = result - 9;
    do
    {
      while (1)
      {
        for (uint64_t i = *(void *)(v6 + 48); ; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v22 = i - 24;
          uint64_t v23 = i ? i - 24 : 0;
          if (*(unsigned char *)(v23 + 16) != 83) {
            break;
          }
        }
        int v24 = *(unsigned __int8 *)(i - 8);
        if (v24 != 38) {
          break;
        }
        int v25 = *(_DWORD *)(i - 4);
        if ((v25 & 0x40000000) != 0)
        {
          uint64_t v27 = *(void *)(i - 32);
          uint64_t v26 = v25 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v26 = v25 & 0x7FFFFFF;
          uint64_t v27 = v22 - 32 * v26;
        }
        int v28 = *(_WORD *)(i - 6) & 1;
        if (*(_WORD *)(i - 6)) {
          uint64_t v29 = 2;
        }
        else {
          uint64_t v29 = 1;
        }
        if (v29 != v26)
        {
          uint64_t v30 = (uint64_t *)(v27 + 32 * v29);
          uint64_t v31 = 32 * v26 - 32 * v29;
          do
          {
            uint64_t v49 = 0;
            uint64_t v49 = *v30;
            int v32 = sub_1CD3CE844(v19, &v49);
            uint64_t result = sub_1CCFC684C(a4, v32[1], v5);
            if (v20 <= 1) {
              *(unsigned char *)(*(void *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 189) = 1;
            }
            if (v18 >= 2) {
              *(unsigned char *)(*(void *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
            }
            v30 += 4;
            v31 -= 32;
          }
          while (v31);
          int v28 = *(_WORD *)(i - 6) & 1;
        }
        if (v28)
        {
          int v33 = *(_DWORD *)(i - 4);
          if ((v33 & 0x40000000) != 0) {
            uint64_t v34 = *(void *)(i - 32);
          }
          else {
            uint64_t v34 = v22 - 32 * (v33 & 0x7FFFFFF);
          }
          uint64_t v6 = *(void *)(v34 + 32);
          uint64_t result = a1[4];
          if (result && v6)
          {
            uint64_t result = llvm::BranchProbabilityInfo::getEdgeProbability(result, v47, v6);
            unint64_t v5 = (result * (unint64_t)v5 + 0x40000000) >> 31;
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
        uint64_t v47 = v6;
        if (!v6) {
          return result;
        }
      }
      if (v24 == 79)
      {
        uint64_t v43 = sub_1CD3CE844(v19, &v47);
        uint64_t result = sub_1CCFC684C(a4, v43[1], v5);
        uint64_t v44 = *(void *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16);
        *(unsigned char *)(v44 + 187) = 1;
        *(unsigned char *)(v44 + 189) = 1;
        return result;
      }
    }
    while (v24 != 94);
    int v45 = sub_1CD3CE844(v19, &v47);
    return sub_1CCFC684C(a4, v45[1], v5);
  }
  return result;
}

uint64_t sub_1CCFB0138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return llvm::BranchProbabilityInfo::getEdgeProbability(a1, a2, *(void *)(a3 + 16));
  }
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4 == a2 + 40)
  {
LABEL_10:
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v5 = v4 - 24;
    if (!v4) {
      uint64_t v5 = 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    int v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v8 = 2;
      }
      else {
        unsigned int v8 = 1;
      }
    }
    else
    {
      unsigned int v8 = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          break;
        case 1:
          __break(1u);
          goto LABEL_19;
        case 2:
          unsigned int v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
LABEL_19:
          unsigned int v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          unsigned int v8 = 2;
          break;
        case 7:
          unsigned int v8 = *(_WORD *)(v5 + 18) & 1;
          break;
        case 8:
          unsigned int v8 = 1;
          break;
        case 10:
          unsigned int v8 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_10;
      }
    }
  }
  if (v8 <= 1) {
    unsigned int v8 = 1;
  }
  if (v8 == 0x80000000) {
    return 1;
  }
  else {
    return ((v8 >> 1) | 0x80000000) / v8;
  }
}

void sub_1CCFB0250(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (unsigned __int8 *)a1;
  v253[8] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a2 + 2200) = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v251 = v253;
  uint64_t v252 = 0x400000000;
  uint64_t v248 = v250;
  unint64_t v249 = 0x400000000;
  uint64_t v202 = *(void *)(**(void **)(*(void *)(a2 + 80) + 40) + 40);
  int v6 = (llvm::DataLayout *)(v202 + 272);
  unsigned int v198 = (llvm::PointerType *)v5;
  llvm::ComputeValueVTs(a1, (llvm::DataLayout *)(v202 + 272), v5, (uint64_t)&v251, 0, (uint64_t)&v248, 0);
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a2 + 80) + 24) + 1768))())
  {
    uint64_t v7 = *(void *)(**(void **)(*(void *)(a2 + 80) + 40) + 112);
    if (v7)
    {
      if (*(char *)(v7 + 31) < 0) {
        *(unsigned char *)(a2 + 26) = 0;
      }
    }
  }
  uint64_t v207 = v4;
  if (*(unsigned char *)(a2 + 27))
  {
    int v245 = v247;
    uint64_t v246 = 0x400000000;
    v239.n128_u64[0] = (unint64_t)&v240;
    v239.n128_u64[1] = 0x400000000;
    sub_1CD7E7F3C(&v251, &v245);
    unint64_t v8 = (unint64_t)v248;
    if (v248 == v250 || (uint64_t *)v239.n128_u64[0] == &v240)
    {
      if (HIDWORD(v249) < v239.n128_u32[2]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v239.n128_u32[3] < v249) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v249 >= v239.n128_u32[2]) {
        uint64_t v9 = v239.n128_u32[2];
      }
      else {
        uint64_t v9 = v249;
      }
      if (v239.n128_u32[2] < v249)
      {
        int v197 = v249 - v239.n128_u32[2];
        memcpy((void *)(v239.n128_u64[0] + 8 * v239.n128_u32[2]), &v248[8 * v9], 8 * v249 - 8 * v9);
        v239.n128_u32[2] += v197;
        LODWORD(v249) = v9;
      }
      else if (v239.n128_u32[2] > v249)
      {
        int v10 = v239.n128_u32[2] - v249;
        memcpy(&v248[8 * v249], (const void *)(v239.n128_u64[0] + 8 * v9), 8 * v239.n128_u32[2] - 8 * v9);
        LODWORD(v249) = v10 + v249;
        v239.n128_u32[2] = v9;
      }
    }
    else
    {
      uint64_t v248 = (char *)v239.n128_u64[0];
      v239.n128_u64[0] = v8;
      unint64_t v196 = v249;
      unint64_t v249 = v239.n128_u64[1];
      v239.n128_u64[1] = v196;
    }
    uint64_t v11 = v246;
    if (v246)
    {
      uint64_t v36 = 0;
      do
      {
        uint64_t v37 = (uint64_t *)((char *)v245 + 16 * v36);
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        uint64_t v40 = *(void *)(v239.n128_u64[0] + 8 * v36);
        LOBYTE(v236) = sub_1CB87E160((unint64_t)v4, **(llvm::LLVMContext ***)(a2 + 16), *v37, v39);
        unsigned int v41 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, uint64_t, void))(*(void *)v4 + 584))(v4, **(void **)(a2 + 16), v38, v39, 0);
        unint64_t v43 = sub_1CB87E200((unsigned __int8 *)&v236);
        if (v42 == 1) {
        uint64_t v44 = v41;
        }
        sub_1CD788338((uint64_t)&v251, v41, v236, 0);
        if (v41)
        {
          uint64_t v45 = 0;
          unint64_t v46 = v43 >> 3;
          unsigned int v47 = v249;
          do
          {
            if (v47 >= HIDWORD(v249)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v248[8 * v47] = v40 + v45;
            unsigned int v47 = v249 + 1;
            LODWORD(v249) = v249 + 1;
            v45 += v46;
            --v44;
          }
          while (v44);
        }
        ++v36;
      }
      while (v36 != v11);
    }
    if ((uint64_t *)v239.n128_u64[0] != &v240) {
      free((void *)v239.n128_u64[0]);
    }
    int v6 = (llvm::DataLayout *)(v202 + 272);
    if (v245 != v247) {
      free(v245);
    }
  }
  int v245 = v247;
  uint64_t v246 = 0x400000000;
  uint64_t v12 = *(unsigned int *)(a2 + 32);
  int v13 = *(uint64_t ***)(a2 + 16);
  v239.n128_u64[0] = (unint64_t)&v240;
  v239.n128_u64[1] = 0x200000000;
  __int16 v14 = *(_WORD *)(a2 + 24);
  if (v14)
  {
    unsigned __int32 v15 = 1;
    LODWORD(v240) = 48;
    v239.n128_u32[2] = 1;
    if ((v14 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  unsigned __int32 v15 = 0;
  if ((v14 & 2) != 0)
  {
LABEL_25:
    *((_DWORD *)&v240 + v15++) = 67;
    v239.n128_u32[2] = v15;
  }
LABEL_26:
  if ((v14 & 8) != 0)
  {
    if (v15 >= 2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)&v240 + v15) = 10;
    unsigned __int32 v15 = ++v239.n128_u32[2];
    uint64_t v17 = *(uint64_t ***)(a2 + 16);
    int v16 = (unsigned int *)v239.n128_u64[0];
  }
  else
  {
    int v16 = (unsigned int *)&v240;
    uint64_t v17 = v13;
  }
  uint64_t v220 = a2 + 2192;
  uint64_t v18 = llvm::AttributeList::get(*v17, 0, v16, v15);
  if ((uint64_t *)v239.n128_u64[0] != &v240) {
    free((void *)v239.n128_u64[0]);
  }
  llvm::GetReturnInfo(v12, v13, v18, (uint64_t)&v245, v4, v6);
  char v19 = (*(uint64_t (**)(unsigned __int8 *, void, void, void, void **, void))(*(void *)v4 + 1856))(v4, *(unsigned int *)(a2 + 32), *(void *)(*(void *)(a2 + 80) + 40), (*(unsigned __int16 *)(a2 + 24) >> 2) & 1, &v245, **(void **)(a2 + 16));
  unsigned int v20 = *(llvm::Type **)(a2 + 16);
  char v204 = v19;
  if (v19)
  {
    int v21 = (*(uint64_t (**)(unsigned __int8 *, llvm::Type *, void, void, llvm::DataLayout *))(*(void *)v4 + 1912))(v4, v20, *(unsigned int *)(a2 + 32), (*(unsigned __int16 *)(a2 + 24) >> 2) & 1, v6);
    uint64_t v22 = v252;
    if (v252)
    {
      int v48 = v21;
      uint64_t v49 = 0;
      do
      {
        if (v252 - 1 == v49) {
          int v50 = 805306368;
        }
        else {
          int v50 = 0x20000000;
        }
        if (v48) {
          unsigned int v51 = v50;
        }
        else {
          unsigned int v51 = 0;
        }
        uint64_t v52 = &v251[2 * v49];
        uint64_t v53 = *v52;
        unint64_t v54 = v52[1];
        unsigned __int8 v55 = (*(uint64_t (**)(unsigned __int8 *, void, void, uint64_t, unint64_t))(*(void *)v207 + 592))(v207, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), *v52, v54);
        int v56 = (*(uint64_t (**)(unsigned __int8 *, void, void, uint64_t, unint64_t))(*(void *)v207 + 600))(v207, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), v53, v54);
        if (v56)
        {
          int v57 = v56;
          do
          {
            v239.n128_u32[2] = 0;
            v239.n128_u64[0] = v51;
            v239.n128_u8[12] = v55;
            uint64_t v240 = v53;
            unint64_t v241 = v54;
            unsigned int v58 = *(unsigned __int16 *)(a2 + 24);
            LOBYTE(v242) = (v58 & 0x20) != 0;
            unsigned int v59 = *(_DWORD *)(*(void *)(a2 + 16) + 8);
            unsigned int v60 = v51;
            if (v59 == 15)
            {
              v239.n128_u32[0] = v51 | 0x80000000;
              v239.n128_u32[2] = v59 >> 8;
              unsigned int v60 = v51 | 0x80000000;
            }
            if ((v58 & 0xB) != 0) {
              v239.n128_u32[0] = v60 | (v58 >> 1) & 4 | (__rbit32(v58) >> 30);
            }
            uint64_t v61 = (_OWORD *)sub_1CD58643C(v220, (unint64_t)&v239, 1);
            long long v62 = (_OWORD *)(*(void *)(a2 + 2192) + 48 * *(unsigned int *)(a2 + 2200));
            long long v64 = v61[1];
            long long v63 = v61[2];
            *long long v62 = *v61;
            v62[1] = v64;
            v62[2] = v63;
            ++*(_DWORD *)(a2 + 2200);
            --v57;
          }
          while (v57);
        }
        ++v49;
      }
      while (v49 != v22);
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int v201 = -100;
      uint64_t v4 = v207;
      int v6 = (llvm::DataLayout *)(v202 + 272);
    }
    else
    {
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      int v201 = -100;
    }
  }
  else
  {
    unint64_t v23 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v20) + 7) >> 3;
    BOOL v25 = v24 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v6, v20, 1);
    uint64_t v28 = ((1 << Alignment) + v23 - 1) & -(1 << Alignment);
    if (v25) {
    unsigned __int8 v29 = llvm::DataLayout::getAlignment(v6, *(llvm::Type **)(a2 + 16), 0);
    }
    int StackObject = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(*(void *)(*(void *)(a2 + 80) + 40) + 56), v28, v29, 0, 0, 0);
    unint64_t v31 = llvm::PointerType::get(*(llvm::PointerType **)(a2 + 16), (llvm::Type *)*(unsigned int *)(v202 + 276));
    uint64_t v32 = *(void *)(a2 + 80);
    unsigned __int8 v33 = (*(uint64_t (**)(unsigned __int8 *, llvm::DataLayout *, void))(*(void *)v4 + 32))(v4, v6, *(unsigned int *)(v202 + 276));
    int v201 = StackObject;
    uint64_t v34 = sub_1CD7ED208(v32, StackObject, (llvm *)v33, 0, 0);
    uint64_t v199 = v35;
    uint64_t v200 = (uint64_t)v34;
    uint64_t v244 = 0;
    v239.n128_u64[0] = 0;
    v239.n128_u64[1] = (unint64_t)v34;
    uint64_t v240 = v35;
    unint64_t v241 = v31;
    __int16 v242 = v242 & 0xC000 | 8;
    __int16 v243 = v29 | 0x100;
    sub_1CD7E80D0((char **)(a2 + 56), *(void *)(a2 + 56), &v239);
    ++*(_DWORD *)(a2 + 28);
    *(void *)(a2 + 16) = ***(void ***)(a2 + 16) + 1576;
    *(unsigned char *)(a2 + 26) = 0;
  }
  int v65 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v4 + 1768))(v4);
  uint64_t v66 = *(void *)(a2 + 56);
  if (v65)
  {
    uint64_t v67 = *(void *)(a2 + 64);
    if (v66 != v67)
    {
      do
      {
        if ((*(_WORD *)(v66 + 32) & 0x1000) != 0)
        {
          v239.n128_u64[0] = 0;
          v239.n128_u32[2] = 0;
          v239.n128_u8[12] = 1;
          LOBYTE(v240) = 0;
          unint64_t v241 = 0;
          LOBYTE(v242) = 0;
          v239.n128_u8[12] = (*(uint64_t (**)(unsigned __int8 *, llvm::DataLayout *, void))(*(void *)v4 + 32))(v4, v6, 0);
          LOBYTE(v240) = (*(uint64_t (**)(unsigned __int8 *, llvm::DataLayout *, void))(*(void *)v4 + 32))(v4, v6, 0);
          unint64_t v241 = 0;
          v239.n128_u32[0] |= 0x4000u;
          unsigned int v68 = (_OWORD *)sub_1CD58643C(v220, (unint64_t)&v239, 1);
          uint64_t v69 = (_OWORD *)(*(void *)(a2 + 2192) + 48 * *(unsigned int *)(a2 + 2200));
          long long v71 = v68[1];
          long long v70 = v68[2];
          _OWORD *v69 = *v68;
          v69[1] = v71;
          v69[2] = v70;
          ++*(_DWORD *)(a2 + 2200);
        }
        v66 += 48;
      }
      while (v66 != v67);
      uint64_t v66 = *(void *)(a2 + 56);
    }
  }
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 1672) = 0;
  uint64_t v205 = -1431655765 * ((unint64_t)(*(void *)(a2 + 64) - v66) >> 4);
  if (v205)
  {
    unint64_t v72 = 0;
    while (1)
    {
      v239.n128_u64[0] = (unint64_t)&v240;
      v239.n128_u64[1] = 0x400000000;
      llvm::ComputeValueVTs((uint64_t)v4, v6, *(void *)(*(void *)(a2 + 56) + 48 * v72 + 24), (uint64_t)&v239, 0, 0, 0);
      uint64_t v73 = *(void *)(a2 + 56) + 48 * v72;
      int v74 = (uint64_t *)(v73 + 24);
      __int16 v75 = *(_WORD *)(v73 + 32);
      uint64_t v76 = (uint64_t *)(v73 + 40);
      if ((v75 & 0x20) == 0) {
        uint64_t v76 = v74;
      }
      uint64_t v206 = *v76;
      int v216 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v4 + 1912))(v4);
      if (v239.n128_u32[2]) {
        break;
      }
LABEL_155:
      if ((uint64_t *)v239.n128_u64[0] != &v240) {
        free((void *)v239.n128_u64[0]);
      }
      if (++v72 == v205) {
        goto LABEL_158;
      }
    }
    uint64_t v77 = 0;
    uint64_t v208 = v239.n128_u32[2] - 1;
    uint64_t v209 = v239.n128_u32[2];
    unint64_t v218 = v72;
    while (1)
    {
      *(_OWORD *)__int16 v234 = *(_OWORD *)(v239.n128_u64[0] + 16 * v77);
      llvm::EVT::getTypeForEVT((llvm::EVT *)v234, **(llvm::LLVMContext ***)(a2 + 16));
      uint64_t v78 = *(void *)(a2 + 56) + 48 * v72;
      uint64_t v214 = *(void *)(v78 + 8);
      int v79 = *(_DWORD *)(v78 + 16);
      unsigned int v81 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, llvm::DataLayout *))(*(void *)v4 + 608))(v4, v80, v6);
      uint64_t v82 = *(void *)(a2 + 56);
      uint64_t v83 = v82 + 48 * v72;
      int v84 = *(_DWORD *)(*(void *)(v83 + 24) + 8);
      if (v84 == 15) {
        unsigned int v85 = ((v81 << 23) + 0x800000) & 0xF800000 | 0x80000000;
      }
      else {
        unsigned int v85 = ((v81 << 23) + 0x800000) & 0xF800000;
      }
      if (v84 == 15) {
        int v86 = *(_DWORD *)(*(void *)(v83 + 24) + 8) >> 8;
      }
      else {
        int v86 = 0;
      }
      int v217 = v86;
      unsigned int v87 = *(unsigned __int16 *)(v83 + 32);
      uint64_t v88 = v85 & 0xFFFFFFFC | (v87 >> 1) & 1 | (2 * (v87 & 1));
      if ((v87 & 4) != 0)
      {
        if (*(_DWORD *)(a2 + 32) == 80)
        {
          uint64_t v89 = v88 | 0x20000;
          if (v77) {
            uint64_t v89 = v88;
          }
          uint64_t v90 = v89 | 0x10000;
          if (*(unsigned char *)(v206 + 8) == 16) {
            uint64_t v88 = v90;
          }
        }
        v88 |= 4uLL;
      }
      uint64_t v91 = v88 | v87 & 8 | (((v87 >> 10) & 0xF) << 12) | (v87 >> 1) & 0x30;
      if ((v87 & 0x100) != 0) {
        uint64_t v91 = v91 & 0xFFFFFBEF | 0x410;
      }
      if ((v87 & 0x80) != 0) {
        uint64_t v92 = v91 | 0x210;
      }
      else {
        uint64_t v92 = v91;
      }
      if ((v87 & 0x1A0) != 0)
      {
        int v94 = *(llvm::Type **)(v82 + 48 * v72 + 40);
        uint64_t v95 = sub_1CB83544C((uint64_t)v6, (uint64_t)v94);
        BOOL v97 = v96 == 1;
        char v99 = llvm::DataLayout::getAlignment(v6, v94, 1);
        if (v97) {
        v92 |= (((1 << v99) + 0xFFFFFFFFLL + ((unint64_t)(v95 + 7) >> 3)) & -(1 << v99)) << 32;
        }
        uint64_t v82 = *(void *)(a2 + 56);
        unsigned int v93 = *(unsigned __int16 *)(v82 + 48 * v72 + 34);
        if (v93 <= 0xFF)
        {
          unsigned int v93 = 63
              - __clz((*(uint64_t (**)(unsigned __int8 *, void, llvm::DataLayout *))(*(void *)v4 + 576))(v4, *(void *)(v82 + 48 * v72 + 40), v6));
          uint64_t v82 = *(void *)(a2 + 56);
        }
      }
      else
      {
        unsigned int v93 = *(unsigned __int16 *)(v82 + 48 * v72 + 34);
        if (v93 < 0x100) {
          unsigned int v93 = v81;
        }
      }
      uint64_t v100 = (v79 + v77);
      unint64_t v101 = v92 & 0xFFFFFFFF00000000;
      unint64_t v102 = v92 & 0xFFFFFFFFFF87FFFFLL | ((((unint64_t)((v93 << 19) + 0x80000) >> 19) & 0xF) << 19);
      if ((*(_WORD *)(v82 + 48 * v72 + 32) & 0x10) != 0) {
        uint64_t v103 = v101 | v102 & 0xFFFFFFBF | 0x40;
      }
      else {
        uint64_t v103 = v102;
      }
      if (v216) {
        v103 |= 0x20000000uLL;
      }
      unint64_t v221 = v103;
      unsigned __int8 v227 = (*(uint64_t (**)(unsigned __int8 *, void, void, void *, void *))(*(void *)v4 + 592))(v4, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), v234[0], v234[1]);
      unint64_t v104 = (*(unsigned int (**)(unsigned __int8 *, void, void, void *, void *))(*(void *)v4 + 600))(v4, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), v234[0], v234[1]);
      uint64_t v236 = v238;
      uint64_t v237 = 0x400000000;
      sub_1CD3E535C((uint64_t *)&v236, v104, 0, 0);
      __int16 v105 = *(_WORD *)(*(void *)(a2 + 56) + 48 * v72 + 32);
      if ((v105 & 2) != 0) {
        int v106 = 199;
      }
      else {
        int v106 = 200;
      }
      if (v105) {
        unsigned int v107 = 198;
      }
      else {
        unsigned int v107 = v106;
      }
      if ((*(_WORD *)(*(void *)(a2 + 56) + 48 * v72 + 32) & 0x200) == 0)
      {
        uint64_t v108 = v214;
        goto LABEL_133;
      }
      uint64_t v108 = v214;
      uint64_t v109 = *(void *)(v214 + 40) + 16 * v100;
      char v110 = *(unsigned char *)v109;
      if (*(unsigned char *)v109)
      {
        char v111 = v204;
        if ((v110 + 85) >= 0x64u) {
          char v111 = 0;
        }
        if (v111) {
          goto LABEL_125;
        }
      }
      else
      {
        BOOL v145 = (*(_DWORD *)(*(void *)(v109 + 8) + 8) & 0xFE) == 18;
        char v112 = v204 ^ 1;
        if (v145) {
          char v112 = 1;
        }
        if ((v112 & 1) == 0)
        {
LABEL_125:
          uint64_t v113 = sub_1CB87E200(&v227);
          int v115 = v114;
          if (LOBYTE(v234[0])) {
            uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v234);
          }
          else {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v234);
          }
          if (v113 * v104 == ExtendedSizeInBits && v115 == v117
            || (v105 & 3) != 0 && ((*(_WORD *)(*(void *)(a2 + 56) + 48 * v218 + 32) ^ *(_WORD *)(a2 + 24)) & 3) == 0)
          {
            v221 |= 0x80uLL;
          }
        }
      }
LABEL_133:
      unint64_t v211 = v211 & 0xFFFFFFFF00000000 | v100;
      sub_1CCFA6E8C(*(void *)(a2 + 80), (const llvm::APInt *)(a2 + 88), v108, v211, (unint64_t)v236, v104, v227, *(unsigned __int8 **)(a2 + 104), *(unsigned int *)(a2 + 32) | 0x100000000, v107);
      if (v104)
      {
        int v118 = 0;
        uint64_t v119 = 0;
        while (1)
        {
          unsigned int v120 = (uint64_t *)(*(void *)(*(void *)((char *)v236 + v119) + 40)
                           + 16 * *(unsigned int *)((char *)v236 + v119 + 8));
          uint64_t v121 = v234[0];
          unint64_t v122 = v234[1];
          BOOL v123 = v218 < *(unsigned int *)(a2 + 28);
          uint64_t v125 = *v120;
          uint64_t v124 = v120[1];
          *(void *)&v223[0] = v125;
          *((void *)&v223[0] + 1) = v124;
          int v126 = sub_1CB896FB8((unsigned __int8 *)v223);
          int v228 = (void *)v221;
          LODWORD(v229) = v217;
          BOOL v231 = v123;
          int v232 = v218;
          int v233 = v126 * v118;
          BYTE4(v229) = v125;
          v230[0] = v121;
          v230[1] = v122;
          if (v104 != 1 && !v119) {
            break;
          }
          if (v119)
          {
            if (16 * (v104 - 1) == v119) {
              int v128 = 8390656;
            }
            else {
              int v128 = 0x800000;
            }
            unsigned int v127 = v128 | v221 & 0xF07FFFFF;
            goto LABEL_143;
          }
LABEL_144:
          uint64_t v129 = (_OWORD *)sub_1CD58643C(a2 + 112, (unint64_t)&v228, 1);
          uint64_t v130 = (_OWORD *)(*(void *)(a2 + 112) + 48 * *(unsigned int *)(a2 + 120));
          long long v132 = v129[1];
          long long v131 = v129[2];
          *uint64_t v130 = *v129;
          v130[1] = v132;
          v130[2] = v131;
          ++*(_DWORD *)(a2 + 120);
          unint64_t v133 = *(unsigned int *)(a2 + 1672);
          if (v133 >= *(unsigned int *)(a2 + 1676)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)(*(void *)(a2 + 1664) + 16 * v133) = *(_OWORD *)((char *)v236 + v119);
          ++*(_DWORD *)(a2 + 1672);
          v119 += 16;
          ++v118;
          if (16 * v104 == v119) {
            goto LABEL_148;
          }
        }
        unsigned int v127 = v221 | 0x100;
LABEL_143:
        LODWORD(v228) = v127;
        goto LABEL_144;
      }
LABEL_148:
      char v134 = v216;
      if (v77 != v208) {
        char v134 = 0;
      }
      if (v134)
      {
        uint64_t v135 = *(void *)(a2 + 112) + 48 * *(unsigned int *)(a2 + 120);
        *(_DWORD *)(v135 - 48) |= 0x10000000u;
      }
      uint64_t v4 = v207;
      int v6 = (llvm::DataLayout *)(v202 + 272);
      unint64_t v72 = v218;
      if (v236 != v238) {
        free(v236);
      }
      if (++v77 == v209) {
        goto LABEL_155;
      }
    }
  }
LABEL_158:
  v239.n128_u64[0] = (unint64_t)&v240;
  v239.n128_u64[1] = 0x400000000;
  *(void *)a2 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, __n128 *))(*(void *)v4 + 1840))(v4, a2, &v239);
  *(_DWORD *)(a2 + 8) = v136;
  sub_1CD629BB0(a2 + 3744, (uint64_t)&v239);
  if (*(unsigned char *)(a2 + 26))
  {
    uint64_t v137 = *(void *)(a2 + 80);
    uint64_t v138 = *(void *)(a2 + 8);
    *(void *)(v137 + 192) = *(void *)a2;
    *(_DWORD *)(v137 + 200) = v138;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_176;
  }
  unint64_t v139 = (unint64_t)v238;
  uint64_t v236 = v238;
  uint64_t v237 = 0x400000000;
  if (v204)
  {
    if (!v252) {
      goto LABEL_173;
    }
    unint64_t v140 = 0;
    unsigned int v141 = 0;
    char v142 = *(_WORD *)(a2 + 24);
    int v143 = v142 & 2;
    unint64_t v144 = (unint64_t)(v142 & 2) << 31;
    BOOL v145 = (v142 & 1) == 0;
    uint64_t v146 = 0x100000000;
    if (v145) {
      uint64_t v146 = v144;
    }
    LODWORD(v147) = 2 * v143;
    uint64_t v147 = v145 ? v147 : 3;
    uint64_t v148 = v146 | v147;
    uint64_t v149 = 16 * v252;
    do
    {
      uint64_t v150 = (llvm *)v251[v140 / 8];
      uint64_t v151 = v251[v140 / 8 + 1];
      unsigned __int8 v152 = (*(uint64_t (**)(unsigned __int8 *, void, void, llvm *, uint64_t))(*(void *)v207 + 592))(v207, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), v150, v151);
      uint64_t v153 = (*(uint64_t (**)(unsigned __int8 *, void, void, llvm *, uint64_t))(*(void *)v207 + 600))(v207, **(void **)(a2 + 16), *(unsigned int *)(a2 + 32), v150, v151);
      int v154 = v153;
      uint64_t v156 = sub_1CCFA51B8(*(void *)(a2 + 80), (const llvm::APInt *)(a2 + 88), (long long *)(v239.n128_u64[0] + 16 * v141), v153, v152, v150, v151, 0, *(unsigned int *)(a2 + 32) | 0x100000000, v148);
      if (v237 >= (unint64_t)HIDWORD(v237)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v157 = (uint64_t **)((char *)v236 + 16 * v237);
      *int v157 = v156;
      v157[1] = v155;
      int v158 = v237 + 1;
      LODWORD(v237) = v237 + 1;
      v141 += v154;
      v140 += 16;
    }
    while (v149 != v140);
    if (!v158)
    {
LABEL_173:
      uint64_t v159 = a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      goto LABEL_174;
    }
  }
  else
  {
    v234[0] = v235;
    v234[1] = (void *)0x100000000;
    unint64_t v160 = llvm::PointerType::get(v198, (llvm::Type *)*(unsigned int *)(v202 + 276));
    llvm::ComputeValueVTs((uint64_t)v4, v6, v160, (uint64_t)v234, 0, 0, 0);
    uint64_t v213 = *((void *)v234[0] + 1);
    uint64_t v215 = *(llvm **)v234[0];
    unint64_t v161 = v252;
    sub_1CD7E8FD4((uint64_t)&v236, v252);
    int v228 = v230;
    uint64_t v229 = 0x400000000;
    sub_1CD3E535C((uint64_t *)&v228, v161, 0, 0);
    if (v161)
    {
      uint64_t v165 = 0;
      uint64_t v166 = 0;
      uint64_t v167 = *(void *)(*(void *)(*(void *)(a2 + 80) + 40) + 56);
      uint64_t v212 = *(unsigned __int8 *)(*(void *)(v167 + 8) + 40 * (*(_DWORD *)(v167 + 32) + v201) + 16);
      int v168 = (const llvm::APInt *)(a2 + 88);
      uint64_t v210 = 8 * v161;
      do
      {
        uint64_t v169 = *(void *)(a2 + 80);
        unint64_t v170 = sub_1CD7EBF14(v169, *(void *)&v248[v166], v168, v215, v213, 0, 0);
        int v173 = sub_1CCFDED5C(v169, 56, v168, v215, v213, v200, v199, v172, (uint64_t)v170, v171, 3);
        uint64_t v219 = v174;
        uint64_t v222 = (uint64_t)v173;
        uint64_t v175 = *(void *)(a2 + 80);
        uint64_t v177 = v251[v165];
        uint64_t v176 = v251[v165 + 1];
        uint64_t v178 = *(void *)a2;
        uint64_t v179 = *(void *)(a2 + 8);
        uint64_t v180 = *(void *)&v248[v166];
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v175 + 40) + 432), v201);
        *(void *)&long long v224 = (unint64_t)FixedStack | 4;
        *((void *)&v224 + 1) = v180;
        char v226 = 0;
        if (FixedStack) {
          int v182 = *((_DWORD *)FixedStack + 3);
        }
        else {
          int v182 = 0;
        }
        int v225 = v182;
        unint64_t v139 = v139 & 0xFFFFFFFFFFFF0000 | v212 | 0x100;
        memset(v223, 0, sizeof(v223));
        uint64_t v183 = v175;
        int v168 = (const llvm::APInt *)(a2 + 88);
        int v184 = sub_1CD7F00F8(v183, v177, v176, a2 + 88, v178, v179, v222, v219, &v224, v139, SHIDWORD(v139), 0, v223, 0);
        uint64_t v185 = (char *)v236 + v165 * 8;
        *(void *)uint64_t v185 = v184;
        *((_DWORD *)v185 + 2) = v186;
        uint64_t v187 = (char *)v228 + v165 * 8;
        *(void *)uint64_t v187 = v184;
        *((_DWORD *)v187 + 2) = 1;
        v166 += 8;
        v165 += 2;
      }
      while (v210 != v166);
    }
    uint64_t v162 = *(void **)(a2 + 80);
    uint64_t v163 = v162[104];
    if (v163) {
      uint64_t v164 = *(unsigned __int16 *)(v163 + 8);
    }
    else {
      uint64_t v164 = 0;
    }
    *(void *)a2 = sub_1CD7FF4E8(v162, (const char *)2, (const llvm::APInt *)(a2 + 88), (llvm *)1, 0, (uint64_t *)v228, v229, v164);
    *(_DWORD *)(a2 + 8) = v188;
    if (v228 != v230) {
      free(v228);
    }
    if (v234[0] != v235) {
      free(v234[0]);
    }
  }
  int v189 = *(void **)(a2 + 80);
  uint64_t v191 = sub_1CD7F9A18((uint64_t)v189, v251, v252);
  uint64_t v192 = v189[104];
  if (v192) {
    __int16 v193 = *(_WORD *)(v192 + 8);
  }
  else {
    __int16 v193 = 0;
  }
  unint64_t v194 = sub_1CD7FF854(v189, (const char *)0x37, (const llvm::APInt *)(a2 + 88), v191, v190, (uint64_t *)v236, v237, v193);
  uint64_t v159 = a3;
  *(void *)a3 = v194;
  *(void *)(a3 + 8) = v195;
LABEL_174:
  *(_OWORD *)(v159 + 16) = *(_OWORD *)a2;
  if (v236 != v238) {
    free(v236);
  }
LABEL_176:
  if ((uint64_t *)v239.n128_u64[0] != &v240) {
    free((void *)v239.n128_u64[0]);
  }
  if (v245 != v247) {
    free(v245);
  }
  if (v248 != v250) {
    free(v248);
  }
  if (v251 != v253) {
    free(v251);
  }
}

uint64_t sub_1CCFB1990(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 32))(v6, *(void *)(**(void **)(a1 + 40) + 40) + 272, 0);
  uint64_t v23 = 0;
  uint64_t v7 = (*(unsigned __int8 (**)(uint64_t, uint64_t, void))(*(void *)v6 + 40))(v6, *(void *)(**(void **)(a1 + 40) + 40) + 272, 0);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 776))(v6, *(void *)(*(void *)v8 + 40));
  unsigned __int8 v10 = v22;
  uint64_t v11 = sub_1CD80121C(a1, 28, a2, v22, 0, *a3, a3[1]);
  if (v9)
  {
    unsigned int v14 = *(_DWORD *)(*(void *)v9 + 8);
    if ((v14 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(**(void **)(*(void *)v9 + 16) + 8);
    }
    v19[0] = v9 & 0xFFFFFFFFFFFFFFFBLL;
    v19[1] = 0;
    unsigned int v20 = v14 >> 8;
    char v21 = 0;
    if ((_BYTE)v22) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v22);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v22);
    }
    unint64_t v17 = ExtendedSizeInBits;
    if (v16 == 1) {
    char v18 = sub_1CD7EA9CC(a1, (uint64_t)v22, v23);
    }
    memset(v24, 0, sizeof(v24));
    *(void *)&v24[0] = llvm::MachineFunction::getMachineMemOperand(v8, (uint64_t)v19, 49, v17 >> 3, v18, v24, 0, 1, 0, 0, 0);
    sub_1CD8005B8((uint64_t *)a1, (uint64_t)v11, v24, 1);
    unsigned __int8 v10 = v22;
  }
  if (v7 != v10) {
    return sub_1CD7EB80C(a1, (uint64_t)v11, 0, a2, v7, 0);
  }
  if (!v7 && v23 != 0) {
    return sub_1CD7EB80C(a1, (uint64_t)v11, 0, a2, v7, 0);
  }
  return (uint64_t)v11;
}

void sub_1CCFB1C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v636 = v6;
  uint64_t v8 = v7;
  uint64_t v706 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(char **)(v7 - 32);
  unint64_t v699 = v701;
  uint64_t v700 = 0x1000000000;
  uint64_t v662 = v5;
  uint64_t v10 = *(void *)(v5 + 832);
  uint64_t v11 = *(char **)(v10 + 24);
  uint64_t v12 = *(void ***)(v10 + 40);
  uint64_t v13 = (*v12)[5] + 272;
  uint64_t v14 = (*(uint64_t (**)(void *))(*v12[2] + 176))(v12[2]);
  (*(void (**)(char **__return_ptr, char *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 2008))(&v674, v11, v13, v14, v8);
  uint64_t v637 = v9;
  BOOL v15 = v9[80] != 0;
  uint64_t v16 = *(void *)(v8 - 32);
  if (*(unsigned char *)(v16 + 81)) {
    int v17 = *(unsigned __int8 *)(v16 + 80) | 2;
  }
  else {
    int v17 = *(unsigned __int8 *)(v16 + 80);
  }
  uint64_t v652 = v8;
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v638 = (llvm::AttributeList *)(v8 + 64);
  if (v18 && (*(unsigned char *)(v18 + 12) & 0x40) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v8, 6)) {
    v17 |= 0x20u;
  }
  unsigned int v648 = v17 | (4 * *(_DWORD *)(v16 + 84));
  char v19 = v674;
  unint64_t v656 = v675;
  if (v674 != v675)
  {
    unsigned int v661 = 0;
    unsigned int v22 = 0;
    do
    {
      uint64_t v23 = (uint64_t *)v688;
      sub_1CD616D7C((uint64_t)v688, (uint64_t)v19);
      uint64_t v691 = 0;
      int v692 = 0;
      v693[0] = v694;
      v693[1] = 0x400000000;
      v694[8] = v696;
      long long v695 = xmmword_1CDB159A0;
      v696[1] = v697;
      v696[2] = 0x400000000;
      v697[2] = v698;
      v697[3] = 0x400000000;
      v698[16] = 0;
      v698[20] = 0;
      int v24 = v700;
      uint64_t v25 = (char *)v699;
      if (v700 >= HIDWORD(v700))
      {
        unint64_t v66 = v700 + 1;
        BOOL v68 = v699 <= v688 && (char *)v699 + 328 * v700 > (char *)v688;
        if (v68) {
          unint64_t v69 = 0x8F9C18F9C18F9C19 * (((char *)v688 - (unsigned char *)v699) >> 3);
        }
        else {
          unint64_t v69 = -1;
        }
        if (v700 == -1) {
          sub_1CD0A88F0(v66);
        }
        if (HIDWORD(v700) == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v70 = (2 * HIDWORD(v700)) | 1;
        if (v70 <= v66) {
          unint64_t v70 = v700 + 1;
        }
        if (v70 >= 0xFFFFFFFF) {
          uint64_t v71 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v71 = v70;
        }
        unint64_t v72 = (char *)malloc_type_malloc(328 * v71, 0x4065EBACuLL);
        if (!v72) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v25 = v72;
        uint64_t v73 = v699;
        if (v700)
        {
          int v628 = v71;
          unint64_t v632 = v69;
          uint64_t v74 = (uint64_t)(v72 + 144);
          uint64_t v75 = 328 * v700;
          uint64_t v76 = (uint64_t *)((char *)v699 + 144);
          do
          {
            sub_1CD616DE4(v74 - 144, v76 - 18);
            *(_OWORD *)(v74 - 16) = *((_OWORD *)v76 - 1);
            sub_1CD7E94EC(v74, (uint64_t)v76);
            v74 += 328;
            v76 += 41;
            v75 -= 328;
          }
          while (v75);
          uint64_t v73 = v699;
          LODWORD(v71) = v628;
          unint64_t v69 = v632;
          if (v700)
          {
            uint64_t v77 = 328 * v700;
            do
            {
              sub_1CD7E86AC((uint64_t)&v73[v77 - 184]);
              sub_1CD50E94C((uint64_t)&v73[v77 - 328]);
              v77 -= 328;
            }
            while (v77);
            uint64_t v73 = v699;
            LODWORD(v71) = v628;
            unint64_t v69 = v632;
          }
        }
        if (v73 != v701) {
          free(v73);
        }
        unint64_t v699 = v25;
        HIDWORD(v700) = v71;
        uint64_t v78 = &v25[328 * v69];
        if (v68) {
          uint64_t v23 = (uint64_t *)&v25[328 * v69];
        }
        else {
          uint64_t v23 = (uint64_t *)v688;
        }
        if (v68) {
          uint64_t v27 = v78 + 144;
        }
        else {
          uint64_t v27 = v693;
        }
        int v79 = (uint64_t *)(v78 + 128);
        if (v68) {
          uint64_t v26 = v79;
        }
        else {
          uint64_t v26 = &v691;
        }
        int v24 = v700;
      }
      else
      {
        uint64_t v26 = &v691;
        uint64_t v27 = v693;
      }
      unint64_t IncompleteVirtualRegister = 328;
      sub_1CD616DE4((uint64_t)&v25[328 * v24], v23);
      *(_OWORD *)(v28 + 128) = *(_OWORD *)v26;
      sub_1CD7E94EC(v28 + 144, (uint64_t)v27);
      LODWORD(v700) = v700 + 1;
      sub_1CD7E86AC((uint64_t)v693);
      sub_1CD50E94C((uint64_t)v688);
      unsigned __int8 v29 = (char *)v699 + 328 * v700;
      int v30 = *((_DWORD *)v29 - 82);
      if (v30)
      {
        if (v30 != 1)
        {
          *(v29 - 208) = 1;
          if (v15) {
            goto LABEL_60;
          }
          goto LABEL_45;
        }
        if (!*(v29 - 315))
        {
          uint64_t v31 = *(void *)v652;
          uint64_t v32 = *(void *)(**(void **)(*(void *)(v662 + 832) + 40) + 40) + 272;
          if (*(void *)v652 && *(unsigned char *)(v31 + 8) == 16) {
            char v33 = sub_1CB87DC14((uint64_t)v11, v32, *(llvm::EVT **)(*(void *)(v31 + 16) + 8 * v22), 0);
          }
          else {
            char v33 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v11 + 568))(v11, v32);
          }
          *(v29 - 208) = v33;
          ++v22;
          if (v15) {
            goto LABEL_60;
          }
          goto LABEL_45;
        }
      }
      uint64_t v34 = *(unsigned __int8 **)(v652 - 32 * (*(_DWORD *)(v652 + 20) & 0x7FFFFFF) + 32 * v661);
      *((void *)v29 - 27) = v34;
      *((void *)v29 - 25) = sub_1CD7DE5B4(v662, v34);
      *((_DWORD *)v29 - 48) = v35;
      uint64_t ParamElementType = llvm::AttributeList::getParamElementType(v638, v661);
      uint64_t v37 = *((void *)v29 - 27);
      if (!v37)
      {
        char v38 = 1;
        goto LABEL_39;
      }
      uint64_t v39 = *(void *)(v662 + 832);
      uint64_t v40 = *(void *)(**(void **)(v39 + 40) + 40);
      uint64_t v41 = v40 + 272;
      if (*(unsigned char *)(v37 + 16) == 22)
      {
        char v38 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 32))(v11, v40 + 272, *(unsigned int *)(v40 + 284));
        goto LABEL_39;
      }
      uint64_t v42 = *(void *)v37;
      if (*(v29 - 315)) {
        uint64_t v43 = ParamElementType;
      }
      else {
        uint64_t v43 = v42;
      }
      int v44 = *(_DWORD *)(v43 + 8);
      BOOL v45 = v44 != 16 || v43 == 0;
      if (!v45 && *(_DWORD *)(v43 + 12) == 1)
      {
        uint64_t v43 = **(void **)(v43 + 16);
        int v44 = *(_DWORD *)(v43 + 8);
      }
      if ((v44 & 0xFE) != 0x12)
      {
        unint64_t IncompleteVirtualRegister = *(void *)(v39 + 56);
        if (v44 <= 0x15u)
        {
          if (((1 << v44) & 0x20AC7F) != 0) {
            goto LABEL_38;
          }
          if (((1 << v44) & 0x30000) != 0) {
            goto LABEL_81;
          }
        }
        if (v44 == 21)
        {
LABEL_81:
          if (llvm::Type::isSizedDerivedType(v43, 0))
          {
            int v65 = (llvm::LLVMContext *)sub_1CB83544C(v41, v43);
            if (v64 == 1)
            {
              uint64_t v633 = v65;
              int v65 = v633;
            }
            if ((v65 - 1) <= 0x3F
              && ((1 << (v65 - 1)) & 0x8000000080008081) != 0
              || v65 == 128)
            {
              uint64_t v43 = llvm::IntegerType::get((llvm::IntegerType *)IncompleteVirtualRegister, v65);
            }
          }
        }
      }
LABEL_38:
      char v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 568))(v11, v41, v43, 1);
LABEL_39:
      char v46 = v38;
      if ((v38 & 0xFE) == 0) {
        char v46 = 1;
      }
      *(v29 - 208) = v46;
      ++v661;
      if (v15) {
        goto LABEL_60;
      }
LABEL_45:
      if (!*(v29 - 315))
      {
        unsigned int v47 = (uint64_t *)*((void *)v29 - 39);
        int v48 = (uint64_t *)*((void *)v29 - 38);
        if (v47 == v48)
        {
          BOOL v15 = 0;
        }
        else
        {
          do
          {
            char v49 = *((unsigned char *)v47 + 23);
            BOOL v50 = v49 < 0;
            if (v49 >= 0) {
              unsigned int v51 = v47;
            }
            else {
              unsigned int v51 = (uint64_t *)*v47;
            }
            uint64_t v52 = v49 & 0x7F;
            if (v50) {
              uint64_t v53 = v47[1];
            }
            else {
              uint64_t v53 = v52;
            }
            int v54 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(*(void *)v11 + 2040))(v11, v51, v53);
            BOOL v15 = v54 == 2;
            v47 += 3;
          }
          while (v54 != 2 && v47 != v48);
        }
        goto LABEL_61;
      }
LABEL_60:
      BOOL v15 = 1;
LABEL_61:
      (*(void (**)(char *, char *, void, void, void))(*(void *)v11 + 2032))(v11, v19, 0, 0, 0);
      int v56 = *((_DWORD *)v19 + 26);
      if (v56 == 2 || v56 == 5)
      {
        int v58 = *(_DWORD *)v19;
        int v59 = v648 | 0x10;
        int v60 = v648 | 8;
        if (*(_DWORD *)v19) {
          int v60 = v648;
        }
        if (v58 != 1) {
          int v59 = v60;
        }
        if (v58 == 2) {
          int v61 = v648 | 0x18;
        }
        else {
          int v61 = v59;
        }
        unsigned int v648 = v61;
      }
      else if (v56 == 4)
      {
        uint64_t v62 = *((void *)v29 - 25);
        if (v62)
        {
          int v63 = *(unsigned __int16 *)(v62 + 24);
          if (v63 != 11 && v63 != 35)
          {
            __int16 v702 = "constraint '";
            v704[0] = v19 + 80;
            LOWORD(v705) = 1027;
            v688[0] = &v702;
            *(void *)&long long v689 = "' expects an integer constant expression";
            __int16 v690 = 770;
            sub_1CD7E7D58((uint64_t *)v662, (const llvm::Instruction *)v652, (const llvm::Twine *)v688);
            goto LABEL_927;
          }
        }
      }
      v19 += 128;
    }
    while (v19 != v656);
  }
  *(void *)&long long v673 = 0;
  DWORD2(v673) = 0;
  uint64_t v20 = v662;
  if (v15)
  {
    *(void *)&long long v672 = sub_1CD7D7360(v662);
    *((void *)&v672 + 1) = v21;
  }
  else
  {
    long long v672 = *(_OWORD *)(*(void *)(v662 + 832) + 192);
  }
  int v80 = *(unsigned __int8 *)(v652 + 16);
  BOOL v81 = v80 == 33 && v637[88] != 0;
  int v647 = *(unsigned __int8 *)(v652 + 16);
  if (v80 == 39 || v81)
  {
    sub_1CD3D61B4((unsigned int *)(v662 + 384), *(unsigned char **)(v662 + 672), (unsigned char *)(*(void *)(v662 + 672) + 16 * *(unsigned int *)(v662 + 680)));
    *(_DWORD *)(v662 + 680) = 0;
    *(void *)&long long v672 = sub_1CD7D7210((uint64_t *)v662, v662 + 384);
    DWORD2(v672) = v82;
  }
  char v643 = v15;
  __int16 v671 = 0;
  BOOL v644 = v81;
  if (v81)
  {
    *(void *)&long long v672 = sub_1CD7E6B58((uint64_t *)v662, v672, SDWORD2(v672), v636, (uint64_t *)&v671);
    DWORD2(v672) = v83;
  }
  if (v700)
  {
    uint64_t v96 = 0;
    BOOL v97 = v699;
    unint64_t IncompleteVirtualRegister = 328 * v700;
    do
    {
      uint64_t v98 = &v97[v96];
      int v99 = *(_DWORD *)&v97[v96 + 8];
      if (v99 != -1)
      {
        uint64_t v100 = (char *)v699 + 328 * v99;
        if (v98[120] != v100[120])
        {
          uint64_t v101 = *(void *)(v20 + 832);
          uint64_t v102 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v101 + 40) + 16) + 176))(*(void *)(*(void *)(v101 + 40) + 16));
          uint64_t v103 = *(void *)(v101 + 24);
          char v104 = v97[v96 + 103];
          if (v104 >= 0) {
            uint64_t v105 = (uint64_t)&v97[v96 + 80];
          }
          else {
            uint64_t v105 = *(void *)&v97[v96 + 80];
          }
          if (v104 >= 0) {
            uint64_t v106 = v104 & 0x7F;
          }
          else {
            uint64_t v106 = *(void *)&v97[v96 + 88];
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v103 + 2048))(v103, v102, v105, v106, v98[120]);
          uint64_t v108 = v107;
          char v109 = v100[103];
          int v110 = v109;
          if (v109 >= 0) {
            char v111 = v100 + 80;
          }
          else {
            char v111 = (char *)*((void *)v100 + 10);
          }
          uint64_t v112 = v109 & 0x7F;
          if (v110 >= 0) {
            uint64_t v113 = v112;
          }
          else {
            uint64_t v113 = *((void *)v100 + 11);
          }
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, void))(*(void *)v103 + 2048))(v103, v102, v111, v113, v100[120]);
          int v115 = v98[120];
          BOOL v116 = (v115 - 15) < 0x3C || (v115 - 120) < 0x20;
          int v117 = (v115 - 2) < 6 || v116;
          int v118 = v100[120];
          unsigned int v119 = v118 - 2;
          unsigned int v120 = v118 - 15;
          int v121 = (v118 - 120) < 0x20;
          if (v120 < 0x3C) {
            int v121 = 1;
          }
          if (v119 < 6) {
            int v121 = 1;
          }
          if (v117 != v121 || v108 != v114) {
            llvm::report_fatal_error((llvm *)"Unsupported asm: input constraint with a matching output constraint of incompatible type!", (const llvm::Twine *)1);
          }
          v100[120] = v115;
          uint64_t v20 = v662;
        }
      }
      (*(void (**)(char *, unsigned char *, void, void, void))(*(void *)v11 + 2032))(v11, &v97[v96], *((void *)v98 + 16), *((void *)v98 + 17), *(void *)(v20 + 832));
      if (*((_DWORD *)v98 + 26) != 2 || *(_DWORD *)v98 == 2 || v97[v96 + 13]) {
        goto LABEL_187;
      }
      int v653 = DWORD2(v672);
      uint64_t v657 = (char *)v672;
      uint64_t v122 = *(void *)v20;
      int v123 = *(_DWORD *)(v20 + 816);
      uint64_t v683 = 0;
      LODWORD(v684) = v123;
      if (v122)
      {
        uint64_t v124 = (void **)(v122 + 48);
        if (v124 != &v683)
        {
          uint64_t v125 = *v124;
          uint64_t v683 = v125;
          if (v125) {
            llvm::MetadataTracking::track((uint64_t)&v683, (unsigned __int8 *)v125, 2);
          }
        }
      }
      uint64_t v126 = *(void *)(v20 + 832);
      uint64_t v127 = *(void *)(v126 + 24);
      uint64_t v128 = *(void *)&v97[v96 + 112];
      int v129 = *(unsigned __int8 *)(v128 + 16);
      if ((v129 - 15) < 3 || v129 == 10)
      {
        unsigned __int8 v131 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v127 + 32))(v127, *(void *)(**(void **)(v126 + 40) + 40) + 272, 0);
        long long v132 = sub_1CD7ED6C4(v126, (llvm::Type **)v128, (llvm *)v131, 0, 0, 0, 0, 0);
        unsigned int v134 = v133;
        int v136 = v653;
        uint64_t v135 = (uint64_t *)v657;
      }
      else
      {
        __int16 v645 = *(llvm::EVT **)v128;
        uint64_t v634 = *(void *)(**(void **)(v126 + 40) + 40);
        uint64_t v639 = (llvm::AttributeList *)sub_1CB83544C(v634 + 272, *(void *)v128);
        int v642 = (llvm::DataLayout *)(v634 + 272);
        BOOL v629 = v140 == 1;
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v634 + 272), v645, 1);
        char v143 = Alignment;
        if (v629) {
        uint64_t v625 = *(void *)(v126 + 40);
        }
        int v630 = *(unsigned __int8 **)(v625 + 56);
        unsigned __int8 v144 = llvm::DataLayout::getAlignment(v642, v645, 0);
        int StackObject = llvm::MachineFrameInfo::CreateStackObject(v630, ((1 << v143) + (((unint64_t)v639 + 7) >> 3) - 1) & -(1 << v143), v144, 0, 0, 0);
        unsigned __int8 v145 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *, void))(*(void *)v127 + 32))(v127, v642, *(unsigned int *)(v634 + 276));
        long long v132 = sub_1CD7ED208(v126, StackObject, (llvm *)v145, 0, 0);
        uint64_t v631 = *((void *)v98 + 16);
        unsigned int v635 = v146;
        uint64_t v627 = *((void *)v98 + 17);
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v625 + 432), StackObject);
        if (FixedStack) {
          int v641 = *((_DWORD *)FixedStack + 3);
        }
        else {
          int v641 = 0;
        }
        int v626 = (char *)((unint64_t)FixedStack | 4);
        unsigned int v646 = (llvm::EVT *)sub_1CC235C30(v127, (uint64_t)v642, v645, 0);
        uint64_t v149 = v148;
        *(_OWORD *)__int16 v688 = 0u;
        long long v689 = 0u;
        __int16 v702 = v626;
        uint64_t v703 = 0;
        LODWORD(v704[0]) = v641;
        BYTE4(v704[0]) = 0;
        uint64_t v624 = sub_1CD7EA9CC(v126, (uint64_t)v646, v148);
        uint64_t v150 = v126;
        unsigned int v134 = v635;
        uint64_t v135 = sub_1CD7FB71C(v150, (uint64_t)v657, v653, (uint64_t)&v683, v631, v627, (uint64_t)v132, v635, (uint64_t)&v702, (uint64_t)v646, v149, v624, SHIDWORD(v624), 0, (long long *)v688);
        int v136 = v151;
      }
      *((void *)v98 + 16) = v132;
      *((_DWORD *)v98 + 34) = v134;
      *(void *)&long long v672 = v135;
      DWORD2(v672) = v136;
      uint64_t v20 = v662;
      if (v683)
      {
        int v137 = *(unsigned __int8 *)v683;
        if ((v137 - 4) > 0x1E)
        {
          if ((v137 - 3) >= 0xFFFFFFFE) {
            uint64_t v138 = v683;
          }
          else {
            uint64_t v138 = 0;
          }
          if ((v137 - 3) < 0xFFFFFFFE)
          {
            if (v137 == 3) {
              *((void *)v683 + 1) = 0;
            }
            goto LABEL_186;
          }
          unint64_t v139 = (unint64_t)v138 + 8;
        }
        else
        {
          if ((*((unsigned char *)v683 + 1) & 0x7F) != 2 && !*((_DWORD *)v683 + 3)) {
            goto LABEL_186;
          }
          uint64_t v152 = *((void *)v683 + 2);
          if ((v152 & 4) == 0) {
            goto LABEL_186;
          }
          unint64_t v139 = v152 & 0xFFFFFFFFFFFFFFF8;
          if (!v139) {
            goto LABEL_186;
          }
        }
        v688[0] = &v683;
        sub_1CC5FA668(v139 + 16, v688);
      }
LABEL_186:
      *(void *)&v97[v96 + 112] = 0;
      v97[v96 + 13] = 1;
LABEL_187:
      v96 += 328;
    }
    while (IncompleteVirtualRegister != v96);
  }
  int v84 = (char *)operator new(0x10uLL);
  *(void *)int v84 = 0;
  *((void *)v84 + 1) = 0;
  uint64_t v669 = v84 + 16;
  uint64_t v670 = v84 + 16;
  __n128 __p = v84;
  uint64_t v85 = *(void *)(v20 + 832);
  int v86 = v637 + 24;
  if (v637[47] < 0) {
    int v86 = *(char **)v86;
  }
  uint64_t v87 = *(void *)(**(void **)(v85 + 40) + 40);
  unsigned __int8 v88 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 32))(v11, v87 + 272, *(unsigned int *)(v87 + 284));
  uint64_t v89 = sub_1CD7EE234(v85, v86, v88, 0, 0);
  uint64_t v91 = v89;
  uint64_t v92 = v90;
  unsigned int v93 = v669;
  if (v669 >= v670)
  {
    uint64_t v153 = __p;
    unint64_t IncompleteVirtualRegister = (v669 - (unsigned char *)__p) >> 4;
    unint64_t v154 = IncompleteVirtualRegister + 1;
    if ((IncompleteVirtualRegister + 1) >> 60) {
      goto LABEL_964;
    }
    uint64_t v155 = v670 - (unsigned char *)__p;
    if ((v670 - (unsigned char *)__p) >> 3 > v154) {
      unint64_t v154 = v155 >> 3;
    }
    if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v156 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v156 = v154;
    }
    if (v156)
    {
      if (v156 >> 60) {
        goto LABEL_968;
      }
      int v157 = (char *)operator new(16 * v156);
    }
    else
    {
      int v157 = 0;
    }
    int v158 = (uint64_t *)&v157[16 * IncompleteVirtualRegister];
    *int v158 = v91;
    v158[1] = v92;
    int v94 = (char *)(v158 + 2);
    if (v93 == v153)
    {
      uint64_t v95 = v662;
    }
    else
    {
      uint64_t v95 = v662;
      do
      {
        uint64_t v159 = *((void *)v93 - 2);
        v93 -= 4;
        int v160 = v93[2];
        *(v158 - 2) = v159;
        v158 -= 2;
        *((_DWORD *)v158 + 2) = v160;
      }
      while (v93 != v153);
      unsigned int v93 = __p;
    }
    __n128 __p = v158;
    uint64_t v669 = v94;
    uint64_t v670 = &v157[16 * v156];
    if (v93) {
      operator delete(v93);
    }
  }
  else
  {
    *(void *)uint64_t v669 = v89;
    *((void *)v93 + 1) = v90;
    int v94 = (char *)(v93 + 4);
    uint64_t v95 = v662;
  }
  uint64_t v669 = v94;
  if (*(void *)(v652 + 48) || (*(unsigned char *)(v652 + 23) & 0x20) != 0) {
    uint64_t MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v652, "srcloc", 6uLL);
  }
  else {
    uint64_t MetadataImpl = 0;
  }
  uint64_t v162 = sub_1CD7EF590(*(void **)(v95 + 832), MetadataImpl);
  uint64_t v164 = v162;
  uint64_t v165 = v163;
  uint64_t v166 = v669;
  if (v669 >= v670)
  {
    uint64_t v169 = __p;
    unint64_t IncompleteVirtualRegister = (v669 - (unsigned char *)__p) >> 4;
    unint64_t v170 = IncompleteVirtualRegister + 1;
    if ((IncompleteVirtualRegister + 1) >> 60) {
      goto LABEL_964;
    }
    uint64_t v171 = v670 - (unsigned char *)__p;
    if ((v670 - (unsigned char *)__p) >> 3 > v170) {
      unint64_t v170 = v171 >> 3;
    }
    if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v172 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v172 = v170;
    }
    if (v172)
    {
      if (v172 >> 60) {
        goto LABEL_968;
      }
      int v173 = (char *)operator new(16 * v172);
    }
    else
    {
      int v173 = 0;
    }
    uint64_t v174 = (uint64_t **)&v173[16 * IncompleteVirtualRegister];
    *uint64_t v174 = v164;
    v174[1] = v165;
    uint64_t v167 = (char *)(v174 + 2);
    if (v166 == v169)
    {
      uint64_t v168 = v662;
    }
    else
    {
      uint64_t v168 = v662;
      do
      {
        uint64_t v175 = (uint64_t *)*((void *)v166 - 2);
        v166 -= 4;
        int v176 = v166[2];
        *(v174 - 2) = v175;
        v174 -= 2;
        *((_DWORD *)v174 + 2) = v176;
      }
      while (v166 != v169);
      uint64_t v166 = __p;
    }
    __n128 __p = v174;
    uint64_t v669 = v167;
    uint64_t v670 = &v173[16 * v172];
    if (v166) {
      operator delete(v166);
    }
  }
  else
  {
    *(void *)uint64_t v669 = v162;
    *((void *)v166 + 1) = v163;
    uint64_t v167 = (char *)(v166 + 4);
    uint64_t v168 = v662;
  }
  uint64_t v669 = v167;
  uint64_t v177 = *(void *)(v168 + 832);
  uint64_t v178 = *(void *)v168;
  int v179 = *(_DWORD *)(v168 + 816);
  v688[0] = 0;
  LODWORD(v688[1]) = v179;
  uint64_t v180 = v177;
  if (v178)
  {
    uint64_t v181 = (void **)(v178 + 48);
    uint64_t v180 = v177;
    if (v181 != v688)
    {
      int v182 = *v181;
      v688[0] = v182;
      uint64_t v180 = v177;
      if (v182)
      {
        llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v182, 2);
        uint64_t v180 = *(void *)(v168 + 832);
      }
    }
  }
  unsigned __int8 v183 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 32))(v11, *(void *)(**(void **)(v180 + 40) + 40) + 272, 0);
  int v184 = sub_1CD7EBF14(v177, v648, (const llvm::APInt *)v688, (llvm *)v183, 0, 1, 0);
  int v186 = v184;
  uint64_t v187 = v185;
  int v188 = v669;
  if (v669 >= v670)
  {
    uint64_t v191 = __p;
    unint64_t IncompleteVirtualRegister = (v669 - (unsigned char *)__p) >> 4;
    unint64_t v192 = IncompleteVirtualRegister + 1;
    if ((IncompleteVirtualRegister + 1) >> 60) {
      goto LABEL_964;
    }
    uint64_t v193 = v670 - (unsigned char *)__p;
    if ((v670 - (unsigned char *)__p) >> 3 > v192) {
      unint64_t v192 = v193 >> 3;
    }
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v194 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v194 = v192;
    }
    if (v194)
    {
      if (v194 >> 60) {
        goto LABEL_968;
      }
      uint64_t v195 = (char *)operator new(16 * v194);
    }
    else
    {
      uint64_t v195 = 0;
    }
    unint64_t v196 = (uint64_t **)&v195[16 * IncompleteVirtualRegister];
    llvm *v196 = v186;
    v196[1] = v187;
    int v189 = (char *)(v196 + 2);
    if (v188 == v191)
    {
      uint64_t v190 = v662;
    }
    else
    {
      uint64_t v190 = v662;
      do
      {
        int v197 = (uint64_t *)*((void *)v188 - 2);
        v188 -= 4;
        int v198 = v188[2];
        *(v196 - 2) = v197;
        v196 -= 2;
        *((_DWORD *)v196 + 2) = v198;
      }
      while (v188 != v191);
      int v188 = __p;
    }
    __n128 __p = v196;
    uint64_t v669 = v189;
    uint64_t v670 = &v195[16 * v194];
    if (v188) {
      operator delete(v188);
    }
  }
  else
  {
    *(void *)uint64_t v669 = v184;
    *((void *)v188 + 1) = v185;
    int v189 = (char *)(v188 + 4);
    uint64_t v190 = v662;
  }
  uint64_t v669 = v189;
  if (!v688[0]) {
    goto LABEL_273;
  }
  int v199 = *(unsigned __int8 *)v688[0];
  if ((v199 - 4) > 0x1E)
  {
    if ((v199 - 3) >= 0xFFFFFFFE) {
      uint64_t v492 = v688[0];
    }
    else {
      uint64_t v492 = 0;
    }
    if ((v199 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v493 = (unint64_t)v492 + 8;
LABEL_751:
      __int16 v702 = (char *)v688;
      sub_1CC5FA668(v493 + 16, &v702);
      goto LABEL_273;
    }
    if (v199 == 3) {
      *((void *)v688[0] + 1) = 0;
    }
  }
  else if ((*((unsigned char *)v688[0] + 1) & 0x7F) == 2 || *((_DWORD *)v688[0] + 3))
  {
    uint64_t v620 = *((void *)v688[0] + 2);
    if ((v620 & 4) != 0)
    {
      unint64_t v493 = v620 & 0xFFFFFFFFFFFFFFF8;
      if (v493) {
        goto LABEL_751;
      }
    }
  }
LABEL_273:
  if (!v700)
  {
LABEL_739:
    uint64_t v477 = __p;
    uint64_t v478 = v672;
    *((_DWORD *)__p + 2) = DWORD2(v672);
    void *v477 = v478;
    int v479 = v647;
    if (!(void)v673) {
      goto LABEL_785;
    }
    uint64_t v480 = v669;
    if (v669 < v670)
    {
      *(_OWORD *)uint64_t v669 = v673;
      uint64_t v481 = (char *)(v480 + 4);
LABEL_784:
      uint64_t v669 = v481;
      uint64_t v190 = v662;
LABEL_785:
      if (v479 == 39) {
        uint64_t v509 = 262;
      }
      else {
        uint64_t v509 = 261;
      }
      uint64_t v510 = *(void **)(v190 + 832);
      uint64_t v511 = *(void *)v190;
      int v512 = *(_DWORD *)(v190 + 816);
      v688[0] = 0;
      LODWORD(v688[1]) = v512;
      uint64_t v513 = (uint64_t)v510;
      if (v511)
      {
        uint64_t v514 = (void **)(v511 + 48);
        uint64_t v513 = (uint64_t)v510;
        if (v514 != v688)
        {
          uint64_t v515 = *v514;
          v688[0] = v515;
          uint64_t v513 = (uint64_t)v510;
          if (v515)
          {
            llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v515, 2);
            uint64_t v513 = *(void *)(v190 + 832);
          }
        }
      }
      uint64_t v517 = sub_1CD7F95FC(v513, 1, 0, 172, 0);
      uint64_t v518 = v510[104];
      if (v518) {
        __int16 v519 = *(_WORD *)(v518 + 8);
      }
      else {
        __int16 v519 = 0;
      }
      uint64_t v520 = sub_1CD7FF854(v510, (const char *)v509, (const llvm::APInt *)v688, v517, v516, (uint64_t *)__p, (v669 - (unsigned char *)__p) >> 4, v519);
      *(void *)&long long v672 = v520;
      DWORD2(v672) = v521;
      if (v688[0])
      {
        int v522 = *(unsigned __int8 *)v688[0];
        if ((v522 - 4) > 0x1E)
        {
          if ((v522 - 3) >= 0xFFFFFFFE) {
            uint64_t v594 = v688[0];
          }
          else {
            uint64_t v594 = 0;
          }
          if ((v522 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v595 = (unint64_t)v594 + 8;
LABEL_910:
            __int16 v702 = (char *)v688;
            sub_1CC5FA668(v595 + 16, &v702);
            uint64_t v520 = (uint64_t *)v672;
            goto LABEL_799;
          }
          if (v522 == 3) {
            *((void *)v688[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v688[0] + 1) & 0x7F) == 2 || *((_DWORD *)v688[0] + 3))
        {
          uint64_t v621 = *((void *)v688[0] + 2);
          if ((v621 & 4) != 0)
          {
            unint64_t v595 = v621 & 0xFFFFFFFFFFFFFFF8;
            if (v595) {
              goto LABEL_910;
            }
          }
        }
      }
LABEL_799:
      *(void *)&long long v673 = v520;
      DWORD2(v673) = 1;
      unint64_t v523 = (char *)v685;
      uint64_t v683 = v685;
      uint64_t v684 = 0x100000000;
      long long v524 = v681;
      uint64_t v679 = v681;
      uint64_t v680 = 0x100000000;
      v688[0] = &v689;
      v688[1] = (void *)0x800000000;
      uint64_t v525 = *(void *)v652;
      uint64_t v667 = v525;
      int v526 = *(unsigned __int8 *)(v525 + 8);
      if (v525 && v526 == 16)
      {
        unsigned int v527 = *(uint64_t **)(v525 + 16);
      }
      else
      {
        unsigned int v527 = &v667;
        if (v526 == 7) {
          unsigned int v527 = 0;
        }
      }
      uint64_t v528 = v662;
      unsigned int v666 = v527;
      __int16 v702 = v11;
      uint64_t v703 = v662;
      v704[0] = &v666;
      v704[1] = &v683;
      uint64_t v705 = &v679;
      if (v700)
      {
        uint64_t v529 = (char *)v699;
        uint64_t v530 = (char *)v699 + 328 * v700;
        while (1)
        {
          if (*(_DWORD *)v529 != 1) {
            goto LABEL_832;
          }
          IncompleteVirtualRegister &= 0xFFFFFFFF00000000;
          if (!*((_DWORD *)v529 + 66)) {
            goto LABEL_832;
          }
          unsigned int v531 = *((_DWORD *)v529 + 26);
          if (v531 - 4 < 2)
          {
            uint64_t v540 = *(void *)v528;
            int v541 = *(_DWORD *)(v528 + 816);
            *(void *)&v663[0] = 0;
            DWORD2(v663[0]) = v541;
            if (v540)
            {
              unsigned __int8 v542 = (long long *)(v540 + 48);
              if (v542 != v663)
              {
                uint64_t v543 = *(unsigned __int8 **)v542;
                *(void *)&v663[0] = v543;
                if (v543) {
                  llvm::MetadataTracking::track((uint64_t)v663, v543, 2);
                }
              }
            }
            uint64_t v538 = (uint64_t *)(*(uint64_t (**)(char *, long long *, long long *, long long *, char *, void))(*(void *)v11 + 2080))(v11, &v672, &v673, v663, v529, *(void *)(v528 + 832));
          }
          else
          {
            if (v531 > 1)
            {
              uint64_t v544 = 0;
              goto LABEL_825;
            }
            uint64_t v532 = *(void **)(v528 + 832);
            uint64_t v533 = *(void *)(v528 + 912);
            uint64_t v534 = *(void *)v528;
            int v535 = *(_DWORD *)(v528 + 816);
            *(void *)&v663[0] = 0;
            DWORD2(v663[0]) = v535;
            if (v534)
            {
              unsigned int v536 = (long long *)(v534 + 48);
              if (v536 != v663)
              {
                uint64_t v537 = *(unsigned __int8 **)v536;
                *(void *)&v663[0] = v537;
                if (v537) {
                  llvm::MetadataTracking::track((uint64_t)v663, v537, 2);
                }
              }
            }
            uint64_t v538 = sub_1CCFA4BC4((uint64_t)(v529 + 144), v532, v533, (const llvm::APInt *)v663, (uint64_t *)&v672, (uint64_t *)&v673, (unsigned __int8 *)v652);
          }
          uint64_t v544 = (uint64_t)v538;
          unsigned int v545 = v539;
          if (*(void *)&v663[0])
          {
            int v546 = **(unsigned char **)&v663[0];
            if ((v546 - 4) > 0x1E)
            {
              if ((v546 - 3) >= 0xFFFFFFFE) {
                uint64_t v552 = *(void *)&v663[0];
              }
              else {
                uint64_t v552 = 0;
              }
              if ((v546 - 3) < 0xFFFFFFFE)
              {
                if (v546 == 3) {
                  *(void *)(*(void *)&v663[0] + 8) = 0;
                }
                goto LABEL_824;
              }
              unint64_t v553 = v552 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*(void *)&v663[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v663[0] + 12)) {
                goto LABEL_824;
              }
              uint64_t v575 = *(void *)(*(void *)&v663[0] + 16);
              if ((v575 & 4) == 0) {
                goto LABEL_824;
              }
              unint64_t v553 = v575 & 0xFFFFFFFFFFFFFFF8;
              if (!v553) {
                goto LABEL_824;
              }
            }
            v676[0] = v663;
            sub_1CC5FA668(v553 + 16, v676);
          }
LABEL_824:
          IncompleteVirtualRegister |= v545;
LABEL_825:
          if (v529[13])
          {
            uint64_t v655 = v524;
            uint64_t v660 = v523;
            uint64_t v554 = (unsigned __int8 *)*((void *)v529 + 14);
            uint64_t v555 = *(void *)(v528 + 832);
            long long v556 = v672;
            uint64_t v557 = *(void *)v528;
            int v558 = *(_DWORD *)(v528 + 816);
            uint64_t v664 = 0;
            int v665 = v558;
            if (v557)
            {
              uint64_t v559 = (unsigned __int8 **)(v557 + 48);
              if (v559 != &v664)
              {
                uint64_t v560 = *v559;
                uint64_t v664 = v560;
                if (v560) {
                  llvm::MetadataTracking::track((uint64_t)&v664, v560, 2);
                }
              }
            }
            uint64_t v561 = sub_1CD7DE5B4(v528, v554);
            unsigned int v563 = v562;
            if (v554)
            {
              unsigned int v565 = *(_DWORD *)(*(void *)v554 + 8);
              if ((v565 & 0xFE) == 0x12) {
                unsigned int v565 = *(_DWORD *)(**(void **)(*(void *)v554 + 16) + 8);
              }
              unsigned int v564 = v565 >> 8;
            }
            else
            {
              unsigned int v564 = 0;
            }
            memset(v663, 0, sizeof(v663));
            v676[0] = (unint64_t)v554 & 0xFFFFFFFFFFFFFFFBLL;
            v676[1] = 0;
            unsigned int v677 = v564;
            char v678 = 0;
            __int16 v566 = (uint64_t *)(*(void *)(v544 + 40) + 16 * IncompleteVirtualRegister);
            char v567 = sub_1CD7EA9CC(v555, *v566, v566[1]);
            uint64_t v568 = sub_1CD7FB188(v555, v556, SDWORD2(v556), (uint64_t)&v664, v544, IncompleteVirtualRegister, (uint64_t)v561, v563, (uint64_t)v676, v567, 0, 0, v663);
            uint64_t v570 = v569;
            uint64_t v528 = v662;
            long long v524 = v655;
            unint64_t v523 = v660;
            if (v664)
            {
              int v571 = *v664;
              if ((v571 - 4) > 0x1E)
              {
                if ((v571 - 3) >= 0xFFFFFFFE) {
                  uint64_t v573 = v664;
                }
                else {
                  uint64_t v573 = 0;
                }
                if ((v571 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v574 = (unint64_t)(v573 + 8);
                  goto LABEL_863;
                }
                if (v571 == 3) {
                  *((void *)v664 + 1) = 0;
                }
              }
              else if ((v664[1] & 0x7F) == 2 || *((_DWORD *)v664 + 3))
              {
                uint64_t v576 = *((void *)v664 + 2);
                if ((v576 & 4) != 0)
                {
                  unint64_t v574 = v576 & 0xFFFFFFFFFFFFFFF8;
                  if (v574)
                  {
LABEL_863:
                    *(void *)&v663[0] = &v664;
                    sub_1CC5FA668(v574 + 16, v663);
                  }
                }
              }
            }
            if (LODWORD(v688[1]) >= (unint64_t)HIDWORD(v688[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v572 = (uint64_t **)((char *)v688[0] + 16 * LODWORD(v688[1]));
            *uint64_t v572 = v568;
            v572[1] = v570;
            ++LODWORD(v688[1]);
            goto LABEL_832;
          }
          if (*(_WORD *)(v544 + 24) == 55)
          {
            unsigned int v547 = *(unsigned __int16 *)(v544 + 56);
            if (*(_WORD *)(v544 + 56))
            {
              uint64_t v548 = *(uint64_t **)(v544 + 32);
              uint64_t v549 = &v548[5 * v547];
              do
              {
                uint64_t v550 = *v548;
                uint64_t v551 = v548[1];
                v548 += 5;
                sub_1CCFC2434((uint64_t)&v702, v550, v551);
              }
              while (v548 != v549);
            }
          }
          else
          {
            sub_1CCFC2434((uint64_t)&v702, v544, IncompleteVirtualRegister);
          }
LABEL_832:
          v529 += 328;
          if (v529 == v530)
          {
            if (!v680) {
              break;
            }
            uint64_t v603 = *(void **)(v528 + 832);
            uint64_t v604 = *(void *)v528;
            int v605 = *(_DWORD *)(v528 + 816);
            *(void *)&v663[0] = 0;
            DWORD2(v663[0]) = v605;
            uint64_t v606 = (uint64_t)v603;
            if (v604)
            {
              unint64_t v607 = (long long *)(v604 + 48);
              uint64_t v606 = (uint64_t)v603;
              if (v607 != v663)
              {
                uint64_t v608 = *(unsigned __int8 **)v607;
                *(void *)&v663[0] = v608;
                uint64_t v606 = (uint64_t)v603;
                if (v608)
                {
                  llvm::MetadataTracking::track((uint64_t)v663, v608, 2);
                  uint64_t v606 = *(void *)(v528 + 832);
                }
              }
            }
            uint64_t v610 = sub_1CD7F9A18(v606, (uint64_t *)v683, v684);
            uint64_t v611 = v603[104];
            if (v611) {
              __int16 v612 = *(_WORD *)(v611 + 8);
            }
            else {
              __int16 v612 = 0;
            }
            uint64_t v613 = sub_1CD7FF854(v603, (const char *)0x37, (const llvm::APInt *)v663, v610, v609, (uint64_t *)v679, v680, v612);
            int v615 = v614;
            if (*(void *)&v663[0])
            {
              int v616 = **(unsigned char **)&v663[0];
              if ((v616 - 4) > 0x1E)
              {
                if ((v616 - 3) >= 0xFFFFFFFE) {
                  uint64_t v618 = *(void *)&v663[0];
                }
                else {
                  uint64_t v618 = 0;
                }
                if ((v616 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v619 = v618 + 8;
                  goto LABEL_957;
                }
                if (v616 == 3) {
                  *(void *)(*(void *)&v663[0] + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(*(void *)&v663[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v663[0] + 12))
              {
                uint64_t v623 = *(void *)(*(void *)&v663[0] + 16);
                if ((v623 & 4) != 0)
                {
                  unint64_t v619 = v623 & 0xFFFFFFFFFFFFFFF8;
                  if (v619)
                  {
LABEL_957:
                    v676[0] = v663;
                    sub_1CC5FA668(v619 + 16, v676);
                  }
                }
              }
            }
            *(void *)&v663[0] = v652;
            uint64_t v617 = sub_1CD7E88EC((uint64_t *)(v528 + 8), v663);
            v617[1] = v613;
            *((_DWORD *)v617 + 4) = v615;
            break;
          }
        }
      }
      unsigned int v577 = v688[1];
      if (LODWORD(v688[1]))
      {
        uint64_t v578 = *(void **)(v528 + 832);
        uint64_t v579 = *(void *)v528;
        int v580 = *(_DWORD *)(v528 + 816);
        *(void *)&v663[0] = 0;
        DWORD2(v663[0]) = v580;
        if (v579)
        {
          int v581 = (long long *)(v579 + 48);
          if (v581 != v663)
          {
            uint64_t v582 = *(unsigned __int8 **)v581;
            *(void *)&v663[0] = v582;
            if (v582)
            {
              llvm::MetadataTracking::track((uint64_t)v663, v582, 2);
              unsigned int v577 = v688[1];
            }
          }
        }
        uint64_t v583 = v577;
        uint64_t v584 = v578[104];
        uint64_t v585 = v584 ? *(unsigned __int16 *)(v584 + 8) : 0;
        *(void *)&long long v672 = sub_1CD7FF4E8(v578, (const char *)2, (const llvm::APInt *)v663, (llvm *)1, 0, (uint64_t *)v688[0], v583, v585);
        DWORD2(v672) = v586;
        if (*(void *)&v663[0])
        {
          int v587 = **(unsigned char **)&v663[0];
          if ((v587 - 4) > 0x1E)
          {
            if ((v587 - 3) >= 0xFFFFFFFE) {
              uint64_t v596 = *(void *)&v663[0];
            }
            else {
              uint64_t v596 = 0;
            }
            if ((v587 - 3) < 0xFFFFFFFE)
            {
              if (v587 == 3) {
                *(void *)(*(void *)&v663[0] + 8) = 0;
              }
              goto LABEL_886;
            }
            unint64_t v597 = v596 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)&v663[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v663[0] + 12)) {
              goto LABEL_886;
            }
            uint64_t v622 = *(void *)(*(void *)&v663[0] + 16);
            if ((v622 & 4) == 0) {
              goto LABEL_886;
            }
            unint64_t v597 = v622 & 0xFFFFFFFFFFFFFFF8;
            if (!v597) {
              goto LABEL_886;
            }
          }
          v676[0] = v663;
          sub_1CC5FA668(v597 + 16, v676);
        }
      }
LABEL_886:
      int v588 = v647;
      if (v644)
      {
        uint64_t v601 = sub_1CD7E6CB4((uint64_t *)v528, v672, SDWORD2(v672), (const llvm::InvokeInst *)v652, v636, v671);
        int v588 = v647;
        *(void *)&long long v672 = v601;
        DWORD2(v672) = v602;
      }
      char v589 = v643;
      if (!v680) {
        char v589 = 1;
      }
      if ((v589 & 1) != 0
        || (v588 != 39 ? (BOOL v590 = LODWORD(v688[1]) == 0) : (BOOL v590 = 0), !v590 ? (v591 = 1) : (v591 = v644), v591 == 1))
      {
        uint64_t v592 = *(void *)(v528 + 832);
        int v593 = DWORD2(v672);
        *(void *)(v592 + 192) = v672;
        *(_DWORD *)(v592 + 200) = v593;
      }
      if (v688[0] != &v689) {
        free(v688[0]);
      }
      if (v679 != v524) {
        free(v679);
      }
      if (v683 != v523) {
        free(v683);
      }
      goto LABEL_925;
    }
    uint64_t v496 = __p;
    uint64_t v497 = (v669 - (unsigned char *)__p) >> 4;
    unint64_t v498 = v497 + 1;
    if (!((unint64_t)(v497 + 1) >> 60))
    {
      uint64_t v499 = v670 - (unsigned char *)__p;
      if ((v670 - (unsigned char *)__p) >> 3 > v498) {
        unint64_t v498 = v499 >> 3;
      }
      if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v500 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v500 = v498;
      }
      if (!v500)
      {
        unint64_t v501 = 0;
LABEL_778:
        BOOL v506 = &v501[16 * v497];
        *(_OWORD *)BOOL v506 = v673;
        uint64_t v481 = v506 + 16;
        if (v480 != v496)
        {
          do
          {
            uint64_t v507 = *((void *)v480 - 2);
            v480 -= 4;
            int v508 = v480[2];
            *((void *)v506 - 2) = v507;
            v506 -= 16;
            *((_DWORD *)v506 + 2) = v508;
          }
          while (v480 != v496);
          uint64_t v480 = __p;
        }
        __n128 __p = v506;
        uint64_t v669 = v481;
        uint64_t v670 = &v501[16 * v500];
        if (v480) {
          operator delete(v480);
        }
        int v479 = v647;
        goto LABEL_784;
      }
      if (!(v500 >> 60))
      {
        unint64_t v501 = (char *)operator new(16 * v500);
        goto LABEL_778;
      }
LABEL_968:
      sub_1CB833614();
    }
LABEL_964:
    abort();
  }
  uint64_t v200 = (char *)v699;
  uint64_t v654 = (char *)v699 + 328 * v700;
  while (1)
  {
    int v201 = v200 + 80;
    unsigned int v658 = v200 + 80;
    if (v200[103] < 0) {
      int v201 = *(const char **)v201;
    }
    uint64_t v202 = v200;
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v201 + 60) & 0x400) != 0)
    {
      unsigned int v203 = atoi(v201);
      uint64_t v202 = (char *)v699 + 328 * v203;
    }
    char v204 = *(llvm::APFloatBase **)(v190 + 832);
    uint64_t v205 = *(void *)v190;
    int v206 = *(_DWORD *)(v190 + 816);
    uint64_t v683 = 0;
    LODWORD(v684) = v206;
    if (v205)
    {
      uint64_t v207 = (void **)(v205 + 48);
      if (v207 != &v683)
      {
        uint64_t v208 = *v207;
        uint64_t v683 = v208;
        if (v208) {
          llvm::MetadataTracking::track((uint64_t)&v683, (unsigned __int8 *)v208, 2);
        }
      }
    }
    unint64_t IncompleteVirtualRegister = *((void *)v204 + 7);
    uint64_t v209 = *((void *)v204 + 3);
    uint64_t v210 = *((void *)v204 + 5);
    __int16 v702 = (char *)v704;
    uint64_t v703 = 0x400000000;
    uint64_t v211 = (*(uint64_t (**)(void))(**(void **)(v210 + 16) + 176))(*(void *)(v210 + 16));
    if ((*((_DWORD *)v200 + 26) & 0xFFFFFFFE) == 2)
    {
      int v212 = 0;
      LOBYTE(v213) = 0;
      unsigned int v214 = 0;
      uint64_t v190 = v662;
      goto LABEL_354;
    }
    uint64_t v215 = v211;
    unint64_t v218 = (char *)*((void *)v202 + 10);
    int v217 = v202 + 80;
    int v216 = v218;
    char v219 = v217[23];
    int v220 = v219;
    if (v219 >= 0) {
      unint64_t v221 = v217;
    }
    else {
      unint64_t v221 = v216;
    }
    uint64_t v222 = v219 & 0x7F;
    if (v220 >= 0) {
      uint64_t v223 = v222;
    }
    else {
      uint64_t v223 = *((void *)v217 + 1);
    }
    unsigned int v224 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, void))(*(void *)v209 + 2048))(v209, v211, v221, v223, v217[40]);
    if (!v225) {
      goto LABEL_353;
    }
    unsigned int v213 = v224;
    char v226 = v225;
    unsigned __int8 v227 = *(unsigned char **)(*(void *)(v215 + 264)
                     + 24
                     * (*((unsigned __int16 *)*v225 + 12)
                      + *(_DWORD *)(v215 + 272)
                      * ((*(void *)(v215 + 248) - *(void *)(v215 + 240)) >> 3))
                     + 16);
    int v228 = *v227;
    LOBYTE(v679) = *v227;
    uint64_t v230 = v200 + 120;
    int v229 = v200[120];
    if (v229 != 1 && v228 != 174 && *(_DWORD *)v200 <= 1u)
    {
      do
      {
        int v233 = *v227++;
        int v232 = v233;
      }
      while (v233 != 1 && v232 != v229);
      if (v232 == 1)
      {
        uint64_t v649 = sub_1CB87E200((unsigned __int8 *)&v679);
        int v236 = v235;
        if (v649 == sub_1CB87E200((unsigned __int8 *)v200 + 120) && v236 == v237)
        {
          if (!*(_DWORD *)v200 && !v200[13])
          {
            uint64_t v238 = *((void *)v204 + 104);
            if (v238) {
              __int16 v239 = *(_WORD *)(v238 + 8);
            }
            else {
              __int16 v239 = 0;
            }
            *((void *)v200 + 16) = sub_1CD7F3564(v204, (const char *)0xD8, (uint64_t)&v683, (llvm *)v679, 0, *((void *)v200 + 16), *((void **)v200 + 17), v239);
            *((_DWORD *)v200 + 34) = v245;
          }
          LOBYTE(v244) = (_BYTE)v679;
LABEL_328:
          char *v230 = v244;
          goto LABEL_329;
        }
        BOOL v240 = v679 - 120 >= 0x20 && v679 - 2 >= 6;
        if (!v240 || v679 - 15 <= 0x3B)
        {
          char v241 = *v230;
          if ((*v230 + 104) < 0x13u
            || (v241 - 8) < 7u
            || (v241 - 75) <= 0x2Cu)
          {
            int v242 = sub_1CB87E200((unsigned __int8 *)v200 + 120);
            if (v243 == 1)
            {
              int v476 = v242;
              int v242 = v476;
            }
            uint64_t v244 = 0;
            if (v242 > 31)
            {
              switch(v242)
              {
                case 32:
                  uint64_t v244 = 5;
                  break;
                case 64:
                  uint64_t v244 = 6;
                  break;
                case 128:
                  uint64_t v244 = 7;
                  break;
              }
            }
            else
            {
              switch(v242)
              {
                case 1:
                  uint64_t v244 = 2;
                  break;
                case 8:
                  uint64_t v244 = 3;
                  break;
                case 16:
                  uint64_t v244 = 4;
                  break;
              }
            }
            if (!*(_DWORD *)v200)
            {
              uint64_t v460 = *((void *)v204 + 104);
              if (v460) {
                __int16 v461 = *(_WORD *)(v460 + 8);
              }
              else {
                __int16 v461 = 0;
              }
              *((void *)v200 + 16) = sub_1CD7F3564(v204, (const char *)0xD8, (uint64_t)&v683, (llvm *)v244, 0, *((void *)v200 + 16), *((void **)v200 + 17), v461);
              *((_DWORD *)v200 + 34) = v462;
            }
            goto LABEL_328;
          }
        }
      }
    }
LABEL_329:
    uint64_t v246 = v200 + 80;
    if (v200[103] < 0) {
      uint64_t v246 = *(const char **)v658;
    }
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v246 + 60) & 0x400) == 0)
    {
      int v247 = *v230;
      if (v247 == 1) {
        uint64_t v248 = v679;
      }
      else {
        uint64_t v248 = *v230;
      }
      if (v247 == 1) {
        int v249 = 1;
      }
      else {
        int v249 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v209 + 584))(v209, IncompleteVirtualRegister);
      }
      uint64_t v250 = **v226;
      uint64_t v251 = *(void *)(v210 + 40);
      if (v213)
      {
        uint64_t v252 = *((unsigned __int16 *)*v226 + 10);
        int v253 = &v250[v252];
        if (HIWORD(v213))
        {
          uint64_t v190 = v662;
        }
        else
        {
          uint64_t v190 = v662;
          if (*((_WORD *)*v226 + 10))
          {
            uint64_t v254 = 2 * v252;
            unsigned int v255 = **v226;
            while (*v255 != (unsigned __int16)v213)
            {
              ++v255;
              v254 -= 2;
              if (!v254) {
                goto LABEL_348;
              }
            }
            int v253 = v255;
          }
          else
          {
            int v253 = **v226;
          }
        }
LABEL_348:
        if (v252 == v253 - v250)
        {
          unsigned int v214 = v213 & 0xFFFFFF00;
          int v212 = 1;
          goto LABEL_354;
        }
        uint64_t v250 = v253;
      }
      for (; v249; --v249)
      {
        if (v213)
        {
          unint64_t IncompleteVirtualRegister = *v250;
        }
        else
        {
          unint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v251, "", 0);
          *(void *)(*(void *)(v251 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = (unint64_t)v226 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v320 = *(void *)(v251 + 8);
          if (v320) {
            (*(void (**)(uint64_t))(*(void *)v320 + 24))(v320);
          }
        }
        if (v703 >= (unint64_t)HIDWORD(v703)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&v702[4 * v703] = IncompleteVirtualRegister;
        LODWORD(v703) = v703 + 1;
        ++v250;
      }
      sub_1CD7D6674((uint64_t)v688, (uint64_t)&v702, (char)v679, v248, 0);
      sub_1CD7E87A0((uint64_t)(v200 + 144), (uint64_t)v688);
      sub_1CD7E86AC((uint64_t)v688);
    }
LABEL_353:
    int v212 = 0;
    LOBYTE(v213) = 0;
    unsigned int v214 = 0;
    uint64_t v190 = v662;
LABEL_354:
    if (v702 != (char *)v704) {
      free(v702);
    }
    if (v683)
    {
      int v256 = *(unsigned __int8 *)v683;
      if ((v256 - 4) > 0x1E)
      {
        if ((v256 - 3) >= 0xFFFFFFFE) {
          uint64_t v275 = v683;
        }
        else {
          uint64_t v275 = 0;
        }
        if ((v256 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v276 = (unint64_t)v275 + 8;
LABEL_385:
          v688[0] = &v683;
          sub_1CC5FA668(v276 + 16, v688);
          goto LABEL_360;
        }
        if (v256 == 3) {
          *((void *)v683 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v683 + 1) & 0x7F) == 2 || *((_DWORD *)v683 + 3))
      {
        uint64_t v470 = *((void *)v683 + 2);
        if ((v470 & 4) != 0)
        {
          unint64_t v276 = v470 & 0xFFFFFFFFFFFFFFF8;
          if (v276) {
            goto LABEL_385;
          }
        }
      }
    }
LABEL_360:
    if (v212) {
      break;
    }
    int v257 = *(_DWORD *)v200;
    if (*(_DWORD *)v200 == 2)
    {
      if (!*((_DWORD *)v200 + 66)) {
        goto LABEL_378;
      }
      uint64_t v280 = *(void *)v190;
      int v281 = *(_DWORD *)(v190 + 816);
      v688[0] = 0;
      LODWORD(v688[1]) = v281;
      if (v280)
      {
        unsigned __int8 v282 = (void **)(v280 + 48);
        if (v282 != v688)
        {
          int v283 = *v282;
          v688[0] = v283;
          if (v283) {
            llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v283, 2);
          }
        }
      }
      uint64_t v284 = (uint64_t)(v200 + 144);
      uint64_t v285 = *(void **)(v190 + 832);
      unint64_t v286 = 4;
    }
    else if (v257)
    {
      if (v257 != 1) {
        goto LABEL_378;
      }
      if (*((_DWORD *)v200 + 26) == 2)
      {
        char v258 = v200[103];
        BOOL v259 = v258 < 0;
        if (v258 >= 0) {
          int v260 = v200 + 80;
        }
        else {
          int v260 = (char *)*((void *)v200 + 10);
        }
        uint64_t v261 = v258 & 0x7F;
        if (v259) {
          uint64_t v262 = *((void *)v200 + 11);
        }
        else {
          uint64_t v262 = v261;
        }
        int v263 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)v11 + 2056))(v11, v260, v262);
        uint64_t v264 = *(void *)(v190 + 832);
        uint64_t v265 = *(void *)v190;
        int v266 = *(_DWORD *)(v190 + 816);
        v688[0] = 0;
        LODWORD(v688[1]) = v266;
        if (v265)
        {
          unsigned int v267 = (void **)(v265 + 48);
          if (v267 != v688)
          {
            unsigned int v268 = *v267;
            v688[0] = v268;
            if (v268) {
              llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v268, 2);
            }
          }
        }
        uint64_t v269 = sub_1CD7EBF14(v264, (v263 << 16) | 0xEu, (const llvm::APInt *)v688, (llvm *)5, 0, 1, 0);
        uint64_t v271 = v269;
        uint64_t v272 = v270;
        unsigned __int8 v273 = v669;
        if (v669 >= v670)
        {
          __int16 v321 = __p;
          uint64_t v322 = (v669 - (unsigned char *)__p) >> 4;
          unint64_t v323 = v322 + 1;
          if ((unint64_t)(v322 + 1) >> 60) {
            goto LABEL_964;
          }
          uint64_t v324 = v670 - (unsigned char *)__p;
          if ((v670 - (unsigned char *)__p) >> 3 > v323) {
            unint64_t v323 = v324 >> 3;
          }
          if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t IncompleteVirtualRegister = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t IncompleteVirtualRegister = v323;
          }
          if (IncompleteVirtualRegister)
          {
            if (IncompleteVirtualRegister >> 60) {
              goto LABEL_968;
            }
            uint64_t v325 = (char *)operator new(16 * IncompleteVirtualRegister);
          }
          else
          {
            uint64_t v325 = 0;
          }
          int v363 = (uint64_t **)&v325[16 * v322];
          uint64_t *v363 = v271;
          v363[1] = v272;
          uint64_t v364 = v363;
          if (v273 != v321)
          {
            do
            {
              unint64_t v365 = (uint64_t *)*((void *)v273 - 2);
              v273 -= 4;
              int v366 = v273[2];
              *(v364 - 2) = v365;
              v364 -= 2;
              *((_DWORD *)v364 + 2) = v366;
            }
            while (v273 != v321);
            unsigned __int8 v273 = __p;
          }
          uint64_t v274 = (char *)(v363 + 2);
          __n128 __p = v364;
          uint64_t v669 = (char *)(v363 + 2);
          uint64_t v670 = &v325[16 * IncompleteVirtualRegister];
          uint64_t v190 = v662;
          if (v273) {
            operator delete(v273);
          }
        }
        else
        {
          *(void *)uint64_t v669 = v269;
          *((void *)v273 + 1) = v270;
          uint64_t v274 = (char *)(v273 + 4);
        }
        uint64_t v669 = v274;
        if (v688[0])
        {
          int v367 = *(unsigned __int8 *)v688[0];
          if ((v367 - 4) > 0x1E)
          {
            if ((v367 - 3) >= 0xFFFFFFFE) {
              __int16 v378 = v688[0];
            }
            else {
              __int16 v378 = 0;
            }
            if ((v367 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v379 = (unint64_t)v378 + 8;
              goto LABEL_536;
            }
            if (v367 == 3) {
              *((void *)v688[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v688[0] + 1) & 0x7F) == 2 || *((_DWORD *)v688[0] + 3))
          {
            uint64_t v471 = *((void *)v688[0] + 2);
            if ((v471 & 4) != 0)
            {
              unint64_t v379 = v471 & 0xFFFFFFFFFFFFFFF8;
              if (v379)
              {
LABEL_536:
                __int16 v702 = (char *)v688;
                sub_1CC5FA668(v379 + 16, &v702);
                uint64_t v274 = v669;
              }
            }
          }
        }
        uint64_t v368 = v200 + 128;
        if (v274 >= v670)
        {
          BOOL v369 = (char *)__p;
          unint64_t IncompleteVirtualRegister = (v274 - (unsigned char *)__p) >> 4;
          unint64_t v370 = IncompleteVirtualRegister + 1;
          if ((IncompleteVirtualRegister + 1) >> 60) {
            goto LABEL_964;
          }
          uint64_t v371 = v670 - (unsigned char *)__p;
          if ((v670 - (unsigned char *)__p) >> 3 > v370) {
            unint64_t v370 = v371 >> 3;
          }
          if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v372 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v372 = v370;
          }
          if (v372)
          {
            if (v372 >> 60) {
              goto LABEL_968;
            }
            uint64_t v373 = (char *)operator new(16 * v372);
          }
          else
          {
            uint64_t v373 = 0;
          }
          uint64_t v374 = &v373[16 * IncompleteVirtualRegister];
          *(_OWORD *)uint64_t v374 = *v368;
          uint64_t v375 = v374;
          if (v274 != v369)
          {
            do
            {
              uint64_t v376 = *((void *)v274 - 2);
              v274 -= 16;
              int v377 = *((_DWORD *)v274 + 2);
              *((void *)v375 - 2) = v376;
              v375 -= 16;
              *((_DWORD *)v375 + 2) = v377;
            }
            while (v274 != v369);
            goto LABEL_643;
          }
          goto LABEL_644;
        }
        *(_OWORD *)uint64_t v274 = *v368;
        goto LABEL_605;
      }
      int v287 = v200 + 80;
      if (!*((_DWORD *)v200 + 66))
      {
        uint64_t v505 = "couldn't allocate output register for constraint '";
        goto LABEL_774;
      }
      uint64_t v288 = *(void *)(*(void *)(v190 + 832) + 40);
      uint64_t v289 = (*(uint64_t (**)(void))(**(void **)(v288 + 16) + 176))(*(void *)(v288 + 16));
      uint64_t v290 = *((unsigned int *)v200 + 66);
      if (v290)
      {
        __int16 v291 = (void *)v289;
        uint64_t v292 = (unsigned int *)*((void *)v200 + 32);
        unint64_t IncompleteVirtualRegister = 4 * v290;
        while (1)
        {
          unsigned int v293 = *v292;
          if (*v292 - 1 <= 0x3FFFFFFE)
          {
            if ((*(unsigned int (**)(void *, uint64_t, void))(*v291 + 104))(v291, v288, *v292)) {
              break;
            }
          }
          ++v292;
          IncompleteVirtualRegister -= 4;
          if (!IncompleteVirtualRegister) {
            goto LABEL_401;
          }
        }
        uint64_t v482 = (unsigned char *)(v291[9] + *(unsigned int *)(v291[1] + 24 * v293));
        int v483 = *v482;
        uint64_t v484 = "write to reserved register '";
        if (*v482)
        {
          __int16 v702 = "write to reserved register '";
          v704[0] = v482;
          LOWORD(v705) = 771;
          char v485 = 2;
        }
        else
        {
          __int16 v702 = "write to reserved register '";
          LOWORD(v705) = 259;
          char v485 = 3;
        }
        uint64_t v494 = (uint64_t *)v662;
        uint64_t v495 = (const llvm::Instruction *)v652;
        if (v483) {
          uint64_t v484 = (const char *)&v702;
        }
        v688[0] = (void *)v484;
        *(void *)&long long v689 = "'";
        LOBYTE(v690) = v485;
LABEL_756:
        HIBYTE(v690) = 3;
        goto LABEL_924;
      }
LABEL_401:
      if (v200[4]) {
        uint64_t v294 = 3;
      }
      else {
        uint64_t v294 = 2;
      }
      uint64_t v190 = v662;
      uint64_t v295 = *(void *)v662;
      int v296 = *(_DWORD *)(v662 + 816);
      v688[0] = 0;
      LODWORD(v688[1]) = v296;
      if (v295)
      {
        __int16 v297 = (void **)(v295 + 48);
        if (v297 != v688)
        {
          unsigned int v298 = *v297;
          v688[0] = v298;
          if (v298) {
            llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v298, 2);
          }
        }
      }
      uint64_t v284 = (uint64_t)(v200 + 144);
      uint64_t v285 = *(void **)(v662 + 832);
      unint64_t v286 = v294;
    }
    else
    {
      uint64_t v277 = *((void *)v200 + 16);
      unint64_t IncompleteVirtualRegister = *((void *)v200 + 17);
      uint64_t v278 = v200[103];
      if (v200[103] < 0) {
        uint64_t v279 = *(const char **)v658;
      }
      else {
        uint64_t v279 = v200 + 80;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)v279 + 60) & 0x400) != 0)
      {
        int v306 = atoi(v279);
        for (unsigned int i = 4; v306; --v306)
        {
          uint64_t v308 = *(void *)(*((void *)__p + 2 * i) + 80);
          uint64_t v309 = (void *)(v308 + 24);
          if (*(_DWORD *)(v308 + 32) >= 0x41u) {
            uint64_t v309 = (void *)*v309;
          }
          i += ((unsigned __int16)*(_DWORD *)v309 >> 3) + 1;
        }
        uint64_t v310 = *(void *)(*((void *)__p + 2 * i) + 80);
        uint64_t v311 = (void *)(v310 + 24);
        if (*(_DWORD *)(v310 + 32) >= 0x41u) {
          uint64_t v311 = (void *)*v311;
        }
        int v312 = *(_DWORD *)v311;
        if ((*(_DWORD *)v311 & 6) == 2)
        {
          if (v200[13])
          {
            v688[0] = "inline asm not supported yet: don't know how to handle tied indirect register inputs";
            __int16 v690 = 259;
            uint64_t v494 = (uint64_t *)v662;
            goto LABEL_923;
          }
          __int16 v702 = (char *)v704;
          uint64_t v703 = 0x400000000;
          uint64_t v313 = *(void *)(*(void *)(v662 + 832) + 40);
          uint64_t v314 = *(void *)(v313 + 40);
          uint64_t v315 = (*(uint64_t (**)(void))(**(void **)(v313 + 16) + 176))(*(void *)(v313 + 16));
          uint64_t v316 = *((void *)__p + 2 * i + 2);
          unint64_t v317 = *(unsigned int *)(v316 + 76);
          uint64_t v318 = **(unsigned __int8 **)(v316 + 40);
          uint64_t v650 = IncompleteVirtualRegister;
          if ((v317 & 0x80000000) != 0)
          {
            unint64_t v319 = *(void *)(*(void *)(v314 + 24) + 16 * (v317 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          }
          else if (v318 == 174)
          {
            unsigned __int8 v346 = *(unint64_t **)(v315 + 240);
            unsigned int v347 = *(unint64_t **)(v315 + 248);
            if (v346 == v347)
            {
              unint64_t v319 = 0;
            }
            else
            {
              unint64_t v319 = 0;
              unsigned int v348 = v317 - 0x40000000;
              unint64_t v349 = v317 >> 3;
              int v350 = 1 << (v317 & 7);
              do
              {
                if (v348 >= 0xC0000001)
                {
                  uint64_t v351 = *(void *)*v346;
                  if (v349 < *(unsigned __int16 *)(v351 + 22)
                    && (v350 & *(unsigned char *)(*(void *)(v351 + 8) + v349)) != 0
                    && (!v319
                     || *v346 != v319
                     && ((*(_DWORD *)(*(void *)(v319 + 8) + ((*(unsigned __int16 *)(v351 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v351 + 24)) & 1) != 0))
                  {
                    unint64_t v319 = *v346;
                  }
                }
                ++v346;
              }
              while (v346 != v347);
            }
          }
          else
          {
            unint64_t v319 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 424))(v11, v318, 0);
          }
          int v394 = (unsigned __int16)v312 >> 3;
          if ((unsigned __int16)v312 >> 3)
          {
            unint64_t IncompleteVirtualRegister = v319 & 0xFFFFFFFFFFFFFFFBLL;
            do
            {
              int v403 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v314, "", 0);
              *(void *)(*(void *)(v314 + 24) + 16 * (v403 & 0x7FFFFFFF)) = IncompleteVirtualRegister;
              uint64_t v404 = *(void *)(v314 + 8);
              if (v404) {
                (*(void (**)(uint64_t))(*(void *)v404 + 24))(v404);
              }
              if (v703 >= (unint64_t)HIDWORD(v703)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)&v702[4 * v703] = v403;
              LODWORD(v703) = v703 + 1;
              --v394;
            }
            while (v394);
          }
          uint64_t v395 = (uint64_t *)(*(void *)(v277 + 40) + 16 * v650);
          sub_1CD7D6674((uint64_t)v688, (uint64_t)&v702, v318, *v395, v395[1]);
          uint64_t v190 = v662;
          uint64_t v396 = *(void *)v662;
          int v397 = *(_DWORD *)(v662 + 816);
          uint64_t v683 = 0;
          LODWORD(v684) = v397;
          if (v396)
          {
            uint64_t v398 = (void **)(v396 + 48);
            if (v398 != &v683)
            {
              uint64_t v399 = *v398;
              uint64_t v683 = v399;
              if (v399) {
                llvm::MetadataTracking::track((uint64_t)&v683, (unsigned __int8 *)v399, 2);
              }
            }
          }
          sub_1CD7D6A08((uint64_t)v688, v277, v650, *(void **)(v662 + 832), (const llvm::APInt *)&v683, (uint64_t *)&v672, (uint64_t *)&v673, (unsigned __int8 *)v652, 0xC8u);
          uint64_t v400 = v200 + 80;
          if (v200[103] < 0) {
            uint64_t v400 = *(const char **)v658;
          }
          int v401 = atoi(v400);
          sub_1CD7D6D94((uint64_t)v688, 1uLL, 1, v401, (const llvm::APInt *)&v683, *(void **)(v662 + 832), (uint64_t)&__p);
          if (v683)
          {
            int v402 = *(unsigned __int8 *)v683;
            if ((v402 - 4) > 0x1E)
            {
              if ((v402 - 3) >= 0xFFFFFFFE) {
                uint64_t v458 = v683;
              }
              else {
                uint64_t v458 = 0;
              }
              if ((v402 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v459 = (unint64_t)v458 + 8;
                goto LABEL_676;
              }
              if (v402 == 3) {
                *((void *)v683 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v683 + 1) & 0x7F) == 2 || *((_DWORD *)v683 + 3))
            {
              uint64_t v474 = *((void *)v683 + 2);
              if ((v474 & 4) != 0)
              {
                unint64_t v459 = v474 & 0xFFFFFFFFFFFFFFF8;
                if (v459)
                {
LABEL_676:
                  uint64_t v679 = &v683;
                  sub_1CC5FA668(v459 + 16, &v679);
                }
              }
            }
          }
          sub_1CD7E86AC((uint64_t)v688);
          if (v702 != (char *)v704) {
            free(v702);
          }
          goto LABEL_378;
        }
        if ((v278 & 0x80) != 0) {
          unsigned int v326 = *(const char **)v658;
        }
        else {
          unsigned int v326 = v200 + 80;
        }
        int v328 = atoi(v326);
        uint64_t v329 = *(void *)(v662 + 832);
        uint64_t v330 = *(void *)v662;
        int v331 = *(_DWORD *)(v662 + 816);
        v688[0] = 0;
        LODWORD(v688[1]) = v331;
        uint64_t v332 = v329;
        if (v330)
        {
          int v333 = (void **)(v330 + 48);
          uint64_t v332 = v329;
          if (v333 != v688)
          {
            uint64_t v334 = *v333;
            v688[0] = v334;
            uint64_t v332 = v329;
            if (v334)
            {
              llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v334, 2);
              uint64_t v332 = *(void *)(v662 + 832);
            }
          }
        }
        unsigned __int8 v335 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 32))(v11, *(void *)(**(void **)(v332 + 40) + 40) + 272, 0);
        int v336 = sub_1CD7EBF14(v329, (unsigned __int16)v312 | (v328 << 16) | 0x80000000, (const llvm::APInt *)v688, (llvm *)v335, 0, 1, 0);
        unint64_t v338 = v336;
        uint64_t v339 = v337;
        uint64_t v340 = v669;
        if (v669 >= v670)
        {
          unint64_t IncompleteVirtualRegister = (unint64_t)__p;
          uint64_t v341 = (v669 - (unsigned char *)__p) >> 4;
          unint64_t v342 = v341 + 1;
          if ((unint64_t)(v341 + 1) >> 60) {
            goto LABEL_964;
          }
          uint64_t v343 = v670 - (unsigned char *)__p;
          if ((v670 - (unsigned char *)__p) >> 3 > v342) {
            unint64_t v342 = v343 >> 3;
          }
          if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v344 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v344 = v342;
          }
          if (v344)
          {
            if (v344 >> 60) {
              goto LABEL_968;
            }
            uint64_t v345 = (char *)operator new(16 * v344);
          }
          else
          {
            uint64_t v345 = 0;
          }
          uint64_t v435 = (uint64_t **)&v345[16 * v341];
          *uint64_t v435 = v338;
          v435[1] = v339;
          uint64_t v436 = v435;
          if (v340 != (_DWORD *)IncompleteVirtualRegister)
          {
            do
            {
              unsigned __int8 v437 = (uint64_t *)*((void *)v340 - 2);
              v340 -= 4;
              int v438 = v340[2];
              *(v436 - 2) = v437;
              v436 -= 2;
              *((_DWORD *)v436 + 2) = v438;
            }
            while (v340 != (_DWORD *)IncompleteVirtualRegister);
            uint64_t v340 = __p;
          }
          uint64_t v274 = (char *)(v435 + 2);
          __n128 __p = v436;
          uint64_t v669 = (char *)(v435 + 2);
          uint64_t v670 = &v345[16 * v344];
          if (v340) {
            operator delete(v340);
          }
        }
        else
        {
          *(void *)uint64_t v669 = v336;
          *((void *)v340 + 1) = v337;
          uint64_t v274 = (char *)(v340 + 4);
        }
        uint64_t v669 = v274;
        if (v688[0])
        {
          int v439 = *(unsigned __int8 *)v688[0];
          if ((v439 - 4) > 0x1E)
          {
            if ((v439 - 3) >= 0xFFFFFFFE) {
              uint64_t v450 = v688[0];
            }
            else {
              uint64_t v450 = 0;
            }
            if ((v439 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v451 = (unint64_t)v450 + 8;
              goto LABEL_659;
            }
            if (v439 == 3) {
              *((void *)v688[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v688[0] + 1) & 0x7F) == 2 || *((_DWORD *)v688[0] + 3))
          {
            uint64_t v473 = *((void *)v688[0] + 2);
            if ((v473 & 4) != 0)
            {
              unint64_t v451 = v473 & 0xFFFFFFFFFFFFFFF8;
              if (v451)
              {
LABEL_659:
                __int16 v702 = (char *)v688;
                sub_1CC5FA668(v451 + 16, &v702);
                uint64_t v274 = v669;
              }
            }
          }
        }
        int v440 = (char *)__p;
        uint64_t v441 = (char *)__p + 16 * i + 16;
        if (v274 < v670)
        {
          *(_OWORD *)uint64_t v274 = *v441;
          uint64_t v430 = v274 + 16;
          goto LABEL_646;
        }
        unint64_t IncompleteVirtualRegister = (v274 - (unsigned char *)__p) >> 4;
        unint64_t v442 = IncompleteVirtualRegister + 1;
        if ((IncompleteVirtualRegister + 1) >> 60) {
          goto LABEL_964;
        }
        uint64_t v443 = v670 - (unsigned char *)__p;
        if ((v670 - (unsigned char *)__p) >> 3 > v442) {
          unint64_t v442 = v443 >> 3;
        }
        if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v372 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v372 = v442;
        }
        if (v372)
        {
          if (v372 >> 60) {
            goto LABEL_968;
          }
          uint64_t v373 = (char *)operator new(16 * v372);
        }
        else
        {
          uint64_t v373 = 0;
        }
        uint64_t v374 = &v373[16 * IncompleteVirtualRegister];
        *(_OWORD *)uint64_t v374 = *v441;
        uint64_t v375 = v374;
        if (v274 != v440)
        {
          do
          {
            uint64_t v446 = *((void *)v274 - 2);
            v274 -= 16;
            int v447 = *((_DWORD *)v274 + 2);
            *((void *)v375 - 2) = v446;
            v375 -= 16;
            *((_DWORD *)v375 + 2) = v447;
          }
          while (v274 != v440);
LABEL_643:
          uint64_t v274 = (char *)__p;
        }
LABEL_644:
        uint64_t v430 = v374 + 16;
        __n128 __p = v375;
        uint64_t v669 = v374 + 16;
        uint64_t v670 = &v373[16 * v372];
        if (v274) {
          operator delete(v274);
        }
LABEL_646:
        uint64_t v190 = v662;
LABEL_647:
        uint64_t v669 = v430;
        goto LABEL_378;
      }
      int v302 = *((_DWORD *)v200 + 26);
      if ((v302 - 2) < 2) {
        goto LABEL_569;
      }
      if (v302 == 4) {
        goto LABEL_422;
      }
      if (v302 == 5)
      {
        if (v200[13])
        {
          *((_DWORD *)v200 + 26) = 2;
LABEL_569:
          if ((v278 & 0x80u) == 0) {
            char v405 = v200 + 80;
          }
          else {
            char v405 = (char *)*((void *)v200 + 10);
          }
          if ((v278 & 0x80u) == 0) {
            uint64_t v406 = v278;
          }
          else {
            uint64_t v406 = *((void *)v200 + 11);
          }
          int v407 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)v11 + 2056))(v11, v405, v406);
          uint64_t v408 = *(void *)(v190 + 832);
          uint64_t v409 = *(void *)v190;
          int v410 = *(_DWORD *)(v190 + 816);
          v688[0] = 0;
          LODWORD(v688[1]) = v410;
          if (v409)
          {
            char v411 = (void **)(v409 + 48);
            if (v411 != v688)
            {
              uint64_t v412 = *v411;
              v688[0] = v412;
              if (v412) {
                llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v412, 2);
              }
            }
          }
          uint64_t v413 = sub_1CD7EBF14(v408, (v407 << 16) | 0xEu, (const llvm::APInt *)v688, (llvm *)5, 0, 1, 0);
          __int16 v415 = v413;
          uint64_t v416 = v414;
          int v417 = v669;
          if (v669 >= v670)
          {
            uint64_t v659 = (char *)v277;
            uint64_t v418 = __p;
            uint64_t v419 = (v669 - (unsigned char *)__p) >> 4;
            unint64_t v420 = v419 + 1;
            if ((unint64_t)(v419 + 1) >> 60) {
              goto LABEL_964;
            }
            unint64_t v421 = IncompleteVirtualRegister;
            uint64_t v422 = v670 - (unsigned char *)__p;
            if ((v670 - (unsigned char *)__p) >> 3 > v420) {
              unint64_t v420 = v422 >> 3;
            }
            if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v423 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v423 = v420;
            }
            if (v423)
            {
              if (v423 >> 60) {
                goto LABEL_968;
              }
              uint64_t v424 = (char *)operator new(16 * v423);
            }
            else
            {
              uint64_t v424 = 0;
            }
            __int16 v425 = (uint64_t **)&v424[16 * v419];
            *__int16 v425 = v415;
            v425[1] = v416;
            uint64_t v426 = v425;
            if (v417 != v418)
            {
              do
              {
                unsigned int v427 = (uint64_t *)*((void *)v417 - 2);
                v417 -= 4;
                int v428 = v417[2];
                *(v426 - 2) = v427;
                v426 -= 2;
                *((_DWORD *)v426 + 2) = v428;
              }
              while (v417 != v418);
              int v417 = __p;
            }
            uint64_t v274 = (char *)(v425 + 2);
            __n128 __p = v426;
            uint64_t v669 = (char *)(v425 + 2);
            uint64_t v670 = &v424[16 * v423];
            uint64_t v190 = v662;
            if (v417) {
              operator delete(v417);
            }
            unint64_t IncompleteVirtualRegister = v421;
            uint64_t v277 = (uint64_t)v659;
          }
          else
          {
            *(void *)uint64_t v669 = v413;
            *((void *)v417 + 1) = v414;
            uint64_t v274 = (char *)(v417 + 4);
          }
          uint64_t v669 = v274;
          if (v688[0])
          {
            int v429 = *(unsigned __int8 *)v688[0];
            if ((v429 - 4) > 0x1E)
            {
              if ((v429 - 3) >= 0xFFFFFFFE) {
                uint64_t v448 = v688[0];
              }
              else {
                uint64_t v448 = 0;
              }
              if ((v429 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v449 = (unint64_t)v448 + 8;
                goto LABEL_653;
              }
              if (v429 == 3) {
                *((void *)v688[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v688[0] + 1) & 0x7F) == 2 || *((_DWORD *)v688[0] + 3))
            {
              uint64_t v472 = *((void *)v688[0] + 2);
              if ((v472 & 4) == 0)
              {
                uint64_t v190 = v662;
                goto LABEL_603;
              }
              unint64_t v449 = v472 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v190 = v662;
              if (v449)
              {
LABEL_653:
                __int16 v702 = (char *)v688;
                sub_1CC5FA668(v449 + 16, &v702);
                uint64_t v274 = v669;
              }
            }
          }
LABEL_603:
          if (v274 >= v670)
          {
            unsigned int v431 = (char *)__p;
            uint64_t v432 = (v274 - (unsigned char *)__p) >> 4;
            unint64_t v433 = v432 + 1;
            if ((unint64_t)(v432 + 1) >> 60) {
              goto LABEL_964;
            }
            uint64_t v434 = v670 - (unsigned char *)__p;
            if ((v670 - (unsigned char *)__p) >> 3 > v433) {
              unint64_t v433 = v434 >> 3;
            }
            if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v372 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v372 = v433;
            }
            if (v372)
            {
              if (v372 >> 60) {
                goto LABEL_968;
              }
              uint64_t v373 = (char *)operator new(16 * v372);
            }
            else
            {
              uint64_t v373 = 0;
            }
            uint64_t v374 = &v373[16 * v432];
            *(void *)uint64_t v374 = v277;
            *((void *)v374 + 1) = IncompleteVirtualRegister;
            uint64_t v375 = v374;
            if (v274 != v431)
            {
              do
              {
                uint64_t v444 = *((void *)v274 - 2);
                v274 -= 16;
                int v445 = *((_DWORD *)v274 + 2);
                *((void *)v375 - 2) = v444;
                v375 -= 16;
                *((_DWORD *)v375 + 2) = v445;
              }
              while (v274 != v431);
              goto LABEL_643;
            }
            goto LABEL_644;
          }
          *(void *)uint64_t v274 = v277;
          *((void *)v274 + 1) = IncompleteVirtualRegister;
LABEL_605:
          uint64_t v430 = v274 + 16;
          goto LABEL_647;
        }
LABEL_422:
        uint64_t v683 = 0;
        uint64_t v684 = 0;
        v685[0] = 0;
        (*(void (**)(char *, uint64_t, unint64_t, char *, void **, void))(*(void *)v11 + 2072))(v11, v277, IncompleteVirtualRegister, v658, &v683, *(void *)(v190 + 832));
        uint64_t v303 = v683;
        unint64_t IncompleteVirtualRegister = v684;
        if (v683 == (void *)v684)
        {
          if (*((_DWORD *)v200 + 26) == 4 && ((int v304 = *(unsigned __int16 *)(v277 + 24), v304 == 35) || v304 == 11)) {
            __int16 v305 = "value out of range for constraint '";
          }
          else {
            __int16 v305 = "invalid operand for inline asm constraint '";
          }
          __int16 v702 = (char *)v305;
          v704[0] = v200 + 80;
          LOWORD(v705) = 1027;
          v688[0] = &v702;
          *(void *)&long long v689 = "'";
          __int16 v690 = 770;
          sub_1CD7E7D58((uint64_t *)v190, (const llvm::Instruction *)v652, (const llvm::Twine *)v688);
LABEL_705:
          if (v683)
          {
            uint64_t v684 = (uint64_t)v683;
            operator delete(v683);
          }
          if (v303 == (void *)IncompleteVirtualRegister) {
            goto LABEL_925;
          }
          goto LABEL_378;
        }
        uint64_t v380 = *(void *)(v190 + 832);
        uint64_t v381 = *(void *)v190;
        int v382 = *(_DWORD *)(v190 + 816);
        v688[0] = 0;
        LODWORD(v688[1]) = v382;
        uint64_t v383 = v380;
        if (v381)
        {
          uint64_t v384 = (void **)(v381 + 48);
          uint64_t v383 = v380;
          if (v384 != v688)
          {
            uint64_t v385 = *v384;
            v688[0] = v385;
            uint64_t v383 = v380;
            if (v385)
            {
              llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v385, 2);
              uint64_t v383 = *(void *)(v190 + 832);
            }
          }
        }
        uint64_t v386 = v303;
        unsigned __int8 v387 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v11 + 32))(v11, *(void *)(**(void **)(v383 + 40) + 40) + 272, 0);
        uint64_t v388 = sub_1CD7EBF14(v380, ((IncompleteVirtualRegister - (unint64_t)v303) >> 1) & 0xFFFFFFF8 | 5, (const llvm::APInt *)v688, (llvm *)v387, 0, 1, 0);
        char v390 = v388;
        BOOL v391 = v389;
        uint64_t v392 = v669;
        if (v669 >= v670)
        {
          uint64_t v452 = __p;
          uint64_t v453 = (v669 - (unsigned char *)__p) >> 4;
          unint64_t v454 = v453 + 1;
          if ((unint64_t)(v453 + 1) >> 60) {
            goto LABEL_964;
          }
          uint64_t v455 = v670 - (unsigned char *)__p;
          if ((v670 - (unsigned char *)__p) >> 3 > v454) {
            unint64_t v454 = v455 >> 3;
          }
          if ((unint64_t)v455 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v456 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v456 = v454;
          }
          if (v456)
          {
            if (v456 >> 60) {
              goto LABEL_968;
            }
            int v457 = (char *)operator new(16 * v456);
          }
          else
          {
            int v457 = 0;
          }
          uint64_t v463 = (uint64_t **)&v457[16 * v453];
          *uint64_t v463 = v390;
          v463[1] = v391;
          uint64_t v464 = v463;
          if (v392 == v452)
          {
            uint64_t v190 = v662;
          }
          else
          {
            uint64_t v190 = v662;
            do
            {
              int v465 = (uint64_t *)*((void *)v392 - 2);
              v392 -= 4;
              int v466 = v392[2];
              *(v464 - 2) = v465;
              v464 -= 2;
              *((_DWORD *)v464 + 2) = v466;
            }
            while (v392 != v452);
            uint64_t v392 = __p;
          }
          __int16 v393 = (char *)(v463 + 2);
          __n128 __p = v464;
          uint64_t v669 = (char *)(v463 + 2);
          uint64_t v670 = &v457[16 * v456];
          if (v392) {
            operator delete(v392);
          }
        }
        else
        {
          *(void *)uint64_t v669 = v388;
          *((void *)v392 + 1) = v389;
          __int16 v393 = (char *)(v392 + 4);
        }
        uint64_t v669 = v393;
        if (v688[0])
        {
          int v467 = *(unsigned __int8 *)v688[0];
          if ((v467 - 4) > 0x1E)
          {
            if ((v467 - 3) >= 0xFFFFFFFE) {
              uint64_t v468 = v688[0];
            }
            else {
              uint64_t v468 = 0;
            }
            if ((v467 - 3) < 0xFFFFFFFE)
            {
              if (v467 == 3) {
                *((void *)v688[0] + 1) = 0;
              }
              goto LABEL_704;
            }
            unint64_t v469 = (unint64_t)v468 + 8;
          }
          else
          {
            if ((*((unsigned char *)v688[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v688[0] + 3)) {
              goto LABEL_704;
            }
            uint64_t v475 = *((void *)v688[0] + 2);
            if ((v475 & 4) == 0)
            {
              uint64_t v190 = v662;
              goto LABEL_704;
            }
            unint64_t v469 = v475 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v190 = v662;
            if (!v469) {
              goto LABEL_704;
            }
          }
          __int16 v702 = (char *)v688;
          sub_1CC5FA668(v469 + 16, &v702);
          __int16 v393 = v669;
        }
LABEL_704:
        sub_1CCFC8AB0((uint64_t)&__p, v393, (char *)v683, (char *)v684, (v684 - (uint64_t)v683) >> 4);
        uint64_t v303 = v386;
        goto LABEL_705;
      }
      if (v200[13])
      {
        __int16 v702 = "Don't know how to handle indirect register inputs yet for constraint '";
        v704[0] = v200 + 80;
        goto LABEL_775;
      }
      int v287 = v200 + 80;
      if (!*((_DWORD *)v200 + 66))
      {
        uint64_t v505 = "couldn't allocate input reg for constraint '";
LABEL_774:
        __int16 v702 = (char *)v505;
        v704[0] = v287;
LABEL_775:
        LOWORD(v705) = 1027;
        v688[0] = &v702;
        *(void *)&long long v689 = "'";
        __int16 v690 = 770;
        uint64_t v494 = (uint64_t *)v190;
LABEL_923:
        uint64_t v495 = (const llvm::Instruction *)v652;
        goto LABEL_924;
      }
      uint64_t v651 = *((void *)v200 + 17);
      uint64_t v352 = *(void *)(*(void *)(v190 + 832) + 40);
      uint64_t v353 = (*(uint64_t (**)(void))(**(void **)(v352 + 16) + 176))(*(void *)(v352 + 16));
      uint64_t v354 = *((unsigned int *)v200 + 66);
      if (v354)
      {
        uint64_t v355 = (void *)v353;
        int v356 = (unsigned int *)*((void *)v200 + 32);
        unint64_t IncompleteVirtualRegister = 4 * v354;
        while (1)
        {
          unsigned int v357 = *v356;
          if (*v356 - 1 <= 0x3FFFFFFE)
          {
            if ((*(unsigned int (**)(void *, uint64_t, void))(*v355 + 104))(v355, v352, *v356)) {
              break;
            }
          }
          ++v356;
          IncompleteVirtualRegister -= 4;
          if (!IncompleteVirtualRegister) {
            goto LABEL_499;
          }
        }
        uint64_t v502 = (unsigned char *)(v355[9] + *(unsigned int *)(v355[1] + 24 * v357));
        int v503 = *v502;
        if (*v502)
        {
          __int16 v702 = "write to reserved register '";
          v704[0] = v502;
          LOWORD(v705) = 771;
          char v504 = 2;
        }
        else
        {
          __int16 v702 = "write to reserved register '";
          LOWORD(v705) = 259;
          char v504 = 3;
        }
        uint64_t v494 = (uint64_t *)v662;
        uint64_t v495 = (const llvm::Instruction *)v652;
        BOOL v45 = v503 == 0;
        unsigned int v598 = (const char *)&v702;
        if (v45) {
          unsigned int v598 = "write to reserved register '";
        }
        v688[0] = (void *)v598;
        *(void *)&long long v689 = "'";
        LOBYTE(v690) = v504;
        goto LABEL_756;
      }
LABEL_499:
      uint64_t v190 = v662;
      uint64_t v358 = *(void *)v662;
      int v359 = *(_DWORD *)(v662 + 816);
      v688[0] = 0;
      LODWORD(v688[1]) = v359;
      BOOL v45 = v358 == 0;
      unint64_t v360 = (void **)(v358 + 48);
      if (!v45 && v360 != v688)
      {
        int v362 = *v360;
        v688[0] = v362;
        if (v362) {
          llvm::MetadataTracking::track((uint64_t)v688, (unsigned __int8 *)v362, 2);
        }
      }
      sub_1CD7D6A08((uint64_t)(v200 + 144), v277, v651, *(void **)(v662 + 832), (const llvm::APInt *)v688, (uint64_t *)&v672, (uint64_t *)&v673, (unsigned __int8 *)v652, 0xC8u);
      uint64_t v285 = *(void **)(v662 + 832);
      uint64_t v284 = (uint64_t)(v200 + 144);
      unint64_t v286 = 1;
    }
    sub_1CD7D6D94(v284, v286, 0, 0, (const llvm::APInt *)v688, v285, (uint64_t)&__p);
    if (v688[0])
    {
      int v299 = *(unsigned __int8 *)v688[0];
      if ((v299 - 4) > 0x1E)
      {
        if ((v299 - 3) >= 0xFFFFFFFE) {
          unsigned int v327 = v688[0];
        }
        else {
          unsigned int v327 = 0;
        }
        if ((v299 - 3) < 0xFFFFFFFE)
        {
          if (v299 == 3) {
            *((void *)v688[0] + 1) = 0;
          }
          goto LABEL_378;
        }
        unint64_t v301 = (unint64_t)v327 + 8;
      }
      else
      {
        if ((*((unsigned char *)v688[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v688[0] + 3)) {
          goto LABEL_378;
        }
        uint64_t v300 = *((void *)v688[0] + 2);
        if ((v300 & 4) == 0) {
          goto LABEL_378;
        }
        unint64_t v301 = v300 & 0xFFFFFFFFFFFFFFF8;
        if (!v301) {
          goto LABEL_378;
        }
      }
      __int16 v702 = (char *)v688;
      sub_1CC5FA668(v301 + 16, &v702);
    }
LABEL_378:
    v200 += 328;
    if (v200 == v654) {
      goto LABEL_739;
    }
  }
  uint64_t v486 = *(void *)(*(void *)(*(void *)(v190 + 832) + 40) + 16);
  uint64_t v487 = (*(uint64_t (**)(uint64_t))(*(void *)v486 + 176))(v486);
  uint64_t v488 = (unsigned char *)(*(void *)(v487 + 72)
                 + *(unsigned int *)(*(void *)(v487 + 8) + 24 * (v214 | v213)));
  int v489 = *v488;
  __int16 v490 = (void **)"register '";
  if (*v488)
  {
    uint64_t v679 = "register '";
    v681[0] = v488;
    __int16 v682 = 771;
    char v491 = 2;
  }
  else
  {
    uint64_t v679 = "register '";
    __int16 v682 = 259;
    char v491 = 3;
  }
  uint64_t v495 = (const llvm::Instruction *)v652;
  if (v489) {
    __int16 v490 = &v679;
  }
  uint64_t v683 = v490;
  v685[0] = "' allocated for constraint '";
  char v686 = v491;
  char v687 = 3;
  __int16 v702 = (char *)&v683;
  v704[0] = v200 + 80;
  LOWORD(v705) = 1026;
  v688[0] = &v702;
  *(void *)&long long v689 = "' does not match required type";
  __int16 v690 = 770;
  uint64_t v494 = (uint64_t *)v190;
LABEL_924:
  sub_1CD7E7D58(v494, v495, (const llvm::Twine *)v688);
LABEL_925:
  if (__p)
  {
    uint64_t v669 = (char *)__p;
    operator delete(__p);
  }
LABEL_927:
  v688[0] = &v674;
  sub_1CC27A9C0((void ***)v688);
  v599 = v699;
  if (v700)
  {
    uint64_t v600 = 328 * v700;
    do
    {
      sub_1CD7E86AC((uint64_t)&v599[v600 - 184]);
      sub_1CD50E94C((uint64_t)&v599[v600 - 328]);
      v600 -= 328;
    }
    while (v600);
    v599 = v699;
  }
  if (v599 != v701) {
    free(v599);
  }
}

void *sub_1CCFB55E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = (uint64_t *)v4;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = v7[9];
  int v11 = *(unsigned __int8 *)(*(void *)v7 + 8);
  uint64_t v12 = *(void *)v4;
  int v13 = *(_DWORD *)(v4 + 816);
  uint64_t v98 = 0;
  int v99 = v13;
  BOOL v15 = v12 == 0;
  uint64_t v14 = (unsigned __int8 **)(v12 + 48);
  BOOL v15 = v15 || v14 == &v98;
  if (!v15)
  {
    uint64_t v16 = *v14;
    uint64_t v98 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v98, v16, 2);
    }
  }
  uint64_t v17 = (v10 >> 2) & 0x3FF;
  uint64_t v18 = sub_1CD7DE5B4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
  char v19 = v18;
  unint64_t v21 = v20;
  unsigned int v22 = *((unsigned __int16 *)v18 + 12);
  if (v22 <= 0x26)
  {
    if (((1 << v22) & 0x6000006000) != 0)
    {
      uint64_t v23 = v9[104];
      uint64_t v24 = v18[10];
      uint64_t v25 = (unsigned __int8 *)v18[8];
      char v111 = v25;
      if (v25) {
        llvm::MetadataTracking::track((uint64_t)&v111, v25, 2);
      }
      int v112 = *((_DWORD *)v19 + 15);
      char v19 = sub_1CD7ECF00(v23, v24, (uint64_t)&v111, *(llvm **)v19[5], *(void *)(v19[5] + 8), 0, 1, 0);
      unint64_t v21 = v21 & 0xFFFFFFFF00000000 | v26;
      if (v111)
      {
        int v27 = *v111;
        if ((v27 - 4) > 0x1E)
        {
          if ((v27 - 3) >= 0xFFFFFFFE) {
            unsigned int v93 = v111;
          }
          else {
            unsigned int v93 = 0;
          }
          if ((v27 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v29 = (unint64_t)(v93 + 8);
LABEL_109:
            uint64_t v108 = &v111;
            sub_1CC5FA668(v29 + 16, &v108);
            goto LABEL_22;
          }
          if (v27 == 3) {
            *((void *)v111 + 1) = 0;
          }
        }
        else if ((v111[1] & 0x7F) == 2 || *((_DWORD *)v111 + 3))
        {
          uint64_t v28 = *((void *)v111 + 2);
          if ((v28 & 4) != 0)
          {
            unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            if (v29) {
              goto LABEL_109;
            }
          }
        }
      }
    }
    else if (((1 << v22) & 0x800000800) != 0)
    {
      uint64_t v30 = v18[10];
      uint64_t v31 = (uint64_t *)(v30 + 24);
      if (*(_DWORD *)(v30 + 32) >= 0x41u) {
        uint64_t v31 = (uint64_t *)*v31;
      }
      char v19 = sub_1CD7EB364(v9[104], *v31, (const llvm::APInt *)&v98, 1);
      unint64_t v21 = v21 & 0xFFFFFFFF00000000 | v32;
    }
  }
LABEL_22:
  uint64_t v33 = sub_1CD7DE5B4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96))[10];
  uint64_t v34 = (void *)(v33 + 24);
  if (*(_DWORD *)(v33 + 32) >= 0x41u) {
    uint64_t v34 = (void *)*v34;
  }
  int v35 = (void *)*v34;
  if (v17 == 13) {
    unsigned int v36 = 0;
  }
  else {
    unsigned int v36 = *v34;
  }
  if (v17 == 13)
  {
    uint64_t v38 = v9[104];
    uint64_t v37 = **(void **)(v38 + 56) + 1576;
  }
  else
  {
    uint64_t v37 = *(void *)v8;
    uint64_t v38 = v9[104];
  }
  char v111 = 0;
  int v112 = 0;
  uint64_t v113 = 0;
  __int16 v114 = v114 & 0xFC00 | 0x20;
  __int16 v115 = 0;
  uint64_t v116 = 0xFFFFFFFFLL;
  uint64_t v117 = 0;
  int v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = v38;
  uint64_t v123 = 0;
  int v124 = 0;
  uint64_t v125 = 0;
  uint64_t v126 = v128;
  uint64_t v127 = 0x2000000000;
  v128[192] = v129;
  v128[193] = 0x2000000000;
  v129[64] = v130;
  v129[65] = 0x2000000000;
  v130[192] = v131;
  v130[193] = 0x400000000;
  v131[64] = 0;
  v131[88] = 0;
  sub_1CCFC2800((uint64_t)v9, (uint64_t)&v111, v8, 4u, v36, (uint64_t)v19, v21, v37, 1);
  sub_1CD7E6E10((uint64_t)v9, (uint64_t)&v111, v6, (uint64_t)&v95);
  uint64_t v39 = v97;
  if (v11 != 7 && *(_WORD *)(v97 + 24) == 50) {
    uint64_t v39 = **(void **)(v97 + 32);
  }
  uint64_t v40 = **(void **)(v39 + 32);
  if (*(_WORD *)(v40 + 56))
  {
    uint64_t v42 = (unsigned int *)(*(void *)(v40 + 32) + 40 * (*(unsigned __int16 *)(v40 + 56) - 1));
    if (*(unsigned __int8 *)(*(void *)(*(void *)v42 + 40) + 16 * v42[2]) == 172) {
      uint64_t v41 = *(void *)v42;
    }
    else {
      uint64_t v41 = 0;
    }
  }
  else
  {
    uint64_t v41 = 0;
  }
  uint64_t v108 = v110;
  uint64_t v109 = 0x800000000;
  uint64_t v43 = sub_1CD7DE5B4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)))[10];
  int v44 = (uint64_t *)(v43 + 24);
  if (*(_DWORD *)(v43 + 32) >= 0x41u) {
    int v44 = (uint64_t *)*v44;
  }
  char v46 = sub_1CD7EBF14(v9[104], *v44, (const llvm::APInt *)&v98, (llvm *)6, 0, 1, 0);
  if (v109 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v47 = (uint64_t **)((char *)v108 + 16 * v109);
  *unsigned int v47 = v46;
  v47[1] = v45;
  LODWORD(v109) = v109 + 1;
  uint64_t v48 = sub_1CD7DE5B4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32))[10];
  char v49 = (uint64_t *)(v48 + 24);
  if (*(_DWORD *)(v48 + 32) >= 0x41u) {
    char v49 = (uint64_t *)*v49;
  }
  unsigned int v51 = sub_1CD7EBF14(v9[104], *v49, (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
  if (v109 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v52 = (uint64_t **)((char *)v108 + 16 * v109);
  *uint64_t v52 = v51;
  v52[1] = v50;
  unsigned int v53 = v109 + 1;
  LODWORD(v109) = v53;
  if (v53 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v54 = (uint64_t **)((char *)v108 + 16 * v53);
  *int v54 = v19;
  v54[1] = (uint64_t *)v21;
  LODWORD(v109) = v109 + 1;
  if (v41) {
    int v55 = -4;
  }
  else {
    int v55 = -3;
  }
  unsigned int v56 = v55 + *(unsigned __int16 *)(v40 + 56);
  if (v17 == 13) {
    unsigned int v56 = v35;
  }
  int v58 = sub_1CD7EBF14(v9[104], v56, (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
  if (v109 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v59 = (uint64_t **)((char *)v108 + 16 * v109);
  _DWORD *v59 = v58;
  v59[1] = v57;
  LODWORD(v109) = v109 + 1;
  int v61 = sub_1CD7EBF14(v9[104], v17, (const llvm::APInt *)&v98, (llvm *)5, 0, 1, 0);
  if (v109 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v62 = (uint64_t **)((char *)v108 + 16 * v109);
  *uint64_t v62 = v61;
  v62[1] = v60;
  LODWORD(v109) = v109 + 1;
  if (v17 == 13 && v35)
  {
    int v63 = 0;
    do
    {
      int v65 = sub_1CD7DE5B4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * (v63 + 4)));
      if (v109 >= (unint64_t)HIDWORD(v109)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v66 = (uint64_t **)((char *)v108 + 16 * v109);
      *unint64_t v66 = v65;
      v66[1] = v64;
      LODWORD(v109) = v109 + 1;
      ++v63;
    }
    while (v35 != v63);
  }
  uint64_t v67 = -80;
  if (!v41) {
    uint64_t v67 = -40;
  }
  sub_1CD3E560C((uint64_t)&v108, (char *)(*(void *)(v40 + 32) + 80), (char *)(*(void *)(v40 + 32) + 40 * *(unsigned __int16 *)(v40 + 56) + v67));
  sub_1CCFC2C3C((uint64_t *)v8, v35 + 4, (const llvm::APInt *)&v98, (uint64_t)&v108, (uint64_t)v9);
  uint64_t v68 = *(void *)(v40 + 32) + 40 * *(unsigned __int16 *)(v40 + 56);
  if (v41)
  {
    uint64_t v70 = *(void *)(v68 - 80);
    uint64_t v69 = *(void *)(v68 - 72);
  }
  else
  {
    uint64_t v70 = *(void *)(v68 - 40);
    uint64_t v69 = *(void *)(v68 - 32);
  }
  if (v109 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v71 = (char *)v108 + 16 * v109;
  *uint64_t v71 = v70;
  v71[1] = v69;
  unsigned int v72 = v109 + 1;
  LODWORD(v109) = v72;
  if (v72 >= HIDWORD(v109)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v108 + v72) = *(_OWORD *)*(void *)(v40 + 32);
  unsigned int v73 = v109 + 1;
  LODWORD(v109) = v109 + 1;
  if (v41)
  {
    if (v73 >= HIDWORD(v109)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v108 + v73) = *(_OWORD *)(*(void *)(v40 + 32) + 40 * *(unsigned __int16 *)(v40 + 56) - 40);
    LODWORD(v109) = v109 + 1;
  }
  BOOL v74 = v17 != 13 || v11 == 7;
  char v75 = v74;
  uint64_t v76 = v9[104];
  if (v74)
  {
    uint64_t v77 = sub_1CD7F95FC(v76, 1, 0, 172, 0);
    uint64_t v79 = v78;
  }
  else
  {
    uint64_t v80 = *(void *)(v76 + 24);
    char v104 = &v106;
    uint64_t v105 = 0x300000000;
    llvm::ComputeValueVTs(v80, (llvm::DataLayout *)(*(void *)(**(void **)(v76 + 40) + 40) + 272), *(void *)v8, (uint64_t)&v104, 0, 0, 0);
    if (v105 >= HIDWORD(v105)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v104 + v105) = xmmword_1CD91D2E0;
    unsigned int v81 = v105 + 1;
    LODWORD(v105) = v81;
    if (v81 >= HIDWORD(v105)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v104 + v81) = xmmword_1CFB2D760;
    LODWORD(v105) = v105 + 1;
    uint64_t v77 = sub_1CD7F9A18(v9[104], (uint64_t *)v104, v105);
    uint64_t v79 = v82;
    if (v104 != &v106) {
      free(v104);
    }
  }
  int v83 = sub_1CD801044(v9[104], 27, (uint64_t)&v98, v77, v79, (uint64_t *)v108, v109);
  if (v11 != 7)
  {
    if (v17 == 13)
    {
      char v104 = (void *)v8;
      uint64_t v87 = sub_1CD7E88EC(v9 + 1, &v104);
      v87[1] = v83;
      *((_DWORD *)v87 + 4) = 0;
      if (v75) {
        goto LABEL_86;
      }
      goto LABEL_88;
    }
    uint64_t v84 = v95;
    int v85 = v96;
    char v104 = (void *)v8;
    int v86 = sub_1CD7E88EC(v9 + 1, &v104);
    v86[1] = v84;
    *((_DWORD *)v86 + 4) = v85;
  }
  if (v75)
  {
LABEL_86:
    sub_1CCFCC50C(v9[104], v40, (uint64_t)v83);
    goto LABEL_89;
  }
LABEL_88:
  char v104 = (void *)v40;
  LODWORD(v105) = 0;
  uint64_t v106 = v40;
  int v107 = 1;
  uint64_t v100 = v83;
  int v101 = 1;
  uint64_t v102 = v83;
  int v103 = 2;
  sub_1CD8022D0(v9[104], (uint64_t *)&v104, (uint64_t *)&v100, 2);
LABEL_89:
  uint64_t v88 = v9[104];
  sub_1CCFCBF2C(v88, v40);
  sub_1CD7EA4EC(v88, v40);
  *(unsigned char *)(*(void *)(*(void *)(v9[114] + 8) + 56) + 40) = 1;
  if (v108 != v110) {
    free(v108);
  }
  uint64_t result = sub_1CD78F470(&v111);
  if (v98)
  {
    int v90 = *v98;
    if ((v90 - 4) > 0x1E)
    {
      if ((v90 - 3) >= 0xFFFFFFFE) {
        uint64_t v91 = v98;
      }
      else {
        uint64_t v91 = 0;
      }
      if ((v90 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v92 = (unint64_t)(v91 + 8);
LABEL_101:
        char v111 = (unsigned __int8 *)&v98;
        return (void *)sub_1CC5FA668(v92 + 16, &v111);
      }
      if (v90 == 3) {
        *((void *)v98 + 1) = 0;
      }
    }
    else if ((v98[1] & 0x7F) == 2 || *((_DWORD *)v98 + 3))
    {
      uint64_t v94 = *((void *)v98 + 2);
      if ((v94 & 4) != 0)
      {
        unint64_t v92 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (v92) {
          goto LABEL_101;
        }
      }
    }
  }
  return result;
}

void sub_1CCFB60B8(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, long long *a8)
{
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40);
  uint64_t v126 = *(void *)a2;
  uint64_t v127 = *(void *)(a2 + 72);
  __n128 __p = 0uLL;
  unint64_t v139 = 0;
  int v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 != 84)
  {
    if (v14 == 39) {
      uint64_t v12 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v12 = 2;
    }
    uint64_t v11 = a1;
  }
  int v15 = *(_DWORD *)(a2 + 20);
  if (v15 < 0 && (unint64_t v121 = a2 - 32 * (v15 & 0x7FFFFFF), v122 = *(void *)(v121 - 8), (v122 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    int v16 = *(_DWORD *)(v121 - 12) - *(_DWORD *)(v121 - v122);
  }
  else
  {
    int v16 = 0;
    uint64_t v17 = -(uint64_t)(v15 & 0x7FFFFFF);
  }
  sub_1CD78A38C((uint64_t)&__p, ((-32 * v12 + 32 * (unint64_t)-v16 - 32 * v17 - 32) >> 5));
  char v18 = 0;
  uint64_t v133 = *(void *)(*(void *)(v11 + 832) + 24);
  if (!a5) {
    goto LABEL_36;
  }
  uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 56);
  uint64_t v20 = *(void *)(v19 + 112);
  if (!v20) {
    goto LABEL_31;
  }
  if (!*(_DWORD *)(v20 + 8)) {
    goto LABEL_30;
  }
  uint64_t v20 = *(void *)(v20 + 40);
  if (!v20) {
    goto LABEL_31;
  }
  int v21 = *(_DWORD *)(v20 + 40);
  if (!v21) {
    goto LABEL_30;
  }
  uint64_t v22 = *(void *)(v20 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v120 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v120 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v120;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v23 = __ROR8__(qword_1EBCBE580 ^ 0xAE2F6180382EB467, 30);
  unint64_t v24 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                                    * ((v23 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580
                                                                                     + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v23 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580 + 0x1ED4D83DFEF8CF66))));
  unsigned int v25 = -348639895 * ((v24 >> 47) ^ v24);
  int v26 = 1;
  uint64_t v11 = a1;
  while (1)
  {
    unsigned int v27 = v25 & (v21 - 1);
    uint64_t v28 = (uint64_t *)(v22 + 24 * v27);
    uint64_t v29 = *v28;
    if (*v28 == -1)
    {
      if ("disable-tail-calls" == (char *)-1) {
        goto LABEL_27;
      }
      goto LABEL_13;
    }
    if (v29 != -2) {
      break;
    }
    if ("disable-tail-calls" == (char *)-2) {
      goto LABEL_27;
    }
LABEL_13:
    if (v29 == -1) {
      goto LABEL_30;
    }
    unsigned int v25 = v26 + v27;
    ++v26;
  }
  if (v28[1] != 18) {
    goto LABEL_13;
  }
  BOOL v30 = *(void *)v29 == 0x2D656C6261736964 && *(void *)(v29 + 8) == 0x6C61632D6C696174;
  if (!v30 || *(_WORD *)(v29 + 16) != 29548) {
    goto LABEL_13;
  }
LABEL_27:
  uint64_t v20 = v28[2];
  if (v20)
  {
    if (*(_DWORD *)(v20 + 16) == 4)
    {
      LODWORD(v20) = *(_DWORD *)(v20 + *(unsigned int *)(v20 + 12) + 25) == 1702195828;
      goto LABEL_31;
    }
LABEL_30:
    LODWORD(v20) = 0;
  }
LABEL_31:
  int v32 = v20 ^ 1 | a6;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v133 + 1768))(v133))
  {
    uint64_t v33 = *(void *)(v19 + 112);
    if (v33)
    {
      if (*(char *)(v33 + 31) < 0) {
        int v32 = 0;
      }
    }
  }
  char v18 = v32 != 0;
LABEL_36:
  int v34 = *(_DWORD *)(a2 + 20);
  int v35 = (llvm::Type ***)(a2 - 32 * (v34 & 0x7FFFFFF));
  int v36 = *(unsigned __int8 *)(a2 + 16);
  if (v36 == 84)
  {
    uint64_t v37 = 0;
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_167:
    uint64_t v123 = (uint64_t)*(v35 - 1);
    if ((v123 & 0xFFFFFFFF0) != 0) {
      uint64_t v38 = (*((_DWORD *)v35 - 3) - *(_DWORD *)((char *)v35 - v123));
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v11 = a1;
  }
  else
  {
    if (v36 == 39) {
      uint64_t v37 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v37 = 2;
    }
    uint64_t v11 = a1;
    if (v34 < 0) {
      goto LABEL_167;
    }
LABEL_38:
    uint64_t v38 = 0;
  }
  uint64_t v39 = a2 - 32 * v37 - 32 * v38 - 32;
  if (v35 != (llvm::Type ***)v39)
  {
    unsigned __int8 v131 = 0;
    uint64_t v124 = v13 + 272;
    while (1)
    {
      long long v141 = 0u;
      *(_OWORD *)char v142 = 0u;
      *(_DWORD *)&v142[16] = *(_WORD *)&v142[16] & 0xC000;
      *(void *)&v142[24] = 0;
      char v49 = *v35;
      if ((llvm::Type::isEmptyTy(**v35) & 1) == 0)
      {
        *((void *)&v141 + 1) = sub_1CD7DE5B4(v11, (unsigned __int8 *)v49);
        *(_DWORD *)char v142 = v50;
        *(void *)&v142[8] = *v49;
        sub_1CD80D26C((uint64_t)&v141, a2, ((unint64_t)&v35[4 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)] - a2) >> 5);
        if ((*(_WORD *)&v142[16] & 0x1000) != 0
          && (*(unsigned int (**)(uint64_t))(*(void *)v133 + 1768))(v133))
        {
          uint64_t v66 = *(void *)(v11 + 832);
          int VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(*(llvm::SwiftErrorValueTracking **)(v11 + 920), a2, *(const llvm::MachineBasicBlock **)(*(void *)(v11 + 912) + 640), (const llvm::Value *)v49);
          unsigned __int8 v68 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v133 + 32))(v133, v124, 0);
          *((void *)&v141 + 1) = sub_1CD7EEB94(v66, VRegUseAt, (llvm *)v68, 0);
          *(_DWORD *)char v142 = v69;
          unsigned __int8 v131 = (const llvm::Value *)v49;
        }
        unsigned int v51 = (_OWORD *)__p.n128_u64[1];
        if (__p.n128_u64[1] >= v139)
        {
          unint64_t v55 = __p.n128_u64[0];
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
          unint64_t v57 = v56 + 1;
          if (v56 + 1 > 0x555555555555555) {
            goto LABEL_147;
          }
          if (0x5555555555555556 * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4) > v57) {
            unint64_t v57 = 0x5555555555555556 * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v58 = 0x555555555555555;
          }
          else {
            unint64_t v58 = v57;
          }
          if (v58)
          {
            if (v58 > 0x555555555555555) {
              goto LABEL_149;
            }
            int v59 = (char *)operator new(48 * v58);
          }
          else
          {
            int v59 = 0;
          }
          int v60 = &v59[48 * v56];
          long long v61 = *(_OWORD *)v142;
          *(_OWORD *)int v60 = v141;
          *((_OWORD *)v60 + 1) = v61;
          *((_OWORD *)v60 + 2) = *(_OWORD *)&v142[16];
          unint64_t v62 = (unint64_t)v60;
          if (v51 == (_OWORD *)v55)
          {
            uint64_t v11 = a1;
          }
          else
          {
            uint64_t v11 = a1;
            do
            {
              long long v63 = *(v51 - 3);
              long long v64 = *(v51 - 1);
              *(_OWORD *)(v62 - 32) = *(v51 - 2);
              *(_OWORD *)(v62 - 16) = v64;
              *(_OWORD *)(v62 - 48) = v63;
              v62 -= 48;
              v51 -= 3;
            }
            while (v51 != (_OWORD *)v55);
            unsigned int v51 = (_OWORD *)v55;
          }
          int v65 = &v59[48 * v58];
          unint64_t v54 = (unint64_t)(v60 + 48);
          __p.n128_u64[0] = v62;
          __p.n128_u64[1] = (unint64_t)(v60 + 48);
          unint64_t v139 = (unint64_t)v65;
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          long long v52 = v141;
          long long v53 = *(_OWORD *)&v142[16];
          *(_OWORD *)(__p.n128_u64[1] + 16) = *(_OWORD *)v142;
          v51[2] = v53;
          _OWORD *v51 = v52;
          unint64_t v54 = (unint64_t)(v51 + 3);
        }
        __p.n128_u64[1] = v54;
        if ((v142[16] & 8) != 0) {
          v18 &= *((unsigned __int8 *)v49 + 16) < 0x1Cu;
        }
      }
      v35 += 4;
      if (v35 == (llvm::Type ***)v39) {
        goto LABEL_41;
      }
    }
  }
  unsigned __int8 v131 = 0;
LABEL_41:
  sub_1CC233A58((char *)a2, 3, (uint64_t *)&v141);
  if (v142[8])
  {
    uint64_t v41 = *(uint64_t **)v141;
    uint64_t v42 = sub_1CD7DE5B4(v11, *(unsigned __int8 **)v141);
    int v44 = v42;
    unsigned int v45 = v43;
    uint64_t v46 = *v41;
    unint64_t v47 = __p.n128_u64[1];
    if (__p.n128_u64[1] >= v139)
    {
      unint64_t v70 = __p.n128_u64[0];
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
      unint64_t v72 = v71 + 1;
      if (v71 + 1 > 0x555555555555555) {
LABEL_147:
      }
        abort();
      if (0x5555555555555556 * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4) > v72) {
        unint64_t v72 = 0x5555555555555556 * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139 - __p.n128_u64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v73 = 0x555555555555555;
      }
      else {
        unint64_t v73 = v72;
      }
      if (v73)
      {
        if (v73 > 0x555555555555555) {
LABEL_149:
        }
          sub_1CB833614();
        BOOL v74 = (char *)operator new(48 * v73);
      }
      else
      {
        BOOL v74 = 0;
      }
      unint64_t v75 = (unint64_t)&v74[48 * v71];
      *(void *)unint64_t v75 = 0;
      *(void *)(v75 + 8) = v44;
      uint64_t v76 = &v74[48 * v73];
      *(_DWORD *)(v75 + 16) = v45;
      *(_DWORD *)(v75 + 20) = 0;
      *(void *)(v75 + 24) = v46;
      *(_DWORD *)(v75 + 32) = 0x2000;
      *(void *)(v75 + 40) = 0;
      unint64_t v48 = v75 + 48;
      if (v47 == v70)
      {
        uint64_t v11 = a1;
      }
      else
      {
        uint64_t v11 = a1;
        do
        {
          long long v77 = *(_OWORD *)(v47 - 48);
          long long v78 = *(_OWORD *)(v47 - 16);
          *(_OWORD *)(v75 - 32) = *(_OWORD *)(v47 - 32);
          *(_OWORD *)(v75 - 16) = v78;
          *(_OWORD *)(v75 - 48) = v77;
          v75 -= 48;
          v47 -= 48;
        }
        while (v47 != v70);
        unint64_t v47 = v70;
      }
      __p.n128_u64[0] = v75;
      __p.n128_u64[1] = v48;
      unint64_t v139 = (unint64_t)v76;
      if (v47) {
        operator delete((void *)v47);
      }
    }
    else
    {
      *(void *)__p.n128_u64[1] = 0;
      *(void *)(v47 + 8) = v42;
      *(void *)(v47 + 16) = v43;
      *(void *)(v47 + 24) = v46;
      *(_DWORD *)(v47 + 32) = 0x2000;
      unint64_t v48 = v47 + 48;
      *(void *)(v47 + 40) = 0;
    }
    __p.n128_u64[1] = v48;
  }
  if (v18) {
    char v79 = llvm::isInTailCallPosition((llvm *)a2, **(const llvm::CallBase ***)(v11 + 832), v40);
  }
  else {
    char v79 = 0;
  }
  char v80 = (*(uint64_t (**)(uint64_t))(*(void *)v133 + 1768))(v133);
  uint64_t v81 = *(void *)(v11 + 832);
  *(void *)&long long v141 = 0;
  char v82 = ((v131 == 0) | ~v80) & v79;
  DWORD2(v141) = 0;
  *(void *)char v142 = 0;
  *(_DWORD *)&v142[8] = *(_WORD *)&v142[8] & 0xFC00 | 0x20;
  *(void *)&v142[12] = 0xFFFFFFFFLL;
  *(void *)&v142[24] = 0;
  int v143 = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = (void *)v81;
  uint64_t v148 = 0;
  int v149 = 0;
  uint64_t v150 = 0;
  int v151 = v153;
  uint64_t v152 = 0x2000000000;
  v153[192] = v154;
  v153[193] = 0x2000000000;
  v154[64] = &v155;
  v154[65] = 0x2000000000;
  unint64_t v156 = &v158;
  uint64_t v157 = 0x400000000;
  LOBYTE(v159) = 0;
  char v161 = 0;
  uint64_t v83 = *(void *)v11;
  int v84 = *(_DWORD *)(v11 + 816);
  unsigned int v134 = 0;
  LODWORD(v135) = v84;
  if (v83)
  {
    int v85 = (unsigned __int8 **)(v83 + 48);
    if (v85 != &v134)
    {
      int v86 = *v85;
      unsigned int v134 = v86;
      if (!v86) {
        goto LABEL_97;
      }
      llvm::MetadataTracking::track((uint64_t)&v134, v86, 2);
      if (v148)
      {
        int v115 = *v148;
        if ((v115 - 4) > 0x1E)
        {
          if ((v115 - 3) >= 0xFFFFFFFE) {
            uint64_t v116 = v148;
          }
          else {
            uint64_t v116 = 0;
          }
          if ((v115 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v117 = (unint64_t)(v116 + 8);
            goto LABEL_141;
          }
          if (v115 == 3) {
            *((void *)v148 + 1) = 0;
          }
        }
        else if ((v148[1] & 0x7F) == 2 || *((_DWORD *)v148 + 3))
        {
          uint64_t v119 = *((void *)v148 + 2);
          if ((v119 & 4) != 0)
          {
            unint64_t v117 = v119 & 0xFFFFFFFFFFFFFFF8;
            if (v117)
            {
LABEL_141:
              int v140 = &v148;
              sub_1CC5FA668(v117 + 16, &v140);
            }
          }
        }
      }
    }
    uint64_t v148 = v134;
    if (v134) {
      llvm::MetadataTracking::track((uint64_t)&v148, v134, 2);
    }
  }
  else
  {
LABEL_97:
    uint64_t v148 = 0;
  }
  int v149 = v135;
  *(void *)&long long v141 = sub_1CD7D7360(v11);
  DWORD2(v141) = v87;
  sub_1CD7E6F48((uint64_t)&v141, v126, v127, a3, a4, &__p, a2);
  v142[10] = v82;
  uint64_t v88 = *(void *)(a2 + 64);
  if (v88 && (*(unsigned char *)(v88 + 12) & 0x40) != 0)
  {
    __int16 v90 = *(_WORD *)&v142[8];
LABEL_101:
    __int16 v91 = 64;
  }
  else
  {
    int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6);
    __int16 v90 = *(_WORD *)&v142[8];
    if (hasFnAttrOnCalledFunction) {
      goto LABEL_101;
    }
    __int16 v91 = 0;
  }
  *(_WORD *)&v142[8] = v91 | v90 & 0xFFBF;
  __int16 v92 = sub_1CC646CF4(a2, 4) != 0;
  *(_WORD *)&v142[8] = *(_WORD *)&v142[8] & 0xFEFF | (v92 << 8);
  if (v134)
  {
    int v93 = *v134;
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        uint64_t v113 = v134;
      }
      else {
        uint64_t v113 = 0;
      }
      if ((v93 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v114 = (unint64_t)(v113 + 8);
        goto LABEL_126;
      }
      if (v93 == 3) {
        *((void *)v134 + 1) = 0;
      }
    }
    else if ((v134[1] & 0x7F) == 2 || *((_DWORD *)v134 + 3))
    {
      uint64_t v118 = *((void *)v134 + 2);
      if ((v118 & 4) != 0)
      {
        unint64_t v114 = v118 & 0xFFFFFFFFFFFFFFF8;
        if (v114)
        {
LABEL_126:
          int v140 = &v134;
          sub_1CC5FA668(v114 + 16, &v140);
        }
      }
    }
  }
  if (a8)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v133 + 1784))(v133) & 1) == 0) {
      llvm::report_fatal_error((llvm *)"This target doesn't support calls with ptrauth operand bundles.", (const llvm::Twine *)1);
    }
    long long v159 = *a8;
    uint64_t v160 = *((void *)a8 + 2);
    if (!v161) {
      char v161 = 1;
    }
  }
  sub_1CD7E6E10(v11, (uint64_t)&v141, a7, (uint64_t)&v134);
  if (v134)
  {
    uint64_t v94 = (unsigned __int8 *)sub_1CD7E3664((uint64_t *)v11, *(void *)(v11 + 832), (llvm::Instruction *)a2, (uint64_t)v134, v135);
    unsigned int v134 = v94;
    LODWORD(v135) = v95;
    int v96 = v95;
    int v140 = (unsigned __int8 **)a2;
    uint64_t v97 = sub_1CD7E88EC((uint64_t *)(v11 + 8), &v140);
    v97[1] = v94;
    *((_DWORD *)v97 + 4) = v96;
  }
  if (v131 && (*(unsigned int (**)(uint64_t))(*(void *)v133 + 1768))(v133))
  {
    uint64_t v98 = &v156[2 * v157];
    uint64_t v99 = *(v98 - 2);
    uint64_t v100 = *(v98 - 1);
    int VRegDefAt = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt(*(llvm::SwiftErrorValueTracking **)(v11 + 920), a2, *(const llvm::MachineBasicBlock **)(*(void *)(v11 + 912) + 640), v131);
    uint64_t v102 = v147;
    uint64_t v103 = v136;
    uint64_t v104 = v137;
    uint64_t v105 = *(void *)(v99 + 40) + 16 * v100;
    uint64_t v106 = sub_1CD7EEB94((uint64_t)v147, VRegDefAt, *(llvm **)v105, *(void *)(v105 + 8));
    uint64_t v109 = v102[104];
    if (v109) {
      LOWORD(v109) = *(_WORD *)(v109 + 8);
    }
    int v110 = sub_1CD7F5D38(v102, (const char *)0x31, (const llvm::APInt *)&v148, (llvm *)1, 0, v103, v104, v108, v106, v107, v99, v100, SHIDWORD(v100), v109);
    uint64_t v111 = *(void *)(a1 + 832);
    *(void *)(v111 + 192) = v110;
    *(_DWORD *)(v111 + 200) = v112;
  }
  sub_1CD78F470(&v141);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

uint64_t sub_1CCFB6D38(llvm::Type **this, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, llvm::Type *a7)
{
  uint64_t v13 = *(void *)(a6 + 832);
  uint64_t v14 = *(void *)(v13 + 24);
  int v15 = (llvm::DataLayout *)(*(void *)(**(void **)(v13 + 40) + 40) + 272);
  unsigned int v16 = *((unsigned __int8 *)this + 16);
  if (this && v16 <= 0x14)
  {
    SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)this, 0);
    uint64_t result = 0;
    if (SplatValue)
    {
      *(void *)a2 = sub_1CD7DE5B4(a6, SplatValue);
      *(_DWORD *)(a2 + 8) = v19;
      uint64_t v20 = (llvm::Type *)(*((unsigned int *)*this + 8) | ((unint64_t)(*((unsigned char *)*this + 8) == 19) << 32));
      int v21 = *(llvm::LLVMContext **)(v13 + 56);
      unsigned __int8 v22 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *, void))(*(void *)v14 + 32))(v14, v15, 0);
      uint64_t v23 = (llvm *)sub_1CB882C1C(v21, v22, 0, v20);
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)a6;
      int v27 = *(_DWORD *)(a6 + 816);
      long long v63 = 0;
      int v64 = v27;
      if (v26)
      {
        uint64_t v28 = (unsigned __int8 **)(v26 + 48);
        if (v28 != &v63)
        {
          uint64_t v29 = *v28;
          long long v63 = v29;
          if (v29) {
            llvm::MetadataTracking::track((uint64_t)&v63, v29, 2);
          }
        }
      }
      *(void *)a3 = sub_1CD7EBF14(v13, 0, (const llvm::APInt *)&v63, v23, v25, 0, 0);
      *(_DWORD *)(a3 + 8) = v30;
      if (!v63) {
        goto LABEL_12;
      }
      int v31 = *v63;
      if ((v31 - 4) > 0x1E)
      {
        if ((v31 - 3) >= 0xFFFFFFFE) {
          unsigned int v45 = v63;
        }
        else {
          unsigned int v45 = 0;
        }
        if ((v31 - 3) < 0xFFFFFFFE)
        {
          if (v31 == 3) {
            *((void *)v63 + 1) = 0;
          }
          goto LABEL_12;
        }
        unint64_t v46 = (unint64_t)(v45 + 8);
      }
      else
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          goto LABEL_12;
        }
        uint64_t v62 = *((void *)v63 + 2);
        if ((v62 & 4) == 0) {
          goto LABEL_12;
        }
        unint64_t v46 = v62 & 0xFFFFFFFFFFFFFFF8;
        if (!v46) {
          goto LABEL_12;
        }
      }
      int v65 = &v63;
      sub_1CC5FA668(v46 + 16, &v65);
LABEL_12:
      *a4 = 0;
      uint64_t v32 = *(void *)a6;
      int v33 = *(_DWORD *)(a6 + 816);
      long long v63 = 0;
      int v64 = v33;
      if (v32)
      {
        int v34 = (unsigned __int8 **)(v32 + 48);
        if (v34 != &v63)
        {
          int v35 = *v34;
          long long v63 = v35;
          if (v35) {
            llvm::MetadataTracking::track((uint64_t)&v63, v35, 2);
          }
        }
      }
      int v36 = (llvm *)(*(unsigned __int8 (**)(uint64_t, llvm::DataLayout *, void))(*(void *)v14 + 32))(v14, v15, 0);
      uint64_t v37 = v13;
      uint64_t v38 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t result = 0;
    if (this && v16 == 62)
    {
      if (this[5] == a7 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 2)
      {
        uint64_t v41 = (unsigned __int8 *)*(this - 8);
        if ((*(_DWORD *)(*(void *)v41 + 8) & 0xFE) != 0x12)
        {
          uint64_t v42 = (unsigned __int8 *)*(this - 4);
          if ((*(_DWORD *)(*(void *)v42 + 8) & 0xFE) == 0x12)
          {
            *(void *)a2 = sub_1CD7DE5B4(a6, v41);
            *(_DWORD *)(a2 + 8) = v47;
            *(void *)a3 = sub_1CD7DE5B4(a6, v42);
            *(_DWORD *)(a3 + 8) = v48;
            *a4 = 0;
            char v49 = this[9];
            unint64_t v50 = (unint64_t)(sub_1CB83544C((uint64_t)v15, (uint64_t)v49) + 7) >> 3;
            BOOL v52 = v51 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v15, v49, 1);
            uint64_t v55 = ((1 << Alignment) + v50 - 1) & -(1 << Alignment);
            if (v52) {
            uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
            }
            v56.i16[0] = vaddlv_u8(v56);
            if (v56.u32[0] == 1)
            {
              uint64_t v57 = *(void *)a6;
              int v58 = *(_DWORD *)(a6 + 816);
              long long v63 = 0;
              int v64 = v58;
              if (v57)
              {
                int v59 = (unsigned __int8 **)(v57 + 48);
                if (v59 != &v63)
                {
                  int v60 = *v59;
                  long long v63 = v60;
                  if (v60) {
                    llvm::MetadataTracking::track((uint64_t)&v63, v60, 2);
                  }
                }
              }
              int v36 = (llvm *)(*(unsigned __int8 (**)(uint64_t, llvm::DataLayout *, void))(*(void *)v14 + 32))(v14, v15, 0);
              uint64_t v37 = v13;
              uint64_t v38 = v55;
LABEL_17:
              *(void *)a5 = sub_1CD7EBF14(v37, v38, (const llvm::APInt *)&v63, v36, 0, 1, 0);
              *(_DWORD *)(a5 + 8) = v39;
              if (v63)
              {
                int v40 = *v63;
                if ((v40 - 4) > 0x1E)
                {
                  if ((v40 - 3) >= 0xFFFFFFFE) {
                    unsigned int v43 = v63;
                  }
                  else {
                    unsigned int v43 = 0;
                  }
                  if ((v40 - 3) < 0xFFFFFFFE)
                  {
                    if (v40 == 3) {
                      *((void *)v63 + 1) = 0;
                    }
                    return 1;
                  }
                  unint64_t v44 = (unint64_t)(v43 + 8);
                }
                else
                {
                  if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
                    return 1;
                  }
                  uint64_t v61 = *((void *)v63 + 2);
                  if ((v61 & 4) == 0) {
                    return 1;
                  }
                  unint64_t v44 = v61 & 0xFFFFFFFFFFFFFFF8;
                  if (!v44) {
                    return 1;
                  }
                }
                int v65 = &v63;
                sub_1CC5FA668(v44 + 16, &v65);
              }
              return 1;
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_1CCFB71D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a2 - 32) + 112);
  uint64_t v144 = *(void *)(a2 - 32);
  if (!v6)
  {
    uint64_t v167 = (uint64_t *)v169;
    uint64_t v168 = 0x800000000;
LABEL_6:
    uint64_t v9 = sub_1CD7D7360(a1);
    int v8 = 0;
    int v145 = 0;
    unint64_t v10 = (uint64_t **)&v167[2 * v168];
    unsigned char *v10 = v9;
    v10[1] = v11;
    LODWORD(v168) = v168 + 1;
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(v6 + 17);
  if ((v7 & 0x10) != 0)
  {
    int v145 = 0;
    uint64_t v167 = (uint64_t *)v169;
    uint64_t v168 = 0x800000000;
    int v8 = 1;
    goto LABEL_8;
  }
  uint64_t v167 = (uint64_t *)v169;
  uint64_t v168 = 0x800000000;
  if ((v7 & 0x20) == 0) {
    goto LABEL_6;
  }
  int v8 = 0;
  v169[0] = *(_OWORD *)(*(void *)(a1 + 832) + 192);
  int v145 = 1;
  LODWORD(v168) = 1;
LABEL_8:
  int v154 = 0;
  LOBYTE(v155) = 0;
  unint64_t v159 = 0;
  int v160 = 256;
  int v158 = 0;
  uint64_t v156 = 0;
  unint64_t v157 = 0;
  uint64_t v12 = *(void *)(a1 + 832);
  uint64_t v13 = *(void *)(v12 + 24);
  int v14 = (*(uint64_t (**)(uint64_t, int *, uint64_t, void, uint64_t))(*(void *)v13 + 472))(v13, &v154, a2, *(void *)(v12 + 40), a3);
  if (v14) {
    BOOL v15 = (v154 - 49) >= 0xFFFFFFFE;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 832);
    uint64_t v17 = *(void *)a1;
    int v18 = *(_DWORD *)(a1 + 816);
    uint64_t v164 = 0;
    LODWORD(v165) = v18;
    uint64_t v19 = v16;
    if (v17)
    {
      uint64_t v20 = (void **)(v17 + 48);
      uint64_t v19 = v16;
      if (v20 != &v164)
      {
        int v21 = *v20;
        uint64_t v164 = v21;
        uint64_t v19 = v16;
        if (v21)
        {
          llvm::MetadataTracking::track((uint64_t)&v164, (unsigned __int8 *)v21, 2);
          uint64_t v19 = *(void *)(a1 + 832);
        }
      }
    }
    unsigned __int8 v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v13 + 32))(v13, *(void *)(**(void **)(v19 + 40) + 40) + 272, 0);
    uint64_t v24 = sub_1CD7EBF14(v16, a3, (const llvm::APInt *)&v164, (llvm *)v22, 0, 1, 0);
    if (v168 >= HIDWORD(v168)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = (uint64_t **)&v167[2 * v168];
    *uint64_t v25 = v24;
    v25[1] = v23;
    LODWORD(v168) = v168 + 1;
    if (v164)
    {
      int v26 = *(unsigned __int8 *)v164;
      if ((v26 - 4) > 0x1E)
      {
        if ((v26 - 3) >= 0xFFFFFFFE) {
          uint64_t v94 = v164;
        }
        else {
          uint64_t v94 = 0;
        }
        if ((v26 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v95 = (unint64_t)v94 + 8;
LABEL_116:
          *(void *)&v147[0] = &v164;
          sub_1CC5FA668(v95 + 16, v147);
          goto LABEL_22;
        }
        if (v26 == 3) {
          *((void *)v164 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v164 + 1) & 0x7F) == 2 || *((_DWORD *)v164 + 3))
      {
        uint64_t v132 = *((void *)v164 + 2);
        if ((v132 & 4) != 0)
        {
          unint64_t v95 = v132 & 0xFFFFFFFFFFFFFFF8;
          if (v95) {
            goto LABEL_116;
          }
        }
      }
    }
  }
LABEL_22:
  int v27 = *(unsigned __int8 *)(a2 + 16);
  char v146 = v8;
  if (v27 == 84)
  {
    uint64_t v28 = 0;
  }
  else if (v27 == 39)
  {
    uint64_t v28 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v28 = 2;
  }
  int v29 = *(_DWORD *)(a2 + 20);
  if (v29 < 0 && (v135 = a2 - 32 * (v29 & 0x7FFFFFF), uint64_t v136 = *(void *)(v135 - 8), (v136 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v31 = -(uint64_t)(v29 & 0x7FFFFFF);
    uint64_t v30 = (*(_DWORD *)(v135 - 12) - *(_DWORD *)(v135 - v136));
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = -(uint64_t)(v29 & 0x7FFFFFF);
  }
  unint64_t v32 = -32 * v28 - 32 * v30 - 32 * v31 - 32;
  if ((v32 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v51 = 0;
    uint64_t v52 = (v32 >> 5);
    uint64_t v53 = a2;
    do
    {
      unint64_t v54 = *(unsigned __int8 **)(v53 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if ((llvm::CallBase::paramHasAttr(a2, v51, 9) & 1) == 0)
      {
        int v65 = sub_1CD7DE5B4(a1, v54);
        if (v168 >= (unint64_t)HIDWORD(v168)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v66 = (uint64_t **)&v167[2 * v168];
        *uint64_t v66 = v65;
        v66[1] = v64;
        LODWORD(v168) = v168 + 1;
        goto LABEL_54;
      }
      uint8x8_t v56 = (llvm *)sub_1CB87DC14(v13, *(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272, *(llvm::EVT **)v54, (llvm::Type *)1);
      uint64_t v57 = *(void *)(a1 + 832);
      if (v54[16] == 16)
      {
        uint64_t v164 = 0;
        uint64_t v165 = 0;
        int v58 = sub_1CD7EC028(v57, (uint64_t)v54, (const llvm::APInt *)&v164, v56, v55, 1, 0);
      }
      else
      {
        uint64_t v164 = 0;
        uint64_t v165 = 0;
        int v58 = sub_1CD7ECAFC(v57, (uint64_t)v54, (uint64_t)&v164, v56, v55, 1);
      }
      if (v168 >= (unint64_t)HIDWORD(v168)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v60 = (uint64_t **)&v167[2 * v168];
      *int v60 = v58;
      v60[1] = v59;
      LODWORD(v168) = v168 + 1;
      if (v164)
      {
        int v61 = *(unsigned __int8 *)v164;
        if ((v61 - 4) > 0x1E)
        {
          if ((v61 - 3) >= 0xFFFFFFFE) {
            uint64_t v62 = v164;
          }
          else {
            uint64_t v62 = 0;
          }
          if ((v61 - 3) < 0xFFFFFFFE)
          {
            if (v61 == 3) {
              *((void *)v164 + 1) = 0;
            }
            goto LABEL_54;
          }
          unint64_t v63 = (unint64_t)v62 + 8;
        }
        else
        {
          if ((*((unsigned char *)v164 + 1) & 0x7F) != 2 && !*((_DWORD *)v164 + 3)) {
            goto LABEL_54;
          }
          uint64_t v67 = *((void *)v164 + 2);
          if ((v67 & 4) == 0) {
            goto LABEL_54;
          }
          unint64_t v63 = v67 & 0xFFFFFFFFFFFFFFF8;
          if (!v63) {
            goto LABEL_54;
          }
        }
        *(void *)&v147[0] = &v164;
        sub_1CC5FA668(v63 + 16, v147);
      }
LABEL_54:
      ++v51;
      v53 += 32;
    }
    while (v52 != v51);
  }
  uint64_t v164 = v166;
  uint64_t v165 = 0x400000000;
  llvm::ComputeValueVTs(v13, (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), *(void *)a2, (uint64_t)&v164, 0, 0, 0);
  unsigned int v33 = v165;
  if ((v8 & 1) == 0)
  {
    if (v165 >= HIDWORD(v165)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v164 + v165) = xmmword_1CD91D2E0;
    unsigned int v33 = v165 + 1;
    LODWORD(v165) = v165 + 1;
  }
  uint64_t v34 = sub_1CD7F9A18(*(void *)(a1 + 832), (uint64_t *)v164, v33);
  uint64_t v36 = v35;
  __int16 v153 = 0;
  BOOL v37 = sub_1CB845E74(a2);
  __int16 v38 = 0;
  if (v37)
  {
    sub_1CD7E166C(&v153, a2);
    __int16 v38 = v153;
  }
  int v39 = *(void **)(a1 + 832);
  uint64_t v150 = v39;
  __int16 v151 = v38;
  uint64_t v152 = v39[104];
  v39[104] = &v150;
  if (v14)
  {
    int v96 = v154;
    uint64_t v97 = *(void *)a1;
    int v98 = *(_DWORD *)(a1 + 816);
    uint64_t v148 = 0;
    int v149 = v98;
    if (v97)
    {
      uint64_t v99 = (unsigned __int8 **)(v97 + 48);
      if (v99 != &v148)
      {
        uint64_t v100 = *v99;
        uint64_t v148 = v100;
        if (v100) {
          llvm::MetadataTracking::track((uint64_t)&v148, v100, 2);
        }
      }
    }
    unint64_t v101 = v157;
    int v143 = v96;
    uint64_t v141 = v168;
    char v142 = v167;
    uint64_t v139 = v156;
    uint64_t v140 = v155;
    uint64_t v138 = v158;
    if (v157 < 8)
    {
      unsigned int v105 = 0;
    }
    else
    {
      uint64_t v102 = (_DWORD *)(v157 & 0xFFFFFFFFFFFFFFF8);
      if ((v157 & 4) != 0 || !v102)
      {
        unsigned int v105 = v102[3];
      }
      else
      {
        uint64_t v103 = *(void *)v102;
        unsigned int v104 = *(_DWORD *)(*(void *)v102 + 8);
        if ((v104 & 0xFE) == 0x12) {
          unsigned int v104 = *(_DWORD *)(**(void **)(v103 + 16) + 8);
        }
        unsigned int v105 = v104 >> 8;
      }
    }
    unsigned int v119 = (unsigned __int16)v160;
    __int16 v137 = HIWORD(v160);
    unint64_t v120 = v159;
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v147);
    *(void *)&long long v161 = v101;
    *((void *)&v161 + 1) = v138;
    unsigned int v162 = v105;
    char v163 = 0;
    char v121 = sub_1CD7EA9CC((uint64_t)v39, v140, v139);
    if (v119 >= 0x100) {
      char v123 = v119;
    }
    else {
      char v123 = v121;
    }
    uint64_t v48 = (uint64_t)sub_1CD7F9BA0((uint64_t)v39, v143, (uint64_t)&v148, v34, v36, v142, v141, v122, v140, v139, &v161, v123, 0, v137, v120, v147);
    LODWORD(v36) = v124;
    if (v148)
    {
      int v125 = *v148;
      if ((v125 - 4) > 0x1E)
      {
        if ((v125 - 3) >= 0xFFFFFFFE) {
          uint64_t v126 = v148;
        }
        else {
          uint64_t v126 = 0;
        }
        if ((v125 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v127 = (unint64_t)(v126 + 8);
LABEL_167:
          *(void *)&v147[0] = &v148;
          sub_1CC5FA668(v127 + 16, v147);
          goto LABEL_160;
        }
        if (v125 == 3) {
          *((void *)v148 + 1) = 0;
        }
      }
      else if ((v148[1] & 0x7F) == 2 || *((_DWORD *)v148 + 3))
      {
        uint64_t v133 = *((void *)v148 + 2);
        if ((v133 & 4) != 0)
        {
          unint64_t v127 = v133 & 0xFFFFFFFFFFFFFFF8;
          if (v127) {
            goto LABEL_167;
          }
        }
      }
    }
LABEL_160:
    uint64_t v36 = v36;
    if (v146) {
      goto LABEL_93;
    }
    goto LABEL_89;
  }
  if (v8)
  {
    uint64_t v40 = *(void *)a1;
    int v41 = *(_DWORD *)(a1 + 816);
    *(void *)&v147[0] = 0;
    DWORD2(v147[0]) = v41;
    if (v40
      && (uint64_t v42 = (long long *)(v40 + 48), v42 != v147)
      && (unsigned int v43 = *(unsigned __int8 **)v42, (*(void *)&v147[0] = v43) != 0))
    {
      llvm::MetadataTracking::track((uint64_t)v147, v43, 2);
      unint64_t v46 = (void *)v39[104];
      unint64_t v44 = v167;
      uint64_t v45 = v168;
      if (!v46)
      {
        __int16 v47 = 0;
LABEL_39:
        uint64_t v48 = (uint64_t)sub_1CD7FF854(v39, (const char *)0x2E, (const llvm::APInt *)v147, v34, v36, v44, v45, v47);
        LODWORD(v36) = v49;
        if (*(void *)&v147[0])
        {
          int v50 = **(unsigned char **)&v147[0];
          if ((v50 - 4) > 0x1E)
          {
            if ((v50 - 3) >= 0xFFFFFFFE) {
              uint64_t v90 = *(void *)&v147[0];
            }
            else {
              uint64_t v90 = 0;
            }
            if ((v50 - 3) < 0xFFFFFFFE)
            {
              if (v50 == 3) {
                *(void *)(*(void *)&v147[0] + 8) = 0;
              }
              goto LABEL_43;
            }
            unint64_t v91 = v90 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)&v147[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v147[0] + 12)) {
              goto LABEL_43;
            }
            uint64_t v130 = *(void *)(*(void *)&v147[0] + 16);
            if ((v130 & 4) == 0) {
              goto LABEL_43;
            }
            unint64_t v91 = v130 & 0xFFFFFFFFFFFFFFF8;
            if (!v91) {
              goto LABEL_43;
            }
          }
          *(void *)&long long v161 = v147;
          sub_1CC5FA668(v91 + 16, &v161);
        }
LABEL_43:
        uint64_t v36 = v36;
        goto LABEL_93;
      }
    }
    else
    {
      unint64_t v44 = v167;
      uint64_t v45 = v168;
      unint64_t v46 = &v150;
    }
    __int16 v47 = *((_WORD *)v46 + 4);
    goto LABEL_39;
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 7)
  {
    uint64_t v68 = *(void *)a1;
    int v69 = *(_DWORD *)(a1 + 816);
    *(void *)&v147[0] = 0;
    DWORD2(v147[0]) = v69;
    if (v68
      && (unint64_t v70 = (long long *)(v68 + 48), v70 != v147)
      && (unint64_t v71 = *(unsigned __int8 **)v70, (*(void *)&v147[0] = v71) != 0))
    {
      llvm::MetadataTracking::track((uint64_t)v147, v71, 2);
      BOOL v74 = (void *)v39[104];
      unint64_t v72 = v167;
      uint64_t v73 = v168;
      if (!v74)
      {
        __int16 v75 = 0;
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v72 = v167;
      uint64_t v73 = v168;
      BOOL v74 = &v150;
    }
    __int16 v75 = *((_WORD *)v74 + 4);
LABEL_77:
    uint64_t v76 = v39;
    uint64_t v77 = 48;
    goto LABEL_84;
  }
  uint64_t v78 = *(void *)a1;
  int v79 = *(_DWORD *)(a1 + 816);
  *(void *)&v147[0] = 0;
  DWORD2(v147[0]) = v79;
  if (v78
    && (char v80 = (long long *)(v78 + 48), v80 != v147)
    && (uint64_t v81 = *(unsigned __int8 **)v80, (*(void *)&v147[0] = v81) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)v147, v81, 2);
    char v82 = (void *)v39[104];
    unint64_t v72 = v167;
    uint64_t v73 = v168;
    if (!v82)
    {
      __int16 v75 = 0;
      goto LABEL_83;
    }
  }
  else
  {
    unint64_t v72 = v167;
    uint64_t v73 = v168;
    char v82 = &v150;
  }
  __int16 v75 = *((_WORD *)v82 + 4);
LABEL_83:
  uint64_t v76 = v39;
  uint64_t v77 = 47;
LABEL_84:
  uint64_t v48 = (uint64_t)sub_1CD7FF854(v76, (const char *)v77, (const llvm::APInt *)v147, v34, v36, v72, v73, v75);
  LODWORD(v36) = v83;
  if (*(void *)&v147[0])
  {
    int v84 = **(unsigned char **)&v147[0];
    if ((v84 - 4) > 0x1E)
    {
      if ((v84 - 3) >= 0xFFFFFFFE) {
        uint64_t v92 = *(void *)&v147[0];
      }
      else {
        uint64_t v92 = 0;
      }
      if ((v84 - 3) < 0xFFFFFFFE)
      {
        if (v84 == 3) {
          *(void *)(*(void *)&v147[0] + 8) = 0;
        }
        goto LABEL_88;
      }
      unint64_t v93 = v92 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v147[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v147[0] + 12)) {
        goto LABEL_88;
      }
      uint64_t v131 = *(void *)(*(void *)&v147[0] + 16);
      if ((v131 & 4) == 0) {
        goto LABEL_88;
      }
      unint64_t v93 = v131 & 0xFFFFFFFFFFFFFFF8;
      if (!v93) {
        goto LABEL_88;
      }
    }
    *(void *)&long long v161 = v147;
    sub_1CC5FA668(v93 + 16, &v161);
  }
LABEL_88:
  uint64_t v36 = v36;
LABEL_89:
  uint64_t v85 = *(unsigned __int16 *)(v48 + 58) - 1;
  if (v145)
  {
    unsigned int v86 = *(_DWORD *)(a1 + 112);
    if (v86 >= *(_DWORD *)(a1 + 116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v87 = (uint64_t *)(*(void *)(a1 + 104) + 16 * v86);
    *int v87 = v48;
    v87[1] = v85;
    ++*(_DWORD *)(a1 + 112);
  }
  else
  {
    uint64_t v88 = *(void *)(a1 + 832);
    *(void *)(v88 + 192) = v48;
    *(_DWORD *)(v88 + 200) = v85;
  }
LABEL_93:
  int v89 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (v89 == 7) {
    goto LABEL_94;
  }
  if ((v89 & 0xFE) != 0x12)
  {
    uint64_t v48 = sub_1CD7E3664((uint64_t *)a1, *(void *)(a1 + 832), (llvm::Instruction *)a2, v48, v36);
    LODWORD(v36) = v106;
  }
  __int16 v107 = sub_1CC63020C(a2);
  int v108 = HIBYTE(v107);
  if (HIBYTE(v107))
  {
    char v110 = v107;
  }
  else
  {
    *(void *)&v147[0] = *(void *)(v144 + 112);
    Retchar Alignment = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)v147);
    char v110 = RetAlignment;
    int v108 = HIBYTE(RetAlignment);
  }
  if (byte_1EBCFA000 && v108)
  {
    uint64_t v111 = *(void *)(a1 + 832);
    uint64_t v112 = *(void *)a1;
    int v113 = *(_DWORD *)(a1 + 816);
    *(void *)&v147[0] = 0;
    DWORD2(v147[0]) = v113;
    if (v112)
    {
      unint64_t v114 = (long long *)(v112 + 48);
      if (v114 != v147)
      {
        int v115 = *(unsigned __int8 **)v114;
        *(void *)&v147[0] = v115;
        if (v115) {
          llvm::MetadataTracking::track((uint64_t)v147, v115, 2);
        }
      }
    }
    uint64_t v48 = (uint64_t)sub_1CD7F5594(v111, (uint64_t)v147, v48, v36, v110);
    LODWORD(v36) = v116;
    if (*(void *)&v147[0])
    {
      int v117 = **(unsigned char **)&v147[0];
      if ((v117 - 4) > 0x1E)
      {
        if ((v117 - 3) >= 0xFFFFFFFE) {
          uint64_t v128 = *(void *)&v147[0];
        }
        else {
          uint64_t v128 = 0;
        }
        if ((v117 - 3) < 0xFFFFFFFE)
        {
          if (v117 == 3) {
            *(void *)(*(void *)&v147[0] + 8) = 0;
          }
          goto LABEL_149;
        }
        unint64_t v129 = v128 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*(void *)&v147[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v147[0] + 12)) {
          goto LABEL_149;
        }
        uint64_t v134 = *(void *)(*(void *)&v147[0] + 16);
        if ((v134 & 4) == 0) {
          goto LABEL_149;
        }
        unint64_t v129 = v134 & 0xFFFFFFFFFFFFFFF8;
        if (!v129) {
          goto LABEL_149;
        }
      }
      *(void *)&long long v161 = v147;
      sub_1CC5FA668(v129 + 16, &v161);
    }
  }
LABEL_149:
  *(void *)&v147[0] = a2;
  uint64_t v118 = sub_1CD7E88EC((uint64_t *)(a1 + 8), v147);
  v118[1] = v48;
  *((_DWORD *)v118 + 4) = v36;
LABEL_94:
  v150[104] = v152;
  if (v164 != v166) {
    free(v164);
  }
  if (v167 != (uint64_t *)v169) {
    free(v167);
  }
}

unint64_t sub_1CCFB7F14(unint64_t result, uint64_t *a2)
{
  unint64_t v2 = result;
  while (1)
  {
    uint64_t v3 = *a2;
    unsigned int v4 = *(unsigned __int16 *)(*a2 + 24);
    if (v4 <= 0x91) {
      break;
    }
    if (*(unsigned __int16 *)(*a2 + 24) > 0xD7u)
    {
      if (v4 != 216) {
        return result;
      }
    }
    else if (v4 != 201)
    {
      if (v4 != 146 && v4 != 149) {
        return result;
      }
      goto LABEL_14;
    }
LABEL_9:
    a2 = *(uint64_t **)(v3 + 32);
  }
  if (v4 - 3 < 2) {
    goto LABEL_9;
  }
  if (v4 == 54)
  {
LABEL_14:
    if (*(_WORD *)(v3 + 56))
    {
      uint64_t v5 = *(long long **)(v3 + 32);
      uint64_t v6 = 40 * *(unsigned __int16 *)(v3 + 56);
      do
      {
        long long v7 = *v5;
        uint64_t v5 = (long long *)((char *)v5 + 40);
        long long v14 = v7;
        uint64_t result = sub_1CCFB7F14(v2, &v14);
        v6 -= 40;
      }
      while (v6);
    }
    return result;
  }
  if (v4 == 50)
  {
    uint64_t v8 = *(void *)(v3 + 32);
    uint64_t v9 = *(void *)(v8 + 40);
    int v10 = *(_DWORD *)(v9 + 76);
    long long v13 = *(_OWORD *)(*(void *)(v9 + 40) + 16 * *(unsigned int *)(v8 + 48));
    if ((_BYTE)v13) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v13);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v13);
    }
    *(void *)&long long v14 = ExtendedSizeInBits;
    *((void *)&v14 + 1) = v12;
    return sub_1CD7883BC(v2, v10, &v14);
  }
  return result;
}

void sub_1CCFB8030(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = a2 + 16;
    for (uint64_t i = 24 * a3; i; i -= 24)
    {
      if (*v6 == 1) {
      unsigned int v8 = *(v6 - 2);
      }
      uint64_t v9 = **(uint64_t ****)a1;
      llvm::DIExpression::getFragmentInfo(v9[3], v9[4], &v28);
      if (v29)
      {
        if (v28.i64[0] < (unint64_t)(v4 + v8) && v28.i64[0] > (unint64_t)v4) {
          unsigned int v8 = v28.i32[0] - v4;
        }
        if (v28.i64[0] <= (unint64_t)v4) {
          return;
        }
      }
      FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v9, v4, v8);
      char v13 = (char)v11;
      if (*v6 == 1) {
      int v14 = *(v6 - 2);
      }
      if (v13)
      {
        sub_1CCFB829C(*(void *)(a1 + 40), *(v6 - 4), FragmentExpression, **(_DWORD **)(a1 + 48) != 0);
        uint64_t v15 = *(void *)(v5 + 912);
        unint64_t v16 = *(unsigned int *)(v15 + 232);
        if (v16 >= *(unsigned int *)(v15 + 236)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v15 + 224) + 8 * v16) = a2;
        ++*(_DWORD *)(v15 + 232);
        goto LABEL_17;
      }
      uint64_t v17 = *(void *)(v5 + 832);
      uint64_t v18 = **(void **)(a1 + 16);
      uint64_t v19 = **(void **)a1;
      uint64_t v20 = llvm::UndefValue::get(***(llvm::UndefValue ****)(a1 + 24), (llvm::Type *)v11);
      int v21 = **(unsigned __int8 ***)(a1 + 32);
      int v27 = v21;
      if (v21) {
        llvm::MetadataTracking::track((uint64_t)&v27, v21, 2);
      }
      unsigned __int8 v22 = (void *)sub_1CD801A38(v17, v18, v19, (uint64_t)v20, &v27, *(_DWORD *)(v5 + 816));
      if (v27)
      {
        int v23 = *v27;
        if ((v23 - 4) > 0x1E)
        {
          if ((v23 - 3) >= 0xFFFFFFFE) {
            uint64_t v24 = v27;
          }
          else {
            uint64_t v24 = 0;
          }
          if ((v23 - 3) < 0xFFFFFFFE)
          {
            if (v23 == 3) {
              *((void *)v27 + 1) = 0;
            }
            goto LABEL_25;
          }
          unint64_t v25 = (unint64_t)(v24 + 8);
        }
        else
        {
          if ((v27[1] & 0x7F) != 2 && !*((_DWORD *)v27 + 3)) {
            goto LABEL_25;
          }
          uint64_t v26 = *((void *)v27 + 2);
          if ((v26 & 4) == 0) {
            goto LABEL_25;
          }
          unint64_t v25 = v26 & 0xFFFFFFFFFFFFFFF8;
          if (!v25) {
            goto LABEL_25;
          }
        }
        v28.i64[0] = (uint64_t)&v27;
        sub_1CC5FA668(v25 + 16, &v28);
      }
LABEL_25:
      sub_1CD801DD0(*(void *)(v5 + 832), v22, 0);
LABEL_17:
      unsigned int v4 = (const llvm::DIExpression *)(v4 + v14);
      v6 += 6;
    }
  }
}

llvm::MachineFunction *sub_1CCFB829C(uint64_t a1, int a2, llvm::DIExpression *a3, int a4)
{
  if (a2 < 0 && llvm::MachineFunction::useDebugInstrRef(*(llvm::MachineFunction **)a1))
  {
    unsigned int v8 = *(llvm::MachineFunction **)a1;
    uint64_t v9 = *(void *)(**(void **)(a1 + 8) + 8) + 720;
    int v10 = **(unsigned __int8 ***)(a1 + 16);
    char v29 = v10;
    if (v10)
    {
      llvm::MetadataTracking::track((uint64_t)&v29, v10, 2);
      uint64_t v34 = v29;
      if (v29) {
        llvm::MetadataTracking::track((uint64_t)&v34, v29, 2);
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v11 = llvm::MachineFunction::CreateMachineInstr(v8, v9, &v34, 0);
    if (!v34)
    {
LABEL_6:
      if (v29)
      {
        int v12 = *v29;
        if ((v12 - 4) > 0x1E)
        {
          if ((v12 - 3) >= 0xFFFFFFFE) {
            int v21 = v29;
          }
          else {
            int v21 = 0;
          }
          if ((v12 - 3) < 0xFFFFFFFE)
          {
            if (v12 == 3) {
              *((void *)v29 + 1) = 0;
            }
            goto LABEL_10;
          }
          unint64_t v22 = (unint64_t)(v21 + 8);
          goto LABEL_35;
        }
        if ((v29[1] & 0x7F) == 2 || *((_DWORD *)v29 + 3))
        {
          uint64_t v24 = *((void *)v29 + 2);
          if ((v24 & 4) != 0)
          {
            unint64_t v22 = v24 & 0xFFFFFFFFFFFFFFF8;
            if (v22)
            {
LABEL_35:
              uint64_t v30 = &v29;
              sub_1CC5FA668(v22 + 16, &v30);
            }
          }
        }
      }
LABEL_10:
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      LODWORD(v30) = 0;
      HIDWORD(v30) = a2;
      uint64_t v33 = 0;
      llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v30);
      LODWORD(v30) = 1;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v30);
      char v13 = **(llvm::DIExpression ***)(a1 + 24);
      LODWORD(v30) = 14;
      uint64_t v31 = 0;
      unint64_t v32 = v13;
      llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v30);
      if (a4) {
        a3 = llvm::DIExpression::prepend(a3, (const llvm::DIExpression *)1, 0);
      }
      LODWORD(v30) = 14;
      uint64_t v31 = 0;
      unint64_t v32 = a3;
      llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v30);
      return v8;
    }
    int v25 = *v34;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        int8x16_t v28 = v34;
      }
      else {
        int8x16_t v28 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_6;
      }
      unint64_t v27 = (unint64_t)(v28 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_6;
      }
      uint64_t v26 = *((void *)v34 + 2);
      if ((v26 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (!v27) {
        goto LABEL_6;
      }
    }
    uint64_t v30 = &v34;
    sub_1CC5FA668(v27 + 16, &v30);
    goto LABEL_6;
  }
  int v14 = *(llvm::MachineFunction **)a1;
  uint64_t v15 = *(void *)(**(void **)(a1 + 8) + 8) + 624;
  unint64_t v16 = **(unsigned __int8 ***)(a1 + 16);
  uint64_t v34 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v34, v16, 2);
  }
  unsigned int v8 = llvm::BuildMI(v14, &v34, v15, a4, a2, **(void **)(a1 + 24), (uint64_t)a3);
  if (v34)
  {
    int v17 = *v34;
    if ((v17 - 4) <= 0x1E)
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        return v8;
      }
      uint64_t v23 = *((void *)v34 + 2);
      if ((v23 & 4) == 0) {
        return v8;
      }
      unint64_t v20 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        return v8;
      }
LABEL_25:
      uint64_t v30 = &v34;
      sub_1CC5FA668(v20 + 16, &v30);
      return v8;
    }
    if ((v17 - 3) >= 0xFFFFFFFE) {
      uint64_t v19 = v34;
    }
    else {
      uint64_t v19 = 0;
    }
    if ((v17 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v19 + 8);
      goto LABEL_25;
    }
    if (v17 == 3) {
      *((void *)v34 + 1) = 0;
    }
  }
  return v8;
}

void sub_1CCFB85C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v9 = v4;
  uint64_t v2136 = *MEMORY[0x1E4F143B8];
  int v10 = *(uint64_t **)(*(void *)(v4 + 832) + 24);
  uint64_t v11 = *(void *)v4;
  int v12 = *(_DWORD *)(v4 + 816);
  v2112 = 0;
  int v2113 = v12;
  if (v11
    && ((unsigned __int8 **)(v11 + 48) == &v2112
     || (char v13 = *(unsigned __int8 **)(v11 + 48), (v2112 = v13) == 0)
     || (llvm::MetadataTracking::track((uint64_t)&v2112, v13, 2), (uint64_t v11 = *(void *)v9) != 0)))
  {
    int v14 = *(unsigned __int8 **)(v11 + 48);
    v2111 = v14;
    if (v14) {
      llvm::MetadataTracking::track((uint64_t)&v2111, v14, 2);
    }
  }
  else
  {
    v2111 = 0;
  }
  __int16 v2110 = 0;
  if (sub_1CB845E74(v8)) {
    sub_1CD7E166C(&v2110, v8);
  }
  switch((int)v6)
  {
    case 1:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v897;
      uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v898 = (uint64_t *)(v446[5] + 16 * v897);
      uint64_t v450 = *v898;
      uint64_t v454 = v898[1];
      uint64_t v899 = *((void *)v455 + 104);
      if (v899) {
        __int16 v453 = *(_WORD *)(v899 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v456 = 174;
      goto LABEL_863;
    case 2:
      uint64_t v945 = *(void *)(v9 + 832);
      uint64_t v458 = (llvm *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v945 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v460 = v946;
      uint64_t v461 = v945;
      int v462 = 24;
      goto LABEL_607;
    case 3:
      uint64_t v693 = *(void *)(v9 + 832);
      unsigned __int8 v694 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(v693 + 40) + 40) + 272, 0);
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v695;
      uint64_t v450 = v694;
      uint64_t v696 = *(void *)(v693 + 832);
      if (v696) {
        __int16 v453 = *(_WORD *)(v696 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = (llvm::APFloatBase *)v693;
      uint64_t v456 = 283;
      goto LABEL_810;
    case 4:
    case 77:
    case 166:
    case 245:
    case 290:
      uint64_t v158 = (uint64_t)sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      goto LABEL_864;
    case 5:
      uint64_t v857 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v858 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v860 = (uint64_t *)(v858[5] + 16 * v859);
      uint64_t v628 = *v860;
      uint64_t v607 = v860[1];
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v861;
      __int16 v453 = v2110;
      uint64_t v455 = v857;
      uint64_t v456 = 288;
      goto LABEL_856;
    case 6:
    case 12:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 64:
    case 70:
    case 78:
    case 120:
    case 121:
    case 125:
    case 138:
    case 150:
    case 152:
    case 155:
    case 156:
    case 159:
    case 160:
    case 161:
    case 162:
    case 165:
    case 171:
    case 172:
    case 178:
    case 179:
    case 188:
    case 189:
    case 190:
    case 191:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 241:
    case 242:
    case 243:
    case 246:
    case 247:
    case 248:
    case 250:
    case 251:
    case 253:
    case 261:
    case 270:
    case 281:
    case 289:
    case 291:
    case 292:
    case 293:
    case 294:
    case 297:
    case 298:
    case 299:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
      goto LABEL_18;
    case 7:
    case 60:
    case 126:
    case 163:
    case 266:
    case 267:
    case 268:
    case 269:
    case 272:
    case 316:
      goto LABEL_867;
    case 8:
      uint64_t v931 = *(llvm::APFloatBase **)(v9 + 832);
      v932 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      v934 = (uint64_t *)(v932[5] + 16 * v933);
      uint64_t v628 = *v934;
      uint64_t v607 = v934[1];
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v935;
      uint64_t v936 = *((void *)v931 + 104);
      if (v936) {
        __int16 v453 = *(_WORD *)(v936 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = v931;
      uint64_t v456 = 186;
      goto LABEL_856;
    case 9:
      uint64_t v624 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v625 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v627 = (uint64_t *)(v625[5] + 16 * v626);
      uint64_t v628 = *v627;
      uint64_t v607 = v627[1];
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v629;
      uint64_t v630 = *((void *)v624 + 104);
      if (v630) {
        __int16 v453 = *(_WORD *)(v630 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = v624;
      uint64_t v456 = 182;
LABEL_856:
      uint64_t v450 = v628;
      goto LABEL_862;
    case 10:
      uint64_t v865 = sub_1CCFC1B34(*(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 8));
      uint64_t v866 = sub_1CD7EF3FC(*(void **)(v9 + 832), v865);
      int v868 = v867;
      for (uint64_t i = 0; i != 6; i += 2)
      {
        uint64_t v870 = &v2119[i];
        *uint64_t v870 = 0;
        *((_DWORD *)v870 + 2) = 0;
      }
      v2119[0] = sub_1CD7D7360(v9);
      LODWORD(v2119[1]) = v871;
      *(void *)v2120 = v866;
      *(_DWORD *)&v2120[8] = v868;
      *(void *)&v2120[16] = sub_1CD7EC028(*(void *)(v9 + 832), *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32), (const llvm::APInt *)&v2112, (llvm *)5, 0, 1, 0);
      LODWORD(v2121) = v872;
      uint64_t v873 = *(void *)(v9 + 832);
      unsigned __int8 v874 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(v873 + 40) + 40) + 272, 0);
      uint64_t v876 = sub_1CD7F95FC(v873, v874, 0, 1, 0);
      __int16 v877 = 0;
      uint64_t v878 = *(void *)(v873 + 832);
      if (v878) {
        __int16 v877 = *(_WORD *)(v878 + 8);
      }
      unint64_t v879 = sub_1CD7FF854((void *)v873, (const char *)0x114, (const llvm::APInt *)&v2112, v876, v875, (uint64_t *)v2119, 3, v877);
      int v881 = v880;
      v2117[0] = (void *)v8;
      uint64_t v882 = (uint64_t *)(v9 + 8);
      uint64_t v883 = v2117;
      goto LABEL_629;
    case 11:
      uint64_t v636 = sub_1CCFC1B34(*(void *)(v8 + 8));
      uint64_t v637 = sub_1CD7EF3FC(*(void **)(v9 + 832), v636);
      uint64_t v639 = v638;
      uint64_t v640 = *(void *)(v9 + 832);
      int v642 = sub_1CD7D7360(v9);
      uint64_t v644 = *(void *)(v640 + 832);
      if (v644) {
        LOWORD(v644) = *(_WORD *)(v644 + 8);
      }
      __int16 v645 = sub_1CCFDED5C(v640, 275, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v642, v641, v643, (uint64_t)v637, v639, v644);
      goto LABEL_778;
    case 13:
    case 14:
    case 51:
    case 139:
    case 140:
    case 203:
    case 258:
    case 259:
    case 260:
    case 273:
    case 280:
    case 296:
      if ((int)v6 > 257)
      {
        if ((int)v6 > 272)
        {
          if (v6 == 273)
          {
            uint64_t v128 = 226;
          }
          else if (v6 == 280)
          {
            uint64_t v128 = 224;
          }
          else
          {
            uint64_t v128 = 236;
          }
        }
        else if (v6 == 258)
        {
          uint64_t v128 = 237;
        }
        else if (v6 == 259)
        {
          uint64_t v128 = 239;
        }
        else
        {
          uint64_t v128 = 240;
        }
      }
      else if ((int)v6 > 138)
      {
        if (v6 == 139)
        {
          uint64_t v128 = 223;
        }
        else if (v6 == 140)
        {
          uint64_t v128 = 241;
        }
        else
        {
          uint64_t v128 = 238;
        }
      }
      else if (v6 == 13)
      {
        uint64_t v128 = 145;
      }
      else if (v6 == 14)
      {
        uint64_t v128 = 235;
      }
      else
      {
        uint64_t v128 = 227;
      }
      char v686 = *(llvm::APFloatBase **)(v9 + 832);
      char v687 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      long long v689 = (uint64_t *)(v687[5] + 16 * v688);
      uint64_t v690 = *v689;
      uint64_t v691 = v689[1];
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v692;
      __int16 v453 = v2110;
      uint64_t v455 = v686;
      uint64_t v456 = v128;
      uint64_t v450 = v690;
      uint64_t v454 = v691;
      goto LABEL_863;
    case 15:
      __int16 v107 = (char *)(*(uint64_t (**)(uint64_t *))(*v10 + 1888))(v10);
      if (v107) {
        sub_1CD7E3954(v9, v8, v107);
      }
      goto LABEL_867;
    case 16:
      uint64_t v613 = *(void **)(*(void *)(v9 + 832) + 40);
      uint64_t v614 = v613[4];
      int v615 = *(llvm::MCContext **)(v614 + 2056);
      int v616 = (llvm::MCContext *)(v614 + 8);
      if (v615) {
        uint64_t v617 = v615;
      }
      else {
        uint64_t v617 = v616;
      }
      v2119[0] = "annotation";
      *(_WORD *)&v2120[16] = 259;
      uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v617, (const llvm::Twine *)v2119, 1);
      uint64_t v619 = TempSymbol;
      uint64_t v620 = *(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v621 = (uint64_t *)v613[77];
      unint64_t v622 = v613[78];
      if ((unint64_t)v621 < v622)
      {
        uint64_t *v621 = TempSymbol;
        v621[1] = v620;
        uint64_t v623 = v621 + 2;
LABEL_1037:
        v613[77] = v623;
        __int16 v1467 = *(void **)(v9 + 832);
        int v1468 = sub_1CD7D7360(v9);
        uint64_t v541 = (uint64_t)sub_1CD7EEFA0(v1467, 0x108u, (uint64_t)&v2112, (uint64_t)v1468, v1469, v619);
LABEL_1367:
        uint64_t v1839 = *(void *)(v9 + 832);
        *(void *)(v1839 + 192) = v541;
        *(_DWORD *)(v1839 + 200) = v542;
        goto LABEL_867;
      }
      char v1205 = (uint64_t *)v613[76];
      uint64_t v1206 = ((char *)v621 - (char *)v1205) >> 4;
      unint64_t v1207 = v1206 + 1;
      if ((unint64_t)(v1206 + 1) >> 60) {
        goto LABEL_1593;
      }
      uint64_t v1208 = v622 - (void)v1205;
      if (v1208 >> 3 > v1207) {
        unint64_t v1207 = v1208 >> 3;
      }
      if ((unint64_t)v1208 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v1209 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1209 = v1207;
      }
      if (!v1209)
      {
        uint64_t v1210 = 0;
LABEL_1032:
        uint64_t v1466 = (uint64_t *)&v1210[16 * v1206];
        *uint64_t v1466 = v619;
        v1466[1] = v620;
        uint64_t v623 = v1466 + 2;
        if (v621 != v1205)
        {
          do
          {
            *((_OWORD *)v1466 - 1) = *((_OWORD *)v621 - 1);
            v1466 -= 2;
            v621 -= 2;
          }
          while (v621 != v1205);
          uint64_t v621 = (uint64_t *)v613[76];
        }
        v613[76] = v1466;
        v613[77] = v623;
        v613[78] = &v1210[16 * v1209];
        if (v621) {
          operator delete(v621);
        }
        goto LABEL_1037;
      }
      if (!(v1209 >> 60))
      {
        uint64_t v1210 = (char *)operator new(16 * v1209);
        goto LABEL_1032;
      }
      goto LABEL_1594;
    case 17:
      uint64_t v604 = *(void *)(v9 + 832);
      unint64_t v605 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v604 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v607 = v606;
      uint64_t v608 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v610 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v611 = *((void *)v608 + 104);
      if (v611) {
        __int16 v612 = *(_WORD *)(v611 + 8);
      }
      else {
        __int16 v612 = 0;
      }
      uint64_t v446 = sub_1CD7F3564(v608, (const char *)0xD8, (uint64_t)&v2112, (llvm *)9, 0, (uint64_t)v610, v609, v612);
      int v447 = v1203;
      __int16 v453 = 0;
      uint64_t v1204 = *(void *)(v604 + 832);
      if (v1204) {
        __int16 v453 = *(_WORD *)(v1204 + 8);
      }
      uint64_t v455 = (llvm::APFloatBase *)v604;
      uint64_t v456 = 215;
      goto LABEL_861;
    case 18:
      uint64_t v846 = *(void *)(v9 + 832);
      uint64_t v847 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v849 = v848;
      unint64_t v850 = sub_1CD7EBF14(*(void *)(v9 + 832), 0, (const llvm::APInt *)&v2112, (llvm *)5, 0, 1, 0);
      __int16 v853 = 0;
      uint64_t v854 = *(void *)(v846 + 832);
      if (v854) {
        __int16 v853 = *(_WORD *)(v854 + 8);
      }
      uint64_t v446 = sub_1CCFDED5C(v846, 212, (const llvm::APInt *)&v2112, (llvm *)9, 0, (uint64_t)v847, v849, v852, (uint64_t)v850, v851, v853);
      int v447 = v855;
      __int16 v453 = 0;
      uint64_t v856 = *(void *)(v846 + 832);
      if (v856) {
        __int16 v453 = *(_WORD *)(v856 + 8);
      }
      uint64_t v455 = (llvm::APFloatBase *)v846;
      uint64_t v456 = 216;
      uint64_t v450 = 4;
      goto LABEL_810;
    case 19:
      uint64_t v569 = *(void *)(v9 + 832);
      uint64_t v570 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v572 = (uint64_t *)(v570[5] + 16 * v571);
      uint64_t v573 = *v572;
      uint64_t v574 = v572[1];
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v576;
      uint64_t v578 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1997 = v579;
      __int16 v2000 = v2110;
      uint64_t v1995 = (uint64_t)v578;
      uint64_t v361 = v569;
      uint64_t v362 = 143;
      goto LABEL_589;
    case 52:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v671;
      uint64_t v672 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      long long v673 = (uint64_t *)(v446[5] + 16 * v671);
      uint64_t v450 = *v673;
      uint64_t v454 = v673[1];
      uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v674 = *(unsigned int *)(v672 + 32);
      if (v674 > 0x40)
      {
        int v1216 = 0;
        int64_t v1217 = (unint64_t)(v674 + 63) >> 6;
        do
        {
          BOOL v452 = v1217-- < 1;
          if (v452) {
            break;
          }
          unint64_t v1218 = *(void *)(*(void *)(v672 + 24) + 8 * v1217);
          v1216 += __clz(v1218);
        }
        while (!v1218);
        int v1219 = v674 | 0xFFFFFFC0;
        if ((v674 & 0x3F) == 0) {
          int v1219 = 0;
        }
        BOOL v675 = v1216 + v1219 == v674;
      }
      else
      {
        BOOL v675 = *(void *)(v672 + 24) == 0;
      }
      int v1220 = v675;
      BOOL v1221 = v1220 == 0;
      unsigned int v1222 = 189;
      unsigned int v1223 = 184;
      goto LABEL_848;
    case 53:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v942;
      uint64_t v943 = (uint64_t *)(v446[5] + 16 * v942);
      uint64_t v450 = *v943;
      uint64_t v454 = v943[1];
      uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v944 = *((void *)v455 + 104);
      if (v944) {
        __int16 v453 = *(_WORD *)(v944 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v456 = 185;
      goto LABEL_863;
    case 54:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v926;
      uint64_t v927 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      uint64_t v928 = (uint64_t *)(v446[5] + 16 * v926);
      uint64_t v450 = *v928;
      uint64_t v454 = v928[1];
      uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v929 = *(unsigned int *)(v927 + 32);
      if (v929 > 0x40)
      {
        int v1249 = 0;
        int64_t v1250 = (unint64_t)(v929 + 63) >> 6;
        do
        {
          BOOL v452 = v1250-- < 1;
          if (v452) {
            break;
          }
          unint64_t v1251 = *(void *)(*(void *)(v927 + 24) + 8 * v1250);
          v1249 += __clz(v1251);
        }
        while (!v1251);
        int v1252 = v929 | 0xFFFFFFC0;
        if ((v929 & 0x3F) == 0) {
          int v1252 = 0;
        }
        BOOL v930 = v1249 + v1252 == v929;
      }
      else
      {
        BOOL v930 = *(void *)(v927 + 24) == 0;
      }
      int v1253 = v930;
      BOOL v1221 = v1253 == 0;
      unsigned int v1222 = 188;
      unsigned int v1223 = 183;
LABEL_848:
      if (v1221) {
        uint64_t v456 = v1222;
      }
      else {
        uint64_t v456 = v1223;
      }
      uint64_t v1254 = *((void *)v455 + 104);
      if (v1254) {
        __int16 v453 = *(_WORD *)(v1254 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      goto LABEL_863;
    case 55:
    case 56:
      unint64_t v276 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
      uint64_t v277 = *(void *)(*(void *)(v276 + 32) + 24);
      uint64_t v278 = *(llvm::DIExpression **)(*(void *)(v276 + 64) + 24);
      sub_1CD7DDB84(v9, v277, (uint64_t)v278);
      uint64_t v279 = *(unsigned __int8 **)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24);
      int v280 = *v279;
      if ((v280 - 4) < 0x1C || (v280 - 33) < 2) {
        goto LABEL_867;
      }
      if (v280 == 32) {
        uint64_t v279 = (unsigned __int8 *)**((void **)v279 + 3);
      }
      unint64_t v281 = *((void *)v279 + 16);
      __p.n128_u64[0] = v281;
      if (!v281) {
        goto LABEL_867;
      }
      int v282 = *(unsigned __int8 *)(v281 + 16);
      if ((v282 - 11) < 2) {
        goto LABEL_867;
      }
      if (v282 != 21 && *(void *)(v281 + 8) == 0) {
        goto LABEL_867;
      }
      BOOL v285 = v282 == 21 || *(_WORD *)(v277 + 32) != 0;
      unint64_t v286 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v281);
      if (v286 && *((unsigned char *)v286 + 16) == 59)
      {
        if (*(unsigned char *)(*((void *)v286 - 4) + 16) != 16) {
          goto LABEL_1504;
        }
        uint64_t v287 = *((void *)v286 + 5);
        uint64_t v288 = *(void *)(*(void *)(v287 + 56) + 80);
        uint64_t v289 = v288 ? v288 - 24 : 0;
        if (v287 != v289 || (*((_WORD *)v286 + 9) & 0x40) != 0) {
          goto LABEL_1504;
        }
        uint64_t v290 = *(void *)(v9 + 912);
        v2117[0] = v286;
        v2119[0] = 0;
        __int16 v291 = (sub_1CB87DF68(v290 + 176, v2117, v2119) & 1) != 0
             ? v2119[0]
             : (_DWORD *)(*(void *)(v290 + 176) + 16 * *(unsigned int *)(v290 + 192));
        if (v291 == (_DWORD *)(*(void *)(*(void *)(v9 + 912) + 176)
                              + 16 * *(unsigned int *)(*(void *)(v9 + 912) + 192)))
          goto LABEL_1504;
        int v1887 = v291[2];
      }
      else
      {
        v1952 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v281);
        if (v1952) {
          BOOL v1953 = *((unsigned char *)v1952 + 16) == 21;
        }
        else {
          BOOL v1953 = 0;
        }
        if (!v1953) {
          goto LABEL_1504;
        }
        int v1887 = sub_1CD78C488(*(void *)(v9 + 912), (uint64_t)v1952);
      }
      if (v1887 != 0x7FFFFFFF)
      {
        if (v6 != 55) {
          goto LABEL_867;
        }
        uint64_t v1888 = *(void *)(v9 + 832);
        v2119[0] = sub_1CD7D7360(v9);
        char v1889 = (void *)sub_1CD801B14(v1888, v277, (uint64_t)v278, v1887, v2119, 1, 1, &v2111, *(_DWORD *)(v9 + 816));
        uint64_t v1890 = *(void *)(v9 + 832);
        int v1891 = 0;
        goto LABEL_1434;
      }
LABEL_1504:
      v1954 = sub_1CD7E88EC((uint64_t *)(v9 + 8), &__p);
      v1956 = v1954 + 1;
      uint64_t v1955 = v1954[1];
      uint64_t v1957 = __p.n128_u64[0];
      if (!v1955)
      {
        if (*(unsigned char *)(__p.n128_u64[0] + 16) != 21
          || (v1977 = sub_1CD7E88EC((uint64_t *)(v9 + 32), &__p),
              int v1978 = *((_DWORD *)v1977 + 4),
              uint64_t v1979 = v1977[1],
              uint64_t *v1956 = v1979,
              *((_DWORD *)v1954 + 4) = v1978,
              uint64_t v1955 = v1979,
              uint64_t v1957 = __p.n128_u64[0],
              !v1979))
        {
LABEL_1514:
          if (v6 == 55) {
            int v1960 = 1;
          }
          else {
            int v1960 = 2;
          }
          sub_1CCFADA10(v9, v1957, v277, v278, (uint64_t)v2111, v1960, v1956);
          goto LABEL_867;
        }
      }
      if (v1957 && *(unsigned char *)(v1957 + 16) == 77)
      {
        uint64_t v1957 = *(void *)(v1957 - 32);
        __p.n128_u64[0] = v1957;
      }
      int v1958 = *(unsigned __int16 *)(v1955 + 24);
      if ((v1958 == 39 || v1958 == 15) && v285)
      {
        uint64_t v1959 = sub_1CD801B14(*(void *)(v9 + 832), v277, (uint64_t)v278, *(_DWORD *)(v1955 + 76), 0, 0, 1, &v2111, *(_DWORD *)(v9 + 816));
      }
      else
      {
        if (*(unsigned char *)(v1957 + 16) == 21) {
          goto LABEL_1514;
        }
        uint64_t v1959 = sub_1CD80194C(*(void *)(v9 + 832), v277, (uint64_t)v278, v1955, *((_DWORD *)v1954 + 4), 1, &v2111, *(_DWORD *)(v9 + 816));
      }
      char v1889 = (void *)v1959;
      uint64_t v1890 = *(void *)(v9 + 832);
      int v1891 = v285;
LABEL_1434:
      sub_1CD801DD0(v1890, v1889, v1891);
      goto LABEL_867;
    case 57:
      int v580 = sub_1CD801E98(*(void *)(v9 + 832), *(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24), &v2111, *(_DWORD *)(v9 + 816));
      sub_1CD802768(*(void *)(v9 + 832), (uint64_t)v580);
      goto LABEL_867;
    case 58:
      unint64_t v772 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
      int v773 = *(llvm::DIVariable **)(*(void *)(v772 + 32) + 24);
      __int16 v774 = *(uint64_t ***)(*(void *)(v772 + 64) + 24);
      sub_1CD7DDB84(v9, (uint64_t)v773, (uint64_t)v774);
      llvm::DbgVariableIntrinsic::location_ops(v8, v2117);
      v2119[0] = v2120;
      v2119[1] = (void *)0x400000000;
      __p.n128_u64[0] = (unint64_t)v2117[0];
      p_p = (__n128 *)v2117[1];
      sub_1CD7E93F4((uint64_t)v2119, __p.n128_u64, (uint64_t *)&p_p);
      uint64_t v775 = LODWORD(v2119[1]);
      if (!LODWORD(v2119[1])) {
        goto LABEL_553;
      }
      v776 = (uint64_t *)v2119[0];
      uint64_t v777 = 8 * LODWORD(v2119[1]);
      uint64_t v778 = (char *)v2119[0];
      while (*(void *)v778)
      {
        v778 += 8;
        v777 -= 8;
        if (!v777)
        {
          uint64_t v778 = (char *)v2119[0] + 8 * LODWORD(v2119[1]);
          break;
        }
      }
      if (LODWORD(v2119[1]) != (v778 - (char *)v2119[0]) >> 3) {
        goto LABEL_553;
      }
      int v779 = **(unsigned __int8 **)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24);
      v2068[0] = v2111;
      if (v2111) {
        llvm::MetadataTracking::track((uint64_t)v2068, v2111, 2);
      }
      uint64_t v780 = *(unsigned __int8 **)(v8 + 48);
      v2067 = v780;
      if (v780) {
        llvm::MetadataTracking::track((uint64_t)&v2067, v780, 2);
      }
      char v781 = sub_1CCFAE200(v9, v776, v775, v773, v774, v2068, (uint64_t)&v2067, v779 == 32);
      if (!v2067) {
        goto LABEL_548;
      }
      int v782 = *v2067;
      if ((v782 - 4) > 0x1E)
      {
        if ((v782 - 3) >= 0xFFFFFFFE) {
          v1869 = v2067;
        }
        else {
          v1869 = 0;
        }
        if ((v782 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1870 = (unint64_t)(v1869 + 8);
LABEL_1407:
          v2117[0] = &v2067;
          sub_1CC5FA668(v1870 + 16, v2117);
          goto LABEL_548;
        }
        if (v782 == 3) {
          *((void *)v2067 + 1) = 0;
        }
      }
      else if ((v2067[1] & 0x7F) == 2 || *((_DWORD *)v2067 + 3))
      {
        uint64_t v1983 = *((void *)v2067 + 2);
        if ((v1983 & 4) != 0)
        {
          unint64_t v1870 = v1983 & 0xFFFFFFFFFFFFFFF8;
          if (v1870) {
            goto LABEL_1407;
          }
        }
      }
LABEL_548:
      if (!v2068[0]) {
        goto LABEL_552;
      }
      int v783 = *v2068[0];
      if ((v783 - 4) > 0x1E)
      {
        if ((v783 - 3) >= 0xFFFFFFFE) {
          int v1871 = v2068[0];
        }
        else {
          int v1871 = 0;
        }
        if ((v783 - 3) < 0xFFFFFFFE)
        {
          if (v783 == 3) {
            *((void *)v2068[0] + 1) = 0;
          }
LABEL_552:
          if ((v781 & 1) == 0)
          {
            v2066 = v2111;
            if (v2111) {
              llvm::MetadataTracking::track((uint64_t)&v2066, v2111, 2);
            }
            sub_1CD7DD85C(v9, (llvm::DbgVariableIntrinsic *)v8, &v2066, *(_DWORD *)(v9 + 816));
            if (v2066)
            {
              int v1914 = *v2066;
              if ((v1914 - 4) > 0x1E)
              {
                if ((v1914 - 3) >= 0xFFFFFFFE) {
                  v1961 = v2066;
                }
                else {
                  v1961 = 0;
                }
                if ((v1914 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v1916 = (unint64_t)(v1961 + 8);
LABEL_1523:
                  v2117[0] = &v2066;
                  sub_1CC5FA668(v1916 + 16, v2117);
                  goto LABEL_553;
                }
                if (v1914 == 3) {
                  *((void *)v2066 + 1) = 0;
                }
              }
              else if ((v2066[1] & 0x7F) == 2 || *((_DWORD *)v2066 + 3))
              {
                uint64_t v1915 = *((void *)v2066 + 2);
                if ((v1915 & 4) != 0)
                {
                  unint64_t v1916 = v1915 & 0xFFFFFFFFFFFFFFF8;
                  if (v1916) {
                    goto LABEL_1523;
                  }
                }
              }
            }
          }
LABEL_553:
          int v106 = (char *)v2119[0];
          if (v2119[0] == v2120) {
            goto LABEL_867;
          }
          goto LABEL_148;
        }
        unint64_t v1872 = (unint64_t)(v1871 + 8);
      }
      else
      {
        if ((v2068[0][1] & 0x7F) != 2 && !*((_DWORD *)v2068[0] + 3)) {
          goto LABEL_552;
        }
        uint64_t v1984 = *((void *)v2068[0] + 2);
        if ((v1984 & 4) == 0) {
          goto LABEL_552;
        }
        unint64_t v1872 = v1984 & 0xFFFFFFFFFFFFFFF8;
        if (!v1872) {
          goto LABEL_552;
        }
      }
      v2117[0] = v2068;
      sub_1CC5FA668(v1872 + 16, v2117);
      goto LABEL_552;
    case 59:
    case 295:
    case 302:
      uint64_t v218 = *(void *)(v8 + 64);
      if (!v218) {
        goto LABEL_238;
      }
      if (!*(_DWORD *)(v218 + 8)) {
        goto LABEL_238;
      }
      uint64_t v219 = *(void *)(v218 + 40);
      if (!v219) {
        goto LABEL_238;
      }
      int v220 = *(_DWORD *)(v219 + 40);
      if (!v220) {
        goto LABEL_238;
      }
      uint64_t v221 = *(void *)(v219 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v1989 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v1989 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v1989;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      unint64_t v222 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD478F398F5D9C7F9)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (qword_1EBCBE580 ^ 0xD478F398F5D9C7F9)) >> 47) ^ 0xBA0D95B585B8B58DLL);
      unsigned int v223 = (-348639895 * ((v222 >> 47) ^ v222)) ^ 0x2D636E75;
      int v224 = 1;
      while (2)
      {
        unsigned int v225 = v223 & (v220 - 1);
        uint64_t v226 = v221 + 24 * v225;
        unsigned __int8 v227 = *(void **)v226;
        if (*(void *)v226 != -1)
        {
          if (v227 == (void *)-2)
          {
            if ("trap-func-name" == (char *)-2) {
              goto LABEL_236;
            }
          }
          else if (*(void *)(v226 + 8) == 14 {
                 && *v227 == 0x6E75662D70617274
          }
                 && *(void *)((char *)v227 + 6) == 0x656D616E2D636E75)
          {
            goto LABEL_236;
          }
LABEL_225:
          if (v227 != (void *)-1)
          {
            unsigned int v223 = v224 + v225;
            ++v224;
            continue;
          }
          goto LABEL_238;
        }
        break;
      }
      if ("trap-func-name" != (char *)-1) {
        goto LABEL_225;
      }
LABEL_236:
      uint64_t v229 = *(void *)(v226 + 16);
      if (v229 && *(_DWORD *)(v229 + 16))
      {
        v1873 = (char *)(v229 + *(unsigned int *)(v229 + 12) + 25);
        __n128 __p = 0uLL;
        v2115 = 0;
        if (v6 == 302)
        {
          char v1874 = operator new(0x30uLL);
          v1874[5] = 0;
          v1874[2] = 0;
          v1874[3] = 0;
          *((_DWORD *)v1874 + 8) = 0;
          v2115 = (char *)(v1874 + 6);
          __p.n128_u64[0] = (unint64_t)v1874;
          __p.n128_u64[1] = (unint64_t)(v1874 + 6);
          uint64_t v1875 = (unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          uint64_t v1876 = *v1875;
          *char v1874 = *v1875;
          v1874[1] = 0;
          v1874[1] = sub_1CD7DE5B4(v9, v1876);
          *((_DWORD *)v1874 + 4) = v1877;
          v1874[3] = *(void *)*v1874;
        }
        uint64_t v1878 = *(uint64_t **)(v9 + 832);
        v2119[0] = 0;
        LODWORD(v2119[1]) = 0;
        *(void *)v2120 = 0;
        *(_DWORD *)&v2120[8] = 32;
        *(void *)&v2120[12] = 0xFFFFFFFFLL;
        uint64_t v2121 = 0;
        LODWORD(v2122) = 0;
        uint64_t v2123 = 0;
        v2124 = 0;
        uint64_t v2125 = 0;
        v2126 = v1878;
        int v2128 = 0;
        uint64_t v2129 = 0;
        v2130 = v2132;
        uint64_t v2131 = 0x2000000000;
        v2132[192] = v2133;
        v2132[193] = 0x2000000000;
        v2133[64] = v2134;
        v2133[65] = 0x2000000000;
        v2134[192] = v2135;
        v2134[193] = 0x400000000;
        v2135[64] = 0;
        v2135[88] = 0;
        v2127 = v2112;
        if (v2112) {
          llvm::MetadataTracking::track((uint64_t)&v2127, v2112, 2);
        }
        int v2128 = v2113;
        v2119[0] = sub_1CD7D7360(v9);
        LODWORD(v2119[1]) = v1879;
        uint64_t v1880 = *(llvm::EVT **)v8;
        uint64_t v1881 = *(void *)(v9 + 832);
        unsigned __int8 v1882 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(v1881 + 40) + 40) + 272, 0);
        size_t v1883 = sub_1CD7EDF94(v1881, v1873, v1882, 0);
        sub_1CD78F3BC((uint64_t)v2119, 0, (uint64_t)v1880, v1883, v1884, &__p);
        sub_1CCFB0250((uint64_t)v10, (uint64_t)v2119, (uint64_t)v2117);
        uint64_t v1885 = *(void *)(v9 + 832);
        int v1886 = DWORD2(v2118[0]);
        *(void *)(v1885 + 192) = *(void *)&v2118[0];
        *(_DWORD *)(v1885 + 200) = v1886;
        sub_1CD78F470(v2119);
        if (__p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        goto LABEL_867;
      }
LABEL_238:
      if (v6 == 59)
      {
        uint64_t v983 = *(void *)(v9 + 832);
        uint64_t v990 = sub_1CD7D7360(v9);
        uint64_t v992 = v1109;
        uint64_t v1110 = *(void *)(v983 + 832);
        if (v1110) {
          __int16 v994 = *(_WORD *)(v1110 + 8);
        }
        else {
          __int16 v994 = 0;
        }
        v1308 = (llvm::APFloatBase *)v983;
        uint64_t v1309 = 285;
      }
      else
      {
        if (v6 == 302)
        {
          uint64_t v230 = *(void *)(v9 + 832);
          BOOL v231 = sub_1CD7D7360(v9);
          uint64_t v233 = v232;
          uint64_t v234 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          int v235 = (uint64_t *)(v234 + 24);
          if (*(_DWORD *)(v234 + 32) >= 0x41u) {
            int v235 = (uint64_t *)*v235;
          }
          int v236 = sub_1CD7EBF14(*(void *)(v9 + 832), *v235, (const llvm::APInt *)&v2112, (llvm *)5, 0, 1, 0);
          uint64_t v239 = *(void *)(v230 + 832);
          if (v239) {
            LOWORD(v239) = *(_WORD *)(v239 + 8);
          }
          BOOL v240 = sub_1CCFDED5C(v230, 286, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v231, v233, v238, (uint64_t)v236, v237, v239);
LABEL_417:
          *(void *)(v230 + 192) = v240;
          *(_DWORD *)(v230 + 200) = v241;
          goto LABEL_867;
        }
        uint64_t v983 = *(void *)(v9 + 832);
        uint64_t v990 = sub_1CD7D7360(v9);
        uint64_t v992 = v1111;
        uint64_t v1112 = *(void *)(v983 + 832);
        if (v1112) {
          __int16 v994 = *(_WORD *)(v1112 + 8);
        }
        else {
          __int16 v994 = 0;
        }
        v1308 = (llvm::APFloatBase *)v983;
        uint64_t v1309 = 284;
      }
LABEL_954:
      int v988 = sub_1CD7F3564(v1308, (const char *)v1309, (uint64_t)&v2112, (llvm *)1, 0, (uint64_t)v990, v992, v994);
LABEL_955:
      *(void *)(v983 + 192) = v988;
      *(_DWORD *)(v983 + 200) = v989;
LABEL_867:
      if (v2111)
      {
        int v1256 = *v2111;
        if ((v1256 - 4) > 0x1E)
        {
          if ((v1256 - 3) >= 0xFFFFFFFE) {
            uint64_t v1258 = v2111;
          }
          else {
            uint64_t v1258 = 0;
          }
          if ((v1256 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1259 = (unint64_t)(v1258 + 8);
LABEL_881:
            v2119[0] = &v2111;
            sub_1CC5FA668(v1259 + 16, v2119);
            goto LABEL_871;
          }
          if (v1256 == 3) {
            *((void *)v2111 + 1) = 0;
          }
        }
        else if ((v2111[1] & 0x7F) == 2 || *((_DWORD *)v2111 + 3))
        {
          uint64_t v1893 = *((void *)v2111 + 2);
          if ((v1893 & 4) != 0)
          {
            unint64_t v1259 = v1893 & 0xFFFFFFFFFFFFFFF8;
            if (v1259) {
              goto LABEL_881;
            }
          }
        }
      }
LABEL_871:
      if (v2112)
      {
        int v1257 = *v2112;
        if ((v1257 - 4) > 0x1E)
        {
          if ((v1257 - 3) >= 0xFFFFFFFE) {
            uint64_t v1260 = v2112;
          }
          else {
            uint64_t v1260 = 0;
          }
          if ((v1257 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1261 = (unint64_t)(v1260 + 8);
LABEL_887:
            v2119[0] = &v2112;
            sub_1CC5FA668(v1261 + 16, v2119);
            return;
          }
          if (v1257 == 3) {
            *((void *)v2112 + 1) = 0;
          }
        }
        else if ((v2112[1] & 0x7F) == 2 || *((_DWORD *)v2112 + 3))
        {
          uint64_t v1894 = *((void *)v2112 + 2);
          if ((v1894 & 4) != 0)
          {
            unint64_t v1261 = v1894 & 0xFFFFFFFFFFFFFFF8;
            if (v1261) {
              goto LABEL_887;
            }
          }
        }
      }
      return;
    case 61:
      uint64_t v581 = *(void *)(v9 + 832);
      unsigned __int8 v582 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(v581 + 40) + 40) + 272, 0);
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v583;
      uint64_t v450 = v582;
      uint64_t v584 = *(void *)(v581 + 832);
      if (v584) {
        __int16 v453 = *(_WORD *)(v584 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = (llvm::APFloatBase *)v581;
      uint64_t v456 = 30;
      goto LABEL_810;
    case 62:
    case 63:
      uint64_t v267 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      unsigned int v268 = (llvm *)(*(unsigned __int8 (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, 0);
      uint64_t v269 = (*(uint64_t (**)(uint64_t *, llvm *, void))(*v10 + 424))(v10, v268, 0);
      int v270 = sub_1CD78C4EC(*(void *)(v9 + 912), v267, v269);
      uint64_t v272 = (uint64_t)sub_1CD3D6670(*(void **)(v9 + 832), *(void *)(v9 + 832) + 112, 0, (const llvm::APInt *)&v2112, v270, v268, 0);
      int v273 = v271;
      if (v6 == 62)
      {
        uint64_t v272 = sub_1CD7EB80C(*(void *)(v9 + 832), v272, v271, (uint64_t)&v2112, 5, 0);
        int v273 = v274;
      }
      v2119[0] = (void *)v8;
      uint64_t v275 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v275[1] = v272;
      *((_DWORD *)v275 + 4) = v273;
      goto LABEL_867;
    case 65:
    case 66:
      uint64_t v230 = *(void *)(v9 + 832);
      *(unsigned char *)(*(void *)(v230 + 40) + 632) = 1;
      sub_1CD3D61B4((unsigned int *)(v9 + 384), *(unsigned char **)(v9 + 672), (unsigned char *)(*(void *)(v9 + 672) + 16 * *(unsigned int *)(v9 + 680)));
      *(_DWORD *)(v9 + 680) = 0;
      int v304 = sub_1CD7D7210((uint64_t *)v9, v9 + 384);
      uint64_t v306 = v305;
      unsigned int v307 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v309 = v308;
      uint64_t v310 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v313 = *(void *)(v230 + 832);
      if (v313) {
        LOWORD(v313) = *(_WORD *)(v313 + 8);
      }
      BOOL v240 = sub_1CD7F5D38((void *)v230, (const char *)0x1F, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v304, v306, v312, (uint64_t)v307, v309, (uint64_t)v310, v311, SHIDWORD(v311), v313);
      goto LABEL_417;
    case 67:
      uint64_t v108 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      uint64_t v109 = (void *)(v108 + 24);
      if (*(_DWORD *)(v108 + 32) >= 0x41u) {
        uint64_t v109 = (void *)*v109;
      }
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(v9 + 832) + 40) + 32) + 2104) = *v109;
      goto LABEL_867;
    case 68:
      uint64_t v597 = *(void *)(*(void *)(*(void *)(v9 + 832) + 40) + 56);
      v2119[0] = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      *(_DWORD *)(v597 + 68) = *((_DWORD *)sub_1CD78CBDC((_DWORD *)(*(void *)(v9 + 912) + 176), v2119) + 2);
      goto LABEL_867;
    case 69:
      uint64_t v230 = *(void *)(v9 + 832);
      int v558 = sub_1CD7D7360(v9);
      uint64_t v560 = v559;
      uint64_t v561 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v564 = *(void *)(v230 + 832);
      if (v564) {
        LOWORD(v564) = *(_WORD *)(v564 + 8);
      }
      BOOL v240 = sub_1CCFDED5C(v230, 33, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v558, v560, v563, (uint64_t)v561, v562, v564);
      goto LABEL_417;
    case 71:
      for (uint64_t j = 0; j != 4; j += 2)
      {
        int v586 = &v2119[j];
        llvm *v586 = 0;
        *((_DWORD *)v586 + 2) = 0;
      }
      v2119[0] = sub_1CD7D7360(v9);
      LODWORD(v2119[1]) = v587;
      *(void *)v2120 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      *(_DWORD *)&v2120[8] = v588;
      char v589 = *(void **)(v9 + 832);
      int v590 = 1;
      uint64_t v592 = sub_1CD7F95FC((uint64_t)v589, 5, 0, 1, 0);
      __int16 v593 = 0;
      uint64_t v594 = v589[104];
      if (v594) {
        __int16 v593 = *(_WORD *)(v594 + 8);
      }
      unint64_t v595 = sub_1CD7FF854(v589, (const char *)0x20, (const llvm::APInt *)&v2112, v592, v591, (uint64_t *)v2119, 2, v593);
      v2117[0] = (void *)v8;
      uint64_t v596 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2117);
      v596[1] = v595;
      *((_DWORD *)v596 + 4) = 0;
      goto LABEL_779;
    case 72:
      uint64_t v983 = *(void *)(v9 + 832);
      uint64_t v990 = sub_1CD7D7360(v9);
      uint64_t v992 = v991;
      uint64_t v993 = *(void *)(v983 + 832);
      if (v993) {
        __int16 v994 = *(_WORD *)(v993 + 8);
      }
      else {
        __int16 v994 = 0;
      }
      v1308 = (llvm::APFloatBase *)v983;
      uint64_t v1309 = 34;
      goto LABEL_954;
    case 73:
      TypeInfo = llvm::ExtractTypeInfo(*(llvm **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)), v15);
      unsigned int TypeIDFor = llvm::MachineFunction::getTypeIDFor(*(llvm::MachineFunction **)(*(void *)(v9 + 832) + 40), TypeInfo);
      uint64_t v158 = (uint64_t)sub_1CD7EBF14(*(void *)(v9 + 832), TypeIDFor, (const llvm::APInt *)&v2112, (llvm *)5, 0, 0, 0);
      goto LABEL_864;
    case 74:
      *(unsigned char *)(*(void *)(*(void *)(v9 + 832) + 40) + 633) = 1;
      goto LABEL_867;
    case 75:
      uint64_t v543 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v545 = v544;
      uint64_t v546 = *(void *)(v9 + 832);
      unsigned int v547 = (uint64_t *)(v543[5] + 16 * v544);
      uint64_t v450 = *v547;
      if (*v547 != 10 || dword_1EBCF9F78 == 0 || dword_1EBCF9F78 > 0x12)
      {
        __int16 v453 = v2110;
        uint64_t v454 = v547[1];
        uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
        uint64_t v456 = 233;
        uint64_t v446 = v543;
        int v447 = (void *)v545;
        goto LABEL_863;
      }
      uint64_t v1177 = sub_1CD7ECDC4(*(void *)(v9 + 832), (uint64_t)&v2112, 10, 0, 0, 1.44269502);
      __int16 v1180 = 0;
      uint64_t v1181 = *(void *)(v546 + 832);
      if (v1181) {
        __int16 v1180 = *(_WORD *)(v1181 + 8);
      }
      uint64_t v764 = sub_1CCFDED5C(v546, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v543, v545, v1179, (uint64_t)v1177, v1178, v1180);
      goto LABEL_760;
    case 76:
      uint64_t v764 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v446 = v764;
      int v447 = v765;
      uint64_t v766 = (uint64_t *)(v764[5] + 16 * v765);
      uint64_t v450 = *v766;
      if (*v766 == 10 && dword_1EBCF9F78 != 0 && dword_1EBCF9F78 <= 0x12)
      {
        uint64_t v1248 = *(void *)(v9 + 832);
        goto LABEL_835;
      }
      __int16 v453 = v2110;
      uint64_t v454 = v766[1];
      uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v456 = 234;
      goto LABEL_863;
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      sub_1CD7E3D5C(v9, v8);
      goto LABEL_867;
    case 119:
      sub_1CD80C254(v9, v8);
      goto LABEL_867;
    case 122:
      sub_1CD80BDD8(v9, (llvm::GCRelocateInst *)v8);
      goto LABEL_867;
    case 123:
      sub_1CD80BD50(v9, (llvm::GCProjectionInst *)v8);
      goto LABEL_867;
    case 124:
      sub_1CCFF79FC(v9, v8, 0, v16);
      goto LABEL_867;
    case 127:
    case 128:
      sub_1CCFB55E0(v9, v8, 0, v16);
      goto LABEL_867;
    case 129:
      sub_1CD7E4ACC(v9, v8);
      goto LABEL_867;
    case 130:
      sub_1CD7E4E54((uint64_t *)v9, (llvm::EVT **)v8);
      goto LABEL_867;
    case 131:
      uint64_t v511 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v513 = v512;
      uint64_t v514 = (uint64_t)sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      unint64_t v516 = v515;
      unint64_t v517 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v519 = v518;
      unsigned __int8 v520 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 72))(v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272);
      int v521 = (unsigned __int8 *)(*(void *)(v514 + 40) + 16 * v516);
      if (*v521 != v520 || ((uint64_t v522 = *((void *)v521 + 1), !v520) ? (v523 = v522 == 0) : (v523 = 1), !v523))
      {
        uint64_t v524 = *(void *)(v514 + 80);
        uint64_t v525 = (uint64_t *)(v524 + 24);
        if (*(_DWORD *)(v524 + 32) >= 0x41u) {
          uint64_t v525 = (uint64_t *)*v525;
        }
        uint64_t v514 = sub_1CD7EC9F4(*(void *)(v9 + 832), *v525, (uint64_t)&v2112, 0);
        unint64_t v516 = v516 & 0xFFFFFFFF00000000 | v526;
      }
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v527 = *(void *)(v361 + 832);
      if (v527) {
        LOWORD(v527) = *(_WORD *)(v527 + 8);
      }
      uint64_t v1997 = v516;
      __int16 v2000 = v527;
      uint64_t v1995 = v514;
      uint64_t v362 = 151;
      uint64_t v358 = v517;
      uint64_t v359 = v519;
      uint64_t v528 = (uint64_t)v511;
      goto LABEL_1245;
    case 132:
      uint64_t v494 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v202 = v495;
      uint64_t v496 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v498 = v497;
      uint64_t v499 = (uint64_t)sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      unint64_t v501 = v500;
      unsigned __int8 v502 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 72))(v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272);
      int v503 = (unsigned __int8 *)(*(void *)(v499 + 40) + 16 * v501);
      if (*v503 != v502 || ((uint64_t v504 = *((void *)v503 + 1), !v502) ? (v505 = v504 == 0) : (v505 = 1), !v505))
      {
        uint64_t v506 = *(void *)(v499 + 80);
        uint64_t v507 = (uint64_t *)(v506 + 24);
        if (*(_DWORD *)(v506 + 32) >= 0x41u) {
          uint64_t v507 = (uint64_t *)*v507;
        }
        uint64_t v499 = sub_1CD7EC9F4(*(void *)(v9 + 832), *v507, (uint64_t)&v2112, 0);
        unint64_t v501 = v501 & 0xFFFFFFFF00000000 | v508;
      }
      unsigned int v213 = (llvm *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v214 = v509;
      int v216 = *(void **)(v9 + 832);
      uint64_t v510 = v216[104];
      if (v510) {
        LOWORD(v510) = *(_WORD *)(v510 + 8);
      }
      uint64_t v2001 = v501;
      __int16 v2002 = v510;
      uint64_t v1996 = v498;
      uint64_t v1999 = v499;
      uint64_t v1994 = (uint64_t)v496;
      uint64_t v210 = 150;
      uint64_t v217 = (uint64_t)v494;
      goto LABEL_384;
    case 133:
      sub_1CD7E52F4(v9, v8);
      goto LABEL_867;
    case 134:
      sub_1CD7E5550(v9, v8);
      goto LABEL_867;
    case 135:
    case 136:
    case 137:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
      sub_1CD7E451C(v9, (llvm::Instruction *)v8);
      goto LABEL_867;
    case 141:
      uint64_t v975 = *(void **)(v9 + 832);
      *(_OWORD *)v2119 = xmmword_1CFB2D790;
      *(_OWORD *)v2120 = unk_1CFB2D7A0;
      v2117[0] = sub_1CD7D7360(v9);
      v2117[1] = v976;
      unint64_t v879 = sub_1CD7EB5F0(v975, (const char *)0xD5, (const llvm::APInt *)&v2112, (uint64_t *)v2119, 2, (uint64_t *)v2117, 1);
      int v881 = v977;
      v2119[0] = (void *)v8;
      uint64_t v882 = (uint64_t *)(v9 + 8);
      uint64_t v883 = v2119;
LABEL_629:
      v978 = sub_1CD7E88EC(v882, v883);
      v978[1] = v879;
      *((_DWORD *)v978 + 4) = v881;
      uint64_t v979 = *(void *)(v9 + 832);
      *(void *)(v979 + 192) = v879;
      *(_DWORD *)(v979 + 200) = 1;
      goto LABEL_867;
    case 142:
      goto LABEL_353;
    case 143:
      unint64_t v427 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      if (*(_DWORD *)(*(void *)(v9 + 824) + 1104) != 2
        && (*(unsigned int (**)(uint64_t *, void, unint64_t, uint64_t))(*v10 + 1336))(v10, *(void *)(*(void *)(v9 + 832) + 40), v427, v428))
      {
LABEL_353:
        int v429 = *(void **)(v9 + 832);
        uint64_t v430 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        uint64_t v432 = v430[5] + 16 * v431;
        unint64_t v433 = *(llvm **)v432;
        uint64_t v434 = *(void *)(v432 + 8);
        uint64_t v435 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
        uint64_t v437 = v436;
        int v438 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
        uint64_t v440 = v439;
        uint64_t v441 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
        uint64_t v158 = (uint64_t)sub_1CD7F5D38(v429, (const char *)0x8D, (const llvm::APInt *)&v2112, v433, v434, (uint64_t)v435, v437, v444, (uint64_t)v438, v440, (uint64_t)v441, v442, v443, v2110);
        goto LABEL_864;
      }
      uint64_t v1113 = *(void *)(v9 + 832);
      uint64_t v1114 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v1116 = v1114[5] + 16 * v1115;
      v1117 = *(llvm **)v1116;
      uint64_t v1118 = *(void *)(v1116 + 8);
      uint64_t v1119 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v1121 = v1120;
      v1122 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      __int16 v1123 = v2110;
      uint64_t v351 = sub_1CCFDED5C(v1113, 98, (const llvm::APInt *)&v2112, v1117, v1118, (uint64_t)v1119, v1121, v1125, (uint64_t)v1122, v1124, v2110);
      uint64_t v353 = v1126;
      uint64_t v1127 = *(void *)(v9 + 832);
      int v1128 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      v1130 = (uint64_t *)(v1128[5] + 16 * v1129);
      uint64_t v1131 = *v1130;
      uint64_t v1132 = v1130[1];
      uint64_t v1133 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v1997 = v1134;
      __int16 v2000 = v1123;
      uint64_t v1995 = (uint64_t)v1133;
      uint64_t v361 = v1127;
      uint64_t v362 = 96;
      uint64_t v358 = v1131;
      uint64_t v359 = v1132;
LABEL_713:
      uint64_t v528 = (uint64_t)v351;
      uint64_t v914 = v353;
      goto LABEL_714;
    case 144:
      uint64_t v955 = (void *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v957 = (uint64_t)v956;
      v2119[0] = v955;
      v2119[1] = v956;
      uint64_t v958 = *(void *)(v9 + 832);
      uint64_t v959 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v961 = v960;
      uint64_t v962 = *(void *)(v9 + 832);
      unint64_t v964 = sub_1CD3DD468((unsigned __int8 *)v2119, v960, v963);
      uint64_t v966 = sub_1CD7EDE1C(v962, v964, v965);
      uint64_t v969 = *(void *)(v958 + 832);
      if (v969) {
        LOWORD(v969) = *(_WORD *)(v969 + 8);
      }
      uint64_t v669 = sub_1CCFDED5C(v958, 210, (const llvm::APInt *)&v2112, (llvm *)v955, v957, (uint64_t)v959, v961, v968, v966, v967, v969);
      goto LABEL_622;
    case 145:
      uint64_t v809 = (void *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v811 = (uint64_t)v810;
      v2119[0] = v809;
      v2119[1] = v810;
      uint64_t v812 = *(void *)(v9 + 832);
      uint64_t v813 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v815 = v814;
      uint64_t v816 = *(void *)(v9 + 832);
      unint64_t v818 = sub_1CD3DD468((unsigned __int8 *)v2119, v814, v817);
      uint64_t v820 = sub_1CD7EDE1C(v816, v818, v819);
      uint64_t v823 = *(void *)(v812 + 832);
      if (v823) {
        LOWORD(v823) = *(_WORD *)(v823 + 8);
      }
      uint64_t v669 = sub_1CCFDED5C(v812, 211, (const llvm::APInt *)&v2112, (llvm *)v809, v811, (uint64_t)v813, v815, v822, v820, v821, v823);
      goto LABEL_622;
    case 146:
      uint64_t v474 = *(uint64_t **)(*(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32) + 24) + 8);
      char v475 = llvm::convertStrToRoundingMode(v474 + 3, *v474);
      int v476 = (llvm *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v478 = v477;
      __p.n128_u16[0] = 0;
      sub_1CD7E166C(&__p, v8);
      int v479 = *(void **)(v9 + 832);
      v2119[0] = v479;
      LOWORD(v2119[1]) = __p.n128_u16[0];
      *(void *)v2120 = v479[104];
      v479[104] = v2119;
      uint64_t v480 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v482 = v481;
      uint64_t v483 = *(void *)(v9 + 832);
      unsigned __int8 v484 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, *(void *)(**(void **)(v483 + 40) + 40) + 272, 0);
      char v485 = sub_1CD7EBF14(v483, v475, (const llvm::APInt *)&v2112, (llvm *)v484, 0, 1, 0);
      __int16 v488 = 0;
      uint64_t v489 = v479[104];
      if (v489) {
        __int16 v488 = *(_WORD *)(v489 + 8);
      }
      __int16 v490 = sub_1CCFDED5C((uint64_t)v479, 140, (const llvm::APInt *)&v2112, v476, v478, (uint64_t)v480, v482, v487, (uint64_t)v485, v486, v488);
      int v492 = v491;
      v2117[0] = (void *)v8;
      unint64_t v493 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2117);
      v493[1] = v490;
      *((_DWORD *)v493 + 4) = v492;
      *((void *)v2119[0] + 104) = *(void *)v2120;
      goto LABEL_867;
    case 147:
      uint64_t v631 = *(void *)(v9 + 832);
      uint64_t v632 = *(void *)(**(void **)(v631 + 40) + 40);
      unsigned __int8 v633 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, v632 + 272, *(unsigned int *)(v632 + 276));
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v634;
      uint64_t v450 = v633;
      uint64_t v635 = *(void *)(v631 + 832);
      if (v635) {
        __int16 v453 = *(_WORD *)(v635 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = (llvm::APFloatBase *)v631;
      uint64_t v456 = 22;
LABEL_810:
      uint64_t v454 = 0;
      goto LABEL_863;
    case 148:
    case 149:
      uint64_t v314 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v316 = v315;
      unint64_t v317 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v319 = v318;
      uint64_t v320 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v323 = v314[5] + 16 * v316;
      uint64_t v324 = *(llvm **)v323;
      uint64_t v325 = *(void *)(v323 + 8);
      unsigned int v326 = *(void **)(v9 + 832);
      unsigned int v327 = (uint64_t *)(v9 + 8);
      uint64_t v328 = v326[104];
      if (v314 == v317 && v316 == v319)
      {
        if (v6 == 148) {
          uint64_t v947 = 178;
        }
        else {
          uint64_t v947 = 179;
        }
        if (v328) {
          LOWORD(v328) = *(_WORD *)(v328 + 8);
        }
        int v331 = sub_1CCFDED5C((uint64_t)v326, v947, (const llvm::APInt *)&v2112, v324, v325, (uint64_t)v314, v316, v322, (uint64_t)v320, v321, v328);
      }
      else
      {
        if (v6 == 148) {
          uint64_t v330 = 180;
        }
        else {
          uint64_t v330 = 181;
        }
        if (v328) {
          LOWORD(v328) = *(_WORD *)(v328 + 8);
        }
        int v331 = sub_1CD7F5D38(v326, (const char *)v330, (const llvm::APInt *)&v2112, v324, v325, (uint64_t)v314, v316, v322, (uint64_t)v317, v319, (uint64_t)v320, v321, SHIDWORD(v321), v328);
      }
      uint64_t v300 = v331;
      int v302 = v332;
      v2119[0] = (void *)v8;
      uint64_t v948 = v2119;
      v949 = v327;
      goto LABEL_866;
    case 151:
      uint64_t v550 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v8
                                                                               - 32
                                                                               * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v551 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      uint64_t v552 = sub_1CD7DE5B4(v9, v550);
      unint64_t v553 = *(void **)(v9 + 928);
      int v554 = *((_DWORD *)v552 + 19);
      long long v556 = (char *)v553[4];
      unint64_t v555 = v553[5];
      if ((unint64_t)v556 >= v555)
      {
        int v1182 = (char *)v553[3];
        uint64_t v1183 = (v556 - v1182) >> 4;
        unint64_t v1184 = v1183 + 1;
        if ((unint64_t)(v1183 + 1) >> 60) {
LABEL_1593:
        }
          abort();
        uint64_t v1185 = v555 - (void)v1182;
        if (v1185 >> 3 > v1184) {
          unint64_t v1184 = v1185 >> 3;
        }
        if ((unint64_t)v1185 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v1186 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1186 = v1184;
        }
        if (v1186)
        {
          if (v1186 >> 60) {
LABEL_1594:
          }
            sub_1CB833614();
          uint64_t v1187 = (char *)operator new(16 * v1186);
        }
        else
        {
          uint64_t v1187 = 0;
        }
        v1489 = &v1187[16 * v1183];
        *(_DWORD *)v1489 = v554;
        *((_DWORD *)v1489 + 1) = -1;
        *((void *)v1489 + 1) = v551;
        uint64_t v557 = v1489 + 16;
        if (v556 != v1182)
        {
          do
          {
            *((_OWORD *)v1489 - 1) = *((_OWORD *)v556 - 1);
            v1489 -= 16;
            v556 -= 16;
          }
          while (v556 != v1182);
          long long v556 = (char *)v553[3];
        }
        uint64_t v553[3] = v1489;
        v553[4] = v557;
        v553[5] = &v1187[16 * v1186];
        if (v556) {
          operator delete(v556);
        }
      }
      else
      {
        *(_DWORD *)long long v556 = v554;
        *((_DWORD *)v556 + 1) = -1;
        *((void *)v556 + 1) = v551;
        uint64_t v557 = v556 + 16;
      }
      v553[4] = v557;
      goto LABEL_867;
    case 153:
      v1027 = (void *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      v1029 = v1028;
      v2119[0] = v1027;
      v2119[1] = v1028;
      uint64_t v1030 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v1032 = v1031;
      uint64_t v1033 = (uint64_t *)(v1030[5] + 16 * v1031);
      uint64_t v1034 = *v1033;
      uint64_t v1035 = v1033[1];
      if (((*(uint64_t (**)(uint64_t *, void *, void *, uint64_t, uint64_t))(*v10 + 104))(v10, v1027, v1029, *v1033, v1035) & 1) == 0)
      {
        uint64_t v22 = v9;
        uint64_t v23 = v8;
        uint64_t v24 = 153;
LABEL_19:
        sub_1CCFB71D8(v22, v23, v24);
        goto LABEL_867;
      }
      uint64_t v2032 = v9;
      uint64_t v1857 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      unsigned int v1859 = v1858;
      v1861 = (llvm *)sub_1CD7B2734((llvm::EVT *)v2119, v1034, v1035);
      uint64_t v1862 = v1860;
      if ((_BYTE)v1861)
      {
        if (v1861 - 120 >= 0x33) {
          goto LABEL_1401;
        }
      }
      else if (*(unsigned char *)(v1860 + 8) != 19)
      {
LABEL_1401:
        uint64_t v1863 = v9;
        unsigned int v1864 = sub_1CD787B1C(*(void *)(v9 + 832), v1861, v1860, (uint64_t)&v2112, (uint64_t)v1030, (uint64_t)v1032);
        unsigned int v1866 = v1865;
        uint64_t v1867 = sub_1CD787B1C(*(void *)(v9 + 832), v1861, v1862, (uint64_t)&v2112, (uint64_t)v1857, (uint64_t)v1859);
LABEL_1443:
        uint64_t v1896 = (uint64_t)v1867;
        uint64_t v1897 = v1868;
        uint64_t v1898 = sub_1CD7EE490(*(void *)(v1863 + 832), (const char *)&v2112, v1861, v1862);
        uint64_t v1901 = *(void *)(v1863 + 832);
        uint64_t v1902 = *(void *)(v1901 + 832);
        if (v1902) {
          LOWORD(v1902) = *(_WORD *)(v1902 + 8);
        }
        v1903 = sub_1CCFDED5C(v1901, 83, (const llvm::APInt *)&v2112, v1861, v1862, (uint64_t)v1864, v1866, v1900, v1898, v1899, v1902);
        uint64_t v1905 = v1904;
        int v1906 = *(void **)(v2032 + 832);
        v1907 = (llvm *)v2119[0];
        uint64_t v1908 = v2119[1];
        uint64_t v1909 = sub_1CD7EE368(v1906, 0xCu);
        uint64_t v1912 = v1906[104];
        if (v1912) {
          LOWORD(v1912) = *(_WORD *)(v1912 + 8);
        }
        uint64_t v300 = sub_1CD7F5D38(v1906, (const char *)0xC1, (const llvm::APInt *)&v2112, v1907, (uint64_t)v1908, (uint64_t)v1903, v1905, v1911, v1896, v1897, v1909, v1910, SHIDWORD(v1910), v1912);
        int v302 = v1913;
        v2117[0] = (void *)v8;
        v949 = (uint64_t *)(v2032 + 8);
        goto LABEL_623;
      }
      uint64_t v1863 = v9;
      unsigned int v1864 = sub_1CD787A68(*(llvm::APFloatBase **)(v9 + 832), v1861, v1860, (uint64_t)&v2112, (uint64_t)v1030, v1032);
      unsigned int v1866 = v1895;
      uint64_t v1867 = sub_1CD787A68(*(llvm::APFloatBase **)(v9 + 832), v1861, v1862, (uint64_t)&v2112, (uint64_t)v1857, v1859);
      goto LABEL_1443;
    case 154:
      unint64_t v747 = sub_1CD7D7360(v9);
      int v749 = v748;
      uint64_t v750 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
      unsigned __int8 v751 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, v750 + 272, *(unsigned int *)(v750 + 276));
      int v752 = v751;
      LOBYTE(v2119[0]) = v751;
      v2119[1] = 0;
      uint64_t v753 = (void *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      char v754 = (char)v753;
      v2117[0] = v753;
      v2117[1] = v755;
      if (v752) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v2119);
      }
      else {
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2119);
      }
      unint64_t v1239 = ExtendedSizeInBits;
      if (v754) {
        unint64_t v1240 = sub_1CB87E200((unsigned __int8 *)v2117);
      }
      else {
        unint64_t v1240 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2117);
      }
      if (v1239 >= v1240)
      {
        uint64_t v1241 = *(void **)(v9 + 832);
        uint64_t v1242 = sub_1CD7FFC1C((llvm *)v2117[0], (uint64_t)v2117[1]);
        uint64_t v1243 = sub_1CD7FFAA8(v1241, (const char *)0x13C, (const llvm::APInt *)&v2112, v1242, 1, (uint64_t)v747, v749);
        int v1245 = v1244;
        uint64_t v1246 = *(void *)(v9 + 832);
        *(void *)(v1246 + 192) = v747;
        *(_DWORD *)(v1246 + 200) = v749;
        __p.n128_u64[0] = v8;
        v1247 = sub_1CD7E88EC((uint64_t *)(v9 + 8), &__p);
        v1247[1] = v1243;
        *((_DWORD *)v1247 + 4) = v1245;
        goto LABEL_867;
      }
      v1980 = "Wrong result type for @llvm.get.dynamic.area.offset intrinsic!";
      goto LABEL_1579;
    case 157:
      v2119[0] = v2120;
      v2119[1] = (void *)0x1000000000;
      unint64_t v699 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      if (LODWORD(v2119[1]) >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v700 = (uint64_t **)((char *)v2119[0] + 16 * LODWORD(v2119[1]));
      *uint64_t v700 = v699;
      v700[1] = v697;
      ++LODWORD(v2119[1]);
      uint64_t v701 = *(llvm::GlobalValue **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      uint64_t v702 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
      unsigned int v703 = *(_DWORD *)(*(void *)v701 + 8);
      if ((v703 & 0xFE) == 0x12) {
        unsigned int v703 = *(_DWORD *)(**(void **)(*(void *)v701 + 16) + 8);
      }
      unint64_t v704 = (llvm::DataLayout *)(v702 + 272);
      uint64_t v705 = *(void *)(v702 + 504);
      if (v703 < 0x100) {
        goto LABEL_495;
      }
      unsigned int v706 = v703 >> 8;
      unint64_t v707 = *(unsigned int *)(v702 + 512);
      uint64_t v708 = *(void *)(v702 + 504);
      if (v707)
      {
        uint64_t v708 = v705;
        unint64_t v709 = v707;
        do
        {
          unint64_t v710 = v709 >> 1;
          uint64_t v711 = v708 + 16 * (v709 >> 1);
          unsigned int v712 = *(_DWORD *)(v711 + 8);
          uint64_t v713 = v711 + 16;
          v709 += ~(v709 >> 1);
          if (v712 < v706) {
            uint64_t v708 = v713;
          }
          else {
            unint64_t v709 = v710;
          }
        }
        while (v709);
      }
      if (v708 == v705 + 16 * v707 || *(_DWORD *)(v708 + 8) != v706) {
LABEL_495:
      }
        uint64_t v708 = v705;
      LODWORD(v2117[1]) = *(_DWORD *)(v708 + 12);
      if (LODWORD(v2117[1]) > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v2117);
      }
      v2117[0] = 0;
      unsigned int v714 = llvm::Value::stripAndAccumulateConstantOffsets(v701, v704, (llvm::APInt *)v2117, 1, 0, 0, v698);
      if (LODWORD(v2117[1]) >= 0x41) {
        MEMORY[0x1D25D9CB0](v2117[0], 0x1000C8000313F17);
      }
      if (*((unsigned __int8 *)v714 + 16) - 2 >= 2 && *((unsigned char *)v714 + 16)) {
        goto LABEL_1578;
      }
      uint64_t v717 = sub_1CD7ECF00(*(void *)(v9 + 832), (uint64_t)v714, (uint64_t)&v2112, (llvm *)6, 0, 0, 1, 0);
      if (LODWORD(v2119[1]) >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v718 = (uint64_t **)((char *)v2119[0] + 16 * LODWORD(v2119[1]));
      uint64_t *v718 = v717;
      v718[1] = v715;
      ++LODWORD(v2119[1]);
      v2117[0] = v2118;
      v2117[1] = (void *)0x800000000;
      int v719 = *(unsigned __int8 *)(v8 + 16);
      if (v719 == 84)
      {
        uint64_t v720 = 0;
      }
      else if (v719 == 39)
      {
        uint64_t v720 = (*(_DWORD *)(v8 + 80) + 1);
      }
      else
      {
        uint64_t v720 = 2;
      }
      int v721 = *(_DWORD *)(v8 + 20);
      if (v721 < 0
        && (unint64_t v1992 = v8 - 32 * (v721 & 0x7FFFFFF), v1993 = *(void *)(v1992 - 8), (v1993 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v723 = -(uint64_t)(v721 & 0x7FFFFFF);
        int v722 = *(_DWORD *)(v1992 - 12) - *(_DWORD *)(v1992 - v1993);
      }
      else
      {
        int v722 = 0;
        uint64_t v723 = -(uint64_t)(v721 & 0x7FFFFFF);
      }
      unint64_t v724 = (-32 * v720 + 32 * (unint64_t)-v722 - 32 * v723 - 32) >> 5;
      if (v724 == 1)
      {
        uint64_t v725 = (char *)v2118;
        uint64_t v726 = v2118;
        goto LABEL_934;
      }
      unsigned int v1278 = 1;
      while (1)
      {
        unsigned int v1279 = *(llvm::GlobalValue **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * v1278);
        unsigned int v1280 = *(_DWORD *)(*(void *)v1279 + 8);
        if ((v1280 & 0xFE) == 0x12) {
          unsigned int v1280 = *(_DWORD *)(**(void **)(*(void *)v1279 + 16) + 8);
        }
        uint64_t v1281 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
        if (v1280 < 0x100) {
          goto LABEL_912;
        }
        unsigned int v1282 = v1280 >> 8;
        uint64_t v1283 = *(unsigned int *)(v1281 + 512);
        uint64_t v1284 = *(void *)(v1281 + 504);
        if (v1283)
        {
          uint64_t v1284 = *(void *)(v1281 + 504);
          unint64_t v1285 = *(unsigned int *)(v1281 + 512);
          do
          {
            unint64_t v1286 = v1285 >> 1;
            uint64_t v1287 = v1284 + 16 * (v1285 >> 1);
            unsigned int v1288 = *(_DWORD *)(v1287 + 8);
            uint64_t v1289 = v1287 + 16;
            v1285 += ~(v1285 >> 1);
            if (v1288 < v1282) {
              uint64_t v1284 = v1289;
            }
            else {
              unint64_t v1285 = v1286;
            }
          }
          while (v1285);
        }
        if (v1284 == *(void *)(v1281 + 504) + 16 * v1283 || *(_DWORD *)(v1284 + 8) != v1282) {
LABEL_912:
        }
          uint64_t v1284 = *(void *)(v1281 + 504);
        __p.n128_u32[2] = *(_DWORD *)(v1284 + 12);
        if (__p.n128_u32[2] > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p);
        }
        __p.n128_u64[0] = 0;
        v1290 = llvm::Value::stripAndAccumulateConstantOffsets(v1279, (llvm::DataLayout *)(v1281 + 272), (llvm::APInt *)&__p, 1, 0, 0, v716);
        if (__p.n128_u32[2] > 0x40)
        {
          uint64_t v1291 = *(void *)__p.n128_u64[0];
          MEMORY[0x1D25D9CB0]();
        }
        else
        {
          uint64_t v1291 = (uint64_t)(__p.n128_u64[0] << -(uint64_t)__p.n128_u32[2]) >> -(uint64_t)__p.n128_u32[2];
        }
        unsigned int v1292 = *((unsigned __int8 *)v1290 + 16);
        if (v1292 > 3 || v1292 == 1) {
          v1290 = 0;
        }
        if (v1290 != v714) {
          break;
        }
        uint64_t v1293 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * (v1278 + 1)));
        unsigned int v1295 = *((unsigned __int16 *)v1293 + 12);
        BOOL v452 = v1295 > 0x26;
        uint64_t v1296 = (1 << v1295) & 0x6000006000;
        if (v452 || v1296 == 0)
        {
LABEL_1578:
          v1980 = "llvm.icall.branch.funnel operand must be a GlobalValue";
LABEL_1579:
          llvm::report_fatal_error((llvm *)v1980, (const llvm::Twine *)1);
        }
        __p.n128_u64[0] = v1291;
        uint64_t v1298 = v1293[5] + 16 * v1294;
        __p.n128_u64[1] = (unint64_t)sub_1CD7ECF00(*(void *)(v9 + 832), v1293[10], (uint64_t)&v2112, *(llvm **)v1298, *(void *)(v1298 + 8), v1293[11], 1, 0);
        v2115 = v1299;
        if (LODWORD(v2117[1]) >= HIDWORD(v2117[1]))
        {
          if (v2117[0] > &__p || (char *)v2117[0] + 24 * LODWORD(v2117[1]) <= (char *)&__p) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v1300 = (char *)v2117[0] + 24 * LODWORD(v2117[1]);
        __n128 v1301 = __p;
        *((void *)v1300 + 2) = v2115;
        *(__n128 *)v1300 = v1301;
        unint64_t v1302 = ++LODWORD(v2117[1]);
        v1278 += 2;
        if (v1278 == v724)
        {
          uint64_t v726 = v2117[0];
          uint64_t v725 = (char *)v2117[0] + 24 * v1302;
          if (v1302) {
            uint64_t v1303 = 126 - 2 * __clz(v1302);
          }
          else {
LABEL_934:
          }
            uint64_t v1303 = 0;
          sub_1CCFC7D98((unint64_t)v726, (unint64_t)v725, v1303, 1);
          if (LODWORD(v2117[1]))
          {
            uint64_t v1474 = (char *)v2117[0];
            v1475 = (char *)v2117[0] + 24 * LODWORD(v2117[1]);
            do
            {
              uint64_t v1477 = sub_1CD7EBF14(*(void *)(v9 + 832), *(void *)v1474, (const llvm::APInt *)&v2112, (llvm *)5, 0, 1, 0);
              if (LODWORD(v2119[1]) >= (unint64_t)HIDWORD(v2119[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1478 = (uint64_t **)((char *)v2119[0] + 16 * LODWORD(v2119[1]));
              void *v1478 = v1477;
              v1478[1] = v1476;
              unsigned int v1479 = LODWORD(v2119[1]) + 1;
              LODWORD(v2119[1]) = v1479;
              if (v1479 >= HIDWORD(v2119[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_OWORD *)v2119[0] + v1479) = *(_OWORD *)(v1474 + 8);
              unsigned int v1470 = ++LODWORD(v2119[1]);
              v1474 += 24;
            }
            while (v1474 != v1475);
          }
          else
          {
            unsigned int v1470 = v2119[1];
          }
          if (v1470 >= HIDWORD(v2119[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v2119[0] + v1470) = *(_OWORD *)(*(void *)(v9 + 832) + 192);
          ++LODWORD(v2119[1]);
          v1471 = sub_1CD801450(*(void *)(v9 + 832), 41, (uint64_t)&v2112, (llvm *)1, 0, (uint64_t *)v2119[0], LODWORD(v2119[1]));
          uint64_t v1472 = *(void *)(v9 + 832);
          *(void *)(v1472 + 192) = v1471;
          *(_DWORD *)(v1472 + 200) = 0;
          __p.n128_u64[0] = v8;
          __int16 v1473 = sub_1CD7E88EC((uint64_t *)(v9 + 8), &__p);
          v1473[1] = v1471;
          *((_DWORD *)v1473 + 4) = 0;
          *(unsigned char *)(v9 + 960) = 1;
          if (v2117[0] != v2118) {
            free(v2117[0]);
          }
          int v106 = (char *)v2119[0];
          if (v2119[0] == v2120) {
            goto LABEL_867;
          }
LABEL_148:
          free(v106);
          goto LABEL_867;
        }
      }
      v1980 = "all llvm.icall.branch.funnel operands must refer to the same GlobalValue";
      goto LABEL_1579;
    case 158:
      uint64_t v797 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      for (uint64_t k = 0; k != 12; k += 2)
      {
        unsigned __int8 v799 = &v2119[k];
        void *v799 = 0;
        *((_DWORD *)v799 + 2) = 0;
      }
      v2119[0] = sub_1CD7D7360(v9);
      LODWORD(v2119[1]) = v800;
      *(void *)v2120 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      *(_DWORD *)&v2120[8] = v801;
      *(void *)&v2120[16] = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      LODWORD(v2121) = v802;
      v2122 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      LODWORD(v2123) = v803;
      v2124 = sub_1CD7EF3FC(*(void **)(v9 + 832), *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      LODWORD(v2125) = v804;
      v2126 = sub_1CD7EF3FC(*(void **)(v9 + 832), (uint64_t)v797);
      LODWORD(v2127) = v805;
      uint64_t v806 = *(void **)(v9 + 832);
      uint64_t v807 = v806[104];
      if (v807) {
        uint64_t v808 = *(unsigned __int16 *)(v807 + 8);
      }
      else {
        uint64_t v808 = 0;
      }
      uint64_t v541 = (uint64_t)sub_1CD7FF4E8(v806, (const char *)0x11A, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t *)v2119, 6, v808);
      goto LABEL_1367;
    case 164:
      uint64_t v769 = *(void *)(v9 + 832);
      uint64_t v770 = (llvm *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v769 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v158 = (uint64_t)sub_1CD3DD4D8(v769, v770, v771);
      goto LABEL_864;
    case 167:
    case 168:
      if (!*(_DWORD *)(*(void *)(v9 + 824) + 552)) {
        goto LABEL_867;
      }
      uint64_t v18 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      uint64_t v19 = *v18;
      unsigned int v20 = *(_DWORD *)(*v18 + 32);
      if (v20 > 0x40) {
        uint64_t v21 = **(void **)(v19 + 24);
      }
      else {
        uint64_t v21 = (uint64_t)(*(void *)(v19 + 24) << -(char)v20) >> -(char)v20;
      }
      unint64_t v129 = (llvm::GlobalValue *)v18[4];
      v2119[0] = v2120;
      v2119[1] = (void *)0x400000000;
      llvm::getUnderlyingObjects((uint64_t)v129, (uint64_t)v2119, 0, (llvm::Value *)6);
      uint64_t v130 = (char *)v2119[0];
      if (!LODWORD(v2119[1])) {
        goto LABEL_146;
      }
      uint64_t v131 = (char *)v2119[0] + 8 * LODWORD(v2119[1]);
      v2048 = v131;
      while (1)
      {
        unint64_t v132 = *(void *)v130;
        if (*(void *)v130 && *(unsigned char *)(v132 + 16) == 59)
        {
          uint64_t v133 = *(void *)(v9 + 912);
          __p.n128_u64[0] = *(void *)v130;
          v2117[0] = 0;
          if (sub_1CB87DF68(v133 + 176, &__p, v2117)) {
            uint64_t v135 = v2117[0];
          }
          else {
            uint64_t v135 = (_DWORD *)(*(void *)(v133 + 176) + 16 * *(unsigned int *)(v133 + 192));
          }
          if (v135 == (_DWORD *)(*(void *)(*(void *)(v9 + 912) + 176)
                                + 16 * *(unsigned int *)(*(void *)(v9 + 912) + 192)))
          {
LABEL_145:
            uint64_t v130 = (char *)v2119[0];
LABEL_146:
            if (v130 == v2120) {
              goto LABEL_867;
            }
            int v106 = v130;
            goto LABEL_148;
          }
          unsigned int v136 = *(_DWORD *)(*(void *)v129 + 8);
          if ((v136 & 0xFE) == 0x12) {
            unsigned int v136 = *(_DWORD *)(**(void **)(*(void *)v129 + 16) + 8);
          }
          uint64_t v137 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
          if (v136 < 0x100) {
            goto LABEL_133;
          }
          unsigned int v138 = v136 >> 8;
          uint64_t v139 = *(unsigned int *)(v137 + 512);
          uint64_t v140 = *(void *)(v137 + 504);
          if (v139)
          {
            uint64_t v140 = *(void *)(v137 + 504);
            unint64_t v141 = *(unsigned int *)(v137 + 512);
            do
            {
              unint64_t v142 = v141 >> 1;
              uint64_t v143 = v140 + 16 * (v141 >> 1);
              unsigned int v144 = *(_DWORD *)(v143 + 8);
              uint64_t v145 = v143 + 16;
              v141 += ~(v141 >> 1);
              if (v144 < v138) {
                uint64_t v140 = v145;
              }
              else {
                unint64_t v141 = v142;
              }
            }
            while (v141);
          }
          if (v140 == *(void *)(v137 + 504) + 16 * v139 || *(_DWORD *)(v140 + 8) != v138) {
LABEL_133:
          }
            uint64_t v140 = *(void *)(v137 + 504);
          int v146 = v135[2];
          LODWORD(v2117[1]) = *(_DWORD *)(v140 + 12);
          if (LODWORD(v2117[1]) > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)v2117);
          }
          v2117[0] = 0;
          uint64_t v147 = v129;
          uint64_t v148 = llvm::Value::stripAndAccumulateConstantOffsets(v129, (llvm::DataLayout *)(v137 + 272), (llvm::APInt *)v2117, 1, 0, 0, v134);
          if (LODWORD(v2117[1]) > 0x40)
          {
            uint64_t v149 = *(void *)v2117[0];
            MEMORY[0x1D25D9CB0]();
          }
          else
          {
            uint64_t v149 = (uint64_t)v2117[0] << -(uint64_t)LODWORD(v2117[1]) >> -(uint64_t)LODWORD(v2117[1]);
          }
          if (v148 == (llvm::GlobalValue *)v132) {
            uint64_t v150 = v149;
          }
          else {
            uint64_t v150 = -1;
          }
          uint64_t v151 = *(void *)(v9 + 832);
          uint64_t v152 = sub_1CD7D7360(v9);
          int v154 = sub_1CD7FA0F4(v151, v6 == 168, (uint64_t)&v2112, (uint64_t)v152, v153, v146, v21, v150);
          uint64_t v155 = *(void *)(v9 + 832);
          *(void *)(v155 + 192) = v154;
          *(_DWORD *)(v155 + 200) = v156;
          unint64_t v129 = v147;
          uint64_t v131 = v2048;
        }
        v130 += 8;
        if (v130 == v131) {
          goto LABEL_145;
        }
      }
    case 169:
    case 170:
    case 180:
    case 181:
      if ((int)v6 > 179)
      {
        if (v6 == 180) {
          uint64_t v199 = 244;
        }
        else {
          uint64_t v199 = 242;
        }
      }
      else if (v6 == 169)
      {
        uint64_t v199 = 245;
      }
      else
      {
        uint64_t v199 = 243;
      }
      unint64_t v605 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v607 = v738;
      uint64_t v739 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v740;
      uint64_t v741 = *((void *)v739 + 104);
      if (v741) {
        __int16 v453 = *(_WORD *)(v741 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = v739;
      uint64_t v456 = v199;
      goto LABEL_861;
    case 173:
      uint64_t v2046 = *(void *)(*(void *)(v9 + 832) + 40);
      uint64_t v2035 = (*(uint64_t (**)(void))(**(void **)(v2046 + 16) + 104))(*(void *)(v2046 + 16));
      int v31 = *(unsigned __int8 *)(v8 + 16);
      if (v31 == 84)
      {
        uint64_t v32 = 0;
      }
      else if (v31 == 39)
      {
        uint64_t v32 = (*(_DWORD *)(v8 + 80) + 1);
      }
      else
      {
        uint64_t v32 = 2;
      }
      int v33 = *(_DWORD *)(v8 + 20);
      if (v33 < 0
        && (unint64_t v1990 = v8 - 32 * (v33 & 0x7FFFFFF), v1991 = *(void *)(v1990 - 8), (v1991 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
        uint64_t v34 = (*(_DWORD *)(v1990 - 12) - *(_DWORD *)(v1990 - v1991));
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
      }
      unint64_t v36 = -32 * v32 - 32 * v34 - 32 * v35 - 32;
      if ((v36 & 0x1FFFFFFFE0) == 0) {
        goto LABEL_867;
      }
      uint64_t v37 = 0;
      uint64_t v38 = (v36 >> 5);
      while (1)
      {
        int v39 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * v37));
        if (*((unsigned char *)v39 + 16) != 19) {
          break;
        }
LABEL_32:
        if (++v37 == v38) {
          goto LABEL_867;
        }
      }
      __p.n128_u64[0] = (unint64_t)v39;
      uint64_t v40 = sub_1CD78CBDC((_DWORD *)(*(void *)(v9 + 912) + 176), &__p);
      uint64_t v41 = *(void *)(v2046 + 32);
      uint64_t v42 = *(llvm::MCContext **)(v41 + 2056);
      unsigned int v43 = (llvm::MCContext *)(v41 + 8);
      if (v42) {
        unsigned int v43 = v42;
      }
      unint64_t v44 = *(uint64_t ****)v2046;
      if ((*(unsigned char *)(*(void *)v2046 + 23) & 0x10) != 0)
      {
        uint64_t v45 = ***v44;
        uint64_t v46 = *(void *)(v45 + 152);
        uint64_t v47 = *(unsigned int *)(v45 + 168);
        if (v47)
        {
          LODWORD(v48) = (v47 - 1) & ((v44 >> 4) ^ (v44 >> 9));
          int v49 = (uint64_t ****)(v46 + 16 * v48);
          int v50 = *v49;
          if (*v49 != v44)
          {
            int v51 = 1;
            do
            {
              if (v50 == (uint64_t ***)-4096) {
                goto LABEL_43;
              }
              int v52 = v48 + v51++;
              uint64_t v48 = v52 & (v47 - 1);
              int v50 = *(uint64_t ****)(v46 + 16 * v48);
            }
            while (v50 != v44);
            int v49 = (uint64_t ****)(v46 + 16 * v48);
          }
        }
        else
        {
LABEL_43:
          int v49 = (uint64_t ****)(v46 + 16 * v47);
        }
        uint64_t v53 = v49[1];
        uint64_t v56 = (uint64_t)*v53;
        unint64_t v54 = (char *)(v53 + 2);
        uint64_t v55 = v56;
        if (v56)
        {
          int v58 = *v54;
          if (v58 == 1) {
            uint64_t v57 = v55 - 1;
          }
          else {
            uint64_t v57 = v55;
          }
          if (v58 == 1) {
            unint64_t v54 = (char *)v49[1] + 17;
          }
        }
        else
        {
          uint64_t v57 = 0;
        }
      }
      else
      {
        uint64_t v57 = 0;
        unint64_t v54 = &byte_1CFBCE98E;
      }
      int v59 = *((_DWORD *)v40 + 2);
      uint64_t FrameAllocSymbol = llvm::MCContext::getOrCreateFrameAllocSymbol(v43, (uint64_t)v54, v57, v37);
      uint64_t v61 = *(void *)(v9 + 912);
      uint64_t v62 = *(void *)(v61 + 640);
      unint64_t v63 = *(unint64_t **)(v61 + 648);
      uint64_t v64 = *(void *)(v2035 + 8);
      int v65 = *(llvm::MachineFunction **)(v62 + 32);
      v2117[0] = v2111;
      if (v2111) {
        llvm::MetadataTracking::track((uint64_t)v2117, v2111, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v65, v64 + 1536, (unsigned __int8 **)v2117, 0);
      if (!v2117[0]) {
        goto LABEL_54;
      }
      int v79 = *(unsigned __int8 *)v2117[0];
      if ((v79 - 4) > 0x1E)
      {
        if ((v79 - 3) >= 0xFFFFFFFE) {
          char v82 = v2117[0];
        }
        else {
          char v82 = 0;
        }
        if ((v79 - 3) < 0xFFFFFFFE)
        {
          if (v79 == 3) {
            *((void *)v2117[0] + 1) = 0;
          }
          goto LABEL_54;
        }
        unint64_t v81 = (unint64_t)v82 + 8;
      }
      else
      {
        if ((*((unsigned char *)v2117[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v2117[0] + 3)) {
          goto LABEL_54;
        }
        uint64_t v80 = *((void *)v2117[0] + 2);
        if ((v80 & 4) == 0) {
          goto LABEL_54;
        }
        unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (!v81) {
          goto LABEL_54;
        }
      }
      v2119[0] = v2117;
      sub_1CC5FA668(v81 + 16, v2119);
LABEL_54:
      uint64_t v67 = *(void *)(v62 + 40);
      *((void *)MachineInstr + 3) = v67;
      uint64_t v68 = *(void *)(v67 + 32);
      uint64_t v69 = *((unsigned int *)MachineInstr + 10);
      if (v69)
      {
        uint64_t v72 = *((void *)MachineInstr + 4);
        uint64_t v73 = *(void *)(v68 + 40);
        uint64_t v74 = 32 * v69;
        do
        {
          if (!*(unsigned char *)v72)
          {
            uint64_t v75 = *(unsigned int *)(v72 + 4);
            if ((int)v75 >= 0) {
              uint64_t v76 = (uint64_t *)(*(void *)(v73 + 272) + 8 * v75);
            }
            else {
              uint64_t v76 = (uint64_t *)(*(void *)(v73 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
            }
            uint64_t v77 = *v76;
            if (*v76)
            {
              uint64_t v78 = *(void *)(v77 + 16);
              *(void *)(v77 + 16) = v72;
              *(void *)(v72 + 16) = v78;
              if (*(unsigned char *)(v72 + 3))
              {
                *(void *)(v72 + 24) = v77;
              }
              else
              {
                *(void *)(v72 + 24) = 0;
                uint64_t v76 = (uint64_t *)(v78 + 24);
              }
            }
            else
            {
              *(void *)(v72 + 16) = v72;
              *(void *)(v72 + 24) = 0;
            }
            uint64_t *v76 = v72;
          }
          v72 += 32;
          v74 -= 32;
        }
        while (v74);
      }
      uint64_t v70 = *(void *)(v68 + 728);
      if (v70) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, MachineInstr);
      }
      unint64_t v71 = *v63 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v71 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v63;
      *(void *)(v71 + 8) = MachineInstr;
      unint64_t *v63 = *v63 & 7 | (unint64_t)MachineInstr;
      v2119[1] = 0;
      *(void *)v2120 = FrameAllocSymbol;
      *(_DWORD *)&v2120[8] = 0;
      v2119[0] = (void *)15;
      llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)v2119);
      LODWORD(v2119[0]) = 5;
      v2119[1] = 0;
      *(_DWORD *)v2120 = v59;
      llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)v2119);
      goto LABEL_32;
    case 174:
      uint64_t v742 = *(void *)(*(void *)(v9 + 832) + 40);
      uint64_t v743 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v744 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64);
      uint64_t v745 = *(unsigned int *)(v744 + 32);
      if (v745 >= 0x41)
      {
        int v1224 = 0;
        int64_t v1225 = (unint64_t)(v745 + 63) >> 6;
        do
        {
          BOOL v452 = v1225-- < 1;
          if (v452) {
            break;
          }
          unint64_t v1226 = *(void *)(*(void *)(v744 + 24) + 8 * v1225);
          v1224 += __clz(v1226);
        }
        while (!v1226);
        int v1227 = v745 | 0xFFFFFFC0;
        if ((v745 & 0x3F) == 0) {
          int v1227 = 0;
        }
        if ((v745 - v1224 - v1227) > 0x40) {
          goto LABEL_819;
        }
        unint64_t v746 = **(void **)(v744 + 24);
      }
      else
      {
        unint64_t v746 = *(void *)(v744 + 24);
      }
      if (!(v746 >> 31)) {
        goto LABEL_820;
      }
LABEL_819:
      LODWORD(v746) = 0x7FFFFFFF;
LABEL_820:
      uint64_t v1228 = *(void *)(v742 + 32);
      uint64_t v1229 = *(llvm::MCContext **)(v1228 + 2056);
      uint64_t v1230 = (llvm::MCContext *)(v1228 + 8);
      if (v1229) {
        uint64_t v1230 = v1229;
      }
      if ((*((unsigned char *)v743 + 23) & 0x10) == 0)
      {
        uint64_t v1494 = 0;
        BOOL v1491 = &byte_1CFBCE98E;
        goto LABEL_1091;
      }
      uint64_t v1231 = ***(void ***)v743;
      uint64_t v1232 = *(void *)(v1231 + 152);
      uint64_t v1233 = *(unsigned int *)(v1231 + 168);
      if (!v1233) {
        goto LABEL_1083;
      }
      LODWORD(v1234) = (v1233 - 1) & ((v743 >> 4) ^ (v743 >> 9));
      uint64_t v1235 = (llvm::Value **)(v1232 + 16 * v1234);
      uint64_t v1236 = *v1235;
      if (*v1235 == v743) {
        goto LABEL_1084;
      }
      int v1237 = 1;
      while (v1236 != (llvm::Value *)-4096)
      {
        int v1238 = v1234 + v1237++;
        uint64_t v1234 = v1238 & (v1233 - 1);
        uint64_t v1236 = *(llvm::Value **)(v1232 + 16 * v1234);
        if (v1236 == v743)
        {
          uint64_t v1235 = (llvm::Value **)(v1232 + 16 * v1234);
          goto LABEL_1084;
        }
      }
LABEL_1083:
      uint64_t v1235 = (llvm::Value **)(v1232 + 16 * v1233);
LABEL_1084:
      uint64_t v1490 = v1235[1];
      uint64_t v1493 = *(void *)v1490;
      BOOL v1491 = (char *)v1490 + 16;
      uint64_t v1492 = v1493;
      if (v1493)
      {
        int v1495 = *v1491;
        if (v1495 == 1) {
          uint64_t v1494 = v1492 - 1;
        }
        else {
          uint64_t v1494 = v1492;
        }
        if (v1495 == 1) {
          BOOL v1491 = (char *)v1235[1] + 17;
        }
      }
      else
      {
        uint64_t v1494 = 0;
      }
LABEL_1091:
      uint64_t v1496 = llvm::MCContext::getOrCreateFrameAllocSymbol(v1230, (uint64_t)v1491, v1494, v746);
      v1497 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1499 = v1498;
      uint64_t v1500 = v1498;
      uint64_t v1501 = (uint64_t *)(v1497[5] + 16 * v1498);
      int v1502 = (llvm *)*v1501;
      uint64_t v1503 = v1501[1];
      uint64_t v1505 = sub_1CD7EE108(*(void *)(v9 + 832), v1496, *v1501, v1503);
      uint64_t v1506 = *(llvm::APFloatBase **)(v9 + 832);
      uint64_t v1507 = *((void *)v1506 + 104);
      if (v1507) {
        __int16 v1508 = *(_WORD *)(v1507 + 8);
      }
      else {
        __int16 v1508 = 0;
      }
      uint64_t v1509 = sub_1CD7F3564(v1506, (const char *)0x1A, (uint64_t)&v2112, v1502, v1503, v1505, v1504, v1508);
      uint64_t v158 = (uint64_t)sub_1CCFDED5C(*(void *)(v9 + 832), 56, (const llvm::APInt *)&v2112, *(llvm **)(v1497[5] + 16 * v1500), *(void *)(v1497[5] + 16 * v1500 + 8), (uint64_t)v1497, v1499, v1511, (uint64_t)v1509, v1510, 0);
      goto LABEL_864;
    case 175:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v565;
      uint64_t v448 = *(llvm::APFloatBase **)(v9 + 832);
      __int16 v566 = (uint64_t *)(v446[5] + 16 * v565);
      uint64_t v450 = *v566;
      if (*v566 != 10 || dword_1EBCF9F78 == 0 || dword_1EBCF9F78 > 0x12)
      {
        __int16 v453 = v2110;
        uint64_t v454 = v566[1];
        uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
        uint64_t v456 = 230;
        goto LABEL_863;
      }
      uint64_t v1188 = *((void *)v448 + 104);
      if (v1188) {
        __int16 v1189 = *(_WORD *)(v1188 + 8);
      }
      else {
        __int16 v1189 = 0;
      }
      v1381 = sub_1CD7F3564(*(llvm::APFloatBase **)(v9 + 832), (const char *)0xD8, (uint64_t)&v2112, (llvm *)5, 0, (uint64_t)v446, v565, v1189);
      uint64_t v1383 = v1382;
      int v1384 = sub_1CCFC693C((uint64_t)v448, (uint64_t)v1381, v1382, v10, (const llvm::APInt *)&v2112);
      uint64_t v1386 = v1385;
      uint64_t v1387 = sub_1CD7ECDC4((uint64_t)v448, (uint64_t)&v2112, 10, 0, 0, 0.693147182);
      __int16 v1390 = 0;
      uint64_t v1391 = *((void *)v448 + 104);
      if (v1391) {
        __int16 v1390 = *(_WORD *)(v1391 + 8);
      }
      v1336 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1384, v1386, v1389, (uint64_t)v1387, v1388, v1390);
      uint64_t v513 = v1392;
      v1338 = sub_1CCFC6AF8(v448, (uint64_t)v1381, v1383, (const llvm::APInt *)&v2112);
      uint64_t v1340 = v1393;
      if (dword_1EBCF9F78 > 6)
      {
        if (dword_1EBCF9F78 > 0xC)
        {
          unsigned __int8 v1643 = sub_1CCFC6C24((uint64_t)v448, 0xBC91E5AC, (const llvm::APFloat *)&v2112);
          uint64_t v1646 = *((void *)v448 + 104);
          if (v1646) {
            LOWORD(v1646) = *(_WORD *)(v1646 + 8);
          }
          uint64_t v1647 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1645, (uint64_t)v1643, v1644, v1646);
          uint64_t v1649 = v1648;
          uint64_t v1650 = sub_1CCFC6C24((uint64_t)v448, 0x3E4350AAu, (const llvm::APFloat *)&v2112);
          __int16 v1653 = 0;
          uint64_t v1654 = *((void *)v448 + 104);
          if (v1654) {
            __int16 v1653 = *(_WORD *)(v1654 + 8);
          }
          int v1656 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1647, v1649, v1652, (uint64_t)v1650, v1651, v1653);
          __int16 v1658 = 0;
          uint64_t v1659 = *((void *)v448 + 104);
          if (v1659) {
            __int16 v1658 = *(_WORD *)(v1659 + 8);
          }
          v1660 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1656, v1655, v1657, (uint64_t)v1338, v1340, v1658);
          uint64_t v1662 = v1661;
          unsigned int v1663 = sub_1CCFC6C24((uint64_t)v448, 0x3F60D3E3u, (const llvm::APFloat *)&v2112);
          __int16 v1666 = 0;
          uint64_t v1667 = *((void *)v448 + 104);
          if (v1667) {
            __int16 v1666 = *(_WORD *)(v1667 + 8);
          }
          uint64_t v1669 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1660, v1662, v1665, (uint64_t)v1663, v1664, v1666);
          __int16 v1671 = 0;
          uint64_t v1672 = *((void *)v448 + 104);
          if (v1672) {
            __int16 v1671 = *(_WORD *)(v1672 + 8);
          }
          v1673 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1669, v1668, v1670, (uint64_t)v1338, v1340, v1671);
          uint64_t v1675 = v1674;
          uint64_t v1676 = sub_1CCFC6C24((uint64_t)v448, 0x4011CDF0u, (const llvm::APFloat *)&v2112);
          __int16 v1679 = 0;
          uint64_t v1680 = *((void *)v448 + 104);
          if (v1680) {
            __int16 v1679 = *(_WORD *)(v1680 + 8);
          }
          v1682 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1673, v1675, v1678, (uint64_t)v1676, v1677, v1679);
          __int16 v1684 = 0;
          uint64_t v1685 = *((void *)v448 + 104);
          if (v1685) {
            __int16 v1684 = *(_WORD *)(v1685 + 8);
          }
          uint64_t v1686 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1682, v1681, v1683, (uint64_t)v1338, v1340, v1684);
          uint64_t v1688 = v1687;
          unint64_t v1689 = sub_1CCFC6C24((uint64_t)v448, 0x406CFD1Cu, (const llvm::APFloat *)&v2112);
          __int16 v1692 = 0;
          uint64_t v1693 = *((void *)v448 + 104);
          if (v1693) {
            __int16 v1692 = *(_WORD *)(v1693 + 8);
          }
          v1695 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1686, v1688, v1691, (uint64_t)v1689, v1690, v1692);
          __int16 v1697 = 0;
          uint64_t v1698 = *((void *)v448 + 104);
          if (v1698) {
            __int16 v1697 = *(_WORD *)(v1698 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1695, v1694, v1696, (uint64_t)v1338, v1340, v1697);
          uint64_t v1347 = v1699;
          unsigned int v1348 = 1074191531;
          unsigned int v1349 = 1082628043;
        }
        else
        {
          uint64_t v1399 = sub_1CCFC6C24((uint64_t)v448, 0xBD67B6D6, (const llvm::APFloat *)&v2112);
          uint64_t v1402 = *((void *)v448 + 104);
          if (v1402) {
            LOWORD(v1402) = *(_WORD *)(v1402 + 8);
          }
          uint64_t v1403 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1401, (uint64_t)v1399, v1400, v1402);
          uint64_t v1405 = v1404;
          unsigned int v1406 = sub_1CCFC6C24((uint64_t)v448, 0x3EE4F4B8u, (const llvm::APFloat *)&v2112);
          __int16 v1409 = 0;
          uint64_t v1410 = *((void *)v448 + 104);
          if (v1410) {
            __int16 v1409 = *(_WORD *)(v1410 + 8);
          }
          unsigned int v1412 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1403, v1405, v1408, (uint64_t)v1406, v1407, v1409);
          __int16 v1414 = 0;
          uint64_t v1415 = *((void *)v448 + 104);
          if (v1415) {
            __int16 v1414 = *(_WORD *)(v1415 + 8);
          }
          v1416 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1412, v1411, v1413, (uint64_t)v1338, v1340, v1414);
          uint64_t v1418 = v1417;
          uint64_t v1419 = sub_1CCFC6C24((uint64_t)v448, 0x3FBC278Bu, (const llvm::APFloat *)&v2112);
          __int16 v1422 = 0;
          uint64_t v1423 = *((void *)v448 + 104);
          if (v1423) {
            __int16 v1422 = *(_WORD *)(v1423 + 8);
          }
          uint64_t v1425 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1416, v1418, v1421, (uint64_t)v1419, v1420, v1422);
          __int16 v1427 = 0;
          uint64_t v1428 = *((void *)v448 + 104);
          if (v1428) {
            __int16 v1427 = *(_WORD *)(v1428 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1425, v1424, v1426, (uint64_t)v1338, v1340, v1427);
          uint64_t v1347 = v1429;
          unsigned int v1348 = 1071575834;
          unsigned int v1349 = 1077186197;
        }
      }
      else
      {
        v1394 = sub_1CCFC6C24((uint64_t)v448, 0xBE74C456, (const llvm::APFloat *)&v2112);
        uint64_t v1397 = *((void *)v448 + 104);
        if (v1397) {
          LOWORD(v1397) = *(_WORD *)(v1397 + 8);
        }
        uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1396, (uint64_t)v1394, v1395, v1397);
        uint64_t v1347 = v1398;
        unsigned int v1348 = 1066703401;
        unsigned int v1349 = 1068737201;
      }
      goto LABEL_1236;
    case 176:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v1067;
      uint64_t v448 = *(llvm::APFloatBase **)(v9 + 832);
      v1068 = (uint64_t *)(v446[5] + 16 * v1067);
      uint64_t v450 = *v1068;
      if (*v1068 != 10 || dword_1EBCF9F78 == 0 || dword_1EBCF9F78 > 0x12)
      {
        __int16 v453 = v2110;
        uint64_t v454 = v1068[1];
        uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
        uint64_t v456 = 232;
        goto LABEL_863;
      }
      uint64_t v1276 = *((void *)v448 + 104);
      if (v1276) {
        __int16 v1277 = *(_WORD *)(v1276 + 8);
      }
      else {
        __int16 v1277 = 0;
      }
      v1430 = sub_1CD7F3564(*(llvm::APFloatBase **)(v9 + 832), (const char *)0xD8, (uint64_t)&v2112, (llvm *)5, 0, (uint64_t)v446, v1067, v1277);
      uint64_t v1432 = v1431;
      v1433 = sub_1CCFC693C((uint64_t)v448, (uint64_t)v1430, v1431, v10, (const llvm::APInt *)&v2112);
      uint64_t v1435 = v1434;
      uint64_t v1436 = sub_1CCFC6C24((uint64_t)v448, 0x3E9A209Au, (const llvm::APFloat *)&v2112);
      __int16 v1439 = 0;
      uint64_t v1440 = *((void *)v448 + 104);
      if (v1440) {
        __int16 v1439 = *(_WORD *)(v1440 + 8);
      }
      v1336 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1433, v1435, v1438, (uint64_t)v1436, v1437, v1439);
      uint64_t v513 = v1441;
      v1338 = sub_1CCFC6AF8(v448, (uint64_t)v1430, v1432, (const llvm::APInt *)&v2112);
      uint64_t v1340 = v1442;
      if (dword_1EBCF9F78 > 6)
      {
        if (dword_1EBCF9F78 > 0xC)
        {
          uint64_t v1700 = sub_1CCFC6C24((uint64_t)v448, 0x3C5D51CEu, (const llvm::APFloat *)&v2112);
          uint64_t v1703 = *((void *)v448 + 104);
          if (v1703) {
            LOWORD(v1703) = *(_WORD *)(v1703 + 8);
          }
          uint64_t v1704 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1702, (uint64_t)v1700, v1701, v1703);
          uint64_t v1706 = v1705;
          uint64_t v1707 = sub_1CCFC6C24((uint64_t)v448, 0x3E00685Au, (const llvm::APFloat *)&v2112);
          __int16 v1710 = 0;
          uint64_t v1711 = *((void *)v448 + 104);
          if (v1711) {
            __int16 v1710 = *(_WORD *)(v1711 + 8);
          }
          uint64_t v1713 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1704, v1706, v1709, (uint64_t)v1707, v1708, v1710);
          __int16 v1715 = 0;
          uint64_t v1716 = *((void *)v448 + 104);
          if (v1716) {
            __int16 v1715 = *(_WORD *)(v1716 + 8);
          }
          v1717 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1713, v1712, v1714, (uint64_t)v1338, v1340, v1715);
          uint64_t v1719 = v1718;
          v1720 = sub_1CCFC6C24((uint64_t)v448, 0x3EFB6798u, (const llvm::APFloat *)&v2112);
          __int16 v1723 = 0;
          uint64_t v1724 = *((void *)v448 + 104);
          if (v1724) {
            __int16 v1723 = *(_WORD *)(v1724 + 8);
          }
          uint64_t v1726 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1717, v1719, v1722, (uint64_t)v1720, v1721, v1723);
          __int16 v1728 = 0;
          uint64_t v1729 = *((void *)v448 + 104);
          if (v1729) {
            __int16 v1728 = *(_WORD *)(v1729 + 8);
          }
          unint64_t v1730 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1726, v1725, v1727, (uint64_t)v1338, v1340, v1728);
          uint64_t v1732 = v1731;
          unsigned __int8 v1733 = sub_1CCFC6C24((uint64_t)v448, 0x3F88D192u, (const llvm::APFloat *)&v2112);
          __int16 v1736 = 0;
          uint64_t v1737 = *((void *)v448 + 104);
          if (v1737) {
            __int16 v1736 = *(_WORD *)(v1737 + 8);
          }
          char v1739 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1730, v1732, v1735, (uint64_t)v1733, v1734, v1736);
          __int16 v1741 = 0;
          uint64_t v1742 = *((void *)v448 + 104);
          if (v1742) {
            __int16 v1741 = *(_WORD *)(v1742 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1739, v1738, v1740, (uint64_t)v1338, v1340, v1741);
          uint64_t v1347 = v1743;
          unsigned int v1348 = 1062719088;
          unsigned int v1349 = 1069822316;
        }
        else
        {
          int v1448 = sub_1CCFC6C24((uint64_t)v448, 0x3D431F31u, (const llvm::APFloat *)&v2112);
          uint64_t v1451 = *((void *)v448 + 104);
          if (v1451) {
            LOWORD(v1451) = *(_WORD *)(v1451 + 8);
          }
          uint64_t v1452 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1450, (uint64_t)v1448, v1449, v1451);
          uint64_t v1454 = v1453;
          uint64_t v1455 = sub_1CCFC6C24((uint64_t)v448, 0x3EA21FB2u, (const llvm::APFloat *)&v2112);
          __int16 v1458 = 0;
          uint64_t v1459 = *((void *)v448 + 104);
          if (v1459) {
            __int16 v1458 = *(_WORD *)(v1459 + 8);
          }
          v1461 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1452, v1454, v1457, (uint64_t)v1455, v1456, v1458);
          __int16 v1463 = 0;
          uint64_t v1464 = *((void *)v448 + 104);
          if (v1464) {
            __int16 v1463 = *(_WORD *)(v1464 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1461, v1460, v1462, (uint64_t)v1338, v1340, v1463);
          uint64_t v1347 = v1465;
          unsigned int v1348 = 1059452867;
          unsigned int v1349 = 1063969330;
        }
      }
      else
      {
        v1443 = sub_1CCFC6C24((uint64_t)v448, 0xBDD49A13, (const llvm::APFloat *)&v2112);
        uint64_t v1446 = *((void *)v448 + 104);
        if (v1446) {
          LOWORD(v1446) = *(_WORD *)(v1446 + 8);
        }
        uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1445, (uint64_t)v1443, v1444, v1446);
        uint64_t v1347 = v1447;
        unsigned int v1348 = 1057035008;
        unsigned int v1349 = 1058801545;
      }
      goto LABEL_1236;
    case 177:
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v445;
      uint64_t v448 = *(llvm::APFloatBase **)(v9 + 832);
      unint64_t v449 = (uint64_t *)(v446[5] + 16 * v445);
      uint64_t v450 = *v449;
      BOOL v452 = *v449 != 10 || dword_1EBCF9F78 == 0 || dword_1EBCF9F78 > 0x12;
      if (v452)
      {
        __int16 v453 = v2110;
        uint64_t v454 = v449[1];
        uint64_t v455 = *(llvm::APFloatBase **)(v9 + 832);
        uint64_t v456 = 231;
LABEL_863:
        uint64_t v158 = (uint64_t)sub_1CD7F3564(v455, (const char *)v456, (uint64_t)&v2112, (llvm *)v450, v454, (uint64_t)v446, v447, v453);
        goto LABEL_864;
      }
      uint64_t v1175 = *((void *)v448 + 104);
      if (v1175) {
        __int16 v1176 = *(_WORD *)(v1175 + 8);
      }
      else {
        __int16 v1176 = 0;
      }
      v1333 = sub_1CD7F3564(*(llvm::APFloatBase **)(v9 + 832), (const char *)0xD8, (uint64_t)&v2112, (llvm *)5, 0, (uint64_t)v446, v445, v1176);
      uint64_t v1335 = v1334;
      v1336 = sub_1CCFC693C((uint64_t)v448, (uint64_t)v1333, v1334, v10, (const llvm::APInt *)&v2112);
      uint64_t v513 = v1337;
      v1338 = sub_1CCFC6AF8(v448, (uint64_t)v1333, v1335, (const llvm::APInt *)&v2112);
      uint64_t v1340 = v1339;
      if (dword_1EBCF9F78 > 6)
      {
        if (dword_1EBCF9F78 > 0xC)
        {
          v1586 = sub_1CCFC6C24((uint64_t)v448, 0xBCD2769E, (const llvm::APFloat *)&v2112);
          uint64_t v1589 = *((void *)v448 + 104);
          if (v1589) {
            LOWORD(v1589) = *(_WORD *)(v1589 + 8);
          }
          v1590 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1588, (uint64_t)v1586, v1587, v1589);
          uint64_t v1592 = v1591;
          v1593 = sub_1CCFC6C24((uint64_t)v448, 0x3E8CE0B9u, (const llvm::APFloat *)&v2112);
          __int16 v1596 = 0;
          uint64_t v1597 = *((void *)v448 + 104);
          if (v1597) {
            __int16 v1596 = *(_WORD *)(v1597 + 8);
          }
          uint64_t v1599 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1590, v1592, v1595, (uint64_t)v1593, v1594, v1596);
          __int16 v1601 = 0;
          uint64_t v1602 = *((void *)v448 + 104);
          if (v1602) {
            __int16 v1601 = *(_WORD *)(v1602 + 8);
          }
          int v1603 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1599, v1598, v1600, (uint64_t)v1338, v1340, v1601);
          uint64_t v1605 = v1604;
          uint64_t v1606 = sub_1CCFC6C24((uint64_t)v448, 0x3FA22AE7u, (const llvm::APFloat *)&v2112);
          __int16 v1609 = 0;
          uint64_t v1610 = *((void *)v448 + 104);
          if (v1610) {
            __int16 v1609 = *(_WORD *)(v1610 + 8);
          }
          uint64_t v1612 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1603, v1605, v1608, (uint64_t)v1606, v1607, v1609);
          __int16 v1614 = 0;
          uint64_t v1615 = *((void *)v448 + 104);
          if (v1615) {
            __int16 v1614 = *(_WORD *)(v1615 + 8);
          }
          uint64_t v1616 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1612, v1611, v1613, (uint64_t)v1338, v1340, v1614);
          uint64_t v1618 = v1617;
          int v1619 = sub_1CCFC6C24((uint64_t)v448, 0x40525723u, (const llvm::APFloat *)&v2112);
          __int16 v1622 = 0;
          uint64_t v1623 = *((void *)v448 + 104);
          if (v1623) {
            __int16 v1622 = *(_WORD *)(v1623 + 8);
          }
          v1625 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1616, v1618, v1621, (uint64_t)v1619, v1620, v1622);
          __int16 v1627 = 0;
          uint64_t v1628 = *((void *)v448 + 104);
          if (v1628) {
            __int16 v1627 = *(_WORD *)(v1628 + 8);
          }
          v1629 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1625, v1624, v1626, (uint64_t)v1338, v1340, v1627);
          uint64_t v1631 = v1630;
          unsigned int v1632 = sub_1CCFC6C24((uint64_t)v448, 0x40AAF200u, (const llvm::APFloat *)&v2112);
          __int16 v1635 = 0;
          uint64_t v1636 = *((void *)v448 + 104);
          if (v1636) {
            __int16 v1635 = *(_WORD *)(v1636 + 8);
          }
          unsigned int v1638 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1629, v1631, v1634, (uint64_t)v1632, v1633, v1635);
          __int16 v1640 = 0;
          uint64_t v1641 = *((void *)v448 + 104);
          if (v1641) {
            __int16 v1640 = *(_WORD *)(v1641 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1638, v1637, v1639, (uint64_t)v1338, v1340, v1640);
          uint64_t v1347 = v1642;
          unsigned int v1348 = 1078104108;
          unsigned int v1349 = 1086561709;
        }
        else
        {
          unint64_t v1350 = sub_1CCFC6C24((uint64_t)v448, 0xBDA7262E, (const llvm::APFloat *)&v2112);
          uint64_t v1353 = *((void *)v448 + 104);
          if (v1353) {
            LOWORD(v1353) = *(_WORD *)(v1353 + 8);
          }
          uint64_t v1354 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1352, (uint64_t)v1350, v1351, v1353);
          uint64_t v1356 = v1355;
          char v1357 = sub_1CCFC6C24((uint64_t)v448, 0x3F25280Bu, (const llvm::APFloat *)&v2112);
          __int16 v1360 = 0;
          uint64_t v1361 = *((void *)v448 + 104);
          if (v1361) {
            __int16 v1360 = *(_WORD *)(v1361 + 8);
          }
          unsigned int v1363 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1354, v1356, v1359, (uint64_t)v1357, v1358, v1360);
          __int16 v1365 = 0;
          uint64_t v1366 = *((void *)v448 + 104);
          if (v1366) {
            __int16 v1365 = *(_WORD *)(v1366 + 8);
          }
          v1367 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1363, v1362, v1364, (uint64_t)v1338, v1340, v1365);
          uint64_t v1369 = v1368;
          uint64_t v1370 = sub_1CCFC6C24((uint64_t)v448, 0x4007B923u, (const llvm::APFloat *)&v2112);
          __int16 v1373 = 0;
          uint64_t v1374 = *((void *)v448 + 104);
          if (v1374) {
            __int16 v1373 = *(_WORD *)(v1374 + 8);
          }
          v1376 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1367, v1369, v1372, (uint64_t)v1370, v1371, v1373);
          __int16 v1378 = 0;
          uint64_t v1379 = *((void *)v448 + 104);
          if (v1379) {
            __int16 v1378 = *(_WORD *)(v1379 + 8);
          }
          uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1376, v1375, v1377, (uint64_t)v1338, v1340, v1378);
          uint64_t v1347 = v1380;
          unsigned int v1348 = 1075892892;
          unsigned int v1349 = 1082277423;
        }
      }
      else
      {
        v1341 = sub_1CCFC6C24((uint64_t)v448, 0xBEB08FE0, (const llvm::APFloat *)&v2112);
        uint64_t v1344 = *((void *)v448 + 104);
        if (v1344) {
          LOWORD(v1344) = *(_WORD *)(v1344 + 8);
        }
        uint64_t v1345 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1338, v1340, v1343, (uint64_t)v1341, v1342, v1344);
        uint64_t v1347 = v1346;
        unsigned int v1348 = 1071014717;
        unsigned int v1349 = 1073845347;
      }
LABEL_1236:
      uint64_t v1744 = sub_1CCFC6C24((uint64_t)v448, v1349, (const llvm::APFloat *)&v2112);
      uint64_t v1747 = *((void *)v448 + 104);
      if (v1747) {
        LOWORD(v1747) = *(_WORD *)(v1747 + 8);
      }
      uint64_t v1749 = sub_1CCFDED5C((uint64_t)v448, 96, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1345, v1347, v1746, (uint64_t)v1744, v1745, v1747);
      __int16 v1751 = 0;
      uint64_t v1752 = *((void *)v448 + 104);
      if (v1752) {
        __int16 v1751 = *(_WORD *)(v1752 + 8);
      }
      unsigned int v1753 = sub_1CCFDED5C((uint64_t)v448, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1749, v1748, v1750, (uint64_t)v1338, v1340, v1751);
      uint64_t v1755 = v1754;
      int v1756 = sub_1CCFC6C24((uint64_t)v448, v1348, (const llvm::APFloat *)&v2112);
      __int16 v1759 = 0;
      uint64_t v1760 = *((void *)v448 + 104);
      if (v1760) {
        __int16 v1759 = *(_WORD *)(v1760 + 8);
      }
      int v1761 = sub_1CCFDED5C((uint64_t)v448, 97, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, (uint64_t)v1753, v1755, v1758, (uint64_t)v1756, v1757, v1759);
      __int16 v1763 = 0;
      uint64_t v1764 = *((void *)v448 + 104);
      if (v1764) {
        __int16 v1763 = *(_WORD *)(v1764 + 8);
      }
      uint64_t v1997 = v1762;
      __int16 v2000 = v1763;
      uint64_t v1995 = (uint64_t)v1761;
      uint64_t v361 = (uint64_t)v448;
      uint64_t v362 = 96;
      uint64_t v358 = 10;
      uint64_t v359 = 0;
      uint64_t v528 = (uint64_t)v1336;
LABEL_1245:
      uint64_t v914 = v513;
      goto LABEL_714;
    case 182:
      uint64_t v997 = v9;
      uint64_t v998 = v8;
      unsigned __int8 v999 = 1;
      goto LABEL_639;
    case 183:
      uint64_t v862 = v9;
      uint64_t v863 = v8;
      char v864 = 1;
      goto LABEL_682;
    case 184:
      sub_1CD7E3120(v9, v8);
      goto LABEL_867;
    case 185:
      uint64_t v862 = v9;
      uint64_t v863 = v8;
      char v864 = 0;
LABEL_682:
      sub_1CD7E2E1C(v862, v863, v864);
      goto LABEL_867;
    case 186:
      sub_1CD7E2968(v9, v8);
      goto LABEL_867;
    case 187:
      uint64_t v997 = v9;
      uint64_t v998 = v8;
      unsigned __int8 v999 = 0;
LABEL_639:
      sub_1CD7E26F8(v997, v998, v999);
      goto LABEL_867;
    case 192:
      uint64_t v907 = *(void *)(v9 + 832);
      uint64_t v908 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v910 = (uint64_t *)(v908[5] + 16 * v909);
      uint64_t v573 = *v910;
      uint64_t v574 = v910[1];
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v911;
      v912 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1997 = v913;
      __int16 v2000 = v2110;
      uint64_t v1995 = (uint64_t)v912;
      uint64_t v361 = v907;
      uint64_t v362 = 251;
      goto LABEL_589;
    case 193:
      uint64_t v757 = *(void *)(v9 + 832);
      int v758 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v760 = (uint64_t *)(v758[5] + 16 * v759);
      uint64_t v573 = *v760;
      uint64_t v574 = v760[1];
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v761;
      uint64_t v762 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1997 = v763;
      __int16 v2000 = v2110;
      uint64_t v1995 = (uint64_t)v762;
      uint64_t v361 = v757;
      uint64_t v362 = 247;
      goto LABEL_589;
    case 194:
      uint64_t v463 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v2041 = v464;
      uint64_t v2053 = (uint64_t)v463;
      int v465 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2016 = v466;
      uint64_t v2027 = (uint64_t)v465;
      v2010 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v469 = v468;
      uint64_t v470 = *(void *)(v8 + 64);
      if (v470 && (unsigned int v471 = *(_DWORD *)(v470 + 8), v471 >= 3))
      {
        uint64_t v472 = *(llvm::AttributeSetNode **)(v470 + 56);
        if (v472)
        {
          LOWORD(v472) = llvm::AttributeSetNode::getAlignment(v472);
          int v473 = BYTE1(v472);
        }
        else
        {
          int v473 = 0;
        }
        unsigned int v1765 = v472 | (v473 << 8);
        if (v1765 <= 0x100) {
          unsigned __int8 v1159 = 0;
        }
        else {
          unsigned __int8 v1159 = v1765;
        }
        if (v471 >= 4)
        {
          unint64_t v1161 = *(llvm::AttributeSetNode **)(v470 + 64);
          if (v1161)
          {
            LOWORD(v1161) = llvm::AttributeSetNode::getAlignment(v1161);
            int v1160 = BYTE1(v1161);
          }
          else
          {
            int v1160 = 0;
          }
LABEL_1259:
          unsigned int v1766 = v1161 | (v1160 << 8);
          if (v1766 <= 0x100) {
            LOBYTE(v1766) = 0;
          }
          if (v1766 >= v1159) {
            uint64_t v1767 = v1159;
          }
          else {
            uint64_t v1767 = v1766;
          }
          uint64_t v1768 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96);
          uint64_t v1769 = *(unsigned int *)(v1768 + 32);
          if (v1769 > 0x40)
          {
            int v1771 = 0;
            int64_t v1772 = (unint64_t)(v1769 + 63) >> 6;
            do
            {
              BOOL v452 = v1772-- < 1;
              if (v452) {
                break;
              }
              unint64_t v1773 = *(void *)(*(void *)(v1768 + 24) + 8 * v1772);
              v1771 += __clz(v1773);
            }
            while (!v1773);
            int v1774 = v1769 | 0xFFFFFFC0;
            if ((v1769 & 0x3F) == 0) {
              int v1774 = 0;
            }
            BOOL v1770 = v1771 + v1774 == v1769;
          }
          else
          {
            BOOL v1770 = *(void *)(v1768 + 24) == 0;
          }
          char v1775 = v1770;
          if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
            char v1776 = 0;
          }
          else {
            char v1776 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v467);
          }
          if (v1775) {
            uint64_t v1777 = sub_1CD7D7210((uint64_t *)v9, v9 + 104);
          }
          else {
            uint64_t v1777 = sub_1CD7D7360(v9);
          }
          uint64_t v1779 = (uint64_t)v1777;
          uint64_t v1780 = v1778;
          char v1781 = v1775 ^ 1;
          uint64_t v1782 = *(void *)(v9 + 832);
          int v1783 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          v1784 = (uint64_t *)*v1783;
          *(void *)&long long v2105 = *v1783 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2105 + 1) = 0;
          char v2107 = 0;
          if (v1784)
          {
            uint64_t v1785 = *v1784;
            unsigned int v1786 = *(_DWORD *)(*v1784 + 8);
            if ((v1786 & 0xFE) == 0x12) {
              unsigned int v1786 = *(_DWORD *)(**(void **)(v1785 + 16) + 8);
            }
            LODWORD(v1784) = v1786 >> 8;
          }
          int v2106 = (int)v1784;
          uint64_t v1787 = v1783[4];
          *(void *)&long long v2102 = v1787 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2102 + 1) = 0;
          char v2104 = 0;
          if (v1787)
          {
            uint64_t v1788 = *(void *)v1787;
            unsigned int v1789 = *(_DWORD *)(*(void *)v1787 + 8);
            if ((v1789 & 0xFE) == 0x12) {
              unsigned int v1789 = *(_DWORD *)(**(void **)(v1788 + 16) + 8);
            }
            LODWORD(v1787) = v1789 >> 8;
          }
          int v2103 = v1787;
          llvm::Instruction::getAAMetadata((uint64_t ***)v8, v2119);
          uint64_t v541 = (uint64_t)sub_1CD7F6720(v1782, v1779, v1780, (uint64_t)&v2112, v2053, v2041, v2027, v2016, (uint64_t)v2010, v469, SHIDWORD(v469), v1767, SHIDWORD(v1767), v1781, 0, v1776, &v2105, &v2102, (uint64_t)v2119);
          if (v541) {
            goto LABEL_1367;
          }
LABEL_1368:
          *(unsigned char *)(v9 + 960) = 1;
          goto LABEL_867;
        }
      }
      else
      {
        unsigned __int8 v1159 = 0;
      }
      int v1160 = 0;
      LOBYTE(v1161) = 0;
      goto LABEL_1259;
    case 195:
      uint64_t v884 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v2043 = v885;
      uint64_t v2055 = (uint64_t)v884;
      uint64_t v886 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2018 = v887;
      uint64_t v2029 = (uint64_t)v886;
      unsigned int v889 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v891 = v890;
      uint64_t v892 = *(void *)(v8 + 64);
      if (v892)
      {
        unsigned int v893 = *(_DWORD *)(v892 + 8);
        if (v893 >= 3
          && (uint64_t v894 = *(llvm::AttributeSetNode **)(v892 + 56)) != 0
          && (unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v894), Alignment > 0xFFu))
        {
          uint64_t v896 = 1 << Alignment;
        }
        else
        {
          LODWORD(v896) = 0;
        }
        if (v893 >= 4)
        {
          uint64_t v1514 = *(llvm::AttributeSetNode **)(v892 + 64);
          if (v1514)
          {
            unsigned __int16 v1515 = llvm::AttributeSetNode::getAlignment(v1514);
            if (v1515 > 0xFFu)
            {
              uint64_t v1516 = 1 << v1515;
LABEL_1107:
              unint64_t v1517 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
              v1518 = *(uint64_t **)(v1517 + 64);
              uint64_t v1519 = *(void *)(v1517 + 96);
              int v1520 = (void *)(v1519 + 24);
              if (*(_DWORD *)(v1519 + 32) >= 0x41u) {
                int v1520 = (void *)*v1520;
              }
              uint64_t v1521 = *v1518;
              int v1522 = *(_DWORD *)v1520;
              if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
                char v1523 = 0;
              }
              else {
                char v1523 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v888);
              }
              uint64_t v1524 = *(void *)(v9 + 832);
              unsigned int v1526 = sub_1CD7D7360(v9);
              v1528 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
              v1529 = (uint64_t *)*v1528;
              unint64_t v2083 = *v1528 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v2084 = 0;
              char v2086 = 0;
              if (v1529)
              {
                uint64_t v1530 = *v1529;
                unsigned int v1531 = *(_DWORD *)(*v1529 + 8);
                if ((v1531 & 0xFE) == 0x12) {
                  unsigned int v1531 = *(_DWORD *)(**(void **)(v1530 + 16) + 8);
                }
                LODWORD(v1529) = v1531 >> 8;
              }
              int v2085 = (int)v1529;
              uint64_t v1532 = v1528[4];
              unint64_t v2079 = v1532 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v2080 = 0;
              char v2082 = 0;
              if (v1532)
              {
                uint64_t v1533 = *(void *)v1532;
                unsigned int v1534 = *(_DWORD *)(*(void *)v1532 + 8);
                if ((v1534 & 0xFE) == 0x12) {
                  unsigned int v1534 = *(_DWORD *)(**(void **)(v1533 + 16) + 8);
                }
                LODWORD(v1532) = v1534 >> 8;
              }
              int v2081 = v1532;
              BYTE4(v2004) = v1523;
              LODWORD(v2004) = v1522;
              LODWORD(v1998) = v1516;
              uint64_t v541 = sub_1CD7F6DF0(v1524, (uint64_t)v1526, v1525, (uint64_t)&v2112, v2055, v2043, v896, v1527, v2029, v2018, v1998, (uint64_t)v889, v891, v1521, v2004);
              if (v541) {
                goto LABEL_1367;
              }
              goto LABEL_1368;
            }
          }
        }
      }
      else
      {
        LODWORD(v896) = 0;
      }
      LODWORD(v1516) = 0;
      goto LABEL_1107;
    case 196:
      unsigned int v727 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v2042 = v728;
      uint64_t v2054 = (uint64_t)v727;
      unsigned int v729 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2017 = v730;
      uint64_t v2028 = (uint64_t)v729;
      v2011 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v733 = v732;
      uint64_t v734 = *(void *)(v8 + 64);
      if (v734 && (unsigned int v735 = *(_DWORD *)(v734 + 8), v735 >= 3))
      {
        uint64_t v736 = *(llvm::AttributeSetNode **)(v734 + 56);
        if (v736)
        {
          LOWORD(v736) = llvm::AttributeSetNode::getAlignment(v736);
          int v737 = BYTE1(v736);
        }
        else
        {
          int v737 = 0;
        }
        unsigned int v1790 = v736 | (v737 << 8);
        if (v1790 <= 0x100) {
          unsigned __int8 v1162 = 0;
        }
        else {
          unsigned __int8 v1162 = v1790;
        }
        if (v735 >= 4)
        {
          size_t v1164 = *(llvm::AttributeSetNode **)(v734 + 64);
          if (v1164)
          {
            LOWORD(v1164) = llvm::AttributeSetNode::getAlignment(v1164);
            int v1163 = BYTE1(v1164);
          }
          else
          {
            int v1163 = 0;
          }
LABEL_1299:
          unsigned int v1791 = v1164 | (v1163 << 8);
          if (v1791 <= 0x100) {
            LOBYTE(v1791) = 0;
          }
          if (v1791 >= v1162) {
            uint64_t v1792 = v1162;
          }
          else {
            uint64_t v1792 = v1791;
          }
          uint64_t v1793 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96);
          uint64_t v1794 = *(unsigned int *)(v1793 + 32);
          if (v1794 > 0x40)
          {
            int v1796 = 0;
            int64_t v1797 = (unint64_t)(v1794 + 63) >> 6;
            do
            {
              BOOL v452 = v1797-- < 1;
              if (v452) {
                break;
              }
              unint64_t v1798 = *(void *)(*(void *)(v1793 + 24) + 8 * v1797);
              v1796 += __clz(v1798);
            }
            while (!v1798);
            int v1799 = v1794 | 0xFFFFFFC0;
            if ((v1794 & 0x3F) == 0) {
              int v1799 = 0;
            }
            BOOL v1795 = v1796 + v1799 == v1794;
          }
          else
          {
            BOOL v1795 = *(void *)(v1793 + 24) == 0;
          }
          char v1800 = v1795;
          if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
            char v1801 = 0;
          }
          else {
            char v1801 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v731);
          }
          char v1802 = v1800 ^ 1;
          uint64_t v1803 = *(void *)(v9 + 832);
          v1804 = sub_1CD7D7360(v9);
          uint64_t v1806 = v1805;
          v1807 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          int v1808 = (uint64_t *)*v1807;
          *(void *)&long long v2099 = *v1807 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2099 + 1) = 0;
          char v2101 = 0;
          if (v1808)
          {
            uint64_t v1809 = *v1808;
            unsigned int v1810 = *(_DWORD *)(*v1808 + 8);
            if ((v1810 & 0xFE) == 0x12) {
              unsigned int v1810 = *(_DWORD *)(**(void **)(v1809 + 16) + 8);
            }
            LODWORD(v1808) = v1810 >> 8;
          }
          int v2100 = (int)v1808;
          uint64_t v1811 = v1807[4];
          *(void *)&long long v2096 = v1811 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2096 + 1) = 0;
          char v2098 = 0;
          if (v1811)
          {
            uint64_t v1812 = *(void *)v1811;
            unsigned int v1813 = *(_DWORD *)(*(void *)v1811 + 8);
            if ((v1813 & 0xFE) == 0x12) {
              unsigned int v1813 = *(_DWORD *)(**(void **)(v1812 + 16) + 8);
            }
            LODWORD(v1811) = v1813 >> 8;
          }
          int v2097 = v1811;
          llvm::Instruction::getAAMetadata((uint64_t ***)v8, v2119);
          uint64_t v541 = (uint64_t)sub_1CD7F6720(v1803, (uint64_t)v1804, v1806, (uint64_t)&v2112, v2054, v2042, v2028, v2017, (uint64_t)v2011, v733, SHIDWORD(v733), v1792, SHIDWORD(v1792), v1802, 1u, v1801, &v2099, &v2096, (uint64_t)v2119);
          if (!v541)
          {
            *(unsigned char *)(v9 + 960) = 1;
            goto LABEL_867;
          }
          goto LABEL_1367;
        }
      }
      else
      {
        unsigned __int8 v1162 = 0;
      }
      int v1163 = 0;
      LOBYTE(v1164) = 0;
      goto LABEL_1299;
    case 197:
      int v915 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v2044 = v916;
      uint64_t v2056 = (uint64_t)v915;
      unsigned __int8 v917 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2019 = v918;
      uint64_t v2030 = (uint64_t)v917;
      v2012 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v921 = v920;
      uint64_t v922 = *(void *)(v8 + 64);
      if (v922 && (unsigned int v923 = *(_DWORD *)(v922 + 8), v923 >= 3))
      {
        uint64_t v924 = *(llvm::AttributeSetNode **)(v922 + 56);
        if (v924)
        {
          LOWORD(v924) = llvm::AttributeSetNode::getAlignment(v924);
          int v925 = BYTE1(v924);
        }
        else
        {
          int v925 = 0;
        }
        unsigned int v1814 = v924 | (v925 << 8);
        if (v1814 <= 0x100) {
          unsigned __int8 v1165 = 0;
        }
        else {
          unsigned __int8 v1165 = v1814;
        }
        if (v923 >= 4)
        {
          v1167 = *(llvm::AttributeSetNode **)(v922 + 64);
          if (v1167)
          {
            LOWORD(v1167) = llvm::AttributeSetNode::getAlignment(v1167);
            int v1166 = BYTE1(v1167);
          }
          else
          {
            int v1166 = 0;
          }
LABEL_1336:
          unsigned int v1815 = v1167 | (v1166 << 8);
          if (v1815 <= 0x100) {
            LOBYTE(v1815) = 0;
          }
          if (v1815 >= v1165) {
            uint64_t v1816 = v1165;
          }
          else {
            uint64_t v1816 = v1815;
          }
          uint64_t v1817 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96);
          uint64_t v1818 = *(unsigned int *)(v1817 + 32);
          if (v1818 > 0x40)
          {
            int v1820 = 0;
            int64_t v1821 = (unint64_t)(v1818 + 63) >> 6;
            do
            {
              BOOL v452 = v1821-- < 1;
              if (v452) {
                break;
              }
              unint64_t v1822 = *(void *)(*(void *)(v1817 + 24) + 8 * v1821);
              v1820 += __clz(v1822);
            }
            while (!v1822);
            int v1823 = v1818 | 0xFFFFFFC0;
            if ((v1818 & 0x3F) == 0) {
              int v1823 = 0;
            }
            BOOL v1819 = v1820 + v1823 == v1818;
          }
          else
          {
            BOOL v1819 = *(void *)(v1817 + 24) == 0;
          }
          char v1824 = v1819;
          if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
            char v1825 = 0;
          }
          else {
            char v1825 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v919);
          }
          if (v1824) {
            v1826 = sub_1CD7D7210((uint64_t *)v9, v9 + 104);
          }
          else {
            v1826 = sub_1CD7D7360(v9);
          }
          uint64_t v1828 = (uint64_t)v1826;
          uint64_t v1829 = v1827;
          unsigned __int8 v1830 = v1824 ^ 1;
          uint64_t v1831 = *(void *)(v9 + 832);
          uint64_t v1832 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          v1833 = (uint64_t *)*v1832;
          *(void *)&long long v2090 = *v1832 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2090 + 1) = 0;
          char v2092 = 0;
          if (v1833)
          {
            uint64_t v1834 = *v1833;
            unsigned int v1835 = *(_DWORD *)(*v1833 + 8);
            if ((v1835 & 0xFE) == 0x12) {
              unsigned int v1835 = *(_DWORD *)(**(void **)(v1834 + 16) + 8);
            }
            LODWORD(v1833) = v1835 >> 8;
          }
          int v2091 = (int)v1833;
          uint64_t v1836 = v1832[4];
          *(void *)&long long v2087 = v1836 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)&v2087 + 1) = 0;
          char v2089 = 0;
          if (v1836)
          {
            uint64_t v1837 = *(void *)v1836;
            unsigned int v1838 = *(_DWORD *)(*(void *)v1836 + 8);
            if ((v1838 & 0xFE) == 0x12) {
              unsigned int v1838 = *(_DWORD *)(**(void **)(v1837 + 16) + 8);
            }
            LODWORD(v1836) = v1838 >> 8;
          }
          int v2088 = v1836;
          llvm::Instruction::getAAMetadata((uint64_t ***)v8, v2119);
          uint64_t v541 = (uint64_t)sub_1CD7F7178(v1831, v1828, v1829, (uint64_t)&v2112, v2056, v2044, v2030, v2019, (uint64_t)v2012, v921, SHIDWORD(v921), v1816, SHIDWORD(v1816), v1830, v1825, &v2090, &v2087, (uint64_t)v2119);
          if (v541) {
            goto LABEL_1367;
          }
          goto LABEL_1368;
        }
      }
      else
      {
        unsigned __int8 v1165 = 0;
      }
      int v1166 = 0;
      LOBYTE(v1167) = 0;
      goto LABEL_1336;
    case 198:
      uint64_t v1014 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v2045 = v1015;
      uint64_t v2057 = (uint64_t)v1014;
      int v1016 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2020 = v1017;
      uint64_t v2031 = (uint64_t)v1016;
      uint64_t v1019 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v1021 = v1020;
      uint64_t v1022 = *(void *)(v8 + 64);
      if (v1022)
      {
        unsigned int v1023 = *(_DWORD *)(v1022 + 8);
        if (v1023 >= 3
          && (int v1024 = *(llvm::AttributeSetNode **)(v1022 + 56)) != 0
          && (unsigned __int16 v1025 = llvm::AttributeSetNode::getAlignment(v1024), v1025 > 0xFFu))
        {
          uint64_t v1026 = 1 << v1025;
        }
        else
        {
          LODWORD(v1026) = 0;
        }
        if (v1023 >= 4)
        {
          v1535 = *(llvm::AttributeSetNode **)(v1022 + 64);
          if (v1535)
          {
            unsigned __int16 v1536 = llvm::AttributeSetNode::getAlignment(v1535);
            if (v1536 > 0xFFu)
            {
              uint64_t v1537 = 1 << v1536;
LABEL_1128:
              unint64_t v1538 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
              uint64_t v1539 = *(uint64_t **)(v1538 + 64);
              uint64_t v1540 = *(void *)(v1538 + 96);
              uint64_t v1541 = (void *)(v1540 + 24);
              if (*(_DWORD *)(v1540 + 32) >= 0x41u) {
                uint64_t v1541 = (void *)*v1541;
              }
              uint64_t v1542 = *v1539;
              int v1543 = *(_DWORD *)v1541;
              if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
                char v1544 = 0;
              }
              else {
                char v1544 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v1018);
              }
              uint64_t v1545 = *(void *)(v9 + 832);
              uint64_t v1547 = sub_1CD7D7360(v9);
              uint64_t v1549 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
              v1550 = (uint64_t *)*v1549;
              unint64_t v2075 = *v1549 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v2076 = 0;
              char v2078 = 0;
              if (v1550)
              {
                uint64_t v1551 = *v1550;
                unsigned int v1552 = *(_DWORD *)(*v1550 + 8);
                if ((v1552 & 0xFE) == 0x12) {
                  unsigned int v1552 = *(_DWORD *)(**(void **)(v1551 + 16) + 8);
                }
                LODWORD(v1550) = v1552 >> 8;
              }
              int v2077 = (int)v1550;
              uint64_t v1553 = v1549[4];
              unint64_t v2071 = v1553 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v2072 = 0;
              char v2074 = 0;
              if (v1553)
              {
                uint64_t v1554 = *(void *)v1553;
                unsigned int v1555 = *(_DWORD *)(*(void *)v1553 + 8);
                if ((v1555 & 0xFE) == 0x12) {
                  unsigned int v1555 = *(_DWORD *)(**(void **)(v1554 + 16) + 8);
                }
                LODWORD(v1553) = v1555 >> 8;
              }
              int v2073 = v1553;
              BYTE4(v2004) = v1544;
              LODWORD(v2004) = v1543;
              LODWORD(v1998) = v1537;
              uint64_t v541 = sub_1CD7F7DE4(v1545, (uint64_t)v1547, v1546, (uint64_t)&v2112, v2057, v2045, v1026, v1548, v2031, v2020, v1998, (uint64_t)v1019, v1021, v1542, v2004);
              if (v541) {
                goto LABEL_1367;
              }
              goto LABEL_1368;
            }
          }
        }
      }
      else
      {
        LODWORD(v1026) = 0;
      }
      LODWORD(v1537) = 0;
      goto LABEL_1128;
    case 199:
      uint64_t v406 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v2040 = v407;
      uint64_t v2052 = (uint64_t)v406;
      uint64_t v408 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2015 = v409;
      uint64_t v2026 = (uint64_t)v408;
      v2009 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v412 = v411;
      uint64_t v413 = *(void *)(v8 + 64);
      if (!v413) {
        goto LABEL_1145;
      }
      if (*(_DWORD *)(v413 + 8) < 3u)
      {
        LODWORD(v413) = 0;
LABEL_1145:
        LOBYTE(v414) = 0;
      }
      else
      {
        uint64_t v414 = *(llvm::AttributeSetNode **)(v413 + 56);
        if (v414)
        {
          LOWORD(v414) = llvm::AttributeSetNode::getAlignment(v414);
          LODWORD(v413) = BYTE1(v414);
        }
        else
        {
          LODWORD(v413) = 0;
        }
      }
      unsigned int v1556 = v414 | (v413 << 8);
      if (v1556 <= 0x100) {
        unsigned __int8 v1557 = 0;
      }
      else {
        unsigned __int8 v1557 = v1556;
      }
      uint64_t v1558 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96);
      uint64_t v1559 = *(unsigned int *)(v1558 + 32);
      if (v1559 > 0x40)
      {
        int v1561 = 0;
        int64_t v1562 = (unint64_t)(v1559 + 63) >> 6;
        do
        {
          BOOL v452 = v1562-- < 1;
          if (v452) {
            break;
          }
          unint64_t v1563 = *(void *)(*(void *)(v1558 + 24) + 8 * v1562);
          v1561 += __clz(v1563);
        }
        while (!v1563);
        int v1564 = v1559 | 0xFFFFFFC0;
        if ((v1559 & 0x3F) == 0) {
          int v1564 = 0;
        }
        BOOL v1560 = v1561 + v1564 == v1559;
      }
      else
      {
        BOOL v1560 = *(void *)(v1558 + 24) == 0;
      }
      char v1565 = v1560;
      if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
        char v1566 = 0;
      }
      else {
        char v1566 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v410);
      }
      unsigned __int8 v1567 = v1565 ^ 1;
      if (v1565) {
        v1568 = sub_1CD7D7210((uint64_t *)v9, v9 + 104);
      }
      else {
        v1568 = sub_1CD7D7360(v9);
      }
      uint64_t v1570 = (uint64_t)v1568;
      uint64_t v1571 = v1569;
      uint64_t v1572 = *(void *)(v9 + 832);
      uint64_t v1573 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      *(void *)&long long v2093 = v1573 & 0xFFFFFFFFFFFFFFFBLL;
      *((void *)&v2093 + 1) = 0;
      char v2095 = 0;
      if (v1573)
      {
        uint64_t v1574 = *(void *)v1573;
        unsigned int v1575 = *(_DWORD *)(*(void *)v1573 + 8);
        if ((v1575 & 0xFE) == 0x12) {
          unsigned int v1575 = *(_DWORD *)(**(void **)(v1574 + 16) + 8);
        }
        LODWORD(v1573) = v1575 >> 8;
      }
      int v2094 = v1573;
      llvm::Instruction::getAAMetadata((uint64_t ***)v8, v2119);
      uint64_t v541 = (uint64_t)sub_1CD7F816C(v1572, v1570, v1571, (uint64_t)&v2112, v2052, v2040, v2026, v2015, (uint64_t)v2009, v412, SHIDWORD(v412), v1557, 0, v1567, v1566, &v2093, (uint64_t)v2119);
      if (!v541) {
        goto LABEL_1368;
      }
      goto LABEL_1367;
    case 200:
      uint64_t v368 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v2039 = v369;
      uint64_t v2051 = (uint64_t)v368;
      v2025 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v371 = v370;
      uint64_t v373 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v375 = v374;
      uint64_t v376 = *(void *)(v8 + 64);
      if (v376
        && *(_DWORD *)(v376 + 8) >= 3u
        && (int v377 = *(llvm::AttributeSetNode **)(v376 + 56)) != 0
        && (unsigned __int16 v378 = llvm::AttributeSetNode::getAlignment(v377), v378 > 0xFFu))
      {
        uint64_t v379 = 1 << v378;
      }
      else
      {
        LODWORD(v379) = 0;
      }
      unint64_t v380 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
      uint64_t v381 = *(uint64_t **)(v380 + 64);
      uint64_t v382 = *(void *)(v380 + 96);
      uint64_t v383 = (void *)(v382 + 24);
      if (*(_DWORD *)(v382 + 32) >= 0x41u) {
        uint64_t v383 = (void *)*v383;
      }
      uint64_t v384 = *v381;
      int v385 = *(_DWORD *)v383;
      if ((*(_WORD *)(v8 + 18) & 3u) - 1 > 1) {
        char v386 = 0;
      }
      else {
        char v386 = llvm::isInTailCallPosition((llvm *)v8, **(const llvm::CallBase ***)(v9 + 832), v372);
      }
      uint64_t v1168 = *(void *)(v9 + 832);
      v1170 = sub_1CD7D7360(v9);
      uint64_t v1172 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      v2068[1] = (unsigned __int8 *)(v1172 & 0xFFFFFFFFFFFFFFFBLL);
      v2068[2] = 0;
      char v2070 = 0;
      if (v1172)
      {
        uint64_t v1173 = *(void *)v1172;
        unsigned int v1174 = *(_DWORD *)(*(void *)v1172 + 8);
        if ((v1174 & 0xFE) == 0x12) {
          unsigned int v1174 = *(_DWORD *)(**(void **)(v1173 + 16) + 8);
        }
        LODWORD(v1172) = v1174 >> 8;
      }
      int v2069 = v1172;
      BYTE4(v2003) = v386;
      LODWORD(v2003) = v385;
      uint64_t v541 = sub_1CD7F8DE0(v1168, (uint64_t)v1170, v1169, (uint64_t)&v2112, v2051, v2039, v379, v1171, (uint64_t)v2025, v371, (uint64_t)v373, v375, v384, v2003);
      if (!v541) {
        goto LABEL_1368;
      }
      goto LABEL_1367;
    case 201:
      uint64_t v900 = *(void *)(v9 + 832);
      unsigned int v901 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      v903 = (uint64_t *)(v901[5] + 16 * v902);
      uint64_t v573 = *v903;
      uint64_t v574 = v903[1];
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v904;
      v905 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1997 = v906;
      __int16 v2000 = v2110;
      uint64_t v1995 = (uint64_t)v905;
      uint64_t v361 = v900;
      uint64_t v362 = 250;
      goto LABEL_589;
    case 202:
      uint64_t v839 = *(void *)(v9 + 832);
      int v840 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v842 = (uint64_t *)(v840[5] + 16 * v841);
      uint64_t v573 = *v842;
      uint64_t v574 = v842[1];
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v843;
      int v844 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1997 = v845;
      __int16 v2000 = v2110;
      uint64_t v1995 = (uint64_t)v844;
      uint64_t v361 = v839;
      uint64_t v362 = 246;
LABEL_589:
      uint64_t v358 = v573;
      uint64_t v359 = v574;
      goto LABEL_590;
    case 237:
      unsigned int v980 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v982 = v981;
      uint64_t v983 = *(void *)(v9 + 832);
      uint64_t v985 = sub_1CD7D7360(v9);
      uint64_t v987 = *(void *)(v983 + 832);
      if (v987) {
        LOWORD(v987) = *(_WORD *)(v987 + 8);
      }
      int v988 = sub_1CCFDED5C(v983, 279, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v985, v984, v986, (uint64_t)v980, v982, v987);
      goto LABEL_955;
    case 238:
      uint64_t v575 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v577 = v1086;
      uint64_t v1087 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1089 = (uint64_t)v1087;
      uint64_t v1090 = v1088;
      uint64_t v546 = *(void *)(v9 + 832);
      __int16 v1091 = v2110;
      uint64_t v1092 = v575[5];
      uint64_t v358 = *(void *)(v1092 + 16 * v577);
      if (v358 != 10) {
        goto LABEL_1398;
      }
      BOOL v1093 = *(unsigned char *)(v1087[5] + 16 * v1088) != 10 || dword_1EBCF9F78 == 0;
      if (v1093 || dword_1EBCF9F78 > 0x12) {
        goto LABEL_1398;
      }
      int v1095 = *((unsigned __int16 *)v575 + 12);
      if (v1095 != 36 && v1095 != 12) {
        goto LABEL_1398;
      }
      LODWORD(v2119[1]) = 32;
      v2119[0] = (void *)1092616192;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v2117, (const llvm::APInt **)v2119);
      v2119[1] = v2117[0];
      *(void **)v2120 = v2117[1];
      *(_DWORD *)&v2120[8] = v2118[0];
      v2120[12] = v2120[12] & 0xF0 | BYTE4(v2118[0]) & 0xF;
      char v1097 = sub_1CC5ED3C4(v575[10] + 24, (uint64_t)v2119);
      if (v2119[1] == &unk_1CFB2E344)
      {
        char v2059 = v1097;
        sub_1CB845718((uint64_t *)v2120);
LABEL_1620:
        char v1097 = v2059;
        goto LABEL_701;
      }
      if ((*((_DWORD *)v2119[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)v2120)
      {
        char v2059 = v1097;
        MEMORY[0x1D25D9CB0](*(void *)v2120, 0x1000C8000313F17);
        goto LABEL_1620;
      }
LABEL_701:
      if (v1097)
      {
        uint64_t v1098 = sub_1CCFC6C24(v546, 0x40549A78u, (const llvm::APFloat *)&v2112);
        uint64_t v1101 = *(void *)(v546 + 832);
        if (v1101) {
          LOWORD(v1101) = *(_WORD *)(v1101 + 8);
        }
        uint64_t v764 = sub_1CCFDED5C(v546, 98, (const llvm::APInt *)&v2112, (llvm *)0xA, 0, v1089, v1090, v1100, (uint64_t)v1098, v1099, v1101);
LABEL_760:
        uint64_t v1248 = v546;
LABEL_835:
        uint64_t v158 = (uint64_t)sub_1CCFC6D34((uint64_t)v764, v765, (const llvm::APInt *)&v2112, v1248);
      }
      else
      {
        uint64_t v1092 = v575[5];
        uint64_t v358 = *(void *)(v1092 + 16 * v577);
LABEL_1398:
        uint64_t v359 = *(void *)(v1092 + 16 * v577 + 8);
        uint64_t v1997 = v1090;
        __int16 v2000 = v1091;
        uint64_t v1995 = v1089;
        uint64_t v361 = v546;
        uint64_t v362 = 229;
LABEL_590:
        uint64_t v528 = (uint64_t)v575;
        uint64_t v914 = v577;
LABEL_714:
        uint64_t v158 = (uint64_t)sub_1CCFDED5C(v361, v362, (const llvm::APInt *)&v2112, (llvm *)v358, v359, v528, v914, v356, v1995, v1997, v2000);
      }
      goto LABEL_864;
    case 239:
      uint64_t v392 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      unint64_t v394 = v393;
      uint64_t v395 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v397 = (uint64_t)v395;
      uint64_t v399 = v398;
      uint64_t v400 = *(void *)(v9 + 832);
      int v401 = *((unsigned __int16 *)v395 + 12);
      if (v401 != 35 && v401 != 11) {
        goto LABEL_976;
      }
      uint64_t v403 = v395[10];
      unsigned int v404 = *(_DWORD *)(v403 + 32);
      if (v404 > 0x40) {
        uint64_t v405 = **(void **)(v403 + 24);
      }
      else {
        uint64_t v405 = (uint64_t)(*(void *)(v403 + 24) << -(char)v404) >> -(char)v404;
      }
      if ((int)v405 >= 0) {
        unsigned int v1310 = v405;
      }
      else {
        unsigned int v1310 = -(int)v405;
      }
      if (v405)
      {
        if (sub_1CD7EAF54(*(void *)(v9 + 832))
          && (v1314.i32[0] = v1310,
              uint8x8_t v1315 = (uint8x8_t)vcnt_s8(v1314),
              v1315.i16[0] = vaddlv_u8(v1315),
              (__clz(v1310) ^ 0x1F) + v1315.i32[0] > 6))
        {
LABEL_976:
          uint64_t v1329 = v392[5] + 16 * v394;
          v1330 = *(llvm **)v1329;
          uint64_t v1331 = *(void *)(v1329 + 8);
          uint64_t v1332 = *(void *)(v400 + 832);
          if (v1332) {
            LOWORD(v1332) = *(_WORD *)(v1332 + 8);
          }
          uint64_t v1312 = sub_1CCFDED5C(v400, 228, (const llvm::APInt *)&v2112, v1330, v1331, (uint64_t)v392, v394, v396, v397, v399, v1332);
        }
        else
        {
          uint64_t v1316 = 0;
          v1317 = 0;
          uint64_t v1318 = v392;
          unsigned int v2058 = v394;
          do
          {
            if (v1310)
            {
              if (v1317)
              {
                uint64_t v1319 = *(void *)(v400 + 832);
                if (v1319) {
                  LOWORD(v1319) = *(_WORD *)(v1319 + 8);
                }
                v1317 = sub_1CCFDED5C(v400, 98, (const llvm::APInt *)&v2112, *(llvm **)(v1317[5] + 16 * v1316), *(void *)(v1317[5] + 16 * v1316 + 8), (uint64_t)v1317, v1316, v396, (uint64_t)v1318, v394, v1319);
                uint64_t v1316 = v1320;
              }
              else
              {
                uint64_t v1316 = v394;
                v1317 = v1318;
              }
            }
            uint64_t v1321 = v1318[5] + 16 * v394;
            v1322 = *(llvm **)v1321;
            uint64_t v1323 = *(void *)(v1321 + 8);
            uint64_t v1324 = *(void *)(v400 + 832);
            if (v1324) {
              LOWORD(v1324) = *(_WORD *)(v1324 + 8);
            }
            uint64_t v1318 = sub_1CCFDED5C(v400, 98, (const llvm::APInt *)&v2112, v1322, v1323, (uint64_t)v1318, v394, v396, (uint64_t)v1318, v394, v1324);
            unint64_t v394 = v394 & 0xFFFFFFFF00000000 | v1325;
            BOOL v452 = v1310 > 1;
            v1310 >>= 1;
          }
          while (v452);
          uint64_t v1326 = *(void *)(v397 + 80);
          unsigned int v1327 = *(_DWORD *)(v1326 + 32);
          if (v1327 > 0x40) {
            uint64_t v1328 = **(void **)(v1326 + 24);
          }
          else {
            uint64_t v1328 = (uint64_t)(*(void *)(v1326 + 24) << -(char)v1327) >> -(char)v1327;
          }
          if ((v1328 & 0x8000000000000000) == 0)
          {
LABEL_1182:
            v2119[0] = (void *)v8;
            uint64_t v1585 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
            v1585[1] = v1317;
            *((_DWORD *)v1585 + 4) = v1316;
            goto LABEL_867;
          }
          v1578 = (BOOL *)(v392[5] + 16 * v2058);
          int v1579 = (llvm *)*v1578;
          uint64_t v1580 = v1578[1];
          v1582 = sub_1CD7ECDC4(v400, (uint64_t)&v2112, *v1578, v1580, 0, 1.0);
          uint64_t v1584 = *(void *)(v400 + 832);
          if (v1584) {
            LOWORD(v1584) = *(_WORD *)(v1584 + 8);
          }
          uint64_t v1312 = sub_1CCFDED5C(v400, 99, (const llvm::APInt *)&v2112, v1579, v1580, (uint64_t)v1582, v1581, v1583, (uint64_t)v1317, v1316, v1584);
        }
      }
      else
      {
        uint64_t v1311 = v392[5] + 16 * v394;
        uint64_t v1312 = sub_1CD7ECDC4(*(void *)(v9 + 832), (uint64_t)&v2112, *(void *)v1311, *(void *)(v1311 + 8), 0, 1.0);
      }
      v1317 = v1312;
      LODWORD(v1316) = v1313;
      goto LABEL_1182;
    case 240:
      for (uint64_t m = 0; m != 10; m += 2)
      {
        int v1037 = &v2119[m];
        *int v1037 = 0;
        *((_DWORD *)v1037 + 2) = 0;
      }
      unint64_t v1038 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
      uint64_t v1039 = *(void *)(v1038 + 32);
      BOOL v1040 = (void *)(v1039 + 24);
      if (*(_DWORD *)(v1039 + 32) >= 0x41u) {
        BOOL v1040 = (void *)*v1040;
      }
      if (*(_DWORD *)v1040) {
        __int16 v1041 = 2;
      }
      else {
        __int16 v1041 = 1;
      }
      uint64_t v1042 = *(void *)(v9 + 832);
      v2119[0] = *(void **)(v1042 + 192);
      LODWORD(v2119[1]) = *(_DWORD *)(v1042 + 200);
      *(void *)v2120 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)v1038);
      *(_DWORD *)&v2120[8] = v1043;
      *(void *)&v2120[16] = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      LODWORD(v2121) = v1044;
      v2122 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      LODWORD(v2123) = v1045;
      v2124 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96));
      LODWORD(v2125) = v1046;
      uint64_t v1047 = *(void *)(v9 + 832);
      uint64_t v1048 = sub_1CD7FFC1C((llvm *)1, 0);
      uint64_t v1049 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      unint64_t v1050 = v1049 & 0xFFFFFFFFFFFFFFFBLL;
      if (v1049)
      {
        uint64_t v1051 = *(void *)v1049;
        unsigned int v1052 = *(_DWORD *)(*(void *)v1049 + 8);
        if ((v1052 & 0xFE) == 0x12) {
          unsigned int v1052 = *(_DWORD *)(**(void **)(v1051 + 16) + 8);
        }
        LODWORD(v1049) = v1052 >> 8;
      }
      *(_OWORD *)v2117 = 0u;
      v2118[0] = 0u;
      __n128 __p = (__n128)v1050;
      LODWORD(v2115) = v1049;
      BYTE4(v2115) = 0;
      char v1053 = sub_1CD7EA9CC(v1047, 3, 0);
      char v1056 = sub_1CD7F9BA0(v1047, 287, (uint64_t)&v2112, v1048, 1, (uint64_t *)v2119, 5, v1054, 3, 0, (long long *)&__p, v1053, 0, v1041, 0, (long long *)v2117);
      unsigned int v1057 = *(_DWORD *)(v9 + 112);
      if (v1057 >= *(_DWORD *)(v9 + 116)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v1058 = (uint64_t **)(*(void *)(v9 + 104) + 16 * v1057);
      *int v1058 = v1056;
      v1058[1] = v1055;
      ++*(_DWORD *)(v9 + 112);
      uint64_t v541 = (uint64_t)sub_1CD7D7360(v9);
      goto LABEL_1367;
    case 244:
      uint64_t v529 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      uint64_t v530 = (uint64_t *)(*v529 + 24);
      if (*(_DWORD *)(*v529 + 32) >= 0x41u) {
        uint64_t v530 = (uint64_t *)*v530;
      }
      uint64_t v531 = *v530;
      uint64_t v532 = v529[4];
      uint64_t v533 = (uint64_t *)(v532 + 24);
      if (*(_DWORD *)(v532 + 32) >= 0x41u) {
        uint64_t v533 = (uint64_t *)*v533;
      }
      uint64_t v534 = *v533;
      uint64_t v535 = v529[8];
      unsigned int v536 = (void *)(v535 + 24);
      if (*(_DWORD *)(v535 + 32) >= 0x41u) {
        unsigned int v536 = (void *)*v536;
      }
      int v537 = *(_DWORD *)v536;
      uint64_t v538 = *(void *)(v9 + 832);
      unsigned int v539 = sub_1CD7D7360(v9);
      uint64_t v541 = (uint64_t)sub_1CD7FA418(v538, (uint64_t)&v2112, (uint64_t)v539, v540, v531, v534, v537);
      goto LABEL_1367;
    case 249:
      int v25 = (void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      uint64_t v26 = *v25;
      uint64_t v27 = v25[8];
      int v28 = *(unsigned __int8 *)(*v25 + 16);
      if (v28 == 75 || v28 == 5 && *(_WORD *)(v26 + 18) == 47)
      {
        int v29 = *(_DWORD *)(v26 + 20);
        if ((v29 & 0x40000000) != 0) {
          uint64_t v30 = *(uint64_t **)(v26 - 8);
        }
        else {
          uint64_t v30 = (uint64_t *)(v26 - 32 * (v29 & 0x7FFFFFF));
        }
        uint64_t v26 = *v30;
      }
      uint64_t v160 = *(void *)(*(void *)(v9 + 832) + 40);
      LODWORD(v2119[1]) = *(_DWORD *)(*(void *)(*(void *)(*(void *)v160 + 40) + 504) + 4);
      if (LODWORD(v2119[1]) > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v2119);
      }
      v2119[0] = 0;
      long long v161 = llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v26, (llvm::DataLayout *)(*(void *)(*(void *)v160 + 40) + 272), (llvm::APInt *)v2119, 1, 0, 0, v17);
      unsigned int v162 = *((unsigned __int8 *)v161 + 16);
      if (v162 >= 4) {
        goto LABEL_191;
      }
      uint64_t v163 = (uint64_t)v161;
      if (v162 != 3 || (*((unsigned char *)v161 + 34) & 0x40) == 0) {
        goto LABEL_171;
      }
      uint64_t v164 = ***(void ***)v161;
      v2117[0] = v161;
      int v165 = *(_DWORD *)(v164 + 2520);
      if (v165)
      {
        uint64_t v166 = *(void *)(v164 + 2504);
        int v167 = v165 - 1;
        unsigned int v168 = v167 & ((v161 >> 4) ^ (v161 >> 9));
        uint64_t v169 = (void *)(v166 + 24 * v168);
        uint64_t v170 = *v169;
        if (*v169 == v163) {
          goto LABEL_166;
        }
        int v1304 = 0;
        int v1305 = 1;
        while (v170 != -4096)
        {
          if (v1304) {
            BOOL v1306 = 0;
          }
          else {
            BOOL v1306 = v170 == -8192;
          }
          if (v1306) {
            int v1304 = v169;
          }
          unsigned int v1307 = v168 + v1305++;
          unsigned int v168 = v1307 & v167;
          uint64_t v169 = (void *)(v166 + 24 * v168);
          uint64_t v170 = *v169;
          if (*v169 == v163)
          {
LABEL_166:
            if (v169[2] == 12)
            {
              uint64_t v171 = (uint64_t *)v169[1];
              uint64_t v172 = *v171;
              int v173 = *((_DWORD *)v171 + 2);
              if (v172 == 0x7274702E6D766C6CLL && v173 == 1752462689) {
                goto LABEL_191;
              }
            }
LABEL_171:
            int v175 = *(unsigned __int8 *)(v27 + 16);
            if (v175 == 16) {
              int v176 = (unsigned __int8 *)v27;
            }
            else {
              int v176 = 0;
            }
            if (v175 != 84) {
              goto LABEL_184;
            }
            uint64_t v177 = *(void *)(v27 - 32);
            if (!v177) {
              goto LABEL_185;
            }
            if (!*(unsigned char *)(v177 + 16)
              && *(void *)(v177 + 24) == *(void *)(v27 + 72)
              && (*(unsigned char *)(v177 + 33) & 0x20) != 0
              && *(_DWORD *)(v177 + 36) == 247)
            {
              uint64_t v178 = (uint64_t *)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF));
              if (*(unsigned char *)(v178[4] + 16) == 16) {
                int v176 = (unsigned __int8 *)v178[4];
              }
              else {
                int v176 = 0;
              }
              uint64_t v177 = *v178;
            }
            else
            {
LABEL_184:
              uint64_t v177 = 0;
            }
LABEL_185:
            if (v176) {
              uint64_t v179 = v177;
            }
            else {
              uint64_t v179 = v27;
            }
            if (v179 && *(unsigned __int8 *)(v179 + 16) >= 0x1Cu && *(void *)(v179 + 40) != *(void *)(v8 + 40))
            {
LABEL_191:
              sub_1CCFB71D8(v9, v8, 249);
              goto LABEL_192;
            }
            uint64_t v333 = *(void *)(v9 + 832);
            uint64_t v334 = *(void *)v9;
            int v335 = *(_DWORD *)(v9 + 816);
            v2117[0] = 0;
            LODWORD(v2117[1]) = v335;
            if (v334)
            {
              int v336 = (void **)(v334 + 48);
              if (v336 != v2117)
              {
                unsigned int v337 = *v336;
                v2117[0] = v337;
                if (v337) {
                  llvm::MetadataTracking::track((uint64_t)v2117, (unsigned __int8 *)v337, 2);
                }
              }
            }
            unint64_t v338 = sub_1CD7EB364(v333, 0, (const llvm::APInt *)v2117, 0);
            unsigned int v340 = v339;
            if (v2117[0])
            {
              int v341 = *(unsigned __int8 *)v2117[0];
              if ((v341 - 4) > 0x1E)
              {
                if ((v341 - 3) >= 0xFFFFFFFE) {
                  uint64_t v1512 = v2117[0];
                }
                else {
                  uint64_t v1512 = 0;
                }
                if ((v341 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v1513 = (unint64_t)v1512 + 8;
                  goto LABEL_1100;
                }
                if (v341 == 3) {
                  *((void *)v2117[0] + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v2117[0] + 1) & 0x7F) == 2 || *((_DWORD *)v2117[0] + 3))
              {
                uint64_t v1982 = *((void *)v2117[0] + 2);
                if ((v1982 & 4) != 0)
                {
                  unint64_t v1513 = v1982 & 0xFFFFFFFFFFFFFFF8;
                  if (v1513)
                  {
LABEL_1100:
                    __p.n128_u64[0] = (unint64_t)v2117;
                    sub_1CC5FA668(v1513 + 16, &__p);
                  }
                }
              }
            }
            unint64_t v342 = v338;
            int v343 = v340;
            if (v176) {
              unint64_t v342 = sub_1CD7DE5B4(v9, v176);
            }
            int v2038 = v343;
            uint64_t v2050 = (uint64_t)v342;
            unint64_t v344 = v338;
            int v345 = v340;
            if (v179)
            {
              unint64_t v344 = sub_1CD7DE5B4(v9, (unsigned __int8 *)v179);
              int v345 = v346;
            }
            uint64_t v2024 = (uint64_t)v344;
            unsigned int v347 = *(void **)(v9 + 832);
            uint64_t v348 = *(void *)v9;
            unsigned __int32 v349 = *(_DWORD *)(v9 + 816);
            v2117[0] = 0;
            LODWORD(v2117[1]) = v349;
            if (!v348 || (void **)(v348 + 48) == v2117)
            {
              uint64_t v350 = (uint64_t)v347;
            }
            else
            {
              v1136 = *(void **)(v348 + 48);
              v2117[0] = v1136;
              uint64_t v350 = (uint64_t)v347;
              if (v1136)
              {
                llvm::MetadataTracking::track((uint64_t)v2117, (unsigned __int8 *)v1136, 2);
                uint64_t v350 = *(void *)(v9 + 832);
                uint64_t v348 = *(void *)v9;
                unsigned __int32 v349 = *(_DWORD *)(v9 + 816);
              }
            }
            uint64_t v1137 = v338[5] + 16 * v340;
            uint64_t v1138 = *(llvm **)v1137;
            uint64_t v1139 = *(void *)(v1137 + 8);
            __p.n128_u64[0] = 0;
            __p.n128_u32[2] = v349;
            unsigned int v1140 = v1138;
            uint64_t v1141 = v1139;
            if (v348)
            {
              uint64_t v1142 = (__n128 *)(v348 + 48);
              unsigned int v1140 = v1138;
              uint64_t v1141 = v1139;
              if (v1142 != &__p)
              {
                uint64_t v1143 = (unsigned __int8 *)v1142->n128_u64[0];
                __p.n128_u64[0] = (unint64_t)v1143;
                unsigned int v1140 = v1138;
                uint64_t v1141 = v1139;
                if (v1143)
                {
                  llvm::MetadataTracking::track((uint64_t)&__p, v1143, 2);
                  uint64_t v1892 = v338[5] + 16 * v340;
                  unsigned int v1140 = *(llvm **)v1892;
                  uint64_t v1141 = *(void *)(v1892 + 8);
                }
              }
            }
            if (LODWORD(v2119[1]) > 0x40) {
              uint64_t v1144 = *(void *)v2119[0];
            }
            else {
              uint64_t v1144 = (uint64_t)v2119[0] << -(uint64_t)LODWORD(v2119[1]) >> -(uint64_t)LODWORD(v2119[1]);
            }
            uint64_t v1145 = sub_1CD7ECF00(v350, v163, (uint64_t)&__p, v1140, v1141, v1144, 0, 0);
            int v1147 = v1146;
            uint64_t v1148 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
            BOOL v1151 = sub_1CD7EBE80(v347, (const char *)0x14, (const llvm::APInt *)v2117, v1138, v1139, (uint64_t)v1145, v1147, v1150, (uint64_t)v1148, v1149, v2024, v345, v2050, v2038);
            int v1153 = v1152;
            p_p = (__n128 *)v8;
            BOOL v1154 = sub_1CD7E88EC((uint64_t *)(v9 + 8), &p_p);
            v1154[1] = v1151;
            *((_DWORD *)v1154 + 4) = v1153;
            if (__p.n128_u64[0])
            {
              int v1155 = *(unsigned __int8 *)__p.n128_u64[0];
              if ((v1155 - 4) > 0x1E)
              {
                if ((v1155 - 3) >= 0xFFFFFFFE) {
                  unint64_t v1486 = __p.n128_u64[0];
                }
                else {
                  unint64_t v1486 = 0;
                }
                if ((v1155 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v1487 = v1486 + 8;
                  goto LABEL_1069;
                }
                if (v1155 == 3) {
                  *(void *)(__p.n128_u64[0] + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(__p.n128_u64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(__p.n128_u64[0] + 12))
              {
                uint64_t v1981 = *(void *)(__p.n128_u64[0] + 16);
                if ((v1981 & 4) != 0)
                {
                  unint64_t v1487 = v1981 & 0xFFFFFFFFFFFFFFF8;
                  if (v1487)
                  {
LABEL_1069:
                    p_p = &__p;
                    sub_1CC5FA668(v1487 + 16, &p_p);
                  }
                }
              }
            }
            if (!v2117[0]) {
              goto LABEL_192;
            }
            int v1156 = *(unsigned __int8 *)v2117[0];
            if ((v1156 - 4) > 0x1E)
            {
              if ((v1156 - 3) >= 0xFFFFFFFE) {
                v1488 = v2117[0];
              }
              else {
                v1488 = 0;
              }
              if ((v1156 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1158 = (unint64_t)v1488 + 8;
LABEL_1075:
                __p.n128_u64[0] = (unint64_t)v2117;
                sub_1CC5FA668(v1158 + 16, &__p);
                goto LABEL_192;
              }
              if (v1156 == 3) {
                *((void *)v2117[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v2117[0] + 1) & 0x7F) == 2 || *((_DWORD *)v2117[0] + 3))
            {
              uint64_t v1157 = *((void *)v2117[0] + 2);
              if ((v1157 & 4) != 0)
              {
                unint64_t v1158 = v1157 & 0xFFFFFFFFFFFFFFF8;
                if (v1158) {
                  goto LABEL_1075;
                }
              }
            }
LABEL_192:
            if (LODWORD(v2119[1]) >= 0x41)
            {
              uint64_t v180 = v2119[0];
              if (v2119[0]) {
LABEL_194:
              }
                MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
            }
            goto LABEL_867;
          }
        }
        if (v1304) {
          int v1576 = v1304;
        }
        else {
          int v1576 = v169;
        }
      }
      else
      {
        int v1576 = 0;
      }
      uint64_t v169 = sub_1CC5BF31C(v164 + 2504, (uint64_t)v2117, (uint64_t *)v2117, v1576);
      int v1577 = v2117[0];
      v169[1] = 0;
      v169[2] = 0;
      *uint64_t v169 = v1577;
      goto LABEL_166;
    case 252:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v676;
      unsigned int v677 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      char v678 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v679 = *v678;
      uint64_t v680 = v678[1];
      uint64_t v681 = *(void *)(v9 + 832);
      uint64_t v683 = sub_1CD7EB80C(v681, (uint64_t)v677, v682, (uint64_t)&v2112, *v678, v680);
      uint64_t v685 = *(void *)(v681 + 832);
      if (v685) {
        LOWORD(v685) = *(_WORD *)(v685 + 8);
      }
      uint64_t v1997 = v684;
      __int16 v2000 = v685;
      uint64_t v1995 = v683;
      uint64_t v361 = v681;
      uint64_t v362 = 171;
      uint64_t v358 = v679;
      uint64_t v359 = v680;
      goto LABEL_713;
    case 254:
    case 255:
      uint64_t v242 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      __int16 v243 = sub_1CD7D7360(v9);
      int v245 = v244;
      uint64_t v246 = sub_1CD7EF590(*(void **)(v9 + 832), *(void *)(v242 + 24));
      int v248 = v247;
      unint64_t v249 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v250 = *(void **)(v9 + 832);
      uint64_t v252 = sub_1CD7F95FC((uint64_t)v250, v249, v251, 1, 0);
      unsigned int v255 = sub_1CD7FFB18(v250, (const char *)0x1B, (const llvm::APInt *)&v2112, v252, v253, (uint64_t)v243, v245, v254, (uint64_t)v246, v248);
      LODWORD(v243) = v256;
      v2119[0] = (void *)v8;
      int v257 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v257[1] = v255;
      *((_DWORD *)v257 + 4) = v243;
      uint64_t v258 = *(void *)(v9 + 832);
      *(void *)(v258 + 192) = v255;
      *(_DWORD *)(v258 + 200) = 1;
      goto LABEL_867;
    case 256:
      v1071 = sub_1CD7D7360(v9);
      int v1073 = v1072;
      uint64_t v1074 = *(void *)(v9 + 832);
      uint64_t v790 = sub_1CD7F95FC(v1074, 6, 0, 1, 0);
      uint64_t v792 = v1075;
      uint64_t v793 = (void *)v1074;
      uint64_t v794 = 280;
      uint64_t v795 = (uint64_t)v1071;
      int v796 = v1073;
      goto LABEL_680;
    case 257:
      uint64_t v1005 = *(void *)(v9 + 832);
      unint64_t v605 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v1005 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v607 = v1006;
      uint64_t v446 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      int v447 = v1007;
      uint64_t v1008 = *(void *)(v1005 + 832);
      if (v1008) {
        __int16 v453 = *(_WORD *)(v1008 + 8);
      }
      else {
        __int16 v453 = 0;
      }
      uint64_t v455 = (llvm::APFloatBase *)v1005;
      uint64_t v456 = 23;
LABEL_861:
      uint64_t v450 = v605;
LABEL_862:
      uint64_t v454 = v607;
      goto LABEL_863;
    case 262:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v1009;
      unint64_t v1010 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      unint64_t v1012 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v1012;
      uint64_t v359 = v1012[1];
      uint64_t v1013 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v1013) {
        LOWORD(v1013) = *(_WORD *)(v1013 + 8);
      }
      uint64_t v1997 = v1011;
      __int16 v2000 = v1013;
      uint64_t v1995 = (uint64_t)v1010;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 82;
      goto LABEL_713;
    case 263:
    case 278:
    case 284:
    case 301:
    case 309:
    case 312:
      if ((int)v6 > 300)
      {
        if (v6 == 301)
        {
          uint64_t v157 = 77;
        }
        else if (v6 == 309)
        {
          uint64_t v157 = 81;
        }
        else
        {
          uint64_t v157 = 79;
        }
      }
      else if (v6 == 263)
      {
        uint64_t v157 = 76;
      }
      else if (v6 == 278)
      {
        uint64_t v157 = 80;
      }
      else
      {
        uint64_t v157 = 78;
      }
      uint64_t v652 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      unsigned int v654 = v653;
      uint64_t v655 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      int v657 = v656;
      uint64_t v658 = v652[5] + 16 * v654;
      uint64_t v659 = *(void **)v658;
      uint64_t v660 = *(_DWORD **)(v658 + 8);
      v2119[0] = v659;
      v2119[1] = v660;
      if ((_BYTE)v659)
      {
        if (v659 - 15 >= 0x9C) {
          goto LABEL_463;
        }
      }
      else if ((v660[2] & 0xFE) != 0x12)
      {
LABEL_463:
        uint64_t v661 = 0;
        unint64_t v662 = 2;
        goto LABEL_466;
      }
      uint64_t v663 = *(llvm::LLVMContext **)(v9 + 968);
      uint64_t v664 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)v2119);
      unint64_t v662 = sub_1CB882C1C(v663, 2, 0, v664);
      uint64_t v661 = v665;
      uint64_t v659 = v2119[0];
      uint64_t v660 = v2119[1];
LABEL_466:
      uint64_t v666 = sub_1CD7F95FC(*(void *)(v9 + 832), (uint64_t)v659, (uint64_t)v660, v662, v661);
      uint64_t v669 = sub_1CD7FFB18(*(void **)(v9 + 832), (const char *)v157, (const llvm::APInt *)&v2112, v666, v667, (uint64_t)v652, v654, v668, (uint64_t)v655, v657);
LABEL_622:
      uint64_t v300 = v669;
      int v302 = v670;
      v2117[0] = (void *)v8;
      v949 = (uint64_t *)(v9 + 8);
LABEL_623:
      uint64_t v948 = v2117;
      goto LABEL_866;
    case 264:
    case 265:
    case 303:
    case 304:
      uint64_t v181 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v183 = v182;
      int v184 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v2049 = v185;
      int v186 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v2037 = v187;
      uint64_t v188 = sub_1CCFC1D04(v6);
      uint64_t v190 = (const char *)v188;
      uint64_t v191 = *(void *)(v9 + 832);
      uint64_t v192 = v181[5] + 16 * v183;
      uint64_t v193 = *(void **)v192;
      uint64_t v194 = *(void *)(v192 + 8);
      v2119[0] = *(void **)v192;
      v2119[1] = (void *)v194;
      uint64_t v195 = v186[10];
      unint64_t v196 = (void *)(v195 + 24);
      if (*(_DWORD *)(v195 + 32) >= 0x41u) {
        unint64_t v196 = (void *)*v196;
      }
      int v197 = *(llvm::IntegerType **)(v191 + 56);
      if (v188 != 94 && !*(_DWORD *)v196) {
        goto LABEL_199;
      }
      int v259 = v193;
      if ((_BYTE)v193 && v10[v193 + 12]) {
        goto LABEL_1369;
      }
      if ((_BYTE)v193)
      {
        if (v193 - 15 >= 0x9C) {
          goto LABEL_199;
        }
        uint64_t v2023 = v191;
        int v260 = v181;
        uint64_t v261 = (const char *)v188;
        uint64_t v262 = v183;
        int v263 = v186;
        uint64_t v264 = v184;
        uint64_t v265 = v197;
        unsigned __int8 EVT = sub_1CB8C2FBC((unsigned __int8 *)v2119);
      }
      else
      {
        if ((*(_DWORD *)(v194 + 8) & 0xFE) != 0x12) {
          goto LABEL_199;
        }
        uint64_t v2023 = v191;
        int v260 = v181;
        uint64_t v261 = (const char *)v188;
        uint64_t v262 = v183;
        int v263 = v186;
        uint64_t v264 = v184;
        uint64_t v265 = v197;
        unsigned __int8 EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v194 + 24), 0, (BOOL)v193);
      }
      int v197 = v265;
      int v184 = v264;
      int v186 = v263;
      uint64_t v183 = v262;
      uint64_t v190 = v261;
      uint64_t v181 = v260;
      uint64_t v191 = v2023;
      if (EVT && v10[EVT + 12])
      {
        LOBYTE(v193) = v2119[0];
        int v259 = LOBYTE(v2119[0]);
        if (!LOBYTE(v2119[0]))
        {
          int v1135 = LOBYTE(v2119[0]);
          goto LABEL_1375;
        }
LABEL_1369:
        int v1840 = *((unsigned __int8 *)v10 + 390 * v259 + v190 + 3862);
        if (!v1840)
        {
          int v1841 = v197;
          int v1842 = (*(uint64_t (**)(uint64_t *, const char *))(*v10 + 520))(v10, v190);
          int v197 = v1841;
          if (v1842) {
            int v1840 = 0;
          }
          else {
            int v1840 = 2;
          }
        }
        if ((v1840 & 0xFFFFFFFB) != 0)
        {
          int v1135 = LOBYTE(v2119[0]);
LABEL_1375:
          int v2021 = v190 & 0x5D;
          v2013 = v197;
          if (v1135)
          {
            if ((v1135 - 2) < 6)
            {
              unsigned int v1843 = sub_1CB87E200((unsigned __int8 *)v2119);
LABEL_1380:
              int v1845 = v1843;
              if (v1844 == 1) {
              uint64_t v1846 = v1845;
              }
              if (v1845 <= 30)
              {
                switch(v1845)
                {
                  case 0:
                    unint64_t v1847 = 2;
                    goto LABEL_1482;
                  case 15:
                    uint64_t v1846 = 0;
                    unint64_t v1847 = 4;
                    goto LABEL_1482;
                  case 7:
                    uint64_t v1846 = 0;
                    unint64_t v1847 = 3;
                    goto LABEL_1482;
                }
              }
              else
              {
                switch(v1845)
                {
                  case 31:
                    uint64_t v1846 = 0;
                    unint64_t v1847 = 5;
                    goto LABEL_1482;
                  case 63:
                    uint64_t v1846 = 0;
                    unint64_t v1847 = 6;
                    goto LABEL_1482;
                  case 127:
                    uint64_t v1846 = 0;
                    unint64_t v1847 = 7;
                    goto LABEL_1482;
                }
              }
              uint64_t v1846 = llvm::IntegerType::get(v2013, (llvm::LLVMContext *)(v1845 + 1));
              unint64_t v1847 = 0;
LABEL_1482:
              int v2034 = v190 & 0x5E;
              v2117[0] = (void *)v1847;
              v2117[1] = (void *)v1846;
              if (v2021 == 92)
              {
                uint64_t v1923 = sub_1CD7EB744(v191, (uint64_t)v181, v183, (uint64_t)&v2112, v1847, v1846);
                unsigned int v1925 = v1924;
                uint64_t v1926 = sub_1CD7EB744(v191, (uint64_t)v184, v2049, (uint64_t)&v2112, (uint64_t)v2117[0], (uint64_t)v2117[1]);
              }
              else
              {
                uint64_t v1923 = sub_1CD7EB80C(v191, (uint64_t)v181, v183, (uint64_t)&v2112, v1847, v1846);
                unsigned int v1925 = v1928;
                uint64_t v1926 = sub_1CD7EB80C(v191, (uint64_t)v184, v2049, (uint64_t)&v2112, (uint64_t)v2117[0], (uint64_t)v2117[1]);
              }
              v2014 = (llvm::IntegerType *)v1926;
              unsigned int v1929 = v1927;
              unint64_t ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v10, (uint64_t)v2117[0], (uint64_t)v2117[1], *(void *)(**(void **)(v191 + 40) + 40) + 272, 1);
              uint64_t v2007 = v1931;
              v2008 = ShiftAmountTy;
              if (v2034 == 94)
              {
                v2005 = v2117[1];
                v2006 = (llvm *)v2117[0];
                unint64_t v1933 = v183 & 0xFFFFFFFF00000000;
                unint64_t v1934 = v183 & 0xFFFFFFFF00000000 | v1925;
                v1935 = sub_1CD7EBF14(v191, 1, (const llvm::APInt *)&v2112, ShiftAmountTy, v1931, 0, 0);
                uint64_t v1938 = *(void *)(v191 + 832);
                if (v1938) {
                  LOWORD(v1938) = *(_WORD *)(v1938 + 8);
                }
                uint64_t v1923 = (uint64_t)sub_1CCFDED5C(v191, 175, (const llvm::APInt *)&v2112, v2006, (uint64_t)v2005, v1923, v1934, v1937, (uint64_t)v1935, v1936, v1938);
                unsigned int v1925 = v1939;
              }
              else
              {
                unint64_t v1933 = v183 & 0xFFFFFFFF00000000;
              }
              uint64_t v1940 = *(void *)(v191 + 832);
              if (v1940) {
                LOWORD(v1940) = *(_WORD *)(v1940 + 8);
              }
              uint64_t v1941 = sub_1CD7F5D38((void *)v191, v190, (const llvm::APInt *)&v2112, (llvm *)v2117[0], (uint64_t)v2117[1], v1923, v1925 | v1933, v1932, (uint64_t)v2014, v2049 & 0xFFFFFFFF00000000 | v1929, (uint64_t)v186, v2037, SHIDWORD(v2037), v1940);
              unint64_t v1943 = v1942;
              if (v2034 == 94)
              {
                if (v2021 == 92) {
                  uint64_t v1944 = 176;
                }
                else {
                  uint64_t v1944 = 177;
                }
                uint64_t v1945 = (llvm *)v2117[0];
                uint64_t v1946 = v2117[1];
                v1947 = sub_1CD7EBF14(v191, 1, (const llvm::APInt *)&v2112, v2008, v2007, 0, 0);
                uint64_t v1950 = *(void *)(v191 + 832);
                if (v1950) {
                  LOWORD(v1950) = *(_WORD *)(v1950 + 8);
                }
                uint64_t v1941 = sub_1CCFDED5C(v191, v1944, (const llvm::APInt *)&v2112, v1945, (uint64_t)v1946, (uint64_t)v1941, v1943, v1949, (uint64_t)v1947, v1948, v1950);
                unint64_t v1943 = v1943 & 0xFFFFFFFF00000000 | v1951;
              }
              uint64_t v158 = sub_1CD7EB80C(v191, (uint64_t)v1941, v1943, (uint64_t)&v2112, (uint64_t)v2119[0], (uint64_t)v2119[1]);
LABEL_864:
              uint64_t v300 = (uint64_t *)v158;
              int v302 = v159;
LABEL_865:
              v2119[0] = (void *)v8;
              v949 = (uint64_t *)(v9 + 8);
              uint64_t v948 = v2119;
LABEL_866:
              unint64_t v1255 = sub_1CD7E88EC(v949, v948);
              v1255[1] = v300;
              *((_DWORD *)v1255 + 4) = v302;
              goto LABEL_867;
            }
            LOBYTE(v1848) = sub_1CB8C2FBC((unsigned __int8 *)v2119);
            unint64_t v1850 = 0;
            uint64_t v1849 = 0;
          }
          else
          {
            if (*((unsigned char *)v2119[1] + 8) == 13)
            {
              unsigned int v1843 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2119);
              goto LABEL_1380;
            }
            unint64_t v1848 = llvm::EVT::getEVT(*((llvm::EVT **)v2119[1] + 3), 0, (BOOL)v193);
            unint64_t v1850 = v1848 & 0xFFFFFFFFFFFFFF00;
          }
          v2117[0] = (void *)(v1850 | v1848);
          v2117[1] = v1849;
          if ((_BYTE)v1848) {
            unsigned int v1851 = sub_1CB87E200((unsigned __int8 *)v2117);
          }
          else {
            unsigned int v1851 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2117);
          }
          int v1853 = v1851;
          if (v1852 == 1) {
          unint64_t v1854 = v1853;
          }
          if (v1853 <= 30)
          {
            switch(v1853)
            {
              case 0:
                uint64_t v1856 = 2;
                v1855 = (void *)v1854;
                goto LABEL_1481;
              case 15:
                v1855 = 0;
                uint64_t v1856 = 4;
                goto LABEL_1481;
              case 7:
                v1855 = 0;
                uint64_t v1856 = 3;
                goto LABEL_1481;
            }
          }
          else
          {
            switch(v1853)
            {
              case 31:
                v1855 = 0;
                uint64_t v1856 = 5;
LABEL_1481:
                uint64_t v2033 = (uint64_t)v1855;
                v2117[0] = (void *)v1856;
                v2117[1] = v1855;
                v1921 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)v2119);
                unint64_t v1847 = sub_1CB882C1C(v2013, v1856, v2033, v1921);
                uint64_t v1846 = v1922;
                goto LABEL_1482;
              case 63:
                v1855 = 0;
                uint64_t v1856 = 6;
                goto LABEL_1481;
              case 127:
                v1855 = 0;
                uint64_t v1856 = 7;
                goto LABEL_1481;
            }
          }
          v1855 = (void *)llvm::IntegerType::get(v2013, (llvm::LLVMContext *)(v1853 + 1));
          uint64_t v1856 = 0;
          goto LABEL_1481;
        }
      }
LABEL_199:
      uint64_t v198 = *(void *)(v191 + 832);
      if (v198) {
        LOWORD(v198) = *(_WORD *)(v198 + 8);
      }
      uint64_t v158 = (uint64_t)sub_1CD7F5D38((void *)v191, v190, (const llvm::APInt *)&v2112, (llvm *)v2119[0], (uint64_t)v2119[1], (uint64_t)v181, v183, v189, (uint64_t)v184, v2049, (uint64_t)v186, v2037, SHIDWORD(v2037), v198);
      goto LABEL_864;
    case 271:
      int v647 = *(void **)(v9 + 832);
      v2119[0] = sub_1CD7D7360(v9);
      v2119[1] = v648;
      *(void *)v2120 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      *(void *)&v2120[8] = v649;
      uint64_t v650 = v647[104];
      if (v650) {
        uint64_t v651 = *(unsigned __int16 *)(v650 + 8);
      }
      else {
        uint64_t v651 = 0;
      }
      char v1211 = sub_1CD7FF4E8(v647, (const char *)0xD6, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t *)v2119, 2, v651);
      int v1213 = v1212;
      v2119[0] = (void *)v8;
      int v1214 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v1214[1] = v1211;
      *((_DWORD *)v1214 + 4) = v1213;
      uint64_t v1215 = *(void *)(v9 + 832);
      *(void *)(v1215 + 192) = v1211;
      *(_DWORD *)(v1215 + 200) = 0;
      goto LABEL_867;
    case 274:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v387;
      uint64_t v388 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      char v390 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v390;
      uint64_t v359 = v390[1];
      uint64_t v391 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v391) {
        LOWORD(v391) = *(_WORD *)(v391 + 8);
      }
      uint64_t v1997 = v389;
      __int16 v2000 = v391;
      uint64_t v1995 = (uint64_t)v388;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 168;
      goto LABEL_713;
    case 275:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v422;
      unint64_t v423 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      __int16 v425 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v425;
      uint64_t v359 = v425[1];
      uint64_t v426 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v426) {
        LOWORD(v426) = *(_WORD *)(v426 + 8);
      }
      uint64_t v1997 = v424;
      __int16 v2000 = v426;
      uint64_t v1995 = (uint64_t)v423;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 167;
      goto LABEL_713;
    case 276:
    case 277:
    case 307:
    case 308:
      uint64_t v200 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v202 = v201;
      unsigned int v203 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v205 = v204;
      int v206 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      uint64_t v208 = v207;
      uint64_t v209 = *(void **)(v9 + 832);
      uint64_t v210 = sub_1CCFC1D04(v6);
      uint64_t v212 = v200[5] + 16 * v202;
      unsigned int v213 = *(llvm **)v212;
      uint64_t v214 = *(void *)(v212 + 8);
      uint64_t v215 = v209[104];
      if (v215) {
        LOWORD(v215) = *(_WORD *)(v215 + 8);
      }
      uint64_t v2001 = v208;
      __int16 v2002 = v215;
      uint64_t v1996 = v205;
      uint64_t v1999 = (uint64_t)v206;
      uint64_t v1994 = (uint64_t)v203;
      int v216 = v209;
      uint64_t v217 = (uint64_t)v200;
LABEL_384:
      uint64_t v158 = (uint64_t)sub_1CD7F5D38(v216, (const char *)v210, (const llvm::APInt *)&v2112, v213, v214, v217, v202, v211, v1994, v1996, v1999, v2001, SHIDWORD(v2001), v2002);
      goto LABEL_864;
    case 279:
      uint64_t v457 = *(void *)(v9 + 832);
      uint64_t v458 = (llvm *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v457 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v460 = v459;
      uint64_t v461 = v457;
      int v462 = 25;
LABEL_607:
      uint64_t v158 = (uint64_t)sub_1CD7F330C(v461, v462, (uint64_t)&v2112, v458, v460);
      goto LABEL_864;
    case 282:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v970;
      v971 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v973 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v973;
      uint64_t v359 = v973[1];
      uint64_t v974 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v974) {
        LOWORD(v974) = *(_WORD *)(v974 + 8);
      }
      uint64_t v1997 = v972;
      __int16 v2000 = v974;
      uint64_t v1995 = (uint64_t)v971;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 86;
      goto LABEL_713;
    case 283:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v937;
      BOOL v938 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v940 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v940;
      uint64_t v359 = v940[1];
      uint64_t v941 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v941) {
        LOWORD(v941) = *(_WORD *)(v941 + 8);
      }
      uint64_t v1997 = v939;
      __int16 v2000 = v941;
      uint64_t v1995 = (uint64_t)v938;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 84;
      goto LABEL_713;
    case 285:
      uint64_t v1059 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
      uint64_t v1060 = sub_1CD7D7360(v9);
      int v1062 = (int)v1061;
      v2117[0] = v1060;
      v2117[1] = v1061;
      int v1063 = (*(uint64_t (**)(uint64_t *))(*v10 + 2160))(v10);
      uint64_t v1064 = *(void *)(v9 + 832);
      if (v1063)
      {
        uint64_t v1065 = sub_1CCFB1990(v1064, (uint64_t)&v2112, (uint64_t *)v2117);
      }
      else
      {
        unint64_t v1262 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(v1064 + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
        uint64_t v1264 = v1263;
        unint64_t v1265 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 776))(v10, v1059);
        unsigned __int8 v1266 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272), *(llvm::Type **)v1265, 0);
        uint64_t v1267 = *(void *)(v9 + 832);
        v1269 = sub_1CD7DE5B4(v9, (unsigned __int8 *)v1265);
        *(void *)&long long v2063 = v1265 & 0xFFFFFFFFFFFFFFFBLL;
        *((void *)&v2063 + 1) = 0;
        char v2065 = 0;
        unsigned int v1270 = *(_DWORD *)(*(void *)v1265 + 8);
        if ((v1270 & 0xFE) == 0x12) {
          unsigned int v1270 = *(_DWORD *)(**(void **)(*(void *)v1265 + 16) + 8);
        }
        unsigned int v2064 = v1270 >> 8;
        *(_OWORD *)v2119 = 0u;
        *(_OWORD *)v2120 = 0u;
        uint64_t v1065 = (uint64_t)sub_1CD7F00F8(v1267, v1262, v1264, (uint64_t)&v2112, (uint64_t)v1060, v1062, (uint64_t)v1269, v1268, &v2063, v1266 | 0x100u, (v1266 | 0x100uLL) >> 32, 4, (long long *)v2119, 0);
      }
      uint64_t v1271 = v1065;
      uint64_t v1272 = v1066;
      if ((*(unsigned int (**)(uint64_t *))(*v10 + 784))(v10))
      {
        uint64_t v1271 = (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t, unsigned __int8 **))(*v10 + 2168))(v10, *(void *)(v9 + 832), v1271, v1272, &v2112);
        LODWORD(v1272) = v1273;
      }
      uint64_t v1274 = *(void *)(v9 + 832);
      *(void *)(v1274 + 192) = v1060;
      *(_DWORD *)(v1274 + 200) = v1062;
      v2119[0] = (void *)v8;
      uint64_t v1275 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v1275[1] = v1271;
      *((_DWORD *)v1275 + 4) = v1272;
      goto LABEL_867;
    case 286:
      uint64_t v598 = *(void *)(*(void *)(*(void *)(v9 + 832) + 40) + 56);
      v599 = sub_1CD7D7360(v9);
      int v601 = (int)v600;
      v2117[0] = v599;
      v2117[1] = v600;
      if ((*(unsigned int (**)(uint64_t *))(*v10 + 2160))(v10)) {
        uint64_t v602 = sub_1CCFB1990(*(void *)(v9 + 832), (uint64_t)&v2112, (uint64_t *)v2117);
      }
      else {
        uint64_t v602 = (uint64_t)sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      }
      uint64_t v1190 = v602;
      unsigned int v1191 = v603;
      __p.n128_u64[0] = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      int v1192 = *((_DWORD *)sub_1CD78CBDC((_DWORD *)(*(void *)(v9 + 912) + 176), &__p) + 2);
      *(_DWORD *)(v598 + 64) = v1192;
      uint64_t v1193 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
      unsigned __int8 v1194 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 32))(v10, v1193 + 272, *(unsigned int *)(v1193 + 276));
      v1195 = sub_1CD7ED208(*(void *)(v9 + 832), v1192, (llvm *)v1194, 0, 0);
      unsigned int v1197 = v1196;
      uint64_t v1198 = *(void *)(v9 + 832);
      FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(v1198 + 40) + 432), v1192);
      *(void *)&long long v2060 = (unint64_t)FixedStack | 4;
      *((void *)&v2060 + 1) = 0;
      char v2062 = 0;
      if (FixedStack) {
        int v1200 = *((_DWORD *)FixedStack + 3);
      }
      else {
        int v1200 = 0;
      }
      int v2061 = v1200;
      *(_OWORD *)v2119 = 0u;
      *(_OWORD *)v2120 = 0u;
      __int16 v645 = sub_1CD78ED48(v1198, (uint64_t)v599, v601, (uint64_t)&v2112, v1190, v1191, (uint64_t)v1195, v1197, &v2060, 0, 0, 4, (long long *)v2119);
LABEL_778:
      unint64_t v595 = v645;
      int v590 = v646;
      v2119[0] = (void *)v8;
      v1201 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v1201[1] = v595;
      *((_DWORD *)v1201 + 4) = v590;
LABEL_779:
      uint64_t v1202 = *(void *)(v9 + 832);
      *(void *)(v1202 + 192) = v595;
      *(_DWORD *)(v1202 + 200) = v590;
      goto LABEL_867;
    case 287:
      unint64_t v1102 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v1104 = v1103;
      uint64_t v983 = *(void *)(v9 + 832);
      v1106 = sub_1CD7D7360(v9);
      uint64_t v1108 = *(void *)(v983 + 832);
      if (v1108) {
        LOWORD(v1108) = *(_WORD *)(v1108 + 8);
      }
      int v988 = sub_1CCFDED5C(v983, 268, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v1106, v1105, v1107, (uint64_t)v1102, v1104, v1108);
      goto LABEL_955;
    case 288:
      uint64_t v784 = sub_1CD7D7360(v9);
      int v786 = v785;
      unint64_t v787 = sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v788 = *(void *)(v9 + 832);
      uint64_t v790 = sub_1CD7F95FC(v788, v787, v789, 1, 0);
      uint64_t v792 = v791;
      uint64_t v793 = (void *)v788;
      uint64_t v794 = 267;
      uint64_t v795 = (uint64_t)v784;
      int v796 = v786;
LABEL_680:
      uint64_t v1076 = sub_1CD7FFAA8(v793, (const char *)v794, (const llvm::APInt *)&v2112, v790, v792, v795, v796);
      int v1078 = v1077;
      v2119[0] = (void *)v8;
      v1079 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2119);
      v1079[1] = v1076;
      *((_DWORD *)v1079 + 4) = v1078;
      uint64_t v1080 = *(void *)(v9 + 832);
      *(void *)(v1080 + 192) = v1076;
      *(_DWORD *)(v1080 + 200) = 1;
      goto LABEL_867;
    case 300:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v1081;
      v1082 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v1084 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v1084;
      uint64_t v359 = v1084[1];
      uint64_t v1085 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v1085) {
        LOWORD(v1085) = *(_WORD *)(v1085 + 8);
      }
      uint64_t v1997 = v1083;
      __int16 v2000 = v1085;
      uint64_t v1995 = (uint64_t)v1082;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 83;
      goto LABEL_713;
    case 305:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v363;
      uint64_t v364 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      int v366 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v366;
      uint64_t v359 = v366[1];
      uint64_t v367 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v367) {
        LOWORD(v367) = *(_WORD *)(v367 + 8);
      }
      uint64_t v1997 = v365;
      __int16 v2000 = v367;
      uint64_t v1995 = (uint64_t)v364;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 170;
      goto LABEL_713;
    case 306:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v1000;
      uint64_t v1001 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      v1003 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v1003;
      uint64_t v359 = v1003[1];
      uint64_t v1004 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v1004) {
        LOWORD(v1004) = *(_WORD *)(v1004 + 8);
      }
      uint64_t v1997 = v1002;
      __int16 v2000 = v1004;
      uint64_t v1995 = (uint64_t)v1001;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 169;
      goto LABEL_713;
    case 310:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v352;
      uint64_t v354 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      unsigned int v357 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v357;
      uint64_t v359 = v357[1];
      uint64_t v360 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v360) {
        LOWORD(v360) = *(_WORD *)(v360 + 8);
      }
      uint64_t v1997 = v355;
      __int16 v2000 = v360;
      uint64_t v1995 = (uint64_t)v354;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 87;
      goto LABEL_713;
    case 311:
      uint64_t v351 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v353 = v950;
      uint64_t v951 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v953 = (uint64_t *)(v351[5] + 16 * v353);
      uint64_t v358 = *v953;
      uint64_t v359 = v953[1];
      uint64_t v954 = *(void *)(*(void *)(v9 + 832) + 832);
      if (v954) {
        LOWORD(v954) = *(_WORD *)(v954 + 8);
      }
      uint64_t v1997 = v952;
      __int16 v2000 = v954;
      uint64_t v1995 = (uint64_t)v951;
      uint64_t v361 = *(void *)(v9 + 832);
      uint64_t v362 = 85;
      goto LABEL_713;
    case 313:
      sub_1CD7E3C1C(v9, v8);
      goto LABEL_867;
    case 314:
      sub_1CD7E3B1C(v9, v8);
      goto LABEL_867;
    case 315:
      sub_1CD7E3A1C(v9, v8);
      goto LABEL_867;
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
      sub_1CD7E4F18(v9, v8, v6);
      goto LABEL_867;
    case 382:
      uint64_t v415 = *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40);
      uint64_t v416 = *(void *)(v8 - 32);
      if (v416
        && !*(unsigned char *)(v416 + 16)
        && *(void *)(v416 + 24) == *(void *)(v8 + 72)
        && *(_DWORD *)(v416 + 36) == 382)
      {
        goto LABEL_1539;
      }
      unsigned int v417 = *(unsigned __int8 *)(v8 + 16);
      BOOL v418 = v417 >= 0x1C;
      unsigned int v419 = v417 - 28;
      if (!v418) {
        unsigned int v419 = *(unsigned __int16 *)(v8 + 18);
      }
      if (v419 != 47) {
        goto LABEL_1539;
      }
      int v420 = *(_DWORD *)(v8 + 20);
      unint64_t v421 = (v420 & 0x40000000) != 0 ? *(uint64_t **)(v8 - 8) : (uint64_t *)(v8 - 32 * (v420 & 0x7FFFFFF));
      uint64_t v1480 = *v421;
      if (!*v421) {
        goto LABEL_1539;
      }
      int v1481 = *(unsigned __int8 *)(v1480 + 16);
      if (v1481 != 62 && (v1481 != 5 || *(_WORD *)(v1480 + 18) != 34)) {
        goto LABEL_1539;
      }
      uint64_t v1482 = 64;
      if (v1481 != 62) {
        uint64_t v1482 = 24;
      }
      int v1483 = *(_DWORD *)(v1480 + 20);
      if ((v1483 & 0x7FFFFFF) != 2) {
        goto LABEL_1539;
      }
      uint64_t v1484 = *(llvm::Type **)(v1480 + v1482);
      if (*((unsigned char *)v1484 + 8) != 19) {
        goto LABEL_1539;
      }
      uint64_t v1485 = (v1483 & 0x40000000) != 0 ? *(uint64_t **)(v1480 - 8) : (uint64_t *)(v1480 - 64);
      uint64_t v1917 = *v1485;
      unsigned int v1918 = *(unsigned __int8 *)(*v1485 + 16);
      if (!v1917 || v1918 > 0x14) {
        goto LABEL_1539;
      }
      if (v1918 == 16)
      {
        uint64_t v1920 = *(unsigned int *)(v1917 + 32);
        if (v1920 >= 0x41)
        {
          int v1985 = 0;
          int64_t v1986 = (unint64_t)(v1920 + 63) >> 6;
          do
          {
            BOOL v452 = v1986-- < 1;
            if (v452) {
              break;
            }
            unint64_t v1987 = *(void *)(*(void *)(v1917 + 24) + 8 * v1986);
            v1985 += __clz(v1987);
          }
          while (!v1987);
          int v1988 = v1920 | 0xFFFFFFC0;
          if ((v1920 & 0x3F) == 0) {
            int v1988 = 0;
          }
          if (v1985 + v1988 == v1920) {
            goto LABEL_1531;
          }
        }
        else if (!*(void *)(v1917 + 24))
        {
          goto LABEL_1531;
        }
      }
      else if (v1918 == 17)
      {
        if (sub_1CB844168(v1917, 0.0)) {
          goto LABEL_1531;
        }
      }
      else if (v1918 - 18 < 3 || v1918 == 13)
      {
        goto LABEL_1531;
      }
      if ((sub_1CC03F414((uint64_t)v2119, (llvm::Constant *)v1917) & 1) == 0) {
        goto LABEL_1539;
      }
LABEL_1531:
      LODWORD(v2119[1]) = 64;
      v2119[0] = (void *)1;
      int v1963 = *(_DWORD *)(v1480 + 20);
      if ((v1963 & 0x40000000) != 0) {
        uint64_t v1964 = *(void *)(v1480 - 8);
      }
      else {
        uint64_t v1964 = v1480 - 32 * (v1963 & 0x7FFFFFF);
      }
      if (sub_1CBF53154((llvm::APInt *)v2119, *(unsigned __int8 **)(v1964 + 32))) {
        sub_1CC5CA218((llvm::DataLayout *)(v415 + 272), v1484);
      }
      if (LODWORD(v2119[1]) >= 0x41 && v2119[0]) {
        MEMORY[0x1D25D9CB0](v2119[0], 0x1000C8000313F17);
      }
LABEL_1539:
      v1965 = (void *)sub_1CB87DC14((uint64_t)v10, *(void *)(**(void **)(*(void *)(v9 + 832) + 40) + 40) + 272, *(llvm::EVT **)v8, 0);
      uint64_t v1967 = (uint64_t)v1966;
      v2119[0] = v1965;
      v2119[1] = v1966;
      uint64_t v1968 = *(void *)(v9 + 832);
      if ((_BYTE)v1965) {
        unsigned int v1969 = sub_1CB87E200((unsigned __int8 *)v2119);
      }
      else {
        unsigned int v1969 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2119);
      }
      unsigned int v1971 = v1969;
      if (v1970 == 1) {
      unsigned int v2109 = v1971;
      }
      if (v1971 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v2108);
      }
      unint64_t v1972 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1971;
      if (!v1971) {
        LOBYTE(v1972) = 0;
      }
      v2108 = (void *)(v1972 & 1);
      uint64_t v1973 = sub_1CD7877A0(v1968, (const llvm::APInt *)&v2112, (uint64_t)v1965, v1967, (uint64_t)&v2108);
      int v1975 = v1974;
      v2117[0] = (void *)v8;
      v1976 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2117);
      v1976[1] = v1973;
      *((_DWORD *)v1976 + 4) = v1975;
      if (v2109 < 0x41) {
        goto LABEL_867;
      }
      uint64_t v180 = v2108;
      if (!v2108) {
        goto LABEL_867;
      }
      goto LABEL_194;
    case 383:
      long long v824 = (uint64_t *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      uint64_t v825 = *v824;
      char v826 = (unsigned __int8 *)v824[4];
      long long v827 = sub_1CD7D7360(v9);
      uint64_t v829 = v828;
      uint64_t v830 = sub_1CD7EF590(*(void **)(v9 + 832), *(void *)(v825 + 24));
      uint64_t v832 = v831;
      uint64_t v833 = *(void *)(v9 + 832);
      long long v834 = sub_1CD7DE5B4(v9, v826);
      uint64_t v837 = *(void *)(v833 + 832);
      if (v837) {
        LOWORD(v837) = *(_WORD *)(v837 + 8);
      }
      *(void *)(v833 + 192) = sub_1CD7F5D38((void *)v833, (const char *)0x1C, (const llvm::APInt *)&v2112, (llvm *)1, 0, (uint64_t)v827, v829, v836, (uint64_t)v830, v832, (uint64_t)v834, v835, SHIDWORD(v835), v837);
      *(_DWORD *)(v833 + 200) = v838;
      goto LABEL_867;
    case 384:
      if (*(_DWORD *)(**(void **)(v9 + 832) + 472) != 42) {
        goto LABEL_867;
      }
      v2119[0] = v2120;
      v2119[1] = (void *)0x800000000;
      char v110 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v112 = v111;
      int v113 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      int v115 = v114;
      uint64_t v2047 = sub_1CD7F95FC(*(void *)(v9 + 832), 1, 0, 172, 0);
      uint64_t v117 = v116;
      unsigned int v119 = sub_1CD7D7360(v9);
      if (LODWORD(v2119[1]) >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v120 = (uint64_t **)((char *)v2119[0] + 16 * LODWORD(v2119[1]));
      *unint64_t v120 = v110;
      v120[1] = v112;
      unsigned int v121 = LODWORD(v2119[1]) + 1;
      LODWORD(v2119[1]) = v121;
      if (v121 >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v122 = (uint64_t **)((char *)v2119[0] + 16 * v121);
      *uint64_t v122 = v113;
      v122[1] = v115;
      unsigned int v123 = LODWORD(v2119[1]) + 1;
      LODWORD(v2119[1]) = v123;
      if (v123 >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v124 = (uint64_t **)((char *)v2119[0] + 16 * v123);
      *int v124 = v119;
      v124[1] = v118;
      ++LODWORD(v2119[1]);
      int v125 = sub_1CD801044(*(void *)(v9 + 832), 39, (uint64_t)&v2112, v2047, v117, (uint64_t *)v2119[0], LODWORD(v2119[1]));
      uint64_t v126 = *(void *)(v9 + 832);
      *(void *)(v126 + 192) = v125;
      *(_DWORD *)(v126 + 200) = 0;
      v2117[0] = (void *)v8;
      unint64_t v127 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2117);
      v127[1] = v125;
      *((_DWORD *)v127 + 4) = 0;
      int v106 = (char *)v2119[0];
      if (v2119[0] == v2120) {
        goto LABEL_867;
      }
      goto LABEL_148;
    case 385:
      if (*(_DWORD *)(**(void **)(v9 + 832) + 472) != 42) {
        goto LABEL_867;
      }
      v2119[0] = v2120;
      v2119[1] = (void *)0x800000000;
      int v83 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v85 = v84;
      unsigned int v86 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v88 = v87;
      int v89 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
      unint64_t v91 = v90;
      uint64_t v92 = sub_1CD7F95FC(*(void *)(v9 + 832), 1, 0, 172, 0);
      uint64_t v2022 = v93;
      uint64_t v2036 = v92;
      unint64_t v95 = sub_1CD7D7360(v9);
      if (LODWORD(v2119[1]) >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v96 = (uint64_t **)((char *)v2119[0] + 16 * LODWORD(v2119[1]));
      *int v96 = v83;
      v96[1] = v85;
      unsigned int v97 = LODWORD(v2119[1]) + 1;
      LODWORD(v2119[1]) = v97;
      if (v97 >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v98 = (uint64_t **)((char *)v2119[0] + 16 * v97);
      *int v98 = v86;
      v98[1] = v88;
      unsigned int v99 = LODWORD(v2119[1]) + 1;
      LODWORD(v2119[1]) = v99;
      if (v99 >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v100 = (uint64_t **)((char *)v2119[0] + 16 * v99);
      *uint64_t v100 = v89;
      v100[1] = v91;
      unsigned int v101 = LODWORD(v2119[1]) + 1;
      LODWORD(v2119[1]) = v101;
      if (v101 >= HIDWORD(v2119[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v102 = (uint64_t **)((char *)v2119[0] + 16 * v101);
      _DWORD *v102 = v95;
      v102[1] = v94;
      ++LODWORD(v2119[1]);
      uint64_t v103 = sub_1CD801044(*(void *)(v9 + 832), 40, (uint64_t)&v2112, v2036, v2022, (uint64_t *)v2119[0], LODWORD(v2119[1]));
      uint64_t v104 = *(void *)(v9 + 832);
      *(void *)(v104 + 192) = v103;
      *(_DWORD *)(v104 + 200) = 0;
      v2117[0] = (void *)v8;
      unsigned int v105 = sub_1CD7E88EC((uint64_t *)(v9 + 8), v2117);
      v105[1] = v103;
      *((_DWORD *)v105 + 4) = 0;
      int v106 = (char *)v2119[0];
      if (v2119[0] == v2120) {
        goto LABEL_867;
      }
      goto LABEL_148;
    case 638:
    case 639:
      uint64_t v292 = *(void *)(v9 + 832);
      uint64_t v293 = *(void *)(v292 + 8);
      uint64_t v294 = sub_1CD7D7360(v9);
      uint64_t v296 = v295;
      __int16 v297 = sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
      uint64_t v299 = v298;
      sub_1CD7DE5B4(v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      uint64_t v300 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(void *)v293 + 88))(v293, v292, &v2112, v294, v296, v297, v299);
      int v302 = v301;
      uint64_t v303 = *(void *)(v9 + 832);
      *(void *)(v303 + 192) = v300;
      *(_DWORD *)(v303 + 200) = v301;
      goto LABEL_865;
    default:
      if (v6 == 11060) {
        goto LABEL_867;
      }
LABEL_18:
      uint64_t v22 = v9;
      uint64_t v23 = v8;
      uint64_t v24 = v6;
      goto LABEL_19;
  }
}